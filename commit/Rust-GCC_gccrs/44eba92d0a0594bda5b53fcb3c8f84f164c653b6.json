{"sha": "44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRlYmE5MmQwYTA1OTRiZGE1YjUzZmNiM2M4Zjg0ZjE2NGM2NTNiNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-14T19:26:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-14T19:26:49Z"}, "message": "nvptx.h (PARM_BOUNDARY): Set to 32.\n\n\tgcc/\n\t* config/nvptx/nvptx.h (PARM_BOUNDARY): Set to 32.\n\t* config/nvptx/nvptx.c (PASS_IN_REG_P, RETURN_IN_REG_P): Delete.\n\t(pass_in_memory, promote_arg, promote_return): New.\n\t(nvptx_function_arg_boundary): Delete.\n\t(nvptx_function_value): Use promote_return.\n\t(nvptx_pass_by_reference): Use pass_in_memory.\n\t(nvptx_return_in_memory): Use pass_in_memory.\n\t(nvptx_promote_function_mode): Use promote_arg.\n\t(write_arg): Adjust arg splitting logic.\n\t(write_return): Check and clear ret_reg_mode, if needed.\n\t(write_fn_proto, nvptx_declare_function_name): Adust write_return\n\tcalls.\n\t(TARGET_RUNCTION_ARG_BOUNDARY,\n\tTARGET_FUNCTION_ARG_ROUND_BOUNDARY): Don't override.\n\n\tgcc/testsuite/\n\t* g++.dg/abi/nvptx-nrv1.C: New.\n\t* g++.dg/abi/nvptx-ptrmem1.C: New.\n\t* gcc.target/nvptx/abi-complex-arg.c: New.\n\t* gcc.target/nvptx/abi-complex-ret.c: New.\n\t* gcc.target/nvptx/abi-enum-arg.c: New.\n\t* gcc.target/nvptx/abi-enum-ret.c: New.\n\t* gcc.target/nvptx/abi-knr-arg.c: New.\n\t* gcc.target/nvptx/abi-knr-ret.c: New.\n\t* gcc.target/nvptx/abi-scalar-arg.c: New.\n\t* gcc.target/nvptx/abi-scalar-ret.c: New.\n\t* gcc.target/nvptx/abi-struct-arg.c: New.\n\t* gcc.target/nvptx/abi-struct-ret.c: New.\n\t* gcc.target/nvptx/abi-vararg-1.c: New.\n\t* gcc.target/nvptx/abi-vararg-2.c: New.\n\t* gcc.target/nvptx/abi-vect-arg.c: New.\n\t* gcc.target/nvptx/abi-vect-ret.c: New.\n\nFrom-SVN: r231628", "tree": {"sha": "0db4672849e10a27a980f0dffce1ba6e0e14c9cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db4672849e10a27a980f0dffce1ba6e0e14c9cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54d62f5148febdf714fa374a10a72c73850ed6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d62f5148febdf714fa374a10a72c73850ed6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d62f5148febdf714fa374a10a72c73850ed6bb"}], "stats": {"total": 1831, "additions": 1718, "deletions": 113}, "files": [{"sha": "e1fcab6242c91aaf94d2524f8a01fa0854f62b25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -1,3 +1,20 @@\n+2015-12-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.h (PARM_BOUNDARY): Set to 32.\n+\t* config/nvptx/nvptx.c (PASS_IN_REG_P, RETURN_IN_REG_P): Delete.\n+\t(pass_in_memory, promote_arg, promote_return): New.\n+\t(nvptx_function_arg_boundary): Delete.\n+\t(nvptx_function_value): Use promote_return.\n+\t(nvptx_pass_by_reference): Use pass_in_memory.\n+\t(nvptx_return_in_memory): Use pass_in_memory.\n+\t(nvptx_promote_function_mode): Use promote_arg.\n+\t(write_arg): Adjust arg splitting logic.\n+\t(write_return): Check and clear ret_reg_mode, if needed.\n+\t(write_fn_proto, nvptx_declare_function_name): Adust write_return\n+\tcalls.\n+\t(TARGET_RUNCTION_ARG_BOUNDARY,\n+\tTARGET_FUNCTION_ARG_ROUND_BOUNDARY): Don't override.\n+\n 2015-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/68833"}, {"sha": "bb4c384a5d2c9c01946afa5ac5f83f9671721171", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 118, "deletions": 112, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -365,18 +365,6 @@ nvptx_emit_joining (unsigned mask, bool is_call)\n     }\n }\n \n-#define PASS_IN_REG_P(MODE, TYPE)\t\t\t\t\\\n-  ((GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\t\\\n-    || GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\\\n-    || ((GET_MODE_CLASS (MODE) == MODE_COMPLEX_INT\t\t\\\n-\t || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)\t\\\n-\t&& !AGGREGATE_TYPE_P (TYPE)))\t\t\t\t\\\n-   && (MODE) != TImode)\n-\n-#define RETURN_IN_REG_P(MODE)\t\t\t\\\n-  ((GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n-    || GET_MODE_CLASS (MODE) == MODE_FLOAT)\t\\\n-   && GET_MODE_SIZE (MODE) <= 8)\n \f\n /* Perform a mode promotion for a function argument with MODE.  Return\n    the promoted mode.  */\n@@ -389,6 +377,61 @@ arg_promotion (machine_mode mode)\n   return mode;\n }\n \n+/* Determine whether MODE and TYPE (possibly NULL) should be passed or\n+   returned in memory.  Integer and floating types supported by the\n+   machine are passed in registers, everything else is passed in\n+   memory.  Complex types are split.  */\n+\n+static bool\n+pass_in_memory (machine_mode mode, const_tree type, bool for_return)\n+{\n+  if (type)\n+    {\n+      if (AGGREGATE_TYPE_P (type))\n+\treturn true;\n+      if (TREE_CODE (type) == VECTOR_TYPE)\n+\treturn true;\n+    }\n+\n+  if (!for_return && COMPLEX_MODE_P (mode))\n+    /* Complex types are passed as two underlying args.  */\n+    mode = GET_MODE_INNER (mode);\n+\n+  if (GET_MODE_CLASS (mode) != MODE_INT\n+      && GET_MODE_CLASS (mode) != MODE_FLOAT)\n+    return true;\n+\n+  if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n+    return true;\n+\n+  return false;\n+}\n+\n+/* A non-memory argument of mode MODE is being passed, determine the mode it\n+   should be promoted to.  This is also used for determining return\n+   type promotion.  */\n+\n+static machine_mode\n+promote_arg (machine_mode mode, bool prototyped)\n+{\n+  if (!prototyped && mode == SFmode)\n+    /* K&R float promotion for unprototyped functions.  */\n+    mode = DFmode;\n+  else if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (SImode))\n+    mode = SImode;\n+\n+  return mode;\n+}\n+\n+/* A non-memory return type of MODE is being returned.  Determine the\n+   mode it should be promoted to.  */\n+\n+static machine_mode\n+promote_return (machine_mode mode)\n+{\n+  return promote_arg (mode, true);\n+}\n+\n /* Implement TARGET_FUNCTION_ARG.  */\n \n static rtx\n@@ -450,40 +493,6 @@ nvptx_strict_argument_naming (cumulative_args_t cum_v)\n   return cum->fntype == NULL_TREE || stdarg_p (cum->fntype);\n }\n \n-/* Implement TARGET_FUNCTION_ARG_BOUNDARY.  */\n-\n-static unsigned int\n-nvptx_function_arg_boundary (machine_mode mode, const_tree type)\n-{\n-  unsigned int boundary = type ? TYPE_ALIGN (type) : GET_MODE_BITSIZE (mode);\n-\n-  if (boundary > UNITS_PER_WORD * BITS_PER_UNIT)\n-    boundary = UNITS_PER_WORD * BITS_PER_UNIT;\n-  else if (mode == BLKmode)\n-    {\n-      HOST_WIDE_INT size = int_size_in_bytes (type);\n-\n-      if (size > UNITS_PER_WORD)\n-\tboundary = UNITS_PER_WORD;\n-      else\n-\t{\n-\t  /* Keep rounding up until only 1 bit set.  */\n-\t  unsigned lsb = (unsigned) size;\n-\n-\t  boundary = 0;\n-\t  do\n-\t    {\n-\t      boundary += lsb;\n-\t      lsb = boundary & -boundary;\n-\t    }\n-\t  while (boundary != lsb);\n-\t}\n-      boundary *= BITS_PER_UNIT;\n-    }\n-\n-  return boundary;\n-}\n-\n /* Implement TARGET_LIBCALL_VALUE.  */\n \n static rtx\n@@ -501,13 +510,11 @@ nvptx_libcall_value (machine_mode mode, const_rtx)\n    where function FUNC returns or receives a value of data type TYPE.  */\n \n static rtx\n-nvptx_function_value (const_tree type, const_tree func ATTRIBUTE_UNUSED,\n+nvptx_function_value (const_tree type, const_tree ARG_UNUSED (func),\n \t\t      bool outgoing)\n {\n-  int unsignedp = TYPE_UNSIGNED (type);\n-  machine_mode orig_mode = TYPE_MODE (type);\n-  machine_mode mode = promote_function_mode (type, orig_mode,\n-\t\t\t\t\t     &unsignedp, NULL_TREE, 1);\n+  machine_mode mode = promote_return (TYPE_MODE (type));\n+\n   if (outgoing)\n     return gen_rtx_REG (mode, NVPTX_RETURN_REGNUM);\n \n@@ -529,43 +536,25 @@ static bool\n nvptx_pass_by_reference (cumulative_args_t ARG_UNUSED (cum), machine_mode mode,\n \t\t\t const_tree type, bool ARG_UNUSED (named))\n {\n-  return !PASS_IN_REG_P (mode, type);\n+  return pass_in_memory (mode, type, false);\n }\n \n /* Implement TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n nvptx_return_in_memory (const_tree type, const_tree)\n {\n-  machine_mode mode = TYPE_MODE (type);\n-  if (!RETURN_IN_REG_P (mode))\n-    return true;\n-  return false;\n+  return pass_in_memory (TYPE_MODE (type), type, true);\n }\n \n /* Implement TARGET_PROMOTE_FUNCTION_MODE.  */\n \n static machine_mode\n nvptx_promote_function_mode (const_tree type, machine_mode mode,\n-\t\t\t     int *punsignedp,\n+\t\t\t     int *ARG_UNUSED (punsignedp),\n \t\t\t     const_tree funtype, int for_return)\n {\n-  if (type == NULL_TREE)\n-    return mode;\n-  if (for_return)\n-    return promote_mode (type, mode, punsignedp);\n-  /* For K&R-style functions, try to match the language promotion rules to\n-     minimize type mismatches at assembly time.  */\n-  if (TYPE_ARG_TYPES (funtype) == NULL_TREE\n-      && type != NULL_TREE\n-      && !AGGREGATE_TYPE_P (type))\n-    {\n-      if (mode == SFmode)\n-\tmode = DFmode;\n-      mode = arg_promotion (mode);\n-    }\n-\n-  return mode;\n+  return promote_arg (mode, for_return || !type || TYPE_ARG_TYPES (funtype));\n }\n \n /* Implement TARGET_STATIC_CHAIN.  */\n@@ -576,7 +565,6 @@ nvptx_static_chain (const_tree fndecl, bool incoming_p)\n   if (!DECL_STATIC_CHAIN (fndecl))\n     return NULL;\n \n-\n   return gen_rtx_REG (Pmode, (incoming_p ? STATIC_CHAIN_REGNUM\n \t\t\t      : OUTGOING_STATIC_CHAIN_REGNUM));\n }\n@@ -620,8 +608,9 @@ write_one_arg (std::stringstream &s, int for_reg, int argno, machine_mode mode)\n }\n \n /* Process function parameter TYPE to emit one or more PTX\n-   arguments.  PROTOTYPED is true, if this is a prototyped function,\n-   rather than an old-style C declaration.\n+   arguments. S, FOR_REG and ARGNO as for write_one_arg.  PROTOTYPED\n+   is true, if this is a prototyped function, rather than an old-style\n+   C declaration.  Returns the next argument number to use.\n \n    The promotion behaviour here must match the regular GCC function\n    parameter marshalling machinery.  */\n@@ -635,50 +624,71 @@ write_arg (std::stringstream &s, int for_reg, int argno,\n   if (mode == VOIDmode)\n     return argno;\n \n-  if (!PASS_IN_REG_P (mode, type))\n+  if (pass_in_memory (mode, type, false))\n     mode = Pmode;\n+  else\n+    {\n+      bool split = TREE_CODE (type) == COMPLEX_TYPE;\n \n-  machine_mode split = maybe_split_mode (mode);\n-  if (split != VOIDmode)\n-    mode = split;\n+      if (split)\n+\t{\n+\t  /* Complex types are sent as two separate args.  */\n+\t  type = TREE_TYPE (type);\n+\t  mode  = TYPE_MODE (type);\n+\t  prototyped = true;\n+\t}\n \n-  if (!prototyped && !AGGREGATE_TYPE_P (type))\n-    {\n-      if (mode == SFmode)\n-\tmode = DFmode;\n-      mode = arg_promotion (mode);\n+      mode = promote_arg (mode, prototyped);\n+      if (split)\n+\targno = write_one_arg (s, for_reg, argno, mode);\n     }\n-  else if (for_reg >= 0)\n-    mode = arg_promotion (mode);\n \n-  if (split != VOIDmode)\n-    argno = write_one_arg (s, for_reg, argno, mode);\n   return write_one_arg (s, for_reg, argno, mode);\n }\n \n+/* Process a function return TYPE to emit a PTX return as a prototype\n+   or function prologue declaration.  DECL_RESULT is the decl result\n+   of the function and needed for determining named result\n+   behaviour. Returns true if return is via an additional pointer\n+   parameter.  The promotion behaviour here must match the regular GCC\n+   function return mashalling.  */\n+\n static bool\n-write_return (std::stringstream &s, bool for_proto, tree type,\n-\t      machine_mode ret_mode)\n+write_return (std::stringstream &s, bool for_proto, tree type)\n {\n   machine_mode mode = TYPE_MODE (type);\n-  bool return_in_mem = mode != VOIDmode && !RETURN_IN_REG_P (mode);\n \n-  mode = arg_promotion (mode);\n-  if (for_proto)\n+  if (mode == VOIDmode)\n+    return false;\n+\n+  bool return_in_mem = pass_in_memory (mode, type, true);\n+\n+  if (return_in_mem)\n     {\n-      if (!return_in_mem && mode != VOIDmode)\n-\ts << \"(.param\" << nvptx_ptx_type_from_mode (mode, false)\n-\t  << \" %out_retval) \";\n+      if (for_proto)\n+\treturn return_in_mem;\n+      \n+      /* Named return values can cause us to return a pointer as well\n+\t as expect an argument for the return location.  This is\n+\t optimization-level specific, so no caller can make use of\n+\t this data, but more importantly for us, we must ensure it\n+\t doesn't change the PTX prototype.  */\n+      mode = (machine_mode) cfun->machine->ret_reg_mode;\n+      if (mode == VOIDmode)\n+\treturn return_in_mem;\n+\n+      /* Clear ret_reg_mode to inhibit copy of retval to non-existent\n+\t retval parameter.  */\n+      cfun->machine->ret_reg_mode = VOIDmode;\n     }\n   else\n-    {\n-      /* Prologue.  C++11 ABI causes us to return a reference to the\n-\t passed in pointer for return_in_mem.  */\n-      ret_mode = arg_promotion (ret_mode);\n-      if (ret_mode != VOIDmode)\n-\ts << \"\\t.reg\" << nvptx_ptx_type_from_mode (ret_mode, false)\n-\t  << \" %retval;\\n\";\n-    }\n+    mode = promote_return (mode);\n+\n+  const char *ptx_type  = nvptx_ptx_type_from_mode (mode, false);\n+  if (for_proto)\n+    s << \"(.param\" << ptx_type << \" %out_retval) \";\n+  else\n+    s << \"\\t.reg\" << ptx_type << \" %retval;\\n\";\n \n   return return_in_mem;\n }\n@@ -751,7 +761,7 @@ write_fn_proto (std::stringstream &s, bool is_defn,\n   tree result_type = TREE_TYPE (fntype);\n \n   /* Declare the result.  */\n-  bool return_in_mem = write_return (s, true, result_type, VOIDmode);\n+  bool return_in_mem = write_return (s, true, result_type);\n \n   s << name;\n \n@@ -943,8 +953,7 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n   write_fn_proto (s, true, name, decl);\n   s << \"{\\n\";\n \n-  bool return_in_mem = write_return (s, false, result_type,\n-\t\t\t\t     (machine_mode)cfun->machine->ret_reg_mode);\n+  bool return_in_mem = write_return (s, false, result_type);\n   if (return_in_mem)\n     argno = write_arg (s, 0, argno, ptr_type_node, true);\n   \n@@ -1203,6 +1212,7 @@ nvptx_expand_call (rtx retval, rtx address)\n   if (tmp_retval != retval)\n     emit_move_insn (retval, tmp_retval);\n }\n+\n /* Emit a comparison COMPARE, and return the new test to be used in the\n    jump.  */\n \n@@ -4840,10 +4850,6 @@ nvptx_goacc_reduction (gcall *call)\n #define TARGET_FUNCTION_INCOMING_ARG nvptx_function_incoming_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE nvptx_function_arg_advance\n-#undef TARGET_FUNCTION_ARG_BOUNDARY\n-#define TARGET_FUNCTION_ARG_BOUNDARY nvptx_function_arg_boundary\n-#undef TARGET_FUNCTION_ARG_ROUND_BOUNDARY\n-#define TARGET_FUNCTION_ARG_ROUND_BOUNDARY nvptx_function_arg_boundary\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE nvptx_pass_by_reference\n #undef TARGET_FUNCTION_VALUE_REGNO_P"}, {"sha": "ed0f28e0dd823d6a70ffcfc4794968773a89364c", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -46,7 +46,8 @@\n /* Chosen such that we won't have to deal with multi-word subregs.  */\n #define UNITS_PER_WORD 8\n \n-#define PARM_BOUNDARY 8\n+/* Alignments in bits.  */\n+#define PARM_BOUNDARY 32\n #define STACK_BOUNDARY 64\n #define FUNCTION_BOUNDARY 32\n #define BIGGEST_ALIGNMENT 64"}, {"sha": "ff02575e4d4b0291a3001851d64054b17254955c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -1,3 +1,22 @@\n+2015-12-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/abi/nvptx-nrv1.C: New.\n+\t* g++.dg/abi/nvptx-ptrmem1.C: New.\n+\t* gcc.target/nvptx/abi-complex-arg.c: New.\n+\t* gcc.target/nvptx/abi-complex-ret.c: New.\n+\t* gcc.target/nvptx/abi-enum-arg.c: New.\n+\t* gcc.target/nvptx/abi-enum-ret.c: New.\n+\t* gcc.target/nvptx/abi-knr-arg.c: New.\n+\t* gcc.target/nvptx/abi-knr-ret.c: New.\n+\t* gcc.target/nvptx/abi-scalar-arg.c: New.\n+\t* gcc.target/nvptx/abi-scalar-ret.c: New.\n+\t* gcc.target/nvptx/abi-struct-arg.c: New.\n+\t* gcc.target/nvptx/abi-struct-ret.c: New.\n+\t* gcc.target/nvptx/abi-vararg-1.c: New.\n+\t* gcc.target/nvptx/abi-vararg-2.c: New.\n+\t* gcc.target/nvptx/abi-vect-arg.c: New.\n+\t* gcc.target/nvptx/abi-vect-ret.c: New.\n+\n 2015-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/68833"}, {"sha": "6a05b4fc4c5bbe80b2642435770623178cce7543", "filename": "gcc/testsuite/g++.dg/abi/nvptx-nrv1.C", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnvptx-nrv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnvptx-nrv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnvptx-nrv1.C?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,71 @@\n+// { dg-do compile { target nvptx-*-* } }\n+// { dg-additional-options \"-m64\" }\n+\n+// Check NRV optimization doesn't change the PTX prototypes.\n+\n+struct A\n+{\n+  int d;\n+\n+// { dg-final { scan-assembler-times \".weak .func _ZN1AC1Ev \\\\(.param.u64 %in_ar0\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+  A () { d = 123; }\n+  A (const A & o) { d = o.d; }\n+  void frob ();\n+};\n+\n+\n+namespace unopt \n+{\n+  // { dg-final { scan-assembler \".extern .func _ZN5unopt3fooEv \\\\(.param.u64 %in_ar0\\\\);\" } }\n+  A __attribute__ ((__optimize__ (\"O0\"))) foo ();\n+\n+  // { dg-final { scan-assembler-times \".visible .func _ZN5unopt3barEv \\\\(.param.u64 %in_ar0\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+  A __attribute__ ((__optimize__ (\"O0\"), noinline)) bar()\n+  {\n+    A l;\n+    return l;\n+  }\n+\n+  // { dg-final { scan-assembler-times \".visible .func _ZN5unopt3bazEv \\\\(.param.u64 %in_ar0\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+  A __attribute__ ((__optimize__ (\"O0\"), noinline)) baz ()\n+  {\n+    return foo ();\n+  }\n+\n+  void __attribute__ ((__optimize__ (\"O0\"), noinline)) quux ()\n+  {\n+    bar ().frob ();\n+    baz ().frob ();\n+    foo ().frob ();\n+  }\n+  \n+}\n+\n+namespace opt\n+{\n+  // { dg-final { scan-assembler \".extern .func _ZN3opt3fooEv \\\\(.param.u64 %in_ar0\\\\);\" } }\n+  A __attribute__ ((__optimize__ (\"O2\"), noinline)) foo ();\n+\n+  // { dg-final { scan-assembler-times \".visible .func _ZN3opt3barEv \\\\(.param.u64 %in_ar0\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+  A __attribute__ ((__optimize__ (\"O2\"), noinline)) bar()\n+  {\n+    A l;\n+    return l;\n+  }\n+\n+  // { dg-final { scan-assembler-times \".visible .func _ZN3opt3bazEv \\\\(.param.u64 %in_ar0\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+  A __attribute__ ((__optimize__ (\"O2\"))) baz ()\n+  {\n+    return foo ();\n+  }\n+\n+  void __attribute__ ((__optimize__ (\"O2\"), noinline)) quux ()\n+  {\n+    bar ().frob ();\n+    baz ().frob ();\n+    foo ().frob ();\n+  }\n+}\n+\n+// Make sure we're not trying return a return value anywhere.\n+// { dg-final { scan-assembler-not \"st.param.u64\\[\\t \\]*\\\\\\[%out_retval\\\\\\], %\\[_a-z0-9\\]*;\" } }"}, {"sha": "08ffd7e373e9a99e9f46e99c4fa3213be08aca0a", "filename": "gcc/testsuite/g++.dg/abi/nvptx-ptrmem1.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnvptx-ptrmem1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnvptx-ptrmem1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fnvptx-ptrmem1.C?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile { target nvptx-*-* } }\n+// { dg-additional-options \"-m64\" }\n+\n+// ptr to member data is like sizeof.\n+// ptr to member fn is like a struct.\n+\n+struct A{};\n+\n+typedef int A::*pmd;\n+typedef void (A::*pmf) ();\n+\n+// { dg-final { scan-assembler \".extern .func \\\\(.param.u64 %out_retval\\\\) _Z8dcl_rpmdv;\" } }\n+pmd dcl_rpmd ();\n+\n+// { dg-final { scan-assembler \".extern .func _Z8dcl_rpmfv \\\\(.param.u64 %in_ar0\\\\);\" } }\n+pmf dcl_rpmf ();\n+\n+// { dg-final { scan-assembler \".extern .func _Z8dcl_apmdM1Ai \\\\(.param.u64 %in_ar0\\\\);\" } }\n+void dcl_apmd (pmd);\n+\n+// { dg-final { scan-assembler \".extern .func _Z8dcl_apmfM1AFvvE \\\\(.param.u64 %in_ar0\\\\);\" } }\n+void dcl_apmf (pmf);\n+\n+void test_1 ()\n+{\n+  dcl_rpmd ();\n+  dcl_rpmf ();\n+  dcl_apmd (0);\n+  dcl_apmf (0);\n+}\n+\n+// { dg-final { scan-assembler-times \".visible .func \\\\(.param.u64 %out_retval\\\\) _Z8dfn_rpmdv(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+pmd dfn_rpmd ()\n+{\n+  return 0;\n+}\n+\n+// { dg-final { scan-assembler-times \".visible .func _Z8dfn_rpmfv \\\\(.param.u64 %in_ar0\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+pmf dfn_rpmf ()\n+{\n+  return 0;\n+}\n+\n+// { dg-final { scan-assembler-times \".visible .func _Z8dfn_apmdM1Ai \\\\(.param.u64 %in_ar0\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+void dfn_apmd (pmd)\n+{\n+}\n+\n+// { dg-final { scan-assembler-times \".visible .func _Z8dfn_apmfM1AFvvE \\\\(.param.u64 %in_ar0\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } }\n+void dfn_apmf (pmf)\n+{\n+}"}, {"sha": "e8f0832795973ad007c93bf7d86f1cf9f7f8c09e", "filename": "gcc/testsuite/gcc.target/nvptx/abi-complex-arg.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-complex-arg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-complex-arg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-complex-arg.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* Comples arg types.  All these should be in 2 registers.  */\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_acc \\\\(.param.u32 %\\[_a-z0-9\\]*, .param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_acc (_Complex char);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_acs \\\\(.param.u32 %\\[_a-z0-9\\]*, .param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_acs (_Complex short);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_aci \\\\(.param.u32 %\\[_a-z0-9\\]*, .param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_aci (_Complex int);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_acll \\\\(.param.u64 %\\[_a-z0-9\\]*, .param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_acll (_Complex long);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_acf \\\\(.param.f32 %\\[_a-z0-9\\]*, .param.f32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_acf (_Complex float);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_acd \\\\(.param.f64 %\\[_a-z0-9\\]*, .param.f64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_acd (_Complex double);\n+\n+#define M(T,r,i) ({_Complex T x; __real__ (x) = (r), __imag__(x) == (i); x; })\n+\n+void test_1 (void)\n+{\n+  dcl_acc (M (char, 1, 2));\n+  dcl_acs (M (short, 3, 4));\n+  dcl_aci (M (int, 5, 6));\n+  dcl_acll (M (long long, 7, 8));\n+  dcl_acf (M (float, 9, 10));\n+  dcl_acd (M (double, 11, 12));\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_acc \\\\(.param.u32 %\\[_a-z0-9\\]*, .param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_acc (_Complex char c)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_acs \\\\(.param.u32 %\\[_a-z0-9\\]*, .param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_acs (_Complex short s)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_aci \\\\(.param.u32 %\\[_a-z0-9\\]*, .param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_aci (_Complex int i)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_acll \\\\(.param.u64 %\\[_a-z0-9\\]*, .param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_acll (_Complex long long ll)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_acf \\\\(.param.f32 %\\[_a-z0-9\\]*, .param.f32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_acf (_Complex float f)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_acd \\\\(.param.f64 %\\[_a-z0-9\\]*, .param.f64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_acd (_Complex double d)\n+{\n+}"}, {"sha": "bfaac14e7b89365aa8b84f73dddf2504c5c0d8a0", "filename": "gcc/testsuite/gcc.target/nvptx/abi-complex-ret.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-complex-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-complex-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-complex-ret.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* Complex return.  Returned via pointer.  */\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rcc \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+_Complex char dcl_rcc (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rcs \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+_Complex short dcl_rcs (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rci \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+_Complex int dcl_rci (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rcll \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+_Complex long long dcl_rcll (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rcf \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+_Complex float dcl_rcf (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rcd \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+_Complex double dcl_rcd (void);\n+\n+void test_1 (void)\n+{\n+  dcl_rcc ();\n+  dcl_rcs ();\n+  dcl_rci ();\n+  dcl_rcll ();\n+  dcl_rcf ();\n+  dcl_rcd ();\n+}\n+\n+#define M(T,r,i) ({_Complex T x; __real__ (x) = (r), __imag__(x) == (i); x; })\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rcc \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+_Complex char dfn_rcc (void)\n+{\n+  return M (char,1,2);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rcs \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+_Complex short dfn_rcs (void)\n+{\n+  return M (short,3,4);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rci \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+_Complex int dfn_rci (void)\n+{\n+  return M (int,5,6);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rcll \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+_Complex long long dfn_rcll (void)\n+{\n+  return M (long long,7,8);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rcf \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+_Complex float dfn_rcf (void)\n+{\n+  return M (float,9,10);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rcd \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+_Complex double dfn_rcd (void)\n+{\n+  return M (double,11,12);\n+}"}, {"sha": "d3626764742f943e567bf98907a67196d49e2f10", "filename": "gcc/testsuite/gcc.target/nvptx/abi-enum-arg.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-enum-arg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-enum-arg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-enum-arg.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64 -fshort-enums\" } */\n+\n+/* Enum return types.  Passed as the underlying integer.  */\n+\n+typedef enum { a = 0x1, b } Echar;\n+typedef enum { c = 0x100, d } Eshort;\n+typedef enum { e = 0x10000, f } Eint;\n+typedef enum { g = 0x100000000LL, h } Elonglong;\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ac \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ac (Echar);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_as \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_as (Eshort);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ai \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ai (Eint);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_all \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_all (Elonglong);\n+\n+void test_1 (void)\n+{\n+  dcl_ac (1);\n+  dcl_as (2);\n+  dcl_ai (3);\n+  dcl_all (4);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ac \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ac (Echar c)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_as \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_as (Eshort s)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ai \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ai (Eint i)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_all \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_all (Elonglong ll)\n+{\n+}"}, {"sha": "c56265663e870db7880ea602bfeef6536829758a", "filename": "gcc/testsuite/gcc.target/nvptx/abi-enum-ret.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-enum-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-enum-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-enum-ret.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64 -fshort-enums\" } */\n+\n+/* Enum return types.  Passed as the underlying integer.  */\n+\n+typedef enum { a = 0x1, b } Echar;\n+typedef enum { c = 0x100, d } Eshort;\n+typedef enum { e = 0x10000, f } Eint;\n+typedef enum { g = 0x100000000LL, h } Elonglong;\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_rc;\" 1 } } */\n+Echar dcl_rc (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_rs;\" 1 } } */\n+Eshort dcl_rs (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_ri;\" 1 } } */\n+Eint dcl_ri (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u64 %\\[_a-z\\]*\\\\) dcl_rll;\" 1 } } */\n+Elonglong dcl_rll (void);\n+\n+void test_1 (void)\n+{\n+  dcl_rc ();\n+  dcl_rs ();\n+  dcl_ri ();\n+  dcl_rll ();\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\) dfn_rc(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+Echar dfn_rc (void)\n+{\n+  return 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-0\\]*\\\\) dfn_rs(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+Eshort dfn_rs (void)\n+{\n+  return 2;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\) dfn_ri(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+Eint dfn_ri (void)\n+{\n+  return 3;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\) dfn_rll(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+Elonglong dfn_rll (void)\n+{\n+  return 4;\n+}"}, {"sha": "aca5073aa3fdb648b3187f2eba5a9b662038c3c7", "filename": "gcc/testsuite/gcc.target/nvptx/abi-knr-arg.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-knr-arg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-knr-arg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-knr-arg.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* K+R args.  as for ANSI except float promotes to double.  */\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_av;\" 1 } } */\n+void dcl_av ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ac \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ac ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_as \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_as ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ai \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ai ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_all \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_all ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_af \\\\(.param.f64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_af ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ad \\\\(.param.f64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ad ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ap \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ap ();\n+\n+void test_1 (void)\n+{\n+  dcl_av ();\n+  dcl_ac ((char)1);\n+  dcl_as ((short)2);\n+  dcl_ai ((int)3);\n+  dcl_all ((long long)4);\n+  dcl_af ((float)5);\n+  dcl_ad ((double)6);\n+  dcl_ap ((void *)0);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_av(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_av ()\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ac \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ac (c)\n+  char c;\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_as \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_as (s)\n+  short s;\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ai \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ai (i)\n+  int i;\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_all \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_all (ll)\n+  long long ll;\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_af \\\\(.param.f64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_af (f)\n+  float f;\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ad \\\\(.param.f64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ad (d)\n+  double d;\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ap \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ap (p)\n+  void *p;\n+{\n+}\n+\n+/*  But complex float is passed as two floats.  (K&R doesn't have\n+    complex, so why obey k&r for the components of such an object?)  */\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_acf \\\\(.param.f32 %\\[_a-z0-9\\]*, .param.f32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_acf (_Complex float f)\n+{\n+}"}, {"sha": "17bfd7589c7ab059e1c729c55d9e1b46de04b533", "filename": "gcc/testsuite/gcc.target/nvptx/abi-knr-ret.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-knr-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-knr-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-knr-ret.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* K+R returns.  as for ANSI .  */\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rv;\" 1 } } */\n+void dcl_rv ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_rc;\" 1 } } */\n+char dcl_rc ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_rs;\" 1 } } */\n+short dcl_rs ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_ri;\" 1 } } */\n+int dcl_ri ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u64 %\\[_a-z\\]*\\\\) dcl_rll;\" 1 } } */\n+long long dcl_rll ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.f32 %\\[_a-z\\]*\\\\) dcl_rf;\" 1 } } */\n+float dcl_rf ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.f64 %\\[_a-z\\]*\\\\) dcl_rd;\" 1 } } */\n+double dcl_rd ();\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u64 %\\[_a-z\\]*\\\\) dcl_rp;\" 1 } } */\n+void *dcl_rp ();\n+\n+void test_1 ()\n+{\n+  dcl_rv ();\n+  dcl_rc ();\n+  dcl_rs ();\n+  dcl_ri ();\n+  dcl_rll ();\n+  dcl_rf ();\n+  dcl_rd ();\n+  dcl_rp ();\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rv(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_rv ()\n+{\n+  return;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\) dfn_rc(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+char dfn_rc ()\n+{\n+  return 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-0\\]*\\\\) dfn_rs(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+short dfn_rs ()\n+{\n+  return 2;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\) dfn_ri(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+int dfn_ri ()\n+{\n+  return 3;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\) dfn_rll(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+long long dfn_rll ()\n+{\n+  return 4;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.f32 %\\[_a-z0-9\\]*\\\\) dfn_rf(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+float dfn_rf ()\n+{\n+  return 5;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.f64 %\\[_a-z0-9\\]*\\\\) dfn_rd(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+double dfn_rd ()\n+{\n+  return 6;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\) dfn_rp(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void *dfn_rp ()\n+{\n+  return 0;\n+}"}, {"sha": "0fe1e671d59a711e29bf48f63b20d5637e4c40cc", "filename": "gcc/testsuite/gcc.target/nvptx/abi-scalar-arg.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-scalar-arg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-scalar-arg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-scalar-arg.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* Scalar return types.  In registers when <= 64 bit.  */\n+\n+typedef int __attribute__((mode(TI))) ti;\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_av;\" 1 } } */\n+void dcl_av (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ac \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ac (char);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_as \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_as (short);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ai \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ai (int);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_all \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_all (long long);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ati \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ati (ti);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_af \\\\(.param.f32 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_af (float);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ad \\\\(.param.f64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ad (double);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_ap \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_ap (void *);\n+\n+void test_1 (void)\n+{\n+  dcl_av ();\n+  dcl_ac (1);\n+  dcl_as (2);\n+  dcl_ai (3);\n+  dcl_all (4);\n+  dcl_ati (5);\n+  dcl_af (6);\n+  dcl_ad (7);\n+  dcl_ap (0);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_av(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_av (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ac \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ac (char c)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_as \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_as (short s)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ai \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ai (int i)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_all \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_all (long long ll)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ati \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ati (ti t)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_af \\\\(.param.f32 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_af (float f)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ad \\\\(.param.f64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ad (double d)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_ap \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_ap (void *p)\n+{\n+}"}, {"sha": "e9b11ba93e8535988b8dc54c04e90105c8eae7d5", "filename": "gcc/testsuite/gcc.target/nvptx/abi-scalar-ret.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-scalar-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-scalar-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-scalar-ret.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* Scalar return types.  In registers when <= 64 bit.  */\n+\n+typedef int __attribute__((mode(TI))) ti;\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rv;\" 1 } } */\n+void dcl_rv (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_rc;\" 1 } } */\n+char dcl_rc (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_rs;\" 1 } } */\n+short dcl_rs (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u32 %\\[_a-z\\]*\\\\) dcl_ri;\" 1 } } */\n+int dcl_ri (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u64 %\\[_a-z\\]*\\\\) dcl_rll;\" 1 } } */\n+long long dcl_rll (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rti \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+ti dcl_rti (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.f32 %\\[_a-z\\]*\\\\) dcl_rf;\" 1 } } */\n+float dcl_rf (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.f64 %\\[_a-z\\]*\\\\) dcl_rd;\" 1 } } */\n+double dcl_rd (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func \\\\(.param.u64 %\\[_a-z\\]*\\\\) dcl_rp;\" 1 } } */\n+void *dcl_rp (void);\n+\n+void test_1 (void)\n+{\n+  dcl_rv ();\n+  dcl_rc ();\n+  dcl_rs ();\n+  dcl_ri ();\n+  dcl_rll ();\n+  dcl_rti ();\n+  dcl_rf ();\n+  dcl_rd ();\n+  dcl_rp ();\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rv(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_rv (void)\n+{\n+  return;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\) dfn_rc(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+char dfn_rc (void)\n+{\n+  return 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-0\\]*\\\\) dfn_rs(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+short dfn_rs (void)\n+{\n+  return 2;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u32 %\\[_a-z0-9\\]*\\\\) dfn_ri(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+int dfn_ri (void)\n+{\n+  return 3;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\) dfn_rll(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+long long dfn_rll (void)\n+{\n+  return 4;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rti \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+ti dfn_rti (void)\n+{\n+  return 5;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.f32 %\\[_a-z0-9\\]*\\\\) dfn_rf(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+float dfn_rf (void)\n+{\n+  return 6;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.f64 %\\[_a-z0-9\\]*\\\\) dfn_rd(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+double dfn_rd (void)\n+{\n+  return 7;\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\) dfn_rp(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void *dfn_rp (void)\n+{\n+  return 0;\n+}"}, {"sha": "54ae651dccaa0817fde0693a25f040da1e0365d4", "filename": "gcc/testsuite/gcc.target/nvptx/abi-struct-arg.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-struct-arg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-struct-arg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-struct-arg.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* Struct arg.  Passed via pointer.  */\n+\n+typedef struct {char a;} one;\n+typedef struct {short a;} two;\n+typedef struct {int a;} four;\n+typedef struct {long long a;} eight;\n+typedef struct {int a, b[12];} big;\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_aone \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_aone (one);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_atwo \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_atwo (two);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_afour \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_afour (four);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_aeight \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_aeight (eight);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_abig \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_abig (big);\n+\n+#define M(T, v) ({T t; t.a = v; t;})\n+\n+void test_1 (void)\n+{\n+  dcl_aone (M (one, 1));\n+  dcl_atwo (M (two, 2));\n+  dcl_afour (M (four, 3));\n+  dcl_aeight (M (eight, 4));\n+  dcl_abig (M (big, 5));\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_aone \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_aone (one one)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_atwo \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_atwo (two two)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_afour \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_afour (four four)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_aeight \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_aeight (eight eight)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_abig \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_abig (big big)\n+{\n+}\n+"}, {"sha": "d48a82d26cec6c4e98729cf6dcec3b42aa6b43cd", "filename": "gcc/testsuite/gcc.target/nvptx/abi-struct-ret.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-struct-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-struct-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-struct-ret.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* Struct return.  Returned via pointer.  */\n+\n+typedef struct {char a;} one;\n+typedef struct {short a;} two;\n+typedef struct {int a;} four;\n+typedef struct {long long a;} eight;\n+typedef struct {int a, b[12];} big;\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rone \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+one dcl_rone (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rtwo \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+two dcl_rtwo (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rfour \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+four dcl_rfour (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_reight \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+eight dcl_reight (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rbig \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+big dcl_rbig (void);\n+\n+void test_1 (void)\n+{\n+  dcl_rone ();\n+  dcl_rtwo ();\n+  dcl_rfour ();\n+  dcl_reight ();\n+  dcl_rbig ();\n+}\n+\n+#define M(T, v) ({T t; t.a = v; t;})\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rone \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+one dfn_rone (void)\n+{\n+  return M (one, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rtwo \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+two dfn_rtwo (void)\n+{\n+  return M (two, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rfour \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+four dfn_rfour (void)\n+{\n+  return M (four, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_reight \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+eight dfn_reight (void)\n+{\n+  return M (eight, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rbig \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+big dfn_rbig (void)\n+{\n+  return M (big, 5);\n+}"}, {"sha": "7e56b88d21a5c762cd223a98f8324bd801efb4b9", "filename": "gcc/testsuite/gcc.target/nvptx/abi-vararg-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vararg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vararg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vararg-1.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* varargs, passed as pointer to array of args.   */\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_av \\\\(.param.u32 %\\[_a-z0-9\\]*, .param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_av (int, ...);\n+\n+void test_1 (void)\n+{\n+  dcl_av (1, 1);\n+  dcl_av (2, 1, 2);\n+  dcl_av (2, 1, 2, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_av \\\\(.param.u32 %\\[_a-z0-9\\]*, .param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_av (int a, ...)\n+{\n+}"}, {"sha": "bcaeb5b241622a3359064767e02a3dacefa29de1", "filename": "gcc/testsuite/gcc.target/nvptx/abi-vararg-2.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vararg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vararg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vararg-2.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,208 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -fshort-enums\" } */\n+\n+/* va args, promoted as regular knr args.  */\n+\n+void __attribute__ ((noinline)) chars (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != 1) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 2) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+void __attribute__ ((noinline)) shorts (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != 1) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 2) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 3) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+void __attribute__ ((noinline)) ints (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != 1) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 2) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 3) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+void __attribute__ ((noinline)) longlongs (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != 1) __builtin_abort ();\n+  if (__builtin_va_arg (args, long long) != 2) __builtin_abort ();\n+  if (__builtin_va_arg (args, long long) != 3) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+typedef int __attribute__ ((mode(TI))) ti;\n+\n+void __attribute__ ((noinline)) tis (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != 1) __builtin_abort ();\n+  if (__builtin_va_arg (args, ti) != 2) __builtin_abort ();\n+  if (__builtin_va_arg (args, ti) != 3) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+void __attribute__ ((noinline)) floats (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != 1) __builtin_abort ();\n+  if (__builtin_va_arg (args, double) != 2) __builtin_abort ();\n+  if (__builtin_va_arg (args, double) != 3) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+void __attribute__ ((noinline)) doubles (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != 1) __builtin_abort ();\n+  if (__builtin_va_arg (args, double) != 2) __builtin_abort ();\n+  if (__builtin_va_arg (args, double) != 3) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+typedef enum {ec1, ec2, ecmax = 0xf} echar;\n+typedef enum {es1, es2, esmax = 0xfff} eshort;\n+typedef enum {ei1, ei2, eimax = 0xfffff} eint;\n+\n+void __attribute__ ((noinline)) echars (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != ec1) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != ec2) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != ecmax) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+void __attribute__ ((noinline)) eshorts (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != es1) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != es2) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != esmax) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+void __attribute__ ((noinline)) eints (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != ei1) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != ei2) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != eimax) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+typedef struct {char a;} one;\n+typedef struct {short a;} two;\n+typedef struct {int a;} four;\n+typedef struct {long long a;} eight;\n+typedef struct {int a, b[12];} big;\n+\n+void __attribute__ ((noinline)) structs (int i, ...)\n+{\n+  __builtin_va_list args;\n+  __builtin_va_start (args, i);\n+\n+  if (__builtin_va_arg (args, int) != 1) __builtin_abort ();\n+  if (__builtin_va_arg (args, one).a != 2) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 3) __builtin_abort ();\n+  if (__builtin_va_arg (args, two).a != 4) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 5) __builtin_abort ();\n+  if (__builtin_va_arg (args, four).a != 6) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 7) __builtin_abort ();\n+  if (__builtin_va_arg (args, eight).a != 8) __builtin_abort ();\n+  if (__builtin_va_arg (args, int) != 9) __builtin_abort ();\n+  if (__builtin_va_arg (args, big).a != 10) __builtin_abort ();\n+  __builtin_va_end (args);\n+}\n+\n+int main ()\n+{\n+  char vc1, vc2, vc3, vc4, vc5;\n+  short vs1, vs2, vs3;\n+  int vi1, vi2, vi3;\n+  long long vll1, vll2;\n+  ti vti1, vti2;\n+  float vf1, vf2;\n+  double vd1, vd2;\n+\n+  one vone;\n+  two vtwo;\n+  four vfour;\n+  eight veight;\n+  big vbig;\n+  echar vec1, vec2,  vec3;\n+  eshort ves1, ves2,  ves3;\n+  eint vei1, vei2,  vei3;\n+\n+  vc1 = 1, vc2 = 2;\n+  chars (1, vc1, vc2);\n+\n+  vc1 = 1, vs1 = 2, vs2 = 3;\n+  shorts (1, vc1, vs1, vs2);\n+\n+  vc1 = 1, vi1 = 2, vi2 = 3;\n+  ints (1, vc1, vi1, vi2);\n+\n+  vc1 = 1,  vll1 = 2, vll2 = 3;\n+  longlongs (1, vc1, vll1, vll2);\n+\n+  vc1 = 1, vti1 = 2, vti2 = 3;\n+  tis (1, vc1,  vti1, vti2);\n+\n+  vc1 = 1,  vf1 = 2, vf2 = 3;\n+  floats (1, vc1, vf1, vf2);\n+  doubles (1, vc1, vf1, vf2); /* Floats are promoted, so this should work. */\n+\n+  vc1 = 1, vd1 = 2, vd2 = 3;\n+  floats (1, vc1, vf1, vf2); /* Floats are promoted, so this should work. */\n+  doubles (1, vc1, vf1, vf2);\n+\n+  vec1 = ec1, vec2 = ec2, vec3 = ecmax;\n+  echars (1, vec1, vec2, vec3);\n+  vc1 = ec1, vc2 = ec2, vc3 = ecmax;\n+  echars (1, vc1, vc2, vc3);\n+\n+  ves1 = ec1, ves2 = ec2, ves3 = esmax;\n+  eshorts (1, ves1, ves2, ves3);\n+  vs1 = ec1, vs2 = ec2, vs3 = esmax;\n+  eshorts (1, vs1, vs2, vs3);\n+\n+  vei1 = ec1, vei2 = ec2, vei3 = eimax;\n+  eints (1, vei1, vei2, vei3);\n+  vi1 = ec1, vi2 = ec2, vi3 = eimax;\n+  eints (1, vi1, vi2, vi3);\n+\n+  vc1 = 1, vone.a = 2, vc2 = 3, vtwo.a = 4,\n+    vc3 = 5, vfour.a = 6, vc4 = 7, veight.a = 8,\n+    vc5 = 9, vbig.a = 10;\n+  structs (1, vc1,  vone, vc2, vtwo, vc3, vfour, vc4, veight, vc5, vbig);\n+  \n+  return 0;\n+}"}, {"sha": "1247b29def53bcacd02ce929bcc7d233b85b6bcd", "filename": "gcc/testsuite/gcc.target/nvptx/abi-vect-arg.c", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vect-arg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vect-arg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vect-arg.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,225 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* Vector arg.  Pass via pointer.  */\n+\n+typedef char __attribute__ ((vector_size (1))) vc1;\n+typedef char __attribute__ ((vector_size (2))) vc2;\n+typedef char __attribute__ ((vector_size (4))) vc4;\n+typedef char __attribute__ ((vector_size (8))) vc8;\n+\n+typedef short __attribute__ ((vector_size (2))) vs1;\n+typedef short __attribute__ ((vector_size (4))) vs2;\n+typedef short __attribute__ ((vector_size (8))) vs4;\n+typedef short __attribute__ ((vector_size (16))) vs8;\n+\n+typedef int __attribute__ ((vector_size (4))) vi1;\n+typedef int __attribute__ ((vector_size (8))) vi2;\n+typedef int __attribute__ ((vector_size (16))) vi4;\n+typedef int __attribute__ ((vector_size (32))) vi8;\n+\n+typedef long long __attribute__ ((vector_size (8))) vll1;\n+typedef long long __attribute__ ((vector_size (16))) vll2;\n+typedef long long __attribute__ ((vector_size (32))) vll4;\n+typedef long long __attribute__ ((vector_size (64))) vll8;\n+\n+typedef float __attribute__ ((vector_size (4))) vf1;\n+typedef float __attribute__ ((vector_size (8))) vf2;\n+typedef float __attribute__ ((vector_size (16))) vf4;\n+typedef float __attribute__ ((vector_size (32))) vf8;\n+\n+typedef double __attribute__ ((vector_size (8))) vd1;\n+typedef double __attribute__ ((vector_size (16))) vd2;\n+typedef double __attribute__ ((vector_size (32))) vd4;\n+typedef double __attribute__ ((vector_size (64))) vd8;\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avc1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avc1 (vc1);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avc2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avc2 (vc2);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avc4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avc4 (vc4);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avc8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avc8 (vc8);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avs1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avs1 (vs1);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avs2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avs2 (vs2);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avs4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avs4 (vs4);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avs8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avs8 (vs8);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avi1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avi1 (vi1);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avi2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avi2 (vi2);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avi4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avi4 (vi4);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avi8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avi8 (vi8);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avll1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avll1 (vll1);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avll2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avll2 (vll2);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avll4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avll4 (vll4);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avll8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avll8 (vll8);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avf1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avf1 (vf1);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avf2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avf2 (vf2);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avf4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avf4 (vf4);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avf8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avf8 (vf8);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avd1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avd1 (vd1);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avd2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avd2 (vd2);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avd4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avd4 (vd4);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_avd8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+void dcl_avd8 (vd8);\n+\n+#define M(T, V) ({T t;t[0]= V;t;})\n+\n+void  test_1 (void)\n+{\n+  dcl_avc1 (M (vc1, 1));\n+  dcl_avc2 (M (vc2, 2));\n+  dcl_avc4 (M (vc4, 3));\n+  dcl_avc8 (M (vc8, 4));\n+\n+  dcl_avs1 (M (vs1, 5));\n+  dcl_avs2 (M (vs2, 6));\n+  dcl_avs4 (M (vs4, 7));\n+  dcl_avs8 (M (vs8, 8));\n+\n+  dcl_avi1 (M (vi1, 9));\n+  dcl_avi2 (M (vi2, 10));\n+  dcl_avi4 (M (vi4, 11));\n+  dcl_avi8 (M (vi8, 12));\n+\n+  dcl_avll1 (M (vll1, 13));\n+  dcl_avll2 (M (vll2, 14));\n+  dcl_avll4 (M (vll4, 15));\n+  dcl_avll8 (M (vll8, 16));\n+\n+  dcl_avf1 (M (vf1, 17));\n+  dcl_avf2 (M (vf2, 18));\n+  dcl_avf4 (M (vf4, 19));\n+  dcl_avf8 (M (vf8, 20));\n+\n+  dcl_avd1 (M (vd1, 21));\n+  dcl_avd2 (M (vd2, 22));\n+  dcl_avd4 (M (vd4, 23));\n+  dcl_avd8 (M (vd8, 24));\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avc1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avc1(vc1 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avc2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avc2(vc2 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avc4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avc4(vc4 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avc8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avc8(vc8 a)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avs1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avs1(vs1 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avs2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avs2(vs2 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avs4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avs4(vs4 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avs8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avs8(vs8 a)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avi1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avi1(vi1 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avi2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avi2(vi2 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avi4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avi4(vi4 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avi8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avi8(vi8 a)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avll1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avll1(vll1 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avll2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avll2(vll2 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avll4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avll4(vll4 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avll8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avll8(vll8 a)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avf1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avf1(vf1 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avf2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avf2(vf2 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avf4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avf4(vf4 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avf8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avf8(vf8 a)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avd1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avd1(vd1 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avd2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avd2(vd2 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avd4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avd4(vd4 a)\n+{\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_avd8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+void dfn_avd8(vd8 a)\n+{\n+}"}, {"sha": "78adf5097eb8b137e5ffed3e2b75411cd5e08dc1", "filename": "gcc/testsuite/gcc.target/nvptx/abi-vect-ret.c", "status": "added", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vect-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eba92d0a0594bda5b53fcb3c8f84f164c653b6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vect-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fabi-vect-ret.c?ref=44eba92d0a0594bda5b53fcb3c8f84f164c653b6", "patch": "@@ -0,0 +1,249 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-pedantic -Wno-long-long -m64\" } */\n+\n+/* Vector return.  Return via pointer.  */\n+\n+typedef char __attribute__ ((vector_size (1))) vc1;\n+typedef char __attribute__ ((vector_size (2))) vc2;\n+typedef char __attribute__ ((vector_size (4))) vc4;\n+typedef char __attribute__ ((vector_size (8))) vc8;\n+\n+typedef short __attribute__ ((vector_size (2))) vs1;\n+typedef short __attribute__ ((vector_size (4))) vs2;\n+typedef short __attribute__ ((vector_size (8))) vs4;\n+typedef short __attribute__ ((vector_size (16))) vs8;\n+\n+typedef int __attribute__ ((vector_size (4))) vi1;\n+typedef int __attribute__ ((vector_size (8))) vi2;\n+typedef int __attribute__ ((vector_size (16))) vi4;\n+typedef int __attribute__ ((vector_size (32))) vi8;\n+\n+typedef long long __attribute__ ((vector_size (8))) vll1;\n+typedef long long __attribute__ ((vector_size (16))) vll2;\n+typedef long long __attribute__ ((vector_size (32))) vll4;\n+typedef long long __attribute__ ((vector_size (64))) vll8;\n+\n+typedef float __attribute__ ((vector_size (4))) vf1;\n+typedef float __attribute__ ((vector_size (8))) vf2;\n+typedef float __attribute__ ((vector_size (16))) vf4;\n+typedef float __attribute__ ((vector_size (32))) vf8;\n+\n+typedef double __attribute__ ((vector_size (8))) vd1;\n+typedef double __attribute__ ((vector_size (16))) vd2;\n+typedef double __attribute__ ((vector_size (32))) vd4;\n+typedef double __attribute__ ((vector_size (64))) vd8;\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvc1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vc1 dcl_rvc1 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvc2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vc2 dcl_rvc2 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvc4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vc4 dcl_rvc4 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvc8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vc8 dcl_rvc8 (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvs1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vs1 dcl_rvs1 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvs2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vs2 dcl_rvs2 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvs4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vs4 dcl_rvs4 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvs8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vs8 dcl_rvs8 (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvi1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vi1 dcl_rvi1 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvi2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vi2 dcl_rvi2 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvi4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vi4 dcl_rvi4 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvi8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vi8 dcl_rvi8 (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvll1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vll1 dcl_rvll1 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvll2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vll2 dcl_rvll2 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvll4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vll4 dcl_rvll4 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvll8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vll8 dcl_rvll8 (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvf1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vf1 dcl_rvf1 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvf2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vf2 dcl_rvf2 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvf4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vf4 dcl_rvf4 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvf8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vf8 dcl_rvf8 (void);\n+\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvd1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vd1 dcl_rvd1 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvd2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vd2 dcl_rvd2 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvd4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vd4 dcl_rvd4 (void);\n+/* { dg-final { scan-assembler-times \".extern .func dcl_rvd8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\);\" 1 } } */\n+vd8 dcl_rvd8 (void);\n+\n+void  test_1 (void)\n+{\n+  dcl_rvc1 ();\n+  dcl_rvc2 ();\n+  dcl_rvc4 ();\n+  dcl_rvc8 ();\n+  \n+  dcl_rvs1 ();\n+  dcl_rvs2 ();\n+  dcl_rvs4 ();\n+  dcl_rvs8 ();\n+  \n+  dcl_rvi1 ();\n+  dcl_rvi2 ();\n+  dcl_rvi4 ();\n+  dcl_rvi8 ();\n+\n+  dcl_rvll1 ();\n+  dcl_rvll2 ();\n+  dcl_rvll4 ();\n+  dcl_rvll8 ();\n+  \n+  dcl_rvf1 ();\n+  dcl_rvf2 ();\n+  dcl_rvf4 ();\n+  dcl_rvf8 ();\n+\n+  dcl_rvd1 ();\n+  dcl_rvd2 ();\n+  dcl_rvd4 ();\n+  dcl_rvd8 ();\n+}\n+\n+#define M(T, V) ({T t;t[0]= V;t;})\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvc1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vc1 dfn_rvc1 (void)\n+{\n+  return M (vc1, 1);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvc2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vc2 dfn_rvc2 (void)\n+{\n+  return M (vc2, 2);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvc4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vc4 dfn_rvc4 (void)\n+{\n+  return M (vc4, 3);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvc8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vc8 dfn_rvc8 (void)\n+{\n+  return M (vc8, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvs1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vs1 dfn_rvs1 (void)\n+{\n+  return M (vs1, 5);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvs2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vs2 dfn_rvs2 (void)\n+{\n+  return M (vs2, 6);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvs4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vs4 dfn_rvs4 (void)\n+{\n+  return M (vs4, 7);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvs8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vs8 dfn_rvs8 (void)\n+{\n+  return M (vs8, 8);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvi1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vi1 dfn_rvi1 (void)\n+{\n+  return M (vi1, 9);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvi2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vi2 dfn_rvi2 (void)\n+{\n+  return M (vi2, 10);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvi4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vi4 dfn_rvi4 (void)\n+{\n+  return M (vi4, 11);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvi8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vi8 dfn_rvi8 (void)\n+{\n+  return M (vi8, 12);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvll1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vll1 dfn_rvll1 (void)\n+{\n+  return M (vll1, 13);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvll2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vll2 dfn_rvll2 (void)\n+{\n+  return M (vll2, 14);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvll4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vll4 dfn_rvll4 (void)\n+{\n+  return M (vll4, 16);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvll8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vll8 dfn_rvll8 (void)\n+{\n+  return M (vll8, 6);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvf1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vf1 dfn_rvf1 (void)\n+{\n+  return M (vf1, 17);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvf2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vf2 dfn_rvf2 (void)\n+{\n+  return M (vf2, 18);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvf4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vf4 dfn_rvf4 (void)\n+{\n+  return M (vf4, 19);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvf8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vf8 dfn_rvf8 (void)\n+{\n+  return M (vf8, 20);\n+}\n+\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvd1 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vd1 dfn_rvd1 (void)\n+{\n+  return M (vd1, 21);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvd2 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vd2 dfn_rvd2 (void)\n+{\n+  return M (vd2, 22);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvd4 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vd4 dfn_rvd4 (void)\n+{\n+  return M (vd4, 23);\n+}\n+/* { dg-final { scan-assembler-times \".visible .func dfn_rvd8 \\\\(.param.u64 %\\[_a-z0-9\\]*\\\\)(?:;|\\[\\r\\n\\]+\\{)\" 2 } } */\n+vd8 dfn_rvd8 (void)\n+{\n+  return M (vd8, 24);\n+}"}]}