{"sha": "2a04824b9f21d6a57b655efb7fc531a80e6999b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwNDgyNGI5ZjIxZDZhNTdiNjU1ZWZiN2ZjNTMxYTgwZTY5OTliNA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-07-06T01:22:55Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-07-06T01:22:55Z"}, "message": "pa.c (function_value): Handle small aggregates on 32-bit targets.\n\n\t* pa.c (function_value): Handle small aggregates on 32-bit targets.\n\t(function_arg): Pass small aggregates in general registers on 32-bit\n\ttargets.\n\t* som.h (MEMBER_TYPE_FORCES_BLK): Delete define.\n\nFrom-SVN: r101646", "tree": {"sha": "3f5b8ea75be3c37f57e5430273873c2acd44499d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f5b8ea75be3c37f57e5430273873c2acd44499d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a04824b9f21d6a57b655efb7fc531a80e6999b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a04824b9f21d6a57b655efb7fc531a80e6999b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a04824b9f21d6a57b655efb7fc531a80e6999b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a04824b9f21d6a57b655efb7fc531a80e6999b4/comments", "author": null, "committer": null, "parents": [{"sha": "4bf8e1185372b64630d1c390c611474e474a39ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf8e1185372b64630d1c390c611474e474a39ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bf8e1185372b64630d1c390c611474e474a39ae"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "c452f207821d687ee7aff6259114eb39fdf8668b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a04824b9f21d6a57b655efb7fc531a80e6999b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a04824b9f21d6a57b655efb7fc531a80e6999b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a04824b9f21d6a57b655efb7fc531a80e6999b4", "patch": "@@ -1,3 +1,10 @@\n+2005-07-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (function_value): Handle small aggregates on 32-bit targets.\n+\t(function_arg): Pass small aggregates in general registers on 32-bit\n+\ttargets.\n+\t* som.h (MEMBER_TYPE_FORCES_BLK): Delete define.\n+\n 2005-07-05  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* Makefile.in (final.o): Fix dependencies."}, {"sha": "969da837a0144928d98c946e47bd9514b4930a7b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a04824b9f21d6a57b655efb7fc531a80e6999b4/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a04824b9f21d6a57b655efb7fc531a80e6999b4/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2a04824b9f21d6a57b655efb7fc531a80e6999b4", "patch": "@@ -8580,24 +8580,40 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode valmode;\n \n-  /* Aggregates with a size less than or equal to 128 bits are returned\n-     in GR 28(-29).  They are left justified.  The pad bits are undefined.\n-     Larger aggregates are returned in memory.  */\n-  if (TARGET_64BIT && AGGREGATE_TYPE_P (valtype))\n+  if (AGGREGATE_TYPE_P (valtype))\n     {\n-      rtx loc[2];\n-      int i, offset = 0;\n-      int ub = int_size_in_bytes (valtype) <= UNITS_PER_WORD ? 1 : 2;\n+      if (TARGET_64BIT)\n+\t{\n+          /* Aggregates with a size less than or equal to 128 bits are\n+\t     returned in GR 28(-29).  They are left justified.  The pad\n+\t     bits are undefined.  Larger aggregates are returned in\n+\t     memory.  */\n+\t  rtx loc[2];\n+\t  int i, offset = 0;\n+\t  int ub = int_size_in_bytes (valtype) <= UNITS_PER_WORD ? 1 : 2;\n+\n+\t  for (i = 0; i < ub; i++)\n+\t    {\n+\t      loc[i] = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t  gen_rtx_REG (DImode, 28 + i),\n+\t\t\t\t\t  GEN_INT (offset));\n+\t      offset += 8;\n+\t    }\n \n-      for (i = 0; i < ub; i++)\n+\t  return gen_rtx_PARALLEL (BLKmode, gen_rtvec_v (ub, loc));\n+\t}\n+      else if (int_size_in_bytes (valtype) > UNITS_PER_WORD)\n \t{\n-\t  loc[i] = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (DImode, 28 + i),\n-\t\t\t\t      GEN_INT (offset));\n-\t  offset += 8;\n+\t  /* Aggregates 5 to 8 bytes in size are returned in general\n+\t     registers r28-r29 in the same manner as other non\n+\t     floating-point objects.  The data is right-justified and\n+\t     zero-extended to 64 bits.  This is opposite to the normal\n+\t     justification used on big endian targets and requires\n+\t     special treatment.  */\n+\t  rtx loc = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t       gen_rtx_REG (DImode, 28), const0_rtx);\n+\t  return gen_rtx_PARALLEL (BLKmode, gen_rtvec (1, loc));\n \t}\n-\n-      return gen_rtx_PARALLEL (BLKmode, gen_rtvec_v (ub, loc));\n     }\n \n   if ((INTEGRAL_TYPE_P (valtype)\n@@ -8608,6 +8624,7 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n     valmode = TYPE_MODE (valtype);\n \n   if (TREE_CODE (valtype) == REAL_TYPE\n+      && !AGGREGATE_TYPE_P (valtype)\n       && TYPE_MODE (valtype) != TFmode\n       && !TARGET_SOFT_FLOAT)\n     return gen_rtx_REG (valmode, 32);\n@@ -8733,12 +8750,12 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t     to 64 bits.  This is opposite to the normal justification\n \t     used on big endian targets and requires special treatment.\n \t     We now define BLOCK_REG_PADDING to pad these objects.  */\n-\t  if (mode == BLKmode)\n+\t  if (mode == BLKmode || (type && AGGREGATE_TYPE_P (type)))\n \t    {\n \t      rtx loc = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t\t\t   gen_rtx_REG (DImode, gpr_reg_base),\n \t\t\t\t\t   const0_rtx);\n-\t      return gen_rtx_PARALLEL (mode, gen_rtvec (1, loc));\n+\t      return gen_rtx_PARALLEL (BLKmode, gen_rtvec (1, loc));\n \t    }\n \t}\n       else\n@@ -8799,7 +8816,9 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t      && cum->indirect)\n \t  /* If the parameter is not a floating point parameter, then\n \t     it belongs in GPRs.  */\n-\t  || !FLOAT_MODE_P (mode))\n+\t  || !FLOAT_MODE_P (mode)\n+\t  /* Structure with single SFmode field belongs in GPR.  */\n+\t  || (type && AGGREGATE_TYPE_P (type)))\n \tretval = gen_rtx_REG (mode, gpr_reg_base);\n       else\n \tretval = gen_rtx_REG (mode, fpr_reg_base);"}, {"sha": "109e2a1647645b55ebd0a6b1895e5230ceb8a7cd", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a04824b9f21d6a57b655efb7fc531a80e6999b4/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a04824b9f21d6a57b655efb7fc531a80e6999b4/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=2a04824b9f21d6a57b655efb7fc531a80e6999b4", "patch": "@@ -307,10 +307,6 @@ do {\t\t\t\t\t\t\\\n    cannot be moved after installation using a symlink.  */\n #define ALWAYS_STRIP_DOTDOT 1\n \n-/* Aggregates with a single float or double field should be passed and\n-   returned in the general registers.  */\n-#define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) (MODE==SFmode || MODE==DFmode)\n-\n /* If GAS supports weak, we can support weak when we have working linker\n    support for secondary definitions and are generating code for GAS.  */\n #ifdef HAVE_GAS_WEAK"}]}