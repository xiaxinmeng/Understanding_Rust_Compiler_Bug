{"sha": "62dd2904f05ee752bbeff43a196b90ecd7b94616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkZDI5MDRmMDVlZTc1MmJiZWZmNDNhMTk2YjkwZWNkN2I5NDYxNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2019-12-17T01:29:09Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-12-17T01:29:09Z"}, "message": "Use add for a = a + b and a = b + a when possible.\n\nSince except for Bonnell,\n\n01 fb                   add    %edi,%ebx\n\nis faster and shorter than\n\n8d 1c 1f                lea    (%rdi,%rbx,1),%ebx\n\nwe should use add for a = a + b and a = b + a when possible if not\noptimizing for Bonnell.\n\nTested on x86-64.\n\n2019-12-17  H.J. Lu  <hjl.tools@gmail.com>\n\ngcc/\n\n\tPR target/92807\n\t* config/i386/i386.c (ix86_lea_outperforms): Check !TARGET_BONNELL.\n\t(ix86_avoid_lea_for_addr): When not optimizing for Bonnell, use add\n\tfor a = a + b and a = b + a.\n\ngcc/testsuite/\n\n\tPR target/92807\n\t* gcc.target/i386/pr92807-1.c: New test.\n\nFrom-SVN: r279451", "tree": {"sha": "6a5a2ca8520fd7b5c84211a45d663e981d1173fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a5a2ca8520fd7b5c84211a45d663e981d1173fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62dd2904f05ee752bbeff43a196b90ecd7b94616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62dd2904f05ee752bbeff43a196b90ecd7b94616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62dd2904f05ee752bbeff43a196b90ecd7b94616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62dd2904f05ee752bbeff43a196b90ecd7b94616/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d187dab3873eb9737eb80ba02bb1ae11eae4e133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d187dab3873eb9737eb80ba02bb1ae11eae4e133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d187dab3873eb9737eb80ba02bb1ae11eae4e133"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "9a37d825362a0f05552d97010801799d8463ade0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62dd2904f05ee752bbeff43a196b90ecd7b94616/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62dd2904f05ee752bbeff43a196b90ecd7b94616/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62dd2904f05ee752bbeff43a196b90ecd7b94616", "patch": "@@ -1,3 +1,10 @@\n+2019-12-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/92807\n+\t* config/i386/i386.c (ix86_lea_outperforms): Check !TARGET_BONNELL.\n+\t(ix86_avoid_lea_for_addr): When not optimizing for Bonnell, use add\n+\tfor a = a + b and a = b + a.\n+\n 2019-12-16  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/92952"}, {"sha": "02f4d000c2b26be868b69b50bef769fd28bc31c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62dd2904f05ee752bbeff43a196b90ecd7b94616/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62dd2904f05ee752bbeff43a196b90ecd7b94616/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=62dd2904f05ee752bbeff43a196b90ecd7b94616", "patch": "@@ -14433,11 +14433,10 @@ ix86_lea_outperforms (rtx_insn *insn, unsigned int regno0, unsigned int regno1,\n {\n   int dist_define, dist_use;\n \n-  /* For Silvermont if using a 2-source or 3-source LEA for\n-     non-destructive destination purposes, or due to wanting\n-     ability to use SCALE, the use of LEA is justified.  */\n-  if (TARGET_SILVERMONT || TARGET_GOLDMONT || TARGET_GOLDMONT_PLUS\n-      || TARGET_TREMONT || TARGET_INTEL)\n+  /* For Atom processors newer than Bonnell, if using a 2-source or\n+     3-source LEA for non-destructive destination purposes, or due to\n+     wanting ability to use SCALE, the use of LEA is justified.  */\n+  if (!TARGET_BONNELL)\n     {\n       if (has_scale)\n \treturn true;\n@@ -14572,10 +14571,6 @@ ix86_avoid_lea_for_addr (rtx_insn *insn, rtx operands[])\n   struct ix86_address parts;\n   int ok;\n \n-  /* Check we need to optimize.  */\n-  if (!TARGET_AVOID_LEA_FOR_ADDR || optimize_function_for_size_p (cfun))\n-    return false;\n-\n   /* The \"at least two components\" test below might not catch simple\n      move or zero extension insns if parts.base is non-NULL and parts.disp\n      is const0_rtx as the only components in the address, e.g. if the\n@@ -14612,6 +14607,20 @@ ix86_avoid_lea_for_addr (rtx_insn *insn, rtx operands[])\n   if (parts.index)\n     regno2 = true_regnum (parts.index);\n \n+  /* Use add for a = a + b and a = b + a since it is faster and shorter\n+     than lea for most processors.  For the processors like BONNELL, if\n+     the destination register of LEA holds an actual address which will\n+     be used soon, LEA is better and otherwise ADD is better.  */\n+  if (!TARGET_BONNELL\n+      && parts.scale == 1\n+      && (!parts.disp || parts.disp == const0_rtx)\n+      && (regno0 == regno1 || regno0 == regno2))\n+    return true;\n+\n+  /* Check we need to optimize.  */\n+  if (!TARGET_AVOID_LEA_FOR_ADDR || optimize_function_for_size_p (cfun))\n+    return false;\n+\n   split_cost = 0;\n \n   /* Compute how many cycles we will add to execution time"}, {"sha": "4142c507e2a9c02dfdf566e8f545a5fe47e67878", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62dd2904f05ee752bbeff43a196b90ecd7b94616/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62dd2904f05ee752bbeff43a196b90ecd7b94616/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62dd2904f05ee752bbeff43a196b90ecd7b94616", "patch": "@@ -1,3 +1,8 @@\n+2019-12-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/92807\n+\t* gcc.target/i386/pr92807-1.c: New test.\n+\n 2019-12-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* g++.dg/init/dso_handle1.C: Require cxa_atexit support."}, {"sha": "00f92930af929bbdb6ac5559469fb0ea9cea8130", "filename": "gcc/testsuite/gcc.target/i386/pr92807-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62dd2904f05ee752bbeff43a196b90ecd7b94616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92807-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62dd2904f05ee752bbeff43a196b90ecd7b94616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92807-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92807-1.c?ref=62dd2904f05ee752bbeff43a196b90ecd7b94616", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int\n+abs2 (unsigned int a) \n+{\n+  unsigned int s = ((a>>15)&0x10001)*0xffff;\n+  return (a+s)^s;\n+}\n+\n+/* { dg-final { scan-assembler-not \"leal\" } } */"}]}