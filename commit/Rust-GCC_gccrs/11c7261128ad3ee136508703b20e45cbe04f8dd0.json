{"sha": "11c7261128ad3ee136508703b20e45cbe04f8dd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFjNzI2MTEyOGFkM2VlMTM2NTA4NzAzYjIwZTQ1Y2JlMDRmOGRkMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-11T20:33:41Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-11T20:33:41Z"}, "message": "c++: constrained class template friend [PR93467]\n\nThis fixes two issues in our handling of constrained class template\nfriend declarations.\n\nThe first issue is that we fail to set the constraints on the injected\nclass template declaration during tsubst_friend_class.\n\nThe second issue is that the template parameter levels within the parsed\nconstraints of a class template friend declaration are shifted if the\nenclosing class is a template, and this shift leads to spurious\nconstraint mismatch errors in associate_classtype_constraints if the\nfriend declaration refers to an already declared class template.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93467\n\t* constraint.cc (associate_classtype_constraints): If there is a\n\tdiscrepancy between the current template depth and the template\n\tdepth of the original declaration, then adjust the template\n\tparameter depth within the current constraints appropriately.\n\t* pt.c (tsubst_friend_class): Substitute into and set the\n\tconstraints on the injected declaration.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93467\n\t* g++.dg/cpp2a/concepts-friend6.C: New test.\n\t* g++.dg/cpp2a/concepts-friend7.C: New test.", "tree": {"sha": "f50d51ecd1fe46f46e65b4df9dedbcc499604bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f50d51ecd1fe46f46e65b4df9dedbcc499604bcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11c7261128ad3ee136508703b20e45cbe04f8dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c7261128ad3ee136508703b20e45cbe04f8dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c7261128ad3ee136508703b20e45cbe04f8dd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c7261128ad3ee136508703b20e45cbe04f8dd0/comments", "author": null, "committer": null, "parents": [{"sha": "df665e568dcba2fe0b14a6cf0888cc78b4ebbf44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df665e568dcba2fe0b14a6cf0888cc78b4ebbf44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df665e568dcba2fe0b14a6cf0888cc78b4ebbf44"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "d0da2300ba99e2825db59fd5acbdc43bf6aa9cf3", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c7261128ad3ee136508703b20e45cbe04f8dd0/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c7261128ad3ee136508703b20e45cbe04f8dd0/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=11c7261128ad3ee136508703b20e45cbe04f8dd0", "patch": "@@ -1075,6 +1075,19 @@ associate_classtype_constraints (tree type)\n \t original declaration.  */\n       if (tree orig_ci = get_constraints (decl))\n         {\n+\t  if (int extra_levels = (TMPL_PARMS_DEPTH (current_template_parms)\n+\t\t\t\t  - TMPL_ARGS_DEPTH (TYPE_TI_ARGS (type))))\n+\t    {\n+\t      /* If there is a discrepancy between the current template depth\n+\t\t and the template depth of the original declaration, then we\n+\t\t must be redeclaring a class template as part of a friend\n+\t\t declaration within another class template.  Before matching\n+\t\t constraints, we need to reduce the template parameter level\n+\t\t within the current constraints via substitution.  */\n+\t      tree outer_gtargs = template_parms_to_args (current_template_parms);\n+\t      TREE_VEC_LENGTH (outer_gtargs) = extra_levels;\n+\t      ci = tsubst_constraint_info (ci, outer_gtargs, tf_none, NULL_TREE);\n+\t    }\n           if (!equivalent_constraints (ci, orig_ci))\n             {\n \t      error (\"%qT does not match original declaration\", type);"}, {"sha": "cdf6a3eeaf33f05526f5aa618dbfec439dd7377e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c7261128ad3ee136508703b20e45cbe04f8dd0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c7261128ad3ee136508703b20e45cbe04f8dd0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=11c7261128ad3ee136508703b20e45cbe04f8dd0", "patch": "@@ -11213,6 +11213,16 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n \t  DECL_ANTICIPATED (tmpl)\n \t    = DECL_ANTICIPATED (DECL_TEMPLATE_RESULT (tmpl)) = true;\n \n+\t  /* Substitute into and set the constraints on the new declaration.  */\n+\t  if (tree ci = get_constraints (friend_tmpl))\n+\t    {\n+\t      ++processing_template_decl;\n+\t      ci = tsubst_constraint_info (ci, args, tf_warning_or_error,\n+\t\t\t\t\t   DECL_FRIEND_CONTEXT (friend_tmpl));\n+\t      --processing_template_decl;\n+\t      set_constraints (tmpl, ci);\n+\t    }\n+\n \t  /* Inject this template into the enclosing namspace scope.  */\n \t  tmpl = pushdecl_namespace_level (tmpl, true);\n \t}"}, {"sha": "11e8313f0ac0a9342b9525bc185e915949afcac9", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend6.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c7261128ad3ee136508703b20e45cbe04f8dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c7261128ad3ee136508703b20e45cbe04f8dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend6.C?ref=11c7261128ad3ee136508703b20e45cbe04f8dd0", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/93467\n+// { dg-do compile { target c++20 } }\n+\n+template<bool B> requires B\n+  class C;\n+\n+template<typename>\n+class S1\n+{\n+  template<bool B> requires B\n+    friend class ::C;\n+};\n+\n+template<typename>\n+class S2\n+{\n+  template<bool B> requires (!B)\n+    friend class ::C; // { dg-error \"does not match original declaration\" }\n+};"}, {"sha": "4481b5c4af48e116b56e443bae90922034ef7139", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend7.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c7261128ad3ee136508703b20e45cbe04f8dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c7261128ad3ee136508703b20e45cbe04f8dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend7.C?ref=11c7261128ad3ee136508703b20e45cbe04f8dd0", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/93467\n+// { dg-do compile { target c++20 } }\n+\n+template<typename T> concept True = true;\n+\n+template<typename U>\n+struct S1 {\n+    template<True T> friend struct S2; // friend declaration for S2\n+};\n+\n+S1<int> s; // instantiate S1\n+\n+template<True T> struct S2; // another declaration for S2\n+\n+template<typename U>\n+struct S3 {\n+    template<True T> friend struct ::S2; // a third declaration for S2\n+};"}]}