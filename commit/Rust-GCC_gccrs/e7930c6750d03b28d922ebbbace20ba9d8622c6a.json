{"sha": "e7930c6750d03b28d922ebbbace20ba9d8622c6a", "node_id": "C_kwDOANBUbNoAKGU3OTMwYzY3NTBkMDNiMjhkOTIyZWJiYmFjZTIwYmE5ZDg2MjJjNmE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T14:12:31Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T14:12:31Z"}, "message": "c++: excessive satisfaction in check_methods [PR108579]\n\nIn check_methods we're unnecessarily checking satisfaction for all\nconstructors and assignment operators, even those that don't look like\ncopy/move special members.  In the testcase below this manifests as an\nunstable satisfaction error because the satisfaction result is first\ndetermined to be false during check_methods (since A<int> is incomplete\nat this point) and later true after completion of A<int>.\n\nThis patch fixes this simply by swapping the order of the\nconstraint_satisfied_p and copy/move_fn_p tests.\n\n\tPR c++/108579\n\ngcc/cp/ChangeLog:\n\n\t* class.cc (check_methods): Swap order of constraints_satisfied_p\n\tand copy/move_fn_p tests.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-pr108579.C: New test.", "tree": {"sha": "9cb5a58ce1711377f7bdeb4489da975119130c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cb5a58ce1711377f7bdeb4489da975119130c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7930c6750d03b28d922ebbbace20ba9d8622c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7930c6750d03b28d922ebbbace20ba9d8622c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7930c6750d03b28d922ebbbace20ba9d8622c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7930c6750d03b28d922ebbbace20ba9d8622c6a/comments", "author": null, "committer": null, "parents": [{"sha": "e8109bd87766be88e83fe88a44433dae16358a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8109bd87766be88e83fe88a44433dae16358a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8109bd87766be88e83fe88a44433dae16358a02"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "40e6b7365a8a2997e2e72c4265bbdf82b4f8f1e0", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7930c6750d03b28d922ebbbace20ba9d8622c6a/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7930c6750d03b28d922ebbbace20ba9d8622c6a/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=e7930c6750d03b28d922ebbbace20ba9d8622c6a", "patch": "@@ -4822,11 +4822,11 @@ check_methods (tree t)\n \t/* Might be trivial.  */;\n       else if (TREE_CODE (fn) == TEMPLATE_DECL)\n \t/* Templates are never special members.  */;\n-      else if (!constraints_satisfied_p (fn))\n-\t/* Not eligible.  */;\n-      else if (copy_fn_p (fn))\n+      else if (copy_fn_p (fn)\n+\t       && constraints_satisfied_p (fn))\n \tTYPE_HAS_COMPLEX_COPY_CTOR (t) = true;\n-      else if (move_fn_p (fn))\n+      else if (move_fn_p (fn)\n+\t       && constraints_satisfied_p (fn))\n \tTYPE_HAS_COMPLEX_MOVE_CTOR (t) = true;\n     }\n \n@@ -4836,11 +4836,11 @@ check_methods (tree t)\n \t/* Might be trivial.  */;\n       else if (TREE_CODE (fn) == TEMPLATE_DECL)\n \t/* Templates are never special members.  */;\n-      else if (!constraints_satisfied_p (fn))\n-\t/* Not eligible.  */;\n-      else if (copy_fn_p (fn))\n+      else if (copy_fn_p (fn)\n+\t       && constraints_satisfied_p (fn))\n \tTYPE_HAS_COMPLEX_COPY_ASSIGN (t) = true;\n-      else if (move_fn_p (fn))\n+      else if (move_fn_p (fn)\n+\t       && constraints_satisfied_p (fn))\n \tTYPE_HAS_COMPLEX_MOVE_ASSIGN (t) = true;\n     }\n }"}, {"sha": "f8721f0ab865a597ff5b071ffc6743c35fa4cfee", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr108579.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7930c6750d03b28d922ebbbace20ba9d8622c6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr108579.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7930c6750d03b28d922ebbbace20ba9d8622c6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr108579.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr108579.C?ref=e7930c6750d03b28d922ebbbace20ba9d8622c6a", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/108579\n+// { dg-do compile { target c++20 } }\n+\n+template<class T>\n+struct A {\n+  A(double, char);\n+  A(int) requires requires { A(0.0, 'c'); };\n+  A& operator=(int) requires requires { A(1.0, 'd'); };\n+};\n+\n+int main() {\n+  A<int> a(3);\n+  a = 5;\n+}"}]}