{"sha": "8e6d0dba166324f4b257329bd4b4ddc2b4522359", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2ZDBkYmExNjYzMjRmNGIyNTczMjliZDRiNGRkYzJiNDUyMjM1OQ==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2020-03-03T13:13:31Z"}, "committer": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2020-03-03T13:13:31Z"}, "message": "arm: ACLE BFloat16 convert intrinsics\n\nThis patch is part of a series adding support for Armv8.6-A features.\nIt implements intrinsics to convert between bfloat16 and float32\nformats.\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_bf16.h (vcvtah_f32_bf16, vcvth_bf16_f32): New.\n\t* config/arm/arm_neon.h (vcvt_f32_bf16, vcvtq_low_f32_bf16): New.\n\t(vcvtq_high_f32_bf16, vcvt_bf16_f32): New.\n\t(vcvtq_low_bf16_f32, vcvtq_high_bf16_f32): New.\n\t* config/arm/arm_neon_builtins.def (vbfcvt, vbfcvt_high): New entries.\n\t(vbfcvtv4sf, vbfcvtv4sf_high): Likewise.\n\t* config/arm/iterators.md (VBFCVT, VBFCVTM): New mode iterators.\n\t(V_bf_low, V_bf_cvt_m): New mode attributes.\n\t* config/arm/neon.md (neon_vbfcvtv4sf<VBFCVT:mode>): New.\n\t(neon_vbfcvtv4sf_highv8bf, neon_vbfcvtsf): New.\n\t(neon_vbfcvt<VBFCVT:mode>, neon_vbfcvt_highv8bf): New.\n\t(neon_vbfcvtbf_cvtmode<mode>, neon_vbfcvtbf): New\n\t* config/arm/unspecs.md (UNSPEC_BFCVT, UNSPEC_BFCVT_HIG): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/simd/bf16_cvt_1.c: New test.", "tree": {"sha": "128f011c82f3d7c24afbeb977c3caddc475d5cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128f011c82f3d7c24afbeb977c3caddc475d5cfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e6d0dba166324f4b257329bd4b4ddc2b4522359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6d0dba166324f4b257329bd4b4ddc2b4522359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6d0dba166324f4b257329bd4b4ddc2b4522359", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6d0dba166324f4b257329bd4b4ddc2b4522359/comments", "author": null, "committer": null, "parents": [{"sha": "9b4f00dd3f799337d8b8ef5e79f5a682c8059ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4f00dd3f799337d8b8ef5e79f5a682c8059ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4f00dd3f799337d8b8ef5e79f5a682c8059ab9"}], "stats": {"total": 229, "additions": 229, "deletions": 0}, "files": [{"sha": "862dffee119b41b9cce4a3bb7bb50716288f6703", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -1,3 +1,19 @@\n+2020-03-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/arm_bf16.h (vcvtah_f32_bf16, vcvth_bf16_f32): New.\n+\t* config/arm/arm_neon.h (vcvt_f32_bf16, vcvtq_low_f32_bf16): New.\n+\t(vcvtq_high_f32_bf16, vcvt_bf16_f32): New.\n+\t(vcvtq_low_bf16_f32, vcvtq_high_bf16_f32): New.\n+\t* config/arm/arm_neon_builtins.def (vbfcvt, vbfcvt_high): New entries.\n+\t(vbfcvtv4sf, vbfcvtv4sf_high): Likewise.\n+\t* config/arm/iterators.md (VBFCVT, VBFCVTM): New mode iterators.\n+\t(V_bf_low, V_bf_cvt_m): New mode attributes.\n+\t* config/arm/neon.md (neon_vbfcvtv4sf<VBFCVT:mode>): New.\n+\t(neon_vbfcvtv4sf_highv8bf, neon_vbfcvtsf): New.\n+\t(neon_vbfcvt<VBFCVT:mode>, neon_vbfcvt_highv8bf): New.\n+\t(neon_vbfcvtbf_cvtmode<mode>, neon_vbfcvtbf): New\n+\t* config/arm/unspecs.md (UNSPEC_BFCVT, UNSPEC_BFCVT_HIG): New.\n+\n 2020-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/93582"}, {"sha": "1aa593192c091850e3ffbe4433d18c0ff543173a", "filename": "gcc/config/arm/arm_bf16.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Farm_bf16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Farm_bf16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_bf16.h?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -34,6 +34,20 @@ extern \"C\" {\n typedef __bf16 bfloat16_t;\n typedef float float32_t;\n \n+__extension__ extern __inline float32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtah_f32_bf16 (bfloat16_t __a)\n+{\n+  return __builtin_neon_vbfcvtbf (__a);\n+}\n+\n+__extension__ extern __inline bfloat16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvth_bf16_f32 (float32_t __a)\n+{\n+  return __builtin_neon_vbfcvtsf (__a);\n+}\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "a66961d0c513323844dd069b05cdfccc3e432cfc", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -19379,6 +19379,55 @@ vbfdotq_lane_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x4_t __b,\n \n #pragma GCC pop_options\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+bf16\")\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvt_f32_bf16 (bfloat16x4_t __a)\n+{\n+  return __builtin_neon_vbfcvtv4bf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtq_low_f32_bf16 (bfloat16x8_t __a)\n+{\n+  return __builtin_neon_vbfcvtv8bf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtq_high_f32_bf16 (bfloat16x8_t __a)\n+{\n+  return __builtin_neon_vbfcvt_highv8bf (__a);\n+}\n+\n+__extension__ extern __inline bfloat16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvt_bf16_f32 (float32x4_t __a)\n+{\n+  return __builtin_neon_vbfcvtv4sfv4bf (__a);\n+}\n+\n+__extension__ extern __inline bfloat16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtq_low_bf16_f32 (float32x4_t __a)\n+{\n+  return __builtin_neon_vbfcvtv4sfv8bf (__a);\n+}\n+\n+/* The 'inactive' operand is not converted but it provides the\n+   low 64 bits to assemble the final 128-bit result.  */\n+__extension__ extern __inline bfloat16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtq_high_bf16_f32 (bfloat16x8_t inactive, float32x4_t __a)\n+{\n+  return __builtin_neon_vbfcvtv4sf_highv8bf (inactive, __a);\n+}\n+\n+#pragma GCC pop_options\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "48c06c43a1744da7e143f6070ac945e8dd7225b6", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -385,3 +385,9 @@ VAR1 (USTERNOP, usmmla, v16qi)\n VAR2 (TERNOP, vbfdot, v2sf, v4sf)\n VAR2 (MAC_LANE_PAIR, vbfdot_lanev4bf, v2sf, v4sf)\n VAR2 (MAC_LANE_PAIR, vbfdot_lanev8bf, v2sf, v4sf)\n+\n+VAR2 (UNOP, vbfcvt, sf, bf)\n+VAR2 (UNOP, vbfcvt, v4bf, v8bf)\n+VAR1 (UNOP, vbfcvt_high, v8bf)\n+VAR2 (UNOP, vbfcvtv4sf, v4bf, v8bf)\n+VAR1 (BINOP, vbfcvtv4sf_high, v8bf)"}, {"sha": "5f4e3d1235813ab81c176505f9a98d702359f7ec", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -229,6 +229,10 @@\n ;; Modes for polynomial or float values.\n (define_mode_iterator VPF [V8QI V16QI V2SF V4SF])\n \n+;; Modes for BF16 convert instructions.\n+(define_mode_iterator VBFCVT [V4BF V8BF])\n+(define_mode_iterator VBFCVTM [V2SI SF])\n+\n ;;----------------------------------------------------------------------------\n ;; Code iterators\n ;;----------------------------------------------------------------------------\n@@ -747,6 +751,12 @@\n                            (V2SF \"\") (V4SF \"\")\n                            (DI \"_neon\") (V2DI \"\")])\n \n+;; To select the low 64 bits of a vector.\n+(define_mode_attr V_bf_low [(V4BF \"P\") (V8BF \"e\")])\n+\n+;; To generate intermediate modes for BF16 scalar convert.\n+(define_mode_attr V_bf_cvt_m [(V2SI \"BF\") (SF \"V2SI\")])\n+\n \n ;; Scalars to be presented to scalar multiplication instructions\n ;; must satisfy the following constraints."}, {"sha": "f5286d9c4b1a309f6ebe864c86596aaceb05c05b", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -6660,3 +6660,80 @@ if (BYTES_BIG_ENDIAN)\n   }\n   [(set_attr \"type\" \"neon_dot<q>\")]\n )\n+\n+(define_insn \"neon_vbfcvtv4sf<VBFCVT:mode>\"\n+  [(set (match_operand:VBFCVT 0 \"register_operand\" \"=w\")\n+       (unspec:VBFCVT [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n+\tUNSPEC_BFCVT))]\n+  \"TARGET_BF16_SIMD\"\n+  \"vcvt.bf16.f32\\\\t%<V_bf_low>0, %q1\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_s_q\")]\n+)\n+\n+(define_insn \"neon_vbfcvtv4sf_highv8bf\"\n+  [(set (match_operand:V8BF 0 \"register_operand\" \"=w\")\n+       (unspec:V8BF [(match_operand:V8BF 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:V4SF 2 \"register_operand\" \"w\")]\n+\tUNSPEC_BFCVT_HIGH))]\n+  \"TARGET_BF16_SIMD\"\n+  \"vcvt.bf16.f32\\\\t%f0, %q2\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_s_q\")]\n+)\n+\n+(define_insn \"neon_vbfcvtsf\"\n+  [(set (match_operand:BF 0 \"register_operand\" \"=t\")\n+       (unspec:BF [(match_operand:SF 1 \"register_operand\" \"t\")]\n+\tUNSPEC_BFCVT))]\n+  \"TARGET_BF16_FP\"\n+  \"vcvtb.bf16.f32\\\\t%0, %1\"\n+  [(set_attr \"type\" \"f_cvt\")]\n+)\n+\n+(define_insn \"neon_vbfcvt<VBFCVT:mode>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+       (unspec:V4SF [(match_operand:VBFCVT 1 \"register_operand\" \"w\")]\n+\tUNSPEC_BFCVT))]\n+  \"TARGET_BF16_SIMD\"\n+  \"vshll.u32\\\\t%q0, %<V_bf_low>1, #16\"\n+  [(set_attr \"type\" \"neon_shift_imm_q\")]\n+)\n+\n+(define_insn \"neon_vbfcvt_highv8bf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+       (unspec:V4SF [(match_operand:V8BF 1 \"register_operand\" \"w\")]\n+\tUNSPEC_BFCVT_HIGH))]\n+  \"TARGET_BF16_SIMD\"\n+  \"vshll.u32\\\\t%q0, %f1, #16\"\n+  [(set_attr \"type\" \"neon_shift_imm_q\")]\n+)\n+\n+;; Convert a BF scalar operand to SF via VSHL.\n+;; VSHL doesn't accept 32-bit registers where the BF and SF scalar operands\n+;; would be allocated, therefore the operands must be converted to intermediate\n+;; vectors (i.e. V2SI) in order to apply 64-bit registers.\n+(define_expand \"neon_vbfcvtbf\"\n+  [(match_operand:SF 0 \"register_operand\")\n+   (unspec:SF [(match_operand:BF 1 \"register_operand\")] UNSPEC_BFCVT)]\n+  \"TARGET_BF16_FP\"\n+{\n+  rtx op0 = gen_reg_rtx (V2SImode);\n+  rtx op1 = gen_reg_rtx (V2SImode);\n+  emit_insn (gen_neon_vbfcvtbf_cvtmodev2si (op1, operands[1]));\n+  emit_insn (gen_neon_vshl_nv2si (op0, op1, gen_int_mode(16, SImode)));\n+  emit_insn (gen_neon_vbfcvtbf_cvtmodesf (operands[0], op0));\n+  DONE;\n+})\n+\n+;; Convert BF mode to V2SI and V2SI to SF.\n+;; Implement this by allocating a 32-bit operand in the low half of a 64-bit\n+;; register indexed by a 32-bit sub-register number.\n+;; This will generate reloads but compiler can optimize out the moves.\n+;; Use 'x' constraint to guarantee the 32-bit sub-registers in an indexable\n+;; range so that to avoid extra moves.\n+(define_insn \"neon_vbfcvtbf_cvtmode<mode>\"\n+  [(set (match_operand:VBFCVTM 0 \"register_operand\" \"=x\")\n+       (unspec:VBFCVTM [(match_operand:<V_bf_cvt_m> 1 \"register_operand\" \"0\")]\n+\tUNSPEC_BFCVT))]\n+  \"TARGET_BF16_FP\"\n+  \"\"\n+)"}, {"sha": "b36ae512a6ebcf231b46a24e127c62e22e71a34f", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -506,4 +506,6 @@\n   UNSPEC_MATMUL_S\n   UNSPEC_MATMUL_U\n   UNSPEC_MATMUL_US\n+  UNSPEC_BFCVT\n+  UNSPEC_BFCVT_HIGH\n ])"}, {"sha": "5b174bb03f26dfeccaa62f8a97cc981afe175b7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -1,3 +1,7 @@\n+2020-03-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/arm/simd/bf16_cvt_1.c: New test.\n+\n 2020-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/93582"}, {"sha": "04d4eee8e476ca57b6d60f9dbd3330bf71d80336", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_cvt_1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_cvt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6d0dba166324f4b257329bd4b4ddc2b4522359/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_cvt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_cvt_1.c?ref=8e6d0dba166324f4b257329bd4b4ddc2b4522359", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+float32_t test_vcvtah_f32_bf16 (bfloat16_t a)\n+{\n+  return vcvtah_f32_bf16 (a);\n+}\n+\n+bfloat16_t test_vcvth_bf16_f32 (float32_t a)\n+{\n+  return vcvth_bf16_f32 (a);\n+}\n+\n+float32x4_t test_vcvt_f32_bf16 (bfloat16x4_t a)\n+{\n+  return vcvt_f32_bf16 (a);\n+}\n+\n+float32x4_t test_vcvtq_low_f32_bf16 (bfloat16x8_t a)\n+{\n+  return vcvtq_low_f32_bf16 (a);\n+}\n+\n+float32x4_t test_vcvtq_high_f32_bf16 (bfloat16x8_t a)\n+{\n+  return vcvtq_high_f32_bf16 (a);\n+}\n+\n+bfloat16x4_t test_vcvt_bf16_f32 (float32x4_t a)\n+{\n+  return vcvt_bf16_f32 (a);\n+}\n+\n+bfloat16x8_t test_vcvtq_low_bf16_f32 (float32x4_t a)\n+{\n+  return vcvtq_low_bf16_f32 (a);\n+}\n+\n+bfloat16x8_t test_vcvtq_high_bf16_f32 (bfloat16x8_t inactive, float32x4_t a)\n+{\n+  return vcvtq_high_bf16_f32 (inactive, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {vcvtb.bf16.f32\\ts[0-9]+, s[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {vcvt.bf16.f32\\td[0-9]+, q[0-9]+\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {vshl.i32\\td[0-9]+, d[0-9]+, #16} 1 } } */\n+/* { dg-final { scan-assembler-times {vshll.u32\\tq[0-9]+, d[0-9]+, #16} 3 } } */"}]}