{"sha": "1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhYzg5ZGEyY2IxZjJhN2MyZDkzZjdmMzI1NDg0YzJkMTYxOWNhOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-03T23:35:00Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-07T16:54:30Z"}, "message": "c-family: Fix hang with -Wsequence-point [PR98126]\n\nverify_sequence_points uses verify_tree to recursively walk the\nsubexpressions of an expression, and while recursing, it also\nkeeps lists of expressions found after/before a sequence point.\nFor a large expression, the list can grow significantly.  And\nmerge_tlist is at least N(n^2): for a list of length n it will\niterate n(n -1) times, and call candidate_equal_p each time, and\nthat can recurse further.  warn_for_collision also has to go\nthrough the whole list.  With a large-enough expression, the\ncompilation can easily get stuck here for 24 hours.\n\nThis patch is a simple kludge: if we see that the expression is\noverly complex, don't even try.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/98126\n\t* c-common.c (verify_tree_lim_r): New function.\n\t(verify_sequence_points): Use it.  Use nullptr instead of 0.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98126\n\t* g++.dg/warn/Wsequence-point-4.C: New test.", "tree": {"sha": "d83a2760dce18de383aec51214737555dd9ad222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d83a2760dce18de383aec51214737555dd9ad222"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb268ffcf9f21e2981a71887324eb0aec245eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb268ffcf9f21e2981a71887324eb0aec245eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb268ffcf9f21e2981a71887324eb0aec245eea"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "0b348aec77b8262306b37d1e4a5de490ca293e8e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8", "patch": "@@ -2056,23 +2056,45 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n     }\n }\n \n+static constexpr size_t verify_sequence_points_limit = 1024;\n+\n+/* Called from verify_sequence_points via walk_tree.  */\n+\n+static tree\n+verify_tree_lim_r (tree *tp, int *walk_subtrees, void *data)\n+{\n+  if (++*((size_t *) data) > verify_sequence_points_limit)\n+    return integer_zero_node;\n+\n+  if (TYPE_P (*tp))\n+    *walk_subtrees = 0;\n+\n+  return NULL_TREE;\n+}\n+\n /* Try to warn for undefined behavior in EXPR due to missing sequence\n    points.  */\n \n void\n verify_sequence_points (tree expr)\n {\n-  struct tlist *before_sp = 0, *after_sp = 0;\n+  tlist *before_sp = nullptr, *after_sp = nullptr;\n+\n+  /* verify_tree is highly recursive, and merge_tlist is O(n^2),\n+     so we return early if the expression is too big.  */\n+  size_t n = 0;\n+  if (walk_tree (&expr, verify_tree_lim_r, &n, nullptr))\n+    return;\n \n-  warned_ids = 0;\n-  save_expr_cache = 0;\n-  if (tlist_firstobj == 0)\n+  warned_ids = nullptr;\n+  save_expr_cache = nullptr;\n+  if (!tlist_firstobj)\n     {\n       gcc_obstack_init (&tlist_obstack);\n       tlist_firstobj = (char *) obstack_alloc (&tlist_obstack, 0);\n     }\n \n-  verify_tree (expr, &before_sp, &after_sp, 0);\n+  verify_tree (expr, &before_sp, &after_sp, NULL_TREE);\n   warn_for_collisions (after_sp);\n   obstack_free (&tlist_obstack, tlist_firstobj);\n }"}, {"sha": "b3d9cf15ac67b4b26746f58e7c6dbd6fa7bed4c5", "filename": "gcc/testsuite/g++.dg/warn/Wsequence-point-4.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsequence-point-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsequence-point-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsequence-point-4.C?ref=1cac89da2cb1f2a7c2d93f7f325484c2d1619ca8", "patch": "@@ -0,0 +1,53 @@\n+// PR c++/98126\n+// { dg-do compile }\n+// { dg-options \"-Wsequence-point\" }\n+// Make sure we don't hang when verify_tree processes a large expression.\n+\n+struct T { bool operator==(const T &ot) const; };\n+\n+#define CMP(M, N, L) t[100 * M + 10 * N + L] == ot.t[100 * M + 10 * N + L] &&\n+\n+#define CMP1(M, N) \\\n+  CMP(M, N, 0) \\\n+  CMP(M, N, 1) \\\n+  CMP(M, N, 2) \\\n+  CMP(M, N, 3) \\\n+  CMP(M, N, 4) \\\n+  CMP(M, N, 5) \\\n+  CMP(M, N, 6) \\\n+  CMP(M, N, 7) \\\n+  CMP(M, N, 8) \\\n+  CMP(M, N, 9)\n+\n+#define CMP2(M) \\\n+  CMP1(M, 0) \\\n+  CMP1(M, 1) \\\n+  CMP1(M, 2) \\\n+  CMP1(M, 3) \\\n+  CMP1(M, 4) \\\n+  CMP1(M, 5) \\\n+  CMP1(M, 6) \\\n+  CMP1(M, 7) \\\n+  CMP1(M, 8) \\\n+  CMP1(M, 9)\n+\n+#define GENERATE_CMPS \\\n+  CMP2(0) \\\n+  CMP2(1) \\\n+  CMP2(2) \\\n+  CMP2(3) \\\n+  CMP2(4) \\\n+  CMP2(5) \\\n+  CMP2(6) \\\n+  CMP2(7) \\\n+  CMP2(8) \\\n+  CMP2(9)\n+\n+struct C {\n+  bool operator==(const C &ot) const {\n+    return\n+      GENERATE_CMPS\n+      true;\n+  }\n+  T t[999];\n+};"}]}