{"sha": "78db7d92ced4e201e72826fb2f438517c8cf8aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhkYjdkOTJjZWQ0ZTIwMWU3MjgyNmZiMmY0Mzg1MTdjOGNmOGFmZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-04-21T11:57:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-04-21T11:57:42Z"}, "message": "re PR middle-end/43570 (OpenMP: Invalid read of size 1 (libgomp.fortran/vla6.f90))\n\n\tPR middle-end/43570\n\t* omp-low.c (scan_sharing_clauses): Don't scan_omp_op\n\tOMP_CLAUSE_DECL for OMP_CLAUSE_COPYPRIVATE.\n\t(lower_copyprivate_clauses): Use private var in outer\n\tcontext instead of original var.  Make sure the types\n\tare correct for VLAs.\n\n\t* testsuite/libgomp.fortran/vla8.f90: New test.\n\nFrom-SVN: r158594", "tree": {"sha": "4883254927b6e3b967069aa55f4e7e93972324e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4883254927b6e3b967069aa55f4e7e93972324e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78db7d92ced4e201e72826fb2f438517c8cf8aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78db7d92ced4e201e72826fb2f438517c8cf8aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78db7d92ced4e201e72826fb2f438517c8cf8aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78db7d92ced4e201e72826fb2f438517c8cf8aff/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11152c95365532ec04eb12c3fd418b165a290a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11152c95365532ec04eb12c3fd418b165a290a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11152c95365532ec04eb12c3fd418b165a290a23"}], "stats": {"total": 296, "additions": 286, "deletions": 10}, "files": [{"sha": "66c7065e8d21b8cca58a2005a14d8565b37aee2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db7d92ced4e201e72826fb2f438517c8cf8aff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db7d92ced4e201e72826fb2f438517c8cf8aff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78db7d92ced4e201e72826fb2f438517c8cf8aff", "patch": "@@ -1,3 +1,12 @@\n+2010-04-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/43570\n+\t* omp-low.c (scan_sharing_clauses): Don't scan_omp_op\n+\tOMP_CLAUSE_DECL for OMP_CLAUSE_COPYPRIVATE.\n+\t(lower_copyprivate_clauses): Use private var in outer\n+\tcontext instead of original var.  Make sure the types\n+\tare correct for VLAs.\n+\n 2010-04-21  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (do_ds_constraint): Avoid escaping"}, {"sha": "cc36cb51bc570800c86a49e1a59faaa3a93f6180", "filename": "gcc/omp-low.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db7d92ced4e201e72826fb2f438517c8cf8aff/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db7d92ced4e201e72826fb2f438517c8cf8aff/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=78db7d92ced4e201e72826fb2f438517c8cf8aff", "patch": "@@ -1433,10 +1433,6 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  break;\n \n \tcase OMP_CLAUSE_COPYPRIVATE:\n-\t  if (ctx->outer)\n-\t    scan_omp_op (&OMP_CLAUSE_DECL (c), ctx->outer);\n-\t  /* FALLTHRU */\n-\n \tcase OMP_CLAUSE_COPYIN:\n \t  decl = OMP_CLAUSE_DECL (c);\n \t  by_ref = use_pointer_for_field (decl, NULL);\n@@ -2702,7 +2698,7 @@ lower_copyprivate_clauses (tree clauses, gimple_seq *slist, gimple_seq *rlist,\n \n   for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n     {\n-      tree var, ref, x;\n+      tree var, new_var, ref, x;\n       bool by_ref;\n       location_t clause_loc = OMP_CLAUSE_LOCATION (c);\n \n@@ -2713,17 +2709,29 @@ lower_copyprivate_clauses (tree clauses, gimple_seq *slist, gimple_seq *rlist,\n       by_ref = use_pointer_for_field (var, NULL);\n \n       ref = build_sender_ref (var, ctx);\n-      x = lookup_decl_in_outer_ctx (var, ctx);\n-      x = by_ref ? build_fold_addr_expr_loc (clause_loc, x) : x;\n+      x = new_var = lookup_decl_in_outer_ctx (var, ctx);\n+      if (by_ref)\n+\t{\n+\t  x = build_fold_addr_expr_loc (clause_loc, new_var);\n+\t  x = fold_convert_loc (clause_loc, TREE_TYPE (ref), x);\n+\t}\n       gimplify_assign (ref, x, slist);\n \n-      ref = build_receiver_ref (var, by_ref, ctx);\n+      ref = build_receiver_ref (var, false, ctx);\n+      if (by_ref)\n+\t{\n+\t  ref = fold_convert_loc (clause_loc,\n+\t\t\t\t  build_pointer_type (TREE_TYPE (new_var)),\n+\t\t\t\t  ref);\n+\t  ref = build_fold_indirect_ref_loc (clause_loc, ref);\n+\t}\n       if (is_reference (var))\n \t{\n+\t  ref = fold_convert_loc (clause_loc, TREE_TYPE (new_var), ref);\n \t  ref = build_fold_indirect_ref_loc (clause_loc, ref);\n-\t  var = build_fold_indirect_ref_loc (clause_loc, var);\n+\t  new_var = build_fold_indirect_ref_loc (clause_loc, new_var);\n \t}\n-      x = lang_hooks.decls.omp_clause_assign_op (c, var, ref);\n+      x = lang_hooks.decls.omp_clause_assign_op (c, new_var, ref);\n       gimplify_and_add (x, rlist);\n     }\n }"}, {"sha": "2b267e437a83f0e4c33acabb7fb277f415169454", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db7d92ced4e201e72826fb2f438517c8cf8aff/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db7d92ced4e201e72826fb2f438517c8cf8aff/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=78db7d92ced4e201e72826fb2f438517c8cf8aff", "patch": "@@ -1,3 +1,8 @@\n+2010-04-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/43570\n+\t* testsuite/libgomp.fortran/vla8.f90: New test.\n+\n 2010-04-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/43706"}, {"sha": "f66fe84a375b9a2ca69fe02aeffb491a7a654faa", "filename": "libgomp/testsuite/libgomp.fortran/vla8.f90", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78db7d92ced4e201e72826fb2f438517c8cf8aff/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fvla8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78db7d92ced4e201e72826fb2f438517c8cf8aff/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fvla8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fvla8.f90?ref=78db7d92ced4e201e72826fb2f438517c8cf8aff", "patch": "@@ -0,0 +1,254 @@\n+! { dg-do run }\n+\n+  call test\n+contains\n+  subroutine check (x, y, l)\n+    integer :: x, y\n+    logical :: l\n+    l = l .or. x .ne. y\n+  end subroutine check\n+\n+  subroutine foo (c, d, e, f, g, h, i, j, k, n)\n+    use omp_lib\n+    integer :: n\n+    character (len = *) :: c\n+    character (len = n) :: d\n+    integer, dimension (2, 3:5, n) :: e\n+    integer, dimension (2, 3:n, n) :: f\n+    character (len = *), dimension (5, 3:n) :: g\n+    character (len = n), dimension (5, 3:n) :: h\n+    real, dimension (:, :, :) :: i\n+    double precision, dimension (3:, 5:, 7:) :: j\n+    integer, dimension (:, :, :) :: k\n+    logical :: l\n+    integer :: p, q, r\n+    character (len = n) :: s\n+    integer, dimension (2, 3:5, n) :: t\n+    integer, dimension (2, 3:n, n) :: u\n+    character (len = n), dimension (5, 3:n) :: v\n+    character (len = 2 * n + 24) :: w\n+    integer :: x, z\n+    character (len = 1) :: y\n+    l = .false.\n+!$omp parallel default (none) private (c, d, e, f, g, h, i, j, k) &\n+!$omp & private (s, t, u, v) reduction (.or.:l) num_threads (6) &\n+!$omp private (p, q, r, w, x, y) shared (z)\n+    x = omp_get_thread_num ()\n+    w = ''\n+    if (x .eq. 0) w = 'thread0thr_number_0THREAD0THR_NUMBER_0'\n+    if (x .eq. 1) w = 'thread1thr_number_1THREAD1THR_NUMBER_1'\n+    if (x .eq. 2) w = 'thread2thr_number_2THREAD2THR_NUMBER_2'\n+    if (x .eq. 3) w = 'thread3thr_number_3THREAD3THR_NUMBER_3'\n+    if (x .eq. 4) w = 'thread4thr_number_4THREAD4THR_NUMBER_4'\n+    if (x .eq. 5) w = 'thread5thr_number_5THREAD5THR_NUMBER_5'\n+    c = w(8:19)\n+    d = w(1:7)\n+    forall (p = 1:2, q = 3:5, r = 1:7) e(p, q, r) = 5 * x + p + q + 2 * r\n+    forall (p = 1:2, q = 3:7, r = 1:7) f(p, q, r) = 25 * x + p + q + 2 * r\n+    forall (p = 1:5, q = 3:7, p + q .le. 8) g(p, q) = w(8:19)\n+    forall (p = 1:5, q = 3:7, p + q .gt. 8) g(p, q) = w(27:38)\n+    forall (p = 1:5, q = 3:7, p + q .le. 8) h(p, q) = w(1:7)\n+    forall (p = 1:5, q = 3:7, p + q .gt. 8) h(p, q) = w(20:26)\n+    forall (p = 3:5, q = 2:6, r = 1:7) i(p - 2, q - 1, r) = (7.5 + x) * p * q * r\n+    forall (p = 3:5, q = 2:6, r = 1:7) j(p, q + 3, r + 6) = (9.5 + x) * p * q * r\n+    forall (p = 1:5, q = 7:7, r = 4:6) k(p, q - 6, r - 3) = 19 + x + p + q + 3 * r\n+    s = w(20:26)\n+    forall (p = 1:2, q = 3:5, r = 1:7) t(p, q, r) = -10 + x + p - q + 2 * r\n+    forall (p = 1:2, q = 3:7, r = 1:7) u(p, q, r) = 30 - x - p + q - 2 * r\n+    forall (p = 1:5, q = 3:7, p + q .le. 8) v(p, q) = w(1:7)\n+    forall (p = 1:5, q = 3:7, p + q .gt. 8) v(p, q) = w(20:26)\n+!$omp barrier\n+    y = ''\n+    if (x .eq. 0) y = '0'\n+    if (x .eq. 1) y = '1'\n+    if (x .eq. 2) y = '2'\n+    if (x .eq. 3) y = '3'\n+    if (x .eq. 4) y = '4'\n+    if (x .eq. 5) y = '5'\n+    l = l .or. w(7:7) .ne. y\n+    l = l .or. w(19:19) .ne. y\n+    l = l .or. w(26:26) .ne. y\n+    l = l .or. w(38:38) .ne. y\n+    l = l .or. c .ne. w(8:19)\n+    l = l .or. d .ne. w(1:7)\n+    l = l .or. s .ne. w(20:26)\n+    do 103, p = 1, 2\n+      do 103, q = 3, 7\n+\tdo 103, r = 1, 7\n+\t  if (q .lt. 6) l = l .or. e(p, q, r) .ne. 5 * x + p + q + 2 * r\n+\t  l = l .or. f(p, q, r) .ne. 25 * x + p + q + 2 * r\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. g(r, q) .ne. w(8:19)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. g(r, q) .ne. w(27:38)\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. h(r, q) .ne. w(1:7)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. h(r, q) .ne. w(20:26)\n+\t  if (q .lt. 6) l = l .or. t(p, q, r) .ne. -10 + x + p - q + 2 * r\n+\t  l = l .or. u(p, q, r) .ne. 30 - x - p + q - 2 * r\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. v(r, q) .ne. w(1:7)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. v(r, q) .ne. w(20:26)\n+103 continue\n+    do 104, p = 3, 5\n+      do 104, q = 2, 6\n+\tdo 104, r = 1, 7\n+\t  l = l .or. i(p - 2, q - 1, r) .ne. (7.5 + x) * p * q * r\n+\t  l = l .or. j(p, q + 3, r + 6) .ne. (9.5 + x) * p * q * r\n+104 continue\n+    do 105, p = 1, 5\n+      do 105, q = 4, 6\n+\tl = l .or. k(p, 1, q - 3) .ne. 19 + x + p + 7 + 3 * q\n+105 continue\n+    call check (size (e, 1), 2, l)\n+    call check (size (e, 2), 3, l)\n+    call check (size (e, 3), 7, l)\n+    call check (size (e), 42, l)\n+    call check (size (f, 1), 2, l)\n+    call check (size (f, 2), 5, l)\n+    call check (size (f, 3), 7, l)\n+    call check (size (f), 70, l)\n+    call check (size (g, 1), 5, l)\n+    call check (size (g, 2), 5, l)\n+    call check (size (g), 25, l)\n+    call check (size (h, 1), 5, l)\n+    call check (size (h, 2), 5, l)\n+    call check (size (h), 25, l)\n+    call check (size (i, 1), 3, l)\n+    call check (size (i, 2), 5, l)\n+    call check (size (i, 3), 7, l)\n+    call check (size (i), 105, l)\n+    call check (size (j, 1), 4, l)\n+    call check (size (j, 2), 5, l)\n+    call check (size (j, 3), 7, l)\n+    call check (size (j), 140, l)\n+    call check (size (k, 1), 5, l)\n+    call check (size (k, 2), 1, l)\n+    call check (size (k, 3), 3, l)\n+    call check (size (k), 15, l)\n+!$omp single\n+    z = omp_get_thread_num ()\n+!$omp end single copyprivate (c, d, e, f, g, h, i, j, k, s, t, u, v)\n+    w = ''\n+    x = z\n+    if (x .eq. 0) w = 'thread0thr_number_0THREAD0THR_NUMBER_0'\n+    if (x .eq. 1) w = 'thread1thr_number_1THREAD1THR_NUMBER_1'\n+    if (x .eq. 2) w = 'thread2thr_number_2THREAD2THR_NUMBER_2'\n+    if (x .eq. 3) w = 'thread3thr_number_3THREAD3THR_NUMBER_3'\n+    if (x .eq. 4) w = 'thread4thr_number_4THREAD4THR_NUMBER_4'\n+    if (x .eq. 5) w = 'thread5thr_number_5THREAD5THR_NUMBER_5'\n+    y = ''\n+    if (x .eq. 0) y = '0'\n+    if (x .eq. 1) y = '1'\n+    if (x .eq. 2) y = '2'\n+    if (x .eq. 3) y = '3'\n+    if (x .eq. 4) y = '4'\n+    if (x .eq. 5) y = '5'\n+    l = l .or. w(7:7) .ne. y\n+    l = l .or. w(19:19) .ne. y\n+    l = l .or. w(26:26) .ne. y\n+    l = l .or. w(38:38) .ne. y\n+    l = l .or. c .ne. w(8:19)\n+    l = l .or. d .ne. w(1:7)\n+    l = l .or. s .ne. w(20:26)\n+    do 113, p = 1, 2\n+      do 113, q = 3, 7\n+\tdo 113, r = 1, 7\n+\t  if (q .lt. 6) l = l .or. e(p, q, r) .ne. 5 * x + p + q + 2 * r\n+\t  l = l .or. f(p, q, r) .ne. 25 * x + p + q + 2 * r\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. g(r, q) .ne. w(8:19)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. g(r, q) .ne. w(27:38)\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. h(r, q) .ne. w(1:7)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. h(r, q) .ne. w(20:26)\n+\t  if (q .lt. 6) l = l .or. t(p, q, r) .ne. -10 + x + p - q + 2 * r\n+\t  l = l .or. u(p, q, r) .ne. 30 - x - p + q - 2 * r\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. v(r, q) .ne. w(1:7)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. v(r, q) .ne. w(20:26)\n+113 continue\n+    do 114, p = 3, 5\n+      do 114, q = 2, 6\n+\tdo 114, r = 1, 7\n+\t  l = l .or. i(p - 2, q - 1, r) .ne. (7.5 + x) * p * q * r\n+\t  l = l .or. j(p, q + 3, r + 6) .ne. (9.5 + x) * p * q * r\n+114 continue\n+    do 115, p = 1, 5\n+      do 115, q = 4, 6\n+\tl = l .or. k(p, 1, q - 3) .ne. 19 + x + p + 7 + 3 * q\n+115 continue\n+    x = omp_get_thread_num ()\n+    w = ''\n+    if (x .eq. 0) w = 'thread0thr_number_0THREAD0THR_NUMBER_0'\n+    if (x .eq. 1) w = 'thread1thr_number_1THREAD1THR_NUMBER_1'\n+    if (x .eq. 2) w = 'thread2thr_number_2THREAD2THR_NUMBER_2'\n+    if (x .eq. 3) w = 'thread3thr_number_3THREAD3THR_NUMBER_3'\n+    if (x .eq. 4) w = 'thread4thr_number_4THREAD4THR_NUMBER_4'\n+    if (x .eq. 5) w = 'thread5thr_number_5THREAD5THR_NUMBER_5'\n+    c = w(8:19)\n+    d = w(1:7)\n+    forall (p = 1:2, q = 3:5, r = 1:7) e(p, q, r) = 5 * x + p + q + 2 * r\n+    forall (p = 1:2, q = 3:7, r = 1:7) f(p, q, r) = 25 * x + p + q + 2 * r\n+    forall (p = 1:5, q = 3:7, p + q .le. 8) g(p, q) = w(8:19)\n+    forall (p = 1:5, q = 3:7, p + q .gt. 8) g(p, q) = w(27:38)\n+    forall (p = 1:5, q = 3:7, p + q .le. 8) h(p, q) = w(1:7)\n+    forall (p = 1:5, q = 3:7, p + q .gt. 8) h(p, q) = w(20:26)\n+    forall (p = 3:5, q = 2:6, r = 1:7) i(p - 2, q - 1, r) = (7.5 + x) * p * q * r\n+    forall (p = 3:5, q = 2:6, r = 1:7) j(p, q + 3, r + 6) = (9.5 + x) * p * q * r\n+    forall (p = 1:5, q = 7:7, r = 4:6) k(p, q - 6, r - 3) = 19 + x + p + q + 3 * r\n+    s = w(20:26)\n+    forall (p = 1:2, q = 3:5, r = 1:7) t(p, q, r) = -10 + x + p - q + 2 * r\n+    forall (p = 1:2, q = 3:7, r = 1:7) u(p, q, r) = 30 - x - p + q - 2 * r\n+    forall (p = 1:5, q = 3:7, p + q .le. 8) v(p, q) = w(1:7)\n+    forall (p = 1:5, q = 3:7, p + q .gt. 8) v(p, q) = w(20:26)\n+!$omp barrier\n+    y = ''\n+    if (x .eq. 0) y = '0'\n+    if (x .eq. 1) y = '1'\n+    if (x .eq. 2) y = '2'\n+    if (x .eq. 3) y = '3'\n+    if (x .eq. 4) y = '4'\n+    if (x .eq. 5) y = '5'\n+    l = l .or. w(7:7) .ne. y\n+    l = l .or. w(19:19) .ne. y\n+    l = l .or. w(26:26) .ne. y\n+    l = l .or. w(38:38) .ne. y\n+    l = l .or. c .ne. w(8:19)\n+    l = l .or. d .ne. w(1:7)\n+    l = l .or. s .ne. w(20:26)\n+    do 123, p = 1, 2\n+      do 123, q = 3, 7\n+\tdo 123, r = 1, 7\n+\t  if (q .lt. 6) l = l .or. e(p, q, r) .ne. 5 * x + p + q + 2 * r\n+\t  l = l .or. f(p, q, r) .ne. 25 * x + p + q + 2 * r\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. g(r, q) .ne. w(8:19)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. g(r, q) .ne. w(27:38)\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. h(r, q) .ne. w(1:7)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. h(r, q) .ne. w(20:26)\n+\t  if (q .lt. 6) l = l .or. t(p, q, r) .ne. -10 + x + p - q + 2 * r\n+\t  l = l .or. u(p, q, r) .ne. 30 - x - p + q - 2 * r\n+\t  if (r .lt. 6 .and. q + r .le. 8) l = l .or. v(r, q) .ne. w(1:7)\n+\t  if (r .lt. 6 .and. q + r .gt. 8) l = l .or. v(r, q) .ne. w(20:26)\n+123 continue\n+    do 124, p = 3, 5\n+      do 124, q = 2, 6\n+\tdo 124, r = 1, 7\n+\t  l = l .or. i(p - 2, q - 1, r) .ne. (7.5 + x) * p * q * r\n+\t  l = l .or. j(p, q + 3, r + 6) .ne. (9.5 + x) * p * q * r\n+124 continue\n+    do 125, p = 1, 5\n+      do 125, q = 4, 6\n+\tl = l .or. k(p, 1, q - 3) .ne. 19 + x + p + 7 + 3 * q\n+125 continue\n+!$omp end parallel\n+    if (l) call abort\n+  end subroutine foo\n+\n+  subroutine test\n+    character (len = 12) :: c\n+    character (len = 7) :: d\n+    integer, dimension (2, 3:5, 7) :: e\n+    integer, dimension (2, 3:7, 7) :: f\n+    character (len = 12), dimension (5, 3:7) :: g\n+    character (len = 7), dimension (5, 3:7) :: h\n+    real, dimension (3:5, 2:6, 1:7) :: i\n+    double precision, dimension (3:6, 2:6, 1:7) :: j\n+    integer, dimension (1:5, 7:7, 4:6) :: k\n+    integer :: p, q, r\n+    call foo (c, d, e, f, g, h, i, j, k, 7)\n+  end subroutine test\n+end"}]}