{"sha": "8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5MWFmOGQzYzg4YmUyZTdmMWI0ODIwZDNiZmViOWJjZWM5MDdhYw==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2008-08-22T13:24:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T13:24:49Z"}, "message": "bindgen.adb [VMS] (Gen_Adainit_Ada, [...]): Import and call __gnat_set_features.\n\n2008-08-22  Doug Rupp  <rupp@adacore.com>\n\n\t* bindgen.adb [VMS] (Gen_Adainit_Ada, Gen_Adainit_C): Import and call\n\t__gnat_set_features.\n\n\t* init.c\n\t(__gnat_set_features): New function.\n\t(__gnat_features_set): New tracking variable.\n\t(__gl_no_malloc_64): New feature global variable\n\nFrom-SVN: r139456", "tree": {"sha": "127cdb0d736685f485177ef893594182ee0672a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/127cdb0d736685f485177ef893594182ee0672a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "048e5cef65a7c108ba7a2b16ca12ba70b9759527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048e5cef65a7c108ba7a2b16ca12ba70b9759527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048e5cef65a7c108ba7a2b16ca12ba70b9759527"}], "stats": {"total": 127, "additions": 124, "deletions": 3}, "files": [{"sha": "7f3f6274327976f982c5caad2ed1a5ac9093add9", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac", "patch": "@@ -604,6 +604,20 @@ package body Bindgen is\n          WBI (\"      pragma Import (C, Handler_Installed, \" &\n               \"\"\"__gnat_handler_installed\"\");\");\n \n+         --  Import entry point for environment feature enable/disable\n+         --  routine, and indication that it's been called previously.\n+\n+         if OpenVMS_On_Target then\n+            WBI (\"\");\n+            WBI (\"      procedure Set_Features;\");\n+            WBI (\"      pragma Import (C, Set_Features, \" &\n+                 \"\"\"__gnat_set_features\"\");\");\n+            WBI (\"\");\n+            WBI (\"      Features_Set : Integer;\");\n+            WBI (\"      pragma Import (C, Features_Set, \" &\n+                 \"\"\"__gnat_features_set\"\");\");\n+         end if;\n+\n          --  Initialize stack limit variable of the environment task if the\n          --  stack check method is stack limit and stack check is enabled.\n \n@@ -765,6 +779,15 @@ package body Bindgen is\n          WBI (\"      if Handler_Installed = 0 then\");\n          WBI (\"         Install_Handler;\");\n          WBI (\"      end if;\");\n+\n+         --  Generate call to Set_Features\n+\n+         if OpenVMS_On_Target then\n+            WBI (\"\");\n+            WBI (\"      if Features_Set = 0 then\");\n+            WBI (\"         Set_Features;\");\n+            WBI (\"      end if;\");\n+         end if;\n       end if;\n \n       --  Generate call to set Initialize_Scalar values if active\n@@ -1048,6 +1071,15 @@ package body Bindgen is\n          WBI (\"     {\");\n          WBI (\"        __gnat_install_handler ();\");\n          WBI (\"     }\");\n+\n+         --  Call feature enable/disable routine\n+\n+         if OpenVMS_On_Target then\n+            WBI (\"   if (__gnat_features_set == 0)\");\n+            WBI (\"     {\");\n+            WBI (\"        __gnat_set_features ();\");\n+            WBI (\"     }\");\n+         end if;\n       end if;\n \n       --  Initialize stack limit for the environment task if the stack\n@@ -2599,12 +2631,21 @@ package body Bindgen is\n \n       Gen_Elab_Defs_C;\n \n-      --  Imported variable used to track elaboration/finalization phase.\n-      --  Used only when we have a runtime.\n+      --  Imported variables used only when we have a runtime.\n \n       if not Suppress_Standard_Library_On_Target then\n+\n+         --  Track elaboration/finalization phase.\n+\n          WBI (\"extern int  __gnat_handler_installed;\");\n          WBI (\"\");\n+\n+         --  Track feature enable/disable on VMS.\n+\n+         if OpenVMS_On_Target then\n+            WBI (\"extern int  __gnat_features_set;\");\n+            WBI (\"\");\n+         end if;\n       end if;\n \n       --  Write argv/argc exit status stuff if main program case"}, {"sha": "c4e260104adea710788017715882682033e00bad", "filename": "gcc/ada/init.c", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=8b91af8d3c88be2e7f1b4820d3bfeb9bcec907ac", "patch": "@@ -291,6 +291,30 @@ extern char *__gnat_get_code_loc (struct sigcontext *);\n extern void __gnat_set_code_loc (struct sigcontext *, char *);\n extern size_t __gnat_machine_state_length (void);\n \n+/* __gnat_adjust_context_for_raise - see comments along with the default\n+   version later in this file.  */\n+\n+#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n+\n+void\n+__gnat_adjust_context_for_raise (int signo, void *context)\n+{\n+  struct sigcontext * sigcontext = (struct sigcontext *) context;\n+\n+  /* The fallback code fetches the faulting insn address from sc_pc, so\n+     adjust that when need be.  For SIGFPE, the required adjustment depends\n+     on the trap shadow situation (see man ieee).  */\n+  if (signo == SIGFPE)\n+    {\n+      /* ??? We never adjust here, considering that sc_pc always\n+\t designates the instruction following the one which trapped.\n+\t This is not necessarily true but corresponds to what we have\n+\t always observed.  */\n+    }\n+  else\n+    sigcontext->sc_pc ++;\n+}\n+\n static void\n __gnat_error_handler\n   (int sig, siginfo_t *sip, struct sigcontext *context)\n@@ -299,6 +323,10 @@ __gnat_error_handler\n   static int recurse = 0;\n   const char *msg;\n \n+  /* Adjusting is required for every fault context, so adjust for this one\n+     now, before we possibly trigger a recursive fault below.  */\n+  __gnat_adjust_context_for_raise (sig, context);\n+\n   /* If this was an explicit signal from a \"kill\", just resignal it.  */\n   if (SI_FROMUSER (sip))\n     {\n@@ -1078,6 +1106,10 @@ __gnat_install_handler (void)\n \n #elif defined (VMS)\n \n+/* Routine called from binder to override default feature values. */\n+void __gnat_set_features ();\n+int __gnat_features_set = 0;\n+\n long __gnat_error_handler (int *, void *);\n \n #ifdef __IA64\n@@ -1591,6 +1623,54 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n \n #endif\n \n+/* Feature logical name and global variable address pair */\n+struct feature {char *name; int* gl_addr;};\n+\n+/* Default values for GNAT features set by environment. */\n+int __gl_no_malloc_64 = 0;\n+\n+/* Array feature logical names and global variable addresses */\n+static struct feature features[] = {\n+  {\"GNAT$NO_MALLOC_64\", &__gl_no_malloc_64},\n+  {0, 0}\n+};\n+\n+void __gnat_set_features ()\n+{\n+  struct descriptor_s name_desc, result_desc;\n+  int i, status;\n+  unsigned short rlen;\n+\n+#define MAXEQUIV 10\n+  char buff [MAXEQUIV];\n+\n+  /* Loop through features array and test name for enable/disable */\n+  for (i=0; features [i].name; i++)\n+    {\n+       name_desc.len = strlen (features [i].name);\n+       name_desc.mbz = 0;\n+       name_desc.adr = features [i].name;\n+\n+       result_desc.len = MAXEQUIV - 1;\n+       result_desc.mbz = 0;\n+       result_desc.adr = buff;\n+\n+       status = LIB$GET_LOGICAL (&name_desc, &result_desc, &rlen);\n+\n+       if (((status & 1) == 1) && (rlen < MAXEQUIV))\n+         buff [rlen] = 0;\n+       else\n+         strcpy (buff, \"\");\n+\n+       if (strcmp (buff, \"ENABLE\") == 0)\n+          *features [i].gl_addr = 1;\n+       else if (strcmp (buff, \"DISABLE\") == 0)\n+          *features [i].gl_addr = 0;\n+    }\n+\n+    __gnat_features_set = 1;\n+}\n+\n /*******************/\n /* FreeBSD Section */\n /*******************/\n@@ -2076,7 +2156,7 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED,\n {\n   /* We used to compensate here for the raised from call vs raised from signal\n      exception discrepancy with the GCC ZCX scheme, but this is now dealt with\n-     generically (except for the IA-64), see GCC PR other/26208.\n+     generically (except for the Alpha and IA-64), see GCC PR other/26208.\n \n      *** Call vs signal exception discrepancy with GCC ZCX scheme ***\n "}]}