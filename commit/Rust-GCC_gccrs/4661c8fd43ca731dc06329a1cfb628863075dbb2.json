{"sha": "4661c8fd43ca731dc06329a1cfb628863075dbb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2MWM4ZmQ0M2NhNzMxZGMwNjMyOWExY2ZiNjI4ODYzMDc1ZGJiMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-10-10T12:39:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-10-10T12:39:01Z"}, "message": "system_error (native_category): Remove.\n\n2008-10-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/system_error (native_category): Remove.\n\t(posix_category): Add.\n\t(error_code::error_code(_ErrorCodeEnum, typename enable_if<>:type*):\n\tFix _M_cat initialization.\n\t(error_code::operator=(_ErrorCodeEnum)): Assign _M_cat too.\n\t(error_condition::_M_cat, error_condtion::operator=\n\t(_ErrorConditionEnum)): Implement resolution of DR 804.\n\t(error_condition::error_condition(_ErrorConditionEnum, typename\n\tenable_if<>:type*): Fix.\n\t(error_condition::clear, error_condition::assign): Implement.\n\t(operator==, operator!=): Fix uglification of parameters.\n\t(make_error_code, make_error_condition): Define in namespace\n\tposix_error.\n\t(operator<<(basic_ostream<>&, const error_code&)): Define here.\n\t* include/std/ostream (operator<<(basic_ostream<>&,\n\tconst error_code&)): Do not define here.\n\t* testsuite/19_diagnostics/error_condition/cons/1.cc: New.\t\n\t* testsuite/19_diagnostics/error_condition/operators/bool.cc: Likewise.\n\t* testsuite/19_diagnostics/error_condition/operators/bool_neg.cc:\n\tLikewise.\n\t* testsuite/19_diagnostics/error_condition/operators/equal.cc:\n\tLikewise.\n\t* testsuite/19_diagnostics/error_condition/operators/not_equal.cc:\n\tLikewise.\n\t* testsuite/19_diagnostics/error_code/cons/1.cc: Tweak.\n\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/30_threads/unique_lock/locking/2.cc: Tweak.\n\n\t* testsuite/util/testsuite_error.h: Minor tweaks.\n\t* testsuite/util/testsuite_hooks.cc: Avoid uninitialized warning.\n\nFrom-SVN: r141039", "tree": {"sha": "67190c2dfc745591d3fefc05ff7b5109ea6d9d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67190c2dfc745591d3fefc05ff7b5109ea6d9d4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4661c8fd43ca731dc06329a1cfb628863075dbb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4661c8fd43ca731dc06329a1cfb628863075dbb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4661c8fd43ca731dc06329a1cfb628863075dbb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4661c8fd43ca731dc06329a1cfb628863075dbb2/comments", "author": null, "committer": null, "parents": [{"sha": "87ad508134223e9ba43fc0ce21b8d5d6981b1ebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ad508134223e9ba43fc0ce21b8d5d6981b1ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ad508134223e9ba43fc0ce21b8d5d6981b1ebc"}], "stats": {"total": 452, "additions": 365, "deletions": 87}, "files": [{"sha": "49fcab797f5ca6dcdc8104df6b6af8b547387819", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -1,3 +1,37 @@\n+2008-10-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/system_error (native_category): Remove.\n+\t(posix_category): Add.\n+\t(error_code::error_code(_ErrorCodeEnum, typename enable_if<>:type*):\n+\tFix _M_cat initialization.\n+\t(error_code::operator=(_ErrorCodeEnum)): Assign _M_cat too.\n+\t(error_condition::_M_cat, error_condtion::operator=\n+\t(_ErrorConditionEnum)): Implement resolution of DR 804.\n+\t(error_condition::error_condition(_ErrorConditionEnum, typename\n+\tenable_if<>:type*): Fix.\n+\t(error_condition::clear, error_condition::assign): Implement.\n+\t(operator==, operator!=): Fix uglification of parameters.\n+\t(make_error_code, make_error_condition): Define in namespace\n+\tposix_error.\n+\t(operator<<(basic_ostream<>&, const error_code&)): Define here.\n+\t* include/std/ostream (operator<<(basic_ostream<>&,\n+\tconst error_code&)): Do not define here.\n+\t* testsuite/19_diagnostics/error_condition/cons/1.cc: New.\t\n+\t* testsuite/19_diagnostics/error_condition/operators/bool.cc: Likewise.\n+\t* testsuite/19_diagnostics/error_condition/operators/bool_neg.cc:\n+\tLikewise.\n+\t* testsuite/19_diagnostics/error_condition/operators/equal.cc:\n+\tLikewise.\n+\t* testsuite/19_diagnostics/error_condition/operators/not_equal.cc:\n+\tLikewise.\n+\t* testsuite/19_diagnostics/error_code/cons/1.cc: Tweak.\n+\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/30_threads/unique_lock/locking/2.cc: Tweak.\n+\n+\t* testsuite/util/testsuite_error.h: Minor tweaks.\n+\t* testsuite/util/testsuite_hooks.cc: Avoid uninitialized warning.\n+\n 2008-10-10  Chris Fairles  <cfairles@gcc.gnu.org>\n   \n \t* testsuite/20_util/duration/cons/1.cc: Remove invalid check of "}, {"sha": "913986ecf49aaab8a7963598ff030b4de9822e67", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -45,10 +45,6 @@\n #include <ios>\n #include <bits/ostream_insert.h>\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-# include <system_error>\n-#endif\n-\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // [27.6.2.1] Template class basic_ostream\n@@ -535,13 +531,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return (__out << reinterpret_cast<const char*>(__s)); }\n   //@}\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _CharT, typename _Traits>\n-    inline basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, const error_code& __e)\n-    { return (__out << __e.category().name() << ':' << __e.value()); }\n-#endif\n-\n   // [27.6.2.7] standard basic_ostream manipulators\n   /**\n    *  @brief  Write a newline and flush the stream."}, {"sha": "6a09ebf5272e5f552708c1acf71a5f5c3d6f3129", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 101, "deletions": 65, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -111,8 +111,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   const error_category& get_posix_category();\n   const error_category& get_system_category();\n \n+  static const error_category& posix_category = get_posix_category();\n   static const error_category& system_category = get_system_category();\n-  static const error_category& native_category = get_posix_category();\n \n   /// error_code\n   // Implementation-specific error identification\n@@ -127,7 +127,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     template<typename _ErrorCodeEnum>\n       error_code(_ErrorCodeEnum __e,\n       typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type* = 0)\n-      : _M_value(__e), _M_cat(&system_category)\n+      : _M_value(__e), _M_cat(&posix_category)\n       { }\n \n     void \n@@ -144,10 +144,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_cat = &system_category;\n     } \n \n+    // DR 804.\n     template<typename _ErrorCodeEnum>\n-      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type&\n+      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,\n+\t\t\t error_code&>::type\n       operator=(_ErrorCodeEnum __e)\n-      { _M_value = __e; }\n+      {\n+\t_M_value = __e;\n+\t_M_cat = &posix_category;\n+\treturn *this;\n+      }\n \n     int\n     value() const { return _M_value; }\n@@ -172,55 +178,73 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator __bool_type() const\n     { return _M_value != 0 ? &__not_bool_type : false; }\n \n+    // DR 804.\n   private:\n     int            \t\t_M_value;\n     const error_category* \t_M_cat;\n   };\n \n-  error_code \n-  make_error_code(posix_error::posix_errno);\n-\n   // 19.4.2.5 non-member functions\n-  bool operator<(const error_code& lhs, const error_code& rhs);\n+  inline bool\n+  operator<(const error_code& __lhs, const error_code& __rhs)\n+  { \n+    return (__lhs.category() < __rhs.category()\n+\t    || (__lhs.category() == __rhs.category()\n+\t\t&& __lhs.value() < __rhs.value()));\n+  }\n \n-  template<typename charT, typename traits>\n-    basic_ostream<charT,traits>&\n-    operator<<(basic_ostream<charT, traits>& os, const error_code& __code);\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)\n+    { return (__os << __e.category().name() << ':' << __e.value()); }\n \n \n   /// error_condition\n   // Portable error identification\n   struct error_condition \n   {\n-    error_condition() : _M_value(0), _M_cat(system_category) { }\n+    error_condition() : _M_value(0), _M_cat(&posix_category) { }\n \n     error_condition(int __v, const error_category& __cat)     \n-    : _M_value(__v), _M_cat(__cat) { }\n+    : _M_value(__v), _M_cat(&__cat) { }\n \n-    template<typename _ErrorEnum>\n-      error_condition(typename enable_if<\n-\t\t      is_error_condition_enum<_ErrorEnum>::value,\n-\t\t      _ErrorEnum>::type __v)\n-      : _M_value(__v), _M_cat(system_category) { }\n+    template<typename _ErrorConditionEnum>\n+      error_condition(_ErrorConditionEnum __e,\n+\t\t      typename enable_if<is_error_condition_enum\n+\t\t                      <_ErrorConditionEnum>::value>::type* = 0)\n+      : _M_value(__e), _M_cat(&posix_category) { }\n \n-    void \n-    assign(int val, const error_category& cat);\n+    void\n+    assign(int __v, const error_category& __cat)\n+    {\n+      _M_value = __v;\n+      _M_cat = &__cat;\n+    }\n \n-    template<typename _ErrorEnum>\n-      error_condition&\n-      operator=(typename enable_if<is_error_condition_enum<_ErrorEnum>::value,\n-\t\t                   _ErrorEnum>::type __v)\n-      { _M_value = __v; }\n+    // DR 804.\n+    template<typename _ErrorConditionEnum>\n+      typename enable_if<is_error_condition_enum\n+\t\t\t <_ErrorConditionEnum>::value, error_condition&>::type\n+      operator=(_ErrorConditionEnum __e)\n+      {\n+\t_M_value = __e;\n+\t_M_cat = &posix_category;\n+\treturn *this;\n+      }\n \n     void \n-    clear();\n+    clear()\n+    {\n+      _M_value = 0;\n+      _M_cat = &posix_category;\n+    }\n \n     // 19.4.3.4 observers\n     int \n     value() const { return _M_value; }\n \n-    const error_category& \n-    category() const { return _M_cat; }\n+    const error_category&\n+    category() const { return *_M_cat; }\n \n     string \n     message() const\n@@ -236,63 +260,75 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator __bool_type() const\n     { return _M_value != 0 ? &__not_bool_type : false; }\n \n+    // DR 804.\n   private:\n     int \t\t\t_M_value;\n-    const error_category& \t_M_cat;\n+    const error_category* \t_M_cat;\n   };\n \n-  error_condition \n-  make_error_condition(posix_error::posix_errno);\n-\n   // 19.4.3.5 non-member functions\n   inline bool \n-  operator<(const error_condition& lhs, const error_condition& rhs)\n-  { \n-    bool __t1 = lhs.category() < rhs.category();\n-    bool __t2 = lhs.category() == rhs.category() && lhs.value() < rhs.value();\n-    return __t1 || __t2;\n+  operator<(const error_condition& __lhs, const error_condition& __rhs)\n+  {\n+    return (__lhs.category() < __rhs.category()\n+\t    || (__lhs.category() == __rhs.category()\n+\t\t&& __lhs.value() < __rhs.value()));\n+  }\n+\n+  namespace posix_error\n+  {\n+    inline error_code \n+    make_error_code(posix_errno __e)\n+    { return error_code(__e, posix_category); }\n+\n+    inline error_condition \n+    make_error_condition(posix_errno __e)\n+    { return error_condition(__e, posix_category); }\n   }\n \n   // 19.4.4 Comparison operators\n-  inline bool \n-  operator==(const error_code& lhs, const error_code& rhs)\n-  { return lhs.category() == rhs.category() && lhs.value() == rhs.value(); }\n+  inline bool\n+  operator==(const error_code& __lhs, const error_code& __rhs)\n+  { return (__lhs.category() == __rhs.category()\n+\t    && __lhs.value() == __rhs.value()); }\n \n-  inline bool \n-  operator==(const error_code& lhs, const error_condition& rhs)\n+  inline bool\n+  operator==(const error_code& __lhs, const error_condition& __rhs)\n   {\n-    bool __t1 = lhs.category().equivalent(lhs.value(), rhs);\n-    bool __t2 = rhs.category().equivalent(lhs, rhs.value());\n-    return __t1 || __t2;\n+    return (__lhs.category().equivalent(__lhs.value(), __rhs)\n+\t    || __rhs.category().equivalent(__lhs, __rhs.value()));\n   }\n \n-  inline bool \n-  operator==(const error_condition& lhs, const error_code& rhs)\n+  inline bool\n+  operator==(const error_condition& __lhs, const error_code& __rhs)\n   {\n-    bool __t1 = rhs.category().equivalent(rhs.value(), lhs);\n-    bool __t2 = lhs.category().equivalent(rhs, lhs.value());\n-    return __t1 || __t2;\n+    return (__rhs.category().equivalent(__rhs.value(), __lhs)\n+\t    || __lhs.category().equivalent(__rhs, __lhs.value()));\n   }\n \n-  inline bool \n-  operator==(const error_condition& lhs, const error_condition& rhs)\n-  { return lhs.category() == rhs.category() && lhs.value() == rhs.value(); }\n+  inline bool\n+  operator==(const error_condition& __lhs, const error_condition& __rhs)\n+  {\n+    return (__lhs.category() == __rhs.category()\n+\t    && __lhs.value() == __rhs.value());\n+  }\n \n-  inline bool \n-  operator!=(const error_code& lhs, const error_code& rhs)\n-  { return !(lhs == rhs); }\n+  inline bool\n+  operator!=(const error_code& __lhs, const error_code& __rhs)\n+  { return !(__lhs == __rhs); }\n \n-  inline bool \n-  operator!=(const error_code& lhs, const error_condition& rhs)\n-  { return !(lhs == rhs); }\n+  inline bool\n+  operator!=(const error_code& __lhs, const error_condition& __rhs)\n+  { return !(__lhs == __rhs); }\n \n-  inline bool \n-  operator!=(const error_condition& lhs, const error_code& rhs)\n-  { return !(lhs == rhs); }\n+  inline bool\n+  operator!=(const error_condition& __lhs, const error_code& __rhs)\n+  { return !(__lhs == __rhs); }\n+\n+  inline bool\n+  operator!=(const error_condition& __lhs, const error_condition& __rhs)\n+  { return !(__lhs == __rhs); }\n \n-  inline bool \n-  operator!=(const error_condition& lhs, const error_condition& rhs)\n-  { return !(lhs == rhs); }\n \n   /// Thrown to indicate error code of underlying system.\n   class system_error : public std::runtime_error"}, {"sha": "e73884cc35fbb1f306a4a61bc31ae6c60c3af43d", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -34,6 +34,6 @@ int main()\n }\n \n // { dg-error \"is private\" \"\" { target *-*-* } 105 }\n-// { dg-error \"within this context\" \"\" { target *-*-* } 41 }\n+// { dg-error \"within this context\" \"\" { target *-*-* } 40 }\n // { dg-error \"first required here\" \"\" { target *-*-* } 31 }\n // { dg-excess-errors \"copy constructor\" }"}, {"sha": "9dc11b70a08d11f4383a50552ad675e9803af9d4", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -40,7 +40,7 @@ int main()\n   // 3\n   std::error_code e3(std::posix_error::operation_not_supported);\n   VERIFY( e3.value() == int(std::posix_error::operation_not_supported) );\n-  VERIFY( e3.category() == std::system_category );\n+  VERIFY( e3.category() == std::posix_category );\n \n   return 0;\n }"}, {"sha": "572d244954674e38be4109b2bf53d08899df86bf", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // 1\n+  std::error_condition e1;\n+  VERIFY( e1.value() == 0 );\n+  VERIFY( e1.category() == std::posix_category );\n+\n+  // 2\n+  const __gnu_test::test_category cat;\n+  std::error_condition e2(e1.value(), cat);\n+  VERIFY( e2.value() == e1.value() );\n+  VERIFY( e2.category() == cat );\n+\n+  // 3\n+  std::error_condition e3(std::posix_error::operation_not_supported);\n+  VERIFY( e3.value() == int(std::posix_error::operation_not_supported) );\n+  VERIFY( e3.category() == std::posix_category );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1cda2626d4a937d2aeb8dfab1551525c05c76dd", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/bool.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+// unspecified bool operator positive tests\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // 1\n+  std::error_condition e1;\n+  if (e1)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  // 2\n+  std::error_condition e2(std::posix_error::operation_not_supported);\n+  if (e2)\n+    {\n+      VERIFY( true );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cad5f4194803a72751ea552b8d3b557df8253ad7", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/bool_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fbool_neg.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int test01()\n+{\n+  std::error_condition e;\n+  int i = e;\n+\n+  return i;\n+}\n+\n+// { dg-error \"invalid conversion\" \"\" { target *-*-* } 28 }"}, {"sha": "4bdf36190a940d47ceca0b825ecaa6ba3ea7e3da", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+// unspecified bool operator positive tests\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::error_condition e1;\n+  std::error_condition e2(std::posix_error::operation_not_supported);\n+\n+  VERIFY( e1 == e1 );\n+  VERIFY( !(e1 == e2) );\n+\n+  const __gnu_test::test_category cat;\n+  std::error_condition e3(e2.value(), cat);\n+  VERIFY( !(e2 == e3) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1b78b0af029f02b5ae93da338b72ac46889ae395", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/not_equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+// unspecified bool operator positive tests\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::error_condition e1;\n+  std::error_condition e2(std::posix_error::operation_not_supported);\n+\n+  VERIFY( !(e1 != e1) );\n+  VERIFY( e1 != e2 );\n+\n+  const __gnu_test::test_category cat;\n+  std::error_condition e3(e2.value(), cat);\n+  VERIFY( e2 != e3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2a3aa17c5e8e9b7c8bff8300fc8154e36fb6d2e6", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/2.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F2.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -51,9 +51,10 @@ void test01()\n         {\n           l.lock();\n         }\n-      catch (std::system_error const& ex)\n+      catch (const std::system_error& ex)\n         {\n-\t  VERIFY( ex.code() == std::posix_error::operation_not_permitted );\n+\t  VERIFY( ex.code() == std::error_code(\n+\t\t    std::posix_error::operation_not_permitted) );\n         }\n       catch (...)\n         {\n@@ -89,7 +90,8 @@ void test02()\n \t}\n       catch (const std::system_error& ex)\n \t{\n-\t  VERIFY( ex.code() == std::posix_error::resource_deadlock_would_occur );\n+\t  VERIFY( ex.code() == std::error_code(\n+\t\t    std::posix_error::resource_deadlock_would_occur) );\n \t}\n       catch (...)\n \t{"}, {"sha": "31f52e6e1f83d8aab2525ee0be45feaa5947757b", "filename": "libstdc++-v3/testsuite/util/testsuite_error.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -28,15 +28,14 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+#include <string>\n #include <testsuite_hooks.h>\n \n #ifndef _TESTSUITE_ERROR_H\n #define _TESTSUITE_ERROR_H 1\n \n namespace __gnu_test\n {\n-  using std::string;\n-\n   struct test_category : public std::error_category\n   { \n     virtual const char*\n@@ -46,10 +45,9 @@ namespace __gnu_test\n       return s;\n     }\n \n-    virtual string \n+    virtual std::string \n     message(int) const\n-    { return string(\"message to be determined\"); }\n-\n+    { return std::string(\"message to be determined\"); }\n   };\n \n   struct test_derived_category : public test_category"}, {"sha": "c64dc1b8067ea959620b0e3b57bbb6a64f744bc2", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4661c8fd43ca731dc06329a1cfb628863075dbb2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc?ref=4661c8fd43ca731dc06329a1cfb628863075dbb2", "patch": "@@ -2,7 +2,7 @@\n \n // Utility subroutines for the C++ library testsuite. \n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -283,6 +283,7 @@ namespace __gnu_test\n   {\n #ifdef _GLIBCXX_SYSV_SEM\n     union semun val;\n+    val.val = 0; // Avoid uninitialized variable warning.\n     // Destroy the semaphore set only in the process that created it. \n     if (pid_ == getpid())\n       semctl(sem_set_, 0, IPC_RMID, val);"}]}