{"sha": "4b55a782a5c697bee6de69b694413437413a3c19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI1NWE3ODJhNWM2OTdiZWU2ZGU2OWI2OTQ0MTM0Mzc0MTNhM2MxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-31T15:20:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-31T15:20:05Z"}, "message": "re PR c++/57043 (converting overloaded complex function pow in C++11 is ambiguous)\n\n\tPR c++/57043\n\t* pt.c (fn_type_unification): Don't do DEDUCE_EXACT check\n\tduring partial ordering.\n\nFrom-SVN: r207345", "tree": {"sha": "c7ac2e76483c14aba36089729ab0b3b99f98364d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ac2e76483c14aba36089729ab0b3b99f98364d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b55a782a5c697bee6de69b694413437413a3c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b55a782a5c697bee6de69b694413437413a3c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b55a782a5c697bee6de69b694413437413a3c19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b55a782a5c697bee6de69b694413437413a3c19/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af3978a10db6f6b915b4a785228955d458062d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3978a10db6f6b915b4a785228955d458062d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3978a10db6f6b915b4a785228955d458062d2d"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "a9e56a472117de99cbc9d4c7e73242cb4db78791", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b55a782a5c697bee6de69b694413437413a3c19/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b55a782a5c697bee6de69b694413437413a3c19/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b55a782a5c697bee6de69b694413437413a3c19", "patch": "@@ -1,3 +1,9 @@\n+2014-01-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/57043\n+\t* pt.c (fn_type_unification): Don't do DEDUCE_EXACT check\n+\tduring partial ordering.\n+\n 2014-01-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/59963"}, {"sha": "ae5995b3f83c97b899d9ef5606e1ed643bf0ba96", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b55a782a5c697bee6de69b694413437413a3c19/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b55a782a5c697bee6de69b694413437413a3c19/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4b55a782a5c697bee6de69b694413437413a3c19", "patch": "@@ -15740,8 +15740,11 @@ fn_type_unification (tree fn,\n \n   /* If we're looking for an exact match, check that what we got\n      is indeed an exact match.  It might not be if some template\n-     parameters are used in non-deduced contexts.  */\n-  if (strict == DEDUCE_EXACT)\n+     parameters are used in non-deduced contexts.  But don't check\n+     for an exact match if we have dependent template arguments;\n+     in that case we're doing partial ordering, and we already know\n+     that we have two candidates that will provide the actual type.  */\n+  if (strict == DEDUCE_EXACT && !any_dependent_template_arguments_p (targs))\n     {\n       tree substed = TREE_TYPE (decl);\n       unsigned int i;"}, {"sha": "357bb05fa3b35e8b019907f8f29ec057d89e9725", "filename": "gcc/testsuite/g++.dg/template/partial15.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b55a782a5c697bee6de69b694413437413a3c19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b55a782a5c697bee6de69b694413437413a3c19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial15.C?ref=4b55a782a5c697bee6de69b694413437413a3c19", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/57043\n+// { dg-do link }\n+\n+template<typename D> struct complex { };\n+\n+template<typename Tp>\n+complex<Tp>\n+pow(const complex<Tp>& x, const complex<Tp>& y) { return complex<Tp>(); }\n+\n+template<typename T, typename U>\n+struct promote_2 { typedef T type; };\n+\n+template<typename Tp, typename Up>\n+complex<typename promote_2<Tp, Up>::type>\n+pow(const complex<Tp>& x, const complex<Up>& y);\n+\n+complex<double> (*powcc)(const complex<double>&, const complex<double>&) = pow;\n+\n+int main() {}"}]}