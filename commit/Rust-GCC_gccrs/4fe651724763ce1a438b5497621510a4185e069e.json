{"sha": "4fe651724763ce1a438b5497621510a4185e069e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlNjUxNzI0NzYzY2UxYTQzOGI1NDk3NjIxNTEwYTQxODVlMDY5ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-30T08:35:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-30T08:35:30Z"}, "message": "tree-vrp.c (register_edge_assert_for_2): Also register asserts for dominating conversion results.\n\n2015-06-30  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (register_edge_assert_for_2): Also register\n\tasserts for dominating conversion results.\n\nFrom-SVN: r225161", "tree": {"sha": "2344fd3df8305ad2564d66c8eba8cc201a431665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2344fd3df8305ad2564d66c8eba8cc201a431665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fe651724763ce1a438b5497621510a4185e069e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe651724763ce1a438b5497621510a4185e069e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe651724763ce1a438b5497621510a4185e069e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe651724763ce1a438b5497621510a4185e069e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc6bcf52ebcc487d78060c22df62367732370881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6bcf52ebcc487d78060c22df62367732370881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6bcf52ebcc487d78060c22df62367732370881"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "00954b1ef0818fdbd298ff5bc9ec39d06f86131c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe651724763ce1a438b5497621510a4185e069e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe651724763ce1a438b5497621510a4185e069e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fe651724763ce1a438b5497621510a4185e069e", "patch": "@@ -1,3 +1,8 @@\n+2015-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (register_edge_assert_for_2): Also register\n+\tasserts for dominating conversion results.\n+\n 2015-06-30  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (record_sub_use): Don't reset ssa_name"}, {"sha": "db1df37d4718b2828005246d2c66cb0ed557326a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe651724763ce1a438b5497621510a4185e069e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe651724763ce1a438b5497621510a4185e069e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4fe651724763ce1a438b5497621510a4185e069e", "patch": "@@ -5359,7 +5359,9 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n   /* In the case of post-in/decrement tests like if (i++) ... and uses\n      of the in/decremented value on the edge the extra name we want to\n      assert for is not on the def chain of the name compared.  Instead\n-     it is in the set of use stmts.  */\n+     it is in the set of use stmts.\n+     Similar cases happen for conversions that were simplified through\n+     fold_{sign_changed,widened}_comparison.  */\n   if ((comp_code == NE_EXPR\n        || comp_code == EQ_EXPR)\n       && TREE_CODE (val) == INTEGER_CST)\n@@ -5368,29 +5370,37 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n       gimple use_stmt;\n       FOR_EACH_IMM_USE_STMT (use_stmt, ui, name)\n \t{\n-\t  /* Cut off to use-stmts that are in the predecessor.  */\n-\t  if (gimple_bb (use_stmt) != e->src)\n-\t    continue;\n-\n \t  if (!is_gimple_assign (use_stmt))\n \t    continue;\n \n-\t  enum tree_code code = gimple_assign_rhs_code (use_stmt);\n-\t  if (code != PLUS_EXPR\n-\t      && code != MINUS_EXPR)\n+\t  /* Cut off to use-stmts that are dominating the predecessor.  */\n+\t  if (!dominated_by_p (CDI_DOMINATORS, e->src, gimple_bb (use_stmt)))\n \t    continue;\n \n-\t  tree cst = gimple_assign_rhs2 (use_stmt);\n-\t  if (TREE_CODE (cst) != INTEGER_CST)\n+\t  tree name2 = gimple_assign_lhs (use_stmt);\n+\t  if (TREE_CODE (name2) != SSA_NAME\n+\t      || !live_on_edge (e, name2))\n \t    continue;\n \n-\t  tree name2 = gimple_assign_lhs (use_stmt);\n-\t  if (live_on_edge (e, name2))\n+\t  enum tree_code code = gimple_assign_rhs_code (use_stmt);\n+\t  tree cst;\n+\t  if (code == PLUS_EXPR\n+\t      || code == MINUS_EXPR)\n \t    {\n+\t      cst = gimple_assign_rhs2 (use_stmt);\n+\t      if (TREE_CODE (cst) != INTEGER_CST)\n+\t\tcontinue;\n \t      cst = int_const_binop (code, val, cst);\n-\t      register_new_assert_for (name2, name2, comp_code, cst,\n-\t\t\t\t       NULL, e, bsi);\n \t    }\n+\t  else if (CONVERT_EXPR_CODE_P (code))\n+\t    cst = fold_convert (TREE_TYPE (name2), val);\n+\t  else\n+\t    continue;\n+\n+\t  if (TREE_OVERFLOW_P (cst))\n+\t    cst = drop_tree_overflow (cst);\n+\t  register_new_assert_for (name2, name2, comp_code, cst,\n+\t\t\t\t   NULL, e, bsi);\n \t}\n     }\n  "}]}