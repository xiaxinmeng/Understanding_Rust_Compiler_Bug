{"sha": "2813f1b15f9629c053c8c8b590cc0632689812a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxM2YxYjE1Zjk2MjljMDUzYzhjOGI1OTBjYzA2MzI2ODk4MTJhMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-09T17:59:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-09T17:59:20Z"}, "message": "i386.c (ix86_emit_i387_round): New function.\n\n\t* config/i386/i386.c (ix86_emit_i387_round): New function.\n\t* config/i386/i386-protos.h (ix86_emit_i387_round): Declare.\n\t* config/i386/i386.md (round<mode>2): Use X87MODEF mode iterator.\n\tUse ix86_emit_i387_round to expand round function for i387 math.\n\t(lround<X87MODEF:mode><SWI248x:mode>2): Use X87MODEF mode iterator.\n\tUse ix86_emit_i387_round to expand {l,ll}round function for i387 math.\n\nFrom-SVN: r177605", "tree": {"sha": "daa5df2761c54c3ffaafaa3cd31415119564018f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa5df2761c54c3ffaafaa3cd31415119564018f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2813f1b15f9629c053c8c8b590cc0632689812a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2813f1b15f9629c053c8c8b590cc0632689812a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2813f1b15f9629c053c8c8b590cc0632689812a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2813f1b15f9629c053c8c8b590cc0632689812a2/comments", "author": null, "committer": null, "parents": [{"sha": "c6412d86762ea3c31654c4c72b5e7ef86e66d90e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6412d86762ea3c31654c4c72b5e7ef86e66d90e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6412d86762ea3c31654c4c72b5e7ef86e66d90e"}], "stats": {"total": 205, "additions": 188, "deletions": 17}, "files": [{"sha": "1816b2d8971792368d1409fc9a5f472932b366f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2813f1b15f9629c053c8c8b590cc0632689812a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2813f1b15f9629c053c8c8b590cc0632689812a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2813f1b15f9629c053c8c8b590cc0632689812a2", "patch": "@@ -1,8 +1,16 @@\n+2011-08-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_emit_i387_round): New function.\n+\t* config/i386/i386-protos.h (ix86_emit_i387_round): Declare.\n+\t* config/i386/i386.md (round<mode>2): Use X87MODEF mode iterator.\n+\tUse ix86_emit_i387_round to expand round function for i387 math.\n+\t(lround<X87MODEF:mode><SWI248x:mode>2): Use X87MODEF mode iterator.\n+\tUse ix86_emit_i387_round to expand {l,ll}round function for i387 math.\n+\n 2011-08-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/sync.c: Move to ../libgcc.\n-\t* Makefile.in (libgcc.mvars): Remove LIBGCC_SYNC,\n-\tLIBGCC_SYNC_CFLAGS.\n+\t* Makefile.in (libgcc.mvars): Remove LIBGCC_SYNC, LIBGCC_SYNC_CFLAGS.\n \t* config/mips/t-libgcc-mips16 (LIBGCC_SYNC, LIBGCC_SYNC_CFLAGS):\n \tRemove.\n "}, {"sha": "c3eb150fbb942ef07b83c7a416d56f0b3cf6ddeb", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2813f1b15f9629c053c8c8b590cc0632689812a2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2813f1b15f9629c053c8c8b590cc0632689812a2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=2813f1b15f9629c053c8c8b590cc0632689812a2", "patch": "@@ -163,6 +163,7 @@ extern void x86_emit_floatuns (rtx [2]);\n extern void ix86_emit_fp_unordered_jump (rtx);\n \n extern void ix86_emit_i387_log1p (rtx, rtx);\n+extern void ix86_emit_i387_round (rtx, rtx);\n extern void ix86_emit_swdivsf (rtx, rtx, rtx, enum machine_mode);\n extern void ix86_emit_swsqrtsf (rtx, rtx, enum machine_mode, bool);\n "}, {"sha": "05dd57c7ece3ae372d77900371b539d2721ff75d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 134, "deletions": 1, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2813f1b15f9629c053c8c8b590cc0632689812a2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2813f1b15f9629c053c8c8b590cc0632689812a2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2813f1b15f9629c053c8c8b590cc0632689812a2", "patch": "@@ -28260,7 +28260,7 @@ ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n       sri->icode = (in_p\n \t\t    ? CODE_FOR_reload_noff_load\n \t\t    : CODE_FOR_reload_noff_store);\n-      /* Add the cost of move to a temporary.  */\n+      /* Add the cost of moving address to a temporary.  */\n       sri->extra_cost = 1;\n \n       return NO_REGS;\n@@ -31731,6 +31731,139 @@ void ix86_emit_i387_log1p (rtx op0, rtx op1)\n   emit_label (label2);\n }\n \n+/* Emit code for round calculation.  */\n+void ix86_emit_i387_round (rtx op0, rtx op1)\n+{\n+  enum machine_mode inmode = GET_MODE (op1);\n+  enum machine_mode outmode = GET_MODE (op0);\n+  rtx e1, e2, res, tmp, tmp1, half;\n+  rtx scratch = gen_reg_rtx (HImode);\n+  rtx flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  rtx jump_label = gen_label_rtx ();\n+  rtx insn;\n+  rtx (*gen_abs) (rtx, rtx);\n+  rtx (*gen_neg) (rtx, rtx);\n+\n+  switch (inmode)\n+    {\n+    case SFmode:\n+      gen_abs = gen_abssf2;\n+      break;\n+    case DFmode:\n+      gen_abs = gen_absdf2;\n+      break;\n+    case XFmode:\n+      gen_abs = gen_absxf2;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  switch (outmode)\n+    {\n+    case SFmode:\n+      gen_neg = gen_negsf2;\n+      break;\n+    case DFmode:\n+      gen_neg = gen_negdf2;\n+      break;\n+    case XFmode:\n+      gen_neg = gen_negxf2;\n+      break;\n+    case HImode:\n+      gen_neg = gen_neghi2;\n+      break;\n+    case SImode:\n+      gen_neg = gen_negsi2;\n+      break;\n+    case DImode:\n+      gen_neg = gen_negdi2;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  e1 = gen_reg_rtx (inmode);\n+  e2 = gen_reg_rtx (inmode);\n+  res = gen_reg_rtx (outmode);\n+\n+  half = CONST_DOUBLE_FROM_REAL_VALUE (dconsthalf, inmode);\n+  \n+  /* round(a) = sgn(a) * floor(fabs(a) + 0.5) */\n+\n+  /* scratch = fxam(op1) */\n+  emit_insn (gen_rtx_SET (VOIDmode, scratch,\n+\t\t\t  gen_rtx_UNSPEC (HImode, gen_rtvec (1, op1),\n+\t\t\t\t\t  UNSPEC_FXAM)));\n+  /* e1 = fabs(op1) */\n+  emit_insn (gen_abs (e1, op1));\n+\n+  /* e2 = e1 + 0.5 */\n+  half = force_reg (inmode, half);\n+  emit_insn (gen_rtx_SET (VOIDmode, e2,\n+\t\t\t  gen_rtx_PLUS (inmode, e1, half)));\n+\n+  /* res = floor(e2) */\n+  if (inmode != XFmode)\n+    {\n+      tmp1 = gen_reg_rtx (XFmode);\n+\n+      emit_insn (gen_rtx_SET (VOIDmode, tmp1,\n+\t\t\t      gen_rtx_FLOAT_EXTEND (XFmode, e2)));\n+    }\n+  else\n+    tmp1 = e2;\n+\n+  switch (outmode)\n+    {\n+    case SFmode:\n+    case DFmode:\n+      {\n+\trtx tmp0 = gen_reg_rtx (XFmode);\n+\n+\temit_insn (gen_frndintxf2_floor (tmp0, tmp1));\n+\n+\temit_insn (gen_rtx_SET (VOIDmode, res,\n+\t\t\t\tgen_rtx_UNSPEC (outmode, gen_rtvec (1, tmp0),\n+\t\t\t\t\t\tUNSPEC_TRUNC_NOOP)));\n+      }\n+      break;\n+    case XFmode:\n+      emit_insn (gen_frndintxf2_floor (res, tmp1));\n+      break;\n+    case HImode:\n+      emit_insn (gen_lfloorxfhi2 (res, tmp1));\n+      break;\n+    case SImode:\n+      emit_insn (gen_lfloorxfsi2 (res, tmp1));\n+      break;\n+    case DImode:\n+      emit_insn (gen_lfloorxfdi2 (res, tmp1));\n+\tbreak;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* flags = signbit(a) */\n+  emit_insn (gen_testqi_ext_ccno_0 (scratch, GEN_INT (0x02)));\n+\n+  /* if (flags) then res = -res */\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t      gen_rtx_EQ (VOIDmode, flags, const0_rtx),\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, jump_label),\n+\t\t\t      pc_rtx);\n+  insn = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  predict_jump (REG_BR_PROB_BASE * 50 / 100);\n+  JUMP_LABEL (insn) = jump_label;\n+\n+  emit_insn (gen_neg (res, res));\n+\n+  emit_label (jump_label);\n+  LABEL_NUSES (jump_label) = 1;\n+\n+  emit_move_insn (op0, res);\n+}\n+\n /* Output code to perform a Newton-Rhapson approximation of a single precision\n    floating point divide [http://en.wikipedia.org/wiki/N-th_root_algorithm].  */\n "}, {"sha": "784de1a06511cc930a92f531f869c1c2fd0656da", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2813f1b15f9629c053c8c8b590cc0632689812a2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2813f1b15f9629c053c8c8b590cc0632689812a2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2813f1b15f9629c053c8c8b590cc0632689812a2", "patch": "@@ -14396,17 +14396,31 @@\n })\n \n (define_expand \"round<mode>2\"\n-  [(match_operand:MODEF 0 \"register_operand\" \"\")\n-   (match_operand:MODEF 1 \"nonimmediate_operand\" \"\")]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-   && !flag_trapping_math && !flag_rounding_math\"\n+  [(match_operand:X87MODEF 0 \"register_operand\" \"\")\n+   (match_operand:X87MODEF 1 \"nonimmediate_operand\" \"\")]\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+\t|| TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+       && !flag_trapping_math && !flag_rounding_math)\"\n {\n   if (optimize_insn_for_size_p ())\n     FAIL;\n-  if (TARGET_64BIT || (<MODE>mode != DFmode))\n-    ix86_expand_round (operand0, operand1);\n+\n+  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+      && !flag_trapping_math && !flag_rounding_math)\n+    {\n+      if (TARGET_64BIT || (<MODE>mode != DFmode))\n+\tix86_expand_round (operands[0], operands[1]);\n+      else\n+\tix86_expand_rounddf_32 (operands[0], operands[1]);\n+    }\n   else\n-    ix86_expand_rounddf_32 (operand0, operand1);\n+    {\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+      ix86_emit_i387_round (operands[0], operands[1]);\n+    }\n   DONE;\n })\n \n@@ -14542,16 +14556,31 @@\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && ((<SWI48x:MODE>mode != DImode) || TARGET_64BIT)\")\n \n-(define_expand \"lround<MODEF:mode><SWI48x:mode>2\"\n-  [(match_operand:SWI48x 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:MODEF 1 \"register_operand\" \"\")]\n-  \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n-   && ((<SWI48x:MODE>mode != DImode) || TARGET_64BIT)\n-   && !flag_trapping_math && !flag_rounding_math\"\n+(define_expand \"lround<X87MODEF:mode><SWI248x:mode>2\"\n+  [(match_operand:SWI248x 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:X87MODEF 1 \"register_operand\" \"\")]\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH)\n+\t|| TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations)\n+   || (SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH\n+       && <SWI248x:MODE>mode != HImode \n+       && ((<SWI248x:MODE>mode != DImode) || TARGET_64BIT)\n+       && !flag_trapping_math && !flag_rounding_math)\"\n {\n   if (optimize_insn_for_size_p ())\n     FAIL;\n-  ix86_expand_lround (operand0, operand1);\n+\n+  if (SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH\n+      && <SWI248x:MODE>mode != HImode\n+      && ((<SWI248x:MODE>mode != DImode) || TARGET_64BIT)\n+      && !flag_trapping_math && !flag_rounding_math)\n+    ix86_expand_lround (operand0, operand1);\n+  else\n+    {\n+      operands[0] = force_reg (<SWI248x:MODE>mode, operands[0]);\n+      ix86_emit_i387_round (operands[0], operands[1]);\n+    }\n   DONE;\n })\n "}]}