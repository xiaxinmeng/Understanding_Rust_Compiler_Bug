{"sha": "679655e6557ff17b1752efaa8b7f73bff61059fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc5NjU1ZTY1NTdmZjE3YjE3NTJlZmFhOGI3ZjczYmZmNjEwNTlmZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-18T19:56:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-18T19:56:13Z"}, "message": "Add second argument to SELECT_CC_MODE.\n\nFrom-SVN: r1214", "tree": {"sha": "9352ac60ea0a5826fc0cf73bccb41fa987634830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9352ac60ea0a5826fc0cf73bccb41fa987634830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/679655e6557ff17b1752efaa8b7f73bff61059fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679655e6557ff17b1752efaa8b7f73bff61059fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679655e6557ff17b1752efaa8b7f73bff61059fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679655e6557ff17b1752efaa8b7f73bff61059fd/comments", "author": null, "committer": null, "parents": [{"sha": "b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b565a3163d3682380536a2e6b0ebac6f59fa9a5e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "56bae9b2b96b89d55d0ab6171fed61c55c8912d8", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679655e6557ff17b1752efaa8b7f73bff61059fd/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679655e6557ff17b1752efaa8b7f73bff61059fd/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=679655e6557ff17b1752efaa8b7f73bff61059fd", "patch": "@@ -433,7 +433,7 @@ gen_compare_reg (code, x, y)\n      rtx x, y;\n {\n   rtx cc_reg;\n-  enum machine_mode ccmode = SELECT_CC_MODE (code, x);\n+  enum machine_mode ccmode = SELECT_CC_MODE (code, x, y);\n   enum machine_mode mode\n     = GET_MODE (x) == VOIDmode ? GET_MODE (y) : GET_MODE (x);\n "}, {"sha": "4384a095ecb9175f1e471da70442a391f047f9d8", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679655e6557ff17b1752efaa8b7f73bff61059fd/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679655e6557ff17b1752efaa8b7f73bff61059fd/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=679655e6557ff17b1752efaa8b7f73bff61059fd", "patch": "@@ -1105,7 +1105,7 @@ extern struct rtx_def *gen_compare_reg ();\n    should be used.  CC_NOOVmode should be used when the first operand is a\n    PLUS, MINUS, or NEG.  CCmode should be used when no special processing is\n    needed.  */\n-#define SELECT_CC_MODE(OP,X) select_cc_mode (OP, X)\n+#define SELECT_CC_MODE(OP,X,Y) select_cc_mode (OP, X,Y)\n \n /* A function address in a call instruction is a byte address\n    (for indexing purposes) so give the MEM rtx a byte's mode.  */"}, {"sha": "cb7d52bdc70a8994a74f0f894c7c4d86b72d74a1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679655e6557ff17b1752efaa8b7f73bff61059fd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679655e6557ff17b1752efaa8b7f73bff61059fd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=679655e6557ff17b1752efaa8b7f73bff61059fd", "patch": "@@ -456,7 +456,7 @@ gen_compare_reg (code, x, y)\n      enum rtx_code code;\n      rtx x, y;\n {\n-  enum machine_mode mode = SELECT_CC_MODE (code, x);\n+  enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg = gen_rtx (REG, mode, 0);\n \n   emit_insn (gen_rtx (SET, VOIDmode, cc_reg,"}, {"sha": "e434959ac08c2ca26302cec57cd8bdbe5b9ad294", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679655e6557ff17b1752efaa8b7f73bff61059fd/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679655e6557ff17b1752efaa8b7f73bff61059fd/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=679655e6557ff17b1752efaa8b7f73bff61059fd", "patch": "@@ -1292,7 +1292,7 @@ extern struct rtx_def *legitimize_pic_address ();\n    CCFP[E]mode is used.  CC_NOOVmode should be used when the first operand is a\n    PLUS, MINUS, or NEG.  CCmode should be used when no special processing is\n    needed.  */\n-#define SELECT_CC_MODE(OP,X) \\\n+#define SELECT_CC_MODE(OP,X,Y) \\\n   (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\t\t\\\n    ? ((OP == EQ || OP == NE) ? CCFPmode : CCFPEmode)\t\t\\\n    : ((GET_CODE (X) == PLUS || GET_CODE (X) == MINUS || GET_CODE (X) == NEG) \\"}]}