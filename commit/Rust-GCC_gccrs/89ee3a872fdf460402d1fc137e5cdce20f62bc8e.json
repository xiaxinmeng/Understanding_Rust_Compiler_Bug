{"sha": "89ee3a872fdf460402d1fc137e5cdce20f62bc8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllZTNhODcyZmRmNDYwNDAyZDFmYzEzN2U1Y2RjZTIwZjYyYmM4ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-03T10:46:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-03T10:46:52Z"}, "message": "re PR tree-optimization/92751 (VN partial def support confused about clobbers)\n\n2019-12-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92751\n\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Fail\n\twhen a clobber ends up in the partial-def vector.\n\t(vn_reference_lookup_3): Let clobbers be handled by the\n\tassignment from CTOR handling.\n\n\t* g++.dg/tree-ssa/pr92751.C: New testcase.\n\nFrom-SVN: r278931", "tree": {"sha": "df1eaf56a9937444db526351efb2b1ab571fc9b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df1eaf56a9937444db526351efb2b1ab571fc9b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ee3a872fdf460402d1fc137e5cdce20f62bc8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ee3a872fdf460402d1fc137e5cdce20f62bc8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ee3a872fdf460402d1fc137e5cdce20f62bc8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1058a2262b9dc15c164dec5261a9b3daad84e6d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1058a2262b9dc15c164dec5261a9b3daad84e6d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1058a2262b9dc15c164dec5261a9b3daad84e6d6"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "7a5f5c2d7d11345c85725ff11ef04f4248794726", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89ee3a872fdf460402d1fc137e5cdce20f62bc8e", "patch": "@@ -1,3 +1,11 @@\n+2019-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92751\n+\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Fail\n+\twhen a clobber ends up in the partial-def vector.\n+\t(vn_reference_lookup_3): Let clobbers be handled by the\n+\tassignment from CTOR handling.\n+\n 2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92734"}, {"sha": "e7e07882a4343904dd88ecb502f122409dd57ca1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89ee3a872fdf460402d1fc137e5cdce20f62bc8e", "patch": "@@ -1,3 +1,8 @@\n+2019-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92751\n+\t* g++.dg/tree-ssa/pr92751.C: New testcase.\n+\n 2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gfortran.dg/loop_versioning_6.f90: XFAIL the scans for ! lp64."}, {"sha": "d107482f34d61c07cf2341fc53e61ac0c756aeec", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr92751.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr92751.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr92751.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr92751.C?ref=89ee3a872fdf460402d1fc137e5cdce20f62bc8e", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-O -fdump-tree-fre1\" }\n+\n+inline void* operator new(__SIZE_TYPE__, void* p) { return p; }\n+template<int N>\n+struct Vec {\n+  Vec(int v) : lo(v), hi(v) {};\n+  Vec<N/2> lo, hi;\n+};\n+template<>\n+struct Vec<1> {\n+  Vec(int v) : val(v) {}\n+  int val;\n+};\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+void foo (v4si *dst)\n+{\n+  Vec<4> v(1);\n+  v4si tem;\n+  __builtin_memcpy (&tem, &v, sizeof (tem));\n+  *dst = tem;\n+}\n+\n+// FRE should be able to value-number 'tem' to a constant.  */\n+// { dg-final { scan-tree-dump \"\\\\*dst_\\[0-9\\]*\\\\\\(D\\\\\\) = { 1, 1, 1, 1 };\" \"fre1\" } }"}, {"sha": "8fbdb5163d6f15a8d3c5e6b77908ed74504591f7", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ee3a872fdf460402d1fc137e5cdce20f62bc8e/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=89ee3a872fdf460402d1fc137e5cdce20f62bc8e", "patch": "@@ -1761,6 +1761,9 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n \n   if (partial_defs.is_empty ())\n     {\n+      /* If we get a clobber upfront, fail.  */\n+      if (TREE_CLOBBER_P (pd.rhs))\n+\treturn (void *)-1;\n       partial_defs.safe_push (pd);\n       first_range.offset = pd.offset;\n       first_range.size = pd.size;\n@@ -1792,7 +1795,8 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n       && ranges_known_overlap_p (r->offset, r->size + 1,\n \t\t\t\t newr.offset, newr.size))\n     {\n-      /* Ignore partial defs already covered.  */\n+      /* Ignore partial defs already covered.  Here we also drop shadowed\n+         clobbers arriving here at the floor.  */\n       if (known_subrange_p (newr.offset, newr.size, r->offset, r->size))\n \treturn NULL;\n       r->size = MAX (r->offset + r->size, newr.offset + newr.size) - r->offset;\n@@ -1817,6 +1821,9 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n \t\t     rafter->offset + rafter->size) - r->offset;\n       splay_tree_remove (known_ranges, (splay_tree_key)&rafter->offset);\n     }\n+  /* If we get a clobber, fail.  */\n+  if (TREE_CLOBBER_P (pd.rhs))\n+    return (void *)-1;\n   partial_defs.safe_push (pd);\n \n   /* Now we have merged newr into the range tree.  When we have covered\n@@ -2355,10 +2362,6 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n   poly_int64 offset = ref->offset;\n   poly_int64 maxsize = ref->max_size;\n \n-  /* We can't deduce anything useful from clobbers.  */\n-  if (gimple_clobber_p (def_stmt))\n-    return (void *)-1;\n-\n   /* def_stmt may-defs *ref.  See if we can derive a value for *ref\n      from that definition.\n      1) Memset.  */\n@@ -2508,6 +2511,10 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t  if (data->partial_defs.is_empty ()\n \t      && known_subrange_p (offset, maxsize, offset2, size2))\n \t    {\n+\t      /* While technically undefined behavior do not optimize\n+\t         a full read from a clobber.  */\n+\t      if (gimple_clobber_p (def_stmt))\n+\t\treturn (void *)-1;\n \t      tree val = build_zero_cst (vr->type);\n \t      return vn_reference_lookup_or_insert_for_pieces\n \t\t  (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n@@ -2522,6 +2529,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t   && size2.is_constant (&size2i)\n \t\t   && size2i % BITS_PER_UNIT == 0)\n \t    {\n+\t      /* Let clobbers be consumed by the partial-def tracker\n+\t         which can choose to ignore them if they are shadowed\n+\t\t by a later def.  */\n \t      pd_data pd;\n \t      pd.rhs = gimple_assign_rhs1 (def_stmt);\n \t      pd.offset = (offset2i - offseti) / BITS_PER_UNIT;"}]}