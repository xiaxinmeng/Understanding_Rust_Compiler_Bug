{"sha": "cba734eaca0f49feea8b004ee28646f2b1ca16a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhNzM0ZWFjYTBmNDlmZWVhOGIwMDRlZTI4NjQ2ZjJiMWNhMTZhNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-12T09:00:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-12T09:00:19Z"}, "message": "Finish last change.  I'm no emacs wizard :(\n\nFrom-SVN: r17069", "tree": {"sha": "92dadf76e0429e3ca127a93ff939b0ec0b3f4446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92dadf76e0429e3ca127a93ff939b0ec0b3f4446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba734eaca0f49feea8b004ee28646f2b1ca16a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba734eaca0f49feea8b004ee28646f2b1ca16a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba734eaca0f49feea8b004ee28646f2b1ca16a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba734eaca0f49feea8b004ee28646f2b1ca16a5/comments", "author": null, "committer": null, "parents": [{"sha": "332c1bb4ba990e14b63e2b80889cdfa08db53e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332c1bb4ba990e14b63e2b80889cdfa08db53e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332c1bb4ba990e14b63e2b80889cdfa08db53e7f"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "5102c2c1d6ac2d8a0324d69de2915c41aa00689d", "filename": "gcc/tree.def", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba734eaca0f49feea8b004ee28646f2b1ca16a5/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba734eaca0f49feea8b004ee28646f2b1ca16a5/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=cba734eaca0f49feea8b004ee28646f2b1ca16a5", "patch": "@@ -21,17 +21,17 @@ Boston, MA 02111-1307, USA.  */\n \n  \n /* The third argument can be:\n-   \"x\" for an exceptional code (fits no category).\n-   \"t\" for a type object code.\n-   \"b\" for a lexical block.\n-   \"c\" for codes for constants.\n-   \"d\" for codes for declarations (also serving as variable refs).\n-   \"r\" for codes for references to storage.\n-   \"<\" for codes for comparison expressions.\n-   \"1\" for codes for unary arithmetic expressions.\n-   \"2\" for codes for binary arithmetic expressions.\n-   \"s\" for codes for expressions with inherent side effects.\n-   \"e\" for codes for other kinds of expressions.  */\n+   'x' for an exceptional code (fits no category).\n+   't' for a type object code.\n+   'b' for a lexical block.\n+   'c' for codes for constants.\n+   'd' for codes for declarations (also serving as variable refs).\n+   'r' for codes for references to storage.\n+   '<' for codes for comparison expressions.\n+   '1' for codes for unary arithmetic expressions.\n+   '2' for codes for binary arithmetic expressions.\n+   's' for codes for expressions with inherent side effects.\n+   'e' for codes for other kinds of expressions.  */\n \n /* For `r', `e', `<', `1', `2', `s' and `x' nodes,\n    the 4th element is the number of argument slots to allocate.\n@@ -42,28 +42,28 @@ Boston, MA 02111-1307, USA.  */\n    by later parsing activities, to avoid multiple error messages\n    for one error.\n    No fields in these nodes are used except the TREE_CODE.  */\n-DEFTREECODE (ERROR_MARK, \"error_mark\", \"x\", 0)\n+DEFTREECODE (ERROR_MARK, \"error_mark\", 'x', 0)\n \n /* Used to represent a name (such as, in the DECL_NAME of a decl node).\n    Internally it looks like a STRING_CST node.\n    There is only one IDENTIFIER_NODE ever made for any particular name.\n    Use `get_identifier' to get it (or create it, the first time).  */\n-DEFTREECODE (IDENTIFIER_NODE, \"identifier_node\", \"x\", -1)\n+DEFTREECODE (IDENTIFIER_NODE, \"identifier_node\", 'x', -1)\n \n /* Used to hold information to identify an operator (or combination\n    of two operators) considered as a `noun' rather than a `verb'.\n    The first operand is encoded in the TREE_TYPE field.  */\n-DEFTREECODE (OP_IDENTIFIER, \"op_identifier\", \"x\", 2)\n+DEFTREECODE (OP_IDENTIFIER, \"op_identifier\", 'x', 2)\n \n /* Has the TREE_VALUE and TREE_PURPOSE fields.  */\n /* These nodes are made into lists by chaining through the\n    TREE_CHAIN field.  The elements of the list live in the\n    TREE_VALUE fields, while TREE_PURPOSE fields are occasionally\n    used as well to get the effect of Lisp association lists.  */\n-DEFTREECODE (TREE_LIST, \"tree_list\", \"x\", 2)\n+DEFTREECODE (TREE_LIST, \"tree_list\", 'x', 2)\n \n /* These nodes contain an array of tree nodes.  */\n-DEFTREECODE (TREE_VEC, \"tree_vec\", \"x\", 2)\n+DEFTREECODE (TREE_VEC, \"tree_vec\", 'x', 2)\n \n /* A symbol binding block.  These are arranged in a tree,\n    where the BLOCK_SUBBLOCKS field contains a chain of subblocks\n@@ -83,7 +83,7 @@ DEFTREECODE (TREE_VEC, \"tree_vec\", \"x\", 2)\n    BLOCK_ABSTRACT is non-zero if the block represents an abstract\n    instance of a block (i.e. one which is nested within an abstract\n    instance of a inline function. */\n-DEFTREECODE (BLOCK, \"block\", \"b\", 0)\n+DEFTREECODE (BLOCK, \"block\", 'b', 0)\n \f\n /* Each data type is represented by a tree node whose code is one of\n    the following:  */"}]}