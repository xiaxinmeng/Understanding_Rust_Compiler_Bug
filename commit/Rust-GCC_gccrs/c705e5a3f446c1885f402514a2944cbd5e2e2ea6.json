{"sha": "c705e5a3f446c1885f402514a2944cbd5e2e2ea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcwNWU1YTNmNDQ2YzE4ODVmNDAyNTE0YTI5NDRjYmQ1ZTJlMmVhNg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-31T09:49:40Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-31T09:49:40Z"}, "message": "Subject: [PATCH] rs6000: Fix crash with big stack clash interval (PR82674)\n\nIf the user asks for a stack clash probe interval of 64kB, we currently\ngenerate a \"stdu rX,-65536(r1)\" instruction.  That instruction does not\nexist (the offset is a 16-bit signed number).  If the offset is too big\nwe should force it into a register and generate a \"stdux rX,rY,r1\"\ninstruction, instead.\n\n\n\tPR target/82674\n\t* config/rs6000/rs6000.md (allocate_stack): Force update interval\n\tinto a register if it does not fit into an immediate offset field.\n\nFrom-SVN: r254252", "tree": {"sha": "e9ba463fa2ae590d8febf99cc0f04f5caffacaf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ba463fa2ae590d8febf99cc0f04f5caffacaf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c705e5a3f446c1885f402514a2944cbd5e2e2ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c705e5a3f446c1885f402514a2944cbd5e2e2ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c705e5a3f446c1885f402514a2944cbd5e2e2ea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c705e5a3f446c1885f402514a2944cbd5e2e2ea6/comments", "author": null, "committer": null, "parents": [{"sha": "4db58158cc5df72324299dd5ef0ac09f6497ccb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db58158cc5df72324299dd5ef0ac09f6497ccb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db58158cc5df72324299dd5ef0ac09f6497ccb6"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "4216b943088ae2b7197758d3e86442fe29a00637", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c705e5a3f446c1885f402514a2944cbd5e2e2ea6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c705e5a3f446c1885f402514a2944cbd5e2e2ea6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c705e5a3f446c1885f402514a2944cbd5e2e2ea6", "patch": "@@ -1,8 +1,14 @@\n+2017-10-31  Segher Boessenkool  <segher@kernel.crsahing.org>\n+\n+\tPR target/82674\n+\t* config/rs6000/rs6000.md (allocate_stack): Force update interval\n+\tinto a register if it does not fit into an immediate offset field.\n+\n 2017-10-31  Olivier Hainque  <hainque@adacore.com>\n \n         * gcc/Makefile.in (FLAGS_TO_PASS): Pass libsubdir as well.\n \n-2017-11-01  Julia Koval  <julia.koval@intel.com>\n+2017-10-31  Julia Koval  <julia.koval@intel.com>\n \n \t* config.gcc: Add gfniintrin.h.\n \t* config/i386/gfniintrin.h: New."}, {"sha": "18ebe8f1b287ccb0698707e7cae631e8faa6f6b2", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c705e5a3f446c1885f402514a2944cbd5e2e2ea6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c705e5a3f446c1885f402514a2944cbd5e2e2ea6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c705e5a3f446c1885f402514a2944cbd5e2e2ea6", "patch": "@@ -10333,20 +10333,21 @@\n \t{\n \t  rtx loop_lab, end_loop;\n \t  bool rotated = CONST_INT_P (rounded_size);\n+\t  rtx update = GEN_INT (-probe_interval);\n+\t  if (probe_interval > 32768)\n+\t    update = force_reg (Pmode, update);\n \n \t  emit_stack_clash_protection_probe_loop_start (&loop_lab, &end_loop,\n \t\t\t\t\t\t\tlast_addr, rotated);\n \n \t  if (Pmode == SImode)\n \t    emit_insn (gen_movsi_update_stack (stack_pointer_rtx,\n \t\t\t\t\t       stack_pointer_rtx,\n-\t\t\t\t\t       GEN_INT (-probe_interval),\n-\t\t\t\t\t       chain));\n+\t\t\t\t\t       update, chain));\n \t  else\n \t    emit_insn (gen_movdi_di_update_stack (stack_pointer_rtx,\n \t\t\t\t\t          stack_pointer_rtx,\n-\t\t\t\t\t          GEN_INT (-probe_interval),\n-\t\t\t\t\t          chain));\n+\t\t\t\t\t          update, chain));\n \t  emit_stack_clash_protection_probe_loop_end (loop_lab, end_loop,\n \t\t\t\t\t\t      last_addr, rotated);\n \t}"}]}