{"sha": "3b68401238b4a5107837b781c5fc375ab378fcf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I2ODQwMTIzOGI0YTUxMDc4MzdiNzgxYzVmYzM3NWFiMzc4ZmNmNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-03-08T16:23:20Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-03-08T16:23:20Z"}, "message": "* arm.c (fpa_rhs_operand, fpa_add_operand, const_double_rtx_ok_for_fpa)\n(neg_const_double_ok_for_fpa, output_mov_long_double_fpa_from_arm)\n(output_mov_long_double_arm_from_fpa, output_mov_double_fpa_from_arm)\n(output_mov_double_arm_from_fpa): Renamed to use fpa instead of fpu.\nAll callers changed.\n* arm.md, arm.h, arm-protos.h: Updated.\n\n* arm.h (enum reg_class FPA_REGS): Renamed from FPU_REGS.\n(CLASS_MAX_NREGS, REGISTER_MOVE_COST, REG_CLASS_FROM_LETTER): Updated.\n* arm.c (arm_regno_class, f_register_operand): Updated.\n\nFrom-SVN: r63996", "tree": {"sha": "8124e5a299b5916a93cd1489927ec334e918cccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8124e5a299b5916a93cd1489927ec334e918cccc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b68401238b4a5107837b781c5fc375ab378fcf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b68401238b4a5107837b781c5fc375ab378fcf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b68401238b4a5107837b781c5fc375ab378fcf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b68401238b4a5107837b781c5fc375ab378fcf6/comments", "author": null, "committer": null, "parents": [{"sha": "fa5848c7900928c031fc995f4b42958bc3562f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5848c7900928c031fc995f4b42958bc3562f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5848c7900928c031fc995f4b42958bc3562f86"}], "stats": {"total": 223, "additions": 118, "deletions": 105}, "files": [{"sha": "31eb46dc89a7d38d2c3c5c851d144f41a85a6b97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b68401238b4a5107837b781c5fc375ab378fcf6", "patch": "@@ -1,3 +1,16 @@\n+2003-03-08  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (fpa_rhs_operand, fpa_add_operand, const_double_rtx_ok_for_fpa)\n+\t(neg_const_double_ok_for_fpa, output_mov_long_double_fpa_from_arm)\n+\t(output_mov_long_double_arm_from_fpa, output_mov_double_fpa_from_arm)\n+\t(output_mov_double_arm_from_fpa): Renamed to use fpa instead of fpu.\n+\tAll callers changed.\n+\t* arm.md, arm.h, arm-protos.h: Updated.\n+\n+\t* arm.h (enum reg_class FPA_REGS): Renamed from FPU_REGS.\n+\t(CLASS_MAX_NREGS, REGISTER_MOVE_COST, REG_CLASS_FROM_LETTER): Updated.\n+\t* arm.c (arm_regno_class, f_register_operand): Updated.\n+\n 2003-03-08  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/cris/cris.h: Remove EGCS references."}, {"sha": "bfc2c0faaef755ab674ab293a65f40a027e1a01e", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=3b68401238b4a5107837b781c5fc375ab378fcf6", "patch": "@@ -58,8 +58,8 @@ extern int    thumb_legitimate_address_p PARAMS ((enum machine_mode, rtx,\n extern int    thumb_legitimate_offset_p\tPARAMS ((enum machine_mode,\n \t\t\t\t\t\t HOST_WIDE_INT));\n extern rtx    arm_legitimize_address\tPARAMS ((rtx, rtx, enum machine_mode));\n-extern int    const_double_rtx_ok_for_fpu\tPARAMS ((rtx));\n-extern int    neg_const_double_rtx_ok_for_fpu\tPARAMS ((rtx));\n+extern int    const_double_rtx_ok_for_fpa\tPARAMS ((rtx));\n+extern int    neg_const_double_rtx_ok_for_fpa\tPARAMS ((rtx));\n \n /* Predicates.  */\n extern int    s_register_operand\tPARAMS ((rtx, enum machine_mode));\n@@ -74,8 +74,8 @@ extern int    arm_not_operand\t\tPARAMS ((rtx, enum machine_mode));\n extern int    offsettable_memory_operand PARAMS ((rtx, enum machine_mode));\n extern int    alignable_memory_operand\tPARAMS ((rtx, enum machine_mode));\n extern int    bad_signed_byte_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int    fpu_rhs_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int    fpu_add_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int    fpa_rhs_operand\t\tPARAMS ((rtx, enum machine_mode));\n+extern int    fpa_add_operand\t\tPARAMS ((rtx, enum machine_mode));\n extern int    power_of_two_operand\tPARAMS ((rtx, enum machine_mode));\n extern int    nonimmediate_di_operand\tPARAMS ((rtx, enum machine_mode));\n extern int    di_operand\t\tPARAMS ((rtx, enum machine_mode));\n@@ -125,11 +125,11 @@ extern void   arm_reorg\t\t\tPARAMS ((rtx));\n extern const char * fp_immediate_constant PARAMS ((rtx));\n extern const char * output_call\t\tPARAMS ((rtx *));\n extern const char * output_call_mem\tPARAMS ((rtx *));\n-extern const char * output_mov_long_double_fpu_from_arm PARAMS ((rtx *));\n-extern const char * output_mov_long_double_arm_from_fpu PARAMS ((rtx *));\n+extern const char * output_mov_long_double_fpa_from_arm PARAMS ((rtx *));\n+extern const char * output_mov_long_double_arm_from_fpa PARAMS ((rtx *));\n extern const char * output_mov_long_double_arm_from_arm PARAMS ((rtx *));\n-extern const char * output_mov_double_fpu_from_arm      PARAMS ((rtx *));\n-extern const char * output_mov_double_arm_from_fpu      PARAMS ((rtx *));\n+extern const char * output_mov_double_fpa_from_arm      PARAMS ((rtx *));\n+extern const char * output_mov_double_arm_from_fpa      PARAMS ((rtx *));\n extern const char * output_move_double\tPARAMS ((rtx *));\n extern const char * output_mov_immediate PARAMS ((rtx *));\n extern const char * output_add_immediate PARAMS ((rtx *));"}, {"sha": "4f076a3712f2066f053cf10df8ceca465ea86775", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3b68401238b4a5107837b781c5fc375ab378fcf6", "patch": "@@ -387,7 +387,7 @@ static const struct processors all_cores[] =\n   {\"arm710c\",\t             FL_MODE26 | FL_MODE32 },\n   {\"arm7100\",\t             FL_MODE26 | FL_MODE32 },\n   {\"arm7500\",\t             FL_MODE26 | FL_MODE32 },\n-  /* Doesn't have an external co-proc, but does have embedded fpu.  */\n+  /* Doesn't have an external co-proc, but does have embedded fpa.  */\n   {\"arm7500fe\",\tFL_CO_PROC | FL_MODE26 | FL_MODE32 },\n   {\"arm7tdmi\",\tFL_CO_PROC |             FL_MODE32 | FL_FAST_MULT | FL_ARCH4 | FL_THUMB },\n   {\"arm8\",\t             FL_MODE26 | FL_MODE32 | FL_FAST_MULT | FL_ARCH4 |            FL_LDSCHED },\n@@ -1008,7 +1008,7 @@ use_return_insn (iscond)\n   if (saved_int_regs && !(saved_int_regs & (1 << LR_REGNUM)))\n     return 0;\n \n-  /* Can't be done if any of the FPU regs are pushed,\n+  /* Can't be done if any of the FPA regs are pushed,\n      since this also requires an insn.  */\n   if (TARGET_HARD_FLOAT)\n     for (regno = FIRST_ARM_FP_REGNUM; regno <= LAST_ARM_FP_REGNUM; regno++)\n@@ -3216,11 +3216,11 @@ arm_rtx_costs_1 (x, code, outer)\n       if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \treturn (2 + ((REG_OR_SUBREG_REG (XEXP (x, 1))\n \t\t      || (GET_CODE (XEXP (x, 1)) == CONST_DOUBLE\n-\t\t\t  && const_double_rtx_ok_for_fpu (XEXP (x, 1))))\n+\t\t\t  && const_double_rtx_ok_for_fpa (XEXP (x, 1))))\n \t\t     ? 0 : 8)\n \t\t+ ((REG_OR_SUBREG_REG (XEXP (x, 0))\n \t\t    || (GET_CODE (XEXP (x, 0)) == CONST_DOUBLE\n-\t\t\t&& const_double_rtx_ok_for_fpu (XEXP (x, 0))))\n+\t\t\t&& const_double_rtx_ok_for_fpa (XEXP (x, 0))))\n \t\t   ? 0 : 8));\n \n       if (((GET_CODE (XEXP (x, 0)) == CONST_INT\n@@ -3245,7 +3245,7 @@ arm_rtx_costs_1 (x, code, outer)\n \treturn (2 + (REG_OR_SUBREG_REG (XEXP (x, 0)) ? 0 : 8)\n \t\t+ ((REG_OR_SUBREG_REG (XEXP (x, 1))\n \t\t    || (GET_CODE (XEXP (x, 1)) == CONST_DOUBLE\n-\t\t\t&& const_double_rtx_ok_for_fpu (XEXP (x, 1))))\n+\t\t\t&& const_double_rtx_ok_for_fpa (XEXP (x, 1))))\n \t\t   ? 0 : 8));\n \n       /* Fall through */\n@@ -3405,10 +3405,10 @@ arm_rtx_costs_1 (x, code, outer)\n       return 6;\n       \n     case CONST_DOUBLE:\t\t\t\t\t\t\n-      if (const_double_rtx_ok_for_fpu (x))\t\t\t\n+      if (const_double_rtx_ok_for_fpa (x))\t\t\t\n \treturn outer == SET ? 2 : -1;\t\t\t\n       else if ((outer == COMPARE || outer == PLUS)\t\n-\t       && neg_const_double_rtx_ok_for_fpu (x))\t\t\n+\t       && neg_const_double_rtx_ok_for_fpa (x))\t\t\n \treturn -1;\t\t\t\t\t\t\n       return 7;\n       \n@@ -3569,10 +3569,10 @@ init_fpa_table ()\n   fpa_consts_inited = 1;\n }\n \n-/* Return TRUE if rtx X is a valid immediate FPU constant.  */\n+/* Return TRUE if rtx X is a valid immediate FPA constant.  */\n \n int\n-const_double_rtx_ok_for_fpu (x)\n+const_double_rtx_ok_for_fpa (x)\n      rtx x;\n {\n   REAL_VALUE_TYPE r;\n@@ -3592,10 +3592,10 @@ const_double_rtx_ok_for_fpu (x)\n   return 0;\n }\n \n-/* Return TRUE if rtx X is a valid immediate FPU constant.  */\n+/* Return TRUE if rtx X is a valid immediate FPA constant.  */\n \n int\n-neg_const_double_rtx_ok_for_fpu (x)\n+neg_const_double_rtx_ok_for_fpa (x)\n      rtx x;\n {\n   REAL_VALUE_TYPE r;\n@@ -3851,13 +3851,13 @@ f_register_operand (op, mode)\n      to be a register operand.  */\n   return (GET_CODE (op) == REG\n \t  && (REGNO (op) >= FIRST_PSEUDO_REGISTER\n-\t      || REGNO_REG_CLASS (REGNO (op)) == FPU_REGS));\n+\t      || REGNO_REG_CLASS (REGNO (op)) == FPA_REGS));\n }\n \n-/* Return TRUE for valid operands for the rhs of an FPU instruction.  */\n+/* Return TRUE for valid operands for the rhs of an FPA instruction.  */\n \n int\n-fpu_rhs_operand (op, mode)\n+fpa_rhs_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n@@ -3868,13 +3868,13 @@ fpu_rhs_operand (op, mode)\n     return FALSE;\n \n   if (GET_CODE (op) == CONST_DOUBLE)\n-    return const_double_rtx_ok_for_fpu (op);\n+    return const_double_rtx_ok_for_fpa (op);\n \n   return FALSE;\n }\n \n int\n-fpu_add_operand (op, mode)\n+fpa_add_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n@@ -3885,8 +3885,8 @@ fpu_add_operand (op, mode)\n     return FALSE;\n \n   if (GET_CODE (op) == CONST_DOUBLE)\n-    return (const_double_rtx_ok_for_fpu (op) \n-\t    || neg_const_double_rtx_ok_for_fpu (op));\n+    return (const_double_rtx_ok_for_fpa (op) \n+\t    || neg_const_double_rtx_ok_for_fpa (op));\n \n   return FALSE;\n }\n@@ -7292,12 +7292,12 @@ output_call_mem (operands)\n }\n \n \n-/* Output a move from arm registers to an fpu registers.\n-   OPERANDS[0] is an fpu register.\n+/* Output a move from arm registers to an fpa registers.\n+   OPERANDS[0] is an fpa register.\n    OPERANDS[1] is the first registers of an arm register pair.  */\n \n const char *\n-output_mov_long_double_fpu_from_arm (operands)\n+output_mov_long_double_fpa_from_arm (operands)\n      rtx * operands;\n {\n   int arm_reg0 = REGNO (operands[1]);\n@@ -7316,12 +7316,12 @@ output_mov_long_double_fpu_from_arm (operands)\n   return \"\";\n }\n \n-/* Output a move from an fpu register to arm registers.\n+/* Output a move from an fpa register to arm registers.\n    OPERANDS[0] is the first registers of an arm register pair.\n-   OPERANDS[1] is an fpu register.  */\n+   OPERANDS[1] is an fpa register.  */\n \n const char *\n-output_mov_long_double_arm_from_fpu (operands)\n+output_mov_long_double_arm_from_fpa (operands)\n      rtx * operands;\n {\n   int arm_reg0 = REGNO (operands[0]);\n@@ -7376,12 +7376,12 @@ output_mov_long_double_arm_from_arm (operands)\n }\n \n \n-/* Output a move from arm registers to an fpu registers.\n-   OPERANDS[0] is an fpu register.\n+/* Output a move from arm registers to an fpa registers.\n+   OPERANDS[0] is an fpa register.\n    OPERANDS[1] is the first registers of an arm register pair.  */\n \n const char *\n-output_mov_double_fpu_from_arm (operands)\n+output_mov_double_fpa_from_arm (operands)\n      rtx * operands;\n {\n   int arm_reg0 = REGNO (operands[1]);\n@@ -7397,12 +7397,12 @@ output_mov_double_fpu_from_arm (operands)\n   return \"\";\n }\n \n-/* Output a move from an fpu register to arm registers.\n+/* Output a move from an fpa register to arm registers.\n    OPERANDS[0] is the first registers of an arm register pair.\n-   OPERANDS[1] is an fpu register.  */\n+   OPERANDS[1] is an fpa register.  */\n \n const char *\n-output_mov_double_arm_from_fpu (operands)\n+output_mov_double_arm_from_fpa (operands)\n      rtx * operands;\n {\n   int arm_reg0 = REGNO (operands[0]);\n@@ -10243,7 +10243,7 @@ arm_hard_regno_mode_ok (regno, mode)\n     /* We only allow integers in the fake hard registers.  */\n     return GET_MODE_CLASS (mode) == MODE_INT;\n \n-  /* The only registers left are the FPU registers\n+  /* The only registers left are the FPA registers\n      which we only allow to hold FP values.  */\n   return GET_MODE_CLASS (mode) == MODE_FLOAT\n     && regno >= FIRST_ARM_FP_REGNUM\n@@ -10276,7 +10276,7 @@ arm_regno_class (regno)\n   if (IS_CIRRUS_REGNUM (regno))\n     return CIRRUS_REGS;\n \n-  return FPU_REGS;\n+  return FPA_REGS;\n }\n \n /* Handle a special case when computing the offset"}, {"sha": "2417ff40a9f1f4b0db045d031f112c306a85c659", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3b68401238b4a5107837b781c5fc375ab378fcf6", "patch": "@@ -1002,7 +1002,7 @@ extern const char * structure_size_string;\n #define IS_CIRRUS_REGNUM(REGNUM) \\\n   (((REGNUM) >= FIRST_CIRRUS_FP_REGNUM) && ((REGNUM) <= LAST_CIRRUS_FP_REGNUM))\n \n-/* The number of hard registers is 16 ARM + 8 FPU + 1 CC + 1 SFP.  */\n+/* The number of hard registers is 16 ARM + 8 FPA + 1 CC + 1 SFP.  */\n /* Cirrus registers take us up to 43... */\n #define FIRST_PSEUDO_REGISTER\t43\n \n@@ -1021,7 +1021,7 @@ extern const char * structure_size_string;\n    This is ordinarily the length in words of a value of mode MODE\n    but can be less for certain modes in special long registers.\n \n-   On the ARM regs are UNITS_PER_WORD bits wide; FPU regs can hold any FP\n+   On the ARM regs are UNITS_PER_WORD bits wide; FPA regs can hold any FP\n    mode.  */\n #define HARD_REGNO_NREGS(REGNO, MODE)  \t\\\n   ((TARGET_ARM \t\t\t\t\\\n@@ -1066,12 +1066,12 @@ extern const char * structure_size_string;\n \f\n /* Register and constant classes.  */\n \n-/* Register classes: used to be simple, just all ARM regs or all FPU regs\n+/* Register classes: used to be simple, just all ARM regs or all FPA regs\n    Now that the Thumb is involved it has become more complicated.  */\n enum reg_class\n {\n   NO_REGS,\n-  FPU_REGS,\n+  FPA_REGS,\n   CIRRUS_REGS,\n   LO_REGS,\n   STACK_REG,\n@@ -1089,7 +1089,7 @@ enum reg_class\n #define REG_CLASS_NAMES  \\\n {\t\t\t\\\n   \"NO_REGS\",\t\t\\\n-  \"FPU_REGS\",\t\t\\\n+  \"FPA_REGS\",\t\t\\\n   \"CIRRUS_REGS\",\t\\\n   \"LO_REGS\",\t\t\\\n   \"STACK_REG\",\t\t\\\n@@ -1106,7 +1106,7 @@ enum reg_class\n #define REG_CLASS_CONTENTS  \t\t\\\n {\t\t\t\t\t\\\n   { 0x00000000, 0x0 },        /* NO_REGS  */\t\\\n-  { 0x00FF0000, 0x0 },        /* FPU_REGS */\t\\\n+  { 0x00FF0000, 0x0 },        /* FPA_REGS */\t\\\n   { 0xF8000000, 0x000007FF }, /* CIRRUS_REGS */\t\\\n   { 0x000000FF, 0x0 },        /* LO_REGS */\t\\\n   { 0x00002000, 0x0 },        /* STACK_REG */\t\\\n@@ -1143,10 +1143,10 @@ enum reg_class\n #define SMALL_REGISTER_CLASSES   TARGET_THUMB\n \n /* Get reg_class from a letter such as appears in the machine description.\n-   We only need constraint `f' for FPU_REGS (`r' == GENERAL_REGS) for the\n+   We only need constraint `f' for FPA_REGS (`r' == GENERAL_REGS) for the\n    ARM, but several more letters for the Thumb.  */\n #define REG_CLASS_FROM_LETTER(C)  \t\\\n-  (  (C) == 'f' ? FPU_REGS\t\t\\\n+  (  (C) == 'f' ? FPA_REGS\t\t\\\n    : (C) == 'v' ? CIRRUS_REGS\t\t\\\n    : (C) == 'l' ? (TARGET_ARM ? GENERAL_REGS : LO_REGS)\t\\\n    : TARGET_ARM ? NO_REGS\t\t\\\n@@ -1190,11 +1190,11 @@ enum reg_class\n   (TARGET_ARM ?\t\t\t\t\t\t\t\t\\\n    CONST_OK_FOR_ARM_LETTER (VALUE, C) : CONST_OK_FOR_THUMB_LETTER (VALUE, C))\n      \n-/* Constant letter 'G' for the FPU immediate constants. \n+/* Constant letter 'G' for the FPA immediate constants. \n    'H' means the same constant negated.  */\n #define CONST_DOUBLE_OK_FOR_ARM_LETTER(X, C)\t\t\t\\\n-    ((C) == 'G' ? const_double_rtx_ok_for_fpu (X) :\t\t\\\n-     (C) == 'H' ? neg_const_double_rtx_ok_for_fpu (X) : 0)\n+    ((C) == 'G' ? const_double_rtx_ok_for_fpa (X) :\t\t\\\n+     (C) == 'H' ? neg_const_double_rtx_ok_for_fpa (X) : 0)\n \n #define CONST_DOUBLE_OK_FOR_LETTER_P(X, C)\t\t\t\\\n   (TARGET_ARM ?\t\t\t\t\t\t\t\\\n@@ -1364,18 +1364,18 @@ enum reg_class\n   \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.\n-   ARM regs are UNITS_PER_WORD bits while FPU regs can hold any FP mode */\n+   ARM regs are UNITS_PER_WORD bits while FPA regs can hold any FP mode */\n #define CLASS_MAX_NREGS(CLASS, MODE)  \\\n-  (((CLASS) == FPU_REGS || (CLASS) == CIRRUS_REGS) ? 1 : ARM_NUM_REGS (MODE))\n+  (((CLASS) == FPA_REGS || (CLASS) == CIRRUS_REGS) ? 1 : ARM_NUM_REGS (MODE))\n \n /* If defined, gives a class of registers that cannot be used as the\n    operand of a SUBREG that changes the mode of the object illegally.  */\n \n-/* Moves between FPU_REGS and GENERAL_REGS are two memory insns.  */\n+/* Moves between FPA_REGS and GENERAL_REGS are two memory insns.  */\n #define REGISTER_MOVE_COST(MODE, FROM, TO)\t\t\\\n   (TARGET_ARM ?\t\t\t\t\t\t\\\n-   ((FROM) == FPU_REGS && (TO) != FPU_REGS ? 20 :\t\\\n-    (FROM) != FPU_REGS && (TO) == FPU_REGS ? 20 :\t\\\n+   ((FROM) == FPA_REGS && (TO) != FPA_REGS ? 20 :\t\\\n+    (FROM) != FPA_REGS && (TO) == FPA_REGS ? 20 :\t\\\n     (FROM) == CIRRUS_REGS && (TO) != CIRRUS_REGS ? 20 :\t\\\n     (FROM) != CIRRUS_REGS && (TO) == CIRRUS_REGS ? 20 :\t\\\n    2)\t\t\t\t\t\t\t\\\n@@ -2508,8 +2508,8 @@ extern int making_const_table;\n   {\"arm_hard_register_operand\", {REG}},\t\t\t\t\t\\\n   {\"f_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"arm_add_operand\",    {SUBREG, REG, CONST_INT}},\t\t\t\\\n-  {\"fpu_add_operand\",    {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n-  {\"fpu_rhs_operand\",    {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n+  {\"fpa_add_operand\",    {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n+  {\"fpa_rhs_operand\",    {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n   {\"arm_rhs_operand\",    {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"arm_not_operand\",    {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"reg_or_int_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\"}, {"sha": "4d3df96cf2395b21991e61d829bd7675a39f0a65", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b68401238b4a5107837b781c5fc375ab378fcf6/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3b68401238b4a5107837b781c5fc375ab378fcf6", "patch": "@@ -809,7 +809,7 @@\n (define_expand \"addsf3\"\n   [(set (match_operand:SF          0 \"s_register_operand\" \"\")\n \t(plus:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SF 2 \"fpu_add_operand\" \"\")))]\n+\t\t (match_operand:SF 2 \"fpa_add_operand\" \"\")))]\n   \"TARGET_ARM && TARGET_ANY_HARD_FLOAT\"\n   \"\n   if (TARGET_CIRRUS\n@@ -820,7 +820,7 @@\n (define_insn \"*arm_addsf3\"\n   [(set (match_operand:SF          0 \"s_register_operand\" \"=f,f\")\n \t(plus:SF (match_operand:SF 1 \"s_register_operand\" \"%f,f\")\n-\t\t (match_operand:SF 2 \"fpu_add_operand\"    \"fG,H\")))]\n+\t\t (match_operand:SF 2 \"fpa_add_operand\"    \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    adf%?s\\\\t%0, %1, %2\n@@ -832,7 +832,7 @@\n (define_expand \"adddf3\"\n   [(set (match_operand:DF          0 \"s_register_operand\" \"\")\n \t(plus:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:DF 2 \"fpu_add_operand\" \"\")))]\n+\t\t (match_operand:DF 2 \"fpa_add_operand\" \"\")))]\n   \"TARGET_ARM && TARGET_ANY_HARD_FLOAT\"\n   \"\n   if (TARGET_CIRRUS\n@@ -843,7 +843,7 @@\n (define_insn \"*arm_adddf3\"\n   [(set (match_operand:DF          0 \"s_register_operand\" \"=f,f\")\n \t(plus:DF (match_operand:DF 1 \"s_register_operand\" \"%f,f\")\n-\t\t (match_operand:DF 2 \"fpu_add_operand\"    \"fG,H\")))]\n+\t\t (match_operand:DF 2 \"fpa_add_operand\"    \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    adf%?d\\\\t%0, %1, %2\n@@ -856,7 +856,7 @@\n   [(set (match_operand:DF           0 \"s_register_operand\" \"=f,f\")\n \t(plus:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"s_register_operand\"  \"f,f\"))\n-\t\t (match_operand:DF  2 \"fpu_add_operand\"    \"fG,H\")))]\n+\t\t (match_operand:DF  2 \"fpa_add_operand\"    \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    adf%?d\\\\t%0, %1, %2\n@@ -1092,8 +1092,8 @@\n \n (define_expand \"subsf3\"\n   [(set (match_operand:SF           0 \"s_register_operand\" \"\")\n-\t(minus:SF (match_operand:SF 1 \"fpu_rhs_operand\" \"\")\n-\t\t  (match_operand:SF 2 \"fpu_rhs_operand\" \"\")))]\n+\t(minus:SF (match_operand:SF 1 \"fpa_rhs_operand\" \"\")\n+\t\t  (match_operand:SF 2 \"fpa_rhs_operand\" \"\")))]\n   \"TARGET_ARM && TARGET_ANY_HARD_FLOAT\"\n   \"\n   if (TARGET_CIRRUS)\n@@ -1107,8 +1107,8 @@\n \n (define_insn \"*arm_subsf3\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f\")\n-\t(minus:SF (match_operand:SF 1 \"fpu_rhs_operand\" \"f,G\")\n-\t\t  (match_operand:SF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n+\t(minus:SF (match_operand:SF 1 \"fpa_rhs_operand\" \"f,G\")\n+\t\t  (match_operand:SF 2 \"fpa_rhs_operand\" \"fG,f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    suf%?s\\\\t%0, %1, %2\n@@ -1118,8 +1118,8 @@\n \n (define_expand \"subdf3\"\n   [(set (match_operand:DF           0 \"s_register_operand\" \"\")\n-\t(minus:DF (match_operand:DF 1 \"fpu_rhs_operand\"     \"\")\n-\t\t  (match_operand:DF 2 \"fpu_rhs_operand\"    \"\")))]\n+\t(minus:DF (match_operand:DF 1 \"fpa_rhs_operand\"     \"\")\n+\t\t  (match_operand:DF 2 \"fpa_rhs_operand\"    \"\")))]\n   \"TARGET_ARM && TARGET_ANY_HARD_FLOAT\"\n   \"\n   if (TARGET_CIRRUS)\n@@ -1133,8 +1133,8 @@\n \n (define_insn \"*arm_subdf3\"\n   [(set (match_operand:DF           0 \"s_register_operand\" \"=f,f\")\n-\t(minus:DF (match_operand:DF 1 \"fpu_rhs_operand\"     \"f,G\")\n-\t\t  (match_operand:DF 2 \"fpu_rhs_operand\"    \"fG,f\")))]\n+\t(minus:DF (match_operand:DF 1 \"fpa_rhs_operand\"     \"f,G\")\n+\t\t  (match_operand:DF 2 \"fpa_rhs_operand\"    \"fG,f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    suf%?d\\\\t%0, %1, %2\n@@ -1147,7 +1147,7 @@\n   [(set (match_operand:DF            0 \"s_register_operand\" \"=f\")\n \t(minus:DF (float_extend:DF\n \t\t   (match_operand:SF 1 \"s_register_operand\"  \"f\"))\n-\t\t  (match_operand:DF  2 \"fpu_rhs_operand\"    \"fG\")))]\n+\t\t  (match_operand:DF  2 \"fpa_rhs_operand\"    \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"suf%?d\\\\t%0, %1, %2\"\n   [(set_attr \"type\" \"farith\")\n@@ -1156,7 +1156,7 @@\n \n (define_insn \"*subdf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n-\t(minus:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"f,G\")\n+\t(minus:DF (match_operand:DF 1 \"fpa_rhs_operand\" \"f,G\")\n \t\t  (float_extend:DF\n \t\t   (match_operand:SF 2 \"s_register_operand\" \"f,f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n@@ -1456,7 +1456,7 @@\n (define_expand \"mulsf3\"\n   [(set (match_operand:SF          0 \"s_register_operand\" \"\")\n \t(mult:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SF 2 \"fpu_rhs_operand\" \"\")))]\n+\t\t (match_operand:SF 2 \"fpa_rhs_operand\" \"\")))]\n   \"TARGET_ARM && TARGET_ANY_HARD_FLOAT\"\n   \"\n   if (TARGET_CIRRUS\n@@ -1467,7 +1467,7 @@\n (define_insn \"*arm_mulsf3\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"s_register_operand\" \"f\")\n-\t\t (match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t\t (match_operand:SF 2 \"fpa_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"fml%?s\\\\t%0, %1, %2\"\n   [(set_attr \"type\" \"ffmul\")\n@@ -1477,7 +1477,7 @@\n (define_expand \"muldf3\"\n   [(set (match_operand:DF          0 \"s_register_operand\" \"\")\n \t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"\")))]\n+\t\t (match_operand:DF 2 \"fpa_rhs_operand\" \"\")))]\n   \"TARGET_ARM && TARGET_ANY_HARD_FLOAT\"\n   \"\n   if (TARGET_CIRRUS\n@@ -1488,7 +1488,7 @@\n (define_insn \"*arm_muldf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n-\t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t\t (match_operand:DF 2 \"fpa_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"muf%?d\\\\t%0, %1, %2\"\n   [(set_attr \"type\" \"fmul\")\n@@ -1499,7 +1499,7 @@\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mult:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t\t (match_operand:DF 2 \"fpa_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"muf%?d\\\\t%0, %1, %2\"\n   [(set_attr \"type\" \"fmul\")\n@@ -1532,8 +1532,8 @@\n \n (define_insn \"divsf3\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f\")\n-\t(div:SF (match_operand:SF 1 \"fpu_rhs_operand\" \"f,G\")\n-\t\t(match_operand:SF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n+\t(div:SF (match_operand:SF 1 \"fpa_rhs_operand\" \"f,G\")\n+\t\t(match_operand:SF 2 \"fpa_rhs_operand\" \"fG,f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    fdv%?s\\\\t%0, %1, %2\n@@ -1544,8 +1544,8 @@\n \n (define_insn \"divdf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n-\t(div:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"f,G\")\n-\t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n+\t(div:DF (match_operand:DF 1 \"fpa_rhs_operand\" \"f,G\")\n+\t\t(match_operand:DF 2 \"fpa_rhs_operand\" \"fG,f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    dvf%?d\\\\t%0, %1, %2\n@@ -1558,7 +1558,7 @@\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(div:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t\t(match_operand:DF 2 \"fpa_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"dvf%?d\\\\t%0, %1, %2\"\n   [(set_attr \"type\" \"fdivd\")\n@@ -1567,7 +1567,7 @@\n \n (define_insn \"*divdf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(div:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"fG\")\n+\t(div:DF (match_operand:DF 1 \"fpa_rhs_operand\" \"fG\")\n \t\t(float_extend:DF\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n@@ -1593,7 +1593,7 @@\n (define_insn \"modsf3\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(mod:SF (match_operand:SF 1 \"s_register_operand\" \"f\")\n-\t\t(match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t\t(match_operand:SF 2 \"fpa_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rmf%?s\\\\t%0, %1, %2\"\n   [(set_attr \"type\" \"fdivs\")\n@@ -1603,7 +1603,7 @@\n (define_insn \"moddf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mod:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n-\t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t\t(match_operand:DF 2 \"fpa_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rmf%?d\\\\t%0, %1, %2\"\n   [(set_attr \"type\" \"fdivd\")\n@@ -1614,7 +1614,7 @@\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mod:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n+\t\t(match_operand:DF 2 \"fpa_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rmf%?d\\\\t%0, %1, %2\"\n   [(set_attr \"type\" \"fdivd\")\n@@ -5148,8 +5148,8 @@\n     case 6: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n     case 7: return \\\"ldf%?d\\\\t%0, %1\\\";\n     case 8: return \\\"stf%?d\\\\t%1, %0\\\";\n-    case 9: return output_mov_double_fpu_from_arm (operands);\n-    case 10: return output_mov_double_arm_from_fpu (operands);\n+    case 9: return output_mov_double_fpa_from_arm (operands);\n+    case 10: return output_mov_double_arm_from_fpa (operands);\n     }\n   }\n   \"\n@@ -5236,8 +5236,8 @@\n     case 1: return \\\"mnf%?e\\\\t%0, #%N1\\\";\n     case 2: return \\\"ldf%?e\\\\t%0, %1\\\";\n     case 3: return \\\"stf%?e\\\\t%1, %0\\\";\n-    case 4: return output_mov_long_double_fpu_from_arm (operands);\n-    case 5: return output_mov_long_double_arm_from_fpu (operands);\n+    case 4: return output_mov_long_double_fpa_from_arm (operands);\n+    case 5: return output_mov_long_double_arm_from_fpa (operands);\n     case 6: return output_mov_long_double_arm_from_arm (operands);\n     }\n   \"\n@@ -5674,7 +5674,7 @@\n \n (define_expand \"cmpsf\"\n   [(match_operand:SF 0 \"s_register_operand\" \"\")\n-   (match_operand:SF 1 \"fpu_rhs_operand\" \"\")]\n+   (match_operand:SF 1 \"fpa_rhs_operand\" \"\")]\n   \"TARGET_ARM && TARGET_ANY_HARD_FLOAT\"\n   \"\n   if (TARGET_CIRRUS && !cirrus_fp_register (operands[1], SFmode))\n@@ -5688,7 +5688,7 @@\n \n (define_expand \"cmpdf\"\n   [(match_operand:DF 0 \"s_register_operand\" \"\")\n-   (match_operand:DF 1 \"fpu_rhs_operand\" \"\")]\n+   (match_operand:DF 1 \"fpa_rhs_operand\" \"\")]\n   \"TARGET_ARM && TARGET_ANY_HARD_FLOAT\"\n   \"\n   if (TARGET_CIRRUS && !cirrus_fp_register (operands[1], DFmode))\n@@ -5753,7 +5753,7 @@\n (define_insn \"*cmpsf_insn\"\n   [(set (reg:CCFP CC_REGNUM)\n \t(compare:CCFP (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n-\t\t      (match_operand:SF 1 \"fpu_add_operand\" \"fG,H\")))]\n+\t\t      (match_operand:SF 1 \"fpa_add_operand\" \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    cmf%?\\\\t%0, %1\n@@ -5765,7 +5765,7 @@\n (define_insn \"*cmpdf_insn\"\n   [(set (reg:CCFP CC_REGNUM)\n \t(compare:CCFP (match_operand:DF 0 \"s_register_operand\" \"f,f\")\n-\t\t      (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n+\t\t      (match_operand:DF 1 \"fpa_add_operand\" \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    cmf%?\\\\t%0, %1\n@@ -5778,7 +5778,7 @@\n   [(set (reg:CCFP CC_REGNUM)\n \t(compare:CCFP (float_extend:DF\n \t\t       (match_operand:SF 0 \"s_register_operand\" \"f,f\"))\n-\t\t      (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n+\t\t      (match_operand:DF 1 \"fpa_add_operand\" \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    cmf%?\\\\t%0, %1\n@@ -5844,7 +5844,7 @@\n (define_insn \"*cmpsf_trap\"\n   [(set (reg:CCFPE CC_REGNUM)\n \t(compare:CCFPE (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n-\t\t       (match_operand:SF 1 \"fpu_add_operand\" \"fG,H\")))]\n+\t\t       (match_operand:SF 1 \"fpa_add_operand\" \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    cmf%?e\\\\t%0, %1\n@@ -5856,7 +5856,7 @@\n (define_insn \"*cmpdf_trap\"\n   [(set (reg:CCFPE CC_REGNUM)\n \t(compare:CCFPE (match_operand:DF 0 \"s_register_operand\" \"f,f\")\n-\t\t       (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n+\t\t       (match_operand:DF 1 \"fpa_add_operand\" \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    cmf%?e\\\\t%0, %1\n@@ -5869,7 +5869,7 @@\n   [(set (reg:CCFPE CC_REGNUM)\n \t(compare:CCFPE (float_extend:DF\n \t\t\t(match_operand:SF 0 \"s_register_operand\" \"f,f\"))\n-\t\t       (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n+\t\t       (match_operand:DF 1 \"fpa_add_operand\" \"fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    cmf%?e\\\\t%0, %1\n@@ -6388,7 +6388,7 @@\n     /* When compiling for SOFT_FLOAT, ensure both arms are in registers. \n        Otherwise, ensure it is a valid FP add operand */\n     if ((!TARGET_HARD_FLOAT)\n-        || (!fpu_add_operand (operands[3], SFmode)))\n+        || (!fpa_add_operand (operands[3], SFmode)))\n       operands[3] = force_reg (SFmode, operands[3]);\n \n     ccreg = arm_gen_compare_reg (code, arm_compare_op0, arm_compare_op1);\n@@ -6400,7 +6400,7 @@\n   [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n \t(if_then_else:DF (match_operand 1 \"arm_comparison_operator\" \"\")\n \t\t\t (match_operand:DF 2 \"s_register_operand\" \"\")\n-\t\t\t (match_operand:DF 3 \"fpu_add_operand\" \"\")))]\n+\t\t\t (match_operand:DF 3 \"fpa_add_operand\" \"\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"\n   {\n@@ -6441,8 +6441,8 @@\n \t(if_then_else:SF\n \t (match_operator 3 \"arm_comparison_operator\" \n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:SF 1 \"fpu_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n-\t (match_operand:SF 2 \"fpu_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n+\t (match_operand:SF 1 \"fpa_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n+\t (match_operand:SF 2 \"fpa_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    mvf%D3s\\\\t%0, %2\n@@ -6476,8 +6476,8 @@\n \t(if_then_else:DF\n \t (match_operator 3 \"arm_comparison_operator\"\n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:DF 1 \"fpu_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n-\t (match_operand:DF 2 \"fpu_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n+\t (match_operand:DF 1 \"fpa_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n+\t (match_operand:DF 2 \"fpa_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"@\n    mvf%D3d\\\\t%0, %2"}]}