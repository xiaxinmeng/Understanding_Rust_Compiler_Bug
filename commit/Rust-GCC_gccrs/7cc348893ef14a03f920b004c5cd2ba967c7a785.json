{"sha": "7cc348893ef14a03f920b004c5cd2ba967c7a785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NjMzQ4ODkzZWYxNGEwM2Y5MjBiMDA0YzVjZDJiYTk2N2M3YTc4NQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@wrs.com", "date": "1998-04-02T23:15:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-02T23:15:06Z"}, "message": "gthr.h: Support systems that don't have weak, but have threads.\n\n        * gthr.h: Support systems that don't have weak, but have threads.\n        * configure.in (*wrs-vxworks*): Use VxWorks threads by default.\n        * gthr-vxworks.h: New file.\n        * objc/thr-vxworks.h: Dummy file from thr-single.c for now.\n\nFrom-SVN: r18971", "tree": {"sha": "cdd606fee269c8fa842c9e363520972303eccd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd606fee269c8fa842c9e363520972303eccd26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cc348893ef14a03f920b004c5cd2ba967c7a785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc348893ef14a03f920b004c5cd2ba967c7a785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc348893ef14a03f920b004c5cd2ba967c7a785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc348893ef14a03f920b004c5cd2ba967c7a785/comments", "author": null, "committer": null, "parents": [{"sha": "b2012effc9027b75d1df106c7d1c38c4f84f597b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2012effc9027b75d1df106c7d1c38c4f84f597b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2012effc9027b75d1df106c7d1c38c4f84f597b"}], "stats": {"total": 361, "additions": 354, "deletions": 7}, "files": [{"sha": "4df54dfafebac37a97a0a908700a132f18a238d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cc348893ef14a03f920b004c5cd2ba967c7a785", "patch": "@@ -1,3 +1,10 @@\n+1998-04-03  Mike Stump  <mrs@wrs.com>\n+\n+\t* gthr.h: Support systems that don't have weak, but have threads.\n+\t* configure.in (*wrs-vxworks*): Use VxWorks threads by default.\n+\t* gthr-vxworks.h: New file.\n+\t* objc/thr-vxworks.h: Dummy file from thr-single.c for now.\n+\n Thu Apr  2 18:00:52 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* i386.md (movqi+1): Change alternative 1 from *r/r to *r/*rn."}, {"sha": "8d1f56ef987e9ba14b77f84a90ef3d2f487a64d3", "filename": "gcc/configure", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7cc348893ef14a03f920b004c5cd2ba967c7a785", "patch": "@@ -664,7 +664,7 @@ case x${enable_threads} in\n \t\ttarget_thread_file=''\n \t\t;;\n \txdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \\\n-\txsolaris | xwin32 | xdce)\n+\txsolaris | xwin32 | xdce | xvxworks)\n \t\ttarget_thread_file=$enable_threads\n \t\t;;\n \t*)\n@@ -1985,10 +1985,11 @@ for machine in $build $host $target; do\n \t\ttm_file=\"${tm_file} dbxcoff.h a29k/udi.h\"\n \t\ttmake_file=a29k/t-a29kbare\n \t\t;;\n-\ta29k-*-vxworks*)\n+\ta29k-wrs-vxworks*)\n \t\ttm_file=\"${tm_file} dbxcoff.h a29k/udi.h a29k/vx29k.h\"\n \t\ttmake_file=a29k/t-vx29k\n \t\textra_parts=\"crtbegin.o crtend.o\"\n+\t\tthread_file='vxworks'\n \t\t;;\n \ta29k-*-*)\t\t\t# Default a29k environment.\n \t\tuse_collect2=yes\n@@ -2792,16 +2793,19 @@ for machine in $build $host $target; do\n \t\ttm_file=\"${tm_file} i960/vx960.h\"\n \t\ttmake_file=i960/t-vxworks960\n \t\tuse_collect2=yes\n+\t\tthread_file='vxworks'\n \t\t;;\n \ti960-wrs-vxworks5* | i960-wrs-vxworks)\n \t\ttm_file=\"${tm_file} dbxcoff.h i960/i960-coff.h i960/vx960-coff.h\"\n \t\ttmake_file=i960/t-vxworks960\n \t\tuse_collect2=yes\n+\t\tthread_file='vxworks'\n \t\t;;\n \ti960-wrs-vxworks*)\n \t\ttm_file=\"${tm_file} i960/vx960.h\"\n \t\ttmake_file=i960/t-vxworks960\n \t\tuse_collect2=yes\n+\t\tthread_file='vxworks'\n \t\t;;\n \ti960-*-coff*)\n \t\ttm_file=\"${tm_file} dbxcoff.h i960/i960-coff.h libgloss.h\"\n@@ -3112,6 +3116,7 @@ for machine in $build $host $target; do\n \t\ttm_file=m68k/vxm68k.h\n \t\ttmake_file=m68k/t-vxworks68\n \t\textra_headers=math-68881.h\n+\t\tthread_file='vxworks'\n \t\t;;\n \tm68k-*-aout*)\n \t\ttmake_file=m68k/t-m68kbare\n@@ -3872,12 +3877,13 @@ for machine in $build $host $target; do\n \t\t\tthread_file='posix'\n \t\tfi\n \t\t;;\n-        powerpc-*-vxworks*)\n+        powerpc-wrs-vxworks*)\n                 cpu_type=rs6000\n                 xm_file=rs6000/xm-sysv4.h\n                 tm_file=rs6000/vxppc.h\n                 tmake_file=\"rs6000/t-ppcgas rs6000/t-ppccomm\"\n \t\textra_headers=ppc-asm.h\n+\t\tthread_file='vxworks'\n                 ;;\n \tpowerpcle-*-sysv* | powerpcle-*-elf*)\n \t\ttm_file=rs6000/sysv4le.h\n@@ -4009,6 +4015,7 @@ for machine in $build $host $target; do\n \t\ttm_file=sparc/vxsparc.h\n \t\ttmake_file=sparc/t-vxsparc\n \t\tuse_collect2=yes\n+\t\tthread_file='vxworks'\n \t\t;;\n \tsparc-*-aout*)\n \t\ttmake_file=sparc/t-sparcbare"}, {"sha": "23b58ffbe0cbe3934f4be1953dd9624cd8b71de8", "filename": "gcc/configure.in", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=7cc348893ef14a03f920b004c5cd2ba967c7a785", "patch": "@@ -114,7 +114,7 @@ case x${enable_threads} in\n \t\ttarget_thread_file=''\n \t\t;;\n \txdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \\\n-\txsolaris | xwin32 | xdce)\n+\txsolaris | xwin32 | xdce | xvxworks)\n \t\ttarget_thread_file=$enable_threads\n \t\t;;\n \t*)\n@@ -302,10 +302,11 @@ for machine in $build $host $target; do\n \t\ttm_file=\"${tm_file} dbxcoff.h a29k/udi.h\"\n \t\ttmake_file=a29k/t-a29kbare\n \t\t;;\n-\ta29k-*-vxworks*)\n+\ta29k-wrs-vxworks*)\n \t\ttm_file=\"${tm_file} dbxcoff.h a29k/udi.h a29k/vx29k.h\"\n \t\ttmake_file=a29k/t-vx29k\n \t\textra_parts=\"crtbegin.o crtend.o\"\n+\t\tthread_file='vxworks'\n \t\t;;\n \ta29k-*-*)\t\t\t# Default a29k environment.\n \t\tuse_collect2=yes\n@@ -1109,16 +1110,19 @@ for machine in $build $host $target; do\n \t\ttm_file=\"${tm_file} i960/vx960.h\"\n \t\ttmake_file=i960/t-vxworks960\n \t\tuse_collect2=yes\n+\t\tthread_file='vxworks'\n \t\t;;\n \ti960-wrs-vxworks5* | i960-wrs-vxworks)\n \t\ttm_file=\"${tm_file} dbxcoff.h i960/i960-coff.h i960/vx960-coff.h\"\n \t\ttmake_file=i960/t-vxworks960\n \t\tuse_collect2=yes\n+\t\tthread_file='vxworks'\n \t\t;;\n \ti960-wrs-vxworks*)\n \t\ttm_file=\"${tm_file} i960/vx960.h\"\n \t\ttmake_file=i960/t-vxworks960\n \t\tuse_collect2=yes\n+\t\tthread_file='vxworks'\n \t\t;;\n \ti960-*-coff*)\n \t\ttm_file=\"${tm_file} dbxcoff.h i960/i960-coff.h libgloss.h\"\n@@ -1429,6 +1433,7 @@ for machine in $build $host $target; do\n \t\ttm_file=m68k/vxm68k.h\n \t\ttmake_file=m68k/t-vxworks68\n \t\textra_headers=math-68881.h\n+\t\tthread_file='vxworks'\n \t\t;;\n \tm68k-*-aout*)\n \t\ttmake_file=m68k/t-m68kbare\n@@ -2189,12 +2194,13 @@ for machine in $build $host $target; do\n \t\t\tthread_file='posix'\n \t\tfi\n \t\t;;\n-        powerpc-*-vxworks*)\n+        powerpc-wrs-vxworks*)\n                 cpu_type=rs6000\n                 xm_file=rs6000/xm-sysv4.h\n                 tm_file=rs6000/vxppc.h\n                 tmake_file=\"rs6000/t-ppcgas rs6000/t-ppccomm\"\n \t\textra_headers=ppc-asm.h\n+\t\tthread_file='vxworks'\n                 ;;\n \tpowerpcle-*-sysv* | powerpcle-*-elf*)\n \t\ttm_file=rs6000/sysv4le.h\n@@ -2326,6 +2332,7 @@ for machine in $build $host $target; do\n \t\ttm_file=sparc/vxsparc.h\n \t\ttmake_file=sparc/t-vxsparc\n \t\tuse_collect2=yes\n+\t\tthread_file='vxworks'\n \t\t;;\n \tsparc-*-aout*)\n \t\ttmake_file=sparc/t-sparcbare"}, {"sha": "9876646781888aae1d62ce0c277e8284610947a0", "filename": "gcc/gthr-vxworks.h", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fgthr-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fgthr-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-vxworks.h?ref=7cc348893ef14a03f920b004c5cd2ba967c7a785", "patch": "@@ -0,0 +1,132 @@\n+/* Threads compatibily routines for libgcc2 for VxWorks.  */\n+/* Compile this one with gcc.  */\n+/* Copyright (C) 1997 Free Software Foundation, Inc.\n+   Contributed by Mike Stump <mrs@wrs.com>.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#ifndef __gthr_vxworks_h\n+#define __gthr_vxworks_h\n+\n+/* POSIX threads specific definitions.\n+   Easy, since the interface is just one-to-one mapping. */\n+\n+#define __GTHREADS 1\n+\n+#include <vxWorks.h>\n+#include <semLib.h>\n+/* typedef void *SEM_ID; */\n+\n+typedef int __gthread_key_t;\n+typedef char __gthread_once_t;\n+typedef SEM_ID __gthread_mutex_t;\n+\n+#define __GTHREAD_MUTEX_INIT 0\n+#define __GTHREAD_ONCE_INIT 0\n+\n+#ifndef REG_SAVED_REG\n+static inline int\n+__gthread_once (__gthread_once_t *once, void (*func) ())\n+{\n+  (*func)();\n+  return 0;\n+}\n+\n+extern __gthread_key_t eh_context_key;\n+\n+/* This is not the right way to do it, but the semantic of pthreads\n+   don't map well enough onto VxWorks.  */\n+\n+static void\n+__ehdtor ()\n+{\n+  if (eh_context_key)\n+    free ((void*)eh_context_key);\n+  eh_context_key = 0;\n+}\n+\n+/* This only works for the code in libgcc2.c.  */\n+\n+static inline int\n+__gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n+{\n+  *key = 0;\n+\n+  /* We don't have a way to track dtor here, so instead, we\n+     register a generic routine that can cleanup any task.  */\n+\n+  taskDeleteHookAdd (__ehdtor);\n+\n+  return 0;\n+}\n+\n+#define __gthread_setspecific(key, ptr) \\\n+  (key = (int) ptr, 0)\n+\n+static inline int\n+__gthread_key_dtor (__gthread_key_t key, void *ptr)\n+{\n+  /* Just reset the key value to zero. */\n+  if (ptr)\n+    return __gthread_setspecific (key, 0);\n+  else\n+    return 0;\n+}\n+\n+#define __gthread_key_delete(key) \\\n+  taskVarDelete (taskIdSelf (), &key)\n+\n+#define __gthread_getspecific(key)\t\t\t\\\n+     ((key == 0)\t\t\t\t\t\\\n+      ? ((taskVarAdd (taskIdSelf (), &key) != OK)\t\\\n+\t ? (__terminate (), (void*)0)\t\t\t\\\n+\t : (void*)0)\t\t\t\t\t\\\n+      : (void*)key)\n+#endif\n+\n+static inline int\n+__gthread_mutex_lock (__gthread_mutex_t *mutex)\n+{\n+  if (*mutex == 0)\n+    *mutex = semMCreate (SEM_Q_PRIORITY | SEM_INVERSION_SAFE | SEM_DELETE_SAFE);\n+  return semTake (*mutex, WAIT_FOREVER);\n+}\n+\n+static inline int\n+__gthread_mutex_trylock (__gthread_mutex_t *mutex)\n+{\n+  if (*mutex == 0)\n+    *mutex = semMCreate (SEM_Q_PRIORITY | SEM_INVERSION_SAFE | SEM_DELETE_SAFE);\n+  return semTake (*mutex, NO_WAIT);\n+}\n+\n+static inline int\n+__gthread_mutex_unlock (__gthread_mutex_t *mutex)\n+{\n+  /* We could return the */\n+  return semGive (*mutex);\n+}\n+\n+#endif /* not __gthr_vxworks_h */"}, {"sha": "d1028cb58e932b40e8cfde835ed7a08c0c35c5b4", "filename": "gcc/gthr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=7cc348893ef14a03f920b004c5cd2ba967c7a785", "patch": "@@ -83,10 +83,12 @@ Boston, MA 02111-1307, USA.  */\n #include \"gthr-solaris.h\"\n \n /* Include GTHREAD_FILE if one is defined. */\n-#elif SUPPORTS_WEAK && HAVE_GTHR_DEFAULT\n+#elif defined(HAVE_GTHR_DEFAULT)\n+#if SUPPORTS_WEAK\n #ifndef GTHREAD_USE_WEAK\n #define GTHREAD_USE_WEAK 1\n #endif\n+#endif\n #include \"gthr-default.h\"\n \n /* Fallback to single thread definitions. */"}, {"sha": "b196677c6b696d79e4fe7f98018d7d79bee4c75e", "filename": "gcc/objc/thr-vxworks.c", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fobjc%2Fthr-vxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc348893ef14a03f920b004c5cd2ba967c7a785/gcc%2Fobjc%2Fthr-vxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-vxworks.c?ref=7cc348893ef14a03f920b004c5cd2ba967c7a785", "patch": "@@ -0,0 +1,192 @@\n+/* GNU Objective C Runtime Thread Implementation\n+   Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n+   Contributed by Galen C. Hunt (gchunt@cs.rochester.edu)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify it under the\n+terms of the GNU General Public License as published by the Free Software\n+Foundation; either version 2, or (at your option) any later version.\n+\n+GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n+details.\n+\n+You should have received a copy of the GNU General Public License along with\n+GNU CC; see the file COPYING.  If not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with files compiled with\n+   GCC to produce an executable, this does not cause the resulting executable\n+   to be covered by the GNU General Public License. This exception does not\n+   however invalidate any other reasons why the executable file might be\n+   covered by the GNU General Public License.  */\n+\n+#include <objc/thr.h>\n+#include \"runtime.h\"\n+\n+/* Thread local storage for a single thread */\n+static void *thread_local_storage = NULL;\n+\n+/* Backend initialization functions */\n+\n+/* Initialize the threads subsystem. */\n+int\n+__objc_init_thread_system(void)\n+{\n+  /* No thread support available */\n+  return -1;\n+}\n+\n+/* Close the threads subsystem. */\n+int\n+__objc_close_thread_system(void)\n+{\n+  /* No thread support available */\n+  return -1;\n+}\n+\n+/* Backend thread functions */\n+\n+/* Create a new thread of execution. */\n+objc_thread_t\n+__objc_thread_detach(void (*func)(void *arg), void *arg)\n+{\n+  /* No thread support available */\n+  return NULL;\n+}\n+\n+/* Set the current thread's priority. */\n+int\n+__objc_thread_set_priority(int priority)\n+{\n+  /* No thread support available */\n+  return -1;\n+}\n+\n+/* Return the current thread's priority. */\n+int\n+__objc_thread_get_priority(void)\n+{\n+  return OBJC_THREAD_INTERACTIVE_PRIORITY;\n+}\n+\n+/* Yield our process time to another thread. */\n+void\n+__objc_thread_yield(void)\n+{\n+  return;\n+}\n+\n+/* Terminate the current thread. */\n+int\n+__objc_thread_exit(void)\n+{\n+  /* No thread support available */\n+  /* Should we really exit the program */\n+  /* exit(&__objc_thread_exit_status); */\n+  return -1;\n+}\n+\n+/* Returns an integer value which uniquely describes a thread. */\n+objc_thread_t\n+__objc_thread_id(void)\n+{\n+  /* No thread support, use 1. */\n+  return (objc_thread_t)1;\n+}\n+\n+/* Sets the thread's local storage pointer. */\n+int\n+__objc_thread_set_data(void *value)\n+{\n+  thread_local_storage = value;\n+  return 0;\n+}\n+\n+/* Returns the thread's local storage pointer. */\n+void *\n+__objc_thread_get_data(void)\n+{\n+  return thread_local_storage;\n+}\n+\n+/* Backend mutex functions */\n+\n+/* Allocate a mutex. */\n+int\n+__objc_mutex_allocate(objc_mutex_t mutex)\n+{\n+  return 0;\n+}\n+\n+/* Deallocate a mutex. */\n+int\n+__objc_mutex_deallocate(objc_mutex_t mutex)\n+{\n+  return 0;\n+}\n+\n+/* Grab a lock on a mutex. */\n+int\n+__objc_mutex_lock(objc_mutex_t mutex)\n+{\n+  /* There can only be one thread, so we always get the lock */\n+  return 0;\n+}\n+\n+/* Try to grab a lock on a mutex. */\n+int\n+__objc_mutex_trylock(objc_mutex_t mutex)\n+{\n+  /* There can only be one thread, so we always get the lock */\n+  return 0;\n+}\n+\n+/* Unlock the mutex */\n+int\n+__objc_mutex_unlock(objc_mutex_t mutex)\n+{\n+  return 0;\n+}\n+\n+/* Backend condition mutex functions */\n+\n+/* Allocate a condition. */\n+int\n+__objc_condition_allocate(objc_condition_t condition)\n+{\n+  return 0;\n+}\n+\n+/* Deallocate a condition. */\n+int\n+__objc_condition_deallocate(objc_condition_t condition)\n+{\n+  return 0;\n+}\n+\n+/* Wait on the condition */\n+int\n+__objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n+{\n+  return 0;\n+}\n+\n+/* Wake up all threads waiting on this condition. */\n+int\n+__objc_condition_broadcast(objc_condition_t condition)\n+{\n+  return 0;\n+}\n+\n+/* Wake up one thread waiting on this condition. */\n+int\n+__objc_condition_signal(objc_condition_t condition)\n+{\n+  return 0;\n+}\n+\n+/* End of File */"}]}