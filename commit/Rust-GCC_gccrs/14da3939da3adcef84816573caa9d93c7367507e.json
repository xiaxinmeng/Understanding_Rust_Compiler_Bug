{"sha": "14da3939da3adcef84816573caa9d93c7367507e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRkYTM5MzlkYTNhZGNlZjg0ODE2NTczY2FhOWQ5M2M3MzY3NTA3ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-08-28T02:03:48Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-08-28T02:03:48Z"}, "message": "PR c++/91428 - warn about std::is_constant_evaluated in if constexpr.\n\n\t* cp-tree.h (decl_in_std_namespace_p): Declare.\n\t* semantics.c (is_std_constant_evaluated_p): New.\n\t(finish_if_stmt_cond): Warn about \"std::is_constant_evaluated ()\" in\n\tan if-constexpr.\n\t* typeck.c (decl_in_std_namespace_p): No longer static.\n\n\t* g++.dg/cpp2a/is-constant-evaluated9.C: New test.\n\nFrom-SVN: r274981", "tree": {"sha": "1bc500d3505ce6feb8743a102df9a66cbb3bf3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bc500d3505ce6feb8743a102df9a66cbb3bf3d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14da3939da3adcef84816573caa9d93c7367507e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14da3939da3adcef84816573caa9d93c7367507e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14da3939da3adcef84816573caa9d93c7367507e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14da3939da3adcef84816573caa9d93c7367507e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4719ac2f2d1d770a840316d02e68fdff8e223129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4719ac2f2d1d770a840316d02e68fdff8e223129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4719ac2f2d1d770a840316d02e68fdff8e223129"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "c2f19670a249d8bfe3fa3c511c57bb43b89ecdfd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=14da3939da3adcef84816573caa9d93c7367507e", "patch": "@@ -1,3 +1,12 @@\n+2019-08-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91428 - warn about std::is_constant_evaluated in if constexpr.\n+\t* cp-tree.h (decl_in_std_namespace_p): Declare.\n+\t* semantics.c (is_std_constant_evaluated_p): New.\n+\t(finish_if_stmt_cond): Warn about \"std::is_constant_evaluated ()\" in\n+\tan if-constexpr.\n+\t* typeck.c (decl_in_std_namespace_p): No longer static.\n+\n 2019-08-26  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (duplicate_decls): Always merge DECL_DECLARED_CONSTEXPR_P."}, {"sha": "225dbb67c635ce214613173978a849bf58e5980d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=14da3939da3adcef84816573caa9d93c7367507e", "patch": "@@ -7496,6 +7496,7 @@ extern tree finish_left_unary_fold_expr      (tree, int);\n extern tree finish_right_unary_fold_expr     (tree, int);\n extern tree finish_binary_fold_expr          (tree, tree, int);\n extern bool treat_lvalue_as_rvalue_p\t     (tree, bool);\n+extern bool decl_in_std_namespace_p\t     (tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);"}, {"sha": "8603e57e7f7a9637d1f9cf92cc26cfbdc0ab4e07", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=14da3939da3adcef84816573caa9d93c7367507e", "patch": "@@ -723,6 +723,28 @@ begin_if_stmt (void)\n   return r;\n }\n \n+/* Returns true if FN, a CALL_EXPR, is a call to\n+   std::is_constant_evaluated or __builtin_is_constant_evaluated.  */\n+\n+static bool\n+is_std_constant_evaluated_p (tree fn)\n+{\n+  /* std::is_constant_evaluated takes no arguments.  */\n+  if (call_expr_nargs (fn) != 0)\n+    return false;\n+\n+  tree fndecl = cp_get_callee_fndecl_nofold (fn);\n+  if (fndecl_built_in_p (fndecl, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n+\t\t\t BUILT_IN_FRONTEND))\n+    return true;\n+\n+  if (!decl_in_std_namespace_p (fndecl))\n+    return false;\n+\n+  tree name = DECL_NAME (fndecl);\n+  return name && id_equal (name, \"is_constant_evaluated\");\n+}\n+\n /* Process the COND of an if-statement, which may be given by\n    IF_STMT.  */\n \n@@ -738,6 +760,20 @@ finish_if_stmt_cond (tree cond, tree if_stmt)\n \t converted to bool.  */\n       && TYPE_MAIN_VARIANT (TREE_TYPE (cond)) == boolean_type_node)\n     {\n+      /* if constexpr (std::is_constant_evaluated()) is always true,\n+\t so give the user a clue.  */\n+      if (warn_tautological_compare)\n+\t{\n+\t  tree t = cond;\n+\t  if (TREE_CODE (t) == CLEANUP_POINT_EXPR)\n+\t    t = TREE_OPERAND (t, 0);\n+\t  if (TREE_CODE (t) == CALL_EXPR\n+\t      && is_std_constant_evaluated_p (t))\n+\t    warning_at (EXPR_LOCATION (cond), OPT_Wtautological_compare,\n+\t\t\t\"%qs always evaluates to true in %<if constexpr%>\",\n+\t\t\t\"std::is_constant_evaluated\");\n+\t}\n+\n       cond = instantiate_non_dependent_expr (cond);\n       cond = cxx_constant_value (cond, NULL_TREE);\n     }"}, {"sha": "c09bb309142d7b52970c5bfe525e3353b6ea4d3e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=14da3939da3adcef84816573caa9d93c7367507e", "patch": "@@ -9328,7 +9328,7 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \n /* Returns true if DECL is in the std namespace.  */\n \n-static bool\n+bool\n decl_in_std_namespace_p (tree decl)\n {\n   return (decl != NULL_TREE"}, {"sha": "ade1a69767fc7373637cd3ee07a63f8588075d88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14da3939da3adcef84816573caa9d93c7367507e", "patch": "@@ -1,3 +1,8 @@\n+2019-08-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91428 - warn about std::is_constant_evaluated in if constexpr.\n+\t* g++.dg/cpp2a/is-constant-evaluated9.C: New test.\n+\n 2019-08-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/91567"}, {"sha": "378336989922b89c8546a29ad2be6ed5e9f43dc1", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated9.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da3939da3adcef84816573caa9d93c7367507e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C?ref=14da3939da3adcef84816573caa9d93c7367507e", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/91428 - warn about std::is_constant_evaluated in if constexpr.\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-Wtautological-compare\" }\n+\n+namespace std {\n+  constexpr inline bool\n+  is_constant_evaluated () noexcept\n+  {\n+    return __builtin_is_constant_evaluated (); \n+  }\n+}\n+\n+constexpr int\n+foo(int i)\n+{\n+  if constexpr (std::is_constant_evaluated ()) // { dg-warning \".std::is_constant_evaluated. always evaluates to true in .if constexpr.\" }\n+    return 42;\n+  else\n+    return i;\n+}\n+\n+constexpr int\n+foo2(int i)\n+{\n+  if constexpr (__builtin_is_constant_evaluated ()) // { dg-warning \".std::is_constant_evaluated. always evaluates to true in .if constexpr.\" }\n+    return 42;\n+  else\n+    return i;\n+}\n+\n+constexpr int\n+foo3(int i)\n+{\n+  // I is not a constant expression but we short-circuit it.\n+  if constexpr (__builtin_is_constant_evaluated () || i)\n+    return 42;\n+  else\n+    return i;\n+}\n+\n+constexpr int\n+foo4(int i)\n+{\n+  const int j = 0;\n+  if constexpr (j && __builtin_is_constant_evaluated ())\n+    return 42;\n+  else\n+    return i;\n+}"}]}