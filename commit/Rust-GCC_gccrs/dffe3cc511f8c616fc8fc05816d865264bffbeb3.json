{"sha": "dffe3cc511f8c616fc8fc05816d865264bffbeb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZmZTNjYzUxMWY4YzYxNmZjOGZjMDU4MTZkODY1MjY0YmZmYmViMw==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-08-13T18:08:15Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-08-13T18:08:15Z"}, "message": "inclhack.def (hpux_longjmp): New fix.\n\n\t* inclhack.def (hpux_longjmp): New fix.\n\t* fixincl.x: Regenerate.\n\t* tests/base/setjmp.h: New test file.\n\nFrom-SVN: r239446", "tree": {"sha": "7c02c9d6248a58b93c31716bbfdf76982ffd6aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c02c9d6248a58b93c31716bbfdf76982ffd6aa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dffe3cc511f8c616fc8fc05816d865264bffbeb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffe3cc511f8c616fc8fc05816d865264bffbeb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dffe3cc511f8c616fc8fc05816d865264bffbeb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffe3cc511f8c616fc8fc05816d865264bffbeb3/comments", "author": null, "committer": null, "parents": [{"sha": "30c8821b37f20d584c0c11618d5d1787d44961c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c8821b37f20d584c0c11618d5d1787d44961c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c8821b37f20d584c0c11618d5d1787d44961c8"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "01488f767561d7d1b91b7fa38b099d5013d62fe6", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffe3cc511f8c616fc8fc05816d865264bffbeb3/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffe3cc511f8c616fc8fc05816d865264bffbeb3/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=dffe3cc511f8c616fc8fc05816d865264bffbeb3", "patch": "@@ -1,3 +1,9 @@\n+2016-08-13  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* inclhack.def (hpux_longjmp): New fix.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/setjmp.h: New test file.\n+\n 2016-08-09  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR bootstrap/72833"}, {"sha": "5304141032f717077c68456edda4e8b09c009c96", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffe3cc511f8c616fc8fc05816d865264bffbeb3/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffe3cc511f8c616fc8fc05816d865264bffbeb3/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=dffe3cc511f8c616fc8fc05816d865264bffbeb3", "patch": "@@ -1,12 +1,12 @@\n /*  -*- buffer-read-only: t -*- vi: set ro:\n- *\n+ * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n- *\n- * It has been AutoGen-ed  August  8, 2016 at 08:46:37 PM by AutoGen 5.18\n+ * \n+ * It has been AutoGen-ed  Saturday August 13, 2016 at 02:05:44 PM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Mon Aug  8 20:46:37 CEST 2016\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sat 13 Aug 2016 14:05:44 EDT\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 236 fixup descriptions.\n+ * This file contains 237 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -5083,6 +5083,43 @@ static const char* apzHpux_Stdint_Least_FastPatch[] = {\n     \"#  define\\tUINT_%164_MAX\\t__UINT64_MAX__\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Hpux_Longjmp fix\n+ */\n+tSCC zHpux_LongjmpName[] =\n+     \"hpux_longjmp\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHpux_LongjmpList[] =\n+  \"setjmp.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzHpux_LongjmpMachs[] = {\n+        \"*-hp-hpux*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHpux_LongjmpSelect0[] =\n+       \"^[ \\t]*extern[ \\t]+void.*longjmp[ \\t]+__\\\\(\\\\(.*int\\\\)\\\\)\";\n+\n+#define    HPUX_LONGJMP_TEST_CT  1\n+static tTestDesc aHpux_LongjmpTests[] = {\n+  { TT_EGREP,    zHpux_LongjmpSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Hpux_Longjmp\n+ */\n+static const char* apzHpux_LongjmpPatch[] = {\n+    \"format\",\n+    \"%0 __attribute__ ((__noreturn__))\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Hpux_Systime fix\n@@ -9677,9 +9714,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          274\n+#define REGEX_COUNT          275\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            236\n+#define FIX_COUNT            237\n \n /*\n  *  Enumerate the fixes\n@@ -9805,6 +9842,7 @@ typedef enum {\n     HPUX_PTHREAD_INITIALIZERS_FIXIDX,\n     HPUX_SPU_INFO_FIXIDX,\n     HPUX_STDINT_LEAST_FAST_FIXIDX,\n+    HPUX_LONGJMP_FIXIDX,\n     HPUX_SYSTIME_FIXIDX,\n     HUGE_VAL_HEX_FIXIDX,\n     HUGE_VALF_HEX_FIXIDX,\n@@ -10524,6 +10562,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      HPUX_STDINT_LEAST_FAST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aHpux_Stdint_Least_FastTests,   apzHpux_Stdint_Least_FastPatch, 0 },\n \n+  {  zHpux_LongjmpName,    zHpux_LongjmpList,\n+     apzHpux_LongjmpMachs,\n+     HPUX_LONGJMP_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aHpux_LongjmpTests,   apzHpux_LongjmpPatch, 0 },\n+\n   {  zHpux_SystimeName,    zHpux_SystimeList,\n      apzHpux_SystimeMachs,\n      HPUX_SYSTIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "690c5671c2ed21ae2caa24d7b788933c85666639", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffe3cc511f8c616fc8fc05816d865264bffbeb3/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffe3cc511f8c616fc8fc05816d865264bffbeb3/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=dffe3cc511f8c616fc8fc05816d865264bffbeb3", "patch": "@@ -2641,6 +2641,21 @@ fix = {\n \t_EOFix_;\n };\n \n+/*\n+ *  Add noreturn attribute to longjmp declarations in hpux <setjmp.h>\n+ */\n+fix = {\n+    hackname = hpux_longjmp;\n+    mach     = \"*-hp-hpux*\";\n+    files    = setjmp.h;\n+    select   = \"^[ \\t]*extern[ \\t]+void.*longjmp[ \\t]+__\\\\(\\\\(.*int\\\\)\\\\)\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"%0 __attribute__ ((__noreturn__))\";\n+\n+    test_text = 'extern void\tlongjmp __((jmp_buf, int));';\n+};\n+\n /*\n  *  Fix hpux10.20 <sys/time.h> to avoid invalid forward decl\n  */"}, {"sha": "816ff7f15e0ea89e9495dd91cc515d10909ca1fc", "filename": "fixincludes/tests/base/setjmp.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffe3cc511f8c616fc8fc05816d865264bffbeb3/fixincludes%2Ftests%2Fbase%2Fsetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffe3cc511f8c616fc8fc05816d865264bffbeb3/fixincludes%2Ftests%2Fbase%2Fsetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsetjmp.h?ref=dffe3cc511f8c616fc8fc05816d865264bffbeb3", "patch": "@@ -0,0 +1,14 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/setjmp.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( HPUX_LONGJMP_CHECK )\n+extern void\tlongjmp __((jmp_buf, int)) __attribute__ ((__noreturn__));\n+#endif  /* HPUX_LONGJMP_CHECK */"}]}