{"sha": "eb72521915b1f109b3b65aa384005c2527f76c31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3MjUyMTkxNWIxZjEwOWIzYjY1YWEzODQwMDVjMjUyN2Y3NmMzMQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-30T14:14:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-15T08:04:21Z"}, "message": "[Ada] Put_Image improvements for strings\n\n2020-06-15  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Put_Image): Use underlying type for strings.\n\tRemove unchecked union processing.\n\t* exp_put_image.adb (Tagged_Put_Image_Enabled): Use -gnatd_z to\n\tenable default Put_Image for tagged types.  This allows testing\n\tthat feature.\n\t(Build_String_Put_Image_Call): Set Conversion_OK flag.\n\t(Make_Component_List_Attributes): Remove unchecked union\n\tprocessing.\n\t(Enable_Put_Image): Disable for unchecked unions.  Enable for\n\tnonscalar types (which were mistakenly disabled in earlier\n\tchanges).\n\t* debug.adb: Document -gnatd_z switch.\n\t* libgnat/s-putima.adb (Put_Image_String, Put_Image_Wide_String,\n\tPut_Image_Wide_Wide_String): Double double-quote characters.\n\tForget about special handling of control characters for now --\n\tthat's rare enough to not be a priority, and it's not clear what\n\tthe right thing to do is anyway.\n\t* namet.adb: Minor: Improve debugger-friendliness.\n\t* sinfo.ads: Minor: Add \"???\" comment.", "tree": {"sha": "59fbf0467f5bf4c8384ab12ba6d48f866e88f85b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59fbf0467f5bf4c8384ab12ba6d48f866e88f85b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb72521915b1f109b3b65aa384005c2527f76c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb72521915b1f109b3b65aa384005c2527f76c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb72521915b1f109b3b65aa384005c2527f76c31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb72521915b1f109b3b65aa384005c2527f76c31/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c04efdd9c2a21f719c6fabcf267d03d7127982f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c04efdd9c2a21f719c6fabcf267d03d7127982f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c04efdd9c2a21f719c6fabcf267d03d7127982f"}], "stats": {"total": 125, "additions": 61, "deletions": 64}, "files": [{"sha": "63b14b2bd6d466a257d067b57edf02bb1d0e6ca7", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=eb72521915b1f109b3b65aa384005c2527f76c31", "patch": "@@ -170,7 +170,7 @@ package body Debug is\n    --  d_w\n    --  d_x\n    --  d_y\n-   --  d_z\n+   --  d_z  Enable Put_Image on tagged types\n \n    --  d_A  Stop generation of ALI file\n    --  d_B\n@@ -993,6 +993,9 @@ package body Debug is\n    --       a call to routine Ada.Synchronous_Task_Control.Suspend_Until_True\n    --       or Ada.Synchronous_Barriers.Wait_For_Release.\n \n+   --  d_z  Enable the default Put_Image on tagged types that are not\n+   --       predefined.\n+\n    --  d_A  Do not generate ALI files by setting Opt.Disable_ALI_File.\n \n    --  d_F  The compiler encodes the full path from an invocation construct to"}, {"sha": "182ce1554bcada9c7b528536d309eba2b45df339", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=eb72521915b1f109b3b65aa384005c2527f76c31", "patch": "@@ -5505,20 +5505,7 @@ package body Exp_Attr is\n                Analyze (N);\n                return;\n \n-            --  ???It would be nice to call Build_String_Put_Image_Call below\n-            --  if U_Type is a standard string type, but it currently generates\n-            --  something like:\n-            --\n-            --     Put_Image_String (Sink, String (X));\n-            --\n-            --  so if X is of a private type whose full type is \"new String\",\n-            --  then the type conversion is illegal. To fix that, we would need\n-            --  to do unchecked conversions of access values, taking care to\n-            --  deal with thin and fat pointers properly. For now, we just fall\n-            --  back to Build_Array_Put_Image_Procedure in these cases, so the\n-            --  following says \"Root_Type (Entity (Pref))\" instead of \"U_Type\".\n-\n-            elsif Is_Standard_String_Type (Root_Type (Entity (Pref))) then\n+            elsif Is_Standard_String_Type (U_Type) then\n                Rewrite (N, Build_String_Put_Image_Call (N));\n                Analyze (N);\n                return;\n@@ -5558,21 +5545,6 @@ package body Exp_Attr is\n \n             else\n                pragma Assert (Is_Record_Type (U_Type));\n-\n-               --  Program_Error is raised when calling the default\n-               --  implementation of the Put_Image attribute of an\n-               --  Unchecked_Union type. ???It would be friendlier to print a\n-               --  canned string. See handling of unchecked unions in\n-               --  exp_put_image.adb (which is not reachable).\n-\n-               if Is_Unchecked_Union (Base_Type (U_Type)) then\n-                  Rewrite (N,\n-                    Make_Raise_Program_Error (Loc,\n-                      Reason => PE_Unchecked_Union_Restriction));\n-                  Set_Etype (N, Standard_Void_Type);\n-                  return;\n-               end if;\n-\n                Build_Record_Put_Image_Procedure\n                  (Loc, Full_Base (U_Type), Decl, Pname);\n                Insert_Action (N, Decl);"}, {"sha": "4d63e39213163ef36f66518ddfa5065fca47db9d", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=eb72521915b1f109b3b65aa384005c2527f76c31", "patch": "@@ -27,6 +27,7 @@ with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util;\n+with Debug;    use Debug;\n with Lib;      use Lib;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n@@ -44,7 +45,7 @@ with Uintp;    use Uintp;\n \n package body Exp_Put_Image is\n \n-   Tagged_Put_Image_Enabled : constant Boolean := False;\n+   Tagged_Put_Image_Enabled : Boolean renames Debug_Flag_Underscore_Z;\n    --  ???Set True to enable Put_Image for at least some tagged types\n \n    -----------------------\n@@ -410,18 +411,21 @@ package body Exp_Put_Image is\n \n       --  Convert parameter to the required type (i.e. the type of the\n       --  corresponding parameter), and call the appropriate routine.\n+      --  We set the Conversion_OK flag in case the type is private.\n \n       declare\n          Libent : constant Entity_Id := RTE (Lib_RE);\n+         Conv   : constant Node_Id :=\n+           OK_Convert_To\n+            (Etype (Next_Formal (First_Formal (Libent))),\n+             Relocate_Node (Item));\n       begin\n          return\n            Make_Procedure_Call_Statement (Loc,\n              Name => New_Occurrence_Of (Libent, Loc),\n              Parameter_Associations => New_List (\n                Relocate_Node (Sink),\n-               Convert_To\n-                (Etype (Next_Formal (First_Formal (Libent))),\n-                 Relocate_Node (Item))));\n+               Conv));\n       end;\n    end Build_String_Put_Image_Call;\n \n@@ -585,24 +589,11 @@ package body Exp_Put_Image is\n             --  selector, since there are cases in which we make a reference\n             --  to a hidden discriminant that is not visible.\n \n-            --  If the enclosing record is an unchecked_union, we use the\n-            --  default expressions for the discriminant (it must exist)\n-            --  because we cannot generate a reference to it, given that it is\n-            --  not stored. ????This seems unfriendly. It should just print\n-            --  \"(unchecked union)\" instead. (Note that this code is\n-            --  unreachable -- see exp_attr.)\n-\n-            if Is_Unchecked_Union (Scope (Entity (Name (VP)))) then\n-               D_Ref :=\n-                 New_Copy_Tree\n-                   (Discriminant_Default_Value (Entity (Name (VP))));\n-            else\n-               D_Ref :=\n-                  Make_Selected_Component (Loc,\n-                    Prefix        => Make_Identifier (Loc, Name_V),\n-                    Selector_Name =>\n-                      New_Occurrence_Of (Entity (Name (VP)), Loc));\n-            end if;\n+            D_Ref :=\n+               Make_Selected_Component (Loc,\n+                 Prefix        => Make_Identifier (Loc, Name_V),\n+                 Selector_Name =>\n+                   New_Occurrence_Of (Entity (Name (VP)), Loc));\n \n             Append_To (Result,\n               Make_Case_Statement (Loc,\n@@ -715,8 +706,6 @@ package body Exp_Put_Image is\n             (Make_Identifier (Loc, Name_S))));\n \n       --  Generate Put_Images for the discriminants of the type\n-      --  If the type is an unchecked union, use the default values of\n-      --  the discriminants, because they are not stored.\n \n       Append_List_To (Stms,\n         Make_Component_Attributes (Discriminant_Specifications (Type_Decl)));\n@@ -901,7 +890,15 @@ package body Exp_Put_Image is\n          return False;\n       end if;\n \n-      return Is_Scalar_Type (Typ) or else not In_Predefined_Unit (Typ);\n+      --  Disable for unchecked unions, because there is no way to know the\n+      --  discriminant value, and therefore no way to know which components\n+      --  should be printed.\n+\n+      if Is_Unchecked_Union (Typ) then\n+         return False;\n+      end if;\n+\n+      return True;\n    end Enable_Put_Image;\n \n    ---------------------------------\n@@ -941,6 +938,12 @@ package body Exp_Put_Image is\n       --  enabled for tagged types, and we've seen a tagged type. Note that\n       --  Tagged_Seen is set True by the parser if the \"tagged\" reserved word\n       --  is seen; this flag tells us whether we have any tagged types.\n+      --  It's unfortunate to have this Tagged_Seen processing so scattered\n+      --  about, but we need to know if there are tagged types where this is\n+      --  called in Analyze_Compilation_Unit, before we have analyzed any type\n+      --  declarations. This mechanism also prevents doing RTE (RE_Sink) when\n+      --  compiling the compiler itself. Packages Ada.Strings.Text_Output and\n+      --  friends are not included in the compiler.\n       --\n       --  Don't do it if type Sink is unavailable in the runtime.\n "}, {"sha": "2f976ac97f7a6139726a3b98f384c409d1c69a05", "filename": "gcc/ada/libgnat/s-putima.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Flibgnat%2Fs-putima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Flibgnat%2Fs-putima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-putima.adb?ref=eb72521915b1f109b3b65aa384005c2527f76c31", "patch": "@@ -142,25 +142,38 @@ package body System.Put_Images is\n \n    procedure Put_Image_String (S : in out Sink'Class; X : String) is\n    begin\n-      --  ????We should double double quotes, and maybe do something nice with\n-      --  control characters.\n       Put_UTF_8 (S, \"\"\"\");\n-      Put_String (S, X);\n+      for C of X loop\n+         if C = '\"' then\n+            Put_UTF_8 (S, \"\"\"\");\n+         end if;\n+         Put_Character (S, C);\n+      end loop;\n       Put_UTF_8 (S, \"\"\"\");\n    end Put_Image_String;\n \n    procedure Put_Image_Wide_String (S : in out Sink'Class; X : Wide_String) is\n    begin\n       Put_UTF_8 (S, \"\"\"\");\n-      Put_Wide_String (S, X);\n+      for C of X loop\n+         if C = '\"' then\n+            Put_UTF_8 (S, \"\"\"\");\n+         end if;\n+         Put_Wide_Character (S, C);\n+      end loop;\n       Put_UTF_8 (S, \"\"\"\");\n    end Put_Image_Wide_String;\n \n    procedure Put_Image_Wide_Wide_String\n      (S : in out Sink'Class; X : Wide_Wide_String) is\n    begin\n       Put_UTF_8 (S, \"\"\"\");\n-      Put_Wide_Wide_String (S, X);\n+      for C of X loop\n+         if C = '\"' then\n+            Put_UTF_8 (S, \"\"\"\");\n+         end if;\n+         Put_Wide_Wide_Character (S, C);\n+      end loop;\n       Put_UTF_8 (S, \"\"\"\");\n    end Put_Image_Wide_Wide_String;\n "}, {"sha": "6cc05bb40aadd8c1060a3356cb26c6856e5d993c", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=eb72521915b1f109b3b65aa384005c2527f76c31", "patch": "@@ -1179,11 +1179,13 @@ package body Namet is\n       Hash_Index : Hash_Index_Type;\n       --  Computed hash index\n \n+      Result : Valid_Name_Id;\n+\n    begin\n       --  Quick handling for one character names\n \n       if Buf.Length = 1 then\n-         return Valid_Name_Id (First_Name_Id + Character'Pos (Buf.Chars (1)));\n+         Result := First_Name_Id + Character'Pos (Buf.Chars (1));\n \n       --  Otherwise search hash table for existing matching entry\n \n@@ -1210,7 +1212,8 @@ package body Namet is\n                   end if;\n                end loop;\n \n-               return New_Id;\n+               Result := New_Id;\n+               goto Done;\n \n                --  Current entry in hash chain does not match\n \n@@ -1248,8 +1251,11 @@ package body Namet is\n \n          Name_Chars.Append (ASCII.NUL);\n \n-         return Name_Entries.Last;\n+         Result := Name_Entries.Last;\n       end if;\n+\n+      <<Done>>\n+      return Result;\n    end Name_Find;\n \n    function Name_Find (S : String) return Valid_Name_Id is"}, {"sha": "7bec540ccee53192c85267301e57f386a3d1b445", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72521915b1f109b3b65aa384005c2527f76c31/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=eb72521915b1f109b3b65aa384005c2527f76c31", "patch": "@@ -1029,7 +1029,7 @@ package Sinfo is\n    --    Present in N_Raise_Expression nodes that appear in the body of the\n    --    special predicateM function used to test a predicate in the context\n    --    of a membership test, where raise expression results in returning a\n-   --    value of False rather than raising an exception.\n+   --    value of False rather than raising an exception.???obsolete flag\n \n    --  Corresponding_Aspect (Node3-Sem)\n    --    Present in N_Pragma node. Used to point back to the source aspect from"}]}