{"sha": "fb36b57afc7ce11f22b746ad8c8bd407c7701667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIzNmI1N2FmYzdjZTExZjIyYjc0NmFkOGM4YmQ0MDdjNzcwMTY2Nw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-03-11T16:56:30Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-11T16:56:30Z"}, "message": "PlainSocketImpl.java: Reformated to merge better with classpath's version.\n\n2004-03-11  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/PlainSocketImpl.java:\n\tReformated to merge better with classpath's version.\n\nFrom-SVN: r79331", "tree": {"sha": "859d13929bf9b7c73c5f5d9b2f27d859523519db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/859d13929bf9b7c73c5f5d9b2f27d859523519db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb36b57afc7ce11f22b746ad8c8bd407c7701667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb36b57afc7ce11f22b746ad8c8bd407c7701667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb36b57afc7ce11f22b746ad8c8bd407c7701667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb36b57afc7ce11f22b746ad8c8bd407c7701667/comments", "author": null, "committer": null, "parents": [{"sha": "deccda9fff5fe5dad959b26e0a1b7b98d72d7c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deccda9fff5fe5dad959b26e0a1b7b98d72d7c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deccda9fff5fe5dad959b26e0a1b7b98d72d7c14"}], "stats": {"total": 134, "additions": 101, "deletions": 33}, "files": [{"sha": "b7a65fa1d54ab70a8a11ad41d424d9029c1ba003", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb36b57afc7ce11f22b746ad8c8bd407c7701667/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb36b57afc7ce11f22b746ad8c8bd407c7701667/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fb36b57afc7ce11f22b746ad8c8bd407c7701667", "patch": "@@ -1,3 +1,8 @@\n+2004-03-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/PlainSocketImpl.java:\n+\tReformated to merge better with classpath's version.\n+\n 2004-03-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/util/Locale.java"}, {"sha": "4301a485cf3a747b6b2115917c80577ba2d3dbee", "filename": "libjava/gnu/java/net/PlainSocketImpl.java", "status": "modified", "additions": 96, "deletions": 33, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb36b57afc7ce11f22b746ad8c8bd407c7701667/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb36b57afc7ce11f22b746ad8c8bd407c7701667/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.java?ref=fb36b57afc7ce11f22b746ad8c8bd407c7701667", "patch": "@@ -200,9 +200,9 @@ public int getNativeFD()\n    */\n   public native Object getOption(int optID) throws SocketException;\n \n-  public native void shutdownInput () throws IOException;\n+  public native void shutdownInput() throws IOException;\n \n-  public native void shutdownOutput () throws IOException;\n+  public native void shutdownOutput() throws IOException;\n \n   /**\n    * Creates a new socket that is not bound to any local address/port and\n@@ -212,7 +212,7 @@ public int getNativeFD()\n    *\n    * @param stream true for a stream socket, false for a datagram socket\n    */\n-  protected native void create (boolean stream)  throws IOException;\n+  protected native void create(boolean stream) throws IOException;\n \n   /**\n    * Connects to the remote hostname and port specified as arguments.\n@@ -222,9 +222,9 @@ public int getNativeFD()\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected void connect (String host, int port) throws IOException\n+  protected void connect(String host, int port) throws IOException\n   {\n-    connect (new InetSocketAddress (InetAddress.getByName(host), port), 0);\n+    connect(InetAddress.getByName(host), port);\n   }\n \n   /**\n@@ -235,13 +235,19 @@ protected void connect (String host, int port) throws IOException\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected void connect (InetAddress host, int port) throws IOException\n+  protected void connect(InetAddress host, int port) throws IOException\n   {\n     connect (new InetSocketAddress (host, port), 0);\n   }\n \n-  protected native void connect (SocketAddress addr, int timeout)\n-    throws IOException;\n+  /**\n+   * Connects to the remote socket address with a specified timeout.\n+   *\n+   * @param timeout The timeout to use for this connect, 0 means infinite.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  protected native void connect(SocketAddress addr, int timeout) throws IOException;\n \n   /**\n    * Binds to the specified port on the specified addr.  Note that this addr\n@@ -252,7 +258,8 @@ protected native void connect (SocketAddress addr, int timeout)\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected native void bind (InetAddress host, int port) throws IOException;\n+  protected native void bind(InetAddress host, int port)\n+    throws IOException;\n \n   /**\n    * Starts listening for connections on a socket. The queuelen parameter\n@@ -264,21 +271,24 @@ protected native void connect (SocketAddress addr, int timeout)\n    * \n    * @exception IOException If an error occurs\n    */\n-  protected native void listen (int backlog) throws IOException;\n-\n-  private native void accept (PlainSocketImpl s) throws IOException;\n+  protected native void listen(int queuelen)\n+    throws IOException;\n \n   /**\n    * Accepts a new connection on this socket and returns in in the \n    * passed in SocketImpl.\n    *\n    * @param impl The SocketImpl object to accept this connection.\n    */\n-  protected void accept (SocketImpl s) throws IOException\n+  protected void accept(SocketImpl impl)\n+    throws IOException\n   {\n-    accept((PlainSocketImpl) s);\n+    accept((PlainSocketImpl) impl);\n   }\n \n+  private native void accept(PlainSocketImpl impl)\n+    throws IOException;\n+\n   /**\n    * Returns the number of bytes that the caller can read from this socket\n    * without blocking. \n@@ -298,10 +308,9 @@ protected void accept (SocketImpl s) throws IOException\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected native void close () throws IOException;\n+  protected native void close() throws IOException;\n \n-  protected native void sendUrgentData(int data)\n-    throws IOException;\n+  protected native void sendUrgentData(int data) throws IOException;\n \n   /**\n    * Returns an InputStream object for reading from this socket.  This will\n@@ -336,44 +345,98 @@ protected synchronized OutputStream getOutputStream() throws IOException\n   }\n \n   /**\n-   * A stream which reads from the socket implementation.\n+   * This class contains an implementation of <code>InputStream</code> for \n+   * sockets.  It in an internal only class used by <code>PlainSocketImpl</code>.\n    *\n    * @author Nic Ferrier <nferrier@tapsellferrier.co.uk>\n    */\n   final class SocketInputStream\n     extends InputStream\n   {\n-    public native int read() throws IOException;\n-\n-    public native int read(byte[] buffer, int offset, int length)\n-      throws IOException;\n-\n-    public final void close() throws IOException\n+    /**\n+     * Returns the number of bytes available to be read before blocking\n+     */\n+    public int available() throws IOException\n     {\n-      PlainSocketImpl.this.close();\n+      return PlainSocketImpl.this.available();\n     }\n \n-    public final int available() throws IOException\n+    /**\n+     * This method not only closes the stream, it closes the underlying socket\n+     * (and thus any connection) and invalidates any other Input/Output streams\n+     * for the underlying impl object\n+     */\n+    public void close() throws IOException\n     {\n-      return PlainSocketImpl.this.available();\n+      PlainSocketImpl.this.close();\n     }\n+\n+    /**\n+     * Reads the next byte of data and returns it as an int.  \n+     *\n+     * @return The byte read (as an int) or -1 if end of stream);\n+     *\n+     * @exception IOException If an error occurs.\n+     */\n+    public native int read() throws IOException;\n+\n+    /**\n+     * Reads up to len bytes of data into the caller supplied buffer starting\n+     * at offset bytes from the start of the buffer\n+     *\n+     * @param buf The buffer\n+     * @param offset Offset into the buffer to start reading from\n+     * @param len The number of bytes to read\n+     *\n+     * @return The number of bytes actually read or -1 if end of stream\n+     *\n+     * @exception IOException If an error occurs.\n+     */\n+    public native int read(byte[] buf, int offset, int len) throws IOException;\n   }\n \n-  /** A stream which writes to the socket implementation.\n+  /**\n+   * This class is used internally by <code>PlainSocketImpl</code> to be the \n+   * <code>OutputStream</code> subclass returned by its \n+   * <code>getOutputStream method</code>.  It expects only to  be used in that\n+   * context.\n    *\n    * @author Nic Ferrier  <nferrier@tapsellferrier.co.uk>\n    */\n   final class SocketOutputStream\n     extends OutputStream\n   {\n-    public native void write(int c) throws IOException;\n-\n-    public native void write(byte[] buffer, int offset, int length)\n-      throws IOException;\n-\n+    /**\n+     * This method closes the stream and the underlying socket connection. This\n+     * action also effectively closes any other InputStream or OutputStream\n+     * object associated with the connection.\n+     *\n+     * @exception IOException If an error occurs\n+     */\n     public void close() throws IOException\n     {\n       PlainSocketImpl.this.close();\n     }\n+\n+    /**\n+     * Writes a byte (passed in as an int) to the given output stream\n+     * \n+     * @param b The byte to write\n+     *\n+     * @exception IOException If an error occurs\n+     */\n+    public native void write(int b) throws IOException;\n+\n+    /**\n+     * Writes len number of bytes from the array buf to the stream starting\n+     * at offset bytes into the buffer.\n+     *\n+     * @param buf The buffer\n+     * @param offset Offset into the buffer to start writing from\n+     * @param len The number of bytes to write\n+     *\n+     * @exception IOException If an error occurs.\n+     */\n+    public native void write(byte[] buf, int offset, int len) throws IOException;\n   }\n }"}]}