{"sha": "4d4cf1444deb9c06757a00edc6ad55897ded64f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0Y2YxNDQ0ZGViOWMwNjc1N2EwMGVkYzZhZDU1ODk3ZGVkNjRmMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-15T18:21:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-15T18:21:03Z"}, "message": "c++config (_GLIBCXX_NOEXCEPT, [...]): Add.\n\n2011-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/c++config (_GLIBCXX_NOEXCEPT, _GLIBCXX_USE_NOEXCEPT):\n\tAdd.\n\t* include/std/limits: Use the latter everywhere.\n\t(numeric_limits<char16_t>, numeric_limits<char32_t>): Simplify\n\tmacro usages, the specializations exist only in C++0x mode.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error\n\tline number.\n\nFrom-SVN: r173774", "tree": {"sha": "b43724017c1c59fb38efbaf47b421fb963cb3b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b43724017c1c59fb38efbaf47b421fb963cb3b32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4cf1444deb9c06757a00edc6ad55897ded64f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4cf1444deb9c06757a00edc6ad55897ded64f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4cf1444deb9c06757a00edc6ad55897ded64f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4cf1444deb9c06757a00edc6ad55897ded64f2/comments", "author": null, "committer": null, "parents": [{"sha": "8caa1de0029bdb204e6bc70719aee9a1656abb49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8caa1de0029bdb204e6bc70719aee9a1656abb49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8caa1de0029bdb204e6bc70719aee9a1656abb49"}], "stats": {"total": 528, "additions": 277, "deletions": 251}, "files": [{"sha": "7012d56523b0407868620e522f8f5247e9b57b5b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4cf1444deb9c06757a00edc6ad55897ded64f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4cf1444deb9c06757a00edc6ad55897ded64f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4d4cf1444deb9c06757a00edc6ad55897ded64f2", "patch": "@@ -1,3 +1,13 @@\n+2011-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_NOEXCEPT, _GLIBCXX_USE_NOEXCEPT):\n+\tAdd.\n+\t* include/std/limits: Use the latter everywhere.\n+\t(numeric_limits<char16_t>, numeric_limits<char32_t>): Simplify\n+\tmacro usages, the specializations exist only in C++0x mode.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error\n+\tline number.\n+\n 2011-05-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/26_numerics/headers/cmath/overloads_c++0x_neg.cc: Use"}, {"sha": "5cb654b45b75b90036a391891de799868332d16a", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4cf1444deb9c06757a00edc6ad55897ded64f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4cf1444deb9c06757a00edc6ad55897ded64f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=4d4cf1444deb9c06757a00edc6ad55897ded64f2", "patch": "@@ -99,6 +99,17 @@\n # endif\n #endif\n \n+// Macro for noexcept, to support in mixed 03/0x mode.\n+#ifndef _GLIBCXX_NOEXCEPT\n+# ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#  define _GLIBCXX_NOEXCEPT noexcept\n+#  define _GLIBCXX_USE_NOEXCEPT noexcept\n+# else\n+#  define _GLIBCXX_NOEXCEPT\n+#  define _GLIBCXX_USE_NOEXCEPT throw()\n+# endif\n+#endif\n+\n // Macro for extern template, ie controling template linkage via use\n // of extern keyword on template declaration. As documented in the g++\n // manual, it inhibits all implicit instantiations and is used"}, {"sha": "907df6b8d5306f095d083f06f9f96473328ffd34", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 255, "deletions": 250, "changes": 505, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4cf1444deb9c06757a00edc6ad55897ded64f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4cf1444deb9c06757a00edc6ad55897ded64f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=4d4cf1444deb9c06757a00edc6ad55897ded64f2", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the numeric_limits classes. -*- C++ -*-\n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-// 2008, 2009, 2010  Free Software Foundation, Inc.\n+// 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -306,47 +306,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /** The minimum finite value, or for floating types with\n \t  denormalization, the minimum positive normalized value.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      min() throw() { return static_cast<_Tp>(0); }\n+      min() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n \n       /** The maximum finite value.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      max() throw() { return static_cast<_Tp>(0); }\n+      max() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /** A finite value x such that there is no other finite value y\n        *  where y < x.  */\n       static constexpr _Tp\n-      lowest() throw() { return static_cast<_Tp>(0); }\n+      lowest() noexcept { return static_cast<_Tp>(0); }\n #endif\n \n       /** The @e machine @e epsilon:  the difference between 1 and the least\n \t  value greater than 1 that is representable.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      epsilon() throw() { return static_cast<_Tp>(0); }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n \n       /** The maximum rounding error measurement (see LIA-1).  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      round_error() throw() { return static_cast<_Tp>(0); }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n \n       /** The representation of positive infinity, if @c has_infinity.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      infinity() throw()  { return static_cast<_Tp>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n \n       /** The representation of a quiet <em>Not a Number</em>,\n \t  if @c has_quiet_NaN. */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      quiet_NaN() throw() { return static_cast<_Tp>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n \n       /** The representation of a signaling <em>Not a Number</em>, if\n \t  @c has_signaling_NaN. */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      signaling_NaN() throw() { return static_cast<_Tp>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n \n       /** The minimum positive denormalized value.  For types where\n \t  @c has_denorm is false, this is the minimum positive normalized\n \t  value.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      denorm_min() throw() { return static_cast<_Tp>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n     };\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -373,14 +373,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR bool \n-      min() throw() { return false; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_CONSTEXPR bool \n-      max() throw()  { return true; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return true; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr bool\n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n       static _GLIBCXX_USE_CONSTEXPR int digits = 1;\n       static _GLIBCXX_USE_CONSTEXPR int digits10 = 0;\n@@ -393,10 +393,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR bool \n-      epsilon() throw() { return false; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_CONSTEXPR bool \n-      round_error() throw() { return false; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -411,16 +411,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR bool \n-      infinity() throw() { return false; }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_CONSTEXPR bool \n-      quiet_NaN() throw() { return false; }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_CONSTEXPR bool \n-      signaling_NaN() throw() { return false; }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_CONSTEXPR bool \n-      denorm_min() throw() { return false; }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return false; }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -442,14 +442,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR char \n-      min() throw() { return __glibcxx_min(char); }\n+      min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min(char); }\n \n       static _GLIBCXX_CONSTEXPR char \n-      max() throw() { return __glibcxx_max(char); }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max(char); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr char \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (char);\n@@ -463,10 +463,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR char \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR char \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -481,16 +481,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR \n-      char infinity() throw()  { return char(); }\n+      char infinity() _GLIBCXX_USE_NOEXCEPT { return char(); }\n \n       static _GLIBCXX_CONSTEXPR char \n-      quiet_NaN() throw() { return char(); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return char(); }\n \n       static _GLIBCXX_CONSTEXPR char \n-      signaling_NaN() throw() { return char(); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return char(); }\n \n       static _GLIBCXX_CONSTEXPR char \n-      denorm_min() throw() { return static_cast<char>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<char>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -509,14 +509,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR signed char \n-      min() throw() { return -__SCHAR_MAX__ - 1; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }\n \n       static _GLIBCXX_CONSTEXPR signed char \n-      max() throw() { return __SCHAR_MAX__; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr signed char \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (signed char);\n@@ -531,10 +531,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR signed char \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR signed char \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -549,16 +549,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR signed char \n-      infinity() throw() { return static_cast<signed char>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<signed char>(0); }\n \n       static _GLIBCXX_CONSTEXPR signed char \n-      quiet_NaN() throw() { return static_cast<signed char>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<signed char>(0); }\n \n       static _GLIBCXX_CONSTEXPR signed char \n-      signaling_NaN() throw() { return static_cast<signed char>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<signed char>(0); }\n \n       static _GLIBCXX_CONSTEXPR signed char \n-      denorm_min() throw() { return static_cast<signed char>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<signed char>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -577,14 +579,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR unsigned char \n-      min() throw() { return 0; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned char \n-      max() throw() { return __SCHAR_MAX__ * 2U + 1; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr unsigned char \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits \n@@ -600,10 +602,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR unsigned char \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned char \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -618,16 +620,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR unsigned char \n-      infinity() throw() { return static_cast<unsigned char>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned char>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned char \n-      quiet_NaN() throw() { return static_cast<unsigned char>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned char>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned char \n-      signaling_NaN() throw() { return static_cast<unsigned char>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned char>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned char \n-      denorm_min() throw() { return static_cast<unsigned char>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned char>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -646,14 +652,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR wchar_t \n-      min() throw() { return __glibcxx_min (wchar_t); }\n+      min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (wchar_t); }\n \n       static _GLIBCXX_CONSTEXPR wchar_t \n-      max() throw()  { return __glibcxx_max (wchar_t); }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (wchar_t); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      static constexpr wchar_t \n-      lowest() throw() { return min(); }\n+      static constexpr wchar_t\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (wchar_t);\n@@ -668,10 +674,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR wchar_t \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR wchar_t \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -686,16 +692,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR wchar_t \n-      infinity() throw() { return wchar_t(); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }\n \n       static _GLIBCXX_CONSTEXPR wchar_t \n-      quiet_NaN() throw() { return wchar_t(); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }\n \n       static _GLIBCXX_CONSTEXPR wchar_t \n-      signaling_NaN() throw() { return wchar_t(); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }\n \n       static _GLIBCXX_CONSTEXPR wchar_t \n-      denorm_min() throw() { return wchar_t(); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -712,139 +718,122 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct numeric_limits<char16_t>\n     {\n-      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n+      static constexpr bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR char16_t \n-      min() throw() { return __glibcxx_min (char16_t); }\n+      static constexpr char16_t \n+      min() noexcept { return __glibcxx_min (char16_t); }\n \n-      static _GLIBCXX_CONSTEXPR char16_t \n-      max() throw() { return __glibcxx_max (char16_t); }\n+      static constexpr char16_t \n+      max() noexcept { return __glibcxx_max (char16_t); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr char16_t \n-      lowest() throw() { return min(); }\n-#endif\n+      lowest() noexcept { return min(); }\n \n-      static _GLIBCXX_USE_CONSTEXPR int digits \n-       = __glibcxx_digits (char16_t);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n-       = __glibcxx_digits10 (char16_t);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static constexpr int digits = __glibcxx_digits (char16_t);\n+      static constexpr int digits10 = __glibcxx_digits10 (char16_t);\n       static constexpr int max_digits10 = 0;\n-#endif\n-      static _GLIBCXX_USE_CONSTEXPR bool is_signed \n-       = __glibcxx_signed (char16_t);\n-      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;\n-      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n-      static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n+      static constexpr bool is_signed = __glibcxx_signed (char16_t);\n+      static constexpr bool is_integer = true;\n+      static constexpr bool is_exact = true;\n+      static constexpr int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR char16_t \n-      epsilon() throw() { return 0; }\n+      static constexpr char16_t \n+      epsilon() noexcept { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR char16_t \n-      round_error() throw() { return 0; }\n+      static constexpr char16_t \n+      round_error() noexcept { return 0; }\n \n-      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n-      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n-      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;\n-      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;\n+      static constexpr int min_exponent = 0;\n+      static constexpr int min_exponent10 = 0;\n+      static constexpr int max_exponent = 0;\n+      static constexpr int max_exponent10 = 0;\n \n-      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n-      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n-       = denorm_absent;\n-      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n+      static constexpr bool has_infinity = false;\n+      static constexpr bool has_quiet_NaN = false;\n+      static constexpr bool has_signaling_NaN = false;\n+      static constexpr float_denorm_style has_denorm = denorm_absent;\n+      static constexpr bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR char16_t \n-      infinity() throw()  { return char16_t(); }\n+      static constexpr char16_t \n+      infinity() noexcept { return char16_t(); }\n \n-      static _GLIBCXX_CONSTEXPR char16_t \n-      quiet_NaN() throw() { return char16_t(); }\n+      static constexpr char16_t \n+      quiet_NaN() noexcept { return char16_t(); }\n \n-      static _GLIBCXX_CONSTEXPR char16_t \n-      signaling_NaN() throw() { return char16_t(); }\n+      static constexpr char16_t \n+      signaling_NaN() noexcept { return char16_t(); }\n \n-      static _GLIBCXX_CONSTEXPR char16_t \n-      denorm_min() throw() { return char16_t(); }\n+      static constexpr char16_t \n+      denorm_min() noexcept { return char16_t(); }\n \n-      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n-      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n-      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;\n+      static constexpr bool is_iec559 = false;\n+      static constexpr bool is_bounded = true;\n+      static constexpr bool is_modulo = true;\n \n-      static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n-      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n-       = round_toward_zero;\n+      static constexpr bool traps = __glibcxx_integral_traps;\n+      static constexpr bool tinyness_before = false;\n+      static constexpr float_round_style round_style = round_toward_zero;\n     };\n \n   /// numeric_limits<char32_t> specialization.\n   template<>\n     struct numeric_limits<char32_t>\n     {\n-      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n+      static constexpr bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR char32_t \n-      min() throw() { return __glibcxx_min (char32_t); }\n+      static constexpr char32_t \n+      min() noexcept { return __glibcxx_min (char32_t); }\n \n-      static _GLIBCXX_CONSTEXPR char32_t \n-      max() throw() { return __glibcxx_max (char32_t); }\n+      static constexpr char32_t \n+      max() noexcept { return __glibcxx_max (char32_t); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr char32_t \n-      lowest() throw() { return min(); }\n-#endif\n+      lowest() noexcept { return min(); }\n \n-      static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (char32_t);\n-      static _GLIBCXX_USE_CONSTEXPR int digits10 \n-       = __glibcxx_digits10 (char32_t);\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      static constexpr int digits = __glibcxx_digits (char32_t);\n+      static constexpr int digits10 = __glibcxx_digits10 (char32_t);\n       static constexpr int max_digits10 = 0;\n-#endif\n-      static _GLIBCXX_USE_CONSTEXPR bool is_signed \n-       = __glibcxx_signed (char32_t);\n-      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;\n-      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n-      static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n+      static constexpr bool is_signed = __glibcxx_signed (char32_t);\n+      static constexpr bool is_integer = true;\n+      static constexpr bool is_exact = true;\n+      static constexpr int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR char32_t \n-      epsilon() throw() { return 0; }\n+      static constexpr char32_t \n+      epsilon() noexcept { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR char32_t \n-      round_error() throw() { return 0; }\n+      static constexpr char32_t \n+      round_error() noexcept { return 0; }\n \n-      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n-      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n-      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;\n-      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;\n+      static constexpr int min_exponent = 0;\n+      static constexpr int min_exponent10 = 0;\n+      static constexpr int max_exponent = 0;\n+      static constexpr int max_exponent10 = 0;\n \n-      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n-      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm \n-       = denorm_absent;\n-      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n+      static constexpr bool has_infinity = false;\n+      static constexpr bool has_quiet_NaN = false;\n+      static constexpr bool has_signaling_NaN = false;\n+      static constexpr float_denorm_style has_denorm = denorm_absent;\n+      static constexpr bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR char32_t \n-      infinity() throw() { return char32_t(); }\n+      static constexpr char32_t \n+      infinity() noexcept { return char32_t(); }\n \n-      static _GLIBCXX_CONSTEXPR char32_t \n-      quiet_NaN() throw() { return char32_t(); }\n+      static constexpr char32_t \n+      quiet_NaN() noexcept { return char32_t(); }\n \n-      static _GLIBCXX_CONSTEXPR char32_t \n-      signaling_NaN() throw() { return char32_t(); }\n+      static constexpr char32_t \n+      signaling_NaN() noexcept { return char32_t(); }\n \n-      static _GLIBCXX_CONSTEXPR char32_t \n-      denorm_min() throw() { return char32_t(); }\n+      static constexpr char32_t \n+      denorm_min() noexcept { return char32_t(); }\n \n-      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n-      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n-      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;\n+      static constexpr bool is_iec559 = false;\n+      static constexpr bool is_bounded = true;\n+      static constexpr bool is_modulo = true;\n \n-      static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n-      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n-      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style \n-       = round_toward_zero;\n+      static constexpr bool traps = __glibcxx_integral_traps;\n+      static constexpr bool tinyness_before = false;\n+      static constexpr float_round_style round_style = round_toward_zero;\n     };\n #endif\n \n@@ -855,14 +844,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR short \n-      min() throw() { return -__SHRT_MAX__ - 1; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }\n \n       static _GLIBCXX_CONSTEXPR short \n-      max() throw() { return __SHRT_MAX__; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr short \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (short);\n@@ -876,10 +865,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR short \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR short \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -894,16 +883,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR short \n-      infinity() throw() { return short(); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return short(); }\n \n       static _GLIBCXX_CONSTEXPR short \n-      quiet_NaN() throw() { return short(); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return short(); }\n \n       static _GLIBCXX_CONSTEXPR short \n-      signaling_NaN() throw() { return short(); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return short(); }\n \n       static _GLIBCXX_CONSTEXPR short \n-      denorm_min() throw() { return short(); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return short(); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -922,14 +911,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR unsigned short \n-      min() throw() { return 0; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned short \n-      max() throw() { return __SHRT_MAX__ * 2U + 1; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__ * 2U + 1; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr unsigned short \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits \n@@ -945,10 +934,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR unsigned short \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned short \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -963,16 +952,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR unsigned short \n-      infinity() throw() { return static_cast<unsigned short>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned short>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned short \n-      quiet_NaN() throw() { return static_cast<unsigned short>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned short>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned short \n-      signaling_NaN() throw() { return static_cast<unsigned short>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned short>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned short \n-      denorm_min() throw() { return static_cast<unsigned short>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned short>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -991,14 +984,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR int \n-      min() throw() { return -__INT_MAX__ - 1; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return -__INT_MAX__ - 1; }\n \n       static _GLIBCXX_CONSTEXPR int \n-      max() throw() { return __INT_MAX__; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr int \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (int);\n@@ -1012,10 +1005,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR int \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR int \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -1030,16 +1023,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR int \n-      infinity() throw() { return static_cast<int>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }\n \n       static _GLIBCXX_CONSTEXPR int \n-      quiet_NaN() throw() { return static_cast<int>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }\n \n       static _GLIBCXX_CONSTEXPR int \n-      signaling_NaN() throw() { return static_cast<int>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }\n \n       static _GLIBCXX_CONSTEXPR int \n-      denorm_min() throw() { return static_cast<int>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -1058,14 +1051,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR unsigned int \n-      min() throw() { return 0; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned int \n-      max() throw() { return __INT_MAX__ * 2U + 1; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__ * 2U + 1; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr unsigned int \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits \n@@ -1081,10 +1074,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR unsigned int \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned int \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -1099,16 +1092,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR unsigned int \n-      infinity() throw() { return static_cast<unsigned int>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned int>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned int \n-      quiet_NaN() throw() { return static_cast<unsigned int>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned int>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned int \n-      signaling_NaN() throw() { return static_cast<unsigned int>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned int>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned int \n-      denorm_min() throw() { return static_cast<unsigned int>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned int>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -1127,14 +1123,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR long\n-      min() throw() { return -__LONG_MAX__ - 1; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }\n \n       static _GLIBCXX_CONSTEXPR long \n-      max() throw() { return __LONG_MAX__; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr long \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (long);\n@@ -1148,10 +1144,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR long \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR long \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -1166,16 +1162,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR long \n-      infinity() throw() { return static_cast<long>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }\n \n       static _GLIBCXX_CONSTEXPR long \n-      quiet_NaN() throw() { return static_cast<long>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }\n \n       static _GLIBCXX_CONSTEXPR long \n-      signaling_NaN() throw() { return static_cast<long>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }\n \n       static _GLIBCXX_CONSTEXPR long \n-      denorm_min() throw() { return static_cast<long>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -1194,14 +1190,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR unsigned long \n-      min() throw() { return 0; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned long \n-      max() throw() { return __LONG_MAX__ * 2UL + 1; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__ * 2UL + 1; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr unsigned long \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits \n@@ -1217,10 +1213,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR unsigned long \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned long \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -1235,16 +1231,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR unsigned long \n-      infinity() throw() { return static_cast<unsigned long>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned long>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned long \n-      quiet_NaN() throw() { return static_cast<unsigned long>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned long>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned long \n-      signaling_NaN() throw() { return static_cast<unsigned long>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned long>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned long \n-      denorm_min() throw() { return static_cast<unsigned long>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned long>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -1263,14 +1263,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR long long \n-      min() throw() { return -__LONG_LONG_MAX__ - 1; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }\n \n       static _GLIBCXX_CONSTEXPR long long \n-      max() throw() { return __LONG_LONG_MAX__; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr long long \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits \n@@ -1286,10 +1286,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR long long \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR long long \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -1304,16 +1304,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR long long \n-      infinity() throw() { return static_cast<long long>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }\n \n       static _GLIBCXX_CONSTEXPR long long \n-      quiet_NaN() throw() { return static_cast<long long>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }\n \n       static _GLIBCXX_CONSTEXPR long long \n-      signaling_NaN() throw() { return static_cast<long long>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<long long>(0); }\n \n       static _GLIBCXX_CONSTEXPR long long \n-      denorm_min() throw() { return static_cast<long long>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -1332,14 +1333,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR unsigned long long \n-      min() throw() { return 0; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned long long \n-      max() throw() { return __LONG_LONG_MAX__ * 2ULL + 1; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__ * 2ULL + 1; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr unsigned long long \n-      lowest() throw() { return min(); }\n+      lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits \n@@ -1355,10 +1356,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n       static _GLIBCXX_CONSTEXPR unsigned long long \n-      epsilon() throw() { return 0; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_CONSTEXPR unsigned long long \n-      round_error() throw() { return 0; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n@@ -1373,16 +1374,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n       static _GLIBCXX_CONSTEXPR unsigned long long \n-      infinity() throw() { return static_cast<unsigned long long>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned long long>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned long long \n-      quiet_NaN() throw() { return static_cast<unsigned long long>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned long long>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned long long \n-      signaling_NaN() throw() { return static_cast<unsigned long long>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned long long>(0); }\n \n       static _GLIBCXX_CONSTEXPR unsigned long long \n-      denorm_min() throw() { return static_cast<unsigned long long>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT\n+      { return static_cast<unsigned long long>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -1401,14 +1406,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR float \n-      min() throw() { return __FLT_MIN__; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }\n \n       static _GLIBCXX_CONSTEXPR float \n-      max() throw() { return __FLT_MAX__; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr float \n-      lowest() throw() { return -__FLT_MAX__; }\n+      lowest() noexcept { return -__FLT_MAX__; }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __FLT_MANT_DIG__;\n@@ -1423,10 +1428,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;\n \n       static _GLIBCXX_CONSTEXPR float \n-      epsilon() throw() { return __FLT_EPSILON__; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }\n \n       static _GLIBCXX_CONSTEXPR float \n-      round_error() throw() { return 0.5F; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5F; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = __FLT_MIN_EXP__;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = __FLT_MIN_10_EXP__;\n@@ -1442,16 +1447,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = __glibcxx_float_has_denorm_loss;\n \n       static _GLIBCXX_CONSTEXPR float \n-      infinity() throw() { return __builtin_huge_valf (); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }\n \n       static _GLIBCXX_CONSTEXPR float \n-      quiet_NaN() throw() { return __builtin_nanf (\"\"); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nanf(\"\"); }\n \n       static _GLIBCXX_CONSTEXPR float \n-      signaling_NaN() throw() { return __builtin_nansf (\"\"); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nansf(\"\"); }\n \n       static _GLIBCXX_CONSTEXPR float \n-      denorm_min() throw() { return __FLT_DENORM_MIN__; }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return __FLT_DENORM_MIN__; }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559\n \t= has_infinity && has_quiet_NaN && has_denorm == denorm_present;\n@@ -1476,14 +1481,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR double \n-      min() throw()  { return __DBL_MIN__; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return __DBL_MIN__; }\n \n       static _GLIBCXX_CONSTEXPR double \n-      max() throw() { return __DBL_MAX__; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __DBL_MAX__; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr double \n-      lowest() throw() { return -__DBL_MAX__; }\n+      lowest() noexcept { return -__DBL_MAX__; }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __DBL_MANT_DIG__;\n@@ -1498,10 +1503,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;\n \n       static _GLIBCXX_CONSTEXPR double \n-      epsilon() throw() { return __DBL_EPSILON__; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return __DBL_EPSILON__; }\n \n       static _GLIBCXX_CONSTEXPR double \n-      round_error() throw() { return 0.5; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = __DBL_MIN_EXP__;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = __DBL_MIN_10_EXP__;\n@@ -1517,16 +1522,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         = __glibcxx_double_has_denorm_loss;\n \n       static _GLIBCXX_CONSTEXPR double \n-      infinity() throw() { return __builtin_huge_val(); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_val(); }\n \n       static _GLIBCXX_CONSTEXPR double \n-      quiet_NaN() throw() { return __builtin_nan (\"\"); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nan(\"\"); }\n \n       static _GLIBCXX_CONSTEXPR double \n-      signaling_NaN() throw() { return __builtin_nans (\"\"); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nans(\"\"); }\n \n       static _GLIBCXX_CONSTEXPR double \n-      denorm_min() throw() { return __DBL_DENORM_MIN__; }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return __DBL_DENORM_MIN__; }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559\n \t= has_infinity && has_quiet_NaN && has_denorm == denorm_present;\n@@ -1551,14 +1556,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n       static _GLIBCXX_CONSTEXPR long double \n-      min() throw() { return __LDBL_MIN__; }\n+      min() _GLIBCXX_USE_NOEXCEPT { return __LDBL_MIN__; }\n \n       static _GLIBCXX_CONSTEXPR long double \n-      max() throw() { return __LDBL_MAX__; }\n+      max() _GLIBCXX_USE_NOEXCEPT { return __LDBL_MAX__; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr long double \n-      lowest() throw() { return -__LDBL_MAX__; }\n+      lowest() noexcept { return -__LDBL_MAX__; }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits = __LDBL_MANT_DIG__;\n@@ -1573,10 +1578,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;\n \n       static _GLIBCXX_CONSTEXPR long double \n-      epsilon() throw() { return __LDBL_EPSILON__; }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return __LDBL_EPSILON__; }\n \n       static _GLIBCXX_CONSTEXPR long double \n-      round_error() throw() { return 0.5L; }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5L; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = __LDBL_MIN_EXP__;\n       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = __LDBL_MIN_10_EXP__;\n@@ -1592,16 +1597,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= __glibcxx_long_double_has_denorm_loss;\n \n       static _GLIBCXX_CONSTEXPR long double \n-      infinity() throw() { return __builtin_huge_vall (); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_vall(); }\n \n       static _GLIBCXX_CONSTEXPR long double \n-      quiet_NaN() throw() { return __builtin_nanl (\"\"); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nanl(\"\"); }\n \n       static _GLIBCXX_CONSTEXPR long double \n-      signaling_NaN() throw() { return __builtin_nansl (\"\"); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nansl(\"\"); }\n \n       static _GLIBCXX_CONSTEXPR long double \n-      denorm_min() throw() { return __LDBL_DENORM_MIN__; }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return __LDBL_DENORM_MIN__; }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559\n \t= has_infinity && has_quiet_NaN && has_denorm == denorm_present;"}, {"sha": "632dc190adc71acd02d8097b7811322ecc52a85c", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4cf1444deb9c06757a00edc6ad55897ded64f2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4cf1444deb9c06757a00edc6ad55897ded64f2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=4d4cf1444deb9c06757a00edc6ad55897ded64f2", "patch": "@@ -25,4 +25,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 241 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 252 }"}]}