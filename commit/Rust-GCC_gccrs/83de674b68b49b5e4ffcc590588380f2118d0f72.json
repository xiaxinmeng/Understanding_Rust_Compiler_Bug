{"sha": "83de674b68b49b5e4ffcc590588380f2118d0f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNkZTY3NGI2OGI0OWI1ZTRmZmNjNTkwNTg4MzgwZjIxMThkMGY3Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T08:25:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T08:25:44Z"}, "message": "[multiple changes]\n\n2011-09-02  Robert Dewar  <dewar@adacore.com>\n\n\t* s-rident.ads: Add new restriction No_Implicit_Aliasing\n\t* sem_attr.adb: (Analyze_Access_Attribute): Deal with\n\tNo_Implicit_Aliasing\n\t(Analyze_Attribute, case Address): ditto\n\t(Analyze_Attribute, case Unrestricted_Access): ditto\n\t* sem_util.ads, sem_util.adb: (Is_Aliased_View): Handle\n\tNo_Implicit_Aliasing restriction.\n\t* gnat_rm.texi: Add documentation for No_Implicit_Aliasing\n\n2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb: (Possible_Bit_Aligned_Object): If the object\n\tis an unchecked conversion, apply test to its expression.\n\n2011-09-02  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Check_Abstract_Overriding): When\n\ttraversing the chain of aliased subprograms avoid reporting a\n\tredundant error on the current entity.\n\n2011-09-02  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Minor clean up.\n\n2011-09-02  Bob Duff  <duff@adacore.com>\n\n\t* s-htable.adb (Set_If_Not_Present): Use renaming\n\tinstead of \":=\", because the type Key is limited in the generic (even\n\tif not in the instances).\n\nFrom-SVN: r178440", "tree": {"sha": "ae7e089a0c2d2f3832b04f11a6cfb68a9d3a3476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7e089a0c2d2f3832b04f11a6cfb68a9d3a3476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83de674b68b49b5e4ffcc590588380f2118d0f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83de674b68b49b5e4ffcc590588380f2118d0f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83de674b68b49b5e4ffcc590588380f2118d0f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83de674b68b49b5e4ffcc590588380f2118d0f72/comments", "author": null, "committer": null, "parents": [{"sha": "2c17ca0a2f305b29c9efa0e05e27583f775d005d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c17ca0a2f305b29c9efa0e05e27583f775d005d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c17ca0a2f305b29c9efa0e05e27583f775d005d"}], "stats": {"total": 121, "additions": 100, "deletions": 21}, "files": [{"sha": "423c1743417c7f557755647619312b0875669269", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -1,3 +1,35 @@\n+2011-09-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-rident.ads: Add new restriction No_Implicit_Aliasing\n+\t* sem_attr.adb: (Analyze_Access_Attribute): Deal with\n+\tNo_Implicit_Aliasing\n+\t(Analyze_Attribute, case Address): ditto\n+\t(Analyze_Attribute, case Unrestricted_Access): ditto\n+\t* sem_util.ads, sem_util.adb: (Is_Aliased_View): Handle\n+\tNo_Implicit_Aliasing restriction.\n+\t* gnat_rm.texi: Add documentation for No_Implicit_Aliasing\n+\n+2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb: (Possible_Bit_Aligned_Object): If the object\n+\tis an unchecked conversion, apply test to its expression.\n+\n+2011-09-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Abstract_Overriding): When\n+\ttraversing the chain of aliased subprograms avoid reporting a\n+\tredundant error on the current entity.\n+\n+2011-09-02  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor clean up.\n+\n+2011-09-02  Bob Duff  <duff@adacore.com>\n+\n+\t* s-htable.adb (Set_If_Not_Present): Use renaming\n+\tinstead of \":=\", because the type Key is limited in the generic (even\n+\tif not in the instances).\n+\n 2011-09-02  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_util.adb, sem_ch10.adb, sem_attr.adb, s-htable.adb,"}, {"sha": "df31bbe70816e9b777382bce7935c660dc5b8591", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -5687,6 +5687,12 @@ package body Exp_Util is\n          when N_Slice =>\n             return Possible_Bit_Aligned_Component (Prefix (N));\n \n+         --  For an unchecked conversion, check whether the expression may\n+         --  be bit-aligned.\n+\n+         when N_Unchecked_Type_Conversion =>\n+            return Possible_Bit_Aligned_Component (Expression (N));\n+\n          --  If we have none of the above, it means that we have fallen off the\n          --  top testing prefixes recursively, and we now have a stand alone\n          --  object, where we don't have a problem."}, {"sha": "5ee942ce205eb84d63681319bbd57045ff58410d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -8988,6 +8988,17 @@ in a distributed environment. If this exception is active, then the generated\n code is simplified by omitting the otherwise-required global registration\n of exceptions when they are declared.\n \n+@item No_Implicit_Aliasing\n+@findex No_Implicit_Aliasing\n+\n+This restriction, which is not required to be partition-wide consistent,\n+requires an explicit aliased keyword for an object to which 'Access,\n+'Unchecked_Access, or 'Address is applied, and forbids entirely the use of\n+the 'Unrestricted_Access attribute for objects. Note: the reason that\n+Unrestricted_Access is forbidden is that it would require the prefix\n+to be aliased, and in such cases, it can always be replaced by\n+the standard attribute Unchecked_Access which is preferable.\n+\n @item No_Implicit_Conditionals\n @findex No_Implicit_Conditionals\n This restriction ensures that the generated code does not contain any"}, {"sha": "8d1597d254974abbbe002b029b8d96ea425713d6", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -13071,8 +13071,6 @@ Reformat comment blocks\n @item ^-c5^/COMMENTS_LAYOUT=KEEP_SPECIAL^\n Keep unchanged special form comments\n \n-Reformat comment blocks\n-\n @cindex @option{^-l@var{n}^/CONSTRUCT_LAYOUT^} (@command{gnatpp})\n @item ^-l1^/CONSTRUCT_LAYOUT=GNAT^\n GNAT-style layout (this is the default)"}, {"sha": "e2b5235f0549ebb99abc0e790f36c8778ac9714e", "filename": "gcc/ada/s-htable.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fs-htable.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fs-htable.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-htable.adb?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -195,7 +195,12 @@ package body System.HTable is\n       ------------------------\n \n       function Set_If_Not_Present (E : Elmt_Ptr) return Boolean is\n-         K     : constant Key        := Get_Key (E);\n+         K : Key renames Get_Key (E);\n+         --  Note that it is important to use a renaming here rather than\n+         --  define a constant initialized by the call, because the latter\n+         --  construct runs into bootstrap problems with earlier versions\n+         --  of the GNAT compiler.\n+\n          Index : constant Header_Num := Hash (K);\n          Elmt  : Elmt_Ptr;\n "}, {"sha": "6923b5969965bd20b46af48148eb413484f52f50", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,6 +128,7 @@ package System.Rident is\n       No_Implementation_Attributes,            -- Ada 2005 AI-257\n       No_Implementation_Pragmas,               -- Ada 2005 AI-257\n       No_Implementation_Restrictions,          -- GNAT\n+      No_Implicit_Aliasing,                    -- GNAT\n       No_Elaboration_Code,                     -- GNAT\n       No_Obsolescent_Features,                 -- Ada 2005 AI-368\n       No_Wide_Characters,                      -- GNAT"}, {"sha": "d09e3b5c1950a114547ce422240ffbf6f31f1ed5", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -837,7 +837,13 @@ package body Sem_Attr is\n            and then not In_Instance\n            and then not In_Inlined_Body\n          then\n-            Error_Attr_P (\"prefix of % attribute must be aliased\");\n+            if Restriction_Check_Required (No_Implicit_Aliasing) then\n+               Error_Attr_P\n+                 (\"prefix of % attribute must be explicitly aliased\");\n+            else\n+               Error_Attr_P\n+                 (\"prefix of % attribute must be aliased\");\n+            end if;\n          end if;\n       end Analyze_Access_Attribute;\n \n@@ -2221,11 +2227,19 @@ package body Sem_Attr is\n                then\n                   Set_Address_Taken (Ent);\n \n-               --  If we have an address of an object, and the attribute\n-               --  comes from source, then set the object as potentially\n-               --  source modified. We do this because the resulting address\n-               --  can potentially be used to modify the variable and we\n-               --  might not detect this, leading to some junk warnings.\n+                  --  Deal with No_Implicit_Aliasing restriction\n+\n+                  if Restriction_Check_Required (No_Implicit_Aliasing) then\n+                     if not Is_Aliased_View (P) then\n+                        Check_Restriction (No_Implicit_Aliasing, P);\n+                     end if;\n+                  end if;\n+\n+                  --  If we have an address of an object, and the attribute\n+                  --  comes from source, then set the object as potentially\n+                  --  source modified. We do this because the resulting address\n+                  --  can potentially be used to modify the variable and we\n+                  --  might not detect this, leading to some junk warnings.\n \n                   Set_Never_Set_In_Source (Ent, False);\n \n@@ -4927,6 +4941,10 @@ package body Sem_Attr is\n       when Attribute_Unrestricted_Access =>\n          if Comes_From_Source (N) then\n             Check_Restriction (No_Unchecked_Access, N);\n+\n+            if Nkind (P) in N_Has_Entity and then Is_Object (Entity (P)) then\n+               Check_Restriction (No_Implicit_Aliasing, N);\n+            end if;\n          end if;\n \n          if Is_Entity_Name (P) then"}, {"sha": "6a55aa93fee7761f63c8aae18fb0ed3c2dfdcb0c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -9105,9 +9105,16 @@ package body Sem_Ch3 is\n                         begin\n                            E := Subp;\n                            while Present (Alias (E)) loop\n-                              Error_Msg_Sloc := Sloc (E);\n-                              Error_Msg_NE\n-                                (\"\\& has been inherited #\", T, Subp);\n+\n+                              --  Avoid reporting redundant errors on entities\n+                              --  inherited from interfaces\n+\n+                              if Sloc (E) /= Sloc (T) then\n+                                 Error_Msg_Sloc := Sloc (E);\n+                                 Error_Msg_NE\n+                                   (\"\\& has been inherited #\", T, Subp);\n+                              end if;\n+\n                               E := Alias (E);\n                            end loop;\n "}, {"sha": "658ca1a5dae9ca4a65a67748dbbf521100e43ec4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -6489,9 +6489,12 @@ package body Sem_Util is\n \n    begin\n       if Is_Entity_Name (Obj) then\n-\n          E := Entity (Obj);\n \n+         if Is_Object (E) and then not Is_Aliased (E) then\n+            Check_Restriction (No_Implicit_Aliasing, Obj);\n+         end if;\n+\n          return\n            (Is_Object (E)\n              and then\n@@ -6526,13 +6529,10 @@ package body Sem_Util is\n          return Has_Aliased_Components (Etype (Prefix (Obj)))\n            or else\n              (Is_Access_Type (Etype (Prefix (Obj)))\n-               and then\n-              Has_Aliased_Components\n-                (Designated_Type (Etype (Prefix (Obj)))));\n+               and then Has_Aliased_Components\n+                          (Designated_Type (Etype (Prefix (Obj)))));\n \n-      elsif Nkind (Obj) = N_Unchecked_Type_Conversion\n-        or else Nkind (Obj) = N_Type_Conversion\n-      then\n+      elsif Nkind_In (Obj, N_Unchecked_Type_Conversion, N_Type_Conversion) then\n          return Is_Tagged_Type (Etype (Obj))\n            and then Is_Aliased_View (Expression (Obj));\n "}, {"sha": "55a23109828fa6bf913b505daf48248ee9b2db35", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83de674b68b49b5e4ffcc590588380f2118d0f72/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=83de674b68b49b5e4ffcc590588380f2118d0f72", "patch": "@@ -753,7 +753,8 @@ package Sem_Util is\n \n    function Is_Aliased_View (Obj : Node_Id) return Boolean;\n    --  Determine if Obj is an aliased view, i.e. the name of an object to which\n-   --  'Access or 'Unchecked_Access can apply.\n+   --  'Access or 'Unchecked_Access can apply. Note that the implementation\n+   --  takes the No_Implicit_Aiasing restriction into account.\n \n    function Is_Ancestor_Package\n      (E1 : Entity_Id;"}]}