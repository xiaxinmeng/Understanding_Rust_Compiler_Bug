{"sha": "f83c7f631f959a5c1189527e90c065b68cdacd4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzYzdmNjMxZjk1OWE1YzExODk1MjdlOTBjMDY1YjY4Y2RhY2Q0ZA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2008-07-01T20:48:59Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2008-07-01T20:48:59Z"}, "message": "c-typeck.c (convert_for_assignment): Use vector_targets_convertible_p.\n\n\t* c-typeck.c (convert_for_assignment): Use\n\tvector_targets_convertible_p.\n\t* c-common.c (vector_targets_convertible_p): New.\n\t* c-common.h (vector_targets_convertible_p): New prototype.\n\t* config/rs6000/rs6000.c (rs6000_is_opaque_type): Do not check\n\topaque_p_V2SI_type_node.\n\n\t* typeck.c (comp_ptr_ttypes_real): Use vector_targets_convertible_p.\n\t(comp_ptr_ttypes_const): Likewise.\n\n\t* g++.dg/other/opaque-1.C, g++.dg/other/opaque-2.C,\n\tg++.dg/other/opaque-3.C: Also run on powerpc*-*-linux*spe*.\n\nFrom-SVN: r137325", "tree": {"sha": "2419bef3fd99b284465e5372871e51477048d14a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2419bef3fd99b284465e5372871e51477048d14a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f83c7f631f959a5c1189527e90c065b68cdacd4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83c7f631f959a5c1189527e90c065b68cdacd4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83c7f631f959a5c1189527e90c065b68cdacd4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83c7f631f959a5c1189527e90c065b68cdacd4d/comments", "author": null, "committer": null, "parents": [{"sha": "103a6411005d1807b6ab5dc24033b283b59a6fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103a6411005d1807b6ab5dc24033b283b59a6fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103a6411005d1807b6ab5dc24033b283b59a6fa1"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "1e258ac1739df40e1f3794e46d97c39510852b9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -1,3 +1,12 @@\n+2008-07-01  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* c-typeck.c (convert_for_assignment): Use\n+\tvector_targets_convertible_p.\n+\t* c-common.c (vector_targets_convertible_p): New.\n+\t* c-common.h (vector_targets_convertible_p): New prototype.\n+\t* config/rs6000/rs6000.c (rs6000_is_opaque_type): Do not check\n+\topaque_p_V2SI_type_node.\n+\n 2008-07-01  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64.c (ia64_cannot_force_const_mem): Do not allow"}, {"sha": "31c778c88b4807dff9b1bec62e3b119ad5a006fa", "filename": "gcc/c-common.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -1207,6 +1207,20 @@ check_main_parameter_types (tree decl)\n    pedwarn (\"%q+D takes only zero or two arguments\", decl);\n }\n \n+/* True if pointers to distinct types T1 and T2 can be converted to\n+   each other without an explicit cast.  Only returns true for opaque\n+   vector types.  */\n+bool\n+vector_targets_convertible_p (const_tree t1, const_tree t2)\n+{\n+  if (TREE_CODE (t1) == VECTOR_TYPE && TREE_CODE (t2) == VECTOR_TYPE\n+      && (targetm.vector_opaque_p (t1) || targetm.vector_opaque_p (t2))\n+      && tree_int_cst_equal (TYPE_SIZE (t1), TYPE_SIZE (t2)))\n+    return true;\n+\n+  return false;\n+}\n+\n /* True if vector types T1 and T2 can be converted to each other\n    without an explicit cast.  If EMIT_LAX_NOTE is true, and T1 and T2\n    can only be converted with -flax-vector-conversions yet that is not"}, {"sha": "7fd2242c35220951e965ceb350e80de45d0061bc", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -824,6 +824,7 @@ extern tree finish_label_address_expr (tree);\n extern tree lookup_label (tree);\n extern tree lookup_name (tree);\n \n+extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);\n \n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);"}, {"sha": "6b7594e6a260bff6b63e33d6303bd1299bee95a9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -4196,10 +4196,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n       if (TREE_CODE (mvr) != ARRAY_TYPE)\n \tmvr = TYPE_MAIN_VARIANT (mvr);\n       /* Opaque pointers are treated like void pointers.  */\n-      is_opaque_pointer = (targetm.vector_opaque_p (type)\n-\t\t\t   || targetm.vector_opaque_p (rhstype))\n-\t&& TREE_CODE (ttl) == VECTOR_TYPE\n-\t&& TREE_CODE (ttr) == VECTOR_TYPE;\n+      is_opaque_pointer = vector_targets_convertible_p (ttl, ttr);\n \n       /* C++ does not allow the implicit conversion void* -> T*.  However,\n \t for the purpose of reducing the number of false positives, we"}, {"sha": "214b6922b5cbc4a693266a0f6ddae42734f387a4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -22332,7 +22332,6 @@ rs6000_is_opaque_type (const_tree type)\n {\n   return (type == opaque_V2SI_type_node\n \t      || type == opaque_V2SF_type_node\n-\t      || type == opaque_p_V2SI_type_node\n \t      || type == opaque_V4SI_type_node);\n }\n "}, {"sha": "8aff706f9db9318f754995f93565cec8468dec74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -1,3 +1,8 @@\n+2008-07-01  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* typeck.c (comp_ptr_ttypes_real): Use vector_targets_convertible_p.\n+\t(comp_ptr_ttypes_const): Likewise.\n+\n 2008-07-01  Andrew Haley  <aph@redhat.com>\n \n \t* decl.c (finish_constructor_body): Don't set the return value of"}, {"sha": "14cbd9d8dd2731484c9241aaec8ff7abc0d0840d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -7164,6 +7164,7 @@ static int\n comp_ptr_ttypes_real (tree to, tree from, int constp)\n {\n   bool to_more_cv_qualified = false;\n+  bool is_opaque_pointer = false;\n \n   for (; ; to = TREE_TYPE (to), from = TREE_TYPE (from))\n     {\n@@ -7198,9 +7199,13 @@ comp_ptr_ttypes_real (tree to, tree from, int constp)\n \t    constp &= TYPE_READONLY (to);\n \t}\n \n+      if (TREE_CODE (to) == VECTOR_TYPE)\n+\tis_opaque_pointer = vector_targets_convertible_p (to, from);\n+\n       if (TREE_CODE (to) != POINTER_TYPE && !TYPE_PTRMEM_P (to))\n \treturn ((constp >= 0 || to_more_cv_qualified)\n-\t\t&& same_type_ignoring_top_level_qualifiers_p (to, from));\n+\t\t&& (is_opaque_pointer\n+\t\t    || same_type_ignoring_top_level_qualifiers_p (to, from)));\n     }\n }\n \n@@ -7261,6 +7266,8 @@ ptr_reasonably_similar (const_tree to, const_tree from)\n bool\n comp_ptr_ttypes_const (tree to, tree from)\n {\n+  bool is_opaque_pointer = false;\n+\n   for (; ; to = TREE_TYPE (to), from = TREE_TYPE (from))\n     {\n       if (TREE_CODE (to) != TREE_CODE (from))\n@@ -7271,8 +7278,12 @@ comp_ptr_ttypes_const (tree to, tree from)\n \t\t\t  TYPE_OFFSET_BASETYPE (to)))\n \t  continue;\n \n+      if (TREE_CODE (to) == VECTOR_TYPE)\n+\tis_opaque_pointer = vector_targets_convertible_p (to, from);\n+\n       if (TREE_CODE (to) != POINTER_TYPE)\n-\treturn same_type_ignoring_top_level_qualifiers_p (to, from);\n+\treturn (is_opaque_pointer\n+\t\t|| same_type_ignoring_top_level_qualifiers_p (to, from));\n     }\n }\n "}, {"sha": "d52e4737b78b2f3cc3fba93532a6496d25904095", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -1,3 +1,8 @@\n+2008-07-01  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* g++.dg/other/opaque-1.C, g++.dg/other/opaque-2.C,\n+\tg++.dg/other/opaque-3.C: Also run on powerpc*-*-linux*spe*.\n+\n 2008-07-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/quad-sse.c: New test."}, {"sha": "ae1d76f3f7f07902f944a07786fc7ae627b04ce0", "filename": "gcc/testsuite/g++.dg/other/opaque-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-1.C?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target powerpc-*-eabispe* } } */\n+/* { dg-do run { target powerpc-*-eabispe* powerpc*-*-linux*spe* } } */\n \n #define __vector __attribute__((vector_size(8)))\n typedef float __vector __ev64_fs__;"}, {"sha": "9a9b1b464043d77e1eacdcb339a5bd3e2d26fa9f", "filename": "gcc/testsuite/g++.dg/other/opaque-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-2.C?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target powerpc-*-eabi* } } */\n+/* { dg-do compile { target powerpc-*-eabi* powerpc*-*-linux*spe* } } */\n /* { dg-options \"-mcpu=8540 -mabi=spe\" } */\n \n #define __vector __attribute__((vector_size(8)))"}, {"sha": "8cba875fd9b0b8692ff4cb8022d504f015969c5d", "filename": "gcc/testsuite/g++.dg/other/opaque-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83c7f631f959a5c1189527e90c065b68cdacd4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fopaque-3.C?ref=f83c7f631f959a5c1189527e90c065b68cdacd4d", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target powerpc-*-eabi* } } */\n+/* { dg-do compile { target powerpc-*-eabi* powerpc*-*-linux*spe* } } */\n /* { dg-options \"-mcpu=8540 -mabi=spe\" } */\n \n __ev64_opaque__ o;"}]}