{"sha": "40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiNWE3N2M1MGRiYzI1MzEyMTFiZjFjNGZhMjk1YWQyZmM0NGFhOA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-03-27T15:18:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-27T15:18:32Z"}, "message": "* flow.c (mark_used_regs): Improve handling of ASMs.\n\nFrom-SVN: r26014", "tree": {"sha": "7109b9204485f607af3c8cd91b3218257dea101f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7109b9204485f607af3c8cd91b3218257dea101f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8/comments", "author": null, "committer": null, "parents": [{"sha": "26f096f9e545b3f951ab850f06fad454613b0e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f096f9e545b3f951ab850f06fad454613b0e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f096f9e545b3f951ab850f06fad454613b0e43"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "a7e32fa1725b24ca7b8eb6671c39e36a6e36ac02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8", "patch": "@@ -1,3 +1,7 @@\n+Sat Mar 27 16:13:50 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* flow.c (mark_used_regs): Improve handling of ASMs.\n+\n 1999-03-26 Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* Makefile.in (xcpp, cppspec.o): New targets."}, {"sha": "3c3c0904633509463b0d8db07819e3b89fb5b126", "filename": "gcc/flow.c", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=40b5a77c50dbc2531211bf1c4fa295ad2fc44aa8", "patch": "@@ -242,7 +242,12 @@ static int loop_depth;\n static int cc0_live;\n \n /* During propagate_block, this contains a list of all the MEMs we are\n-   tracking for dead store elimination.  */\n+   tracking for dead store elimination. \n+\n+   ?!? Note we leak memory by not free-ing items on this list.  We need to\n+   write some generic routines to operate on memory lists since cse, gcse,\n+   loop, sched, flow and possibly other passes all need to do basically the\n+   same operations on these lists.  */\n \n static rtx mem_set_list;\n \n@@ -3593,7 +3598,6 @@ mark_used_regs (needed, live, x, final, insn)\n     case PC:\n     case ADDR_VEC:\n     case ADDR_DIFF_VEC:\n-    case ASM_INPUT:\n       return;\n \n #ifdef HAVE_cc0\n@@ -3908,6 +3912,44 @@ mark_used_regs (needed, live, x, final, insn)\n \t  SET_REGNO_REG_SET (live, i);\n       break;\n \n+    case ASM_OPERANDS:\n+    case UNSPEC_VOLATILE:\n+    case TRAP_IF:\n+    case ASM_INPUT:\n+      {\n+\t/* Traditional and volatile asm instructions must be considered to use\n+\t   and clobber all hard registers, all pseudo-registers and all of\n+\t   memory.  So must TRAP_IF and UNSPEC_VOLATILE operations.\n+\n+\t   Consider for instance a volatile asm that changes the fpu rounding\n+\t   mode.  An insn should not be moved across this even if it only uses\n+\t   pseudo-regs because it might give an incorrectly rounded result. \n+\n+\t   ?!? Unfortunately, marking all hard registers as live causes massive\n+\t   problems for the register allocator and marking all pseudos as live\n+\t   creates mountains of uninitialized variable warnings.\n+\n+\t   So for now, just clear the memory set list and mark any regs\n+\t   we can find in ASM_OPERANDS as used.  */\n+\tif (code != ASM_OPERANDS || MEM_VOLATILE_P (x))\n+\t  mem_set_list = NULL_RTX;\n+\n+        /* For all ASM_OPERANDS, we must traverse the vector of input operands.\n+\t   We can not just fall through here since then we would be confused\n+\t   by the ASM_INPUT rtx inside ASM_OPERANDS, which do not indicate\n+\t   traditional asms unlike their normal usage.  */\n+\tif (code == ASM_OPERANDS)\n+\t  {\n+\t    int j;\n+\n+\t    for (j = 0; j < ASM_OPERANDS_INPUT_LENGTH (x); j++)\n+\t      mark_used_regs (needed, live, ASM_OPERANDS_INPUT (x, j),\n+\t\t\t      final, insn);\n+\t  }\n+\tbreak;\n+      }\n+\n+\n     default:\n       break;\n     }"}]}