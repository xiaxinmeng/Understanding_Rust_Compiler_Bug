{"sha": "4b0b4ab069cd49638ab3c09d427d00180ce60691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIwYjRhYjA2OWNkNDk2MzhhYjNjMDlkNDI3ZDAwMTgwY2U2MDY5MQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-10-16T13:36:52Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-10-16T13:36:52Z"}, "message": "avr.h (PREFERRED_RELOAD_CLASS): Remove.\n\n\t* config/avr/avr.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/avr/avr-protos.h (preferred_reload_class): Remove.\n\t* config/avr/avr.c (preferred_reload_class): Remove.\n\t* config/pa/pa.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/pa/pa.c (emit_move_sequence): Update comment\n\t* config/arc/arc.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/crx/crx.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/fr30/fr30.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/frv/frv.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/h8300/h8300.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/lm32/lm32.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/m32r/m32r.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/moxie/moxie.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/picochip/picochip.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/rx/rx.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/spu/spu.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/v850/v850.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/vax/vax.h (PREFERRED_RELOAD_CLASS): Remove.\n\nFrom-SVN: r165541", "tree": {"sha": "0175463b9d03ccd0d03cccaaee2f7e8e2bed2f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0175463b9d03ccd0d03cccaaee2f7e8e2bed2f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b0b4ab069cd49638ab3c09d427d00180ce60691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0b4ab069cd49638ab3c09d427d00180ce60691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b0b4ab069cd49638ab3c09d427d00180ce60691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0b4ab069cd49638ab3c09d427d00180ce60691/comments", "author": null, "committer": null, "parents": [{"sha": "7bb3487f8f8f8b849f3b8735481f3fd8e88ec09c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb3487f8f8f8b849f3b8735481f3fd8e88ec09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bb3487f8f8f8b849f3b8735481f3fd8e88ec09c"}], "stats": {"total": 129, "additions": 22, "deletions": 107}, "files": [{"sha": "093130611e380838c84a93b369a4d7ac2e29580a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -1,3 +1,24 @@\n+2010-10-16  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/avr/avr.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/avr/avr-protos.h (preferred_reload_class): Remove.\n+\t* config/avr/avr.c (preferred_reload_class): Remove.\n+\t* config/pa/pa.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/pa/pa.c (emit_move_sequence): Update comment\n+\t* config/arc/arc.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/crx/crx.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/fr30/fr30.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/frv/frv.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/h8300/h8300.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/lm32/lm32.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/m32r/m32r.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/moxie/moxie.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/picochip/picochip.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/rx/rx.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/spu/spu.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/v850/v850.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/vax/vax.h (PREFERRED_RELOAD_CLASS): Remove.\n+\n 2010-10-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* opts.c (set_fast_math_flags,"}, {"sha": "ff7e5b73226fb03b0444adf71727b19570ce5c9d", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -376,13 +376,6 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n ((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32)\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.  */\n-#define PREFERRED_RELOAD_CLASS(X,CLASS) \\\n-(CLASS)\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n #define CLASS_MAX_NREGS(CLASS, MODE) \\"}, {"sha": "7469856f85c714fae121f0ef50aa295b9d44925c", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -83,7 +83,6 @@ extern void avr_output_bld (rtx operands[], int bit_nr);\n extern void avr_output_addr_vec_elt (FILE *stream, int value);\n extern const char *avr_out_sbxx_branch (rtx insn, rtx operands[]);\n \n-extern enum reg_class preferred_reload_class (rtx x, enum reg_class rclass);\n extern int extra_constraint_Q (rtx x);\n extern int adjust_insn_length (rtx insn, int len);\n extern rtx avr_libcall_value (enum machine_mode mode);"}, {"sha": "c55e43281ea0f212f41334142ba280638665c943", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -5840,16 +5840,6 @@ avr_function_value (const_tree type,\n   return gen_rtx_REG (BLKmode, RET_REGISTER + 2 - offs);\n }\n \n-/* Places additional restrictions on the register class to\n-   use when it is necessary to copy value X into a register\n-   in class CLASS.  */\n-\n-enum reg_class\n-preferred_reload_class (rtx x ATTRIBUTE_UNUSED, enum reg_class rclass)\n-{\n-  return rclass;\n-}\n-\n int\n test_hard_reg_class (enum reg_class rclass, rtx x)\n {"}, {"sha": "b0578d4894740c1bcf41eb48d90e7baeee4951a8", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -329,8 +329,6 @@ enum reg_class {\n \n #define REGNO_OK_FOR_INDEX_P(NUM) 0\n \n-#define PREFERRED_RELOAD_CLASS(X, CLASS) preferred_reload_class(X,CLASS)\n-\n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P hook_bool_mode_true\n \n #define CLASS_MAX_NREGS(CLASS, MODE)   class_max_nregs (CLASS, MODE)"}, {"sha": "b12c4283f4627a3b20c2b636e08ca48e2a0fc887", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -229,8 +229,6 @@ enum reg_class\n \n #define REGNO_OK_FOR_INDEX_P(REGNO)\t   REGNO_OK_FOR_BASE_P(REGNO)\n \n-#define PREFERRED_RELOAD_CLASS(X,CLASS) CLASS\n-\n #define SECONDARY_RELOAD_CLASS(CLASS, MODE, X) \\\n   crx_secondary_reload_class (CLASS, MODE, X)\n "}, {"sha": "93e4e8dbbecd867c0ec24ec507dd9ba08eb8b030", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -384,24 +384,6 @@ enum reg_class\n    will reload one or both registers only if neither labeling works.  */\n #define REGNO_OK_FOR_INDEX_P(NUM) 1\n \n-/* A C expression that places additional restrictions on the register class to\n-   use when it is necessary to copy value X into a register in class CLASS.\n-   The value is a register class; perhaps CLASS, or perhaps another, smaller\n-   class.  On many machines, the following definition is safe:\n-\n-        #define PREFERRED_RELOAD_CLASS(X,CLASS) CLASS\n-\n-   Sometimes returning a more restrictive class makes better code.  For\n-   example, on the 68000, when X is an integer constant that is in range for a\n-   `moveq' instruction, the value of this macro is always `DATA_REGS' as long\n-   as CLASS includes the data registers.  Requiring a data register guarantees\n-   that a `moveq' will be used.\n-\n-   If X is a `const_double', by returning `NO_REGS' you can force X into a\n-   memory constant.  This is useful on certain machines where immediate\n-   floating values cannot be loaded into certain kinds of registers.  */\n-#define PREFERRED_RELOAD_CLASS(X, CLASS) CLASS\n-\n /* A C expression for the maximum number of consecutive registers of\n    class CLASS needed to hold a value of mode MODE.\n "}, {"sha": "9ce01f9dc62f93dcd083c3e4d071c6abf2533e3c", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -1201,26 +1201,6 @@ extern enum reg_class reg_class_from_letter[];\n    ? GPR_P (NUM)                                                        \\\n    : (reg_renumber [NUM] >= 0 && GPR_P (reg_renumber [NUM])))\n \n-/* A C expression that places additional restrictions on the register class to\n-   use when it is necessary to copy value X into a register in class CLASS.\n-   The value is a register class; perhaps CLASS, or perhaps another, smaller\n-   class.  On many machines, the following definition is safe:\n-\n-        #define PREFERRED_RELOAD_CLASS(X,CLASS) CLASS\n-\n-   Sometimes returning a more restrictive class makes better code.  For\n-   example, on the 68000, when X is an integer constant that is in range for a\n-   `moveq' instruction, the value of this macro is always `DATA_REGS' as long\n-   as CLASS includes the data registers.  Requiring a data register guarantees\n-   that a `moveq' will be used.\n-\n-   If X is a `const_double', by returning `NO_REGS' you can force X into a\n-   memory constant.  This is useful on certain machines where immediate\n-   floating values cannot be loaded into certain kinds of registers.\n-\n-   This declaration must be present.  */\n-#define PREFERRED_RELOAD_CLASS(X, CLASS) CLASS\n-\n #define SECONDARY_INPUT_RELOAD_CLASS(CLASS, MODE, X) \\\n   frv_secondary_reload_class (CLASS, MODE, X)\n "}, {"sha": "12fbe63f95cc9ac5a554d99e111007db52debbc7", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -455,13 +455,6 @@ enum reg_class {\n   ((C) == 'G' ? (VALUE) == CONST0_RTX (SFmode)\t\\\n    : 0)\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.  */\n-\n-#define PREFERRED_RELOAD_CLASS(X, CLASS)  (CLASS)\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n "}, {"sha": "52b492c656c291693cb8aa7f2476e4726d4c9d4b", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -227,8 +227,6 @@ enum reg_class\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) 0\n \n-#define PREFERRED_RELOAD_CLASS(X,CLASS) (CLASS)\n-\n /*----------------------------------------*/\n /* Stack Layout and Calling Conventions.  */\n /*----------------------------------------*/"}, {"sha": "9522f571f385f54f805797f421e09fda4997f670", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -653,12 +653,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) REGNO_OK_FOR_BASE_P(REGNO)\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.  */\n-#define PREFERRED_RELOAD_CLASS(X,CLASS) (CLASS)\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n #define CLASS_MAX_NREGS(CLASS, MODE) \\"}, {"sha": "30170b430ef46a5c78f9830417bb06af02de969d", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -201,11 +201,6 @@ enum reg_class\n #define CLASS_MAX_NREGS(CLASS, MODE) \\\n   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n-/* A C expression that places additional restrictions on the register\n-   class to use when it is necessary to copy value X into a register\n-   in class CLASS.  */\n-#define PREFERRED_RELOAD_CLASS(X,CLASS) CLASS\n-\n /* The Overall Framework of an Assembler File */\n \n #undef  ASM_SPEC"}, {"sha": "a2a822c8713e8edf206bcd7cdd8aceb9790eba82", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -1665,7 +1665,7 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \n      Use scratch_reg to hold the address of the memory location.\n \n-     The proper fix is to change PREFERRED_RELOAD_CLASS to return\n+     The proper fix is to change TARGET_PREFERRED_RELOAD_CLASS to return\n      NO_REGS when presented with a const_int and a register class\n      containing only FP registers.  Doing so unfortunately creates\n      more problems than it solves.   Fix this for 2.5.  */"}, {"sha": "47fc136636510de77e79cc35b00708c08d8b6ce5", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -491,12 +491,6 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n /* True if register is floating-point.  */\n #define FP_REGNO_P(N) ((N) >= FP_REG_FIRST && (N) <= FP_REG_LAST)\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.  */\n-#define PREFERRED_RELOAD_CLASS(X,CLASS) (CLASS)\n-\n #define MAYBE_FP_REG_CLASS_P(CLASS) \\\n   reg_classes_intersect_p ((CLASS), FP_REGS)\n "}, {"sha": "95d9d376dd72f61dbe961760b2575b1851ad0c4e", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -355,8 +355,6 @@ extern const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) 0\n \n-#define PREFERRED_RELOAD_CLASS(X, CLASS) CLASS\n-\n #define CLASS_MAX_NREGS(CLASS, MODE) picochip_class_max_nregs(CLASS, MODE)\n \n \f"}, {"sha": "544ed621375e886ff9df31220e2cbdeaa5b4419e", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -268,8 +268,6 @@ enum reg_class\n {  7,  10,  11,  12,  13,  14,  4,  3,  2,  1, 9, 8, 6, 5, 15\t\\\n }\n \n-#define PREFERRED_RELOAD_CLASS(X,CLASS)\t\tCLASS\n-\n #define REGNO_IN_RANGE(REGNO, MIN, MAX)\t\t\\\n   (IN_RANGE ((REGNO), (MIN), (MAX)) \t\t\\\n    || (reg_renumber != NULL\t\t\t\\"}, {"sha": "98d2f24573feb739a1ce12cdb5ac806a7e173fae", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -225,8 +225,6 @@ enum reg_class {\n #define INT_REG_OK_FOR_BASE_P(X,STRICT) \\\n \t((!(STRICT) || REGNO_OK_FOR_BASE_P (REGNO (X))))\n \n-#define PREFERRED_RELOAD_CLASS(X,CLASS)  (CLASS)\n-\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\\\n \t((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n "}, {"sha": "56df96e5cd23bd59ffe5a5e63618326ea0009361", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -376,13 +376,6 @@ enum reg_class\n \n #define REGNO_OK_FOR_INDEX_P(regno) 0\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.  */\n-\n-#define PREFERRED_RELOAD_CLASS(X,CLASS)  (CLASS)\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n "}, {"sha": "272dfbbc342223bf4b2399e948ac86556849d5c3", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b4ab069cd49638ab3c09d427d00180ce60691/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=4b0b4ab069cd49638ab3c09d427d00180ce60691", "patch": "@@ -258,13 +258,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define INDEX_REG_CLASS ALL_REGS\n #define BASE_REG_CLASS ALL_REGS\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.  */\n-\n-#define PREFERRED_RELOAD_CLASS(X,CLASS)  (CLASS)\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n /* On the VAX, this is always the size of MODE in words,"}]}