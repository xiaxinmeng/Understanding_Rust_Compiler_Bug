{"sha": "4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyYzIwY2NmYWJkOWJjZmUwMjkzYzI3NDMxMmE0MjQ5NzFkMGJjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-09-28T12:18:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-09-28T12:18:57Z"}, "message": "re PR tree-optimization/54713 (error: non-trivial conversion at assignment in gcc.c-torture/compile/pr53410-2.c)\n\n\tPR tree-optimization/54713\n\t* fold-const.c (vec_cst_ctor_to_array): Give up if vector CONSTRUCTOR\n\thas vector elements.\n\t(fold_ternary_loc) <case BIT_FIELD_REF>: Likewise.\n\t* tree-vect-generic.c (vector_element): Don't rely on CONSTRUCTOR elts\n\tindexes.  Use BIT_FIELD_REF if CONSTRUCTOR has vector elements.\n\t(lower_vec_perm): Use NULL_TREE CONSTRUCTOR indexes.\n\n\t* gcc.c-torture/compile/pr54713-1.c: New test.\n\t* gcc.c-torture/compile/pr54713-2.c: New test.\n\t* gcc.c-torture/compile/pr54713-3.c: New test.\n\nFrom-SVN: r191826", "tree": {"sha": "ed78d34a78eb25b4804dcb75880712505ce51a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed78d34a78eb25b4804dcb75880712505ce51a5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a910f8f264f9ab3cc05c2ad13158201fff8b948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a910f8f264f9ab3cc05c2ad13158201fff8b948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a910f8f264f9ab3cc05c2ad13158201fff8b948"}], "stats": {"total": 153, "additions": 134, "deletions": 19}, "files": [{"sha": "d45df05746f33523e34663957be6c07cbfa6f222", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "patch": "@@ -1,3 +1,13 @@\n+2012-09-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/54713\n+\t* fold-const.c (vec_cst_ctor_to_array): Give up if vector CONSTRUCTOR\n+\thas vector elements.\n+\t(fold_ternary_loc) <case BIT_FIELD_REF>: Likewise.\n+\t* tree-vect-generic.c (vector_element): Don't rely on CONSTRUCTOR elts\n+\tindexes.  Use BIT_FIELD_REF if CONSTRUCTOR has vector elements.\n+\t(lower_vec_perm): Use NULL_TREE CONSTRUCTOR indexes.\n+\n 2012-09-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md (adjust_len): Add lpm."}, {"sha": "fd0075c4971cc8c85633ae183e5fcac1ca259d67", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "patch": "@@ -9559,7 +9559,7 @@ vec_cst_ctor_to_array (tree arg, tree *elts)\n       constructor_elt *elt;\n \n       FOR_EACH_VEC_ELT (constructor_elt, CONSTRUCTOR_ELTS (arg), i, elt)\n-\tif (i >= nelts)\n+\tif (i >= nelts || TREE_CODE (TREE_TYPE (elt->value)) == VECTOR_TYPE)\n \t  return false;\n \telse\n \t  elts[i] = elt->value;\n@@ -14030,22 +14030,35 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t\t      unsigned i;\n \t\t      if (CONSTRUCTOR_NELTS (arg0) == 0)\n \t\t\treturn build_constructor (type, NULL);\n-\t\t      vals = VEC_alloc (constructor_elt, gc, n);\n-\t\t      for (i = 0; i < n && idx + i < CONSTRUCTOR_NELTS (arg0);\n-\t\t\t   ++i)\n-\t\t\tCONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n-\t\t\t\t\t\tCONSTRUCTOR_ELT\n-\t\t\t\t\t\t  (arg0, idx + i)->value);\n-\t\t      return build_constructor (type, vals);\n+\t\t      if (TREE_CODE (TREE_TYPE (CONSTRUCTOR_ELT (arg0,\n+\t\t\t\t\t\t\t\t 0)->value))\n+\t\t\t  != VECTOR_TYPE)\n+\t\t\t{\n+\t\t\t  vals = VEC_alloc (constructor_elt, gc, n);\n+\t\t\t  for (i = 0;\n+\t\t\t       i < n && idx + i < CONSTRUCTOR_NELTS (arg0);\n+\t\t\t       ++i)\n+\t\t\t    CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n+\t\t\t\t\t\t    CONSTRUCTOR_ELT\n+\t\t\t\t\t\t      (arg0, idx + i)->value);\n+\t\t\t  return build_constructor (type, vals);\n+\t\t\t}\n \t\t    }\n \t\t}\n \t      else if (n == 1)\n \t\t{\n \t\t  if (TREE_CODE (arg0) == VECTOR_CST)\n \t\t    return VECTOR_CST_ELT (arg0, idx);\n-\t\t  else if (idx < CONSTRUCTOR_NELTS (arg0))\n-\t\t    return CONSTRUCTOR_ELT (arg0, idx)->value;\n-\t\t  return build_zero_cst (type);\n+\t\t  else if (CONSTRUCTOR_NELTS (arg0) == 0)\n+\t\t    return build_zero_cst (type);\n+\t\t  else if (TREE_CODE (TREE_TYPE (CONSTRUCTOR_ELT (arg0,\n+\t\t\t\t\t\t\t\t  0)->value))\n+\t\t\t   != VECTOR_TYPE)\n+\t\t    {\n+\t\t      if (idx < CONSTRUCTOR_NELTS (arg0))\n+\t\t\treturn CONSTRUCTOR_ELT (arg0, idx)->value;\n+\t\t      return build_zero_cst (type);\n+\t\t    }\n \t\t}\n \t    }\n \t}"}, {"sha": "2ea0e80d7a726b0666f1efe8bbc9be009be38fdd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "patch": "@@ -1,3 +1,10 @@\n+2012-09-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/54713\n+\t* gcc.c-torture/compile/pr54713-1.c: New test.\n+\t* gcc.c-torture/compile/pr54713-2.c: New test.\n+\t* gcc.c-torture/compile/pr54713-3.c: New test.\n+\n 2012-09-27  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* gcc.target/arm/unsigned-extend-1.c: Omit -march option."}, {"sha": "f042ea2fc6c39552b7dab3a1215367066abd472f", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54713-1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-1.c?ref=4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "patch": "@@ -0,0 +1,70 @@\n+/* PR tree-optimization/54713 */\n+\n+#ifndef N\n+#define N 8\n+#define ONE 1, 1, 1, 1, 1, 1, 1, 1\n+#define ONEU 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U\n+#endif\n+\n+typedef int V __attribute__((vector_size (N * sizeof (int))));\n+typedef unsigned int W __attribute__((vector_size (N * sizeof (int))));\n+\n+void\n+f1 (V *p)\n+{\n+  *p = (*p & ((V) { ONE })) ^ ((V) { ONE});\n+}\n+\n+void\n+f2 (V *p)\n+{\n+  *p = (*p ^ ((V) { ONE })) & ((V) { ONE});\n+}\n+\n+void\n+f3 (V *p)\n+{\n+  *p = (~*p) & ((V) { ONE });\n+}\n+\n+void\n+f4 (V *p, V *q)\n+{\n+  *p = (*p ^ *q) == *q;\n+}\n+\n+void\n+f5 (V *p, V *q)\n+{\n+  *p = (*p ^ *q) == *p;\n+}\n+\n+void\n+f6 (V *p, V *q, V *r)\n+{\n+  *p = (*p & *r) == (*q & *r);\n+}\n+\n+void\n+f7 (V *p, V *q, V *r)\n+{\n+  *p = (*p & *r) == (*r & *q);\n+}\n+\n+void\n+f8 (V *p, V *q, V *r)\n+{\n+  *p = (*r & *p) == (*q & *r);\n+}\n+\n+void\n+f9 (V *p, V *q, V *r)\n+{\n+  *p = (*r & *p) == (*r & *q);\n+}\n+\n+void\n+f10 (W *p, W *q)\n+{\n+  *p = *p < (((const W) { ONEU }) << *q);\n+}"}, {"sha": "c3910373111ac1977772e8342f1f600cc6d82677", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54713-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-2.c?ref=4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "patch": "@@ -0,0 +1,7 @@\n+/* PR tree-optimization/54713 */\n+\n+#define N 16\n+#define ONE 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n+#define ONEU 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U\n+\n+#include \"pr54713-1.c\""}, {"sha": "6164a5eec0ec057dc81513d40fd9055abb1f9152", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54713-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-3.c?ref=4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "patch": "@@ -0,0 +1,9 @@\n+/* PR tree-optimization/54713 */\n+\n+#define N 32\n+#define ONE 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n+\t    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1    \n+#define ONEU 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, \\\n+\t     1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U, 1U\n+\n+#include \"pr54713-1.c\""}, {"sha": "d950d814870f05dd592ff54e17def7c4bd2c7403", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a2c20ccfabd9bcfe0293c274312a424971d0bc0/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=4a2c20ccfabd9bcfe0293c274312a424971d0bc0", "patch": "@@ -1050,14 +1050,13 @@ vector_element (gimple_stmt_iterator *gsi, tree vect, tree idx, tree *ptmpvec)\n \n       if (TREE_CODE (vect) == VECTOR_CST)\n \treturn VECTOR_CST_ELT (vect, index);\n-      else if (TREE_CODE (vect) == CONSTRUCTOR)\n+      else if (TREE_CODE (vect) == CONSTRUCTOR\n+\t       && (CONSTRUCTOR_NELTS (vect) == 0\n+\t\t   || TREE_CODE (TREE_TYPE (CONSTRUCTOR_ELT (vect, 0)->value))\n+\t\t      != VECTOR_TYPE))\n         {\n-          unsigned i;\n-          tree elt_i, elt_v;\n-\n-\t  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (vect), i, elt_i, elt_v)\n-            if (operand_equal_p (elt_i, idx, 0))\n-              return elt_v;\n+\t  if (index < CONSTRUCTOR_NELTS (vect))\n+\t    return CONSTRUCTOR_ELT (vect, index)->value;\n           return build_zero_cst (vect_elt_type);\n         }\n       else\n@@ -1215,7 +1214,7 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n \t    t = v0_val;\n         }\n \n-      CONSTRUCTOR_APPEND_ELT (v, si, t);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, t);\n     }\n \n   constr = build_constructor (vect_type, v);"}]}