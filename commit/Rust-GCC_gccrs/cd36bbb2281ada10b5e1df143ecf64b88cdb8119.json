{"sha": "cd36bbb2281ada10b5e1df143ecf64b88cdb8119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzNmJiYjIyODFhZGExMGI1ZTFkZjE0M2VjZjY0Yjg4Y2RiODExOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-11T12:59:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-12T11:12:46Z"}, "message": "tree-optimization/100519 - avoid reassociating asm goto defs\n\nThis splits can_associate_p into checks for SSA defs and checks\nfor the type so it can be called from is_reassociable_op to\ncatch cases not catched by the earlier fix.\n\n2021-05-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100519\n\t* tree-ssa-reassoc.c (can_associate_p): Split into...\n\t(can_associate_op_p): ... this\n\t(can_associate_type_p): ... and this.\n\t(is_reassociable_op): Call can_associate_op_p.\n\t(break_up_subtract_bb): Call the appropriate predicates.\n\t(reassociate_bb): Likewise.\n\n\t* gcc.dg/torture/pr100519.c: New testcase.", "tree": {"sha": "983629752943d4991d80d334edce7b9ff7a89da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/983629752943d4991d80d334edce7b9ff7a89da9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd36bbb2281ada10b5e1df143ecf64b88cdb8119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd36bbb2281ada10b5e1df143ecf64b88cdb8119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd36bbb2281ada10b5e1df143ecf64b88cdb8119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd36bbb2281ada10b5e1df143ecf64b88cdb8119/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac18ded230f1559f271f8d66121b2f16805f0b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac18ded230f1559f271f8d66121b2f16805f0b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac18ded230f1559f271f8d66121b2f16805f0b27"}], "stats": {"total": 99, "additions": 58, "deletions": 41}, "files": [{"sha": "faf6e240e08d2b8083f83a5e3eabfe4d4a10ccb2", "filename": "gcc/testsuite/gcc.dg/torture/pr100519.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd36bbb2281ada10b5e1df143ecf64b88cdb8119/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100519.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd36bbb2281ada10b5e1df143ecf64b88cdb8119/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100519.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100519.c?ref=cd36bbb2281ada10b5e1df143ecf64b88cdb8119", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"--param tree-reassoc-width=2\" } */\n+\n+unsigned int foo_a1, foo_a2;\n+\n+unsigned int foo()\n+{\n+  unsigned int v0, x;\n+  asm goto(\"\" : \"=r\"(x) : : : lab);\n+lab:\n+  v0 += x + x;\n+  return v0 + x + foo_a1 + foo_a2;\n+}"}, {"sha": "32e1632705ba1f04e1366768b2fb9787b51cde88", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd36bbb2281ada10b5e1df143ecf64b88cdb8119/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd36bbb2281ada10b5e1df143ecf64b88cdb8119/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=cd36bbb2281ada10b5e1df143ecf64b88cdb8119", "patch": "@@ -593,6 +593,36 @@ add_repeat_to_ops_vec (vec<operand_entry *> *ops, tree op,\n   reassociate_stats.pows_encountered++;\n }\n \n+/* Returns true if we can associate the SSA def OP.  */\n+\n+static bool\n+can_reassociate_op_p (tree op)\n+{\n+  if (TREE_CODE (op) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n+    return false;\n+  /* Make sure asm goto outputs do not participate in reassociation since\n+     we have no way to find an insertion place after asm goto.  */\n+  if (TREE_CODE (op) == SSA_NAME\n+      && gimple_code (SSA_NAME_DEF_STMT (op)) == GIMPLE_ASM\n+      && gimple_asm_nlabels (as_a <gasm *> (SSA_NAME_DEF_STMT (op))) != 0)\n+    return false;\n+  return true;\n+}\n+\n+/* Returns true if we can reassociate operations of TYPE.\n+   That is for integral or non-saturating fixed-point types, and for\n+   floating point type when associative-math is enabled.  */\n+\n+static bool\n+can_reassociate_type_p (tree type)\n+{\n+  if ((ANY_INTEGRAL_TYPE_P (type) && TYPE_OVERFLOW_WRAPS (type))\n+      || NON_SAT_FIXED_POINT_TYPE_P (type)\n+      || (flag_associative_math && FLOAT_TYPE_P (type)))\n+    return true;\n+  return false;\n+}\n+\n /* Return true if STMT is reassociable operation containing a binary\n    operation with tree code CODE, and is inside LOOP.  */\n \n@@ -613,12 +643,8 @@ is_reassociable_op (gimple *stmt, enum tree_code code, class loop *loop)\n     {\n       tree rhs1 = gimple_assign_rhs1 (stmt);\n       tree rhs2 = gimple_assign_rhs2 (stmt);\n-      if (TREE_CODE (rhs1) == SSA_NAME\n-\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs1))\n-\treturn false;\n-      if (rhs2\n-\t  && TREE_CODE (rhs2) == SSA_NAME\n-\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs2))\n+      if (!can_reassociate_op_p (rhs1)\n+\t  || (rhs2 && !can_reassociate_op_p (rhs2)))\n \treturn false;\n       return true;\n     }\n@@ -5887,29 +5913,6 @@ repropagate_negates (void)\n     }\n }\n \n-/* Returns true if OP is of a type for which we can do reassociation.\n-   That is for integral or non-saturating fixed-point types, and for\n-   floating point type when associative-math is enabled.  */\n-\n-static bool\n-can_reassociate_p (tree op)\n-{\n-  tree type = TREE_TYPE (op);\n-  if (TREE_CODE (op) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n-    return false;\n-  /* Make sure asm goto outputs do not participate in reassociation since\n-     we have no way to find an insertion place after asm goto.  */\n-  if (TREE_CODE (op) == SSA_NAME\n-      && gimple_code (SSA_NAME_DEF_STMT (op)) == GIMPLE_ASM\n-      && gimple_asm_nlabels (as_a <gasm *> (SSA_NAME_DEF_STMT (op))) != 0)\n-    return false;\n-  if ((ANY_INTEGRAL_TYPE_P (type) && TYPE_OVERFLOW_WRAPS (type))\n-      || NON_SAT_FIXED_POINT_TYPE_P (type)\n-      || (flag_associative_math && FLOAT_TYPE_P (type)))\n-    return true;\n-  return false;\n-}\n-\n /* Break up subtract operations in block BB.\n \n    We do this top down because we don't know whether the subtract is\n@@ -5942,14 +5945,15 @@ break_up_subtract_bb (basic_block bb)\n       gimple_set_uid (stmt, uid++);\n \n       if (!is_gimple_assign (stmt)\n-\t  || !can_reassociate_p (gimple_assign_lhs (stmt)))\n+\t  || !can_reassociate_type_p (TREE_TYPE (gimple_assign_lhs (stmt)))\n+\t  || !can_reassociate_op_p (gimple_assign_lhs (stmt)))\n \tcontinue;\n \n       /* Look for simple gimple subtract operations.  */\n       if (gimple_assign_rhs_code (stmt) == MINUS_EXPR)\n \t{\n-\t  if (!can_reassociate_p (gimple_assign_rhs1 (stmt))\n-\t      || !can_reassociate_p (gimple_assign_rhs2 (stmt)))\n+\t  if (!can_reassociate_op_p (gimple_assign_rhs1 (stmt))\n+\t      || !can_reassociate_op_p (gimple_assign_rhs2 (stmt)))\n \t    continue;\n \n \t  /* Check for a subtract used only in an addition.  If this\n@@ -5960,7 +5964,7 @@ break_up_subtract_bb (basic_block bb)\n \t    break_up_subtract (stmt, &gsi);\n \t}\n       else if (gimple_assign_rhs_code (stmt) == NEGATE_EXPR\n-\t       && can_reassociate_p (gimple_assign_rhs1 (stmt)))\n+\t       && can_reassociate_op_p (gimple_assign_rhs1 (stmt)))\n \tplus_negates.safe_push (gimple_assign_lhs (stmt));\n     }\n   for (son = first_dom_son (CDI_DOMINATORS, bb);\n@@ -6553,14 +6557,14 @@ reassociate_bb (basic_block bb)\n \n \t  /* For non-bit or min/max operations we can't associate\n \t     all types.  Verify that here.  */\n-\t  if (rhs_code != BIT_IOR_EXPR\n-\t      && rhs_code != BIT_AND_EXPR\n-\t      && rhs_code != BIT_XOR_EXPR\n-\t      && rhs_code != MIN_EXPR\n-\t      && rhs_code != MAX_EXPR\n-\t      && (!can_reassociate_p (lhs)\n-\t\t  || !can_reassociate_p (rhs1)\n-\t\t  || !can_reassociate_p (rhs2)))\n+\t  if ((rhs_code != BIT_IOR_EXPR\n+\t       && rhs_code != BIT_AND_EXPR\n+\t       && rhs_code != BIT_XOR_EXPR\n+\t       && rhs_code != MIN_EXPR\n+\t       && rhs_code != MAX_EXPR\n+\t       && !can_reassociate_type_p (TREE_TYPE (lhs)))\n+\t      || !can_reassociate_op_p (rhs1)\n+\t      || !can_reassociate_op_p (rhs2))\n \t    continue;\n \n \t  if (associative_tree_code (rhs_code))"}]}