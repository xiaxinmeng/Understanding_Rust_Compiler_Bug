{"sha": "9839cd625197ee045786870e35036d14e5b92056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgzOWNkNjI1MTk3ZWUwNDU3ODY4NzBlMzUwMzZkMTRlNWI5MjA1Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-06-28T04:23:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-06-28T04:23:36Z"}, "message": "m68k.h (PREFERRED_RELOAD_CLASS): Don't force any FP const_doubles to memory.\n\nP\n        * m68k.h (PREFERRED_RELOAD_CLASS): Don't force any FP const_doubles\n        to memory.\n\nFrom-SVN: r27805", "tree": {"sha": "7519e00a9c604ddd0520c6ddd4ac101ce43fe761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7519e00a9c604ddd0520c6ddd4ac101ce43fe761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9839cd625197ee045786870e35036d14e5b92056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9839cd625197ee045786870e35036d14e5b92056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9839cd625197ee045786870e35036d14e5b92056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9839cd625197ee045786870e35036d14e5b92056/comments", "author": null, "committer": null, "parents": [{"sha": "9f81f5231bda79b16bb8b72bc59467c2cc81a289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f81f5231bda79b16bb8b72bc59467c2cc81a289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f81f5231bda79b16bb8b72bc59467c2cc81a289"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "aed42c5c117f97ec8c5730e304142ddd0350c879", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9839cd625197ee045786870e35036d14e5b92056/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9839cd625197ee045786870e35036d14e5b92056/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=9839cd625197ee045786870e35036d14e5b92056", "patch": "@@ -461,6 +461,8 @@ extern int target_flags;\n        if (TEST_HARD_REG_BIT (x, i)) \t\t\\\n \tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n     } \t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\\\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1\t\\\n }\n \n #endif /* defined SUPPORT_SUN_FPA */\n@@ -811,10 +813,7 @@ extern enum reg_class regno_reg_class[];\n    in some cases it is preferable to use a more restrictive class.\n    On the 68000 series, use a data reg if possible when the\n    value is a constant in the range where moveq could be used\n-   and we ensure that QImodes are reloaded into data regs.\n-   Also, if a floating constant needs reloading, put it in memory.\n-   Don't do this for !G constants, since all patterns in the md file\n-   expect them to be loaded into a register via fpmovecr.  See above.  */\n+   and we ensure that QImodes are reloaded into data regs.  */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)  \\\n   ((GET_CODE (X) == CONST_INT\t\t\t\\\n@@ -823,11 +822,10 @@ extern enum reg_class regno_reg_class[];\n    ? DATA_REGS\t\t\t\t\t\\\n    : (GET_MODE (X) == QImode && (CLASS) != ADDR_REGS) \\\n    ? DATA_REGS\t\t\t\t\t\\\n-   : (GET_CODE (X) == CONST_DOUBLE\t\t\\\n-      && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT) \\\n-   ? (! CONST_DOUBLE_OK_FOR_LETTER_P (X, 'G')\t\\\n-      && (CLASS == FP_REGS || CLASS == DATA_OR_FP_REGS) \\\n-      ? FP_REGS : NO_REGS)\t\t\t\\\n+   : (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n+      && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT)\t\t\t\\\n+   ? (TARGET_68881 && (CLASS == FP_REGS || CLASS == DATA_OR_FP_REGS)\t\\\n+      ? FP_REGS : NO_REGS)\t\t\t\t\t\t\\\n    : (TARGET_PCREL\t\t\t\t\\\n       && (GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == CONST \\\n \t  || GET_CODE (X) == LABEL_REF))\t\\"}]}