{"sha": "c468e1fba8516aa0029733406c00074c752f0aee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2OGUxZmJhODUxNmFhMDAyOTczMzQwNmMwMDA3NGM3NTJmMGFlZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:48:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:48:16Z"}, "message": "[multiple changes]\n\n2017-09-08  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Issue more precise error messages on\n\tLoop_Variant.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_attr.adb (Build_Record_VS_Func): If the record is an\n\tunchecked union, do not emit checks for its (non-existent)\n\tdiscriminants, or for variant parts that depend on them.\n\n2017-09-08  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch4.adb (Find_Equality_Types.Try_One_Interp,\n\tFind_Comparison_Type.Try_One_Interp): Add check for generic\n\tinstances.\n\nFrom-SVN: r251878", "tree": {"sha": "5ab61e73d2621586cd59cd97a37eecbdb7e32106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ab61e73d2621586cd59cd97a37eecbdb7e32106"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c468e1fba8516aa0029733406c00074c752f0aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c468e1fba8516aa0029733406c00074c752f0aee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c468e1fba8516aa0029733406c00074c752f0aee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c468e1fba8516aa0029733406c00074c752f0aee/comments", "author": null, "committer": null, "parents": [{"sha": "f8f50235dbda237d921d2201744455e0257766b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f50235dbda237d921d2201744455e0257766b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f50235dbda237d921d2201744455e0257766b8"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "97a59e422b38f3d286011584be7ce04c9a2a445e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468e1fba8516aa0029733406c00074c752f0aee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468e1fba8516aa0029733406c00074c752f0aee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c468e1fba8516aa0029733406c00074c752f0aee", "patch": "@@ -1,3 +1,20 @@\n+2017-09-08  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Issue more precise error messages on\n+\tLoop_Variant.\n+\n+2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Build_Record_VS_Func): If the record is an\n+\tunchecked union, do not emit checks for its (non-existent)\n+\tdiscriminants, or for variant parts that depend on them.\n+\n+2017-09-08  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch4.adb (Find_Equality_Types.Try_One_Interp,\n+\tFind_Comparison_Type.Try_One_Interp): Add check for generic\n+\tinstances.\n+\n 2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_ch3.adb, layout.adb, layout.ads, exp_attr.adb, debug.adb,"}, {"sha": "ebd55d8b5287d338c99c2dbd00524354cb4e9e91", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468e1fba8516aa0029733406c00074c752f0aee/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468e1fba8516aa0029733406c00074c752f0aee/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=c468e1fba8516aa0029733406c00074c752f0aee", "patch": "@@ -423,6 +423,10 @@ package body Exp_Attr is\n    --       return True;\n    --    end _Valid_Scalars;\n \n+   --  If the record type is an unchecked union, we can only check components\n+   --  in the invariant part, given that there are no discriminant values to\n+   --  select a variant.\n+\n    function Build_Record_VS_Func\n      (R_Type : Entity_Id;\n       Nod    : Node_Id) return Entity_Id\n@@ -475,7 +479,9 @@ package body Exp_Attr is\n       begin\n          Append_To (Result, Make_VS_If (E, Component_Items (CL)));\n \n-         if No (Variant_Part (CL)) then\n+         if No (Variant_Part (CL))\n+           or else Is_Unchecked_Union (R_Type)\n+         then\n             return Result;\n          end if;\n \n@@ -564,6 +570,11 @@ package body Exp_Attr is\n                elsif Field_Name = Name_uTag then\n                   null;\n \n+               elsif Ekind (Def_Id) = E_Discriminant\n+                 and then Is_Unchecked_Union (R_Type)\n+               then\n+                  null;\n+\n                --  Don't bother with component with no scalar components\n \n                elsif not Scalar_Part_Present (Etype (Def_Id)) then"}, {"sha": "7cdf9e8ea67907995acffaf0504f24f44071d1d7", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468e1fba8516aa0029733406c00074c752f0aee/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468e1fba8516aa0029733406c00074c752f0aee/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=c468e1fba8516aa0029733406c00074c752f0aee", "patch": "@@ -6287,10 +6287,16 @@ package body Sem_Ch4 is\n \n          --  If the operator is an expanded name, then the type of the operand\n          --  must be defined in the corresponding scope. If the type is\n-         --  universal, the context will impose the correct type.\n+         --  universal, the context will impose the correct type. Note that we\n+         --  also avoid returning if we are currently within a generic instance\n+         --  due to the fact that the generic package declaration has already\n+         --  been successfully analyzed and Defined_In_Scope expects the base\n+         --  type to be defined within the instance which will never be the\n+         --  case.\n \n          if Present (Scop)\n            and then not Defined_In_Scope (T1, Scop)\n+           and then not In_Instance\n            and then T1 /= Universal_Integer\n            and then T1 /= Universal_Real\n            and then T1 /= Any_String\n@@ -6311,7 +6317,6 @@ package body Sem_Ch4 is\n                else\n                   T_F := It.Typ;\n                end if;\n-\n             else\n                Found := True;\n                T_F   := T1;\n@@ -6320,7 +6325,6 @@ package body Sem_Ch4 is\n \n             Set_Etype (L, T_F);\n             Find_Non_Universal_Interpretations (N, R, Op_Id, T1);\n-\n          end if;\n       end Try_One_Interp;\n \n@@ -6472,7 +6476,15 @@ package body Sem_Ch4 is\n          --  is declared in Standard, and preference rules apply to it.\n \n          if Present (Scop) then\n+\n+            --  Note that we avoid returning if we are currently within a\n+            --  generic instance due to the fact that the generic package\n+            --  declaration has already been successfully analyzed and\n+            --  Defined_In_Scope expects the base type to be defined within the\n+            --  instance which will never be the case.\n+\n             if Defined_In_Scope (T1, Scop)\n+              or else In_Instance\n               or else T1 = Universal_Integer\n               or else T1 = Universal_Real\n               or else T1 = Any_Access"}, {"sha": "373fcdad1b9192947d654095b8fe621d95047ff8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468e1fba8516aa0029733406c00074c752f0aee/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468e1fba8516aa0029733406c00074c752f0aee/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c468e1fba8516aa0029733406c00074c752f0aee", "patch": "@@ -17916,10 +17916,40 @@ package body Sem_Prag is\n \n             Variant := First (Pragma_Argument_Associations (N));\n             while Present (Variant) loop\n-               if not Nam_In (Chars (Variant), Name_Decreases,\n-                                               Name_Increases)\n+               if Chars (Variant) = No_Name then\n+                  Error_Pragma_Arg (\"expect name `Increases`\", Variant);\n+\n+               elsif not Nam_In (Chars (Variant), Name_Decreases,\n+                                                  Name_Increases)\n                then\n-                  Error_Pragma_Arg (\"wrong change modifier\", Variant);\n+                  declare\n+                     Name : constant String :=\n+                       Get_Name_String (Chars (Variant));\n+                  begin\n+                     --  It is a common mistake to write \"Increasing\" for\n+                     --  \"Increases\" or \"Decreasing\" for \"Decreases\". Recognize\n+                     --  specially names starting with \"Incr\" or \"Decr\" to\n+                     --  suggest the corresponding name.\n+\n+                     if Name'Length >= 4\n+                       and then (Name (1 .. 4) = \"Incr\"\n+                                   or else Name (1 .. 4) = \"incr\")\n+                     then\n+                        Error_Pragma_Arg_Ident\n+                          (\"expect name `Increases`\", Variant);\n+\n+                     elsif Name'Length >= 4\n+                       and then (Name (1 .. 4) = \"Decr\"\n+                                   or else Name (1 .. 4) = \"decr\")\n+                     then\n+                        Error_Pragma_Arg_Ident\n+                          (\"expect name `Decreases`\", Variant);\n+\n+                     else\n+                        Error_Pragma_Arg_Ident\n+                          (\"expect name `Increases` or `Decreases`\", Variant);\n+                     end if;\n+                  end;\n                end if;\n \n                Preanalyze_Assert_Expression"}]}