{"sha": "0faa05629e036ed79335e55c1473458c642278a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhYTA1NjI5ZTAzNmVkNzkzMzVlNTVjMTQ3MzQ1OGM2NDIyNzhhOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-24T12:33:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-24T12:33:49Z"}, "message": "tree-flow.h (create_var_ann): Remove.\n\n2012-05-24  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (create_var_ann): Remove.\n\t* tree-dfa.c (create_var_ann): Remove and inline into its\n\tsingle caller ...\n\t(add_referenced_var_1): ... here.\n\t* varpool.c (add_new_static_var): Do not call add_referenced_var\n\tfor global vars.\n\t* gimple-fold.c (canonicalize_constructor_val): Likewise.\n\t* tree-switch-conversion.c (build_one_array): Likewise.\n\t* tree-profile.c (gimple_gen_ic_profiler): Likewise.\n\t* tree-flow-inline.h (gimple_referenced_vars): Guard against\n\tNULL fn argument.\n\t* tree-inline.c (remap_gimple_op_r): Likewise.  Check\n\tgimple_referenced_vars instead of gimple_in_ssa_p.\n\t(copy_tree_body_r): Likewise.\n\t(setup_one_parameter): Likewise.\n\t(declare_return_variable): Likewise.\n\t(tree_function_versioning): Likewise.\n\nFrom-SVN: r187829", "tree": {"sha": "75e0e3fd63130e66ee5ef53fc1590ec6a8160b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75e0e3fd63130e66ee5ef53fc1590ec6a8160b24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0faa05629e036ed79335e55c1473458c642278a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0faa05629e036ed79335e55c1473458c642278a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0faa05629e036ed79335e55c1473458c642278a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0faa05629e036ed79335e55c1473458c642278a8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5a9e784849c3fe7ae59c4a328ccffa60b1d32f"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "5188cdb351abc7dc6cdbcb993c8c9a6b04065854", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -1,3 +1,23 @@\n+2012-05-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (create_var_ann): Remove.\n+\t* tree-dfa.c (create_var_ann): Remove and inline into its\n+\tsingle caller ...\n+\t(add_referenced_var_1): ... here.\n+\t* varpool.c (add_new_static_var): Do not call add_referenced_var\n+\tfor global vars.\n+\t* gimple-fold.c (canonicalize_constructor_val): Likewise.\n+\t* tree-switch-conversion.c (build_one_array): Likewise.\n+\t* tree-profile.c (gimple_gen_ic_profiler): Likewise.\n+\t* tree-flow-inline.h (gimple_referenced_vars): Guard against\n+\tNULL fn argument.\n+\t* tree-inline.c (remap_gimple_op_r): Likewise.  Check\n+\tgimple_referenced_vars instead of gimple_in_ssa_p.\n+\t(copy_tree_body_r): Likewise.\n+\t(setup_one_parameter): Likewise.\n+\t(declare_return_variable): Likewise.\n+\t(tree_function_versioning): Likewise.\n+\n 2012-05-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/53465"}, {"sha": "9358bf80f5c57d491b537271e2591d1d00b66175", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -164,7 +164,8 @@ canonicalize_constructor_val (tree cval, tree from_decl)\n       if (TREE_CODE (base) == VAR_DECL)\n \t{\n \t  TREE_ADDRESSABLE (base) = 1;\n-\t  if (cfun && gimple_referenced_vars (cfun))\n+\t  if (cfun && gimple_referenced_vars (cfun)\n+\t      && !is_global_var (base))\n \t    add_referenced_var (base);\n \t}\n       else if (TREE_CODE (base) == FUNCTION_DECL)"}, {"sha": "2c6393367d583bec7214ac5c7e32fbe78e9fc9fa", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -118,27 +118,6 @@ struct gimple_opt_pass pass_referenced_vars =\n };\n \n \n-/*---------------------------------------------------------------------------\n-\t\t\t    Manage annotations\n----------------------------------------------------------------------------*/\n-/* Create a new annotation for a _DECL node T.  */\n-\n-var_ann_t\n-create_var_ann (tree t)\n-{\n-  var_ann_t ann;\n-\n-  gcc_assert (t);\n-  gcc_assert (TREE_CODE (t) == VAR_DECL\n-\t      || TREE_CODE (t) == PARM_DECL\n-\t      || TREE_CODE (t) == RESULT_DECL);\n-\n-  ann = ggc_alloc_cleared_var_ann_d ();\n-  *DECL_VAR_ANN_PTR (t) = ann;\n-\n-  return ann;\n-}\n-\n /* Renumber all of the gimple stmt uids.  */\n \n void\n@@ -587,7 +566,7 @@ add_referenced_var_1 (tree var, struct function *fn)\n     return false;\n \n   if (!*DECL_VAR_ANN_PTR (var))\n-    create_var_ann (var);\n+    *DECL_VAR_ANN_PTR (var) = ggc_alloc_cleared_var_ann_d ();\n \n   /* Insert VAR into the referenced_vars hash table if it isn't present.  */\n   if (referenced_var_check_and_insert (var, fn))"}, {"sha": "748a97c236e88f6a3122b2813e1f00e6577010a6", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -39,7 +39,7 @@ gimple_in_ssa_p (const struct function *fun)\n static inline htab_t\n gimple_referenced_vars (const struct function *fun)\n {\n-  if (!fun->gimple_df)\n+  if (!fun || !fun->gimple_df)\n     return NULL;\n   return fun->gimple_df->referenced_vars;\n }"}, {"sha": "4394b2891bd15ac5d643d29ec33d998aaabc4850", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -482,7 +482,6 @@ extern int op_prio (const_tree);\n extern const char *op_symbol_code (enum tree_code);\n \n /* In tree-dfa.c  */\n-extern var_ann_t create_var_ann (tree);\n extern void renumber_gimple_stmt_uids (void);\n extern void renumber_gimple_stmt_uids_in_blocks (basic_block *, int);\n extern void dump_dfa_stats (FILE *);"}, {"sha": "a987ff0f8aec815c262a926c3dcd944519dbb3ad", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -876,8 +876,8 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n \n       /* Global variables we haven't seen yet need to go into referenced\n \t vars.  If not referenced from types only.  */\n-      if (gimple_in_ssa_p (cfun)\n-\t  && TREE_CODE (*tp) == VAR_DECL\n+      if (gimple_referenced_vars (cfun)\n+\t  && TREE_CODE (*tp) == VAR_DECL && !is_global_var (*tp)\n \t  && id->remapping_type_depth == 0\n \t  && !processing_debug_stmt)\n \tadd_referenced_var (*tp);\n@@ -1119,8 +1119,8 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \n       /* Global variables we haven't seen yet needs to go into referenced\n \t vars.  If not referenced from types or debug stmts only.  */\n-      if (gimple_in_ssa_p (cfun)\n-\t  && TREE_CODE (*tp) == VAR_DECL\n+      if (gimple_referenced_vars (cfun)\n+\t  && TREE_CODE (*tp) == VAR_DECL && !is_global_var (*tp)\n \t  && id->remapping_type_depth == 0\n \t  && !processing_debug_stmt)\n \tadd_referenced_var (*tp);\n@@ -2604,11 +2604,11 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n   /* We are eventually using the value - make sure all variables\n      referenced therein are properly recorded.  */\n   if (value\n-      && gimple_in_ssa_p (cfun)\n+      && gimple_referenced_vars (cfun)\n       && TREE_CODE (value) == ADDR_EXPR)\n     {\n       tree base = get_base_address (TREE_OPERAND (value, 0));\n-      if (base && TREE_CODE (base) == VAR_DECL)\n+      if (base && TREE_CODE (base) == VAR_DECL && !is_global_var (base))\n \tadd_referenced_var (base);\n     }\n \n@@ -2917,7 +2917,7 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n   gcc_assert (TREE_CODE (TYPE_SIZE_UNIT (callee_type)) == INTEGER_CST);\n \n   var = copy_result_decl_to_var (result, id);\n-  if (gimple_in_ssa_p (cfun))\n+  if (gimple_referenced_vars (cfun))\n     add_referenced_var (var);\n \n   DECL_SEEN_IN_BIND_EXPR_P (var) = 1;\n@@ -2978,7 +2978,7 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n       && !is_gimple_val (var))\n     {\n       tree temp = create_tmp_var (TREE_TYPE (result), \"retvalptr\");\n-      if (gimple_in_ssa_p (id->src_cfun))\n+      if (gimple_referenced_vars (cfun))\n \tadd_referenced_var (temp);\n       insert_decl_map (id, result, temp);\n       /* When RESULT_DECL is in SSA form, we need to remap and initialize\n@@ -5194,10 +5194,8 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \n \t    if (TREE_CODE (op) == ADDR_EXPR)\n \t      {\n-\t\top = TREE_OPERAND (op, 0);\n-\t\twhile (handled_component_p (op))\n-\t\t  op = TREE_OPERAND (op, 0);\n-\t\tif (TREE_CODE (op) == VAR_DECL)\n+\t\top = get_base_address (TREE_OPERAND (op, 0));\n+\t\tif (op && TREE_CODE (op) == VAR_DECL && !is_global_var (op))\n \t\t  add_referenced_var (op);\n \t      }\n \t    gcc_assert (TREE_CODE (replace_info->old_tree) == PARM_DECL);"}, {"sha": "94616262babe903f7f9bc3b6eec233a760cd0b47", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -347,7 +347,6 @@ gimple_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n   gimple_assign_set_lhs (stmt2, make_ssa_name (tmp1, stmt2));\n   find_referenced_vars_in (stmt2);\n   stmt3 = gimple_build_assign (ic_void_ptr_var, gimple_assign_lhs (stmt2));\n-  add_referenced_var (ic_void_ptr_var);\n \n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt2, GSI_SAME_STMT);\n@@ -383,11 +382,9 @@ gimple_gen_ic_func_profiler (void)\n   counter_ptr = force_gimple_operand_gsi (&gsi, ic_gcov_type_ptr_var,\n \t\t\t\t\t  true, NULL_TREE, true,\n \t\t\t\t\t  GSI_SAME_STMT);\n-  add_referenced_var (ic_gcov_type_ptr_var);\n   ptr_var = force_gimple_operand_gsi (&gsi, ic_void_ptr_var,\n \t\t\t\t      true, NULL_TREE, true,\n \t\t\t\t      GSI_SAME_STMT);\n-  add_referenced_var (ic_void_ptr_var);\n   tree_uid = build_int_cst (gcov_type_node, current_function_funcdef_no);\n   stmt1 = gimple_build_call (tree_indirect_call_profiler_fn, 4,\n \t\t\t     counter_ptr, tree_uid, cur_func, ptr_var);"}, {"sha": "def6f5d3e1afeeb2c56cc9d55bbb70122fd7ed2e", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -630,7 +630,6 @@ build_one_array (gimple swtch, int num, tree arr_index_type, gimple phi,\n       DECL_ARTIFICIAL (decl) = 1;\n       TREE_CONSTANT (decl) = 1;\n       TREE_READONLY (decl) = 1;\n-      add_referenced_var (decl);\n       varpool_finalize_decl (decl);\n \n       fetch = build4 (ARRAY_REF, value_type, decl, tidx, NULL_TREE,"}, {"sha": "487413ded6d5d85d04551ab439d9a2299ef958fc", "filename": "gcc/varpool.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0faa05629e036ed79335e55c1473458c642278a8/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=0faa05629e036ed79335e55c1473458c642278a8", "patch": "@@ -458,7 +458,6 @@ add_new_static_var (tree type)\n   DECL_ABSTRACT (new_decl) = 0;\n   lang_hooks.dup_lang_specific_decl (new_decl);\n   new_node = varpool_node (new_decl);\n-  add_referenced_var (new_decl);\n   varpool_finalize_decl (new_decl);\n \n   return new_node->symbol.decl;"}]}