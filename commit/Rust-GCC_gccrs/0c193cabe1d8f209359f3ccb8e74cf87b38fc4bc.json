{"sha": "0c193cabe1d8f209359f3ccb8e74cf87b38fc4bc", "node_id": "C_kwDOANBUbNoAKDBjMTkzY2FiZTFkOGYyMDkzNTlmM2NjYjhlNzRjZjg3YjM4ZmM0YmM", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2023-01-20T22:24:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2023-01-20T22:24:13Z"}, "message": "libbacktrace: change PC variables from uint64_t to uintptr_t\n\n\tChange variables holding PC values from uint64_t to uintptr_t.\n\tPatch by Bj\u00f6rn Sch\u00e4pers.\n\t* dwarf.c (struct function_addrs): Change low and high fields to\n\tuintptr_t.\n\t(struct unit_addrs): Likewise.\n\t(resolve_addr_index): Change address parameter to uintptr_t*.\n\t(add_unit_addr): Change lowpc and highpc parameters to uintptr_t.\n\t(add_function_range): Likewise.\n\t(struct pcrange): Change lowpc and highpc fields to uintptr_t.\n\t(add_low_high_range): Change add_range lowpc and highpc parameters\n\tto uintptr_t.\n\t(add_ranges_from_ranges): Likewise.\n\t(add_ranges_from_rnglists): Likewise.\n\t(add_low_high_range): Chnage lowpc and highpc variables to\n\tuintpr_t.\n\t(add_ranges_from_rnglists): Change some local variables to\n\tuintptr_t.\n\t(add_ranges_from_ranges): Change base parameter to uintptr_t.\n\t(add_ranges_from_rnglists): Likewise.\n\t(read_function_entry): Likewise.\n\t(resolve_addr_index): Add explicit casts to uintptr_t.\n\t(update_pcrange): Likewise.\n\t(add_ranges_from_ranges): Likewise.\n\t(add_ranges_from_rnglists): Likewise.\n\t(read_function_entry): Likewise.", "tree": {"sha": "498ea4f920b7c0fc85c1c993d04766446a9592dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/498ea4f920b7c0fc85c1c993d04766446a9592dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c193cabe1d8f209359f3ccb8e74cf87b38fc4bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c193cabe1d8f209359f3ccb8e74cf87b38fc4bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c193cabe1d8f209359f3ccb8e74cf87b38fc4bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c193cabe1d8f209359f3ccb8e74cf87b38fc4bc/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71354f7b99716c47e885851280376574920da92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71354f7b99716c47e885851280376574920da92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71354f7b99716c47e885851280376574920da92"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "8ff1fb3ce3d7688211a99c1443f4df1425da6297", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c193cabe1d8f209359f3ccb8e74cf87b38fc4bc/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c193cabe1d8f209359f3ccb8e74cf87b38fc4bc/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=0c193cabe1d8f209359f3ccb8e74cf87b38fc4bc", "patch": "@@ -136,7 +136,7 @@ enum attr_val_encoding\n   /* An address.  */\n   ATTR_VAL_ADDRESS,\n   /* An index into the .debug_addr section, whose value is relative to\n-   * the DW_AT_addr_base attribute of the compilation unit.  */\n+     the DW_AT_addr_base attribute of the compilation unit.  */\n   ATTR_VAL_ADDRESS_INDEX,\n   /* A unsigned integer.  */\n   ATTR_VAL_UINT,\n@@ -274,8 +274,8 @@ struct function\n struct function_addrs\n {\n   /* Range is LOW <= PC < HIGH.  */\n-  uint64_t low;\n-  uint64_t high;\n+  uintptr_t low;\n+  uintptr_t high;\n   /* Function for this address range.  */\n   struct function *function;\n };\n@@ -356,8 +356,8 @@ struct unit\n struct unit_addrs\n {\n   /* Range is LOW <= PC < HIGH.  */\n-  uint64_t low;\n-  uint64_t high;\n+  uintptr_t low;\n+  uintptr_t high;\n   /* Compilation unit for this address range.  */\n   struct unit *u;\n };\n@@ -1094,7 +1094,7 @@ resolve_addr_index (const struct dwarf_sections *dwarf_sections,\n \t\t    uint64_t addr_base, int addrsize, int is_bigendian,\n \t\t    uint64_t addr_index,\n \t\t    backtrace_error_callback error_callback, void *data,\n-\t\t    uint64_t *address)\n+\t\t    uintptr_t *address)\n {\n   uint64_t offset;\n   struct dwarf_buf addr_buf;\n@@ -1115,7 +1115,7 @@ resolve_addr_index (const struct dwarf_sections *dwarf_sections,\n   addr_buf.data = data;\n   addr_buf.reported_underflow = 0;\n \n-  *address = read_address (&addr_buf, addrsize);\n+  *address = (uintptr_t) read_address (&addr_buf, addrsize);\n   return 1;\n }\n \n@@ -1194,7 +1194,7 @@ function_addrs_search (const void *vkey, const void *ventry)\n \n static int\n add_unit_addr (struct backtrace_state *state, void *rdata,\n-\t       uint64_t lowpc, uint64_t highpc,\n+\t       uintptr_t lowpc, uintptr_t highpc,\n \t       backtrace_error_callback error_callback, void *data,\n \t       void *pvec)\n {\n@@ -1530,10 +1530,10 @@ lookup_abbrev (struct abbrevs *abbrevs, uint64_t code,\n    lowpc/highpc is set or ranges is set.  */\n \n struct pcrange {\n-  uint64_t lowpc;\t\t/* The low PC value.  */\n+  uintptr_t lowpc;             /* The low PC value.  */\n   int have_lowpc;\t\t/* Whether a low PC value was found.  */\n   int lowpc_is_addr_index;\t/* Whether lowpc is in .debug_addr.  */\n-  uint64_t highpc;\t\t/* The high PC value.  */\n+  uintptr_t highpc;            /* The high PC value.  */\n   int have_highpc;\t\t/* Whether a high PC value was found.  */\n   int highpc_is_relative;\t/* Whether highpc is relative to lowpc.  */\n   int highpc_is_addr_index;\t/* Whether highpc is in .debug_addr.  */\n@@ -1553,12 +1553,12 @@ update_pcrange (const struct attr* attr, const struct attr_val* val,\n     case DW_AT_low_pc:\n       if (val->encoding == ATTR_VAL_ADDRESS)\n \t{\n-\t  pcrange->lowpc = val->u.uint;\n+\t  pcrange->lowpc = (uintptr_t) val->u.uint;\n \t  pcrange->have_lowpc = 1;\n \t}\n       else if (val->encoding == ATTR_VAL_ADDRESS_INDEX)\n \t{\n-\t  pcrange->lowpc = val->u.uint;\n+\t  pcrange->lowpc = (uintptr_t) val->u.uint;\n \t  pcrange->have_lowpc = 1;\n \t  pcrange->lowpc_is_addr_index = 1;\n \t}\n@@ -1567,18 +1567,18 @@ update_pcrange (const struct attr* attr, const struct attr_val* val,\n     case DW_AT_high_pc:\n       if (val->encoding == ATTR_VAL_ADDRESS)\n \t{\n-\t  pcrange->highpc = val->u.uint;\n+\t  pcrange->highpc = (uintptr_t) val->u.uint;\n \t  pcrange->have_highpc = 1;\n \t}\n       else if (val->encoding == ATTR_VAL_UINT)\n \t{\n-\t  pcrange->highpc = val->u.uint;\n+\t  pcrange->highpc = (uintptr_t) val->u.uint;\n \t  pcrange->have_highpc = 1;\n \t  pcrange->highpc_is_relative = 1;\n \t}\n       else if (val->encoding == ATTR_VAL_ADDRESS_INDEX)\n \t{\n-\t  pcrange->highpc = val->u.uint;\n+\t  pcrange->highpc = (uintptr_t) val->u.uint;\n \t  pcrange->have_highpc = 1;\n \t  pcrange->highpc_is_addr_index = 1;\n \t}\n@@ -1613,16 +1613,16 @@ add_low_high_range (struct backtrace_state *state,\n \t\t    uintptr_t base_address, int is_bigendian,\n \t\t    struct unit *u, const struct pcrange *pcrange,\n \t\t    int (*add_range) (struct backtrace_state *state,\n-\t\t\t\t      void *rdata, uint64_t lowpc,\n-\t\t\t\t      uint64_t highpc,\n+\t\t\t\t      void *rdata, uintptr_t lowpc,\n+\t\t\t\t      uintptr_t highpc,\n \t\t\t\t      backtrace_error_callback error_callback,\n \t\t\t\t      void *data, void *vec),\n \t\t    void *rdata,\n \t\t    backtrace_error_callback error_callback, void *data,\n \t\t    void *vec)\n {\n-  uint64_t lowpc;\n-  uint64_t highpc;\n+  uintptr_t lowpc;\n+  uintptr_t highpc;\n \n   lowpc = pcrange->lowpc;\n   if (pcrange->lowpc_is_addr_index)\n@@ -1660,10 +1660,10 @@ add_ranges_from_ranges (\n     struct backtrace_state *state,\n     const struct dwarf_sections *dwarf_sections,\n     uintptr_t base_address, int is_bigendian,\n-    struct unit *u, uint64_t base,\n+    struct unit *u, uintptr_t base,\n     const struct pcrange *pcrange,\n     int (*add_range) (struct backtrace_state *state, void *rdata,\n-\t\t      uint64_t lowpc, uint64_t highpc,\n+\t\t      uintptr_t lowpc, uintptr_t highpc,\n \t\t      backtrace_error_callback error_callback, void *data,\n \t\t      void *vec),\n     void *rdata,\n@@ -1702,12 +1702,12 @@ add_ranges_from_ranges (\n \tbreak;\n \n       if (is_highest_address (low, u->addrsize))\n-\tbase = high;\n+\tbase = (uintptr_t) high;\n       else\n \t{\n \t  if (!add_range (state, rdata, \n-\t\t\t  low + base + base_address,\n-\t\t\t  high + base + base_address,\n+\t\t\t  (uintptr_t) low + base + base_address,\n+\t\t\t  (uintptr_t) high + base + base_address,\n \t\t\t  error_callback, data, vec))\n \t    return 0;\n \t}\n@@ -1727,10 +1727,10 @@ add_ranges_from_rnglists (\n     struct backtrace_state *state,\n     const struct dwarf_sections *dwarf_sections,\n     uintptr_t base_address, int is_bigendian,\n-    struct unit *u, uint64_t base,\n+    struct unit *u, uintptr_t base,\n     const struct pcrange *pcrange,\n     int (*add_range) (struct backtrace_state *state, void *rdata,\n-\t\t      uint64_t lowpc, uint64_t highpc,\n+\t\t      uintptr_t lowpc, uintptr_t highpc,\n \t\t      backtrace_error_callback error_callback, void *data,\n \t\t      void *vec),\n     void *rdata,\n@@ -1796,8 +1796,8 @@ add_ranges_from_rnglists (\n \tcase DW_RLE_startx_endx:\n \t  {\n \t    uint64_t index;\n-\t    uint64_t low;\n-\t    uint64_t high;\n+\t    uintptr_t low;\n+\t    uintptr_t high;\n \n \t    index = read_uleb128 (&rnglists_buf);\n \t    if (!resolve_addr_index (dwarf_sections, u->addr_base,\n@@ -1819,8 +1819,8 @@ add_ranges_from_rnglists (\n \tcase DW_RLE_startx_length:\n \t  {\n \t    uint64_t index;\n-\t    uint64_t low;\n-\t    uint64_t length;\n+\t    uintptr_t low;\n+\t    uintptr_t length;\n \n \t    index = read_uleb128 (&rnglists_buf);\n \t    if (!resolve_addr_index (dwarf_sections, u->addr_base,\n@@ -1850,16 +1850,16 @@ add_ranges_from_rnglists (\n \t  break;\n \n \tcase DW_RLE_base_address:\n-\t  base = read_address (&rnglists_buf, u->addrsize);\n+\t  base = (uintptr_t) read_address (&rnglists_buf, u->addrsize);\n \t  break;\n \n \tcase DW_RLE_start_end:\n \t  {\n-\t    uint64_t low;\n-\t    uint64_t high;\n+\t    uintptr_t low;\n+\t    uintptr_t high;\n \n-\t    low = read_address (&rnglists_buf, u->addrsize);\n-\t    high = read_address (&rnglists_buf, u->addrsize);\n+\t    low = (uintptr_t) read_address (&rnglists_buf, u->addrsize);\n+\t    high = (uintptr_t) read_address (&rnglists_buf, u->addrsize);\n \t    if (!add_range (state, rdata, low + base_address,\n \t\t\t    high + base_address, error_callback, data,\n \t\t\t    vec))\n@@ -1869,11 +1869,11 @@ add_ranges_from_rnglists (\n \n \tcase DW_RLE_start_length:\n \t  {\n-\t    uint64_t low;\n-\t    uint64_t length;\n+\t    uintptr_t low;\n+\t    uintptr_t length;\n \n-\t    low = read_address (&rnglists_buf, u->addrsize);\n-\t    length = read_uleb128 (&rnglists_buf);\n+\t    low = (uintptr_t) read_address (&rnglists_buf, u->addrsize);\n+\t    length = (uintptr_t) read_uleb128 (&rnglists_buf);\n \t    low += base_address;\n \t    if (!add_range (state, rdata, low, low + length,\n \t\t\t    error_callback, data, vec))\n@@ -1903,9 +1903,9 @@ static int\n add_ranges (struct backtrace_state *state,\n \t    const struct dwarf_sections *dwarf_sections,\n \t    uintptr_t base_address, int is_bigendian,\n-\t    struct unit *u, uint64_t base, const struct pcrange *pcrange,\n+\t    struct unit *u, uintptr_t base, const struct pcrange *pcrange,\n \t    int (*add_range) (struct backtrace_state *state, void *rdata, \n-\t\t\t      uint64_t lowpc, uint64_t highpc,\n+\t\t\t      uintptr_t lowpc, uintptr_t highpc,\n \t\t\t      backtrace_error_callback error_callback,\n \t\t\t      void *data, void *vec),\n \t    void *rdata,\n@@ -3183,7 +3183,7 @@ read_referenced_name (struct dwarf_data *ddata, struct unit *u,\n \n static int\n add_function_range (struct backtrace_state *state, void *rdata,\n-\t\t    uint64_t lowpc, uint64_t highpc,\n+\t\t    uintptr_t lowpc, uintptr_t highpc,\n \t\t    backtrace_error_callback error_callback, void *data,\n \t\t    void *pvec)\n {\n@@ -3223,7 +3223,7 @@ add_function_range (struct backtrace_state *state, void *rdata,\n \n static int\n read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n-\t\t     struct unit *u, uint64_t base, struct dwarf_buf *unit_buf,\n+\t\t     struct unit *u, uintptr_t base, struct dwarf_buf *unit_buf,\n \t\t     const struct line_header *lhdr,\n \t\t     backtrace_error_callback error_callback, void *data,\n \t\t     struct function_vector *vec_function,\n@@ -3287,7 +3287,7 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t      && abbrev->attrs[i].name == DW_AT_low_pc)\n \t    {\n \t      if (val.encoding == ATTR_VAL_ADDRESS)\n-\t\tbase = val.u.uint;\n+\t\tbase = (uintptr_t) val.u.uint;\n \t      else if (val.encoding == ATTR_VAL_ADDRESS_INDEX)\n \t\t{\n \t\t  if (!resolve_addr_index (&ddata->dwarf_sections,"}]}