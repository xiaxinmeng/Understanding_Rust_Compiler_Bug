{"sha": "90af599007327974978d9eac58996e71e0f24663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBhZjU5OTAwNzMyNzk3NDk3OGQ5ZWFjNTg5OTZlNzFlMGYyNDY2Mw==", "commit": {"author": {"name": "John Marino", "email": "gnugcc@marino.st", "date": "2015-06-08T07:27:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-08T07:27:56Z"}, "message": "configure.ac (*-*-dragonfly*): New configuration.\n\ngnattools/\n\t* configure.ac (*-*-dragonfly*): New configuration.\n\t* configure: Regenerate.\ngcc/ada/\n\t* a-intnam-dragonfly.ads: New.\n\t* s-osinte-dragonfly.adb: Likewise.\n\t* s-osinte-dragonfly.ads: Likewise.\n\t* system-dragonfly-x86_64.ads: Likewise.\n\t* adaint.c: Add BSD macros.\n\t* cstreams.c: Likewise.\n\t* gsocket.h: Likewise.\n\t* link.c: Likewise.\n\t* socket.c: Likewise.\n\t* env.c: Add __DragonFly__, remove __FreeBSD__ macro.\n\t* init.c: Add __DragonFly__, change __gnat_install_handler\n\tprototype from empty to void.\n\t* initialize.c: Add __DragonFly__.\n\t* sysdep.c: Likewise.\n\t* s-osinte-freebsd.adb: Use __get_errno instead of __error.\n\t* tracebak.c: Set unwinder for i386 BSD.\n\t* gcc-interface/Makefile.in: Add x86_64 DragonFly, tweak\n\tx86_64 FreeBSD and x86 FreeBSD.\n\nFrom-SVN: r224207", "tree": {"sha": "140536a75e83c90805df0c8fccec94af3a96c835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/140536a75e83c90805df0c8fccec94af3a96c835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90af599007327974978d9eac58996e71e0f24663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90af599007327974978d9eac58996e71e0f24663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90af599007327974978d9eac58996e71e0f24663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90af599007327974978d9eac58996e71e0f24663/comments", "author": null, "committer": null, "parents": [{"sha": "1dbb8d2d3dd1fcf93b4fe0f6f26771ea586abb73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbb8d2d3dd1fcf93b4fe0f6f26771ea586abb73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbb8d2d3dd1fcf93b4fe0f6f26771ea586abb73"}], "stats": {"total": 1052, "additions": 1022, "deletions": 30}, "files": [{"sha": "61509aa9d13e3398f4875a362a930904b05b7de1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -1,3 +1,24 @@\n+2015-06-08  John Marino  <gnugcc@marino.st>\n+\n+\t* a-intnam-dragonfly.ads: New.\n+\t* s-osinte-dragonfly.adb: Likewise.\n+\t* s-osinte-dragonfly.ads: Likewise.\n+\t* system-dragonfly-x86_64.ads: Likewise.\n+\t* adaint.c: Add BSD macros.\n+\t* cstreams.c: Likewise.\n+\t* gsocket.h: Likewise.\n+\t* link.c: Likewise.\n+\t* socket.c: Likewise.\n+\t* env.c: Add __DragonFly__, remove __FreeBSD__ macro.\n+\t* init.c: Add __DragonFly__, change __gnat_install_handler\n+\tprototype from empty to void.\n+\t* initialize.c: Add __DragonFly__.\n+\t* sysdep.c: Likewise.\n+\t* s-osinte-freebsd.adb: Use __get_errno instead of __error.\n+\t* tracebak.c: Set unwinder for i386 BSD.\n+\t* gcc-interface/Makefile.in: Add x86_64 DragonFly, tweak\n+\tx86_64 FreeBSD and x86 FreeBSD.\n+\n 2015-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (note_types_used_by_globals): Tweak comment."}, {"sha": "1de973523f5a0b436b593a6e08aa42bdaa8e0cf5", "filename": "gcc/ada/a-intnam-dragonfly.ads", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fa-intnam-dragonfly.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fa-intnam-dragonfly.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-dragonfly.ads?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -0,0 +1,136 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--          Copyright (C) 1991-2015, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the DragonFly BSD THREADS version of this package\n+\n+with System.OS_Interface;\n+\n+package Ada.Interrupts.Names is\n+\n+   --  All identifiers in this unit are implementation defined\n+\n+   pragma Implementation_Defined;\n+\n+   --  Beware that the mapping of names to signals may be many-to-one. There\n+   --  may be aliases. Also, for all signal names that are not supported on\n+   --  the current system the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+end Ada.Interrupts.Names;"}, {"sha": "813d2c1f7d646b246287267d2779fdc54bdaf2d3", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -744,7 +744,7 @@ __gnat_rmdir (char *path)\n }\n \n #if defined (_WIN32) || defined (__linux__) || defined (__sun__) \\\n-  || defined (__FreeBSD__)\n+  || defined (__FreeBSD__) || defined(__DragonFly__)\n #define HAS_TARGET_WCHAR_T\n #endif\n \n@@ -982,7 +982,8 @@ __gnat_open_new_temp (char *path, int fmode)\n   strcpy (path, \"GNAT-XXXXXX\");\n \n #if (defined (__FreeBSD__) || defined (__NetBSD__) || defined (__OpenBSD__) \\\n-  || defined (__linux__) || defined (__GLIBC__)) && !defined (__vxworks)\n+  || defined (__linux__) || defined (__GLIBC__)) && !defined (__vxworks) \\\n+  || defined (__DragonFly__)\n   return mkstemp (path);\n #elif defined (__Lynx__)\n   mktemp (path);\n@@ -1154,7 +1155,8 @@ __gnat_tmp_name (char *tmp_filename)\n   }\n \n #elif defined (__linux__) || defined (__FreeBSD__) || defined (__NetBSD__) \\\n-  || defined (__OpenBSD__) || defined (__GLIBC__) || defined (__ANDROID__)\n+  || defined (__OpenBSD__) || defined (__GLIBC__) || defined (__ANDROID__) \\\n+  || defined (__DragonFly__)\n #define MAX_SAFE_PATH 1000\n   char *tmpdir = getenv (\"TMPDIR\");\n \n@@ -2268,7 +2270,8 @@ __gnat_number_of_cpus (void)\n   int cores = 1;\n \n #if defined (__linux__) || defined (__sun__) || defined (_AIX) \\\n-  || defined (__APPLE__)\n+  || defined (__APPLE__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n+  || defined (__DragonFly__) || defined (__NetBSD__)\n   cores = (int) sysconf (_SC_NPROCESSORS_ONLN);\n \n #elif defined (__hpux__)"}, {"sha": "915e4a3db1c22e5bab3584caacded8db42c55fb6", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -192,7 +192,7 @@ __gnat_full_name (char *nam, char *buffer)\n \t  *p = '\\\\';\n     }\n \n-#elif defined (__FreeBSD__)\n+#elif defined (__FreeBSD__) || defined (__DragonFly__) || defined (__OpenBSD__)\n \n   /* Use realpath function which resolves links and references to . and ..\n      on those Unix systems that support it. Note that GNU/Linux provides it but"}, {"sha": "1bf9ef06076caa0c146d80fb18e38c42e3cb43ae", "filename": "gcc/ada/env.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -192,12 +192,9 @@ __gnat_setenv (char *name, char *value)\n \n   sprintf (expression, \"%s=%s\", name, value);\n   putenv (expression);\n-#if (defined (__FreeBSD__) && (__FreeBSD__ < 7)) \\\n-   || defined (__MINGW32__) \\\n-   ||(defined (__vxworks) && ! defined (__RTP__))\n-  /* On some systems like FreeBSD 6.x and earlier, MacOS X and Windows,\n-     putenv is making a copy of the expression string so we can free\n-     it after the call to putenv */\n+#if defined (__MINGW32__) || (defined (__vxworks) && ! defined (__RTP__))\n+  /* On some systems like MacOS X and Windows, putenv is making a copy of the\n+     expression string so we can free it after the call to putenv */\n   free (expression);\n #endif\n #endif\n@@ -304,7 +301,8 @@ void __gnat_clearenv (void)\n   }\n #elif defined (__MINGW32__) || defined (__FreeBSD__) || defined (__APPLE__) \\\n    || (defined (__vxworks) && defined (__RTP__)) || defined (__CYGWIN__) \\\n-   || defined (__NetBSD__) || defined (__OpenBSD__) || defined (__rtems__)\n+   || defined (__NetBSD__) || defined (__OpenBSD__) || defined (__rtems__) \\\n+   || defined (__DragonFly__)\n   /* On Windows, FreeBSD and MacOS there is no function to clean all the\n      environment but there is a \"clean\" way to unset a variable. So go\n      through the environ table and call __gnat_unsetenv on all entries */"}, {"sha": "6e24fa5c67c7e8e0687e3f2a05f2357f2dd52c95", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -1425,6 +1425,7 @@ ifeq ($(strip $(filter-out %86 freebsd%,$(target_cpu) $(target_os))),)\n   a-intnam.ads<a-intnam-freebsd.ads \\\n   s-inmaop.adb<s-inmaop-posix.adb \\\n   s-intman.adb<s-intman-posix.adb \\\n+  s-mudido.adb<s-mudido-affinity.adb \\\n   s-osinte.adb<s-osinte-freebsd.adb \\\n   s-osinte.ads<s-osinte-freebsd.ads \\\n   s-osprim.adb<s-osprim-posix.adb \\\n@@ -1454,6 +1455,7 @@ ifeq ($(strip $(filter-out %86_64 freebsd%,$(target_cpu) $(target_os))),)\n   a-intnam.ads<a-intnam-freebsd.ads \\\n   s-inmaop.adb<s-inmaop-posix.adb \\\n   s-intman.adb<s-intman-posix.adb \\\n+  s-mudido.adb<s-mudido-affinity.adb \\\n   s-osinte.adb<s-osinte-freebsd.adb \\\n   s-osinte.ads<s-osinte-freebsd.ads \\\n   s-osprim.adb<s-osprim-posix.adb \\\n@@ -1477,6 +1479,36 @@ ifeq ($(strip $(filter-out %86_64 freebsd%,$(target_cpu) $(target_os))),)\n   MISCLIB = -lutil\n endif\n \n+# x86-64 DragonFly\n+ifeq ($(strip $(filter-out %86_64 dragonfly%,$(target_cpu) $(target_os))),)\n+  LIBGNAT_TARGET_PAIRS = \\\n+  a-intnam.ads<a-intnam-dragonfly.ads \\\n+  s-inmaop.adb<s-inmaop-posix.adb \\\n+  s-intman.adb<s-intman-posix.adb \\\n+  s-mudido.adb<s-mudido-affinity.adb \\\n+  s-osinte.adb<s-osinte-dragonfly.adb \\\n+  s-osinte.ads<s-osinte-dragonfly.ads \\\n+  s-osprim.adb<s-osprim-posix.adb \\\n+  s-taprop.adb<s-taprop-posix.adb \\\n+  s-taspri.ads<s-taspri-posix.ads \\\n+  s-tpopsp.adb<s-tpopsp-posix.adb \\\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(X86_64_TARGET_PAIRS) \\\n+  system.ads<system-dragonfly-x86_64.ads\n+\n+  TOOLS_TARGET_PAIRS = \\\n+  mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb\n+  GNATLIB_SHARED = gnatlib-shared-dual\n+\n+  EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n+\n+  EH_MECHANISM=-gcc\n+  THREADSLIB= -lpthread\n+  GMEM_LIB = gmemlib\n+  LIBRARY_VERSION := $(LIB_VERSION)\n+  MISCLIB = -lutil\n+endif\n+\n # S390 Linux\n ifeq ($(strip $(filter-out s390% linux%,$(target_cpu) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS_COMMON = \\"}, {"sha": "31a3ccff188045a6ac453002cf0d4779cc8d60de", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -209,7 +209,8 @@\n #endif\n \n #if defined (_AIX) || defined (__FreeBSD__) || defined (__hpux__) || \\\n-    defined (_WIN32) || defined (__APPLE__) || defined (__ANDROID__)\n+    defined (_WIN32) || defined (__APPLE__) || defined (__ANDROID__) || \\\n+    defined (__DragonFly__) || defined (__NetBSD__) || defined (__OpenBSD__)\n # define HAVE_THREAD_SAFE_GETxxxBYyyy 1\n \n #elif defined (__linux__) || defined (__GLIBC__) || \\\n@@ -241,7 +242,8 @@\n # endif\n #endif\n \n-#if defined (__FreeBSD__) || defined (__vxworks) || defined(__rtems__)\n+#if defined (__FreeBSD__) || defined (__vxworks) || defined(__rtems__) \\\n+ || defined (__DragonFly__) || defined (__NetBSD__) || defined (__OpenBSD__)\n # define Has_Sockaddr_Len 1\n #else\n # define Has_Sockaddr_Len 0"}, {"sha": "9d9f40cd0afdb4415da189a3b3007b80f5964385", "filename": "gcc/ada/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -1628,7 +1628,7 @@ __gnat_is_vms_v7 (void)\n /* FreeBSD Section */\n /*******************/\n \n-#elif defined (__FreeBSD__)\n+#elif defined (__FreeBSD__) || defined (__DragonFly__)\n \n #include <signal.h>\n #include <sys/ucontext.h>\n@@ -1673,7 +1673,7 @@ __gnat_error_handler (int sig,\n }\n \n void\n-__gnat_install_handler ()\n+__gnat_install_handler (void)\n {\n   struct sigaction act;\n \n@@ -2523,7 +2523,7 @@ __gnat_install_handler (void)\n \n #if defined (_WIN32) || defined (__INTERIX) \\\n   || defined (__Lynx__) || defined(__NetBSD__) || defined(__FreeBSD__) \\\n-  || defined (__OpenBSD__)\n+  || defined (__OpenBSD__) || defined (__DragonFly__)\n \n #define HAVE_GNAT_INIT_FLOAT\n "}, {"sha": "54e7e8b7f85e5d180d9da18224f2016526e3278c", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2015, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -86,7 +86,7 @@ __gnat_initialize (void *eh ATTRIBUTE_UNUSED)\n /******************************************/\n \n #elif defined (__Lynx__) || defined (__FreeBSD__) || defined(__NetBSD__) \\\n-  || defined (__OpenBSD__)\n+  || defined (__OpenBSD__) || defined (__DragonFly__)\n \n void\n __gnat_initialize (void *eh ATTRIBUTE_UNUSED)"}, {"sha": "9e33a846e3bb91167d96c5d83452ff770b7b1d91", "filename": "gcc/ada/link.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -103,7 +103,8 @@ const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n \n-#elif defined (__FreeBSD__)\n+#elif defined (__FreeBSD__) || defined (__DragonFly__) \\\n+   || defined (__NetBSD__) || defined (__OpenBSD__)\n const char *__gnat_object_file_option = \"-Wl,@\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n char __gnat_shared_libgnat_default = STATIC;"}, {"sha": "dc9e19c1984e9557bed9d1847916371fffe16f78", "filename": "gcc/ada/s-osinte-dragonfly.adb", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fs-osinte-dragonfly.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fs-osinte-dragonfly.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-dragonfly.adb?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -0,0 +1,116 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                   S Y S T E M . O S _ I N T E R F A C E                  --\n+--                                                                          --\n+--                                   B o d y                                --\n+--                                                                          --\n+--          Copyright (C) 1991-2015, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the DragonFly THREADS version of this package\n+\n+with Interfaces.C; use Interfaces.C;\n+\n+package body System.OS_Interface is\n+\n+   -----------\n+   -- Errno --\n+   -----------\n+\n+   function Errno return int is\n+      type int_ptr is access all int;\n+\n+      function internal_errno return int_ptr;\n+      pragma Import (C, internal_errno, \"__get_errno\");\n+\n+   begin\n+      return (internal_errno.all);\n+   end Errno;\n+\n+   --------------------\n+   -- Get_Stack_Base --\n+   --------------------\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address is\n+      pragma Unreferenced (thread);\n+   begin\n+      return Null_Address;\n+   end Get_Stack_Base;\n+\n+   ------------------\n+   -- pthread_init --\n+   ------------------\n+\n+   procedure pthread_init is\n+   begin\n+      null;\n+   end pthread_init;\n+\n+   -----------------\n+   -- To_Duration --\n+   -----------------\n+\n+   function To_Duration (TS : timespec) return Duration is\n+   begin\n+      return Duration (TS.ts_sec) + Duration (TS.ts_nsec) / 10#1#E9;\n+   end To_Duration;\n+\n+   ------------------------\n+   -- To_Target_Priority --\n+   ------------------------\n+\n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int\n+   is\n+   begin\n+      return Interfaces.C.int (Prio);\n+   end To_Target_Priority;\n+\n+   -----------------\n+   -- To_Timespec --\n+   -----------------\n+\n+   function To_Timespec (D : Duration) return timespec is\n+      S : time_t;\n+      F : Duration;\n+\n+   begin\n+      S := time_t (Long_Long_Integer (D));\n+      F := D - Duration (S);\n+\n+      --  If F has negative value due to a round-up, adjust for positive F\n+      --  value.\n+\n+      if F < 0.0 then\n+         S := S - 1;\n+         F := F + 1.0;\n+      end if;\n+\n+      return timespec'(ts_sec => S,\n+                       ts_nsec => long (Long_Long_Integer (F * 10#1#E9)));\n+   end To_Timespec;\n+\n+end System.OS_Interface;"}, {"sha": "5d7e9ab594a5f25e3843a64cea818e46c82c423c", "filename": "gcc/ada/s-osinte-dragonfly.ads", "status": "added", "additions": 653, "deletions": 0, "changes": 653, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fs-osinte-dragonfly.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fs-osinte-dragonfly.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-dragonfly.ads?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -0,0 +1,653 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                   S Y S T E M . O S _ I N T E R F A C E                  --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--             Copyright (C) 1991-1994, Florida State University            --\n+--          Copyright (C) 1995-2015, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the DragonFly BSD PTHREADS version of this package\n+\n+--  This package encapsulates all direct interfaces to OS services\n+--  that are needed by the tasking run-time (libgnarl).\n+\n+--  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n+--  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n+\n+with Ada.Unchecked_Conversion;\n+\n+with Interfaces.C;\n+\n+package System.OS_Interface is\n+   pragma Preelaborate;\n+\n+   pragma Linker_Options (\"-pthread\");\n+\n+   subtype int            is Interfaces.C.int;\n+   subtype short          is Interfaces.C.short;\n+   subtype long           is Interfaces.C.long;\n+   subtype unsigned       is Interfaces.C.unsigned;\n+   subtype unsigned_short is Interfaces.C.unsigned_short;\n+   subtype unsigned_long  is Interfaces.C.unsigned_long;\n+   subtype unsigned_char  is Interfaces.C.unsigned_char;\n+   subtype plain_char     is Interfaces.C.plain_char;\n+   subtype size_t         is Interfaces.C.size_t;\n+\n+   -----------\n+   -- Errno --\n+   -----------\n+\n+   function Errno return int;\n+   pragma Inline (Errno);\n+\n+   EAGAIN    : constant := 35;\n+   EINTR     : constant := 4;\n+   EINVAL    : constant := 22;\n+   ENOMEM    : constant := 12;\n+   ETIMEDOUT : constant := 60;\n+\n+   -------------\n+   -- Signals --\n+   -------------\n+\n+   Max_Interrupt : constant := 31;\n+   type Signal is new int range 0 .. Max_Interrupt;\n+   for Signal'Size use int'Size;\n+\n+   SIGHUP     : constant := 1; --  hangup\n+   SIGINT     : constant := 2; --  interrupt (rubout)\n+   SIGQUIT    : constant := 3; --  quit (ASCD FS)\n+   SIGILL     : constant := 4; --  illegal instruction (not reset)\n+   SIGTRAP    : constant := 5; --  trace trap (not reset)\n+   SIGIOT     : constant := 6; --  IOT instruction\n+   SIGABRT    : constant := 6; --  used by abort, replace SIGIOT in the  future\n+   SIGEMT     : constant := 7; --  EMT instruction\n+   SIGFPE     : constant := 8; --  floating point exception\n+   SIGKILL    : constant := 9; --  kill (cannot be caught or ignored)\n+   SIGBUS     : constant := 10; --  bus error\n+   SIGSEGV    : constant := 11; --  segmentation violation\n+   SIGSYS     : constant := 12; --  bad argument to system call\n+   SIGPIPE    : constant := 13; --  write on a pipe with no one to read it\n+   SIGALRM    : constant := 14; --  alarm clock\n+   SIGTERM    : constant := 15; --  software termination signal from kill\n+   SIGURG     : constant := 16; --  urgent condition on IO channel\n+   SIGSTOP    : constant := 17; --  stop (cannot be caught or ignored)\n+   SIGTSTP    : constant := 18; --  user stop requested from tty\n+   SIGCONT    : constant := 19; --  stopped process has been continued\n+   SIGCLD     : constant := 20; --  alias for SIGCHLD\n+   SIGCHLD    : constant := 20; --  child status change\n+   SIGTTIN    : constant := 21; --  background tty read attempted\n+   SIGTTOU    : constant := 22; --  background tty write attempted\n+   SIGIO      : constant := 23; --  I/O possible (Solaris SIGPOLL alias)\n+   SIGXCPU    : constant := 24; --  CPU time limit exceeded\n+   SIGXFSZ    : constant := 25; --  filesize limit exceeded\n+   SIGVTALRM  : constant := 26; --  virtual timer expired\n+   SIGPROF    : constant := 27; --  profiling timer expired\n+   SIGWINCH   : constant := 28; --  window size change\n+   SIGINFO    : constant := 29; --  information request (BSD)\n+   SIGUSR1    : constant := 30; --  user defined signal 1\n+   SIGUSR2    : constant := 31; --  user defined signal 2\n+\n+   SIGADAABORT : constant := SIGABRT;\n+   --  Change this if you want to use another signal for task abort.\n+   --  SIGTERM might be a good one.\n+\n+   type Signal_Set is array (Natural range <>) of Signal;\n+\n+   --  Interrupts that must be unmasked at all times.  DragonFlyBSD\n+   --  pthreads will not allow an application to mask out any\n+   --  interrupt needed by the threads library.\n+   Unmasked : constant Signal_Set :=\n+     (SIGTRAP, SIGBUS, SIGTTIN, SIGTTOU, SIGTSTP);\n+\n+   --  DragonFlyBSD will uses SIGPROF for timing.  Do not allow a\n+   --  handler to attach to this signal.\n+   Reserved : constant Signal_Set := (0 .. 0 => SIGPROF);\n+\n+   type sigset_t is private;\n+\n+   function sigaddset\n+     (set : access sigset_t;\n+      sig : Signal) return int;\n+   pragma Import (C, sigaddset, \"sigaddset\");\n+\n+   function sigdelset\n+     (set : access sigset_t;\n+      sig : Signal) return int;\n+   pragma Import (C, sigdelset, \"sigdelset\");\n+\n+   function sigfillset (set : access sigset_t) return int;\n+   pragma Import (C, sigfillset, \"sigfillset\");\n+\n+   function sigismember\n+     (set : access sigset_t;\n+      sig : Signal) return int;\n+   pragma Import (C, sigismember, \"sigismember\");\n+\n+   function sigemptyset (set : access sigset_t) return int;\n+   pragma Import (C, sigemptyset, \"sigemptyset\");\n+\n+   --  sigcontext is architecture dependent, so define it private\n+   type struct_sigcontext is private;\n+\n+   type old_struct_sigaction is record\n+      sa_handler : System.Address;\n+      sa_mask    : sigset_t;\n+      sa_flags   : int;\n+   end record;\n+   pragma Convention (C, old_struct_sigaction);\n+\n+   type new_struct_sigaction is record\n+      sa_handler : System.Address;\n+      sa_flags   : int;\n+      sa_mask    : sigset_t;\n+   end record;\n+   pragma Convention (C, new_struct_sigaction);\n+\n+   subtype struct_sigaction is new_struct_sigaction;\n+   type struct_sigaction_ptr is access all struct_sigaction;\n+\n+   SIG_BLOCK   : constant := 1;\n+   SIG_UNBLOCK : constant := 2;\n+   SIG_SETMASK : constant := 3;\n+\n+   SIG_DFL : constant := 0;\n+   SIG_IGN : constant := 1;\n+\n+   SA_SIGINFO : constant := 16#0040#;\n+   SA_ONSTACK : constant := 16#0001#;\n+\n+   function sigaction\n+     (sig  : Signal;\n+      act  : struct_sigaction_ptr;\n+      oact : struct_sigaction_ptr) return int;\n+   pragma Import (C, sigaction, \"sigaction\");\n+\n+   ----------\n+   -- Time --\n+   ----------\n+\n+   Time_Slice_Supported : constant Boolean := True;\n+   --  Indicates whether time slicing is supported (i.e SCHED_RR is supported)\n+\n+   type timespec is private;\n+\n+   function nanosleep (rqtp, rmtp : access timespec)  return int;\n+   pragma Import (C, nanosleep, \"nanosleep\");\n+\n+   type clockid_t is new unsigned_long;\n+\n+   function clock_getres\n+     (clock_id : clockid_t;\n+      res      : access timespec) return int;\n+   pragma Import (C, clock_getres, \"clock_getres\");\n+\n+   function clock_gettime\n+     (clock_id : clockid_t;\n+      tp       : access timespec)\n+      return int;\n+   pragma Import (C, clock_gettime, \"clock_gettime\");\n+\n+   function To_Duration (TS : timespec) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timespec (D : Duration) return timespec;\n+   pragma Inline (To_Timespec);\n+\n+   type struct_timezone is record\n+      tz_minuteswest : int;\n+      tz_dsttime     : int;\n+   end record;\n+   pragma Convention (C, struct_timezone);\n+\n+   procedure usleep (useconds : unsigned_long);\n+   pragma Import (C, usleep, \"usleep\");\n+\n+   -------------------------\n+   -- Priority Scheduling --\n+   -------------------------\n+\n+   SCHED_FIFO  : constant := 1;\n+   SCHED_OTHER : constant := 2;\n+   SCHED_RR    : constant := 3;\n+\n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority\n+\n+   -------------\n+   -- Process --\n+   -------------\n+\n+   type pid_t is private;\n+\n+   function kill (pid : pid_t; sig : Signal) return int;\n+   pragma Import (C, kill, \"kill\");\n+\n+   function getpid return pid_t;\n+   pragma Import (C, getpid, \"getpid\");\n+\n+   ---------\n+   -- LWP --\n+   ---------\n+\n+   function lwp_self return System.Address;\n+   --  lwp_self does not exist on this thread library, revert to pthread_self\n+   --  which is the closest approximation (with getpid). This function is\n+   --  needed to share 7staprop.adb across POSIX-like targets.\n+   pragma Import (C, lwp_self, \"pthread_self\");\n+\n+   -------------\n+   -- Threads --\n+   -------------\n+\n+   type Thread_Body is access\n+     function (arg : System.Address) return System.Address;\n+   pragma Convention (C, Thread_Body);\n+\n+   function Thread_Body_Access is new\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n+\n+   type pthread_t           is private;\n+   subtype Thread_Id        is pthread_t;\n+\n+   type pthread_mutex_t     is limited private;\n+   type pthread_cond_t      is limited private;\n+   type pthread_attr_t      is limited private;\n+   type pthread_mutexattr_t is limited private;\n+   type pthread_condattr_t  is limited private;\n+   type pthread_key_t       is private;\n+\n+   PTHREAD_CREATE_DETACHED : constant := 1;\n+   PTHREAD_CREATE_JOINABLE : constant := 0;\n+\n+   PTHREAD_SCOPE_PROCESS : constant := 0;\n+   PTHREAD_SCOPE_SYSTEM  : constant := 2;\n+\n+   --  Read/Write lock not supported on DragonFly. To add support both types\n+   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n+   --  with the associated routines pthread_rwlock_[init/destroy] and\n+   --  pthread_rwlock_[rdlock/wrlock/unlock].\n+\n+   subtype pthread_rwlock_t     is pthread_mutex_t;\n+   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n+\n+   -----------\n+   -- Stack --\n+   -----------\n+\n+   type stack_t is record\n+      ss_sp    : System.Address;\n+      ss_size  : size_t;\n+      ss_flags : int;\n+   end record;\n+   pragma Convention (C, stack_t);\n+\n+   function sigaltstack\n+     (ss  : not null access stack_t;\n+      oss : access stack_t) return int;\n+   pragma Import (C, sigaltstack, \"sigaltstack\");\n+\n+   Alternate_Stack : aliased System.Address;\n+   --  This is a dummy definition, never used (Alternate_Stack_Size is null)\n+\n+   Alternate_Stack_Size : constant := 0;\n+   --  No alternate signal stack is used on this platform\n+\n+   Stack_Base_Available : constant Boolean := False;\n+   --  Indicates whether the stack base is available on this target. This\n+   --  allows us to share s-osinte.adb between all the FSU run time. Note that\n+   --  this value can only be true if pthread_t has a complete definition that\n+   --  corresponds exactly to the C header files.\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address;\n+   pragma Inline (Get_Stack_Base);\n+   --  returns the stack base of the specified thread. Only call this function\n+   --  when Stack_Base_Available is True.\n+\n+   function Get_Page_Size return size_t;\n+   function Get_Page_Size return Address;\n+   pragma Import (C, Get_Page_Size, \"getpagesize\");\n+   --  Returns the size of a page\n+\n+   PROT_NONE  : constant := 0;\n+   PROT_READ  : constant := 1;\n+   PROT_WRITE : constant := 2;\n+   PROT_EXEC  : constant := 4;\n+   PROT_ALL   : constant := PROT_READ + PROT_WRITE + PROT_EXEC;\n+   PROT_ON    : constant := PROT_NONE;\n+   PROT_OFF   : constant := PROT_ALL;\n+\n+   function mprotect (addr : Address; len : size_t; prot : int) return int;\n+   pragma Import (C, mprotect);\n+\n+   ---------------------------------------\n+   -- Nonstandard Thread Initialization --\n+   ---------------------------------------\n+\n+   --  FSU_THREADS requires pthread_init, which is nonstandard and this should\n+   --  be invoked during the elaboration of s-taprop.adb.\n+\n+   --  DragonFlyBSD does not require this so we provide an empty Ada body\n+\n+   procedure pthread_init;\n+\n+   -------------------------\n+   -- POSIX.1c  Section 3 --\n+   -------------------------\n+\n+   function sigwait\n+     (set : access sigset_t;\n+      sig : access Signal) return int;\n+   pragma Import (C, sigwait, \"sigwait\");\n+\n+   function pthread_kill\n+     (thread : pthread_t;\n+      sig    : Signal) return int;\n+   pragma Import (C, pthread_kill, \"pthread_kill\");\n+\n+   function pthread_sigmask\n+     (how  : int;\n+      set  : access sigset_t;\n+      oset : access sigset_t) return int;\n+   pragma Import (C, pthread_sigmask, \"pthread_sigmask\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 11 --\n+   --------------------------\n+\n+   function pthread_mutexattr_init\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_init, \"pthread_mutexattr_init\");\n+\n+   function pthread_mutexattr_destroy\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_destroy, \"pthread_mutexattr_destroy\");\n+\n+   function pthread_mutex_init\n+     (mutex : access pthread_mutex_t;\n+      attr  : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutex_init, \"pthread_mutex_init\");\n+\n+   function pthread_mutex_destroy (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_destroy, \"pthread_mutex_destroy\");\n+\n+   function pthread_mutex_lock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_lock, \"pthread_mutex_lock\");\n+\n+   function pthread_mutex_unlock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_unlock, \"pthread_mutex_unlock\");\n+\n+   function pthread_condattr_init\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_init, \"pthread_condattr_init\");\n+\n+   function pthread_condattr_destroy\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_destroy, \"pthread_condattr_destroy\");\n+\n+   function pthread_cond_init\n+     (cond : access pthread_cond_t;\n+      attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_cond_init, \"pthread_cond_init\");\n+\n+   function pthread_cond_destroy (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_destroy, \"pthread_cond_destroy\");\n+\n+   function pthread_cond_signal (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_signal, \"pthread_cond_signal\");\n+\n+   function pthread_cond_wait\n+     (cond  : access pthread_cond_t;\n+      mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_cond_wait, \"pthread_cond_wait\");\n+\n+   function pthread_cond_timedwait\n+     (cond    : access pthread_cond_t;\n+      mutex   : access pthread_mutex_t;\n+      abstime : access timespec) return int;\n+   pragma Import (C, pthread_cond_timedwait, \"pthread_cond_timedwait\");\n+\n+   Relative_Timed_Wait : constant Boolean := False;\n+   --  pthread_cond_timedwait requires an absolute delay time\n+\n+   --------------------------\n+   -- POSIX.1c  Section 13 --\n+   --------------------------\n+\n+   PTHREAD_PRIO_NONE    : constant := 0;\n+   PTHREAD_PRIO_PROTECT : constant := 2;\n+   PTHREAD_PRIO_INHERIT : constant := 1;\n+\n+   function pthread_mutexattr_setprotocol\n+     (attr     : access pthread_mutexattr_t;\n+      protocol : int) return int;\n+   pragma Import\n+      (C, pthread_mutexattr_setprotocol, \"pthread_mutexattr_setprotocol\");\n+\n+   function pthread_mutexattr_getprotocol\n+     (attr     : access pthread_mutexattr_t;\n+      protocol : access int) return int;\n+   pragma Import\n+     (C, pthread_mutexattr_getprotocol, \"pthread_mutexattr_getprotocol\");\n+\n+   function pthread_mutexattr_setprioceiling\n+     (attr     : access pthread_mutexattr_t;\n+      prioceiling : int) return int;\n+   pragma Import\n+     (C, pthread_mutexattr_setprioceiling,\n+      \"pthread_mutexattr_setprioceiling\");\n+\n+   function pthread_mutexattr_getprioceiling\n+     (attr     : access pthread_mutexattr_t;\n+      prioceiling : access int) return int;\n+   pragma Import\n+     (C, pthread_mutexattr_getprioceiling,\n+      \"pthread_mutexattr_getprioceiling\");\n+\n+   type struct_sched_param is record\n+      sched_priority : int;\n+   end record;\n+   pragma Convention (C, struct_sched_param);\n+\n+   function pthread_getschedparam\n+     (thread : pthread_t;\n+      policy : access int;\n+      param  : access struct_sched_param) return int;\n+   pragma Import (C, pthread_getschedparam, \"pthread_getschedparam\");\n+\n+   function pthread_setschedparam\n+     (thread : pthread_t;\n+      policy : int;\n+      param  : access struct_sched_param) return int;\n+   pragma Import (C, pthread_setschedparam, \"pthread_setschedparam\");\n+\n+   function pthread_attr_setscope\n+     (attr            : access pthread_attr_t;\n+      contentionscope : int) return int;\n+   pragma Import (C, pthread_attr_setscope, \"pthread_attr_setscope\");\n+\n+   function pthread_attr_getscope\n+     (attr            : access pthread_attr_t;\n+      contentionscope : access int) return int;\n+   pragma Import (C, pthread_attr_getscope, \"pthread_attr_getscope\");\n+\n+   function pthread_attr_setinheritsched\n+     (attr            : access pthread_attr_t;\n+      inheritsched : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setinheritsched, \"pthread_attr_setinheritsched\");\n+\n+   function pthread_attr_getinheritsched\n+     (attr         : access pthread_attr_t;\n+      inheritsched : access int) return int;\n+   pragma Import\n+     (C, pthread_attr_getinheritsched, \"pthread_attr_getinheritsched\");\n+\n+   function pthread_attr_setschedpolicy\n+     (attr   : access pthread_attr_t;\n+      policy : int) return int;\n+   pragma Import (C, pthread_attr_setschedpolicy,\n+     \"pthread_attr_setschedpolicy\");\n+\n+   function pthread_attr_getschedpolicy\n+     (attr   : access pthread_attr_t;\n+      policy : access int) return int;\n+   pragma Import (C, pthread_attr_getschedpolicy,\n+     \"pthread_attr_getschedpolicy\");\n+\n+   function pthread_attr_setschedparam\n+     (attr        : access pthread_attr_t;\n+      sched_param : int) return int;\n+   pragma Import (C, pthread_attr_setschedparam, \"pthread_attr_setschedparam\");\n+\n+   function pthread_attr_getschedparam\n+     (attr        : access pthread_attr_t;\n+      sched_param : access int) return int;\n+   pragma Import (C, pthread_attr_getschedparam, \"pthread_attr_getschedparam\");\n+\n+   function sched_yield return int;\n+   pragma Import (C, sched_yield, \"pthread_yield\");\n+\n+   --------------------------\n+   -- P1003.1c  Section 16 --\n+   --------------------------\n+\n+   function pthread_attr_init (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_init, \"pthread_attr_init\");\n+\n+   function pthread_attr_destroy\n+     (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_destroy, \"pthread_attr_destroy\");\n+\n+   function pthread_attr_setdetachstate\n+     (attr        : access pthread_attr_t;\n+      detachstate : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setdetachstate, \"pthread_attr_setdetachstate\");\n+\n+   function pthread_attr_getdetachstate\n+     (attr        : access pthread_attr_t;\n+      detachstate : access int) return int;\n+   pragma Import\n+     (C, pthread_attr_getdetachstate, \"pthread_attr_getdetachstate\");\n+\n+   function pthread_attr_getstacksize\n+     (attr      : access pthread_attr_t;\n+      stacksize : access size_t) return int;\n+   pragma Import\n+     (C, pthread_attr_getstacksize, \"pthread_attr_getstacksize\");\n+\n+   function pthread_attr_setstacksize\n+     (attr      : access pthread_attr_t;\n+      stacksize : size_t) return int;\n+   pragma Import\n+     (C, pthread_attr_setstacksize, \"pthread_attr_setstacksize\");\n+\n+   function pthread_create\n+     (thread        : access pthread_t;\n+      attributes    : access pthread_attr_t;\n+      start_routine : Thread_Body;\n+      arg           : System.Address) return int;\n+   pragma Import (C, pthread_create, \"pthread_create\");\n+\n+   function pthread_detach (thread : pthread_t) return int;\n+   pragma Import (C, pthread_detach, \"pthread_detach\");\n+\n+   procedure pthread_exit (status : System.Address);\n+   pragma Import (C, pthread_exit, \"pthread_exit\");\n+\n+   function pthread_self return pthread_t;\n+   pragma Import (C, pthread_self, \"pthread_self\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 17 --\n+   --------------------------\n+\n+   function pthread_setspecific\n+     (key   : pthread_key_t;\n+      value : System.Address) return  int;\n+   pragma Import (C, pthread_setspecific, \"pthread_setspecific\");\n+\n+   function pthread_getspecific (key : pthread_key_t) return System.Address;\n+   pragma Import (C, pthread_getspecific, \"pthread_getspecific\");\n+\n+   type destructor_pointer is access procedure (arg : System.Address);\n+   pragma Convention (C, destructor_pointer);\n+\n+   function pthread_key_create\n+     (key        : access pthread_key_t;\n+      destructor : destructor_pointer) return int;\n+   pragma Import (C, pthread_key_create, \"pthread_key_create\");\n+\n+   ------------------------------------\n+   -- Non-portable Pthread Functions --\n+   ------------------------------------\n+\n+   function pthread_set_name_np\n+     (thread : pthread_t;\n+      name   : System.Address) return int;\n+   pragma Import (C, pthread_set_name_np, \"pthread_set_name_np\");\n+\n+private\n+\n+   type sigset_t is array (1 .. 4) of unsigned;\n+\n+   --  In DragonFlyBSD the component sa_handler turns out to\n+   --  be one a union type, and the selector is a macro:\n+   --  #define sa_handler __sigaction_u._handler\n+   --  #define sa_sigaction __sigaction_u._sigaction\n+\n+   --  Should we add a signal_context type here ???\n+   --  How could it be done independent of the CPU architecture ???\n+   --  sigcontext type is opaque, so it is architecturally neutral.\n+   --  It is always passed as an access type, so define it as an empty record\n+   --  since the contents are not used anywhere.\n+\n+   type struct_sigcontext is null record;\n+   pragma Convention (C, struct_sigcontext);\n+\n+   type pid_t is new int;\n+\n+   type time_t is new long;\n+\n+   type timespec is record\n+      ts_sec  : time_t;\n+      ts_nsec : long;\n+   end record;\n+   pragma Convention (C, timespec);\n+\n+   type pthread_t           is new System.Address;\n+   type pthread_attr_t      is new System.Address;\n+   type pthread_mutex_t     is new System.Address;\n+   type pthread_mutexattr_t is new System.Address;\n+   type pthread_cond_t      is new System.Address;\n+   type pthread_condattr_t  is new System.Address;\n+   type pthread_key_t       is new int;\n+\n+end System.OS_Interface;"}, {"sha": "8c053b7049f520486f9d3e364ef3ee90608f8c46", "filename": "gcc/ada/s-osinte-freebsd.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fs-osinte-freebsd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fs-osinte-freebsd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.adb?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   B o d y                                --\n --                                                                          --\n---          Copyright (C) 1991-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,7 +44,7 @@ package body System.OS_Interface is\n       type int_ptr is access all int;\n \n       function internal_errno return int_ptr;\n-      pragma Import (C, internal_errno, \"__error\");\n+      pragma Import (C, internal_errno, \"__get_errno\");\n \n    begin\n       return (internal_errno.all);\n@@ -57,7 +57,7 @@ package body System.OS_Interface is\n    function Get_Stack_Base (thread : pthread_t) return Address is\n       pragma Unreferenced (thread);\n    begin\n-      return (0);\n+      return Null_Address;\n    end Get_Stack_Base;\n \n    ------------------"}, {"sha": "f5fb6635ee249be37016926b199a4cb8f208671f", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 2003-2014, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 2003-2015, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -37,7 +37,8 @@\n \n #include \"gsocket.h\"\n \n-#if defined(__FreeBSD__)\n+#if defined (__FreeBSD__) || defined (__DragonFly__) \\\n+ || defined (__NetBSD__) || defined (__OpenBSD__)\n typedef unsigned int IOCTL_Req_T;\n #else\n typedef int IOCTL_Req_T;"}, {"sha": "01dae2bf1fc24a8181c29ce516d46c4f5d2843f8", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -287,7 +287,7 @@ __gnat_ttyname (int filedes)\n   || defined (__MACHTEN__) || defined (__hpux__) || defined (_AIX) \\\n   || (defined (__svr4__) && defined (__i386__)) || defined (__Lynx__) \\\n   || defined (__CYGWIN__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n-  || defined (__GLIBC__) || defined (__APPLE__)\n+  || defined (__GLIBC__) || defined (__APPLE__) || defined (__DragonFly__)\n \n # ifdef __MINGW32__\n #  if OLD_MINGW\n@@ -339,7 +339,7 @@ getc_immediate_common (FILE *stream,\n     || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (__i386__)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n-    || defined (__GLIBC__) || defined (__APPLE__)\n+    || defined (__GLIBC__) || defined (__APPLE__) || defined (__DragonFly__)\n   char c;\n   int nread;\n   int good_one = 0;\n@@ -359,7 +359,7 @@ getc_immediate_common (FILE *stream,\n     || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (__i386__)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n-    || defined (__GLIBC__) || defined (__APPLE__)\n+    || defined (__GLIBC__) || defined (__APPLE__) || defined (__DragonFly__)\n       eof_ch = termios_rec.c_cc[VEOF];\n \n       /* If waiting (i.e. Get_Immediate (Char)), set MIN = 1 and wait for\n@@ -820,7 +820,7 @@ __gnat_localtime_tzoff (const time_t *timer ATTRIBUTE_UNUSED,\n    struct tm */\n \n #elif defined (__APPLE__) || defined (__FreeBSD__) || defined (__linux__) \\\n-  || defined (__GLIBC__)\n+  || defined (__GLIBC__) || defined (__DragonFly__) || defined (__OpenBSD__)\n {\n   localtime_r (timer, &tp);\n   *off = tp.tm_gmtoff;"}, {"sha": "1e53ab51b9882efe5641825311adf448733f2780", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *            Copyright (C) 2000-2014, Free Software Foundation, Inc.       *\n+ *            Copyright (C) 2000-2015, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -278,6 +278,20 @@ __gnat_backtrace (void **array,\n #error Unhandled darwin architecture.\n #endif\n \n+/*---------------------------- x86 *BSD --------------------------------*/\n+\n+#elif defined (__i386__) &&   \\\n+    ( defined (__NetBSD__) || defined (__FreeBSD__) || defined (__OpenBSD__) )\n+\n+#define USE_GCC_UNWINDER\n+/* The generic unwinder is not used for this target because the default\n+   implementation doesn't unwind on the BSD platforms.  AMD64 targets use the\n+   gcc unwinder for all platforms, so let's keep i386 consistent with that.\n+*/\n+\n+#define PC_ADJUST -2\n+/* The minimum size of call instructions on this architecture is 2 bytes */\n+\n /*---------------------- PPC AIX/PPC Lynx 178/Older Darwin ------------------*/\n #elif ((defined (_POWER) && defined (_AIX)) || \\\n        (defined (__powerpc__) && defined (__Lynx__) && !defined(__ELF__)) || \\"}, {"sha": "4daff874eb1a01faa69621232f56f3618bcd6d17", "filename": "gnattools/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gnattools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gnattools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FChangeLog?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -1,3 +1,8 @@\n+2015-06-08  John Marino  <gnugcc@marino.st>\n+\n+\t* configure.ac (*-*-dragonfly*): New configuration.\n+\t* configure: Regenerate.\n+\n 2014-02-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* Makefile.in (TOOLS_FLAGS_TO_PASS_CROSS): Robustify."}, {"sha": "5243ebd70e456a1e2abc7eb8311ff4148e872cc3", "filename": "gnattools/configure", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gnattools%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gnattools%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -2039,6 +2039,11 @@ case \"${target}\" in\n     mlib-tgt-specific.adb<mlib-tgt-specific-darwin.adb \\\n     indepsw.adb<indepsw-darwin.adb\"\n     ;;\n+  *-*-dragonfly*)\n+    TOOLS_TARGET_PAIRS=\"\\\n+    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n+    indepsw.adb<indepsw-gnu.adb\"\n+    ;;\n   *-*-freebsd*)\n     TOOLS_TARGET_PAIRS=\"\\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\"}, {"sha": "9a7c42ac818531a47baf7482a0c9244d05597f70", "filename": "gnattools/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90af599007327974978d9eac58996e71e0f24663/gnattools%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90af599007327974978d9eac58996e71e0f24663/gnattools%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure.ac?ref=90af599007327974978d9eac58996e71e0f24663", "patch": "@@ -79,6 +79,11 @@ case \"${target}\" in\n     mlib-tgt-specific.adb<mlib-tgt-specific-darwin.adb \\\n     indepsw.adb<indepsw-darwin.adb\"\n     ;;\n+  *-*-dragonfly*)\n+    TOOLS_TARGET_PAIRS=\"\\\n+    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n+    indepsw.adb<indepsw-gnu.adb\"\n+    ;;\n   *-*-freebsd*)\n     TOOLS_TARGET_PAIRS=\"\\\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\"}]}