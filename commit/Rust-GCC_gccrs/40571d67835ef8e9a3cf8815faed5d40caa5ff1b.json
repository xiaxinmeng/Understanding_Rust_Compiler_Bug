{"sha": "40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1NzFkNjc4MzVlZjhlOWEzY2Y4ODE1ZmFlZDVkNDBjYWE1ZmYxYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-11T03:47:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-11T03:47:24Z"}, "message": "alpha.c (print_operand): Add 'J'.\n\n        * config/alpha/alpha.c (print_operand): Add 'J'.\n        * config/alpha/alpha.md (call_osf_1_er, call_value_osf_1_er): Take a\n        new operand with the sequence number for the lituse.  When splitting\n        the insns, use gen_movdi_er_high_g and generate a sequence number.\n        (gen_movdi_er_high_g): Print the sequence number if non-zero.\n\nFrom-SVN: r48763", "tree": {"sha": "9cf7d7a3bba7141ff19c0ac93bfc23edf2b30500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf7d7a3bba7141ff19c0ac93bfc23edf2b30500"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40571d67835ef8e9a3cf8815faed5d40caa5ff1b/comments", "author": null, "committer": null, "parents": [{"sha": "f15054eabf6bdb0a0bfdb611f8a7e56ccdaf3e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15054eabf6bdb0a0bfdb611f8a7e56ccdaf3e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f15054eabf6bdb0a0bfdb611f8a7e56ccdaf3e99"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "444c9e0187a19e80d667cf44ca216cc85de8ee94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40571d67835ef8e9a3cf8815faed5d40caa5ff1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40571d67835ef8e9a3cf8815faed5d40caa5ff1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "patch": "@@ -1,3 +1,11 @@\n+2002-01-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (print_operand): Add 'J'.\n+\t* config/alpha/alpha.md (call_osf_1_er, call_value_osf_1_er): Take a\n+\tnew operand with the sequence number for the lituse.  When splitting\n+\tthe insns, use gen_movdi_er_high_g and generate a sequence number.\n+\t(gen_movdi_er_high_g): Print the sequence number if non-zero.\n+\n 2002-01-10  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.c (altivec_init_builtins): Add support for"}, {"sha": "71c59a6df3ebbfa499868dcb43218393e784a4a2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40571d67835ef8e9a3cf8815faed5d40caa5ff1b/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40571d67835ef8e9a3cf8815faed5d40caa5ff1b/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "patch": "@@ -5136,6 +5136,16 @@ print_operand (file, x, code)\n \toutput_operand_lossage (\"invalid %%H value\");\n       break;\n \n+    case 'J':\n+      if (GET_CODE (x) == CONST_INT)\n+\t{\n+\t  if (INTVAL (x) != 0)\n+\t    fprintf (file, \"\\t\\t!lituse_jsr!%d\", (int) INTVAL (x));\n+\t}\n+      else\n+\toutput_operand_lossage (\"invalid %%J value\");\n+      break;\n+\n     case 'r':\n       /* If this operand is the constant zero, write it as \"$31\".  */\n       if (GET_CODE (x) == REG)"}, {"sha": "fe256b6c415e09ada8c0cc30228cd0893d8f430f", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40571d67835ef8e9a3cf8815faed5d40caa5ff1b/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40571d67835ef8e9a3cf8815faed5d40caa5ff1b/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=40571d67835ef8e9a3cf8815faed5d40caa5ff1b", "patch": "@@ -4835,17 +4835,21 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t    (match_dup 1))\n \t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n \t      (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n-\t      (use (match_dup 0))])]\n+\t      (use (match_dup 0))\n+\t      (use (match_dup 3))])]\n {\n   if (CONSTANT_P (operands[0]))\n     {\n       operands[2] = gen_rtx_REG (Pmode, 27);\n-      emit_move_insn (operands[2], operands[0]);\n+      operands[3] = GEN_INT (alpha_next_sequence_number++);\n+      emit_insn (gen_movdi_er_high_g (operands[2], pic_offset_table_rtx,\n+\t\t\t\t      operands[0], operands[3]));\n     }\n   else\n     {\n       operands[2] = operands[0];\n       operands[0] = const0_rtx;\n+      operands[3] = const0_rtx;\n     }\n })\n \n@@ -4861,7 +4865,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t    (match_dup 1))\n \t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n \t      (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n-\t      (use (match_dup 0))])\n+\t      (use (match_dup 0))\n+\t      (use (match_dup 4))])\n    (set (reg:DI 29)\n \t(unspec_volatile:DI [(reg:DI 26) (match_dup 3)] UNSPECV_LDGP1))\n    (set (reg:DI 29)\n@@ -4870,12 +4875,15 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   if (CONSTANT_P (operands[0]))\n     {\n       operands[2] = gen_rtx_REG (Pmode, 27);\n-      emit_move_insn (operands[2], operands[0]);\n+      operands[4] = GEN_INT (alpha_next_sequence_number++);\n+      emit_insn (gen_movdi_er_high_g (operands[2], pic_offset_table_rtx,\n+\t\t\t\t      operands[0], operands[4]));\n     }\n   else\n     {\n       operands[2] = operands[0];\n       operands[0] = const0_rtx;\n+      operands[4] = const0_rtx;\n     }\n   operands[3] = GEN_INT (alpha_next_sequence_number++);\n })\n@@ -4888,9 +4896,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t (match_operand 1 \"\" \"\"))\n    (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n    (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n-   (use (match_operand 2 \"\" \"\"))]\n+   (use (match_operand 2 \"\" \"\"))\n+   (use (match_operand 3 \"const_int_operand\" \"\"))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n-  \"jsr $26,(%0),%2\"\n+  \"jsr $26,(%0),%2%J3\"\n   [(set_attr \"type\" \"jsr\")])\n \n (define_insn \"*call_osf_1_noreturn\"\n@@ -5495,14 +5504,19 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = split_small_symbolic_mem_operand (operands[1]);\")\n \n-(define_insn \"*movdi_er_high_g\"\n+(define_insn \"movdi_er_high_g\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n \t\t    (match_operand:DI 2 \"global_symbolic_operand\" \"\")\n \t\t    (match_operand 3 \"const_int_operand\" \"\")]\n \t\t   UNSPEC_LITERAL))]\n   \"TARGET_EXPLICIT_RELOCS\"\n-  \"ldq %0,%2(%1)\\t\\t!literal\"\n+{\n+  if (INTVAL (operands[3]) == 0)\n+    return \"ldq %0,%2(%1)\\t\\t!literal\";\n+  else\n+    return \"ldq %0,%2(%1)\\t\\t!literal!%3\";\n+}\n   [(set_attr \"type\" \"ldsym\")])\n \n (define_split\n@@ -6891,17 +6905,21 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t (match_dup 2)))\n \t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n \t      (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n-\t      (use (match_dup 1))])]\n+\t      (use (match_dup 1))\n+\t      (use (match_dup 4))])]\n {\n   if (CONSTANT_P (operands[1]))\n     {\n       operands[3] = gen_rtx_REG (Pmode, 27);\n-      emit_move_insn (operands[3], operands[1]);\n+      operands[4] = GEN_INT (alpha_next_sequence_number++);\n+      emit_insn (gen_movdi_er_high_g (operands[3], pic_offset_table_rtx,\n+\t\t\t\t      operands[1], operands[4]));\n     }\n   else\n     {\n       operands[3] = operands[1];\n       operands[1] = const0_rtx;\n+      operands[4] = const0_rtx;\n     }\n })\n \n@@ -6919,7 +6937,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t (match_dup 2)))\n \t      (set (reg:DI 26) (plus:DI (pc) (const_int 4)))\n \t      (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n-\t      (use (match_dup 1))])\n+\t      (use (match_dup 1))\n+\t      (use (match_dup 5))])\n    (set (reg:DI 29)\n \t(unspec_volatile:DI [(reg:DI 26) (match_dup 4)] UNSPECV_LDGP1))\n    (set (reg:DI 29)\n@@ -6928,12 +6947,15 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   if (CONSTANT_P (operands[1]))\n     {\n       operands[3] = gen_rtx_REG (Pmode, 27);\n-      emit_move_insn (operands[3], operands[1]);\n+      operands[5] = GEN_INT (alpha_next_sequence_number++);\n+      emit_insn (gen_movdi_er_high_g (operands[3], pic_offset_table_rtx,\n+\t\t\t\t      operands[1], operands[5]));\n     }\n   else\n     {\n       operands[3] = operands[1];\n       operands[1] = const0_rtx;\n+      operands[5] = const0_rtx;\n     }\n   operands[4] = GEN_INT (alpha_next_sequence_number++);\n })\n@@ -6947,9 +6969,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n    (set (reg:DI 26)\n \t(plus:DI (pc) (const_int 4)))\n    (unspec_volatile [(reg:DI 29)] UNSPECV_BLOCKAGE)\n-   (use (match_operand 3 \"\" \"\"))]\n+   (use (match_operand 3 \"\" \"\"))\n+   (use (match_operand 4 \"const_int_operand\" \"\"))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n-  \"jsr $26,(%1),%3\"\n+  \"jsr $26,(%1),%3%J4\"\n   [(set_attr \"type\" \"jsr\")])\n \n (define_insn \"*call_value_osf_1_noreturn\""}]}