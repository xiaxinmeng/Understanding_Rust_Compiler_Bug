{"sha": "aac1406f303436e98da1fc4a7125541502126541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjMTQwNmYzMDM0MzZlOThkYTFmYzRhNzEyNTU0MTUwMjEyNjU0MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-12-26T12:23:11Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-12-26T12:23:11Z"}, "message": "PR c++/5116, c++/764\n\ncp:\n        PR c++/5116, c++/764\n        * call.c (build_new_op): Make sure template class operands are\n        instantiated.\ntestsuite:\n        * g++.dg/template/friend10.C: New test.\n        * g++.dg/template/conv5.C: New test.\n\nFrom-SVN: r60514", "tree": {"sha": "b5d0e443d07d129ba5e34654dec2cfcdb8cf7dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d0e443d07d129ba5e34654dec2cfcdb8cf7dca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac1406f303436e98da1fc4a7125541502126541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac1406f303436e98da1fc4a7125541502126541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac1406f303436e98da1fc4a7125541502126541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac1406f303436e98da1fc4a7125541502126541/comments", "author": null, "committer": null, "parents": [{"sha": "223231230e787e5b7f382d0e5eaa771a00733855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223231230e787e5b7f382d0e5eaa771a00733855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/223231230e787e5b7f382d0e5eaa771a00733855"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "2291b733b5893fd168731c45fee6e7c97cbc7c2d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1406f303436e98da1fc4a7125541502126541/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1406f303436e98da1fc4a7125541502126541/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aac1406f303436e98da1fc4a7125541502126541", "patch": "@@ -1,3 +1,9 @@\n+2002-12-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/5116, c++/764\n+\t* call.c (build_new_op): Make sure template class operands are\n+\tinstantiated.\n+\n 2002-12-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR C++/7964"}, {"sha": "919087059d83e13871b361011298755f279aad86", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1406f303436e98da1fc4a7125541502126541/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1406f303436e98da1fc4a7125541502126541/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=aac1406f303436e98da1fc4a7125541502126541", "patch": "@@ -3343,6 +3343,10 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3)\n   if (TREE_CODE (arg1) == OFFSET_REF)\n     arg1 = resolve_offset_ref (arg1);\n   arg1 = convert_from_reference (arg1);\n+  if (CLASS_TYPE_P (TREE_TYPE (arg1))\n+      && CLASSTYPE_TEMPLATE_INSTANTIATION (TREE_TYPE (arg1)))\n+    /* Make sure the template type is instantiated now.  */\n+    instantiate_class_template (TYPE_MAIN_VARIANT (TREE_TYPE (arg1)));\n   \n   switch (code)\n     {\n@@ -3365,12 +3369,18 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3)\n       if (TREE_CODE (arg2) == OFFSET_REF)\n \targ2 = resolve_offset_ref (arg2);\n       arg2 = convert_from_reference (arg2);\n+      if (CLASS_TYPE_P (TREE_TYPE (arg2))\n+\t  && CLASSTYPE_TEMPLATE_INSTANTIATION (TREE_TYPE (arg2)))\n+\tinstantiate_class_template (TYPE_MAIN_VARIANT (TREE_TYPE (arg2)));\n     }\n   if (arg3)\n     {\n       if (TREE_CODE (arg3) == OFFSET_REF)\n \targ3 = resolve_offset_ref (arg3);\n       arg3 = convert_from_reference (arg3);\n+      if (CLASS_TYPE_P (TREE_TYPE (arg3))\n+\t  && CLASSTYPE_TEMPLATE_INSTANTIATION (TREE_TYPE (arg3)))\n+\tinstantiate_class_template (TYPE_MAIN_VARIANT (TREE_TYPE (arg3)));\n     }\n   \n   if (code == COND_EXPR)"}, {"sha": "a68ab21957b7fd06baa06f566d0a06b6750ca151", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1406f303436e98da1fc4a7125541502126541/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1406f303436e98da1fc4a7125541502126541/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aac1406f303436e98da1fc4a7125541502126541", "patch": "@@ -1,3 +1,8 @@\n+2002-12-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/template/friend10.C: New test.\n+\t* g++.dg/template/conv5.C: New test.\n+\n 2002-12-24  Nathan Sidwell  <nathan@codesourcery.com>\n \t\n \t* g++.dg/lookup/scoped3.C: New test."}, {"sha": "80835437a983eb3cccc320bd2ad04ea6311cd58c", "filename": "gcc/testsuite/g++.dg/template/conv5.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1406f303436e98da1fc4a7125541502126541/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1406f303436e98da1fc4a7125541502126541/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconv5.C?ref=aac1406f303436e98da1fc4a7125541502126541", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 Dec 2002 <nathan@codesourcery.com>\n+\n+// PR 764. Failed to find friend in overload resolution\n+\n+template <class T>\n+struct S\n+{\n+  friend bool operator== (const S&, const S&) {\n+    return true;\n+  }\n+};\n+\n+int main ()\n+{\n+   // S<int> s;\n+  \n+  const S<int> *p = 0;\n+  *p == *p; // error\n+}"}, {"sha": "cab5e346f0bf397454d09926fbcc68689f0d4a65", "filename": "gcc/testsuite/g++.dg/template/friend10.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1406f303436e98da1fc4a7125541502126541/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1406f303436e98da1fc4a7125541502126541/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend10.C?ref=aac1406f303436e98da1fc4a7125541502126541", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 24 Dec 2002 <nathan@codesourcery.com>\n+\n+// PR 5116. template instantiation can add a friend into a namespace,\n+// and thus change overload resolution.\n+\n+#include <iostream>\n+\n+static int right;\n+static int wrong;\n+\n+struct Buggy {};\n+\n+template <typename T>struct Handle\n+{\n+  Handle(T* p) {}\n+  \n+  operator bool() const { wrong++; return true; }\n+  \n+  friend std::ostream& operator<<(std::ostream& ostr, const Handle& r)\n+  {\n+    right++;\n+    \n+    return ostr << \"in operator<<(ostream&, const Handle&)\";\n+  }\n+};\n+\n+typedef Handle<Buggy>     Buggy_h;\n+\n+bool cmp (const Buggy_h& b1, const Buggy_h& b2)\n+{\n+  std::cout << b1 << \" \" << b2 << std::endl;\n+  return false;\n+}\n+\n+int main()\n+{\n+  Buggy o;\n+  \n+  cmp (&o, &o);\n+\n+  return !(right == 2 && !wrong);\n+}"}]}