{"sha": "75841b04987f8619615a8ed5955e70aa844231b5", "node_id": "C_kwDOANBUbNoAKDc1ODQxYjA0OTg3Zjg2MTk2MTVhOGVkNTk1NWU3MGFhODQ0MjMxYjU", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-07-22T00:35:13Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-07-22T00:44:06Z"}, "message": "[PATCH, rs6000] Additional cleanup of rs6000_builtin_mask\n\n  Post the rs6000 builtins rewrite, some of the leftover builtin\ncode is redundant and can be removed.\n  This replaces the usage of bu_mask in rs6000_target_modify_macros\nwith checks against the rs6000_isa_flags equivalent directly.  Thusly\nthe bu_mask variable can be removed.  After this update there\nare no other uses of rs6000_builtin_mask_calculate, so that function\ncan also be safely removed.\n\nNo functional change, though some output under debug has been removed.\n\n[V2] Per patch review and subsequent investigations, the\nrs6000_builtin_mask and x_rs6000_builtin_mask can also be removed, as\nwell as the entirety of the rs6000_builtin_mask_names table.\n\ngcc/\n\t* config/rs6000/rs6000-c.cc: Update comments.\n\t(rs6000_target_modify_macros): Remove bu_mask references.\n\t(rs6000_define_or_undefine_macro): Replace bu_mask reference\n\twith a rs6000_cpu value check.\n\t(rs6000_cpu_cpp_builtins): Remove rs6000_builtin_mask_calculate()\n\tparameter from call to rs6000_target_modify_macros.\n\t* config/rs6000/rs6000-protos.h (rs6000_target_modify_macros,\n\trs6000_target_modify_macros_ptr): Remove parameter from extern\n\tfor the prototype.\n\t* config/rs6000/rs6000.cc (rs6000_target_modify_macros_ptr): Remove\n\tparameter from prototype, update calls to this function.\n\t(rs6000_print_builtin_options): Remove prototype, call and function.\n\t(rs6000_builtin_mask_calculate): Remove function.\n\t(rs6000_debug_reg_global): Remove call to rs6000_print_builtin_options.\n\t(rs6000_option_override_internal): Remove rs6000_builtin_mask var\n\tand builtin_mask debug output.\n\t(rs6000_builtin_mask_names): Remove.\n\t(rs6000_pragma_target_parse): Remove prev_bumask, cur_bumask,\n\tdiff_bumask references; Update calls to rs6000_target_modify_ptr.\n\t* config/rs6000/rs6000.opt (rs6000_builtin_mask): Remove.", "tree": {"sha": "2b9365c771526b21c2a41e96522befaf6fcf0bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b9365c771526b21c2a41e96522befaf6fcf0bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75841b04987f8619615a8ed5955e70aa844231b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75841b04987f8619615a8ed5955e70aa844231b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75841b04987f8619615a8ed5955e70aa844231b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75841b04987f8619615a8ed5955e70aa844231b5/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb9c03005cdab2275ef0c6448310ae9273a2ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb9c03005cdab2275ef0c6448310ae9273a2ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb9c03005cdab2275ef0c6448310ae9273a2ed5"}], "stats": {"total": 132, "additions": 13, "deletions": 119}, "files": [{"sha": "4d051b906582e5a4551c8123e39840cf7a3e9b09", "filename": "gcc/config/rs6000/rs6000-c.cc", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75841b04987f8619615a8ed5955e70aa844231b5/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75841b04987f8619615a8ed5955e70aa844231b5/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc?ref=75841b04987f8619615a8ed5955e70aa844231b5", "patch": "@@ -335,20 +335,16 @@ rs6000_define_or_undefine_macro (bool define_p, const char *name)\n }\n \n /* Define or undefine macros based on the current target.  If the user does\n-   #pragma GCC target, we need to adjust the macros dynamically.  Note, some of\n-   the options needed for builtins have been moved to separate variables, so\n-   have both the target flags and the builtin flags as arguments.  */\n+   #pragma GCC target, we need to adjust the macros dynamically.  */\n \n void\n-rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n-\t\t\t     HOST_WIDE_INT bu_mask)\n+rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags)\n {\n   if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n     fprintf (stderr,\n-\t     \"rs6000_target_modify_macros (%s, \" HOST_WIDE_INT_PRINT_HEX\n-\t     \", \" HOST_WIDE_INT_PRINT_HEX \")\\n\",\n+\t     \"rs6000_target_modify_macros (%s, \" HOST_WIDE_INT_PRINT_HEX \")\\n\",\n \t     (define_p) ? \"define\" : \"undef\",\n-\t     flags, bu_mask);\n+\t     flags);\n \n   /* Each of the flags mentioned below controls whether certain\n      preprocessor macros will be automatically defined when\n@@ -595,10 +591,8 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n   if ((flags & OPTION_MASK_FLOAT128_HW) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__FLOAT128_HARDWARE__\");\n \n-  /* options from the builtin masks.  */\n-  /* Note that OPTION_MASK_FPRND is enabled only if\n-     (rs6000_cpu == PROCESSOR_CELL) (e.g. -mcpu=cell).  */\n-  if ((bu_mask & OPTION_MASK_FPRND) != 0)\n+  /* Tell the user if we are targeting CELL.  */\n+  if (rs6000_cpu == PROCESSOR_CELL)\n     rs6000_define_or_undefine_macro (define_p, \"__PPU__\");\n \n   /* Tell the user if we support the MMA instructions.  */\n@@ -616,8 +610,7 @@ void\n rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n {\n   /* Define all of the common macros.  */\n-  rs6000_target_modify_macros (true, rs6000_isa_flags,\n-\t\t\t       rs6000_builtin_mask_calculate ());\n+  rs6000_target_modify_macros (true, rs6000_isa_flags);\n \n   if (TARGET_FRE)\n     builtin_define (\"__RECIP__\");"}, {"sha": "b3c16e7448d87aa0489da5a6ef8306c66e3f0496", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75841b04987f8619615a8ed5955e70aa844231b5/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75841b04987f8619615a8ed5955e70aa844231b5/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=75841b04987f8619615a8ed5955e70aa844231b5", "patch": "@@ -320,9 +320,8 @@ extern void rs6000_cpu_cpp_builtins (struct cpp_reader *);\n extern bool rs6000_pragma_target_parse (tree, tree);\n #endif\n extern void rs6000_activate_target_options (tree new_tree);\n-extern void rs6000_target_modify_macros (bool, HOST_WIDE_INT, HOST_WIDE_INT);\n-extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n-\t\t\t\t\t\tHOST_WIDE_INT);\n+extern void rs6000_target_modify_macros (bool, HOST_WIDE_INT);\n+extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT);\n \n /* Declare functions in rs6000-d.cc  */\n extern void rs6000_d_target_versions (void);"}, {"sha": "4b727d2a500a74d120ea22dd2867441e6e7065ba", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 4, "deletions": 98, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75841b04987f8619615a8ed5955e70aa844231b5/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75841b04987f8619615a8ed5955e70aa844231b5/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=75841b04987f8619615a8ed5955e70aa844231b5", "patch": "@@ -278,7 +278,7 @@ bool cpu_builtin_p = false;\n /* Pointer to function (in rs6000-c.cc) that can define or undefine target\n    macros that have changed.  Languages that don't support the preprocessor\n    don't link in rs6000-c.cc, so we can't call it directly.  */\n-void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT, HOST_WIDE_INT);\n+void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT);\n \n /* Simplfy register classes into simpler classifications.  We assume\n    GPR_REG_TYPE - FPR_REG_TYPE are ordered so that we can use a simple range\n@@ -1171,8 +1171,6 @@ const int INSN_NOT_AVAILABLE = -1;\n \n static void rs6000_print_isa_options (FILE *, int, const char *,\n \t\t\t\t      HOST_WIDE_INT);\n-static void rs6000_print_builtin_options (FILE *, int, const char *,\n-\t\t\t\t\t  HOST_WIDE_INT);\n static HOST_WIDE_INT rs6000_disable_incompatible_switches (void);\n \n static enum rs6000_reg_type register_to_reg_type (rtx, bool *);\n@@ -2407,9 +2405,6 @@ rs6000_debug_reg_global (void)\n   rs6000_print_isa_options (stderr, 0, \"rs6000_isa_flags_explicit\",\n \t\t\t    rs6000_isa_flags_explicit);\n \n-  rs6000_print_builtin_options (stderr, 0, \"rs6000_builtin_mask\",\n-\t\t\t\trs6000_builtin_mask);\n-\n   rs6000_print_isa_options (stderr, 0, \"TARGET_DEFAULT\", TARGET_DEFAULT);\n \n   fprintf (stderr, DEBUG_FMT_S, \"--with-cpu default\",\n@@ -3372,41 +3367,6 @@ darwin_rs6000_override_options (void)\n #define RS6000_DEFAULT_LONG_DOUBLE_SIZE 64\n #endif\n \n-/* Return the builtin mask of the various options used that could affect which\n-   builtins were used.  In the past we used target_flags, but we've run out of\n-   bits, and some options are no longer in target_flags.  */\n-\n-HOST_WIDE_INT\n-rs6000_builtin_mask_calculate (void)\n-{\n-  return (((TARGET_ALTIVEC)\t\t    ? OPTION_MASK_ALTIVEC    : 0)\n-\t  | ((TARGET_CMPB)\t\t    ? OPTION_MASK_CMPB\t     : 0)\n-\t  | ((TARGET_VSX)\t\t    ? OPTION_MASK_VSX\t     : 0)\n-\t  | ((TARGET_FRE)\t\t    ? OPTION_MASK_POPCNTB    : 0)\n-\t  | ((TARGET_FRES)\t\t    ? OPTION_MASK_PPC_GFXOPT : 0)\n-\t  | ((TARGET_FRSQRTE)\t\t    ? OPTION_MASK_PPC_GFXOPT : 0)\n-\t  | ((TARGET_FRSQRTES)\t\t    ? OPTION_MASK_POPCNTB    : 0)\n-\t  | ((TARGET_POPCNTD)\t\t    ? OPTION_MASK_POPCNTD    : 0)\n-\t  | ((rs6000_cpu == PROCESSOR_CELL) ? OPTION_MASK_FPRND      : 0)\n-\t  | ((TARGET_P8_VECTOR)\t\t    ? OPTION_MASK_P8_VECTOR  : 0)\n-\t  | ((TARGET_P9_VECTOR)\t\t    ? OPTION_MASK_P9_VECTOR  : 0)\n-\t  | ((TARGET_P9_MISC)\t\t    ? OPTION_MASK_P9_MISC    : 0)\n-\t  | ((TARGET_MODULO)\t\t    ? OPTION_MASK_MODULO     : 0)\n-\t  | ((TARGET_64BIT)\t\t    ? MASK_64BIT\t     : 0)\n-\t  | ((TARGET_POWERPC64)\t\t    ? MASK_POWERPC64\t     : 0)\n-\t  | ((TARGET_CRYPTO)\t\t    ? OPTION_MASK_CRYPTO     : 0)\n-\t  | ((TARGET_HTM)\t\t    ? OPTION_MASK_HTM\t     : 0)\n-\t  | ((TARGET_DFP)\t\t    ? OPTION_MASK_DFP\t     : 0)\n-\t  | ((TARGET_HARD_FLOAT)\t    ? OPTION_MASK_SOFT_FLOAT : 0)\n-\t  | ((TARGET_LONG_DOUBLE_128\n-\t      && TARGET_HARD_FLOAT\n-\t      && !TARGET_IEEEQUAD)\t    ? OPTION_MASK_MULTIPLE   : 0)\n-\t  | ((TARGET_FLOAT128_TYPE)\t    ? OPTION_MASK_FLOAT128_KEYWORD : 0)\n-\t  | ((TARGET_FLOAT128_HW)\t    ? OPTION_MASK_FLOAT128_HW : 0)\n-\t  | ((TARGET_MMA)\t\t    ? OPTION_MASK_MMA\t     : 0)\n-\t  | ((TARGET_POWER10)\t\t    ? OPTION_MASK_POWER10    : 0));\n-}\n-\n /* Implement TARGET_MD_ASM_ADJUST.  All asm statements are considered\n    to clobber the XER[CA] bit because clobbering that bit without telling\n    the compiler worked just fine with versions of GCC before GCC 5, and\n@@ -3618,11 +3578,6 @@ glibc_supports_ieee_128bit (void)\n      generally defined to test the corresponding bit of the\n      rs6000_isa_flags variable.\n \n-     The variable rs6000_builtin_mask is set to represent the target\n-     options for the most current compilation efforts, consistent with\n-     the current contents of rs6000_isa_flags.  This variable controls\n-     expansion of built-in functions.\n-\n      Various other global variables and fields of global structures\n      (over 50 in all) are initialized to reflect the desired options\n      for the most current compilation efforts.  */\n@@ -4890,14 +4845,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  /* Set the builtin mask of the various options used that could affect which\n-     builtins were used.  In the past we used target_flags, but we've run out\n-     of bits, and some options are no longer in target_flags.  */\n-  rs6000_builtin_mask = rs6000_builtin_mask_calculate ();\n-  if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n-    rs6000_print_builtin_options (stderr, 0, \"builtin mask\",\n-\t\t\t\t  rs6000_builtin_mask);\n-\n   /* Initialize all of the registers.  */\n   rs6000_init_hard_regno_mode_ok (global_init_p);\n \n@@ -24051,32 +23998,6 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"string\",\t\t\t0,\t\t\t\tfalse, false },\n };\n \n-/* Builtin mask mapping for printing the flags.  */\n-static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n-{\n-  { \"altivec\",\t\t OPTION_MASK_ALTIVEC,\tfalse, false },\n-  { \"vsx\",\t\t OPTION_MASK_VSX,\tfalse, false },\n-  { \"fre\",\t\t OPTION_MASK_POPCNTB,\tfalse, false },\n-  { \"fres\",\t\t OPTION_MASK_PPC_GFXOPT, false, false },\n-  { \"frsqrte\",\t\t OPTION_MASK_PPC_GFXOPT, false, false },\n-  { \"frsqrtes\",\t\t OPTION_MASK_POPCNTB,\tfalse, false },\n-  { \"popcntd\",\t\t OPTION_MASK_POPCNTD,\tfalse, false },\n-  { \"cell\",\t\t OPTION_MASK_FPRND,\tfalse, false },\n-  { \"power8-vector\",\t OPTION_MASK_P8_VECTOR,\tfalse, false },\n-  { \"power9-vector\",\t OPTION_MASK_P9_VECTOR,\tfalse, false },\n-  { \"power9-misc\",\t OPTION_MASK_P9_MISC,\tfalse, false },\n-  { \"crypto\",\t\t OPTION_MASK_CRYPTO,\tfalse, false },\n-  { \"htm\",\t\t OPTION_MASK_HTM,\tfalse, false },\n-  { \"hard-dfp\",\t\t OPTION_MASK_DFP,\tfalse, false },\n-  { \"hard-float\",\t OPTION_MASK_SOFT_FLOAT, false, false },\n-  { \"long-double-128\",\t OPTION_MASK_MULTIPLE,\tfalse, false },\n-  { \"powerpc64\",\t MASK_POWERPC64,  false, false },\n-  { \"float128\",\t\t OPTION_MASK_FLOAT128_KEYWORD,   false, false },\n-  { \"float128-hw\",\t OPTION_MASK_FLOAT128_HW,false, false },\n-  { \"mma\",\t\t OPTION_MASK_MMA,\tfalse, false },\n-  { \"power10\",\t\t OPTION_MASK_POWER10,\tfalse, false },\n-};\n-\n /* Option variables that we want to support inside attribute((target)) and\n    #pragma GCC target operations.  */\n \n@@ -24431,7 +24352,6 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n   tree cur_tree;\n   struct cl_target_option *prev_opt, *cur_opt;\n   HOST_WIDE_INT prev_flags, cur_flags, diff_flags;\n-  HOST_WIDE_INT prev_bumask, cur_bumask, diff_bumask;\n \n   if (TARGET_DEBUG_TARGET)\n     {\n@@ -24483,27 +24403,22 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n   if (rs6000_target_modify_macros_ptr)\n     {\n       prev_opt    = TREE_TARGET_OPTION (prev_tree);\n-      prev_bumask = prev_opt->x_rs6000_builtin_mask;\n       prev_flags  = prev_opt->x_rs6000_isa_flags;\n \n       cur_opt     = TREE_TARGET_OPTION (cur_tree);\n       cur_flags   = cur_opt->x_rs6000_isa_flags;\n-      cur_bumask  = cur_opt->x_rs6000_builtin_mask;\n \n-      diff_bumask = (prev_bumask ^ cur_bumask);\n       diff_flags  = (prev_flags ^ cur_flags);\n \n-      if ((diff_flags != 0) || (diff_bumask != 0))\n+      if (diff_flags != 0)\n \t{\n \t  /* Delete old macros.  */\n \t  rs6000_target_modify_macros_ptr (false,\n-\t\t\t\t\t   prev_flags & diff_flags,\n-\t\t\t\t\t   prev_bumask & diff_bumask);\n+\t\t\t\t\t   prev_flags & diff_flags);\n \n \t  /* Define new macros.  */\n \t  rs6000_target_modify_macros_ptr (true,\n-\t\t\t\t\t   cur_flags & diff_flags,\n-\t\t\t\t\t   cur_bumask & diff_bumask);\n+\t\t\t\t\t   cur_flags & diff_flags);\n \t}\n     }\n \n@@ -24734,15 +24649,6 @@ rs6000_print_isa_options (FILE *file, int indent, const char *string,\n \t\t\t\t ARRAY_SIZE (rs6000_opt_masks));\n }\n \n-static void\n-rs6000_print_builtin_options (FILE *file, int indent, const char *string,\n-\t\t\t      HOST_WIDE_INT flags)\n-{\n-  rs6000_print_options_internal (file, indent, string, flags, \"\",\n-\t\t\t\t &rs6000_builtin_mask_names[0],\n-\t\t\t\t ARRAY_SIZE (rs6000_builtin_mask_names));\n-}\n-\n /* If the user used -mno-vsx, we need turn off all of the implicit ISA 2.06,\n    2.07, and 3.0 options that relate to the vector unit (-mdirect-move,\n    -mupper-regs-df, etc.)."}, {"sha": "b227bf96888e8650da25449b7a20b8dcb28fc54a", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75841b04987f8619615a8ed5955e70aa844231b5/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75841b04987f8619615a8ed5955e70aa844231b5/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=75841b04987f8619615a8ed5955e70aa844231b5", "patch": "@@ -96,10 +96,6 @@ enum rs6000_cmodel rs6000_current_cmodel = CMODEL_SMALL\n TargetVariable\n unsigned int rs6000_recip_control\n \n-;; Mask of what builtin functions are allowed\n-TargetVariable\n-HOST_WIDE_INT rs6000_builtin_mask\n-\n ;; Debug flags\n TargetVariable\n unsigned int rs6000_debug"}]}