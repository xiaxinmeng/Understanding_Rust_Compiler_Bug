{"sha": "a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJiNGNmYWE4OTZiZTY4YmQwZGYyZjc1ODA1ZmY1MGE1NDlmZDVkNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-08-06T01:33:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-08-06T01:33:27Z"}, "message": "decl.c (cp_finish_decl): Tidy.\n\n\t* decl.c (cp_finish_decl): Tidy.\n\t* typeck.c (finish_class_member_access_expr): Use\n\ttype_dependent_expression_p.\n\t* semantics.c (finish_id_expression): Use\n\ttype_dependent_expression_p.  Don't build_qualified_name for a\n\tdecl in non-dependent scope.\n\t* pt.c (type_dependent_expression_p): A TEMPLATE_ID_EXPR of an\n\tidentifier is dependent.  Remove variable_template_p check.\n\nFrom-SVN: r226652", "tree": {"sha": "eea821c19b9474a2d220f27d9e0044a063e2b838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eea821c19b9474a2d220f27d9e0044a063e2b838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8835b4d85ea1bb4b99ad891d417cd88719b7aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8835b4d85ea1bb4b99ad891d417cd88719b7aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8835b4d85ea1bb4b99ad891d417cd88719b7aff"}], "stats": {"total": 118, "additions": 29, "deletions": 89}, "files": [{"sha": "502dc20430289aeebd7c2d764542469746f49a6f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "patch": "@@ -1,5 +1,14 @@\n 2015-08-05  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (cp_finish_decl): Tidy.\n+\t* typeck.c (finish_class_member_access_expr): Use\n+\ttype_dependent_expression_p.\n+\t* semantics.c (finish_id_expression): Use\n+\ttype_dependent_expression_p.  Don't build_qualified_name for a\n+\tdecl in non-dependent scope.\n+\t* pt.c (type_dependent_expression_p): A TEMPLATE_ID_EXPR of an\n+\tidentifier is dependent.  Remove variable_template_p check.\n+\n \tPR c++/66260\n \tPR c++/66596\n \tPR c++/66649"}, {"sha": "208173a8dfa0db8a757de804e3639c23b9765595", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "patch": "@@ -6525,11 +6525,10 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t then it can be used in future constant expressions, so its value\n \t must be available. */\n \n-      if (!VAR_P (decl) || dependent_type_p (type))\n+      if (!VAR_P (decl) || type_dependent_p)\n \t/* We can't do anything if the decl has dependent type.  */;\n       else if (init\n \t       && init_const_expr_p\n-\t       && !type_dependent_p\n \t       && TREE_CODE (type) != REFERENCE_TYPE\n \t       && decl_maybe_constant_var_p (decl)\n \t       && !type_dependent_init_p (init)"}, {"sha": "5f28f1b563761be39393ae9eeb48e8c396c91369", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "patch": "@@ -21671,11 +21671,10 @@ type_dependent_expression_p (tree expression)\n \t      (TREE_OPERAND (expression, 1)))\n \t    return true;\n \t  expression = TREE_OPERAND (expression, 0);\n+\t  if (identifier_p (expression))\n+\t    return true;\n \t}\n \n-      if (variable_template_p (expression))\n-        return dependent_type_p (TREE_TYPE (expression));\n-\n       gcc_assert (TREE_CODE (expression) == OVERLOAD\n \t\t  || TREE_CODE (expression) == FUNCTION_DECL);\n "}, {"sha": "17b0a1457b4b99ade72d51613f745a1ebaf27a59", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 15, "deletions": 79, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "patch": "@@ -3362,7 +3362,7 @@ finish_id_expression (tree id_expression,\n     }\n   else\n     {\n-      bool dependent_p;\n+      bool dependent_p = type_dependent_expression_p (decl);\n \n       /* If the declaration was explicitly qualified indicate\n \t that.  The semantics of `A::f(3)' are different than\n@@ -3371,79 +3371,25 @@ finish_id_expression (tree id_expression,\n \t      ? CP_ID_KIND_QUALIFIED\n \t      : (TREE_CODE (decl) == TEMPLATE_ID_EXPR\n \t\t ? CP_ID_KIND_TEMPLATE_ID\n-\t\t : CP_ID_KIND_UNQUALIFIED));\n-\n-\n-      /* [temp.dep.expr]\n-\n-\t An id-expression is type-dependent if it contains an\n-\t identifier that was declared with a dependent type.\n-\n-\t The standard is not very specific about an id-expression that\n-\t names a set of overloaded functions.  What if some of them\n-\t have dependent types and some of them do not?  Presumably,\n-\t such a name should be treated as a dependent name.  */\n-      /* Assume the name is not dependent.  */\n-      dependent_p = false;\n-      if (!processing_template_decl)\n-\t/* No names are dependent outside a template.  */\n-\t;\n-      else if (TREE_CODE (decl) == CONST_DECL)\n-\t/* We don't want to treat enumerators as dependent.  */\n-\t;\n-      /* A template-id where the name of the template was not resolved\n-\t is definitely dependent.  */\n-      else if (TREE_CODE (decl) == TEMPLATE_ID_EXPR\n-\t       && (identifier_p (TREE_OPERAND (decl, 0))))\n-\tdependent_p = true;\n-      /* For anything except an overloaded function, just check its\n-\t type.  */\n-      else if (!is_overloaded_fn (decl))\n-\tdependent_p\n-\t  = dependent_type_p (TREE_TYPE (decl));\n-      /* For a set of overloaded functions, check each of the\n-\t functions.  */\n-      else\n-\t{\n-\t  tree fns = decl;\n-\n-\t  if (BASELINK_P (fns))\n-\t    fns = BASELINK_FUNCTIONS (fns);\n-\n-\t  /* For a template-id, check to see if the template\n-\t     arguments are dependent.  */\n-\t  if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)\n-\t    {\n-\t      tree args = TREE_OPERAND (fns, 1);\n-\t      dependent_p = any_dependent_template_arguments_p (args);\n-\t      /* The functions are those referred to by the\n-\t\t template-id.  */\n-\t      fns = TREE_OPERAND (fns, 0);\n-\t    }\n-\n-\t  /* If there are no dependent template arguments, go through\n-\t     the overloaded functions.  */\n-\t  while (fns && !dependent_p)\n-\t    {\n-\t      tree fn = OVL_CURRENT (fns);\n-\n-\t      /* Member functions of dependent classes are\n-\t\t dependent.  */\n-\t      if (TREE_CODE (fn) == FUNCTION_DECL\n-\t\t  && type_dependent_expression_p (fn))\n-\t\tdependent_p = true;\n-\t      else if (TREE_CODE (fn) == TEMPLATE_DECL\n-\t\t       && dependent_template_p (fn))\n-\t\tdependent_p = true;\n-\n-\t      fns = OVL_NEXT (fns);\n-\t    }\n-\t}\n+\t\t : (dependent_p\n+\t\t    ? CP_ID_KIND_UNQUALIFIED_DEPENDENT\n+\t\t    : CP_ID_KIND_UNQUALIFIED)));\n \n       /* If the name was dependent on a template parameter, we will\n \t resolve the name at instantiation time.  */\n       if (dependent_p)\n \t{\n+\t  /* If we found a variable, then name lookup during the\n+\t     instantiation will always resolve to the same VAR_DECL\n+\t     (or an instantiation thereof).  */\n+\t  if (VAR_P (decl)\n+\t      || TREE_CODE (decl) == CONST_DECL\n+\t      || TREE_CODE (decl) == PARM_DECL)\n+\t    {\n+\t      mark_used (decl);\n+\t      return convert_from_reference (decl);\n+\t    }\n+\n \t  /* Create a SCOPE_REF for qualified names, if the scope is\n \t     dependent.  */\n \t  if (scope)\n@@ -3475,16 +3421,6 @@ finish_id_expression (tree id_expression,\n \t     need.  */\n \t  if (TREE_CODE (id_expression) == TEMPLATE_ID_EXPR)\n \t    return id_expression;\n-\t  *idk = CP_ID_KIND_UNQUALIFIED_DEPENDENT;\n-\t  /* If we found a variable, then name lookup during the\n-\t     instantiation will always resolve to the same VAR_DECL\n-\t     (or an instantiation thereof).  */\n-\t  if (VAR_P (decl)\n-\t      || TREE_CODE (decl) == PARM_DECL)\n-\t    {\n-\t      mark_used (decl);\n-\t      return convert_from_reference (decl);\n-\t    }\n \t  /* The same is true for FIELD_DECL, but we also need to\n \t     make sure that the syntax is correct.  */\n \t  else if (TREE_CODE (decl) == FIELD_DECL)"}, {"sha": "5d754f1228a997c0e55bfbeeb45ae6b00a2b38df", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b4cfaa896be68bd0df2f75805ff50a549fd5d4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a2b4cfaa896be68bd0df2f75805ff50a549fd5d4", "patch": "@@ -2636,11 +2636,8 @@ finish_class_member_access_expr (tree object, tree name, bool template_p,\n \n   if (processing_template_decl)\n     {\n-      if (/* If OBJECT_TYPE is dependent, so is OBJECT.NAME.  */\n-\t  dependent_type_p (object_type)\n-\t  /* If NAME is just an IDENTIFIER_NODE, then the expression\n-\t     is dependent.  */\n-\t  || identifier_p (object)\n+      if (/* If OBJECT is dependent, so is OBJECT.NAME.  */\n+\t  type_dependent_expression_p (object)\n \t  /* If NAME is \"f<args>\", where either 'f' or 'args' is\n \t     dependent, then the expression is dependent.  */\n \t  || (TREE_CODE (name) == TEMPLATE_ID_EXPR"}]}