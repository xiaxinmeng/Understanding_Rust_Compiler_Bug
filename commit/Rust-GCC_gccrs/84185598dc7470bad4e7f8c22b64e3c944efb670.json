{"sha": "84185598dc7470bad4e7f8c22b64e3c944efb670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxODU1OThkYzc0NzBiYWQ0ZTdmOGMyMmI2NGUzYzk0NGVmYjY3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-06T10:11:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-06T10:11:30Z"}, "message": "libstdc++: Improve std::rot[lr] [PR99396]\n\nAs can be seen on:\n\nunsigned char f1 (unsigned char x, int y) { return std::rotl (x, y); }\nunsigned char f2 (unsigned char x, int y) { return std::rotr (x, y); }\nunsigned short f3 (unsigned short x, int y) { return std::rotl (x, y); }\nunsigned short f4 (unsigned short x, int y) { return std::rotr (x, y); }\nunsigned int f5 (unsigned int x, int y) { return std::rotl (x, y); }\nunsigned int f6 (unsigned int x, int y) { return std::rotr (x, y); }\nunsigned long int f7 (unsigned long int x, int y) { return std::rotl (x, y); }\nunsigned long int f8 (unsigned long int x, int y) { return std::rotr (x, y); }\nunsigned long long int f9 (unsigned long long int x, int y) { return std::rotl (x, y); }\nunsigned long long int f10 (unsigned long long int x, int y) { return std::rotr (x, y); }\n//unsigned __int128 f11 (unsigned __int128 x, int y) { return std::rotl (x, y); }\n//unsigned __int128 f12 (unsigned __int128 x, int y) { return std::rotr (x, y); }\n\nconstexpr auto a = std::rotl (1234U, 0);\nconstexpr auto b = std::rotl (1234U, 5);\nconstexpr auto c = std::rotl (1234U, -5);\nconstexpr auto d = std::rotl (1234U, -__INT_MAX__ - 1);\nthe current <bit> definitions of std::__rot[lr] aren't pattern recognized\nas rotates, they are too long/complex for that, starting with signed modulo,\nspecial case for 0 and different cases for positive and negative.\n\nFor types with power of two bits the following patch adds definitions that\nthe compiler can pattern recognize and turn e.g. on x86_64 into ro[lr][bwlq]\ninstructions.  For weirdo types like unsigned __int20 etc. it keeps the\ncurrent definitions.\n\n2021-03-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/99396\n\t* include/std/bit (__rotl, __rotr): Add optimized variants for power of\n\ttwo _Nd which the compiler can pattern match the rotates.", "tree": {"sha": "6b84c9062bc0be6485d69d1f8c6c694455824ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b84c9062bc0be6485d69d1f8c6c694455824ca0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84185598dc7470bad4e7f8c22b64e3c944efb670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84185598dc7470bad4e7f8c22b64e3c944efb670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84185598dc7470bad4e7f8c22b64e3c944efb670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84185598dc7470bad4e7f8c22b64e3c944efb670/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "574e7601829733d7cae20b5dc7034b876cc76b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574e7601829733d7cae20b5dc7034b876cc76b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574e7601829733d7cae20b5dc7034b876cc76b30"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "8638a02c8a68cb931d73897f02f4157cfea029c3", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84185598dc7470bad4e7f8c22b64e3c944efb670/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84185598dc7470bad4e7f8c22b64e3c944efb670/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=84185598dc7470bad4e7f8c22b64e3c944efb670", "patch": "@@ -68,6 +68,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __rotl(_Tp __x, int __s) noexcept\n     {\n       constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\n+      if _GLIBCXX17_CONSTEXPR ((_Nd & (_Nd - 1)) == 0)\n+\t{\n+\t  // Variant for power of two _Nd which the compiler can\n+\t  // easily pattern match.\n+\t  constexpr unsigned __uNd = _Nd;\n+\t  const unsigned __r = __s;\n+\t  return (__x << (__r % __uNd)) | (__x >> ((-__r) % __uNd));\n+\t}\n       const int __r = __s % _Nd;\n       if (__r == 0)\n \treturn __x;\n@@ -82,6 +90,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __rotr(_Tp __x, int __s) noexcept\n     {\n       constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\n+      if _GLIBCXX17_CONSTEXPR ((_Nd & (_Nd - 1)) == 0)\n+\t{\n+\t  // Variant for power of two _Nd which the compiler can\n+\t  // easily pattern match.\n+\t  constexpr unsigned __uNd = _Nd;\n+\t  const unsigned __r = __s;\n+\t  return (__x >> (__r % __uNd)) | (__x << ((-__r) % __uNd));\n+\t}\n       const int __r = __s % _Nd;\n       if (__r == 0)\n \treturn __x;"}]}