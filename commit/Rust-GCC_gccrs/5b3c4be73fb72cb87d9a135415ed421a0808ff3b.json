{"sha": "5b3c4be73fb72cb87d9a135415ed421a0808ff3b", "node_id": "C_kwDOANBUbNoAKDViM2M0YmU3M2ZiNzJjYjg3ZDlhMTM1NDE1ZWQ0MjFhMDgwOGZmM2I", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-25T14:03:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-25T14:03:30Z"}, "message": "Merge #1473\n\n1473: Improve AST dump r=CohenArthur a=CohenArthur\n\nLet's abuse C++ a little bit to make dumping and the chaining of dumping operations easier. If anyone has input feel free, this is definitely a roundabout way to go about it.\r\n\r\nThis also adds pretty printing of the expanded AST, which can be useful to debug macros or `cfg` invocations\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "a78b71c36000744b2c44bac59306a4bd6cce6bbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a78b71c36000744b2c44bac59306a4bd6cce6bbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b3c4be73fb72cb87d9a135415ed421a0808ff3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjB4EyCRBK7hj4Ov3rIwAA94YIADdfBm+MbHP72l+Xg2QmsHZE\na5yp5W96NogYLyjZXDgLRivKz28pIG9q9iyp69th+TxLuHMDOfDNTAehRsw4vqCO\n9ckNjzTMMJ/gO79thvReanJK7eNlCxCa5aqClf5LZR7gvF50H0+mpput3Qf/AWQK\nsr9H8iS65i1Nci5NvMXC0GcZgudRxLWL31Am0pQZFOh0AQS1bQDXBdNf2px1OIez\nSzwv/2rdquud6VMQrcOPhtXQb4CeYGKU8qz4+jTrzjP7BmvpP+LPMrbXAwusBRYs\nE0Sd32LZHNTxxfq5AvnMaX5F6xEtX5X99rc7dHfGPn9OR/XFs7WcbZbaw/WZ9t8=\n=4Bty\n-----END PGP SIGNATURE-----\n", "payload": "tree a78b71c36000744b2c44bac59306a4bd6cce6bbe\nparent d3cf195ab46d7effe806990aa6b7a409bf8e46df\nparent a9055d8294f28ae84023cc93ae8d8b14747a2d0c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1661436210 +0000\ncommitter GitHub <noreply@github.com> 1661436210 +0000\n\nMerge #1473\n\n1473: Improve AST dump r=CohenArthur a=CohenArthur\n\nLet's abuse C++ a little bit to make dumping and the chaining of dumping operations easier. If anyone has input feel free, this is definitely a roundabout way to go about it.\r\n\r\nThis also adds pretty printing of the expanded AST, which can be useful to debug macros or `cfg` invocations\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3c4be73fb72cb87d9a135415ed421a0808ff3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3c4be73fb72cb87d9a135415ed421a0808ff3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3cf195ab46d7effe806990aa6b7a409bf8e46df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3cf195ab46d7effe806990aa6b7a409bf8e46df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3cf195ab46d7effe806990aa6b7a409bf8e46df"}, {"sha": "a9055d8294f28ae84023cc93ae8d8b14747a2d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9055d8294f28ae84023cc93ae8d8b14747a2d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9055d8294f28ae84023cc93ae8d8b14747a2d0c"}], "stats": {"total": 114, "additions": 79, "deletions": 35}, "files": [{"sha": "8ad00b5929f835615a3dcd26860c766c60b49ff2", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=5b3c4be73fb72cb87d9a135415ed421a0808ff3b", "patch": "@@ -17,6 +17,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-ast-dump.h\"\n+#include \"rust-diagnostics.h\"\n \n namespace Rust {\n namespace AST {\n@@ -51,7 +52,7 @@ Dump::go (AST::Crate &crate)\n     {\n       stream << indentation;\n       item->accept_vis (*this);\n-      stream << \"\\n\";\n+      stream << '\\n';\n     }\n }\n \n@@ -72,8 +73,7 @@ Dump::format_function_param (FunctionParam &param)\n void\n Dump::emit_attrib (const Attribute &attrib)\n {\n-  stream << \"#\";\n-  stream << \"[\";\n+  stream << \"#[\";\n \n   for (size_t i = 0; i < attrib.get_path ().get_segments ().size (); i++)\n     {\n@@ -108,6 +108,13 @@ Dump::emit_attrib (const Attribute &attrib)\n   stream << \"]\";\n }\n \n+std::ostream &\n+Dump::emit_indented_string (const std::string &value,\n+\t\t\t    const std::string &comment)\n+{\n+  return stream << indentation << value << comment;\n+}\n+\n void\n Dump::visit (Token &tok)\n {}\n@@ -141,7 +148,9 @@ Dump::visit (ConstGenericParam &lifetime_param)\n // rust-path.h\n void\n Dump::visit (PathInExpression &path)\n-{}\n+{\n+  stream << path.as_string ();\n+}\n \n void\n Dump::visit (TypePathSegment &segment)\n@@ -163,7 +172,9 @@ Dump::visit (TypePath &path)\n \n void\n Dump::visit (QualifiedPathInExpression &path)\n-{}\n+{\n+  stream << path.as_string ();\n+}\n \n void\n Dump::visit (QualifiedPathInType &path)\n@@ -207,53 +218,52 @@ Dump::visit (NegationExpr &expr)\n void\n Dump::visit (ArithmeticOrLogicalExpr &expr)\n {\n-  expr.get_left_expr ()->accept_vis (*this);\n-  stream << \" \";\n-\n+  auto op = \"\";\n   switch (expr.get_expr_type ())\n     {\n     case ArithmeticOrLogicalOperator::ADD:\n-      stream << \"+\";\n+      op = \"+\";\n       break;\n \n     case ArithmeticOrLogicalOperator::SUBTRACT:\n-      stream << \"-\";\n+      op = \"-\";\n       break;\n \n     case ArithmeticOrLogicalOperator::MULTIPLY:\n-      stream << \"*\";\n+      op = \"*\";\n       break;\n \n     case ArithmeticOrLogicalOperator::DIVIDE:\n-      stream << \"/\";\n+      op = \"/\";\n       break;\n \n     case ArithmeticOrLogicalOperator::MODULUS:\n-      stream << \"%\";\n+      op = \"%\";\n       break;\n \n     case ArithmeticOrLogicalOperator::BITWISE_AND:\n-      stream << \"&\";\n+      op = \"&\";\n       break;\n \n     case ArithmeticOrLogicalOperator::BITWISE_OR:\n-      stream << \"|\";\n+      op = \"|\";\n       break;\n \n     case ArithmeticOrLogicalOperator::BITWISE_XOR:\n-      stream << \"^\";\n+      op = \"^\";\n       break;\n \n     case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n-      stream << \"<<\";\n+      op = \"<<\";\n       break;\n \n     case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n-      stream << \">>\";\n+      op = \">>\";\n       break;\n     }\n \n-  stream << \" \";\n+  expr.get_left_expr ()->accept_vis (*this);\n+  stream << \" \" << op << \" \";\n   expr.get_right_expr ()->accept_vis (*this);\n }\n \n@@ -331,7 +341,23 @@ Dump::visit (StructExprStructBase &expr)\n \n void\n Dump::visit (CallExpr &expr)\n-{}\n+{\n+  expr.get_function_expr ()->accept_vis (*this);\n+  stream << '(';\n+\n+  indentation.increment ();\n+\n+  for (auto &arg : expr.get_params ())\n+    {\n+      stream << '\\n' << indentation;\n+      arg->accept_vis (*this);\n+      stream << ',';\n+    }\n+\n+  indentation.decrement ();\n+\n+  stream << '\\n' << indentation << ')';\n+}\n \n void\n Dump::visit (MethodCallExpr &expr)\n@@ -355,13 +381,14 @@ Dump::visit (BlockExpr &expr)\n     {\n       stream << indentation;\n       stmt->accept_vis (*this);\n-      stream << \";\\n\";\n+      stream << \"; /* stmt */\\n\";\n     }\n \n   if (expr.has_tail_expr ())\n     {\n       stream << indentation;\n       expr.get_tail_expr ()->accept_vis (*this);\n+      stream << \" /* tail expr */\";\n     }\n \n   indentation.decrement ();\n@@ -656,8 +683,10 @@ Dump::format_function_common (std::unique_ptr<Type> &return_type,\n   if (block)\n     {\n       if (return_type)\n-\tstream << ' ';\n-      block->accept_vis (*this);\n+\t{\n+\t  stream << ' ';\n+\t  block->accept_vis (*this);\n+\t}\n     }\n   else\n     stream << \";\\n\";\n@@ -784,12 +813,15 @@ Dump::visit (TraitImpl &impl)\n   impl.get_trait_path ().accept_vis (*this);\n   stream << \" for \";\n   impl.get_type ()->accept_vis (*this);\n-\n   stream << \" {\\n\";\n+\n   indentation.increment ();\n \n   for (auto &item : impl.get_impl_items ())\n-    item->accept_vis (*this);\n+    {\n+      stream << indentation;\n+      item->accept_vis (*this);\n+    }\n \n   indentation.decrement ();\n   stream << \"\\n}\\n\";\n@@ -830,11 +862,7 @@ Dump::visit (ExternBlock &block)\n   stream << \"extern \";\n \n   if (block.has_abi ())\n-    {\n-      stream << \"\\\"\";\n-      stream << block.get_abi ();\n-      stream << \"\\\" \";\n-    }\n+    stream << \"\\\"\" << block.get_abi () << \"\\\" \";\n \n   stream << \"{\\n\";\n   indentation.increment ();\n@@ -1014,11 +1042,15 @@ Dump::visit (LetStmt &stmt)\n \n void\n Dump::visit (ExprStmtWithoutBlock &stmt)\n-{}\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ExprStmtWithBlock &stmt)\n-{}\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n \n // rust-type.h\n void"}, {"sha": "7dd38fe5e5ba81226e0c9008514878bafdd43ffb", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=5b3c4be73fb72cb87d9a135415ed421a0808ff3b", "patch": "@@ -66,6 +66,12 @@ class Dump : public ASTVisitor\n   void format_function_param (FunctionParam &param);\n   void emit_attrib (const Attribute &attrib);\n \n+  /**\n+   * Emit an indented string with an optional extra comment\n+   */\n+  std::ostream &emit_indented_string (const std::string &value,\n+\t\t\t\t      const std::string &comment = \"\");\n+\n   // rust-ast.h\n   void visit (Token &tok);\n   void visit (DelimTokenTree &delim_tok_tree);"}, {"sha": "fc66b692c95748a4eca559174fa27b0176c28be0", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=5b3c4be73fb72cb87d9a135415ed421a0808ff3b", "patch": "@@ -58,6 +58,7 @@ namespace Rust {\n const char *kLexDumpFile = \"gccrs.lex.dump\";\n const char *kASTDumpFile = \"gccrs.ast.dump\";\n const char *kASTPrettyDumpFile = \"gccrs.ast-pretty.dump\";\n+const char *kASTPrettyDumpFileExpanded = \"gccrs.ast-pretty-expanded.dump\";\n const char *kASTExpandedDumpFile = \"gccrs.ast-expanded.dump\";\n const char *kHIRDumpFile = \"gccrs.hir.dump\";\n const char *kHIRPrettyDumpFile = \"gccrs.hir-pretty.dump\";\n@@ -509,6 +510,7 @@ Session::compile_crate (const char *filename)\n       // dump AST with expanded stuff\n       rust_debug (\"BEGIN POST-EXPANSION AST DUMP\");\n       dump_ast_expanded (parser, parsed_crate);\n+      dump_ast_pretty (parsed_crate, true);\n       rust_debug (\"END POST-EXPANSION AST DUMP\");\n     }\n \n@@ -810,10 +812,14 @@ Session::dump_ast (Parser<Lexer> &parser, AST::Crate &crate) const\n }\n \n void\n-Session::dump_ast_pretty (AST::Crate &crate) const\n+Session::dump_ast_pretty (AST::Crate &crate, bool expanded) const\n {\n   std::ofstream out;\n-  out.open (kASTPrettyDumpFile);\n+  if (expanded)\n+    out.open (kASTPrettyDumpFileExpanded);\n+  else\n+    out.open (kASTPrettyDumpFile);\n+\n   if (out.fail ())\n     {\n       rust_error_at (Linemap::unknown_location (), \"cannot open %s:%m; ignored\","}, {"sha": "b3724c540c377ae637888a90415cf03ee312291d", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b3c4be73fb72cb87d9a135415ed421a0808ff3b/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=5b3c4be73fb72cb87d9a135415ed421a0808ff3b", "patch": "@@ -319,7 +319,7 @@ struct Session\n \n   void dump_lex (Parser<Lexer> &parser) const;\n   void dump_ast (Parser<Lexer> &parser, AST::Crate &crate) const;\n-  void dump_ast_pretty (AST::Crate &crate) const;\n+  void dump_ast_pretty (AST::Crate &crate, bool expanded = false) const;\n   void dump_ast_expanded (Parser<Lexer> &parser, AST::Crate &crate) const;\n   void dump_hir (HIR::Crate &crate) const;\n   void dump_hir_pretty (HIR::Crate &crate) const;"}]}