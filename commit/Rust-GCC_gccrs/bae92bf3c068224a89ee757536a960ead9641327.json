{"sha": "bae92bf3c068224a89ee757536a960ead9641327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlOTJiZjNjMDY4MjI0YTg5ZWU3NTc1MzZhOTYwZWFkOTY0MTMyNw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-07-16T19:49:51Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-16T19:49:51Z"}, "message": "c.opt: Document more options.\n\n\t* c.opt: Document more options.\ncp:\n\t* lang-options.h: Remove.\n\nFrom-SVN: r69477", "tree": {"sha": "9bdcb20b9abda8ee3e28d4bd538ff5ee78ee207f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bdcb20b9abda8ee3e28d4bd538ff5ee78ee207f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae92bf3c068224a89ee757536a960ead9641327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae92bf3c068224a89ee757536a960ead9641327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae92bf3c068224a89ee757536a960ead9641327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae92bf3c068224a89ee757536a960ead9641327/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc8c96fd6d398dd6013198715b0880af2d8769d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8c96fd6d398dd6013198715b0880af2d8769d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8c96fd6d398dd6013198715b0880af2d8769d8"}], "stats": {"total": 211, "additions": 48, "deletions": 163}, "files": [{"sha": "973cb776277c95dc5fe7500cd577464db094ac85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae92bf3c068224a89ee757536a960ead9641327/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae92bf3c068224a89ee757536a960ead9641327/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bae92bf3c068224a89ee757536a960ead9641327", "patch": "@@ -1,3 +1,7 @@\n+2003-07-16  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c.opt: Document more options.\n+\n 2003-07-16  Roger Sayle  <roger@eyesopen.com>\n \n \t* combine.c (subst): Also handle (subreg (const_double ...)) case"}, {"sha": "097775823b52a1ab13ba179460b166b0f752876a", "filename": "gcc/c.opt", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae92bf3c068224a89ee757536a960ead9641327/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae92bf3c068224a89ee757536a960ead9641327/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=bae92bf3c068224a89ee757536a960ead9641327", "patch": "@@ -174,16 +174,19 @@ Warn about possibly confusing type conversions\n \n Wctor-dtor-privacy\n C++ ObjC++\n+Warn when all constructors and destructors are private\n \n Wdeprecated\n C++ ObjC++\n+Warn about deprecated compiler features\n \n Wdiv-by-zero\n C ObjC\n Warn about compile-time integer division by zero\n \n Weffc++\n C++ ObjC++\n+Warn about violations of Effective C++ style rules\n \n Wendif-labels\n C ObjC C++ ObjC++\n@@ -244,6 +247,7 @@ Warn about uses of the \\\"#import\\\" directive\n \n Winvalid-offsetof\n C++ ObjC++\n+Warn about invalid uses of the \\\"offsetof\\\" macro\n \n Winvalid-pch\n C ObjC C++ ObjC++\n@@ -283,25 +287,30 @@ Warn about \\\"extern\\\" declarations not at file scope\n \n Wnon-template-friend\n C++ ObjC++\n+Warn when non-templatized friend functions are declared within a template\n \n Wnon-virtual-dtor\n C++ ObjC++\n+Warn about non-virtual destructors\n \n Wnonnull\n C ObjC\n \n Wold-style-cast\n C++ ObjC++\n+Warn if a C-style cast is used in a program\n \n Woverloaded-virtual\n C++ ObjC++\n+Warn about overloaded virtual function names\n \n Wparentheses\n C ObjC C++ ObjC++\n Warn about possibly missing parentheses\n \n Wpmf-conversions\n C++ ObjC++\n+Warn when converting the type of pointers to member functions\n \n Wpointer-arith\n C ObjC C++ ObjC++\n@@ -316,10 +325,11 @@ Warn about multiple declarations of the same object\n \n Wreorder\n C++ ObjC++\n+Warn when the compiler reorders code\n \n Wreturn-type\n C ObjC C++ ObjC++\n-Warn whenever a function's return type defaults to \\\"int\\\"\n+Warn whenever a function's return type defaults to \\\"int\\\" (C), or about inconsistent return types (C++)\n \n Wselector\n ObjC ObjC++\n@@ -334,13 +344,15 @@ Warn about signed-unsigned comparisons\n \n Wsign-promo\n C++ ObjC++\n+Warn when overload promotes from unsigned to signed\n \n Wstrict-prototypes\n C ObjC\n Warn about unprototyped function declarations\n \n Wsynth\n C++ ObjC++\n+Warn when synthesis behavior differs from Cfront\n \n Wsystem-headers\n C ObjC C++ ObjC++\n@@ -386,12 +398,14 @@ C++ ObjC++ Joined UInteger\n \n faccess-control\n C++ ObjC++\n+Enforce class member access control semantics\n \n fall-virtual\n C++ ObjC++\n \n falt-external-templates\n C++ ObjC++\n+Change when template instances are emitted\n \n fasm\n C ObjC C++ ObjC++\n@@ -406,35 +420,41 @@ C ObjC C++ ObjC++ Joined\n \n fcheck-new\n C++ ObjC++\n+Check the return value of new\n \n fcond-mismatch\n C ObjC C++ ObjC++\n Allow the arguments of the '?' operator to have different types\n \n fconserve-space\n C++ ObjC++\n+Reduce the size of object files\n \n fconst-strings\n C++ ObjC++\n+Make string literals \\\"const char[]\\\" not \\\"char[]\\\"\n \n fconstant-string-class=\n ObjC ObjC++ Joined\n \n fdefault-inline\n C++ ObjC++\n+Inline member functions by default\n \n fdollars-in-identifiers\n C ObjC C++ ObjC++\n Permit '$' as an identifier character\n \n fdump-\n C ObjC C++ ObjC++ Joined RejectNegative\n+-fdump-<type>\tDump various compiler internals to a file\n \n felide-constructors\n C++ ObjC++\n \n fenforce-eh-specs\n C++ ObjC++\n+Generate code to check exception specifications\n \n fenum-int-equiv\n C++ ObjC++\n@@ -454,13 +474,15 @@ C ObjC Joined\n \n ffor-scope\n C++ ObjC++\n+Scope of for-init-statement variables is local to the loop\n \n ffreestanding\n C ObjC\n Do not assume that standard C libraries and \\\"main\\\" exist\n \n fgnu-keywords\n C++ ObjC++\n+Recognize GNU-defined keywords\n \n fgnu-runtime\n ObjC ObjC++\n@@ -480,21 +502,26 @@ Assume normal C execution environment\n \n fhuge-objects\n C++ ObjC++\n+Enable support for huge objects\n \n fimplement-inlines\n C++ ObjC++\n+Export functions even if they can be inlined\n \n fimplicit-inline-templates\n C++ ObjC++\n+Emit implicit instantiations of inline templates\n \n fimplicit-templates\n C++ ObjC++\n+Emit implicit instantiations of templates\n \n flabels-ok\n C++ ObjC++\n \n fms-extensions\n C ObjC C++ ObjC++\n+Don't warn about uses of Microsoft extensions\n \n fname-mangling-version-\n C++ ObjC++ Joined\n@@ -513,25 +540,30 @@ C++ ObjC++\n \n foperator-names\n C++ ObjC++\n+Recognize C++ kewords like \\\"compl\\\" and \\\"xor\\\"\n \n foptional-diags\n C++ ObjC++\n+Enable optional diagnostics\n \n fpch-deps\n C ObjC C++ ObjC++\n \n fpermissive\n C++ ObjC++\n+Downgrade conformance errors to warnings\n \n fpreprocessed\n C ObjC C++ ObjC++\n Treat the input file as already preprocessed\n \n frepo\n C++ ObjC++\n+Enable automatic template instantiation\n \n frtti\n C++ ObjC++\n+Generate run time type descriptor information\n \n fshort-double\n C ObjC C++ ObjC++\n@@ -561,6 +593,7 @@ C++ ObjC++\n \n fstats\n C++ ObjC++\n+Display statistics accumulated during compilation\n \n fstrict-prototype\n C++ ObjC++\n@@ -571,6 +604,7 @@ C ObjC C++ ObjC++ Joined RejectNegative UInteger\n \n ftemplate-depth-\n C++ ObjC++ Joined RejectNegative UInteger \n+-ftemplate-depth-<number>\tSpecify maximum template instantiation depth\n \n fthis-is-variable\n C++ ObjC++\n@@ -585,22 +619,27 @@ Make \\\"char\\\" unsigned by default\n \n fuse-cxa-atexit\n C++ ObjC++\n+Use __cxa_atexit to register destructors\n \n fvtable-gc\n C++ ObjC++\n+Discard unused virtual functions\n \n fvtable-thunks\n C++ ObjC++\n+Implement vtables using thunks\n \n fweak\n C++ ObjC++\n+Emit common-like symbols as weak symbols\n \n fwide-exec-charset=\n C ObjC C++ ObjC++ Joined RejectNegative\n -fwide-exec-charset=<cset>\tConvert all wide strings and character constants to character set <cset>\n \n fxref\n C++ ObjC++\n+Emit cross referencing information\n \n gen-decls\n ObjC ObjC++"}, {"sha": "536221ec0ac4c4b18e67703ea774e14843f00e72", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae92bf3c068224a89ee757536a960ead9641327/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae92bf3c068224a89ee757536a960ead9641327/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bae92bf3c068224a89ee757536a960ead9641327", "patch": "@@ -1,3 +1,7 @@\n+2003-07-16  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang-options.h: Remove.\n+\n 2003-07-16  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/10962"}, {"sha": "982cc62258e48dceebf9f01f5a712ccea1e1183d", "filename": "gcc/cp/lang-options.h", "status": "removed", "additions": 0, "deletions": 162, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8c96fd6d398dd6013198715b0880af2d8769d8/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8c96fd6d398dd6013198715b0880af2d8769d8/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=cc8c96fd6d398dd6013198715b0880af2d8769d8", "patch": "@@ -1,162 +0,0 @@\n-/* Definitions for switches for C++.\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2003 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-DEFINE_LANG_NAME (\"C++\")\n-     \n-/* This is the contribution to the `documented_lang_options' array in\n-   toplev.c for g++.  */\n-\n-  { \"-faccess-control\", \"\" },\n-  { \"-fno-access-control\", \n-    N_(\"Do not obey access control semantics\") },\n-  { \"-falt-external-templates\", \n-    N_(\"Change when template instances are emitted\") },\n-  { \"-fno-alt-external-templates\", \"\" },\n-  { \"-fansi-overloading\", \"\" },\n-  { \"-fno-ansi-overloading\", \"\" },\n-  { \"-fcheck-new\", \n-    N_(\"Check the return value of new\") },\n-  { \"-fno-check-new\", \"\" },\n-  { \"-fconserve-space\", \n-    N_(\"Reduce size of object files\") },\n-  { \"-fno-conserve-space\", \"\" },\n-  { \"-fconst-strings\", \"\" },\n-  { \"-fno-const-strings\", \n-    N_(\"Make string literals `char[]' instead of `const char[]'\") },\n-  { \"-fdefault-inline\", \"\" },\n-  { \"-fdump-translation-unit-\", \n-    N_(\"Dump the entire translation unit to a file\") },\n-  { \"-fno-default-inline\", \n-    N_(\"Do not inline member functions by default\") },\n-  { \"-frtti\", \"\" },\n-  { \"-fno-rtti\", \n-    N_(\"Do not generate run time type descriptor information\") },\n-  { \"-felide-constructors\", \"\" },\n-  { \"-fno-elide-constructors\", \"\" },\n-  { \"-fenforce-eh-specs\", \"\" },\n-  { \"-fno-enforce-eh-specs\", \n-    N_(\"Do not generate code to check exception specifications\") },\n-  { \"-fexternal-templates\", \"\" },\n-  { \"-fno-external-templates\", \"\" },\n-  { \"-ffor-scope\", \"\" },\n-  { \"-fno-for-scope\", \n-    N_(\"Scope of for-init-statement vars extends outside\") },\n-  { \"-fgnu-keywords\", \"\" },\n-  { \"-fno-gnu-keywords\", \n-    N_(\"Do not recognize GNU defined keywords\") },\n-  { \"-fhandle-exceptions\", \"\" },\n-  { \"-fno-handle-exceptions\", \"\" },\n-  { \"-fhuge-objects\", \n-    N_(\"Enable support for huge objects\") },\n-  { \"-fno-huge-objects\", \"\" },\n-  { \"-fimplement-inlines\", \"\" },\n-  { \"-fno-implement-inlines\", \n-    N_(\"Export functions even if they can be inlined\") },\n-  { \"-fimplicit-templates\", \"\" },\n-  { \"-fno-implicit-templates\", \n-    N_(\"Only emit explicit template instantiations\") },\n-  { \"-fimplicit-inline-templates\", \"\" },\n-  { \"-fno-implicit-inline-templates\", \n-    N_(\"Only emit explicit instantiations of inline templates\") },\n-  { \"-finit-priority\", \"\" },\n-  { \"-fno-init-priority\", \"\" },\n-  { \"-fmemoize-lookups\", \"\" },\n-  { \"-fno-memoize-lookups\", \"\" },\n-  { \"-fms-extensions\", \n-    N_(\"Don't pedwarn about uses of Microsoft extensions\") },\n-  { \"-fno-ms-extensions\", \"\" },\n-  { \"-foperator-names\", \n-    N_(\"Recognize and/bitand/bitor/compl/not/or/xor\") },\n-  { \"-fno-operator-names\", \"\" },\n-  { \"-foptional-diags\", \"\" },\n-  { \"-fno-optional-diags\", \n-    N_(\"Disable optional diagnostics\") },\n-  { \"-fpermissive\", \n-    N_(\"Downgrade conformance errors to warnings\") },\n-  { \"-fno-permissive\", \"\" },\n-  { \"-frepo\", \n-    N_(\"Enable automatic template instantiation\") },\n-  { \"-fno-repo\", \"\" },\n-  { \"-fsave-memoized\", \"\" },\n-  { \"-fno-save-memoized\", \"\" },\n-  { \"-fstats\", \n-    N_(\"Display statistics accumulated during compilation\") },\n-  { \"-fno-stats\", \"\" },\n-  { \"-ftemplate-depth-\", \n-    N_(\"Specify maximum template instantiation depth\") },\n-  { \"-fuse-cxa-atexit\", \n-    N_(\"Use __cxa_atexit to register destructors\") },\n-  { \"-fno-use-cxa-atexit\", \"\" },\n-  { \"-fvtable-gc\", \n-    N_(\"Discard unused virtual functions\") },\n-  { \"-fno-vtable-gc\", \"\" },\n-  { \"-fvtable-thunks\", \n-    N_(\"Implement vtables using thunks\") },\n-  { \"-fno-vtable-thunks\", \"\" },\n-  { \"-fweak\", \n-    N_(\"Emit common-like symbols as weak symbols\") },\n-  { \"-fno-weak\", \"\" },\n-  { \"-fxref\", \n-    N_(\"Emit cross referencing information\") },\n-  { \"-fno-xref\", \"\" },\n-\n-  { \"-Wreturn-type\", \n-    N_(\"Warn about inconsistent return types\") },\n-  { \"-Wno-return-type\", \"\" },\n-  { \"-Woverloaded-virtual\", \n-    N_(\"Warn about overloaded virtual function names\") },\n-  { \"-Wno-overloaded-virtual\", \"\" },\n-  { \"-Wctor-dtor-privacy\", \"\" },\n-  { \"-Wno-ctor-dtor-privacy\", \n-    N_(\"Don't warn when all ctors/dtors are private\") },\n-  { \"-Wnon-virtual-dtor\", \n-    N_(\"Warn about non virtual destructors\") },\n-  { \"-Wno-non-virtual-dtor\", \"\" },\n-  { \"-Wextern-inline\", \n-    N_(\"Warn when a function is declared extern, then inline\") },\n-  { \"-Wno-extern-inline\", \"\" },\n-  { \"-Wreorder\", \n-    N_(\"Warn when the compiler reorders code\") },\n-  { \"-Wno-reorder\", \"\" },\n-  { \"-Wsynth\", \n-    N_(\"Warn when synthesis behavior differs from Cfront\") },\n-  { \"-Wno-synth\", \"\" },\n-  { \"-Wpmf-conversions\", \"\" },\n-  { \"-Wno-pmf-conversions\", \n-    N_(\"Don't warn when type converting pointers to member functions\") },\n-  { \"-Weffc++\", \n-    N_(\"Warn about violations of Effective C++ style rules\") },\n-  { \"-Wno-effc++\", \"\" },\n-  { \"-Wsign-promo\", \n-    N_(\"Warn when overload promotes from unsigned to signed\") },\n-  { \"-Wno-sign-promo\", \"\" },\n-  { \"-Wold-style-cast\", \n-    N_(\"Warn if a C style cast is used in a program\") },\n-  { \"-Wno-old-style-cast\", \"\" },\n-  { \"-Wnon-template-friend\", \"\" }, \n-  { \"-Wno-non-template-friend\", \n-    N_(\"Don't warn when non-templatized friend functions are declared within a template\") },\n-  { \"-Wdeprecated\", \"\" },\n-  { \"-Wno-deprecated\", \n-    N_(\"Don't announce deprecation of compiler features\") },\n-  { \"-Winvalid-offsetof\", \"\" },\n-  { \"-Wno-invalid-offsetof\",\n-    N_(\"Don't warn about invalid uses of the offsetof macro\") },"}]}