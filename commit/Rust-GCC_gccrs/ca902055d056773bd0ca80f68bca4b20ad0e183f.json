{"sha": "ca902055d056773bd0ca80f68bca4b20ad0e183f", "node_id": "C_kwDOANBUbNoAKGNhOTAyMDU1ZDA1Njc3M2JkMGNhODBmNjhiY2E0YjIwYWQwZTE4M2Y", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-21T09:57:43Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-01T18:28:04Z"}, "message": "[nvptx] Fix reduction lock\n\nWhen I run the libgomp test-case reduction-cplx-dbl.c on an nvptx accelerator\n(T400, driver version 470.86), I run into:\n...\nFAIL: libgomp.oacc-c/../libgomp.oacc-c-c++-common/reduction-cplx-dbl.c \\\n  -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O0  \\\n  execution test\nFAIL: libgomp.oacc-c/../libgomp.oacc-c-c++-common/reduction-cplx-dbl.c \\\n  -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none  -O2  \\\n  execution test\n...\n\nThe problem is in this code generated for a gang reduction:\n...\n$L39:\n\t\tatom.global.cas.b32     %r59, [__reduction_lock], 0, 1;\n\t\tsetp.ne.u32     %r116, %r59, 0;\n\t@%r116  bra     $L39;\n\t\tld.f64  %r60, [%r44];\n\t\tld.f64  %r61, [%r44+8];\n\t\tld.f64  %r64, [%r44];\n\t\tld.f64  %r65, [%r44+8];\n\t\tadd.f64 %r117, %r64, %r22;\n\t\tadd.f64 %r118, %r65, %r41;\n\t\tst.f64  [%r44], %r117;\n\t\tst.f64  [%r44+8], %r118;\n\t\tatom.global.cas.b32     %r119, [__reduction_lock], 1, 0;\n...\nwhich is taking and releasing a lock, but missing the appropriate barriers to\nprotect the loads and store inside the lock.\n\nFix this by adding membar.gl barriers.\n\nLikewise, add membar.cta barriers if we protect shared memory loads and\nstores (even though the worker-partitioning part of the test-case is not\nfailing).\n\nTested on x86_64 with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2022-01-27  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.cc (enum nvptx_builtins): Add\n\tNVPTX_BUILTIN_MEMBAR_GL and NVPTX_BUILTIN_MEMBAR_CTA.\n\t(VOID): New macro.\n\t(nvptx_init_builtins): Add MEMBAR_GL and MEMBAR_CTA.\n\t(nvptx_expand_builtin): Handle NVPTX_BUILTIN_MEMBAR_GL and\n\tNVPTX_BUILTIN_MEMBAR_CTA.\n\t(nvptx_lockfull_update): Add level parameter.  Emit barriers.\n\t(nvptx_reduction_update, nvptx_goacc_reduction_fini): Update call to\n\tnvptx_lockfull_update.\n\t* config/nvptx/nvptx.md (define_c_enum \"unspecv\"): Add\n\tUNSPECV_MEMBAR_GL.\n\t(define_expand \"nvptx_membar_gl\"): New expand.\n\t(define_insn \"*nvptx_membar_gl\"): New insn.", "tree": {"sha": "db44ff1af55b5491b73bed78c8997dcebdc19b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db44ff1af55b5491b73bed78c8997dcebdc19b7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca902055d056773bd0ca80f68bca4b20ad0e183f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca902055d056773bd0ca80f68bca4b20ad0e183f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca902055d056773bd0ca80f68bca4b20ad0e183f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca902055d056773bd0ca80f68bca4b20ad0e183f/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a971b28c880938bb7e070465ab8ee6ccdad1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a971b28c880938bb7e070465ab8ee6ccdad1fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a971b28c880938bb7e070465ab8ee6ccdad1fb"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "ceea4d3a09331c582ee29f41de08738ff2352787", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca902055d056773bd0ca80f68bca4b20ad0e183f/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca902055d056773bd0ca80f68bca4b20ad0e183f/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=ca902055d056773bd0ca80f68bca4b20ad0e183f", "patch": "@@ -5622,6 +5622,8 @@ enum nvptx_builtins\n   NVPTX_BUILTIN_VECTOR_ADDR,\n   NVPTX_BUILTIN_CMP_SWAP,\n   NVPTX_BUILTIN_CMP_SWAPLL,\n+  NVPTX_BUILTIN_MEMBAR_GL,\n+  NVPTX_BUILTIN_MEMBAR_CTA,\n   NVPTX_BUILTIN_MAX\n };\n \n@@ -5652,6 +5654,7 @@ nvptx_init_builtins (void)\n #define UINT unsigned_type_node\n #define LLUINT long_long_unsigned_type_node\n #define PTRVOID ptr_type_node\n+#define VOID void_type_node\n \n   DEF (SHUFFLE, \"shuffle\", (UINT, UINT, UINT, UINT, NULL_TREE));\n   DEF (SHUFFLELL, \"shufflell\", (LLUINT, LLUINT, UINT, UINT, NULL_TREE));\n@@ -5661,6 +5664,8 @@ nvptx_init_builtins (void)\n        (PTRVOID, ST, UINT, UINT, NULL_TREE));\n   DEF (CMP_SWAP, \"cmp_swap\", (UINT, PTRVOID, UINT, UINT, NULL_TREE));\n   DEF (CMP_SWAPLL, \"cmp_swapll\", (LLUINT, PTRVOID, LLUINT, LLUINT, NULL_TREE));\n+  DEF (MEMBAR_GL, \"membar_gl\", (VOID, VOID, NULL_TREE));\n+  DEF (MEMBAR_CTA, \"membar_cta\", (VOID, VOID, NULL_TREE));\n \n #undef DEF\n #undef ST\n@@ -5696,6 +5701,14 @@ nvptx_expand_builtin (tree exp, rtx target, rtx ARG_UNUSED (subtarget),\n     case NVPTX_BUILTIN_CMP_SWAPLL:\n       return nvptx_expand_cmp_swap (exp, target, mode, ignore);\n \n+    case NVPTX_BUILTIN_MEMBAR_GL:\n+      emit_insn (gen_nvptx_membar_gl ());\n+      return NULL_RTX;\n+\n+    case NVPTX_BUILTIN_MEMBAR_CTA:\n+      emit_insn (gen_nvptx_membar_cta ());\n+      return NULL_RTX;\n+\n     default: gcc_unreachable ();\n     }\n }\n@@ -6243,7 +6256,7 @@ nvptx_lockless_update (location_t loc, gimple_stmt_iterator *gsi,\n \n static tree\n nvptx_lockfull_update (location_t loc, gimple_stmt_iterator *gsi,\n-\t\t       tree ptr, tree var, tree_code op)\n+\t\t       tree ptr, tree var, tree_code op, int level)\n {\n   tree var_type = TREE_TYPE (var);\n   tree swap_fn = nvptx_builtin_decl (NVPTX_BUILTIN_CMP_SWAP, true);\n@@ -6295,8 +6308,17 @@ nvptx_lockfull_update (location_t loc, gimple_stmt_iterator *gsi,\n   lock_loop->any_estimate = true;\n   add_loop (lock_loop, entry_bb->loop_father);\n \n-  /* Build and insert the reduction calculation.  */\n+  /* Build the pre-barrier.  */\n   gimple_seq red_seq = NULL;\n+  enum nvptx_builtins barrier_builtin\n+    = (level == GOMP_DIM_GANG\n+       ? NVPTX_BUILTIN_MEMBAR_GL\n+       : NVPTX_BUILTIN_MEMBAR_CTA);\n+  tree barrier_fn = nvptx_builtin_decl (barrier_builtin, true);\n+  tree barrier_expr = build_call_expr_loc (loc, barrier_fn, 0);\n+  gimplify_stmt (&barrier_expr, &red_seq);\n+\n+  /* Build the reduction calculation.  */\n   tree acc_in = make_ssa_name (var_type);\n   tree ref_in = build_simple_mem_ref (ptr);\n   TREE_THIS_VOLATILE (ref_in) = 1;\n@@ -6310,6 +6332,11 @@ nvptx_lockfull_update (location_t loc, gimple_stmt_iterator *gsi,\n   TREE_THIS_VOLATILE (ref_out) = 1;\n   gimplify_assign (ref_out, acc_out, &red_seq);\n \n+  /* Build the post-barrier.  */\n+  barrier_expr = build_call_expr_loc (loc, barrier_fn, 0);\n+  gimplify_stmt (&barrier_expr, &red_seq);\n+\n+  /* Insert the reduction calculation.  */\n   gsi_insert_seq_before (gsi, red_seq, GSI_SAME_STMT);\n \n   /* Build & insert the unlock sequence.  */\n@@ -6330,7 +6357,7 @@ nvptx_lockfull_update (location_t loc, gimple_stmt_iterator *gsi,\n \n static tree\n nvptx_reduction_update (location_t loc, gimple_stmt_iterator *gsi,\n-\t\t\ttree ptr, tree var, tree_code op)\n+\t\t\ttree ptr, tree var, tree_code op, int level)\n {\n   tree type = TREE_TYPE (var);\n   tree size = TYPE_SIZE (type);\n@@ -6339,7 +6366,7 @@ nvptx_reduction_update (location_t loc, gimple_stmt_iterator *gsi,\n       || size == TYPE_SIZE (long_long_unsigned_type_node))\n     return nvptx_lockless_update (loc, gsi, ptr, var, op);\n   else\n-    return nvptx_lockfull_update (loc, gsi, ptr, var, op);\n+    return nvptx_lockfull_update (loc, gsi, ptr, var, op, level);\n }\n \n /* NVPTX implementation of GOACC_REDUCTION_SETUP.  */\n@@ -6531,7 +6558,7 @@ nvptx_goacc_reduction_fini (gcall *call, offload_attrs *oa)\n \t  gsi_insert_seq_before (&gsi, seq, GSI_SAME_STMT);\n \t  seq = NULL;\n \t  r = nvptx_reduction_update (gimple_location (call), &gsi,\n-\t\t\t\t      accum, var, op);\n+\t\t\t\t      accum, var, op, level);\n \t}\n     }\n "}, {"sha": "773ae8fdc6feea4fbe2538c3d6f9246cd2cb0afc", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca902055d056773bd0ca80f68bca4b20ad0e183f/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca902055d056773bd0ca80f68bca4b20ad0e183f/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=ca902055d056773bd0ca80f68bca4b20ad0e183f", "patch": "@@ -58,6 +58,7 @@\n    UNSPECV_BARSYNC\n    UNSPECV_MEMBAR\n    UNSPECV_MEMBAR_CTA\n+   UNSPECV_MEMBAR_GL\n    UNSPECV_DIM_POS\n \n    UNSPECV_FORK\n@@ -1932,6 +1933,22 @@\n   \"\\\\tmembar.cta;\"\n   [(set_attr \"predicable\" \"false\")])\n \n+(define_expand \"nvptx_membar_gl\"\n+  [(set (match_dup 0)\n+\t(unspec_volatile:BLK [(match_dup 0)] UNSPECV_MEMBAR_GL))]\n+  \"\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+(define_insn \"*nvptx_membar_gl\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec_volatile:BLK [(match_dup 0)] UNSPECV_MEMBAR_GL))]\n+  \"\"\n+  \"\\\\tmembar.gl;\"\n+  [(set_attr \"predicable\" \"false\")])\n+\n (define_insn \"nvptx_nounroll\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_NOUNROLL)]\n   \"\""}]}