{"sha": "d02cb6755946392bc276b79bdb7ffd13e371b2b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyY2I2NzU1OTQ2MzkyYmMyNzZiNzliZGI3ZmZkMTNlMzcxYjJiMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-08-21T12:26:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-21T12:26:12Z"}, "message": "i386.c (ix86_expand_clear): Use FLAGS_REG.\n\n\t* config/i386/i386.c (ix86_expand_clear): Use FLAGS_REG.\n\t(ix86_expand_strlensi_unroll_1): Ditto.\n\t(ix86_expand_branch): Use FLAGS_REG and FPSR_REG.\n\t(ix86_expand_carry_flag_compare): Update comment.\n\nFrom-SVN: r127666", "tree": {"sha": "8387115821f1264be67c3f383afec3a8a50a1322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8387115821f1264be67c3f383afec3a8a50a1322"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d02cb6755946392bc276b79bdb7ffd13e371b2b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02cb6755946392bc276b79bdb7ffd13e371b2b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02cb6755946392bc276b79bdb7ffd13e371b2b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02cb6755946392bc276b79bdb7ffd13e371b2b2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42e61fe73d8ceeba51e4528f02941cb4f5f9ba0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e61fe73d8ceeba51e4528f02941cb4f5f9ba0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e61fe73d8ceeba51e4528f02941cb4f5f9ba0a"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "7f26189de8e47a4cf0c619573750db4099b1d8de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02cb6755946392bc276b79bdb7ffd13e371b2b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02cb6755946392bc276b79bdb7ffd13e371b2b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d02cb6755946392bc276b79bdb7ffd13e371b2b2", "patch": "@@ -1,3 +1,10 @@\n+2007-08-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_clear): Use FLAGS_REG.\n+\t(ix86_expand_strlensi_unroll_1): Ditto.\n+\t(ix86_expand_branch): Use FLAGS_REG and FPSR_REG.\n+\t(ix86_expand_carry_flag_compare): Update comment.\n+\n 2007-08-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/32912"}, {"sha": "e094efe79d2fda3c12cf1872e7aa44f6ee3011c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02cb6755946392bc276b79bdb7ffd13e371b2b2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02cb6755946392bc276b79bdb7ffd13e371b2b2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d02cb6755946392bc276b79bdb7ffd13e371b2b2", "patch": "@@ -9756,7 +9756,7 @@ ix86_expand_clear (rtx dest)\n   /* This predicate should match that for movsi_xor and movdi_xor_rex64.  */\n   if (reload_completed && (!TARGET_USE_MOV0 || optimize_size))\n     {\n-      rtx clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, 17));\n+      rtx clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n       tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n     }\n \n@@ -11726,9 +11726,9 @@ ix86_expand_branch (enum rtx_code code, rtx label)\n \t    vec = rtvec_alloc (3 + !use_fcomi);\n \t    RTVEC_ELT (vec, 0) = tmp;\n \t    RTVEC_ELT (vec, 1)\n-\t      = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCFPmode, 18));\n+\t      = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCFPmode, FPSR_REG));\n \t    RTVEC_ELT (vec, 2)\n-\t      = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCFPmode, 17));\n+\t      = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCFPmode, FLAGS_REG));\n \t    if (! use_fcomi)\n \t      RTVEC_ELT (vec, 3)\n \t\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (HImode));\n@@ -12009,8 +12009,7 @@ ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n   enum machine_mode mode =\n     GET_MODE (op0) != VOIDmode ? GET_MODE (op0) : GET_MODE (op1);\n \n-  /* Do not handle DImode compares that go through special path.\n-     Also we can't deal with FP compares yet.  This is possible to add.  */\n+  /* Do not handle DImode compares that go through special path.  */\n   if (mode == (TARGET_64BIT ? TImode : DImode))\n     return false;\n \n@@ -12037,9 +12036,10 @@ ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n \t  code = swap_condition (code);\n \t}\n \n-      /* Try to expand the comparison and verify that we end up with carry flag\n-\t based comparison.  This is fails to be true only when we decide to expand\n-\t comparison using arithmetic that is not too common scenario.  */\n+      /* Try to expand the comparison and verify that we end up with\n+\t carry flag based comparison.  This fails to be true only when\n+\t we decide to expand comparison using arithmetic that is not\n+\t too common scenario.  */\n       start_sequence ();\n       compare_op = ix86_expand_fp_compare (code, op0, op1, NULL_RTX,\n \t\t\t\t\t   &second_test, &bypass_test);\n@@ -12048,19 +12048,24 @@ ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n \n       if (second_test || bypass_test)\n \treturn false;\n+\n       if (GET_MODE (XEXP (compare_op, 0)) == CCFPmode\n \t  || GET_MODE (XEXP (compare_op, 0)) == CCFPUmode)\n         code = ix86_fp_compare_code_to_integer (GET_CODE (compare_op));\n       else\n \tcode = GET_CODE (compare_op);\n+\n       if (code != LTU && code != GEU)\n \treturn false;\n+\n       emit_insn (compare_seq);\n       *pop = compare_op;\n       return true;\n     }\n+\n   if (!INTEGRAL_MODE_P (mode))\n     return false;\n+\n   switch (code)\n     {\n     case LTU:\n@@ -15477,7 +15482,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n   /* Avoid branch in fixing the byte.  */\n   tmpreg = gen_lowpart (QImode, tmpreg);\n   emit_insn (gen_addqi3_cc (tmpreg, tmpreg, tmpreg));\n-  cmp = gen_rtx_LTU (Pmode, gen_rtx_REG (CCmode, 17), const0_rtx);\n+  cmp = gen_rtx_LTU (Pmode, gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n   if (TARGET_64BIT)\n     emit_insn (gen_subdi3_carry_rex64 (out, out, GEN_INT (3), cmp));\n   else"}]}