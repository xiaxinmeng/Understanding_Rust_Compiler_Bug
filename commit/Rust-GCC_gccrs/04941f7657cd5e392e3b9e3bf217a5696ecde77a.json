{"sha": "04941f7657cd5e392e3b9e3bf217a5696ecde77a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5NDFmNzY1N2NkNWUzOTJlM2I5ZTNiZjIxN2E1Njk2ZWNkZTc3YQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2008-02-06T20:31:43Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2008-02-06T20:31:43Z"}, "message": "re PR c++/35056 (ICE in copy_to_mode_reg, at explow.c:621)\n\ngcc/cp/ChangeLog:\nPR c++/35056\n* tree.c: Include tree-flow.h.\n(build_target_expr): Check type compatibility.\n* Make-lang.in (cp/tree.o): Depend on $(TREE_FLOW_H).\n* call.c (convert_like_real): Convert bitfield to expected type.\ngcc/testsuite/ChangeLog:\nPR c++/35056\n* g++.dg/conversion/bitfield8.C: New.\n\nFrom-SVN: r132158", "tree": {"sha": "39c1b476e34a52ca79f0a50996d69317e822f22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39c1b476e34a52ca79f0a50996d69317e822f22a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04941f7657cd5e392e3b9e3bf217a5696ecde77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04941f7657cd5e392e3b9e3bf217a5696ecde77a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04941f7657cd5e392e3b9e3bf217a5696ecde77a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04941f7657cd5e392e3b9e3bf217a5696ecde77a/comments", "author": null, "committer": null, "parents": [{"sha": "fb208bed52791b758dd4de3143cef4be0e1bb793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb208bed52791b758dd4de3143cef4be0e1bb793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb208bed52791b758dd4de3143cef4be0e1bb793"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "e609de4215dac19d24b11c85859a075fa34d0391", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04941f7657cd5e392e3b9e3bf217a5696ecde77a", "patch": "@@ -1,3 +1,11 @@\n+2008-02-06  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/35056\n+\t* tree.c: Include tree-flow.h.\n+\t(build_target_expr): Check type compatibility.\n+\t* Make-lang.in (cp/tree.o): Depend on $(TREE_FLOW_H).\n+\t* call.c (convert_like_real): Convert bitfield to expected type.\n+\n 2008-02-06  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/35049"}, {"sha": "0aea4cf4013fc818f486e02a982cd69f17301d01", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=04941f7657cd5e392e3b9e3bf217a5696ecde77a", "patch": "@@ -1,6 +1,6 @@\n # Top level -*- makefile -*- fragment for GNU C++.\n #   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-#   2005, 2007\n+#   2005, 2007, 2008\n #   Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -261,7 +261,7 @@ cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h $(FLAGS_H) toplev.h \\\n cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H)\n cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n   insn-config.h $(INTEGRATE_H) $(TREE_INLINE_H) $(REAL_H) gt-cp-tree.h \\\n-  $(TARGET_H) debug.h\n+  $(TARGET_H) debug.h $(TREE_FLOW_H)\n cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(TM_H)\n cp/rtti.o: cp/rtti.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h convert.h \\\n   $(TARGET_H) gt-cp-rtti.h"}, {"sha": "745c8e8d50af3d916485db1d62adc39a3fe00785", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=04941f7657cd5e392e3b9e3bf217a5696ecde77a", "patch": "@@ -4507,6 +4507,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t       expr, ref_type);\n \t\treturn error_mark_node;\n \t      }\n+\t    if (lvalue & clk_bitfield)\n+\t      expr = convert_bitfield_to_declared_type (expr);\n \t    expr = build_target_expr_with_type (expr, type);\n \t  }\n "}, {"sha": "b14462fd3394dfe2d1cc63d359dd0727a60a5fa5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=04941f7657cd5e392e3b9e3bf217a5696ecde77a", "patch": "@@ -1,6 +1,6 @@\n /* Language-dependent node constructors for parse phase of GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"target.h\"\n #include \"convert.h\"\n+#include \"tree-flow.h\"\n \n static tree bot_manip (tree *, int *, void *);\n static tree bot_replace (tree *, int *, void *);\n@@ -259,6 +260,13 @@ build_target_expr (tree decl, tree value)\n {\n   tree t;\n \n+#ifdef ENABLE_CHECKING\n+  gcc_assert (VOID_TYPE_P (TREE_TYPE (value))\n+\t      || TREE_TYPE (decl) == TREE_TYPE (value)\n+\t      || useless_type_conversion_p (TREE_TYPE (decl),\n+\t\t\t\t\t    TREE_TYPE (value)));\n+#endif\n+\n   t = build4 (TARGET_EXPR, TREE_TYPE (decl), decl, value,\n \t      cxx_maybe_build_cleanup (decl), NULL_TREE);\n   /* We always set TREE_SIDE_EFFECTS so that expand_expr does not"}, {"sha": "aedc9a3a9da8fa2c3329529a780726ff118d421d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04941f7657cd5e392e3b9e3bf217a5696ecde77a", "patch": "@@ -1,3 +1,8 @@\n+2008-02-06  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/35056\n+\t* g++.dg/conversion/bitfield8.C: New.\n+\n 2008-02-06  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* g++.dg/ext/vector13.C: Fix for compilation under -pedantic."}, {"sha": "dbc62fade5ddeff259f8cba2d87d25148628d791", "filename": "gcc/testsuite/g++.dg/conversion/bitfield8.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04941f7657cd5e392e3b9e3bf217a5696ecde77a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield8.C?ref=04941f7657cd5e392e3b9e3bf217a5696ecde77a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/35056\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+enum EBorderStyle { bla = 1 };\n+inline bool compare_ref(const unsigned int &t, const EBorderStyle &u)\n+{ return t == u; }\n+inline bool compare_val(const unsigned int t, const EBorderStyle u)\n+{ return t == u; }\n+struct S {\n+  unsigned m_style : 4;\n+};\n+void call_ref (S *s, EBorderStyle v)\n+{ if (!compare_ref(s->m_style, v)) s->m_style = v; }\n+void call_val (S *s, EBorderStyle v)\n+{ if (!compare_val(s->m_style, v)) s->m_style = v; }"}]}