{"sha": "bca9e17b5aade3e19ae49ff9c211510674b46a02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhOWUxN2I1YWFkZTNlMTlhZTQ5ZmY5YzIxMTUxMDY3NGI0NmEwMg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-10-18T17:39:47Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-10-18T17:39:47Z"}, "message": "re PR tree-optimization/17656 (internal compiler error: in replace_immediate_uses, at tree-ssa.c:1041)\n\n\n\tPR tree-optimization/17656\n\t* tree-ssa.c (replace_immediate_uses): When replacing a\n\tconstant, if the call to fold_stmt produced a different\n\tstatement, get an appropriate statement pointer by scanning\n\tSTMT's basic block.\n\n\tPR tree-optimization/17656\n\t* testsuite/gcc.c-torture/compile/pr17656.c: New test.\n\nFrom-SVN: r89233", "tree": {"sha": "41b0ff9a0dade709f61ae4c8b7f6c1e781617743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41b0ff9a0dade709f61ae4c8b7f6c1e781617743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca9e17b5aade3e19ae49ff9c211510674b46a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca9e17b5aade3e19ae49ff9c211510674b46a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca9e17b5aade3e19ae49ff9c211510674b46a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca9e17b5aade3e19ae49ff9c211510674b46a02/comments", "author": null, "committer": null, "parents": [{"sha": "18e4be8561b8aee3937528dd27635eaf761e57d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e4be8561b8aee3937528dd27635eaf761e57d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e4be8561b8aee3937528dd27635eaf761e57d0"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "c6bcd56d4ce769233685acfb6e367fff5f198486", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca9e17b5aade3e19ae49ff9c211510674b46a02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca9e17b5aade3e19ae49ff9c211510674b46a02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bca9e17b5aade3e19ae49ff9c211510674b46a02", "patch": "@@ -1,3 +1,11 @@\n+2004-10-18  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/17656\n+\t* tree-ssa.c (replace_immediate_uses): When replacing a\n+\tconstant, if the call to fold_stmt produced a different\n+\tstatement, get an appropriate statement pointer by scanning\n+\tSTMT's basic block.\n+\n 2004-10-18  Richard Henderson  <rth@redhat.com>\n \n \t* pointer-set.c (hash1): Don't use libm functions in fallback case."}, {"sha": "0cf098bf76ffb537229845406124fd22d4c638fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca9e17b5aade3e19ae49ff9c211510674b46a02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca9e17b5aade3e19ae49ff9c211510674b46a02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bca9e17b5aade3e19ae49ff9c211510674b46a02", "patch": "@@ -1,3 +1,8 @@\n+2004-10-18  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/17656\n+\t* testsuite/gcc.c-torture/compile/pr17656.c: New test.\n+\n 2004-10-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/eh/shadow1.C: New."}, {"sha": "0acb71f0c5e30330af7b5b098a54e220ee28a7af", "filename": "gcc/testsuite/gcc.c-torture/compile/pr17656.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca9e17b5aade3e19ae49ff9c211510674b46a02/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17656.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca9e17b5aade3e19ae49ff9c211510674b46a02/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17656.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17656.c?ref=bca9e17b5aade3e19ae49ff9c211510674b46a02", "patch": "@@ -0,0 +1,18 @@\n+int sprintf (char *s, const char *format, ...);\n+\n+int foo(int i, int j)\n+{\n+   char *buf, *str;\n+\n+   if (i)\n+     str = \"\";\n+   else if (j)\n+     str = \"\";\n+   else\n+     return 1;\n+\n+   /* We were propagating &\"\"[0] here and not calling fold_stmt with a\n+      proper statement pointer.  */\n+   sprintf(buf, str);\n+   return 0;\n+}"}, {"sha": "4362e01aff8d6e93979c4d14bdd71b2e769aad1f", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca9e17b5aade3e19ae49ff9c211510674b46a02/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca9e17b5aade3e19ae49ff9c211510674b46a02/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=bca9e17b5aade3e19ae49ff9c211510674b46a02", "patch": "@@ -1093,7 +1093,8 @@ replace_immediate_uses (tree var, tree repl)\n \t with a new expression.  Since the current def-use machinery\n \t does not return pointers to statements, we call fold_stmt\n \t with the address of a local temporary, if that call changes\n-\t the temporary then we fall on our swords.\n+\t the temporary then we fallback on looking for a proper\n+\t pointer to STMT by scanning STMT's basic block.\n \n \t Note that all this will become unnecessary soon.  This\n \t pass is being replaced with a proper copy propagation pass\n@@ -1103,7 +1104,22 @@ replace_immediate_uses (tree var, tree repl)\n \t  tree tmp = stmt;\n \t  fold_stmt (&tmp);\n \t  if (tmp != stmt)\n-\t    abort ();\n+\t    {\n+\t      basic_block bb = bb_for_stmt (stmt);\n+\t      block_stmt_iterator si;\n+\n+\t      /* Start iterating at the start of the basic block\n+\t\t holding STMT until we reach it.  This is slow, but\n+\t\t it's the only way to get a statement pointer\n+\t\t reliably.  */\n+\t      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n+\t\tif (bsi_stmt (si) == stmt)\n+\t\t  {\n+\t\t    fold_stmt (bsi_stmt_ptr (si));\n+\t\t    stmt = bsi_stmt (si);\n+\t\t    break;\n+\t\t  }\n+\t    }\n \t}\n \n       /* If REPL is a pointer, it may have different memory tags associated"}]}