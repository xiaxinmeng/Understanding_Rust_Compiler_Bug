{"sha": "acd4b9103c1a30c833de4eee31fb69c3ff13cd77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkNGI5MTAzYzFhMzBjODMzZGU0ZWVlMzFmYjY5YzNmZjEzY2Q3Nw==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-06-29T14:18:55Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-13T18:46:34Z"}, "message": "rs6000: Add support for SSE4.1 \"test\" intrinsics\n\n2021-07-13  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_testz_si128, _mm_testc_si128,\n\t_mm_testnzc_si128, _mm_test_all_ones, _mm_test_all_zeros,\n\t_mm_test_mix_ones_zeros): New.", "tree": {"sha": "021169b667d8d93e99c5bb5df13d0450e0d2df1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021169b667d8d93e99c5bb5df13d0450e0d2df1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acd4b9103c1a30c833de4eee31fb69c3ff13cd77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd4b9103c1a30c833de4eee31fb69c3ff13cd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd4b9103c1a30c833de4eee31fb69c3ff13cd77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd4b9103c1a30c833de4eee31fb69c3ff13cd77/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d3eaeb4f505b0838c673ee28e7dba8687fc8272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3eaeb4f505b0838c673ee28e7dba8687fc8272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3eaeb4f505b0838c673ee28e7dba8687fc8272"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "16fd34d836ff28fd35b301e766ca5986b16c583b", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd4b9103c1a30c833de4eee31fb69c3ff13cd77/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd4b9103c1a30c833de4eee31fb69c3ff13cd77/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=acd4b9103c1a30c833de4eee31fb69c3ff13cd77", "patch": "@@ -116,4 +116,60 @@ _mm_blendv_epi8 (__m128i __A, __m128i __B, __m128i __mask)\n   return (__m128i) vec_sel ((__v16qu) __A, (__v16qu) __B, __lmask);\n }\n \n+__inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_testz_si128 (__m128i __A, __m128i __B)\n+{\n+  /* Note: This implementation does NOT set \"zero\" or \"carry\" flags.  */\n+  const __v16qu __zero = {0};\n+  return vec_all_eq (vec_and ((__v16qu) __A, (__v16qu) __B), __zero);\n+}\n+\n+__inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_testc_si128 (__m128i __A, __m128i __B)\n+{\n+  /* Note: This implementation does NOT set \"zero\" or \"carry\" flags.  */\n+  const __v16qu __zero = {0};\n+  const __v16qu __notA = vec_nor ((__v16qu) __A, (__v16qu) __A);\n+  return vec_all_eq (vec_and ((__v16qu) __notA, (__v16qu) __B), __zero);\n+}\n+\n+__inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_testnzc_si128 (__m128i __A, __m128i __B)\n+{\n+  /* Note: This implementation does NOT set \"zero\" or \"carry\" flags.  */\n+  return _mm_testz_si128 (__A, __B) == 0 && _mm_testc_si128 (__A, __B) == 0;\n+}\n+\n+__inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_test_all_zeros (__m128i __A, __m128i __mask)\n+{\n+  const __v16qu __zero = {0};\n+  return vec_all_eq (vec_and ((__v16qu) __A, (__v16qu) __mask), __zero);\n+}\n+\n+__inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_test_all_ones (__m128i __A)\n+{\n+  const __v16qu __ones = vec_splats ((unsigned char) 0xff);\n+  return vec_all_eq ((__v16qu) __A, __ones);\n+}\n+\n+__inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_test_mix_ones_zeros (__m128i __A, __m128i __mask)\n+{\n+  const __v16qu __zero = {0};\n+  const __v16qu __Amasked = vec_and ((__v16qu) __A, (__v16qu) __mask);\n+  const int any_ones = vec_any_ne (__Amasked, __zero);\n+  const __v16qu __notA = vec_nor ((__v16qu) __A, (__v16qu) __A);\n+  const __v16qu __notAmasked = vec_and ((__v16qu) __notA, (__v16qu) __mask);\n+  const int any_zeros = vec_any_ne (__notAmasked, __zero);\n+  return any_ones * any_zeros;\n+}\n+\n #endif"}]}