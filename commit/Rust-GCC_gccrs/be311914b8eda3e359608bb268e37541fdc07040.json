{"sha": "be311914b8eda3e359608bb268e37541fdc07040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUzMTE5MTRiOGVkYTNlMzU5NjA4YmIyNjhlMzc1NDFmZGMwNzA0MA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2009-12-03T19:09:29Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2009-12-03T19:09:29Z"}, "message": "re PR libffi/42243 (powerpc-apple-darwin9 libffi failures)\n\n        PR libffi/42243\n        * src/powerpc/ffi_darwin.c (ffi_prep_args): Remove extra parentheses.\n\nFrom-SVN: r154956", "tree": {"sha": "f324f4b85861f65a710b09af0a2018b7d8d0dffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f324f4b85861f65a710b09af0a2018b7d8d0dffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be311914b8eda3e359608bb268e37541fdc07040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be311914b8eda3e359608bb268e37541fdc07040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be311914b8eda3e359608bb268e37541fdc07040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be311914b8eda3e359608bb268e37541fdc07040/comments", "author": null, "committer": null, "parents": [{"sha": "154885548ccf815024f38df1fbb1ccaddf8c65b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154885548ccf815024f38df1fbb1ccaddf8c65b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154885548ccf815024f38df1fbb1ccaddf8c65b7"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "cddc10354953a5270942a927c793b162567468a1", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be311914b8eda3e359608bb268e37541fdc07040/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be311914b8eda3e359608bb268e37541fdc07040/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=be311914b8eda3e359608bb268e37541fdc07040", "patch": "@@ -1,3 +1,8 @@\n+2009-12-03  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR libffi/42243\n+\t* src/powerpc/ffi_darwin.c (ffi_prep_args): Remove extra parentheses.\n+\n 2009-12-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* testsuite/libffi.call/cls_longdouble_va.c (main): Fix format string."}, {"sha": "4c3f834b3d8c7e7e3c796960711c827dfacd300c", "filename": "libffi/src/powerpc/ffi_darwin.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be311914b8eda3e359608bb268e37541fdc07040/libffi%2Fsrc%2Fpowerpc%2Fffi_darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be311914b8eda3e359608bb268e37541fdc07040/libffi%2Fsrc%2Fpowerpc%2Fffi_darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fffi_darwin.c?ref=be311914b8eda3e359608bb268e37541fdc07040", "patch": "@@ -90,13 +90,12 @@ void ffi_prep_args(extended_cif *ecif, unsigned long *const stack)\n \n   /* 'fpr_base' points at the space for fpr1, and grows upwards as\n      we use FPR registers.  */\n-  double *fpr_base = (double *) ((stacktop - ASM_NEEDS_REGISTERS)\n-\t\t\t\t - NUM_FPR_ARG_REGISTERS);\n+  double *fpr_base = (double *) (stacktop - ASM_NEEDS_REGISTERS) - NUM_FPR_ARG_REGISTERS;\n   int fparg_count = 0;\n \n \n   /* 'next_arg' grows up as we put parameters in it.  */\n-  unsigned long *next_arg = (unsigned long *) stack + 6; /* 6 reserved positions.  */\n+  unsigned long *next_arg = stack + 6; /* 6 reserved positions.  */\n \n   int i;\n   double double_tmp;\n@@ -107,16 +106,16 @@ void ffi_prep_args(extended_cif *ecif, unsigned long *const stack)\n   unsigned size_al = 0;\n \n   /* Check that everything starts aligned properly.  */\n-  FFI_ASSERT(((unsigned)(char *)stack & 0xF) == 0);\n-  FFI_ASSERT(((unsigned)(char *)stacktop & 0xF) == 0);\n+  FFI_ASSERT(((unsigned) (char *) stack & 0xF) == 0);\n+  FFI_ASSERT(((unsigned) (char *) stacktop & 0xF) == 0);\n   FFI_ASSERT((bytes & 0xF) == 0);\n \n   /* Deal with return values that are actually pass-by-reference.\n      Rule:\n      Return values are referenced by r3, so r4 is the first parameter.  */\n \n   if (flags & FLAG_RETVAL_REFERENCE)\n-    *next_arg++ = (unsigned long)(char *)ecif->rvalue;\n+    *next_arg++ = (unsigned long) (char *) ecif->rvalue;\n \n   /* Now for the arguments.  */\n   for (i = ecif->cif->nargs; i > 0; i--, ptr++, p_argv++)\n@@ -127,7 +126,7 @@ void ffi_prep_args(extended_cif *ecif, unsigned long *const stack)\n \t   purpose registers are filled, the corresponding GPRs that match\n \t   the size of the floating-point parameter are skipped.  */\n \tcase FFI_TYPE_FLOAT:\n-\t  double_tmp = *(float *)*p_argv;\n+\t  double_tmp = *(float *) *p_argv;\n \t  if (fparg_count >= NUM_FPR_ARG_REGISTERS)\n \t    *(double *)next_arg = double_tmp;\n \t  else\n@@ -138,7 +137,7 @@ void ffi_prep_args(extended_cif *ecif, unsigned long *const stack)\n \t  break;\n \n \tcase FFI_TYPE_DOUBLE:\n-\t  double_tmp = *(double *)*p_argv;\n+\t  double_tmp = *(double *) *p_argv;\n \t  if (fparg_count >= NUM_FPR_ARG_REGISTERS)\n \t    *(double *)next_arg = double_tmp;\n \t  else\n@@ -163,7 +162,7 @@ void ffi_prep_args(extended_cif *ecif, unsigned long *const stack)\n \t  next_arg += 2;\n \t  fparg_count += 2;\n #else\n-\t  double_tmp = *((double *) *p_argv);\n+\t  double_tmp = ((double *) *p_argv)[0];\n \t  if (fparg_count < NUM_FPR_ARG_REGISTERS)\n \t    *fpr_base++ = double_tmp;\n \t  else\n@@ -187,7 +186,7 @@ void ffi_prep_args(extended_cif *ecif, unsigned long *const stack)\n \t  goto putgpr;\n #else\n \t  *(long long *) next_arg = *(long long *) *p_argv;\n-\t  next_arg+=2;\n+\t  next_arg += 2;\n #endif\n \t  break;\n \tcase FFI_TYPE_POINTER:\n@@ -225,14 +224,13 @@ void ffi_prep_args(extended_cif *ecif, unsigned long *const stack)\n \t     Structures with 3 byte in size are padded upwards.  */\n \t  size_al = (*ptr)->size;\n \t  /* If the first member of the struct is a double, then align\n-\t     the struct to double-word.\n-\t     Type 3 is defined in include/ffi.h. #define FFI_TYPE_DOUBLE 3.  */\n-\t  if ((*ptr)->elements[0]->type == 3)\n+\t     the struct to double-word.  */\n+\t  if ((*ptr)->elements[0]->type == FFI_TYPE_DOUBLE)\n \t    size_al = ALIGN((*ptr)->size, 8);\n \t  if (size_al < 3 && ecif->cif->abi == FFI_DARWIN)\n \t    dest_cpy += 4 - size_al;\n \n-\t  memcpy((char *)dest_cpy, (char *)*p_argv, size_al);\n+\t  memcpy((char *) dest_cpy, (char *) *p_argv, size_al);\n \t  next_arg += (size_al + 3) / 4;\n #endif\n \t  break;"}]}