{"sha": "e0a7a6752dad7848eb4b29b826a551c0992256ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhN2E2NzUyZGFkNzg0OGViNGIyOWI4MjZhNTUxYzA5OTIyNTZlYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-21T21:24:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-21T21:24:08Z"}, "message": "analyzer: fix issues with phi handling\n\nThe analyzer's state purging code was overzealously purging state\nfor ssa names that might be used within phi nodes, leading to\nfalse positives from -Wanalyzer-use-of-uninitialized-value.\n\nThis patch updates phi handling in the analyzer to fix these issues.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (region_model::handle_phi): Add \"old_state\"\n\tparam and use it.\n\t(region_model::update_for_phis): Update so that all of the phi\n\tstmts are effectively handled simultaneously, rather than in\n\torder.\n\t* region-model.h (region_model::handle_phi): Add \"old_state\"\n\tparam.\n\t* state-purge.cc (self_referential_phi_p): Replace with...\n\t(name_used_by_phis_p): ...this new function.\n\t(state_purge_per_ssa_name::process_point): Update to use the\n\tabove, so that all phi stmts at a basic block are effectively\n\tconsidered simultaneously, and only consider the phi arguments for\n\tthe pertinent in-edge.\n\t* supergraph.cc (cfg_superedge::get_phi_arg_idx): New.\n\t(cfg_superedge::get_phi_arg): Use the above.\n\t* supergraph.h (cfg_superedge::get_phi_arg_idx): New decl.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/explode-2.c: Remove xfail.\n\t* gcc.dg/analyzer/explode-2a.c: Remove expected leak warning on\n\twhile stmt.\n\t* gcc.dg/analyzer/phi-2.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "81a2f099b94604fbc59132682e0e095a89d8b96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81a2f099b94604fbc59132682e0e095a89d8b96f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0a7a6752dad7848eb4b29b826a551c0992256ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a7a6752dad7848eb4b29b826a551c0992256ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a7a6752dad7848eb4b29b826a551c0992256ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a7a6752dad7848eb4b29b826a551c0992256ec/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bbad96cd44774bc199b256dbf4260b25b87c7db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbad96cd44774bc199b256dbf4260b25b87c7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbad96cd44774bc199b256dbf4260b25b87c7db"}], "stats": {"total": 104, "additions": 78, "deletions": 26}, "files": [{"sha": "c029759cb9b94438459bb805f7ebe5b86fb132d9", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=e0a7a6752dad7848eb4b29b826a551c0992256ec", "patch": "@@ -1553,11 +1553,14 @@ region_model::on_longjmp (const gcall *longjmp_call, const gcall *setjmp_call,\n \n /* Update this region_model for a phi stmt of the form\n      LHS = PHI <...RHS...>.\n-   where RHS is for the appropriate edge.  */\n+   where RHS is for the appropriate edge.\n+   Get state from OLD_STATE so that all of the phi stmts for a basic block\n+   are effectively handled simultaneously.  */\n \n void\n region_model::handle_phi (const gphi *phi,\n \t\t\t  tree lhs, tree rhs,\n+\t\t\t  const region_model &old_state,\n \t\t\t  region_model_context *ctxt)\n {\n   /* For now, don't bother tracking the .MEM SSA names.  */\n@@ -1566,9 +1569,10 @@ region_model::handle_phi (const gphi *phi,\n       if (VAR_DECL_IS_VIRTUAL_OPERAND (var))\n \treturn;\n \n-  const svalue *rhs_sval = get_rvalue (rhs, ctxt);\n+  const svalue *src_sval = old_state.get_rvalue (rhs, ctxt);\n+  const region *dst_reg = old_state.get_lvalue (lhs, ctxt);\n \n-  set_value (get_lvalue (lhs, ctxt), rhs_sval, ctxt);\n+  set_value (dst_reg, src_sval, ctxt);\n \n   if (ctxt)\n     ctxt->on_phi (phi, rhs);\n@@ -3036,6 +3040,10 @@ region_model::update_for_phis (const supernode *snode,\n {\n   gcc_assert (last_cfg_superedge);\n \n+  /* Copy this state and pass it to handle_phi so that all of the phi stmts\n+     are effectively handled simultaneously.  */\n+  const region_model old_state (*this);\n+\n   for (gphi_iterator gpi = const_cast<supernode *>(snode)->start_phis ();\n        !gsi_end_p (gpi); gsi_next (&gpi))\n     {\n@@ -3044,8 +3052,8 @@ region_model::update_for_phis (const supernode *snode,\n       tree src = last_cfg_superedge->get_phi_arg (phi);\n       tree lhs = gimple_phi_result (phi);\n \n-      /* Update next_state based on phi.  */\n-      handle_phi (phi, lhs, src, ctxt);\n+      /* Update next_state based on phi and old_state.  */\n+      handle_phi (phi, lhs, src, old_state, ctxt);\n     }\n }\n "}, {"sha": "cc39929db2605aadb5fd76a642e5afe875185303", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=e0a7a6752dad7848eb4b29b826a551c0992256ec", "patch": "@@ -582,6 +582,7 @@ class region_model\n \t\t\tregion_model_context *ctxt);\n \n   void handle_phi (const gphi *phi, tree lhs, tree rhs,\n+\t\t   const region_model &old_state,\n \t\t   region_model_context *ctxt);\n \n   bool maybe_update_for_edge (const superedge &edge,"}, {"sha": "bfa48a9ef3fa32b1bfcdcc8930eb510851d47a15", "filename": "gcc/analyzer/state-purge.cc", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fstate-purge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fstate-purge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstate-purge.cc?ref=e0a7a6752dad7848eb4b29b826a551c0992256ec", "patch": "@@ -288,17 +288,23 @@ state_purge_per_ssa_name::add_to_worklist (const function_point &point,\n     }\n }\n \n-/* Does this phi depend on itself?\n-   e.g. in:\n-     added_2 = PHI <added_6(2), added_2(3), added_11(4)>\n-   the middle defn (from edge 3) requires added_2 itself.  */\n+/* Return true iff NAME is used by any of the phi nodes in SNODE\n+   when processing the in-edge with PHI_ARG_IDX.  */\n \n static bool\n-self_referential_phi_p (const gphi *phi)\n+name_used_by_phis_p (tree name, const supernode *snode,\n+\t\t     size_t phi_arg_idx)\n {\n-  for (unsigned i = 0; i < gimple_phi_num_args (phi); i++)\n-    if (gimple_phi_arg_def (phi, i) == gimple_phi_result (phi))\n-      return true;\n+  gcc_assert (TREE_CODE (name) == SSA_NAME);\n+\n+  for (gphi_iterator gpi\n+\t = const_cast<supernode *> (snode)->start_phis ();\n+       !gsi_end_p (gpi); gsi_next (&gpi))\n+    {\n+      gphi *phi = gpi.phi ();\n+      if (gimple_phi_arg_def (phi, phi_arg_idx) == name)\n+\treturn true;\n+    }\n   return false;\n }\n \n@@ -339,27 +345,27 @@ state_purge_per_ssa_name::process_point (const function_point &point,\n \t       = const_cast<supernode *> (snode)->start_phis ();\n \t     !gsi_end_p (gpi); gsi_next (&gpi))\n \t  {\n+\t    gcc_assert (point.get_from_edge ());\n+\t    const cfg_superedge *cfg_sedge\n+\t      = point.get_from_edge ()->dyn_cast_cfg_superedge ();\n+\t    gcc_assert (cfg_sedge);\n+\n \t    gphi *phi = gpi.phi ();\n \t    /* Are we at the def-stmt for m_name?  */\n \t    if (phi == def_stmt)\n \t      {\n-\t\t/* Does this phi depend on itself?\n-\t\t   e.g. in:\n-\t\t     added_2 = PHI <added_6(2), added_2(3), added_11(4)>\n-\t\t   the middle defn (from edge 3) requires added_2 itself\n-\t\t   so we can't purge it here.  */\n-\t\tif (self_referential_phi_p (phi))\n+\t\tif (name_used_by_phis_p (m_name, snode,\n+\t\t\t\t\t cfg_sedge->get_phi_arg_idx ()))\n \t\t  {\n \t\t    if (logger)\n-\t\t      logger->log (\"self-referential def stmt within phis;\"\n+\t\t      logger->log (\"name in def stmt used within phis;\"\n \t\t\t\t   \" continuing\");\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    /* Otherwise, we can stop here, so that m_name\n-\t\t       can be purged.  */\n \t\t    if (logger)\n-\t\t      logger->log (\"def stmt within phis; terminating\");\n+\t\t      logger->log (\"name in def stmt not used within phis;\"\n+\t\t\t\t   \" terminating\");\n \t\t    return;\n \t\t  }\n \t      }"}, {"sha": "1eb25436f94e85da50fbee2dc22d6628ad1a7937", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=e0a7a6752dad7848eb4b29b826a551c0992256ec", "patch": "@@ -1032,12 +1032,21 @@ cfg_superedge::dump_label_to_pp (pretty_printer *pp,\n   /* Otherwise, no label.  */\n }\n \n+/* Get the index number for this edge for use in phi stmts\n+   in its destination.  */\n+\n+size_t\n+cfg_superedge::get_phi_arg_idx () const\n+{\n+  return m_cfg_edge->dest_idx;\n+}\n+\n /* Get the phi argument for PHI for this CFG edge.  */\n \n tree\n cfg_superedge::get_phi_arg (const gphi *phi) const\n {\n-  size_t index = m_cfg_edge->dest_idx;\n+  size_t index = get_phi_arg_idx ();\n   return gimple_phi_arg_def (phi, index);\n }\n "}, {"sha": "877958f75fab45bc2f416ca14e445023556ed46d", "filename": "gcc/analyzer/supergraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fsupergraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Fanalyzer%2Fsupergraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.h?ref=e0a7a6752dad7848eb4b29b826a551c0992256ec", "patch": "@@ -514,6 +514,7 @@ class cfg_superedge : public superedge\n   int false_value_p () const { return get_flags () & EDGE_FALSE_VALUE; }\n   int back_edge_p () const { return get_flags () & EDGE_DFS_BACK; }\n \n+  size_t get_phi_arg_idx () const;\n   tree get_phi_arg (const gphi *phi) const;\n \n  private:"}, {"sha": "c16982f3bc40fcfbaf230365b2e6ec5cb9be0858", "filename": "gcc/testsuite/gcc.dg/analyzer/explode-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-2.c?ref=e0a7a6752dad7848eb4b29b826a551c0992256ec", "patch": "@@ -24,7 +24,7 @@ void test (void)\n \t  p0 = malloc (16); /* { dg-warning \"leak\" \"\" { xfail *-*-* } } */\n \t  break;\n \tcase 1:\n-\t  free (p0); /* { dg-warning \"double-'free' of 'p0'\" \"\" { xfail *-*-* } } */\n+\t  free (p0); /* { dg-warning \"double-'free' of 'p0'\" } */\n \t  break;\n \n \tcase 2:"}, {"sha": "32c71ca44aa578f4df75f4b7e380b370638e7db4", "filename": "gcc/testsuite/gcc.dg/analyzer/explode-2a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-2a.c?ref=e0a7a6752dad7848eb4b29b826a551c0992256ec", "patch": "@@ -14,7 +14,7 @@ void test (void)\n      explode-2.c as this code.  */\n   int a = get ();\n   int b = get ();\n-  while (a) /* { dg-warning \"leak\" } */\n+  while (a)\n     {\n       switch (b)\n \t{"}, {"sha": "2ab8344cfe27e47d104fb3cb0413e219241e2e3b", "filename": "gcc/testsuite/gcc.dg/analyzer/phi-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fphi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a7a6752dad7848eb4b29b826a551c0992256ec/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fphi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fphi-2.c?ref=e0a7a6752dad7848eb4b29b826a551c0992256ec", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-additional-options \"-O1\" } */\n+\n+struct list_head {\n+  struct list_head *next, *prev;\n+};\n+\n+struct mbochs_dmabuf {\n+  /* [...snip...] */\n+  struct dma_buf *buf;\n+  /* [...snip...] */\n+  struct list_head next;\n+  /* [...snip...] */\n+};\n+\n+void mbochs_close(struct list_head *dmabufs,\n+\t\t  struct mbochs_dmabuf *dmabuf,\n+\t\t  struct mbochs_dmabuf *tmp)\n+{\n+  /* [...snip...] */\n+  while (&dmabuf->next != dmabufs)\n+    {\n+      dmabuf = tmp;\n+      tmp = ((struct mbochs_dmabuf *)((void *)(tmp->next.next) - __builtin_offsetof(struct mbochs_dmabuf, next)));\n+    }\n+\n+  /* [...snip...] */\n+}"}]}