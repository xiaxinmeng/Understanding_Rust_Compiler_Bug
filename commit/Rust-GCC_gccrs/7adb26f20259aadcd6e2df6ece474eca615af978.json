{"sha": "7adb26f20259aadcd6e2df6ece474eca615af978", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FkYjI2ZjIwMjU5YWFkY2Q2ZTJkZjZlY2U0NzRlY2E2MTVhZjk3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-24T16:19:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-24T16:19:43Z"}, "message": "re PR c++/71257 (OpenMP declare simd linear with ref modifier doesn't accept references to non-integer/non-pointer)\n\n\tPR c++/71257\n\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Handle\n\tSIMD_CLONE_ARG_TYPE_LINEAR_REF_CONSTANT_STEP like\n\tSIMD_CLONE_ARG_TYPE_LINEAR_CONSTANT_STEP.  Add\n\tSIMD_CLONE_ARG_TYPE_LINEAR_VAL_CONSTANT_STEP and\n\tSIMD_CLONE_ARG_TYPE_LINEAR_UVAL_CONSTANT_STEP cases explicitly.\n\n\t* semantics.c (finish_omp_clauses) <case OMP_CLAUSE_LINEAR>:\n\tFor OMP_CLAUSE_LINEAR_REF don't require type to be\n\tintegral or pointer.\n\n\t* g++.dg/vect/simd-clone-6.cc: New test.\n\t* g++.dg/gomp/declare-simd-6.C: New test.\n\nFrom-SVN: r236648", "tree": {"sha": "6b7fa6dd48f9c9d394a3bbe75f0594125c46edad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b7fa6dd48f9c9d394a3bbe75f0594125c46edad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7adb26f20259aadcd6e2df6ece474eca615af978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7adb26f20259aadcd6e2df6ece474eca615af978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7adb26f20259aadcd6e2df6ece474eca615af978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7adb26f20259aadcd6e2df6ece474eca615af978/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e90434e3aa9e51874bd5ebebf054aed123df06f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90434e3aa9e51874bd5ebebf054aed123df06f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90434e3aa9e51874bd5ebebf054aed123df06f2"}], "stats": {"total": 111, "additions": 108, "deletions": 3}, "files": [{"sha": "1b81d4106f838938e1a72921965bcbb5110dfb01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7adb26f20259aadcd6e2df6ece474eca615af978", "patch": "@@ -1,3 +1,12 @@\n+2016-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/71257\n+\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Handle\n+\tSIMD_CLONE_ARG_TYPE_LINEAR_REF_CONSTANT_STEP like\n+\tSIMD_CLONE_ARG_TYPE_LINEAR_CONSTANT_STEP.  Add\n+\tSIMD_CLONE_ARG_TYPE_LINEAR_VAL_CONSTANT_STEP and\n+\tSIMD_CLONE_ARG_TYPE_LINEAR_UVAL_CONSTANT_STEP cases explicitly.\n+\n 2016-05-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71240"}, {"sha": "c77dee6dfb7c43606c75819a81a8d8c0cb8e4a06", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7adb26f20259aadcd6e2df6ece474eca615af978", "patch": "@@ -1,3 +1,10 @@\n+2016-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/71257\n+\t* semantics.c (finish_omp_clauses) <case OMP_CLAUSE_LINEAR>:\n+\tFor OMP_CLAUSE_LINEAR_REF don't require type to be\n+\tintegral or pointer.\n+\n 2016-05-24  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70434"}, {"sha": "21ef42f5534da50f66958c6483f9140cdc0b8b83", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7adb26f20259aadcd6e2df6ece474eca615af978", "patch": "@@ -5881,7 +5881,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t      break;\n \t\t    }\n \t\t}\n-\t      else\n+\t      else if (OMP_CLAUSE_LINEAR_KIND (c) != OMP_CLAUSE_LINEAR_REF)\n \t\t{\n \t\t  if (!INTEGRAL_TYPE_P (type)\n \t\t      && TREE_CODE (type) != POINTER_TYPE)"}, {"sha": "c0a271cefd9e206369c46851f6a5c15c2c1cc893", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7adb26f20259aadcd6e2df6ece474eca615af978", "patch": "@@ -1,5 +1,9 @@\n 2016-05-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/71257\n+\t* g++.dg/vect/simd-clone-6.cc: New test.\n+\t* g++.dg/gomp/declare-simd-6.C: New test.\n+\n \tPR middle-end/70434\n \tPR c/69504\n \t* c-c++-common/vector-subscript-5.c (foo): Move ; out of the ifdef."}, {"sha": "09137ee5b98f4e9c579e87304b7add36c982b1db", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-6.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-6.C?ref=7adb26f20259aadcd6e2df6ece474eca615af978", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/71257\n+// { dg-do compile }\n+// { dg-options \"-fopenmp-simd\" }\n+\n+struct S { int a; };\n+#pragma omp declare simd linear(val(a):2)\n+int f1 (int &a);\n+#pragma omp declare simd linear(uval(a):2)\n+unsigned short f2 (unsigned short &a);\n+#pragma omp declare simd linear(ref(a):1)\n+int f3 (long long int &a);\n+#pragma omp declare simd linear(a:1)\n+int f4 (int &a);\n+#pragma omp declare simd linear(val(a))\n+int f5 (int a);\n+#pragma omp declare simd linear(uval(a):2)\t\t// { dg-error \"modifier applied to non-reference variable\" }\n+int f6 (unsigned short a);\n+#pragma omp declare simd linear(ref(a):1)\t\t// { dg-error \"modifier applied to non-reference variable\" }\n+int f7 (unsigned long int a);\n+#pragma omp declare simd linear(a:1)\n+int f8 (int a);\n+#pragma omp declare simd linear(val(a):2)\t\t// { dg-error \"applied to non-integral non-pointer variable\" }\n+int f9 (S &a);\n+#pragma omp declare simd linear(uval(a):2)\t\t// { dg-error \"applied to non-integral non-pointer variable\" }\n+int f10 (S &a);\n+#pragma omp declare simd linear(ref(a):1)\t\t// { dg-bogus \"applied to non-integral non-pointer variable\" }\n+int f11 (S &a);\n+#pragma omp declare simd linear(a:1)\t\t\t// { dg-error \"applied to non-integral non-pointer variable\" }\n+int f12 (S &a);\n+#pragma omp declare simd linear(val(a))\t\t\t// { dg-error \"applied to non-integral non-pointer variable\" }\n+int f13 (S a);\n+#pragma omp declare simd linear(uval(a):2)\t\t// { dg-error \"modifier applied to non-reference variable\" }\n+int f14 (S a);\n+#pragma omp declare simd linear(ref(a):1)\t\t// { dg-error \"modifier applied to non-reference variable\" }\n+int f15 (S a);\n+#pragma omp declare simd linear(a:1)\t\t\t// { dg-error \"applied to non-integral non-pointer variable\" }\n+int f16 (S a);"}, {"sha": "fb00e8816a5fc157b780edd1d7064804a67d6373", "filename": "gcc/testsuite/g++.dg/vect/simd-clone-6.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-6.cc?ref=7adb26f20259aadcd6e2df6ece474eca615af978", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/71257\n+// { dg-require-effective-target vect_simd_clones }\n+// { dg-additional-options \"-fopenmp-simd -fno-inline\" }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+#include \"../../gcc.dg/vect/tree-vect.h\"\n+\n+#define N 1024\n+struct S { int a; };\n+int c[N], e[N], f[N];\n+S d[N];\n+\n+#pragma omp declare simd linear(ref(b, c) : 1)\n+int\n+foo (int a, S &b, int &c)\n+{\n+  return a + b.a + c;\n+}\n+\n+void\n+do_main ()\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      c[i] = i;\n+      d[i].a = 2 * i;\n+      f[i] = 3 * i;\n+    }\n+  #pragma omp simd\n+  for (i = 0; i < N; i++)\n+    e[i] = foo (c[i], d[i], f[i]);\n+  for (i = 0; i < N; i++)\n+    if (e[i] != 6 * i)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+  return 0;\n+}"}, {"sha": "f11f22e3eb8667533cc85f7b41839fdee2d3e942", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adb26f20259aadcd6e2df6ece474eca615af978/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=7adb26f20259aadcd6e2df6ece474eca615af978", "patch": "@@ -3012,8 +3012,10 @@ vectorizable_simd_clone_call (gimple *stmt, gimple_stmt_iterator *gsi,\n     {\n       STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_push (bestn->decl);\n       for (i = 0; i < nargs; i++)\n-\tif (bestn->simdclone->args[i].arg_type\n-\t    == SIMD_CLONE_ARG_TYPE_LINEAR_CONSTANT_STEP)\n+\tif ((bestn->simdclone->args[i].arg_type\n+\t     == SIMD_CLONE_ARG_TYPE_LINEAR_CONSTANT_STEP)\n+\t    || (bestn->simdclone->args[i].arg_type\n+\t\t== SIMD_CLONE_ARG_TYPE_LINEAR_REF_CONSTANT_STEP))\n \t  {\n \t    STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_grow_cleared (i * 3\n \t\t\t\t\t\t\t\t\t+ 1);\n@@ -3148,6 +3150,7 @@ vectorizable_simd_clone_call (gimple *stmt, gimple_stmt_iterator *gsi,\n \t      vargs.safe_push (op);\n \t      break;\n \t    case SIMD_CLONE_ARG_TYPE_LINEAR_CONSTANT_STEP:\n+\t    case SIMD_CLONE_ARG_TYPE_LINEAR_REF_CONSTANT_STEP:\n \t      if (j == 0)\n \t\t{\n \t\t  gimple_seq stmts;\n@@ -3211,6 +3214,8 @@ vectorizable_simd_clone_call (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t  vargs.safe_push (new_temp);\n \t\t}\n \t      break;\n+\t    case SIMD_CLONE_ARG_TYPE_LINEAR_VAL_CONSTANT_STEP:\n+\t    case SIMD_CLONE_ARG_TYPE_LINEAR_UVAL_CONSTANT_STEP:\n \t    case SIMD_CLONE_ARG_TYPE_LINEAR_VARIABLE_STEP:\n \t    case SIMD_CLONE_ARG_TYPE_LINEAR_REF_VARIABLE_STEP:\n \t    case SIMD_CLONE_ARG_TYPE_LINEAR_VAL_VARIABLE_STEP:"}]}