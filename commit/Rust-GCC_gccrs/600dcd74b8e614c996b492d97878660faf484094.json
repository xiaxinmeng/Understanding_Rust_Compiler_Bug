{"sha": "600dcd74b8e614c996b492d97878660faf484094", "node_id": "C_kwDOANBUbNoAKDYwMGRjZDc0YjhlNjE0Yzk5NmI0OTJkOTc4Nzg2NjBmYWY0ODQwOTQ", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-11-03T14:58:25Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-11-03T14:59:22Z"}, "message": "c: Fold implicit integer-to-floating conversions in static initializers with -frounding-math [PR103031]\n\nRecent fixes to avoid inappropriate folding of some conversions to\nfloating-point types with -frounding-math also prevented such folding\nin C static initializers, when folding (in the default rounding mode,\nexceptions discarded) is required for correctness.\n\nFolding for static initializers is handled via functions in\nfold-const.c calling START_FOLD_INIT and END_FOLD_INIT to adjust flags\nsuch as flag_rounding_math that should not apply in static initializer\ncontext, but no such function was being called for the folding of\nthese implicit conversions to the type of the object being\ninitialized, only for explicit conversions as part of the initializer.\n\nArrange for relevant folding (a fold call in convert, in particular)\nto use this special initializer handling (via a new fold_init\nfunction, in particular).\n\nBecause convert is used by language-independent code but defined in\neach front end, this isn't as simple as just adding a new default\nargument to it.  Instead, I added a new convert_init function; that\nthen gets called by c-family code, and C and C++ need convert_init\nimplementations (the C++ one does nothing different from convert and\nwill never actually get called because the new convert_and_check\nargument will never be true from C++), but other languages don't.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/\n\tPR c/103031\n\t* fold-const.c (fold_init): New function.\n\t* fold-const.h (fold_init): New prototype.\n\ngcc/c-family/\n\tPR c/103031\n\t* c-common.c (convert_and_check): Add argument init_const.  Call\n\tconvert_init if init_const.\n\t* c-common.h (convert_and_check): Update prototype.\n\t(convert_init): New prototype.\n\ngcc/c/\n\tPR c/103031\n\t* c-convert.c (c_convert): New function, based on convert.\n\t(convert): Make into wrapper of c_convert.\n\t(convert_init): New function.\n\t* c-typeck.c (enum impl_conv): Add ic_init_const.\n\t(convert_for_assignment): Handle ic_init_const like ic_init.  Add\n\tnew argument to convert_and_check call.\n\t(digest_init): Pass ic_init_const to convert_for_assignment for\n\tinitializers required to be constant.\n\ngcc/cp/\n\tPR c/103031\n\t* cvt.c (convert_init): New function.\n\ngcc/testsuite/\n\tPR c/103031\n\t* gcc.dg/init-rounding-math-1.c: New test.", "tree": {"sha": "8dc7b818bb5a1b08b33fe1c391510e9e93a16cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc7b818bb5a1b08b33fe1c391510e9e93a16cca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/600dcd74b8e614c996b492d97878660faf484094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600dcd74b8e614c996b492d97878660faf484094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/600dcd74b8e614c996b492d97878660faf484094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600dcd74b8e614c996b492d97878660faf484094/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502ffb1f389011b28ee51815242c7397790802d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502ffb1f389011b28ee51815242c7397790802d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502ffb1f389011b28ee51815242c7397790802d5"}], "stats": {"total": 112, "additions": 97, "deletions": 15}, "files": [{"sha": "436df45df686207f88e14af0aa40212603b29e74", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=600dcd74b8e614c996b492d97878660faf484094", "patch": "@@ -1739,10 +1739,13 @@ unsafe_conversion_p (tree type, tree expr, tree result, bool check_sign)\n \n /* Convert EXPR to TYPE, warning about conversion problems with constants.\n    Invoke this function on every expression that is converted implicitly,\n-   i.e. because of language rules and not because of an explicit cast.  */\n+   i.e. because of language rules and not because of an explicit cast.\n+   INIT_CONST is true if the conversion is for arithmetic types for a static\n+   initializer and folding must apply accordingly (discarding floating-point\n+   exceptions and assuming the default rounding mode is in effect).  */\n \n tree\n-convert_and_check (location_t loc, tree type, tree expr)\n+convert_and_check (location_t loc, tree type, tree expr, bool init_const)\n {\n   tree result;\n   tree expr_for_warning;\n@@ -1754,7 +1757,9 @@ convert_and_check (location_t loc, tree type, tree expr)\n     {\n       tree orig_type = TREE_TYPE (expr);\n       expr = TREE_OPERAND (expr, 0);\n-      expr_for_warning = convert (orig_type, expr);\n+      expr_for_warning = (init_const\n+\t\t\t  ? convert_init (orig_type, expr)\n+\t\t\t  : convert (orig_type, expr));\n       if (orig_type == type)\n \treturn expr_for_warning;\n     }\n@@ -1764,7 +1769,7 @@ convert_and_check (location_t loc, tree type, tree expr)\n   if (TREE_TYPE (expr) == type)\n     return expr;\n \n-  result = convert (type, expr);\n+  result = init_const ? convert_init (type, expr) : convert (type, expr);\n \n   if (c_inhibit_evaluation_warnings == 0\n       && !TREE_OVERFLOW_P (expr)"}, {"sha": "d5dad99ff97d20c3a8392c6d51dc7f46bd462b60", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=600dcd74b8e614c996b492d97878660faf484094", "patch": "@@ -886,7 +886,7 @@ extern tree c_alignof_expr (location_t, tree);\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n extern void binary_op_error (rich_location *, enum tree_code, tree, tree);\n extern tree fix_string_type (tree);\n-extern tree convert_and_check (location_t, tree, tree);\n+extern tree convert_and_check (location_t, tree, tree, bool = false);\n extern bool c_determine_visibility (tree);\n extern bool vector_types_compatible_elements_p (tree, tree);\n extern void mark_valid_location_for_stdc_pragma (bool);\n@@ -908,6 +908,8 @@ extern tree c_common_get_narrower (tree, int *);\n extern bool get_attribute_operand (tree, unsigned HOST_WIDE_INT *);\n extern void c_common_finalize_early_debug (void);\n \n+/* Used by convert_and_check; in front ends.  */\n+extern tree convert_init (tree, tree);\n \n #define c_sizeof(LOC, T)  c_sizeof_or_alignof_type (LOC, T, true, false, 1)\n #define c_alignof(LOC, T) c_sizeof_or_alignof_type (LOC, T, false, false, 1)"}, {"sha": "905b26a09a1204597c3323877afe3d165c0c8572", "filename": "gcc/c/c-convert.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-convert.c?ref=600dcd74b8e614c996b492d97878660faf484094", "patch": "@@ -60,10 +60,13 @@ along with GCC; see the file COPYING3.  If not see\n    converted to type TYPE.  The TREE_TYPE of the value\n    is always TYPE.  This function implements all reasonable\n    conversions; callers should filter out those that are\n-   not permitted by the language being compiled.  */\n+   not permitted by the language being compiled.\n+   INIT_CONST is true if the conversion is for arithmetic types for a static\n+   initializer and folding must apply accordingly (discarding floating-point\n+   exceptions and assuming the default rounding mode is in effect).  */\n \n-tree\n-convert (tree type, tree expr)\n+static tree\n+c_convert (tree type, tree expr, bool init_const)\n {\n   tree e = expr;\n   enum tree_code code = TREE_CODE (type);\n@@ -115,7 +118,7 @@ convert (tree type, tree expr)\n \t  && COMPLETE_TYPE_P (type))\n \t{\n \t  expr = save_expr (expr);\n-\t  expr = c_fully_fold (expr, false, NULL);\n+\t  expr = c_fully_fold (expr, init_const, NULL);\n \t  tree check = ubsan_instrument_float_cast (loc, type, expr);\n \t  expr = fold_build1 (FIX_TRUNC_EXPR, type, expr);\n \t  if (check == NULL_TREE)\n@@ -173,10 +176,32 @@ convert (tree type, tree expr)\n \n     maybe_fold:\n       if (TREE_CODE (ret) != C_MAYBE_CONST_EXPR)\n-\tret = fold (ret);\n+\tret = init_const ? fold_init (ret) : fold (ret);\n       return ret;\n     }\n \n   error (\"conversion to non-scalar type requested\");\n   return error_mark_node;\n }\n+\n+/* Create an expression whose value is that of EXPR, converted to type TYPE.\n+   The TREE_TYPE of the value is always TYPE.  This function implements all\n+   reasonable conversions; callers should filter out those that are not\n+   permitted by the language being compiled.  */\n+\n+tree\n+convert (tree type, tree expr)\n+{\n+  return c_convert (type, expr, false);\n+}\n+\n+/* Create an expression whose value is that of EXPR, converted to type TYPE, in\n+   a static initializer.  The TREE_TYPE of the value is always TYPE.  This\n+   function implements all reasonable conversions; callers should filter out\n+   those that are not permitted by the language being compiled.  */\n+\n+tree\n+convert_init (tree type, tree expr)\n+{\n+  return c_convert (type, expr, true);\n+}"}, {"sha": "782414f8c8cb66b155a3cd7432706caed8828b32", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=600dcd74b8e614c996b492d97878660faf484094", "patch": "@@ -53,12 +53,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"asan.h\"\n \n-/* Possible cases of implicit bad conversions.  Used to select\n-   diagnostic messages in convert_for_assignment.  */\n+/* Possible cases of implicit conversions.  Used to select diagnostic messages\n+   and control folding initializers in convert_for_assignment.  */\n enum impl_conv {\n   ic_argpass,\n   ic_assign,\n   ic_init,\n+  ic_init_const,\n   ic_return\n };\n \n@@ -6802,6 +6803,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n         pedwarn (LOCATION, OPT, AS);                                     \\\n         break;                                                           \\\n       case ic_init:                                                      \\\n+      case ic_init_const:                                                \\\n         pedwarn_init (LOCATION, OPT, IN);                                \\\n         break;                                                           \\\n       case ic_return:                                                    \\\n@@ -6838,6 +6840,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  warning_at (LOCATION, OPT, AS, QUALS);                         \\\n         break;                                                           \\\n       case ic_init:                                                      \\\n+      case ic_init_const:                                                \\\n \tif (PEDWARN)\t\t\t\t\t\t\t \\\n \t  pedwarn (LOCATION, OPT, IN, QUALS);                            \\\n \telse\t\t\t\t\t\t\t\t \\\n@@ -6886,6 +6889,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  break;\n \n \tcase ic_init:\n+\tcase ic_init_const:\n \t  parmno = -2;\n \t  break;\n \n@@ -6919,6 +6923,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t     \"%qT in assignment is invalid in C++\", rhstype, type);\n \t    break;\n \t  case ic_init:\n+\t  case ic_init_const:\n \t    pedwarn_init (location, OPT_Wc___compat, \"enum conversion from \"\n \t\t\t  \"%qT to %qT in initialization is invalid in C++\",\n \t\t\t  rhstype, type);\n@@ -7029,7 +7034,8 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t      && sanitize_flags_p (SANITIZE_FLOAT_CAST)))\n \tin_late_binary_op = true;\n       tree ret = convert_and_check (expr_loc != UNKNOWN_LOCATION\n-\t\t\t\t    ? expr_loc : location, type, orig_rhs);\n+\t\t\t\t    ? expr_loc : location, type, orig_rhs,\n+\t\t\t\t    errtype == ic_init_const);\n       in_late_binary_op = save;\n       return ret;\n     }\n@@ -7252,6 +7258,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\tbreak;\n \t      }\n \t    case ic_init:\n+\t    case ic_init_const:\n \t      {\n \t\tconst char msg[] = G_(\"initialization from pointer to \"\n \t\t\t\t      \"non-enclosed address space\");\n@@ -7296,6 +7303,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t\t\"a candidate for a format attribute\");\n \t    break;\n \t  case ic_init:\n+\t  case ic_init_const:\n \t    warning_at (location, OPT_Wsuggest_attribute_format,\n \t\t\t\"initialization left-hand side might be \"\n \t\t\t\"a candidate for a format attribute\");\n@@ -7339,6 +7347,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t\t  \"incompatible scalar storage order\", type, rhstype);\n \t    break;\n \t  case ic_init:\n+\t  case ic_init_const:\n \t    /* Likewise.  */\n \t    if (TREE_CODE (rhs) != CALL_EXPR\n \t\t|| (t = get_callee_fndecl (rhs)) == NULL_TREE\n@@ -7465,6 +7474,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t\t     \"differ in signedness\", rhstype, type);\n \t\t    break;\n \t\t  case ic_init:\n+\t\t  case ic_init_const:\n \t\t    pedwarn_init (location, OPT_Wpointer_sign,\n \t\t\t\t  \"pointer targets in initialization of %qT \"\n \t\t\t\t  \"from %qT differ in signedness\", type,\n@@ -7530,6 +7540,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t\t type, rhstype);\n \t      break;\n \t    case ic_init:\n+\t    case ic_init_const:\n \t      if (bltin)\n \t\tpedwarn_init (location, OPT_Wincompatible_pointer_types,\n \t\t\t      \"initialization of %qT from pointer to \"\n@@ -7599,6 +7610,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t     \"without a cast\", type, rhstype);\n \t    break;\n \t  case ic_init:\n+\t  case ic_init_const:\n \t    pedwarn_init (location, OPT_Wint_conversion,\n \t\t\t  \"initialization of %qT from %qT makes pointer from \"\n \t\t\t  \"integer without a cast\", type, rhstype);\n@@ -7635,6 +7647,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t   \"without a cast\", type, rhstype);\n \t  break;\n \tcase ic_init:\n+\tcase ic_init_const:\n \t  pedwarn_init (location, OPT_Wint_conversion,\n \t\t\t\"initialization of %qT from %qT makes integer from \"\n \t\t\t\"pointer without a cast\", type, rhstype);\n@@ -7686,6 +7699,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \tbreak;\n       }\n     case ic_init:\n+    case ic_init_const:\n       {\n \tconst char msg[]\n \t  = G_(\"incompatible types when initializing type %qT using type %qT\");\n@@ -8195,7 +8209,9 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n       if (TREE_CODE (TREE_TYPE (inside_init)) == POINTER_TYPE)\n \tinside_init = convert_for_assignment (init_loc, UNKNOWN_LOCATION,\n \t\t\t\t\t      type, inside_init, origtype,\n-\t\t\t\t\t      ic_init, null_pointer_constant,\n+\t\t\t\t\t      (require_constant\n+\t\t\t\t\t       ? ic_init_const\n+\t\t\t\t\t       : ic_init), null_pointer_constant,\n \t\t\t\t\t      NULL_TREE, NULL_TREE, 0);\n       return inside_init;\n     }\n@@ -8215,7 +8231,8 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t\t\t      inside_init);\n       inside_init\n \t= convert_for_assignment (init_loc, UNKNOWN_LOCATION, type,\n-\t\t\t\t  inside_init, origtype, ic_init,\n+\t\t\t\t  inside_init, origtype,\n+\t\t\t\t  require_constant ? ic_init_const : ic_init,\n \t\t\t\t  null_pointer_constant, NULL_TREE, NULL_TREE,\n \t\t\t\t  0);\n "}, {"sha": "7e6752af1dfc1a358a80c1499c12b306a9920009", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600dcd74b8e614c996b492d97878660faf484094/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=600dcd74b8e614c996b492d97878660faf484094", "patch": "@@ -1685,6 +1685,15 @@ convert (tree type, tree expr)\n \t\t      tf_warning_or_error);\n }\n \n+/* Like convert, but in a static initializer (called from\n+   convert_and_check).  */\n+\n+tree\n+convert_init (tree type, tree expr)\n+{\n+  return convert (type, expr);\n+}\n+\n /* Like cp_convert, except permit conversions to take place which\n    are not normally allowed due to access restrictions\n    (such as conversion from sub-type to private super-type).  */"}, {"sha": "90d82257ae71f706d2144707f21e407482bb63c5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600dcd74b8e614c996b492d97878660faf484094/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600dcd74b8e614c996b492d97878660faf484094/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=600dcd74b8e614c996b492d97878660faf484094", "patch": "@@ -13940,6 +13940,18 @@ fold_build_call_array_loc (location_t loc, tree type, tree fn,\n   flag_trapv = saved_trapv;\\\n   folding_initializer = saved_folding_initializer;\n \n+tree\n+fold_init (tree expr)\n+{\n+  tree result;\n+  START_FOLD_INIT;\n+\n+  result = fold (expr);\n+\n+  END_FOLD_INIT;\n+  return result;\n+}\n+\n tree\n fold_build1_initializer_loc (location_t loc, enum tree_code code,\n \t\t\t     tree type, tree op)"}, {"sha": "56e9d399c0da67dd2ad1e9b04131674a261f52b4", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600dcd74b8e614c996b492d97878660faf484094/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600dcd74b8e614c996b492d97878660faf484094/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=600dcd74b8e614c996b492d97878660faf484094", "patch": "@@ -44,6 +44,7 @@ extern void shift_bytes_in_array_right (unsigned char *, unsigned int,\n    subexpressions are not changed.  */\n \n extern tree fold (tree);\n+extern tree fold_init (tree);\n #define fold_unary(CODE,T1,T2)\\\n    fold_unary_loc (UNKNOWN_LOCATION, CODE, T1, T2)\n extern tree fold_unary_loc (location_t, enum tree_code, tree, tree);"}, {"sha": "2bece1a09d53876a9ab1b26abe4cf3d41c684afc", "filename": "gcc/testsuite/gcc.dg/init-rounding-math-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600dcd74b8e614c996b492d97878660faf484094/gcc%2Ftestsuite%2Fgcc.dg%2Finit-rounding-math-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600dcd74b8e614c996b492d97878660faf484094/gcc%2Ftestsuite%2Fgcc.dg%2Finit-rounding-math-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-rounding-math-1.c?ref=600dcd74b8e614c996b492d97878660faf484094", "patch": "@@ -0,0 +1,11 @@\n+/* Test static initializer folding of implicit conversions to floating point\n+   types, even with -frounding-math and related options.  Bug 103031.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-frounding-math -ftrapping-math -fsignaling-nans\" } */\n+\n+float f1 = -1ULL;\n+float f2 = __DBL_MAX__;\n+float f3 = __DBL_MIN__;\n+float f4 = 0.1;\n+float f5 = __builtin_nans (\"\");\n+double d1 = -1ULL;"}]}