{"sha": "b744bf4e18d4c1422cdffbfeed30490252b3f64e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0NGJmNGUxOGQ0YzE0MjJjZGZmYmZlZWQzMDQ5MDI1MmIzZjY0ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-11T14:44:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-11T14:44:15Z"}, "message": "PR78134 fix return types of heterogeneous lookup functions\n\n\tPR libstdc++/78134\n\t* include/bits/stl_map.h (map::lower_bound, map::upper_bound)\n\t(map::equal_range): Fix return type of heterogeneous overloads.\n\t* include/bits/stl_multimap.h (multimap::lower_bound)\n\t(multimap::upper_bound, multimap::equal_range): Likewise.\n\t* include/bits/stl_multiset.h (multiset::lower_bound)\n\t(multiset::upper_bound, multiset::equal_range): Likewise.\n\t* include/bits/stl_set.h (set::lower_bound, set::upper_bound)\n\t(set::equal_range): Likewise.\n\t* testsuite/23_containers/map/operations/2.cc\n\t* testsuite/23_containers/multimap/operations/2.cc\n\t* testsuite/23_containers/multiset/operations/2.cc\n\t* testsuite/23_containers/set/operations/2.cc\n\nFrom-SVN: r244318", "tree": {"sha": "48847db03ec1196eef3c45fb526c01628aba990d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48847db03ec1196eef3c45fb526c01628aba990d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b744bf4e18d4c1422cdffbfeed30490252b3f64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b744bf4e18d4c1422cdffbfeed30490252b3f64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b744bf4e18d4c1422cdffbfeed30490252b3f64e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b744bf4e18d4c1422cdffbfeed30490252b3f64e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b091b8dc0b9fdfe157da5a738e8cbb360143fc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b091b8dc0b9fdfe157da5a738e8cbb360143fc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b091b8dc0b9fdfe157da5a738e8cbb360143fc9e"}], "stats": {"total": 226, "additions": 158, "deletions": 68}, "files": [{"sha": "35fbb95f61780bb260554efd4c183320a4d5bcfd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -1,5 +1,19 @@\n 2017-01-11  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/78134\n+\t* include/bits/stl_map.h (map::lower_bound, map::upper_bound)\n+\t(map::equal_range): Fix return type of heterogeneous overloads.\n+\t* include/bits/stl_multimap.h (multimap::lower_bound)\n+\t(multimap::upper_bound, multimap::equal_range): Likewise.\n+\t* include/bits/stl_multiset.h (multiset::lower_bound)\n+\t(multiset::upper_bound, multiset::equal_range): Likewise.\n+\t* include/bits/stl_set.h (set::lower_bound, set::upper_bound)\n+\t(set::equal_range): Likewise.\n+\t* testsuite/23_containers/map/operations/2.cc\n+\t* testsuite/23_containers/multimap/operations/2.cc\n+\t* testsuite/23_containers/multiset/operations/2.cc\n+\t* testsuite/23_containers/set/operations/2.cc\n+\n \tPR libstdc++/78273\n \t* include/bits/stl_map.h (map::count<_Kt>(const _Kt&)): Don't assume\n \tthe heterogeneous comparison can only find one match."}, {"sha": "194ce42e26306a5ad7ad78c4ad839e0d495cb17f", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -1218,8 +1218,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tlower_bound(const _Kt& __x)\n-\t-> decltype(_M_t._M_lower_bound_tr(__x))\n-\t{ return _M_t._M_lower_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_lower_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -1243,8 +1243,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tlower_bound(const _Kt& __x) const\n-\t-> decltype(_M_t._M_lower_bound_tr(__x))\n-\t{ return _M_t._M_lower_bound_tr(__x); }\n+\t-> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))\n+\t{ return const_iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -1263,8 +1263,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tupper_bound(const _Kt& __x)\n-\t-> decltype(_M_t._M_upper_bound_tr(__x))\n-\t{ return _M_t._M_upper_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -1283,8 +1283,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tupper_bound(const _Kt& __x) const\n-\t-> decltype(_M_t._M_upper_bound_tr(__x))\n-\t{ return _M_t._M_upper_bound_tr(__x); }\n+\t-> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))\n+\t{ return const_iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -1312,8 +1312,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tequal_range(const _Kt& __x)\n-\t-> decltype(_M_t._M_equal_range_tr(__x))\n-\t{ return _M_t._M_equal_range_tr(__x); }\n+\t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n+\t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n #endif\n       //@}\n \n@@ -1341,8 +1341,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tequal_range(const _Kt& __x) const\n-\t-> decltype(_M_t._M_equal_range_tr(__x))\n-\t{ return _M_t._M_equal_range_tr(__x); }\n+\t-> decltype(pair<const_iterator, const_iterator>(\n+\t      _M_t._M_equal_range_tr(__x)))\n+\t{\n+\t  return pair<const_iterator, const_iterator>(\n+\t      _M_t._M_equal_range_tr(__x));\n+\t}\n #endif\n       //@}\n "}, {"sha": "8b37de9686d5c6f23317c282f6388020c247a066", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -887,8 +887,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tlower_bound(const _Kt& __x)\n-\t-> decltype(_M_t._M_lower_bound_tr(__x))\n-\t{ return _M_t._M_lower_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_lower_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -912,8 +912,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tlower_bound(const _Kt& __x) const\n-\t-> decltype(_M_t._M_lower_bound_tr(__x))\n-\t{ return _M_t._M_lower_bound_tr(__x); }\n+\t-> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))\n+\t{ return const_iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -932,8 +932,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tupper_bound(const _Kt& __x)\n-\t-> decltype(_M_t._M_upper_bound_tr(__x))\n-\t{ return _M_t._M_upper_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -952,8 +952,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tupper_bound(const _Kt& __x) const\n-\t-> decltype(_M_t._M_upper_bound_tr(__x))\n-\t{ return _M_t._M_upper_bound_tr(__x); }\n+\t-> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))\n+\t{ return const_iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -979,8 +979,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tequal_range(const _Kt& __x)\n-\t-> decltype(_M_t._M_equal_range_tr(__x))\n-\t{ return _M_t._M_equal_range_tr(__x); }\n+\t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n+\t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n #endif\n       //@}\n \n@@ -1006,8 +1006,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tequal_range(const _Kt& __x) const\n-\t-> decltype(_M_t._M_equal_range_tr(__x))\n-\t{ return _M_t._M_equal_range_tr(__x); }\n+\t-> decltype(pair<const_iterator, const_iterator>(\n+\t      _M_t._M_equal_range_tr(__x)))\n+\t{\n+\t  return pair<const_iterator, const_iterator>(\n+\t      _M_t._M_equal_range_tr(__x));\n+\t}\n #endif\n       //@}\n "}, {"sha": "871369c4a844ab9e51ee1c40728f786c0fb7fd7d", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -785,14 +785,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tlower_bound(const _Kt& __x)\n-\t-> decltype(_M_t._M_lower_bound_tr(__x))\n-\t{ return _M_t._M_lower_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_lower_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_lower_bound_tr(__x)); }\n \n       template<typename _Kt>\n \tauto\n \tlower_bound(const _Kt& __x) const\n-\t-> decltype(_M_t._M_lower_bound_tr(__x))\n-\t{ return _M_t._M_lower_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_lower_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -815,14 +815,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tupper_bound(const _Kt& __x)\n-\t-> decltype(_M_t._M_upper_bound_tr(__x))\n-\t{ return _M_t._M_upper_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_upper_bound_tr(__x)); }\n \n       template<typename _Kt>\n \tauto\n \tupper_bound(const _Kt& __x) const\n-\t-> decltype(_M_t._M_upper_bound_tr(__x))\n-\t{ return _M_t._M_upper_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -854,14 +854,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tequal_range(const _Kt& __x)\n-\t-> decltype(_M_t._M_equal_range_tr(__x))\n-\t{ return _M_t._M_equal_range_tr(__x); }\n+\t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n+\t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n \n       template<typename _Kt>\n \tauto\n \tequal_range(const _Kt& __x) const\n-\t-> decltype(_M_t._M_equal_range_tr(__x))\n-\t{ return _M_t._M_equal_range_tr(__x); }\n+\t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n+\t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n #endif\n       //@}\n "}, {"sha": "3decaffbefab709ebf84d9e3431e403114a6a2aa", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -804,14 +804,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tlower_bound(const _Kt& __x)\n-\t-> decltype(_M_t._M_lower_bound_tr(__x))\n-\t{ return _M_t._M_lower_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_lower_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_lower_bound_tr(__x)); }\n \n       template<typename _Kt>\n \tauto\n \tlower_bound(const _Kt& __x) const\n-\t-> decltype(_M_t._M_lower_bound_tr(__x))\n-\t{ return _M_t._M_lower_bound_tr(__x); }\n+\t-> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))\n+\t{ return const_iterator(_M_t._M_lower_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -834,14 +834,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tupper_bound(const _Kt& __x)\n-\t-> decltype(_M_t._M_upper_bound_tr(__x))\n-\t{ return _M_t._M_upper_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n+\t{ return iterator(_M_t._M_upper_bound_tr(__x)); }\n \n       template<typename _Kt>\n \tauto\n \tupper_bound(const _Kt& __x) const\n-\t-> decltype(_M_t._M_upper_bound_tr(__x))\n-\t{ return _M_t._M_upper_bound_tr(__x); }\n+\t-> decltype(iterator(_M_t._M_upper_bound_tr(__x)))\n+\t{ return const_iterator(_M_t._M_upper_bound_tr(__x)); }\n #endif\n       //@}\n \n@@ -873,14 +873,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _Kt>\n \tauto\n \tequal_range(const _Kt& __x)\n-\t-> decltype(_M_t._M_equal_range_tr(__x))\n-\t{ return _M_t._M_equal_range_tr(__x); }\n+\t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n+\t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n \n       template<typename _Kt>\n \tauto\n \tequal_range(const _Kt& __x) const\n-\t-> decltype(_M_t._M_equal_range_tr(__x))\n-\t{ return _M_t._M_equal_range_tr(__x); }\n+\t-> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))\n+\t{ return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }\n #endif\n       //@}\n "}, {"sha": "a301025cdb965b4f685ea2ed5a2ec90e64705151", "filename": "libstdc++-v3/testsuite/23_containers/map/operations/2.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F2.cc?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -53,7 +53,7 @@ test01()\n   cit = cx.find(2L);\n   VERIFY( cit == cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n \n   static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n       \"find returns iterator\");\n@@ -76,7 +76,7 @@ test02()\n   cn = cx.count(2L);\n   VERIFY( cn == 0 );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n }\n \n void\n@@ -94,7 +94,12 @@ test03()\n   cit = cx.lower_bound(2L);\n   VERIFY( cit != cx.end() && cit->second == '4' );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n+      \"lower_bound returns iterator\");\n+  static_assert(std::is_same<decltype(cit), test_type::const_iterator>::value,\n+      \"const lower_bound returns const_iterator\");\n }\n \n void\n@@ -112,7 +117,12 @@ test04()\n   cit = cx.upper_bound(3L);\n   VERIFY( cit == cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n+      \"upper_bound returns iterator\");\n+  static_assert(std::is_same<decltype(cit), test_type::const_iterator>::value,\n+      \"const upper_bound returns const_iterator\");\n }\n \n void\n@@ -130,7 +140,14 @@ test05()\n   cit = cx.equal_range(2L);\n   VERIFY( cit.first == cit.second && cit.first != cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  using pair = std::pair<test_type::iterator, test_type::iterator>;\n+  static_assert(std::is_same<decltype(it), pair>::value,\n+      \"equal_range returns pair<iterator, iterator>\");\n+  using cpair = std::pair<test_type::const_iterator, test_type::const_iterator>;\n+  static_assert(std::is_same<decltype(cit), cpair>::value,\n+      \"const equal_range returns pair<const_iterator, const_iterator>\");\n }\n \n void"}, {"sha": "01a10f6fc20eade3f75842e550989dfbfc00840d", "filename": "libstdc++-v3/testsuite/23_containers/multimap/operations/2.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2F2.cc?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -53,7 +53,7 @@ test01()\n   cit = cx.find(2L);\n   VERIFY( cit == cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n \n   static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n       \"find returns iterator\");\n@@ -76,7 +76,7 @@ test02()\n   cn = cx.count(2L);\n   VERIFY( cn == 0 );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n }\n \n void\n@@ -94,7 +94,12 @@ test03()\n   cit = cx.lower_bound(2L);\n   VERIFY( cit != cx.end() && cit->second == '4' );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n+      \"lower_bound returns iterator\");\n+  static_assert(std::is_same<decltype(cit), test_type::const_iterator>::value,\n+      \"const lower_bound returns const_iterator\");\n }\n \n void\n@@ -112,7 +117,12 @@ test04()\n   cit = cx.upper_bound(3L);\n   VERIFY( cit == cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n+      \"upper_bound returns iterator\");\n+  static_assert(std::is_same<decltype(cit), test_type::const_iterator>::value,\n+      \"const upper_bound returns const_iterator\");\n }\n \n void\n@@ -131,7 +141,14 @@ test05()\n   cit = cx.equal_range(2L);\n   VERIFY( cit.first == cit.second && cit.first != cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  using pair = std::pair<test_type::iterator, test_type::iterator>;\n+  static_assert(std::is_same<decltype(it), pair>::value,\n+      \"equal_range returns pair<iterator, iterator>\");\n+  using cpair = std::pair<test_type::const_iterator, test_type::const_iterator>;\n+  static_assert(std::is_same<decltype(cit), cpair>::value,\n+      \"const equal_range returns pair<const_iterator, const_iterator>\");\n }\n \n "}, {"sha": "9468151caf5cbc0887d221a7fb97d78a73a29e72", "filename": "libstdc++-v3/testsuite/23_containers/multiset/operations/2.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2F2.cc?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -53,7 +53,7 @@ test01()\n   cit = cx.find(2L);\n   VERIFY( cit == cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n \n   static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n       \"find returns iterator\");\n@@ -76,7 +76,7 @@ test02()\n   cn = cx.count(2L);\n   VERIFY( cn == 0 );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n }\n \n void\n@@ -94,7 +94,12 @@ test03()\n   cit = cx.lower_bound(2L);\n   VERIFY( cit != cx.end() && *cit == 3 );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n+      \"lower_bound returns iterator\");\n+  static_assert(std::is_same<decltype(cit), test_type::const_iterator>::value,\n+      \"const lower_bound returns const_iterator\");\n }\n \n void\n@@ -112,7 +117,12 @@ test04()\n   cit = cx.upper_bound(5L);\n   VERIFY( cit == cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n+      \"upper_bound returns iterator\");\n+  static_assert(std::is_same<decltype(cit), test_type::const_iterator>::value,\n+      \"const upper_bound returns const_iterator\");\n }\n \n void\n@@ -131,7 +141,14 @@ test05()\n   cit = cx.equal_range(2L);\n   VERIFY( cit.first == cit.second && cit.first != cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  using pair = std::pair<test_type::iterator, test_type::iterator>;\n+  static_assert(std::is_same<decltype(it), pair>::value,\n+      \"equal_range returns pair<iterator, iterator>\");\n+  using cpair = std::pair<test_type::const_iterator, test_type::const_iterator>;\n+  static_assert(std::is_same<decltype(cit), cpair>::value,\n+      \"const equal_range returns pair<const_iterator, const_iterator>\");\n }\n \n "}, {"sha": "acddb18f5170055e90992931a872cd65b24e1025", "filename": "libstdc++-v3/testsuite/23_containers/set/operations/2.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744bf4e18d4c1422cdffbfeed30490252b3f64e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2F2.cc?ref=b744bf4e18d4c1422cdffbfeed30490252b3f64e", "patch": "@@ -53,7 +53,7 @@ test01()\n   cit = cx.find(2L);\n   VERIFY( cit == cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n \n   static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n       \"find returns iterator\");\n@@ -76,7 +76,7 @@ test02()\n   cn = cx.count(2L);\n   VERIFY( cn == 0 );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n }\n \n void\n@@ -94,7 +94,12 @@ test03()\n   cit = cx.lower_bound(2L);\n   VERIFY( cit != cx.end() && *cit == 3 );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n+      \"lower_bound returns iterator\");\n+  static_assert(std::is_same<decltype(cit), test_type::const_iterator>::value,\n+      \"const lower_bound returns const_iterator\");\n }\n \n void\n@@ -112,7 +117,12 @@ test04()\n   cit = cx.upper_bound(5L);\n   VERIFY( cit == cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  static_assert(std::is_same<decltype(it), test_type::iterator>::value,\n+      \"upper_bound returns iterator\");\n+  static_assert(std::is_same<decltype(cit), test_type::const_iterator>::value,\n+      \"const upper_bound returns const_iterator\");\n }\n \n void\n@@ -130,7 +140,14 @@ test05()\n   cit = cx.equal_range(2L);\n   VERIFY( cit.first == cit.second && cit.first != cx.end() );\n \n-  VERIFY( Cmp::count == 0);\n+  VERIFY( Cmp::count == 0 );\n+\n+  using pair = std::pair<test_type::iterator, test_type::iterator>;\n+  static_assert(std::is_same<decltype(it), pair>::value,\n+      \"equal_range returns pair<iterator, iterator>\");\n+  using cpair = std::pair<test_type::const_iterator, test_type::const_iterator>;\n+  static_assert(std::is_same<decltype(cit), cpair>::value,\n+      \"const equal_range returns pair<const_iterator, const_iterator>\");\n }\n \n void"}]}