{"sha": "9c5c5f2cd1c780f85df07731c7e5547acce198db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1YzVmMmNkMWM3ODBmODVkZjA3NzMxYzdlNTU0N2FjY2UxOThkYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-31T18:41:28Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-31T18:41:28Z"}, "message": "c-common.c (c_expand_expr): Remove code to return a value different from that returned by expand_expr.\n\n\t* c-common.c (c_expand_expr): Remove code to return a value\n\tdifferent from that returned by expand_expr.\n\t* expr.c (store_expr): Use the validity of a target MEM, rather\n\tthan checking DECL_RTL (exp), to figure out if a copy is\n\trequired.\n\nFrom-SVN: r75273", "tree": {"sha": "ca5892b65be66a80c4067e181a0309181e237a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca5892b65be66a80c4067e181a0309181e237a4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c5c5f2cd1c780f85df07731c7e5547acce198db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5c5f2cd1c780f85df07731c7e5547acce198db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5c5f2cd1c780f85df07731c7e5547acce198db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5c5f2cd1c780f85df07731c7e5547acce198db/comments", "author": null, "committer": null, "parents": [{"sha": "d4de0221f3539de204f92443ca66a0e8b36de64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4de0221f3539de204f92443ca66a0e8b36de64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4de0221f3539de204f92443ca66a0e8b36de64b"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "b27cd4c3288bfaf64eca6c4a6a5adcb0d886d974", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5c5f2cd1c780f85df07731c7e5547acce198db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5c5f2cd1c780f85df07731c7e5547acce198db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c5c5f2cd1c780f85df07731c7e5547acce198db", "patch": "@@ -1,3 +1,11 @@\n+2003-12-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-common.c (c_expand_expr): Remove code to return a value\n+\tdifferent from that returned by expand_expr.\n+\t* expr.c (store_expr): Use the validity of a target MEM, rather\n+\tthan checking DECL_RTL (exp), to figure out if a copy is\n+\trequired.\n+\n 2003-12-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/v850/lib1funcs.asm: Fix comment formatting."}, {"sha": "327a4dc463cfc5bab88aca13dc3348cba7a122a6", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5c5f2cd1c780f85df07731c7e5547acce198db/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5c5f2cd1c780f85df07731c7e5547acce198db/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9c5c5f2cd1c780f85df07731c7e5547acce198db", "patch": "@@ -4064,7 +4064,6 @@ c_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n \ttree rtl_expr;\n \trtx result;\n \tbool preserve_result = false;\n-\tbool return_target = false;\n \n \tif (STMT_EXPR_WARN_UNUSED_RESULT (exp) && target == const0_rtx)\n \t  {\n@@ -4112,30 +4111,18 @@ c_expand_expr (tree exp, rtx target, enum machine_mode tmode, int modifier)\n \t    if (TREE_CODE (last) == SCOPE_STMT\n \t\t&& TREE_CODE (expr) == EXPR_STMT)\n \t      {\n-\t\tif (target && TREE_CODE (EXPR_STMT_EXPR (expr)) == VAR_DECL\n-\t\t    && DECL_RTL_IF_SET (EXPR_STMT_EXPR (expr)) == target)\n-\t\t  /* If the last expression is a variable whose RTL is the\n-\t\t     same as our target, just return the target; if it\n-\t\t     isn't valid expanding the decl would produce different\n-\t\t     RTL, and store_expr would try to do a copy.  */\n-\t\t  return_target = true;\n-\t\telse\n-\t\t  {\n-\t\t    /* Otherwise, note that we want the value from the last\n-\t\t       expression.  */\n-\t\t    TREE_ADDRESSABLE (expr) = 1;\n-\t\t    preserve_result = true;\n-\t\t  }\n+\t\t/* Otherwise, note that we want the value from the last\n+\t\t   expression.  */\n+\t\tTREE_ADDRESSABLE (expr) = 1;\n+\t\tpreserve_result = true;\n \t      }\n \t  }\n \n \texpand_stmt (STMT_EXPR_STMT (exp));\n \texpand_end_stmt_expr (rtl_expr);\n \n \tresult = expand_expr (rtl_expr, target, tmode, modifier);\n-\tif (return_target)\n-\t  result = target;\n-\telse if (preserve_result && GET_CODE (result) == MEM)\n+\tif (preserve_result && GET_CODE (result) == MEM)\n \t  {\n \t    if (GET_MODE (result) != BLKmode)\n \t      result = copy_to_reg (result);"}, {"sha": "a38dee1851ca50fda1f99351c278632599210d7e", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5c5f2cd1c780f85df07731c7e5547acce198db/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5c5f2cd1c780f85df07731c7e5547acce198db/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9c5c5f2cd1c780f85df07731c7e5547acce198db", "patch": "@@ -4253,11 +4253,13 @@ store_expr (tree exp, rtx target, int want_value)\n \t\t\t      || side_effects_p (target))))\n       && TREE_CODE (exp) != ERROR_MARK\n       && ! dont_store_target\n-\t /* If store_expr stores a DECL whose DECL_RTL(exp) == TARGET,\n-\t    but TARGET is not valid memory reference, TEMP will differ\n-\t    from TARGET although it is really the same location.  */\n-      && (TREE_CODE_CLASS (TREE_CODE (exp)) != 'd'\n-\t  || target != DECL_RTL_IF_SET (exp))\n+      /* If store_expr stores a DECL whose DECL_RTL(exp) == TARGET,\n+\t but TARGET is not valid memory reference, TEMP will differ\n+\t from TARGET although it is really the same location.  */\n+      && !(GET_CODE (target) == MEM\n+\t   && GET_CODE (XEXP (target, 0)) != QUEUED\n+\t   && (!memory_address_p (GET_MODE (target), XEXP (target, 0))\n+\t       || (flag_force_addr && !REG_P (XEXP (target, 0)))))\n       /* If there's nothing to copy, don't bother.  Don't call expr_size\n \t unless necessary, because some front-ends (C++) expr_size-hook\n \t aborts on objects that are not supposed to be bit-copied or"}]}