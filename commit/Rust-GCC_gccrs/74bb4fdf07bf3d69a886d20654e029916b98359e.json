{"sha": "74bb4fdf07bf3d69a886d20654e029916b98359e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiYjRmZGYwN2JmM2Q2OWE4ODZkMjA2NTRlMDI5OTE2Yjk4MzU5ZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-25T21:45:29Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-25T21:45:29Z"}, "message": "(g++.o): New target.\n\n(deduced.h): Depend on GCC_PASSES and stmp-int-hdrs.\n(xsys-protos.h): Depend on GCC_PASSES.\n(fixhdr.ready): New target.\n(stmp-fixproto): Depend on fixhdr.ready, not fix-header itself.\n(clean): Delete fixhdr.ready.\n\nFrom-SVN: r5886", "tree": {"sha": "5d10f4166935a71c16d1d66b5a3b7a89604ef4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d10f4166935a71c16d1d66b5a3b7a89604ef4fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74bb4fdf07bf3d69a886d20654e029916b98359e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bb4fdf07bf3d69a886d20654e029916b98359e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74bb4fdf07bf3d69a886d20654e029916b98359e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bb4fdf07bf3d69a886d20654e029916b98359e/comments", "author": null, "committer": null, "parents": [{"sha": "46093b975f793bd5df36c3ee066e7ea55d5c9e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46093b975f793bd5df36c3ee066e7ea55d5c9e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46093b975f793bd5df36c3ee066e7ea55d5c9e26"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "ed562732d72ca28e0b3d391f53cb499af7e4bb2d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bb4fdf07bf3d69a886d20654e029916b98359e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bb4fdf07bf3d69a886d20654e029916b98359e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=74bb4fdf07bf3d69a886d20654e029916b98359e", "patch": "@@ -505,6 +505,9 @@ rest.encap: $(LIBGCC) stmp-headers $(STMP_FIXPROTO) $(EXTRA_PARTS)\n native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n \n # Define the names for selecting languages in LANGUAGES.\n+# Note that it would be nice to move the dependency on g++\n+# into the C++ rule, but that needs a little bit of work\n+# to do the right thing within all.cross.\n C c: cc1\n C++ c++: cc1plus\n # The next two ought to depend on objc-runtime, but that doesn't work yet.\n@@ -863,6 +866,8 @@ cp-pt.o : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-parse.h\n cp-error.o : cp-error.c $(CONFIG_H) $(CPLUS_TREE_H)\n cp-errfn.o : cp-errfn.c $(CONFIG_H) $(CPLUS_TREE_H)\n \n+g++.o : g++.c $(CONFIG_H) gvarargs.h\n+\n # To make a configuration always use collect2, set USE_COLLECT2 to ld.\n ld: collect2\n \trm -f ld\n@@ -1563,7 +1568,7 @@ objc-headers: stmp-fixinc\n \n # Files related to the fixproto script.\n \n-deduced.h: $(srcdir)/scan-types.sh\n+deduced.h: $(GCC_PASSES) $(srcdir)/scan-types.sh stmp-int-hdrs\n \tCC=\"$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -Iinclude -I${SYSTEM_HEADER_DIR}\"; \\\n \t  export CC; \\\n \t  $(srcdir)/scan-types.sh >tmp-deduced.h\n@@ -1572,7 +1577,7 @@ deduced.h: $(srcdir)/scan-types.sh\n gen-protos: gen-protos.o scan.o\n \t${HOST_CC} -o gen-protos gen-protos.o scan.o\n \n-xsys-protos.h: $(srcdir)/sys-protos.h deduced.h gen-protos Makefile\n+xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h gen-protos Makefile\n \tcat deduced.h $(srcdir)/sys-protos.h > fixtmp.c\n \t$(GCC_FOR_TARGET) fixtmp.c -E \\\n \t  | sed -e 's/\t/ /g' -e 's/ *(/ (/g' -e 's/ [ ]*/ /g' -e 's/( )/()/' \\\n@@ -1584,8 +1589,19 @@ fix-header: fix-header.o scan-decls.o scan.o xsys-protos.h $(HOST_OBSTACK)\n \n fix-header.o: xsys-protos.h\n \n+# stmp-fixproto depends on this, not on fix-header directly.\n+# The idea is to make sure fix-header gets built,\n+# but not rerun fixproto after each stage\n+# just because fix-header's mtime has changed.\n+fixhdr.ready: fix-header\n+\t-if [ -f fixhdr.ready ] ; then \\\n+\t\ttrue; \\\n+\telse \\\n+\t\ttouch fixhdr.ready; \\\n+\tfi\n+\n # stmp-headers is to make sure fixincludes has already finished.\n-stmp-fixproto: fix-header xsys-protos.h fixproto stmp-headers\n+stmp-fixproto: fixhdr.ready xsys-protos.h fixproto stmp-headers\n \tCPP=\"$(GCC_FOR_TARGET) -E\"; export CPP; \\\n \t  ${srcdir}/fixproto include include $(SYSTEM_HEADER_DIR)\n \ttouch stmp-fixproto\n@@ -1681,6 +1697,7 @@ clean: mostlyclean bytecode.clean\n \tfi\n # Delete the include directory.\n \t-rm -rf stmp-* fixinc.ready include objc-headers\n+\t-rm -rf fixhdr.ready\n \n # Delete all files that users would normally create\n # while building and installing GCC."}]}