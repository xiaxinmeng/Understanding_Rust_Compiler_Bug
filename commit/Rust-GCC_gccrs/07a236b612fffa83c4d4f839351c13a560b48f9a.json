{"sha": "07a236b612fffa83c4d4f839351c13a560b48f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhMjM2YjYxMmZmZmE4M2M0ZDRmODM5MzUxYzEzYTU2MGI0OGY5YQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-07-21T18:57:09Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-07-21T18:57:09Z"}, "message": "rtl.h (insn_note): Remove NOTE_INSN_PREDICTION.\n\n\t* rtl.h (insn_note): Remove NOTE_INSN_PREDICTION.\n\t* rtl.c (note_insn_name): Likewise.\n\t* print-rtl.c (print_rtx): Don't print it.\n\t* cfgrtl.h (can_delete_note_p): Don't handle it.\n\t(rtl_delete_block): Likewise.\n\t* passes.c (rest_of_handle_guess_branch_prob): Remove.\n\t(rest_of_compilation): Don't call it.\n\t* predict.c (process_note_predictions, process_note_prediction,\n\tnote_prediction_to_br_prob): Remove.\n\t* basic-block.c (note_prediction_to_br_prob): Remove prototype.\n\t* stmt.c (return_prediction): Remove.\n\t(expand_value_return): Don't call it.  Don't add prediction\n\tnotes for return statements.\n\nFrom-SVN: r85016", "tree": {"sha": "d4da6fa4c9e5c2b532917701f2d280cf5b10c01a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4da6fa4c9e5c2b532917701f2d280cf5b10c01a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07a236b612fffa83c4d4f839351c13a560b48f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a236b612fffa83c4d4f839351c13a560b48f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a236b612fffa83c4d4f839351c13a560b48f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a236b612fffa83c4d4f839351c13a560b48f9a/comments", "author": null, "committer": null, "parents": [{"sha": "d917fa87989411da1a6e002993aec077469ff719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d917fa87989411da1a6e002993aec077469ff719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d917fa87989411da1a6e002993aec077469ff719"}], "stats": {"total": 246, "additions": 20, "deletions": 226}, "files": [{"sha": "dcafdeca5d028ca0e1ee468bce105dc1d65338c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -1,3 +1,19 @@\n+2004-07-21  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* rtl.h (insn_note): Remove NOTE_INSN_PREDICTION.\n+\t* rtl.c (note_insn_name): Likewise.\n+\t* print-rtl.c (print_rtx): Don't print it.\n+\t* cfgrtl.h (can_delete_note_p): Don't handle it.\n+\t(rtl_delete_block): Likewise.\n+\t* passes.c (rest_of_handle_guess_branch_prob): Remove.\n+\t(rest_of_compilation): Don't call it.\n+\t* predict.c (process_note_predictions, process_note_prediction,\n+\tnote_prediction_to_br_prob): Remove.\n+\t* basic-block.c (note_prediction_to_br_prob): Remove prototype.\n+\t* stmt.c (return_prediction): Remove.\n+\t(expand_value_return): Don't call it.  Don't add prediction\n+\tnotes for return statements.\n+\n 2004-07-21  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* var-tracking.c (vt_find_locations): Set the in_pending bitmap at"}, {"sha": "c7d2c072146837b1f3fa944c4aa212f5c115f0a6", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -595,7 +595,6 @@ extern rtx emit_block_insn_before (rtx, rtx, basic_block);\n \n /* In predict.c */\n extern void estimate_probability (struct loops *);\n-extern void note_prediction_to_br_prob (void);\n extern void expected_value_to_br_prob (void);\n extern bool maybe_hot_bb_p (basic_block);\n extern bool probably_cold_bb_p (basic_block);"}, {"sha": "5a280af4bf8b86f044d784e45c21259e84b5b961", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -93,8 +93,7 @@ can_delete_note_p (rtx note)\n {\n   return (NOTE_LINE_NUMBER (note) == NOTE_INSN_DELETED\n \t  || NOTE_LINE_NUMBER (note) == NOTE_INSN_BASIC_BLOCK\n-\t  || NOTE_LINE_NUMBER (note) == NOTE_INSN_UNLIKELY_EXECUTED_CODE\n-\t  || NOTE_LINE_NUMBER (note) == NOTE_INSN_PREDICTION);\n+\t  || NOTE_LINE_NUMBER (note) == NOTE_INSN_UNLIKELY_EXECUTED_CODE);\n }\n \n /* True if a given label can be deleted.  */\n@@ -376,15 +375,13 @@ rtl_delete_block (basic_block b)\n      and remove the associated NOTE_INSN_EH_REGION_BEG and\n      NOTE_INSN_EH_REGION_END notes.  */\n \n-  /* Get rid of all NOTE_INSN_PREDICTIONs and NOTE_INSN_LOOP_CONTs\n-     hanging before the block.  */\n+  /* Get rid of all NOTE_INSN_LOOP_CONTs hanging before the block.  */\n \n   for (insn = PREV_INSN (BB_HEAD (b)); insn; insn = PREV_INSN (insn))\n     {\n       if (!NOTE_P (insn))\n \tbreak;\n-      if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_PREDICTION\n-\t  || NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_CONT)\n+      if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_CONT)\n \tNOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n     }\n "}, {"sha": "b124b3eafcdb75b71cef0b7e6a87db9590ffb2f0", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -1472,18 +1472,6 @@ rest_of_handle_jump (void)\n   timevar_pop (TV_JUMP);\n }\n \n-static void\n-rest_of_handle_guess_branch_prob (void)\n-{\n-  /* Turn NOTE_INSN_PREDICTIONs into branch predictions.  */\n-  if (flag_guess_branch_prob)\n-    {\n-      timevar_push (TV_BRANCH_PROB);\n-      note_prediction_to_br_prob ();\n-      timevar_pop (TV_BRANCH_PROB);\n-    }\n-}\n-\n static void\n rest_of_handle_eh (void)\n {\n@@ -1791,7 +1779,6 @@ rest_of_compilation (void)\n     goto exit_rest_of_compilation;\n \n   rest_of_handle_jump ();\n-  rest_of_handle_guess_branch_prob ();\n \n   if (cfun->tail_call_emit)\n     fixup_tail_calls ();"}, {"sha": "c92b27f8bdf5fb7d325c7984b63695725dd96973", "filename": "gcc/predict.c", "status": "modified", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -76,8 +76,6 @@ static void estimate_loops_at_level (struct loop *loop);\n static void propagate_freq (struct loop *);\n static void estimate_bb_frequencies (struct loops *);\n static int counts_to_freqs (void);\n-static void process_note_predictions (basic_block, int *);\n-static void process_note_prediction (basic_block, int *, int, int);\n static bool last_basic_block_p (basic_block);\n static void compute_function_frequency (void);\n static void choose_function_section (void);\n@@ -1078,150 +1076,6 @@ last_basic_block_p (basic_block bb)\n \t      && bb->succ && !bb->succ->succ_next\n \t      && bb->succ->dest->next_bb == EXIT_BLOCK_PTR));\n }\n-\n-/* Sets branch probabilities according to PREDiction and\n-   FLAGS. HEADS[bb->index] should be index of basic block in that we\n-   need to alter branch predictions (i.e. the first of our dominators\n-   such that we do not post-dominate it) (but we fill this information\n-   on demand, so -1 may be there in case this was not needed yet).  */\n-\n-static void\n-process_note_prediction (basic_block bb, int *heads, int pred, int flags)\n-{\n-  edge e;\n-  int y;\n-  bool taken;\n-\n-  taken = flags & IS_TAKEN;\n-\n-  if (heads[bb->index] < 0)\n-    {\n-      /* This is first time we need this field in heads array; so\n-         find first dominator that we do not post-dominate (we are\n-         using already known members of heads array).  */\n-      basic_block ai = bb;\n-      basic_block next_ai = get_immediate_dominator (CDI_DOMINATORS, bb);\n-      int head;\n-\n-      while (heads[next_ai->index] < 0)\n-\t{\n-\t  if (!dominated_by_p (CDI_POST_DOMINATORS, next_ai, bb))\n-\t    break;\n-\t  heads[next_ai->index] = ai->index;\n-\t  ai = next_ai;\n-\t  next_ai = get_immediate_dominator (CDI_DOMINATORS, next_ai);\n-\t}\n-      if (!dominated_by_p (CDI_POST_DOMINATORS, next_ai, bb))\n-\thead = next_ai->index;\n-      else\n-\thead = heads[next_ai->index];\n-      while (next_ai != bb)\n-\t{\n-\t  next_ai = ai;\n-\t  if (heads[ai->index] == ENTRY_BLOCK)\n-\t    ai = ENTRY_BLOCK_PTR;\n-\t  else\n-\t    ai = BASIC_BLOCK (heads[ai->index]);\n-\t  heads[next_ai->index] = head;\n-\t}\n-    }\n-  y = heads[bb->index];\n-\n-  /* Now find the edge that leads to our branch and aply the prediction.  */\n-\n-  if (y == last_basic_block || !can_predict_insn_p (BB_END (BASIC_BLOCK (y))))\n-    return;\n-  for (e = BASIC_BLOCK (y)->succ; e; e = e->succ_next)\n-    if (e->dest->index >= 0\n-\t&& dominated_by_p (CDI_POST_DOMINATORS, e->dest, bb))\n-      predict_edge_def (e, pred, taken);\n-}\n-\n-/* Gathers NOTE_INSN_PREDICTIONs in given basic block and turns them\n-   into branch probabilities.  For description of heads array, see\n-   process_note_prediction.  */\n-\n-static void\n-process_note_predictions (basic_block bb, int *heads)\n-{\n-  rtx insn;\n-  edge e;\n-\n-  /* Additionally, we check here for blocks with no successors.  */\n-  int contained_noreturn_call = 0;\n-  int was_bb_head = 0;\n-  int noreturn_block = 1;\n-\n-  for (insn = BB_END (bb); insn;\n-       was_bb_head |= (insn == BB_HEAD (bb)), insn = PREV_INSN (insn))\n-    {\n-      if (!NOTE_P (insn))\n-\t{\n-\t  if (was_bb_head)\n-\t    break;\n-\t  else\n-\t    {\n-\t      /* Noreturn calls cause program to exit, therefore they are\n-\t         always predicted as not taken.  */\n-\t      if (CALL_P (insn)\n-\t\t  && find_reg_note (insn, REG_NORETURN, NULL))\n-\t\tcontained_noreturn_call = 1;\n-\t      continue;\n-\t    }\n-\t}\n-      if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_PREDICTION)\n-\t{\n-\t  int alg = (int) NOTE_PREDICTION_ALG (insn);\n-\t  /* Process single prediction note.  */\n-\t  process_note_prediction (bb,\n-\t\t\t\t   heads,\n-\t\t\t\t   alg, (int) NOTE_PREDICTION_FLAGS (insn));\n-\t  delete_insn (insn);\n-\t}\n-    }\n-  for (e = bb->succ; e; e = e->succ_next)\n-    if (!(e->flags & EDGE_FAKE))\n-      noreturn_block = 0;\n-  if (contained_noreturn_call)\n-    {\n-      /* This block ended from other reasons than because of return.\n-         If it is because of noreturn call, this should certainly not\n-         be taken.  Otherwise it is probably some error recovery.  */\n-      process_note_prediction (bb, heads, PRED_NORETURN, NOT_TAKEN);\n-    }\n-}\n-\n-/* Gathers NOTE_INSN_PREDICTIONs and turns them into\n-   branch probabilities.  */\n-\n-void\n-note_prediction_to_br_prob (void)\n-{\n-  basic_block bb;\n-  int *heads;\n-\n-  /* To enable handling of noreturn blocks.  */\n-  add_noreturn_fake_exit_edges ();\n-  connect_infinite_loops_to_exit ();\n-\n-  calculate_dominance_info (CDI_POST_DOMINATORS);\n-  calculate_dominance_info (CDI_DOMINATORS);\n-\n-  heads = xmalloc (sizeof (int) * last_basic_block);\n-  memset (heads, -1, sizeof (int) * last_basic_block);\n-  heads[ENTRY_BLOCK_PTR->next_bb->index] = last_basic_block;\n-\n-  /* Process all prediction notes.  */\n-\n-  FOR_EACH_BB (bb)\n-    process_note_predictions (bb, heads);\n-\n-  free_dominance_info (CDI_POST_DOMINATORS);\n-  free_dominance_info (CDI_DOMINATORS);\n-  free (heads);\n-\n-  remove_fake_exit_edges ();\n-}\n \f\n /* This is used to carry information about basic blocks.  It is\n    attached to the AUX field of the standard CFG block.  */"}, {"sha": "8b211f076acd9e4c9009a91bc7c41d39100efa62", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -281,15 +281,6 @@ print_rtx (rtx in_rtx)\n \t\t}\n \t\tbreak;\n \n-\t      case NOTE_INSN_PREDICTION:\n-\t\tif (NOTE_PREDICTION (in_rtx))\n-\t\t  fprintf (outfile, \" [ %d %d ] \",\n-\t\t\t   (int)NOTE_PREDICTION_ALG (in_rtx),\n-\t\t\t   (int) NOTE_PREDICTION_FLAGS (in_rtx));\n-\t\telse\n-\t\t  fprintf (outfile, \" [ ERROR ]\");\n-\t\tbreak;\n-\n \t      case NOTE_INSN_UNLIKELY_EXECUTED_CODE:\n \t\t{\n \t\t  basic_block bb = NOTE_BASIC_BLOCK (in_rtx);"}, {"sha": "3c03ae2924b3a2fb471ea24e487c4f3f57aec189", "filename": "gcc/rtl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -122,7 +122,6 @@ const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS] =\n   \"NOTE_INSN_EH_REGION_BEG\", \"NOTE_INSN_EH_REGION_END\",\n   \"NOTE_INSN_REPEATED_LINE_NUMBER\",\n   \"NOTE_INSN_BASIC_BLOCK\", \"NOTE_INSN_EXPECTED_VALUE\",\n-  \"NOTE_INSN_PREDICTION\",\n   \"NOTE_INSN_UNLIKELY_EXECUTED_CODE\",\n   \"NOTE_INSN_VAR_LOCATION\"\n };"}, {"sha": "3fd8bafecba7e89a1faf78c37189f39f33157fda", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -1029,9 +1029,6 @@ enum insn_note\n      NOTE_EXPECTED_VALUE; stored as (eq (reg) (const_int)).  */\n   NOTE_INSN_EXPECTED_VALUE,\n \n-  /* Record a prediction.  Uses NOTE_PREDICTION.  */\n-  NOTE_INSN_PREDICTION,\n-\n   /* Record that the current basic block is unlikely to be executed and\n      should be moved to the UNLIKELY_EXECUTED_TEXT_SECTION.  */\n   NOTE_INSN_UNLIKELY_EXECUTED_CODE,"}, {"sha": "b2ffef690ca7531601a65972b2a386ec7254d6a8", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a236b612fffa83c4d4f839351c13a560b48f9a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=07a236b612fffa83c4d4f839351c13a560b48f9a", "patch": "@@ -264,7 +264,6 @@ static bool check_operand_nalternatives (tree, tree);\n static bool check_unique_operand_names (tree, tree);\n static char *resolve_operand_name_1 (char *, tree, tree);\n static void expand_null_return_1 (void);\n-static enum br_predictor return_prediction (rtx);\n static rtx shift_return_value (rtx);\n static void expand_value_return (rtx);\n static void do_jump_if_equal (rtx, rtx, rtx, int);\n@@ -1811,35 +1810,6 @@ expand_naked_return (void)\n   emit_jump (end_label);\n }\n \n-/* Try to guess whether the value of return means error code.  */\n-static enum br_predictor\n-return_prediction (rtx val)\n-{\n-  /* Different heuristics for pointers and scalars.  */\n-  if (POINTER_TYPE_P (TREE_TYPE (DECL_RESULT (current_function_decl))))\n-    {\n-      /* NULL is usually not returned.  */\n-      if (val == const0_rtx)\n-\treturn PRED_NULL_RETURN;\n-    }\n-  else\n-    {\n-      /* Negative return values are often used to indicate\n-         errors.  */\n-      if (GET_CODE (val) == CONST_INT\n-\t  && INTVAL (val) < 0)\n-\treturn PRED_NEGATIVE_RETURN;\n-      /* Constant return values are also usually erors,\n-         zero/one often mean booleans so exclude them from the\n-\t heuristics.  */\n-      if (CONSTANT_P (val)\n-\t  && (val != const0_rtx && val != const1_rtx))\n-\treturn PRED_CONST_RETURN;\n-    }\n-  return PRED_NO_PREDICTION;\n-}\n-\n-\n /* If the current function returns values in the most significant part\n    of a register, shift return value VAL appropriately.  The mode of\n    the function's return type is known not to be BLKmode.  */\n@@ -1872,26 +1842,10 @@ shift_return_value (rtx val)\n static void\n expand_value_return (rtx val)\n {\n-  rtx return_reg;\n-  enum br_predictor pred;\n-\n-  if (flag_guess_branch_prob\n-      && (pred = return_prediction (val)) != PRED_NO_PREDICTION)\n-    {\n-      /* Emit information for branch prediction.  */\n-      rtx note;\n-\n-      note = emit_note (NOTE_INSN_PREDICTION);\n-\n-      NOTE_PREDICTION (note) = NOTE_PREDICT (pred, NOT_TAKEN);\n-\n-    }\n-\n-  return_reg = DECL_RTL (DECL_RESULT (current_function_decl));\n-\n   /* Copy the value to the return location\n      unless it's already there.  */\n \n+  rtx return_reg = DECL_RTL (DECL_RESULT (current_function_decl));\n   if (return_reg != val)\n     {\n       tree type = TREE_TYPE (DECL_RESULT (current_function_decl));"}]}