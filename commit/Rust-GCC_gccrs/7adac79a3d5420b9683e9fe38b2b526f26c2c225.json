{"sha": "7adac79a3d5420b9683e9fe38b2b526f26c2c225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FkYWM3OWEzZDU0MjBiOTY4M2U5ZmUzOGIyYjUyNmYyNmMyYzIyNQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-01-31T21:56:02Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-01-31T21:56:02Z"}, "message": "re PR fortran/42888 (ICE in fold_convert_loc, at fold-const.c:2670)\n\ngcc/fortran/\n2010-01-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42888\n\t* resolve.c (resolve_allocate_expr): Move default initialization code\n\there from gfc_trans_allocate.\n\t* trans.c (gfc_trans_code): Call gfc_trans_class_assign also for\n\tEXEC_INIT_ASSIGN.\n\t* trans-expr.c (gfc_trans_class_assign): Handle default initialization\n\tof CLASS variables via memcpy.\n\t* trans-stmt.c (gfc_trans_allocate): Move default initialization code\n\tto resolve_allocate_expr.\n\ngcc/testsuite/\n2010-01-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42888\n\t* gfortran.dg/allocate_derived_2.f90: New test.\n\nFrom-SVN: r156418", "tree": {"sha": "141d0f689a065770fa6cc34ecce6c668bb1bf081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/141d0f689a065770fa6cc34ecce6c668bb1bf081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7adac79a3d5420b9683e9fe38b2b526f26c2c225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7adac79a3d5420b9683e9fe38b2b526f26c2c225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7adac79a3d5420b9683e9fe38b2b526f26c2c225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7adac79a3d5420b9683e9fe38b2b526f26c2c225/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "355b1741d9529b17183d99b21ca692769d049c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355b1741d9529b17183d99b21ca692769d049c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355b1741d9529b17183d99b21ca692769d049c64"}], "stats": {"total": 116, "additions": 92, "deletions": 24}, "files": [{"sha": "0271eb9408b1b966994e8ad9e6ac4246dae7ec86", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7adac79a3d5420b9683e9fe38b2b526f26c2c225", "patch": "@@ -1,3 +1,15 @@\n+2010-01-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42888\n+\t* resolve.c (resolve_allocate_expr): Move default initialization code\n+\there from gfc_trans_allocate.\n+\t* trans.c (gfc_trans_code): Call gfc_trans_class_assign also for\n+\tEXEC_INIT_ASSIGN.\n+\t* trans-expr.c (gfc_trans_class_assign): Handle default initialization\n+\tof CLASS variables via memcpy.\n+\t* trans-stmt.c (gfc_trans_allocate): Move default initialization code\n+\tto resolve_allocate_expr.\n+\n 2010-01-31  Paul Thomas  <pault@gcc.gnu.org>\n \n         PR fortran/38324"}, {"sha": "d0aa6adf9c31145f937f4bfc3a720b12d5b69749", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7adac79a3d5420b9683e9fe38b2b526f26c2c225", "patch": "@@ -6099,6 +6099,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n   gfc_symbol *sym;\n   gfc_alloc *a;\n   gfc_component *c;\n+  gfc_expr *init_e;\n \n   /* Check INTENT(IN), unless the object is a sub-component of a pointer.  */\n   check_intent_in = 1;\n@@ -6223,6 +6224,36 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t\t sym->name, &e->where);\n       return FAILURE;\n     }\n+    \n+  if (!code->expr3)\n+    {\n+      /* Add default initializer for those derived types that need them.  */\n+      if (e->ts.type == BT_DERIVED\n+\t  && (init_e = gfc_default_initializer (&e->ts)))\n+\t{\n+\t  gfc_code *init_st = gfc_get_code ();\n+\t  init_st->loc = code->loc;\n+\t  init_st->op = EXEC_INIT_ASSIGN;\n+\t  init_st->expr1 = gfc_expr_to_initialize (e);\n+\t  init_st->expr2 = init_e;\n+\t  init_st->next = code->next;\n+\t  code->next = init_st;\n+\t}\n+      else if (e->ts.type == BT_CLASS\n+\t       && ((code->ext.alloc.ts.type == BT_UNKNOWN\n+\t\t    && (init_e = gfc_default_initializer (&e->ts.u.derived->components->ts)))\n+\t\t   || (code->ext.alloc.ts.type == BT_DERIVED\n+\t\t       && (init_e = gfc_default_initializer (&code->ext.alloc.ts)))))\n+\t{\n+\t  gfc_code *init_st = gfc_get_code ();\n+\t  init_st->loc = code->loc;\n+\t  init_st->op = EXEC_INIT_ASSIGN;\n+\t  init_st->expr1 = gfc_expr_to_initialize (e);\n+\t  init_st->expr2 = init_e;\n+\t  init_st->next = code->next;\n+\t  code->next = init_st;\n+\t}\n+    }\n \n   if (pointer || dimension == 0)\n     return SUCCESS;"}, {"sha": "b5091a9e4d5880d74be8f6d1130ea26388a3d0bd", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7adac79a3d5420b9683e9fe38b2b526f26c2c225", "patch": "@@ -5519,6 +5519,25 @@ gfc_trans_class_assign (gfc_code *code)\n   gfc_expr *rhs;\n \n   gfc_start_block (&block);\n+  \n+  if (code->op == EXEC_INIT_ASSIGN)\n+    {\n+      /* Special case for initializing a CLASS variable on allocation.\n+\t A MEMCPY is needed to copy the full data of the dynamic type,\n+\t which may be different from the declared type.  */\n+      gfc_se dst,src;\n+      tree memsz;\n+      gfc_init_se (&dst, NULL);\n+      gfc_init_se (&src, NULL);\n+      gfc_add_component_ref (code->expr1, \"$data\");\n+      gfc_conv_expr (&dst, code->expr1);\n+      gfc_conv_expr (&src, code->expr2);\n+      gfc_add_block_to_block (&block, &src.pre);\n+      memsz = TYPE_SIZE_UNIT (gfc_typenode_for_spec (&code->expr2->ts));\n+      tmp = gfc_build_memcpy_call (dst.expr, src.expr, memsz);\n+      gfc_add_expr_to_block (&block, tmp);\n+      return gfc_finish_block (&block);\n+    }\n \n   if (code->expr2->ts.type != BT_CLASS)\n     {"}, {"sha": "dd3d10db5d65e0174b426b6a4ed2e65acf46ac28", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=7adac79a3d5420b9683e9fe38b2b526f26c2c225", "patch": "@@ -4018,7 +4018,7 @@ tree\n gfc_trans_allocate (gfc_code * code)\n {\n   gfc_alloc *al;\n-  gfc_expr *expr, *init_e;\n+  gfc_expr *expr;\n   gfc_se se;\n   tree tmp;\n   tree parm;\n@@ -4162,28 +4162,6 @@ gfc_trans_allocate (gfc_code * code)\n \t  gfc_free_expr (rhs);\n \t  gfc_add_expr_to_block (&block, tmp);\n \t}\n-      /* Default initializer for CLASS variables.  */\n-      else if (al->expr->ts.type == BT_CLASS\n-\t       && code->ext.alloc.ts.type == BT_DERIVED\n-\t       && (init_e = gfc_default_initializer (&code->ext.alloc.ts)))\n-\t{\n-\t  gfc_se dst,src;\n-\t  gfc_init_se (&dst, NULL);\n-\t  gfc_init_se (&src, NULL);\n-\t  gfc_conv_expr (&dst, expr);\n-\t  gfc_conv_expr (&src, init_e);\n-\t  gfc_add_block_to_block (&block, &src.pre);\n-\t  tmp = gfc_build_memcpy_call (dst.expr, src.expr, memsz);\n-\t  gfc_add_expr_to_block (&block, tmp);\n-\t}\n-      /* Add default initializer for those derived types that need them.  */\n-      else if (expr->ts.type == BT_DERIVED\n-\t       && (init_e = gfc_default_initializer (&expr->ts)))\n-\t{\n-\t  tmp = gfc_trans_assignment (gfc_expr_to_initialize (expr),\n-\t\t\t\t      init_e, true);\n-\t  gfc_add_expr_to_block (&block, tmp);\n-\t}\n \n       /* Allocation of CLASS entities.  */\n       gfc_free_expr (expr);"}, {"sha": "a5bb641878063cc7e7315a1fb9839d98ae65aa49", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=7adac79a3d5420b9683e9fe38b2b526f26c2c225", "patch": "@@ -1098,7 +1098,10 @@ gfc_trans_code (gfc_code * code)\n \t  break;\n \n \tcase EXEC_INIT_ASSIGN:\n-\t  res = gfc_trans_init_assign (code);\n+\t  if (code->expr1->ts.type == BT_CLASS)\n+\t    res = gfc_trans_class_assign (code);\n+\t  else\n+\t    res = gfc_trans_init_assign (code);\n \t  break;\n \n \tcase EXEC_CONTINUE:"}, {"sha": "a2d83441672d5c34ee643ecbdda42bb6ae9cb264", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7adac79a3d5420b9683e9fe38b2b526f26c2c225", "patch": "@@ -1,3 +1,8 @@\n+2010-01-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42888\n+\t* gfortran.dg/allocate_derived_2.f90: New test.\n+\n 2010-01-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/42898"}, {"sha": "8d01224f15e6b3247b3d1055e0bc355cb217425c", "filename": "gcc/testsuite/gfortran.dg/allocate_derived_2.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adac79a3d5420b9683e9fe38b2b526f26c2c225/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_2.f90?ref=7adac79a3d5420b9683e9fe38b2b526f26c2c225", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+!\n+! PR 42888: [4.5 Regression] ICE in fold_convert_loc, at fold-const.c:2670\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+\n+  implicit none\n+\n+  type t\n+     integer :: X = -999.0   ! Real initializer!\n+  end type t\n+\n+  type(t), allocatable :: x\n+  class(t), allocatable :: y,z\n+\n+  allocate (x)\n+  allocate (y)\n+  allocate (t::z)\n+\n+end"}]}