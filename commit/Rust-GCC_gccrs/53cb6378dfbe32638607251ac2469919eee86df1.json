{"sha": "53cb6378dfbe32638607251ac2469919eee86df1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjYjYzNzhkZmJlMzI2Mzg2MDcyNTFhYzI0Njk5MTllZWU4NmRmMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-21T10:53:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-21T10:53:40Z"}, "message": "Add missing int_cst_rangeN checks to tree-vrp.c\n\nThe BIT_AND_EXPR handling in extract_range_from_binary_expr_1\nwas using value_range_constant_singleton without first checking\nwhether the range was a constant.  The earlier handling was correctly\nguarded:\n\n\t  /* If either input range contains only non-negative values\n\t     we can truncate the result range maximum to the respective\n\t     maximum of the input range.  */\n\t  if (int_cst_range0 && tree_int_cst_sgn (vr0.min) >= 0)\n\t    wmax = wi::min (wmax, vr0.max, TYPE_SIGN (expr_type));\n\t  if (int_cst_range1 && tree_int_cst_sgn (vr1.min) >= 0)\n\t    wmax = wi::min (wmax, vr1.max, TYPE_SIGN (expr_type));\n\nso this patch uses the same guards again.\n\nExisting tests showed the need for this once polynomial constants\nare added.\n\n2017-09-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Check\n\tint_cst_rangeN before calling value_range_constant_singleton (&vrN).\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253054", "tree": {"sha": "59b4e3115a78832a2f6d4c77bc03dc1469d6a21d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b4e3115a78832a2f6d4c77bc03dc1469d6a21d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cb6378dfbe32638607251ac2469919eee86df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cb6378dfbe32638607251ac2469919eee86df1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cb6378dfbe32638607251ac2469919eee86df1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cb6378dfbe32638607251ac2469919eee86df1/comments", "author": null, "committer": null, "parents": [{"sha": "2e1dd13741b328e317e511e7930738473e4463ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1dd13741b328e317e511e7930738473e4463ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e1dd13741b328e317e511e7930738473e4463ac"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "3861e6603e31d02f164e8bd12ae9797b91d42412", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cb6378dfbe32638607251ac2469919eee86df1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cb6378dfbe32638607251ac2469919eee86df1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53cb6378dfbe32638607251ac2469919eee86df1", "patch": "@@ -1,3 +1,10 @@\n+2017-09-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Check\n+\tint_cst_rangeN before calling value_range_constant_singleton (&vrN).\n+\n 2017-09-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71351"}, {"sha": "1d45851ea924ddfdd5cc190e6a24fcf69149b294", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cb6378dfbe32638607251ac2469919eee86df1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cb6378dfbe32638607251ac2469919eee86df1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=53cb6378dfbe32638607251ac2469919eee86df1", "patch": "@@ -2930,9 +2930,11 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t\t= wi::set_bit_in_zero (TYPE_PRECISION (expr_type) - 1,\n \t\t\t\t       TYPE_PRECISION (expr_type));\n \t      if (!TYPE_UNSIGNED (expr_type)\n-\t\t  && ((value_range_constant_singleton (&vr0)\n+\t\t  && ((int_cst_range0\n+\t\t       && value_range_constant_singleton (&vr0)\n \t\t       && !wi::cmps (vr0.min, sign_bit))\n-\t\t      || (value_range_constant_singleton (&vr1)\n+\t\t      || (int_cst_range1\n+\t\t\t  && value_range_constant_singleton (&vr1)\n \t\t\t  && !wi::cmps (vr1.min, sign_bit))))\n \t\t{\n \t\t  min = TYPE_MIN_VALUE (expr_type);"}]}