{"sha": "5339d3ead98fb1605ce7a4bf46d2361d1707efdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMzOWQzZWFkOThmYjE2MDVjZTdhNGJmNDZkMjM2MWQxNzA3ZWZkYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-02-22T01:10:29Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-22T01:10:29Z"}, "message": "i386.c (classify_argument): Don't allow COImode and OImode.\n\n2008-02-21  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (classify_argument): Don't allow COImode\n\tand OImode.\n\t(function_arg_advance_32): Don't allow OImode.\n\t(function_arg_32): Likewise.\n\t(function_value_32): Likewise.\n\t(return_in_memory_32): Likewise.\n\t(function_arg_64): Remove OImode comment.\n\nFrom-SVN: r144367", "tree": {"sha": "75c2c64d49f86ab7cbe036093e0713db3e080ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c2c64d49f86ab7cbe036093e0713db3e080ac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5339d3ead98fb1605ce7a4bf46d2361d1707efdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5339d3ead98fb1605ce7a4bf46d2361d1707efdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5339d3ead98fb1605ce7a4bf46d2361d1707efdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5339d3ead98fb1605ce7a4bf46d2361d1707efdc/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f161e1584d519c1ee9d92d5694d04e98f84b16e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f161e1584d519c1ee9d92d5694d04e98f84b16e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f161e1584d519c1ee9d92d5694d04e98f84b16e9"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "1961e74811c6fafd91ac2672da2d9758924fd1ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5339d3ead98fb1605ce7a4bf46d2361d1707efdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5339d3ead98fb1605ce7a4bf46d2361d1707efdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5339d3ead98fb1605ce7a4bf46d2361d1707efdc", "patch": "@@ -1,3 +1,13 @@\n+2008-02-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (classify_argument): Don't allow COImode\n+\tand OImode.\n+\t(function_arg_advance_32): Don't allow OImode.\n+\t(function_arg_32): Likewise.\n+\t(function_value_32): Likewise.\n+\t(return_in_memory_32): Likewise.\n+\t(function_arg_64): Remove OImode comment.\n+\n 2008-02-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39261"}, {"sha": "120ab156fb15dae1a5c7d27452b3083b61bb8bfe", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5339d3ead98fb1605ce7a4bf46d2361d1707efdc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5339d3ead98fb1605ce7a4bf46d2361d1707efdc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5339d3ead98fb1605ce7a4bf46d2361d1707efdc", "patch": "@@ -5115,9 +5115,11 @@ classify_argument (enum machine_mode mode, const_tree type,\n     case TImode:\n       classes[0] = classes[1] = X86_64_INTEGER_CLASS;\n       return 2;\n-    case CTImode:\n     case COImode:\n     case OImode:\n+      /* OImode shouldn't be used directly.  */\n+      gcc_unreachable ();\n+    case CTImode:\n       return 0;\n     case SFmode:\n       if (!(bit_offset % 64))\n@@ -5468,6 +5470,10 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t}\n       break;\n \n+    case OImode:\n+      /* OImode shouldn't be used directly.  */\n+      gcc_unreachable ();\n+\n     case DFmode:\n       if (cum->float_in_sse < 2)\n \tbreak;\n@@ -5476,7 +5482,6 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \tbreak;\n       /* FALLTHRU */\n \n-    case OImode:\n     case V8SFmode:\n     case V8SImode:\n     case V32QImode:\n@@ -5673,7 +5678,9 @@ function_arg_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       break;\n \n     case OImode:\n-      /* In 32bit, we pass OImode in ymm registers.  */\n+      /* OImode shouldn't be used directly.  */\n+      gcc_unreachable ();\n+\n     case V8SFmode:\n     case V8SImode:\n     case V32QImode:\n@@ -5738,9 +5745,6 @@ function_arg_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V16HImode:\n     case V4DFmode:\n     case V4DImode:\n-      /* In 64bit, we pass TImode in interger registers and OImode on\n-\t stack.  */\n-\n       /* Unnamed 256bit vector mode parameters are passed on stack.  */\n       if (!named)\n \treturn NULL;\n@@ -6020,8 +6024,7 @@ function_value_32 (enum machine_mode orig_mode, enum machine_mode mode,\n     regno = TARGET_SSE ? FIRST_SSE_REG : 0;\n \n   /* 32-byte vector modes in %ymm0.   */\n-  else if (mode == OImode\n-\t   || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 32))\n+  else if (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 32)\n     regno = TARGET_AVX ? FIRST_SSE_REG : 0;\n \n   /* Floating point return values in %st(0) (unless -mno-fp-ret-in-387).  */\n@@ -6041,6 +6044,9 @@ function_value_32 (enum machine_mode orig_mode, enum machine_mode mode,\n \tregno = FIRST_SSE_REG;\n     }\n \n+  /* OImode shouldn't be used directly.  */\n+  gcc_assert (mode != OImode);\n+\n   return gen_rtx_REG (orig_mode, regno);\n }\n \n@@ -6163,7 +6169,7 @@ return_in_memory_32 (const_tree type, enum machine_mode mode)\n   if (MS_AGGREGATE_RETURN && AGGREGATE_TYPE_P (type) && size <= 8)\n     return 0;\n \n-  if (VECTOR_MODE_P (mode) || mode == TImode || mode == OImode)\n+  if (VECTOR_MODE_P (mode) || mode == TImode)\n     {\n       /* User-created vectors small enough to fit in EAX.  */\n       if (size < 8)\n@@ -6188,6 +6194,10 @@ return_in_memory_32 (const_tree type, enum machine_mode mode)\n \n   if (size > 12)\n     return 1;\n+\n+  /* OImode shouldn't be used directly.  */\n+  gcc_assert (mode != OImode);\n+\n   return 0;\n }\n "}]}