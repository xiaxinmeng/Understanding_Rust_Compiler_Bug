{"sha": "fe2771b291c2c7c0ac37b75ec5b160937524b60c", "node_id": "C_kwDOANBUbNoAKGZlMjc3MWIyOTFjMmM3YzBhYzM3Yjc1ZWM1YjE2MDkzNzUyNGI2MGM", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-26T17:26:01Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-26T17:26:01Z"}, "message": "Fortran: Fix associated intrinsic with assumed rank [PR101334]\n\nASSOCIATE (ptr, tgt) takes as first argument also an assumed-rank array;\nhowever, using it together with a tgt (required to be non assumed rank)\nhad issues for both scalar and nonscalar tgt.\n\n\tPR fortran/101334\ngcc/fortran/ChangeLog:\n\n\t* trans-intrinsic.c (gfc_conv_associated): Support assumed-rank\n\t'pointer' with scalar/array 'target' argument.\n\nlibgfortran/ChangeLog:\n\n\t* intrinsics/associated.c (associated): Also check for same rank.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/associated_assumed_rank.f90: New test.", "tree": {"sha": "7e067547374db3f7fc794ba76902bd17d056b930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e067547374db3f7fc794ba76902bd17d056b930"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe2771b291c2c7c0ac37b75ec5b160937524b60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2771b291c2c7c0ac37b75ec5b160937524b60c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2771b291c2c7c0ac37b75ec5b160937524b60c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2771b291c2c7c0ac37b75ec5b160937524b60c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98e12c40bf3b2d37c3d9acb914fef495c704da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98e12c40bf3b2d37c3d9acb914fef495c704da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98e12c40bf3b2d37c3d9acb914fef495c704da5"}], "stats": {"total": 159, "additions": 149, "deletions": 10}, "files": [{"sha": "60e94f0bdc242514075bbb449b61527900b732aa", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2771b291c2c7c0ac37b75ec5b160937524b60c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2771b291c2c7c0ac37b75ec5b160937524b60c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=fe2771b291c2c7c0ac37b75ec5b160937524b60c", "patch": "@@ -8974,7 +8974,7 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n   gfc_se arg2se;\n   tree tmp2;\n   tree tmp;\n-  tree nonzero_arraylen;\n+  tree nonzero_arraylen = NULL_TREE;\n   gfc_ss *ss;\n   bool scalar;\n \n@@ -9074,14 +9074,16 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \t    {\n \t      tmp = gfc_conv_descriptor_rank (arg1se.expr);\n \t      tmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\t     TREE_TYPE (tmp), tmp, gfc_index_one_node);\n+\t\t\t\t     TREE_TYPE (tmp), tmp,\n+\t\t\t\t     build_int_cst (TREE_TYPE (tmp), 1));\n \t    }\n \t  else\n \t    tmp = gfc_rank_cst[arg1->expr->rank - 1];\n \t  tmp = gfc_conv_descriptor_stride_get (arg1se.expr, tmp);\n-\t  nonzero_arraylen = fold_build2_loc (input_location, NE_EXPR,\n-\t\t\t\t\t      logical_type_node, tmp,\n-\t\t\t\t\t      build_int_cst (TREE_TYPE (tmp), 0));\n+\t  if (arg2->expr->rank != 0)\n+\t    nonzero_arraylen = fold_build2_loc (input_location, NE_EXPR,\n+\t\t\t\t\t\tlogical_type_node, tmp,\n+\t\t\t\t\t\tbuild_int_cst (TREE_TYPE (tmp), 0));\n \n \t  /* A pointer to an array, call library function _gfor_associated.  */\n \t  arg1se.want_pointer = 1;\n@@ -9091,16 +9093,26 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \n \t  arg2se.want_pointer = 1;\n \t  arg2se.force_no_tmp = 1;\n-\t  gfc_conv_expr_descriptor (&arg2se, arg2->expr);\n+\t  if (arg2->expr->rank != 0)\n+\t    gfc_conv_expr_descriptor (&arg2se, arg2->expr);\n+\t  else\n+\t    {\n+\t      gfc_conv_expr (&arg2se, arg2->expr);\n+\t      arg2se.expr\n+\t\t= gfc_conv_scalar_to_descriptor (&arg2se, arg2se.expr,\n+\t\t\t\t\t\t gfc_expr_attr (arg2->expr));\n+\t      arg2se.expr = gfc_build_addr_expr (NULL_TREE, arg2se.expr);\n+\t    }\n \t  gfc_add_block_to_block (&se->pre, &arg2se.pre);\n \t  gfc_add_block_to_block (&se->post, &arg2se.post);\n \t  se->expr = build_call_expr_loc (input_location,\n \t\t\t\t      gfor_fndecl_associated, 2,\n \t\t\t\t      arg1se.expr, arg2se.expr);\n \t  se->expr = convert (logical_type_node, se->expr);\n-\t  se->expr = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n-\t\t\t\t      logical_type_node, se->expr,\n-\t\t\t\t      nonzero_arraylen);\n+\t  if (arg2->expr->rank != 0)\n+\t    se->expr = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n+\t\t\t\t\tlogical_type_node, se->expr,\n+\t\t\t\t\tnonzero_arraylen);\n         }\n \n       /* If target is present zero character length pointers cannot"}, {"sha": "8bb7ea158c9b80dd1258b94c8de2cfdfbb9a03d9", "filename": "gcc/testsuite/gfortran.dg/associated_assumed_rank.f90", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2771b291c2c7c0ac37b75ec5b160937524b60c/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_assumed_rank.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2771b291c2c7c0ac37b75ec5b160937524b60c/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_assumed_rank.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_assumed_rank.f90?ref=fe2771b291c2c7c0ac37b75ec5b160937524b60c", "patch": "@@ -0,0 +1,126 @@\n+! { dg-do run }\n+\n+! PR fortran/101334\n+\n+implicit none (type, external)\n+real, target :: AT(10,10), BT\n+real, contiguous, pointer :: A(:,:)\n+real, pointer :: B\n+real, pointer :: AP(:,:), BP\n+real, pointer :: CP(:), DP(:,:), D, EP(:)\n+\n+call test_char()\n+\n+A => AT\n+B => BT\n+\n+AP => A\n+BP => B\n+call foo(AP,B, A, 1) ! OK - associated\n+call foo(BP,B, A, 2) !  OK - associated\n+\n+! Those are all not associated:\n+\n+AP => null()\n+BP => null()\n+call foo(AP, B, A, 3) ! LHS not associated\n+call foo(BP, B, A, 4) ! LHS not associated\n+\n+DP => null()\n+D => null()\n+call foo(AP, B, DP, 5) ! LHS+RHS not associated\n+call foo(BP, D, A, 6)  ! LHS+RHS not associated\n+\n+AP => A\n+BP => B\n+call foo(AP, B, DP, 7) ! RHS not associated\n+call foo(BP, D, A, 8)  ! RHS not associated\n+\n+CP(1:size(A)) => A\n+call foo(CP, B, A, 9)  ! Shape (rank) differs\n+\n+AP => A(2:,:)\n+call foo(AP, B, A, 10)  ! Shape differs\n+\n+AP => A(:,2:)\n+call foo(AP, B, A, 11)  ! Shape differs\n+\n+AP(10:,10:) => A\n+call foo(AP, B, A, 12)  ! OK - bounds different, shape same\n+\n+CP => AT(1:-1, 5)\n+EP => AT(1:-1, 5)        ! Case(i) + case(iv)\n+call foo2(CP, EP)  ! CP associated - but CP not associated with EP\n+contains\n+subroutine foo2(p, lpd)\n+  implicit none (type, external)\n+  real, pointer :: p(..)    ! \"pointer\"\n+  real, pointer :: lpd(:) ! array \"target\"\n+  if (.not.associated(p)) stop 18 ! OK - associated \n+  if (associated(p, lpd)) stop 19 ! .. but for zero-sized array\n+end\n+\n+subroutine foo(p, lp, lpd, cnt)\n+  implicit none (type, external)\n+  real, pointer :: p(..)    ! \"pointer\"\n+  real, pointer :: lp       ! scalar \"target\"\n+  real, pointer :: lpd(:,:) ! array \"target\"\n+  integer, value :: cnt\n+\n+  if (cnt == 1) then\n+    if (.not. associated(p, lpd)) stop 1  ! OK\n+  elseif (cnt == 2) then\n+    if (.not. associated(p, lp)) stop 2   ! OK\n+  elseif (cnt == 3) then\n+    if (associated(p, lpd)) stop 3 ! LHS NULL ptr\n+    if (associated(p)) stop 4      ! LHS NULL ptr\n+  elseif (cnt == 4) then\n+    if (associated(p, lp)) stop 5  ! LHS NULL ptr\n+    if (associated(p)) stop 6      ! LHS NULL ptr\n+  elseif (cnt == 5) then\n+    if (associated(p, lpd)) stop 7 ! LHS+RHS NULL ptr\n+    if (associated(p)) stop 8      ! LHS+RHS NULL ptr\n+  elseif (cnt == 6) then\n+    if (associated(p, lp)) stop 9  ! LHS+RHS NULL ptr\n+    if (associated(p)) stop 10      ! LHS+RHS NULL ptr\n+  elseif (cnt == 7) then\n+    if (associated(p, lpd)) stop 11 ! RHS NULL ptr\n+  elseif (cnt == 8) then\n+    if (associated(p, lp)) stop 12  ! RHS NULL ptr\n+  elseif (cnt == 9) then\n+    if (associated(p, lpd)) stop 13 ! rank differs\n+    if (associated(p, lp)) stop 14  ! rank differs\n+  elseif (cnt == 10) then\n+    if (associated(p, lpd)) stop 15 ! shape differs\n+  elseif (cnt == 11) then\n+    if (associated(p, lpd)) stop 16 ! shape differs\n+  elseif (cnt == 12) then\n+    if (.not.associated(p, lpd)) stop 17 ! OK - shape same, lbound different\n+  else\n+    stop 99\n+  endif\n+end \n+subroutine test_char()\n+  character(len=0), target :: str0\n+  character(len=2), target :: str2\n+  character(len=:), pointer :: ptr\n+  ptr => str0\n+  call test_char2(ptr, str0)\n+  ptr => str2\n+  call test_char2(ptr, str2)\n+end\n+subroutine test_char2(x,y)\n+  character(len=:), pointer :: x\n+  character(len=*), target :: y\n+  if (len(y) == 0) then\n+    if (len(x) /= 0) stop 20\n+    if (.not. associated(x)) stop 21\n+    if (associated(x, y)) stop 22\n+  else\n+    if (len(y) /= 2) stop 23\n+    if (len(x) /= 2) stop 24\n+    if (.not. associated(x)) stop 25\n+    if (.not. associated(x, y)) stop 26\n+  end if\n+end\n+end"}, {"sha": "60c88ff902178d876260327a74f02d9996194374", "filename": "libgfortran/intrinsics/associated.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2771b291c2c7c0ac37b75ec5b160937524b60c/libgfortran%2Fintrinsics%2Fassociated.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2771b291c2c7c0ac37b75ec5b160937524b60c/libgfortran%2Fintrinsics%2Fassociated.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fassociated.c?ref=fe2771b291c2c7c0ac37b75ec5b160937524b60c", "patch": "@@ -41,8 +41,9 @@ associated (const gfc_array_void *pointer, const gfc_array_void *target)\n     return 0;\n   if (GFC_DESCRIPTOR_DTYPE (pointer).type != GFC_DESCRIPTOR_DTYPE (target).type)\n     return 0;\n-\n   rank = GFC_DESCRIPTOR_RANK (pointer);\n+  if (rank != GFC_DESCRIPTOR_RANK (target))\n+    return 0;\n   for (n = 0; n < rank; n++)\n     {\n       long extent;"}]}