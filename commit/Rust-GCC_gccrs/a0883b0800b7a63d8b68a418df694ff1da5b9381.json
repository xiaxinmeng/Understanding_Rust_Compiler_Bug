{"sha": "a0883b0800b7a63d8b68a418df694ff1da5b9381", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA4ODNiMDgwMGI3YTYzZDhiNjhhNDE4ZGY2OTRmZjFkYTViOTM4MQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-08-10T13:49:12Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-08-10T13:49:12Z"}, "message": "re PR target/72853 (gcc/testsuite/gcc.c-torture/execute/20021120-1.c generates incorrect stxssp op with -mcpu=power9)\n\n[gcc]\n2016-08-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/72853\n\t* config/rs6000/rs6000.c (mem_operand_ds_form): Add check for op\n\tbeing an offsettable address.\n\n[gcc/testsuite]\n2016-08-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/72853\n\t* gcc.target/powerpc/pr72853.c: New test.\n\nFrom-SVN: r239325", "tree": {"sha": "1bedec8a157f80ab59b51f60369161041fd650b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bedec8a157f80ab59b51f60369161041fd650b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0883b0800b7a63d8b68a418df694ff1da5b9381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0883b0800b7a63d8b68a418df694ff1da5b9381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0883b0800b7a63d8b68a418df694ff1da5b9381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0883b0800b7a63d8b68a418df694ff1da5b9381/comments", "author": null, "committer": null, "parents": [{"sha": "a266236e856aec790b1757064eccff876fad4703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a266236e856aec790b1757064eccff876fad4703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a266236e856aec790b1757064eccff876fad4703"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "afa402028d7066caa6bf37b2e188a80184a03f11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0883b0800b7a63d8b68a418df694ff1da5b9381/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0883b0800b7a63d8b68a418df694ff1da5b9381/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0883b0800b7a63d8b68a418df694ff1da5b9381", "patch": "@@ -1,3 +1,9 @@\n+2016-08-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/72853\n+\t* config/rs6000/rs6000.c (mem_operand_ds_form): Add check for op\n+\tbeing an offsettable address.\n+\n 2016-08-10  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/58306"}, {"sha": "3c85dd1817496cafae9cdd4af6be8274b9a8363b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0883b0800b7a63d8b68a418df694ff1da5b9381/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0883b0800b7a63d8b68a418df694ff1da5b9381/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a0883b0800b7a63d8b68a418df694ff1da5b9381", "patch": "@@ -7739,6 +7739,9 @@ mem_operand_ds_form (rtx op, machine_mode mode)\n   int extra;\n   rtx addr = XEXP (op, 0);\n \n+  if (!offsettable_address_p (false, mode, addr))\n+    return false;\n+\n   op = address_offset (addr);\n   if (op == NULL_RTX)\n     return true;"}, {"sha": "54e63dfd4358bd6a92ea37109bae109e459e4ae9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0883b0800b7a63d8b68a418df694ff1da5b9381/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0883b0800b7a63d8b68a418df694ff1da5b9381/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0883b0800b7a63d8b68a418df694ff1da5b9381", "patch": "@@ -1,3 +1,8 @@\n+2016-08-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/72853\n+\t* gcc.target/powerpc/pr72853.c: New test.\n+\n 2016-08-10  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/58306"}, {"sha": "8eae7d4a41d922e969a2d025d679d5a71893f466", "filename": "gcc/testsuite/gcc.target/powerpc/pr72853.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0883b0800b7a63d8b68a418df694ff1da5b9381/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72853.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0883b0800b7a63d8b68a418df694ff1da5b9381/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72853.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72853.c?ref=a0883b0800b7a63d8b68a418df694ff1da5b9381", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O3 -mupper-regs-df -mupper-regs-sf -funroll-loops\" } */\n+\n+/* derived from 20021120-1.c, compiled for -mcpu=power9.  */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double gd[32];\n+volatile float gf[32];\n+\n+void\n+foo (int n)\n+{\n+  double d00, d10, d20, d30, d01, d11, d21, d31, d02, d12, d22, d32, d03, d13,\n+    d23, d33, d04, d14, d24, d34, d05, d15, d25, d35, d06, d16, d26, d36, d07,\n+    d17, d27, d37;\n+  float f00, f10, f20, f30, f01, f11, f21, f31, f02, f12, f22, f32, f03, f13,\n+    f23, f33, f04, f14, f24, f34, f05, f15, f25, f35, f06, f16, f26, f36, f07,\n+    f17, f27, f37;\n+  volatile double *pd;\n+  volatile float *pf;\n+  int i;\n+\n+  pd = gd;\n+  d00 = *(pd++), d10 = *(pd++), d20 = *(pd++), d30 = *(pd++), d01 =\n+    *(pd++), d11 = *(pd++), d21 = *(pd++), d31 = *(pd++), d02 = *(pd++), d12 =\n+    *(pd++), d22 = *(pd++), d32 = *(pd++), d03 = *(pd++), d13 = *(pd++), d23 =\n+    *(pd++), d33 = *(pd++), d04 = *(pd++), d14 = *(pd++), d24 = *(pd++), d34 =\n+    *(pd++), d05 = *(pd++), d15 = *(pd++), d25 = *(pd++), d35 = *(pd++), d06 =\n+    *(pd++), d16 = *(pd++), d26 = *(pd++), d36 = *(pd++), d07 = *(pd++), d17 =\n+    *(pd++), d27 = *(pd++), d37 = *(pd++);\n+  for (i = 0; i < n; i++)\n+    {\n+      pf = gf;\n+      f00 = *(pf++), f10 = *(pf++), f20 = *(pf++), f30 = *(pf++), f01 =\n+\t*(pf++), f11 = *(pf++), f21 = *(pf++), f31 = *(pf++), f02 =\n+\t*(pf++), f12 = *(pf++), f22 = *(pf++), f32 = *(pf++), f03 =\n+\t*(pf++), f13 = *(pf++), f23 = *(pf++), f33 = *(pf++), f04 =\n+\t*(pf++), f14 = *(pf++), f24 = *(pf++), f34 = *(pf++), f05 =\n+\t*(pf++), f15 = *(pf++), f25 = *(pf++), f35 = *(pf++), f06 =\n+\t*(pf++), f16 = *(pf++), f26 = *(pf++), f36 = *(pf++), f07 =\n+\t*(pf++), f17 = *(pf++), f27 = *(pf++), f37 = *(pf++);\n+      pd = gd;\n+      d00 += *(pd++), d10 += *(pd++), d20 += *(pd++), d30 += *(pd++), d01 +=\n+\t*(pd++), d11 += *(pd++), d21 += *(pd++), d31 += *(pd++), d02 +=\n+\t*(pd++), d12 += *(pd++), d22 += *(pd++), d32 += *(pd++), d03 +=\n+\t*(pd++), d13 += *(pd++), d23 += *(pd++), d33 += *(pd++), d04 +=\n+\t*(pd++), d14 += *(pd++), d24 += *(pd++), d34 += *(pd++), d05 +=\n+\t*(pd++), d15 += *(pd++), d25 += *(pd++), d35 += *(pd++), d06 +=\n+\t*(pd++), d16 += *(pd++), d26 += *(pd++), d36 += *(pd++), d07 +=\n+\t*(pd++), d17 += *(pd++), d27 += *(pd++), d37 += *(pd++);\n+      pd = gd;\n+      d00 += *(pd++), d10 += *(pd++), d20 += *(pd++), d30 += *(pd++), d01 +=\n+\t*(pd++), d11 += *(pd++), d21 += *(pd++), d31 += *(pd++), d02 +=\n+\t*(pd++), d12 += *(pd++), d22 += *(pd++), d32 += *(pd++), d03 +=\n+\t*(pd++), d13 += *(pd++), d23 += *(pd++), d33 += *(pd++), d04 +=\n+\t*(pd++), d14 += *(pd++), d24 += *(pd++), d34 += *(pd++), d05 +=\n+\t*(pd++), d15 += *(pd++), d25 += *(pd++), d35 += *(pd++), d06 +=\n+\t*(pd++), d16 += *(pd++), d26 += *(pd++), d36 += *(pd++), d07 +=\n+\t*(pd++), d17 += *(pd++), d27 += *(pd++), d37 += *(pd++);\n+      pd = gd;\n+      d00 += *(pd++), d10 += *(pd++), d20 += *(pd++), d30 += *(pd++), d01 +=\n+\t*(pd++), d11 += *(pd++), d21 += *(pd++), d31 += *(pd++), d02 +=\n+\t*(pd++), d12 += *(pd++), d22 += *(pd++), d32 += *(pd++), d03 +=\n+\t*(pd++), d13 += *(pd++), d23 += *(pd++), d33 += *(pd++), d04 +=\n+\t*(pd++), d14 += *(pd++), d24 += *(pd++), d34 += *(pd++), d05 +=\n+\t*(pd++), d15 += *(pd++), d25 += *(pd++), d35 += *(pd++), d06 +=\n+\t*(pd++), d16 += *(pd++), d26 += *(pd++), d36 += *(pd++), d07 +=\n+\t*(pd++), d17 += *(pd++), d27 += *(pd++), d37 += *(pd++);\n+      pf = gf;\n+      *(pf++) = f00, *(pf++) = f10, *(pf++) = f20, *(pf++) = f30, *(pf++) =\n+\tf01, *(pf++) = f11, *(pf++) = f21, *(pf++) = f31, *(pf++) =\n+\tf02, *(pf++) = f12, *(pf++) = f22, *(pf++) = f32, *(pf++) =\n+\tf03, *(pf++) = f13, *(pf++) = f23, *(pf++) = f33, *(pf++) =\n+\tf04, *(pf++) = f14, *(pf++) = f24, *(pf++) = f34, *(pf++) =\n+\tf05, *(pf++) = f15, *(pf++) = f25, *(pf++) = f35, *(pf++) =\n+\tf06, *(pf++) = f16, *(pf++) = f26, *(pf++) = f36, *(pf++) =\n+\tf07, *(pf++) = f17, *(pf++) = f27, *(pf++) = f37;\n+    }\n+  pd = gd;\n+  *(pd++) = d00, *(pd++) = d10, *(pd++) = d20, *(pd++) = d30, *(pd++) =\n+    d01, *(pd++) = d11, *(pd++) = d21, *(pd++) = d31, *(pd++) = d02, *(pd++) =\n+    d12, *(pd++) = d22, *(pd++) = d32, *(pd++) = d03, *(pd++) = d13, *(pd++) =\n+    d23, *(pd++) = d33, *(pd++) = d04, *(pd++) = d14, *(pd++) = d24, *(pd++) =\n+    d34, *(pd++) = d05, *(pd++) = d15, *(pd++) = d25, *(pd++) = d35, *(pd++) =\n+    d06, *(pd++) = d16, *(pd++) = d26, *(pd++) = d36, *(pd++) = d07, *(pd++) =\n+    d17, *(pd++) = d27, *(pd++) = d37;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; i++)\n+    gd[i] = i, gf[i] = i;\n+  foo (1);\n+  for (i = 0; i < 32; i++)\n+    if (gd[i] != i * 4 || gf[i] != i)\n+      abort ();\n+  exit (0);\n+}\n+\n+/* { dg-final { scan-assembler-not \"stxsd \\[0-9\\]+,\\[0-9\\]+,\\[0-9\\]\"  } } */"}]}