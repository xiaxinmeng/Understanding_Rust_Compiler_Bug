{"sha": "a2c6e7f26ec122124c91ca215a285da69d19fac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjNmU3ZjI2ZWMxMjIxMjRjOTFjYTIxNWEyODVkYTY5ZDE5ZmFjOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-29T20:54:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-29T20:54:56Z"}, "message": "Implement P0001R1 - C++17 removal of register storage class specifier c-family/\n\n\tImplement P0001R1 - C++17 removal of register storage class specifier\nc-family/\n\t* c.opt (Wregister): New warning.\n\t* c-opts.c (c_common_post_options): Enable -Wregister by\n\tdefault for C++17.\ncp/\n\t* decl.c (cp_finish_decl): Diagnose register storage class\n\ton vars except when used in GNU global or local register variable\n\textension.\n\t(grokdeclarator): Diagnose register storage class on parameters.\n\t* except.c (expand_start_catch_block): Set DECL_REGISTER only\n\tafter cp_finish_decl call.\ntestsuite/\n\t* c-c++-common/Wvarargs-2.c (foo1): Except new warning for C++17.\n\t* c-c++-common/vector-subscript-2.c (vf): Expect new error for\n\tC++17.\n\t* c-c++-common/vector-subscript-5.c (foo): Don't use register\n\tkeyword if not __SSE2__.\n\t* c-c++-common/Wvarargs.c (foo1, foo3): Expect new warnings for\n\tC++17.\n\t* g++.dg/compat/struct-layout-1_generate.c (iterative_hash): Remove\n\tregister keywords.\n\t* g++.dg/eh/pr29166.C: Add -Wno-register option.\n\t* g++.dg/warn/register-parm-1.C (erroneous_warning,\n\tno_erroneous_warning): Expect new warnings for C++17.\n\t* g++.dg/warn/register-var-2.C (f): Likewise.\n\t* g++.dg/parse/register1.C (f): Expect new error for C++17.\n\t* g++.dg/parse/linkage2.C (foo): Likewise.\n\t* g++.dg/torture/pr36826.C (CoinMin, CoinMax): Avoid register\n\tkeyword on parameters for C++17.\n\t* g++.dg/cpp1z/register1.C: New test.\n\t* g++.dg/cpp1z/register2.C: New test.\n\t* g++.dg/cpp1z/register3.C: New test.\n\nFrom-SVN: r240638", "tree": {"sha": "b3e64a502f5b3a95fa0f9261eb01a744d71fd489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e64a502f5b3a95fa0f9261eb01a744d71fd489"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2c6e7f26ec122124c91ca215a285da69d19fac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c6e7f26ec122124c91ca215a285da69d19fac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c6e7f26ec122124c91ca215a285da69d19fac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c6e7f26ec122124c91ca215a285da69d19fac9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a2d7bc05a7de689cb3fde82109e74a0b72e535c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2d7bc05a7de689cb3fde82109e74a0b72e535c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2d7bc05a7de689cb3fde82109e74a0b72e535c"}], "stats": {"total": 207, "additions": 190, "deletions": 17}, "files": [{"sha": "3e606940d1323c5e9ef7ffc73bf6aaca3ca613d4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -1,3 +1,10 @@\n+2016-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement P0001R1 - C++17 removal of register storage class specifier\n+\t* c.opt (Wregister): New warning.\n+\t* c-opts.c (c_common_post_options): Enable -Wregister by\n+\tdefault for C++17.\n+\n 2016-09-29  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* c-opts.c (c_common_post_options): Remove special case for"}, {"sha": "c5a699d67cf0a06f0aaa170f03b84874fa3efc2a", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -870,6 +870,10 @@ c_common_post_options (const char **pfilename)\n     warn_shift_negative_value = (extra_warnings\n \t\t\t\t && (cxx_dialect >= cxx11 || flag_isoc99));\n \n+  /* -Wregister is enabled by default in C++17.  */\n+  if (!global_options_set.x_warn_register)\n+    warn_register = cxx_dialect >= cxx1z;\n+\n   /* Declone C++ 'structors if -Os.  */\n   if (flag_declone_ctor_dtor == -1)\n     flag_declone_ctor_dtor = optimize_size;"}, {"sha": "e14678103cdb4937be0aa557722eef0d2d35a312", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -842,6 +842,10 @@ Wredundant-decls\n C ObjC C++ ObjC++ Var(warn_redundant_decls) Warning\n Warn about multiple declarations of the same object.\n \n+Wregister\n+C++ ObjC++ Var(warn_register) Warning\n+Warn about uses of register storage specifier.\n+\n Wreorder\n C++ ObjC++ Var(warn_reorder) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn when the compiler reorders code."}, {"sha": "fb0c0e0ffaa70eacdd30b69538ff29b1728b3920", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -1,3 +1,13 @@\n+2016-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement P0001R1 - C++17 removal of register storage class specifier\n+\t* decl.c (cp_finish_decl): Diagnose register storage class\n+\ton vars except when used in GNU global or local register variable\n+\textension.\n+\t(grokdeclarator): Diagnose register storage class on parameters.\n+\t* except.c (expand_start_catch_block): Set DECL_REGISTER only\n+\tafter cp_finish_decl call.\n+\n 2016-09-29  Marek Polacek  <polacek@redhat.com>\n \n \t* rtti.c (involves_incomplete_p): Add fall through comment."}, {"sha": "65966f8545417b1fb62deb7e90a909db260eab4a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -6711,6 +6711,19 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   if (type == error_mark_node)\n     return;\n \n+  /* Warn about register storage specifiers except when in GNU global\n+     or local register variable extension.  */\n+  if (VAR_P (decl) && DECL_REGISTER (decl) && asmspec_tree == NULL_TREE)\n+    {\n+      if (cxx_dialect >= cxx1z)\n+\tpedwarn (DECL_SOURCE_LOCATION (decl), OPT_Wregister,\n+\t\t \"ISO C++1z does not allow %<register%> storage \"\n+\t\t \"class specifier\");\n+      else\n+\twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wregister,\n+\t\t    \"%<register%> storage class specifier used\");\n+    }\n+\n   /* If a name was specified, get the string.  */\n   if (at_namespace_scope_p ())\n     asmspec_tree = maybe_apply_renaming_pragma (decl, asmspec_tree);\n@@ -11634,7 +11647,20 @@ grokdeclarator (const cp_declarator *declarator,\n        and in case doing stupid register allocation.  */\n \n     if (storage_class == sc_register)\n-      DECL_REGISTER (decl) = 1;\n+      {\n+\tDECL_REGISTER (decl) = 1;\n+\t/* Warn about register storage specifiers on PARM_DECLs.  */\n+\tif (TREE_CODE (decl) == PARM_DECL)\n+\t  {\n+\t    if (cxx_dialect >= cxx1z)\n+\t      pedwarn (DECL_SOURCE_LOCATION (decl), OPT_Wregister,\n+\t\t       \"ISO C++1z does not allow %<register%> storage \"\n+\t\t       \"class specifier\");\n+\t    else\n+\t      warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wregister,\n+\t\t\t  \"%<register%> storage class specifier used\");\n+\t  }\n+      }\n     else if (storage_class == sc_extern)\n       DECL_THIS_EXTERN (decl) = 1;\n     else if (storage_class == sc_static)"}, {"sha": "6555d6b5576cf00dc17c91612b27db0df55e001e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -540,9 +540,9 @@ expand_start_catch_block (tree decl)\n       if (init_type != TREE_TYPE (init))\n \tinit = build1 (NOP_EXPR, init_type, init);\n       exp = create_temporary_var (init_type);\n-      DECL_REGISTER (exp) = 1;\n       cp_finish_decl (exp, init, /*init_const_expr=*/false,\n \t\t      NULL_TREE, LOOKUP_ONLYCONVERTING);\n+      DECL_REGISTER (exp) = 1;\n       initialize_handler_parm (decl, exp);\n     }\n "}, {"sha": "804d0c2791371b7dd1d551570cb6ea29fdd01c3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -1,3 +1,27 @@\n+2016-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement P0001R1 - C++17 removal of register storage class specifier\n+\t* c-c++-common/Wvarargs-2.c (foo1): Except new warning for C++17.\n+\t* c-c++-common/vector-subscript-2.c (vf): Expect new error for\n+\tC++17.\n+\t* c-c++-common/vector-subscript-5.c (foo): Don't use register\n+\tkeyword if not __SSE2__.\n+\t* c-c++-common/Wvarargs.c (foo1, foo3): Expect new warnings for\n+\tC++17.\n+\t* g++.dg/compat/struct-layout-1_generate.c (iterative_hash): Remove\n+\tregister keywords.\n+\t* g++.dg/eh/pr29166.C: Add -Wno-register option.\n+\t* g++.dg/warn/register-parm-1.C (erroneous_warning,\n+\tno_erroneous_warning): Expect new warnings for C++17.\n+\t* g++.dg/warn/register-var-2.C (f): Likewise.\n+\t* g++.dg/parse/register1.C (f): Expect new error for C++17.\n+\t* g++.dg/parse/linkage2.C (foo): Likewise.\n+\t* g++.dg/torture/pr36826.C (CoinMin, CoinMax): Avoid register\n+\tkeyword on parameters for C++17.\n+\t* g++.dg/cpp1z/register1.C: New test.\n+\t* g++.dg/cpp1z/register2.C: New test.\n+\t* g++.dg/cpp1z/register3.C: New test.\n+\n 2016-09-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/adx-check.h (main): Simplify feature bit tests."}, {"sha": "1eacde1cbf26745b0d5a6e6be967b340cffc2185", "filename": "gcc/testsuite/c-c++-common/Wvarargs-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -23,7 +23,7 @@ foo0 (int a, int b, ...)\n }\n \n void\n-foo1 (int a, register int b, ...)\n+foo1 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n {\n     va_list vp;\n     /* 'b' is declared with register storage, but don't warn"}, {"sha": "20d8ec77c03e4480e9d3e58929109795cb4c2825", "filename": "gcc/testsuite/c-c++-common/Wvarargs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -23,7 +23,7 @@ foo0 (int a, int b, ...)\n }\n \n void\n-foo1 (int a, register int b, ...)\n+foo1 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n {\n     va_list vp;\n     /* 'b' is declared with register storage, but don't warn\n@@ -45,7 +45,7 @@ foo2 (int a, int b, ...)\n }\n \n void\n-foo3 (int a, register int b, ...)\n+foo3 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n {\n     va_list vp;\n     /* 'b' is declared with register storage, so warn.  */"}, {"sha": "e7bd251e060494ce0e3df72ec12977dc30bd49d4", "filename": "gcc/testsuite/c-c++-common/vector-subscript-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -7,6 +7,6 @@\n \n float vf(int i)\n {\n-  register vector float a;\n+  register vector float a;\t// { dg-error \"ISO C++1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n   return a[0];\n }"}, {"sha": "66ed87a4d0bfe41550b9d3f5f9341615609cf603", "filename": "gcc/testsuite/c-c++-common/vector-subscript-5.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-5.c?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -5,7 +5,10 @@ typedef int U __attribute__ ((vector_size (16)));\n int\n foo (int i)\n {\n-  register U u\n+#if __SSE2__\n+  register\n+#endif\n+    U u\n #if __SSE2__\n       asm (\"xmm0\")\n #endif"}, {"sha": "71d4af93a41933cb360737ad872f62c8ea3b76f6", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -1028,12 +1028,12 @@ acceptable.  Do NOT use for cryptographic purposes.\n \n static hashval_t\n iterative_hash (const void *k_in /* the key */,\n-\t\tregister size_t  length /* the length of the key */,\n-\t\tregister hashval_t initval /* the previous hash, or\n-\t\t\t\t\t      an arbitrary value */)\n+\t\tsize_t  length /* the length of the key */,\n+\t\thashval_t initval /* the previous hash, or\n+\t\t\t\t     an arbitrary value */)\n {\n-  register const unsigned char *k = (const unsigned char *)k_in;\n-  register hashval_t a,b,c,len;\n+  const unsigned char *k = (const unsigned char *)k_in;\n+  hashval_t a,b,c,len;\n \n   /* Set up the internal state */\n   len = length;"}, {"sha": "a55a717d58d42aedb591da9a7f90f1e333032f92", "filename": "gcc/testsuite/g++.dg/cpp1z/register1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister1.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -0,0 +1,29 @@\n+// P0001R1 - C++17 removal of register keyword\n+// { dg-do compile }\n+\n+#if defined(__i386__) || defined(__x86_64__)\n+#define REG1 \"ebx\"\n+#define REG2 \"edi\"\n+#endif\n+\n+#ifdef REG1\n+register int a __asm (REG1);\t// { dg-bogus \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+#endif\n+register int b;\t\t\t// { dg-error \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+register int c ();\t\t// { dg-error \"storage class 'register' invalid for function\" }\n+int foo (register int d)\t// { dg-error \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+{\n+  return d;\n+}\n+int bar ()\n+{\n+#ifdef REG2\n+  register int e __asm (REG2);\t// { dg-bogus \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+#else\n+  int e;\n+#endif\n+  register int f;\t\t// { dg-error \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+  e = 6;\n+  f = 7;\n+  return e + f;\n+}"}, {"sha": "1c1be5e43bffa1d14580195298a72fd35d9f9d79", "filename": "gcc/testsuite/g++.dg/cpp1z/register2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister2.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -0,0 +1,30 @@\n+// P0001R1 - C++17 removal of register keyword\n+// { dg-do compile }\n+// { dg-options \"-Wno-register\" }\n+\n+#if defined(__i386__) || defined(__x86_64__)\n+#define REG1 \"ebx\"\n+#define REG2 \"edi\"\n+#endif\n+\n+#ifdef REG1\n+register int a __asm (REG1);\t// { dg-bogus \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+#endif\n+register int b;\t\t\t// { dg-bogus \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+register int c ();\t\t// { dg-error \"storage class 'register' invalid for function\" }\n+int foo (register int d)\t// { dg-bogus \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+{\n+  return d;\n+}\n+int bar ()\n+{\n+#ifdef REG2\n+  register int e __asm (REG2);\t// { dg-bogus \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+#else\n+  int e;\n+#endif\n+  register int f;\t\t// { dg-bogus \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+  e = 6;\n+  f = 7;\n+  return e + f;\n+}"}, {"sha": "90b7f9d09b7d3b53b1f7443d5ffa39dabb42f064", "filename": "gcc/testsuite/g++.dg/cpp1z/register3.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister3.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -0,0 +1,30 @@\n+// P0001R1 - C++17 removal of register keyword\n+// { dg-do compile { target c++14_down } }\n+// { dg-options \"-Wregister\" }\n+\n+#if defined(__i386__) || defined(__x86_64__)\n+#define REG1 \"ebx\"\n+#define REG2 \"edi\"\n+#endif\n+\n+#ifdef REG1\n+register int a __asm (REG1);\t// { dg-bogus \"'register' storage class specifier used\" }\n+#endif\n+register int b;\t\t\t// { dg-warning \"'register' storage class specifier used\" }\n+register int c ();\t\t// { dg-error \"storage class 'register' invalid for function\" }\n+int foo (register int d)\t// { dg-warning \"'register' storage class specifier used\" }\n+{\n+  return d;\n+}\n+int bar ()\n+{\n+#ifdef REG2\n+  register int e __asm (REG2);\t// { dg-bogus \"'register' storage class specifier used\" }\n+#else\n+  int e;\n+#endif\n+  register int f;\t\t// { dg-warning \"'register' storage class specifier used\" }\n+  e = 6;\n+  f = 7;\n+  return e + f;\n+}"}, {"sha": "8d816486a6ebdc805a5bec0da08f2234b9d76dbe", "filename": "gcc/testsuite/g++.dg/eh/pr29166.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr29166.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr29166.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr29166.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -1,5 +1,6 @@\n // PR 29166: r4-r7 corrupted when unwinding.\n // { dg-do run }\n+// { dg-additional-options \"-Wno-register\" }\n \n class Ex \n { "}, {"sha": "71402bbca40dd3fb873265ba07febc0d54b3174e", "filename": "gcc/testsuite/g++.dg/parse/linkage2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flinkage2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flinkage2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flinkage2.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -1,3 +1,3 @@\n // PR c++/27884\n \n-extern \"C\" void foo(register int *my_perl);\n+extern \"C\" void foo(register int *my_perl);\t// { dg-error \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }"}, {"sha": "4db85d4f0e16e874ff114b592e86d39d8d30872b", "filename": "gcc/testsuite/g++.dg/parse/register1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fregister1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fregister1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fregister1.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -8,7 +8,7 @@ public:\n   operator int() { return i; }\n };\n \n-C f (register C x)\n+C f (register C x)\t// { dg-error \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n {\n   return x + 31;\n }"}, {"sha": "5418aaa7cd6da4f00b054f5ddafd3fe84645728b", "filename": "gcc/testsuite/g++.dg/torture/pr36826.C", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36826.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36826.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36826.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -1,5 +1,10 @@\n+#if __cplusplus > 201402L\n+template <class T> T CoinMax(const T x1, const T x2); \n+template <class T> T CoinMin(const T x1, const T x2);\n+#else\n template <class T> T CoinMax(register const T x1, register const T x2); \n template <class T> T CoinMin(register const T x1, register const T x2);\n+#endif\n class CoinIndexedVector;\n class ClpModel {\n protected:"}, {"sha": "15d1aa53f26055c841457bb62dd1c2532500d39d", "filename": "gcc/testsuite/g++.dg/warn/register-parm-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-parm-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-parm-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-parm-1.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -1,9 +1,9 @@\n // PR c++/60955\n // { dg-options \"-Wextra\" }\n \n-unsigned int erroneous_warning(register int a) {\n+unsigned int erroneous_warning(register int a) {\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n     if ((a) & 0xff) return 1; else return 0;\n }\n-unsigned int no_erroneous_warning(register int a) {\n+unsigned int no_erroneous_warning(register int a) {\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n     if (a & 0xff) return 1; else return 0;\n }"}, {"sha": "d829f8ac7c2c4072e00918cc51bf752f0a0440c0", "filename": "gcc/testsuite/g++.dg/warn/register-var-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-var-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c6e7f26ec122124c91ca215a285da69d19fac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-var-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fregister-var-2.C?ref=a2c6e7f26ec122124c91ca215a285da69d19fac9", "patch": "@@ -9,6 +9,6 @@ void g(int *);\n \n void f(void) \n { \n-  register int x;\n+  register int x;\t/* { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } } */\n   g(&x); /* { dg-warning \"address requested for 'x', which is declared 'register'\" } */\n } "}]}