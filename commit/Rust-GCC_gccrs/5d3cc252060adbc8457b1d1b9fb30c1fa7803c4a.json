{"sha": "5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzY2MyNTIwNjBhZGJjODQ1N2IxZDFiOWZiMzBjMWZhNzgwM2M0YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-06T16:51:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-06T16:51:21Z"}, "message": "alias.c: Fix comment typos.\n\n\t* alias.c: Fix comment typos.\n\t* builtins.c: Likewise.\n\t* cfg.c: Likewise.\n\t* df.c: Likewise.\n\t* dominance.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* emit-rtl.c: Likewise.\n\t* expr.c: Likewise.\n\t* final.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* gcse.c: Likewise.\n\t* genattrtab.c: Likewise.\n\t* genrecog.c: Likewise.\n\t* gensupport.c: Likewise.\n\t* ggc-zone.c: Likewise.\n\t* integrate.c: Likewise.\n\t* local-alloc.c: Likewise.\n\t* loop.c: Likewise.\n\t* recog.c: Likewise.\n\t* regmove.c: Likewise.\n\t* reg-stack.c: Likewise.\n\t* reorg.c: Likewise.\n\t* rtlanal.c: Likewise.\n\t* rtl.h: Likewise.\n\t* sched-ebb.c: Likewise.\n\t* simplify-rtx.c: Likewise.\n\t* toplev.c: Likewise.\n\t* varasm.c: Likewise.\n\nFrom-SVN: r75475", "tree": {"sha": "11295486e636ccdf75794a1c0860afe428d8372d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11295486e636ccdf75794a1c0860afe428d8372d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/comments", "author": null, "committer": null, "parents": [{"sha": "95ea367d2d2d54e8e45725538f99eb71ec301487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ea367d2d2d54e8e45725538f99eb71ec301487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ea367d2d2d54e8e45725538f99eb71ec301487"}], "stats": {"total": 111, "additions": 71, "deletions": 40}, "files": [{"sha": "95a1dcfee77af32ee8e828538494d8c8e62ba05a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -1,3 +1,34 @@\n+2004-01-06  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* alias.c: Fix comment typos.\n+\t* builtins.c: Likewise.\n+\t* cfg.c: Likewise.\n+\t* df.c: Likewise.\n+\t* dominance.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* emit-rtl.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* final.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gcse.c: Likewise.\n+\t* genattrtab.c: Likewise.\n+\t* genrecog.c: Likewise.\n+\t* gensupport.c: Likewise.\n+\t* ggc-zone.c: Likewise.\n+\t* integrate.c: Likewise.\n+\t* local-alloc.c: Likewise.\n+\t* loop.c: Likewise.\n+\t* recog.c: Likewise.\n+\t* regmove.c: Likewise.\n+\t* reg-stack.c: Likewise.\n+\t* reorg.c: Likewise.\n+\t* rtlanal.c: Likewise.\n+\t* rtl.h: Likewise.\n+\t* sched-ebb.c: Likewise.\n+\t* simplify-rtx.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* varasm.c: Likewise.\n+\n 2004-01-06  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/install.texi: Fix typos."}, {"sha": "584f565ad3a82b8705680e2b93e5ff66da449514", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -2386,7 +2386,7 @@ nonlocal_mentioned_p_1 (rtx *loc, void *data ATTRIBUTE_UNUSED)\n       if (MEM_VOLATILE_P (x))\n \treturn 1;\n \n-    /* FALLTHROUGH */\n+    /* Fall through.  */\n \n     default:\n       break;\n@@ -2480,7 +2480,7 @@ nonlocal_referenced_p_1 (rtx *loc, void *data ATTRIBUTE_UNUSED)\n       if (MEM_VOLATILE_P (x))\n \treturn 1;\n \n-    /* FALLTHROUGH */\n+    /* Fall through.  */\n \n     default:\n       break;\n@@ -2556,7 +2556,7 @@ nonlocal_set_p_1 (rtx *loc, void *data ATTRIBUTE_UNUSED)\n       if (MEM_VOLATILE_P (x))\n \treturn 1;\n \n-    /* FALLTHROUGH */\n+    /* Fall through.  */\n \n     default:\n       break;"}, {"sha": "266039632f687aa56a15ee364733364469c25741", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -4354,7 +4354,7 @@ expand_builtin_fputs (tree arglist, rtx target, bool unlocked)\n \t    break;\n \t  }\n       }\n-      /* FALLTHROUGH */\n+      /* Fall through.  */\n     case 1: /* length is greater than 1, call fwrite.  */\n       {\n \ttree string_arg;"}, {"sha": "fb1bce7a3a79309e38759dfbb15736bc82d5d614", "filename": "gcc/cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -334,7 +334,7 @@ cached_make_edge (sbitmap *edge_cache, basic_block src, basic_block dst, int fla\n       if (flags == 0)\n \treturn NULL;\n \n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case 0:\n       for (e = src->succ; e; e = e->succ_next)\n \tif (e->dest == dst)"}, {"sha": "63f6c7c82452b7f34889a02bfbc83fd898aec398", "filename": "gcc/df.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -1006,7 +1006,7 @@ df_uses_record (struct df *df, rtx *loc, enum df_ref_type ref_type,\n \t\t\t\t  insn, DF_REF_READ_WRITE);\n \t\t  break;\n \t\t}\n-\t      /* ... FALLTHRU ...  */\n+\t      /* Fall through.  */\n \t    case REG:\n \t    case PARALLEL:\n \t    case PC:"}, {"sha": "9d691a3d07c8092239b7d9b16cc8310e9f546256", "filename": "gcc/dominance.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -537,7 +537,7 @@ assign_dfs_numbers (struct et_node *node, int *num)\n   node->dfs_num_out = (*num)++;\n }\n \n-/* Compute the data neccesary for fast resolving of dominator queries in a\n+/* Compute the data necessary for fast resolving of dominator queries in a\n    static dominator tree.  */\n \n static void\n@@ -659,7 +659,7 @@ set_immediate_dominator (enum cdi_direction dir, basic_block bb,\n     dom_computed[dir] = DOM_NO_FAST_QUERY;\n }\n \n-/* Store all basic blocks immediatelly dominated by BB into BBS and return\n+/* Store all basic blocks immediately dominated by BB into BBS and return\n    their number.  */\n int\n get_dominated_by (enum cdi_direction dir, basic_block bb, basic_block **bbs)"}, {"sha": "60177f1c5151d9eaa284db796e67185940bea823", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -8503,7 +8503,7 @@ loc_descriptor_from_tree (tree loc, int addressp)\n \t  indirect_p = 1;\n \t  break;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case PARM_DECL:\n       {"}, {"sha": "cf491e87f01e6b2d5337f552ad4789c598d34e7d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -2876,7 +2876,7 @@ copy_rtx_if_shared_1 (rtx *orig1)\n \t      if (copied && len > 0)\n \t\tXVEC (x, i) = gen_rtvec_v (len, XVEC (x, i)->elem);\n               \n-              /* Call recsusively on all inside the vector.  */\n+              /* Call recursively on all inside the vector.  */\n \t      for (j = 0; j < len; j++)\n                 {\n \t\t  if (last_ptr)"}, {"sha": "b593a515bac29a9714a73ab1f6ec71dce1cc085d", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -5829,7 +5829,7 @@ safe_from_p (rtx x, tree exp, int top_p)\n     case '<':\n       if (!safe_from_p (x, TREE_OPERAND (exp, 1), 0))\n \treturn 0;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case '1':\n       return safe_from_p (x, TREE_OPERAND (exp, 0), 0);"}, {"sha": "d3785fda1951fb1a5a4d13a398c15a3725f31a6d", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -3779,7 +3779,7 @@ leaf_renumber_regs_insn (rtx in_rtx)\n    calls into this file, i.e., dbxout_symbol, dbxout_parms, and dbxout_reg_params.\n    Those routines may also be called from a higher level intercepted routine. So\n    to prevent recording data for an inner call to one of these for an intercept,\n-   we maintain a intercept nesting counter (debug_nesting). We only save the\n+   we maintain an intercept nesting counter (debug_nesting). We only save the\n    intercepted arguments if the nesting is 1.  */\n int debug_nesting = 0;\n "}, {"sha": "fb9f037a6963c3a0e2f261e538b103155b893aaf", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -8425,7 +8425,7 @@ fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n \tcase WITH_CLEANUP_EXPR: len = 2; break;\n \tdefault: break;\n \t}\n-      /* FALLTHROUGH */\n+      /* Fall through.  */\n     case 'r':\n     case '<':\n     case '1':"}, {"sha": "55f6d1bed720b26e87fd2034068760a9057e4fe3", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -817,7 +817,7 @@ gcse_main (rtx f, FILE *file)\n \t partial redundancy elimination.  */\n       free_gcse_mem ();\n \n-      /* It does not make sense to run code hoisting unless we optimizing\n+      /* It does not make sense to run code hoisting unless we are optimizing\n \t for code size -- it rarely makes programs faster, and can make\n \t them bigger if we did partial redundancy elimination (when optimizing\n \t for space, we use a classic gcse algorithm instead of partial"}, {"sha": "05f7d222e8b39e9de860334eb744690771dce816", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -1155,7 +1155,7 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n \t  have_error = 1;\n \t  break;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case IOR:\n     case AND:"}, {"sha": "467f96e0fc196d9c44af9960b13f13944e3c6c21", "filename": "gcc/genrecog.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -378,7 +378,7 @@ find_operand (rtx pattern, int n)\n \tcase 'V':\n \t  if (! XVEC (pattern, i))\n \t    break;\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \n \tcase 'E':\n \t  for (j = 0; j < XVECLEN (pattern, i); j++)\n@@ -429,7 +429,7 @@ find_matching_operand (rtx pattern, int n)\n \tcase 'V':\n \t  if (! XVEC (pattern, i))\n \t    break;\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \n \tcase 'E':\n \t  for (j = 0; j < XVECLEN (pattern, i); j++)\n@@ -812,7 +812,7 @@ add_to_sequence (rtx pattern, struct decision_head *last, const char *position,\n \t beyond the end of the vector.  */\n       test = new_decision_test (DT_veclen_ge, &place);\n       test->u.veclen = XVECLEN (pattern, 2);\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case MATCH_OPERAND:\n     case MATCH_SCRATCH:"}, {"sha": "377b08d50a6f76e4e020082a24dba608afa5c0f2", "filename": "gcc/gensupport.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -512,7 +512,7 @@ collect_insn_data (rtx pattern, int *palt, int *pmax)\n     case MATCH_OPERAND:\n       i = n_alternatives (XSTR (pattern, 2));\n       *palt = (i > *palt ? i : *palt);\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case MATCH_OPERATOR:\n     case MATCH_SCRATCH:\n@@ -540,7 +540,7 @@ collect_insn_data (rtx pattern, int *palt, int *pmax)\n \tcase 'V':\n \t  if (XVEC (pattern, i) == NULL)\n \t    break;\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \tcase 'E':\n \t  for (j = XVECLEN (pattern, i) - 1; j >= 0; --j)\n \t    collect_insn_data (XVECEXP (pattern, i, j), palt, pmax);\n@@ -595,7 +595,7 @@ alter_predicate_for_insn (rtx pattern, int alt, int max_op, int lineno)\n \t    XSTR (pattern, 2) = new_c;\n \t  }\n       }\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case MATCH_OPERATOR:\n     case MATCH_SCRATCH:"}, {"sha": "b9ad7334655e563958d4b73de687ce7aff2fa88e", "filename": "gcc/ggc-zone.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fggc-zone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fggc-zone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-zone.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -172,7 +172,7 @@ struct alloc_chunk {\n    Similar with increasing max_free_bin_size without increasing num_free_bins.\n \n    After much histogramming of allocation sizes and time spent on gc,\n-   on a powerpc G4 7450 - 667 mhz, and an pentium 4 - 2.8ghz,\n+   on a PowerPC G4 7450 - 667 mhz, and a Pentium 4 - 2.8ghz,\n    these were determined to be the optimal values.  */\n #define NUM_FREE_BINS\t\t64\n #define MAX_FREE_BIN_SIZE\t256"}, {"sha": "d3e47a6a05517f4663be675a346f1f05045c0078", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -2090,7 +2090,7 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n       if (NOTE_LINE_NUMBER (orig) != NOTE_INSN_DELETED_LABEL)\n \tbreak;\n \n-      /* ... FALLTHRU ...  */\n+      /* Fall through.  */\n     case CODE_LABEL:\n       LABEL_PRESERVE_P (get_label_from_map (map, CODE_LABEL_NUMBER (orig)))\n \t= LABEL_PRESERVE_P (orig);"}, {"sha": "6524f6c795932b3f1ec049af63f896cd956f0aed", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -538,7 +538,7 @@ equiv_init_varies_p (rtx x)\n       if (MEM_VOLATILE_P (x))\n \treturn 1;\n \n-      /* FALLTHROUGH */\n+      /* Fall through.  */\n \n     default:\n       break;\n@@ -603,7 +603,7 @@ equiv_init_movable_p (rtx x, int regno)\n       if (MEM_VOLATILE_P (x))\n \treturn 0;\n \n-      /* FALLTHROUGH */\n+      /* Fall through.  */\n \n     default:\n       break;\n@@ -2412,7 +2412,7 @@ requires_inout (const char *p)\n \t  if (REG_CLASS_FROM_CONSTRAINT (c, p) == NO_REGS\n \t      && !EXTRA_ADDRESS_CONSTRAINT (c, p))\n \t    break;\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \tcase 'p':\n \tcase 'g': case 'r':\n \t  reg_allowed = 1;"}, {"sha": "c0cf160a868f19e229e8b00901142c5e4cc01d4c", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -2643,7 +2643,7 @@ prescan_loop (struct loop *loop)\n \t\t  loop_info->has_multiple_exit_targets = 1;\n \t\t}\n \t    }\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \n \tcase INSN:\n \t  if (volatile_refs_p (PATTERN (insn)))"}, {"sha": "9f5c152082e86adb7377a08ab827b5f7cfa0d5df", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -1707,7 +1707,7 @@ asm_operand_ok (rtx op, const char *constraint)\n \t      || (GET_CODE (op) == CONST_DOUBLE\n \t\t  && GET_MODE (op) == VOIDmode))\n \t    break;\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \n \tcase 'i':\n \t  if (CONSTANT_P (op)"}, {"sha": "8ebae4be70c517776b297050aa4a3e6c47921331", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -1769,7 +1769,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\tif (GET_CODE (pat_src) != UNSPEC\n \t\t    || XINT (pat_src, 1) != UNSPEC_FNSTSW)\n \t\t  abort ();\n-\t\t/* FALLTHRU */\n+\t\t/* Fall through.  */\n \n \t      case UNSPEC_FNSTSW:\n \t\t/* Combined fcomp+fnstsw generated for doing well with"}, {"sha": "d5b35cc1d4dbaff1eb6f43dbe7e53ddbd193b402", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -375,7 +375,7 @@ static int perhaps_ends_bb_p (rtx insn)\n \t very conservative.  */\n       if (nonlocal_goto_handler_labels)\n \treturn 1;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     default:\n       return can_throw_internal (insn);\n     }"}, {"sha": "ec15a4fb6bc40b0aa59111a287675958e68021db", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -1621,7 +1621,7 @@ try_merge_delay_insns (rtx insn, rtx thread)\n    If we are not careful, this routine can take up a significant fraction\n    of the total compilation time (4%), but only wins rarely.  Hence we\n    speed this routine up by making two passes.  The first pass goes back\n-   until it hits a label and sees if it find an insn with an identical\n+   until it hits a label and sees if it finds an insn with an identical\n    pattern.  Only in this (relatively rare) event does it check for\n    data conflicts.\n "}, {"sha": "d403dda195be46270998397d0bc5ecbe681da7c5", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -1986,7 +1986,7 @@ struct cse_basic_block_data;\n    N times that of a fast register-to-register instruction.  */\n #define COSTS_N_INSNS(N) ((N) * 4)\n \n-/* Maximum cost of a rtl expression.  This value has the special meaning\n+/* Maximum cost of an rtl expression.  This value has the special meaning\n    not to use an rtx with this cost under any circumstances.  */\n #define MAX_COST INT_MAX\n "}, {"sha": "059fe9e522b05e86ae6a33ee12342f18d707df5f", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -99,7 +99,7 @@ rtx_unstable_p (rtx x)\n       if (MEM_VOLATILE_P (x))\n \treturn 1;\n \n-      /* FALLTHROUGH */\n+      /* Fall through.  */\n \n     default:\n       break;\n@@ -189,7 +189,7 @@ rtx_varies_p (rtx x, int for_alias)\n       if (MEM_VOLATILE_P (x))\n \treturn 1;\n \n-      /* FALLTHROUGH */\n+      /* Fall through.  */\n \n     default:\n       break;"}, {"sha": "c553cddd18353937b7eaa655f74d92941566c33a", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -445,7 +445,7 @@ add_deps_for_risky_insns (rtx head, rtx tail)\n \t\t    prev = BB_END (bb);\n \t\t  }\n \t      }\n-\t    /* FALLTHRU */\n+\t    /* Fall through.  */\n \t  case TRAP_RISKY:\n \t  case IRISKY:\n \t  case PRISKY_CANDIDATE:"}, {"sha": "10a9047d739418bcf6f9389d13b0f45e3658c1dd", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -3148,7 +3148,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n \t     pretend this is actually an integer.  */\n \t  innermode = mode_for_size (HOST_BITS_PER_WIDE_INT, MODE_INT, 0);\n \n-\t  /* FALLTHROUGH */\n+\t  /* Fall through.  */\n \tcase CONST_INT:\n \t  if (GET_CODE (op) == CONST_INT)\n \t    val = INTVAL (op);"}, {"sha": "51a5e56722ee15882cfabce5b043f86549f5e9fa", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -2100,7 +2100,7 @@ rest_of_handle_stack_regs (tree decl, rtx insns)\n #if defined (HAVE_ATTR_length)\n   /* If flow2 creates new instructions which need splitting\n      and scheduling after reload is not done, they might not be\n-     splitten until final which doesn't allow splitting\n+     split until final which doesn't allow splitting\n      if HAVE_ATTR_length.  */\n #ifdef INSN_SCHEDULING\n   if (optimize && !flag_schedule_insns_after_reload)"}, {"sha": "3f5905ab397a013280455fff76bd70fe9083d97a", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5d3cc252060adbc8457b1d1b9fb30c1fa7803c4a", "patch": "@@ -2704,7 +2704,7 @@ decode_rtx_const (enum machine_mode mode, rtx x, struct rtx_const *value)\n \t      break;\n \t    case rvc_normal:\n \t      value->un.du.exp = r->exp;\n-\t      /* FALLTHRU */\n+\t      /* Fall through.  */\n \t    case rvc_nan:\n \t      memcpy (value->un.du.sig, r->sig, sizeof (r->sig));\n \t      break;\n@@ -2764,7 +2764,7 @@ decode_rtx_const (enum machine_mode mode, rtx x, struct rtx_const *value)\n \t            break;\n \t          case rvc_normal:\n \t            d->exp = r->exp;\n-\t            /* FALLTHRU */\n+\t            /* Fall through.  */\n \t          case rvc_nan:\n \t            memcpy (d->sig, r->sig, sizeof (r->sig));\n \t            break;\n@@ -3132,7 +3132,7 @@ output_constant_pool (const char *fnname ATTRIBUTE_UNUSED,\n \t      || GET_CODE (XEXP (XEXP (x, 0), 0)) != LABEL_REF)\n \t    break;\n \t  tmp = XEXP (XEXP (x, 0), 0);\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \n \tcase LABEL_REF:\n \t  tmp = XEXP (x, 0);"}]}