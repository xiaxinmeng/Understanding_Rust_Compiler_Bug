{"sha": "1f1e8aed3afc08e9d70bba9110e289f7fa329453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxZThhZWQzYWZjMDhlOWQ3MGJiYTkxMTBlMjg5ZjdmYTMyOTQ1Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-17T08:14:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-17T08:14:16Z"}, "message": "re PR tree-optimization/81396 (Optimization of reading Little-Endian 64-bit number with portable code has a regression)\n\n\tPR tree-optimization/81396\n\t* tree-ssa-math-opts.c (struct symbolic_number): Add n_ops field.\n\t(init_symbolic_number): Initialize it to 1.\n\t(perform_symbolic_merge): Add n_ops from both operands into the new\n\tn_ops.\n\t(find_bswap_or_nop): Don't consider n->n == cmpnop computations\n\twithout base_addr as useless if they need more than one operation.\n\t(bswap_replace): Handle !bswap case for NULL base_addr.\n\n\t* gcc.dg/tree-ssa/pr81396.c: New test.\n\nFrom-SVN: r250257", "tree": {"sha": "ce61c2221126093bbe0151b30cada1ee8d593428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce61c2221126093bbe0151b30cada1ee8d593428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f1e8aed3afc08e9d70bba9110e289f7fa329453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1e8aed3afc08e9d70bba9110e289f7fa329453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1e8aed3afc08e9d70bba9110e289f7fa329453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1e8aed3afc08e9d70bba9110e289f7fa329453/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed9091b270721c399112c74eb15b7fc27ef127db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9091b270721c399112c74eb15b7fc27ef127db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9091b270721c399112c74eb15b7fc27ef127db"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "f57ef041ab2a5622aff3dffc3823a5fba82f511b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1e8aed3afc08e9d70bba9110e289f7fa329453/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1e8aed3afc08e9d70bba9110e289f7fa329453/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f1e8aed3afc08e9d70bba9110e289f7fa329453", "patch": "@@ -1,3 +1,14 @@\n+2017-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/81396\n+\t* tree-ssa-math-opts.c (struct symbolic_number): Add n_ops field.\n+\t(init_symbolic_number): Initialize it to 1.\n+\t(perform_symbolic_merge): Add n_ops from both operands into the new\n+\tn_ops.\n+\t(find_bswap_or_nop): Don't consider n->n == cmpnop computations\n+\twithout base_addr as useless if they need more than one operation.\n+\t(bswap_replace): Handle !bswap case for NULL base_addr.\n+\n 2017-07-17  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/81069"}, {"sha": "67ffc3ef50221d09461041bb6801b6309c09b028", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1e8aed3afc08e9d70bba9110e289f7fa329453/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1e8aed3afc08e9d70bba9110e289f7fa329453/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f1e8aed3afc08e9d70bba9110e289f7fa329453", "patch": "@@ -1,3 +1,8 @@\n+2017-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/81396\n+\t* gcc.dg/tree-ssa/pr81396.c: New test.\n+\n 2017-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt65.adb: New test."}, {"sha": "9f4a08d1c2282fe9dca26478b49f5c7f4b77fffd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr81396.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1e8aed3afc08e9d70bba9110e289f7fa329453/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81396.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1e8aed3afc08e9d70bba9110e289f7fa329453/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81396.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81396.c?ref=1f1e8aed3afc08e9d70bba9110e289f7fa329453", "patch": "@@ -0,0 +1,25 @@\n+/* PR tree-optimization/81396 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+typedef unsigned long long uint64_t;\n+\n+uint64_t\n+foo (uint64_t word)\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ && __SIZEOF_LONG_LONG__ == 8\n+  const unsigned char *const ptr = (const unsigned char *) &word;\n+  return ((uint64_t) ptr[0]\n+\t  | ((uint64_t) ptr[1] << 8)\n+\t  | ((uint64_t) ptr[2] << (8 * 2))\n+\t  | ((uint64_t) ptr[3] << (8 * 3))\n+\t  | ((uint64_t) ptr[4] << (8 * 4))\n+\t  | ((uint64_t) ptr[5] << (8 * 5))\n+\t  | ((uint64_t) ptr[6] << (8 * 6))\n+\t  | ((uint64_t) ptr[7] << (8 * 7)));\n+#else\n+  return word;\n+#endif\n+}\n+\n+/* { dg-final { scan-tree-dump \"return word_\\[0-9]*\\\\(D\\\\);\" \"optimized\" } } */"}, {"sha": "7ac1659fa0670b7080685f3f9513939807073a63", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1e8aed3afc08e9d70bba9110e289f7fa329453/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1e8aed3afc08e9d70bba9110e289f7fa329453/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=1f1e8aed3afc08e9d70bba9110e289f7fa329453", "patch": "@@ -1946,7 +1946,9 @@ make_pass_cse_sincos (gcc::context *ctxt)\n    - a range which gives the difference between the highest and lowest accessed\n      memory location to make such a symbolic number;\n    - the address SRC of the source element of lowest address as a convenience\n-     to easily get BASE_ADDR + offset + lowest bytepos.\n+     to easily get BASE_ADDR + offset + lowest bytepos;\n+   - number of expressions N_OPS bitwise ored together to represent\n+     approximate cost of the computation.\n \n    Note 1: the range is different from size as size reflects the size of the\n    type of the current expression.  For instance, for an array char a[],\n@@ -1968,6 +1970,7 @@ struct symbolic_number {\n   tree alias_set;\n   tree vuse;\n   unsigned HOST_WIDE_INT range;\n+  int n_ops;\n };\n \n #define BITS_PER_MARKER 8\n@@ -2083,6 +2086,7 @@ init_symbolic_number (struct symbolic_number *n, tree src)\n     return false;\n   n->range = size;\n   n->n = CMPNOP;\n+  n->n_ops = 1;\n \n   if (size < 64 / BITS_PER_MARKER)\n     n->n &= ((uint64_t) 1 << (size * BITS_PER_MARKER)) - 1;\n@@ -2293,6 +2297,7 @@ perform_symbolic_merge (gimple *source_stmt1, struct symbolic_number *n1,\n \treturn NULL;\n     }\n   n->n = n1->n | n2->n;\n+  n->n_ops = n1->n_ops + n2->n_ops;\n \n   return source_stmt;\n }\n@@ -2588,7 +2593,7 @@ find_bswap_or_nop (gimple *stmt, struct symbolic_number *n, bool *bswap)\n     return NULL;\n \n   /* Useless bit manipulation performed by code.  */\n-  if (!n->base_addr && n->n == cmpnop)\n+  if (!n->base_addr && n->n == cmpnop && n->n_ops == 1)\n     return NULL;\n \n   n->range *= BITS_PER_UNIT;\n@@ -2747,6 +2752,36 @@ bswap_replace (gimple *cur_stmt, gimple *ins_stmt, tree fndecl,\n \t}\n       src = val_tmp;\n     }\n+  else if (!bswap)\n+    {\n+      gimple *g;\n+      if (!useless_type_conversion_p (TREE_TYPE (tgt), TREE_TYPE (src)))\n+\t{\n+\t  if (!is_gimple_val (src))\n+\t    return false;\n+\t  g = gimple_build_assign (tgt, NOP_EXPR, src);\n+\t}\n+      else\n+\tg = gimple_build_assign (tgt, src);\n+      if (n->range == 16)\n+\tnop_stats.found_16bit++;\n+      else if (n->range == 32)\n+\tnop_stats.found_32bit++;\n+      else\n+\t{\n+\t  gcc_assert (n->range == 64);\n+\t  nop_stats.found_64bit++;\n+\t}\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file,\n+\t\t   \"%d bit reshuffle in target endianness found at: \",\n+\t\t   (int) n->range);\n+\t  print_gimple_stmt (dump_file, cur_stmt, 0);\n+\t}\n+      gsi_replace (&gsi, g, true);\n+      return true;\n+    }\n   else if (TREE_CODE (src) == BIT_FIELD_REF)\n     src = TREE_OPERAND (src, 0);\n "}]}