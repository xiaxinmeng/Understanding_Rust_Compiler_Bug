{"sha": "1fcaa1eb87540b689b435914a0d82bc9b65bcc34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZjYWExZWI4NzU0MGI2ODliNDM1OTE0YTBkODJiYzliNjViY2MzNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-01-22T21:51:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-01-22T21:51:53Z"}, "message": "PR c++/83720 - ICE with lambda and LTO.\n\n\t* decl2.c (determine_visibility): Clear template_decl for\n\tfunction-scope decls.  Propagate anonymous linkage from containing\n\tfunction.\n\nFrom-SVN: r256964", "tree": {"sha": "aa8f02923e553c2ef1ed326d60b5888d83e7467f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa8f02923e553c2ef1ed326d60b5888d83e7467f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fcaa1eb87540b689b435914a0d82bc9b65bcc34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fcaa1eb87540b689b435914a0d82bc9b65bcc34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fcaa1eb87540b689b435914a0d82bc9b65bcc34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fcaa1eb87540b689b435914a0d82bc9b65bcc34/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3774938ec6bd45fa4038613ff0a5d3cf56335a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3774938ec6bd45fa4038613ff0a5d3cf56335a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3774938ec6bd45fa4038613ff0a5d3cf56335a60"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "8ec76a4581e48fd1dd833047ca1d510fe6c89a4d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fcaa1eb87540b689b435914a0d82bc9b65bcc34/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fcaa1eb87540b689b435914a0d82bc9b65bcc34/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1fcaa1eb87540b689b435914a0d82bc9b65bcc34", "patch": "@@ -1,9 +1,16 @@\n+2018-01-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/83720 - ICE with lambda and LTO.\n+\t* decl2.c (determine_visibility): Clear template_decl for\n+\tfunction-scope decls.  Propagate anonymous linkage from containing\n+\tfunction.\n+\n 2018-01-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/81933\n \t* typeck2.c (split_nonconstant_init_1): Return false if we didn't\n \tsplit out anything.\n-\t\n+\n 2018-01-22  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/83895"}, {"sha": "6324c559568120d0171048a45185ae37abd36d83", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fcaa1eb87540b689b435914a0d82bc9b65bcc34/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fcaa1eb87540b689b435914a0d82bc9b65bcc34/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1fcaa1eb87540b689b435914a0d82bc9b65bcc34", "patch": "@@ -2388,7 +2388,9 @@ determine_visibility (tree decl)\n \t     containing function by default, except that\n \t     -fvisibility-inlines-hidden doesn't affect them.  */\n \t  tree fn = DECL_CONTEXT (decl);\n-\t  if (DECL_VISIBILITY_SPECIFIED (fn))\n+\t  if (! TREE_PUBLIC (fn))\n+\t    constrain_visibility (decl, VISIBILITY_ANON, false);\n+\t  else if (DECL_VISIBILITY_SPECIFIED (fn))\n \t    {\n \t      DECL_VISIBILITY (decl) = DECL_VISIBILITY (fn);\n \t      DECL_VISIBILITY_SPECIFIED (decl) = \n@@ -2414,10 +2416,9 @@ determine_visibility (tree decl)\n \n \t  /* Local classes in templates have CLASSTYPE_USE_TEMPLATE set,\n \t     but have no TEMPLATE_INFO.  Their containing template\n-\t     function does, and the local class could be constrained\n-\t     by that.  */\n-\t  if (template_decl)\n-\t    template_decl = fn;\n+\t     function determines their visibility, so we neither\n+\t     need nor want the template_decl handling.  */\n+\t  template_decl = NULL_TREE;\n \t}\n       else if (VAR_P (decl) && DECL_TINFO_P (decl)\n \t       && flag_visibility_ms_compat)"}, {"sha": "4e63c9be7cd11ee61ec90b0183eb99d088126e35", "filename": "gcc/testsuite/g++.dg/lto/pr83720_0.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fcaa1eb87540b689b435914a0d82bc9b65bcc34/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83720_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fcaa1eb87540b689b435914a0d82bc9b65bcc34/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83720_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83720_0.C?ref=1fcaa1eb87540b689b435914a0d82bc9b65bcc34", "patch": "@@ -0,0 +1,55 @@\n+// PR c++/83720\n+// { dg-lto-do assemble }\n+\n+#pragma GCC diagnostic ignored \"-Wreturn-type\"\n+\n+namespace b {\n+class h {\n+public:\n+  template <typename ae, typename af> h(ae af::*...) {\n+    [] {};\n+  }\n+};\n+class ai {};\n+template <typename> class c {\n+public:\n+  template <typename ag> void aj(const char *, ag f) { h(f, int()); }\n+};\n+}\n+template <typename> class al;\n+template <typename e> class i {\n+protected:\n+  static e g(const int) {  }\n+};\n+template <typename, typename> class j;\n+template <typename an, typename e, typename... ao>\n+class j<an(ao...), e> : i<e> {\n+  typedef i<e> ap;\n+\n+public:\n+  static an aq(const int &ar, ao... as) { ap::g(ar)(as...); }\n+};\n+template <typename an, typename... ao> class al<an(ao...)> {\n+  template <typename, typename a> using ax = a;\n+\n+public:\n+  template <typename e, typename = ax<int, void>, typename = ax<int, void>>\n+  al(e);\n+  using ay = an (*)(const int &, ao...);\n+  ay az;\n+};\n+template <typename an, typename... ao>\n+template <typename e, typename, typename>\n+al<an(ao...)>::al(e) {\n+  az = j<an(ao...), e>::aq;\n+}\n+class k {\n+public:\n+  k(al<void(b::ai)>);\n+} d([](b::ai) {\n+  struct be {\n+    virtual void f();\n+  };\n+  struct bf;\n+  b::c<bf>().aj(\"\", &be::f);\n+});"}]}