{"sha": "ff81221b5bd3b8101301e4eaaa15bde8b0553b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4MTIyMWI1YmQzYjgxMDEzMDFlNGVhYWExNWJkZThiMDU1M2IwMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-05-20T12:50:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:50:43Z"}, "message": "2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb\n\t(Note_Redundant_Use): Diagnose a redundant use within a subprogram body\n\twhen there is a use clause for the same entity in the context.\n\t(Analyze_Subprogram_Renaming): A renaming_as_body is legal if it is\n\tcreated for a stream attribute of an abstract type or interface type.\n\nFrom-SVN: r135641", "tree": {"sha": "13ae7d313472367fc59edd8115f54a80a6fd170e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ae7d313472367fc59edd8115f54a80a6fd170e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff81221b5bd3b8101301e4eaaa15bde8b0553b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff81221b5bd3b8101301e4eaaa15bde8b0553b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff81221b5bd3b8101301e4eaaa15bde8b0553b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff81221b5bd3b8101301e4eaaa15bde8b0553b00/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ff22245698ae9b3f229ab127744baceddbf6a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ff22245698ae9b3f229ab127744baceddbf6a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ff22245698ae9b3f229ab127744baceddbf6a02"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "6ebb647b86fdfdf94e5904de3681c996b51db69c", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff81221b5bd3b8101301e4eaaa15bde8b0553b00/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff81221b5bd3b8101301e4eaaa15bde8b0553b00/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=ff81221b5bd3b8101301e4eaaa15bde8b0553b00", "patch": "@@ -1721,24 +1721,28 @@ package body Sem_Ch8 is\n \n          Set_Corresponding_Spec (N, Rename_Spec);\n \n-         --  Deal with special case of Input and Output stream functions\n+         --  Deal with special case of stream functions of abstract types\n+         --  and interfaces.\n \n          if Nkind (Unit_Declaration_Node (Rename_Spec)) =\n                                      N_Abstract_Subprogram_Declaration\n          then\n-            --  Input and Output stream functions are abstract if the object\n-            --  type is abstract. However, these functions may receive explicit\n-            --  declarations in representation clauses, making the attribute\n-            --  subprograms usable  as defaults in subsequent type extensions.\n+            --  Input stream functions are abstract if the object type is\n+            --  abstract. Similarly, all default stream functions for an\n+            --  interface type are abstract. However, these suprograms may\n+            --  receive explicit declarations in representation clauses, making\n+            --  the attribute subprograms usable as defaults in subsequent\n+            --  type extensions.\n             --  In this case we rewrite the declaration to make the subprogram\n             --  non-abstract. We remove the previous declaration, and insert\n             --  the new one at the point of the renaming, to prevent premature\n             --  access to unfrozen types. The new declaration reuses the\n             --  specification of the previous one, and must not be analyzed.\n \n-            pragma Assert (Is_TSS (Rename_Spec, TSS_Stream_Output)\n-                           or else Is_TSS (Rename_Spec, TSS_Stream_Input));\n-\n+            pragma Assert\n+              (Is_Primitive (Entity (Nam))\n+                 and then\n+                   Is_Abstract_Type (Find_Dispatching_Type (Entity (Nam))));\n             declare\n                Old_Decl : constant Node_Id :=\n                             Unit_Declaration_Node (Rename_Spec);\n@@ -3777,8 +3781,8 @@ package body Sem_Ch8 is\n       E := Homonyms;\n       while Present (E) loop\n \n-         --  If entity is immediately visible or potentially use\n-         --  visible, then process the entity and we are done.\n+         --  If entity is immediately visible or potentially use visible, then\n+         --  process the entity and we are done.\n \n          if Is_Immediately_Visible (E) then\n             goto Immediately_Visible_Entity;\n@@ -3958,15 +3962,15 @@ package body Sem_Ch8 is\n \n       --  Come here with E set to the first immediately visible entity on\n       --  the homonym chain. This is the one we want unless there is another\n-      --  immediately visible entity further on in the chain for a more\n-      --  inner scope (RM 8.3(8)).\n+      --  immediately visible entity further on in the chain for an inner\n+      --  scope (RM 8.3(8)).\n \n       <<Immediately_Visible_Entity>> declare\n          Level : Int;\n          Scop  : Entity_Id;\n \n       begin\n-         --  Find scope level of initial entity. When compiling  through\n+         --  Find scope level of initial entity. When compiling through\n          --  Rtsfind, the previous context is not completely invisible, and\n          --  an outer entity may appear on the chain, whose scope is below\n          --  the entry for Standard that delimits the current scope stack.\n@@ -4243,8 +4247,8 @@ package body Sem_Ch8 is\n       P_Name := Entity (Prefix (N));\n       O_Name := P_Name;\n \n-      --  If the prefix is a renamed package, look for the entity\n-      --  in the original package.\n+      --  If the prefix is a renamed package, look for the entity in the\n+      --  original package.\n \n       if Ekind (P_Name) = E_Package\n         and then Present (Renamed_Object (P_Name))\n@@ -4335,10 +4339,10 @@ package body Sem_Ch8 is\n       if No (Id) or else Chars (Id) /= Chars (Selector) then\n          Set_Etype (N, Any_Type);\n \n-         --  If we are looking for an entity defined in System, try to\n-         --  find it in the child package that may have been provided as\n-         --  an extension to System. The Extend_System pragma will have\n-         --  supplied the name of the extension, which may have to be loaded.\n+         --  If we are looking for an entity defined in System, try to find it\n+         --  in the child package that may have been provided as an extension\n+         --  to System. The Extend_System pragma will have supplied the name of\n+         --  the extension, which may have to be loaded.\n \n          if Chars (P_Name) = Name_System\n            and then Scope (P_Name) = Standard_Standard\n@@ -4368,9 +4372,8 @@ package body Sem_Ch8 is\n             return;\n \n          else\n-            --  If the prefix is a single concurrent object, use its\n-            --  name in  the error message, rather than that of the\n-            --  anonymous type.\n+            --  If the prefix is a single concurrent object, use its name in\n+            --  the error message, rather than that of the anonymous type.\n \n             if Is_Concurrent_Type (P_Name)\n               and then Is_Internal_Name (Chars (P_Name))\n@@ -4917,7 +4920,6 @@ package body Sem_Ch8 is\n       --  in the expansion of record equality).\n \n       elsif Present (Entity (Selector_Name (N))) then\n-\n          if No (Etype (N))\n            or else Etype (N) = Any_Type\n          then\n@@ -6145,6 +6147,16 @@ package body Sem_Ch8 is\n             end;\n          end if;\n \n+      --  Finally, if the current use clause is in the context then\n+      --  the clause is redundant when it is nested within the unit.\n+\n+      elsif Nkind (Parent (Cur_Use)) = N_Compilation_Unit\n+        and then Nkind (Parent (Parent (Clause))) /= N_Compilation_Unit\n+        and then Get_Source_Unit (Cur_Use) = Get_Source_Unit (Clause)\n+      then\n+         Redundant := Clause;\n+         Prev_Use  := Cur_Use;\n+\n       else\n          null;\n       end if;"}]}