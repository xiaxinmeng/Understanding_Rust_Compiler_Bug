{"sha": "ca29d1dcff95b0fe9fafe84983727437714720f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EyOWQxZGNmZjk1YjBmZTlmYWZlODQ5ODM3Mjc0Mzc3MTQ3MjBmNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-13T13:40:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-13T13:40:09Z"}, "message": "i386.md (abs?f expander): Support SSE case.\n\n\t* i386.md (abs?f expander): Support SSE case.\n\t(abd?f_if): Add new \"USE\"; add splitters.\n\nFrom-SVN: r40440", "tree": {"sha": "0d09949e0e8bcfcb7a1846de5fbc0e91f645cd50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d09949e0e8bcfcb7a1846de5fbc0e91f645cd50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca29d1dcff95b0fe9fafe84983727437714720f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca29d1dcff95b0fe9fafe84983727437714720f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca29d1dcff95b0fe9fafe84983727437714720f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca29d1dcff95b0fe9fafe84983727437714720f4/comments", "author": null, "committer": null, "parents": [{"sha": "bf4ab281678450284b14a53089c1f364132cb203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4ab281678450284b14a53089c1f364132cb203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4ab281678450284b14a53089c1f364132cb203"}], "stats": {"total": 139, "additions": 136, "deletions": 3}, "files": [{"sha": "ef79224cd7952559abc2cb3fb23e9ca296611060", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca29d1dcff95b0fe9fafe84983727437714720f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca29d1dcff95b0fe9fafe84983727437714720f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca29d1dcff95b0fe9fafe84983727437714720f4", "patch": "@@ -1,3 +1,8 @@\n+Tue Mar 13 14:38:44 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (abs?f expander): Support SSE case.\n+\t(abd?f_if): Add new \"USE\"; add splitters.\n+\n 2001-03-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cpp.texi (poison): Explain the macro expansion exception."}, {"sha": "5f6cef686ca18721ae2c1bcad783d348c10082f1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 131, "deletions": 3, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca29d1dcff95b0fe9fafe84983727437714720f4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca29d1dcff95b0fe9fafe84983727437714720f4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ca29d1dcff95b0fe9fafe84983727437714720f4", "patch": "@@ -7572,7 +7572,68 @@\n \t\t   (neg:SF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n   \"TARGET_80387\"\n-  \"ix86_expand_unary_operator (ABS, SFmode, operands); DONE;\")\n+  \"if (TARGET_SSE)\n+     {\n+       /* In case operand is in memory,  we will not use SSE.  */\n+       if (memory_operand (operands[0], VOIDmode)\n+\t   && rtx_equal_p (operands[0], operands[1]))\n+\t emit_insn (gen_abssf2_memory (operands[0], operands[1]));\n+       else\n+\t{\n+\t  /* Using SSE is tricky, since we need bitwise negation of -0\n+\t     in register.  */\n+\t  rtx reg = gen_reg_rtx (SFmode);\n+\t  emit_move_insn (reg, gen_lowpart (SFmode, GEN_INT (0x80000000)));\n+\t  emit_insn (gen_abssf2_ifs (operands[0], operands[1], reg));\n+\t}\n+       DONE;\n+     }\n+   ix86_expand_unary_operator (ABS, SFmode, operands); DONE;\")\n+\n+(define_insn \"abssf2_memory\"\n+  [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n+\t(abs:SF (match_operand:SF 1 \"memory_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_unary_operator_ok (ABS, SFmode, operands)\"\n+  \"#\")\n+\n+(define_insn \"abssf2_ifs\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=x#fr,f#xr,r#xf\")\n+\t(abs:SF (match_operand:SF 1 \"nonimmediate_operand\" \"x,0,0\")))\n+   (use (match_operand:SF 2 \"nonmemory_operand\" \"*0#x,*X#x,*X#x\"))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_SSE\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"memory_operand\" \"\")\n+\t(abs:SF (match_operand:SF 1 \"memory_operand\" \"\")))\n+   (use (match_operand:SF 2 \"\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (abs:SF (match_dup 1)))\n+\t      (clobber (reg:CC 17))])])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (use (match_operand:SF 2 \"\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed && !SSE_REG_P (operands[0])\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (abs:SF (match_dup 1)))\n+\t      (clobber (reg:CC 17))])])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (use (match_operand:SF 2 \"register_operand\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed && SSE_REG_P (operands[0])\"\n+  [(set (subreg:TI (match_dup 0) 0)\n+\t(and:TI (not:TI (subreg:TI (match_dup 2) 0))\n+\t\t(subreg:TI (match_dup 1) 0)))])\n \n ;; Keep 'f' and 'r' in separate alternatives to avoid reload problems\n ;; because of secondary memory needed to reload from class FLOAT_INT_REGS\n@@ -7581,7 +7642,7 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(abs:SF (match_operand:SF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && ix86_unary_operator_ok (ABS, SFmode, operands)\"\n+  \"TARGET_80387 && ix86_unary_operator_ok (ABS, SFmode, operands) && !TARGET_SSE\"\n   \"#\")\n \n (define_split\n@@ -7627,7 +7688,74 @@\n \t\t   (neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n   \"TARGET_80387\"\n-  \"ix86_expand_unary_operator (ABS, DFmode, operands); DONE;\")\n+  \"if (TARGET_SSE2)\n+     {\n+       /* In case operand is in memory,  we will not use SSE.  */\n+       if (memory_operand (operands[0], VOIDmode)\n+\t   && rtx_equal_p (operands[0], operands[1]))\n+\t emit_insn (gen_absdf2_memory (operands[0], operands[1]));\n+       else\n+\t{\n+\t  /* Using SSE is tricky, since we need bitwise negation of -0\n+\t     in register.  */\n+\t  rtx reg = gen_reg_rtx (DFmode);\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+\t  rtx imm = gen_reg_rtx (GEN_INT (0x80000000));\n+#else\n+\t  rtx imm = immed_double_const (0, 0x80000000, DImode);\n+#endif\n+\t  emit_move_insn (reg, gen_lowpart (DFmode, imm));\n+\t  emit_insn (gen_absdf2_ifs (operands[0], operands[1], reg));\n+\t}\n+       DONE;\n+     }\n+   ix86_expand_unary_operator (ABS, DFmode, operands); DONE;\")\n+\n+(define_insn \"absdf2_memory\"\n+  [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n+\t(abs:DF (match_operand:DF 1 \"memory_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_unary_operator_ok (ABS, DFmode, operands)\"\n+  \"#\")\n+\n+(define_insn \"absdf2_ifs\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y#fr,f#Yr,r#Yf\")\n+\t(abs:DF (match_operand:DF 1 \"nonimmediate_operand\" \"Y,0,0\")))\n+   (use (match_operand:DF 2 \"nonmemory_operand\" \"*0#Y,*X#Y,*X#Y\"))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_SSE2\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"memory_operand\" \"\")\n+\t(abs:DF (match_operand:DF 1 \"memory_operand\" \"\")))\n+   (use (match_operand:DF 2 \"\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (abs:DF (match_dup 1)))\n+\t      (clobber (reg:CC 17))])])\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (use (match_operand:DF 2 \"\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed && !SSE_REG_P (operands[0])\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (abs:DF (match_dup 1)))\n+\t      (clobber (reg:CC 17))])])\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (use (match_operand:DF 2 \"register_operand\" \"\"))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed && SSE_REG_P (operands[0])\"\n+  [(set (subreg:TI (match_dup 0) 0)\n+\t(and:TI (not:TI (subreg:TI (match_dup 2) 0))\n+\t\t(subreg:TI (match_dup 1) 0)))])\n+\n \n ;; Keep 'f' and 'r' in separate alternatives to avoid reload problems\n ;; because of secondary memory needed to reload from class FLOAT_INT_REGS"}]}