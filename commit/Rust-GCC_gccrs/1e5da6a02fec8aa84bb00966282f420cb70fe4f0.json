{"sha": "1e5da6a02fec8aa84bb00966282f420cb70fe4f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU1ZGE2YTAyZmVjOGFhODRiYjAwOTY2MjgyZjQyMGNiNzBmZTRmMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-24T17:48:33Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-24T20:05:37Z"}, "message": "coroutines: Copy attributes to the outlined functions [PR95518,PR95813]\n\nWe had omitted the copying of function attributes, we now copy\nthe used, alignment, section values from the original decal and\nthe complete set of function attributes.  It is likely that\nsome function attributes don't really make sense for coroutines,\nbut that can be disgnosed separately. Also mark the outlined\nfunctions as artificial, since they are; some diagnostic\nprocessing tests this.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95518\n\tPR c++/95813\n\t* coroutines.cc (act_des_fn): Copy function\n\tattributes onto the outlined coroutine helpers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95518\n\tPR c++/95813\n\t* g++.dg/coroutines/pr95518.C: New test.\n\t* g++.dg/coroutines/pr95813.C: New test.", "tree": {"sha": "01477813c8a08e8118524130158da7d3619c2817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01477813c8a08e8118524130158da7d3619c2817"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e5da6a02fec8aa84bb00966282f420cb70fe4f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5da6a02fec8aa84bb00966282f420cb70fe4f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5da6a02fec8aa84bb00966282f420cb70fe4f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5da6a02fec8aa84bb00966282f420cb70fe4f0/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbc16552204ffa28b643949eb1f26b787017b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbc16552204ffa28b643949eb1f26b787017b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dbc16552204ffa28b643949eb1f26b787017b39"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "64b97535c8df9a567cd22b18aa29b0c3aa183e1a", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5da6a02fec8aa84bb00966282f420cb70fe4f0/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5da6a02fec8aa84bb00966282f420cb70fe4f0/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=1e5da6a02fec8aa84bb00966282f420cb70fe4f0", "patch": "@@ -3530,12 +3530,24 @@ act_des_fn (tree orig, tree fn_type, tree coro_frame_ptr, const char* name)\n   tree fn_name = get_fn_local_identifier (orig, name);\n   tree fn = build_lang_decl (FUNCTION_DECL, fn_name, fn_type);\n   DECL_CONTEXT (fn) = DECL_CONTEXT (orig);\n+  DECL_ARTIFICIAL (fn) = true;\n   DECL_INITIAL (fn) = error_mark_node;\n   tree id = get_identifier (\"frame_ptr\");\n   tree fp = build_lang_decl (PARM_DECL, id, coro_frame_ptr);\n   DECL_CONTEXT (fp) = fn;\n   DECL_ARG_TYPE (fp) = type_passed_as (coro_frame_ptr);\n   DECL_ARGUMENTS (fn) = fp;\n+  /* Copy selected attributes from the original function.  */\n+  TREE_USED (fn) = TREE_USED (orig);\n+  if (DECL_SECTION_NAME (orig))\n+    set_decl_section_name (fn, DECL_SECTION_NAME (orig));\n+  /* Copy any alignment that the FE added.  */\n+  if (DECL_ALIGN (orig))\n+    SET_DECL_ALIGN (fn, DECL_ALIGN (orig));\n+  /* Copy any alignment the user added.  */\n+  DECL_USER_ALIGN (fn) = DECL_USER_ALIGN (orig);\n+  /* Apply attributes from the original fn.  */\n+  DECL_ATTRIBUTES (fn) = copy_list (DECL_ATTRIBUTES (orig));\n   return fn;\n }\n "}, {"sha": "b1717677810d14d7ff0462513c67cd6875615d87", "filename": "gcc/testsuite/g++.dg/coroutines/pr95518.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5da6a02fec8aa84bb00966282f420cb70fe4f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95518.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5da6a02fec8aa84bb00966282f420cb70fe4f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95518.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95518.C?ref=1e5da6a02fec8aa84bb00966282f420cb70fe4f0", "patch": "@@ -0,0 +1,28 @@\n+// { dg-additional-options \"-O -Wunused-function\" }\n+\n+#if __has_include (<coroutine>)\n+#include <coroutine>\n+using namespace std;\n+#elif defined (__clang__) && __has_include (<experimental/coroutine>)\n+#include <experimental/coroutine>\n+namespace std { using namespace experimental; }\n+#endif\n+\n+struct dummy\n+{\n+    struct promise_type\n+    {\n+        dummy get_return_object() const noexcept { return {}; }\n+        std::suspend_never initial_suspend() const noexcept { return {}; }\n+        std::suspend_never final_suspend() const noexcept { return {}; }\n+        void return_void() const noexcept {}\n+        void unhandled_exception() const noexcept {}\n+    };\n+};\n+\n+// This checks that the attribute is passed on to the outlined coroutine\n+// functions (so that there should be no diagnostic).\n+[[maybe_unused]] static dummy foo()\n+{ \n+    co_return;\n+}"}, {"sha": "445cdf1f7efc3a132bdd57f42ea3bb64e9764ee4", "filename": "gcc/testsuite/g++.dg/coroutines/pr95813.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5da6a02fec8aa84bb00966282f420cb70fe4f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95813.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5da6a02fec8aa84bb00966282f420cb70fe4f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95813.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95813.C?ref=1e5da6a02fec8aa84bb00966282f420cb70fe4f0", "patch": "@@ -0,0 +1,46 @@\n+//  { dg-additional-options  \"-Wall -O\" }\n+\n+// This should complete without any diagnostic.\n+\n+#include <coroutine>\n+#include <exception>\n+\n+template <typename T>\n+class lazy {\n+    T _v = 0;\n+public:\n+    lazy() {}\n+    bool await_ready() {return true;}\n+    void await_suspend(auto x) noexcept {}\n+    T await_resume() { return _v; }\n+};\n+\n+namespace std {\n+\n+template <typename T, typename... Args>\n+struct coroutine_traits<lazy<T>, Args...> {\n+    struct promise_type {\n+        suspend_always initial_suspend() const { return {}; }\n+        suspend_always final_suspend() const { return {}; }\n+        void return_value(T val) {}\n+        lazy<T> get_return_object() {\n+            return lazy<T>();\n+        }\n+        void unhandled_exception() {\n+            std::terminate();\n+        }\n+    };\n+};\n+}\n+\n+struct xxx {\n+    static lazy<int> func() {\n+        co_return 1;\n+    }\n+};\n+\n+#if 0\n+lazy<int> foo() {\n+    co_return co_await xxx::func();\n+}\n+#endif"}]}