{"sha": "86ad3aa989805482427d241e03aa9fae6390d30d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZhZDNhYTk4OTgwNTQ4MjQyN2QyNDFlMDNhYTlmYWU2MzkwZDMwZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2005-09-27T16:04:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2005-09-27T16:04:25Z"}, "message": "re PR c++/13764 (c++ front-end creates extra blocks)\n\n        PR c++/13764\n        * c-common.c (finish_fname_decls): Use append_to_statement_list_force.\n        * cp/cp-tree.h (FUNCTION_NEEDS_BODY_BLOCK): New macro.\n        * cp/name-lookup.c (pushdecl_maybe_friend): Check it.\n        * cp/decl.c (begin_function_body): Do nothing if it's false.\n        (finish_function_body): Ditto.\n        (outer_curly_brace_block): New fn.\n        (finish_function): Use it.\n\nFrom-SVN: r104698", "tree": {"sha": "3bb0430180145c4c46eccc4eb0371b0a2aeead17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bb0430180145c4c46eccc4eb0371b0a2aeead17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86ad3aa989805482427d241e03aa9fae6390d30d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ad3aa989805482427d241e03aa9fae6390d30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ad3aa989805482427d241e03aa9fae6390d30d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ad3aa989805482427d241e03aa9fae6390d30d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ec88e19de05f73576e780f06331a1906fefacc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec88e19de05f73576e780f06331a1906fefacc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec88e19de05f73576e780f06331a1906fefacc5"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "5b821c89f09f6e6bff7a757ba2a1141125f5edfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86ad3aa989805482427d241e03aa9fae6390d30d", "patch": "@@ -1,5 +1,8 @@\n 2005-09-26  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/13764\n+\t* c-common.c (finish_fname_decls): Use append_to_statement_list_force.\n+\n \t* doc/invoke.texi: Clarify documentation of -fno-enforce-eh-specs.\n \n 2005-09-26  James E Wilson  <wilson@specifix.com>"}, {"sha": "4b1f9e728583e097894ca6f781b57606c113145e", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=86ad3aa989805482427d241e03aa9fae6390d30d", "patch": "@@ -695,7 +695,7 @@ finish_fname_decls (void)\n       if (TREE_CODE (*bodyp) == BIND_EXPR)\n \tbodyp = &BIND_EXPR_BODY (*bodyp);\n \n-      append_to_statement_list (*bodyp, &stmts);\n+      append_to_statement_list_force (*bodyp, &stmts);\n       *bodyp = stmts;\n     }\n "}, {"sha": "bdc7237e4bf7499bc6c5323d2b548325bec24e9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86ad3aa989805482427d241e03aa9fae6390d30d", "patch": "@@ -1,3 +1,13 @@\n+2005-09-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/13764\n+\t* cp-tree.h (FUNCTION_NEEDS_BODY_BLOCK): New macro.\n+\t* name-lookup.c (pushdecl_maybe_friend): Check it.\n+\t* decl.c (begin_function_body): Do nothing if it's false.\n+\t(finish_function_body): Ditto.\n+\t(outer_curly_brace_block): New fn.\n+\t(finish_function): Use it.\n+\n 2005-09-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/15855"}, {"sha": "ceaa425af572088d4f3febb95f1b03df7958d225", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=86ad3aa989805482427d241e03aa9fae6390d30d", "patch": "@@ -255,6 +255,8 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n /* Used to mark the block around the member initializers and cleanups.  */\n #define BIND_EXPR_BODY_BLOCK(NODE) \\\n   TREE_LANG_FLAG_3 (BIND_EXPR_CHECK (NODE))\n+#define FUNCTION_NEEDS_BODY_BLOCK(NODE) \\\n+  (DECL_CONSTRUCTOR_P (NODE) || DECL_DESTRUCTOR_P (NODE))\n \n #define STATEMENT_LIST_NO_SCOPE(NODE) \\\n   TREE_LANG_FLAG_0 (STATEMENT_LIST_CHECK (NODE))"}, {"sha": "bd77e06ddff831bfcd87d1072b8a0d52423302b8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=86ad3aa989805482427d241e03aa9fae6390d30d", "patch": "@@ -10656,14 +10656,16 @@ finish_destructor_body (void)\n /* Do the necessary processing for the beginning of a function body, which\n    in this case includes member-initializers, but not the catch clauses of\n    a function-try-block.  Currently, this means opening a binding level\n-   for the member-initializers (in a ctor) and member cleanups (in a dtor).\n-   In other functions, this isn't necessary, but it doesn't hurt.  */\n+   for the member-initializers (in a ctor) and member cleanups (in a dtor).  */\n \n tree\n begin_function_body (void)\n {\n   tree stmt;\n \n+  if (! FUNCTION_NEEDS_BODY_BLOCK (current_function_decl))\n+    return NULL_TREE;\n+\n   if (processing_template_decl)\n     /* Do nothing now.  */;\n   else\n@@ -10694,6 +10696,9 @@ begin_function_body (void)\n void\n finish_function_body (tree compstmt)\n {\n+  if (compstmt == NULL_TREE)\n+    return;\n+  \n   /* Close the block.  */\n   finish_compound_stmt (compstmt);\n \n@@ -10705,6 +10710,20 @@ finish_function_body (tree compstmt)\n     finish_destructor_body ();\n }\n \n+/* Given a function, returns the BLOCK corresponding to the outermost level\n+   of curly braces, skipping the artificial block created for constructor\n+   initializers.  */\n+\n+static tree\n+outer_curly_brace_block (tree fndecl)\n+{\n+  tree block = BLOCK_SUBBLOCKS (DECL_INITIAL (fndecl));\n+  if (FUNCTION_NEEDS_BODY_BLOCK (current_function_decl))\n+    /* Skip the artificial function body block.  */\n+    block = BLOCK_SUBBLOCKS (block);\n+  return block;\n+}\n+\n /* Finish up a function declaration and compile that function\n    all the way to assembler language output.  The free the storage\n    for the function definition.\n@@ -10836,9 +10855,7 @@ finish_function (int flags)\n \t     the function so we know that their lifetime always ends with a\n \t     return; see g++.dg/opt/nrv6.C.  We could be more flexible if\n \t     we were to do this optimization in tree-ssa.  */\n-\t  && (outer = BLOCK_SUBBLOCKS (DECL_INITIAL (fndecl)))\n-\t  /* Skip the artificial function body block.  */\n-\t  && (outer = BLOCK_SUBBLOCKS (outer))\n+\t  && (outer = outer_curly_brace_block (fndecl))\n \t  && chain_member (r, BLOCK_VARS (outer)))\n \tfinalize_nrv (&DECL_SAVED_TREE (fndecl), r, DECL_RESULT (fndecl));\n "}, {"sha": "f25a3342d70d3720f2bc1c0a2f98cd9a30b5b08e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=86ad3aa989805482427d241e03aa9fae6390d30d", "patch": "@@ -935,8 +935,9 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t\t     them there.  */\n \t\t  struct cp_binding_level *b = current_binding_level->level_chain;\n \n-\t\t  /* Skip the ctor/dtor cleanup level.  */\n-\t\t  b = b->level_chain;\n+\t\t  if (FUNCTION_NEEDS_BODY_BLOCK (current_function_decl))\n+\t\t    /* Skip the ctor/dtor cleanup level.  */\n+\t\t    b = b->level_chain;\n \n \t\t  /* ARM $8.3 */\n \t\t  if (b->kind == sk_function_parms)"}, {"sha": "5573251cb1f4adb32181829ff803cd401bb3bd7d", "filename": "gcc/testsuite/g++.dg/tree-ssa/block1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fblock1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad3aa989805482427d241e03aa9fae6390d30d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fblock1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fblock1.C?ref=86ad3aa989805482427d241e03aa9fae6390d30d", "patch": "@@ -0,0 +1,11 @@\n+// PR 13764: We were inserting an extra body block in all functions, but\n+// it's only really necessary for [cd]tors.\n+// { dg-options \"-fdump-tree-gimple\" }\n+\n+void bar (void)\n+{\n+  int a;\n+}\n+\n+// { dg-final { scan-tree-dump-times \"\\{\" 1 \"gimple\" } }\n+// { dg-final { cleanup-tree-dump \"gimple\" } }"}]}