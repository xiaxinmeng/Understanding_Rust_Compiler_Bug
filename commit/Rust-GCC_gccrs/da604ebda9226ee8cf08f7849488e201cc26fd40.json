{"sha": "da604ebda9226ee8cf08f7849488e201cc26fd40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2MDRlYmRhOTIyNmVlOGNmMDhmNzg0OTQ4OGUyMDFjYzI2ZmQ0MA==", "commit": {"author": {"name": "Changpeng Fang", "email": "changpeng.fang@amd.com", "date": "2010-06-10T17:54:39Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-06-10T17:54:39Z"}, "message": "Fix PR44185: prefetch test failures.\n\n2010-06-10  Changpeng Fang  <changpeng.fang@amd.com>\n\n\tPR middle-end/44185\n\t* gcc.dg/tree-ssa/prefetch-7.c: take the loops that will generate\n\tnon-temporal stores out of the tests to form new test cases.  As a\n\tresult, no non-temporal store should be generated in this case.\n\n\t* gcc.dg/tree-ssa/prefetch-8.c: New.  Test from original\n\tprefetch-7.c that generate one non-temporal store.\n\n\t* gcc.dg/tree-ssa/prefetch-9.c: New.  Test from original\n\tprefetch-7.c that generate one non-temporal store and one\n\tone-temporal prefetch.\n\nFrom-SVN: r160566", "tree": {"sha": "8aca1a54b47298a26365ef935106dc5b487cacbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aca1a54b47298a26365ef935106dc5b487cacbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da604ebda9226ee8cf08f7849488e201cc26fd40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da604ebda9226ee8cf08f7849488e201cc26fd40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da604ebda9226ee8cf08f7849488e201cc26fd40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da604ebda9226ee8cf08f7849488e201cc26fd40/comments", "author": {"login": "changpeng", "id": 4239661, "node_id": "MDQ6VXNlcjQyMzk2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4239661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changpeng", "html_url": "https://github.com/changpeng", "followers_url": "https://api.github.com/users/changpeng/followers", "following_url": "https://api.github.com/users/changpeng/following{/other_user}", "gists_url": "https://api.github.com/users/changpeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/changpeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changpeng/subscriptions", "organizations_url": "https://api.github.com/users/changpeng/orgs", "repos_url": "https://api.github.com/users/changpeng/repos", "events_url": "https://api.github.com/users/changpeng/events{/privacy}", "received_events_url": "https://api.github.com/users/changpeng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feab9982bb4915ffd3dfc9b6123947b59ed7dce6"}], "stats": {"total": 96, "additions": 79, "deletions": 17}, "files": [{"sha": "1a0c99c9b93b133244d28ce42197ff26b999d68d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da604ebda9226ee8cf08f7849488e201cc26fd40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da604ebda9226ee8cf08f7849488e201cc26fd40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da604ebda9226ee8cf08f7849488e201cc26fd40", "patch": "@@ -1,3 +1,17 @@\n+2010-06-10  Changpeng Fang  <changpeng.fang@amd.com>\n+\n+\tPR middle-end/44185\n+\t* gcc.dg/tree-ssa/prefetch-7.c: take the loops that will generate\n+\tnon-temporal stores out of the tests to form new test cases.  As a\n+\tresult, no non-temporal store should be generated in this case.\n+\n+\t* gcc.dg/tree-ssa/prefetch-8.c: New.  Test from original\n+\tprefetch-7.c that generate one non-temporal store.\n+\n+\t* gcc.dg/tree-ssa/prefetch-9.c: New.  Test from original\n+\tprefetch-7.c that generate one non-temporal store and one\n+\tone-temporal prefetch.\n+\n 2010-06-10  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/44258"}, {"sha": "9e453a7c08aa8ca9b78bd8bb99a3f0dc0f2e109e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/prefetch-7.c", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da604ebda9226ee8cf08f7849488e201cc26fd40/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da604ebda9226ee8cf08f7849488e201cc26fd40/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-7.c?ref=da604ebda9226ee8cf08f7849488e201cc26fd40", "patch": "@@ -5,20 +5,12 @@\n /* { dg-options \"-O2 -fprefetch-loop-arrays -march=athlon -msse2 -mfpmath=sse --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n \n #define K 1000000\n-int a[K], b[K];\n+int a[K];\n \n void test(int *p)\n {\n   unsigned i;\n \n-  /* Nontemporal store should be used for a.  */\n-  for (i = 0; i < K; i++)\n-    a[i] = 0;\n-\n-  /* Nontemporal store should be used for a, nontemporal prefetch for b.  */\n-  for (i = 0; i < K; i++)\n-    a[i] = b[i];\n-\n   /* Nontemporal store should not be used here (only write and read temporal\n      prefetches).  */\n   for (i = 0; i < K - 10000; i++)\n@@ -44,18 +36,14 @@ void test(int *p)\n }\n \n /* { dg-final { scan-tree-dump-times \"Issued prefetch\" 5 \"aprefetch\" } } */\n-/* { dg-final { scan-tree-dump-times \"Issued nontemporal prefetch\" 3 \"aprefetch\" } } */\n-/* { dg-final { scan-tree-dump-times \"a nontemporal store\" 2 \"aprefetch\" } } */\n+/* { dg-final { scan-tree-dump-times \"Issued nontemporal prefetch\" 2 \"aprefetch\" } } */\n+/* { dg-final { scan-tree-dump-times \"a nontemporal store\" 0 \"aprefetch\" } } */\n \n-/* { dg-final { scan-tree-dump-times \"builtin_prefetch\" 8 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"=\\\\{nt\\\\}\" 18 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"__builtin_ia32_mfence\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"builtin_prefetch\" 7 \"optimized\" } } */\n \n /* { dg-final { scan-assembler-times \"prefetchw\" 5 } } */\n /* { dg-final { scan-assembler-times \"prefetcht\" 1 } } */\n-/* { dg-final { scan-assembler-times \"prefetchnta\" 2 } } */\n-/* { dg-final { scan-assembler-times \"movnti\" 18 } } */\n-/* { dg-final { scan-assembler-times \"mfence\" 2 } } */\n+/* { dg-final { scan-assembler-times \"prefetchnta\" 1 } } */\n \n /* { dg-final { cleanup-tree-dump \"aprefetch\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "a05d552ace176738c7650b52a51c99cb7122eafb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/prefetch-8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da604ebda9226ee8cf08f7849488e201cc26fd40/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da604ebda9226ee8cf08f7849488e201cc26fd40/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-8.c?ref=da604ebda9226ee8cf08f7849488e201cc26fd40", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-skip-if \"\" { i?86-*-* x86_64-*-* } { \"-march=*\" } { \"-march=athlon\" } } */\n+/* { dg-options \"-O2 -fprefetch-loop-arrays -march=athlon -msse2 -mfpmath=sse --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n+\n+#define K 1000000\n+int a[K];\n+\n+void test()\n+{\n+  unsigned i;\n+\n+  /* Nontemporal store should be used for a.  */\n+  for (i = 0; i < K; i++)\n+    a[i] = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a nontemporal store\" 1 \"aprefetch\" } } */\n+\n+/* { dg-final { scan-tree-dump \"=\\\\{nt\\\\}\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_ia32_mfence\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-assembler \"movnti\" } } */\n+/* { dg-final { scan-assembler-times \"mfence\" 1 } } */\n+\n+/* { dg-final { cleanup-tree-dump \"aprefetch\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "eb22a660e431a43a2f8d9e61fc8ccad7bfc32422", "filename": "gcc/testsuite/gcc.dg/tree-ssa/prefetch-9.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da604ebda9226ee8cf08f7849488e201cc26fd40/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da604ebda9226ee8cf08f7849488e201cc26fd40/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-9.c?ref=da604ebda9226ee8cf08f7849488e201cc26fd40", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-skip-if \"\" { i?86-*-* x86_64-*-* } { \"-march=*\" } { \"-march=athlon\" } } */\n+/* { dg-options \"-O2 -fprefetch-loop-arrays -march=athlon -msse2 -mfpmath=sse --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n+\n+#define K 1000000\n+int a[K], b[K];\n+\n+void test()\n+{\n+  unsigned i;\n+\n+  /* Nontemporal store should be used for a, nontemporal prefetch for b.  */\n+  for (i = 0; i < K; i++)\n+    a[i] = b[i];\n+\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Issued nontemporal prefetch\" 1 \"aprefetch\" } } */\n+/* { dg-final { scan-tree-dump-times \"a nontemporal store\" 1 \"aprefetch\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"builtin_prefetch\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"=\\\\{nt\\\\}\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_ia32_mfence\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-assembler-times \"prefetchnta\" 1 } } */\n+/* { dg-final { scan-assembler \"movnti\" } } */\n+/* { dg-final { scan-assembler-times \"mfence\" 1 } } */\n+\n+/* { dg-final { cleanup-tree-dump \"aprefetch\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}