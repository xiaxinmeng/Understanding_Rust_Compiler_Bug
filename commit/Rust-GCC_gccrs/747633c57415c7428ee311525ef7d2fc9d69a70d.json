{"sha": "747633c57415c7428ee311525ef7d2fc9d69a70d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3NjMzYzU3NDE1Yzc0MjhlZTMxMTUyNWVmN2QyZmM5ZDY5YTcwZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-09-07T14:19:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-09-07T14:19:33Z"}, "message": "re PR tree-optimization/50319 (if-conversion produces unvectorizable conditions)\n\n2011-09-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/50319\n\t* tree-if-conv.c (set_bb_predicate): Assert we only set\n\tcanonical predicates.\n\t(add_to_predicate_list): Simplify.  Allow TRUTH_NOT_EXPR\n\taround canonical predicates.\n\t(predicate_bbs): Do not re-gimplify already canonical\n\tpredicates.  Properly unshare them though.\n\t(find_phi_replacement_condition): Simplify.\n\nFrom-SVN: r178638", "tree": {"sha": "1dfa5236dece7afabae0ffa53da6d85d6d5c2be2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfa5236dece7afabae0ffa53da6d85d6d5c2be2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/747633c57415c7428ee311525ef7d2fc9d69a70d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747633c57415c7428ee311525ef7d2fc9d69a70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747633c57415c7428ee311525ef7d2fc9d69a70d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747633c57415c7428ee311525ef7d2fc9d69a70d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723d95fe2b71f3bca4fbed6a1e4945d794f4698c"}], "stats": {"total": 69, "additions": 38, "deletions": 31}, "files": [{"sha": "856e5a99b0df721ef6a2cb554ca6c3dc178f031a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747633c57415c7428ee311525ef7d2fc9d69a70d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747633c57415c7428ee311525ef7d2fc9d69a70d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=747633c57415c7428ee311525ef7d2fc9d69a70d", "patch": "@@ -1,3 +1,14 @@\n+2011-09-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50319\n+\t* tree-if-conv.c (set_bb_predicate): Assert we only set\n+\tcanonical predicates.\n+\t(add_to_predicate_list): Simplify.  Allow TRUTH_NOT_EXPR\n+\taround canonical predicates.\n+\t(predicate_bbs): Do not re-gimplify already canonical\n+\tpredicates.  Properly unshare them though.\n+\t(find_phi_replacement_condition): Simplify.\n+\n 2011-09-07  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR target/49030"}, {"sha": "cdbbe5bd353860ba4de636148ff81cf333ef4a92", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747633c57415c7428ee311525ef7d2fc9d69a70d/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747633c57415c7428ee311525ef7d2fc9d69a70d/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=747633c57415c7428ee311525ef7d2fc9d69a70d", "patch": "@@ -137,6 +137,9 @@ bb_predicate (basic_block bb)\n static inline void\n set_bb_predicate (basic_block bb, tree cond)\n {\n+  gcc_assert ((TREE_CODE (cond) == TRUTH_NOT_EXPR\n+\t       && is_gimple_condexpr (TREE_OPERAND (cond, 0)))\n+\t      || is_gimple_condexpr (cond));\n   ((bb_predicate_p) bb->aux)->predicate = cond;\n }\n \n@@ -328,7 +331,7 @@ fold_or_predicates (location_t loc, tree c1, tree c2)\n static inline void\n add_to_predicate_list (basic_block bb, tree nc)\n {\n-  tree bc;\n+  tree bc, *tp;\n \n   if (is_true_predicate (nc))\n     return;\n@@ -339,19 +342,25 @@ add_to_predicate_list (basic_block bb, tree nc)\n     {\n       bc = bb_predicate (bb);\n       bc = fold_or_predicates (EXPR_LOCATION (bc), nc, bc);\n+      if (is_true_predicate (bc))\n+\t{\n+\t  reset_bb_predicate (bb);\n+\t  return;\n+\t}\n     }\n \n-  if (!is_gimple_condexpr (bc))\n+  /* Allow a TRUTH_NOT_EXPR around the main predicate.  */\n+  if (TREE_CODE (bc) == TRUTH_NOT_EXPR)\n+    tp = &TREE_OPERAND (bc, 0);\n+  else\n+    tp = &bc;\n+  if (!is_gimple_condexpr (*tp))\n     {\n       gimple_seq stmts;\n-      bc = force_gimple_operand (bc, &stmts, true, NULL_TREE);\n+      *tp = force_gimple_operand_1 (*tp, &stmts, is_gimple_condexpr, NULL_TREE);\n       add_bb_predicate_gimplified_stmts (bb, stmts);\n     }\n-\n-  if (is_true_predicate (bc))\n-    reset_bb_predicate (bb);\n-  else\n-    set_bb_predicate (bb, bc);\n+  set_bb_predicate (bb, bc);\n }\n \n /* Add the condition COND to the previous condition PREV_COND, and add\n@@ -944,14 +953,6 @@ predicate_bbs (loop_p loop)\n \t}\n \n       cond = bb_predicate (bb);\n-      if (cond\n-\t  && bb != loop->header)\n-\t{\n-\t  gimple_seq stmts;\n-\n-\t  cond = force_gimple_operand (cond, &stmts, true, NULL_TREE);\n-\t  add_bb_predicate_gimplified_stmts (bb, stmts);\n-\t}\n \n       for (itr = gsi_start_bb (bb); !gsi_end_p (itr); gsi_next (&itr))\n \t{\n@@ -980,14 +981,17 @@ predicate_bbs (loop_p loop)\n \t\t\t\t\t\t     &true_edge, &false_edge);\n \n \t\t/* If C is true, then TRUE_EDGE is taken.  */\n-\t\tadd_to_dst_predicate_list (loop, true_edge, cond, unshare_expr (c));\n+\t\tadd_to_dst_predicate_list (loop, true_edge,\n+\t\t\t\t\t   unshare_expr (cond),\n+\t\t\t\t\t   unshare_expr (c));\n \n \t\t/* If C is false, then FALSE_EDGE is taken.  */\n \t\tc2 = invert_truthvalue_loc (loc, unshare_expr (c));\n \t\ttem = canonicalize_cond_expr_cond (c2);\n \t\tif (tem)\n \t\t  c2 = tem;\n-\t\tadd_to_dst_predicate_list (loop, false_edge, cond, c2);\n+\t\tadd_to_dst_predicate_list (loop, false_edge,\n+\t\t\t\t\t   unshare_expr (cond), c2);\n \n \t\tcond = NULL_TREE;\n \t\tbreak;\n@@ -1237,26 +1241,18 @@ find_phi_replacement_condition (struct loop *loop,\n       *cond = bb_predicate (second_edge->src);\n \n       if (TREE_CODE (*cond) == TRUTH_NOT_EXPR)\n-\t*cond = invert_truthvalue (*cond);\n+\t*cond = TREE_OPERAND (*cond, 0);\n       else\n \t/* Select non loop header bb.  */\n \tfirst_edge = second_edge;\n     }\n   else\n     *cond = bb_predicate (first_edge->src);\n \n-  /* Gimplify the condition: the vectorizer prefers to have gimple\n-     values as conditions.  Various targets use different means to\n-     communicate conditions in vector compare operations.  Using a\n-     gimple value allows the compiler to emit vector compare and\n-     select RTL without exposing compare's result.  */\n-  *cond = force_gimple_operand_gsi (gsi, unshare_expr (*cond),\n-\t\t\t\t    false, NULL_TREE,\n-\t\t\t\t    true, GSI_SAME_STMT);\n-  if (!is_gimple_reg (*cond) && !is_gimple_condexpr (*cond))\n-    *cond = ifc_temp_var (TREE_TYPE (*cond), unshare_expr (*cond), gsi);\n-\n-  gcc_assert (*cond);\n+  /* Gimplify the condition to a valid cond-expr conditonal operand.  */\n+  *cond = force_gimple_operand_gsi_1 (gsi, unshare_expr (*cond),\n+\t\t\t\t      is_gimple_condexpr, NULL_TREE,\n+\t\t\t\t      true, GSI_SAME_STMT);\n \n   return first_edge->src;\n }"}]}