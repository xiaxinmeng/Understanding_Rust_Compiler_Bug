{"sha": "884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg0YTc1N2EzMTQ1ZDQ1MWJhMWUyZDExYTlhNTZkYzFjZDNmMGYzZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-30T22:29:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-30T22:29:42Z"}, "message": "stl_algobase.h: Fully qualify standard functions with std::, thus avoiding Koenig lookup.\n\n2003-06-30  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/stl_algobase.h: Fully qualify standard\n\tfunctions with std::, thus avoiding Koenig lookup.\n\nFrom-SVN: r68745", "tree": {"sha": "6609aec1ea8306f6dc8a9cccacebacf27778b485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6609aec1ea8306f6dc8a9cccacebacf27778b485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d/comments", "author": null, "committer": null, "parents": [{"sha": "d3632d41e2da6502060cfd4f20cf9004cb7d0302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3632d41e2da6502060cfd4f20cf9004cb7d0302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3632d41e2da6502060cfd4f20cf9004cb7d0302"}], "stats": {"total": 93, "additions": 49, "deletions": 44}, "files": [{"sha": "731de3114b2980461461a99896f52a710846221c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d", "patch": "@@ -1,3 +1,8 @@\n+2003-06-30  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_algobase.h: Fully qualify standard\n+\tfunctions with std::, thus avoiding Koenig lookup.\n+\n 2003-06-30  Doug Gregor <dgregor@apple.com>\n \t\n \t* include/bits/locale_facets.tcc (money_get::do_get): Avoid"}, {"sha": "689953287a1f9ad757cca2b75f9a8a1f2adce151", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=884a757a3145d451ba1e2d11a9a56dc1cd3f0f3d", "patch": "@@ -240,32 +240,32 @@ namespace std\n     inline _Tp*\n     __copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result)\n     {\n-      memmove(__result, __first, sizeof(_Tp) * (__last - __first));\n+      std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));\n       return __result + (__last - __first);\n     }\n \n   template<typename _InputIterator, typename _OutputIterator>\n     inline _OutputIterator\n     __copy_aux2(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result, __false_type)\n-    { return __copy(__first, __last, __result, __iterator_category(__first)); }\n+    { return std::__copy(__first, __last, __result, __iterator_category(__first)); }\n \n   template<typename _InputIterator, typename _OutputIterator>\n     inline _OutputIterator\n     __copy_aux2(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result, __true_type)\n-    { return __copy(__first, __last, __result, __iterator_category(__first)); }\n+    { return std::__copy(__first, __last, __result, __iterator_category(__first)); }\n \n   template<typename _Tp>\n     inline _Tp*\n     __copy_aux2(_Tp* __first, _Tp* __last, _Tp* __result, __true_type)\n-    { return __copy_trivial(__first, __last, __result); }\n+    { return std::__copy_trivial(__first, __last, __result); }\n \n   template<typename _Tp>\n     inline _Tp*\n     __copy_aux2(const _Tp* __first, const _Tp* __last, _Tp* __result, \n \t\t__true_type)\n-    { return __copy_trivial(__first, __last, __result); }\n+    { return std::__copy_trivial(__first, __last, __result); }\n \n   template<typename _InputIterator, typename _OutputIterator>\n     inline _OutputIterator\n@@ -276,8 +276,8 @@ namespace std\n \t  _ValueType;\n       typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator\n \t  _Trivial;\n-      return _OutputIterator(__copy_aux2(__first, __last, __result.base(),\n-\t\t\t\t\t _Trivial()));\n+      return _OutputIterator(std::__copy_aux2(__first, __last, __result.base(),\n+\t\t\t\t\t      _Trivial()));\n     }\n \n   template<typename _InputIterator, typename _OutputIterator>\n@@ -288,7 +288,7 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator\n           _Trivial;\n-      return __copy_aux2(__first, __last, __result, _Trivial());\n+      return std::__copy_aux2(__first, __last, __result, _Trivial());\n     }\n \n   template<typename _InputIterator, typename _OutputIterator>\n@@ -297,7 +297,7 @@ namespace std\n \t       _OutputIterator __result, __true_type)\n     {\n       typedef typename _Is_normal_iterator<_OutputIterator>::_Normal __Normal;\n-      return __copy_ni2(__first.base(), __last.base(), __result, __Normal());\n+      return std::__copy_ni2(__first.base(), __last.base(), __result, __Normal());\n     }\n \n   template<typename _InputIterator, typename _OutputIterator>\n@@ -306,7 +306,7 @@ namespace std\n \t       _OutputIterator __result, __false_type)\n     {\n       typedef typename _Is_normal_iterator<_OutputIterator>::_Normal __Normal;\n-      return __copy_ni2(__first, __last, __result, __Normal());\n+      return std::__copy_ni2(__first, __last, __result, __Normal());\n     }\n \n   /**\n@@ -332,7 +332,7 @@ namespace std\n \t    typename iterator_traits<_InputIterator>::value_type>)\n \n        typedef typename _Is_normal_iterator<_InputIterator>::_Normal __Normal;\n-       return __copy_ni1(__first, __last, __result, __Normal());\n+       return std::__copy_ni1(__first, __last, __result, __Normal());\n     }\n \n   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>\n@@ -369,8 +369,8 @@ namespace std\n       copy(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, \n \t   _BidirectionalIterator2 __result)\n       {\n-        return __copy_backward(__first, __last, __result, \n-\t\t\t       __iterator_category(__first));\n+        return std::__copy_backward(__first, __last, __result, \n+\t\t\t\t    __iterator_category(__first));\n       }\n     };\n \n@@ -381,7 +381,7 @@ namespace std\n       copy(const _Tp* __first, const _Tp* __last, _Tp* __result)\n       {\n \tconst ptrdiff_t _Num = __last - __first;\n-\tmemmove(__result - _Num, __first, sizeof(_Tp) * _Num);\n+\tstd::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);\n \treturn __result - _Num;\n       }\n     };\n@@ -392,7 +392,7 @@ namespace std\n       static _Tp*\n       copy(const _Tp* __first, const _Tp* __last, _Tp* __result)\n       {\n-\treturn  __copy_backward_dispatch<_Tp*, _Tp*, __true_type>\n+\treturn  std::__copy_backward_dispatch<_Tp*, _Tp*, __true_type>\n \t  ::copy(__first, __last, __result);\n       }\n     };\n@@ -403,32 +403,32 @@ namespace std\n     {\n       typedef typename __type_traits<typename iterator_traits<_BI2>::value_type>\n \t\t\t    ::has_trivial_assignment_operator _Trivial;\n-      return __copy_backward_dispatch<_BI1, _BI2, _Trivial>::copy(__first, \n-\t\t\t\t\t\t\t\t  __last, \n-\t\t\t\t\t\t\t\t  __result);\n+      return std::__copy_backward_dispatch<_BI1, _BI2, _Trivial>::copy(__first, \n+\t\t\t\t\t\t\t\t       __last, \n+\t\t\t\t\t\t\t\t       __result);\n     }\n \n   template <typename _BI1, typename _BI2>\n     inline _BI2\n     __copy_backward_output_normal_iterator(_BI1 __first, _BI1 __last,\n \t\t\t\t\t   _BI2 __result, __true_type)\n-    { return _BI2(__copy_backward_aux(__first, __last, __result.base())); }\n+    { return _BI2(std::__copy_backward_aux(__first, __last, __result.base())); }\n \n   template <typename _BI1, typename _BI2>\n     inline _BI2\n     __copy_backward_output_normal_iterator(_BI1 __first, _BI1 __last,\n \t\t\t\t\t   _BI2 __result, __false_type)\n-    { return __copy_backward_aux(__first, __last, __result); }\n+    { return std::__copy_backward_aux(__first, __last, __result); }\n \n   template <typename _BI1, typename _BI2>\n     inline _BI2\n     __copy_backward_input_normal_iterator(_BI1 __first, _BI1 __last,\n \t\t\t\t\t  _BI2 __result, __true_type)\n     {\n       typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;\n-      return __copy_backward_output_normal_iterator(__first.base(),\n-\t\t\t\t\t\t    __last.base(), __result, \n-\t\t\t\t\t\t    __Normal());\n+      return std::__copy_backward_output_normal_iterator(__first.base(),\n+\t\t\t\t\t\t\t __last.base(), __result, \n+\t\t\t\t\t\t\t __Normal());\n     }\n \n   template <typename _BI1, typename _BI2>\n@@ -437,8 +437,8 @@ namespace std\n \t\t\t\t\t  _BI2 __result, __false_type)\n     {\n       typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;\n-      return __copy_backward_output_normal_iterator(__first, __last, __result,\n-\t\t\t\t\t\t    __Normal());\n+      return std::__copy_backward_output_normal_iterator(__first, __last, __result,\n+\t\t\t\t\t\t\t __Normal());\n     }\n \n   /**\n@@ -467,8 +467,8 @@ namespace std\n \t    typename iterator_traits<_BI2>::value_type>)\n \n       typedef typename _Is_normal_iterator<_BI1>::_Normal __Normal;\n-      return __copy_backward_input_normal_iterator(__first, __last, __result,\n-\t\t\t\t\t\t   __Normal());\n+      return std::__copy_backward_input_normal_iterator(__first, __last, __result,\n+\t\t\t\t\t\t\t__Normal());\n     }\n \n \n@@ -522,44 +522,44 @@ namespace std\n   fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)\n   {\n     unsigned char __tmp = __c;\n-    memset(__first, __tmp, __last - __first);\n+    std::memset(__first, __tmp, __last - __first);\n   }\n \n   inline void\n   fill(signed char* __first, signed char* __last, const signed char& __c)\n   {\n     signed char __tmp = __c;\n-    memset(__first, static_cast<unsigned char>(__tmp), __last - __first);\n+    std::memset(__first, static_cast<unsigned char>(__tmp), __last - __first);\n   }\n \n   inline void\n   fill(char* __first, char* __last, const char& __c)\n   {\n     char __tmp = __c;\n-    memset(__first, static_cast<unsigned char>(__tmp), __last - __first);\n+    std::memset(__first, static_cast<unsigned char>(__tmp), __last - __first);\n   }\n \n   template<typename _Size>\n     inline unsigned char*\n     fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)\n     {\n-      fill(__first, __first + __n, __c);\n+      std::fill(__first, __first + __n, __c);\n       return __first + __n;\n     }\n \n   template<typename _Size>\n     inline signed char*\n     fill_n(char* __first, _Size __n, const signed char& __c)\n     {\n-      fill(__first, __first + __n, __c);\n+      std::fill(__first, __first + __n, __c);\n       return __first + __n;\n     }\n \n   template<typename _Size>\n     inline char*\n     fill_n(char* __first, _Size __n, const char& __c)\n     {\n-      fill(__first, __first + __n, __c);\n+      std::fill(__first, __first + __n, __c);\n       return __first + __n;\n     }\n \n@@ -594,7 +594,7 @@ namespace std\n \t  ++__first1;\n \t  ++__first2;\n         }\n-      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n+      return std::pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n   /**\n@@ -625,7 +625,7 @@ namespace std\n \t  ++__first1;\n \t  ++__first2;\n         }\n-      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n+      return std::pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n   /**\n@@ -763,7 +763,7 @@ namespace std\n   {\n     const size_t __len1 = __last1 - __first1;\n     const size_t __len2 = __last2 - __first2;\n-    const int __result = memcmp(__first1, __first2, std::min(__len1, __len2));\n+    const int __result = std::memcmp(__first1, __first2, std::min(__len1, __len2));\n     return __result != 0 ? __result < 0 : __len1 < __len2;\n   }\n \n@@ -772,15 +772,15 @@ namespace std\n \t\t\t  const char* __first2, const char* __last2)\n   {\n #if CHAR_MAX == SCHAR_MAX\n-    return lexicographical_compare((const signed char*) __first1,\n-\t\t\t\t   (const signed char*) __last1,\n-\t\t\t\t   (const signed char*) __first2,\n-\t\t\t\t   (const signed char*) __last2);\n+    return std::lexicographical_compare((const signed char*) __first1,\n+\t\t\t\t\t(const signed char*) __last1,\n+\t\t\t\t\t(const signed char*) __first2,\n+\t\t\t\t\t(const signed char*) __last2);\n #else /* CHAR_MAX == SCHAR_MAX */\n-    return lexicographical_compare((const unsigned char*) __first1,\n-\t\t\t\t   (const unsigned char*) __last1,\n-\t\t\t\t   (const unsigned char*) __first2,\n-\t\t\t\t   (const unsigned char*) __last2);\n+    return std::lexicographical_compare((const unsigned char*) __first1,\n+\t\t\t\t\t(const unsigned char*) __last1,\n+\t\t\t\t\t(const unsigned char*) __first2,\n+\t\t\t\t\t(const unsigned char*) __last2);\n #endif /* CHAR_MAX == SCHAR_MAX */\n   }\n "}]}