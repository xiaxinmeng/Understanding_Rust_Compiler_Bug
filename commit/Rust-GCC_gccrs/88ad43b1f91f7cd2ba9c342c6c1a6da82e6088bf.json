{"sha": "88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhZDQzYjFmOTFmN2NkMmJhOWMzNDJjNmMxYTZkYTgyZTYwODhiZg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-06-16T07:49:06Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-06-16T07:49:06Z"}, "message": "re PR d/90651 (ICE in FuncDeclaration::semantic3, at d/dmd/func.c:1524)\n\n\tPR d/90651\nd/dmd: Merge upstream dmd 0f6cbbcad\n\nFixes segmentation fault in FuncDeclaration::semantic3.\n\nReviewed-on: https://github.com/dlang/dmd/pull/10003\n\ngcc/d/ChangeLog:\n\n2019-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* typeinfo.cc (object_module): New variable.\n\t(make_frontend_typeinfo): Update signature.  Set temporary on\n\tgenerated TypeInfo classes.\n\t(create_tinfo_types): Set object_module.  Move generation of front-end\n\ttypeinfo into ...\n\t(create_frontend_tinfo_types): ... New function.\n\t(layout_typeinfo): Call create_frontend_tinfo_types.\n\t(layout_classinfo): Likewise.\n\t(layout_cpp_typeinfo): Likewise.\n\t(create_typeinfo): Likewise.\n\nFrom-SVN: r272345", "tree": {"sha": "57131c9c2449ea596790736ae8ad297416d7e1b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57131c9c2449ea596790736ae8ad297416d7e1b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1543fb19ba17a455b0e9df5e373a1643082f5d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1543fb19ba17a455b0e9df5e373a1643082f5d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1543fb19ba17a455b0e9df5e373a1643082f5d2"}], "stats": {"total": 218, "additions": 183, "deletions": 35}, "files": [{"sha": "8b6ce8551c2f293448f9bfe176fbbaf8ca850033", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -1,3 +1,17 @@\n+2019-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/90651\n+\t* typeinfo.cc (object_module): New variable.\n+\t(make_frontend_typeinfo): Update signature.  Set temporary on\n+\tgenerated TypeInfo classes.\n+\t(create_tinfo_types): Set object_module.  Move generation of front-end\n+\ttypeinfo into ...\n+\t(create_frontend_tinfo_types): ... New function.\n+\t(layout_typeinfo): Call create_frontend_tinfo_types.\n+\t(layout_classinfo): Likewise.\n+\t(layout_cpp_typeinfo): Likewise.\n+\t(create_typeinfo): Likewise.\n+\n 2019-06-11  Richard Biener  <rguenthe@suse.de>\n \n \td/90778"}, {"sha": "7b46e8f3da03402dc950c663a3fd0070ac7b88d5", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -1,4 +1,4 @@\n-ab03e2918508d62efcc5ee66c9a912a331b33aa0\n+3be8a80bb0c4e01c436be970ac3555ceabb3caf8\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "5177f9f6449431ef01d20517c7fd6f7c05a0391c", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -1806,11 +1806,19 @@ class ExpressionSemanticVisitor : public Visitor\n         Expression *e;\n         if (ea && ta->toBasetype()->ty == Tclass)\n         {\n-            /* Get the dynamic type, which is .classinfo\n-            */\n-            ea = semantic(ea, sc);\n-            e = new TypeidExp(ea->loc, ea);\n-            e->type = Type::typeinfoclass->type;\n+            if (!Type::typeinfoclass)\n+            {\n+                error(exp->loc, \"`object.TypeInfo_Class` could not be found, but is implicitly used\");\n+                e = new ErrorExp();\n+            }\n+            else\n+            {\n+                /* Get the dynamic type, which is .classinfo\n+                */\n+                ea = semantic(ea, sc);\n+                e = new TypeidExp(ea->loc, ea);\n+                e->type = Type::typeinfoclass->type;\n+            }\n         }\n         else if (ta->ty == Terror)\n         {"}, {"sha": "04c70cf3b7b3b99b514c88b3d1e00ac963a3280d", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -1520,6 +1520,18 @@ void FuncDeclaration::semantic3(Scope *sc)\n         {\n             if (f->linkage == LINKd)\n             {\n+                // Variadic arguments depend on Typeinfo being defined\n+                if (!global.params.useTypeInfo || !Type::dtypeinfo || !Type::typeinfotypelist)\n+                {\n+                    if (!global.params.useTypeInfo)\n+                        error(\"D-style variadic functions cannot be used with -betterC\");\n+                    else if (!Type::typeinfotypelist)\n+                        error(\"`object.TypeInfo_Tuple` could not be found, but is implicitly used in D-style variadic functions\");\n+                    else\n+                        error(\"`object.TypeInfo` could not be found, but is implicitly used in D-style variadic functions\");\n+                    fatal();\n+                }\n+\n                 // Declare _arguments[]\n                 v_arguments = new VarDeclaration(Loc(), Type::typeinfotypelist->type, Id::_arguments_typeinfo, NULL);\n                 v_arguments->storage_class |= STCtemp | STCparameter;"}, {"sha": "1757b498debb7af6e0b23ea1b645ab1485355803", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -8350,7 +8350,12 @@ Expression *TypeClass::dotExp(Scope *sc, Expression *e, Identifier *ident, int f\n \n         if (ident == Id::classinfo)\n         {\n-            assert(Type::typeinfoclass);\n+            if (!Type::typeinfoclass)\n+            {\n+                error(e->loc, \"`object.TypeInfo_Class` could not be found, but is implicitly used\");\n+                return new ErrorExp();\n+            }\n+\n             Type *t = Type::typeinfoclass->type;\n             if (e->op == TOKtype || e->op == TOKdottype)\n             {"}, {"sha": "25bdb42d7626d842152805d977ac00ceb33f20c0", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 57, "deletions": 28, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -185,28 +185,36 @@ make_internal_typeinfo (tinfo_kind tk, Identifier *ident, ...)\n   va_end (ap);\n }\n \n-/* Helper for create_tinfo_types.  Creates a typeinfo class declaration\n-   incase one wasn't supplied by reading `object.d'.  */\n+/* Reference to the `object` module, where all TypeInfo is defined.  */\n+\n+static Module *object_module;\n+\n+/* Helper for create_frontend_tinfo_types.  Creates a typeinfo class\n+   declaration incase one wasn't supplied by reading `object.d'.  */\n \n static void\n-make_frontend_typeinfo (Module *mod, Identifier *ident,\n-\t\t\tClassDeclaration *base = NULL)\n+make_frontend_typeinfo (Identifier *ident, ClassDeclaration *base = NULL)\n {\n   if (!base)\n     base = Type::dtypeinfo;\n \n+  gcc_assert (object_module);\n+\n   /* Create object module in order to complete the semantic.  */\n-  if (!mod->_scope)\n-    mod->importAll (NULL);\n+  if (!object_module->_scope)\n+    object_module->importAll (NULL);\n \n   /* Assignment of global typeinfo variables is managed by the ClassDeclaration\n      constructor, so only need to new the declaration here.  */\n-  Loc loc = (mod->md) ? mod->md->loc : mod->loc;\n+  Loc loc = (object_module->md) ? object_module->md->loc : object_module->loc;\n   ClassDeclaration *tinfo = ClassDeclaration::create (loc, ident, NULL, NULL,\n \t\t\t\t\t\t      true);\n-  tinfo->parent = mod;\n-  tinfo->semantic (mod->_scope);\n+  tinfo->parent = object_module;\n+  tinfo->semantic (object_module->_scope);\n   tinfo->baseClass = base;\n+  /* This is a compiler generated class, and shouldn't be mistaken for being\n+     the type declared in the runtime library.  */\n+  tinfo->storage_class |= STCtemp;\n }\n \n /* Make sure the required builtin types exist for generating the TypeInfo\n@@ -227,69 +235,78 @@ create_tinfo_types (Module *mod)\n \t\t\t  ptr_type_node, d_uint_type, ptr_type_node,\n \t\t\t  array_type_node, ptr_type_node, ptr_type_node, NULL);\n \n+  object_module = mod;\n+}\n+\n+/* Same as create_tinfo_types, but builds all front-end TypeInfo variable\n+   definitions.  */\n+\n+static void\n+create_frontend_tinfo_types (void)\n+{\n   /* If there's no Object class defined, then neither can TypeInfo be.  */\n-  if (ClassDeclaration::object == NULL)\n+  if (object_module == NULL || ClassDeclaration::object == NULL)\n     return;\n \n   /* Create all frontend TypeInfo classes declarations.  We rely on all\n      existing, even if only just as stubs.  */\n   if (!Type::dtypeinfo)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo\"),\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo\"),\n \t\t\t    ClassDeclaration::object);\n \n   if (!Type::typeinfoclass)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Class\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Class\"));\n \n   if (!Type::typeinfointerface)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Interface\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Interface\"));\n \n   if (!Type::typeinfostruct)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Struct\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Struct\"));\n \n   if (!Type::typeinfopointer)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Pointer\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Pointer\"));\n \n   if (!Type::typeinfoarray)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Array\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Array\"));\n \n   if (!Type::typeinfostaticarray)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_StaticArray\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_StaticArray\"));\n \n   if (!Type::typeinfoassociativearray)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_AssociativeArray\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_AssociativeArray\"));\n \n   if (!Type::typeinfoenum)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Enum\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Enum\"));\n \n   if (!Type::typeinfofunction)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Function\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Function\"));\n \n   if (!Type::typeinfodelegate)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Delegate\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Delegate\"));\n \n   if (!Type::typeinfotypelist)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Tuple\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Tuple\"));\n \n   if (!Type::typeinfoconst)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Const\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Const\"));\n \n   if (!Type::typeinfoinvariant)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Invariant\"),\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Invariant\"),\n \t\t\t    Type::typeinfoconst);\n \n   if (!Type::typeinfoshared)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Shared\"),\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Shared\"),\n \t\t\t    Type::typeinfoconst);\n \n   if (!Type::typeinfowild)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Wild\"),\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Wild\"),\n \t\t\t    Type::typeinfoconst);\n \n   if (!Type::typeinfovector)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"TypeInfo_Vector\"));\n+    make_frontend_typeinfo (Identifier::idPool (\"TypeInfo_Vector\"));\n \n   if (!ClassDeclaration::cpp_type_info_ptr)\n-    make_frontend_typeinfo (mod, Identifier::idPool (\"__cpp_type_info_ptr\"),\n+    make_frontend_typeinfo (Identifier::idPool (\"__cpp_type_info_ptr\"),\n \t\t\t    ClassDeclaration::object);\n }\n \n@@ -1132,6 +1149,9 @@ class TypeInfoVisitor : public Visitor\n tree\n layout_typeinfo (TypeInfoDeclaration *d)\n {\n+  if (!Type::dtypeinfo)\n+    create_frontend_tinfo_types ();\n+\n   tree type = TREE_TYPE (get_typeinfo_decl (d));\n   TypeInfoVisitor v = TypeInfoVisitor (type);\n   d->accept (&v);\n@@ -1144,6 +1164,9 @@ layout_typeinfo (TypeInfoDeclaration *d)\n tree\n layout_classinfo (ClassDeclaration *cd)\n {\n+  if (!Type::dtypeinfo)\n+    create_frontend_tinfo_types ();\n+\n   TypeInfoClassDeclaration *d = TypeInfoClassDeclaration::create (cd->type);\n   tree type = TREE_TYPE (get_classinfo_decl (cd));\n   TypeInfoVisitor v = TypeInfoVisitor (type);\n@@ -1366,6 +1389,9 @@ build_typeinfo (const Loc &loc, Type *type)\n void\n layout_cpp_typeinfo (ClassDeclaration *cd)\n {\n+  if (!Type::dtypeinfo)\n+    create_frontend_tinfo_types ();\n+\n   gcc_assert (cd->isCPPclass ());\n \n   tree decl = get_cpp_typeinfo_decl (cd);\n@@ -1434,6 +1460,9 @@ get_cpp_typeinfo_decl (ClassDeclaration *decl)\n void\n create_typeinfo (Type *type, Module *mod)\n {\n+  if (!Type::dtypeinfo)\n+    create_frontend_tinfo_types ();\n+\n   /* Do this since not all Type's are merged.  */\n   Type *t = type->merge2 ();\n   Identifier *ident;"}, {"sha": "c7060b0d96ce14da5fb30b1d0fa05eb72219459f", "filename": "gcc/testsuite/gdc.test/fail_compilation/extra-files/minimal/object.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fextra-files%2Fminimal%2Fobject.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fextra-files%2Fminimal%2Fobject.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fextra-files%2Fminimal%2Fobject.d?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -0,0 +1 @@\n+module object;"}, {"sha": "672db305223a02bcac5c35d3350a113995565afb", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19911a.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911a.d?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -0,0 +1,11 @@\n+/*\n+REQUIRED_ARGS: -betterC\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail19911a.d(9): Error: function `fail19911a.fun` D-style variadic functions cannot be used with -betterC\n+---\n+*/\n+\n+void fun(...)\n+{\n+}"}, {"sha": "b4ad22b0896561ac6b3bb49b7d0e0a2be9855d3b", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19911b.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911b.d?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -0,0 +1,13 @@\n+/* \n+DFLAGS:\n+REQUIRED_ARGS:\n+EXTRA_SOURCES: extra-files/minimal/object.d\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail19911b.d(10): Error: function `fail19911b.fun` `object.TypeInfo_Tuple` could not be found, but is implicitly used in D-style variadic functions\n+---\n+*/\n+\n+void fun(...)\n+{\n+}"}, {"sha": "d1e954ed394c9808e45673e9ba5253273a608e96", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19911c.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19911c.d?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -0,0 +1,17 @@\n+/* \n+DFLAGS:\n+REQUIRED_ARGS:\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail19911c.d(15): Error: function `object.fun` `object.TypeInfo` could not be found, but is implicitly used in D-style variadic functions\n+---\n+*/\n+\n+module object;\n+\n+class Object { }\n+class TypeInfo_Tuple { }\n+\n+void fun(...)\n+{\n+}"}, {"sha": "5c9e2bbe0ab5293a36066839edf8c59ae97b3fd4", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19922.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19922.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19922.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19922.d?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -0,0 +1,19 @@\n+/* \n+DFLAGS:\n+REQUIRED_ARGS:\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail19922.d(17): Error: `object.TypeInfo_Class` could not be found, but is implicitly used\n+---\n+*/\n+\n+module object;\n+\n+class Object {}\n+\n+void test()\n+{\n+    Object o;\n+    auto ti = typeid(o);\n+}\n+"}, {"sha": "042cf8af11ae4dbf5537dab7898039fb0efff9a9", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19923.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19923.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19923.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19923.d?ref=88ad43b1f91f7cd2ba9c342c6c1a6da82e6088bf", "patch": "@@ -0,0 +1,19 @@\n+/* \n+DFLAGS:\n+REQUIRED_ARGS:\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail19923.d(17): Error: `object.TypeInfo_Class` could not be found, but is implicitly used\n+---\n+*/\n+\n+module object;\n+\n+class Object {}\n+\n+void test()\n+{\n+    Object o;\n+    auto ti = o.classinfo;\n+}\n+"}]}