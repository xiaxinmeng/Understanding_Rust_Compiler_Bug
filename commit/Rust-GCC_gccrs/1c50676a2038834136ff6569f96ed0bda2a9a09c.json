{"sha": "1c50676a2038834136ff6569f96ed0bda2a9a09c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1MDY3NmEyMDM4ODM0MTM2ZmY2NTY5Zjk2ZWQwYmRhMmE5YTA5Yw==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2014-02-02T20:02:37Z"}, "committer": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2014-02-02T20:02:37Z"}, "message": "re PR c++/37140 (type inherited from base class not recognized)\n\n2014-02-02  Fabien Chene  <fabien@gcc.gnu.org>\n        PR c++/37140\n        * parser.c (cp_parser_nonclass_name): Call strip_using_decl and\n\tmove the code handling dependent USING_DECLs...\n        * name-lookup.c (strip_using_decl): ...Here.\n\n2014-02-02  Fabien Chene  <fabien@gcc.gnu.org>\n\n        PR c++/37140\n        * g++.dg/template/using27.C: New.\n\t* g++.dg/template/using28.C: New.\n\t* g++.dg/template/using29.C: New.\n\nFrom-SVN: r207408", "tree": {"sha": "b5cd3b5b66192646a47ac9095f2196b774f7fca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5cd3b5b66192646a47ac9095f2196b774f7fca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c50676a2038834136ff6569f96ed0bda2a9a09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c50676a2038834136ff6569f96ed0bda2a9a09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c50676a2038834136ff6569f96ed0bda2a9a09c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c50676a2038834136ff6569f96ed0bda2a9a09c/comments", "author": null, "committer": null, "parents": [{"sha": "7f82286eb63dadda3412c05f9ca7dd8e10ebaea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f82286eb63dadda3412c05f9ca7dd8e10ebaea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f82286eb63dadda3412c05f9ca7dd8e10ebaea5"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "57001c65c3701071226331d0275e5a3d094c6892", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50676a2038834136ff6569f96ed0bda2a9a09c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50676a2038834136ff6569f96ed0bda2a9a09c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1c50676a2038834136ff6569f96ed0bda2a9a09c", "patch": "@@ -14812,25 +14812,7 @@ cp_parser_nonclass_name (cp_parser* parser)\n   /* Look up the type-name.  */\n   type_decl = cp_parser_lookup_name_simple (parser, identifier, token->location);\n \n-  if (TREE_CODE (type_decl) == USING_DECL)\n-    {\n-      if (!DECL_DEPENDENT_P (type_decl))\n-\ttype_decl = strip_using_decl (type_decl);\n-      else if (USING_DECL_TYPENAME_P (type_decl))\n-\t{\n-\t  /* We have found a type introduced by a using\n-\t     declaration at class scope that refers to a dependent\n-\t     type.\n-\t     \n-\t     using typename :: [opt] nested-name-specifier unqualified-id ;\n-\t  */\n-\t  type_decl = make_typename_type (TREE_TYPE (type_decl),\n-\t\t\t\t\t  DECL_NAME (type_decl),\n-\t\t\t\t\t  typename_type, tf_error);\n-\t  if (type_decl != error_mark_node)\n-\t    type_decl = TYPE_NAME (type_decl);\n-\t}\n-    }\n+  type_decl = strip_using_decl (type_decl);\n   \n   if (TREE_CODE (type_decl) != TYPE_DECL\n       && (objc_is_id (identifier) || objc_is_class_name (identifier)))"}, {"sha": "f1835e17161c8bd7dc739f51f33c9567b8684d2f", "filename": "gcc/testsuite/g++.dg/template/using27.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50676a2038834136ff6569f96ed0bda2a9a09c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50676a2038834136ff6569f96ed0bda2a9a09c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing27.C?ref=1c50676a2038834136ff6569f96ed0bda2a9a09c", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/37140\n+\n+struct X\n+{\n+  typedef int nested_type;\n+};\n+\n+template <class T>\n+struct A\n+{\n+  typedef X type;\n+};\n+\n+template <class T>\n+struct B : A<T>\n+{\n+  using typename A<T>::type;\n+  typename type::nested_type x;\n+};\n+\n+template <class T> \n+struct C : B<T>\n+{\n+  using typename B<T>::type;\n+  typename type::nested_type y;\n+};\n+\n+struct D : C<int>\n+{\n+  using C<int>::type;\n+  type::nested_type z;\n+};\n+"}, {"sha": "52f68cfe467b9a7e4976d61703ed1e5c49b11b8d", "filename": "gcc/testsuite/g++.dg/template/using28.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50676a2038834136ff6569f96ed0bda2a9a09c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50676a2038834136ff6569f96ed0bda2a9a09c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing28.C?ref=1c50676a2038834136ff6569f96ed0bda2a9a09c", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/37140\n+\n+struct C\n+{\n+  static const int block_size = 1;\n+};\n+\n+template <typename T> struct A {\n+  typedef C type;\n+};\n+\n+template <typename T> struct B : public A<T> {\n+  using typename A<T>::type;\n+  static const int block_size = type::block_size;\n+};\n+\n+template class B<int>;"}, {"sha": "8726547efdb11d099a38691a279b8d60d6aa011d", "filename": "gcc/testsuite/g++.dg/template/using29.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50676a2038834136ff6569f96ed0bda2a9a09c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50676a2038834136ff6569f96ed0bda2a9a09c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing29.C?ref=1c50676a2038834136ff6569f96ed0bda2a9a09c", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/58047\n+\n+template <int N>\n+struct print_arg { };\n+\n+struct const_holder {\n+  static const int CONSTANT = 42;\n+};\n+\n+template <typename T>\n+struct identity {\n+  typedef T type;\n+};\n+\n+template <class T>\n+struct test_case : public identity<T> {\n+  using typename identity<T>::type;\n+  print_arg<type::CONSTANT> printer;\n+};\n+\n+template struct test_case<const_holder>;"}]}