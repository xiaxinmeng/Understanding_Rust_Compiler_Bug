{"sha": "3042e24bb1d8ab15520f58d9606025b69693c092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0MmUyNGJiMWQ4YWIxNTUyMGY1OGQ5NjA2MDI1YjY5NjkzYzA5Mg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-07-09T14:32:30Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-09T14:32:30Z"}, "message": "IIOException.java, [...]: New files.\n\n2004-07-09  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/IIOException.java,\n\tjavax/imageio/event/IIOReadProgressListener.java,\n\tjavax/imageio/event/IIOReadUpdateListener.java,\n\tjavax/imageio/event/IIOReadWarningListener.java,\n\tjavax/imageio/event/IIOWriteProgressListener.java,\n\tjavax/imageio/event/IIOWriteWarningListener.java:\n\tNew files.\n\t* Makefile.am: Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r84371", "tree": {"sha": "72e44442ef0864be5d4edf6c1865819155dfcc23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72e44442ef0864be5d4edf6c1865819155dfcc23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3042e24bb1d8ab15520f58d9606025b69693c092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3042e24bb1d8ab15520f58d9606025b69693c092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3042e24bb1d8ab15520f58d9606025b69693c092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3042e24bb1d8ab15520f58d9606025b69693c092/comments", "author": null, "committer": null, "parents": [{"sha": "4a738a8213b5aad93781aa58dd9b56b4cb56b936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a738a8213b5aad93781aa58dd9b56b4cb56b936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a738a8213b5aad93781aa58dd9b56b4cb56b936"}], "stats": {"total": 564, "additions": 562, "deletions": 2}, "files": [{"sha": "d11e67e176f22313e12217e62e517406e7297d89", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -1,3 +1,15 @@\n+2004-07-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/IIOException.java,\n+\tjavax/imageio/event/IIOReadProgressListener.java,\n+\tjavax/imageio/event/IIOReadUpdateListener.java,\n+\tjavax/imageio/event/IIOReadWarningListener.java,\n+\tjavax/imageio/event/IIOWriteProgressListener.java,\n+\tjavax/imageio/event/IIOWriteWarningListener.java:\n+\tNew files.\n+\t* Makefile.am: Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2004-07-09  Guilhem Lavaux <guilhem@kaffe.org>\n \n \t* java/text/RuleBasedCollator.java"}, {"sha": "482175ae4aadd2528b7ecf2c8d5b6cf51c2887ea", "filename": "libjava/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -1750,9 +1750,15 @@ javax/accessibility/AccessibleTable.java \\\n javax/accessibility/AccessibleTableModelChange.java \\\n javax/accessibility/AccessibleText.java \\\n javax/accessibility/AccessibleValue.java \\\n+javax/imageio/IIOException.java \\\n javax/imageio/ImageReader.java \\\n javax/imageio/ImageTranscoder.java \\\n javax/imageio/ImageWriter.java \\\n+javax/imageio/event/IIOReadProgressListener.java \\\n+javax/imageio/event/IIOReadUpdateListener.java \\\n+javax/imageio/event/IIOReadWarningListener.java \\\n+javax/imageio/event/IIOWriteProgressListener.java \\\n+javax/imageio/event/IIOWriteWarningListener.java \\\n javax/imageio/spi/IIOServiceProvider.java \\\n javax/imageio/spi/ImageInputStreamSpi.java \\\n javax/imageio/spi/ImageOutputStreamSpi.java \\"}, {"sha": "6c8f01cf04a4c7c27ed6fcf7ed37548220eba355", "filename": "libjava/Makefile.in", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -1431,9 +1431,15 @@ javax/accessibility/AccessibleTable.java \\\n javax/accessibility/AccessibleTableModelChange.java \\\n javax/accessibility/AccessibleText.java \\\n javax/accessibility/AccessibleValue.java \\\n+javax/imageio/IIOException.java \\\n javax/imageio/ImageReader.java \\\n javax/imageio/ImageTranscoder.java \\\n javax/imageio/ImageWriter.java \\\n+javax/imageio/event/IIOReadProgressListener.java \\\n+javax/imageio/event/IIOReadUpdateListener.java \\\n+javax/imageio/event/IIOReadWarningListener.java \\\n+javax/imageio/event/IIOWriteProgressListener.java \\\n+javax/imageio/event/IIOWriteWarningListener.java \\\n javax/imageio/spi/IIOServiceProvider.java \\\n javax/imageio/spi/ImageInputStreamSpi.java \\\n javax/imageio/spi/ImageOutputStreamSpi.java \\\n@@ -4307,8 +4313,13 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/accessibility/AccessibleTableModelChange.P \\\n .deps/javax/accessibility/AccessibleText.P \\\n .deps/javax/accessibility/AccessibleValue.P \\\n-.deps/javax/imageio/ImageReader.P .deps/javax/imageio/ImageTranscoder.P \\\n-.deps/javax/imageio/ImageWriter.P \\\n+.deps/javax/imageio/IIOException.P .deps/javax/imageio/ImageReader.P \\\n+.deps/javax/imageio/ImageTranscoder.P .deps/javax/imageio/ImageWriter.P \\\n+.deps/javax/imageio/event/IIOReadProgressListener.P \\\n+.deps/javax/imageio/event/IIOReadUpdateListener.P \\\n+.deps/javax/imageio/event/IIOReadWarningListener.P \\\n+.deps/javax/imageio/event/IIOWriteProgressListener.P \\\n+.deps/javax/imageio/event/IIOWriteWarningListener.P \\\n .deps/javax/imageio/spi/IIOServiceProvider.P \\\n .deps/javax/imageio/spi/ImageInputStreamSpi.P \\\n .deps/javax/imageio/spi/ImageOutputStreamSpi.P \\"}, {"sha": "5b743963a9536c1b315b427296d8ed7d6df556ee", "filename": "libjava/javax/imageio/IIOException.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2FIIOException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2FIIOException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FIIOException.java?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -0,0 +1,69 @@\n+/* IIOException.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.imageio;\n+\n+import java.io.IOException;\n+\n+\n+/**\n+ * @author Michael Koch <konqueror@gmx.de>\n+ */\n+public class IIOException extends IOException\n+{\n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message The descriptive error message.\n+   */\n+  public IIOException(String message)\n+  {\n+    super(message);\n+  }\n+\n+  /**\n+   * Create an exception with a descriptive error message.\n+   *\n+   * @param message The descriptive error message.\n+   * @param cause The cause for this exception.\n+   */\n+  public IIOException(String message, Throwable cause)\n+  {\n+    super(message);\n+    initCause(cause);\n+  }\n+}"}, {"sha": "157443257ed684995ebb58bad427df0823c129c3", "filename": "libjava/javax/imageio/event/IIOReadProgressListener.java", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadProgressListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadProgressListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadProgressListener.java?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -0,0 +1,116 @@\n+/* IIOReadProgressListener.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.imageio.event;\n+\n+import java.util.EventListener;\n+import javax.imageio.ImageReader;\n+\n+\n+public interface IIOReadProgressListener extends EventListener\n+{\n+  /**\n+   * Reports that the current image read operation has completed.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   */\n+  void imageComplete(ImageReader source);\n+\n+  /**\n+   * Reports the approximate percentage of completions of this image read\n+   * operation.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param percentageDone the approximate percentage of encoding completed\n+   */\n+  void imageProgress(ImageReader source, float percentageDone);\n+\n+  /**\n+   * Reports that the current image read operation has started.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param imageIndex the index of the image to read\n+   */\n+  void imageStarted(ImageReader source, int imageIndex);\n+\n+  /**\n+   * Reports that a read operation has been aborted.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   */\n+  void readAborted(ImageReader source);\n+\n+  /**\n+   * Reports that a sequence of read operationshas completed.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   */\n+  void sequenceComplete(ImageReader source);\n+\n+  /**\n+   * Reports that a sequence of read operations is beginning.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param minIndex the index of the first image to be read\n+   */\n+  void sequenceStarted(ImageReader source, int minIndex);\n+\n+  /**\n+   * Reports that a thumbnail read operation has completed.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   */\n+  void thumbnailComplete(ImageReader source);\n+\n+  /**\n+   * Reports the approximate percentage of completion of a thumbnail read\n+   * operation.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param percentageDone the approximate percentage of encoding completed\n+   */\n+  void thumbnailProgress(ImageReader source, float percentageDone);\n+\n+  /**\n+   * Reports that a thumbnail read operation is beginning.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param imageIndex the index of the image being read\n+   * @param thumbnailIndex the index of the thumbnail being read\n+   */\n+  void thumbnailStarted(ImageReader source, int imageIndex, int thumbnailIndex);\n+}"}, {"sha": "d51c852014b4dd19cb83b40a57a7c05bd633f495", "filename": "libjava/javax/imageio/event/IIOReadUpdateListener.java", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadUpdateListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadUpdateListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadUpdateListener.java?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -0,0 +1,132 @@\n+/* IIOReadUpdateListener.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.imageio.event;\n+\n+import java.awt.image.BufferedImage;\n+import java.util.EventListener;\n+import javax.imageio.ImageReader;\n+\n+\n+public interface IIOReadUpdateListener extends EventListener\n+{\n+  /**\n+   * Reports that a given region of the image has been updated.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param image the BufferedImage being updated\n+   * @param minX the X coordinate of the leftmost updated column of pixels\n+   * @param minY the Y coordinate of the uppermost updated row of pixels\n+   * @param width the number of updated pixels horizontally\n+   * @param height the number of updated pixels vertically\n+   * @param periodX the horizontal spacing between updated pixels; a value of 1 means no gaps\n+   * @param periodY the vertical spacing between updated pixels; a value of 1 means no gaps\n+   * @param bands an array of <code>int</code>s indicating which bands are being updated\n+   */\n+  void imageUpdate(ImageReader source, BufferedImage image, int minX,\n+                   int minY, int width, int height, int periodX, int periodY,\n+                   int[] bands);\n+\n+  /**\n+   * Reports that the current read operation has completed a progressive pass.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param image the BufferedImage being updated\n+   */\n+  void passComplete(ImageReader source, BufferedImage image);\n+\n+  /**\n+   * Reports that the current read operation is about to begin a progressive pass.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param image the BufferedImage being updated\n+   * @param pass the numer of the pass that is about to begin, starting with 0\n+   * @param minPass the index of the first pass that will be decoded\n+   * @param maxPass the index of the last pass that will be decoded\n+   * @param minX the X coordinate of the leftmost updated column of pixels\n+   * @param minY the Y coordinate of the uppermost updated row of pixels\n+   * @param periodX the horizontal spacing between updated pixels; a value of 1 means no gaps\n+   * @param periodY the vertical spacing between updated pixels; a value of 1 means no gaps\n+   * @param bands an array of <code>int</code>s indicating which bands are being updated\n+   */\n+  void passStarted(ImageReader source, BufferedImage image, int pass,\n+                   int minPass, int maxPass, int minX, int minY, int periodX,\n+                   int periodY, int[] bands);\n+\n+  /**\n+   * Reports that the current thumbnail read operation has completed a progressive pass.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param image the BufferedImage being updated\n+   */\n+  void thumbnailPassComplete(ImageReader source, BufferedImage image);\n+\n+  /**\n+   * Reports that the current thumbnail read operation is about to begin a progressive pass.\n+   * \n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param image the BufferedImage being updated\n+   * @param pass the numer of the pass that is about to begin, starting with 0\n+   * @param minPass the index of the first pass that will be decoded\n+   * @param maxPass the index of the last pass that will be decoded\n+   * @param minX the X coordinate of the leftmost updated column of pixels\n+   * @param minY the Y coordinate of the uppermost updated row of pixels\n+   * @param periodX the horizontal spacing between updated pixels; a value of 1 means no gaps\n+   * @param periodY the vertical spacing between updated pixels; a value of 1 means no gaps\n+   * @param bands an array of <code>int</code>s indicating which bands are being updated\n+   */\n+  void thumbnailPassStarted(ImageReader source, BufferedImage image, int pass,\n+                            int minPass, int maxPass, int minX, int minY,\n+                            int periodX, int periodY, int[] bands);\n+\n+  /**\n+   * Reports that a given region of a thumbnail image has been updated.\n+   *\n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param image the BufferedImage being updated\n+   * @param minX the X coordinate of the leftmost updated column of pixels\n+   * @param minY the Y coordinate of the uppermost updated row of pixels\n+   * @param width the number of updated pixels horizontally\n+   * @param height the number of updated pixels vertically\n+   * @param periodX the horizontal spacing between updated pixels; a value of 1 means no gaps\n+   * @param periodY the vertical spacing between updated pixels; a value of 1 means no gaps\n+   * @param bands an array of <code>int</code>s indicating which bands are being updated\n+   */\n+  void thumbnailUpdate(ImageReader source, BufferedImage image, int minX,\n+                       int minY, int width, int height, int periodX,\n+                       int periodY, int[] bands);\n+}"}, {"sha": "ab12df01ddf3fa0418df49f55d385ebc8a955d53", "filename": "libjava/javax/imageio/event/IIOReadWarningListener.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadWarningListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadWarningListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadWarningListener.java?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -0,0 +1,54 @@\n+/* IIOReadProgressListener.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.imageio.event;\n+\n+import java.util.EventListener;\n+import javax.imageio.ImageReader;\n+\n+\n+public interface IIOReadWarningListener extends EventListener\n+{\n+  /**\n+   * Reports the occurrence of a non-fatal error in decoding.\n+   * Decoding will continue after this method is called.\n+   *\n+   * @param source the <code>ImageReader</code> object calling this method\n+   * @param warning the warning\n+   */\n+  void warningOccurred(ImageReader source, String warning);\n+}"}, {"sha": "6158c54d588ceb2d4f45f087254b0bb3d87e4701", "filename": "libjava/javax/imageio/event/IIOWriteProgressListener.java", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteProgressListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteProgressListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteProgressListener.java?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -0,0 +1,101 @@\n+/* IIOWriteProgressListener.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.imageio.event;\n+\n+import java.util.EventListener;\n+import javax.imageio.ImageWriter;\n+\n+\n+public interface IIOWriteProgressListener extends EventListener\n+{\n+  /**\n+   * Reports that an image write operation has completed.\n+   * \n+   * @param source the <code>ImageWriter</code> object calling this method\n+   */\n+  void imageComplete(ImageWriter source);\n+\n+  /**\n+   * Reports the approximate percentage of completion of an image write\n+   * operation.\n+   * \n+   * @param source the <code>ImageWriter</code> object calling this method\n+   * @param percentageDone the approximate percentage of decoding completed\n+   */\n+  void imageProgress(ImageWriter source, float percentageDone);\n+\n+  /**\n+   * Reports that a thumbnail write operation has started.\n+   * \n+   * @param source the <code>ImageWriter</code> object calling this method\n+   * @param imageIndex the index of the image being written\n+   */\n+  void imageStarted(ImageWriter source, int imageIndex);\n+\n+  /**\n+   * Reports that a thumbnail write operation has completed.\n+   * \n+   * @param source the <code>ImageWriter</code> object calling this method\n+   */\n+  void thumbnailComplete(ImageWriter source);\n+\n+  /**\n+   * Reports the approximate percentage of completion of a thumbnail write\n+   * operation.\n+   * \n+   * @param source the <code>ImageWriter</code> object calling this method\n+   * @param percentageDone the approximate percentage of decoding completed\n+   */\n+  void thumbnailProgress(ImageWriter source, float percentageDone);\n+\n+  /**\n+   * Reports that a thumbnail write operation is beginning.\n+   * \n+   * @param source the <code>ImageWriter</code> object calling this method\n+   * @param imageIndex the index of the image being written\n+   * @param thumnailIndex the index of the thumbnail being written\n+   */\n+  void thumbnailStarted(ImageWriter source, int imageIndex, int thumnailIndex);\n+\n+  /**\n+   * Reports that an image write operation is aborted.\n+   * \n+   * @param source the <code>ImageWriter</code> object calling this method\n+   */\n+  void writeAborted(ImageWriter source);\n+}"}, {"sha": "a0630c9ac1911178569a9b1eb3b3e8e811124461", "filename": "libjava/javax/imageio/event/IIOWriteWarningListener.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteWarningListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3042e24bb1d8ab15520f58d9606025b69693c092/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteWarningListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteWarningListener.java?ref=3042e24bb1d8ab15520f58d9606025b69693c092", "patch": "@@ -0,0 +1,59 @@\n+/* IIOWriteWarningListener.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.imageio.event;\n+\n+import java.util.EventListener;\n+import javax.imageio.ImageWriter;\n+\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public interface IIOWriteWarningListener extends EventListener\n+{\n+  /**\n+   * Reports the occurrence of a non-fatal error in encoding.\n+   * Encoding will continue after this method is called.\n+   *\n+   * @param source the <code>ImageWriter</code> object calling this method\n+   * @param imageIndex the index of the image generating this warning,\n+   * starting with 0\n+   * @param warning the warning\n+   */\n+  void warningOccurred(ImageWriter source, int imageIndex, String warning);\n+}"}]}