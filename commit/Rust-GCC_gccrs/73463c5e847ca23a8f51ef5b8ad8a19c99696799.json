{"sha": "73463c5e847ca23a8f51ef5b8ad8a19c99696799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0NjNjNWU4NDdjYTIzYThmNTFlZjViOGFkOGExOWM5OTY5Njc5OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-05T13:37:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-05T13:37:15Z"}, "message": "Add a build_real_truncate helper function\n\n...which simplifies the match.pd patterns I'm about to add.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.\n\ngcc/\n\t* real.h (build_real_truncate): Declare.\n\t* tree.c (build_real_truncate): New function.\n\t(strip_float_extensions): Use it.\n\t* builtins.c (fold_builtin_cabs, fold_builtin_sqrt, fold_builtin_cbrt)\n\t(fold_builtin_hypot, fold_builtin_pow): Likewise.\n\t* match.pd: Likewise.\n\nFrom-SVN: r228483", "tree": {"sha": "1e4a42eb36f306f1da5a94e136fcbde03c213296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e4a42eb36f306f1da5a94e136fcbde03c213296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73463c5e847ca23a8f51ef5b8ad8a19c99696799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73463c5e847ca23a8f51ef5b8ad8a19c99696799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73463c5e847ca23a8f51ef5b8ad8a19c99696799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73463c5e847ca23a8f51ef5b8ad8a19c99696799/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b295a81dd8e7650d334dc71581e64d5736bc3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b295a81dd8e7650d334dc71581e64d5736bc3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b295a81dd8e7650d334dc71581e64d5736bc3ab"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "5c782900fd3e0a3d7bf0ec1ba942d450f35b1d8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73463c5e847ca23a8f51ef5b8ad8a19c99696799", "patch": "@@ -1,3 +1,12 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* real.h (build_real_truncate): Declare.\n+\t* tree.c (build_real_truncate): New function.\n+\t(strip_float_extensions): Use it.\n+\t* builtins.c (fold_builtin_cabs, fold_builtin_sqrt, fold_builtin_cbrt)\n+\t(fold_builtin_hypot, fold_builtin_pow): Likewise.\n+\t* match.pd: Likewise.\n+\n 2015-10-05 James Greenhalgh <james.greenhalgh@arm.com>\n \t   Jiong Wang  <jiong.wang@arm.com>\n "}, {"sha": "89bea60a09df38f5872933168a7200e33f6efbe6", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=73463c5e847ca23a8f51ef5b8ad8a19c99696799", "patch": "@@ -7592,12 +7592,10 @@ fold_builtin_cabs (location_t loc, tree arg, tree type, tree fndecl)\n       if (flag_unsafe_math_optimizations\n \t  && operand_equal_p (real, imag, OEP_PURE_SAME))\n         {\n-\t  const REAL_VALUE_TYPE sqrt2_trunc\n-\t    = real_value_truncate (TYPE_MODE (type), dconst_sqrt2 ());\n \t  STRIP_NOPS (real);\n \t  return fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t      fold_build1_loc (loc, ABS_EXPR, type, real),\n-\t\t\t      build_real (type, sqrt2_trunc));\n+\t\t\t\t  fold_build1_loc (loc, ABS_EXPR, type, real),\n+\t\t\t\t  build_real_truncate (type, dconst_sqrt2 ()));\n \t}\n     }\n \n@@ -7756,8 +7754,7 @@ fold_builtin_sqrt (location_t loc, tree arg, tree type)\n \n \t  /* Adjust for the outer root.  */\n \t  SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n-\t  dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n-\t  tree_root = build_real (type, dconstroot);\n+\t  tree_root = build_real_truncate (type, dconstroot);\n \t  return build_call_expr_loc (loc, powfn, 2, arg0, tree_root);\n \t}\n     }\n@@ -7804,11 +7801,9 @@ fold_builtin_cbrt (location_t loc, tree arg, tree type)\n       if (BUILTIN_EXPONENT_P (fcode))\n \t{\n \t  tree expfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n-\t  const REAL_VALUE_TYPE third_trunc =\n-\t    real_value_truncate (TYPE_MODE (type), dconst_third ());\n \t  arg = fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t     CALL_EXPR_ARG (arg, 0),\n-\t\t\t     build_real (type, third_trunc));\n+\t\t\t\t CALL_EXPR_ARG (arg, 0),\n+\t\t\t\t build_real_truncate (type, dconst_third ()));\n \t  return build_call_expr_loc (loc, expfn, 1, arg);\n \t}\n \n@@ -7824,8 +7819,7 @@ fold_builtin_cbrt (location_t loc, tree arg, tree type)\n \t      REAL_VALUE_TYPE dconstroot = dconst_third ();\n \n \t      SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n-\t      dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n-\t      tree_root = build_real (type, dconstroot);\n+\t      tree_root = build_real_truncate (type, dconstroot);\n \t      return build_call_expr_loc (loc, powfn, 2, arg0, tree_root);\n \t    }\n \t}\n@@ -7845,8 +7839,7 @@ fold_builtin_cbrt (location_t loc, tree arg, tree type)\n \n \t\t  real_arithmetic (&dconstroot, MULT_EXPR,\n                                    dconst_third_ptr (), dconst_third_ptr ());\n-\t\t  dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n-\t\t  tree_root = build_real (type, dconstroot);\n+\t\t  tree_root = build_real_truncate (type, dconstroot);\n \t\t  return build_call_expr_loc (loc, powfn, 2, arg0, tree_root);\n \t\t}\n \t    }\n@@ -7862,10 +7855,8 @@ fold_builtin_cbrt (location_t loc, tree arg, tree type)\n \t  if (tree_expr_nonnegative_p (arg00))\n \t    {\n \t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n-\t      const REAL_VALUE_TYPE dconstroot\n-\t\t= real_value_truncate (TYPE_MODE (type), dconst_third ());\n-\t      tree narg01 = fold_build2_loc (loc, MULT_EXPR, type, arg01,\n-\t\t\t\t\t build_real (type, dconstroot));\n+\t      tree c = build_real_truncate (type, dconst_third ());\n+\t      tree narg01 = fold_build2_loc (loc, MULT_EXPR, type, arg01, c);\n \t      return build_call_expr_loc (loc, powfn, 2, arg00, narg01);\n \t    }\n \t}\n@@ -8391,13 +8382,9 @@ fold_builtin_hypot (location_t loc, tree fndecl,\n   /* hypot(x,x) -> fabs(x)*sqrt(2).  */\n   if (flag_unsafe_math_optimizations\n       && operand_equal_p (arg0, arg1, OEP_PURE_SAME))\n-    {\n-      const REAL_VALUE_TYPE sqrt2_trunc\n-\t= real_value_truncate (TYPE_MODE (type), dconst_sqrt2 ());\n-      return fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t  fold_build1_loc (loc, ABS_EXPR, type, arg0),\n-\t\t\t  build_real (type, sqrt2_trunc));\n-    }\n+    return fold_build2_loc (loc, MULT_EXPR, type,\n+\t\t\t    fold_build1_loc (loc, ABS_EXPR, type, arg0),\n+\t\t\t    build_real_truncate (type, dconst_sqrt2 ()));\n \n   return NULL_TREE;\n }\n@@ -8529,10 +8516,8 @@ fold_builtin_pow (location_t loc, tree fndecl, tree arg0, tree arg1, tree type)\n \t  tree arg = CALL_EXPR_ARG (arg0, 0);\n \t  if (tree_expr_nonnegative_p (arg))\n \t    {\n-\t      const REAL_VALUE_TYPE dconstroot\n-\t\t= real_value_truncate (TYPE_MODE (type), dconst_third ());\n-\t      tree narg1 = fold_build2_loc (loc, MULT_EXPR, type, arg1,\n-\t\t\t\t\tbuild_real (type, dconstroot));\n+\t      tree c = build_real_truncate (type, dconst_third ());\n+\t      tree narg1 = fold_build2_loc (loc, MULT_EXPR, type, arg1, c);\n \t      return build_call_expr_loc (loc, fndecl, 2, arg, narg1);\n \t    }\n \t}"}, {"sha": "9962b0ae3559d99f99ccedc2877753b13c190161", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=73463c5e847ca23a8f51ef5b8ad8a19c99696799", "patch": "@@ -2189,8 +2189,7 @@ along with GCC; see the file COPYING3.  If not see\n        {\n        CASE_FLT_FN (BUILT_IN_EXP):\n          /* Prepare to do logN(exp(exponent) -> exponent*logN(e).  */\n-\t x = build_real (type, real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t\t\t    dconst_e ()));\n+\t x = build_real_truncate (type, dconst_e ());\n          break;\n        CASE_FLT_FN (BUILT_IN_EXP2):\n          /* Prepare to do logN(exp2(exponent) -> exponent*logN(2).  */\n@@ -2226,8 +2225,7 @@ along with GCC; see the file COPYING3.  If not see\n          break;\n        CASE_FLT_FN (BUILT_IN_CBRT):\n \t /* Prepare to do logN(cbrt(x) -> (1/3)*logN(x).  */\n-         x = build_real (type, real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t\t\t    dconst_third ()));\n+         x = build_real_truncate (type, dconst_third ());\n          break;\n        default:\n \t gcc_unreachable ();"}, {"sha": "149727953de33f89f13b7fe1b07178e93cd8f3b2", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=73463c5e847ca23a8f51ef5b8ad8a19c99696799", "patch": "@@ -440,6 +440,9 @@ bool real_can_shorten_arithmetic (machine_mode, machine_mode);\n /* In tree.c: wrap up a REAL_VALUE_TYPE in a tree node.  */\n extern tree build_real (tree, REAL_VALUE_TYPE);\n \n+/* Likewise, but first truncate the value to the type.  */\n+extern tree build_real_truncate (tree, REAL_VALUE_TYPE);\n+\n /* Calculate R as X raised to the integer exponent N in mode MODE.  */\n extern bool real_powi (REAL_VALUE_TYPE *, machine_mode,\n \t\t       const REAL_VALUE_TYPE *, HOST_WIDE_INT);"}, {"sha": "f78a2c26cd7e00a0b1c6c680ae2d9f598a6477ba", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73463c5e847ca23a8f51ef5b8ad8a19c99696799/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=73463c5e847ca23a8f51ef5b8ad8a19c99696799", "patch": "@@ -1877,6 +1877,14 @@ build_real (tree type, REAL_VALUE_TYPE d)\n   return v;\n }\n \n+/* Like build_real, but first truncate D to the type.  */\n+\n+tree\n+build_real_truncate (tree type, REAL_VALUE_TYPE d)\n+{\n+  return build_real (type, real_value_truncate (TYPE_MODE (type), d));\n+}\n+\n /* Return a new REAL_CST node whose type is TYPE\n    and whose value is the integer value of the INTEGER_CST node I.  */\n \n@@ -12093,7 +12101,7 @@ strip_float_extensions (tree exp)\n \t       && exact_real_truncate (TYPE_MODE (double_type_node), &orig))\n \ttype = double_type_node;\n       if (type)\n-\treturn build_real (type, real_value_truncate (TYPE_MODE (type), orig));\n+\treturn build_real_truncate (type, orig);\n     }\n \n   if (!CONVERT_EXPR_P (exp))"}]}