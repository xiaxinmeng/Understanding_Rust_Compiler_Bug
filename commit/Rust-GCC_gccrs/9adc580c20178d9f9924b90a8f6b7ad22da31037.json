{"sha": "9adc580c20178d9f9924b90a8f6b7ad22da31037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkYzU4MGMyMDE3OGQ5Zjk5MjRiOTBhOGY2YjdhZDIyZGEzMTAzNw==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2011-04-06T09:52:52Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-04-06T09:52:52Z"}, "message": "arm.h (arm_class_likely_spilled_p): Check against LO_REGS only for Thumb-1.\n\n2011-03-06  Andrew Stubbs  <ams@codesourcery.com>\n\t    Julian Brown  <julian@codesourcery.com>\n\t    Mark Shinwell  <shinwell@codesourcery.com>\n\n\tgcc/\n\t* config/arm/arm.h (arm_class_likely_spilled_p): Check against\n\tLO_REGS only for Thumb-1.\n\t(MODE_BASE_REG_CLASS): Restrict base registers to those which can\n\tbe used in short instructions when optimising for size on Thumb-2.\n\n\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\nCo-Authored-By: Mark Shinwell <shinwell@codesourcery.com>\n\nFrom-SVN: r172032", "tree": {"sha": "69faf94e927998a7657cc3582d4d5bbe0d62c00c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69faf94e927998a7657cc3582d4d5bbe0d62c00c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9adc580c20178d9f9924b90a8f6b7ad22da31037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adc580c20178d9f9924b90a8f6b7ad22da31037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adc580c20178d9f9924b90a8f6b7ad22da31037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adc580c20178d9f9924b90a8f6b7ad22da31037/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33abfb6bdbc77c99a8b7f79b120f3581ab8b4249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33abfb6bdbc77c99a8b7f79b120f3581ab8b4249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33abfb6bdbc77c99a8b7f79b120f3581ab8b4249"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "a747d602a5069519c4866bd1164148d4ac1562b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adc580c20178d9f9924b90a8f6b7ad22da31037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adc580c20178d9f9924b90a8f6b7ad22da31037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9adc580c20178d9f9924b90a8f6b7ad22da31037", "patch": "@@ -1,3 +1,12 @@\n+2011-03-06  Andrew Stubbs  <ams@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* config/arm/arm.h (arm_class_likely_spilled_p): Check against\n+\tLO_REGS only for Thumb-1.\n+\t(MODE_BASE_REG_CLASS): Restrict base registers to those which can\n+\tbe used in short instructions when optimising for size on Thumb-2.\n+\n 2011-04-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple-low.c (lower_gimple_return): When not optimizing, force labels"}, {"sha": "533ad910c8f29b7b336db6b6d86aec4e16892c78", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adc580c20178d9f9924b90a8f6b7ad22da31037/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adc580c20178d9f9924b90a8f6b7ad22da31037/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9adc580c20178d9f9924b90a8f6b7ad22da31037", "patch": "@@ -22333,14 +22333,16 @@ arm_preferred_simd_mode (enum machine_mode mode)\n \n /* Implement TARGET_CLASS_LIKELY_SPILLED_P.\n  \n-   We need to define this for LO_REGS on thumb.  Otherwise we can end up\n-   using r0-r4 for function arguments, r7 for the stack frame and don't\n-   have enough left over to do doubleword arithmetic.  */\n-\n+   We need to define this for LO_REGS on Thumb-1.  Otherwise we can end up\n+   using r0-r4 for function arguments, r7 for the stack frame and don't have\n+   enough left over to do doubleword arithmetic.  For Thumb-2 all the\n+   potentially problematic instructions accept high registers so this is not\n+   necessary.  Care needs to be taken to avoid adding new Thumb-2 patterns\n+   that require many low registers.  */\n static bool\n arm_class_likely_spilled_p (reg_class_t rclass)\n {\n-  if ((TARGET_THUMB && rclass == LO_REGS)\n+  if ((TARGET_THUMB1 && rclass == LO_REGS)\n       || rclass  == CC_REG)\n     return true;\n "}, {"sha": "580f2ded1fb675f195f5e47cf9e8c44af45e8ac8", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adc580c20178d9f9924b90a8f6b7ad22da31037/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adc580c20178d9f9924b90a8f6b7ad22da31037/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9adc580c20178d9f9924b90a8f6b7ad22da31037", "patch": "@@ -1165,7 +1165,7 @@ enum reg_class\n    when addressing quantities in QI or HI mode; if we don't know the\n    mode, then we must be conservative.  */\n #define MODE_BASE_REG_CLASS(MODE)\t\t\t\t\t\\\n-    (TARGET_32BIT ? CORE_REGS :\t\t\t\t\t\\\n+    (TARGET_ARM || (TARGET_THUMB2 && !optimize_size) ? CORE_REGS :      \\\n      (((MODE) == SImode) ? BASE_REGS : LO_REGS))\n \n /* For Thumb we can not support SP+reg addressing, so we return LO_REGS"}]}