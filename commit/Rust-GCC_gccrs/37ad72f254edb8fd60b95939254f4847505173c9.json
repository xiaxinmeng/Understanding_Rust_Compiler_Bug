{"sha": "37ad72f254edb8fd60b95939254f4847505173c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhZDcyZjI1NGVkYjhmZDYwYjk1OTM5MjU0ZjQ4NDc1MDUxNzNjOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-11T22:25:58Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-11T22:25:58Z"}, "message": "dependency.c (gfc_dep_compare_expr): Allow unary and binary operators to compare equal if their operands are equal.\n\n\n\t* dependency.c (gfc_dep_compare_expr) <EXPR_OP>: Allow unary and\n\tbinary operators to compare equal if their operands are equal.\n\t<EXPR_FUNCTION>: Allow \"constant\" intrinsic conversion functions\n\tto compare equal, if their operands are equal.\n\n\t* gfortran.dg/dependency_10.f90: New test case.\n\t* gfortran.dg/dependency_11.f90: Likewise.\n\nFrom-SVN: r111970", "tree": {"sha": "160412e4c30689240c5cb4f4ee1ae6194d4735b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160412e4c30689240c5cb4f4ee1ae6194d4735b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37ad72f254edb8fd60b95939254f4847505173c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ad72f254edb8fd60b95939254f4847505173c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ad72f254edb8fd60b95939254f4847505173c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ad72f254edb8fd60b95939254f4847505173c9/comments", "author": null, "committer": null, "parents": [{"sha": "fc6c490eea79b69d94d4400c043c329728abb463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6c490eea79b69d94d4400c043c329728abb463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6c490eea79b69d94d4400c043c329728abb463"}], "stats": {"total": 109, "additions": 99, "deletions": 10}, "files": [{"sha": "5ce92d5b3ed6256e87577977064b42736ff390e4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=37ad72f254edb8fd60b95939254f4847505173c9", "patch": "@@ -1,20 +1,27 @@\n+2003-03-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* dependency.c (gfc_dep_compare_expr) <EXPR_OP>: Allow unary and\n+\tbinary operators to compare equal if their operands are equal.\n+\t<EXPR_FUNCTION>: Allow \"constant\" intrinsic conversion functions\n+\tto compare equal, if their operands are equal.\n+\n 2006-03-11  Erik Edelmann  <eedelman@gcc.gnu.org>\n \n \t* symbol.c (check_conflict): Allow allocatable function results,\n-\t  except for elemental functions.\n+\texcept for elemental functions.\n \t* trans-array.c (gfc_trans_allocate_temp_array): Rename to ...\n-\t  (gfc_trans_create_temp_array): ... this, and add new argument\n-\t  callee_alloc.\n-\t  (gfc_trans_array_constructor, gfc_conv_loop_setup): Update call\n-\t  to gfc_trans_allocate_temp_array.\n+\t(gfc_trans_create_temp_array): ... this, and add new argument\n+\tcallee_alloc.\n+\t(gfc_trans_array_constructor, gfc_conv_loop_setup): Update call\n+\tto gfc_trans_allocate_temp_array.\n \t* trans-array.h (gfc_trans_allocate_temp_array): Update prototype.\n \t* trans-expr.c (gfc_conv_function_call): Use new arg of\n-\t  gfc_trans_create_temp_array avoid pre-allocation of temporary\n-\t  result variables of pointer AND allocatable functions.\n-\t  (gfc_trans_arrayfunc_assign): Return NULL for allocatable\n-\t  functions.\n+\tgfc_trans_create_temp_array avoid pre-allocation of temporary\n+\tresult variables of pointer AND allocatable functions.\n+\t(gfc_trans_arrayfunc_assign): Return NULL for allocatable\n+\tfunctions.\n \t* resolve.c (resolve_symbol): Copy value of 'allocatable' attribute\n-\t  from sym->result to sym.\n+\tfrom sym->result to sym.\n \n 2006-03-09  Erik Edelmann  <eedelman@gcc.gnu.org>\n "}, {"sha": "d60b7ebbcebcfc2e9b26863e9dd7826c95d80425", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=37ad72f254edb8fd60b95939254f4847505173c9", "patch": "@@ -97,6 +97,57 @@ gfc_dep_compare_expr (gfc_expr * e1, gfc_expr * e2)\n \treturn 0;\n       return -2;\n \n+    case EXPR_OP:\n+      /* Intrinsic operators are the same if their operands are the same.  */\n+      if (e1->value.op.operator != e2->value.op.operator)\n+\treturn -2;\n+      if (e1->value.op.op2 == 0)\n+\t{\n+\t  i = gfc_dep_compare_expr (e1->value.op.op1, e2->value.op.op1);\n+\t  return i == 0 ? 0 : -2;\n+\t}\n+      if (gfc_dep_compare_expr (e1->value.op.op1, e2->value.op.op1) == 0\n+\t  && gfc_dep_compare_expr (e1->value.op.op2, e2->value.op.op2) == 0)\n+\treturn 0;\n+      /* TODO Handle commutative binary operators here?  */\n+      return -2;\n+\n+    case EXPR_FUNCTION:\n+      /* We can only compare calls to the same intrinsic function.  */\n+      if (e1->value.function.isym == 0\n+\t  || e2->value.function.isym == 0\n+\t  || e1->value.function.isym != e2->value.function.isym)\n+\treturn -2;\n+\n+      /* We should list the \"constant\" intrinsic functions.  Those\n+\t without side-effects that provide equal results given equal\n+\t argument lists.  */\n+      switch (e1->value.function.isym->generic_id)\n+\t{\n+\tcase GFC_ISYM_CONVERSION:\n+\tcase GFC_ISYM_REAL:\n+\tcase GFC_ISYM_LOGICAL:\n+\tcase GFC_ISYM_DBLE:\n+\t  break;\n+\n+\tdefault:\n+\t  return -2;\n+\t}\n+\n+      /* Compare the argument lists for equality.  */\n+      {\n+\tgfc_actual_arglist *args1 = e1->value.function.actual;\n+\tgfc_actual_arglist *args2 = e2->value.function.actual;\n+\twhile (args1 && args2)\n+\t  {\n+\t    if (gfc_dep_compare_expr (args1->expr, args2->expr) != 0)\n+\t      return -2;\n+\t    args1 = args1->next;\n+\t    args2 = args2->next;\n+\t  }\n+\treturn (args1 || args2) ? -2 : 0;\n+      }\n+      \n     default:\n       return -2;\n     }"}, {"sha": "ebdbc184389869ac6a12e5163093ee909c7b2aac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37ad72f254edb8fd60b95939254f4847505173c9", "patch": "@@ -1,3 +1,8 @@\n+2003-03-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/dependency_10.f90: New test case.\n+\t* gfortran.dg/dependency_11.f90: Likewise.\n+\n 2006-03-11  Paul Thomas  <pault@gcc.gnu.org>\n \t    Erik Edelmann  <eedelman@gcc.gnu.org>\n "}, {"sha": "d6edde2bd040fde822146e9c367a386735e55692", "filename": "gcc/testsuite/gfortran.dg/dependency_10.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_10.f90?ref=37ad72f254edb8fd60b95939254f4847505173c9", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a)\n+  integer, dimension (4) :: a\n+  integer :: n\n+\n+  n = 3\n+  where (a(:n) .ne. 0)\n+    a(:n) = 1\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "3874a79a310e04bc82019724c6e9b1452e18eefb", "filename": "gcc/testsuite/gfortran.dg/dependency_11.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ad72f254edb8fd60b95939254f4847505173c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_11.f90?ref=37ad72f254edb8fd60b95939254f4847505173c9", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a)\n+  integer, dimension (4) :: a\n+  integer :: n\n+\n+  n = 3\n+  where (a(:n-1) .ne. 0)\n+    a(:n-1) = 1\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}