{"sha": "1a1f75881be4d133d2334707c26779bd72a4ecce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExZjc1ODgxYmU0ZDEzM2QyMzM0NzA3YzI2Nzc5YmQ3MmE0ZWNjZQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-02-15T05:50:37Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-02-15T05:50:37Z"}, "message": "* check_warning_flags.sh: New file.\n\nFrom-SVN: r132332", "tree": {"sha": "c61104c64e35ced6f21746fa51fde15f2766036e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c61104c64e35ced6f21746fa51fde15f2766036e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a1f75881be4d133d2334707c26779bd72a4ecce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1f75881be4d133d2334707c26779bd72a4ecce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a1f75881be4d133d2334707c26779bd72a4ecce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1f75881be4d133d2334707c26779bd72a4ecce/comments", "author": null, "committer": null, "parents": [{"sha": "625b6d91e7fed284c8228c333340ebf7ba6b479a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625b6d91e7fed284c8228c333340ebf7ba6b479a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625b6d91e7fed284c8228c333340ebf7ba6b479a"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "8f8153d467552d059b15dbeee4bd5d96309a87b0", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1f75881be4d133d2334707c26779bd72a4ecce/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1f75881be4d133d2334707c26779bd72a4ecce/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=1a1f75881be4d133d2334707c26779bd72a4ecce", "patch": "@@ -1,3 +1,7 @@\n+2008-02-15  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* check_warning_flags.sh: New file.\n+\n 2008-01-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* paranoia.cc (main): Remove handling of c4x_single and"}, {"sha": "95640f7758d0cace22abd51b314fc0a225033820", "filename": "contrib/check_warning_flags.sh", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1f75881be4d133d2334707c26779bd72a4ecce/contrib%2Fcheck_warning_flags.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1f75881be4d133d2334707c26779bd72a4ecce/contrib%2Fcheck_warning_flags.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fcheck_warning_flags.sh?ref=1a1f75881be4d133d2334707c26779bd72a4ecce", "patch": "@@ -0,0 +1,136 @@\n+#! /bin/sh\n+#\n+# Check that the warning flags documented in invoke.texi match up\n+# with what the compiler accepts.\n+#\n+# Copyright (C) 2008 Free Software Foundation, Inc.\n+# Written by Ralf Wildenhues <Ralf.Wildenhues@gmx.de>.\n+#\n+# This script is Free Software, and it can be copied, distributed and\n+# modified as defined in the GNU General Public License.  A copy of\n+# its license can be downloaded from http://www.gnu.org/copyleft/gpl.html\n+#\n+# Call this script as\n+#    check_warning_flags.sh path/to/invoke.texi\n+# with CC set to the compiler to be tested.\n+# The script scribbles in the current directory.\n+\n+progname=`echo \"$0\" | sed 's,.*/,,'`\n+usage ()\n+{\n+  echo \"usage: $progname path/to/invoke.texi\"\n+  echo \"set \\$CC to the compiler to be checked\"\n+  exit 1\n+}\n+\n+ret=0\n+LC_ALL=C\n+export LC_ALL\n+: ${CC=gcc}\n+test $# = 1 || usage\n+invoke_texi=$1\n+test -r \"$invoke_texi\" || {\n+  echo \"$progname: error: cannot read '$invoke_texi'\" >&2\n+  usage\n+}\n+filebase=check_warning_flags_file$$\n+stderr=check_warning_flags_stderr$$\n+\n+remove_problematic_flags='\n+  /-Wlarger-than-/d\n+  /-W[alp],/d\n+  /-Werror/d\n+  /-Wpadded/d\n+  /=/d'\n+\n+# Ensure that indexed warnings are accepted.\n+set x `sed '/^@opindex W/{\n+  s/^@opindex /-/\n+  '\"$remove_problematic_flags\"'\n+  /-W[alp]$/d\n+  p\n+}\n+d' <\"$invoke_texi\"`\n+shift\n+: >$filebase.c\n+$CC -c $filebase.c \"$@\" 2>&1 |\n+  grep -v 'command line option.*is valid for.*but not for' >$stderr\n+if test -s $stderr; then\n+  echo \"options listed in @opindex but not accepted by the compiler:\" >&2\n+  cat $stderr >&2\n+  ret=1\n+fi\n+rm -f $filebase.c $stderr\n+\n+# Check documentation of warning options.\n+for lang in c c++ objc obj-c++; do\n+  case $lang in\n+  c)       ext=c; langmatch='[^-]C[^+].*only' ;;\n+  c++)     ext=C; langmatch='[^-]C++.*only' ;;\n+  objc)    ext=m; langmatch='Objective-C[^+].*only' ;;\n+  obj-c++) ext=M; langmatch='Objective-C++.*only' ;;\n+  esac\n+  file=$filebase.$ext\n+  : >$file\n+  $CC -c $file 2>$stderr\n+  if grep 'not installed on this system' $stderr >/dev/null ||\n+    grep 'installation problem, cannot exec' $stderr >/dev/null ||\n+    grep 'error trying to exec' $stderr >/dev/null\n+  then\n+    echo \"$progname: $CC is not configured for language $lang, skipping checks\" >&2\n+    rm -f $file $filebase.o $filebase.obj $stderr\n+    continue\n+  fi\n+\n+  # Verify good warning flags.\n+  set x `sed '\n+    t a\n+    :a\n+    /^@item -W/{\n+      /'\"$langmatch\"'/b x\n+      / only)/d\n+      b x\n+    }\n+    d\n+    :x\n+    '\"$remove_problematic_flags\"'\n+    s/^@item //\n+    s/ .*//\n+    ' <\"$invoke_texi\"`\n+  shift\n+  $CC -c $file -O \"$@\" 2>$stderr\n+  if test -s $stderr; then\n+    echo failures:  >&2\n+    cat $stderr >&2\n+    ret=1\n+  fi\n+\n+  # Verify bad warning flags.\n+  set x `sed '\n+    t a\n+    :a\n+    /^@item -W/{\n+      / only)/!d\n+      /'\"$langmatch\"'/d\n+      b x\n+    }\n+    d\n+    :x\n+    '\"$remove_problematic_flags\"'\n+    s/^@item //\n+    s/ .*//\n+    ' <\"$invoke_texi\"`\n+  shift\n+  $CC -c $file -O \"$@\" 2>$stderr\n+  # cat $stderr >&2\n+  test $# = `grep 'command line option.*valid.*but not for' <$stderr | wc -l` || {\n+    for warning\n+    do\n+      grep \"command line option.*$warning.*valid\" <$stderr >&2 ||\n+\techo \"valid for $lang but not annotated as such: $warning\"\n+    done\n+    ret=1\n+  }\n+  rm -f $file $filebase.o $filebase.obj $stderr\n+done\n+exit $ret"}]}