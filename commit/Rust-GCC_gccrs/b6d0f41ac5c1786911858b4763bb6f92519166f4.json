{"sha": "b6d0f41ac5c1786911858b4763bb6f92519166f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkMGY0MWFjNWMxNzg2OTExODU4YjQ3NjNiYjZmOTI1MTkxNjZmNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-01-28T22:14:27Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-01-28T22:14:27Z"}, "message": "PR c++/88358 - name wrongly treated as type.\n\n\t* parser.c (cp_parser_direct_declarator): Don't assume a qualified-id\n\tin parameter-list is a type if the function's declarator-id is not\n\tqualified.\n\n\t* g++.dg/cpp2a/typename1.C: Add dg-error.\n\t* g++.dg/cpp2a/typename13.C: New test.\n\t* g++.dg/cpp2a/typename6.C: Make a function name qualified.\n\tAdd typename.\n\nFrom-SVN: r268343", "tree": {"sha": "ca1b40716b10b941b960f762ca38414b38cab433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca1b40716b10b941b960f762ca38414b38cab433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d0f41ac5c1786911858b4763bb6f92519166f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d0f41ac5c1786911858b4763bb6f92519166f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d0f41ac5c1786911858b4763bb6f92519166f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d0f41ac5c1786911858b4763bb6f92519166f4/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c5b39203276b00496ef32468ccb61d445aef97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5b39203276b00496ef32468ccb61d445aef97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5b39203276b00496ef32468ccb61d445aef97b"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "5e2f69ddc1fadb8e54880c44ec7f6f7866914184", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b6d0f41ac5c1786911858b4763bb6f92519166f4", "patch": "@@ -1,3 +1,10 @@\n+2019-01-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88358 - name wrongly treated as type.\n+\t* parser.c (cp_parser_direct_declarator): Don't assume a qualified-id\n+\tin parameter-list is a type if the function's declarator-id is not\n+\tqualified.\n+\n 2019-01-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88815 - narrowing conversion lost in decltype."}, {"sha": "16f2a32bc0bffc0946bd60d9f624c6bea242565f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b6d0f41ac5c1786911858b4763bb6f92519166f4", "patch": "@@ -21107,23 +21107,28 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t    if (cxx_dialect >= cxx2a\n \t\t&& (flags & CP_PARSER_FLAGS_TYPENAME_OPTIONAL)\n \t\t&& declarator->kind == cdk_id\n-\t\t/* ...whose declarator-id is qualified.  */\n-\t\t&& qualifying_scope != NULL_TREE\n \t\t&& !at_class_scope_p ()\n \t\t&& cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n \t      {\n-\t\t/* Now we have something like\n-\t\t   template <typename T> int C::x(S::p);\n-\t\t   which can be a function template declaration or a\n-\t\t   variable template definition.  If name lookup for\n-\t\t   the declarator-id C::x finds one or more function\n-\t\t   templates, assume S::p to name a type.  Otherwise,\n-\t\t   don't.  */\n-\t\ttree decl\n-\t\t  = cp_parser_lookup_name_simple (parser, unqualified_name,\n-\t\t\t\t\t\t  token->location);\n-\t\tif (!is_overloaded_fn (decl))\n+\t\t/* ...whose declarator-id is qualified.  If it isn't, never\n+\t\t   assume the parameters to refer to types.  */\n+\t\tif (qualifying_scope == NULL_TREE)\n \t\t  flags &= ~CP_PARSER_FLAGS_TYPENAME_OPTIONAL;\n+\t\telse\n+\t\t  {\n+\t\t    /* Now we have something like\n+\t\t       template <typename T> int C::x(S::p);\n+\t\t       which can be a function template declaration or a\n+\t\t       variable template definition.  If name lookup for\n+\t\t       the declarator-id C::x finds one or more function\n+\t\t       templates, assume S::p to name a type.  Otherwise,\n+\t\t       don't.  */\n+\t\t    tree decl\n+\t\t      = cp_parser_lookup_name_simple (parser, unqualified_name,\n+\t\t\t\t\t\t      token->location);\n+\t\t    if (!is_overloaded_fn (decl))\n+\t\t      flags &= ~CP_PARSER_FLAGS_TYPENAME_OPTIONAL;\n+\t\t  }\n \t      }\n \t  }\n "}, {"sha": "7af76a148c859c6b80c81386c226b2c020f3d180", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6d0f41ac5c1786911858b4763bb6f92519166f4", "patch": "@@ -1,3 +1,11 @@\n+2019-01-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88358 - name wrongly treated as type.\n+\t* g++.dg/cpp2a/typename1.C: Add dg-error.\n+\t* g++.dg/cpp2a/typename13.C: New test.\n+\t* g++.dg/cpp2a/typename6.C: Make a function name qualified.\n+\tAdd typename.\n+\n 2019-01-28  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp0x/enum37.C: Add dg-error."}, {"sha": "0c1f6309c5bde7ceef46c6989393a95460fb6887", "filename": "gcc/testsuite/g++.dg/cpp2a/typename1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename1.C?ref=b6d0f41ac5c1786911858b4763bb6f92519166f4", "patch": "@@ -6,7 +6,7 @@ template<class T> T::R f();\n \n // Ill-formed (no diagnostic required), attempt to declare\n // a void variable template\n-template<class T> void f(T::R);\n+template<class T> void f(T::R); // { dg-error \"declared void\" }\n \n template <class T> struct A;\n template <class T> using B = A<T>::U;"}, {"sha": "c439f726c5d868926d17fbcfabb6978159c96698", "filename": "gcc/testsuite/g++.dg/cpp2a/typename13.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename13.C?ref=b6d0f41ac5c1786911858b4763bb6f92519166f4", "patch": "@@ -0,0 +1,13 @@\n+// P0634R3, PR c++/88358\n+// { dg-do compile { target c++2a } }\n+\n+template <typename T>\n+int pi(T::your_pi);\n+\n+struct Foo { static constexpr int your_pi = 10; };\n+\n+int\n+main ()\n+{\n+  return pi<Foo>;\n+}"}, {"sha": "e96e2ab802c89e13b095d378c54acaa7f02bdfab", "filename": "gcc/testsuite/g++.dg/cpp2a/typename6.C", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d0f41ac5c1786911858b4763bb6f92519166f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename6.C?ref=b6d0f41ac5c1786911858b4763bb6f92519166f4", "patch": "@@ -55,11 +55,14 @@ struct S2 {\n // (5.2.4) parameter-declaration in a declarator of a function or function\n // template declaration whose declarator-id is qualified,\n // unless that parameter-declaration appears in a default argument\n-template<typename T>\n-int fn3 (T::X);\n+\n+struct M {\n+  template<typename T>\n+  int fn (T::X);\n+};\n \n template<typename T>\n-int fn4 (T::X p) { return p; }\n+int M::fn (T::X p) { return p; }\n \n // (5.2.5) parameter-declaration in a lambda-declarator,\n // unless that parameter-declaration appears in a default argument\n@@ -92,7 +95,7 @@ struct S5 {\n };\n \n template<typename T>\n-void fn7 (T::X p)\n+void fn7 (typename T::X p)\n {\n   int i = static_cast<T::Y>(p);\n   i = dynamic_cast<T::Y>(p);"}]}