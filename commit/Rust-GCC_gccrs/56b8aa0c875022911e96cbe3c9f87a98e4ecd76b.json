{"sha": "56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiOGFhMGM4NzUwMjI5MTFlOTZjYmUzYzlmODdhOThlNGVjZDc2Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-07-07T10:20:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-07-07T10:20:12Z"}, "message": "gigi.h (add_decl_expr): Adjust prototype.\n\n\t* gcc-interface/gigi.h (add_decl_expr): Adjust prototype.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Remove useless test.\n\t* gcc-interface/trans.c (add_stmt_with_node): Remove exceptions.\n\t(add_decl_expr): Change type of second parameter and rename it.\n\t(renaming_from_instantiation_p): New function moved from...\n\t(set_expr_location_from_node): Test for exceptions here and add one\n\tfor actual subtypes built for unconstrained composite actuals.\n\t* gcc-interface/utils.c (renaming_from_instantiation_p): ...here.\n\nFrom-SVN: r262497", "tree": {"sha": "cb9596a739f084236484b459cb331d9799e513e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb9596a739f084236484b459cb331d9799e513e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/comments", "author": null, "committer": null, "parents": [{"sha": "86da71db787fdb592c9f8225665d3d8b7a3934fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86da71db787fdb592c9f8225665d3d8b7a3934fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86da71db787fdb592c9f8225665d3d8b7a3934fa"}], "stats": {"total": 103, "additions": 58, "deletions": 45}, "files": [{"sha": "537a088a3af80386b0b4a1402c16854f9644ed72", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "patch": "@@ -1,3 +1,14 @@\n+2018-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (add_decl_expr): Adjust prototype.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Remove useless test.\n+\t* gcc-interface/trans.c (add_stmt_with_node): Remove exceptions.\n+\t(add_decl_expr): Change type of second parameter and rename it.\n+\t(renaming_from_instantiation_p): New function moved from...\n+\t(set_expr_location_from_node): Test for exceptions here and add one\n+\tfor actual subtypes built for unconstrained composite actuals.\n+\t* gcc-interface/utils.c (renaming_from_instantiation_p): ...here.\n+\n 2018-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (lvalue_required_p): Remove ALIASED parameter"}, {"sha": "4ccb7f8c0393d9cc19b825430045e0e6411affe0", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "patch": "@@ -430,11 +430,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      || Is_Public (gnat_entity));\n \n   /* Get the name of the entity and set up the line number and filename of\n-     the original definition for use in any decl we make.  Make sure we do not\n-     inherit another source location.  */\n+     the original definition for use in any decl we make.  Make sure we do\n+     not inherit another source location.  */\n   gnu_entity_name = get_entity_name (gnat_entity);\n-  if (Sloc (gnat_entity) != No_Location\n-      && !renaming_from_instantiation_p (gnat_entity))\n+  if (!renaming_from_instantiation_p (gnat_entity))\n     Sloc_to_locus (Sloc (gnat_entity), &input_location);\n \n   /* For cases when we are not defining (i.e., we are referencing from"}, {"sha": "a6bc1f0c9d4680b30a339ce2e90e0ed10a100366", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "patch": "@@ -77,9 +77,9 @@ extern tree end_stmt_group (void);\n /* Set the BLOCK node corresponding to the current code group to GNU_BLOCK.  */\n extern void set_block_for_group (tree);\n \n-/* Add a declaration statement for GNU_DECL to the current BLOCK_STMT node.\n-   Get SLOC from GNAT_ENTITY.  */\n-extern void add_decl_expr (tree gnu_decl, Entity_Id gnat_entity);\n+/* Add a declaration statement for GNU_DECL to the current statement group.\n+   Get the SLOC to be put onto the statement from GNAT_NODE.  */\n+extern void add_decl_expr (tree gnu_decl, Node_Id gnat_node);\n \n /* Mark nodes rooted at T with TREE_VISITED and types as having their\n    sized gimplified.  We use this to indicate all variable sizes and"}, {"sha": "effd28160a7d281c44d1314450c007befec3c926", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "patch": "@@ -8119,9 +8119,7 @@ add_stmt_force (tree gnu_stmt)\n void\n add_stmt_with_node (tree gnu_stmt, Node_Id gnat_node)\n {\n-  /* Do not emit a location for renamings that come from generic instantiation,\n-     they are likely to disturb debugging.  */\n-  if (Present (gnat_node) && !renaming_from_instantiation_p (gnat_node))\n+  if (Present (gnat_node))\n     set_expr_location_from_node (gnu_stmt, gnat_node);\n   add_stmt (gnu_stmt);\n }\n@@ -8137,10 +8135,10 @@ add_stmt_with_node_force (tree gnu_stmt, Node_Id gnat_node)\n }\n \n /* Add a declaration statement for GNU_DECL to the current statement group.\n-   Get SLOC from Entity_Id.  */\n+   Get the SLOC to be put onto the statement from GNAT_NODE.  */\n \n void\n-add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n+add_decl_expr (tree gnu_decl, Node_Id gnat_node)\n {\n   tree type = TREE_TYPE (gnu_decl);\n   tree gnu_stmt, gnu_init;\n@@ -8179,7 +8177,7 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n \tMARK_VISITED (TYPE_ADA_SIZE (type));\n     }\n   else\n-    add_stmt_with_node (gnu_stmt, gnat_entity);\n+    add_stmt_with_node (gnu_stmt, gnat_node);\n \n   /* If this is a variable and an initializer is attached to it, it must be\n      valid for the context.  Similar to init_const in create_var_decl.  */\n@@ -8203,7 +8201,7 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n \tgnu_decl = convert (TREE_TYPE (TYPE_FIELDS (type)), gnu_decl);\n \n       gnu_stmt = build_binary_op (INIT_EXPR, NULL_TREE, gnu_decl, gnu_init);\n-      add_stmt_with_node (gnu_stmt, gnat_entity);\n+      add_stmt_with_node (gnu_stmt, gnat_node);\n     }\n }\n \n@@ -10005,6 +10003,32 @@ Sloc_to_locus (Source_Ptr Sloc, location_t *locus, bool clear_column)\n   return true;\n }\n \n+/* Return whether GNAT_NODE is a defining identifier for a renaming that comes\n+   from the parameter association for the instantiation of a generic.  We do\n+   not want to emit source location for them: the code generated for their\n+   initialization is likely to disturb debugging.  */\n+\n+bool\n+renaming_from_instantiation_p (Node_Id gnat_node)\n+{\n+  if (Nkind (gnat_node) != N_Defining_Identifier\n+      || !Is_Object (gnat_node)\n+      || Comes_From_Source (gnat_node)\n+      || !Present (Renamed_Object (gnat_node)))\n+    return false;\n+\n+  /* Get the object declaration of the renamed object, if any and if the\n+     renamed object is a mere identifier.  */\n+  gnat_node = Renamed_Object (gnat_node);\n+  if (Nkind (gnat_node) != N_Identifier)\n+    return false;\n+\n+  gnat_node = Parent (Entity (gnat_node));\n+  return (Present (gnat_node)\n+\t  && Nkind (gnat_node) == N_Object_Declaration\n+\t  && Present (Corresponding_Generic_Association (gnat_node)));\n+}\n+\n /* Similar to set_expr_location, but start with the Sloc of GNAT_NODE and\n    don't do anything if it doesn't correspond to a source location.  And,\n    if CLEAR_COLUMN is true, set the column information to 0.  */\n@@ -10014,6 +10038,16 @@ set_expr_location_from_node (tree node, Node_Id gnat_node, bool clear_column)\n {\n   location_t locus;\n \n+  /* Do not set a location for constructs likely to disturb debugging.  */\n+  if (Nkind (gnat_node) == N_Defining_Identifier)\n+    {\n+      if (Is_Type (gnat_node) && Is_Actual_Subtype (gnat_node))\n+\treturn;\n+\n+      if (renaming_from_instantiation_p (gnat_node))\n+\treturn;\n+    }\n+\n   if (!Sloc_to_locus (Sloc (gnat_node), &locus, clear_column))\n     return;\n "}, {"sha": "af85a0fe85881b2f1b7e50d32d4bec7c53c72c32", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b8aa0c875022911e96cbe3c9f87a98e4ecd76b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=56b8aa0c875022911e96cbe3c9f87a98e4ecd76b", "patch": "@@ -2938,37 +2938,6 @@ value_factor_p (tree value, HOST_WIDE_INT factor)\n   return false;\n }\n \n-/* Return whether GNAT_NODE is a defining identifier for a renaming that comes\n-   from the parameter association for the instantiation of a generic.  We do\n-   not want to emit source location for them: the code generated for their\n-   initialization is likely to disturb debugging.  */\n-\n-bool\n-renaming_from_instantiation_p (Node_Id gnat_node)\n-{\n-  if (Nkind (gnat_node) != N_Defining_Identifier\n-      || !Is_Object (gnat_node)\n-      || Comes_From_Source (gnat_node)\n-      || !Present (Renamed_Object (gnat_node)))\n-    return false;\n-\n-  /* Get the object declaration of the renamed object, if any and if the\n-     renamed object is a mere identifier.  */\n-  gnat_node = Renamed_Object (gnat_node);\n-  if (Nkind (gnat_node) != N_Identifier)\n-    return false;\n-\n-  gnat_node = Entity (gnat_node);\n-  if (!Present (Parent (gnat_node)))\n-    return false;\n-\n-  gnat_node = Parent (gnat_node);\n-  return\n-   (Present (gnat_node)\n-    && Nkind (gnat_node) == N_Object_Declaration\n-    && Present (Corresponding_Generic_Association (gnat_node)));\n-}\n-\n /* Defer the initialization of DECL's DECL_CONTEXT attribute, scheduling to\n    feed it with the elaboration of GNAT_SCOPE.  */\n "}]}