{"sha": "c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5ZTQ0YWM4ZGJjOWFmMDdlNWU2NzFlZGZhMDNhYjViMDg2NDljNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-04T06:48:46Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-04T06:48:46Z"}, "message": "c: Implement C2x nodiscard attribute\n\nC2x adds the nodiscard standard attribute, with an optional string\nargument, as in C++; implement it for C.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c/\n2020-11-04  Joseph Myers  <joseph@codesourcery.com>\n\n\t* c-decl.c (handle_nodiscard_attribute): New.\n\t(std_attribute_table): Add nodiscard.\n\t* c-parser.c (c_parser_std_attribute): Expect argument to\n\tnodiscard attribute to be a string.  Do not special-case ignoring\n\tnodiscard.\n\t* c-typeck.c (maybe_warn_nodiscard): New.\n\t(build_compound_expr, emit_side_effect_warnings): Call\n\tmaybe_warn_nodiscard.\n\t(c_process_expr_stmt, c_finish_stmt_expr): Also call\n\temit_side_effect_warnings if warn_unused_result.\n\ngcc/testsuite/\n2020-11-04  Joseph Myers  <joseph@codesourcery.com>\n\n\t* gcc.dg/c2x-attr-nodiscard-1.c, gcc.dg/c2x-attr-nodiscard-2.c,\n\tgcc.dg/c2x-attr-nodiscard-3.c, gcc.dg/c2x-attr-nodiscard-4.c: New\n\ttests.\n\t* gcc.dg/c2x-attr-syntax-5.c: Remove nodiscard test.", "tree": {"sha": "042ddbf096456fbd03cf55ccbc034a061ffea5df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/042ddbf096456fbd03cf55ccbc034a061ffea5df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0aa43fc6ae689c595902310baec604e7e0d695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0aa43fc6ae689c595902310baec604e7e0d695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0aa43fc6ae689c595902310baec604e7e0d695"}], "stats": {"total": 248, "additions": 236, "deletions": 12}, "files": [{"sha": "d4179aad189aae7f209f217140d113bf1753cf97", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "patch": "@@ -4400,6 +4400,31 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t loc)\n }\n \n \f\n+/* Handle the standard [[nodiscard]] attribute.  */\n+\n+static tree\n+handle_nodiscard_attribute (tree *node, tree name, tree /*args*/,\n+\t\t\t    int /*flags*/, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (*node))))\n+\twarning_at (DECL_SOURCE_LOCATION (*node),\n+\t\t    OPT_Wattributes, \"%qE attribute applied to %qD with void \"\n+\t\t    \"return type\", name, *node);\n+    }\n+  else if (RECORD_OR_UNION_TYPE_P (*node)\n+\t   || TREE_CODE (*node) == ENUMERAL_TYPE)\n+    /* OK */;\n+  else\n+    {\n+      pedwarn (input_location,\n+\t       OPT_Wattributes, \"%qE attribute can only be applied to \"\n+\t       \"functions or to structure, union or enumeration types\", name);\n+      *no_add_attrs = true;\n+    }\n+  return NULL_TREE;\n+}\n /* Table of supported standard (C2x) attributes.  */\n const struct attribute_spec std_attribute_table[] =\n {\n@@ -4411,6 +4436,8 @@ const struct attribute_spec std_attribute_table[] =\n     handle_fallthrough_attribute, NULL },\n   { \"maybe_unused\", 0, 0, false, false, false, false,\n     handle_unused_attribute, NULL },\n+  { \"nodiscard\", 0, 1, false, false, false, false,\n+    handle_nodiscard_attribute, NULL },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n "}, {"sha": "fc97aa3f95fb24be2e3aec8cb72293965e5576ee", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "patch": "@@ -4950,7 +4950,8 @@ c_parser_std_attribute (c_parser *parser, bool for_tm)\n \t     && attribute_takes_identifier_p (name));\n \tbool require_string\n \t  = (ns == NULL_TREE\n-\t     && strcmp (IDENTIFIER_POINTER (name), \"deprecated\") == 0);\n+\t     && (strcmp (IDENTIFIER_POINTER (name), \"deprecated\") == 0\n+\t\t || strcmp (IDENTIFIER_POINTER (name), \"nodiscard\") == 0));\n \tTREE_VALUE (attribute)\n \t  = c_parser_attribute_arguments (parser, takes_identifier,\n \t\t\t\t\t  require_string, false);\n@@ -4960,13 +4961,12 @@ c_parser_std_attribute (c_parser *parser, bool for_tm)\n     parens.require_close (parser);\n   }\n  out:\n-  if (ns == NULL_TREE && !for_tm && !as && !is_attribute_p (\"nodiscard\", name))\n+  if (ns == NULL_TREE && !for_tm && !as)\n     {\n       /* An attribute with standard syntax and no namespace specified\n \t is a constraint violation if it is not one of the known\n-\t standard attributes (of which nodiscard is the only one\n-\t without a handler in GCC).  Diagnose it here with a pedwarn\n-\t and then discard it to prevent a duplicate warning later.  */\n+\t standard attributes.  Diagnose it here with a pedwarn and\n+\t then discard it to prevent a duplicate warning later.  */\n       pedwarn (input_location, OPT_Wattributes, \"%qE attribute ignored\",\n \t       name);\n       return error_mark_node;"}, {"sha": "0d75ed4f8b1f5fad39aab687aab15e76f87a737b", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 83, "deletions": 2, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "patch": "@@ -5490,6 +5490,82 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n   return ret;\n }\n \f\n+/* EXPR is an expression, location LOC, whose result is discarded.\n+   Warn if it is a call to a nodiscard function (or a COMPOUND_EXPR\n+   whose right-hand operand is such a call, possibly recursively).  */\n+\n+static void\n+maybe_warn_nodiscard (location_t loc, tree expr)\n+{\n+  if (VOID_TYPE_P (TREE_TYPE (expr)))\n+    return;\n+  while (TREE_CODE (expr) == COMPOUND_EXPR)\n+    {\n+      expr = TREE_OPERAND (expr, 1);\n+      if (EXPR_HAS_LOCATION (expr))\n+\tloc = EXPR_LOCATION (expr);\n+    }\n+  if (TREE_CODE (expr) != CALL_EXPR)\n+    return;\n+  tree fn = CALL_EXPR_FN (expr);\n+  if (!fn)\n+    return;\n+  tree attr;\n+  if (TREE_CODE (fn) == ADDR_EXPR\n+      && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n+      && (attr = lookup_attribute (\"nodiscard\",\n+\t\t\t\t   DECL_ATTRIBUTES (TREE_OPERAND (fn, 0)))))\n+    {\n+      fn = TREE_OPERAND (fn, 0);\n+      tree args = TREE_VALUE (attr);\n+      if (args)\n+\targs = TREE_VALUE (args);\n+      auto_diagnostic_group d;\n+      int warned;\n+      if (args)\n+\twarned = warning_at (loc, OPT_Wunused_result,\n+\t\t\t     \"ignoring return value of %qD, declared with \"\n+\t\t\t     \"attribute %<nodiscard%>: %E\", fn, args);\n+      else\n+\twarned = warning_at (loc, OPT_Wunused_result,\n+\t\t\t     \"ignoring return value of %qD, declared with \"\n+\t\t\t     \"attribute %<nodiscard%>\", fn);\n+      if (warned)\n+\tinform (DECL_SOURCE_LOCATION (fn), \"declared here\");\n+    }\n+  else\n+    {\n+      tree rettype = TREE_TYPE (TREE_TYPE (TREE_TYPE (fn)));\n+      attr = lookup_attribute (\"nodiscard\", TYPE_ATTRIBUTES (rettype));\n+      if (!attr)\n+\treturn;\n+      tree args = TREE_VALUE (attr);\n+      if (args)\n+\targs = TREE_VALUE (args);\n+      auto_diagnostic_group d;\n+      int warned;\n+      if (args)\n+\twarned = warning_at (loc, OPT_Wunused_result,\n+\t\t\t     \"ignoring return value of type %qT, declared \"\n+\t\t\t     \"with attribute %<nodiscard%>: %E\",\n+\t\t\t     rettype, args);\n+      else\n+\twarned = warning_at (loc, OPT_Wunused_result,\n+\t\t\t     \"ignoring return value of type %qT, declared \"\n+\t\t\t     \"with attribute %<nodiscard%>\", rettype);\n+      if (warned)\n+\t{\n+\t  if (TREE_CODE (fn) == ADDR_EXPR)\n+\t    {\n+\t      fn = TREE_OPERAND (fn, 0);\n+\t      if (TREE_CODE (fn) == FUNCTION_DECL)\n+\t\tinform (DECL_SOURCE_LOCATION (fn),\n+\t\t\t\"in call to %qD, declared here\", fn);\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Return a compound expression that performs two expressions and\n    returns the value of the second of them.\n \n@@ -5561,6 +5637,8 @@ build_compound_expr (location_t loc, tree expr1, tree expr2)\n   else if (warn_unused_value)\n     warn_if_unused_value (expr1, loc);\n \n+  maybe_warn_nodiscard (loc, expr1);\n+\n   if (expr2 == error_mark_node)\n     return error_mark_node;\n \n@@ -11072,6 +11150,9 @@ c_finish_bc_stmt (location_t loc, tree label, bool is_break)\n static void\n emit_side_effect_warnings (location_t loc, tree expr)\n {\n+  maybe_warn_nodiscard (loc, expr);\n+  if (!warn_unused_value)\n+    return;\n   if (expr == error_mark_node)\n     ;\n   else if (!TREE_SIDE_EFFECTS (expr))\n@@ -11127,7 +11208,7 @@ c_process_expr_stmt (location_t loc, tree expr)\n      Warnings for statement expressions will be emitted later, once we figure\n      out which is the result.  */\n   if (!STATEMENT_LIST_STMT_EXPR (cur_stmt_list)\n-      && warn_unused_value)\n+      && (warn_unused_value || warn_unused_result))\n     emit_side_effect_warnings (EXPR_LOC_OR_LOC (expr, loc), expr);\n \n   exprv = expr;\n@@ -11221,7 +11302,7 @@ c_finish_stmt_expr (location_t loc, tree body)\n \n       /* If we're supposed to generate side effects warnings, process\n \t all of the statements except the last.  */\n-      if (warn_unused_value)\n+      if (warn_unused_value || warn_unused_result)\n \t{\n \t  for (tree_stmt_iterator i = tsi_start (last);\n \t       tsi_stmt (i) != tsi_stmt (l); tsi_next (&i))"}, {"sha": "f4893bd123de07e12d4cc2d5579a485782cf610d", "filename": "gcc/testsuite/gcc.dg/c2x-attr-nodiscard-1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-1.c?ref=c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "patch": "@@ -0,0 +1,62 @@\n+/* Test C2x deprecated attribute: valid uses.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[nodiscard]] int c1 (void); /* { dg-message \"declared here\" } */\n+[[__nodiscard__ (\"some reason\")]] int c2 (void); /* { dg-message \"declared here\" } */\n+\n+struct [[nodiscard (\"struct reason\")]] s1 { int a; };\n+struct [[__nodiscard__]] s2 { long b; };\n+struct s1 cs1 (void); /* { dg-message \"declared here\" } */\n+struct s2 cs2 (void); /* { dg-message \"declared here\" } */\n+typedef struct s2 s2t;\n+s2t cs3 (void); /* { dg-message \"declared here\" } */\n+\n+union [[nodiscard]] u1 { int a; long b; };\n+union [[nodiscard (\"union reason\")]] u2 { short c; float d; };\n+union u1 cu1 (void); /* { dg-message \"declared here\" } */\n+union u2 cu2 (void); /* { dg-message \"declared here\" } */\n+\n+enum [[nodiscard]] e1 { E1 };\n+enum [[nodiscard (\"enum reason\")]] e2 { E2 };\n+enum e1 ce1 (void); /* { dg-message \"declared here\" } */\n+enum e2 ce2 (void); /* { dg-message \"declared here\" } */\n+enum e1 ce1a (void);\n+int i;\n+\n+[[nodiscard]] void v (void); /* { dg-warning \"void return type\" } */\n+\n+int ok (void);\n+\n+void\n+f (void)\n+{\n+  c1 (); /* { dg-warning \"ignoring return value\" } */\n+  c2 (); /* { dg-warning \"some reason\" } */\n+  cs1 (); /* { dg-warning \"struct reason\" } */\n+  cs2 (); /* { dg-warning \"ignoring return value of type\" } */\n+  cs3 (); /* { dg-warning \"ignoring return value of type\" } */\n+  cu1 (); /* { dg-warning \"ignoring return value of type\" } */\n+  cu2 (); /* { dg-warning \"union reason\" } */\n+  ce1 (); /* { dg-warning \"ignoring return value of type\" } */\n+  ce2 (); /* { dg-warning \"enum reason\" } */\n+  ok ();\n+  c1 (), ok (); /* { dg-warning \"ignoring return value\" } */\n+  cs1 (), ok (); /* { dg-warning \"struct reason\" } */\n+  ok (), cu1 (); /* { dg-warning \"ignoring return value\" } */\n+  ok (), (ok (), (ok (), ce2 ())); /* { dg-warning \"enum reason\" } */\n+  (ok (), cu1 ()), ok (); /* { dg-warning \"ignoring return value\" } */\n+  v ();\n+  (i ? ce1 : ce1a) (); /* { dg-warning \"ignoring return value of type\" } */\n+  (void) c1 ();\n+  (void) c2 ();\n+  (void) cs1 ();\n+  (void) cs2 ();\n+  (void) cs3 ();\n+  (void) cu1 ();\n+  (void) cu2 ();\n+  (void) ce1 ();\n+  (void) ce2 ();\n+  (void) (ok (), cu1 ());\n+  (void) (i ? ce1 : ce1a) ();\n+}"}, {"sha": "45c4d50dee0a65928a9305857e7685a2c602fe3a", "filename": "gcc/testsuite/gcc.dg/c2x-attr-nodiscard-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-2.c?ref=c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "patch": "@@ -0,0 +1,42 @@\n+/* Test C2x nodiscard attribute: invalid contexts.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+/* This attribute is not valid on types other than their definitions,\n+   or on declarations other than function declarations, or on\n+   statements, or as an attribute-declaration.  */\n+\n+[[nodiscard]]; /* { dg-error \"ignored\" } */\n+\n+int [[nodiscard]] var; /* { dg-error \"ignored\" } */\n+\n+int [[nodiscard (\"reason\")]] var2; /* { dg-error \"ignored\" } */\n+\n+int array_with_nod_type[2] [[nodiscard]]; /* { dg-error \"ignored\" } */\n+\n+void fn_with_nod_type () [[nodiscard]]; /* { dg-error \"ignored\" } */\n+\n+int z = sizeof (int [[__nodiscard__]]); /* { dg-error \"ignored\" } */\n+\n+[[nodiscard]] typedef int nod_int; /* { dg-error \"can only be applied\" } */\n+\n+[[nodiscard]] int nvar; /* { dg-error \"can only be applied\" } */\n+\n+struct s { int a; };\n+\n+[[nodiscard]] typedef struct s nod_s; /* { dg-error \"can only be applied\" } */\n+\n+struct t { [[nodiscard]] int b; }; /* { dg-error \"can only be applied\" } */\n+\n+enum e { E [[nodiscard]] }; /* { dg-error \"can only be applied\" } */\n+\n+void fx ([[nodiscard]] int p); /* { dg-error \"can only be applied\" } */\n+\n+void\n+f (void)\n+{\n+  int a;\n+  [[nodiscard (\"reason\")]] int b = 1; /* { dg-error \"can only be applied\" } */\n+  [[nodiscard]]; /* { dg-error \"ignored\" } */\n+  [[nodiscard]] a = 1; /* { dg-error \"ignored\" } */\n+}"}, {"sha": "2e70d12bff33e1f568ec14d5afa759d23e1d58f3", "filename": "gcc/testsuite/gcc.dg/c2x-attr-nodiscard-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-3.c?ref=c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "patch": "@@ -0,0 +1,11 @@\n+/* Test C2x nodiscard attribute: invalid syntax.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[nodiscard()]] int a (void); /* { dg-error \"parentheses must be omitted if attribute argument list is empty\" } */\n+\n+[[nodiscard(0)]] int b (void); /* { dg-error \"expected\" } */\n+\n+[[nodiscard(\"\", 123)]] int c (void); /* { dg-error \"expected\" } */\n+\n+[[nodiscard((\"\"))]] int d (void); /* { dg-error \"expected\" } */"}, {"sha": "278f55d1e5da59998e61362fdb2627eef7634cb5", "filename": "gcc/testsuite/gcc.dg/c2x-attr-nodiscard-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-nodiscard-4.c?ref=c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "patch": "@@ -0,0 +1,6 @@\n+/* Test C2x nodiscard attribute: duplicates (allowed after N2557).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[nodiscard, __nodiscard__]] int f (void);\n+[[__nodiscard__, nodiscard(\"message\")]] int g (void);"}, {"sha": "b261be067cefb41e14c8d58d15020602074a0da9", "filename": "gcc/testsuite/gcc.dg/c2x-attr-syntax-5.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19e44ac8dbc9af07e5e671edfa03ab5b08649c5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-5.c?ref=c19e44ac8dbc9af07e5e671edfa03ab5b08649c5", "patch": "@@ -49,8 +49,3 @@ func (void) [[unknown_attribute]] { /* { dg-error \"attribute ignored\" } */\n   [[unknown_attribute]] x: var = 2; /* { dg-error \"attribute ignored\" } */\n   for ([[unknown_attribute]] int zz = 1; zz < 10; zz++) ; /* { dg-error \"attribute ignored\" } */\n }\n-\n-/* nodiscard is not yet implemented, but is a standard attribute, so\n-   its use is not a constraint violation and should only receive a\n-   warning.  */\n-[[nodiscard]] int ndfunc (void); /* { dg-warning \"attribute directive ignored\" } */"}]}