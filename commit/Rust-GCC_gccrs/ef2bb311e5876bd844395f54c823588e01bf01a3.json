{"sha": "ef2bb311e5876bd844395f54c823588e01bf01a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyYmIzMTFlNTg3NmJkODQ0Mzk1ZjU0YzgyMzU4OGUwMWJmMDFhMw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-04-10T03:36:09Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-04-10T03:36:09Z"}, "message": "tree-ssa-alias.c (lhs_may_store_to): New function.\n\n2006-04-10 Daniel Berlin  <dberlin@dberlin.org>\n\t\n\t* tree-ssa-alias.c (lhs_may_store_to): New function.\n\t(recalculate_used_alone): Handle LHS of calls.\n\nFrom-SVN: r112815", "tree": {"sha": "68539a67faca48ae36f870363954009531c4f3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68539a67faca48ae36f870363954009531c4f3e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef2bb311e5876bd844395f54c823588e01bf01a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2bb311e5876bd844395f54c823588e01bf01a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2bb311e5876bd844395f54c823588e01bf01a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2bb311e5876bd844395f54c823588e01bf01a3/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8d47370efb4302a85a1ec3e194666647a2181f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d47370efb4302a85a1ec3e194666647a2181f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d47370efb4302a85a1ec3e194666647a2181f4"}], "stats": {"total": 76, "additions": 54, "deletions": 22}, "files": [{"sha": "2042aba1efe0c9fc99b479ab8d24641e70a030af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2bb311e5876bd844395f54c823588e01bf01a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2bb311e5876bd844395f54c823588e01bf01a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef2bb311e5876bd844395f54c823588e01bf01a3", "patch": "@@ -1,3 +1,8 @@\n+2006-04-10 Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\t* tree-ssa-alias.c (lhs_may_store_to): New function.\n+\t(recalculate_used_alone): Handle LHS of calls.\n+\n 2006-04-09  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/27034"}, {"sha": "a151c8c3f418e50ce2bdf4799c6bf2f24f745e21", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 49, "deletions": 22, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2bb311e5876bd844395f54c823588e01bf01a3/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2bb311e5876bd844395f54c823588e01bf01a3/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=ef2bb311e5876bd844395f54c823588e01bf01a3", "patch": "@@ -426,6 +426,26 @@ compute_call_clobbered (struct alias_info *ai)\n }\n \n \n+/* Helper for recalculate_used_alone.  Return a conservatively correct\n+   answer as to whether STMT may make a store on the LHS to SYM.  */\n+\n+static bool\n+lhs_may_store_to (tree stmt, tree sym ATTRIBUTE_UNUSED)\n+{\n+  tree lhs = TREE_OPERAND (stmt, 0);\n+  \n+  lhs = get_base_address (lhs);\n+  \n+  if (!lhs)\n+    return false;\n+\n+  if (TREE_CODE (lhs) == SSA_NAME)\n+    return false;\n+  /* We could do better here by looking at the type tag of LHS, but it\n+     is unclear whether this is worth it. */\n+  return true;\n+}\n+\n /* Recalculate the used_alone information for SMTs . */\n \n void \n@@ -457,38 +477,45 @@ recalculate_used_alone (void)\n     {\n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n \t{\n+\t  bool iscall = false;\n+\t  ssa_op_iter iter;\n+\n \t  stmt = bsi_stmt (bsi);\n+\t  \n \t  if (TREE_CODE (stmt) == CALL_EXPR\n \t      || (TREE_CODE (stmt) == MODIFY_EXPR \n \t\t  && TREE_CODE (TREE_OPERAND (stmt, 1)) == CALL_EXPR))\n-\t    VEC_safe_push (tree, heap, calls, stmt);\n-\t  else\n \t    {\n-\t      ssa_op_iter iter;\n+\t      iscall = true;\n+\t      VEC_safe_push (tree, heap, calls, stmt);\t    \n+\t    }\n+\t  \n+\t  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, \n+\t\t\t\t     SSA_OP_VUSE | SSA_OP_VIRTUAL_DEFS)\n+\t    {\n+\t      tree svar = var;\n+\t      \n+\t      if (TREE_CODE (var) == SSA_NAME)\n+\t\tsvar = SSA_NAME_VAR (var);\n \t      \n-\t      FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, \n-\t\t\t\t\t SSA_OP_VUSE | SSA_OP_VIRTUAL_DEFS)\n+\t      if (TREE_CODE (svar) == SYMBOL_MEMORY_TAG)\n \t\t{\n-\t\t  tree svar = var;\n-\t\t  \n-\t\t  if(TREE_CODE (var) == SSA_NAME)\n-\t\t    svar = SSA_NAME_VAR (var);\n-\t\t  \n-\t\t  if (TREE_CODE (svar) == SYMBOL_MEMORY_TAG)\n+\t\t  /* We only care about the LHS on calls.  */\n+\t\t  if (iscall && !lhs_may_store_to (stmt, svar))\n+\t\t    continue;\n+\n+\t\t  if (!SMT_USED_ALONE (svar))\n \t\t    {\n-\t\t      if (!SMT_USED_ALONE (svar))\n-\t\t\t{\n-\t\t\t  SMT_USED_ALONE (svar) = true;\n-\n-\t\t\t  /* Only need to mark for renaming if it wasn't\n-\t\t\t     used alone before.  */\n-\t\t\t  if (!SMT_OLD_USED_ALONE (svar))\n-\t\t\t    mark_sym_for_renaming (svar);\n-\t\t\t}\n+\t\t      SMT_USED_ALONE (svar) = true;\n+\t\t      \n+\t\t      /* Only need to mark for renaming if it wasn't\n+\t\t\t used alone before.  */\n+\t\t      if (!SMT_OLD_USED_ALONE (svar))\n+\t\t\tmark_sym_for_renaming (svar);\n \t\t    }\n \t\t}\n-\t    }\t           \n-\t}\n+\t    }\n+\t}\t           \n     }\n   \n   /* Update the operands on all the calls we saw.  */"}]}