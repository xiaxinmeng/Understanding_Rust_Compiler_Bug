{"sha": "fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE3NGE0YmNhODRhYWJlMGExNTAwZTRmZTUzNTk4OTVjMWYwN2U1NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-01-27T19:13:42Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-01-27T19:13:42Z"}, "message": "re PR c/68062 (ICE when comparing vectors)\n\n\tPR c/68062\n\t* c-typeck.c (build_binary_op) [EQ_EXPR, GE_EXPR]: Promote operand\n\tto unsigned, if needed.  Add -Wsign-compare warning.\n\n\t* typeck.c (cp_build_binary_op): Promote operand to unsigned, if\n\tneeded.  Add -Wsign-compare warning.\n\n\t* c-c++-common/vector-compare-4.c: New test.\n\nFrom-SVN: r232894", "tree": {"sha": "89e14ac50918a33bab845eb73ca1f83e8ad5f26c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89e14ac50918a33bab845eb73ca1f83e8ad5f26c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0afff540e652c77b409ce094f64cc2b033495785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afff540e652c77b409ce094f64cc2b033495785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0afff540e652c77b409ce094f64cc2b033495785"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "7999d2a987a82a5707bc7e1d661ecd1244861a95", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "patch": "@@ -1,3 +1,9 @@\n+2016-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/68062\n+\t* c-typeck.c (build_binary_op) [EQ_EXPR, GE_EXPR]: Promote operand\n+\tto unsigned, if needed.  Add -Wsign-compare warning.\n+\n 2016-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69483"}, {"sha": "65925cbc8e7f87f7ed8f5ed8170bda500459a685", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "patch": "@@ -11048,6 +11048,20 @@ build_binary_op (location_t location, enum tree_code code,\n               return error_mark_node;\n             }\n \n+\t  /* It's not precisely specified how the usual arithmetic\n+\t     conversions apply to the vector types.  Here, we use\n+\t     the unsigned type if one of the operands is signed and\n+\t     the other one is unsigned.  */\n+\t  if (TYPE_UNSIGNED (type0) != TYPE_UNSIGNED (type1))\n+\t    {\n+\t      if (!TYPE_UNSIGNED (type0))\n+\t\top0 = build1 (VIEW_CONVERT_EXPR, type1, op0);\n+\t      else\n+\t\top1 = build1 (VIEW_CONVERT_EXPR, type0, op1);\n+\t      warning_at (location, OPT_Wsign_compare, \"comparison between \"\n+\t\t\t  \"types %qT and %qT\", type0, type1);\n+\t    }\n+\n           /* Always construct signed integer vector type.  */\n           intt = c_common_type_for_size (GET_MODE_BITSIZE\n \t\t\t\t\t   (TYPE_MODE (TREE_TYPE (type0))), 0);\n@@ -11201,6 +11215,20 @@ build_binary_op (location_t location, enum tree_code code,\n               return error_mark_node;\n             }\n \n+\t  /* It's not precisely specified how the usual arithmetic\n+\t     conversions apply to the vector types.  Here, we use\n+\t     the unsigned type if one of the operands is signed and\n+\t     the other one is unsigned.  */\n+\t  if (TYPE_UNSIGNED (type0) != TYPE_UNSIGNED (type1))\n+\t    {\n+\t      if (!TYPE_UNSIGNED (type0))\n+\t\top0 = build1 (VIEW_CONVERT_EXPR, type1, op0);\n+\t      else\n+\t\top1 = build1 (VIEW_CONVERT_EXPR, type0, op1);\n+\t      warning_at (location, OPT_Wsign_compare, \"comparison between \"\n+\t\t\t  \"types %qT and %qT\", type0, type1);\n+\t    }\n+\n           /* Always construct signed integer vector type.  */\n           intt = c_common_type_for_size (GET_MODE_BITSIZE\n \t\t\t\t\t   (TYPE_MODE (TREE_TYPE (type0))), 0);"}, {"sha": "52fb9d8c36428830a2f093f0103452d03da1e714", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "patch": "@@ -1,3 +1,9 @@\n+2016-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/68062\n+\t* typeck.c (cp_build_binary_op): Promote operand to unsigned, if\n+\tneeded.  Add -Wsign-compare warning.\n+\n 2016-01-27  Ryan Burn  <contact@rnburn.com>\n \n \tPR cilkplus/69267"}, {"sha": "d2c23f42df2f1f8249c71814285f52f554e89491", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "patch": "@@ -4823,6 +4823,20 @@ cp_build_binary_op (location_t location,\n \t      return error_mark_node;\n \t    }\n \n+\t  /* It's not precisely specified how the usual arithmetic\n+\t     conversions apply to the vector types.  Here, we use\n+\t     the unsigned type if one of the operands is signed and\n+\t     the other one is unsigned.  */\n+\t  if (TYPE_UNSIGNED (type0) != TYPE_UNSIGNED (type1))\n+\t    {\n+\t      if (!TYPE_UNSIGNED (type0))\n+\t\top0 = build1 (VIEW_CONVERT_EXPR, type1, op0);\n+\t      else\n+\t\top1 = build1 (VIEW_CONVERT_EXPR, type0, op1);\n+\t      warning_at (location, OPT_Wsign_compare, \"comparison between \"\n+\t\t\t  \"types %qT and %qT\", type0, type1);\n+\t    }\n+\n \t  /* Always construct signed integer vector type.  */\n \t  intt = c_common_type_for_size (GET_MODE_BITSIZE\n \t\t\t\t\t   (TYPE_MODE (TREE_TYPE (type0))), 0);"}, {"sha": "2cad0c2585bde363a48d022ad92f0e3142c27d39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "patch": "@@ -1,3 +1,8 @@\n+2016-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/68062\n+\t* c-c++-common/vector-compare-4.c: New test.\n+\n 2016-01-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR preprocessor/69126"}, {"sha": "b44f474f395e80190812b5e44a83a55e38dc9800", "filename": "gcc/testsuite/c-c++-common/vector-compare-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa74a4bca84aabe0a1500e4fe5359895c1f07e55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-compare-4.c?ref=fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "patch": "@@ -0,0 +1,42 @@\n+/* PR c/68062 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsign-compare\" } */\n+\n+typedef signed char __attribute__ ((vector_size (4))) v4qi;\n+typedef unsigned char __attribute__ ((vector_size (4))) uv4qi;\n+typedef signed int __attribute__ ((vector_size (4 * __SIZEOF_INT__))) v4si;\n+typedef unsigned int __attribute__ ((vector_size (4 * __SIZEOF_INT__))) uv4si;\n+\n+v4qi\n+fn1 (void)\n+{\n+  v4qi a = { 1, 2, 3, 4 };\n+  uv4qi b = { 4, 3, 2, 1 };\n+  v4qi v = { 0, 0, 0, 0 };\n+\n+  v += (a == b); /* { dg-warning \"comparison between types\" } */\n+  v += (a != b); /* { dg-warning \"comparison between types\" } */\n+  v += (a >= b); /* { dg-warning \"comparison between types\" } */\n+  v += (a <= b); /* { dg-warning \"comparison between types\" } */\n+  v += (a > b); /* { dg-warning \"comparison between types\" } */\n+  v += (a < b); /* { dg-warning \"comparison between types\" } */\n+\n+  return v;\n+}\n+\n+v4si\n+fn2 (void)\n+{\n+  v4si a = { 1, 2, 3, 4 };\n+  uv4si b = { 4, 3, 2, 1 };\n+  v4si v = { 0, 0, 0, 0 };\n+\n+  v += (a == b); /* { dg-warning \"comparison between types\" } */\n+  v += (a != b); /* { dg-warning \"comparison between types\" } */\n+  v += (a >= b); /* { dg-warning \"comparison between types\" } */\n+  v += (a <= b); /* { dg-warning \"comparison between types\" } */\n+  v += (a > b); /* { dg-warning \"comparison between types\" } */\n+  v += (a < b); /* { dg-warning \"comparison between types\" } */\n+\n+  return v;\n+}"}]}