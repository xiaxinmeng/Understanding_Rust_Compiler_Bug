{"sha": "25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVhMDdjN2VlOWUxYTJlNTk1ZWZhNDg3NDBjZTUxNDRkMDA1ZTlhYw==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2014-02-05T05:22:29Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2014-02-05T05:22:29Z"}, "message": "re PR sanitizer/59600 (no_sanitize_address mishandled when function is inlined)\n\n\tPR sanitizer/59600\n\ngcc/\n\t* cif-code.def (ATTRIBUTE_MISMATCH): New CIF code.\n\t* ipa-inline.c (report_inline_failed_reason): Handle mismatched\n\tsanitization attributes.\n\t(can_inline_edge_p): Likewise.\n\t(sanitize_attrs_match_for_inline_p): New function.\n\ngcc/testsuite/\n\t* gcc.dg/asan/nosanitize-and-inline.c: : New test.\n\nFrom-SVN: r207497", "tree": {"sha": "c4458a513932ddf878811f6b9349550dfc2ba811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4458a513932ddf878811f6b9349550dfc2ba811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/comments", "author": null, "committer": null, "parents": [{"sha": "4bf2a588d4f65587e9678c8a5e068ebd92110f85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf2a588d4f65587e9678c8a5e068ebd92110f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bf2a588d4f65587e9678c8a5e068ebd92110f85"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "28d171caefca97f8efb429784bacff496adb1c57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "patch": "@@ -1,3 +1,11 @@\n+2014-02-05  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* cif-code.def (ATTRIBUTE_MISMATCH): New CIF code.\n+\t* ipa-inline.c (report_inline_failed_reason): Handle mismatched\n+\tsanitization attributes.\n+\t(can_inline_edge_p): Likewise.\n+\t(sanitize_attrs_match_for_inline_p): New function.\n+\n 2014-02-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-prop.c (detect_type_change): Shor circuit testing of"}, {"sha": "71f3e39a6da6fba00c89d1b0680eeddc79970a59", "filename": "gcc/cif-code.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "patch": "@@ -123,3 +123,7 @@ DEFCIFCODE(OPTIMIZATION_MISMATCH, CIF_FINAL_ERROR,\n /* We can't inline because the callee refers to comdat-local symbols.  */\n DEFCIFCODE(USES_COMDAT_LOCAL, CIF_FINAL_NORMAL,\n \t   N_(\"callee refers to comdat-local symbols\"))\n+\n+/* We can't inline because of mismatched caller/callee attributes.  */\n+DEFCIFCODE(ATTRIBUTE_MISMATCH, CIF_FINAL_NORMAL,\n+\t   N_(\"function attribute mismatch\"))"}, {"sha": "ce24ea50a37ca8b4666a951b8c41077311e5a710", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "patch": "@@ -234,7 +234,25 @@ report_inline_failed_reason (struct cgraph_edge *e)\n     }\n }\n \n-/* Decide if we can inline the edge and possibly update\n+ /* Decide whether sanitizer-related attributes allow inlining. */\n+\n+static bool\n+sanitize_attrs_match_for_inline_p (const_tree caller, const_tree callee)\n+{\n+  /* Don't care if sanitizer is disabled */\n+  if (!(flag_sanitize & SANITIZE_ADDRESS))\n+    return true;\n+\n+  if (!caller || !callee)\n+    return true;\n+\n+  return !!lookup_attribute (\"no_sanitize_address\",\n+      DECL_ATTRIBUTES (caller)) == \n+      !!lookup_attribute (\"no_sanitize_address\",\n+      DECL_ATTRIBUTES (callee));\n+}\n+\n+ /* Decide if we can inline the edge and possibly update\n    inline_failed reason.  \n    We check whether inlining is possible at all and whether\n    caller growth limits allow doing so.  \n@@ -327,6 +345,12 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       e->inline_failed = CIF_TARGET_OPTION_MISMATCH;\n       inlinable = false;\n     }\n+  /* Don't inline a function with mismatched sanitization attributes. */\n+  else if (!sanitize_attrs_match_for_inline_p (e->caller->decl, callee->decl))\n+    {\n+      e->inline_failed = CIF_ATTRIBUTE_MISMATCH;\n+      inlinable = false;\n+    }\n   /* Check if caller growth allows the inlining.  */\n   else if (!DECL_DISREGARD_INLINE_LIMITS (callee->decl)\n \t   && !disregard_limits"}, {"sha": "2f154f44e27e74f6f9078af3a278a5590e2206e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "patch": "@@ -1,3 +1,7 @@\n+2014-02-05  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* gcc.dg/asan/nosanitize-and-inline.c: : New test.\n+\n 2014-02-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/ipa/devirrt-22.C: Fix template."}, {"sha": "585380162165dc539ea6ce51d47551e219d2aff1", "filename": "gcc/testsuite/gcc.dg/asan/nosanitize-and-inline.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fnosanitize-and-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a07c7ee9e1a2e595efa48740ce5144d005e9ac/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fnosanitize-and-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fnosanitize-and-inline.c?ref=25a07c7ee9e1a2e595efa48740ce5144d005e9ac", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+\n+/* This is a simplified version of what Emacs does internally,\n+   when marking its stack.  */\n+\n+static unsigned long sum;\n+static void *stack_base;\n+\n+/* A simple substitute for what Emacs actually does.  */\n+static void\n+mark_maybe_pointer (void *p)\n+{\n+  sum ^= (unsigned long) p;\n+}\n+\n+static inline void __attribute__ ((no_sanitize_address))\n+mark_memory (void **start, void **end)\n+{\n+  void **pp;\n+\n+  if (end < start)\n+    {\n+      void **tem = start;\n+      start = end;\n+      end = tem;\n+    }\n+\n+  for (pp = start; pp < end; pp++)\n+    {\n+      /* This is the dereference that we don't want sanitized.  */\n+      void *p = *pp;\n+\n+      mark_maybe_pointer (p);\n+    }\n+}\n+\n+static void\n+mark_stack (void)\n+{\n+  void *end;\n+  mark_memory (stack_base, &end);\n+}\n+\n+void\n+garbage_collect (void)\n+{\n+  mark_stack ();\n+}\n+\n+int\n+main (void)\n+{\n+  void *dummy;\n+  stack_base = &dummy;\n+  garbage_collect ();\n+  return 0;\n+}"}]}