{"sha": "41de45c6a0d599a3913afffb9c3288663094a55a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkZTQ1YzZhMGQ1OTlhMzkxM2FmZmZiOWMzMjg4NjYzMDk0YTU1YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-07-09T14:29:50Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-07-09T14:29:50Z"}, "message": "mpi.c (runtime_error): New function.\n\n2011-07-09  Tobias Burnus  <burnus@net-b.de>\n            Daniel Carrera  <dcarrera@gmail.com>\n\n        * caf/mpi.c (runtime_error): New function.\n        (_gfortran_caf_register): Use it.\n        (_gfortran_caf_sync_all): Use it, add STAT_STOPPED_IMAGE\n        as possible status value.\n        (_gfortran_caf_sync_images): Ditto.\n\n\nCo-Authored-By: Daniel Carrera <dcarrera@gmail.com>\n\nFrom-SVN: r176080", "tree": {"sha": "f649f22e5fb5438e86dec1f4660a052a30d21151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f649f22e5fb5438e86dec1f4660a052a30d21151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41de45c6a0d599a3913afffb9c3288663094a55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41de45c6a0d599a3913afffb9c3288663094a55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41de45c6a0d599a3913afffb9c3288663094a55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41de45c6a0d599a3913afffb9c3288663094a55a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "677aad9c92d346e6cfea943445c2d04a4a4c8cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677aad9c92d346e6cfea943445c2d04a4a4c8cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677aad9c92d346e6cfea943445c2d04a4a4c8cea"}], "stats": {"total": 129, "additions": 83, "deletions": 46}, "files": [{"sha": "d278f93b8002a7bf94a191284936341b64a883cb", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41de45c6a0d599a3913afffb9c3288663094a55a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41de45c6a0d599a3913afffb9c3288663094a55a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=41de45c6a0d599a3913afffb9c3288663094a55a", "patch": "@@ -1,3 +1,12 @@\n+2011-07-09  Tobias Burnus  <burnus@net-b.de>\n+\t    Daniel Carrera  <dcarrera@gmail.com>\n+\n+\t* caf/mpi.c (runtime_error): New function.\n+\t(_gfortran_caf_register): Use it.\n+\t(_gfortran_caf_sync_all): Use it, add STAT_STOPPED_IMAGE\n+\tas possible status value.\n+\t(_gfortran_caf_sync_images): Ditto.\n+\n 2011-07-07  Tobias Burnus  <burnus@net-b.de>\n \n \t* libcaf.h (__attribute__, unlikely, likely): New macros."}, {"sha": "a8306ddb8a74b808b175bbcfe3e56f8fcc6b1f3f", "filename": "libgfortran/caf/mpi.c", "status": "modified", "additions": 74, "deletions": 46, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41de45c6a0d599a3913afffb9c3288663094a55a/libgfortran%2Fcaf%2Fmpi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41de45c6a0d599a3913afffb9c3288663094a55a/libgfortran%2Fcaf%2Fmpi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fmpi.c?ref=41de45c6a0d599a3913afffb9c3288663094a55a", "patch": "@@ -28,6 +28,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\t/* For memcpy.  */\n+#include <stdarg.h>\t/* For variadic arguments.  */\n #include <mpi.h>\n \n \n@@ -46,6 +47,25 @@ static int caf_is_finalized;\n caf_static_t *caf_static_list = NULL;\n \n \n+static void\n+caf_runtime_error (int error, const char *message, ...)\n+{\n+  va_list ap;\n+  fprintf (stderr, \"Fortran runtime error on image %d: \", caf_this_image);\n+  va_start (ap, message);\n+  fprintf (stderr, message, ap);\n+  va_end (ap);\n+  fprintf (stderr, \"\\n\");\n+\n+  /* FIXME: Shutdown the Fortran RTL to flush the buffer.  PR 43849.  */\n+  /* FIXME: Do some more effort than just MPI_ABORT.  */\n+  MPI_Abort (MPI_COMM_WORLD, error);\n+\n+  /* Should be unreachable, but to make sure also call exit.  */\n+  exit (2);\n+}\n+\n+\n /* Initialize coarray program.  This routine assumes that no other\n    MPI initialization happened before; otherwise MPI_Initialized\n    had to be used.  As the MPI library might modify the command-line\n@@ -138,34 +158,31 @@ _gfortran_caf_register (ptrdiff_t size, caf_register_t type, void **token,\n   return local;\n \n error:\n-  if (stat)\n-    {\n-      *stat = caf_is_finalized ? STAT_STOPPED_IMAGE : 1;\n-      if (errmsg_len > 0)\n-\t{\n-\t  char *msg;\n-\t  if (caf_is_finalized)\n-\t    msg = \"Failed to allocate coarray - stopped images\";\n-\t  else\n-\t    msg = \"Failed to allocate coarray\";\n-\t  int len = ((int) strlen (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t      : (int) strlen (msg);\n-\t  memcpy (errmsg, msg, len);\n-\t  if (errmsg_len > len)\n-\t    memset (&errmsg[len], ' ', errmsg_len-len);\n-\t}\n-      return NULL;\n-    }\n-  else\n-    {\n-      if (caf_is_finalized)\n-\tfprintf (stderr, \"ERROR: Image %d is stopped, failed to allocate \"\n-\t\t \"coarray\", caf_this_image);\n-      else\n-\tfprintf (stderr, \"ERROR: Failed to allocate coarray on image %d\\n\",\n-\t\t caf_this_image);\n-      error_stop (1);\n-    }\n+  {\n+    char *msg;\n+\n+    if (caf_is_finalized)\n+      msg = \"Failed to allocate coarray - there are stopped images\";\n+    else\n+      msg = \"Failed to allocate coarray\";\n+\n+    if (stat)\n+      {\n+\t*stat = caf_is_finalized ? STAT_STOPPED_IMAGE : 1;\n+\tif (errmsg_len > 0)\n+\t  {\n+\t    int len = ((int) strlen (msg) > errmsg_len) ? errmsg_len\n+\t\t\t\t\t\t\t: (int) strlen (msg);\n+\t    memcpy (errmsg, msg, len);\n+\t    if (errmsg_len > len)\n+\t      memset (&errmsg[len], ' ', errmsg_len-len);\n+\t  }\n+      }\n+    else\n+      caf_runtime_error (caf_is_finalized ? STAT_STOPPED_IMAGE : 1, msg);\n+  }\n+\n+  return NULL;\n }\n \n \n@@ -179,28 +196,34 @@ _gfortran_caf_deregister (void **token __attribute__ ((unused)))\n void\n _gfortran_caf_sync_all (int *stat, char *errmsg, int errmsg_len)\n {\n-  /* TODO: Is ierr correct? When should STAT_STOPPED_IMAGE be used?  */\n-  int ierr = MPI_Barrier (MPI_COMM_WORLD);\n+  int ierr;\n \n+  if (unlikely (caf_is_finalized))\n+    ierr = STAT_STOPPED_IMAGE;\n+  else\n+    ierr = MPI_Barrier (MPI_COMM_WORLD);\n+ \n   if (stat)\n     *stat = ierr;\n \n   if (ierr)\n     {\n-      const char msg[] = \"SYNC ALL failed\";\n+      char *msg;\n+      if (caf_is_finalized)\n+\tmsg = \"SYNC ALL failed - there are stopped images\";\n+      else\n+\tmsg = \"SYNC ALL failed\";\n+\n       if (errmsg_len > 0)\n \t{\n-\t  int len = ((int) sizeof (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t      : (int) sizeof (msg);\n+\t  int len = ((int) strlen (msg) > errmsg_len) ? errmsg_len\n+\t\t\t\t\t\t      : (int) strlen (msg);\n \t  memcpy (errmsg, msg, len);\n \t  if (errmsg_len > len)\n \t    memset (&errmsg[len], ' ', errmsg_len-len);\n \t}\n       else\n-\t{\n-\t  fprintf (stderr, \"SYNC ALL failed\\n\");\n-\t  error_stop (ierr);\n-\t}\n+\tcaf_runtime_error (caf_is_finalized ? STAT_STOPPED_IMAGE : ierr, msg);\n     }\n }\n \n@@ -243,27 +266,32 @@ _gfortran_caf_sync_images (int count, int images[], int *stat, char *errmsg,\n     }\n \n   /* Handle SYNC IMAGES(*).  */\n-  /* TODO: Is ierr correct? When should STAT_STOPPED_IMAGE be used?  */\n-  ierr = MPI_Barrier (MPI_COMM_WORLD);\n+  if (unlikely(caf_is_finalized))\n+    ierr = STAT_STOPPED_IMAGE;\n+  else\n+    ierr = MPI_Barrier (MPI_COMM_WORLD);\n+\n   if (stat)\n     *stat = ierr;\n \n   if (ierr)\n     {\n-      const char msg[] = \"SYNC IMAGES failed\";\n+      char *msg;\n+      if (caf_is_finalized)\n+\tmsg = \"SYNC IMAGES failed - there are stopped images\";\n+      else\n+\tmsg = \"SYNC IMAGES failed\";\n+\n       if (errmsg_len > 0)\n \t{\n-\t  int len = ((int) sizeof (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t      : (int) sizeof (msg);\n+\t  int len = ((int) strlen (msg) > errmsg_len) ? errmsg_len\n+\t\t\t\t\t\t      : (int) strlen (msg);\n \t  memcpy (errmsg, msg, len);\n \t  if (errmsg_len > len)\n \t    memset (&errmsg[len], ' ', errmsg_len-len);\n \t}\n       else\n-\t{\n-\t  fprintf (stderr, \"SYNC IMAGES failed\\n\");\n-\t  error_stop (ierr);\n-\t}\n+\tcaf_runtime_error (caf_is_finalized ? STAT_STOPPED_IMAGE : ierr, msg);\n     }\n }\n "}]}