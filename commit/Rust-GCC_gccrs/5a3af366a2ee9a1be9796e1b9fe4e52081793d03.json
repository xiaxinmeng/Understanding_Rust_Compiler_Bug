{"sha": "5a3af366a2ee9a1be9796e1b9fe4e52081793d03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEzYWYzNjZhMmVlOWExYmU5Nzk2ZTFiOWZlNGU1MjA4MTc5M2QwMw==", "commit": {"author": {"name": "Jim Blandy", "email": "jimb@gcc.gnu.org", "date": "1993-05-21T23:39:17Z"}, "committer": {"name": "Jim Blandy", "email": "jimb@gcc.gnu.org", "date": "1993-05-21T23:39:17Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r4535", "tree": {"sha": "297bc99604d4645a255aed28d19bd17bd682e632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/297bc99604d4645a255aed28d19bd17bd682e632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a3af366a2ee9a1be9796e1b9fe4e52081793d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3af366a2ee9a1be9796e1b9fe4e52081793d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3af366a2ee9a1be9796e1b9fe4e52081793d03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3af366a2ee9a1be9796e1b9fe4e52081793d03/comments", "author": null, "committer": null, "parents": [{"sha": "ceaff0a861fbfc383d6df32aa2b40311424d8182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceaff0a861fbfc383d6df32aa2b40311424d8182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceaff0a861fbfc383d6df32aa2b40311424d8182"}], "stats": {"total": 8, "additions": 1, "deletions": 7}, "files": [{"sha": "bc34529fdd296718f3768e0971a2522d646fcae0", "filename": "gcc/alloca.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3af366a2ee9a1be9796e1b9fe4e52081793d03/gcc%2Falloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3af366a2ee9a1be9796e1b9fe4e52081793d03/gcc%2Falloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloca.c?ref=5a3af366a2ee9a1be9796e1b9fe4e52081793d03", "patch": "@@ -42,10 +42,6 @@ lose\n #endif /* static */\n #endif /* emacs */\n \n-#ifdef emacs\n-#define free xfree\n-#endif\n-\n /* If your stack is a linked list of frames, you have to\n    provide an \"address metric\" ADDRESS_FUNCTION macro.  */\n \n@@ -64,8 +60,6 @@ typedef char *pointer;\n \n #define\tNULL\t0\n \n-extern pointer xmalloc ();\n-\n /* Define STACK_DIRECTION if you know the direction of stack\n    growth for your system; otherwise it will be automatically\n    deduced at run-time.\n@@ -181,7 +175,7 @@ alloca (size)\n   /* Allocate combined header + user data storage.  */\n \n   {\n-    register pointer new = xmalloc (sizeof (header) + size);\n+    register pointer new = malloc (sizeof (header) + size);\n     /* Address of header.  */\n \n     ((header *) new)->h.next = last_alloca_header;"}]}