{"sha": "c1ee289264eb8606cc6458062bcfd756e76d688d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlZTI4OTI2NGViODYwNmNjNjQ1ODA2MmJjZmQ3NTZlNzZkNjg4ZA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-04-19T10:54:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-19T10:54:47Z"}, "message": "re PR middle-end/47976 (Recent gfortran.dg/actual_array_constructor_3.f90 regression on arm-linux-gnueabi)\n\n2011-04-19  Bernd Schmidt  <bernds@codesourcery.com>\n\n\tPR fortran/47976\n\t* reload1.c (inc_for_reload): Return void. All callers changed.\n\t(emit_input_reload_insns): Don't try to delete previous output\n\treloads to a register, or record spill_reg_store for autoincs.\n\nFrom-SVN: r172706", "tree": {"sha": "f50823ff72ac702aaae007905a5f73c5155fb333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f50823ff72ac702aaae007905a5f73c5155fb333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1ee289264eb8606cc6458062bcfd756e76d688d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ee289264eb8606cc6458062bcfd756e76d688d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ee289264eb8606cc6458062bcfd756e76d688d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ee289264eb8606cc6458062bcfd756e76d688d/comments", "author": null, "committer": null, "parents": [{"sha": "fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "9ad06f8fd7e6a4b263e760bea90a08a6f0bf497a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ee289264eb8606cc6458062bcfd756e76d688d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ee289264eb8606cc6458062bcfd756e76d688d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1ee289264eb8606cc6458062bcfd756e76d688d", "patch": "@@ -1,3 +1,9 @@\n+2011-04-19  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR fortran/47976\n+\t* reload1.c (inc_for_reload): Return void. All callers changed.\n+\t(emit_input_reload_insns): Don't try to delete previous output\n+\treloads to a register, or record spill_reg_store for autoincs.\n \n 2011-04-19  Basile Starynkevitch  <basile@starynkevitch.net>\n "}, {"sha": "058b5e9e51b68f8dec2037ad272292d3abeeb10d", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ee289264eb8606cc6458062bcfd756e76d688d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ee289264eb8606cc6458062bcfd756e76d688d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c1ee289264eb8606cc6458062bcfd756e76d688d", "patch": "@@ -409,7 +409,7 @@ static void emit_reload_insns (struct insn_chain *);\n static void delete_output_reload (rtx, int, int, rtx);\n static void delete_address_reloads (rtx, rtx);\n static void delete_address_reloads_1 (rtx, rtx, rtx);\n-static rtx inc_for_reload (rtx, rtx, rtx, int);\n+static void inc_for_reload (rtx, rtx, rtx, int);\n #ifdef AUTO_INC_DEC\n static void add_auto_inc_notes (rtx, rtx);\n #endif\n@@ -7139,22 +7139,12 @@ emit_input_reload_insns (struct insn_chain *chain, struct reload *rl,\n \n       old = XEXP (rl->in_reg, 0);\n \n-      if (optimize && REG_P (oldequiv)\n-\t  && REGNO (oldequiv) < FIRST_PSEUDO_REGISTER\n-\t  && spill_reg_store[REGNO (oldequiv)]\n-\t  && REG_P (old)\n-\t  && (dead_or_set_p (insn,\n-\t\t\t     spill_reg_stored_to[REGNO (oldequiv)])\n-\t      || rtx_equal_p (spill_reg_stored_to[REGNO (oldequiv)],\n-\t\t\t      old)))\n-\tdelete_output_reload (insn, j, REGNO (oldequiv), reloadreg);\n-\n       /* Prevent normal processing of this reload.  */\n       special = 1;\n-      /* Output a special code sequence for this case.  */\n-      new_spill_reg_store[REGNO (reloadreg)]\n-\t= inc_for_reload (reloadreg, oldequiv, rl->out,\n-\t\t\t  rl->inc);\n+      /* Output a special code sequence for this case, and forget about\n+\t spill reg information.  */\n+      new_spill_reg_store[REGNO (reloadreg)] = NULL;\n+      inc_for_reload (reloadreg, oldequiv, rl->out, rl->inc);\n     }\n \n   /* If we are reloading a pseudo-register that was set by the previous\n@@ -8965,11 +8955,9 @@ delete_address_reloads_1 (rtx dead_insn, rtx x, rtx current_insn)\n    IN is either identical to VALUE, or some cheaper place to reload from.\n \n    INC_AMOUNT is the number to increment or decrement by (always positive).\n-   This cannot be deduced from VALUE.\n-\n-   Return the instruction that stores into RELOADREG.  */\n+   This cannot be deduced from VALUE.  */\n \n-static rtx\n+static void\n inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n {\n   /* REG or MEM to be copied and incremented.  */\n@@ -8981,7 +8969,6 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n   rtx inc;\n   rtx add_insn;\n   int code;\n-  rtx store;\n   rtx real_in = in == value ? incloc : in;\n \n   /* No hard register is equivalent to this register after\n@@ -9029,9 +9016,8 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n \t\t be used as an address.  */\n \n \t      if (! post)\n-\t\tadd_insn = emit_insn (gen_move_insn (reloadreg, incloc));\n-\n-\t      return add_insn;\n+\t\temit_insn (gen_move_insn (reloadreg, incloc));\n+\t      return;\n \t    }\n \t}\n       delete_insns_since (last);\n@@ -9047,7 +9033,7 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n       if (in != reloadreg)\n \temit_insn (gen_move_insn (reloadreg, real_in));\n       emit_insn (gen_add2_insn (reloadreg, inc));\n-      store = emit_insn (gen_move_insn (incloc, reloadreg));\n+      emit_insn (gen_move_insn (incloc, reloadreg));\n     }\n   else\n     {\n@@ -9061,14 +9047,12 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n \t the original value.  */\n \n       emit_insn (gen_add2_insn (reloadreg, inc));\n-      store = emit_insn (gen_move_insn (incloc, reloadreg));\n+      emit_insn (gen_move_insn (incloc, reloadreg));\n       if (CONST_INT_P (inc))\n \temit_insn (gen_add2_insn (reloadreg, GEN_INT (-INTVAL (inc))));\n       else\n \temit_insn (gen_sub2_insn (reloadreg, inc));\n     }\n-\n-  return store;\n }\n \f\n #ifdef AUTO_INC_DEC"}]}