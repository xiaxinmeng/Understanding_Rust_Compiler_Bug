{"sha": "ca2b8c082c4f16919071c9f8de8db0b33b54c405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EyYjhjMDgyYzRmMTY5MTkwNzFjOWY4ZGU4ZGIwYjMzYjU0YzQwNQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2020-08-04T15:30:16Z"}, "committer": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2020-08-04T15:30:16Z"}, "message": "Simplify X * C1 == C2 with undefined overflow\n\nthis transformation is quite straightforward, without overflow, 3*X==15 is\nthe same as X==5 and 3*X==5 cannot happen. Adding a single_use restriction\nfor the first case didn't seem necessary, although of course it can\nslightly increase register pressure in some cases.\n\n2020-08-04  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/95433\n\t* match.pd (X * C1 == C2): New transformation.\n\n\t* gcc.c-torture/execute/pr23135.c: Add -fwrapv to avoid\n\tundefined behavior.\n\t* gcc.dg/tree-ssa/pr95433.c: New file.", "tree": {"sha": "457a68e6317228a5710215d659e7234c9da209ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457a68e6317228a5710215d659e7234c9da209ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca2b8c082c4f16919071c9f8de8db0b33b54c405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2b8c082c4f16919071c9f8de8db0b33b54c405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2b8c082c4f16919071c9f8de8db0b33b54c405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2b8c082c4f16919071c9f8de8db0b33b54c405/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c79d8335fd5905324b32d65cc0115986301f07eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79d8335fd5905324b32d65cc0115986301f07eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79d8335fd5905324b32d65cc0115986301f07eb"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "1372f89daff52f4a8ebf31aa07c2b335d9598bd9", "filename": "gcc/match.pd", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca2b8c082c4f16919071c9f8de8db0b33b54c405/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca2b8c082c4f16919071c9f8de8db0b33b54c405/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ca2b8c082c4f16919071c9f8de8db0b33b54c405", "patch": "@@ -3779,6 +3779,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (scmp @0 @2)\n      (cmp @0 @2))))))\n \n+/* For integral types with undefined overflow fold\n+   x * C1 == C2 into x == C2 / C1 or false.  */\n+(for cmp (eq ne)\n+ (simplify\n+  (cmp (mult @0 INTEGER_CST@1) INTEGER_CST@2)\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))\n+       && wi::to_wide (@1) != 0)\n+   (with { widest_int quot; }\n+    (if (wi::multiple_of_p (wi::to_widest (@2), wi::to_widest (@1),\n+\t\t\t    TYPE_SIGN (TREE_TYPE (@0)), &quot))\n+     (cmp @0 { wide_int_to_tree (TREE_TYPE (@0), quot); })\n+     { constant_boolean_node (cmp == NE_EXPR, type); })))))\n+\n /* Simplify comparison of something with itself.  For IEEE\n    floating-point, we can only do some of these simplifications.  */\n (for cmp (eq ge le)"}, {"sha": "ef9b7efc9c4588b76e0b2664c8cba21d4ea6deed", "filename": "gcc/testsuite/gcc.c-torture/execute/pr23135.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca2b8c082c4f16919071c9f8de8db0b33b54c405/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr23135.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca2b8c082c4f16919071c9f8de8db0b33b54c405/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr23135.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr23135.c?ref=ca2b8c082c4f16919071c9f8de8db0b33b54c405", "patch": "@@ -1,7 +1,7 @@\n /* Based on execute/simd-1.c, modified by joern.rennecke@st.com to\n    trigger a reload bug.  Verified for gcc mainline from 20050722 13:00 UTC\n    for sh-elf -m4 -O2.  */\n-/* { dg-options \"-Wno-psabi\" } */\n+/* { dg-options \"-Wno-psabi -fwrapv\" } */\n /* { dg-add-options stack_size } */\n \n #ifndef STACK_SIZE"}, {"sha": "4e161ee26cc00613eba37d64aac70fe97ac98678", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr95433.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca2b8c082c4f16919071c9f8de8db0b33b54c405/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95433.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca2b8c082c4f16919071c9f8de8db0b33b54c405/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95433.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95433.c?ref=ca2b8c082c4f16919071c9f8de8db0b33b54c405", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int f(int x){return x*7==17;}\n+int g(int x){return x*3==15;}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"== 5;\" \"optimized\" } } */"}]}