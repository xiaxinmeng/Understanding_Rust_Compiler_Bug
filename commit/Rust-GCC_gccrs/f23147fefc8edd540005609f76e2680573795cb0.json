{"sha": "f23147fefc8edd540005609f76e2680573795cb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzMTQ3ZmVmYzhlZGQ1NDAwMDU2MDlmNzZlMjY4MDU3Mzc5NWNiMA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2003-02-19T16:39:05Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2003-02-19T16:39:05Z"}, "message": "re PR libgcj/9652 (libjava bootstrap failure on irix6.5.1[78])\n\n\t* config/mips/iris6.h (TARGET_OS_CPP_BUILTINS): Define __c99 for\n\tISO C99 and C++.\n\n\t* fixinc/inclhack.def (irix___restrict): Don't change __restrict\n\tfor C++ on IRIX 6.5.1[89].\n\t* fixinc/tests/base/internal/sgimacros.h: New file.\n\n\t* fixinc/inclhack.def (irix_wcsftime): Use XPG5 variant for C99.\n\t* fixinc/tests/base/internal/wchar_core.h: New file.\n\n\t* fixinc/inclhack.def (irix_socklen_t): Fix broken IRIX 6.5.1[78]\n\tsocklen_t definition.\n\t* fixinc/fixincl.x: Regenerate.\n\t* fixinc/tests/base/sys/socket.h: New file.\n\tFixes PR libgcj/9652.\n\nFrom-SVN: r63123", "tree": {"sha": "1c9f4aca85a4f14ac86c03c1b3ffd419a81ac8ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9f4aca85a4f14ac86c03c1b3ffd419a81ac8ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f23147fefc8edd540005609f76e2680573795cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23147fefc8edd540005609f76e2680573795cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23147fefc8edd540005609f76e2680573795cb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23147fefc8edd540005609f76e2680573795cb0/comments", "author": null, "committer": null, "parents": [{"sha": "a191802c42bb6bf7b34acad3cc413a7c0c69015b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a191802c42bb6bf7b34acad3cc413a7c0c69015b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a191802c42bb6bf7b34acad3cc413a7c0c69015b"}], "stats": {"total": 280, "additions": 277, "deletions": 3}, "files": [{"sha": "0adec4f28cb56c9aba6d2af2b9e4b4eae5ae3634", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23147fefc8edd540005609f76e2680573795cb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23147fefc8edd540005609f76e2680573795cb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f23147fefc8edd540005609f76e2680573795cb0", "patch": "@@ -1,3 +1,21 @@\n+2003-02-19  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* config/mips/iris6.h (TARGET_OS_CPP_BUILTINS): Define __c99 for\n+\tISO C99 and C++.\n+\n+\t* fixinc/inclhack.def (irix___restrict): Don't change __restrict\n+\tfor C++ on IRIX 6.5.1[89].\n+\t* fixinc/tests/base/internal/sgimacros.h: New file.\n+\n+\t* fixinc/inclhack.def (irix_wcsftime): Use XPG5 variant for C99.\n+\t* fixinc/tests/base/internal/wchar_core.h: New file.\n+\t\n+\t* fixinc/inclhack.def (irix_socklen_t): Fix broken IRIX 6.5.1[78]\n+\tsocklen_t definition.\n+\t* fixinc/fixincl.x: Regenerate.\n+\t* fixinc/tests/base/sys/socket.h: New file.\n+\tFixes PR libgcj/9652.\n+\n Wed Feb 19 17:22:51 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (movsfcc_1, movdfcc_1): Fix constrains."}, {"sha": "987a58c6b9d9c744bdb74d1fde432e4ea940cfc3", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=f23147fefc8edd540005609f76e2680573795cb0", "patch": "@@ -125,6 +125,13 @@ Boston, MA 02111-1307, USA.  */\n      if (!ISA_MIPS1 && !ISA_MIPS2)\t\t\t\\\n \tbuiltin_define (\"_COMPILER_VERSION=601\");\t\\\n \t\t\t\t\t\t\t\\\n+     /* IRIX 6.5.18 and above provide many ISO C99\t\\\n+\tfeatures protected by the __c99 macro.\t\t\\\n+\tlibstdc++ v3 needs them as well.  */\t\t\\\n+     if ((c_language == clk_c && flag_isoc99)\t\t\\\n+\t || c_language == clk_cplusplus)\t\t\\\n+\tbuiltin_define (\"__c99\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n      if (c_language == clk_cplusplus)\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n \tbuiltin_define (\"__EXTENSIONS__\");\t\t\\"}, {"sha": "017b748fc73b7d915696fbc626f33ff69acaef0f", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 142, "deletions": 3, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=f23147fefc8edd540005609f76e2680573795cb0", "patch": "@@ -5,7 +5,7 @@\n  * files which are fixed to work correctly with ANSI C and placed in a\n  * directory that GNU C will search.\n  *\n- * This file contains 143 fixup descriptions.\n+ * This file contains 146 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -2370,6 +2370,88 @@ static const char* apzIrix_Limits_ConstPatch[] = {\n     \"extern __const \",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Irix___Restrict fix\n+ */\n+tSCC zIrix___RestrictName[] =\n+     \"irix___restrict\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zIrix___RestrictList[] =\n+  \"|internal/sgimacros.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzIrix___RestrictMachs[] = {\n+        \"mips-sgi-irix6.5\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zIrix___RestrictSelect0[] =\n+       \"(#ifdef __c99\\n\\\n+)(#[ \\t]*define __restrict restrict)\";\n+\n+#define    IRIX___RESTRICT_TEST_CT  1\n+static tTestDesc aIrix___RestrictTests[] = {\n+  { TT_EGREP,    zIrix___RestrictSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Irix___Restrict\n+ */\n+static const char* apzIrix___RestrictPatch[] = {\n+    \"format\",\n+    \"%1#  ifndef __cplusplus\\n\\\n+%2\\n\\\n+#  endif\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Irix_Socklen_T fix\n+ */\n+tSCC zIrix_Socklen_TName[] =\n+     \"irix_socklen_t\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zIrix_Socklen_TList[] =\n+  \"|sys/socket.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzIrix_Socklen_TMachs[] = {\n+        \"mips-sgi-irix6.5\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zIrix_Socklen_TSelect0[] =\n+       \"(#define _SOCKLEN_T\\n\\\n+)(typedef u_int32_t socklen_t;)\";\n+\n+#define    IRIX_SOCKLEN_T_TEST_CT  1\n+static tTestDesc aIrix_Socklen_TTests[] = {\n+  { TT_EGREP,    zIrix_Socklen_TSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Irix_Socklen_T\n+ */\n+static const char* apzIrix_Socklen_TPatch[] = {\n+    \"format\",\n+    \"%1#if _NO_XOPEN4 && _NO_XOPEN5\\n\\\n+typedef int socklen_t;\\n\\\n+#else\\n\\\n+%2\\n\\\n+#endif /* _NO_XOPEN4 && _NO_XOPEN5 */\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Irix_Stdio_Va_List fix\n@@ -2405,6 +2487,45 @@ static const char* apzIrix_Stdio_Va_ListPatch[] = {\n     \"%1, __gnuc_va_list\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Irix_Wcsftime fix\n+ */\n+tSCC zIrix_WcsftimeName[] =\n+     \"irix_wcsftime\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zIrix_WcsftimeList[] =\n+  \"|internal/wchar_core.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzIrix_WcsftimeMachs[] = {\n+        \"mips-sgi-irix6.5\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zIrix_WcsftimeSelect0[] =\n+       \"#if _NO_XOPEN5\\n\\\n+(extern size_t[ \\t]+wcsftime.*const char *.*)\";\n+\n+#define    IRIX_WCSFTIME_TEST_CT  1\n+static tTestDesc aIrix_WcsftimeTests[] = {\n+  { TT_EGREP,    zIrix_WcsftimeSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Irix_Wcsftime\n+ */\n+static const char* apzIrix_WcsftimePatch[] = {\n+    \"format\",\n+    \"#if _NO_XOPEN5 && !defined(__c99)\\n\\\n+%1\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Isc_Fmod fix\n@@ -5645,9 +5766,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          155\n+#define REGEX_COUNT          158\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            143\n+#define FIX_COUNT            146\n \n /*\n  *  Enumerate the fixes\n@@ -5710,7 +5831,10 @@ typedef enum {\n     IP_MISSING_SEMI_FIXIDX,\n     IRIX_ASM_APOSTROPHE_FIXIDX,\n     IRIX_LIMITS_CONST_FIXIDX,\n+    IRIX___RESTRICT_FIXIDX,\n+    IRIX_SOCKLEN_T_FIXIDX,\n     IRIX_STDIO_VA_LIST_FIXIDX,\n+    IRIX_WCSFTIME_FIXIDX,\n     ISC_FMOD_FIXIDX,\n     ISC_OMITS_WITH_STDC_FIXIDX,\n     KANDR_CONCAT_FIXIDX,\n@@ -6084,11 +6208,26 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      IRIX_LIMITS_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aIrix_Limits_ConstTests,   apzIrix_Limits_ConstPatch, 0 },\n \n+  {  zIrix___RestrictName,    zIrix___RestrictList,\n+     apzIrix___RestrictMachs,\n+     IRIX___RESTRICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aIrix___RestrictTests,   apzIrix___RestrictPatch, 0 },\n+\n+  {  zIrix_Socklen_TName,    zIrix_Socklen_TList,\n+     apzIrix_Socklen_TMachs,\n+     IRIX_SOCKLEN_T_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aIrix_Socklen_TTests,   apzIrix_Socklen_TPatch, 0 },\n+\n   {  zIrix_Stdio_Va_ListName,    zIrix_Stdio_Va_ListList,\n      apzIrix_Stdio_Va_ListMachs,\n      IRIX_STDIO_VA_LIST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aIrix_Stdio_Va_ListTests,   apzIrix_Stdio_Va_ListPatch, 0 },\n \n+  {  zIrix_WcsftimeName,    zIrix_WcsftimeList,\n+     apzIrix_WcsftimeMachs,\n+     IRIX_WCSFTIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aIrix_WcsftimeTests,   apzIrix_WcsftimePatch, 0 },\n+\n   {  zIsc_FmodName,    zIsc_FmodList,\n      apzIsc_FmodMachs,\n      ISC_FMOD_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "5ff0e9a42fb9d657ed18315943c0eb07c64d2026", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=f23147fefc8edd540005609f76e2680573795cb0", "patch": "@@ -1356,6 +1356,48 @@ fix = {\n };\n \n \n+/*\n+ *  IRIX 6.5.1[89] <internal/sgimacros.h> unconditionally defines\n+ *  __restrict as restrict iff __c99.  This is wrong for C++, which\n+ *  needs many C99 features, but only supports __restrict.\n+ */\n+fix = {\n+    hackname  = irix___restrict;\n+    files     = internal/sgimacros.h;\n+    select    = \"(#ifdef __c99\\n)(#[ \\t]*define __restrict restrict)\";\n+\n+    mach      = \"mips-sgi-irix6.5\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1\"\n+\t\t\"#  ifndef __cplusplus\\n%2\\n#  endif\";\n+\n+    test_text = \"#ifdef __c99\\n#  define __restrict restrict\";\n+};\n+\n+/*\n+ *  IRIX 6.5.1[78] <sys/socket.h> has a broken definition of socklen_t.\n+ *  Various socket function prototypes use different types instead,\n+ *  depending on the API in use (BSD, XPG4/5), but the socklen_t\n+ *  definition doesn't reflect this (SGI Bug Id 864477, fixed in\n+ *  IRIX 6.5.19).\n+ */\n+fix = {\n+    hackname  = irix_socklen_t;\n+    files     = sys/socket.h;\n+    select    = \"(#define _SOCKLEN_T\\n)(typedef u_int32_t socklen_t;)\";\n+\n+    mach      = \"mips-sgi-irix6.5\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1\"\n+    \t\t\"#if _NO_XOPEN4 && _NO_XOPEN5\\n\"\n+    \t\t\"typedef int socklen_t;\\n\"\n+\t\t\"#else\\n\"\n+    \t\t\"%2\\n\"\n+    \t\t\"#endif /* _NO_XOPEN4 && _NO_XOPEN5 */\";\n+\n+    test_text = \"#define _SOCKLEN_T\\ntypedef u_int32_t socklen_t;\";\n+};\n+\n /*\n  *  IRIX 5.x's stdio.h declares some functions that take a va_list as\n  *  taking char *.  However, GCC uses void * for va_list, so\n@@ -1372,6 +1414,23 @@ fix = {\n };\n \n \n+/*\n+ *  IRIX 6.5.19 <internal/wchar_core.h> provides the XPG4 variant of\n+ *  wcsftime by default.  ISO C99 requires the XPG5 variant instead.\n+ */\n+fix = {\n+    hackname  = irix_wcsftime;\n+    files     = internal/wchar_core.h;\n+    select    = \"#if _NO_XOPEN5\\n(extern size_t[ \\t]+wcsftime.*const char \\*.*)\";\n+\n+    mach      = \"mips-sgi-irix6.5\";\n+    c_fix     = format;\n+    c_fix_arg = \"#if _NO_XOPEN5 && !defined(__c99)\\n%1\";\n+\n+    test_text = \"#if _NO_XOPEN5\\n\"\n+\t\t\"extern size_t          wcsftime(wchar_t *, __SGI_LIBC_NAMESPACE_QUALIFIER size_t, const char *, const struct tm *);\";\n+};\n+\n /*\n  * Fixing ISC fmod declaration\n  */"}, {"sha": "fc72569749836f27f3f521495b41cb6ea2ba5aa6", "filename": "gcc/fixinc/tests/base/internal/sgimacros.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fsgimacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fsgimacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fsgimacros.h?ref=f23147fefc8edd540005609f76e2680573795cb0", "patch": "@@ -0,0 +1,17 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/internals/sgimacros.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( IRIX___RESTRICT_CHECK )\n+#ifdef __c99\n+#  ifndef __cplusplus\n+#  define __restrict restrict\n+#  endif\n+#endif  /* IRIX___RESTRICT_CHECK */"}, {"sha": "57951c64603211873371e181fd40f2a52d492c97", "filename": "gcc/fixinc/tests/base/internal/wchar_core.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fwchar_core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fwchar_core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fwchar_core.h?ref=f23147fefc8edd540005609f76e2680573795cb0", "patch": "@@ -0,0 +1,15 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/internals/wchar_core.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( IRIX_WCSFTIME_CHECK )\n+#if _NO_XOPEN5 && !defined(__c99)\n+extern size_t          wcsftime(wchar_t *, __SGI_LIBC_NAMESPACE_QUALIFIER size_t, const char *, const struct tm *);\n+#endif  /* IRIX_WCSFTIME_CHECK */"}, {"sha": "56099a92002d87f3c1f7c613564b08377c5646e1", "filename": "gcc/fixinc/tests/base/sys/socket.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23147fefc8edd540005609f76e2680573795cb0/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsocket.h?ref=f23147fefc8edd540005609f76e2680573795cb0", "patch": "@@ -0,0 +1,19 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/sys/socket.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( IRIX_SOCKLEN_T_CHECK )\n+#define _SOCKLEN_T\n+#if _NO_XOPEN4 && _NO_XOPEN5\n+typedef int socklen_t;\n+#else\n+typedef u_int32_t socklen_t;\n+#endif /* _NO_XOPEN4 && _NO_XOPEN5 */\n+#endif  /* IRIX_SOCKLEN_T_CHECK */"}]}