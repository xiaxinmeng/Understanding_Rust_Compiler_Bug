{"sha": "3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyMzUwMDA5YjJhMmEzMTlmMWY2ZTdkMTVkZWY2NTU4ZGRjMGIyMQ==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2005-03-02T12:56:28Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2005-03-02T12:56:28Z"}, "message": "functional (_Has_result_type): Cleanup.\n\n2005-03-02  Douglas Gregor  <doug.gregor@gmail.com>\n\n        * include/tr1/functional (_Has_result_type): Cleanup.\n        (_Result_of_impl): Handle member data pointers correctly.\n        (reference_wrapper): Support invocation.\n        Move repetition code into new file include/tr1/repeat.h.\n        * include/tr1/functional_iterate.h (reference_wrapper): Support\n        invocation.  Cleanup long lines.\n        * include/tr1/ref_wrap_iterate.h (reference_wrapper): Declare\n        invocation operators.\n        * include/tr1/repeat.h: Code repetition header.\n        * include/Makefile.am: Add ref_wrap_iterate.h, repeat.h\n        * include/Makefile.in: Add ref_wrap_iterate.h, repeat.h\n        * testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc:\n        New test of reference_wrapper invocation.\n        * testsuite/tr1/3_function_objects/reference_wrapper/typedefs.cc:\n        New test of reference_wrapper typedefs and base classes.\n        * testsuite/tr1/3_function_objects/result_of.cc: Trivial cleanup\n        (e-mail address).\n\n2005-03-02  Douglas Gregor  <doug.gregor@gmail.com>\n\n        * include/tr1/function (result_of): New class template.\n        * include/tr1/functional/iterator.h: Implementation of TR1\n        result_of.\n        * testsuite/tr1/3_function_objects/result_of.cc: New test\n\nFrom-SVN: r95778", "tree": {"sha": "5e2e64883bf5fcdc589a92880840a165ed314e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e2e64883bf5fcdc589a92880840a165ed314e0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2563c2248f41b473e18c33125f40ef2196773fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2563c2248f41b473e18c33125f40ef2196773fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2563c2248f41b473e18c33125f40ef2196773fc0"}], "stats": {"total": 1883, "additions": 1371, "deletions": 512}, "files": [{"sha": "8f758db901db0a8a91e8444126353691611e078b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -1,3 +1,30 @@\n+2005-03-02  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+        * include/tr1/functional (_Has_result_type): Cleanup.\n+        (_Result_of_impl): Handle member data pointers correctly.\n+        (reference_wrapper): Support invocation.\n+        Move repetition code into new file include/tr1/repeat.h.\n+        * include/tr1/functional_iterate.h (reference_wrapper): Support\n+        invocation.  Cleanup long lines.\n+        * include/tr1/ref_wrap_iterate.h (reference_wrapper): Declare\n+        invocation operators.\n+        * include/tr1/repeat.h: Code repetition header.\n+        * include/Makefile.am: Add ref_wrap_iterate.h, repeat.h\n+        * include/Makefile.in: Add ref_wrap_iterate.h, repeat.h\n+        * testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc:\n+        New test of reference_wrapper invocation.\n+        * testsuite/tr1/3_function_objects/reference_wrapper/typedefs.cc:\n+        New test of reference_wrapper typedefs and base classes.\n+        * testsuite/tr1/3_function_objects/result_of.cc: Trivial cleanup\n+        (e-mail address).\n+\t\n+2005-03-02  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+        * include/tr1/function (result_of): New class template.\n+        * include/tr1/functional/iterator.h: Implementation of TR1\n+        result_of.\n+        * testsuite/tr1/3_function_objects/result_of.cc: New test\n+\t\n 2005-03-01  Vladimir Merzliakov  <wanderer@rsu.ru>\n \n \t* testsuite/26_numerics/cmath/c99_classification_macros_c.cc: Tweak."}, {"sha": "2b260b2ac6db1fd213b1fe61ee722bef88a0870a", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -231,6 +231,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/functional_iterate.h \\\n \t${tr1_srcdir}/memory \\\n+\t${tr1_srcdir}/ref_wrap_iterate.h \\\n+\t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/utility \\\n \t${tr1_srcdir}/type_traits \\"}, {"sha": "6fbb94337140abf025e66922bd4bd405c607e032", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -447,6 +447,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/functional_iterate.h \\\n \t${tr1_srcdir}/memory \\\n+\t${tr1_srcdir}/ref_wrap_iterate.h \\\n+\t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/utility \\\n \t${tr1_srcdir}/type_traits \\"}, {"sha": "30a79871ac8ad899339ad0854384a960fb5bed3c", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 299, "deletions": 508, "changes": 807, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -45,9 +45,299 @@ namespace std\n {\n namespace tr1\n {\n+  template<typename _MemberPointer>\n+    class _Mem_fn;\n+\n+  /**\n+   *  @if maint\n+   *  Actual implementation of _Has_result_type, which uses SFINAE to\n+   *  determine if the type _Tp has a publicly-accessible member type\n+   *  result_type.\n+   *  @endif\n+  */\n+  template<typename _Tp>\n+    class _Has_result_type_helper : __sfinae_types\n+    {\n+      template<typename _Up>\n+      struct _Wrap_type\n+      { };\n+\n+      template<typename _Up>\n+        static __one __test(_Wrap_type<typename _Up::result_type>*);\n+\n+      template<typename _Up>\n+        static __two __test(...);\n+\n+    public:\n+      static const bool value = sizeof(__test<_Tp>(0)) == 1;\n+    };\n+\n+  template<typename _Tp>\n+    struct _Has_result_type\n+       : integral_constant<\n+           bool,\n+           _Has_result_type_helper<typename remove_cv<_Tp>::type>::value>\n+    { };\n+\n+  /**\n+   *  @if maint\n+   *  If we have found a result_type, extract it.\n+   *  @endif\n+  */\n+  template<bool _Has_result_type, typename _Functor>\n+    struct _Maybe_get_result_type\n+    { };\n+\n+  template<typename _Functor>\n+    struct _Maybe_get_result_type<true, _Functor>\n+    {\n+      typedef typename _Functor::result_type result_type;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Base class for any function object that has a weak result type, as\n+   *  defined in 3.3/3 of TR1.\n+   *  @endif\n+  */\n+  template<typename _Functor>\n+    struct _Weak_result_type_impl\n+      : _Maybe_get_result_type<_Has_result_type<_Functor>::value, _Functor>\n+    {\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Strip top-level cv-qualifiers from the function object and let\n+   *  _Weak_result_type_impl perform the real work.\n+   *  @endif\n+  */\n+  template<typename _Functor>\n+    struct _Weak_result_type\n+    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>\n+    {\n+    };\n+\n+  template<typename _Signature>\n+    class result_of;\n+\n+  /**\n+   *  @if maint\n+   *  Actual implementation of result_of. When _Has_result_type is\n+   *  true, gets its result from _Weak_result_type. Otherwise, uses\n+   *  the function object's member template result to extract the\n+   *  result type.\n+   *  @endif\n+  */\n+  template<bool _Has_result_type, typename _Signature>\n+    struct _Result_of_impl;\n+\n+  // Handle member data pointers using _Mem_fn's logic\n+  template<typename _Res, typename _Class, typename _T1>\n+    struct _Result_of_impl<false, _Res _Class::*(_T1)>\n+    {\n+      typedef typename _Mem_fn<_Res _Class::*>\n+                ::template _Result_type<_T1>::type type;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Determines if the type _Tp derives from unary_function.\n+   *  @endif\n+  */\n+  template<typename _Tp>\n+    struct _Derives_from_unary_function : __sfinae_types\n+    {\n+    private:\n+      template<typename _T1, typename _Res>\n+        static __one __test(const volatile unary_function<_T1, _Res>*);\n+\n+      // It's tempting to change \"...\" to const volatile void*, but\n+      // that fails when _Tp is a function type.\n+      static __two __test(...);\n+\n+    public:\n+      static const bool value = sizeof(__test((_Tp*)0)) == 1;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Determines if the type _Tp derives from binary_function.\n+   *  @endif\n+  */\n+  template<typename _Tp>\n+    struct _Derives_from_binary_function : __sfinae_types\n+    {\n+    private:\n+      template<typename _T1, typename _T2, typename _Res>\n+        static __one __test(const volatile binary_function<_T1, _T2, _Res>*);\n+\n+      // It's tempting to change \"...\" to const volatile void*, but\n+      // that fails when _Tp is a function type.\n+      static __two __test(...);\n+\n+    public:\n+      static const bool value = sizeof(__test((_Tp*)0)) == 1;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Turns a function type into a function pointer type\n+   *  @endif\n+  */\n+  template<typename _Tp, bool _IsFunctionType = is_function<_Tp>::value>\n+    struct _Function_to_function_pointer\n+    {\n+      typedef _Tp type;\n+    };\n+\n+  template<typename _Tp>\n+    struct _Function_to_function_pointer<_Tp, true>\n+    {\n+      typedef _Tp* type;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Knowing which of unary_function and binary_function _Tp derives\n+   *  from, derives from the same and ensures that reference_wrapper\n+   *  will have a weak result type. See cases below.\n+   *  @endif\n+   */\n+  template<bool _Unary, bool _Binary, typename _Tp>\n+    struct _Reference_wrapper_base_impl;\n+\n+  // Not a unary_function or binary_function, so try a weak result type\n+  template<typename _Tp>\n+    struct _Reference_wrapper_base_impl<false, false, _Tp>\n+      : _Weak_result_type<_Tp>\n+    { };\n+\n+  // unary_function but not binary_function\n+  template<typename _Tp>\n+    struct _Reference_wrapper_base_impl<true, false, _Tp>\n+      : unary_function<typename _Tp::argument_type,\n+                       typename _Tp::result_type>\n+    { };\n+\n+  // binary_function but not unary_function\n+  template<typename _Tp>\n+    struct _Reference_wrapper_base_impl<false, true, _Tp>\n+      : binary_function<typename _Tp::first_argument_type,\n+                        typename _Tp::second_argument_type,\n+                        typename _Tp::result_type>\n+    { };\n+\n+  // both unary_function and binary_function. import result_type to\n+  // avoid conflicts.\n+   template<typename _Tp>\n+    struct _Reference_wrapper_base_impl<true, true, _Tp>\n+      : unary_function<typename _Tp::argument_type,\n+                       typename _Tp::result_type>,\n+        binary_function<typename _Tp::first_argument_type,\n+                        typename _Tp::second_argument_type,\n+                        typename _Tp::result_type>\n+    {\n+      typedef typename _Tp::result_type result_type;\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Derives from unary_function or binary_function when it\n+   *  can. Specializations handle all of the easy cases. The primary\n+   *  template determines what to do with a class type, which may\n+   *  derive from both unary_function and binary_function.\n+   *  @endif\n+  */\n+  template<typename _Tp>\n+    struct _Reference_wrapper_base\n+      : _Reference_wrapper_base_impl<\n+          _Derives_from_unary_function<_Tp>::value,\n+          _Derives_from_binary_function<_Tp>::value,\n+          _Tp>\n+    { };\n+\n+  // - a function type (unary)\n+  template<typename _Res, typename _T1>\n+    struct _Reference_wrapper_base<_Res(_T1)>\n+      : unary_function<_T1, _Res>\n+    { };\n+\n+  // - a function type (binary)\n+  template<typename _Res, typename _T1, typename _T2>\n+    struct _Reference_wrapper_base<_Res(_T1, _T2)>\n+      : binary_function<_T1, _T2, _Res>\n+    { };\n+\n+  // - a function pointer type (unary)\n+  template<typename _Res, typename _T1>\n+    struct _Reference_wrapper_base<_Res(*)(_T1)>\n+      : unary_function<_T1, _Res>\n+    { };\n+\n+  // - a function pointer type (binary)\n+  template<typename _Res, typename _T1, typename _T2>\n+    struct _Reference_wrapper_base<_Res(*)(_T1, _T2)>\n+      : binary_function<_T1, _T2, _Res>\n+    { };\n+\n+  // - a pointer to member function type (unary, no qualifiers)\n+  template<typename _Res, typename _T1>\n+    struct _Reference_wrapper_base<_Res (_T1::*)()>\n+      : unary_function<_T1*, _Res>\n+    { };\n+\n+  // - a pointer to member function type (binary, no qualifiers)\n+  template<typename _Res, typename _T1, typename _T2>\n+    struct _Reference_wrapper_base<_Res (_T1::*)(_T2)>\n+      : binary_function<_T1*, _T2, _Res>\n+    { };\n+\n+  // - a pointer to member function type (unary, const)\n+  template<typename _Res, typename _T1>\n+    struct _Reference_wrapper_base<_Res (_T1::*)() const>\n+      : unary_function<const _T1*, _Res>\n+    { };\n+\n+  // - a pointer to member function type (binary, const)\n+  template<typename _Res, typename _T1, typename _T2>\n+    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const>\n+      : binary_function<const _T1*, _T2, _Res>\n+    { };\n+\n+  // - a pointer to member function type (unary, volatile)\n+  template<typename _Res, typename _T1>\n+    struct _Reference_wrapper_base<_Res (_T1::*)() volatile>\n+      : unary_function<volatile _T1*, _Res>\n+    { };\n+\n+  // - a pointer to member function type (binary, volatile)\n+  template<typename _Res, typename _T1, typename _T2>\n+    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile>\n+      : binary_function<volatile _T1*, _T2, _Res>\n+    { };\n+\n+  // - a pointer to member function type (unary, const volatile)\n+  template<typename _Res, typename _T1>\n+    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile>\n+      : unary_function<const volatile _T1*, _Res>\n+    { };\n+\n+  // - a pointer to member function type (binary, const volatile)\n+  template<typename _Res, typename _T1, typename _T2>\n+    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile>\n+      : binary_function<const volatile _T1*, _T2, _Res>\n+    { };\n+\n   template<typename _Tp>\n     class reference_wrapper\n+      : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>\n     {\n+      // If _Tp is a function type, we can't form result_of<_Tp(...)>,\n+      // so turn it into a function pointer type.\n+      typedef typename _Function_to_function_pointer<_Tp>::type\n+        _M_func_type;\n+\n       _Tp* _M_data;\n     public:\n       typedef _Tp type;\n@@ -71,8 +361,13 @@ namespace tr1\n       _Tp&\n       get() const\n       { return *_M_data; }\n+\n+#define _GLIBCXX_REPEAT_HEADER <tr1/ref_wrap_iterate.h>\n+#include <tr1/repeat.h>\n+#undef _GLIBCXX_REPEAT_HEADER\n     };\n \n+\n   // Denotes a reference should be taken to a variable.\n   template<typename _Tp>\n     reference_wrapper<_Tp>\n@@ -93,9 +388,6 @@ namespace tr1\n     reference_wrapper<const _Tp> cref(reference_wrapper<_Tp> __t)\n     { return cref(__t.get()); }\n \n-  template<typename _MemberPointer>\n-    class _Mem_fn;\n-\n    template<typename _Tp, bool>\n      struct _Mem_fn_const_or_non\n      {\n@@ -151,6 +443,7 @@ namespace tr1\n     template<typename _Tp>\n       static __sfinae_types::__two __check_const(_Tp&, const volatile void*);\n \n+  public:\n     template<typename _Tp>\n       struct _Result_type\n         : _Mem_fn_const_or_non<\n@@ -159,7 +452,6 @@ namespace tr1\n              == sizeof(__check_const<_Tp>(__get_ref<_Tp>(), (_Tp*)0)))>\n       { };\n \n-  public:\n     explicit _Mem_fn(_Res _Class::*__pm) : __pm(__pm) { }\n \n     // Handle objects\n@@ -489,510 +781,6 @@ namespace tr1\n     _Manager_type _M_manager;\n   };\n \n-#define _GLIBCXX_NUM_ARGS 0\n-#define _GLIBCXX_COMMA\n-#define _GLIBCXX_TEMPLATE_PARAMS\n-#define _GLIBCXX_TEMPLATE_ARGS\n-#define _GLIBCXX_PARAMS\n-#define _GLIBCXX_ARGS\n-#define _GLIBCXX_COMMA_SHIFTED\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#define _GLIBCXX_PARAMS_SHIFTED\n-#define _GLIBCXX_ARGS_SHIFTED\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 1\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1\n-#define _GLIBCXX_TEMPLATE_ARGS _T1\n-#define _GLIBCXX_PARAMS _T1 __a1\n-#define _GLIBCXX_ARGS __a1\n-#define _GLIBCXX_COMMA_SHIFTED\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#define _GLIBCXX_PARAMS_SHIFTED\n-#define _GLIBCXX_ARGS_SHIFTED\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 2\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2\n-#define _GLIBCXX_ARGS __a1, __a2\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1\n-#define _GLIBCXX_ARGS_SHIFTED __a1\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 3\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3\n-#define _GLIBCXX_ARGS __a1, __a2, __a3\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 4\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 5\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 6\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 7\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 8\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 9\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 10\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 11\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 12\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 13\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 14\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 15\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 16\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 17\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 18\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 19\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n-#define _GLIBCXX_NUM_ARGS 20\n-#define _GLIBCXX_COMMA ,\n-#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19, typename _T20\n-#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19, _T20\n-#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19, _T20 __a20\n-#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19, __a20\n-#define _GLIBCXX_COMMA_SHIFTED ,\n-#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19\n-#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19\n-#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19\n-#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19\n-#include <tr1/functional_iterate.h>\n-#undef _GLIBCXX_ARGS_SHIFTED\n-#undef _GLIBCXX_PARAMS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n-#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n-#undef _GLIBCXX_COMMA_SHIFTED\n-#undef _GLIBCXX_ARGS\n-#undef _GLIBCXX_PARAMS\n-#undef _GLIBCXX_TEMPLATE_ARGS\n-#undef _GLIBCXX_TEMPLATE_PARAMS\n-#undef _GLIBCXX_COMMA\n-#undef _GLIBCXX_NUM_ARGS\n-\n   // [3.7.2.7] null pointer comparisons\n \n   /**\n@@ -1057,6 +845,9 @@ namespace tr1\n       __x.swap(__y);\n     }\n \n+#define _GLIBCXX_REPEAT_HEADER <tr1/functional_iterate.h>\n+#include <tr1/repeat.h>\n+#undef _GLIBCXX_REPEAT_HEADER\n \n // Definition of default hash function std::tr1::hash<>.  The types for\n // which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR."}, {"sha": "97f4d248794136e4d226c2a4cce61928b0d3b81e", "filename": "libstdc++-v3/include/tr1/functional_iterate.h", "status": "modified", "additions": 145, "deletions": 4, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -1,7 +1,7 @@\n // TR1 functional -*- C++ -*-\n \n // Copyright (C) 2005 Free Software Foundation, Inc.\n-// Writtten by Douglas Gregor <dgregor@cs.indiana.edu>\n+// Written by Douglas Gregor <doug.gregor -at- gmail.com>\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,6 +33,145 @@\n  *  You should not attempt to use it directly.\n  */\n \n+template<typename _Res _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  struct _Weak_result_type_impl<_Res(_GLIBCXX_TEMPLATE_ARGS)>\n+  {\n+    typedef _Res result_type;\n+  };\n+\n+template<typename _Res _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  struct _Weak_result_type_impl<_Res (&)(_GLIBCXX_TEMPLATE_ARGS)>\n+  {\n+    typedef _Res result_type;\n+  };\n+\n+template<typename _Res _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  struct _Weak_result_type_impl<_Res (*)(_GLIBCXX_TEMPLATE_ARGS)>\n+  {\n+    typedef _Res result_type;\n+  };\n+\n+#if _GLIBCXX_NUM_ARGS > 0\n+template<typename _Res, typename _Class _GLIBCXX_COMMA_SHIFTED\n+         _GLIBCXX_TEMPLATE_PARAMS_SHIFTED>\n+  struct _Weak_result_type_impl<\n+           _Res (_Class::*)(_GLIBCXX_TEMPLATE_ARGS_SHIFTED)>\n+  {\n+    typedef _Res result_type;\n+  };\n+\n+template<typename _Res, typename _Class _GLIBCXX_COMMA_SHIFTED\n+         _GLIBCXX_TEMPLATE_PARAMS_SHIFTED>\n+  struct _Weak_result_type_impl<\n+           _Res (_Class::*)(_GLIBCXX_TEMPLATE_ARGS_SHIFTED) const>\n+  {\n+    typedef _Res result_type;\n+  };\n+\n+template<typename _Res, typename _Class _GLIBCXX_COMMA_SHIFTED\n+         _GLIBCXX_TEMPLATE_PARAMS_SHIFTED>\n+  struct _Weak_result_type_impl<\n+           _Res (_Class::*)(_GLIBCXX_TEMPLATE_ARGS_SHIFTED) volatile>\n+  {\n+    typedef _Res result_type;\n+  };\n+\n+template<typename _Res, typename _Class _GLIBCXX_COMMA_SHIFTED\n+         _GLIBCXX_TEMPLATE_PARAMS_SHIFTED>\n+  struct _Weak_result_type_impl<\n+           _Res (_Class::*)(_GLIBCXX_TEMPLATE_ARGS_SHIFTED) const volatile>\n+  {\n+    typedef _Res result_type;\n+  };\n+#endif\n+\n+template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  class result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+    : public _Result_of_impl<\n+               _Has_result_type<_Weak_result_type<_Functor> >::value,\n+             _Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+  { };\n+\n+template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  struct _Result_of_impl<true, _Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+  {\n+    typedef typename _Weak_result_type<_Functor>::result_type type;\n+  };\n+\n+template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  struct _Result_of_impl<false, _Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+  {\n+#if _GLIBCXX_NUM_ARGS > 0\n+    typedef typename _Functor\n+              ::template result<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type type;\n+#else\n+    typedef void type;\n+#endif\n+  };\n+\n+/**\n+ * @if maint\n+ * Invoke a function object, which may be either a member pointer or a\n+ * function object. The first parameter will tell which.\n+ * @endif\n+ */\n+template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  inline\n+  typename __enable_if<\n+             typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type,\n+             (!is_member_pointer<_Functor>::value\n+              && !is_function<_Functor>::value\n+              && !is_function<typename remove_pointer<_Functor>::type>::value)\n+           >::__type\n+  __invoke(_Functor& __f _GLIBCXX_COMMA _GLIBCXX_REF_PARAMS)\n+  {\n+    return __f(_GLIBCXX_ARGS);\n+  }\n+\n+#if _GLIBCXX_NUM_ARGS > 0\n+template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  inline\n+  typename __enable_if<\n+             typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type,\n+             (is_member_pointer<_Functor>::value\n+              && !is_function<_Functor>::value\n+              && !is_function<typename remove_pointer<_Functor>::type>::value)\n+           >::__type\n+  __invoke(_Functor& __f _GLIBCXX_COMMA _GLIBCXX_REF_PARAMS)\n+  {\n+    return mem_fn(__f)(_GLIBCXX_ARGS);\n+  }\n+#endif\n+\n+// To pick up function references (that will become function pointers)\n+template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n+  inline\n+  typename __enable_if<\n+             typename result_of<_Functor(_GLIBCXX_TEMPLATE_ARGS)>::type,\n+             (is_pointer<_Functor>::value\n+              && is_function<typename remove_pointer<_Functor>::type>::value)\n+           >::__type\n+  __invoke(_Functor __f _GLIBCXX_COMMA _GLIBCXX_REF_PARAMS)\n+  {\n+    return __f(_GLIBCXX_ARGS);\n+  }\n+\n+/**\n+ * @if maint\n+ * Implementation of reference_wrapper::operator()\n+ * @endif\n+*/\n+#if _GLIBCXX_NUM_ARGS > 0\n+template<typename _Tp>\n+template<_GLIBCXX_TEMPLATE_PARAMS>\n+  typename result_of<\n+   typename reference_wrapper<_Tp>::_M_func_type(_GLIBCXX_TEMPLATE_ARGS)>::type\n+  reference_wrapper<_Tp>::operator()(_GLIBCXX_REF_PARAMS) const\n+  {\n+    return __invoke(get(), _GLIBCXX_ARGS);\n+  }\n+#endif\n+\n #if _GLIBCXX_NUM_ARGS > 0\n template<typename _Res, typename _Class _GLIBCXX_COMMA_SHIFTED\n          _GLIBCXX_TEMPLATE_PARAMS_SHIFTED>\n@@ -197,7 +336,7 @@ template<typename _Res, typename _Class _GLIBCXX_COMMA_SHIFTED\n \n template<typename _Res, typename _Class _GLIBCXX_COMMA_SHIFTED\n          _GLIBCXX_TEMPLATE_PARAMS_SHIFTED>\n-  class _Mem_fn<_Res (_Class::*)(_GLIBCXX_TEMPLATE_ARGS_SHIFTED) const volatile>\n+  class _Mem_fn<_Res(_Class::*)(_GLIBCXX_TEMPLATE_ARGS_SHIFTED) const volatile>\n #if _GLIBCXX_NUM_ARGS == 1\n   : public unary_function<const volatile _Class*, _Res>\n #elif _GLIBCXX_NUM_ARGS == 2\n@@ -600,7 +739,8 @@ class function<_Res(_GLIBCXX_TEMPLATE_ARGS)>\n   template<typename _Function>\n     void operator!=(const function<_Function>&) const;\n \n-  typedef _Res (*_Invoker_type)(const _Any_data& _GLIBCXX_COMMA _GLIBCXX_PARAMS);\n+  typedef _Res (*_Invoker_type)(const _Any_data& _GLIBCXX_COMMA\n+                                _GLIBCXX_PARAMS);\n   _Invoker_type _M_invoker;\n };\n \n@@ -632,7 +772,8 @@ template<typename _Functor>\n }\n \n template<typename _Res _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n-  _Res function<_Res(_GLIBCXX_TEMPLATE_ARGS)>::operator()(_GLIBCXX_PARAMS) const\n+  _Res\n+  function<_Res(_GLIBCXX_TEMPLATE_ARGS)>::operator()(_GLIBCXX_PARAMS) const\n   {\n     if (_M_empty())\n       {"}, {"sha": "430109f04f640a8b1a955a26f03cc3eee621a769", "filename": "libstdc++-v3/include/tr1/ref_wrap_iterate.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_wrap_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_wrap_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_wrap_iterate.h?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -0,0 +1,44 @@\n+// TR1 reference_wrapper -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Written by Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ref_wrap_iterate.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#if _GLIBCXX_NUM_ARGS > 0\n+template<_GLIBCXX_TEMPLATE_PARAMS>\n+  typename result_of<_M_func_type(_GLIBCXX_TEMPLATE_ARGS)>::type\n+  operator()(_GLIBCXX_REF_PARAMS) const;\n+#else\n+typename result_of<_M_func_type()>::type\n+operator()() const\n+{ return (*get())(); }\n+#endif"}, {"sha": "d87aeb9b14fcd256d887873355931e9ae730f56b", "filename": "libstdc++-v3/include/tr1/repeat.h", "status": "added", "additions": 585, "deletions": 0, "changes": 585, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -0,0 +1,585 @@\n+// TR1 code repetition -*- C++ -*-\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Written by Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file repeat.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_REPEAT_HEADER\n+#  error Internal error: _GLIBCXX_REPEAT_HEADER must be set\n+#endif /* _GLIBCXX_REPEAT_HEADER */\n+\n+#define _GLIBCXX_NUM_ARGS 0\n+#define _GLIBCXX_COMMA\n+#define _GLIBCXX_TEMPLATE_PARAMS\n+#define _GLIBCXX_TEMPLATE_ARGS\n+#define _GLIBCXX_PARAMS\n+#define _GLIBCXX_REF_PARAMS\n+#define _GLIBCXX_ARGS\n+#define _GLIBCXX_COMMA_SHIFTED\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#define _GLIBCXX_PARAMS_SHIFTED\n+#define _GLIBCXX_ARGS_SHIFTED\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 1\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1\n+#define _GLIBCXX_TEMPLATE_ARGS _T1\n+#define _GLIBCXX_PARAMS _T1 __a1\n+#define _GLIBCXX_REF_PARAMS _T1& __a1\n+#define _GLIBCXX_ARGS __a1\n+#define _GLIBCXX_COMMA_SHIFTED\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#define _GLIBCXX_PARAMS_SHIFTED\n+#define _GLIBCXX_ARGS_SHIFTED\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 2\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2\n+#define _GLIBCXX_ARGS __a1, __a2\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1\n+#define _GLIBCXX_ARGS_SHIFTED __a1\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 3\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3\n+#define _GLIBCXX_ARGS __a1, __a2, __a3\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 4\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 5\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 6\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 7\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 8\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 9\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 10\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 11\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 12\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 13\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 14\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 15\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 16\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 17\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16, _T17& __a17\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 18\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16, _T17& __a17, _T18& __a18\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 19\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16, _T17& __a17, _T18& __a18, _T19& __a19\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+\n+#define _GLIBCXX_NUM_ARGS 20\n+#define _GLIBCXX_COMMA ,\n+#define _GLIBCXX_TEMPLATE_PARAMS typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19, typename _T20\n+#define _GLIBCXX_TEMPLATE_ARGS _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19, _T20\n+#define _GLIBCXX_PARAMS _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19, _T20 __a20\n+#define _GLIBCXX_REF_PARAMS _T1& __a1, _T2& __a2, _T3& __a3, _T4& __a4, _T5& __a5, _T6& __a6, _T7& __a7, _T8& __a8, _T9& __a9, _T10& __a10, _T11& __a11, _T12& __a12, _T13& __a13, _T14& __a14, _T15& __a15, _T16& __a16, _T17& __a17, _T18& __a18, _T19& __a19, _T20& __a20\n+#define _GLIBCXX_ARGS __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19, __a20\n+#define _GLIBCXX_COMMA_SHIFTED ,\n+#define _GLIBCXX_TEMPLATE_PARAMS_SHIFTED typename _T1, typename _T2, typename _T3, typename _T4, typename _T5, typename _T6, typename _T7, typename _T8, typename _T9, typename _T10, typename _T11, typename _T12, typename _T13, typename _T14, typename _T15, typename _T16, typename _T17, typename _T18, typename _T19\n+#define _GLIBCXX_TEMPLATE_ARGS_SHIFTED _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9, _T10, _T11, _T12, _T13, _T14, _T15, _T16, _T17, _T18, _T19\n+#define _GLIBCXX_PARAMS_SHIFTED _T1 __a1, _T2 __a2, _T3 __a3, _T4 __a4, _T5 __a5, _T6 __a6, _T7 __a7, _T8 __a8, _T9 __a9, _T10 __a10, _T11 __a11, _T12 __a12, _T13 __a13, _T14 __a14, _T15 __a15, _T16 __a16, _T17 __a17, _T18 __a18, _T19 __a19\n+#define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9, __a10, __a11, __a12, __a13, __a14, __a15, __a16, __a17, __a18, __a19\n+#include _GLIBCXX_REPEAT_HEADER\n+#undef _GLIBCXX_ARGS_SHIFTED\n+#undef _GLIBCXX_PARAMS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_ARGS_SHIFTED\n+#undef _GLIBCXX_TEMPLATE_PARAMS_SHIFTED\n+#undef _GLIBCXX_COMMA_SHIFTED\n+#undef _GLIBCXX_ARGS\n+#undef _GLIBCXX_REF_PARAMS\n+#undef _GLIBCXX_PARAMS\n+#undef _GLIBCXX_TEMPLATE_ARGS\n+#undef _GLIBCXX_TEMPLATE_PARAMS\n+#undef _GLIBCXX_COMMA\n+#undef _GLIBCXX_NUM_ARGS\n+"}, {"sha": "255fc9f6774e02551ddd045a7e453dfb32e80b5e", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Finvoke.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Finvoke.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Finvoke.cc?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -0,0 +1,103 @@\n+// 2005-02-27 Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 2.1 reference wrappers\n+#include <tr1/functional>\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+bool test __attribute__((unused)) = true;\n+\n+struct X\n+{\n+  typedef int result_type;\n+\n+  X() : bar(17) {}\n+\n+  int foo(float x)                   { return truncate_float(x); }\n+  int foo_c(float x)  const          { return truncate_float(x); }\n+  int foo_v(float x)  volatile       { return truncate_float(x); }\n+  int foo_cv(float x) const volatile { return truncate_float(x); }\n+\n+  int operator()(float x)\n+  {\n+    return foo(x) + 1;\n+  }\n+\n+  int operator()(float x) const\n+  {\n+    return foo_c(x) + 2;\n+  }\n+\n+  int bar;\n+\n+ private:\n+  X(const X&);\n+  X& operator=(const X&);\n+};\n+\n+void test01()\n+{\n+  using std::tr1::ref;\n+  using std::tr1::cref;\n+\n+  ::X x;\n+  ::X* xp = &x;\n+  int (::X::* p_foo)(float) = &::X::foo;\n+  int (::X::* p_foo_c)(float) const = &::X::foo_c;\n+  int (::X::* p_foo_v)(float) volatile = &::X::foo_v;\n+  int (::X::* p_foo_cv)(float) const volatile = &::X::foo_cv;\n+  int ::X::* p_bar = &::X::bar;\n+\n+  const float pi = 3.14;\n+\n+  // Functions\n+  VERIFY(ref(truncate_float)(pi) == 3);\n+\n+  // Function pointers\n+  VERIFY(cref(&truncate_float)(pi) == 3);\n+\n+  // Member function pointers\n+  VERIFY(ref(p_foo)(x, pi) == 3);\n+  VERIFY(ref(p_foo)(xp, pi) == 3);\n+  VERIFY(ref(p_foo_c)(x, pi) == 3);\n+  VERIFY(ref(p_foo_c)(xp, pi) == 3);\n+  VERIFY(ref(p_foo_v)(x, pi) == 3);\n+  VERIFY(ref(p_foo_v)(xp, pi) == 3);\n+  VERIFY(ref(p_foo_cv)(x, pi) == 3);\n+  VERIFY(ref(p_foo_cv)(xp, pi) == 3);\n+\n+  // Member data pointers\n+  VERIFY(ref(p_bar)(x) == 17);\n+  VERIFY(ref(p_bar)(xp) == 17);\n+\n+  // Function objects\n+  VERIFY(ref(x)(pi) == 4);\n+  VERIFY(cref(x)(pi) == 5);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3aa427d6dcc498166308b031c62acda8503c5167", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/reference_wrapper/typedefs.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Ftypedefs.cc?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -0,0 +1,89 @@\n+// 2005-02-27 Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 2.1 reference wrappers\n+#include <tr1/functional>\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+struct X {};\n+\n+struct int_result_type { typedef int result_type; };\n+\n+struct derives_unary : std::unary_function<int, int> {};\n+\n+struct derives_binary : std::binary_function<int, float, int> {};\n+\n+struct derives_unary_binary\n+  : std::unary_function<int, int>,\n+    std::binary_function<int, float, int>\n+{\n+  typedef int result_type;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using std::tr1::reference_wrapper;\n+  using std::tr1::is_same;\n+  using std::tr1::is_convertible;\n+  using std::unary_function;\n+  using std::binary_function;\n+\n+  // Check result_type typedef\n+  VERIFY((is_same<reference_wrapper<int_result_type>::result_type, int>::value));\n+  VERIFY((is_same<reference_wrapper<derives_unary>::result_type, int>::value));\n+  VERIFY((is_same<reference_wrapper<derives_binary>::result_type, int>::value));\n+  VERIFY((is_same<reference_wrapper<derives_unary_binary>::result_type, int>::value));\n+  VERIFY((is_same<reference_wrapper<int(void)>::result_type, int>::value));\n+  VERIFY((is_same<reference_wrapper<int(*)(void)>::result_type, int>::value));\n+  VERIFY((is_same<reference_wrapper<int (::X::*)()>::result_type, int>::value));\n+  VERIFY((is_same<reference_wrapper<int (::X::*)(float)>::result_type, int>::value));\n+\n+  // Check derivation from unary_function\n+  VERIFY((is_convertible<reference_wrapper<derives_unary>*, unary_function<int, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<derives_unary_binary>*, unary_function<int, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int(int)>*, unary_function<int, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int(*)(int)>*, unary_function<int, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int (::X::*)()>*, unary_function< ::X*, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int (::X::*)() const>*, unary_function<const ::X*, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int (::X::*)() volatile>*, unary_function<volatile ::X*, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int (::X::*)() const volatile>*, unary_function<const volatile ::X*, int>*>::value));\n+\n+  // Check derivation from binary_function\n+  VERIFY((is_convertible<reference_wrapper<derives_binary>*, binary_function<int, float, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<derives_unary_binary>*, binary_function<int, float, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int(int, float)>*, binary_function<int, float, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int(*)(int, float)>*, binary_function<int, float, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int (::X::*)(float)>*, binary_function< ::X*, float, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int (::X::*)(float) const>*, binary_function<const ::X*, float, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int (::X::*)(float) volatile>*, binary_function<volatile ::X*, float, int>*>::value));\n+  VERIFY((is_convertible<reference_wrapper<int (::X::*)(float) const volatile>*, binary_function<const volatile ::X*, float, int>*>::value));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bf17f8407bfcfdb944d66c265c04cf1d0f00f4c6", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/result_of.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fresult_of.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2350009b2a2a319f1f6e7d15def6558ddc0b21/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fresult_of.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fresult_of.cc?ref=3c2350009b2a2a319f1f6e7d15def6558ddc0b21", "patch": "@@ -0,0 +1,75 @@\n+// 2005-01-26 Douglas Gregor <doug.gregor -at- gmail.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 3.4 function return types\n+#include <tr1/functional>\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class X {};\n+\n+struct int_result_type { typedef int result_type; };\n+\n+struct int_result_of\n+{\n+  template<typename F> struct result { typedef int type; };\n+};\n+\n+struct int_result_type_and_float_result_of\n+{\n+  typedef int result_type;\n+  template<typename F> struct result { typedef float type; };\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using std::tr1::result_of;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  typedef int (*func_ptr)(float, double);\n+  typedef int (&func_ref)(float, double);\n+  typedef int (::X::*mem_func_ptr)(float);\n+  typedef int (::X::*mem_func_ptr_c)(float) const;\n+  typedef int (::X::*mem_func_ptr_v)(float) volatile;\n+  typedef int (::X::*mem_func_ptr_cv)(float) const volatile;\n+\n+  VERIFY((is_same<result_of<int_result_type(float)>::type, int>::value));\n+  VERIFY((is_same<result_of<int_result_of(double)>::type, int>::value));\n+  VERIFY((is_same<result_of<int_result_of(void)>::type, void>::value));\n+  VERIFY((is_same<result_of<const int_result_of(double)>::type, int>::value));\n+  VERIFY((is_same<result_of<volatile int_result_of(void)>::type, void>::value));\n+  VERIFY((is_same<result_of<int_result_type_and_float_result_of(char)>::type, int>::value));\n+  VERIFY((is_same<result_of<func_ptr(char, float)>::type, int>::value));\n+  VERIFY((is_same<result_of<func_ref(char, float)>::type, int>::value));\n+  VERIFY((is_same<result_of<mem_func_ptr(::X,char)>::type, int>::value));\n+  VERIFY((is_same<result_of<mem_func_ptr_c(::X,char)>::type, int>::value));\n+  VERIFY((is_same<result_of<mem_func_ptr_v(::X,char)>::type, int>::value));\n+  VERIFY((is_same<result_of<mem_func_ptr_cv(::X,char)>::type, int>::value));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}