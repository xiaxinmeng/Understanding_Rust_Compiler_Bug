{"sha": "e3ca3e7993696affe95a3ea24c2b133c14a056e4", "node_id": "C_kwDOANBUbNoAKGUzY2EzZTc5OTM2OTZhZmZlOTVhM2VhMjRjMmIxMzNjMTRhMDU2ZTQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-07T16:20:52Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-07T16:20:52Z"}, "message": "Fortran: Fix typos\n\ngcc/fortran/ChangeLog:\n\n\t* array.cc (gfc_ref_dimen_size): Fix comment typo.\n\t* dump-parse-tree.cc (gfc_dump_c_prototypes): Likewise.\n\t* frontend-passes.cc (cfe_code): Likewise.\n\t* gfortran.texi: Likewise.\n\t* resolve.cc (generate_component_assignments): Likewise.\n\t* simplify.cc (gfc_simplify_this_image): Likewise.\n\t* trans-expr.cc (trans_scalar_class_assign,\n\tgfc_maybe_dereference_var): Likewise.\n\t* intrinsic.texi: Remove word duplication.\n\t* invoke.texi: Likewise.", "tree": {"sha": "4f61d79979da599849628008060ac91480ad4d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f61d79979da599849628008060ac91480ad4d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3ca3e7993696affe95a3ea24c2b133c14a056e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ca3e7993696affe95a3ea24c2b133c14a056e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ca3e7993696affe95a3ea24c2b133c14a056e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ca3e7993696affe95a3ea24c2b133c14a056e4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a86ca83a1b1817457837540e0bc8dd26db75407c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86ca83a1b1817457837540e0bc8dd26db75407c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86ca83a1b1817457837540e0bc8dd26db75407c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "eb9ed8580a076faef2c4fcf6630eb23556b00b0a", "filename": "gcc/fortran/array.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Farray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Farray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.cc?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -2420,7 +2420,7 @@ gfc_ref_dimen_size (gfc_array_ref *ar, int dimen, mpz_t *result, mpz_t *end)\n \t  gfc_free_expr(stride_expr);\n \t}\n \n-      /* Calculate the number of elements via gfc_dep_differce, but only if\n+      /* Calculate the number of elements via gfc_dep_difference, but only if\n \t start and end are both supplied in the reference or the array spec.\n \t This is to guard against strange but valid code like\n "}, {"sha": "3635460bffd339411252ca6946e616c088c09451", "filename": "gcc/fortran/dump-parse-tree.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fdump-parse-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fdump-parse-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.cc?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -3543,7 +3543,7 @@ gfc_dump_c_prototypes (gfc_namespace *ns, FILE *file)\n   gfc_traverse_ns (ns, write_interop_decl);\n }\n \n-/* Loop over all global symbols, writing out their declrations.  */\n+/* Loop over all global symbols, writing out their declarations.  */\n \n void\n gfc_dump_external_c_prototypes (FILE * file)"}, {"sha": "4033f27df99d15aab86ff6efcbc544882fdb3701", "filename": "gcc/fortran/frontend-passes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Ffrontend-passes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Ffrontend-passes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.cc?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -974,7 +974,7 @@ cfe_code (gfc_code **c, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n   changed_statement = NULL;\n \n   /* Do not do anything inside a WHERE statement; scalar assignments, BLOCKs\n-     and allocation on assigment are prohibited inside WHERE, and finally\n+     and allocation on assignment are prohibited inside WHERE, and finally\n      masking an expression would lead to wrong-code when replacing\n \n      WHERE (a>0)"}, {"sha": "f8737f4d323b8518b0054bcf6144fcaea3e15a19", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -1093,7 +1093,7 @@ variable.\n \n The maximum number of bytes of user data in a subrecord is 2147483639\n (2 GiB - 9) for a four-byte record marker.  This limit can be lowered\n-with the @option{-fmax-subrecord-length} option, altough this is\n+with the @option{-fmax-subrecord-length} option, although this is\n rarely useful. If the length of a logical record exceeds this limit,\n the data is distributed among several subrecords.\n "}, {"sha": "e3cd82799600f3beb6fabaad19a78bfb56aac8df", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -12897,7 +12897,7 @@ end program real_kinds\n @table @asis\n @item @emph{Description}:\n @code{SET_EXPONENT(X, I)} returns the real number whose fractional part\n-is that that of @var{X} and whose exponent part is @var{I}.\n+is that of @var{X} and whose exponent part is @var{I}.\n \n @item @emph{Standard}:\n Fortran 90 and later\n@@ -12917,7 +12917,7 @@ Elemental function\n @item @emph{Return value}:\n The return value is of the same type and kind as @var{X}.\n The real number whose fractional part\n-is that that of @var{X} and whose exponent part if @var{I} is returned;\n+is that of @var{X} and whose exponent part if @var{I} is returned;\n it is @code{FRACTION(X) * RADIX(X)**I}.\n \n @item @emph{Example}:"}, {"sha": "5c7501a28b19e4bc4a6cbdb182e0d682c0bdf648", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -1858,7 +1858,7 @@ except when optimizing for size via @option{-Os}.  If the code\n contains a very large number of argument that have to be packed, code\n size and also compilation time may become excessive.  If that is the\n case, it may be better to disable this option.  Instances of packing\n-can be found by using by using @option{-Warray-temporaries}.\n+can be found by using @option{-Warray-temporaries}.\n \n @item -fexternal-blas\n @opindex @code{fexternal-blas}\n@@ -2068,7 +2068,7 @@ does not generate prototypes for @code{BIND(C)} procedures, use\n @option{-fc-prototypes} for that.\n \n The generated prototypes may need inclusion of an appropriate\n-header, such as as @code{<stdint.h>} or @code{<stdlib.h>}.\n+header, such as @code{<stdint.h>} or @code{<stdlib.h>}.\n \n This is primarily meant for legacy code to ensure that existing C\n bindings match what @command{gfortran} emits.  The generated C"}, {"sha": "0b55961f083d66cf9aa2524f658e3cb70742440a", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -11539,7 +11539,7 @@ generate_component_assignments (gfc_code **code, gfc_namespace *ns)\n \t  || comp1->attr.proc_pointer)\n \tcontinue;\n \n-      /* Make an assigment for this component.  */\n+      /* Make an assignment for this component.  */\n       this_code = build_assignment (EXEC_ASSIGN,\n \t\t\t\t    (*code)->expr1, (*code)->expr2,\n \t\t\t\t    comp1, comp2, (*code)->loc);"}, {"sha": "0c15bcb2b0a9e80780fe83aa31137eceb1baa878", "filename": "gcc/fortran/simplify.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fsimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Fsimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.cc?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -8424,7 +8424,7 @@ gfc_simplify_this_image (gfc_expr *coarray, gfc_expr *dim,\n     return NULL;\n \n   /* If no coarray argument has been passed or when the first argument\n-     is actually a distance argment.  */\n+     is actually a distance argument.  */\n   if (coarray == NULL || !gfc_is_coarray (coarray))\n     {\n       gfc_expr *result;"}, {"sha": "c9d9a916c2840f3bd7a7cf0658c8281731bd76db", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ca3e7993696affe95a3ea24c2b133c14a056e4/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=e3ca3e7993696affe95a3ea24c2b133c14a056e4", "patch": "@@ -1777,7 +1777,7 @@ trans_scalar_class_assign (stmtblock_t *block, gfc_se *lse, gfc_se *rse)\n   bool not_call_expr = TREE_CODE (rse->expr) != CALL_EXPR;\n   bool not_lhs_array_type;\n \n-  /* Temporaries arising from depencies in assignment get cast as a\n+  /* Temporaries arising from dependencies in assignment get cast as a\n      character type of the dynamic size of the rhs. Use the vptr copy\n      for this case.  */\n   tmp = TREE_TYPE (lse->expr);\n@@ -2934,7 +2934,7 @@ gfc_maybe_dereference_var (gfc_symbol *sym, tree var, bool descriptor_only_p,\n \t\t   || CLASS_DATA (sym)->attr.class_pointer))\n \tvar = build_fold_indirect_ref_loc (input_location, var);\n       /* And the case where a non-dummy, non-result, non-function,\n-\t non-allotable and non-pointer classarray is present.  This case was\n+\t non-allocable and non-pointer classarray is present.  This case was\n \t previously covered by the first if, but with introducing the\n \t condition !is_classarray there, that case has to be covered\n \t explicitly.  */"}]}