{"sha": "988ee9bc105a949e9c3df2970b4231e23990d9df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4ZWU5YmMxMDVhOTQ5ZTljM2RmMjk3MGI0MjMxZTIzOTkwZDlkZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-02T10:45:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-02T10:45:41Z"}, "message": "ada-tree.h (TYPE_PADDING_FOR_COMPONENT): New macro.\n\n\t* gcc-interface/ada-tree.h (TYPE_PADDING_FOR_COMPONENT): New macro.\n\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Cache the padding\n\ttype built for an aliased component with variable size.\n\nFrom-SVN: r261106", "tree": {"sha": "5d94267e5b88bb6e5182aa17143b19fc2e1510bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d94267e5b88bb6e5182aa17143b19fc2e1510bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/988ee9bc105a949e9c3df2970b4231e23990d9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988ee9bc105a949e9c3df2970b4231e23990d9df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988ee9bc105a949e9c3df2970b4231e23990d9df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988ee9bc105a949e9c3df2970b4231e23990d9df/comments", "author": null, "committer": null, "parents": [{"sha": "82b337774c1429683681b3b4c084311b03a998fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b337774c1429683681b3b4c084311b03a998fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b337774c1429683681b3b4c084311b03a998fc"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "b180457534c9fa6e5639a72898b378fc87955165", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=988ee9bc105a949e9c3df2970b4231e23990d9df", "patch": "@@ -1,3 +1,9 @@\n+2018-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (TYPE_PADDING_FOR_COMPONENT): New macro.\n+\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Cache the padding\n+\ttype built for an aliased component with variable size.\n+\n 2018-05-31  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* doc/gnat_ugn/project-manager-figure.png: Delete."}, {"sha": "23060c5192611c995542edee4e9e9d50585e1f57", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=988ee9bc105a949e9c3df2970b4231e23990d9df", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2017, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2018, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -235,6 +235,11 @@ do {\t\t\t\t\t\t\t \\\n    refer to the routine gnat_to_gnu_entity.  */\n #define TYPE_CI_CO_LIST(NODE) TYPE_LANG_SLOT_1 (FUNCTION_TYPE_CHECK (NODE))\n \n+/* For an ARRAY_TYPE with variable size, this is the padding type built for\n+   the array type when it is itself the component type of another array.  */\n+#define TYPE_PADDING_FOR_COMPONENT(NODE) \\\n+  (TYPE_LANG_SLOT_1 (ARRAY_TYPE_CHECK (NODE)))\n+\n /* For a VECTOR_TYPE, this is the representative array type.  */\n #define TYPE_REPRESENTATIVE_ARRAY(NODE) \\\n   TYPE_LANG_SLOT_1 (VECTOR_TYPE_CHECK (NODE))"}, {"sha": "8f3595ec2633243cba7cf0d26f093736a127dc2c", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=988ee9bc105a949e9c3df2970b4231e23990d9df", "patch": "@@ -5031,24 +5031,20 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n \t\t     Is_Bit_Packed_Array (gnat_array) ? TYPE_DECL : VAR_DECL,\n \t\t     true, Has_Component_Size_Clause (gnat_array));\n \n-  /* If the array has aliased components and the component size can be zero,\n-     force at least unit size to ensure that the components have distinct\n-     addresses.  */\n-  if (!gnu_comp_size\n-      && Has_Aliased_Components (gnat_array)\n-      && (integer_zerop (TYPE_SIZE (gnu_type))\n-\t  || (TREE_CODE (gnu_type) == ARRAY_TYPE\n-\t      && !TREE_CONSTANT (TYPE_SIZE (gnu_type)))))\n-    gnu_comp_size\n-      = size_binop (MAX_EXPR, TYPE_SIZE (gnu_type), bitsize_unit_node);\n-\n   /* If the component type is a RECORD_TYPE that has a self-referential size,\n      then use the maximum size for the component size.  */\n   if (!gnu_comp_size\n       && TREE_CODE (gnu_type) == RECORD_TYPE\n       && CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_type)))\n     gnu_comp_size = max_size (TYPE_SIZE (gnu_type), true);\n \n+  /* If the array has aliased components and the component size is zero, force\n+     the unit size to ensure that the components have distinct addresses.  */\n+  if (!gnu_comp_size\n+      && Has_Aliased_Components (gnat_array)\n+      && integer_zerop (TYPE_SIZE (gnu_type)))\n+    gnu_comp_size = bitsize_unit_node;\n+\n   /* Honor the component size.  This is not needed for bit-packed arrays.  */\n   if (gnu_comp_size && !Is_Bit_Packed_Array (gnat_array))\n     {\n@@ -5071,6 +5067,30 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n \t\t\t  gnat_array);\n     }\n \n+  /* This is a very special case where the array has aliased components and the\n+     component size might be zero at run time.  As explained above, we force at\n+     least the unit size but we don't want to build a distinct padding type for\n+     each invocation (they are not canonicalized if they have variable size) so\n+     we cache this special padding type as TYPE_PADDING_FOR_COMPONENT.  */\n+  else if (Has_Aliased_Components (gnat_array)\n+\t   && TREE_CODE (gnu_type) == ARRAY_TYPE\n+\t   && !TREE_CONSTANT (TYPE_SIZE (gnu_type)))\n+    {\n+      if (TYPE_PADDING_FOR_COMPONENT (gnu_type))\n+\tgnu_type = TYPE_PADDING_FOR_COMPONENT (gnu_type);\n+      else\n+\t{\n+\t  gnu_comp_size\n+\t    = size_binop (MAX_EXPR, TYPE_SIZE (gnu_type), bitsize_unit_node);\n+\t  TYPE_PADDING_FOR_COMPONENT (gnu_type)\n+\t    = maybe_pad_type (gnu_type, gnu_comp_size, 0, gnat_array,\n+\t\t\t      true, false, definition, true);\n+\t  gnu_type = TYPE_PADDING_FOR_COMPONENT (gnu_type);\n+\t  create_type_decl (TYPE_NAME (gnu_type), gnu_type, true, debug_info_p,\n+\t\t\t    gnat_array);\n+\t}\n+    }\n+\n   if (Has_Atomic_Components (gnat_array) || Is_Atomic_Or_VFA (gnat_type))\n     check_ok_for_atomic_type (gnu_type, gnat_array, true);\n "}, {"sha": "7c027e5d4f5e10d4bf1a57d4bc16eedecd9c1fe8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=988ee9bc105a949e9c3df2970b4231e23990d9df", "patch": "@@ -1,3 +1,8 @@\n+2018-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/opt3.ads: New test.\n+\t* gnat.dg/specs/opt3_pkg.ads: New helper.\n+\n 2018-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/discr53.ad[sb]: New test."}, {"sha": "531cf59eae353b4634814abb8c9655876cf04f35", "filename": "gcc/testsuite/gnat.dg/specs/opt3.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt3.ads?ref=988ee9bc105a949e9c3df2970b4231e23990d9df", "patch": "@@ -0,0 +1,13 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O3\" }\n+\n+with Ada.Containers.Vectors;\n+with Opt3_Pkg;\n+\n+package Opt3 is\n+\n+  type Arr is array (1 .. Opt3_Pkg.Max) of Integer;\n+\n+  package Arr_Container is new Ada.Containers.Vectors (Natural, Arr);\n+\n+end Opt3;"}, {"sha": "f0d23f3929d2816764ea0150312686b718b8c34f", "filename": "gcc/testsuite/gnat.dg/specs/opt3_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ee9bc105a949e9c3df2970b4231e23990d9df/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fopt3_pkg.ads?ref=988ee9bc105a949e9c3df2970b4231e23990d9df", "patch": "@@ -0,0 +1,5 @@\n+package Opt3_Pkg is\n+\n+  function Max return Natural;\n+\n+end Opt3_Pkg;"}]}