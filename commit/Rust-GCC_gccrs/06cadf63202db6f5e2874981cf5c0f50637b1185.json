{"sha": "06cadf63202db6f5e2874981cf5c0f50637b1185", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjYWRmNjMyMDJkYjZmNWUyODc0OTgxY2Y1YzBmNTA2MzdiMTE4NQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-11-07T21:33:24Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-11-07T21:33:24Z"}, "message": "constraints.md: New file.\n\n\t* config/cris/constraints.md: New file.\n\t* config/cris/cris.h (REG_CLASS_FROM_LETTER, CONSTRAINT_LEN,\n\tCRIS_CONST_OK_FOR_LETTER_P, CONST_OK_FOR_CONSTRAINT_P,\n\tCONST_DOUBLE_OK_FOR_LETTER_P, EXTRA_MEMORY_CONSTRAINT,\n\tEXTRA_CONSTRAINT, EXTRA_CONSTRAINT_Q, EXTRA_CONSTRAINT_R,\n\tEXTRA_CONSTRAINT_T, EXTRA_CONSTRAINT_S, EXTRA_CONSTRAINT_U): Remove.\n\t* config/cris/cris.c: Incule \"tm-constrs.h\".\n\t(cris_print_operand): Use satisfies_constraint_O.\n\t(cris_normal_notice_update_cc, cris_rtx_costs): Use\n\tsatisfies_constraint_I.\n\t(cris_address_cost): Use satisfies_constraint_L.\n\t* config/cris/cris.md: Include \"constraints.md\".\n\t(*mov_side<mode>, *mov_sidesisf, *mov_side<mode>_mem,\n\t*mov_sidesisf_mem, *clear_side<mode>, *ext_sideqihi,\n\t*ext_side<mode>si, *op_side<mode>, *op_swap_side<mode>,\n\t*extopqihi_side, *extop<mode>si_side, *extopqihi_swap_side,\n\t*extop<mode>si_swap_side): Use satisfies_constraint_N and\n\tsatisfies_constraint_J.\n\t(moversideqi movemsideqi mover2side peephole2): Use\n\tsatisfies_constraint_N and satisfies_constraint_J.\n\t(andu peephole2): Use satisfies_constraint_I and\n\tsatisfies_constraint_O.\n\nFrom-SVN: r181120", "tree": {"sha": "77bef785ca0f3f3ffdf9d9cec99fc828499e5290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77bef785ca0f3f3ffdf9d9cec99fc828499e5290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06cadf63202db6f5e2874981cf5c0f50637b1185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cadf63202db6f5e2874981cf5c0f50637b1185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06cadf63202db6f5e2874981cf5c0f50637b1185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cadf63202db6f5e2874981cf5c0f50637b1185/comments", "author": null, "committer": null, "parents": [{"sha": "6577e39c943c13668fec2eed8c5aca83257e408f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6577e39c943c13668fec2eed8c5aca83257e408f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6577e39c943c13668fec2eed8c5aca83257e408f"}], "stats": {"total": 402, "additions": 229, "deletions": 173}, "files": [{"sha": "db6749bdcbcb0d16e883b5079b0c63cdd528029b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06cadf63202db6f5e2874981cf5c0f50637b1185", "patch": "@@ -1,3 +1,28 @@\n+2011-11-07  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/cris/constraints.md: New file.\n+\t* config/cris/cris.h (REG_CLASS_FROM_LETTER, CONSTRAINT_LEN,\n+\tCRIS_CONST_OK_FOR_LETTER_P, CONST_OK_FOR_CONSTRAINT_P,\n+\tCONST_DOUBLE_OK_FOR_LETTER_P, EXTRA_MEMORY_CONSTRAINT,\n+\tEXTRA_CONSTRAINT, EXTRA_CONSTRAINT_Q, EXTRA_CONSTRAINT_R,\n+\tEXTRA_CONSTRAINT_T, EXTRA_CONSTRAINT_S, EXTRA_CONSTRAINT_U): Remove.\n+\t* config/cris/cris.c: Incule \"tm-constrs.h\".\n+\t(cris_print_operand): Use satisfies_constraint_O.\n+\t(cris_normal_notice_update_cc, cris_rtx_costs): Use\n+\tsatisfies_constraint_I.\n+\t(cris_address_cost): Use satisfies_constraint_L.\n+\t* config/cris/cris.md: Include \"constraints.md\".\n+\t(*mov_side<mode>, *mov_sidesisf, *mov_side<mode>_mem,\n+\t*mov_sidesisf_mem, *clear_side<mode>, *ext_sideqihi,\n+\t*ext_side<mode>si, *op_side<mode>, *op_swap_side<mode>,\n+\t*extopqihi_side, *extop<mode>si_side, *extopqihi_swap_side,\n+\t*extop<mode>si_swap_side): Use satisfies_constraint_N and\n+\tsatisfies_constraint_J.\n+\t(moversideqi movemsideqi mover2side peephole2): Use\n+\tsatisfies_constraint_N and satisfies_constraint_J.\n+\t(andu peephole2): Use satisfies_constraint_I and\n+\tsatisfies_constraint_O.\n+\n 2011-11-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_builtin_vectorized_function): Handle"}, {"sha": "42944e73f413c90bb2329600fd0dd4e95b7339ce", "filename": "gcc/config/cris/constraints.md", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2Fconfig%2Fcris%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2Fconfig%2Fcris%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fconstraints.md?ref=06cadf63202db6f5e2874981cf5c0f50637b1185", "patch": "@@ -0,0 +1,164 @@\n+;; Constraint definitions for CRIS.\n+;; Copyright (C) 2011 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Register constraints.\n+(define_register_constraint \"a\" \"ACR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"b\" \"GENNONACR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"h\" \"MOF_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"x\" \"SPECIAL_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"c\" \"CC0_REGS\"\n+  \"@internal\")\n+\n+;; Integer constraints.\n+(define_constraint \"I\"\n+  \"MOVEQ, CMPQ, ANDQ, ORQ.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -32, 31)\")))\n+\n+(define_constraint \"J\"\n+  \"ADDQ, SUBQ.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 63)\")))\n+\n+(define_constraint \"Kc\"\n+  \"ASRQ, BTSTQ, LSRQ, LSLQ.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 31)\")))\n+\n+(define_constraint \"Kp\"\n+  \"A power of two.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"exact_log2 (ival) >= 0\")))\n+\n+(define_constraint \"L\"\n+  \"A 16-bit signed number.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -32768, 32767)\")))\n+\n+(define_constraint \"M\"\n+  \"The constant 0 for CLEAR.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"N\"\n+  \"A negative ADDQ or SUBQ.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -63, -1)\")))\n+\n+(define_constraint \"O\"\n+  \"Quickened ints, QI and HI.\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"IN_RANGE (ival, (65535 - 31), 65535)\")\n+\t    (match_test \"IN_RANGE (ival, (255 - 31), 255)\"))))\n+\n+(define_constraint \"P\"\n+  \"A 16-bit number signed *or* unsigned.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -32768, 65535)\")))\n+\n+;; Floating-point constant constraints.\n+(define_constraint \"G\"\n+  \"The floating point zero constant\"\n+  (and (match_code \"const_double\")\n+       (match_test \"GET_MODE_CLASS (mode) == MODE_FLOAT\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n+;; Memory constraints.\n+\n+;; Just an indirect register (happens to also be \"all\" slottable\n+;; memory addressing modes not covered by other constraints, i.e. '>').\n+(define_memory_constraint \"Q\"\n+  \"@internal\"\n+  (and (match_code \"mem\")\n+       (match_test \"cris_base_p (XEXP (op, 0), reload_in_progress\n+\t\t\t\t\t       || reload_completed)\")))\n+\n+;; Extra constraints.\n+(define_constraint \"R\"\n+  \"An operand to BDAP or BIAP.\"\n+       ;; A BIAP; r.S?\n+  (ior (match_test \"cris_biap_index_p (op, reload_in_progress\n+\t\t\t\t\t   || reload_completed)\")\n+       ;; A [reg] or (int) [reg], maybe with post-increment.\n+       (match_test \"cris_bdap_index_p (op, reload_in_progress\n+\t\t\t\t\t   || reload_completed)\")\n+       (match_test \"cris_constant_index_p (op)\")))\n+\n+(define_constraint \"T\"\n+  \"Memory three-address operand.\"\n+  ;; All are indirect-memory:\n+  (and (match_code \"mem\")\n+\t    ;; Double indirect: [[reg]] or [[reg+]]?\n+       (ior (and (match_code \"mem\" \"0\")\n+\t\t (match_test \"cris_base_or_autoincr_p (XEXP (XEXP (op, 0), 0),\n+\t\t\t\t\t\t       reload_in_progress\n+\t\t\t\t\t\t       || reload_completed)\"))\n+\t    ;; Just an explicit indirect reference: [const]?\n+\t    (match_test \"CONSTANT_P (XEXP (op, 0))\")\n+\t    ;; Something that is indexed; [...+...]?\n+\t    (and (match_code \"plus\" \"0\")\n+\t\t      ;; A BDAP constant: [reg+(8|16|32)bit offset]?\n+\t\t (ior (and (match_test \"cris_base_p (XEXP (XEXP (op, 0), 0),\n+\t\t\t\t\t\t     reload_in_progress\n+\t\t\t\t\t\t     || reload_completed)\")\n+\t\t\t   (match_test \"cris_constant_index_p (XEXP (XEXP (op, 0), 1))\"))\n+\t\t      ;; A BDAP register: [reg+[reg(+)].S]?\n+\t\t      (and (match_test \"cris_base_p (XEXP (XEXP (op, 0), 0),\n+\t\t\t\t\t\t     reload_in_progress\n+\t\t\t\t\t\t     || reload_completed)\")\n+\t\t\t   (match_test \"cris_bdap_index_p (XEXP (XEXP (op, 0), 1),\n+\t\t\t\t\t\t\t   reload_in_progress\n+\t\t\t\t\t\t\t   || reload_completed)\"))\n+\t\t      ;; Same, but with swapped arguments (no canonical\n+\t\t      ;; ordering between e.g. REG and MEM as of LAST_UPDATED\n+\t\t      ;; \"Thu May 12 03:59:11 UTC 2005\").\n+\t\t      (and (match_test \"cris_base_p (XEXP (XEXP (op, 0), 1),\n+\t\t\t\t\t\t     reload_in_progress\n+\t\t\t\t\t\t     || reload_completed)\")\n+\t\t\t   (match_test \"cris_bdap_index_p (XEXP (XEXP (op, 0), 0),\n+\t\t\t\t\t\t\t   reload_in_progress\n+\t\t\t\t\t\t\t   || reload_completed)\"))\n+\t\t      ;; A BIAP: [reg+reg.S] (MULT comes first).\n+\t\t      (and (match_test \"cris_base_p (XEXP (XEXP (op, 0), 1),\n+\t\t\t\t\t\t     reload_in_progress\n+\t\t\t\t\t\t     || reload_completed)\")\n+\t\t\t   (match_test \"cris_biap_index_p (XEXP (XEXP (op, 0), 0),\n+\t\t\t\t\t\t\t   reload_in_progress\n+\t\t\t\t\t\t\t   || reload_completed)\")))))))\n+\n+(define_constraint \"S\"\n+  \"PIC-constructs for symbols.\"\n+  (and (match_test \"flag_pic\")\n+       (match_code \"const\")\n+       (match_test \"cris_valid_pic_const (op, false)\")))\n+\n+(define_constraint \"U\"\n+  \"@internal\"\n+  (and (match_test \"flag_pic\")\n+       (match_test \"CONSTANT_P (op)\")\n+       (match_operand 0 \"cris_nonmemory_operand_or_callable_symbol\")))\n+"}, {"sha": "06568023051d733e2938bda4ed70291a312463a7", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=06cadf63202db6f5e2874981cf5c0f50637b1185", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"debug.h\"\n #include \"output.h\"\n+#include \"tm-constrs.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"ggc.h\"\n@@ -703,8 +704,7 @@ cris_print_operand (FILE *file, rtx x, int code)\n     case 'b':\n       /* Print the unsigned supplied integer as if it were signed\n \t and < 0, i.e print 255 or 65535 as -1, 254, 65534 as -2, etc.  */\n-      if (!CONST_INT_P (x)\n-\t  || !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (x), 'O'))\n+      if (!satisfies_constraint_O (x))\n \tLOSE_AND_RETURN (\"invalid operand for 'b' modifier\", x);\n       fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n \t       INTVAL (x)| (INTVAL (x) <= 255 ? ~255 : ~65535));\n@@ -1692,9 +1692,7 @@ cris_normal_notice_update_cc (rtx exp, rtx insn)\n \t\t       && (REGNO (SET_SRC (exp))\n \t\t\t   > CRIS_LAST_GENERAL_REGISTER))\n \t\t   || (TARGET_V32\n-\t\t       && GET_CODE (SET_SRC (exp)) == CONST_INT\n-\t\t       && CRIS_CONST_OK_FOR_LETTER_P (INTVAL (SET_SRC (exp)),\n-\t\t\t\t\t\t      'I')))\n+\t\t       && satisfies_constraint_I (SET_SRC (exp))))\n \t    {\n \t      /* There's no CC0 change for this case.  Just check\n \t\t for overlap.  */\n@@ -2037,7 +2035,7 @@ cris_rtx_costs (rtx x, int code, int outer_code, int opno, int *total,\n       if (CONST_INT_P (XEXP (x, 1))\n           /* Two constants may actually happen before optimization.  */\n           && !CONST_INT_P (XEXP (x, 0))\n-          && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (XEXP (x, 1)), 'I'))\n+\t  && !satisfies_constraint_I (XEXP (x, 1)))\n \t{\n \t  *total\n \t    = (rtx_cost (XEXP (x, 0), (enum rtx_code) outer_code,\n@@ -2118,8 +2116,7 @@ cris_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n \n       /* A BDAP -32768 .. 32767 is like BDAP quick, but with 2 extra\n \t bytes.  */\n-      if (CONST_INT_P (tem2)\n-\t  && CRIS_CONST_OK_FOR_LETTER_P (INTVAL (tem2), 'L'))\n+      if (satisfies_constraint_L (tem2))\n \treturn (2 + 2) / 2;\n \n       /* A BDAP with some other constant is 2 bytes extra.  */"}, {"sha": "a9a68b8b3c18d6d0e717eeadfdc4e397149bc636", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=06cadf63202db6f5e2874981cf5c0f50637b1185", "patch": "@@ -550,16 +550,6 @@ enum reg_class\n \n #define INDEX_REG_CLASS GENERAL_REGS\n \n-#define REG_CLASS_FROM_LETTER(C)\t\t\\\n-  (\t\t\t\t\t\t\\\n-   (C) == 'a' ? ACR_REGS :\t\t\t\\\n-   (C) == 'b' ? GENNONACR_REGS :\t\t\\\n-   (C) == 'h' ? MOF_REGS :\t\t\t\\\n-   (C) == 'x' ? SPECIAL_REGS :\t\t\t\\\n-   (C) == 'c' ? CC0_REGS :\t\t\t\\\n-   NO_REGS\t\t\t\t\t\\\n-  )\n-\n /* Since it uses reg_renumber, it is safe only once reg_renumber\n    has been allocated, which happens in local-alloc.c.  */\n #define REGNO_OK_FOR_BASE_P(REGNO)\t\t\t\t\t\\\n@@ -609,127 +599,6 @@ enum reg_class\n   ? 1 /* + cris_fatal (\"CLASS_MAX_NREGS with VOIDmode\")\t*/\t\t\\\n   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n-/* We are now out of letters; we could use ten more.  This forces us to\n-   use C-code in the 'md' file.  FIXME: Use some EXTRA_CONSTRAINTS.  */\n-#define CRIS_CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\\\n- (\t\t\t\t\t\t\t\\\n-  /* MOVEQ, CMPQ, ANDQ, ORQ.  */\t\t\t\\\n-  (C) == 'I' ? (VALUE) >= -32 && (VALUE) <= 31 :\t\\\n-  /* ADDQ, SUBQ.  */\t\t\t\t\t\\\n-  (C) == 'J' ? (VALUE) >= 0 && (VALUE) <= 63 :\t\t\\\n-  /* ASRQ, BTSTQ, LSRQ, LSLQ.  */\t\t\t\\\n-  (C) == 'K' ? (VALUE) >= 0 && (VALUE) <= 31 :\t\t\\\n-  /* A 16-bit signed number.  */\t\t\t\\\n-  (C) == 'L' ? (VALUE) >= -32768 && (VALUE) <= 32767 :\t\\\n-  /* The constant 0 for CLEAR.  */\t\t\t\\\n-  (C) == 'M' ? (VALUE) == 0 :\t\t\t\t\\\n-  /* A negative ADDQ or SUBQ.  */\t\t\t\\\n-  (C) == 'N' ? (VALUE) >= -63 && (VALUE) < 0 :\t\t\\\n-  /* Quickened ints, QI and HI.  */\t\t\t\\\n-  (C) == 'O' ? (VALUE) >= 0 && (VALUE) <= 65535\t\t\\\n-\t\t&& ((VALUE) >= (65535-31)\t\t\\\n-\t\t    || ((VALUE) >= (255-31)\t\t\\\n-\t\t\t&& (VALUE) <= 255 )) :\t\t\\\n-  /* A 16-bit number signed *or* unsigned.  */\t\t\\\n-  (C) == 'P' ? (VALUE) >= -32768 && (VALUE) <= 65535 :\t\\\n-  0)\n-\n-#define CONST_OK_FOR_CONSTRAINT_P(VALUE, C, S)\t\\\n- (\t\t\t\t\t\t\\\n-  ((C) != 'K' || (S)[1] == 'c')\t\t\t\\\n-   ? CRIS_CONST_OK_FOR_LETTER_P (VALUE, C) :\t\\\n-  ((C) == 'K' && (S)[1] == 'p')\t\t\t\\\n-   ? exact_log2 (VALUE) >= 0 :\t\t\t\\\n-  0)\n-\n-#define CONSTRAINT_LEN(C, S) ((C) == 'K' ? 2 : DEFAULT_CONSTRAINT_LEN (C, S))\n-\n-/* It is really simple to make up a 0.0; it is the same as int-0 in\n-   IEEE754.  */\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\t\t\\\n- ((C) == 'G' && ((VALUE) == CONST0_RTX (DFmode)\t\t\t\\\n-\t\t || (VALUE) == CONST0_RTX (SFmode)))\n-\n-/* We need this on cris to distinguish delay-slottable addressing modes.  */\n-#define EXTRA_CONSTRAINT(X, C)\t\t\t\\\n- (\t\t\t\t\t\t\\\n-  /* Slottable address mode?  */\t\t\\\n-  (C) == 'Q' ? EXTRA_CONSTRAINT_Q (X) :\t\t\\\n-  /* Operand to BDAP or BIAP?  */\t\t\\\n-  (C) == 'R' ? EXTRA_CONSTRAINT_R (X) :\t\t\\\n-  /* A local PIC symbol?  */\t\t\t\\\n-  (C) == 'S' ? EXTRA_CONSTRAINT_S (X) :\t\t\\\n-  /* A three-address addressing-mode?  */\t\\\n-  (C) == 'T' ? EXTRA_CONSTRAINT_T (X) :\t\t\\\n-  /* A PLT symbol?  */\t\t\t\t\\\n-  (C) == 'U' ? EXTRA_CONSTRAINT_U (X) :\t\t\\\n-  0)\n-\n-#define EXTRA_MEMORY_CONSTRAINT(X, STR) ((X) == 'Q')\n-\n-#define EXTRA_CONSTRAINT_Q(X)\t\t\t\t\\\n- (\t\t\t\t\t\t\t\\\n-  /* Just an indirect register (happens to also be\t\\\n-     \"all\" slottable memory addressing modes not\t\\\n-     covered by other constraints, i.e. '>').  */\t\\\n-  MEM_P (X)\t\t\t\t\t\t\\\n-  && cris_base_p (XEXP (X, 0), reload_in_progress || reload_completed) \\\n- )\n-\n-#define EXTRA_CONSTRAINT_R(X)\t\t\t\t\t\\\n- (\t\t\t\t\t\t\t\t\\\n-  /* An operand to BDAP or BIAP:\t\t\t\t\\\n-     A BIAP; r.S? */\t\t\t\t\t\t\\\n-  cris_biap_index_p (X, reload_in_progress || reload_completed)  \\\n-  /* A [reg] or (int) [reg], maybe with post-increment.  */\t\\\n-  || cris_bdap_index_p (X, reload_in_progress || reload_completed) \\\n-  || cris_constant_index_p (X)\t\t\t\t\t\\\n- )\n-\n-#define EXTRA_CONSTRAINT_T(X)\t\t\t\t\t\t\\\n- (\t\t\t\t\t\t\t\t\t\\\n-  /* Memory three-address operand.  All are indirect-memory:  */\t\\\n-  MEM_P (X)\t\t\t\t\t\t\t\t\\\n-  && ((MEM_P (XEXP (X, 0))\t\t\t\t\t\t\\\n-       /* Double indirect: [[reg]] or [[reg+]]?  */\t\t\t\\\n-       && (cris_base_or_autoincr_p (XEXP (XEXP (X, 0), 0),\t\t\\\n-\t\t\t      reload_in_progress || reload_completed)))\t\\\n-      /* Just an explicit indirect reference: [const]?  */\t\t\\\n-      || CONSTANT_P (XEXP (X, 0))\t\t\t\t\t\\\n-      /* Something that is indexed; [...+...]?  */\t\t\t\\\n-      || (GET_CODE (XEXP (X, 0)) == PLUS\t\t\t\t\\\n-\t  /* A BDAP constant: [reg+(8|16|32)bit offset]?  */\t\t\\\n-\t  && ((cris_base_p (XEXP (XEXP (X, 0), 0),\t\t\t\\\n-\t\t\t       reload_in_progress || reload_completed)\t\\\n-\t       && cris_constant_index_p (XEXP (XEXP (X, 0), 1)))\t\\\n-\t      /* A BDAP register: [reg+[reg(+)].S]?  */\t\t\t\\\n-\t      || (cris_base_p (XEXP (XEXP (X, 0), 0),\t\t\t\\\n-\t\t\t       reload_in_progress || reload_completed)\t\\\n-\t\t  && cris_bdap_index_p (XEXP(XEXP(X, 0), 1),\t\t\\\n-\t\t \t       reload_in_progress || reload_completed))\t\\\n-\t      /* Same, but with swapped arguments (no canonical\t\t\\\n-\t\t ordering between e.g. REG and MEM as of LAST_UPDATED\t\\\n-\t\t \"Thu May 12 03:59:11 UTC 2005\").  */\t\t\t\\\n-\t      || (cris_base_p (XEXP (XEXP (X, 0), 1),\t\t\t\\\n-\t\treload_in_progress | reload_completed)\t\t\t\\\n-\t\t  && cris_bdap_index_p (XEXP (XEXP (X, 0), 0),\t\t\\\n-\t\t\t       reload_in_progress || reload_completed))\t\\\n-\t      /* A BIAP: [reg+reg.S] (MULT comes first).  */\t\t\\\n-\t      || (cris_base_p (XEXP (XEXP (X, 0), 1),\t\t\t\\\n-\t\t\t\treload_in_progress || reload_completed)\t\\\n-\t\t  && cris_biap_index_p (XEXP (XEXP (X, 0), 0),\t\t\\\n-\t\t\t    reload_in_progress || reload_completed)))))\t\\\n- )\n-\n-/* PIC-constructs for symbols.  */\n-#define EXTRA_CONSTRAINT_S(X)\t\t\t\t\t\t\\\n- (flag_pic && GET_CODE (X) == CONST && cris_valid_pic_const (X, false))\n-\n-#define EXTRA_CONSTRAINT_U(X)\t\t\t\t\t\t\\\n- (flag_pic\t\t\t\t\t\t\t\t\\\n-  && CONSTANT_P (X)\t\t\t\t\t\t\t\\\n-  && cris_nonmemory_operand_or_callable_symbol (X, VOIDmode))\n-\n \n /* Node: Frame Layout */\n "}, {"sha": "53525940109ae8b844058e3d0b04c3e1d318c319", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cadf63202db6f5e2874981cf5c0f50637b1185/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=06cadf63202db6f5e2874981cf5c0f50637b1185", "patch": "@@ -242,6 +242,7 @@\n ;; Operand and operator predicates.\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \f\n ;; Test insns.\n \n@@ -650,8 +651,8 @@\n       && (!CONST_INT_P (operands[2])\n \t  || INTVAL (operands[2]) > 127\n \t  || INTVAL (operands[2]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')))\n+\t  || satisfies_constraint_N (operands[2])\n+\t  || satisfies_constraint_J (operands[2])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"move<m> [%3=%2%S1],%0\";\n@@ -677,8 +678,8 @@\n       && (!CONST_INT_P (operands[2])\n \t  || INTVAL (operands[2]) > 127\n \t  || INTVAL (operands[2]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')))\n+\t  || satisfies_constraint_N (operands[2])\n+\t  || satisfies_constraint_J (operands[2])))\n     return \"#\";\n   if (which_alternative < 3)\n     return \"move.%s0 [%3=%1%S2],%0\";\n@@ -796,8 +797,8 @@\n       && (!CONST_INT_P (operands[1])\n \t  || INTVAL (operands[1]) > 127\n \t  || INTVAL (operands[1]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'J')))\n+\t  || satisfies_constraint_N (operands[1])\n+\t  || satisfies_constraint_J (operands[1])))\n     return \"#\";\n   if (which_alternative == 1 || which_alternative == 5)\n     return \"#\";\n@@ -830,8 +831,8 @@\n       && (!CONST_INT_P (operands[1])\n \t  || INTVAL (operands[1]) > 127\n \t  || INTVAL (operands[1]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'J')))\n+\t  || satisfies_constraint_N (operands[1])\n+\t  || satisfies_constraint_J (operands[1])))\n     return \"#\";\n   if (which_alternative == 1\n       || which_alternative == 7\n@@ -903,8 +904,8 @@\n       && (!CONST_INT_P (operands[1])\n \t  || INTVAL (operands[1]) > 127\n \t  || INTVAL (operands[1]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'J')))\n+\t  || satisfies_constraint_N (operands[1])\n+\t  || satisfies_constraint_J (operands[1])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"clear<m> [%2=%1%S0]\";\n@@ -1246,8 +1247,8 @@\n       && (!CONST_INT_P (operands[2])\n \t  || INTVAL (operands[2]) > 127\n \t  || INTVAL (operands[2]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')))\n+\t  || satisfies_constraint_N (operands[2])\n+\t  || satisfies_constraint_J (operands[2])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"mov%e4.%m4 [%3=%2%S1],%0\";\n@@ -1270,8 +1271,8 @@\n       && (!CONST_INT_P (operands[2])\n \t  || INTVAL (operands[2]) > 127\n \t  || INTVAL (operands[2]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')))\n+\t  || satisfies_constraint_N (operands[2])\n+\t  || satisfies_constraint_J (operands[2])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"mov%e4<m> [%3=%2%S1],%0\";\n@@ -1607,8 +1608,8 @@\n       && (!CONST_INT_P (operands[3])\n \t  || INTVAL (operands[3]) > 127\n \t  || INTVAL (operands[3]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'J')))\n+\t  || satisfies_constraint_N (operands[3])\n+\t  || satisfies_constraint_J (operands[3])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"%x5.%s0 [%4=%3%S2],%0\";\n@@ -1665,8 +1666,8 @@\n       && (!CONST_INT_P (operands[3])\n \t  || INTVAL (operands[3]) > 127\n \t  || INTVAL (operands[3]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'J')))\n+\t  || satisfies_constraint_N (operands[3])\n+\t  || satisfies_constraint_J (operands[3])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"%x5<m> [%4=%3%S2],%0\";\n@@ -2097,8 +2098,8 @@\n       && (!CONST_INT_P (operands[3])\n \t  || INTVAL (operands[3]) > 127\n \t  || INTVAL (operands[3]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'J')))\n+\t  || satisfies_constraint_N (operands[3])\n+\t  || satisfies_constraint_J (operands[3])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"%x5%E6.%m6 [%4=%3%S2],%0\";\n@@ -2126,8 +2127,8 @@\n       && (!CONST_INT_P (operands[3])\n \t  || INTVAL (operands[3]) > 127\n \t  || INTVAL (operands[3]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'J')))\n+\t  || satisfies_constraint_N (operands[3])\n+\t  || satisfies_constraint_J (operands[3])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"%x5%E6<m> [%4=%3%S2],%0\";\n@@ -2206,8 +2207,8 @@\n       && (!CONST_INT_P (operands[3])\n \t  || INTVAL (operands[3]) > 127\n \t  || INTVAL (operands[3]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'J')))\n+\t  || satisfies_constraint_N (operands[3])\n+\t  || satisfies_constraint_J (operands[3])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \"add%e5.b [%4=%3%S2],%0\";\n@@ -2234,8 +2235,8 @@\n       && (!CONST_INT_P (operands[3])\n \t  || INTVAL (operands[3]) > 127\n \t  || INTVAL (operands[3]) < -128\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'N')\n-\t  || CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'J')))\n+\t  || satisfies_constraint_N (operands[3])\n+\t  || satisfies_constraint_J (operands[3])))\n     return \"#\";\n   if (which_alternative == 4)\n     return \\\"%x6%E5.%m5 [%4=%3%S2],%0\\\";\n@@ -4681,8 +4682,8 @@\n   \"GET_MODE_SIZE (GET_MODE (operands[4])) <= UNITS_PER_WORD\n    && REGNO (operands[3]) != REGNO (operands[0])\n    && (cris_base_p (operands[1], true) || cris_base_p (operands[2], true))\n-   && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')\n-   && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'N')\n+   && !satisfies_constraint_J (operands[2])\n+   && !satisfies_constraint_N (operands[2])\n    && (INTVAL (operands[2]) >= -128 && INTVAL (operands[2]) < 128)\n    && TARGET_SIDE_EFFECT_PREFIXES\"\n   [(parallel\n@@ -4717,8 +4718,8 @@\n   \"GET_MODE_SIZE (GET_MODE (operands[4])) <= UNITS_PER_WORD\n    && REGNO (operands[4]) != REGNO (operands[0])\n    && (cris_base_p (operands[1], true) || cris_base_p (operands[2], true))\n-   && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')\n-   && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'N')\n+   && !satisfies_constraint_J (operands[2])\n+   && !satisfies_constraint_N (operands[2])\n    && (INTVAL (operands[2]) >= -128 && INTVAL (operands[2]) < 128)\n    && TARGET_SIDE_EFFECT_PREFIXES\"\n   [(parallel\n@@ -4755,8 +4756,8 @@\n   ;; Change to GET_MODE_SIZE (GET_MODE (operands[3])) <= UNITS_PER_WORD?\n   \"GET_MODE (operands[3]) != DImode\n    && REGNO (operands[0]) != REGNO (operands[3])\n-   && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')\n-   && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'N')\n+   && !satisfies_constraint_J (operands[2])\n+   && !satisfies_constraint_N (operands[2])\n    && INTVAL (operands[2]) >= -128\n    && INTVAL (operands[2]) <= 127\n    && TARGET_SIDE_EFFECT_PREFIXES\"\n@@ -4947,7 +4948,7 @@\n    ;; don't do this for a mem-volatile access.\n   \"REGNO (operands[2]) == REGNO (operands[0])\n    && INTVAL (operands[3]) <= 65535 && INTVAL (operands[3]) >= 0\n-   && !CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'I')\n+   && !satisfies_constraint_I (operands[3])\n    && !side_effects_p (operands[1])\n    && (!REG_P (operands[1])\n        || REGNO (operands[1]) <= CRIS_LAST_GENERAL_REGISTER)\"\n@@ -4957,7 +4958,7 @@\n {\n   enum machine_mode zmode = INTVAL (operands[3]) <= 255 ? QImode : HImode;\n   enum machine_mode amode\n-    = CRIS_CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'O') ? SImode : zmode;\n+    = satisfies_constraint_O (operands[3]) ? SImode : zmode;\n   rtx op1\n     = (REG_S_P (operands[1])\n        ? gen_rtx_REG (zmode, REGNO (operands[1]))"}]}