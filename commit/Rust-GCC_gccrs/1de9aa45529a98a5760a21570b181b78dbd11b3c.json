{"sha": "1de9aa45529a98a5760a21570b181b78dbd11b3c", "node_id": "C_kwDOANBUbNoAKDFkZTlhYTQ1NTI5YTk4YTU3NjBhMjE1NzBiMTgxYjc4ZGJkMTFiM2M", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-05T05:36:25Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-05T20:16:04Z"}, "message": "Fold __builtin_signbit to nonzero instead of 1.\n\nAfter Joseph's comment wrt __builtin_signbit, I have been unable to\nconvince myself that arbitrarily folding __builtin_signbit () of a\nnegative number to 1 is correct.\n\nFor example, on the true side of x < -5.0 we know the sign bit is set,\nbut on the false side, we know nothing because X may be a NAN.  I\ndon't want to put ourselves in a position where the same call to\n__builtin_signbit can return two different things (1 or negative\nwhatever), so I'm going to return nonzero which is correct across the\nboard until someone can convince me otherwise.\n\nSetting the range to nonzero still allows us to fold conditionals\nchecking __fold_builtin, while not actually propagating a 1.  Zero\npropagation still works.\n\nThat being said, I still think we should be folding\n__builtin_signbit's of negative numbers to whatever the hardware\nreturns, instead of 1/0 like what the front ends do.\n\ngcc/ChangeLog:\n\n\t* gimple-range-fold.cc\n\t(fold_using_range::range_of_builtin_int_call): Fold a set signbit\n\tin __builtin_signbit to nonzero.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/vrp-float-signbit-2.c: New test.", "tree": {"sha": "0380a9734669fd24b4a268b0b4410948e8a8c65f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0380a9734669fd24b4a268b0b4410948e8a8c65f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1de9aa45529a98a5760a21570b181b78dbd11b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de9aa45529a98a5760a21570b181b78dbd11b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1de9aa45529a98a5760a21570b181b78dbd11b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de9aa45529a98a5760a21570b181b78dbd11b3c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810d9815249451f477d4cbc67b8e4a0819c37faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810d9815249451f477d4cbc67b8e4a0819c37faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810d9815249451f477d4cbc67b8e4a0819c37faa"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "3543f0980b818cf1df3b648aa3916b95c873bd6f", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de9aa45529a98a5760a21570b181b78dbd11b3c/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de9aa45529a98a5760a21570b181b78dbd11b3c/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=1de9aa45529a98a5760a21570b181b78dbd11b3c", "patch": "@@ -1032,10 +1032,7 @@ fold_using_range::range_of_builtin_int_call (irange &r, gcall *call,\n \t    if (tmp.get_signbit ().varying_p ())\n \t      return false;\n \t    if (tmp.get_signbit ().yes_p ())\n-\t      {\n-\t\ttree one = build_one_cst (type);\n-\t\tr.set (one, one);\n-\t      }\n+\t      r.set_nonzero (type);\n \t    else\n \t      r.set_zero (type);\n \t    return true;"}, {"sha": "954c7ebd4f844be58bca8ad797cc5746167d9bf8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp-float-signbit-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de9aa45529a98a5760a21570b181b78dbd11b3c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de9aa45529a98a5760a21570b181b78dbd11b3c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-2.c?ref=1de9aa45529a98a5760a21570b181b78dbd11b3c", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdump-tree-evrp\" }\n+\n+// Test that the only thing we know about the signbit about negative number is\n+// that it's not 0.\n+\n+void link_error ();\n+\n+int num;\n+\n+void func(float x)\n+{\n+  if (x < -5.0)\n+    {\n+      num = __builtin_signbit (x);\n+\n+      // We may not know the exact signbit, but we know it's not 0.\n+      if (!__builtin_signbit (x))\n+\tlink_error ();\n+    }\n+}\n+\n+// { dg-final { scan-tree-dump-not \"num = \\[-0-9\\];\" \"evrp\" } }\n+// { dg-final { scan-tree-dump-not \"link_error\" \"evrp\" } }"}]}