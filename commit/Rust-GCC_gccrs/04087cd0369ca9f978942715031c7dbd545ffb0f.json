{"sha": "04087cd0369ca9f978942715031c7dbd545ffb0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQwODdjZDAzNjljYTlmOTc4OTQyNzE1MDMxYzdkYmQ1NDVmZmIwZg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-06T16:40:18Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-06T16:40:18Z"}, "message": "re PR c/20000 (missing warning for noreturn function returning non-void)\n\n2010-06-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/20000\n        * c-decl.c (grokdeclarator): Delete warning.\ntestsuite/\t\n        * c-c++-common/pr20000.c: New.\n\nFrom-SVN: r160346", "tree": {"sha": "c0f8796b62375cc227af40436a9f3792a895f499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0f8796b62375cc227af40436a9f3792a895f499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04087cd0369ca9f978942715031c7dbd545ffb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04087cd0369ca9f978942715031c7dbd545ffb0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04087cd0369ca9f978942715031c7dbd545ffb0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04087cd0369ca9f978942715031c7dbd545ffb0f/comments", "author": null, "committer": null, "parents": [{"sha": "df2a52a6b22f8edd13057e1093c8c55624029397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a52a6b22f8edd13057e1093c8c55624029397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2a52a6b22f8edd13057e1093c8c55624029397"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "b3ef9444b8521a72aebd0d26ce0d3745ba53f866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04087cd0369ca9f978942715031c7dbd545ffb0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04087cd0369ca9f978942715031c7dbd545ffb0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04087cd0369ca9f978942715031c7dbd545ffb0f", "patch": "@@ -1,3 +1,8 @@\n+2010-06-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/20000\n+        * c-decl.c (grokdeclarator): Delete warning.\n+\n 2010-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* stor-layout.c (self_referential_size): Set UNKNOWN_LOCATION on the"}, {"sha": "96ef29998445cc4c6760efe0861adf5ec5f7c1a2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04087cd0369ca9f978942715031c7dbd545ffb0f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04087cd0369ca9f978942715031c7dbd545ffb0f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=04087cd0369ca9f978942715031c7dbd545ffb0f", "patch": "@@ -5901,12 +5901,6 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  pedwarn (loc, OPT_pedantic,\n \t\t   \"ISO C forbids qualified function types\");\n \n-\t/* GNU C interprets a volatile-qualified function type to indicate\n-\t   that the function does not return.  */\n-\tif ((type_quals & TYPE_QUAL_VOLATILE)\n-\t    && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl))))\n-\t  warning_at (loc, 0, \"%<noreturn%> function returns non-void value\");\n-\n \t/* Every function declaration is an external reference\n \t   (DECL_EXTERNAL) except for those which are not at file\n \t   scope and are explicitly declared \"auto\".  This is"}, {"sha": "bda499ed9ce335e83a7b7acea28d566282f992cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04087cd0369ca9f978942715031c7dbd545ffb0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04087cd0369ca9f978942715031c7dbd545ffb0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04087cd0369ca9f978942715031c7dbd545ffb0f", "patch": "@@ -1,3 +1,8 @@\n+2010-06-06  Manuel L\ufffdpez-Ib\ufffd\ufffdez  <manu@gcc.gnu.org>\n+\n+\tPR c/20000\n+        * c-c++-common/pr20000.c: New.\n+\n 2010-06-05  Fabien Ch\ufffdne  <fabien@gcc.gnu.org>\n \n \tPR c++/44086"}, {"sha": "1fcd17877e8bb76b67d7732af98a845dc19e6a2b", "filename": "gcc/testsuite/c-c++-common/pr20000.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04087cd0369ca9f978942715031c7dbd545ffb0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04087cd0369ca9f978942715031c7dbd545ffb0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr20000.c?ref=04087cd0369ca9f978942715031c7dbd545ffb0f", "patch": "@@ -0,0 +1,32 @@\n+/* PR c/20000 We only want to warn if the function returns\n+   explicitly. We do not care about the return type.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int g(void) __attribute__((noreturn)); \n+int g2(void) __attribute__((noreturn)); /* { dg-bogus \".noreturn. function returns non-void value\" } */\n+void h(void) __attribute__((noreturn));\n+\n+\n+int g(void) {\n+  return 1; /* { dg-warning \"function declared 'noreturn' has a 'return' statement\" } */\n+} /* { dg-warning \"'noreturn' function does return\" } */\n+\n+int g2(void) {\n+  h();\n+}\n+\n+typedef int ft(void);\n+volatile ft vg;\n+volatile ft vg2;\n+\n+int vg(void); \n+int vg2(void); /* { dg-bogus \".noreturn. function returns non-void value\" } */\n+\n+int vg(void) {\n+  return 1; /* { dg-warning \"function declared 'noreturn' has a 'return' statement\" \"\" { target c } 27 } */\n+} /* { dg-warning \"'noreturn' function does return\" \"\" { target c } 28  } */\n+\n+int vg2(void) {\n+  h();\n+}"}]}