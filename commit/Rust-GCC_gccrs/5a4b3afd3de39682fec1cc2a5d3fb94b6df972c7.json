{"sha": "5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0YjNhZmQzZGUzOTY4MmZlYzFjYzJhNWQzZmI5NGI2ZGY5NzJjNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-01-04T22:19:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-01-04T22:19:40Z"}, "message": "invoke.texi: Revamp documentation of MIPS options.\n\n\t* doc/invoke.texi: Revamp documentation of MIPS options.  Remove\n\t-mabi=meabi, -mabi-fake-default, -mmips-as, -mgas, -mmips-tfile,\n\t-m4650, -mfix7000 and -(m)no-crt0.  Put endianness options first,\n\tthen architecture options, then ABI options.  General rewording.\n\nFrom-SVN: r75396", "tree": {"sha": "d922f93167cdc74ec0e9dc82052b6ee960e6d512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d922f93167cdc74ec0e9dc82052b6ee960e6d512"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7/comments", "author": null, "committer": null, "parents": [{"sha": "928a5ba9911db75442f9dfad5ca477db38f0f7fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928a5ba9911db75442f9dfad5ca477db38f0f7fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928a5ba9911db75442f9dfad5ca477db38f0f7fe"}], "stats": {"total": 418, "additions": 170, "deletions": 248}, "files": [{"sha": "1ccaf2a6aa93c772036b97e003cc09f9e024ae8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7", "patch": "@@ -1,3 +1,10 @@\n+2004-01-04  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* doc/invoke.texi: Revamp documentation of MIPS options.  Remove\n+\t-mabi=meabi, -mabi-fake-default, -mmips-as, -mgas, -mmips-tfile,\n+\t-m4650, -mfix7000 and -(m)no-crt0.  Put endianness options first,\n+\tthen architecture options, then ABI options.  General rewording.\n+\n 2004-01-04  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/3414"}, {"sha": "b875145f5648a7a869ac12836e98556a289eaa93", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 163, "deletions": 248, "changes": 411, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5a4b3afd3de39682fec1cc2a5d3fb94b6df972c7", "patch": "@@ -484,23 +484,20 @@ in the following sections.\n -mminimum-fp-blocks  -mnohc-struct-return}\n \n @emph{MIPS Options}\n-@gccoptlist{-mabicalls  -march=@var{cpu-type}  -mtune=@var{cpu=type} @gol\n--mcpu=@var{cpu-type}  -membedded-data  -muninit-const-in-rodata @gol\n--membedded-pic  -mfp32  -mfp64  -mfused-madd  -mno-fused-madd @gol\n--mgas  -mgp32  -mgp64  -mhard-float  -mint64  -mips1 @gol\n--mips2  -mips3  -mips4  -mips32  -mips32r2  -mips64 @gol\n--mlong64  -mlong32  -mlong-calls  -mmemcpy @gol\n--mmips-as  -mmips-tfile  -mno-abicalls  -mxgot @gol\n--mno-embedded-data  -mno-uninit-const-in-rodata @gol\n--mno-embedded-pic  -mno-long-calls @gol\n--mno-memcpy  -mno-mips-tfile  -mno-rnames @gol\n--mrnames  -msoft-float @gol\n--m4650  -msingle-float  -mmad @gol\n--EL  -EB  -G @var{num}  -nocpp @gol\n--mabi=32  -mabi=n32  -mabi=64  -mabi=eabi  -mabi-fake-default @gol\n--mfix7000  -mfix-sb1  -mno-fix-sb1 @gol\n--mno-crt0 -mflush-func=@var{func} -mno-flush-func @gol\n--mbranch-likely -mno-branch-likely}\n+@gccoptlist{-EL  -EB  -march=@var{arch}  -mtune=@var{arch} @gol\n+-mips1  -mips2  -mips3  -mips4  -mips32  -mips32r2  -mips64 @gol\n+-mips16  -mno-mips16  -mabi=@var{abi}  -mabicalls  -mno-abicalls @gol\n+-mxgot  -mno-xgot  -membedded-pic  -mno-embedded-pic @gol\n+-mgp32  -mgp64  -mfp32  -mfp64  -mhard-float  -msoft-float @gol\n+-msingle-float  -mdouble-float  -mint64  -mlong64  -mlong32 @gol\n+-G@var{num}  -membedded-data  -mno-embedded-data @gol\n+-muninit-const-in-rodata  -mno-uninit-const-in-rodata @gol\n+-msplit-addresses  -mno-split-addresses  -mrnames  -mno-rnames @gol\n+-mcheck-zero-division  -mno-check-zero-division @gol\n+-mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls @gol\n+-mmad  -mno-mad  -mfused-madd  -mno-fused-madd  -nocpp @gol\n+-mfix-sb1  -mno-fix-sb1  -mflush-func=@var{func} @gol\n+-mno-flush-func  -mbranch-likely  -mno-branch-likely}\n \n @emph{i386 and x86-64 Options}\n @gccoptlist{-mtune=@var{cpu-type}  -march=@var{cpu-type} @gol\n@@ -8026,10 +8023,17 @@ option @option{-mhc-struct-return}.\n @subsection MIPS Options\n @cindex MIPS options\n \n-These @samp{-m} options are defined for the MIPS family of computers:\n-\n @table @gcctabopt\n \n+@item -EB\n+@opindex EB\n+Generate big-endian code.\n+\n+@item -EL\n+@opindex EL\n+Generate little-endian code.  This is the default for @samp{mips*el-*-*}\n+configurations.\n+\n @item -march=@var{arch}\n @opindex march\n Generate code that will run on @var{arch}, which can be the name of a\n@@ -8114,190 +8118,40 @@ Equivalent to @samp{-march=mips32r2}.\n @opindex mips64\n Equivalent to @samp{-march=mips64}.\n \n-@item -mfused-madd\n-@itemx -mno-fused-madd\n-@opindex mfused-madd\n-@opindex mno-fused-madd\n-Generate code that uses (does not use) the floating point multiply and\n-accumulate instructions, when they are available.  These instructions\n-are generated by default if they are available, but this may be\n-undesirable if the extra precision causes problems or on certain chips\n-in the mode where denormals are rounded to zero where denormals\n-generated by multiply and accumulate instructions cause exceptions\n-anyway.\n-\n-@item -mfp32\n-@opindex mfp32\n-Assume that floating point registers are 32 bits wide.\n-\n-@item -mfp64\n-@opindex mfp64\n-Assume that floating point registers are 64 bits wide.\n-\n-@item -mgp32\n-@opindex mgp32\n-Assume that general purpose registers are 32 bits wide.\n-\n-@item -mgp64\n-@opindex mgp64\n-Assume that general purpose registers are 64 bits wide.\n-\n-@item -mint64\n-@opindex mint64\n-Force int and long types to be 64 bits wide.  See @option{-mlong32} for an\n-explanation of the default, and the width of pointers.\n-\n-@item -mlong64\n-@opindex mlong64\n-Force long types to be 64 bits wide.  See @option{-mlong32} for an\n-explanation of the default, and the width of pointers.\n-\n-@item -mlong32\n-@opindex mlong32\n-Force long, int, and pointer types to be 32 bits wide.\n-\n-The default size of ints, longs and pointers depends on the ABI@.  All\n-the supported ABIs use 32-bit ints.  The n64 ABI uses 64-bit longs, as\n-does the 64-bit Cygnus EABI; the others use 32-bit longs.  Pointers\n-are the same size as longs, or the same size as integer registers,\n-whichever is smaller.\n+@item -mips16\n+@itemx -mno-mips16\n+@opindex mips16\n+@opindex mno-mips16\n+Use (do not use) the MIPS16 ISA.\n \n @item -mabi=32\n @itemx -mabi=o64\n @itemx -mabi=n32\n @itemx -mabi=64\n @itemx -mabi=eabi\n-@itemx -mabi=meabi\n @opindex mabi=32\n @opindex mabi=o64\n @opindex mabi=n32\n @opindex mabi=64\n @opindex mabi=eabi\n-@opindex mabi=meabi\n Generate code for the given ABI@.\n \n-Note that there are two embedded ABIs: @option{-mabi=eabi}\n-selects the one defined by Cygnus while @option{-meabi=meabi}\n-selects the one defined by MIPS@.  Both these ABIs have\n-32-bit and 64-bit variants.  Normally, GCC will generate\n-64-bit code when you select a 64-bit architecture, but you\n+Note that the EABI has a 32-bit and a 64-bit variant.  GCC normally\n+generates 64-bit code when you select a 64-bit architecture, but you\n can use @option{-mgp32} to get 32-bit code instead.\n \n-@item -mabi-fake-default\n-@opindex mabi-fake-default\n-You don't want to know what this option does.  No, really.  I mean\n-it.  Move on to the next option.\n-\n-What?  You're still here?  Oh, well@enddots{}  Ok, here's the deal.  GCC\n-wants the default set of options to get the root of the multilib tree,\n-and the shared library SONAMEs without any multilib-indicating\n-suffixes.  This is not convenience for @samp{mips64-linux-gnu}, since\n-we want to default to the N32 ABI, while still being binary-compatible\n-with @samp{mips-linux-gnu} if you stick to the O32 ABI@.  Being\n-binary-compatible means shared libraries should have the same SONAMEs,\n-and libraries should live in the same location.  Having O32 libraries\n-in a sub-directory named say @file{o32} is not acceptable.\n-\n-So we trick GCC into believing that O32 is the default ABI, except\n-that we override the default with some internal command-line\n-processing magic.  Problem is, if we stopped at that, and you then\n-created a multilib-aware package that used the output of @command{gcc\n--print-multi-lib} to decide which multilibs to build, and how, and\n-you'd find yourself in an awkward situation when you found out that\n-some of the options listed ended up mapping to the same multilib, and\n-none of your libraries was actually built for the multilib that\n-@option{-print-multi-lib} claims to be the default.  So we added this\n-option that disables the default switcher, falling back to GCC's\n-original notion of the default library.  Confused yet?\n-\n-For short: don't ever use this option, unless you find it in the list\n-of additional options to be used when building for multilibs, in the\n-output of @option{gcc -print-multi-lib}.\n-\n-@item -mmips-as\n-@opindex mmips-as\n-Generate code for the MIPS assembler, and invoke @file{mips-tfile} to\n-add normal debug information.  This is the default for all\n-platforms except for the OSF/1 reference platform, using the OSF/rose\n-object format.  If the either of the @option{-gstabs} or @option{-gstabs+}\n-switches are used, the @file{mips-tfile} program will encapsulate the\n-stabs within MIPS ECOFF@.\n-\n-@item -mgas\n-@opindex mgas\n-Generate code for the GNU assembler.  This is the default on the OSF/1\n-reference platform, using the OSF/rose object format.  Also, this is\n-the default if the configure option @option{--with-gnu-as} is used.\n-\n-@item -msplit-addresses\n-@itemx -mno-split-addresses\n-@opindex msplit-addresses\n-@opindex mno-split-addresses\n-Generate code to load the high and low parts of address constants separately.\n-This allows GCC to optimize away redundant loads of the high order\n-bits of addresses.  This optimization requires GNU as and GNU ld.\n-This optimization is enabled by default for some embedded targets where\n-GNU as and GNU ld are standard.\n-\n-@item -mrnames\n-@itemx -mno-rnames\n-@opindex mrnames\n-@opindex mno-rnames\n-The @option{-mrnames} switch says to output code using the MIPS software\n-names for the registers, instead of the hardware names (ie, @var{a0}\n-instead of @var{$4}).  The only known assembler that supports this option\n-is the Algorithmics assembler.\n-\n-@item -mmemcpy\n-@itemx -mno-memcpy\n-@opindex mmemcpy\n-@opindex mno-memcpy\n-The @option{-mmemcpy} switch makes all block moves call the appropriate\n-string function (@samp{memcpy} or @samp{bcopy}) instead of possibly\n-generating inline code.\n-\n-@item -mmips-tfile\n-@itemx -mno-mips-tfile\n-@opindex mmips-tfile\n-@opindex mno-mips-tfile\n-The @option{-mno-mips-tfile} switch causes the compiler not\n-postprocess the object file with the @file{mips-tfile} program,\n-after the MIPS assembler has generated it to add debug support.  If\n-@file{mips-tfile} is not run, then no local variables will be\n-available to the debugger.  In addition, @file{stage2} and\n-@file{stage3} objects will have the temporary file names passed to the\n-assembler embedded in the object file, which means the objects will\n-not compare the same.  The @option{-mno-mips-tfile} switch should only\n-be used when there are bugs in the @file{mips-tfile} program that\n-prevents compilation.\n-\n-@item -msoft-float\n-@opindex msoft-float\n-Generate output containing library calls for floating point.\n-@strong{Warning:} the requisite libraries are not part of GCC@.\n-Normally the facilities of the machine's usual C compiler are used, but\n-this can't be done directly in cross-compilation.  You must make your\n-own arrangements to provide suitable library functions for\n-cross-compilation.\n-\n-@item -mhard-float\n-@opindex mhard-float\n-Generate output containing floating point instructions.  This is the\n-default if you use the unmodified sources.\n-\n @item -mabicalls\n @itemx -mno-abicalls\n @opindex mabicalls\n @opindex mno-abicalls\n-Emit (or do not emit) the pseudo operations @samp{.abicalls},\n-@samp{.cpload}, and @samp{.cprestore} that some System V.4 ports use for\n-position independent code.\n+Generate (do not generate) SVR4-style position-independent code.\n+@option{-mabicalls} is the default for SVR4-based systems.\n \n @item -mxgot\n @itemx -mno-xgot\n @opindex mxgot\n @opindex mno-xgot\n-Lift (or do not lift) the usual restrictions on the size of the global\n+Lift (do not lift) the usual restrictions on the size of the global\n offset table.\n \n GCC normally uses a single instruction to load values from the GOT.\n@@ -8322,24 +8176,83 @@ file accesses more than 64k's worth of GOT entries.  Very few do.\n These options have no effect unless GCC is generating position\n independent code.\n \n-@item -mlong-calls\n-@itemx -mno-long-calls\n-@opindex mlong-calls\n-@opindex mno-long-calls\n-Do all calls with the @samp{JALR} instruction, which requires\n-loading up a function's address into a register before the call.\n-You need to use this switch, if you call outside of the current\n-512 megabyte segment to functions that are not through pointers.\n-\n @item -membedded-pic\n @itemx -mno-embedded-pic\n @opindex membedded-pic\n @opindex mno-embedded-pic\n-Generate PIC code suitable for some embedded systems.  All calls are\n-made using PC relative address, and all data is addressed using the $gp\n-register.  No more than 65536 bytes of global data may be used.  This\n-requires GNU as and GNU ld which do most of the work.  This currently\n-only works on targets which use ECOFF; it does not work with ELF@.\n+Generate (do not generate) position-independent code suitable for some\n+embedded systems.  All calls are made using PC relative addresses, and\n+all data is addressed using the $gp register.  No more than 65536\n+bytes of global data may be used.  This requires GNU as and GNU ld,\n+which do most of the work.\n+\n+@item -mgp32\n+@opindex mgp32\n+Assume that general-purpose registers are 32 bits wide.\n+\n+@item -mgp64\n+@opindex mgp64\n+Assume that general-purpose registers are 64 bits wide.\n+\n+@item -mfp32\n+@opindex mfp32\n+Assume that floating-point registers are 32 bits wide.\n+\n+@item -mfp64\n+@opindex mfp64\n+Assume that floating-point registers are 64 bits wide.\n+\n+@item -mhard-float\n+@opindex mhard-float\n+Use floating-point coprocessor instructions.\n+\n+@item -msoft-float\n+@opindex msoft-float\n+Do not use floating-point coprocessor instructions.  Implement\n+floating-point calculations using library calls instead.\n+\n+@item -msingle-float\n+@opindex msingle-float\n+Assume that the floating-point coprocessor only supports single-precision\n+operations.\n+\n+@itemx -mdouble-float\n+@opindex mdouble-float\n+Assume that the floating-point coprocessor supports double-precision\n+operations.  This is the default.\n+\n+@item -mint64\n+@opindex mint64\n+Force @code{int} and @code{long} types to be 64 bits wide.  See\n+@option{-mlong32} for an explanation of the default and the way\n+that the pointer size is determined.\n+\n+@item -mlong64\n+@opindex mlong64\n+Force @code{long} types to be 64 bits wide.  See @option{-mlong32} for\n+an explanation of the default and the way that the pointer size is\n+determined.\n+\n+@item -mlong32\n+@opindex mlong32\n+Force @code{long}, @code{int}, and pointer types to be 32 bits wide.\n+\n+The default size of @code{int}s, @code{long}s and pointers depends on\n+the ABI@.  All the supported ABIs use 32-bit @code{int}s.  The n64 ABI\n+uses 64-bit @code{long}s, as does the 64-bit EABI; the others use\n+32-bit @code{long}s.  Pointers are the same size as @code{long}s,\n+or the same size as integer registers, whichever is smaller.\n+\n+@item -G @var{num}\n+@opindex G\n+@cindex smaller data references (MIPS)\n+@cindex gp-relative references (MIPS)\n+Put global and static items less than or equal to @var{num} bytes into\n+the small data or bss section instead of the normal data or bss section.\n+This allows the data to be accessed using a single instruction.\n+\n+All modules should be compiled with the same @option{-G @var{num}}\n+value.\n \n @item -membedded-data\n @itemx -mno-embedded-data\n@@ -8354,82 +8267,84 @@ when executing, and thus may be preferred for some embedded systems.\n @itemx -mno-uninit-const-in-rodata\n @opindex muninit-const-in-rodata\n @opindex mno-uninit-const-in-rodata\n-When used together with @option{-membedded-data}, it will always store uninitialized\n-const variables in the read-only data section.\n+Put uninitialized @code{const} variables in the read-only data section.\n+This option is only meaningful in conjunction with @option{-membedded-data}.\n \n-@item -msingle-float\n-@itemx -mdouble-float\n-@opindex msingle-float\n-@opindex mdouble-float\n-The @option{-msingle-float} switch tells gcc to assume that the floating\n-point coprocessor only supports single precision operations, as on the\n-@samp{r4650} chip.  The @option{-mdouble-float} switch permits gcc to use\n-double precision operations.  This is the default.\n+@item -msplit-addresses\n+@itemx -mno-split-addresses\n+@opindex msplit-addresses\n+@opindex mno-split-addresses\n+Enable (disable) use of the @code{%hi()} and @code{%lo()} assembler\n+relocation operators.\n+\n+@item -mrnames\n+@itemx -mno-rnames\n+@opindex mrnames\n+@opindex mno-rnames\n+Generate (do not generate) code that refers to registers using their\n+software names.  The default is @option{-mno-rnames}, which tells GCC\n+to use hardware names like @samp{$4} instead of software names like\n+@samp{a0}.  The only assembler known to support @option{-rnames} is\n+the Algorithmics assembler.\n+\n+@item -mcheck-zero-division\n+@itemx -mno-check-zero-division\n+@opindex mcheck-zero-division\n+@opindex mno-check-zero-division\n+Trap (do not trap) on integer division by zero.  The default is\n+@option{-mcheck-zero-division}.\n+\n+@item -mmemcpy\n+@itemx -mno-memcpy\n+@opindex mmemcpy\n+@opindex mno-memcpy\n+Force (do not force) the use of @code{memcpy()} for non-trivial block\n+moves.  The default is @option{-mno-memcpy}, which allows GCC to inline\n+most constant-sized copies.\n+\n+@item -mlong-calls\n+@itemx -mno-long-calls\n+@opindex mlong-calls\n+@opindex mno-long-calls\n+Disable (do not disable) use of the @code{jal} instruction.  Calling\n+functions using @code{jal} is more efficient but requires the caller\n+and callee to be in the same 256 megabyte segment.\n+\n+This option has no effect on abicalls code.  The default is\n+@option{-mno-long-calls}.\n \n @item -mmad\n @itemx -mno-mad\n @opindex mmad\n @opindex mno-mad\n-Permit use of the @samp{mad}, @samp{madu} and @samp{mul} instructions,\n-as on the @samp{r4650} chip.\n+Enable (disable) use of the @code{mad}, @code{madu} and @code{mul}\n+instructions, as provided by the R4650 ISA.\n \n-@item -m4650\n-@opindex m4650\n-Turns on @option{-msingle-float}, @option{-mmad}, and, at least for now,\n-@option{-mcpu=r4650}.\n-\n-@item -mips16\n-@itemx -mno-mips16\n-@opindex mips16\n-@opindex mno-mips16\n-Enable 16-bit instructions.\n-\n-@item -EL\n-@opindex EL\n-Compile code for the processor in little endian mode.\n-The requisite libraries are assumed to exist.\n-\n-@item -EB\n-@opindex EB\n-Compile code for the processor in big endian mode.\n-The requisite libraries are assumed to exist.\n+@item -mfused-madd\n+@itemx -mno-fused-madd\n+@opindex mfused-madd\n+@opindex mno-fused-madd\n+Enable (disable) use of the floating point multiply-accumulate\n+instructions, when they are available.  The default is\n+@option{-mfused-madd}.\n \n-@item -G @var{num}\n-@opindex G\n-@cindex smaller data references (MIPS)\n-@cindex gp-relative references (MIPS)\n-Put global and static items less than or equal to @var{num} bytes into\n-the small data or bss sections instead of the normal data or bss\n-section.  This allows the assembler to emit one word memory reference\n-instructions based on the global pointer (@var{gp} or @var{$28}),\n-instead of the normal two words used.  By default, @var{num} is 8 when\n-the MIPS assembler is used, and 0 when the GNU assembler is used.  The\n-@option{-G @var{num}} switch is also passed to the assembler and linker.\n-All modules should be compiled with the same @option{-G @var{num}}\n-value.\n+When multiply-accumulate instructions are used, the intermediate\n+product is calculated to infinite precision and is not subject to\n+the FCSR Flush to Zero bit.  This may be undesirable in some\n+circumstances.\n \n @item -nocpp\n @opindex nocpp\n Tell the MIPS assembler to not run its preprocessor over user\n assembler files (with a @samp{.s} suffix) when assembling them.\n \n-@item -mfix7000\n-@opindex mfix7000\n-Pass an option to gas which will cause nops to be inserted if\n-the read of the destination register of an mfhi or mflo instruction\n-occurs in the following two instructions.\n-\n @item -mfix-sb1\n @itemx -mno-fix-sb1\n @opindex mfix-sb1\n Work around certain SB-1 CPU core errata.\n (This flag currently works around the SB-1 revision 2\n ``F1'' and ``F2'' floating point errata.)\n \n-@item -no-crt0\n-@opindex no-crt0\n-Do not include the default crt0.\n-\n @item -mflush-func=@var{func}\n @itemx -mno-flush-func\n @opindex mflush-func"}]}