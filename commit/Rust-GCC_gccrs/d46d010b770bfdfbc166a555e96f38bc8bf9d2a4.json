{"sha": "d46d010b770bfdfbc166a555e96f38bc8bf9d2a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ2ZDAxMGI3NzBiZmRmYmMxNjZhNTU1ZTk2ZjM4YmM4YmY5ZDJhNA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-07-18T21:31:04Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-07-18T21:31:04Z"}, "message": "extend.texi (PowerPC AltiVec Built-in Functions): Rename this subsection to \"PowerPC AltiVec/VSX Built-in Functions\".\n\ngcc/ChangeLog:\n\n2018-07-18  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Rename\n\tthis subsection to \"PowerPC AltiVec/VSX Built-in Functions\".\n\t(PowerPC AltiVec/VSX Built-in Functions): New name for subsection\n\tpreviously known as \"PowerPC AltiVec Built-in Functions\".  Move\n\tsome material to new subsubsections \"PowerPC AltiVec Built-in\n\tFunctions on ISA 2.06\" and \"PowerPC AltiVec Built-in Functions on\n\tISA 2.07\".\n\t(PowerPC Altivec Built-in Functions on ISA 2.05): New subsubsection.\n\t(PowerPC Altivec Built-in Functions on ISA 2.06): Likewise.\n\t(PowerPC Altivec Built-in Functions on ISA 2.07): Likewise.\n\t(PowerPC Altivec Built-in Functions on ISA 3.0): Likewise.\n\nFrom-SVN: r262863", "tree": {"sha": "36fd5efb098502cfa27754551003fcbd8754820c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36fd5efb098502cfa27754551003fcbd8754820c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d46d010b770bfdfbc166a555e96f38bc8bf9d2a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46d010b770bfdfbc166a555e96f38bc8bf9d2a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46d010b770bfdfbc166a555e96f38bc8bf9d2a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46d010b770bfdfbc166a555e96f38bc8bf9d2a4/comments", "author": null, "committer": null, "parents": [{"sha": "a171a8bb39d5674f0f1fafcec642e625d601dbe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a171a8bb39d5674f0f1fafcec642e625d601dbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a171a8bb39d5674f0f1fafcec642e625d601dbe2"}], "stats": {"total": 142, "additions": 88, "deletions": 54}, "files": [{"sha": "920b105d2bf1fa2d0f8f21e1d53fc553251b62ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d46d010b770bfdfbc166a555e96f38bc8bf9d2a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d46d010b770bfdfbc166a555e96f38bc8bf9d2a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d46d010b770bfdfbc166a555e96f38bc8bf9d2a4", "patch": "@@ -1,3 +1,17 @@\n+2018-07-18  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Rename\n+\tthis subsection to \"PowerPC AltiVec/VSX Built-in Functions\".\n+\t(PowerPC AltiVec/VSX Built-in Functions): New name for subsection\n+\tpreviously known as \"PowerPC AltiVec Built-in Functions\".  Move\n+\tsome material to new subsubsections \"PowerPC AltiVec Built-in\n+\tFunctions on ISA 2.06\" and \"PowerPC AltiVec Built-in Functions on\n+\tISA 2.07\".\n+\t(PowerPC Altivec Built-in Functions on ISA 2.05): New subsubsection.\n+\t(PowerPC Altivec Built-in Functions on ISA 2.06): Likewise.\n+\t(PowerPC Altivec Built-in Functions on ISA 2.07): Likewise.\n+\t(PowerPC Altivec Built-in Functions on ISA 3.0): Likewise.\n+\n 2018-07-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/86557"}, {"sha": "abac85c5cb2abcc3c82538e71d37b34287402f4b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 74, "deletions": 54, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d46d010b770bfdfbc166a555e96f38bc8bf9d2a4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d46d010b770bfdfbc166a555e96f38bc8bf9d2a4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d46d010b770bfdfbc166a555e96f38bc8bf9d2a4", "patch": "@@ -15941,10 +15941,8 @@ The @code{__builtin_dfp_dtstsfi_ov_dd} and\n require that the type of the @code{value} argument be\n @code{__Decimal64} and @code{__Decimal128} respectively.\n \n-\n-\n @node PowerPC AltiVec/VSX Built-in Functions\n-@subsection PowerPC AltiVec Built-in Functions\n+@subsection PowerPC AltiVec/VSX Built-in Functions\n \n GCC provides an interface for the PowerPC family of processors to access\n the AltiVec operations described in Motorola's AltiVec Programming\n@@ -15969,19 +15967,6 @@ vector bool int\n vector float\n @end smallexample\n \n-If @option{-mvsx} is used the following additional vector types are\n-implemented.\n-\n-@smallexample\n-vector unsigned long\n-vector signed long\n-vector double\n-@end smallexample\n-\n-The long types are only implemented for 64-bit code generation, and\n-the long type is only used in the floating point/integer conversion\n-instructions.\n-\n GCC's implementation of the high-level language interface available from\n C and C++ code differs from Motorola's documentation in several ways.\n \n@@ -16039,6 +16024,16 @@ the interfaces described therein.  However, historically GCC has provided\n additional interfaces for access to vector instructions.  These are\n briefly described below.\n \n+@menu\n+* PowerPC AltiVec Built-in Functions on ISA 2.05::\n+* PowerPC AltiVec Built-in Functions Available on ISA 2.06::\n+* PowerPC AltiVec Built-in Functions Available on ISA 2.07::\n+* PowerPC AltiVec Built-in Functions Available on ISA 3.0::\n+@end menu\n+\n+@node PowerPC AltiVec Built-in Functions on ISA 2.05\n+@subsubsection PowerPC AltiVec Built-in Functions on ISA 2.05\n+\n The following interfaces are supported for the generic and specific\n AltiVec operations and the AltiVec predicates.  In cases where there\n is a direct mapping between generic and specific operations, only the\n@@ -17581,132 +17576,152 @@ vector unsigned char vec_xor (vector unsigned char, vector bool char);\n vector unsigned char vec_xor (vector unsigned char, vector unsigned char);\n @end smallexample\n \n-The following built-in functions which are currently documented in\n-this section are not alphabetized with other built-in functions of\n-this section because they belong in different sections.\n+@node PowerPC AltiVec Built-in Functions Available on ISA 2.06\n+@subsubsection PowerPC AltiVec Built-in Functions Available on ISA 2.06\n+\n+The AltiVec built-in functions described in this section are\n+available on the PowerPC family of processors starting with ISA 2.06\n+or later.  These are normally enabled by adding @option{-mvsx} to the\n+command line.\n+\n+When @option{-mvsx} is used, the following additional vector types are\n+implemented.\n+\n+@smallexample\n+vector unsigned __int128\n+vector signed __int128\n+vector unsigned long long int\n+vector signed long long int\n+vector double\n+@end smallexample\n+\n+The long long types are only implemented for 64-bit code generation.\n \n @smallexample\n-/* __int128, long long, and double arguments and results require -mvsx.  */\n+\n vector bool long long vec_and (vector bool long long int, vector bool long long);\n+\n vector double vec_ctf (vector unsigned long, const int);\n vector double vec_ctf (vector signed long, const int);\n+\n vector signed long vec_cts (vector double, const int);\n+\n vector unsigned long vec_ctu (vector double, const int);\n+\n void vec_dst (const unsigned long *, int, const int);\n void vec_dst (const long *, int, const int);\n+\n void vec_dststt (const unsigned long *, int, const int);\n void vec_dststt (const long *, int, const int);\n+\n void vec_dstt (const unsigned long *, int, const int);\n void vec_dstt (const long *, int, const int);\n+\n vector unsigned char vec_lvsl (int, const unsigned long *);\n vector unsigned char vec_lvsl (int, const long *);\n+\n vector unsigned char vec_lvsr (int, const unsigned long *);\n vector unsigned char vec_lvsr (int, const long *);\n+\n vector double vec_mul (vector double, vector double);\n vector long vec_mul (vector long, vector long);\n vector unsigned long vec_mul (vector unsigned long, vector unsigned long);\n+\n vector unsigned long long vec_mule (vector unsigned int, vector unsigned int);\n vector signed long long vec_mule (vector signed int, vector signed int);\n+\n vector unsigned long long vec_mulo (vector unsigned int, vector unsigned int);\n vector signed long long vec_mulo (vector signed int, vector signed int);\n+\n vector double vec_nabs (vector double);\n+\n vector bool long long vec_reve (vector bool long long);\n vector signed long long vec_reve (vector signed long long);\n vector unsigned long long vec_reve (vector unsigned long long);\n vector double vec_sld (vector double, vector double, const int);\n+\n vector bool long long int vec_sld (vector bool long long int,\n                                    vector bool long long int, const int);\n vector long long int vec_sld (vector long long int, vector  long long int, const int);\n vector unsigned long long int vec_sld (vector unsigned long long int,\n                                        vector unsigned long long int, const int);\n+\n vector long long int vec_sll (vector long long int, vector unsigned char);\n vector unsigned long long int vec_sll (vector unsigned long long int,\n                                        vector unsigned char);\n+\n vector signed long long vec_slo (vector signed long long, vector signed char);\n vector signed long long vec_slo (vector signed long long, vector unsigned char);\n vector unsigned long long vec_slo (vector unsigned long long, vector signed char);\n vector unsigned long long vec_slo (vector unsigned long long, vector unsigned char);\n+\n vector signed long vec_splat (vector signed long, const int);\n vector unsigned long vec_splat (vector unsigned long, const int);\n+\n vector long long int vec_srl (vector long long int, vector unsigned char);\n vector unsigned long long int vec_srl (vector unsigned long long int,\n                                        vector unsigned char);\n+\n vector long long int vec_sro (vector long long int, vector char);\n vector long long int vec_sro (vector long long int, vector unsigned char);\n vector unsigned long long int vec_sro (vector unsigned long long int, vector char);\n vector unsigned long long int vec_sro (vector unsigned long long int,\n                                        vector unsigned char);\n+\n vector signed __int128 vec_subc (vector signed __int128, vector signed __int128);\n vector unsigned __int128 vec_subc (vector unsigned __int128, vector unsigned __int128);\n+\n vector signed __int128 vec_sube (vector signed __int128, vector signed __int128,\n                                  vector signed __int128);\n vector unsigned __int128 vec_sube (vector unsigned __int128, vector unsigned __int128,\n                                    vector unsigned __int128);\n+\n vector signed __int128 vec_subec (vector signed __int128, vector signed __int128,\n                                   vector signed __int128);\n vector unsigned __int128 vec_subec (vector unsigned __int128, vector unsigned __int128,\n                                     vector unsigned __int128);\n+\n vector double vec_unpackh (vector float);\n+\n vector double vec_unpackl (vector float);\n \n-/* vec_doublee requires -mvsx.  */\n vector double vec_doublee (vector float);\n vector double vec_doublee (vector signed int);\n vector double vec_doublee (vector unsigned int);\n \n-/* vec_doubleo requires -mvsx.  */\n vector double vec_doubleo (vector float);\n vector double vec_doubleo (vector signed int);\n vector double vec_doubleo (vector unsigned int);\n \n-/* vec_doubleh requires -mvsx.  */\n vector double vec_doubleh (vector float);\n vector double vec_doubleh (vector signed int);\n vector double vec_doubleh (vector unsigned int);\n \n-/* vec_doublel requires -mvsx.  */\n vector double vec_doublel (vector float);\n vector double vec_doublel (vector signed int);\n vector double vec_doublel (vector unsigned int);\n \n-/* vec_float requires -mvsx.  */\n vector float vec_float (vector signed int);\n vector float vec_float (vector unsigned int);\n \n-/* vec_float2 requires -mvsx.  */\n vector float vec_float2 (vector signed long long, vector signed long long);\n vector float vec_float2 (vector unsigned long long, vector signed long long);\n \n-/* vec_floate requires -mvsx.  */\n vector float vec_floate (vector double);\n vector float vec_floate (vector signed long long);\n vector float vec_floate (vector unsigned long long);\n \n-/* vec_floato requires -mvsx.  */\n vector float vec_floato (vector double);\n vector float vec_floato (vector signed long long);\n vector float vec_floato (vector unsigned long long);\n \n-/* vec_neg requires P8_vector */\n-vector signed char vec_neg (vector signed char);\n-vector signed short vec_neg (vector signed short);\n-vector signed int vec_neg (vector signed int);\n-vector signed long long vec_neg (vector signed long long);\n-vector float  char vec_neg (vector float);\n-vector double vec_neg (vector double);\n-\n-/* vec_signed requires -mvsx.  */\n vector signed long long vec_signed (vector double);\n vector signed int vec_signed (vector float);\n \n-/* vec_signede requires -mvsx.  */\n vector signed int vec_signede (vector double);\n-/* vec_signedo requires -mvsx.  */\n+\n vector signed int vec_signedo (vector double);\n-/* vec_signed2 requires -mcpu=power8.  */\n-vector signed int vec_signed2 (vector double, vector double);\n \n-/* vec_sldw requires -mvsx.  */\n vector signed char vec_sldw (vector signed char, vector signed char, const int);\n vector unsigned char vec_sldw (vector unsigned char, vector unsigned char, const int);\n vector signed short vec_sldw (vector signed short, vector signed short, const int);\n@@ -17719,25 +17734,13 @@ vector signed long long vec_sldw (vector signed long long,\n vector unsigned long long vec_sldw (vector unsigned long long,\n                                     vector unsigned long long, const int);\n \n-/* vec_unsigned requires -mvsx.  */\n vector signed long long vec_unsigned (vector double);\n vector signed int vec_unsigned (vector float);\n \n-/* vec_unsignede requires -mvsx.  */\n vector signed int vec_unsignede (vector double);\n \n-/* vec_unsignedo requires -mvsx.  */\n vector signed int vec_unsignedo (vector double);\n \n-/* vec_unsignede requires -mcpu=power8.  */\n-vector signed int vec_unsigned2 (vector double, vector double);\n-\n-@end smallexample\n-\n-If the vector/scalar (VSX) instruction set is available, the following\n-additional functions are available:\n-\n-@smallexample\n vector double vec_abs (vector double);\n vector double vec_add (vector double, vector double);\n vector double vec_and (vector double, vector double);\n@@ -17999,6 +18002,9 @@ if the VSX instruction set is available.  The @samp{vec_vsx_ld} and\n @samp{vec_vsx_st} built-in functions always generate the VSX @samp{LXVD2X},\n @samp{LXVW4X}, @samp{STXVD2X}, and @samp{STXVW4X} instructions.\n \n+@node PowerPC AltiVec Built-in Functions Available on ISA 2.07\n+@subsubsection PowerPC AltiVec Built-in Functions Available on ISA 2.07\n+\n If the ISA 2.07 additions to the vector/scalar (power8-vector)\n instruction set are available, the following additional functions are\n available for both 32-bit and 64-bit targets.  For 64-bit targets, you\n@@ -18007,6 +18013,17 @@ can use @var{vector long} instead of @var{vector long long},\n @var{vector unsigned long} instead of @var{vector unsigned long long}.\n \n @smallexample\n+vector signed char vec_neg (vector signed char);\n+vector signed short vec_neg (vector signed short);\n+vector signed int vec_neg (vector signed int);\n+vector signed long long vec_neg (vector signed long long);\n+vector float  char vec_neg (vector float);\n+vector double vec_neg (vector double);\n+\n+vector signed int vec_signed2 (vector double, vector double);\n+\n+vector signed int vec_unsigned2 (vector double, vector double);\n+\n vector long long vec_abs (vector long long);\n \n vector long long vec_add (vector long long, vector long long);\n@@ -18366,6 +18383,9 @@ int __builtin_bcdsub_gt (vector __int128_t, vector __int128_t);\n int __builtin_bcdsub_ov (vector __int128_t, vector __int128_t);\n @end smallexample\n \n+@node PowerPC AltiVec Built-in Functions Available on ISA 3.0\n+@subsubsection PowerPC AltiVec Built-in Functions Available on ISA 3.0\n+\n The following additional built-in functions are also available for the\n PowerPC family of processors, starting with ISA 3.0\n (@option{-mcpu=power9}) or later:"}]}