{"sha": "8d1e342b4afbad77cb92f8057cf6d1e996bfb077", "node_id": "C_kwDOANBUbNoAKDhkMWUzNDJiNGFmYmFkNzdjYjkyZjgwNTdjZjZkMWU5OTZiZmIwNzc", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-20T07:43:13Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-20T07:43:13Z"}, "message": "Fix handling of deferred SSA names in modref dataflow\n\nIn the testcase we fail to analyze SSA name because flag do_dataflow is set\nand thus triggers early exist in analyze_ssa_name.  Fixed by disabling\nearly exits when handling deferred names.\n\ngcc/ChangeLog:\n\n2021-12-20  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/103669\n\t* ipa-modref.c (modref_eaf_analysis::analyze_ssa_name): Add deferred\n\tparameter.\n\t(modref_eaf_analysis::propagate): Use it.\n\ngcc/testsuite/ChangeLog:\n\n2021-12-20  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/103669\n\t* g++.dg/torture/pr103669.C: New test.", "tree": {"sha": "b2075a2df6b749ddd9ac4687632c20875c631c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2075a2df6b749ddd9ac4687632c20875c631c8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d1e342b4afbad77cb92f8057cf6d1e996bfb077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1e342b4afbad77cb92f8057cf6d1e996bfb077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1e342b4afbad77cb92f8057cf6d1e996bfb077", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1e342b4afbad77cb92f8057cf6d1e996bfb077/comments", "author": null, "committer": null, "parents": [{"sha": "19dcecd963295b02b96c8cac57933657dbe3234a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dcecd963295b02b96c8cac57933657dbe3234a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19dcecd963295b02b96c8cac57933657dbe3234a"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "733fc212fcc72b06eacabe25835dde2344080f77", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1e342b4afbad77cb92f8057cf6d1e996bfb077/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1e342b4afbad77cb92f8057cf6d1e996bfb077/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=8d1e342b4afbad77cb92f8057cf6d1e996bfb077", "patch": "@@ -2232,7 +2232,7 @@ class modref_eaf_analysis\n {\n public:\n   /* Mark NAME as relevant for analysis.  */\n-  void analyze_ssa_name (tree name);\n+  void analyze_ssa_name (tree name, bool deferred = false);\n   /* Dataflow slover.  */\n   void propagate ();\n   /* Return flags computed earlier for NAME.  */\n@@ -2373,33 +2373,36 @@ callee_to_caller_flags (int call_flags, bool ignore_stores,\n    are processed later)  */\n \n void\n-modref_eaf_analysis::analyze_ssa_name (tree name)\n+modref_eaf_analysis::analyze_ssa_name (tree name, bool deferred)\n {\n   imm_use_iterator ui;\n   gimple *use_stmt;\n   int index = SSA_NAME_VERSION (name);\n \n-  /* See if value is already computed.  */\n-  if (m_lattice[index].known || m_lattice[index].do_dataflow)\n-   return;\n-  if (m_lattice[index].open)\n+  if (!deferred)\n     {\n-      if (dump_file)\n-\tfprintf (dump_file,\n-\t\t \"%*sCycle in SSA graph\\n\",\n-\t\t m_depth * 4, \"\");\n-      return;\n-    }\n-  /* Recursion guard.  */\n-  m_lattice[index].init ();\n-  if (m_depth == param_modref_max_depth)\n-    {\n-      if (dump_file)\n-\tfprintf (dump_file,\n-\t\t \"%*sMax recursion depth reached; postponing\\n\",\n-\t\t m_depth * 4, \"\");\n-      m_deferred_names.safe_push (name);\n-      return;\n+      /* See if value is already computed.  */\n+      if (m_lattice[index].known || m_lattice[index].do_dataflow)\n+       return;\n+      if (m_lattice[index].open)\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file,\n+\t\t     \"%*sCycle in SSA graph\\n\",\n+\t\t     m_depth * 4, \"\");\n+\t  return;\n+\t}\n+      /* Recursion guard.  */\n+      m_lattice[index].init ();\n+      if (m_depth == param_modref_max_depth)\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file,\n+\t\t     \"%*sMax recursion depth reached; postponing\\n\",\n+\t\t     m_depth * 4, \"\");\n+\t  m_deferred_names.safe_push (name);\n+\t  return;\n+\t}\n     }\n \n   if (dump_file)\n@@ -2742,10 +2745,9 @@ modref_eaf_analysis::propagate ()\n   while (m_deferred_names.length ())\n     {\n       tree name = m_deferred_names.pop ();\n-      m_lattice[SSA_NAME_VERSION (name)].open = false;\n       if (dump_file)\n \tfprintf (dump_file, \"Analyzing deferred SSA name\\n\");\n-      analyze_ssa_name (name);\n+      analyze_ssa_name (name, true);\n     }\n \n   if (!m_names_to_propagate.length ())"}, {"sha": "a9509c354f18ff5f1de24b1ef53e5df3957b9700", "filename": "gcc/testsuite/g++.dg/torture/pr103669.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1e342b4afbad77cb92f8057cf6d1e996bfb077/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103669.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1e342b4afbad77cb92f8057cf6d1e996bfb077/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103669.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103669.C?ref=8d1e342b4afbad77cb92f8057cf6d1e996bfb077", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do run }\n+/* { dg-additional-options \"--param=modref-max-depth=1\" } */\n+#include <list>\n+\n+typedef std::list<void *> PtrList;\n+\n+void\n+SlList (PtrList *l)\n+{\n+  PtrList temp = *l;\n+  PtrList::iterator iter;\n+  for (iter = temp.begin (); iter != temp.end (); ++iter)\n+    __builtin_abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  PtrList list;\n+  SlList (&list);\n+  return 0;\n+}"}]}