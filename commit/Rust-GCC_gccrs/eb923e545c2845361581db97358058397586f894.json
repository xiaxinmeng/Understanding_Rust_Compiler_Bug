{"sha": "eb923e545c2845361581db97358058397586f894", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5MjNlNTQ1YzI4NDUzNjE1ODFkYjk3MzU4MDU4Mzk3NTg2Zjg5NA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-08-05T22:09:45Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-08-05T22:09:45Z"}, "message": "re PR other/12081 (Gcc can't be compiled with -mregparm=3)\n\n\tPR other/12081\n\t* recog.h (rtx (*insn_gen_fn) (rtx, ...)): Replace typedef with\tnew\n\tclass insn_gen_fn.\n\t* expr.c (move_by_pieces_1, store_by_pieces_2): Replace argument\n\trtx (*) (rtx, ...) with insn_gen_fn.\n\t* genoutput.c (output_insn_data): Cast gen_? function pointers to\n\tinsn_gen_fn::stored_funcptr.  Add initializer braces.\n\nFrom-SVN: r201513", "tree": {"sha": "c85e912deef62406755e586c518c15efa9224549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c85e912deef62406755e586c518c15efa9224549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb923e545c2845361581db97358058397586f894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb923e545c2845361581db97358058397586f894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb923e545c2845361581db97358058397586f894", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb923e545c2845361581db97358058397586f894/comments", "author": null, "committer": null, "parents": [{"sha": "fd9b0f320e88e8d71831b62867627295b77d26b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9b0f320e88e8d71831b62867627295b77d26b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9b0f320e88e8d71831b62867627295b77d26b6"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "394da1348b242596089910095bb1b14e60fa9ac7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb923e545c2845361581db97358058397586f894/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb923e545c2845361581db97358058397586f894/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb923e545c2845361581db97358058397586f894", "patch": "@@ -1,3 +1,13 @@\n+2013-08-05  Oleg Endo <olegendo@gcc.gnu.org>\n+\n+\tPR other/12081\n+\t* recog.h (rtx (*insn_gen_fn) (rtx, ...)): Replace typedef with\tnew\n+\tclass insn_gen_fn.\n+\t* expr.c (move_by_pieces_1, store_by_pieces_2): Replace argument\n+\trtx (*) (rtx, ...) with insn_gen_fn.\n+\t* genoutput.c (output_insn_data): Cast gen_? function pointers to\n+\tinsn_gen_fn::stored_funcptr.  Add initializer braces.\n+\n 2013-08-05  David Malcolm  <dmalcolm@redhat.com>\n \n \tRewrite how instances of passes are cloned to remove assumptions"}, {"sha": "bbe0401291b3bc744642410a8a3ff8d9d9ce1bed", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb923e545c2845361581db97358058397586f894/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb923e545c2845361581db97358058397586f894/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=eb923e545c2845361581db97358058397586f894", "patch": "@@ -119,7 +119,7 @@ struct store_by_pieces_d\n   int reverse;\n };\n \n-static void move_by_pieces_1 (rtx (*) (rtx, ...), enum machine_mode,\n+static void move_by_pieces_1 (insn_gen_fn, machine_mode,\n \t\t\t      struct move_by_pieces_d *);\n static bool block_move_libcall_safe_for_call_parm (void);\n static bool emit_block_move_via_movmem (rtx, rtx, rtx, unsigned, unsigned, HOST_WIDE_INT);\n@@ -128,7 +128,7 @@ static void emit_block_move_via_loop (rtx, rtx, rtx, unsigned);\n static rtx clear_by_pieces_1 (void *, HOST_WIDE_INT, enum machine_mode);\n static void clear_by_pieces (rtx, unsigned HOST_WIDE_INT, unsigned int);\n static void store_by_pieces_1 (struct store_by_pieces_d *, unsigned int);\n-static void store_by_pieces_2 (rtx (*) (rtx, ...), enum machine_mode,\n+static void store_by_pieces_2 (insn_gen_fn, machine_mode,\n \t\t\t       struct store_by_pieces_d *);\n static tree clear_storage_libcall_fn (int);\n static rtx compress_float_constant (rtx, rtx);\n@@ -1043,7 +1043,7 @@ move_by_pieces_ninsns (unsigned HOST_WIDE_INT l, unsigned int align,\n    to make a move insn for that mode.  DATA has all the other info.  */\n \n static void\n-move_by_pieces_1 (rtx (*genfun) (rtx, ...), enum machine_mode mode,\n+move_by_pieces_1 (insn_gen_fn genfun, machine_mode mode,\n \t\t  struct move_by_pieces_d *data)\n {\n   unsigned int size = GET_MODE_SIZE (mode);\n@@ -2657,7 +2657,7 @@ store_by_pieces_1 (struct store_by_pieces_d *data ATTRIBUTE_UNUSED,\n    to make a move insn for that mode.  DATA has all the other info.  */\n \n static void\n-store_by_pieces_2 (rtx (*genfun) (rtx, ...), enum machine_mode mode,\n+store_by_pieces_2 (insn_gen_fn genfun, machine_mode mode,\n \t\t   struct store_by_pieces_d *data)\n {\n   unsigned int size = GET_MODE_SIZE (mode);"}, {"sha": "59afaa452aa6953a028268b09b6a47fc002d9cfb", "filename": "gcc/genoutput.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb923e545c2845361581db97358058397586f894/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb923e545c2845361581db97358058397586f894/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=eb923e545c2845361581db97358058397586f894", "patch": "@@ -404,9 +404,9 @@ output_insn_data (void)\n \t}\n \n       if (d->name && d->name[0] != '*')\n-\tprintf (\"    (insn_gen_fn) gen_%s,\\n\", d->name);\n+\tprintf (\"    { (insn_gen_fn::stored_funcptr) gen_%s },\\n\", d->name);\n       else\n-\tprintf (\"    0,\\n\");\n+\tprintf (\"    { 0 },\\n\");\n \n       printf (\"    &operand_data[%d],\\n\", d->operand_number);\n       printf (\"    %d,\\n\", d->n_generator_args);"}, {"sha": "550a21745787684120042917006c594ad2ecb0b9", "filename": "gcc/recog.h", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb923e545c2845361581db97358058397586f894/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb923e545c2845361581db97358058397586f894/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=eb923e545c2845361581db97358058397586f894", "patch": "@@ -256,7 +256,57 @@ extern struct operand_alternative recog_op_alt[MAX_RECOG_OPERANDS][MAX_RECOG_ALT\n \n typedef int (*insn_operand_predicate_fn) (rtx, enum machine_mode);\n typedef const char * (*insn_output_fn) (rtx *, rtx);\n-typedef rtx (*insn_gen_fn) (rtx, ...);\n+\n+struct insn_gen_fn\n+{\n+  typedef rtx (*f0) (void);\n+  typedef rtx (*f1) (rtx);\n+  typedef rtx (*f2) (rtx, rtx);\n+  typedef rtx (*f3) (rtx, rtx, rtx);\n+  typedef rtx (*f4) (rtx, rtx, rtx, rtx);\n+  typedef rtx (*f5) (rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f6) (rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f7) (rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f8) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f9) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f10) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f11) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f12) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f13) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f14) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f15) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+  typedef rtx (*f16) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n+\n+  typedef f0 stored_funcptr;\n+\n+  rtx operator () (void) const { return ((f0)func) (); }\n+  rtx operator () (rtx a0) const { return ((f1)func) (a0); }\n+  rtx operator () (rtx a0, rtx a1) const { return ((f2)func) (a0, a1); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2) const { return ((f3)func) (a0, a1, a2); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3) const { return ((f4)func) (a0, a1, a2, a3); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4) const { return ((f5)func) (a0, a1, a2, a3, a4); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5) const { return ((f6)func) (a0, a1, a2, a3, a4, a5); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6) const { return ((f7)func) (a0, a1, a2, a3, a4, a5, a6); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7) const { return ((f8)func) (a0, a1, a2, a3, a4, a5, a6, a7); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8) const { return ((f9)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9) const { return ((f10)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10) const { return ((f11)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11) const { return ((f12)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11, rtx a12) const { return ((f13)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11, rtx a12, rtx a13) const { return ((f14)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11, rtx a12, rtx a13, rtx a14) const { return ((f15)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); }\n+  rtx operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11, rtx a12, rtx a13, rtx a14, rtx a15) const { return ((f16)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); }\n+\n+  // This is for compatibility of code that invokes functions like\n+  //   (*funcptr) (arg)\n+  insn_gen_fn operator * (void) const { return *this; }\n+\n+  // The wrapped function pointer must be public and there must not be any\n+  // constructors.  Otherwise the insn_data_d struct initializers generated\n+  // by genoutput.c will result in static initializer functions, which defeats\n+  // the purpose of the generated insn_data_d array.\n+  stored_funcptr func;\n+};\n \n struct insn_operand_data\n {"}]}