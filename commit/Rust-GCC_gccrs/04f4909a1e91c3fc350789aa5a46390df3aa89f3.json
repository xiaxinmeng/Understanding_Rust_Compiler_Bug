{"sha": "04f4909a1e91c3fc350789aa5a46390df3aa89f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRmNDkwOWExZTkxYzNmYzM1MDc4OWFhNWE0NjM5MGRmM2FhODlmMw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-12-14T09:03:50Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-12-14T09:03:50Z"}, "message": "[RS6000] PR88311, mlongcall indirections are optimised away\n\nMasking CALL_LONG from the cookie was done in order to simplify and\ncorrect length attribute calculations for indirect calls at one point\nin my call series tidy when the indirect patterns used alternatives\n\"0,n\" on the cookie operand.  (Leaving the CALL_LONG in place\ncalculated the wrong length for long calls without fp args.)\n\nThis is no longer necessary now that the indirect sysv call patterns\nexplicitly test for the fp arg bits in their length attribute\nexpressions.  And without the CALL_LONG to disable insns like\ncall_value_local_svsv, combine merrily replaces the indirect long call\nsequence with a direct call.  As it should.  This patch reinstates\nthe CALL_LONG bit.\n\n\tPR rtl-optimization/88311\n\t* config/rs6000/rs6000.c (rs6000_call_sysv): Do not mask cookie.\n\t(rs6000_sibcall_sysv): Likewise.\n\nFrom-SVN: r267123", "tree": {"sha": "2880d6a4e8af9bedc4f6b452ccbae0be613a1997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2880d6a4e8af9bedc4f6b452ccbae0be613a1997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04f4909a1e91c3fc350789aa5a46390df3aa89f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f4909a1e91c3fc350789aa5a46390df3aa89f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f4909a1e91c3fc350789aa5a46390df3aa89f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f4909a1e91c3fc350789aa5a46390df3aa89f3/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c4ff3c98c19594ed17f3ad8a3a25a5939e16b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4ff3c98c19594ed17f3ad8a3a25a5939e16b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c4ff3c98c19594ed17f3ad8a3a25a5939e16b30"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "aa260995e8ddc9f6cbd45d19859cf751b4b98a04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f4909a1e91c3fc350789aa5a46390df3aa89f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f4909a1e91c3fc350789aa5a46390df3aa89f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04f4909a1e91c3fc350789aa5a46390df3aa89f3", "patch": "@@ -1,3 +1,9 @@\n+2018-12-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR rtl-optimization/88311\n+\t* config/rs6000/rs6000.c (rs6000_call_sysv): Do not mask cookie.\n+\t(rs6000_sibcall_sysv): Likewise.\n+\n 2018-12-14  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/88001"}, {"sha": "c4682fce6cd704cb78c863613b4b3d15b7a224d3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f4909a1e91c3fc350789aa5a46390df3aa89f3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f4909a1e91c3fc350789aa5a46390df3aa89f3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=04f4909a1e91c3fc350789aa5a46390df3aa89f3", "patch": "@@ -37978,8 +37978,7 @@ rs6000_call_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n   if (value != NULL_RTX)\n     call[0] = gen_rtx_SET (value, call[0]);\n \n-  unsigned int mask = CALL_V4_SET_FP_ARGS | CALL_V4_CLEAR_FP_ARGS;\n-  call[1] = gen_rtx_USE (VOIDmode, GEN_INT (INTVAL (cookie) & mask));\n+  call[1] = gen_rtx_USE (VOIDmode, cookie);\n   call[2] = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNO));\n \n   insn = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (3, call));\n@@ -38043,8 +38042,7 @@ rs6000_sibcall_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n   if (value != NULL_RTX)\n     call[0] = gen_rtx_SET (value, call[0]);\n \n-  unsigned int mask = CALL_V4_SET_FP_ARGS | CALL_V4_CLEAR_FP_ARGS;\n-  call[1] = gen_rtx_USE (VOIDmode, GEN_INT (INTVAL (cookie) & mask));\n+  call[1] = gen_rtx_USE (VOIDmode, cookie);\n   call[2] = simple_return_rtx;\n \n   insn = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (3, call));"}]}