{"sha": "6ea123cec7668c5bb4057a97280a4c49c02bb0c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhMTIzY2VjNzY2OGM1YmI0MDU3YTk3MjgwYTRjNDljMDJiYjBjMw==", "commit": {"author": {"name": "Robert Schuster", "email": "thebohemian@gmx.net", "date": "2004-11-06T13:22:13Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-11-06T13:22:13Z"}, "message": "Fixes documentation and indentation\n\n2004-11-06  Robert Schuster <thebohemian@gmx.net>\n\n       Fixes documentation and indentation\n       * java/beans/PropertyEditorSupport.java:\n       reworked initial API doc\n       (value): changed name from val\n\n2004-11-06  Robert Schuster <thebohemian@gmx.net>\n\n       Updates to 1.5\n       * java/beans/PropertyEditorSupport.java\n       (PropertyEditorSupport()): Changed modifier to public\n       (PropertyEditorSupport(Object): Changed modifier to public\n       (setSource): New method\n       (getSource): New method\n\n2004-11-06  Robert Schuster <thebohemian@gmx.net>\n\n       Fixes bug #10799\n       * java/beans/PropertyEditorSupport.java\n       (setValue): Fire property change event\n\nFrom-SVN: r90170", "tree": {"sha": "25959030314e873c1f4624b5cfab2821f9a85809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25959030314e873c1f4624b5cfab2821f9a85809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ea123cec7668c5bb4057a97280a4c49c02bb0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea123cec7668c5bb4057a97280a4c49c02bb0c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea123cec7668c5bb4057a97280a4c49c02bb0c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea123cec7668c5bb4057a97280a4c49c02bb0c3/comments", "author": {"login": "thebohemian", "id": 336602, "node_id": "MDQ6VXNlcjMzNjYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/336602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thebohemian", "html_url": "https://github.com/thebohemian", "followers_url": "https://api.github.com/users/thebohemian/followers", "following_url": "https://api.github.com/users/thebohemian/following{/other_user}", "gists_url": "https://api.github.com/users/thebohemian/gists{/gist_id}", "starred_url": "https://api.github.com/users/thebohemian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thebohemian/subscriptions", "organizations_url": "https://api.github.com/users/thebohemian/orgs", "repos_url": "https://api.github.com/users/thebohemian/repos", "events_url": "https://api.github.com/users/thebohemian/events{/privacy}", "received_events_url": "https://api.github.com/users/thebohemian/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1df75d1a2eada01c913ba68bfe6a4dfbf9324b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1df75d1a2eada01c913ba68bfe6a4dfbf9324b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1df75d1a2eada01c913ba68bfe6a4dfbf9324b3"}], "stats": {"total": 413, "additions": 247, "deletions": 166}, "files": [{"sha": "29ea613d00656ede44531d55ee7c1a5f5ee91b1f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea123cec7668c5bb4057a97280a4c49c02bb0c3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea123cec7668c5bb4057a97280a4c49c02bb0c3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6ea123cec7668c5bb4057a97280a4c49c02bb0c3", "patch": "@@ -1,3 +1,25 @@\n+2004-11-06  Robert Schuster <thebohemian@gmx.net>\n+\n+\tFixes documentation and indentation\n+\t* java/beans/PropertyEditorSupport.java:\n+\treworked initial API doc\n+\t(value): changed name from val\n+\n+2004-11-06  Robert Schuster <thebohemian@gmx.net>\n+\n+\tUpdates to 1.5\n+\t* java/beans/PropertyEditorSupport.java\n+\t(PropertyEditorSupport()): Changed modifier to public\n+\t(PropertyEditorSupport(Object): Changed modifier to public\n+\t(setSource): New method\n+\t(getSource): New method\n+\n+2004-11-06  Robert Schuster <thebohemian@gmx.net>\n+\n+\tFixes bug #10799\n+\t* java/beans/PropertyEditorSupport.java\n+\t(setValue): Fire property change event\n+\n 2004-11-03  Tom Tromey  <tromey@redhat.com>\n \n \t* jni.cc (_Jv_JNI_NewObjectArray): Fixed return type."}, {"sha": "218cf63c80407db91ba89fc775f3669fd514e7a2", "filename": "libjava/java/beans/PropertyEditorSupport.java", "status": "modified", "additions": 225, "deletions": 166, "changes": 391, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea123cec7668c5bb4057a97280a4c49c02bb0c3/libjava%2Fjava%2Fbeans%2FPropertyEditorSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea123cec7668c5bb4057a97280a4c49c02bb0c3/libjava%2Fjava%2Fbeans%2FPropertyEditorSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyEditorSupport.java?ref=6ea123cec7668c5bb4057a97280a4c49c02bb0c3", "patch": "@@ -1,13 +1,13 @@\n /* java.beans.PropertyEditorSupport\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,169 +38,228 @@\n \n package java.beans;\n \n+\n /**\n- ** PropertyEditorSupport helps with PropertyEditors,\n- ** implementing base functionality that they usually must\n- ** have but which is a pain to implement.  You may extend\n- ** from this class or use it as a standalone.<P>\n- **\n- ** This class does not do any painting or actual editing.\n- ** For that, you must use or extend it.  See the\n- ** PropertyEditor class for better descriptions of what\n- ** the various methods do.\n- **\n- ** @author John Keiser\n- ** @since JDK1.1\n- ** @version 1.1.0, 29 Jul 1998\n- **/\n-\n-public class PropertyEditorSupport implements PropertyEditor {\n-\tObject eventSource;\n-\tObject val;\n-\tPropertyChangeSupport pSupport;\n-\n-\t/** Call this constructor when you are deriving from\n-\t ** PropertyEditorSupport.\n-\t **/\n-\tprotected PropertyEditorSupport() {\n-\t\tthis.eventSource = this;\n-\t\tthis.pSupport = new PropertyChangeSupport(this);\n-\t}\n-\n-\t/** Call this constructor when you are using\n-\t ** PropertyEditorSupport as a helper object.\n-\t ** @param eventSource the source to use when firing\n-\t **        property change events.\n-\t **/\n-\tprotected PropertyEditorSupport(Object eventSource) {\n-\t\tthis.eventSource = eventSource;\n-\t\tthis.pSupport = new PropertyChangeSupport(this);\n-\t}\n-\n-\t/** Set the current value of the property.\n-\t ** <STRONG>Implementation Note</STRONG> Sun does not\n-\t ** state what exactly this version of the method does.\n-\t ** Thus, in this implementation, it sets the value, and\n-\t ** then if the old and new values are different, it\n-\t ** fires a property change event with no property name\n-\t ** and the old and new values.\n-\t ** @param val the new value for the property.\n-\t **/\n-\tpublic void setValue(Object val) {\n-\t\tObject oldVal = val;\n-\t\tthis.val = val;\n-\t\tif(!oldVal.equals(val)) {\n-\t\t\tpSupport.firePropertyChange(null,oldVal,val);\n-\t\t}\n-\t}\n-\n-\t/** Get the current value of the property.\n-\t ** @return the current value of the property.\n-\t **/\n-\tpublic Object getValue() {\n-\t\treturn val;\n-\t}\n-\n-\t/** Get whether this object is paintable or not.\n-\t ** @return <CODE>false</CODE>\n-\t **/\n-\tpublic boolean isPaintable() {\n-\t\treturn false;\n-\t}\n-\n-\t/** Paint this object.  This class does nothing in\n-\t ** this method.\n-\t **/\n-\tpublic void paintValue(java.awt.Graphics g, java.awt.Rectangle r) {\n-\t}\n-\n-\t/** Get the Java initialization String for the current\n-\t ** value of the Object.  This class returns gibberish or\n-\t ** null (though the spec does not say which).<P>\n-\t ** <STRONG>Implementation Note:</STRONG> This class\n-\t ** returns the string \"@$#^\" to make sure the code will\n-\t ** be broken, so that you will know to override it when\n-\t ** you create your own property editor.\n-\t ** @return the Java initialization string.\n-\t **/\n-\tpublic String getJavaInitializationString() {\n-\t\treturn \"@$#^\";\n-\t}\n-\n-\t/** Get the value as text.\n-\t ** In this class, you cannot count on getAsText() doing\n-\t ** anything useful, although in this implementation I\n-\t ** do toString().\n-\t ** @return the value as text.\n-\t **/\n-\tpublic String getAsText() {\n-\t\treturn val != null ? val.toString() : \"null\";\n-\t}\n-\n-\t/** Set the value as text.\n-\t ** In this class, you cannot count on setAsText() doing\n-\t ** anything useful across implementations.\n-\t ** <STRONG>Implementation Note:</STRONG> In this\n-\t ** implementation it checks if the String is \"null\", and\n-\t ** if it is, sets the value to null, otherwise it throws\n-\t ** an IllegalArgumentException.\n-\t ** @param s the text to convert to a new value.\n-\t ** @exception IllegalArgumentException if the text is\n-\t **            malformed.\n-\t **/\n-\tpublic void setAsText(String s) throws IllegalArgumentException {\n-\t\tif(s.equals(\"null\")) {\n-\t\t\tsetValue(null);\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException();\n-\t\t}\n-\t}\n-\n-\t/** Returns a list of possible choices for the value.\n-\t ** @return <CODE>null</CODE>\n-\t **/\n-\tpublic String[] getTags() {\n-\t\treturn null;\n-\t}\n-\n-\t/** Return a custom component to edit the value.\n-\t ** @return <CODE>null</CODE> in this class.\n-\t **/\n-\tpublic java.awt.Component getCustomEditor() {\n-\t\treturn null;\n-\t}\n-\n-\t/** Find out whether this property editor supports a\n-\t ** custom component to edit its value.\n-\t ** @return <CODE>false</CODE> in this class.\n-\t **/\n-\tpublic boolean supportsCustomEditor() {\n-\t\treturn false;\n-\t}\n-\n-\t/** Add a property change listener to this property editor.\n-\t ** @param l the listener to add.\n-\t **/\n-\tpublic void addPropertyChangeListener(PropertyChangeListener l) {\n-\t\tpSupport.addPropertyChangeListener(l);\n-\t}\n-\n-\t/** Remove a property change listener from this property editor.\n-\t ** @param l the listener to remove.\n-\t **/\n-\tpublic void removePropertyChangeListener(PropertyChangeListener l) {\n-\t\tpSupport.removePropertyChangeListener(l);\n-\t}\n-\n-\n-\t/** Notify people that we've changed, although we don't\n-\t ** tell them just how.  The only thing I can think of to\n-\t ** send in the event is the new value (since the old value\n-\t ** is unavailable and there is no property name).\n-\t ** I confess I do not understand the point of this method.\n-\t **/\n-\tpublic void firePropertyChange() {\n-\t\tpSupport.firePropertyChange(null,null,val);\n-\t}\n-}\n+ * PropertyEditorSupport helps with PropertyEditors,\n+ * implementing base functionality that they usually must\n+ * have but which is a pain to implement.  You may extend\n+ * from this class or use it as a standalone.<P>\n+ *\n+ * This class does not do any painting or actual editing.\n+ * For that, you must use or extend it.  See the\n+ * PropertyEditor class for better descriptions of what\n+ * the various methods do.\n+ *\n+ * @author John Keiser\n+ * @author Robert Schuster\n+ * @since 1.1\n+ * @status updated to 1.5\n+ */\n+public class PropertyEditorSupport implements PropertyEditor\n+{\n+  Object eventSource;\n+  Object value;\n+  PropertyChangeSupport pSupport;\n+\n+  /** Call this constructor when you are deriving from\n+   * PropertyEditorSupport.\n+   *\n+   * Using this constructor the event source is this PropertyEditorSupport\n+   * instance itself.\n+   *\n+   * @since 1.5\n+   * @status this was <code>protected</code> prior to 1.5\n+   */\n+  public PropertyEditorSupport()\n+  {\n+    eventSource = this;\n+    pSupport = new PropertyChangeSupport(this);\n+  }\n+\n+  /** Call this constructor when you are using\n+   * PropertyEditorSupport as a helper object.\n+   *\n+   * This constructor throws a NullPointerException when <code>source</code> is <code>null</code>,\n+   * for compatibility reasons with J2SDK 1.5.0 .\n+   *\n+   * @param source The source to use when firing\n+   * property change events.\n+   * @since 1.5\n+   * @status this was <code>protected</code> prior to 1.5\n+   */\n+  public PropertyEditorSupport(Object source)\n+  {\n+    // note: constructor rejects source being null for the sake of compatibility\n+    // with official 1.5.0 implementation\n+    if (source == null)\n+      throw new NullPointerException(\"Event source must not be null.\");\n+\n+    eventSource = source;\n+    pSupport = new PropertyChangeSupport(eventSource);\n+  }\n+\n+  /** Sets the current value of the property and a property change\n+   * event is fired to all registered PropertyChangeListener instances.\n+   *\n+   * @param newValue The new value for the property.\n+   */\n+  public void setValue(Object newValue)\n+  {\n+    value = newValue;\n+\n+    // specification in java.beans.PropertyChangeEvent says\n+    // that without a property name (first argument) the\n+    // new and the old value should always be null\n+    pSupport.firePropertyChange(null, null, null);\n+  }\n+\n+  /** Gets the current value of the property.\n+   *\n+   * @return the current value of the property.\n+   */\n+  public Object getValue()\n+  {\n+    return value;\n+  }\n+\n+  /** Gets whether this object is paintable or not.\n+   *\n+   * @return <CODE>false</CODE>\n+   */\n+  public boolean isPaintable()\n+  {\n+    return false;\n+  }\n+\n+  /** Paints this object.  This class does nothing in\n+   * this method.\n+   */\n+  public void paintValue(java.awt.Graphics g, java.awt.Rectangle r)\n+  {\n+  }\n \n+  /** Gets the Java initialization String for the current\n+   * value of the Object.  This class returns gibberish or\n+   * null (though the spec does not say which).<P>\n+   * <STRONG>Implementation Note:</STRONG> This class\n+   * returns the string \"@$#^\" to make sure the code will\n+   * be broken, so that you will know to override it when\n+   * you create your own property editor.\n+   *\n+   * @return the Java initialization string.\n+   */\n+  public String getJavaInitializationString()\n+  {\n+    return \"@$#^\";\n+  }\n+\n+  /** Gets the value as text.\n+   * In this class, you cannot count on getAsText() doing\n+   * anything useful, although in this implementation I\n+   * do toString().\n+   *\n+   * @return the value as text.\n+   */\n+  public String getAsText()\n+  {\n+    return value != null ? value.toString() : \"null\";\n+  }\n+\n+  /** Sets the value as text.\n+   * In this class, you cannot count on setAsText() doing\n+   * anything useful across implementations.\n+   * <STRONG>Implementation Note:</STRONG> In this\n+   * implementation it checks if the String is \"null\", and\n+   * if it is, sets the value to null, otherwise it throws\n+   * an IllegalArgumentException.\n+   *\n+   * @param s the text to convert to a new value.\n+   * @exception IllegalArgumentException if the text is\n+   * malformed.\n+   */\n+  public void setAsText(String s) throws IllegalArgumentException\n+  {\n+    if (s.equals(\"null\"))\n+      setValue(null);\n+    else\n+      throw new IllegalArgumentException();\n+  }\n+\n+  /** Returns a list of possible choices for the value.\n+   *\n+   * @return <CODE>null</CODE>\n+   */\n+  public String[] getTags()\n+  {\n+    return null;\n+  }\n+\n+  /** Returns a custom component to edit the value.\n+   *\n+   * @return <CODE>null</CODE> in this class.\n+   */\n+  public java.awt.Component getCustomEditor()\n+  {\n+    return null;\n+  }\n+\n+  /** Finds out whether this property editor supports a\n+   * custom component to edit its value.\n+   *\n+   * @return <CODE>false</CODE> in this class.\n+   */\n+  public boolean supportsCustomEditor()\n+  {\n+    return false;\n+  }\n+\n+  /** Adds a property change listener to this property editor.\n+   *\n+   * @param l the listener to add.\n+   */\n+  public void addPropertyChangeListener(PropertyChangeListener l)\n+  {\n+    pSupport.addPropertyChangeListener(l);\n+  }\n+\n+  /** Removes a property change listener from this property editor.\n+   *\n+   * @param l the listener to remove.\n+   */\n+  public void removePropertyChangeListener(PropertyChangeListener l)\n+  {\n+    pSupport.removePropertyChangeListener(l);\n+  }\n+\n+  /** Notifies people that we've changed, although we don't\n+   * tell them just how.\n+   */\n+  public void firePropertyChange()\n+  {\n+    pSupport.firePropertyChange(null, null, null);\n+  }\n+\n+  /** Returns the bean that is used as the source of events.\n+   *\n+   * @return The event source object\n+   * @since 1.5\n+   */\n+  public Object getSource()\n+  {\n+    return eventSource;\n+  }\n+\n+  /** Sets the bean that is used as the source of events\n+   * when property changes occur.\n+   *\n+   * The event source bean is for informational purposes only\n+   * and should not be changed by the <code>PropertyEditor</code>.\n+   *\n+   * @param source\n+   * @since 1.5\n+   */\n+  public void setSource(Object source)\n+  {\n+    eventSource = source;\n+  }\n+}"}]}