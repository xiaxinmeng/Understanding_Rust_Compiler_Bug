{"sha": "304a15ec643310a4d18521ca36fea5bfed814768", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0YTE1ZWM2NDMzMTBhNGQxODUyMWNhMzZmZWE1YmZlZDgxNDc2OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-07-19T19:32:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-07-19T19:32:15Z"}, "message": "PR libstdc++/81476 Optimise vector insertion from input iterators\n\n\tPR libstdc++/81476\n\t* include/bits/vector.tcc (vector::_M_range_insert<_InputIterator>):\n\tOnly insert elements one-by-one when inserting at the end.\n\t* testsuite/performance/23_containers/insert/81476.cc: New.\n\nFrom-SVN: r250366", "tree": {"sha": "6d187a5210ebab0f62e67d23c11f87965ffb59f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d187a5210ebab0f62e67d23c11f87965ffb59f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/304a15ec643310a4d18521ca36fea5bfed814768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304a15ec643310a4d18521ca36fea5bfed814768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304a15ec643310a4d18521ca36fea5bfed814768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304a15ec643310a4d18521ca36fea5bfed814768/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cdcce60ff317b9a3feca930306194f110ed0171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdcce60ff317b9a3feca930306194f110ed0171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdcce60ff317b9a3feca930306194f110ed0171"}], "stats": {"total": 106, "additions": 103, "deletions": 3}, "files": [{"sha": "d60c5705486eda66424d396c70252ad9f6b7e8aa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304a15ec643310a4d18521ca36fea5bfed814768/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304a15ec643310a4d18521ca36fea5bfed814768/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=304a15ec643310a4d18521ca36fea5bfed814768", "patch": "@@ -1,3 +1,10 @@\n+2017-07-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/81476\n+\t* include/bits/vector.tcc (vector::_M_range_insert<_InputIterator>):\n+\tOnly insert elements one-by-one when inserting at the end.\n+\t* testsuite/performance/23_containers/insert/81476.cc: New.\n+\n 2017-07-19  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* libsupc++/new (bad_array_new_length): Remove redundant"}, {"sha": "da4a64cbd1f085faca75084238e20db37d6b5f7a", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304a15ec643310a4d18521ca36fea5bfed814768/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304a15ec643310a4d18521ca36fea5bfed814768/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=304a15ec643310a4d18521ca36fea5bfed814768", "patch": "@@ -617,10 +617,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_range_insert(iterator __pos, _InputIterator __first,\n \t\t      _InputIterator __last, std::input_iterator_tag)\n       {\n-\tfor (; __first != __last; ++__first)\n+\tif (__pos == end())\n \t  {\n-\t    __pos = insert(__pos, *__first);\n-\t    ++__pos;\n+\t    for (; __first != __last; ++__first)\n+\t      insert(end(), *__first);\n+\t  }\n+\telse if (__first != __last)\n+\t  {\n+\t    vector __tmp(__first, __last, _M_get_Tp_allocator());\n+\t    insert(__pos,\n+\t\t   _GLIBCXX_MAKE_MOVE_ITERATOR(__tmp.begin()),\n+\t\t   _GLIBCXX_MAKE_MOVE_ITERATOR(__tmp.end()));\n \t  }\n       }\n "}, {"sha": "2b76469ae11235bf39206ad1a2326e231fbaed4a", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert/81476.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304a15ec643310a4d18521ca36fea5bfed814768/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2F81476.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304a15ec643310a4d18521ca36fea5bfed814768/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2F81476.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2F81476.cc?ref=304a15ec643310a4d18521ca36fea5bfed814768", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2012-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <random>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+\n+  std::default_random_engine eng;\n+  std::uniform_int_distribution<unsigned> r(0, 127);\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  std::vector<std::vector<char>> vecs(10000);\n+  for (auto& v : vecs)\n+  {\n+    v.resize(1000);\n+    for (auto& c : v)\n+      c = r(eng);\n+  }\n+\n+  start_counters(time, resource);\n+  std::vector<char> res;\n+  for (auto& v : vecs)\n+    res.insert(res.begin(), v.begin(), v.end());\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"insert pointers\", time, resource);\n+\n+  struct input_iterator : std::vector<char>::iterator\n+  {\n+    using iterator_category = std::input_iterator_tag;\n+    using base = std::vector<char>::iterator;\n+\n+    input_iterator(base it) : base(it) { }\n+  };\n+\n+  start_counters(time, resource);\n+  std::vector<char> res2;\n+  for (auto& v : vecs)\n+  {\n+    auto begin = input_iterator(v.begin());\n+    auto end = input_iterator(v.end());\n+    res2.insert(res2.begin(), begin, end);\n+  }\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"insert input iterators\", time, resource);\n+\n+  start_counters(time, resource);\n+  std::vector<char> res3;\n+  for (auto rev = vecs.rbegin(); rev != vecs.rend(); ++rev)\n+    res3.insert(res3.end(), rev->begin(), rev->end());\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"insert pointers end\", time, resource);\n+\n+  start_counters(time, resource);\n+  std::vector<char> res4;\n+  for (auto rev = vecs.rbegin(); rev != vecs.rend(); ++rev)\n+    res4.insert(res4.end(), rev->begin(), rev->end());\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"insert input iterators end\", time, resource);\n+\n+  VERIFY(res2 == res);\n+  VERIFY(res3 == res);\n+  VERIFY(res4 == res);\n+}"}]}