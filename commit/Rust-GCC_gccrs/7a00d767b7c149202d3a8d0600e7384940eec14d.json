{"sha": "7a00d767b7c149202d3a8d0600e7384940eec14d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EwMGQ3NjdiN2MxNDkyMDJkM2E4ZDA2MDBlNzM4NDk0MGVlYzE0ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-28T09:48:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-28T09:48:04Z"}, "message": "re PR target/39323 (MAX_OFILE_ALIGNMENT in elfos.h is too big)\n\n\tPR c/39323\n\t* config/alpha/elf.h (MAX_OFILE_ALIGNMENT): Sync with elfos.h\n\ntestsuite/ChangeLog:\n\n\tPR c/39323\n\t* gcc.dg/pr39323-2.c: Also scan for alignment in log2 format.\n\t* gcc.dg/pr39323-3.c: Ditto.\n\nFrom-SVN: r146881", "tree": {"sha": "aca22c0249070943f8373f66087cdd3772423aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aca22c0249070943f8373f66087cdd3772423aaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a00d767b7c149202d3a8d0600e7384940eec14d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a00d767b7c149202d3a8d0600e7384940eec14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a00d767b7c149202d3a8d0600e7384940eec14d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a00d767b7c149202d3a8d0600e7384940eec14d/comments", "author": null, "committer": null, "parents": [{"sha": "6596e2fe5a8a24d62431577ef3c9c8e67682f9a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6596e2fe5a8a24d62431577ef3c9c8e67682f9a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6596e2fe5a8a24d62431577ef3c9c8e67682f9a3"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "ecf5300315aad4cec14c0b39fefba173046203f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a00d767b7c149202d3a8d0600e7384940eec14d", "patch": "@@ -1,3 +1,8 @@\n+2009-04-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR c/39323\n+\t* config/alpha/elf.h (MAX_OFILE_ALIGNMENT): Sync with elfos.h\n+\n 2009-04-28  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (SSA_NAME_VALUE): Remove.\n@@ -34,7 +39,7 @@\n \t* tree-vectorizer.h (enum vect_def_type): Rename vect_invariant_def and\n \tvect_loop_def to vect_external_def and vect_internal_def.\n \t(enum verbosity_levels): Rename REPORT_VECTORIZED_LOOPS\n-        and REPORT_UNVECTORIZED_LOOPS to REPORT_VECTORIZED_LOCATIONS and \n+\tand REPORT_UNVECTORIZED_LOOPS to REPORT_VECTORIZED_LOCATIONS and \n \tREPORT_UNVECTORIZED_LOCATIONS.\n \t(enum vect_relevant): Update comment. Rename vect_unused_in_loop\n \tand vect_used_in_loop and to vect_unused_in_scope and \n@@ -123,19 +128,16 @@\n \t* hooks.c (hook_int_void_no_regs): Remove function.\n \t* hooks.h (hook_int_void_no_regs): Remove declaration.\n \t* optabs.c (expand_widen_pattern_expr): Change 0 to VOIDmode.\n-\t* predict.c (combine_predictions_for_insn): Add casts to enum\n-\ttype.\n+\t* predict.c (combine_predictions_for_insn): Add casts to enum type.\n \t* real.c (real_arithmetic): Add cast to enum type.\n \t(real_compare): Likewise.\n \t* target.h (struct gcc_target): Change return type of\n \tbranch_target_register_class to enum reg_class.\n \t* target-def.h (TARGET_BRANCH_TARGET_REGISTER_CLASS): Define as\n \tdefault_branch_target_register_class.\n-\t* targhooks.c (default_branch_target_register_class): New\n-\tfunction.\n+\t* targhooks.c (default_branch_target_register_class): New function.\n \t* targhooks.h (default_branch_target_register_class): Declare.\n-\t* tree-data-ref.c (print_direction_vector): Add cast to enum\n-\ttype.\n+\t* tree-data-ref.c (print_direction_vector): Add cast to enum type.\n \t* tree-vect-data-refs.c (vect_supportable_dr_alignment): Remove\n \tcast to int.\n \t* tree-vect-loop.c (vect_create_epilog_for_reduction): Change 0 to\n@@ -144,8 +146,7 @@\n \tvect_uninitialized_def.  Change 0 to ERROR_MARK.\n \t* tree-vect-stmts.c (supportable_widening_operation): Don't\n \tinitialize icode1 and icode2.\n-\t* tree-vectorizer.h (enum vect_def_type): Add\n-\tvect_uninitialized_def.\n+\t* tree-vectorizer.h (enum vect_def_type): Add vect_uninitialized_def.\n \t* config/sol2-c.c (cmn_err_length_specs): Change 0 to FMT_LEN_none\n \tand to STD_C89.\n \t(cmn_err_flag_specs): Change 0 to STD_C89.\n@@ -171,8 +172,7 @@\n \tcasts to enum type.\n \t* config/s390/s390.c (s390_tune_flags): Change type to int.\n \t(s390_arch_flags): Likewise.\n-\t(s390_handle_arch_option): Change flags field of struct pta to\n-\tint.\n+\t(s390_handle_arch_option): Change flags field of struct pta to int.\n \t* config/s390/s390.h (s390_tune_flags): Update declaration.\n \t(s390_arch_flags): Likewise.\n \t* config/sh/sh.c (prepare_move_operands): Compare\n@@ -187,10 +187,8 @@\n \t(sh_target_reg_class): Change return type to enum reg_class.\n \t* config/sh/sh.h (OVERRIDE_OPTIONS): Change CPU_xxx to\n \tPROCESSOR_xxx.\n-\t* config/sh/sh-protos.h (tls_symbolic_operand): Update\n-\tdeclaration.\n-\t* config/sparc/sparc.c (sparc_override_options): Add cast to enum\n-\ttype.\n+\t* config/sh/sh-protos.h (tls_symbolic_operand): Update declaration.\n+\t* config/sparc/sparc.c (sparc_override_options): Add cast to enum type.\n \t* config/sparc/sparc.md (empty_delay_slot): Return enum constant.\n \t(pic, calls_alloca, calls_eh_return, leaf_function): Likewise.\n \t(delayed_branch, tls_call_delay): Likewise.\n@@ -210,16 +208,13 @@\n \n \t* doc/c-tree.texi (Types, Functions, Expression trees): Fix\n \tgrammar nits.\n-\t* doc/cfg.texi (Maintaining the CFG, Liveness information):\n-\tLikewise.\n+\t* doc/cfg.texi (Maintaining the CFG, Liveness information): Likewise.\n \t* doc/cpp.texi (Standard Predefined Macros)\n \t(Implementation-defined behavior): Likewise.\n-\t* doc/extend.texi (Function Attributes, Type Attributes):\n-\tLikewise.\n+\t* doc/extend.texi (Function Attributes, Type Attributes): Likewise.\n \t* doc/gimple.texi (GIMPLE Exception Handling)\n \t(@code{GIMPLE_ASSIGN}): Likewise.\n-\t* doc/install.texi (Prerequisites, Configuration, Specific):\n-\tLikewise.\n+\t* doc/install.texi (Prerequisites, Configuration, Specific): Likewise.\n \t* doc/invoke.texi (Warning Options, Optimize Options)\n \t(AVR Options, Darwin Options): Likewise.\n \t(Optimize Options): Reformulate -fwhole-program description.\n@@ -247,8 +242,7 @@\n \t(exp2_immediate_p, spu_gen_exp2): Define.\n \t* spu-builtins.def (spu_convts, spu_convtu, spu_convtf_0,\n \tspu_convtf_1): Update parameter descriptions.\n-\t* spu-builtins.md (spu_csflt, spu_cuflt, spu_cflts, spu_cfltu):\n-\tUpdate.\n+\t* spu-builtins.md (spu_csflt, spu_cuflt, spu_cflts, spu_cfltu): Update.\n \t* constraints.md ('v', 'w'): New.\n \t* spu.md (UNSPEC_CSFLT, UNSPEC_CFLTS, UNSPEC_CUFLT, UNSPEC_CFLTU):\n \tRemove."}, {"sha": "24ab5f66b8c13d47f6d42c81ed777728cf91adf4", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=7a00d767b7c149202d3a8d0600e7384940eec14d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha w/ELF.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2007, 2008,\n+   2009 Free Software Foundation, Inc.\n    Contributed by Richard Henderson (rth@tamu.edu).\n \n This file is part of GCC.\n@@ -142,18 +142,20 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_ALIGNED_LOCAL (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n } while (0)\n \n-/* Biggest alignment supported by the object file format of this\n-   machine.  Use this macro to limit the alignment which can be\n-   specified using the `__attribute__ ((aligned (N)))' construct.  If\n-   not defined, the default value is `BIGGEST_ALIGNMENT'. \n+/* The biggest alignment supported by ELF in bits. 32-bit ELF \n+   supports section alignment up to (0x80000000 * 8), while \n+   64-bit ELF supports (0x8000000000000000 * 8). If this macro \n+   is not defined, the default is the largest alignment supported \n+   by 32-bit ELF and representable on a 32-bit host. Use this\n+   macro to limit the alignment which can be specified using\n+   the `__attribute__ ((aligned (N)))' construct.\n \n    This value is really 2^63.  Since gcc figures the alignment in bits,\n    we could only potentially get to 2^60 on suitable hosts.  Due to other\n    considerations in varasm, we must restrict this to what fits in an int.  */\n \n #undef  MAX_OFILE_ALIGNMENT\n-#define MAX_OFILE_ALIGNMENT \\\n-  (1 << (HOST_BITS_PER_INT < 64 ? HOST_BITS_PER_INT - 2 : 62))\n+#define MAX_OFILE_ALIGNMENT (((unsigned int) 1 << 28) * 8)\n \n /* This is the pseudo-op used to generate a contiguous sequence of byte\n    values from a double-quoted string WITHOUT HAVING A TERMINATING NUL"}, {"sha": "79a0679138225ee44202d4e7dad551b80815d14d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a00d767b7c149202d3a8d0600e7384940eec14d", "patch": "@@ -1,3 +1,9 @@\n+2009-04-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR c/39323\n+\t* gcc.dg/pr39323-2.c: Also scan for alignment in log2 format.\n+\t* gcc.dg/pr39323-3.c: Ditto.\n+\n 2009-04-28  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/39930"}, {"sha": "9304c74bc4f1955af1d6afc79a48bbe92b502f2d", "filename": "gcc/testsuite/gcc.dg/pr39323-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-2.c?ref=7a00d767b7c149202d3a8d0600e7384940eec14d", "patch": "@@ -3,4 +3,4 @@\n \n int bar __attribute__ ((aligned(1 << 28))) =  20;\n \n-/* { dg-final { scan-assembler \"\\.align\\[\\\\t \\]*268435456\" } } */\n+/* { dg-final { scan-assembler \".align\\[ \\t\\]+(268435456|28)\\[ \\t\\]*\\n\" } } */"}, {"sha": "c045f17c832d86c85365c5014a4bfe345331869a", "filename": "gcc/testsuite/gcc.dg/pr39323-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a00d767b7c149202d3a8d0600e7384940eec14d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-3.c?ref=7a00d767b7c149202d3a8d0600e7384940eec14d", "patch": "@@ -4,4 +4,4 @@\n typedef int __attribute__ ((aligned(1 << 28))) int28;\n int28 foo = 20;\n \n-/* { dg-final { scan-assembler \"\\.align\\[\\\\t \\]*268435456\" } } */\n+/* { dg-final { scan-assembler \".align\\[ \\t\\]+(268435456|28)\\[ \\t\\]*\\n\" } } */"}]}