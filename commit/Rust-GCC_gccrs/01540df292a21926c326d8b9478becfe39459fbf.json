{"sha": "01540df292a21926c326d8b9478becfe39459fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE1NDBkZjI5MmEyMTkyNmMzMjZkOGI5NDc4YmVjZmUzOTQ1OWZiZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-31T16:45:47Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-31T16:45:47Z"}, "message": "tree-vrp: add \"const\" qualifier to various value_range pointers\n\ngcc/ChangeLog:\n\t* tree-vrp.c (copy_value_range): Convert param \"from\" from\n\t\"value_range *\" to \"const value_range *\".\n\t(range_is_null): Likewise for param \"vr\".\n\t(range_int_cst_p): Likewise.\n\t(range_int_cst_singleton_p): Likewise.\n\t(symbolic_range_p): Likewise.\n\t(value_ranges_intersect_p): Likewise for both params.\n\t(value_range_nonnegative_p): Likewise for param \"vr\".\n\t(value_range_constant_singleton): Likewise.\n\t(vrp_set_zero_nonzero_bits): Likewise for param \"ar\".\n\t(extract_range_into_wide_ints): Likewise for param \"vr\".\n\t(extract_range_from_multiplicative_op): Likewise for params \"vr0\"\n\tand \"vr1\".\n\t(vrp_can_optimize_bit_op): Likewise.\n\t(extract_range_from_binary_expr_1): Likewise for params \"vr0_\" and\n\t\"vr1_\".\n\t(extract_range_from_unary_expr): Likewise.\n\t(debug_value_range): Likewise for param \"vr\".\n\t(value_range::dump): Add \"const\" qualifier.\n\t(vrp_prop::check_array_ref): Convert local \"vr\" from\n\t\"value_range *\" to \"const value_range *\".\n\t(vrp_prop::check_mem_ref): Likewise.\n\t(vrp_prop::visit_stmt): Likewise for local \"old_vr\".\n\t(vrp_intersect_ranges_1): Likewise for param \"vr_1\".\n\t(vrp_intersect_ranges): Likewise.\n\t(simplify_stmt_for_jump_threading): Likewise for local \"vr\".\n\t(vrp_prop::vrp_finalize): Likewise.\n\t* tree-vrp.h (value_range::dump): Add \"const\" qualifier.\n\t(vrp_intersect_ranges): Add \"const\" qualifier to params as above.\n\t(extract_range_from_unary_expr): Likewise.\n\t(value_range_constant_singleton): Likewise.\n\t(symbolic_range_p): Likewise.\n\t(copy_value_range): Likewise.\n\t(extract_range_from_binary_expr_1): Likewise.\n\t(range_int_cst_p): Likewise.\n\t(vrp_set_zero_nonzero_bits): Likewise.\n\t(range_int_cst_singleton_p): Likewise.\n\nFrom-SVN: r264020", "tree": {"sha": "b0089c20e68e94cee34ae003a01aabff6677f5b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0089c20e68e94cee34ae003a01aabff6677f5b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01540df292a21926c326d8b9478becfe39459fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01540df292a21926c326d8b9478becfe39459fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01540df292a21926c326d8b9478becfe39459fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01540df292a21926c326d8b9478becfe39459fbf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66da5b53107962a1c115a9686f2220de27f276f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66da5b53107962a1c115a9686f2220de27f276f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66da5b53107962a1c115a9686f2220de27f276f7"}], "stats": {"total": 114, "additions": 78, "deletions": 36}, "files": [{"sha": "e48b983fcd5814832feee837e1914230709de109", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01540df292a21926c326d8b9478becfe39459fbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01540df292a21926c326d8b9478becfe39459fbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01540df292a21926c326d8b9478becfe39459fbf", "patch": "@@ -1,3 +1,43 @@\n+2018-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* tree-vrp.c (copy_value_range): Convert param \"from\" from\n+\t\"value_range *\" to \"const value_range *\".\n+\t(range_is_null): Likewise for param \"vr\".\n+\t(range_int_cst_p): Likewise.\n+\t(range_int_cst_singleton_p): Likewise.\n+\t(symbolic_range_p): Likewise.\n+\t(value_ranges_intersect_p): Likewise for both params.\n+\t(value_range_nonnegative_p): Likewise for param \"vr\".\n+\t(value_range_constant_singleton): Likewise.\n+\t(vrp_set_zero_nonzero_bits): Likewise for param \"ar\".\n+\t(extract_range_into_wide_ints): Likewise for param \"vr\".\n+\t(extract_range_from_multiplicative_op): Likewise for params \"vr0\"\n+\tand \"vr1\".\n+\t(vrp_can_optimize_bit_op): Likewise.\n+\t(extract_range_from_binary_expr_1): Likewise for params \"vr0_\" and\n+\t\"vr1_\".\n+\t(extract_range_from_unary_expr): Likewise.\n+\t(debug_value_range): Likewise for param \"vr\".\n+\t(value_range::dump): Add \"const\" qualifier.\n+\t(vrp_prop::check_array_ref): Convert local \"vr\" from\n+\t\"value_range *\" to \"const value_range *\".\n+\t(vrp_prop::check_mem_ref): Likewise.\n+\t(vrp_prop::visit_stmt): Likewise for local \"old_vr\".\n+\t(vrp_intersect_ranges_1): Likewise for param \"vr_1\".\n+\t(vrp_intersect_ranges): Likewise.\n+\t(simplify_stmt_for_jump_threading): Likewise for local \"vr\".\n+\t(vrp_prop::vrp_finalize): Likewise.\n+\t* tree-vrp.h (value_range::dump): Add \"const\" qualifier.\n+\t(vrp_intersect_ranges): Add \"const\" qualifier to params as above.\n+\t(extract_range_from_unary_expr): Likewise.\n+\t(value_range_constant_singleton): Likewise.\n+\t(symbolic_range_p): Likewise.\n+\t(copy_value_range): Likewise.\n+\t(extract_range_from_binary_expr_1): Likewise.\n+\t(range_int_cst_p): Likewise.\n+\t(vrp_set_zero_nonzero_bits): Likewise.\n+\t(range_int_cst_singleton_p): Likewise.\n+\n 2018-08-31  Vlad Lazar  <vlad.lazar@arm.com>\n \n \t* config/aarch64/arm_neon.h (vabsd_s64): New."}, {"sha": "c1774dc736cc7d794b3452deb0e54fbbf2045689", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01540df292a21926c326d8b9478becfe39459fbf/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01540df292a21926c326d8b9478becfe39459fbf/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=01540df292a21926c326d8b9478becfe39459fbf", "patch": "@@ -442,7 +442,7 @@ set_and_canonicalize_value_range (value_range *vr, enum value_range_type t,\n /* Copy value range FROM into value range TO.  */\n \n void\n-copy_value_range (value_range *to, value_range *from)\n+copy_value_range (value_range *to, const value_range *from)\n {\n   set_value_range (to, from->type, from->min, from->max, from->equiv);\n }\n@@ -505,7 +505,7 @@ vrp_bitmap_equal_p (const_bitmap b1, const_bitmap b2)\n /* Return true if VR is [0, 0].  */\n \n static inline bool\n-range_is_null (value_range *vr)\n+range_is_null (const value_range *vr)\n {\n   return vr->type == VR_RANGE\n \t && integer_zerop (vr->min)\n@@ -516,7 +516,7 @@ range_is_null (value_range *vr)\n    a singleton.  */\n \n bool\n-range_int_cst_p (value_range *vr)\n+range_int_cst_p (const value_range *vr)\n {\n   return (vr->type == VR_RANGE\n \t  && TREE_CODE (vr->max) == INTEGER_CST\n@@ -526,7 +526,7 @@ range_int_cst_p (value_range *vr)\n /* Return true if VR is a INTEGER_CST singleton.  */\n \n bool\n-range_int_cst_singleton_p (value_range *vr)\n+range_int_cst_singleton_p (const value_range *vr)\n {\n   return (range_int_cst_p (vr)\n \t  && tree_int_cst_equal (vr->min, vr->max));\n@@ -535,7 +535,7 @@ range_int_cst_singleton_p (value_range *vr)\n /* Return true if value range VR involves at least one symbol.  */\n \n bool\n-symbolic_range_p (value_range *vr)\n+symbolic_range_p (const value_range *vr)\n {\n   return (!is_gimple_min_invariant (vr->min)\n           || !is_gimple_min_invariant (vr->max));\n@@ -856,7 +856,7 @@ value_inside_range (tree val, tree min, tree max)\n    */\n \n static inline bool\n-value_ranges_intersect_p (value_range *vr0, value_range *vr1)\n+value_ranges_intersect_p (const value_range *vr0, const value_range *vr1)\n {\n   /* The value ranges do not intersect if the maximum of the first range is\n      less than the minimum of the second range or vice versa.\n@@ -893,7 +893,7 @@ range_includes_zero_p (const value_range *vr)\n /* Return true if *VR is know to only contain nonnegative values.  */\n \n static inline bool\n-value_range_nonnegative_p (value_range *vr)\n+value_range_nonnegative_p (const value_range *vr)\n {\n   /* Testing for VR_ANTI_RANGE is not useful here as any anti-range\n      which would return a useful value should be encoded as a \n@@ -911,7 +911,7 @@ value_range_nonnegative_p (value_range *vr)\n    otherwise return NULL_TREE.  */\n \n tree\n-value_range_constant_singleton (value_range *vr)\n+value_range_constant_singleton (const value_range *vr)\n {\n   if (vr->type == VR_RANGE\n       && vrp_operand_equal_p (vr->min, vr->max)\n@@ -930,7 +930,7 @@ value_range_constant_singleton (value_range *vr)\n \n bool\n vrp_set_zero_nonzero_bits (const tree expr_type,\n-\t\t\t   value_range *vr,\n+\t\t\t   const value_range *vr,\n \t\t\t   wide_int *may_be_nonzero,\n \t\t\t   wide_int *must_be_nonzero)\n {\n@@ -953,7 +953,7 @@ vrp_set_zero_nonzero_bits (const tree expr_type,\n    *VR1 will be VR_UNDEFINED.  */\n \n static bool\n-ranges_from_anti_range (value_range *ar,\n+ranges_from_anti_range (const value_range *ar,\n \t\t\tvalue_range *vr0, value_range *vr1)\n {\n   tree type = TREE_TYPE (ar->min);\n@@ -999,7 +999,7 @@ ranges_from_anti_range (value_range *ar,\n    resulting wide ints are set to [-MIN, +MAX] for the type.  */\n \n static void inline\n-extract_range_into_wide_ints (value_range *vr,\n+extract_range_into_wide_ints (const value_range *vr,\n \t\t\t      signop sign, unsigned prec,\n \t\t\t      wide_int &wmin, wide_int &wmax)\n {\n@@ -1033,7 +1033,8 @@ vrp_shift_undefined_p (const value_range &shifter, unsigned prec)\n static void\n extract_range_from_multiplicative_op (value_range *vr,\n \t\t\t\t      enum tree_code code,\n-\t\t\t\t      value_range *vr0, value_range *vr1)\n+\t\t\t\t      const value_range *vr0,\n+\t\t\t\t      const value_range *vr1)\n {\n   gcc_assert (code == MULT_EXPR\n \t      || code == TRUNC_DIV_EXPR\n@@ -1073,7 +1074,7 @@ extract_range_from_multiplicative_op (value_range *vr,\n \n static bool\n vrp_can_optimize_bit_op (value_range *vr, enum tree_code code,\n-\t\t\t value_range *vr0, value_range *vr1)\n+\t\t\t const value_range *vr0, const value_range *vr1)\n {\n   tree lower_bound, upper_bound, mask;\n   if (code != BIT_AND_EXPR && code != BIT_IOR_EXPR)\n@@ -1282,7 +1283,8 @@ set_value_range_with_overflow (value_range &vr,\n void\n extract_range_from_binary_expr_1 (value_range *vr,\n \t\t\t\t  enum tree_code code, tree expr_type,\n-\t\t\t\t  value_range *vr0_, value_range *vr1_)\n+\t\t\t\t  const value_range *vr0_,\n+\t\t\t\t  const value_range *vr1_)\n {\n   signop sign = TYPE_SIGN (expr_type);\n   unsigned int prec = TYPE_PRECISION (expr_type);\n@@ -1810,7 +1812,7 @@ extract_range_from_binary_expr_1 (value_range *vr,\n void\n extract_range_from_unary_expr (value_range *vr,\n \t\t\t       enum tree_code code, tree type,\n-\t\t\t       value_range *vr0_, tree op0_type)\n+\t\t\t       const value_range *vr0_, tree op0_type)\n {\n   signop sign = TYPE_SIGN (type);\n   unsigned int prec = TYPE_PRECISION (type);\n@@ -1962,7 +1964,7 @@ extract_range_from_unary_expr (value_range *vr,\n /* Debugging dumps.  */\n \n void dump_value_range (FILE *, const value_range *);\n-void debug_value_range (value_range *);\n+void debug_value_range (const value_range *);\n void dump_all_value_ranges (FILE *);\n void dump_vr_equiv (FILE *, bitmap);\n void debug_vr_equiv (bitmap);\n@@ -2027,14 +2029,14 @@ dump_value_range (FILE *file, const value_range *vr)\n /* Dump value range VR to stderr.  */\n \n DEBUG_FUNCTION void\n-debug_value_range (value_range *vr)\n+debug_value_range (const value_range *vr)\n {\n   dump_value_range (stderr, vr);\n   fprintf (stderr, \"\\n\");\n }\n \n void\n-value_range::dump ()\n+value_range::dump () const\n {\n   debug_value_range (this);\n }\n@@ -4214,7 +4216,7 @@ void\n vrp_prop::check_array_ref (location_t location, tree ref,\n \t\t\t   bool ignore_off_by_one)\n {\n-  value_range *vr = NULL;\n+  const value_range *vr = NULL;\n   tree low_sub, up_sub;\n   tree low_bound, up_bound, up_bound_p1;\n \n@@ -4383,7 +4385,7 @@ vrp_prop::check_mem_ref (location_t location, tree ref,\n   /* The range of the byte offset into the reference.  */\n   offset_int offrange[2] = { 0, 0 };\n \n-  value_range *vr = NULL;\n+  const value_range *vr = NULL;\n \n   /* Determine the offsets and increment OFFRANGE for the bounds of each.\n      The loop computes the the range of the final offset for expressions\n@@ -5273,7 +5275,7 @@ vrp_prop::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n \t\t   return SSA_PROP_VARYING.  */\n \t\tvalue_range new_vr = VR_INITIALIZER;\n \t\textract_range_basic (&new_vr, use_stmt);\n-\t\tvalue_range *old_vr = get_value_range (use_lhs);\n+\t\tconst value_range *old_vr = get_value_range (use_lhs);\n \t\tif (old_vr->type != new_vr.type\n \t\t    || !vrp_operand_equal_p (old_vr->min, new_vr.min)\n \t\t    || !vrp_operand_equal_p (old_vr->max, new_vr.max)\n@@ -5901,7 +5903,7 @@ intersect_ranges (enum value_range_type *vr0type,\n    in *VR0.  This may not be the smallest possible such range.  */\n \n static void\n-vrp_intersect_ranges_1 (value_range *vr0, value_range *vr1)\n+vrp_intersect_ranges_1 (value_range *vr0, const value_range *vr1)\n {\n   value_range saved;\n \n@@ -5958,7 +5960,7 @@ vrp_intersect_ranges_1 (value_range *vr0, value_range *vr1)\n }\n \n void\n-vrp_intersect_ranges (value_range *vr0, value_range *vr1)\n+vrp_intersect_ranges (value_range *vr0, const value_range *vr1)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -6271,7 +6273,7 @@ simplify_stmt_for_jump_threading (gimple *stmt, gimple *within_stmt,\n \n       op = lhs_of_dominating_assert (op, bb, stmt);\n \n-      value_range *vr = vr_values->get_value_range (op);\n+      const value_range *vr = vr_values->get_value_range (op);\n       if ((vr->type != VR_RANGE && vr->type != VR_ANTI_RANGE)\n \t  || symbolic_range_p (vr))\n \treturn NULL_TREE;\n@@ -6520,7 +6522,7 @@ vrp_prop::vrp_finalize (bool warn_array_bounds_p)\n       if (!name)\n \tcontinue;\n \n-      value_range *vr = get_value_range (name);\n+      const value_range *vr = get_value_range (name);\n       if (!name\n \t  || (vr->type == VR_VARYING)\n \t  || (vr->type == VR_UNDEFINED)"}, {"sha": "2f661613dfcbb95a453fc17fe8444b28b6ca2e3f", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01540df292a21926c326d8b9478becfe39459fbf/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01540df292a21926c326d8b9478becfe39459fbf/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=01540df292a21926c326d8b9478becfe39459fbf", "patch": "@@ -51,16 +51,16 @@ struct GTY((for_user)) value_range\n   bitmap equiv;\n \n   /* Dump value range to stderr.  */\n-  void dump ();\n+  void dump () const;\n };\n \n-extern void vrp_intersect_ranges (value_range *vr0, value_range *vr1);\n+extern void vrp_intersect_ranges (value_range *vr0, const value_range *vr1);\n extern void vrp_meet (value_range *vr0, const value_range *vr1);\n extern void dump_value_range (FILE *, const value_range *);\n extern void extract_range_from_unary_expr (value_range *vr,\n \t\t\t\t\t   enum tree_code code,\n \t\t\t\t\t   tree type,\n-\t\t\t\t\t   value_range *vr0_,\n+\t\t\t\t\t   const value_range *vr0_,\n \t\t\t\t\t   tree op0_type);\n \n extern bool vrp_operand_equal_p (const_tree, const_tree);\n@@ -96,28 +96,28 @@ extern void set_and_canonicalize_value_range (value_range *,\n \t\t\t\t\t      enum value_range_type,\n \t\t\t\t\t      tree, tree, bitmap);\n extern bool vrp_bitmap_equal_p (const_bitmap, const_bitmap);\n-extern tree value_range_constant_singleton (value_range *);\n-extern bool symbolic_range_p (value_range *);\n+extern tree value_range_constant_singleton (const value_range *);\n+extern bool symbolic_range_p (const value_range *);\n extern int compare_values (tree, tree);\n extern int compare_values_warnv (tree, tree, bool *);\n extern bool vrp_val_is_min (const_tree);\n extern bool vrp_val_is_max (const_tree);\n-extern void copy_value_range (value_range *, value_range *);\n+extern void copy_value_range (value_range *, const value_range *);\n extern void set_value_range_to_value (value_range *, tree, bitmap);\n extern void extract_range_from_binary_expr_1 (value_range *, enum tree_code,\n-\t\t\t\t\t      tree, value_range *,\n-\t\t\t\t\t      value_range *);\n+\t\t\t\t\t      tree, const value_range *,\n+\t\t\t\t\t      const value_range *);\n extern tree vrp_val_min (const_tree);\n extern tree vrp_val_max (const_tree);\n extern void set_value_range_to_null (value_range *, tree);\n-extern bool range_int_cst_p (value_range *);\n+extern bool range_int_cst_p (const value_range *);\n extern int operand_less_p (tree, tree);\n extern bool find_case_label_range (gswitch *, tree, tree, size_t *, size_t *);\n extern bool find_case_label_index (gswitch *, size_t, tree, size_t *);\n-extern bool vrp_set_zero_nonzero_bits (const tree, value_range *,\n+extern bool vrp_set_zero_nonzero_bits (const tree, const value_range *,\n \t\t\t\t       wide_int *, wide_int *);\n extern bool overflow_comparison_p (tree_code, tree, tree, bool, tree *);\n-extern bool range_int_cst_singleton_p (value_range *);\n+extern bool range_int_cst_singleton_p (const value_range *);\n extern int value_inside_range (tree, tree, tree);\n extern tree get_single_symbol (tree, bool *, tree *);\n extern void maybe_set_nonzero_bits (edge, tree);"}]}