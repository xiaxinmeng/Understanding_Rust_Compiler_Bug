{"sha": "bc725565dfd2f7d764fd852906770119f0e85ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM3MjU1NjVkZmQyZjdkNzY0ZmQ4NTI5MDY3NzAxMTlmMGU4NWFlNw==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1999-04-02T21:58:42Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "1999-04-02T21:58:42Z"}, "message": "i386.md (floatsisf2, [...]): Rewrite using a splitter.\n\n\t* i386.md (floatsisf2, floatdisf2, floatsidf2, floatdidf2,\n\tfloatsixf2, floatdixf2): Rewrite using a splitter.\n\nFrom-SVN: r26145", "tree": {"sha": "3d392a802de470812851af131c0c51138d1ed2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d392a802de470812851af131c0c51138d1ed2c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc725565dfd2f7d764fd852906770119f0e85ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc725565dfd2f7d764fd852906770119f0e85ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc725565dfd2f7d764fd852906770119f0e85ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc725565dfd2f7d764fd852906770119f0e85ae7/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bc74ece1e4bde31ce14bb15831d6b3acf45f214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc74ece1e4bde31ce14bb15831d6b3acf45f214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc74ece1e4bde31ce14bb15831d6b3acf45f214"}], "stats": {"total": 316, "additions": 213, "deletions": 103}, "files": [{"sha": "27384c1fad045e135e417fdb15a8c35754260203", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc725565dfd2f7d764fd852906770119f0e85ae7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc725565dfd2f7d764fd852906770119f0e85ae7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc725565dfd2f7d764fd852906770119f0e85ae7", "patch": "@@ -1,3 +1,8 @@\n+Sat Apr  3 00:53:29 EST 1999  John Wehle  (john@feith.com)\n+\n+\t* i386.md (floatsisf2, floatdisf2, floatsidf2, floatdidf2,\n+\tfloatsixf2, floatdixf2): Rewrite using a splitter.\n+\n Fri Apr  2 17:36:10 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.c (arm_print_operand): Print large constants in"}, {"sha": "d434366d3204ddcbc3931f23639f5dd53d81762a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 208, "deletions": 103, "changes": 311, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc725565dfd2f7d764fd852906770119f0e85ae7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc725565dfd2f7d764fd852906770119f0e85ae7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bc725565dfd2f7d764fd852906770119f0e85ae7", "patch": "@@ -2614,149 +2614,254 @@\n   \"* return output_fix_trunc (insn, operands);\")\n \f\n ;; Conversion between fixed point and floating point.\n-;; The actual pattern that matches these is at the end of this file.\n \n ;; ??? Possibly represent floatunssidf2 here in gcc2.\n \n (define_expand \"floatsisf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n+  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+\t      (clobber (match_dup 2))])]\n+  \"TARGET_80387\"\n+  \"operands[2] = assign_386_stack_local (SImode, 0);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n+\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,!r\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m,m\"))]\n   \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float:SF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float:SF (match_dup 2)))]\n   \"\")\n \n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_80387\"\n+  \"* return AS1 (fild%z1,%1);\"\n+  [(set_attr \"type\" \"fpop\")])\n+\n (define_expand \"floatdisf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n+  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))\n+\t      (clobber (match_dup 2))])]\n   \"TARGET_80387\"\n-  \"\")\n+  \"operands[2] = assign_386_stack_local (DImode, 0);\")\n \n-(define_expand \"floatsidf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n+\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,!r\")))\n+      (clobber (match_operand:DI 2 \"memory_operand\" \"m,o\"))]\n   \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float:SF (match_operand:DI 1 \"memory_operand\" \"m\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float:SF (match_dup 1)))]\n   \"\")\n \n-(define_expand \"floatdidf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float:SF (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"o\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float:SF (match_dup 2)))]\n   \"\")\n \n-(define_expand \"floatsixf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float:SF (match_operand:DI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_80387\"\n+  \"* return AS1 (fild%z1,%1);\"\n+  [(set_attr \"type\" \"fpop\")])\n+\n+(define_expand \"floatsidf2\"\n+  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+\t      (clobber (match_dup 2))])]\n   \"TARGET_80387\"\n+  \"operands[2] = assign_386_stack_local (SImode, 0);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n+\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"m,!r\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m,m\"))]\n+  \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(float:DF (match_operand:SI 1 \"memory_operand\" \"m\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float:DF (match_dup 1)))]\n   \"\")\n \n-(define_expand \"floatdixf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t(float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 && LONG_DOUBLE_TYPE_SIZE == 96\"\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(float:DF (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float:DF (match_dup 2)))]\n   \"\")\n \n-;; This will convert from SImode or DImode to MODE_FLOAT.\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(float:DF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_80387\"\n+  \"* return AS1 (fild%z1,%1);\"\n+  [(set_attr \"type\" \"fpop\")])\n+\n+(define_expand \"floatdidf2\"\n+  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))\n+\t      (clobber (match_dup 2))])]\n+  \"TARGET_80387\"\n+  \"operands[2] = assign_386_stack_local (DImode, 0);\")\n \n (define_insn \"\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n+\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"m,!r\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"m,o\"))]\n   \"TARGET_80387\"\n-  \"*\n-{\n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fild%z0,%1));\n-      RET;\n-    }\n-  else if (GET_CODE (operands[1]) == MEM)\n-    return AS1 (fild%z1,%1);\n-  else\n-    abort ();\n-}\")\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(float:DF (match_operand:DI 1 \"memory_operand\" \"m\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float:DF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(float:DF (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"o\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float:DF (match_dup 2)))]\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))]\n+\t(float:DF (match_operand:DI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_80387\"\n-  \"*\n-{\n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fild%z0,%1));\n-      RET;\n-    }\n-  else if (GET_CODE (operands[1]) == MEM)\n-    return AS1 (fild%z1,%1);\n-  else\n-    abort ();\n-}\")\n+  \"* return AS1 (fild%z1,%1);\"\n+  [(set_attr \"type\" \"fpop\")])\n+\n+(define_expand \"floatsixf2\"\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+\t      (clobber (match_dup 2))])]\n+  \"TARGET_80387\"\n+  \"operands[2] = assign_386_stack_local (SImode, 0);\")\n \n (define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n+\t(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,!r\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m,m\"))]\n   \"TARGET_80387\"\n-  \"*\n-{\n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fild%z0,%1));\n-      RET;\n-    }\n-  else if (GET_CODE (operands[1]) == MEM)\n-    return AS1 (fild%z1,%1);\n-  else\n-    abort ();\n-}\")\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(float:XF (match_operand:SI 1 \"memory_operand\" \"m\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float:XF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(float:XF (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float:XF (match_dup 2)))]\n+  \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(float:XF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_80387\"\n-  \"*\n-{\n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fild%z0,%1));\n-      RET;\n-    }\n-  else if (GET_CODE (operands[1]) == MEM)\n-    return AS1 (fild%z1,%1);\n-  else\n-    abort ();\n-}\")\n+  \"* return AS1 (fild%z1,%1);\"\n+  [(set_attr \"type\" \"fpop\")])\n+\n+(define_expand \"floatdixf2\"\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))\n+\t      (clobber (match_dup 2))])]\n+  \"TARGET_80387\"\n+  \"operands[2] = assign_386_stack_local (DImode, 0);\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n-\t(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,!*r\")))]\n+\t(float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"m,!r\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"m,o\"))]\n   \"TARGET_80387\"\n-  \"*\n-{\n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fild%z0,%1));\n-      RET;\n-    }\n-  else if (GET_CODE (operands[1]) == MEM)\n-    return AS1 (fild%z1,%1);\n-  else\n-    abort ();\n-}\")\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(float:XF (match_operand:DI 1 \"memory_operand\" \"m\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"m\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float:XF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(float:XF (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"o\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float:XF (match_dup 2)))]\n+  \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(float:XF (match_operand:DI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_80387\"\n-  \"*\n-{\n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fild%z0,%1));\n-      RET;\n-    }\n-  else if (GET_CODE (operands[1]) == MEM)\n-    return AS1 (fild%z1,%1);\n-  else\n-    abort ();\n-}\")\n+  \"* return AS1 (fild%z1,%1);\"\n+  [(set_attr \"type\" \"fpop\")])\n \f\n ;;- add instructions\n "}]}