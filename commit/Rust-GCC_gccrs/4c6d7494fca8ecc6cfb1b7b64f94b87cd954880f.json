{"sha": "4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM2ZDc0OTRmY2E4ZWNjNmNmYjFiN2I2NGY5NGI4N2NkOTU0ODgwZg==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-10-19T22:52:21Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-10-19T22:52:21Z"}, "message": "pa64-hpux-lib.h: New file.\n\nlibgcc/\n\t* config/pa/pa64-hpux-lib.h: New file.  \n\t(EH_FRAME_SECTION_NAME): Rename to __LIBGCC_EH_FRAME_SECTION_NAME__.\n\t(DTORS_SECTION_ASM_OP): Rename to __LIBGCC_DTORS_SECTION_ASM_OP__.\n\t* config.host (tm_file): Add pa/pa64-hpux-lib.h to tm_file on\n\thppa*64*-*-hpux11*.\ngcc/\n\t* config/pa/pa64-hpux.h (PA_INIT_FRAME_DUMMY_ASM_OP): Move to\n\tconfig/pa/pa64-hpux-lib.h.\n\t(PA_CRTBEGIN_HACK): Likewise.\n\t(DTOR_LIST_BEGIN): Likewise.\n\nFrom-SVN: r241356", "tree": {"sha": "69f3bb766d3677c42b51423c96c00395b94e3833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69f3bb766d3677c42b51423c96c00395b94e3833"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/comments", "author": null, "committer": null, "parents": [{"sha": "4c712374189739d77d7eaa7a3977ce8533e15163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c712374189739d77d7eaa7a3977ce8533e15163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c712374189739d77d7eaa7a3977ce8533e15163"}], "stats": {"total": 214, "additions": 124, "deletions": 90}, "files": [{"sha": "2b26a38ba9edd26ee7262f8053f604a42609d16a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "patch": "@@ -1,3 +1,10 @@\n+2016-10-19  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa64-hpux.h (PA_INIT_FRAME_DUMMY_ASM_OP): Move to\n+\tconfig/pa/pa64-hpux-lib.h.\n+\t(PA_CRTBEGIN_HACK): Likewise.\n+\t(DTOR_LIST_BEGIN): Likewise.\n+\n 2016-10-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* config/arm/arm.c (arm_emit_coreregs_64bit_shift): Clear the result"}, {"sha": "c6cbc5f582c095314e911ecd252a065b802f49a6", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 7, "deletions": 90, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "patch": "@@ -350,89 +350,6 @@ do {\t\t\t\t\t\t\t\t\\\n #undef SUPPORTS_INIT_PRIORITY\n #define SUPPORTS_INIT_PRIORITY (TARGET_GNU_LD ? 1 : 0)\n \n-/* We use DTOR_LIST_BEGIN to carry a bunch of hacks to allow us to use\n-   the init and fini array sections with both the HP and GNU linkers.\n-   The linkers setup the required dynamic entries in the dynamic segment\n-   and the dynamic linker does the calls.  This approach avoids using\n-   collect2.\n-\n-   The first hack is to implement __do_global_ctors_aux in crtbegin as\n-   it needs to be the first entry in the init array so that it is called\n-   last.  HP got the order of the init array backwards.  The DT_INIT_ARRAY\n-   is supposed to be executed in the same order as the addresses appear in\n-   the array.  DT_FINI_ARRAY is supposed to be executed in the opposite\n-   order.\n-\n-   The second hack is a set of plabels to implement the effect of\n-   CRT_CALL_STATIC_FUNCTION.  HP-UX 11 only supports DI_INIT_ARRAY and\n-   DT_FINI_ARRAY and they put the arrays in .init and .fini, rather than\n-   in .init_array and .fini_array.  The standard defines for .init and\n-   .fini have the execute flag set.  So, the assembler has to be hacked\n-   to munge the standard flags for these sections to make them agree\n-   with what the HP linker expects.  With the GNU linker, we need to\n-   used the .init_array and .fini_array sections.  So, we set up for\n-   both just in case.  Once we have built the table, the linker does\n-   the rest of the work.\n-\n-   The order is significant.  Placing __do_global_ctors_aux first in\n-   the list, results in it being called last.  User specified initializers,\n-   either using the linker +init command or a plabel, run before the\n-   initializers specified here.  */\n-\n-/* We need to add frame_dummy to the initializer list if EH_FRAME_SECTION_NAME\n-   is defined.  */\n-#if defined(EH_FRAME_SECTION_NAME)\n-#define PA_INIT_FRAME_DUMMY_ASM_OP \".dword P%frame_dummy\"\n-#else\n-#define PA_INIT_FRAME_DUMMY_ASM_OP \"\"\n-#endif\n-\n-/* The following hack sets up the .init, .init_array, .fini and\n-   .fini_array sections.  */\n-#define PA_CRTBEGIN_HACK \\\n-asm (TEXT_SECTION_ASM_OP);\t\t\t\t\t\t\\\n-static void __attribute__((used))\t\t\t\t\t\\\n-__do_global_ctors_aux (void)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  func_ptr *p = __CTOR_LIST__;\t\t\t\t\t\t\\\n-  while (*(p + 1))\t\t\t\t\t\t\t\\\n-    p++;\t\t\t\t\t\t\t\t\\\n-  for (; *p != (func_ptr) -1; p--)\t\t\t\t\t\\\n-    (*p) ();\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-asm (HP_INIT_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n-asm (\".align 8\");\t\t\t\t\t\t\t\\\n-asm (\".dword P%__do_global_ctors_aux\");\t\t\t\t\t\\\n-asm (PA_INIT_FRAME_DUMMY_ASM_OP);\t\t\t\t\t\\\n-asm (GNU_INIT_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n-asm (\".align 8\");\t\t\t\t\t\t\t\\\n-asm (\".dword P%__do_global_ctors_aux\");\t\t\t\t\t\\\n-asm (PA_INIT_FRAME_DUMMY_ASM_OP);\t\t\t\t\t\\\n-asm (HP_FINI_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n-asm (\".align 8\");\t\t\t\t\t\t\t\\\n-asm (\".dword P%__do_global_dtors_aux\");\t\t\t\t\t\\\n-asm (GNU_FINI_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n-asm (\".align 8\");\t\t\t\t\t\t\t\\\n-asm (\".dword P%__do_global_dtors_aux\")\n-\n-/* The following two variants of DTOR_LIST_BEGIN are identical to those\n-   in crtstuff.c except for the addition of the above crtbegin hack.  */\n-#ifdef DTORS_SECTION_ASM_OP\n-#define DTOR_LIST_BEGIN \\\n-asm (DTORS_SECTION_ASM_OP);\t\t\t\t\t\t\\\n-STATIC func_ptr __DTOR_LIST__[1]\t\t\t\t\t\\\n-  __attribute__ ((aligned(sizeof(func_ptr))))\t\t\t\t\\\n-  = { (func_ptr) (-1) };\t\t\t\t\t\t\\\n-PA_CRTBEGIN_HACK\n-#else\n-#define DTOR_LIST_BEGIN \\\n-STATIC func_ptr __DTOR_LIST__[1]\t\t\t\t\t\\\n-  __attribute__ ((section(\".dtors\"), aligned(sizeof(func_ptr))))\t\\\n-  = { (func_ptr) (-1) };\t\t\t\t\t\t\\\n-PA_CRTBEGIN_HACK\n-#endif\n-\n /* If using HP ld do not call pxdb.  Use size as a program that does nothing\n    and returns 0.  /bin/true cannot be used because it is a script without\n    an interpreter.  */\n@@ -442,11 +359,11 @@ PA_CRTBEGIN_HACK\n    not use them in gthr-posix.h.  */\n #define GTHREAD_USE_WEAK 0\n \n-/* We don't want undefined weak references to __register_frame_info,\n-   __deregister_frame_info, _Jv_RegisterClasses and __cxa_finalize\n-   introduced by crtbegin.o.  The GNU linker only resolves weak\n-   references if they appear in a shared library.  Thus, it would be\n-   impossible to create a static executable if the symbols were weak.\n-   So, the best solution seems to be to make the symbols strong and\n-   provide an archive library of empty stub functions.  */\n+/* Support attribute weak.  However, the GNU linker only resolves weak\n+   references if they appear in a shared library.  Thus, it is impossible\n+   to create a static executable containing weak symbols.  This is a problem\n+   for the various crt files in libgcc.  We don't want undefined weak\n+   references to __register_frame_info, __deregister_frame_info and\n+   __cxa_finalize introduced by crtbegin.o.  So, we provide an archive\n+   library of empty stub functions to resolve these symbols.  */\n #define TARGET_ATTRIBUTE_WEAK"}, {"sha": "4010e97230805ef5456a831470bb5e354cd743e4", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "patch": "@@ -1,3 +1,11 @@\n+2016-10-19  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa64-hpux-lib.h: New file.  \n+\t(EH_FRAME_SECTION_NAME): Rename to __LIBGCC_EH_FRAME_SECTION_NAME__.\n+\t(DTORS_SECTION_ASM_OP): Rename to __LIBGCC_DTORS_SECTION_ASM_OP__.\n+\t* config.host (tm_file): Add pa/pa64-hpux-lib.h to tm_file on\n+\thppa*64*-*-hpux11*.\n+\n 2016-10-18  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/t-elf (LIB2ADDEH_XTENSA_UNWIND_DW2_FDE): New"}, {"sha": "4291cfef5b475a15b8a92ce487c5163107f5e2f6", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "patch": "@@ -543,6 +543,7 @@ hppa*64*-*-hpux11*)\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n \ttmake_file=\"$tmake_file pa/t-slibgcc-hpux t-slibgcc-hpux\"\n+\ttm_file=\"$tm_file pa/pa64-hpux-lib.h\"\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o \\\n \t\t     libgcc_stub.a\"\n \tmd_unwind_header=pa/hpux-unwind.h"}, {"sha": "01ad35f3db1586fc57fb0a77a7355a4c61dc90dd", "filename": "libgcc/config/pa/pa64-hpux-lib.h", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/libgcc%2Fconfig%2Fpa%2Fpa64-hpux-lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f/libgcc%2Fconfig%2Fpa%2Fpa64-hpux-lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Fpa64-hpux-lib.h?ref=4c6d7494fca8ecc6cfb1b7b64f94b87cd954880f", "patch": "@@ -0,0 +1,101 @@\n+/* Definitions of target machine for GNU compiler, for HPs running\n+   HP-UX using the 64bit runtime model.\n+   Copyright (C) 1999-2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* We use DTOR_LIST_BEGIN to carry a bunch of hacks to allow us to use\n+   the init and fini array sections with both the HP and GNU linkers.\n+   The linkers setup the required dynamic entries in the dynamic segment\n+   and the dynamic linker does the calls.  This approach avoids using\n+   collect2.\n+\n+   The first hack is to implement __do_global_ctors_aux in crtbegin as\n+   it needs to be the first entry in the init array so that it is called\n+   last.  HP got the order of the init array backwards.  The DT_INIT_ARRAY\n+   is supposed to be executed in the same order as the addresses appear in\n+   the array.  DT_FINI_ARRAY is supposed to be executed in the opposite\n+   order.\n+\n+   The second hack is a set of plabels to implement the effect of\n+   CRT_CALL_STATIC_FUNCTION.  HP-UX 11 only supports DI_INIT_ARRAY and\n+   DT_FINI_ARRAY and they put the arrays in .init and .fini, rather than\n+   in .init_array and .fini_array.  The standard defines for .init and\n+   .fini have the execute flag set.  So, the assembler has to be hacked\n+   to munge the standard flags for these sections to make them agree\n+   with what the HP linker expects.  With the GNU linker, we need to\n+   used the .init_array and .fini_array sections.  So, we set up for\n+   both just in case.  Once we have built the table, the linker does\n+   the rest of the work.\n+   The order is significant.  Placing __do_global_ctors_aux first in\n+   the list, results in it being called last.  User specified initializers,\n+   either using the linker +init command or a plabel, run before the\n+   initializers specified here.  */\n+\n+/* We need to add frame_dummy to the initializer list if EH_FRAME_SECTION_NAME\n+   is defined.  */\n+#if defined(__LIBGCC_EH_FRAME_SECTION_NAME__)\n+#define PA_INIT_FRAME_DUMMY_ASM_OP \".dword P%frame_dummy\"\n+#else\n+#define PA_INIT_FRAME_DUMMY_ASM_OP \"\"\n+#endif\n+\n+/* The following hack sets up the .init, .init_array, .fini and\n+   .fini_array sections.  */\n+#define PA_CRTBEGIN_HACK \\\n+asm (TEXT_SECTION_ASM_OP);                                              \\\n+static void __attribute__((used))                                       \\\n+__do_global_ctors_aux (void)                                            \\\n+{                                                                       \\\n+  func_ptr *p = __CTOR_LIST__;                                          \\\n+  while (*(p + 1))                                                      \\\n+    p++;                                                                \\\n+  for (; *p != (func_ptr) -1; p--)                                      \\\n+    (*p) ();                                                            \\\n+}                                                                       \\\n+                                                                        \\\n+asm (HP_INIT_ARRAY_SECTION_ASM_OP);                                     \\\n+asm (\".align 8\");                                                       \\\n+asm (\".dword P%__do_global_ctors_aux\");                                 \\\n+asm (PA_INIT_FRAME_DUMMY_ASM_OP);                                       \\\n+asm (GNU_INIT_ARRAY_SECTION_ASM_OP);                                    \\\n+asm (\".align 8\");                                                       \\\n+asm (\".dword P%__do_global_ctors_aux\");                                 \\\n+asm (PA_INIT_FRAME_DUMMY_ASM_OP);                                       \\\n+asm (HP_FINI_ARRAY_SECTION_ASM_OP);                                     \\\n+asm (\".align 8\");                                                       \\\n+asm (\".dword P%__do_global_dtors_aux\");                                 \\\n+asm (GNU_FINI_ARRAY_SECTION_ASM_OP);                                    \\\n+asm (\".align 8\");                                                       \\\n+asm (\".dword P%__do_global_dtors_aux\")\n+\n+/* The following two variants of DTOR_LIST_BEGIN are identical to those\n+   in crtstuff.c except for the addition of the above crtbegin hack.  */\n+#ifdef __LIBGCC_DTORS_SECTION_ASM_OP__\n+#define DTOR_LIST_BEGIN \\\n+asm (DTORS_SECTION_ASM_OP);                                             \\\n+STATIC func_ptr __DTOR_LIST__[1]                                        \\\n+  __attribute__ ((aligned(sizeof(func_ptr))))                           \\\n+  = { (func_ptr) (-1) };                                                \\\n+PA_CRTBEGIN_HACK\n+#else\n+#define DTOR_LIST_BEGIN \\\n+STATIC func_ptr __DTOR_LIST__[1]                                        \\\n+  __attribute__ ((section(\".dtors\"), aligned(sizeof(func_ptr))))        \\\n+  = { (func_ptr) (-1) };                                                \\\n+PA_CRTBEGIN_HACK\n+#endif"}]}