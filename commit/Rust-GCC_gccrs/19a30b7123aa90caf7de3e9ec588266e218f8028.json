{"sha": "19a30b7123aa90caf7de3e9ec588266e218f8028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlhMzBiNzEyM2FhOTBjYWY3ZGUzZTllYzU4ODI2NmUyMThmODAyOA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2017-11-20T08:32:57Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2017-11-20T08:32:57Z"}, "message": "vec.h (debug_helper): New function.\n\n\t* vec.h (debug_helper): New function.\n\t(DEFINE_DEBUG_VEC): New macro.\n\t* hash-set.h (debug_helper): New function.\n\t(DEFINE_DEBUG_HASH_SET): New macro.\n\t* cfg.c (debug_slim (edge)): New function.\n\tCall DEFINE_DEBUG_VEC for edges.\n\tCall DEFINE_DEBUG_HASH_SET for edges.\n\t* cfghooks.c (debug_slim (basic_block)): New function.\n\tCall DEFINE_DEBUG_VEC for basic blocks.\n\tCall DEFINE_DEBUG_HASH_SET for basic blocks.\n\t* print-tree.c (debug_slim): New function to handle trees.\n\tCall DEFINE_DEBUG_VEC for trees.\n\tCall DEFINE_DEBUG_HASH_SET for trees.\n\t(debug (vec<tree, va_gc>) &): Remove.\n\t(debug (<vec<tree, va_gc>) *): Remove.\n\t* print-rtl.c (debug_slim): New function to handle const_rtx.\n\tCall DEFINE_DEBUG_VEC for rtx_def.\n\tCall DEFINE_DEBUG_VEC for rtx_insn.\n\tCall DEFINE_DEBUG_HASH_SET for rtx_def.\n\tCall DEFINE_DEBUG_HASH_SET for rtx_insn.\n\t* sel-sched-dump.c (debug (vec<rtx_insn *> &): Remove.\n\t(debug (vec<rtx_insn *> *ptr): Remove.\n\t(debug_insn_vector): Remove.\n\t* stor-layout.c (debug_rli): Call debug() instead of debug_vec_tree.\n\nFrom-SVN: r254945", "tree": {"sha": "32e5e7fae29ce15cabb6a27c2982ccabef10c491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32e5e7fae29ce15cabb6a27c2982ccabef10c491"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19a30b7123aa90caf7de3e9ec588266e218f8028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a30b7123aa90caf7de3e9ec588266e218f8028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a30b7123aa90caf7de3e9ec588266e218f8028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a30b7123aa90caf7de3e9ec588266e218f8028/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cfaa4c643eabd8d5aaa74a8406f0bf4880b8fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cfaa4c643eabd8d5aaa74a8406f0bf4880b8fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cfaa4c643eabd8d5aaa74a8406f0bf4880b8fe6"}], "stats": {"total": 243, "additions": 184, "deletions": 59}, "files": [{"sha": "c0bec3a4394a2e7302da17960b4b87c2dc379878", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -1,3 +1,30 @@\n+2017-11-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vec.h (debug_helper): New function.\n+\t(DEFINE_DEBUG_VEC): New macro.\n+\t* hash-set.h (debug_helper): New function.\n+\t(DEFINE_DEBUG_HASH_SET): New macro.\n+\t* cfg.c (debug_slim (edge)): New function.\n+\tCall DEFINE_DEBUG_VEC for edges.\n+\tCall DEFINE_DEBUG_HASH_SET for edges.\n+\t* cfghooks.c (debug_slim (basic_block)): New function.\n+\tCall DEFINE_DEBUG_VEC for basic blocks.\n+\tCall DEFINE_DEBUG_HASH_SET for basic blocks.\n+\t* print-tree.c (debug_slim): New function to handle trees.\n+\tCall DEFINE_DEBUG_VEC for trees.\n+\tCall DEFINE_DEBUG_HASH_SET for trees.\n+\t(debug (vec<tree, va_gc>) &): Remove.\n+\t(debug (<vec<tree, va_gc>) *): Remove.\n+\t* print-rtl.c (debug_slim): New function to handle const_rtx.\n+\tCall DEFINE_DEBUG_VEC for rtx_def.\n+\tCall DEFINE_DEBUG_VEC for rtx_insn.\n+\tCall DEFINE_DEBUG_HASH_SET for rtx_def.\n+\tCall DEFINE_DEBUG_HASH_SET for rtx_insn.\n+\t* sel-sched-dump.c (debug (vec<rtx_insn *> &): Remove.\n+\t(debug (vec<rtx_insn *> *ptr): Remove.\n+\t(debug_insn_vector): Remove.\n+\t* stor-layout.c (debug_rli): Call debug() instead of debug_vec_tree.\n+\n 2017-11-20  Tom de Vries  <tom@codesourcery.com>\n \n \tPR rtl-optimization/82020"}, {"sha": "8e2683b8d6ec9aab2cc1b19bec58fd1ecdb10020", "filename": "gcc/cfg.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -553,6 +553,16 @@ debug (edge_def *ptr)\n   else\n     fprintf (stderr, \"<nil>\\n\");\n }\n+\n+static void\n+debug_slim (edge e)\n+{\n+  fprintf (stderr, \"<edge 0x%p (%d -> %d)>\", (void *) e,\n+\t   e->src->index, e->dest->index);\n+}\n+\n+DEFINE_DEBUG_VEC (edge)\n+DEFINE_DEBUG_HASH_SET (edge)\n \f\n /* Simple routines to easily allocate AUX fields of basic blocks.  */\n "}, {"sha": "2bee65a0cb8ef2317bccb17373494cdc13701df0", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -300,6 +300,14 @@ debug (basic_block_def *ptr)\n     fprintf (stderr, \"<nil>\\n\");\n }\n \n+static void\n+debug_slim (basic_block ptr)\n+{\n+  fprintf (stderr, \"<basic_block %p (%d)>\", (void *) ptr, ptr->index);\n+}\n+\n+DEFINE_DEBUG_VEC (basic_block_def *)\n+DEFINE_DEBUG_HASH_SET (basic_block_def *)\n \n /* Dumps basic block BB to pretty-printer PP, for use as a label of\n    a DOT graph record-node.  The implementation of this hook is"}, {"sha": "75ca1475e0dd2f0dc4e68e99ddb41c4085e44542", "filename": "gcc/hash-set.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fhash-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fhash-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-set.h?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -127,6 +127,44 @@ class hash_set\n   hash_table<Traits> m_table;\n };\n \n+/* Generic hash_set<TYPE> debug helper.\n+\n+   This needs to be instantiated for each hash_set<TYPE> used throughout\n+   the compiler like this:\n+\n+    DEFINE_DEBUG_HASH_SET (TYPE)\n+\n+   The reason we have a debug_helper() is because GDB can't\n+   disambiguate a plain call to debug(some_hash), and it must be called\n+   like debug<TYPE>(some_hash).  */\n+template<typename T>\n+void\n+debug_helper (hash_set<T> &ref)\n+{\n+  for (typename hash_set<T>::iterator it = ref.begin ();\n+       it != ref.end (); ++it)\n+    {\n+      debug_slim (*it);\n+      fputc ('\\n', stderr);\n+    }\n+}\n+\n+#define DEFINE_DEBUG_HASH_SET(T) \\\n+  template static void debug_helper (hash_set<T> &);\t\\\n+  DEBUG_FUNCTION void\t\t\t\t\t\\\n+  debug (hash_set<T> &ref)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    debug_helper <T> (ref);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  DEBUG_FUNCTION void\t\t\t\t\t\\\n+  debug (hash_set<T> *ptr)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    if (ptr)\t\t\t\t\t\t\\\n+      debug (*ptr);\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\\\n+      fprintf (stderr, \"<nil>\\n\");\t\t\t\\\n+  }\n+\n /* ggc marking routines.  */\n \n template<typename K, typename H>"}, {"sha": "5fe23801ab2ddfdacdde56d4d83bc1923cbf5b88", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -967,6 +967,23 @@ debug (const rtx_def *ptr)\n     fprintf (stderr, \"<nil>\\n\");\n }\n \n+/* Like debug_rtx but with no newline, as debug_helper will add one.\n+\n+   Note: No debug_slim(rtx_insn *) variant implemented, as this\n+   function can serve for both rtx and rtx_insn.  */\n+\n+static void\n+debug_slim (const_rtx x)\n+{\n+  rtx_writer w (stderr, 0, false, false, NULL);\n+  w.print_rtx (x);\n+}\n+\n+DEFINE_DEBUG_VEC (rtx_def *)\n+DEFINE_DEBUG_VEC (rtx_insn *)\n+DEFINE_DEBUG_HASH_SET (rtx_def *)\n+DEFINE_DEBUG_HASH_SET (rtx_insn *)\n+\n /* Count of rtx's to print with debug_rtx_list.\n    This global exists because gdb user defined commands have no arguments.  */\n "}, {"sha": "3a0f85d4038759ec797f546922002ce0e5b5ab6d", "filename": "gcc/print-tree.c", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -1094,32 +1094,6 @@ debug_raw (vec<tree, va_gc> &ref)\n     }\n }\n \n-DEBUG_FUNCTION void\n-debug (vec<tree, va_gc> &ref)\n-{\n-  tree elt;\n-  unsigned ix;\n-\n-  /* Print the slot this node is in, and its code, and address.  */\n-  fprintf (stderr, \"<VEC\");\n-  dump_addr (stderr, \" \", ref.address ());\n-\n-  FOR_EACH_VEC_ELT (ref, ix, elt)\n-    {\n-      fprintf (stderr, \"elt:%d \", ix);\n-      debug (elt);\n-    }\n-}\n-\n-DEBUG_FUNCTION void\n-debug (vec<tree, va_gc> *ptr)\n-{\n-  if (ptr)\n-    debug (*ptr);\n-  else\n-    fprintf (stderr, \"<nil>\\n\");\n-}\n-\n DEBUG_FUNCTION void\n debug_raw (vec<tree, va_gc> *ptr)\n {\n@@ -1129,8 +1103,11 @@ debug_raw (vec<tree, va_gc> *ptr)\n     fprintf (stderr, \"<nil>\\n\");\n }\n \n-DEBUG_FUNCTION void\n-debug_vec_tree (vec<tree, va_gc> *vec)\n+static void\n+debug_slim (tree t)\n {\n-  debug_raw (vec);\n+  print_node_brief (stderr, \"\", t, 0);\n }\n+\n+DEFINE_DEBUG_VEC (tree)\n+DEFINE_DEBUG_HASH_SET (tree)"}, {"sha": "027b6b1c7c624d2ac3511dd516d1a9ea1d058a7d", "filename": "gcc/sel-sched-dump.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fsel-sched-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fsel-sched-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-dump.c?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -989,35 +989,6 @@ debug_blist (blist_t bnds)\n   restore_dump ();\n }\n \n-/* Dump a rtx vector REF.  */\n-DEBUG_FUNCTION void\n-debug (vec<rtx_insn *> &ref)\n-{\n-  switch_dump (stderr);\n-  dump_insn_vector (ref);\n-  sel_print (\"\\n\");\n-  restore_dump ();\n-}\n-\n-DEBUG_FUNCTION void\n-debug (vec<rtx_insn *> *ptr)\n-{\n-  if (ptr)\n-    debug (*ptr);\n-  else\n-    fprintf (stderr, \"<nil>\\n\");\n-}\n-\n-/* Dump an insn vector SUCCS.  */\n-DEBUG_FUNCTION void\n-debug_insn_vector (rtx_vec_t succs)\n-{\n-  switch_dump (stderr);\n-  dump_insn_vector (succs);\n-  sel_print (\"\\n\");\n-  restore_dump ();\n-}\n-\n /* Dump a hard reg set SET to stderr.  */\n DEBUG_FUNCTION void\n debug_hard_reg_set (HARD_REG_SET set)"}, {"sha": "0ce97a5c5a364ed38bdc11e02d366f24ce1d2e72", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -942,7 +942,7 @@ debug_rli (record_layout_info rli)\n   if (!vec_safe_is_empty (rli->pending_statics))\n     {\n       fprintf (stderr, \"pending statics:\\n\");\n-      debug_vec_tree (rli->pending_statics);\n+      debug (rli->pending_statics);\n     }\n }\n "}, {"sha": "b145eef2bc7c95aac0e03b4da3c2339aee44ba94", "filename": "gcc/vec.h", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a30b7123aa90caf7de3e9ec588266e218f8028/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=19a30b7123aa90caf7de3e9ec588266e218f8028", "patch": "@@ -407,6 +407,83 @@ struct GTY((user)) vec\n {\n };\n \n+/* Generic vec<> debug helpers.\n+\n+   These need to be instantiated for each vec<TYPE> used throughout\n+   the compiler like this:\n+\n+    DEFINE_DEBUG_VEC (TYPE)\n+\n+   The reason we have a debug_helper() is because GDB can't\n+   disambiguate a plain call to debug(some_vec), and it must be called\n+   like debug<TYPE>(some_vec).  */\n+\n+template<typename T>\n+void\n+debug_helper (vec<T> &ref)\n+{\n+  unsigned i;\n+  for (i = 0; i < ref.length (); ++i)\n+    {\n+      fprintf (stderr, \"[%d] = \", i);\n+      debug_slim (ref[i]);\n+      fputc ('\\n', stderr);\n+    }\n+}\n+\n+/* We need a separate va_gc variant here because default template\n+   argument for functions cannot be used in c++-98.  Once this\n+   restriction is removed, those variant should be folded with the\n+   above debug_helper.  */\n+\n+template<typename T>\n+void\n+debug_helper (vec<T, va_gc> &ref)\n+{\n+  unsigned i;\n+  for (i = 0; i < ref.length (); ++i)\n+    {\n+      fprintf (stderr, \"[%d] = \", i);\n+      debug_slim (ref[i]);\n+      fputc ('\\n', stderr);\n+    }\n+}\n+\n+/* Macro to define debug(vec<T>) and debug(vec<T, va_gc>) helper\n+   functions for a type T.  */\n+\n+#define DEFINE_DEBUG_VEC(T) \\\n+  template static void debug_helper (vec<T> &);\t\t\\\n+  template static void debug_helper (vec<T, va_gc> &);\t\\\n+  /* Define the vec<T> debug functions.  */\t\t\\\n+  DEBUG_FUNCTION void\t\t\t\t\t\\\n+  debug (vec<T> &ref)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    debug_helper <T> (ref);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  DEBUG_FUNCTION void\t\t\t\t\t\\\n+  debug (vec<T> *ptr)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    if (ptr)\t\t\t\t\t\t\\\n+      debug (*ptr);\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\\\n+      fprintf (stderr, \"<nil>\\n\");\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  /* Define the vec<T, va_gc> debug functions.  */\t\\\n+  DEBUG_FUNCTION void\t\t\t\t\t\\\n+  debug (vec<T, va_gc> &ref)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    debug_helper <T> (ref);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  DEBUG_FUNCTION void\t\t\t\t\t\\\n+  debug (vec<T, va_gc> *ptr)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    if (ptr)\t\t\t\t\t\t\\\n+      debug (*ptr);\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\\\n+      fprintf (stderr, \"<nil>\\n\");\t\t\t\\\n+  }\n+\n /* Default-construct N elements in DST.  */\n \n template <typename T>"}]}