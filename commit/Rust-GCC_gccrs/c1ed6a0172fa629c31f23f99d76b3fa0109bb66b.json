{"sha": "c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlZDZhMDE3MmZhNjI5YzMxZjIzZjk5ZDc2YjNmYTAxMDliYjY2Yg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-11-30T16:11:33Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-11-30T16:11:33Z"}, "message": "re PR middle-end/52890 (Revision 185336 causes 10% degradation on cpu2000 benchmark 252.eon)\n\n2012-11-30  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/52890\n\tPR tree-optimization/55415\n\tPR tree-optimization/54386\n\tPR target/55448\n\t* ipa-prop.c (ipa_modify_call_arguments): Be optimistic when\n\tget_pointer_alignment_1 returns false and the base was not a\n\tdereference.\n\t* tree-sra.c (access_precludes_ipa_sra_p): New parameter req_align,\n\tadded check for required alignment.  Update the user.\n\n\t* testsuite/gcc.dg/ipa/ipa-sra-7.c: New test.\n\t* testsuite/gcc.dg/ipa/ipa-sra-8.c: Likewise.\n\t* testsuite/gcc.dg/ipa/ipa-sra-9.c: Likewise.\n\t* testsuite/gcc.target/i386/pr55448.c: Likewise.\n\nFrom-SVN: r193998", "tree": {"sha": "84ce44d7b1f68a3a6a1630d3502026119cf95162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84ce44d7b1f68a3a6a1630d3502026119cf95162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7b30db8d85f828c2a2c146142c6b07e7b69ba18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b30db8d85f828c2a2c146142c6b07e7b69ba18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b30db8d85f828c2a2c146142c6b07e7b69ba18"}], "stats": {"total": 218, "additions": 211, "deletions": 7}, "files": [{"sha": "013ccf5fd3fa947ad8e9fc34d1851232bbf4a58d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "patch": "@@ -1,3 +1,15 @@\n+2012-11-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/52890\n+\tPR tree-optimization/55415\n+\tPR tree-optimization/54386\n+\tPR target/55448\n+\t* ipa-prop.c (ipa_modify_call_arguments): Be optimistic when\n+\tget_pointer_alignment_1 returns false and the base was not a\n+\tdereference.\n+\t* tree-sra.c (access_precludes_ipa_sra_p): New parameter req_align,\n+\tadded check for required alignment.  Update the user.\n+\n 2012-11-30  Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>\n             Greta Yorsh  <Greta.Yorsh@arm.com>\n "}, {"sha": "01d142bfacefac3d055cb1c2076724b293c3c349", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "patch": "@@ -2888,6 +2888,8 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t{\n \t  tree expr, base, off;\n \t  location_t loc;\n+\t  unsigned int deref_align;\n+\t  bool deref_base = false;\n \n \t  /* We create a new parameter out of the value of the old one, we can\n \t     do the following kind of transformations:\n@@ -2921,9 +2923,15 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t    {\n \t      HOST_WIDE_INT base_offset;\n \t      tree prev_base;\n+\t      bool addrof;\n \n \t      if (TREE_CODE (base) == ADDR_EXPR)\n-\t\tbase = TREE_OPERAND (base, 0);\n+\t\t{\n+\t\t  base = TREE_OPERAND (base, 0);\n+\t\t  addrof = true;\n+\t\t}\n+\t      else\n+\t\taddrof = false;\n \t      prev_base = base;\n \t      base = get_addr_base_and_unit_offset (base, &base_offset);\n \t      /* Aggregate arguments can have non-invariant addresses.  */\n@@ -2935,6 +2943,11 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t\t}\n \t      else if (TREE_CODE (base) == MEM_REF)\n \t\t{\n+\t\t  if (!addrof)\n+\t\t    {\n+\t\t      deref_base = true;\n+\t\t      deref_align = TYPE_ALIGN (TREE_TYPE (base));\n+\t\t    }\n \t\t  off = build_int_cst (adj->alias_ptr_type,\n \t\t\t\t       base_offset\n \t\t\t\t       + adj->offset / BITS_PER_UNIT);\n@@ -2957,7 +2970,17 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t      unsigned int align;\n \t      unsigned HOST_WIDE_INT misalign;\n \n-\t      get_pointer_alignment_1 (base, &align, &misalign);\n+\t      if (deref_base)\n+\t\t{\n+\t\t  align = deref_align;\n+\t\t  misalign = 0;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  get_pointer_alignment_1 (base, &align, &misalign);\n+\t\t  if (TYPE_ALIGN (type) > align)\n+\t\t    align = TYPE_ALIGN (type);\n+\t\t}\n \t      misalign += (tree_to_double_int (off)\n \t\t\t   .sext (TYPE_PRECISION (TREE_TYPE (off))).low\n \t\t\t   * BITS_PER_UNIT);"}, {"sha": "6bfa0933eefdda9b2d352f428532a6704216a8c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "patch": "@@ -1,3 +1,14 @@\n+2012-11-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/52890\n+\tPR tree-optimization/55415\n+\tPR tree-optimization/54386\n+\tPR target/55448\n+\t* gcc.dg/ipa/ipa-sra-7.c: New test.\n+\t* gcc.dg/ipa/ipa-sra-8.c: Likewise.\n+\t* gcc.dg/ipa/ipa-sra-9.c: Likewise.\n+\t* gcc.target/i386/pr55448.c: Likewise.\n+\n 2012-11-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* loop_optimization14.ad[sb]: New test."}, {"sha": "921334a4fd8019bec001bab8e8dd50a9f72b8049", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-sra-7.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-7.c?ref=c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef unsigned int myint __attribute__((aligned(1)));\n+\n+typedef struct __attribute__((packed)) S {\n+  unsigned a, b, c;\n+} SS;\n+\n+typedef SS __attribute__((aligned(1))) SSS;\n+\n+\n+static unsigned int __attribute__ ((noinline))\n+get_a (SSS *p)\n+{\n+  return p->a;\n+};\n+\n+static int __attribute__ ((noinline, noclone))\n+foo (SS *p)\n+{\n+  int r = (int) get_a(p) + 2;\n+  return r;\n+}\n+\n+char buf[512];\n+\n+static SSS * __attribute__ ((noinline, noclone))\n+get_sss (void)\n+{\n+  return (SSS *)(buf + 1);\n+}\n+\n+\n+int\n+main(int argc, char *argv[])\n+{\n+  SSS *p = get_sss();\n+  if (foo(p) != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "9e6e40ac54df006714e922c2c589bf5fc3291ccc", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-sra-8.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-8.c?ref=c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef unsigned int myint __attribute__((aligned(1)));\n+\n+typedef struct S {\n+  unsigned a, b, c;\n+} SS;\n+\n+typedef SS __attribute__((aligned(1))) SSS;\n+\n+\n+static unsigned int __attribute__ ((noinline))\n+get_a (SS s)\n+{\n+  return s.a;\n+};\n+\n+static int __attribute__ ((noinline, noclone))\n+foo (SSS *p)\n+{\n+  int r = (int) get_a(*p) + 2;\n+  return r;\n+}\n+\n+char buf[512];\n+\n+static SSS * __attribute__ ((noinline, noclone))\n+get_sss (void)\n+{\n+  return (SSS *)(buf + 1);\n+}\n+\n+int\n+main(int argc, char *argv[])\n+{\n+  SSS *p = get_sss();\n+  if (foo(p) != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "c5468cfbb76aa1b18569555e044525d71c01327d", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-sra-9.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-9.c?ref=c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef unsigned int myint __attribute__((aligned(1)));\n+\n+typedef struct S {\n+  unsigned a, b, c;\n+} SS;\n+\n+typedef struct U {\n+  SS s[2];\n+} UU;\n+\n+typedef UU __attribute__((aligned(1))) UUU;\n+\n+static unsigned int __attribute__ ((noinline))\n+get_a (SS s)\n+{\n+  return s.a;\n+};\n+\n+static int __attribute__ ((noinline, noclone))\n+foo (UUU *p)\n+{\n+  int r = (int) get_a(p->s[0]) + 2;\n+  return r;\n+}\n+\n+char buf[512];\n+\n+static UUU * __attribute__ ((noinline, noclone))\n+get_uuu (void)\n+{\n+  return (UUU *)(buf + 1);\n+}\n+\n+int\n+main(int argc, char *argv[])\n+{\n+  UUU *p = get_uuu();\n+  if (foo(p) != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "874a5077f3b31f50716effe409273ec806d10654", "filename": "gcc/testsuite/gcc.target/i386/pr55448.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55448.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55448.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55448.c?ref=c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include <immintrin.h>\n+\n+static inline __m256 add1(const __m256 *a, const __m256 *b)\n+{\n+  return _mm256_add_ps(*a, *b);\n+}\n+\n+void foo1(__m256 *a, const __m256 b)\n+{\n+  *a = add1(a, &b);\n+}\n+\n+static inline __m128 add2(const __m128 *a, const __m128 *b)\n+{\n+  return _mm_add_ps(*a, *b);\n+}\n+\n+void foo2(__m128 *a, const __m128 b)\n+{\n+  *a = add2(a, &b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"vmovups\" } } */"}, {"sha": "4580ad22e644bda4b61cf9fd9ca37f6e28d38e0c", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ed6a0172fa629c31f23f99d76b3fa0109bb66b/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=c1ed6a0172fa629c31f23f99d76b3fa0109bb66b", "patch": "@@ -3891,12 +3891,13 @@ unmodified_by_ref_scalar_representative (tree parm)\n   return repr;\n }\n \n-/* Return true iff this access precludes IPA-SRA of the parameter it is\n-   associated with. */\n+/* Return true iff this ACCESS precludes IPA-SRA of the parameter it is\n+   associated with.  REQ_ALIGN is the minimum required alignment.  */\n \n static bool\n-access_precludes_ipa_sra_p (struct access *access)\n+access_precludes_ipa_sra_p (struct access *access, unsigned int req_align)\n {\n+  unsigned int exp_align;\n   /* Avoid issues such as the second simple testcase in PR 42025.  The problem\n      is incompatible assign in a call statement (and possibly even in asm\n      statements).  This can be relaxed by using a new temporary but only for\n@@ -3908,6 +3909,10 @@ access_precludes_ipa_sra_p (struct access *access)\n \t  || gimple_code (access->stmt) == GIMPLE_ASM))\n     return true;\n \n+  exp_align = get_object_alignment (access->expr);\n+  if (exp_align < req_align)\n+    return true;\n+\n   return false;\n }\n \n@@ -3943,7 +3948,7 @@ splice_param_accesses (tree parm, bool *ro_grp)\n       tree a1_alias_type;\n       access = (*access_vec)[i];\n       modification = access->write;\n-      if (access_precludes_ipa_sra_p (access))\n+      if (access_precludes_ipa_sra_p (access, TYPE_ALIGN (access->type)))\n \treturn NULL;\n       a1_alias_type = reference_alias_ptr_type (access->expr);\n \n@@ -3966,7 +3971,7 @@ splice_param_accesses (tree parm, bool *ro_grp)\n \t  else if (ac2->size != access->size)\n \t    return NULL;\n \n-\t  if (access_precludes_ipa_sra_p (ac2)\n+\t  if (access_precludes_ipa_sra_p (ac2, TYPE_ALIGN (access->type))\n \t      || (ac2->type != access->type\n \t\t  && (TREE_ADDRESSABLE (ac2->type)\n \t\t      || TREE_ADDRESSABLE (access->type)))"}]}