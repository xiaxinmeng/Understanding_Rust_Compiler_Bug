{"sha": "677f3fa8158c48c278b09c86d9573e7c1afa3c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3ZjNmYTgxNThjNDhjMjc4YjA5Yzg2ZDk1NzNlN2MxYWZhM2M1Mw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-06-14T23:11:35Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-06-14T23:11:35Z"}, "message": "target-def.h (TARGET_HAVE_NAMED_SECTIONS): Move to common/common-target-def.h.\n\n\t* target-def.h (TARGET_HAVE_NAMED_SECTIONS): Move to\n\tcommon/common-target-def.h.\n\t* target.def (default_target_flags, handle_option,\n\tsupports_split_stack, optimization_table, init_struct,\n\texcept_unwind_info, unwind_tables_default, have_named_sections):\n\tMove to common/common-target.def.\n\t* target.h (enum opt_levels, struct default_options): Move to\n\tcommon/common-target.h.\n\t* targhooks.c (default_except_unwind_info,\n\tdwarf2_except_unwind_info, sjlj_except_unwind_info,\n\tdefault_target_handle_option, empty_optimization_table): Move to\n\tcommon/common-targhooks.c.\n\t* targhooks.h (default_except_unwind_info,\n\tdwarf2_except_unwind_info, sjlj_except_unwind_info,\n\tdefault_target_handle_option, empty_optimization_table): Move to\n\tcommon/common-targhooks.h.\n\t* common/common-target-def.h: Include common/common-targhooks.h.\n\t(TARGET_HAVE_NAMED_SECTIONS): Define if TARGET_ASM_NAMED_SECTION\n\tdefined.\n\t* common/common-target.def (handle_option, option_init_struct,\n\toption_optimization_table, default_target_flags,\n\texcept_unwind_info, supports_split_stack, unwind_tables_default,\n\thave_named_sections): Move from target.def.\n\t(HOOK_PREFIX): Undefine at end of file.\n\t* common/common-target.h: Include input.h.\n\t(enum opt_levels, struct default_options): Move from target.h.\n\t* common/common-targhooks.c, common/common-targhooks.h: New.\n\t* config.gcc (target_has_targetm_common): Default to yes.\n\t(moxie*): Set target_has_targetm_common=no.\n\t(hppa*-*-*): Don't set target_has_targetm_common=yes.\n\t* doc/tm.texi: Regenerate.\n\t* Makefile.in (COMMON_TARGET_H): Add $(INPUT_H).\n\t(C_TARGET_DEF_H): Add common/common-targhooks.h.\n\t(GCC_OBJS): Remove vec.o.\n\t(OBJS): Remove hooks.o and vec.o.\n\t(OBJS-libcommon-target): Add vec.o, hooks.o and\n\tcommon/common-targhooks.o.\n\t(c-family/c-common.o, c-family/c-cppbuiltin.o, lto-opts.o, tree.o,\n\ttree-tailcall.o, opts.o, toplev.o, varasm.o, function.o, except.o,\n\texpr.o, explow.o, dbxout.o, dwarf2out.o, cfgrtl.o, haifa-sched.o,\n\tcfglayout.o, $(out_object_file), $(common_out_object_file)):\n\tUpdate dependencies.\n\t(common/common-targhooks.o): New.\n\t* common/config/default-common.c: Include tm.h.  Add FIXME\n\tcomment.\n\t* common/config/pa/pa-common.c: Include more headers.  Take\n\tcopyright dates from pa.c.\n\t(pa_option_optimization_table, pa_handle_option,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_DEFAULT_TARGET_FLAGS,\n\tTARGET_HANDLE_OPTION): Move from pa.c.\n\t* common/config/alpha/alpha-common.c,\n\tcommon/config/arm/arm-common.c, common/config/avr/avr-common.c,\n\tcommon/config/bfin/bfin-common.c,\n\tcommon/config/cris/cris-common.c,\n\tcommon/config/fr30/fr30-common.c, common/config/frv/frv-common.c,\n\tcommon/config/h8300/h8300-common.c,\n\tcommon/config/i386/i386-common.c,\n\tcommon/config/ia64/ia64-common.c,\n\tcommon/config/iq2000/iq2000-common.c,\n\tcommon/config/lm32/lm32-common.c,\n\tcommon/config/m32c/m32c-common.c,\n\tcommon/config/m32r/m32r-common.c,\n\tcommon/config/m68k/m68k-common.c,\n\tcommon/config/mcore/mcore-common.c,\n\tcommon/config/mep/mep-common.c,\n\tcommon/config/microblaze/microblaze-common.c,\n\tcommon/config/mips/mips-common.c,\n\tcommon/config/mmix/mmix-common.c,\n\tcommon/config/mn10300/mn10300-common.c,\n\tcommon/config/pdp11/pdp11-common.c,\n\tcommon/config/picochip/picochip-common.c,\n\tcommon/config/rs6000/rs6000-common.c,\n\tcommon/config/rx/rx-common.c, common/config/s390/s390-common.c,\n\tcommon/config/score/score-common.c, common/config/sh/sh-common.c,\n\tcommon/config/sparc/sparc-common.c,\n\tcommon/config/spu/spu-common.c, common/config/v850/v850-common.c,\n\tcommon/config/vax/vax-common.c,\n\tcommon/config/xstormy16/xstormy16-common.c,\n\tcommon/config/xtensa/xtensa-common.c: New.\n\t* config/alpha/alpha.c: Include common/common-target.h.\n\t(alpha_option_optimization_table, alpha_handle_option,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to alpha-common.c.\n\t* config/arm/arm-protos.h (arm_except_unwind_info): Declare.\n\t* config/arm/arm.c (arm_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_EXCEPT_UNWIND_INFO, arm_except_unwind_info): Move to\n\tarm-common.c.\n\t* config/avr/avr.c (avr_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_EXCEPT_UNWIND_INFO): Move\n\tto avr-common.c.\n\t* config/bfin/bfin.c (struct bfin_cpu): Move to bfin.h.\n\t(bfin_cpus, bfin_handle_option, TARGET_HANDLE_OPTION,\n\tTARGET_DEFAULT_TARGET_FLAGS): Move to bfin-common.c.\n\t* config/bfin/bfin.h struct bfin_cpu): Move from bfin.c.\n\t* config/cris/cris.c (cris_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, cris_handle_option): Move to\n\tcris-common.c.\n\t* config/fr30/fr30.c (fr30_option_optimization_table,\n\tTARGET_EXCEPT_UNWIND_INFO, TARGET_OPTION_OPTIMIZATION_TABLE): Move\n\tto fr30-common.c.\n\t* config/frv/frv.c (frv_option_optimization_table,\n\tMASK_DEFAULT_ALLOC_CC, TARGET_DEFAULT_TARGET_FLAGS,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to frv-common.c.\n\t* config/h8300/h8300.c (h8300_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_EXCEPT_UNWIND_INFO): Move to h8300-common.c.\n\t* config/i386/i386-protos.h (ix86_handle_option): Declare.\n\t* config/i386/i386.c: Include common/common-target.h.\n\t(OPTION_MASK_ISA_MMX_SET, OPTION_MASK_ISA_3DNOW_SET,\n\tOPTION_MASK_ISA_SSE_SET, OPTION_MASK_ISA_SSE2_SET,\n\tOPTION_MASK_ISA_SSE3_SET, OPTION_MASK_ISA_SSSE3_SET,\n\tOPTION_MASK_ISA_SSE4_1_SET, OPTION_MASK_ISA_SSE4_2_SET,\n\tOPTION_MASK_ISA_AVX_SET, OPTION_MASK_ISA_FMA_SET,\n\tOPTION_MASK_ISA_SSE4_SET, OPTION_MASK_ISA_SSE4A_SET,\n\tOPTION_MASK_ISA_FMA4_SET, OPTION_MASK_ISA_XOP_SET,\n\tOPTION_MASK_ISA_LWP_SET, OPTION_MASK_ISA_AES_SET,\n\tOPTION_MASK_ISA_PCLMUL_SET, OPTION_MASK_ISA_ABM_SET,\n\tOPTION_MASK_ISA_BMI_SET, OPTION_MASK_ISA_TBM_SET,\n\tOPTION_MASK_ISA_POPCNT_SET, OPTION_MASK_ISA_CX16_SET,\n\tOPTION_MASK_ISA_SAHF_SET, OPTION_MASK_ISA_MOVBE_SET,\n\tOPTION_MASK_ISA_CRC32_SET, OPTION_MASK_ISA_FSGSBASE_SET,\n\tOPTION_MASK_ISA_RDRND_SET, OPTION_MASK_ISA_F16C_SET,\n\tOPTION_MASK_ISA_MMX_UNSET, OPTION_MASK_ISA_3DNOW_UNSET,\n\tOPTION_MASK_ISA_3DNOW_A_UNSET, OPTION_MASK_ISA_SSE_UNSET,\n\tOPTION_MASK_ISA_SSE2_UNSET, OPTION_MASK_ISA_SSE3_UNSET,\n\tOPTION_MASK_ISA_SSSE3_UNSET, OPTION_MASK_ISA_SSE4_1_UNSET,\n\tOPTION_MASK_ISA_SSE4_2_UNSET, OPTION_MASK_ISA_AVX_UNSET,\n\tOPTION_MASK_ISA_FMA_UNSET, OPTION_MASK_ISA_SSE4_UNSET,\n\tOPTION_MASK_ISA_SSE4A_UNSET, OPTION_MASK_ISA_FMA4_UNSET,\n\tOPTION_MASK_ISA_XOP_UNSET, OPTION_MASK_ISA_LWP_UNSET,\n\tOPTION_MASK_ISA_AES_UNSET, OPTION_MASK_ISA_PCLMUL_UNSET,\n\tOPTION_MASK_ISA_ABM_UNSET, OPTION_MASK_ISA_BMI_UNSET,\n\tOPTION_MASK_ISA_TBM_UNSET, OPTION_MASK_ISA_POPCNT_UNSET,\n\tOPTION_MASK_ISA_CX16_UNSET, OPTION_MASK_ISA_SAHF_UNSET,\n\tOPTION_MASK_ISA_MOVBE_UNSET, OPTION_MASK_ISA_CRC32_UNSET,\n\tOPTION_MASK_ISA_FSGSBASE_UNSET, OPTION_MASK_ISA_RDRND_UNSET,\n\tOPTION_MASK_ISA_F16C_UNSET, ix86_handle_option,\n\tix86_option_optimization_table, ix86_option_init_struct,\n\tix86_supports_split_stack, TARGET_DEFAULT_TARGET_FLAGS,\n\tTARGET_HANDLE_OPTION, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_OPTION_INIT_STRUCT, TARGET_SUPPORTS_SPLIT_STACK): Move to\n\ti386-common.c.\n\t* config/i386/t-i386 (i386.o): Update dependencies.\n\t* config/ia64/ia64-protos.h (ia64_except_unwind_info): Declare.\n\t* config/ia64/ia64.c (ia64_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_EXCEPT_UNWIND_INFO,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tia64_handle_option): Move to ia64-common.c.\n\t* config/iq2000/iq2000.c (iq2000_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to iq2000-common.c.\n\t* config/lm32/lm32.c (lm32_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_EXCEPT_UNWIND_INFO): Move\n\tto lm32-common.c.\n\t* config/m32c/m32c.c (TARGET_HAVE_NAMED_SECTIONS): Move to\n\tm32c-common.c.\n\t* config/m32r/m32r.c (m32r_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_EXCEPT_UNWIND_INFO,\n\tm32r_handle_option): Move to m32r-common.c.\n\t(m32r_memory_move_cost): Remove comment referring to\n\tTARGET_HANDLE_OPTION.\n\t* config/m68k/m68k.c (TARGET_HANDLE_OPTION, m68k_handle_option):\n\tMove to m68k-common.c.\n\t* config/mcore/mcore.c (mcore_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_EXCEPT_UNWIND_INFO): Move to mcore-common.c.\n\t* config/mep/mep.c (mep_option_optimization_table,\n\tmep_handle_option, TARGET_HANDLE_OPTION,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_DEFAULT_TARGET_FLAGS):\n\tMove to mep-common.c.\n\t* config/microblaze/microblaze.c\n\t(microblaze_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_EXCEPT_UNWIND_INFO): Move to microblaze-common.c.\n\t* config/mips/mips.c (mips_handle_option,\n\tmips_option_optimization_table, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Move to\n\tmips-common.c.\n\t* config/mmix/mmix.c (mmix_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE):\n\tMove to mmix-common.c.\n\t* config/mn10300/mn10300.c (mn10300_option_optimization_table,\n\tmn10300_handle_option, TARGET_EXCEPT_UNWIND_INFO,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to mn10300-common.c.\n\t* config/pa/pa.c: Include common/common-target.h.\n\t(pa_option_optimization_table, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tpa_handle_option): Move to pa-common.c.\n\t(pa_option_override): Use targetm_common.except_unwind_info.\n\t(pa_asm_output_mi_thunk, pa_function_section): Use\n\ttargetm_common.have_named_sections.\n\t* config/pdp11/pdp11.c (pdp11_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_OPTION_INIT_STRUCT,\n\tpdp11_handle_option, pdp11_option_init_struct): Move to\n\tpdp11-common.c.\n\t* config/picochip/picochip.c (picochip_option_optimization_table,\n\tTARGET_HAVE_NAMED_SECTIONS, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_EXCEPT_UNWIND_INFO): Move to picochip-common.c.\n\t* config/rs6000/rs6000.c: Include common/common-target.h.\n\t(rs6000_option_optimization_table, TARGET_HANDLE_OPTION,\n\tTARGET_OPTION_INIT_STRUCT, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_DEFAULT_TARGET_FLAGS, rs6000_option_init_struct,\n\trs6000_handle_option): Move to rs6000-common.c.\n\t* config/rs6000/t-rs6000 (rs6000.o): Update dependencies.\n\t* config/rx/rx.c (rx_handle_option, rx_option_optimization_table,\n\tTARGET_HANDLE_OPTION, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_EXCEPT_UNWIND_INFO): Move to rx-common.c.\n\t* config/s390/s390.c (processor_flags_table,\n\ts390_option_optimization_table, s390_option_init_struct,\n\ts390_handle_option, TARGET_DEFAULT_TARGET_FLAGS,\n\tTARGET_HANDLE_OPTION, TARGET_OPTION_OPTIMIZATION_TABLE,\n\tTARGET_OPTION_INIT_STRUCT): Move to s390-common.c.\n\t* config/s390/s390.h (processor_flags_table): Declare.\n\t* config/score/score.c (score_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, MASK_ALL_CPU_BITS,\n\tscore_handle_option): Move to score-common.c.\n\t* config/sh/sh.c (sh_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_OPTION_INIT_STRUCT,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n\tsh_handle_option, sh_option_init_struct): Move to sh-common.c.\n\t* config/sparc/sparc.c: Include common/common-target.h.\n\t(sparc_option_optimization_table, TARGET_DEFAULT_TARGET_FLAGS,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to sparc-common.c.\n\t* config/spu/spu.c (TARGET_DEFAULT_TARGET_FLAGS,\n\tTARGET_OPTION_INIT_STRUCT, TARGET_EXCEPT_UNWIND_INFO,\n\tspu_option_init_struct): Move to spu-common.c.\n\t* config/stormy16/stormy16.c (xstorym16_option_optimization_table,\n\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to xstormy16-common.c.\n\t* config/v850/v850.c (small_memory_physical_max,\n\tv850_handle_memory_optionn v850_handle_option,\n\tv850_option_optimization_table, TARGET_DEFAULT_TARGET_FLAGS,\n\tTARGET_HANDLE_OPTION, TARGET_OPTION_OPTIMIZATION_TABLE): Move to\n\tv850-common.c.\n\t* config/vax/vax.c (TARGET_DEFAULT_TARGET_FLAGS): Move to\n\tvax-common.c.\n\t* config/xtensa/xtensa.c (xtensa_option_optimization_table,\n\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE):\n\tMove to xtensa-common.c.\n\t* cfglayout.c: Include common/common-target.h.\n\t(fixup_reorder_chain): Use targetm_common.have_named_sections.\n\t* cfgrtl.c: Include common/common-target.h.\n\t(force_nonfallthru_and_redirect, commit_one_edge_insertion): Use\n\ttargetm_common.have_named_sections.\n\t* dbxout.c: Include common/common-target.h.\n\t(dbxout_function_end): Use targetm_common.have_named_sections.\n\t* defaults.h (STACK_OLD_CHECK_PROTECT, STACK_CHECK_PROTECT): Use\n\ttargetm_common.except_unwind_info.\n\t* dwarf2out.c: Include common/common-target.h.\n\t(dwarf2out_do_frame, dwarf2out_do_cfi_asm,\n\tdwarf2out_begin_prologue, dwarf2out_frame_init,\n\tdwarf2out_frame_finish, dwarf2out_assembly_start): Use\n\ttargetm_common.except_unwind_info.\n\t* except.c: Include common/common-target.h.\n\t(init_eh, finish_eh_generation,\n\toutput_one_function_exception_table): Use\n\ttargetm_common.except_unwind_info.\n\t(switch_to_exception_section): Use\n\ttargetm_common.have_named_sections.\n\t* explow.c: Include common/common-target.h.\n\t* expr.c: Include common/common-target.h.\n\t(build_personality_function): Use\n\ttargetm_common.except_unwind_info.\n\t* function.c: Include common/common-target.h.\n\t(expand_function_end): Use targetm_common.except_unwind_info.\n\t* haifa-sched.c: Include common/common-target.h.\n\t(sched_create_recovery_edges): Use\n\ttargetm_common.have_named_sections.\n\t* lto-opts.c: Include common/common-target.h instead of target.h.\n\t(lto_reissue_options): Use targetm_common.handle_option.\n\t* opts.c: Include common/common-target.h.\n\t(target_handle_option): Use targetm_common.handle_option.\n\t(init_options_struct): Update comment referring to\n\ttargetm.target_option.optimization.  Use\n\ttargetm_common.default_target_flags,\n\ttargetm_common.unwind_tables_default and\n\ttargetm_common.option_init_struct.\n\t(default_options_optimization): Use\n\ttargetm_common.option_optimization_table.\n\t(finish_options): Use targetm_common.except_unwind_info,\n\ttargetm_common.unwind_tables_default,\n\ttargetm_common.have_named_sections and\n\ttargetm_common.supports_split_stack.\n\t* toplev.c: Include common/common-target.h.\n\t(process_options): Use targetm_common.have_named_sections.\n\t* tree-tailcall.c: Include common/common-target.h.\n\t(suitable_for_tail_call_opt_p): Use\n\ttargetm_common.except_unwind_info.\n\t* tree.c: Include common/common-target.h.\n\t(build_common_builtin_nodes): Use\n\ttargetm_common.except_unwind_info.\n\t* varasm.c: Include common/common-target.h.\n\t(resolve_unique_section, hot_function_section,\n\tdefault_function_section): Use targetm_common.have_named_sections.\n\nada:\n\t* gcc-interface/Make-lang.in (gnatbind$(exeext)): Use ggc-none.o.\n\t(ada/utils.o): Update dependencies.\n\t* gcc-interface/Makefile.in (EXTRA_GNATTOOLS_OBJS): Add\n\t../../../libcpp/libcpp.a.\n\t* gcc-interface/utils.c: Include common/common-target.h.\n\t(process_attributes): Use targetm_common.have_named_sections.\n\nc-family:\n\t* c-common.c: Include common/common-target.h.\n\t(handle_section_attribute): Use\n\ttargetm_common.have_named_sections.\n\t* c-cppbuiltin.c: Include common/common-target.h.\n\t(c_cpp_builtins): Use targetm_common.except_unwind_info.\n\ncp:\n\t* Make-lang.in (cp/method.o): Update dependencies.\n\t* method.c: Include common/common-target.h.\n\t(use_thunk): Use targetm_common.have_named_sections.\n\ngo:\n\t* Make-lang.in (go/go-lang.o, go/go-backend.o): Update\n\tdependencies.\n\t* go-backend.c: Include common/common-target.h.\n\t(go_write_export_data): Use targetm_common.have_named_sections.\n\t* go-lang.c: Include common/common-target.h.\n\t(go_langhook_init_options_struct): Use\n\ttargetm_common.supports_split_stack.\n\npo:\n\t* exgettext: Handle common/ directory and subdirectories.\n\nFrom-SVN: r175064", "tree": {"sha": "658cc5660e9114b57493380f94c40fc34c440910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/658cc5660e9114b57493380f94c40fc34c440910"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/677f3fa8158c48c278b09c86d9573e7c1afa3c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677f3fa8158c48c278b09c86d9573e7c1afa3c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677f3fa8158c48c278b09c86d9573e7c1afa3c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677f3fa8158c48c278b09c86d9573e7c1afa3c53/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26c70902d9b43da2a717acae8046c63fc0ab0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26c70902d9b43da2a717acae8046c63fc0ab0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26c70902d9b43da2a717acae8046c63fc0ab0ae"}], "stats": {"total": 7138, "additions": 4299, "deletions": 2839}, "files": [{"sha": "6d79df7313bc8f4e996fa862369665b1a99a17bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,3 +1,304 @@\n+2011-06-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* target-def.h (TARGET_HAVE_NAMED_SECTIONS): Move to\n+\tcommon/common-target-def.h.\n+\t* target.def (default_target_flags, handle_option,\n+\tsupports_split_stack, optimization_table, init_struct,\n+\texcept_unwind_info, unwind_tables_default, have_named_sections):\n+\tMove to common/common-target.def.\n+\t* target.h (enum opt_levels, struct default_options): Move to\n+\tcommon/common-target.h.\n+\t* targhooks.c (default_except_unwind_info,\n+\tdwarf2_except_unwind_info, sjlj_except_unwind_info,\n+\tdefault_target_handle_option, empty_optimization_table): Move to\n+\tcommon/common-targhooks.c.\n+\t* targhooks.h (default_except_unwind_info,\n+\tdwarf2_except_unwind_info, sjlj_except_unwind_info,\n+\tdefault_target_handle_option, empty_optimization_table): Move to\n+\tcommon/common-targhooks.h.\n+\t* common/common-target-def.h: Include common/common-targhooks.h.\n+\t(TARGET_HAVE_NAMED_SECTIONS): Define if TARGET_ASM_NAMED_SECTION\n+\tdefined.\n+\t* common/common-target.def (handle_option, option_init_struct,\n+\toption_optimization_table, default_target_flags,\n+\texcept_unwind_info, supports_split_stack, unwind_tables_default,\n+\thave_named_sections): Move from target.def.\n+\t(HOOK_PREFIX): Undefine at end of file.\n+\t* common/common-target.h: Include input.h.\n+\t(enum opt_levels, struct default_options): Move from target.h.\n+\t* common/common-targhooks.c, common/common-targhooks.h: New.\n+\t* config.gcc (target_has_targetm_common): Default to yes.\n+\t(moxie*): Set target_has_targetm_common=no.\n+\t(hppa*-*-*): Don't set target_has_targetm_common=yes.\n+\t* doc/tm.texi: Regenerate.\n+\t* Makefile.in (COMMON_TARGET_H): Add $(INPUT_H).\n+\t(C_TARGET_DEF_H): Add common/common-targhooks.h.\n+\t(GCC_OBJS): Remove vec.o.\n+\t(OBJS): Remove hooks.o and vec.o.\n+\t(OBJS-libcommon-target): Add vec.o, hooks.o and\n+\tcommon/common-targhooks.o.\n+\t(c-family/c-common.o, c-family/c-cppbuiltin.o, lto-opts.o, tree.o,\n+\ttree-tailcall.o, opts.o, toplev.o, varasm.o, function.o, except.o,\n+\texpr.o, explow.o, dbxout.o, dwarf2out.o, cfgrtl.o, haifa-sched.o,\n+\tcfglayout.o, $(out_object_file), $(common_out_object_file)):\n+\tUpdate dependencies.\n+\t(common/common-targhooks.o): New.\n+\t* common/config/default-common.c: Include tm.h.  Add FIXME\n+\tcomment.\n+\t* common/config/pa/pa-common.c: Include more headers.  Take\n+\tcopyright dates from pa.c.\n+\t(pa_option_optimization_table, pa_handle_option,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_DEFAULT_TARGET_FLAGS,\n+\tTARGET_HANDLE_OPTION): Move from pa.c.\n+\t* common/config/alpha/alpha-common.c,\n+\tcommon/config/arm/arm-common.c, common/config/avr/avr-common.c,\n+\tcommon/config/bfin/bfin-common.c,\n+\tcommon/config/cris/cris-common.c,\n+\tcommon/config/fr30/fr30-common.c, common/config/frv/frv-common.c,\n+\tcommon/config/h8300/h8300-common.c,\n+\tcommon/config/i386/i386-common.c,\n+\tcommon/config/ia64/ia64-common.c,\n+\tcommon/config/iq2000/iq2000-common.c,\n+\tcommon/config/lm32/lm32-common.c,\n+\tcommon/config/m32c/m32c-common.c,\n+\tcommon/config/m32r/m32r-common.c,\n+\tcommon/config/m68k/m68k-common.c,\n+\tcommon/config/mcore/mcore-common.c,\n+\tcommon/config/mep/mep-common.c,\n+\tcommon/config/microblaze/microblaze-common.c,\n+\tcommon/config/mips/mips-common.c,\n+\tcommon/config/mmix/mmix-common.c,\n+\tcommon/config/mn10300/mn10300-common.c,\n+\tcommon/config/pdp11/pdp11-common.c,\n+\tcommon/config/picochip/picochip-common.c,\n+\tcommon/config/rs6000/rs6000-common.c,\n+\tcommon/config/rx/rx-common.c, common/config/s390/s390-common.c,\n+\tcommon/config/score/score-common.c, common/config/sh/sh-common.c,\n+\tcommon/config/sparc/sparc-common.c,\n+\tcommon/config/spu/spu-common.c, common/config/v850/v850-common.c,\n+\tcommon/config/vax/vax-common.c,\n+\tcommon/config/xstormy16/xstormy16-common.c,\n+\tcommon/config/xtensa/xtensa-common.c: New.\n+\t* config/alpha/alpha.c: Include common/common-target.h.\n+\t(alpha_option_optimization_table, alpha_handle_option,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to alpha-common.c.\n+\t* config/arm/arm-protos.h (arm_except_unwind_info): Declare.\n+\t* config/arm/arm.c (arm_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_EXCEPT_UNWIND_INFO, arm_except_unwind_info): Move to\n+\tarm-common.c.\n+\t* config/avr/avr.c (avr_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_EXCEPT_UNWIND_INFO): Move\n+\tto avr-common.c.\n+\t* config/bfin/bfin.c (struct bfin_cpu): Move to bfin.h.\n+\t(bfin_cpus, bfin_handle_option, TARGET_HANDLE_OPTION,\n+\tTARGET_DEFAULT_TARGET_FLAGS): Move to bfin-common.c.\n+\t* config/bfin/bfin.h struct bfin_cpu): Move from bfin.c.\n+\t* config/cris/cris.c (cris_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, cris_handle_option): Move to\n+\tcris-common.c.\n+\t* config/fr30/fr30.c (fr30_option_optimization_table,\n+\tTARGET_EXCEPT_UNWIND_INFO, TARGET_OPTION_OPTIMIZATION_TABLE): Move\n+\tto fr30-common.c.\n+\t* config/frv/frv.c (frv_option_optimization_table,\n+\tMASK_DEFAULT_ALLOC_CC, TARGET_DEFAULT_TARGET_FLAGS,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to frv-common.c.\n+\t* config/h8300/h8300.c (h8300_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_EXCEPT_UNWIND_INFO): Move to h8300-common.c.\n+\t* config/i386/i386-protos.h (ix86_handle_option): Declare.\n+\t* config/i386/i386.c: Include common/common-target.h.\n+\t(OPTION_MASK_ISA_MMX_SET, OPTION_MASK_ISA_3DNOW_SET,\n+\tOPTION_MASK_ISA_SSE_SET, OPTION_MASK_ISA_SSE2_SET,\n+\tOPTION_MASK_ISA_SSE3_SET, OPTION_MASK_ISA_SSSE3_SET,\n+\tOPTION_MASK_ISA_SSE4_1_SET, OPTION_MASK_ISA_SSE4_2_SET,\n+\tOPTION_MASK_ISA_AVX_SET, OPTION_MASK_ISA_FMA_SET,\n+\tOPTION_MASK_ISA_SSE4_SET, OPTION_MASK_ISA_SSE4A_SET,\n+\tOPTION_MASK_ISA_FMA4_SET, OPTION_MASK_ISA_XOP_SET,\n+\tOPTION_MASK_ISA_LWP_SET, OPTION_MASK_ISA_AES_SET,\n+\tOPTION_MASK_ISA_PCLMUL_SET, OPTION_MASK_ISA_ABM_SET,\n+\tOPTION_MASK_ISA_BMI_SET, OPTION_MASK_ISA_TBM_SET,\n+\tOPTION_MASK_ISA_POPCNT_SET, OPTION_MASK_ISA_CX16_SET,\n+\tOPTION_MASK_ISA_SAHF_SET, OPTION_MASK_ISA_MOVBE_SET,\n+\tOPTION_MASK_ISA_CRC32_SET, OPTION_MASK_ISA_FSGSBASE_SET,\n+\tOPTION_MASK_ISA_RDRND_SET, OPTION_MASK_ISA_F16C_SET,\n+\tOPTION_MASK_ISA_MMX_UNSET, OPTION_MASK_ISA_3DNOW_UNSET,\n+\tOPTION_MASK_ISA_3DNOW_A_UNSET, OPTION_MASK_ISA_SSE_UNSET,\n+\tOPTION_MASK_ISA_SSE2_UNSET, OPTION_MASK_ISA_SSE3_UNSET,\n+\tOPTION_MASK_ISA_SSSE3_UNSET, OPTION_MASK_ISA_SSE4_1_UNSET,\n+\tOPTION_MASK_ISA_SSE4_2_UNSET, OPTION_MASK_ISA_AVX_UNSET,\n+\tOPTION_MASK_ISA_FMA_UNSET, OPTION_MASK_ISA_SSE4_UNSET,\n+\tOPTION_MASK_ISA_SSE4A_UNSET, OPTION_MASK_ISA_FMA4_UNSET,\n+\tOPTION_MASK_ISA_XOP_UNSET, OPTION_MASK_ISA_LWP_UNSET,\n+\tOPTION_MASK_ISA_AES_UNSET, OPTION_MASK_ISA_PCLMUL_UNSET,\n+\tOPTION_MASK_ISA_ABM_UNSET, OPTION_MASK_ISA_BMI_UNSET,\n+\tOPTION_MASK_ISA_TBM_UNSET, OPTION_MASK_ISA_POPCNT_UNSET,\n+\tOPTION_MASK_ISA_CX16_UNSET, OPTION_MASK_ISA_SAHF_UNSET,\n+\tOPTION_MASK_ISA_MOVBE_UNSET, OPTION_MASK_ISA_CRC32_UNSET,\n+\tOPTION_MASK_ISA_FSGSBASE_UNSET, OPTION_MASK_ISA_RDRND_UNSET,\n+\tOPTION_MASK_ISA_F16C_UNSET, ix86_handle_option,\n+\tix86_option_optimization_table, ix86_option_init_struct,\n+\tix86_supports_split_stack, TARGET_DEFAULT_TARGET_FLAGS,\n+\tTARGET_HANDLE_OPTION, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_OPTION_INIT_STRUCT, TARGET_SUPPORTS_SPLIT_STACK): Move to\n+\ti386-common.c.\n+\t* config/i386/t-i386 (i386.o): Update dependencies.\n+\t* config/ia64/ia64-protos.h (ia64_except_unwind_info): Declare.\n+\t* config/ia64/ia64.c (ia64_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_EXCEPT_UNWIND_INFO,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tia64_handle_option): Move to ia64-common.c.\n+\t* config/iq2000/iq2000.c (iq2000_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to iq2000-common.c.\n+\t* config/lm32/lm32.c (lm32_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_EXCEPT_UNWIND_INFO): Move\n+\tto lm32-common.c.\n+\t* config/m32c/m32c.c (TARGET_HAVE_NAMED_SECTIONS): Move to\n+\tm32c-common.c.\n+\t* config/m32r/m32r.c (m32r_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_EXCEPT_UNWIND_INFO,\n+\tm32r_handle_option): Move to m32r-common.c.\n+\t(m32r_memory_move_cost): Remove comment referring to\n+\tTARGET_HANDLE_OPTION.\n+\t* config/m68k/m68k.c (TARGET_HANDLE_OPTION, m68k_handle_option):\n+\tMove to m68k-common.c.\n+\t* config/mcore/mcore.c (mcore_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_EXCEPT_UNWIND_INFO): Move to mcore-common.c.\n+\t* config/mep/mep.c (mep_option_optimization_table,\n+\tmep_handle_option, TARGET_HANDLE_OPTION,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_DEFAULT_TARGET_FLAGS):\n+\tMove to mep-common.c.\n+\t* config/microblaze/microblaze.c\n+\t(microblaze_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_EXCEPT_UNWIND_INFO): Move to microblaze-common.c.\n+\t* config/mips/mips.c (mips_handle_option,\n+\tmips_option_optimization_table, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Move to\n+\tmips-common.c.\n+\t* config/mmix/mmix.c (mmix_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE):\n+\tMove to mmix-common.c.\n+\t* config/mn10300/mn10300.c (mn10300_option_optimization_table,\n+\tmn10300_handle_option, TARGET_EXCEPT_UNWIND_INFO,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to mn10300-common.c.\n+\t* config/pa/pa.c: Include common/common-target.h.\n+\t(pa_option_optimization_table, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tpa_handle_option): Move to pa-common.c.\n+\t(pa_option_override): Use targetm_common.except_unwind_info.\n+\t(pa_asm_output_mi_thunk, pa_function_section): Use\n+\ttargetm_common.have_named_sections.\n+\t* config/pdp11/pdp11.c (pdp11_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_OPTION_INIT_STRUCT,\n+\tpdp11_handle_option, pdp11_option_init_struct): Move to\n+\tpdp11-common.c.\n+\t* config/picochip/picochip.c (picochip_option_optimization_table,\n+\tTARGET_HAVE_NAMED_SECTIONS, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_EXCEPT_UNWIND_INFO): Move to picochip-common.c.\n+\t* config/rs6000/rs6000.c: Include common/common-target.h.\n+\t(rs6000_option_optimization_table, TARGET_HANDLE_OPTION,\n+\tTARGET_OPTION_INIT_STRUCT, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_DEFAULT_TARGET_FLAGS, rs6000_option_init_struct,\n+\trs6000_handle_option): Move to rs6000-common.c.\n+\t* config/rs6000/t-rs6000 (rs6000.o): Update dependencies.\n+\t* config/rx/rx.c (rx_handle_option, rx_option_optimization_table,\n+\tTARGET_HANDLE_OPTION, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_EXCEPT_UNWIND_INFO): Move to rx-common.c.\n+\t* config/s390/s390.c (processor_flags_table,\n+\ts390_option_optimization_table, s390_option_init_struct,\n+\ts390_handle_option, TARGET_DEFAULT_TARGET_FLAGS,\n+\tTARGET_HANDLE_OPTION, TARGET_OPTION_OPTIMIZATION_TABLE,\n+\tTARGET_OPTION_INIT_STRUCT): Move to s390-common.c.\n+\t* config/s390/s390.h (processor_flags_table): Declare.\n+\t* config/score/score.c (score_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, MASK_ALL_CPU_BITS,\n+\tscore_handle_option): Move to score-common.c.\n+\t* config/sh/sh.c (sh_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE, TARGET_OPTION_INIT_STRUCT,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION,\n+\tsh_handle_option, sh_option_init_struct): Move to sh-common.c.\n+\t* config/sparc/sparc.c: Include common/common-target.h.\n+\t(sparc_option_optimization_table, TARGET_DEFAULT_TARGET_FLAGS,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to sparc-common.c.\n+\t* config/spu/spu.c (TARGET_DEFAULT_TARGET_FLAGS,\n+\tTARGET_OPTION_INIT_STRUCT, TARGET_EXCEPT_UNWIND_INFO,\n+\tspu_option_init_struct): Move to spu-common.c.\n+\t* config/stormy16/stormy16.c (xstorym16_option_optimization_table,\n+\tTARGET_OPTION_OPTIMIZATION_TABLE): Move to xstormy16-common.c.\n+\t* config/v850/v850.c (small_memory_physical_max,\n+\tv850_handle_memory_optionn v850_handle_option,\n+\tv850_option_optimization_table, TARGET_DEFAULT_TARGET_FLAGS,\n+\tTARGET_HANDLE_OPTION, TARGET_OPTION_OPTIMIZATION_TABLE): Move to\n+\tv850-common.c.\n+\t* config/vax/vax.c (TARGET_DEFAULT_TARGET_FLAGS): Move to\n+\tvax-common.c.\n+\t* config/xtensa/xtensa.c (xtensa_option_optimization_table,\n+\tTARGET_DEFAULT_TARGET_FLAGS, TARGET_OPTION_OPTIMIZATION_TABLE):\n+\tMove to xtensa-common.c.\n+\t* cfglayout.c: Include common/common-target.h.\n+\t(fixup_reorder_chain): Use targetm_common.have_named_sections.\n+\t* cfgrtl.c: Include common/common-target.h.\n+\t(force_nonfallthru_and_redirect, commit_one_edge_insertion): Use\n+\ttargetm_common.have_named_sections.\n+\t* dbxout.c: Include common/common-target.h.\n+\t(dbxout_function_end): Use targetm_common.have_named_sections.\n+\t* defaults.h (STACK_OLD_CHECK_PROTECT, STACK_CHECK_PROTECT): Use\n+\ttargetm_common.except_unwind_info.\n+\t* dwarf2out.c: Include common/common-target.h.\n+\t(dwarf2out_do_frame, dwarf2out_do_cfi_asm,\n+\tdwarf2out_begin_prologue, dwarf2out_frame_init,\n+\tdwarf2out_frame_finish, dwarf2out_assembly_start): Use\n+\ttargetm_common.except_unwind_info.\n+\t* except.c: Include common/common-target.h.\n+\t(init_eh, finish_eh_generation,\n+\toutput_one_function_exception_table): Use\n+\ttargetm_common.except_unwind_info.\n+\t(switch_to_exception_section): Use\n+\ttargetm_common.have_named_sections.\n+\t* explow.c: Include common/common-target.h.\n+\t* expr.c: Include common/common-target.h.\n+\t(build_personality_function): Use\n+\ttargetm_common.except_unwind_info.\n+\t* function.c: Include common/common-target.h.\n+\t(expand_function_end): Use targetm_common.except_unwind_info.\n+\t* haifa-sched.c: Include common/common-target.h.\n+\t(sched_create_recovery_edges): Use\n+\ttargetm_common.have_named_sections.\n+\t* lto-opts.c: Include common/common-target.h instead of target.h.\n+\t(lto_reissue_options): Use targetm_common.handle_option.\n+\t* opts.c: Include common/common-target.h.\n+\t(target_handle_option): Use targetm_common.handle_option.\n+\t(init_options_struct): Update comment referring to\n+\ttargetm.target_option.optimization.  Use\n+\ttargetm_common.default_target_flags,\n+\ttargetm_common.unwind_tables_default and\n+\ttargetm_common.option_init_struct.\n+\t(default_options_optimization): Use\n+\ttargetm_common.option_optimization_table.\n+\t(finish_options): Use targetm_common.except_unwind_info,\n+\ttargetm_common.unwind_tables_default,\n+\ttargetm_common.have_named_sections and\n+\ttargetm_common.supports_split_stack.\n+\t* toplev.c: Include common/common-target.h.\n+\t(process_options): Use targetm_common.have_named_sections.\n+\t* tree-tailcall.c: Include common/common-target.h.\n+\t(suitable_for_tail_call_opt_p): Use\n+\ttargetm_common.except_unwind_info.\n+\t* tree.c: Include common/common-target.h.\n+\t(build_common_builtin_nodes): Use\n+\ttargetm_common.except_unwind_info.\n+\t* varasm.c: Include common/common-target.h.\n+\t(resolve_unique_section, hot_function_section,\n+\tdefault_function_section): Use targetm_common.have_named_sections.\n+\n 2011-06-14  Easwaran Raman  <eraman@google.com>\n \n \tPR rtl-optimization/44194"}, {"sha": "09f8e8e9eec47b6a14837fe43fd13d6c8f9018af", "filename": "gcc/Makefile.in", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -893,14 +893,14 @@ C_TARGET_DEF = c-family/c-target.def target-hooks-macros.h\n COMMON_TARGET_DEF = common/common-target.def target-hooks-macros.h\n TARGET_H = $(TM_H) target.h $(TARGET_DEF) insn-modes.h\n C_TARGET_H = c-family/c-target.h $(C_TARGET_DEF)\n-COMMON_TARGET_H = common/common-target.h $(COMMON_TARGET_DEF)\n+COMMON_TARGET_H = common/common-target.h $(INPUT_H) $(COMMON_TARGET_DEF)\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n HOOKS_H = hooks.h $(MACHMODE_H)\n HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h target-hooks-def.h $(HOOKS_H) targhooks.h\n C_TARGET_DEF_H = c-family/c-target-def.h c-family/c-target-hooks-def.h \\\n-  $(TREE_H) $(C_COMMON_H) $(HOOKS_H)\n+  $(TREE_H) $(C_COMMON_H) $(HOOKS_H) common/common-targhooks.h\n COMMON_TARGET_DEF_H = common/common-target-def.h \\\n   common/common-target-hooks-def.h $(HOOKS_H)\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n@@ -1173,7 +1173,7 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n FORTRAN_TARGET_OBJS=@fortran_target_objs@\n \n # Object files for gcc driver.\n-GCC_OBJS = gcc.o vec.o ggc-none.o\n+GCC_OBJS = gcc.o ggc-none.o\n \n # Language-specific object files shared by all C-family front ends.\n C_COMMON_OBJS = c-family/c-common.o c-family/c-cppbuiltin.o c-family/c-dump.o \\\n@@ -1292,7 +1292,6 @@ OBJS = \\\n \tgraphite-sese-to-poly.o \\\n \tgtype-desc.o \\\n \thaifa-sched.o \\\n-\thooks.o \\\n \thwint.o \\\n \tifcvt.o \\\n \timplicit-zee.o \\\n@@ -1484,7 +1483,6 @@ OBJS = \\\n \tvar-tracking.o \\\n \tvarasm.o \\\n \tvarpool.o \\\n-\tvec.o \\\n \tvmsdbgout.o \\\n \tweb.o \\\n \txcoffout.o \\\n@@ -1499,7 +1497,7 @@ OBJS-libcommon = diagnostic.o pretty-print.o intl.o input.o version.o\n # Objects in libcommon-target.a, used by drivers and by the core\n # compiler and containing target-dependent code.\n OBJS-libcommon-target = $(common_out_object_file) prefix.o opts-common.o \\\n-\toptions.o\n+\toptions.o vec.o hooks.o common/common-targhooks.o\n \n # This lists all host objects for the front ends.\n ALL_HOST_FRONTEND_OBJS = $(C_OBJS) \\\n@@ -2144,11 +2142,11 @@ c-family/c-common.o : c-family/c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \tintl.h $(OPTS_H) $(CPPLIB_H) $(TREE_INLINE_H) $(HASHTAB_H) \\\n \t$(BUILTINS_DEF) $(CGRAPH_H) $(BASIC_BLOCK_H) $(TARGET_DEF_H) \\\n \t$(LIBFUNCS_H) \\\n-\tgt-c-family-c-common.h\n+\tgt-c-family-c-common.h $(COMMON_TARGET_H)\n \n c-family/c-cppbuiltin.o : c-family/c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TM_H) $(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) \\\n-\t$(FLAGS_H) output.h $(TREE_H) $(TARGET_H) \\\n+\t$(FLAGS_H) output.h $(TREE_H) $(TARGET_H) $(COMMON_TARGET_H) \\\n \t$(TM_P_H) debug.h $(CPP_ID_DATA_H) cppbuiltin.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$< $(OUTPUT_OPTION)\n@@ -2389,7 +2387,7 @@ lto-symtab.o: lto-symtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(LTO_STREAMER_H) $(LINKER_PLUGIN_API_H) gt-lto-symtab.h\n lto-opts.o: lto-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(HASHTAB_H) $(GGC_H) $(BITMAP_H) $(FLAGS_H) $(OPTS_H) $(OPTIONS_H) \\\n-   $(TARGET_H) $(DIAGNOSTIC_H) $(LTO_STREAMER_H)\n+   $(COMMON_TARGET_H) $(DIAGNOSTIC_H) $(LTO_STREAMER_H)\n lto-streamer.o: lto-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TREE_H) $(GIMPLE_H) $(BITMAP_H) $(LTO_STREAMER_H) $(FLAGS_H) \\\n    $(TREE_FLOW_H) $(DIAGNOSTIC_CORE_H) $(LTO_SYMTAB_H) toplev.h $(DIAGNOSTIC_CORE_H)\n@@ -2403,7 +2401,8 @@ tree.o: tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    langhooks.h gt-tree.h $(TREE_INLINE_H) tree-iterator.h \\\n    $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(OBSTACK_H) pointer-set.h \\\n    tree-pass.h $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) $(CGRAPH_H) $(TIMEVAR_H) \\\n-   $(EXCEPT_H) debug.h intl.h tree-diagnostic.h tree-pretty-print.h\n+   $(EXCEPT_H) debug.h intl.h tree-diagnostic.h tree-pretty-print.h \\\n+   $(COMMON_TARGET_H)\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h toplev.h $(SPLAY_TREE_H) $(TREE_DUMP_H) \\\n    tree-iterator.h $(TREE_PASS_H) $(DIAGNOSTIC_H)\n@@ -2568,7 +2567,8 @@ tree-cfgcleanup.o : tree-cfgcleanup.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) $(DIAGNOSTIC_H) $(EXCEPT_H) $(TREE_PASS_H) $(FLAGS_H) langhooks.h \\\n-   $(BASIC_BLOCK_H) $(DBGCNT_H) gimple-pretty-print.h $(TARGET_H)\n+   $(BASIC_BLOCK_H) $(DBGCNT_H) gimple-pretty-print.h $(TARGET_H) \\\n+   $(COMMON_TARGET_H)\n tree-ssa-sink.o : tree-ssa-sink.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_PASS_H) $(FLAGS_H) alloc-pool.h \\\n@@ -2842,7 +2842,7 @@ diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(RTL_H) \\\n-   $(DIAGNOSTIC_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n+   $(DIAGNOSTIC_H) $(INSN_ATTR_H) intl.h $(TARGET_H) $(COMMON_TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) opts-diagnostic.h\n opts-global.o : opts-global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DIAGNOSTIC_H) $(OPTS_H) $(FLAGS_H) $(GGC_H) $(TREE_H) langhooks.h \\\n@@ -2855,6 +2855,8 @@ targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(MACHMODE_H) $(TARGET_DEF_H) $(TARGET_H) $(GGC_H) gt-targhooks.h \\\n    $(OPTABS_H) $(RECOG_H) reload.h hard-reg-set.h intl.h $(OPTS_H) \\\n    tree-ssa-alias.h $(TREE_FLOW_H)\n+common/common-targhooks.o : common/common-targhooks.c $(CONFIG_H) $(SYSTEM_H) \\\n+   coretypes.h $(INPUT_H) $(TM_H) $(COMMON_TARGET_H) common/common-targhooks.h\n \n bversion.h: s-bversion; @true\n s-bversion: BASE-VER\n@@ -2876,7 +2878,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(CGRAPH_H) $(COVERAGE_H) alloc-pool.h $(GGC_H) $(INTEGRATE_H) \\\n    $(OPTS_H) params.def tree-mudflap.h $(TREE_PASS_H) $(GIMPLE_H) \\\n    tree-ssa-alias.h $(PLUGIN_H) realmpfr.h tree-diagnostic.h \\\n-   tree-pretty-print.h opts-diagnostic.h\n+   tree-pretty-print.h opts-diagnostic.h $(COMMON_TARGET_H)\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t  -DTARGET_NAME=\\\"$(target_noncanonical)\\\" \\\n \t  -c $(srcdir)/toplev.c $(OUTPUT_OPTION)\n@@ -2923,13 +2925,13 @@ varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    output.h $(DIAGNOSTIC_CORE_H) xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H) langhooks.h gt-varasm.h $(BASIC_BLOCK_H) \\\n    $(CFGLAYOUT_H) $(CGRAPH_H) targhooks.h tree-mudflap.h \\\n-   tree-iterator.h pointer-set.h\n+   tree-iterator.h pointer-set.h $(COMMON_TARGET_H)\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    $(TREE_H) $(CFGLAYOUT_H) $(GIMPLE_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) \\\n    $(OPTABS_H) $(LIBFUNCS_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n    output.h  $(EXCEPT_H) $(HASHTAB_H) $(GGC_H) $(TM_P_H) langhooks.h \\\n    gt-function.h $(TARGET_H) $(BASIC_BLOCK_H) $(INTEGRATE_H) $(PREDICT_H) \\\n-   $(TREE_PASS_H) $(DF_H) $(TIMEVAR_H) vecprim.h\n+   $(TREE_PASS_H) $(DF_H) $(TIMEVAR_H) vecprim.h $(COMMON_TARGET_H)\n statistics.o : statistics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_PASS_H) $(TREE_DUMP_H) $(HASHTAB_H) statistics.h $(FUNCTION_H)\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n@@ -2944,14 +2946,15 @@ except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    dwarf2asm.h dwarf2out.h toplev.h $(DIAGNOSTIC_CORE_H) $(HASHTAB_H) intl.h $(GGC_H) \\\n    gt-except.h $(CGRAPH_H) $(INTEGRATE_H) $(DIAGNOSTIC_H) $(DWARF2_H) \\\n    $(TARGET_H) $(TM_P_H) $(TREE_PASS_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n-   tree-pretty-print.h sbitmap.h\n+   tree-pretty-print.h sbitmap.h $(COMMON_TARGET_H)\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n    $(LIBFUNCS_H) $(INSN_ATTR_H) insn-config.h $(RECOG_H) output.h \\\n    typeclass.h hard-reg-set.h toplev.h $(DIAGNOSTIC_CORE_H) hard-reg-set.h $(EXCEPT_H) \\\n    reload.h langhooks.h intl.h $(TM_P_H) $(TARGET_H) \\\n    tree-iterator.h gt-expr.h $(MACHMODE_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n-   $(TREE_PASS_H) $(DF_H) $(DIAGNOSTIC_H) vecprim.h $(SSAEXPAND_H)\n+   $(TREE_PASS_H) $(DF_H) $(DIAGNOSTIC_H) vecprim.h $(SSAEXPAND_H) \\\n+   $(COMMON_TARGET_H)\n dojump.o : dojump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) $(OPTABS_H) $(INSN_ATTR_H) insn-config.h \\\n    langhooks.h $(GGC_H) gt-dojump.h vecprim.h $(BASIC_BLOCK_H) output.h\n@@ -2974,7 +2977,7 @@ expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_\n explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n    $(DIAGNOSTIC_CORE_H) $(EXCEPT_H) $(FUNCTION_H) $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h \\\n-   $(TARGET_H) output.h\n+   $(TARGET_H) $(COMMON_TARGET_H) output.h\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) $(LIBFUNCS_H) \\\n    $(RECOG_H) reload.h $(DIAGNOSTIC_CORE_H) $(GGC_H) $(TM_P_H) \\\n@@ -2983,7 +2986,7 @@ dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FLAGS_H) $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) $(FUNCTION_H) \\\n    langhooks.h insn-config.h reload.h $(GSTAB_H) xcoffout.h output.h dbxout.h \\\n    toplev.h $(DIAGNOSTIC_CORE_H) $(GGC_H) $(OBSTACK_H) $(EXPR_H) $(CGRAPH_H) \\\n-   gt-dbxout.h\n+   gt-dbxout.h $(COMMON_TARGET_H)\n debug.o : debug.c debug.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H)\n sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) debug.h \\\n    $(TREE_H) $(GGC_H) $(RTL_H) $(REGS_H) $(FLAGS_H) insn-config.h \\\n@@ -2995,7 +2998,8 @@ dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(LIBFUNCS_H) toplev.h $(DIAGNOSTIC_CORE_H) dwarf2out.h reload.h \\\n    $(GGC_H) $(EXCEPT_H) dwarf2asm.h $(TM_P_H) langhooks.h $(HASHTAB_H) \\\n    gt-dwarf2out.h $(TARGET_H) $(CGRAPH_H) $(MD5_H) $(INPUT_H) $(FUNCTION_H) \\\n-   $(GIMPLE_H) $(TREE_PASS_H) $(TREE_FLOW_H) $(CFGLAYOUT_H) tree-pretty-print.h\n+   $(GIMPLE_H) $(TREE_PASS_H) $(TREE_FLOW_H) $(CFGLAYOUT_H) \\\n+   tree-pretty-print.h $(COMMON_TARGET_H)\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(FLAGS_H) $(RTL_H) $(TREE_H) output.h dwarf2asm.h $(TM_P_H) $(GGC_H) \\\n    gt-dwarf2asm.h $(DWARF2_H) $(SPLAY_TREE_H) $(TARGET_H)\n@@ -3273,7 +3277,7 @@ cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    output.h  $(FUNCTION_H) $(EXCEPT_H) $(TM_P_H) $(INSN_ATTR_H) \\\n    insn-config.h $(EXPR_H) \\\n    $(CFGLAYOUT_H) $(CFGLOOP_H) $(OBSTACK_H) $(TARGET_H) $(TREE_H) \\\n-   $(TREE_PASS_H) $(DF_H) $(GGC_H)\n+   $(TREE_PASS_H) $(DF_H) $(GGC_H) $(COMMON_TARGET_H)\n cfganal.o : cfganal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h insn-config.h $(RECOG_H) $(TM_P_H) \\\n    $(TIMEVAR_H) $(OBSTACK_H) $(DIAGNOSTIC_CORE_H) vecprim.h sbitmap.h $(BITMAP_H)\n@@ -3436,7 +3440,7 @@ modulo-sched.o : modulo-sched.c $(DDG_H) $(CONFIG_H) $(CONFIG_H) $(SYSTEM_H) \\\n haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(FUNCTION_H) \\\n    $(INSN_ATTR_H) $(DIAGNOSTIC_CORE_H) $(RECOG_H) $(EXCEPT_H) $(TM_P_H) $(TARGET_H) output.h \\\n-   $(PARAMS_H) $(DBGCNT_H) $(CFGLOOP_H) ira.h $(EMIT_RTL_H)\n+   $(PARAMS_H) $(DBGCNT_H) $(CFGLOOP_H) ira.h $(EMIT_RTL_H) $(COMMON_TARGET_H)\n sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) $(DIAGNOSTIC_CORE_H) $(RECOG_H) $(EXCEPT_H) cselib.h \\\n@@ -3510,7 +3514,7 @@ cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) insn-config.h $(BASIC_BLOCK_H) hard-reg-set.h output.h \\\n    $(FUNCTION_H) $(CFGLAYOUT_H) $(CFGLOOP_H) $(TARGET_H) gt-cfglayout.h \\\n    $(GGC_H) alloc-pool.h $(FLAGS_H) $(OBSTACK_H) $(TREE_PASS_H) vecprim.h \\\n-   $(DF_H) $(EMIT_RTL_H)\n+   $(DF_H) $(EMIT_RTL_H) $(COMMON_TARGET_H)\n timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TIMEVAR_H) $(FLAGS_H) intl.h toplev.h $(DIAGNOSTIC_CORE_H) $(RTL_H) timevar.def\n regcprop.o : regcprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -3547,12 +3551,13 @@ $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h $(DIAGNOSTIC_CORE_H) \\\n    $(TARGET_H) $(LIBFUNCS_H) $(TARGET_DEF_H) $(FUNCTION_H) $(SCHED_INT_H) \\\n    $(TM_P_H) $(EXPR_H) langhooks.h $(GGC_H) $(OPTABS_H) $(REAL_H) \\\n-   tm-constrs.h $(GIMPLE_H) $(DF_H) cselib.h\n+   tm-constrs.h $(GIMPLE_H) $(DF_H) cselib.h $(COMMON_TARGET_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n \n $(common_out_object_file): $(common_out_file) $(CONFIG_H) $(SYSTEM_H) \\\n-    coretypes.h $(COMMON_TARGET_H) $(COMMON_TARGET_DEF_H) $(TM_H)\n+    coretypes.h $(COMMON_TARGET_H) $(COMMON_TARGET_DEF_H) \\\n+    $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(OPTS_H) $(TM_H) $(TM_P_H) $(MACHMODE_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t  $< $(OUTPUT_OPTION)\n "}, {"sha": "eb39be4b6bba3944237847e810ba156a1dcf0239", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,3 +1,12 @@\n+2011-06-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/Make-lang.in (gnatbind$(exeext)): Use ggc-none.o.\n+\t(ada/utils.o): Update dependencies.\n+\t* gcc-interface/Makefile.in (EXTRA_GNATTOOLS_OBJS): Add\n+\t../../../libcpp/libcpp.a.\n+\t* gcc-interface/utils.c: Include common/common-target.h.\n+\t(process_attributes): Use targetm_common.have_named_sections.\n+\n 2011-06-07  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc-interface/misc.c (gnat_init): Do not set size_type_node or call"}, {"sha": "2e73363298bfdb24ea84eee3a007c0608d1a753d", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -479,8 +479,8 @@ gnat1$(exeext): $(TARGET_ADA_SRCS) $(GNAT1_OBJS) $(ADA_BACKEND) libcommon-target\n \t$(GCC_LINK) -o $@ $(GNAT1_OBJS) $(ADA_BACKEND) libcommon-target.a $(LIBS) $(SYSLIBS) $(BACKENDLIBS) $(CFLAGS)\n \t$(RM) stamp-gnatlib2-rts stamp-tools\n \n-gnatbind$(exeext): ada/b_gnatb.o $(CONFIG_H) $(GNATBIND_OBJS) libcommon-target.a $(LIBDEPS)\n-\t$(GCC_LINK) -o $@ ada/b_gnatb.o $(GNATBIND_OBJS) libcommon-target.a $(LIBS) $(SYSLIBS) $(CFLAGS)\n+gnatbind$(exeext): ada/b_gnatb.o $(CONFIG_H) $(GNATBIND_OBJS) ggc-none.o libcommon-target.a $(LIBDEPS)\n+\t$(GCC_LINK) -o $@ ada/b_gnatb.o $(GNATBIND_OBJS) ggc-none.o libcommon-target.a $(LIBS) $(SYSLIBS) $(CFLAGS)\n \n # use cross-gcc\n gnat-cross: force\n@@ -1237,7 +1237,8 @@ ada/trans.o : ada/gcc-interface/trans.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n ada/utils.o : ada/gcc-interface/utils.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(FLAGS_H) toplev.h $(RTL_H) output.h debug.h convert.h \\\n-   $(TARGET_H) function.h langhooks.h $(CGRAPH_H) $(DIAGNOSTIC_H) \\\n+   $(TARGET_H) $(COMMON_TARGET_H) function.h langhooks.h \\\n+   $(CGRAPH_H) $(DIAGNOSTIC_H) \\\n    $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h \\\n    ada/gcc-interface/ada.h ada/types.h ada/atree.h ada/elists.h ada/namet.h \\\n    ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h ada/sinfo.h ada/einfo.h \\"}, {"sha": "3c998d47d3ad20872723a07ed84fc0a2819ba9ad", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -180,7 +180,8 @@ LIBINTL_DEP = @LIBINTL_DEP@\n SYSLIBS = @GNAT_LIBEXC@\n \n # List of extra object files linked in with various programs.\n-EXTRA_GNATTOOLS_OBJS = ../../libcommon-target.a ../../libcommon.a\n+EXTRA_GNATTOOLS_OBJS = ../../libcommon-target.a ../../libcommon.a \\\n+\t../../../libcpp/libcpp.a\n \n # List extra gnattools\n EXTRA_GNATTOOLS ="}, {"sha": "e7496321702646db4c6a528a3e4d01d1c065ce94", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -36,6 +36,7 @@\n #include \"debug.h\"\n #include \"convert.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"cgraph.h\"\n #include \"diagnostic.h\"\n@@ -1720,7 +1721,7 @@ process_attributes (tree decl, struct attrib *attr_list)\n \tbreak;\n \n       case ATTR_LINK_SECTION:\n-\tif (targetm.have_named_sections)\n+\tif (targetm_common.have_named_sections)\n \t  {\n \t    DECL_SECTION_NAME (decl)\n \t      = build_string (IDENTIFIER_LENGTH (attr_list->name),"}, {"sha": "f42c5c33571aa4c072f9c3475f4ffea570b6986d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,3 +1,11 @@\n+2011-06-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c: Include common/common-target.h.\n+\t(handle_section_attribute): Use\n+\ttargetm_common.have_named_sections.\n+\t* c-cppbuiltin.c: Include common/common-target.h.\n+\t(c_cpp_builtins): Use targetm_common.except_unwind_info.\n+\n 2011-06-10  Richard Guenther  <rguenther@suse.de>\n \n \t* c-pretty-print.c (pp_c_type_specifier): Use pp_c_identifier"}, {"sha": "e5849efc2ae45d26c6916fe29913b7ecfaf73540", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"obstack.h\"\n #include \"cpplib.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"tree-inline.h\"\n #include \"toplev.h\"\n@@ -6563,7 +6564,7 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n {\n   tree decl = *node;\n \n-  if (targetm.have_named_sections)\n+  if (targetm_common.have_named_sections)\n     {\n       user_defined_section_attribute = true;\n "}, {"sha": "9f0918daed671473b9475cbc748ae912e7f38d98", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\t\t/* For dwarf2out_do_cfi_asm.  */\n #include \"tm_p.h\"\t\t/* For TARGET_CPU_CPP_BUILTINS & friends.  */\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"cpp-id-data.h\"\n #include \"cppbuiltin.h\"\n \n@@ -626,7 +627,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t\t\t\t   1000 + flag_abi_version);\n \n   /* libgcc needs to know this.  */\n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n     cpp_define (pfile, \"__USING_SJLJ_EXCEPTIONS__\");\n \n   /* limits.h and stdint.h need to know these.  */"}, {"sha": "d320fcc5dbd8a1fea9668934dd19e0c1187b8c98", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfglayout.h\"\n #include \"cfgloop.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"ggc.h\"\n #include \"alloc-pool.h\"\n #include \"flags.h\"\n@@ -912,7 +913,7 @@ fixup_reorder_chain (void)\n \t     section boundaries).  */\n \t  BB_COPY_PARTITION (src_bb, single_pred (bb));\n \t  if (flag_reorder_blocks_and_partition\n-\t      && targetm.have_named_sections\n+\t      && targetm_common.have_named_sections\n \t      && JUMP_P (BB_END (bb))\n \t      && !any_condjump_p (BB_END (bb))\n \t      && (EDGE_SUCC (bb, 0)->flags & EDGE_CROSSING))"}, {"sha": "7eb4362341b18436266d7278eb806dd1b9d6aed3", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,6 +1,6 @@\n /* Control flow graph manipulation code for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfglayout.h\"\n #include \"expr.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"cfgloop.h\"\n #include \"ggc.h\"\n #include \"tree-pass.h\"\n@@ -1224,7 +1225,7 @@ force_nonfallthru_and_redirect (edge e, basic_block target)\n \n       BB_COPY_PARTITION (jump_block, e->src);\n       if (flag_reorder_blocks_and_partition\n-\t  && targetm.have_named_sections\n+\t  && targetm_common.have_named_sections\n \t  && JUMP_P (BB_END (jump_block))\n \t  && !any_condjump_p (BB_END (jump_block))\n \t  && (EDGE_SUCC (jump_block, 0)->flags & EDGE_CROSSING))\n@@ -1524,7 +1525,7 @@ commit_one_edge_insertion (edge e)\n       after = BB_END (bb);\n \n       if (flag_reorder_blocks_and_partition\n-\t  && targetm.have_named_sections\n+\t  && targetm_common.have_named_sections\n \t  && e->src != ENTRY_BLOCK_PTR\n \t  && BB_PARTITION (e->src) == BB_COLD_PARTITION\n \t  && !(e->flags & EDGE_CROSSING)"}, {"sha": "ea16beef5ea9d0f122897b3dc0fbb3e2df3d3a89", "filename": "gcc/common/common-target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-target-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-target-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target-def.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -16,5 +16,10 @@\n    along with this program; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifdef TARGET_ASM_NAMED_SECTION\n+#define TARGET_HAVE_NAMED_SECTIONS true\n+#endif\n+\n #include \"common/common-target-hooks-def.h\"\n #include \"hooks.h\"\n+#include \"common/common-targhooks.h\""}, {"sha": "ab89758221aec2a7c71f355f7adea7e1abbe0aaf", "filename": "gcc/common/common-target.def", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.def?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -28,6 +28,66 @@ HOOK_VECTOR (TARGETM_COMMON_INITIALIZER, gcc_targetm_common)\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\"\n \n+/* Handle target switch DECODED for options structures OPTS and\n+   OPTS_SET, at location LOC.  Return true if the switch was valid.  */\n+DEFHOOK\n+(handle_option,\n+ \"\",\n+ bool, (struct gcc_options *opts, struct gcc_options *opts_set,\n+\tconst struct cl_decoded_option *decoded,\n+\tlocation_t loc),\n+ default_target_handle_option)\n+\n+DEFHOOK\n+(option_init_struct,\n+\"Set target-dependent initial values of fields in @var{opts}.\",\n+ void, (struct gcc_options *opts),\n+ hook_void_gcc_optionsp)\n+\n+/* Set default optimizations for the target.  */\n+DEFHOOKPOD\n+(option_optimization_table,\n+ \"\",\n+ const struct default_options *, empty_optimization_table)\n+\n+/* The initial value of target_flags.  */\n+DEFHOOKPOD\n+(default_target_flags,\n+ \"\",\n+ int, 0)\n+\n+/* Determine the type of unwind info to emit for exceptions.  */\n+DEFHOOK\n+(except_unwind_info,\n+ \"\",\n+ enum unwind_info_type, (struct gcc_options *opts),\n+ default_except_unwind_info)\n+\n+DEFHOOK\n+(supports_split_stack,\n+ \"Whether this target supports splitting the stack when the options\\\n+ described in @var{opts} have been passed.  This is called\\\n+ after options have been parsed, so the target may reject splitting\\\n+ the stack in some configurations.  The default version of this hook\\\n+ returns false.  If @var{report} is true, this function may issue a warning\\\n+ or error; if @var{report} is false, it must simply return a value\",\n+ bool, (bool report, struct gcc_options *opts),\n+ hook_bool_bool_gcc_optionsp_false)\n+\n+/* Leave the boolean fields at the end.  */\n+\n+/* True if unwinding tables should be generated by default.  */\n+DEFHOOKPOD\n+(unwind_tables_default,\n+ \"\",\n+ bool, false)\n+\n+/* True if arbitrary sections are supported.  */\n+DEFHOOKPOD\n+(have_named_sections,\n+ \"\",\n+ bool, false)\n+\n DEFHOOKPOD\n (always_strip_dotdot,\n  \"True if @file{..} components should always be removed from directory names\\\n@@ -37,3 +97,5 @@ DEFHOOKPOD\n  bool, false)\n  \n HOOK_VECTOR_END (C90_EMPTY_HACK)\n+\n+#undef HOOK_PREFIX"}, {"sha": "cd2d47c38bbf8d084c243a4fefa46d8751beb935", "filename": "gcc/common/common-target.h", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,5 +1,5 @@\n /* Data structure definitions for common hooks.\n-   Copyright (C) 2011\n+   Copyright (C) 2010, 2011\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -23,6 +23,43 @@\n #ifndef GCC_COMMON_TARGET_H\n #define GCC_COMMON_TARGET_H\n \n+#include \"input.h\"\n+\n+/* Sets of optimization levels at which an option may be enabled by\n+   default_options_optimization.  */\n+enum opt_levels\n+{\n+  OPT_LEVELS_NONE, /* No levels (mark end of array).  */\n+  OPT_LEVELS_ALL, /* All levels (used by targets to disable options\n+\t\t     enabled in target-independent code).  */\n+  OPT_LEVELS_0_ONLY, /* -O0 only.  */\n+  OPT_LEVELS_1_PLUS, /* -O1 and above, including -Os.  */\n+  OPT_LEVELS_1_PLUS_SPEED_ONLY, /* -O1 and above, but not -Os.  */\n+  OPT_LEVELS_2_PLUS, /* -O2 and above, including -Os.  */\n+  OPT_LEVELS_2_PLUS_SPEED_ONLY, /* -O2 and above, but not -Os.  */\n+  OPT_LEVELS_3_PLUS, /* -O3 and above.  */\n+  OPT_LEVELS_3_PLUS_AND_SIZE, /* -O3 and above and -Os.  */\n+  OPT_LEVELS_SIZE, /* -Os only.  */\n+  OPT_LEVELS_FAST /* -Ofast only.  */\n+};\n+\n+/* Description of options to enable by default at given levels.  */\n+struct default_options\n+{\n+  /* The levels at which to enable the option.  */\n+  enum opt_levels levels;\n+\n+  /* The option index and argument or enabled/disabled sense of the\n+     option, as passed to handle_generated_option.  If ARG is NULL and\n+     the option allows a negative form, the option is considered to be\n+     passed in negative form when the optimization level is not one of\n+     those in LEVELS (in order to handle changes to the optimization\n+     level with the \"optimize\" attribute).  */\n+  size_t opt_index;\n+  const char *arg;\n+  int value;\n+};\n+\n #define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n #define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME) PARAMS;\n #define DEFHOOK_UNDOC DEFHOOK"}, {"sha": "d959cf98bee113978534ef6a70fcbe824c47f931", "filename": "gcc/common/common-targhooks.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-targhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-targhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-targhooks.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,85 @@\n+/* Default common target hook functions.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"input.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-targhooks.h\"\n+\n+/* Determine the exception handling mechanism for the target.  */\n+\n+enum unwind_info_type\n+default_except_unwind_info (struct gcc_options *opts ATTRIBUTE_UNUSED)\n+{\n+  /* Obey the configure switch to turn on sjlj exceptions.  */\n+#ifdef CONFIG_SJLJ_EXCEPTIONS\n+  if (CONFIG_SJLJ_EXCEPTIONS)\n+    return UI_SJLJ;\n+#endif\n+\n+  /* ??? Change all users to the hook, then poison this.  */\n+#ifdef DWARF2_UNWIND_INFO\n+  if (DWARF2_UNWIND_INFO)\n+    return UI_DWARF2;\n+#endif\n+\n+  return UI_SJLJ;\n+}\n+\n+/* To be used by targets that force dwarf2 unwind enabled.  */\n+\n+enum unwind_info_type\n+dwarf2_except_unwind_info (struct gcc_options *opts ATTRIBUTE_UNUSED)\n+{\n+  /* Obey the configure switch to turn on sjlj exceptions.  */\n+#ifdef CONFIG_SJLJ_EXCEPTIONS\n+  if (CONFIG_SJLJ_EXCEPTIONS)\n+    return UI_SJLJ;\n+#endif\n+\n+  return UI_DWARF2;\n+}\n+\n+/* To be used by targets that force sjlj unwind enabled.  */\n+\n+enum unwind_info_type\n+sjlj_except_unwind_info (struct gcc_options *opts ATTRIBUTE_UNUSED)\n+{\n+  return UI_SJLJ;\n+}\n+\n+/* Default version of TARGET_HANDLE_OPTION.  */\n+\n+bool\n+default_target_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n+\t\t\t      struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t\t      const struct cl_decoded_option *decoded ATTRIBUTE_UNUSED,\n+\t\t\t      location_t loc ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n+const struct default_options empty_optimization_table[] =\n+  {\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };"}, {"sha": "dab70ded8d8d7284c6133000535ce46935d2e0b1", "filename": "gcc/common/common-targhooks.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-targhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fcommon-targhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-targhooks.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,35 @@\n+/* Default common target hook functions.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_COMMON_TARGHOOKS_H\n+#define GCC_COMMON_TARGHOOKS_H\n+\n+extern enum unwind_info_type default_except_unwind_info (struct gcc_options *);\n+extern enum unwind_info_type dwarf2_except_unwind_info (struct gcc_options *);\n+extern enum unwind_info_type sjlj_except_unwind_info (struct gcc_options *);\n+\n+extern bool default_target_handle_option (struct gcc_options *,\n+\t\t\t\t\t  struct gcc_options *,\n+\t\t\t\t\t  const struct cl_decoded_option *,\n+\t\t\t\t\t  location_t);\n+\n+extern const struct default_options empty_optimization_table[];\n+\n+#endif"}, {"sha": "fcf5369034d177057192eaebf93ca5e72661bbde", "filename": "gcc/common/config/alpha/alpha-common.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Falpha%2Falpha-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,81 @@\n+/* Common hooks for DEC Alpha.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options alpha_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+alpha_handle_option (struct gcc_options *opts,\n+\t\t     struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t     const struct cl_decoded_option *decoded,\n+\t\t     location_t loc)\n+{\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mfp_regs:\n+      if (value == 0)\n+\topts->x_target_flags |= MASK_SOFT_FP;\n+      break;\n+\n+    case OPT_mieee:\n+    case OPT_mieee_with_inexact:\n+      opts->x_target_flags |= MASK_IEEE_CONFORMANT;\n+      break;\n+\n+    case OPT_mtls_size_:\n+      if (value != 16 && value != 32 && value != 64)\n+\terror_at (loc, \"bad value %qs for -mtls-size switch\", arg);\n+      break;\n+    }\n+\n+  return true;\n+}\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS \\\n+  (TARGET_DEFAULT | TARGET_CPU_DEFAULT | TARGET_DEFAULT_EXPLICIT_RELOCS)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION alpha_handle_option\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE alpha_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "b8348bfb9f2bc8c59f152dc5192fa2fe19442a2b", "filename": "gcc/common/config/arm/arm-common.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,76 @@\n+/* Common hooks for ARM.\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Set default optimization options.  */\n+static const struct default_options arm_option_optimization_table[] =\n+  {\n+    /* Enable section anchors by default at -O1 or higher.  */\n+    { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_EXCEPT_UNWIND_INFO.  */\n+\n+enum unwind_info_type\n+arm_except_unwind_info (struct gcc_options *opts)\n+{\n+  /* Honor the --enable-sjlj-exceptions configure switch.  */\n+#ifdef CONFIG_SJLJ_EXCEPTIONS\n+  if (CONFIG_SJLJ_EXCEPTIONS)\n+    return UI_SJLJ;\n+#endif\n+\n+  /* If not using ARM EABI unwind tables... */\n+  if (ARM_UNWIND_INFO)\n+    {\n+      /* For simplicity elsewhere in this file, indicate that all unwind\n+\t info is disabled if we're not emitting unwind tables.  */\n+      if (!opts->x_flag_exceptions && !opts->x_flag_unwind_tables)\n+\treturn UI_NONE;\n+      else\n+\treturn UI_TARGET;\n+    }\n+\n+  /* ... we use sjlj exceptions for backwards compatibility.  */\n+  return UI_SJLJ;\n+}\n+\n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | MASK_SCHED_PROLOG)\n+\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE arm_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO  arm_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "0ede1172e557e706463f866c49c3e6d3f97dbd64", "filename": "gcc/common/config/avr/avr-common.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,41 @@\n+/* Common hooks for ATMEL AVR.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008,\n+   2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+   \n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options avr_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE avr_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "715a1aee6f93b8cef18ee1f18f08a47ea119bb6c", "filename": "gcc/common/config/bfin/bfin-common.c", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fbfin%2Fbfin-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,390 @@\n+/* Common hooks for Blackfin.\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"machmode.h\"\n+#include \"tm_p.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+EXPORTED_CONST struct bfin_cpu bfin_cpus[] =\n+{\n+\n+  {\"bf512\", BFIN_CPU_BF512, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf512\", BFIN_CPU_BF512, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf512\", BFIN_CPU_BF512, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+\n+  {\"bf514\", BFIN_CPU_BF514, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf514\", BFIN_CPU_BF514, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf514\", BFIN_CPU_BF514, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+\n+  {\"bf516\", BFIN_CPU_BF516, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf516\", BFIN_CPU_BF516, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf516\", BFIN_CPU_BF516, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+\n+  {\"bf518\", BFIN_CPU_BF518, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf518\", BFIN_CPU_BF518, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf518\", BFIN_CPU_BF518, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+\n+  {\"bf522\", BFIN_CPU_BF522, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf522\", BFIN_CPU_BF522, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+  {\"bf522\", BFIN_CPU_BF522, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+\n+  {\"bf523\", BFIN_CPU_BF523, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf523\", BFIN_CPU_BF523, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+  {\"bf523\", BFIN_CPU_BF523, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+\n+  {\"bf524\", BFIN_CPU_BF524, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf524\", BFIN_CPU_BF524, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+  {\"bf524\", BFIN_CPU_BF524, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+\n+  {\"bf525\", BFIN_CPU_BF525, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf525\", BFIN_CPU_BF525, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+  {\"bf525\", BFIN_CPU_BF525, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+\n+  {\"bf526\", BFIN_CPU_BF526, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf526\", BFIN_CPU_BF526, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+  {\"bf526\", BFIN_CPU_BF526, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+\n+  {\"bf527\", BFIN_CPU_BF527, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf527\", BFIN_CPU_BF527, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+  {\"bf527\", BFIN_CPU_BF527, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n+\n+  {\"bf531\", BFIN_CPU_BF531, 0x0006,\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf531\", BFIN_CPU_BF531, 0x0005,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n+   | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf531\", BFIN_CPU_BF531, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+  {\"bf531\", BFIN_CPU_BF531, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf532\", BFIN_CPU_BF532, 0x0006,\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf532\", BFIN_CPU_BF532, 0x0005,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n+   | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf532\", BFIN_CPU_BF532, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+  {\"bf532\", BFIN_CPU_BF532, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf533\", BFIN_CPU_BF533, 0x0006,\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf533\", BFIN_CPU_BF533, 0x0005,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n+   | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf533\", BFIN_CPU_BF533, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+  {\"bf533\", BFIN_CPU_BF533, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf534\", BFIN_CPU_BF534, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf534\", BFIN_CPU_BF534, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+  {\"bf534\", BFIN_CPU_BF534, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf536\", BFIN_CPU_BF536, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf536\", BFIN_CPU_BF536, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+  {\"bf536\", BFIN_CPU_BF536, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf537\", BFIN_CPU_BF537, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf537\", BFIN_CPU_BF537, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+  {\"bf537\", BFIN_CPU_BF537, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf538\", BFIN_CPU_BF538, 0x0005,\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf538\", BFIN_CPU_BF538, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf538\", BFIN_CPU_BF538, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_RETS\n+   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf538\", BFIN_CPU_BF538, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf539\", BFIN_CPU_BF539, 0x0005,\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf539\", BFIN_CPU_BF539, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf539\", BFIN_CPU_BF539, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_RETS\n+   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf539\", BFIN_CPU_BF539, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf542m\", BFIN_CPU_BF542M, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+\n+  {\"bf542\", BFIN_CPU_BF542, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf542\", BFIN_CPU_BF542, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf542\", BFIN_CPU_BF542, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf542\", BFIN_CPU_BF542, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf544m\", BFIN_CPU_BF544M, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+\n+  {\"bf544\", BFIN_CPU_BF544, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf544\", BFIN_CPU_BF544, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf544\", BFIN_CPU_BF544, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf544\", BFIN_CPU_BF544, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf547m\", BFIN_CPU_BF547M, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+\n+  {\"bf547\", BFIN_CPU_BF547, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf547\", BFIN_CPU_BF547, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf547\", BFIN_CPU_BF547, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf547\", BFIN_CPU_BF547, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf548m\", BFIN_CPU_BF548M, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+\n+  {\"bf548\", BFIN_CPU_BF548, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf548\", BFIN_CPU_BF548, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf548\", BFIN_CPU_BF548, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf548\", BFIN_CPU_BF548, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf549m\", BFIN_CPU_BF549M, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+\n+  {\"bf549\", BFIN_CPU_BF549, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf549\", BFIN_CPU_BF549, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf549\", BFIN_CPU_BF549, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n+  {\"bf549\", BFIN_CPU_BF549, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf561\", BFIN_CPU_BF561, 0x0005, WA_RETS\n+   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n+  {\"bf561\", BFIN_CPU_BF561, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+  {\"bf561\", BFIN_CPU_BF561, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n+\n+  {\"bf592\", BFIN_CPU_BF592, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+  {\"bf592\", BFIN_CPU_BF592, 0x0000,\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n+\n+  {NULL, BFIN_CPU_UNKNOWN, 0, 0}\n+};\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+bfin_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc)\n+{\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mshared_library_id_:\n+      if (value > MAX_LIBRARY_ID)\n+\terror_at (loc, \"-mshared-library-id=%s is not between 0 and %d\",\n+\t\t  arg, MAX_LIBRARY_ID);\n+      return true;\n+\n+    case OPT_mcpu_:\n+      {\n+\tconst char *p, *q;\n+\tint i;\n+\n+\ti = 0;\n+\twhile ((p = bfin_cpus[i].name) != NULL)\n+\t  {\n+\t    if (strncmp (arg, p, strlen (p)) == 0)\n+\t      break;\n+\t    i++;\n+\t  }\n+\n+\tif (p == NULL)\n+\t  {\n+\t    error_at (loc, \"-mcpu=%s is not valid\", arg);\n+\t    return false;\n+\t  }\n+\n+\topts->x_bfin_cpu_type = bfin_cpus[i].type;\n+\n+\tq = arg + strlen (p);\n+\n+\tif (*q == '\\0')\n+\t  {\n+\t    opts->x_bfin_si_revision = bfin_cpus[i].si_revision;\n+\t    opts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n+\t  }\n+\telse if (strcmp (q, \"-none\") == 0)\n+\t  opts->x_bfin_si_revision = -1;\n+      \telse if (strcmp (q, \"-any\") == 0)\n+\t  {\n+\t    opts->x_bfin_si_revision = 0xffff;\n+\t    while (bfin_cpus[i].type == opts->x_bfin_cpu_type)\n+\t      {\n+\t\topts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n+\t\ti++;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    unsigned int si_major, si_minor;\n+\t    int rev_len, n;\n+\n+\t    rev_len = strlen (q);\n+\n+\t    if (sscanf (q, \"-%u.%u%n\", &si_major, &si_minor, &n) != 2\n+\t\t|| n != rev_len\n+\t\t|| si_major > 0xff || si_minor > 0xff)\n+\t      {\n+\t      invalid_silicon_revision:\n+\t\terror_at (loc, \"-mcpu=%s has invalid silicon revision\", arg);\n+\t\treturn false;\n+\t      }\n+\n+\t    opts->x_bfin_si_revision = (si_major << 8) | si_minor;\n+\n+\t    while (bfin_cpus[i].type == opts->x_bfin_cpu_type\n+\t\t   && bfin_cpus[i].si_revision != opts->x_bfin_si_revision)\n+\t      i++;\n+\n+\t    if (bfin_cpus[i].type != opts->x_bfin_cpu_type)\n+\t      goto invalid_silicon_revision;\n+\n+\t    opts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n+\t  }\n+\n+\treturn true;\n+      }\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION bfin_handle_option\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "e4d30a868b2048e97f9264a80fa4c7e77e7a8abe", "filename": "gcc/common/config/cris/cris-common.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fcris%2Fcris-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fcris%2Fcris-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fcris%2Fcris-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,105 @@\n+/* Common hooks for CRIS.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n+   2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options cris_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_2_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* TARGET_HANDLE_OPTION worker.  We just store the values into local\n+   variables here.  Checks for correct semantics are in\n+   cris_option_override.  */\n+\n+static bool\n+cris_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+\n+  switch (code)\n+    {\n+    case OPT_metrax100:\n+      opts->x_target_flags\n+\t|= (MASK_SVINTO\n+\t    + MASK_ETRAX4_ADD\n+\t    + MASK_ALIGN_BY_32);\n+      break;\n+\n+    case OPT_mno_etrax100:\n+      opts->x_target_flags\n+\t&= ~(MASK_SVINTO\n+\t     + MASK_ETRAX4_ADD\n+\t     + MASK_ALIGN_BY_32);\n+      break;\n+\n+    case OPT_m32_bit:\n+    case OPT_m32bit:\n+      opts->x_target_flags\n+\t|= (MASK_STACK_ALIGN\n+\t    + MASK_CONST_ALIGN\n+\t    + MASK_DATA_ALIGN\n+\t    + MASK_ALIGN_BY_32);\n+      break;\n+\n+    case OPT_m16_bit:\n+    case OPT_m16bit:\n+      opts->x_target_flags\n+\t|= (MASK_STACK_ALIGN\n+\t    + MASK_CONST_ALIGN\n+\t    + MASK_DATA_ALIGN);\n+      break;\n+\n+    case OPT_m8_bit:\n+    case OPT_m8bit:\n+      opts->x_target_flags\n+\t&= ~(MASK_STACK_ALIGN\n+\t     + MASK_CONST_ALIGN\n+\t     + MASK_DATA_ALIGN);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return true;\n+}\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | CRIS_SUBTARGET_DEFAULT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION cris_handle_option\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE cris_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "0f6251e3dc7312b815bceabbce4f743f271566fe", "filename": "gcc/common/config/default-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fdefault-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fdefault-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fdefault-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -21,10 +21,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"tm.h\" /* For TARGET_ASM_NAMED_SECTION used in default for\n+\t\t   TARGET_HAVE_NAMED_SECTIONS.  */\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n \n-/* Do not include tm.h or tm_p.h here; if it is useful for a target to\n+/* FIXME: Do not include tm.h or tm_p.h here; if it is useful for a target to\n    define some macros for the initializer in a header without defining\n    targetm_common itself (for example, because of interactions with\n    some hooks depending on the target OS and others on the target"}, {"sha": "d8cc320630ec213b8f623f17c6d6dd8011213cbc", "filename": "gcc/common/config/fr30/fr30-common.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Ffr30%2Ffr30-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Ffr30%2Ffr30-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Ffr30%2Ffr30-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,41 @@\n+/* Common hooks for FR30.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009,\n+   2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options fr30_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE fr30_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "d72f1d59196dd060440b8184e1048366e04753f9", "filename": "gcc/common/config/frv/frv-common.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Ffrv%2Ffrv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Ffrv%2Ffrv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Ffrv%2Ffrv-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,55 @@\n+/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2007,\n+   2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Allow us to easily change the default for -malloc-cc.  */\n+#ifndef DEFAULT_NO_ALLOC_CC\n+#define MASK_DEFAULT_ALLOC_CC\tMASK_ALLOC_CC\n+#else\n+#define MASK_DEFAULT_ALLOC_CC\t0\n+#endif\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options frv_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n+  (MASK_DEFAULT_ALLOC_CC\t\t\t\\\n+   | MASK_COND_MOVE\t\t\t\t\\\n+   | MASK_SCC\t\t\t\t\t\\\n+   | MASK_COND_EXEC\t\t\t\t\\\n+   | MASK_VLIW_BRANCH\t\t\t\t\\\n+   | MASK_MULTI_CE\t\t\t\t\\\n+   | MASK_NESTED_CE)\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE frv_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "d5833f6bd7853d937b4f6c901ce3390c3d1b88f6", "filename": "gcc/common/config/h8300/h8300-common.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fh8300%2Fh8300-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fh8300%2Fh8300-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fh8300%2Fh8300-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,49 @@\n+/* Common hooks for Renesas H8/300.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options h8300_option_optimization_table[] =\n+  {\n+    /* Basic block reordering is only beneficial on targets with cache\n+       and/or variable-cycle branches where (cycle count taken !=\n+       cycle count not taken).  */\n+    { OPT_LEVELS_ALL, OPT_freorder_blocks, NULL, 0 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE h8300_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "1fd33bd39f8b114971d9436ceb0c170be5922c72", "filename": "gcc/common/config/i386/i386-common.c", "status": "added", "additions": 638, "deletions": 0, "changes": 638, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,638 @@\n+/* IA-32 common hooks.\n+   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Define a set of ISAs which are available when a given ISA is\n+   enabled.  MMX and SSE ISAs are handled separately.  */\n+\n+#define OPTION_MASK_ISA_MMX_SET OPTION_MASK_ISA_MMX\n+#define OPTION_MASK_ISA_3DNOW_SET \\\n+  (OPTION_MASK_ISA_3DNOW | OPTION_MASK_ISA_MMX_SET)\n+\n+#define OPTION_MASK_ISA_SSE_SET OPTION_MASK_ISA_SSE\n+#define OPTION_MASK_ISA_SSE2_SET \\\n+  (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_SSE_SET)\n+#define OPTION_MASK_ISA_SSE3_SET \\\n+  (OPTION_MASK_ISA_SSE3 | OPTION_MASK_ISA_SSE2_SET)\n+#define OPTION_MASK_ISA_SSSE3_SET \\\n+  (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_SSE3_SET)\n+#define OPTION_MASK_ISA_SSE4_1_SET \\\n+  (OPTION_MASK_ISA_SSE4_1 | OPTION_MASK_ISA_SSSE3_SET)\n+#define OPTION_MASK_ISA_SSE4_2_SET \\\n+  (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_SSE4_1_SET)\n+#define OPTION_MASK_ISA_AVX_SET \\\n+  (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_SSE4_2_SET)\n+#define OPTION_MASK_ISA_FMA_SET \\\n+  (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_AVX_SET)\n+\n+/* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n+   as -msse4.2.  */\n+#define OPTION_MASK_ISA_SSE4_SET OPTION_MASK_ISA_SSE4_2_SET\n+\n+#define OPTION_MASK_ISA_SSE4A_SET \\\n+  (OPTION_MASK_ISA_SSE4A | OPTION_MASK_ISA_SSE3_SET)\n+#define OPTION_MASK_ISA_FMA4_SET \\\n+  (OPTION_MASK_ISA_FMA4 | OPTION_MASK_ISA_SSE4A_SET \\\n+   | OPTION_MASK_ISA_AVX_SET)\n+#define OPTION_MASK_ISA_XOP_SET \\\n+  (OPTION_MASK_ISA_XOP | OPTION_MASK_ISA_FMA4_SET)\n+#define OPTION_MASK_ISA_LWP_SET \\\n+  OPTION_MASK_ISA_LWP\n+\n+/* AES and PCLMUL need SSE2 because they use xmm registers */\n+#define OPTION_MASK_ISA_AES_SET \\\n+  (OPTION_MASK_ISA_AES | OPTION_MASK_ISA_SSE2_SET)\n+#define OPTION_MASK_ISA_PCLMUL_SET \\\n+  (OPTION_MASK_ISA_PCLMUL | OPTION_MASK_ISA_SSE2_SET)\n+\n+#define OPTION_MASK_ISA_ABM_SET \\\n+  (OPTION_MASK_ISA_ABM | OPTION_MASK_ISA_POPCNT)\n+\n+#define OPTION_MASK_ISA_BMI_SET OPTION_MASK_ISA_BMI\n+#define OPTION_MASK_ISA_TBM_SET OPTION_MASK_ISA_TBM\n+#define OPTION_MASK_ISA_POPCNT_SET OPTION_MASK_ISA_POPCNT\n+#define OPTION_MASK_ISA_CX16_SET OPTION_MASK_ISA_CX16\n+#define OPTION_MASK_ISA_SAHF_SET OPTION_MASK_ISA_SAHF\n+#define OPTION_MASK_ISA_MOVBE_SET OPTION_MASK_ISA_MOVBE\n+#define OPTION_MASK_ISA_CRC32_SET OPTION_MASK_ISA_CRC32\n+\n+#define OPTION_MASK_ISA_FSGSBASE_SET OPTION_MASK_ISA_FSGSBASE\n+#define OPTION_MASK_ISA_RDRND_SET OPTION_MASK_ISA_RDRND\n+#define OPTION_MASK_ISA_F16C_SET \\\n+  (OPTION_MASK_ISA_F16C | OPTION_MASK_ISA_AVX_SET)\n+\n+/* Define a set of ISAs which aren't available when a given ISA is\n+   disabled.  MMX and SSE ISAs are handled separately.  */\n+\n+#define OPTION_MASK_ISA_MMX_UNSET \\\n+  (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_3DNOW_UNSET)\n+#define OPTION_MASK_ISA_3DNOW_UNSET \\\n+  (OPTION_MASK_ISA_3DNOW | OPTION_MASK_ISA_3DNOW_A_UNSET)\n+#define OPTION_MASK_ISA_3DNOW_A_UNSET OPTION_MASK_ISA_3DNOW_A\n+\n+#define OPTION_MASK_ISA_SSE_UNSET \\\n+  (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_SSE2_UNSET)\n+#define OPTION_MASK_ISA_SSE2_UNSET \\\n+  (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_SSE3_UNSET)\n+#define OPTION_MASK_ISA_SSE3_UNSET \\\n+  (OPTION_MASK_ISA_SSE3 \\\n+   | OPTION_MASK_ISA_SSSE3_UNSET \\\n+   | OPTION_MASK_ISA_SSE4A_UNSET )\n+#define OPTION_MASK_ISA_SSSE3_UNSET \\\n+  (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_SSE4_1_UNSET)\n+#define OPTION_MASK_ISA_SSE4_1_UNSET \\\n+  (OPTION_MASK_ISA_SSE4_1 | OPTION_MASK_ISA_SSE4_2_UNSET)\n+#define OPTION_MASK_ISA_SSE4_2_UNSET \\\n+  (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_AVX_UNSET )\n+#define OPTION_MASK_ISA_AVX_UNSET \\\n+  (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_FMA_UNSET \\\n+   | OPTION_MASK_ISA_FMA4_UNSET | OPTION_MASK_ISA_F16C_UNSET)\n+#define OPTION_MASK_ISA_FMA_UNSET OPTION_MASK_ISA_FMA\n+\n+/* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n+   as -mno-sse4.1. */\n+#define OPTION_MASK_ISA_SSE4_UNSET OPTION_MASK_ISA_SSE4_1_UNSET\n+\n+#define OPTION_MASK_ISA_SSE4A_UNSET \\\n+  (OPTION_MASK_ISA_SSE4A | OPTION_MASK_ISA_FMA4_UNSET)\n+\n+#define OPTION_MASK_ISA_FMA4_UNSET \\\n+  (OPTION_MASK_ISA_FMA4 | OPTION_MASK_ISA_XOP_UNSET)\n+#define OPTION_MASK_ISA_XOP_UNSET OPTION_MASK_ISA_XOP\n+#define OPTION_MASK_ISA_LWP_UNSET OPTION_MASK_ISA_LWP\n+\n+#define OPTION_MASK_ISA_AES_UNSET OPTION_MASK_ISA_AES\n+#define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n+#define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n+#define OPTION_MASK_ISA_BMI_UNSET OPTION_MASK_ISA_BMI\n+#define OPTION_MASK_ISA_TBM_UNSET OPTION_MASK_ISA_TBM\n+#define OPTION_MASK_ISA_POPCNT_UNSET OPTION_MASK_ISA_POPCNT\n+#define OPTION_MASK_ISA_CX16_UNSET OPTION_MASK_ISA_CX16\n+#define OPTION_MASK_ISA_SAHF_UNSET OPTION_MASK_ISA_SAHF\n+#define OPTION_MASK_ISA_MOVBE_UNSET OPTION_MASK_ISA_MOVBE\n+#define OPTION_MASK_ISA_CRC32_UNSET OPTION_MASK_ISA_CRC32\n+\n+#define OPTION_MASK_ISA_FSGSBASE_UNSET OPTION_MASK_ISA_FSGSBASE\n+#define OPTION_MASK_ISA_RDRND_UNSET OPTION_MASK_ISA_RDRND\n+#define OPTION_MASK_ISA_F16C_UNSET OPTION_MASK_ISA_F16C\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+bool\n+ix86_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc)\n+{\n+  size_t code = decoded->opt_index;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mmmx:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MMX_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MMX_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_MMX_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MMX_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_m3dnow:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_3DNOW_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_3DNOW_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_3DNOW_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_3DNOW_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_m3dnowa:\n+      return false;\n+\n+    case OPT_msse:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_msse2:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE2_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_msse3:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE3_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE3_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE3_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE3_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mssse3:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSSE3_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSSE3_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSSE3_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSSE3_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_msse4_1:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_1_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_1_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_1_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_1_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_msse4_2:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_2_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_2_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mavx:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mfma:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FMA_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FMA_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_FMA_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FMA_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_msse4:\n+      opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_SET;\n+      opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_SET;\n+      return true;\n+\n+    case OPT_mno_sse4:\n+      opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_UNSET;\n+      opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_UNSET;\n+      return true;\n+\n+    case OPT_msse4a:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4A_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4A_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4A_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4A_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mfma4:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FMA4_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FMA4_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_FMA4_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FMA4_UNSET;\n+\t}\n+      return true;\n+\n+   case OPT_mxop:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XOP_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XOP_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_XOP_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XOP_UNSET;\n+\t}\n+      return true;\n+\n+   case OPT_mlwp:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_LWP_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_LWP_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_LWP_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_LWP_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mabm:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_ABM_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_ABM_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_ABM_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_ABM_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mbmi:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_BMI_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_BMI_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_BMI_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_BMI_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mtbm:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_TBM_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_TBM_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_TBM_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_TBM_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mpopcnt:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_POPCNT_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_POPCNT_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_POPCNT_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_POPCNT_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_msahf:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SAHF_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SAHF_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SAHF_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SAHF_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mcx16:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CX16_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CX16_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_CX16_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CX16_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mmovbe:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MOVBE_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MOVBE_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_MOVBE_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MOVBE_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mcrc32:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CRC32_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CRC32_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_CRC32_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CRC32_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_maes:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AES_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AES_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AES_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AES_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mpclmul:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PCLMUL_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PCLMUL_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_PCLMUL_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PCLMUL_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mfsgsbase:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FSGSBASE_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FSGSBASE_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_FSGSBASE_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FSGSBASE_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mrdrnd:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_RDRND_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_RDRND_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_RDRND_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_RDRND_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mf16c:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_F16C_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_F16C_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_F16C_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_F16C_UNSET;\n+\t}\n+      return true;\n+\n+  /* Comes from final.c -- no real reason to change it.  */\n+#define MAX_CODE_ALIGN 16\n+\n+    case OPT_malign_loops_:\n+      warning_at (loc, 0, \"-malign-loops is obsolete, use -falign-loops\");\n+      if (value > MAX_CODE_ALIGN)\n+\terror_at (loc, \"-malign-loops=%d is not between 0 and %d\",\n+\t\t  value, MAX_CODE_ALIGN);\n+      else\n+\topts->x_align_loops = 1 << value;\n+      return true;\n+\n+    case OPT_malign_jumps_:\n+      warning_at (loc, 0, \"-malign-jumps is obsolete, use -falign-jumps\");\n+      if (value > MAX_CODE_ALIGN)\n+\terror_at (loc, \"-malign-jumps=%d is not between 0 and %d\",\n+\t\t  value, MAX_CODE_ALIGN);\n+      else\n+\topts->x_align_jumps = 1 << value;\n+      return true;\n+\n+    case OPT_malign_functions_:\n+      warning_at (loc, 0,\n+\t\t  \"-malign-functions is obsolete, use -falign-functions\");\n+      if (value > MAX_CODE_ALIGN)\n+\terror_at (loc, \"-malign-functions=%d is not between 0 and %d\",\n+\t\t  value, MAX_CODE_ALIGN);\n+      else\n+\topts->x_align_functions = 1 << value;\n+      return true;\n+\n+    case OPT_mbranch_cost_:\n+      if (value > 5)\n+\t{\n+\t  error_at (loc, \"-mbranch-cost=%d is not between 0 and 5\", value);\n+\t  opts->x_ix86_branch_cost = 5;\n+\t}\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+static const struct default_options ix86_option_optimization_table[] =\n+  {\n+    /* Turn off -fschedule-insns by default.  It tends to make the\n+       problem with not enough registers even worse.  */\n+    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n+\n+#ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n+    SUBTARGET_OPTIMIZATION_OPTIONS,\n+#endif\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n+static void\n+ix86_option_init_struct (struct gcc_options *opts)\n+{\n+  if (TARGET_MACHO)\n+    /* The Darwin libraries never set errno, so we might as well\n+       avoid calling them when that's the only reason we would.  */\n+    opts->x_flag_errno_math = 0;\n+\n+  opts->x_flag_pcc_struct_return = 2;\n+  opts->x_flag_asynchronous_unwind_tables = 2;\n+  opts->x_flag_vect_cost_model = 1;\n+}\n+\n+/* On the x86 -fsplit-stack and -fstack-protector both use the same\n+   field in the TCB, so they can not be used together.  */\n+\n+static bool\n+ix86_supports_split_stack (bool report ATTRIBUTE_UNUSED,\n+\t\t\t   struct gcc_options *opts ATTRIBUTE_UNUSED)\n+{\n+  bool ret = true;\n+\n+#ifndef TARGET_THREAD_SPLIT_STACK_OFFSET\n+  if (report)\n+    error (\"%<-fsplit-stack%> currently only supported on GNU/Linux\");\n+  ret = false;\n+#else\n+  if (!HAVE_GAS_CFI_PERSONALITY_DIRECTIVE)\n+    {\n+      if (report)\n+\terror (\"%<-fsplit-stack%> requires \"\n+\t       \"assembler support for CFI directives\");\n+      ret = false;\n+    }\n+#endif\n+\n+  return ret;\n+}\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\t\\\n+  (TARGET_DEFAULT\t\t\t\\\n+   | TARGET_SUBTARGET_DEFAULT\t\t\\\n+   | TARGET_TLS_DIRECT_SEG_REFS_DEFAULT)\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION ix86_handle_option\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE ix86_option_optimization_table\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT ix86_option_init_struct\n+\n+#undef TARGET_SUPPORTS_SPLIT_STACK\n+#define TARGET_SUPPORTS_SPLIT_STACK ix86_supports_split_stack\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "8c86ff49e6839b454026d93096770783ebf1630b", "filename": "gcc/common/config/ia64/ia64-common.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fia64%2Fia64-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,97 @@\n+/* Common hooks for IA64.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+   2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement overriding of the optimization options.  */\n+static const struct default_options ia64_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+#ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n+    SUBTARGET_OPTIMIZATION_OPTIONS,\n+#endif\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+ia64_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc)\n+{\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mtls_size_:\n+      if (value != 14 && value != 22 && value != 64)\n+\terror_at (loc, \"bad value %<%s%> for -mtls-size= switch\", arg);\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+/* Implement TARGET_EXCEPT_UNWIND_INFO.  */\n+\n+enum unwind_info_type\n+ia64_except_unwind_info (struct gcc_options *opts)\n+{\n+  /* Honor the --enable-sjlj-exceptions configure switch.  */\n+#ifdef CONFIG_UNWIND_EXCEPTIONS\n+  if (CONFIG_UNWIND_EXCEPTIONS)\n+    return UI_SJLJ;\n+#endif\n+\n+  /* For simplicity elsewhere in this file, indicate that all unwind\n+     info is disabled if we're not emitting unwind tables.  */\n+  if (!opts->x_flag_exceptions && !opts->x_flag_unwind_tables)\n+    return UI_NONE;\n+\n+  return UI_TARGET;\n+}\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE ia64_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO  ia64_except_unwind_info\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | TARGET_CPU_DEFAULT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION ia64_handle_option\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "4eb32be6148c605f14fe8409602c50560e806291", "filename": "gcc/common/config/iq2000/iq2000-common.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fiq2000%2Fiq2000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fiq2000%2Fiq2000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fiq2000%2Fiq2000-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,38 @@\n+/* Common hooks for Vitesse IQ2000.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options iq2000_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE iq2000_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "a8f674dbce2a116545627fe60920bd87168cfc6c", "filename": "gcc/common/config/lm32/lm32-common.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Flm32%2Flm32-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Flm32%2Flm32-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Flm32%2Flm32-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,41 @@\n+/* Common hooks for Lattice Mico32.\n+\n+   Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options lm32_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE lm32_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "8bda8cd5dfb34b9d3bf3f849a9ca91a930816b5d", "filename": "gcc/common/config/m32c/m32c-common.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fm32c%2Fm32c-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fm32c%2Fm32c-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fm32c%2Fm32c-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,31 @@\n+/* Common hooks for R8C/M16C/M32C.\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+#undef TARGET_HAVE_NAMED_SECTIONS\n+#define TARGET_HAVE_NAMED_SECTIONS true\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "99dca2d2035584478581a8457b4b8a6c9f161935", "filename": "gcc/common/config/m32r/m32r-common.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fm32r%2Fm32r-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fm32r%2Fm32r-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fm32r%2Fm32r-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,76 @@\n+/* Common hooks for Renesas M32R.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+   2005, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+static const struct default_options m32r_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fregmove, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+m32r_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_m32r:\n+      opts->x_target_flags &= ~(MASK_M32R2 | MASK_M32RX);\n+      return true;\n+\n+    case OPT_mno_flush_func:\n+      opts->x_m32r_cache_flush_func = NULL;\n+      return true;\n+\n+    case OPT_mflush_trap_:\n+      return value <= 15;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_CPU_DEFAULT\n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION m32r_handle_option\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE m32r_option_optimization_table\n+\n+#undef  TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO\t\tsjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "3a81b678a24394cad1c1786fb8b2fb2474697a83", "filename": "gcc/common/config/m68k/m68k-common.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fm68k%2Fm68k-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fm68k%2Fm68k-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fm68k%2Fm68k-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,76 @@\n+/* Common hooks for Motorola 68000 family.\n+   Copyright (C) 1987, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+m68k_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc)\n+{\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_m68020_40:\n+      opts->x_m68k_tune_option = u68020_40;\n+      opts->x_m68k_cpu_option = m68020;\n+      return true;\n+\n+    case OPT_m68020_60:\n+      opts->x_m68k_tune_option = u68020_60;\n+      opts->x_m68k_cpu_option = m68020;\n+      return true;\n+\n+    case OPT_mshared_library_id_:\n+      if (value > MAX_LIBRARY_ID)\n+\terror_at (loc, \"-mshared-library-id=%s is not between 0 and %d\",\n+\t\t  arg, MAX_LIBRARY_ID);\n+      else\n+        {\n+\t  char *tmp;\n+\t  asprintf (&tmp, \"%d\", (value * -4) - 4);\n+\t  opts->x_m68k_library_id_string = tmp;\n+\t}\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION m68k_handle_option\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "66633bfa17ce63ce13cf9674d637ae1200637a27", "filename": "gcc/common/config/mcore/mcore-common.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmcore%2Fmcore-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmcore%2Fmcore-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmcore%2Fmcore-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,54 @@\n+/* Common hooks for Motorola MCore.\n+   Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n+   2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* What options are we going to default to specific settings when\n+   -O* happens; the user can subsequently override these settings.\n+  \n+   Omitting the frame pointer is a very good idea on the MCore.\n+   Scheduling isn't worth anything on the current MCore implementation.  */\n+\n+static const struct default_options mcore_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_ffunction_cse, NULL, 0 },\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },\n+    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n+    { OPT_LEVELS_ALL, OPT_fschedule_insns2, NULL, 0 },\n+    { OPT_LEVELS_SIZE, OPT_mhardlit, NULL, 0 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE mcore_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "d15e03b3539a92750290884e8ab3a44629cb0240", "filename": "gcc/common/config/mep/mep-common.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmep%2Fmep-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmep%2Fmep-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmep%2Fmep-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,91 @@\n+/* Common hooks for Toshiba Media Processor.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+static const struct default_options mep_option_optimization_table[] =\n+  {\n+    /* The first scheduling pass often increases register pressure and\n+       tends to result in more spill code.  Only run it when\n+       specifically asked.  */\n+    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n+\n+    /* Using $fp doesn't gain us much, even when debugging is\n+       important.  */\n+    { OPT_LEVELS_ALL, OPT_fomit_frame_pointer, NULL, 1 },\n+\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+static bool\n+mep_handle_option (struct gcc_options *opts,\n+\t\t   struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t   const struct cl_decoded_option *decoded,\n+\t\t   location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+\n+  switch (code)\n+    {\n+    case OPT_mall_opts:\n+      opts->x_target_flags |= MEP_ALL_OPTS;\n+      break;\n+\n+    case OPT_mno_opts:\n+      opts->x_target_flags &= ~ MEP_ALL_OPTS;\n+      break;\n+\n+    case OPT_mcop64:\n+      opts->x_target_flags |= MASK_COP;\n+      opts->x_target_flags |= MASK_64BIT_CR_REGS;\n+      break;\n+\n+    case OPT_mivc2:\n+      opts->x_target_flags |= MASK_COP;\n+      opts->x_target_flags |= MASK_64BIT_CR_REGS;\n+      opts->x_target_flags |= MASK_VLIW;\n+      opts->x_target_flags |= MASK_OPT_VL64;\n+      opts->x_target_flags |= MASK_IVC2;\n+\n+      /* Remaining handling of this option deferred.  */\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return TRUE;\n+}\n+\n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION            mep_handle_option\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE\tmep_option_optimization_table\n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "4de1bebb55b07b6c36125ad912e3a3922207cc4d", "filename": "gcc/common/config/microblaze/microblaze-common.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmicroblaze%2Fmicroblaze-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,43 @@\n+/* Common hooks for Xilinx MicroBlaze.\n+   Copyright 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options microblaze_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n+\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE microblaze_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "53a326dcfebcbe47ad77503ad1526f1b173344e1", "filename": "gcc/common/config/mips/mips-common.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmips%2Fmips-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmips%2Fmips-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmips%2Fmips-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,74 @@\n+/* Common hooks for MIPS.\n+   Copyright (C) 1989, 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+mips_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+\n+  switch (code)\n+    {\n+    case OPT_mno_flush_func:\n+      opts->x_mips_cache_flush_func = NULL;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options mips_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE mips_option_optimization_table\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n+  (TARGET_DEFAULT\t\t\t\t\\\n+   | TARGET_CPU_DEFAULT\t\t\t\t\\\n+   | TARGET_ENDIAN_DEFAULT\t\t\t\\\n+   | TARGET_FP_EXCEPTIONS_DEFAULT\t\t\\\n+   | MASK_CHECK_ZERO_DIV\t\t\t\\\n+   | MASK_FUSED_MADD)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION mips_handle_option\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "d73ca6d132dcfecea39830caa5345e03d2d7f0d2", "filename": "gcc/common/config/mmix/mmix-common.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmmix%2Fmmix-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmmix%2Fmmix-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmmix%2Fmmix-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,44 @@\n+/* Common hooks for MMIX.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+   2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options mmix_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fregmove, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE mmix_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "312f0ebf03e4c6c8520aef86d6355fc4104d0c7f", "filename": "gcc/common/config/mn10300/mn10300-common.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmn10300%2Fmn10300-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fmn10300%2Fmn10300-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmn10300%2Fmn10300-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,79 @@\n+/* Common hooks for Matsushita MN10300 series.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+   2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options mn10300_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+mn10300_handle_option (struct gcc_options *opts,\n+\t\t       struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t       const struct cl_decoded_option *decoded,\n+\t\t       location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mam33:\n+      opts->x_mn10300_processor = value ? PROCESSOR_AM33 : PROCESSOR_MN10300;\n+      return true;\n+\n+    case OPT_mam33_2:\n+      opts->x_mn10300_processor = (value\n+\t\t\t\t   ? PROCESSOR_AM33_2\n+\t\t\t\t   : MIN (PROCESSOR_AM33, PROCESSOR_DEFAULT));\n+      return true;\n+\n+    case OPT_mam34:\n+      opts->x_mn10300_processor = (value ? PROCESSOR_AM34 : PROCESSOR_DEFAULT);\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+#undef  TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+\n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS MASK_MULT_BUG | MASK_PTR_A0D0 | MASK_ALLOW_LIW | MASK_ALLOW_SETLB\n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION mn10300_handle_option\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE mn10300_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "faa54ac042f27b90f68fc438271a69b36aee91e8", "filename": "gcc/common/config/pa/pa-common.c", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpa%2Fpa-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,5 +1,6 @@\n /* HPPA common hooks.\n-   Copyright (C) 2011\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -21,8 +22,59 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"tm.h\"\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n-#include \"tm.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options pa_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+pa_handle_option (struct gcc_options *opts,\n+\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t  const struct cl_decoded_option *decoded,\n+\t\t  location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+\n+  switch (code)\n+    {\n+    case OPT_mnosnake:\n+    case OPT_mpa_risc_1_0:\n+    case OPT_march_1_0:\n+      opts->x_target_flags &= ~(MASK_PA_11 | MASK_PA_20);\n+      return true;\n+\n+    case OPT_msnake:\n+    case OPT_mpa_risc_1_1:\n+    case OPT_march_1_1:\n+      opts->x_target_flags &= ~MASK_PA_20;\n+      opts->x_target_flags |= MASK_PA_11;\n+      return true;\n+\n+    case OPT_mpa_risc_2_0:\n+    case OPT_march_2_0:\n+      opts->x_target_flags |= MASK_PA_11 | MASK_PA_20;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE pa_option_optimization_table\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | TARGET_CPU_DEFAULT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION pa_handle_option\n \n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "a288a8ef53a467b1518464dc00785dd5478acbc4", "filename": "gcc/common/config/pdp11/pdp11-common.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fpdp11%2Fpdp11-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fpdp11%2Fpdp11-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpdp11%2Fpdp11-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,79 @@\n+/* Common hooks for pdp11.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2004, 2005,\n+   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options pdp11_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_3_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+pdp11_handle_option (struct gcc_options *opts,\n+\t\t     struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t     const struct cl_decoded_option *decoded,\n+\t\t     location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+\n+  switch (code)\n+    {\n+    case OPT_m10:\n+      opts->x_target_flags &= ~(MASK_40 | MASK_45);\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n+static void\n+pdp11_option_init_struct (struct gcc_options *opts)\n+{\n+  opts->x_flag_finite_math_only = 0;\n+  opts->x_flag_trapping_math = 0;\n+  opts->x_flag_signaling_nans = 0;\n+}\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS \\\n+  (MASK_FPU | MASK_45 | TARGET_UNIX_ASM_DEFAULT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION pdp11_handle_option\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE pdp11_option_optimization_table\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT pdp11_option_init_struct\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "286ee452076eb739234f2aaa2028817874f29883", "filename": "gcc/common/config/picochip/picochip-common.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fpicochip%2Fpicochip-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fpicochip%2Fpicochip-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpicochip%2Fpicochip-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,43 @@\n+/* Common hooks for picoChip.\n+   Copyright (C) 2001, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not, see\n+<http://www.gnu.org/licenses/>. */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options picochip_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_HAVE_NAMED_SECTIONS\n+#define TARGET_HAVE_NAMED_SECTIONS 1\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE picochip_option_optimization_table\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "0482c07d7a9261000db116b8fc070a54cc43ea83", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "added", "additions": 326, "deletions": 0, "changes": 326, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,326 @@\n+/* Common hooks for IBM RS/6000.\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options rs6000_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n+static void\n+rs6000_option_init_struct (struct gcc_options *opts)\n+{\n+  if (DEFAULT_ABI == ABI_DARWIN)\n+    /* The Darwin libraries never set errno, so we might as well\n+       avoid calling them when that's the only reason we would.  */\n+    opts->x_flag_errno_math = 0;\n+\n+  /* Enable section anchors by default.  */\n+  if (!TARGET_MACHO)\n+    opts->x_flag_section_anchors = 1;\n+}\n+\n+/* If not otherwise specified by a target, make 'long double' equivalent to\n+   'double'.  */\n+\n+#ifndef RS6000_DEFAULT_LONG_DOUBLE_SIZE\n+#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 64\n+#endif\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t      const struct cl_decoded_option *decoded,\n+\t\t      location_t loc)\n+{\n+  enum fpu_type_t fpu_type = FPU_NONE;\n+  char *p, *q;\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mno_power:\n+      opts->x_target_flags &= ~(MASK_POWER | MASK_POWER2\n+\t\t\t\t| MASK_MULTIPLE | MASK_STRING);\n+      opts_set->x_target_flags |= (MASK_POWER | MASK_POWER2\n+\t\t\t\t   | MASK_MULTIPLE | MASK_STRING);\n+      break;\n+    case OPT_mno_powerpc:\n+      opts->x_target_flags &= ~(MASK_POWERPC | MASK_PPC_GPOPT\n+\t\t\t\t| MASK_PPC_GFXOPT | MASK_POWERPC64);\n+      opts_set->x_target_flags |= (MASK_POWERPC | MASK_PPC_GPOPT\n+\t\t\t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64);\n+      break;\n+    case OPT_mfull_toc:\n+      opts->x_target_flags &= ~MASK_MINIMAL_TOC;\n+      opts->x_TARGET_NO_FP_IN_TOC = 0;\n+      opts->x_TARGET_NO_SUM_IN_TOC = 0;\n+      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+#ifdef TARGET_USES_SYSV4_OPT\n+      /* Note, V.4 no longer uses a normal TOC, so make -mfull-toc, be\n+\t just the same as -mminimal-toc.  */\n+      opts->x_target_flags |= MASK_MINIMAL_TOC;\n+      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+#endif\n+      break;\n+\n+#ifdef TARGET_USES_SYSV4_OPT\n+    case OPT_mtoc:\n+      /* Make -mtoc behave like -mminimal-toc.  */\n+      opts->x_target_flags |= MASK_MINIMAL_TOC;\n+      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+      break;\n+#endif\n+\n+#ifdef TARGET_USES_AIX64_OPT\n+    case OPT_maix64:\n+#else\n+    case OPT_m64:\n+#endif\n+      opts->x_target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n+      opts->x_target_flags |= ~opts_set->x_target_flags & MASK_PPC_GFXOPT;\n+      opts_set->x_target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n+      break;\n+\n+#ifdef TARGET_USES_AIX64_OPT\n+    case OPT_maix32:\n+#else\n+    case OPT_m32:\n+#endif\n+      opts->x_target_flags &= ~MASK_POWERPC64;\n+      opts_set->x_target_flags |= MASK_POWERPC64;\n+      break;\n+\n+    case OPT_mminimal_toc:\n+      if (value == 1)\n+\t{\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 0;\n+\t  opts->x_TARGET_NO_SUM_IN_TOC = 0;\n+\t}\n+      break;\n+\n+    case OPT_mpower:\n+      if (value == 1)\n+\t{\n+\t  opts->x_target_flags |= (MASK_MULTIPLE | MASK_STRING);\n+\t  opts_set->x_target_flags |= (MASK_MULTIPLE | MASK_STRING);\n+\t}\n+      break;\n+\n+    case OPT_mpower2:\n+      if (value == 1)\n+\t{\n+\t  opts->x_target_flags |= (MASK_POWER | MASK_MULTIPLE | MASK_STRING);\n+\t  opts_set->x_target_flags |= (MASK_POWER\n+\t\t\t\t       | MASK_MULTIPLE\n+\t\t\t\t       | MASK_STRING);\n+\t}\n+      break;\n+\n+    case OPT_mpowerpc_gpopt:\n+    case OPT_mpowerpc_gfxopt:\n+      if (value == 1)\n+\t{\n+\t  opts->x_target_flags |= MASK_POWERPC;\n+\t  opts_set->x_target_flags |= MASK_POWERPC;\n+\t}\n+      break;\n+\n+    case OPT_mdebug_:\n+      p = ASTRDUP (arg);\n+      opts->x_rs6000_debug = 0;\n+\n+      while ((q = strtok (p, \",\")) != NULL)\n+\t{\n+\t  unsigned mask = 0;\n+\t  bool invert;\n+\n+\t  p = NULL;\n+\t  if (*q == '!')\n+\t    {\n+\t      invert = true;\n+\t      q++;\n+\t    }\n+\t  else\n+\t    invert = false;\n+\n+\t  if (! strcmp (q, \"all\"))\n+\t    mask = MASK_DEBUG_ALL;\n+\t  else if (! strcmp (q, \"stack\"))\n+\t    mask = MASK_DEBUG_STACK;\n+\t  else if (! strcmp (q, \"arg\"))\n+\t    mask = MASK_DEBUG_ARG;\n+\t  else if (! strcmp (q, \"reg\"))\n+\t    mask = MASK_DEBUG_REG;\n+\t  else if (! strcmp (q, \"addr\"))\n+\t    mask = MASK_DEBUG_ADDR;\n+\t  else if (! strcmp (q, \"cost\"))\n+\t    mask = MASK_DEBUG_COST;\n+\t  else if (! strcmp (q, \"target\"))\n+\t    mask = MASK_DEBUG_TARGET;\n+\t  else\n+\t    error_at (loc, \"unknown -mdebug-%s switch\", q);\n+\n+\t  if (invert)\n+\t    opts->x_rs6000_debug &= ~mask;\n+\t  else\t\n+\t    opts->x_rs6000_debug |= mask;\n+\t}\n+      break;\n+\n+#ifdef TARGET_USES_SYSV4_OPT\n+    case OPT_mrelocatable:\n+      if (value == 1)\n+\t{\n+\t  opts->x_target_flags |= MASK_MINIMAL_TOC;\n+\t  opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n+\t}\n+      break;\n+\n+    case OPT_mrelocatable_lib:\n+      if (value == 1)\n+\t{\n+\t  opts->x_target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n+\t  opts_set->x_target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n+\t}\n+      else\n+\t{\n+\t  opts->x_target_flags &= ~MASK_RELOCATABLE;\n+\t  opts_set->x_target_flags |= MASK_RELOCATABLE;\n+\t}\n+      break;\n+#endif\n+\n+    case OPT_mabi_altivec:\n+      /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n+      opts->x_rs6000_spe_abi = 0;\n+      break;\n+\n+    case OPT_mabi_spe:\n+      opts->x_rs6000_altivec_abi = 0;\n+      break;\n+\n+    case OPT_mlong_double_:\n+      if (value != 64 && value != 128)\n+\t{\n+\t  error_at (loc, \"unknown switch -mlong-double-%s\", arg);\n+\t  opts->x_rs6000_long_double_type_size\n+\t    = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n+\t  return false;\n+\t}\n+      break;\n+\n+    case OPT_msingle_float:\n+      if (!TARGET_SINGLE_FPU) \n+\twarning_at (loc, 0,\n+\t\t    \"-msingle-float option equivalent to -mhard-float\");\n+      /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n+      opts->x_rs6000_double_float = 0;\n+      opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n+      opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+      break;\n+\n+    case OPT_mdouble_float:\n+      /* -mdouble-float implies -msingle-float and TARGET_HARD_FLOAT. */\n+      opts->x_rs6000_single_float = 1;\n+      opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n+      opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+      break;\n+\n+    case OPT_msimple_fpu:\n+      if (!TARGET_SINGLE_FPU) \n+\twarning_at (loc, 0, \"-msimple-fpu option ignored\");\n+      break;\n+\n+    case OPT_mhard_float:\n+      /* -mhard_float implies -msingle-float and -mdouble-float. */\n+      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n+      break;\n+\n+    case OPT_msoft_float:\n+      /* -msoft_float implies -mnosingle-float and -mnodouble-float. */\n+      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n+      break;\n+\n+    case OPT_mfpu_:\n+      fpu_type = (enum fpu_type_t) value;\n+      if (fpu_type != FPU_NONE)\n+\t{\n+\t  /* If -mfpu is not none, then turn off SOFT_FLOAT, turn on\n+\t     HARD_FLOAT. */\n+\t  opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n+\t  opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+\t  opts->x_rs6000_xilinx_fpu = 1;\n+\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_SF_FULL) \n+\t    opts->x_rs6000_single_float = 1;\n+\t  if (fpu_type == FPU_DF_LITE || fpu_type == FPU_DF_FULL) \n+\t    opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n+\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_DF_LITE) \n+\t    opts->x_rs6000_simple_fpu = 1;\n+\t}\n+      else\n+\t{\n+\t  /* -mfpu=none is equivalent to -msoft-float.  */\n+\t  opts->x_target_flags |= MASK_SOFT_FLOAT;\n+\t  opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n+\t  opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n+\t}\n+      break;\n+\n+    case OPT_mrecip:\n+      opts->x_rs6000_recip_name = (value) ? \"default\" : \"none\";\n+      break;\n+    }\n+  return true;\n+}\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION rs6000_handle_option\n+\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT rs6000_option_init_struct\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS \\\n+  (TARGET_DEFAULT)\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "259f9bb4f6e3a7dcc426b7a957f4afc1774f3e1a", "filename": "gcc/common/config/rx/rx-common.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Frx%2Frx-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Frx%2Frx-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frx%2Frx-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,86 @@\n+/* Common hooks for Renesas RX.\n+   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Extra processing for target specific command line options.  */\n+\n+static bool\n+rx_handle_option (struct gcc_options *opts,\n+\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t  const struct cl_decoded_option *decoded,\n+\t\t  location_t loc)\n+{\n+  size_t code = decoded->opt_index;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mint_register_:\n+      /* Make sure that the -mint-register option is in range.  Other\n+\t handling in rx_option_override.  */\n+      return value >= 0 && value <= 4;\n+      break;\n+\n+    case OPT_mmax_constant_size_:\n+      /* Make sure that the -mmax-constant_size option is in range.  */\n+      return value >= 0 && value <= 4;\n+\n+    case OPT_mcpu_:\n+      if ((enum rx_cpu_types) value == RX200)\n+\topts->x_target_flags |= MASK_NO_USE_FPU;\n+      break;\n+      \n+    case OPT_fpu:\n+      if (opts->x_rx_cpu_type == RX200)\n+\terror_at (loc, \"the RX200 cpu does not have FPU hardware\");\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return true;\n+}\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options rx_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION\t\t\trx_handle_option\n+\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE\trx_option_optimization_table\n+\n+#undef  TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO\t\tsjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "98b5c283aaadaad687f4c0844c9dfd02ead6b1d0", "filename": "gcc/common/config/s390/s390-common.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,127 @@\n+/* Common hooks for IBM S/390 and zSeries.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n+   2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+EXPORTED_CONST int processor_flags_table[] =\n+  {\n+    /* g5 */     PF_IEEE_FLOAT,\n+    /* g6 */     PF_IEEE_FLOAT,\n+    /* z900 */   PF_IEEE_FLOAT | PF_ZARCH,\n+    /* z990 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT,\n+    /* z9-109 */ PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM,\n+    /* z9-ec */  PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP,\n+    /* z10 */    PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP | PF_Z10,\n+    /* z196 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196\n+  };\n+\n+/* Change optimizations to be performed, depending on the\n+   optimization level.  */\n+\n+static const struct default_options s390_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+\n+    /* ??? There are apparently still problems with -fcaller-saves.  */\n+    { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },\n+\n+    /* Use MVCLE instructions to decrease code size if requested.  */\n+    { OPT_LEVELS_SIZE, OPT_mmvcle, NULL, 1 },\n+\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n+static void\n+s390_option_init_struct (struct gcc_options *opts)\n+{\n+  /* By default, always emit DWARF-2 unwind info.  This allows debugging\n+     without maintaining a stack frame back-chain.  */\n+  opts->x_flag_asynchronous_unwind_tables = 1;\n+}\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+s390_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+  \t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc)\n+{\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_march_:\n+      opts->x_s390_arch_flags = processor_flags_table[value];\n+      opts->x_s390_arch_string = arg;\n+      return true;\n+\n+    case OPT_mstack_guard_:\n+      if (exact_log2 (value) == -1)\n+\terror_at (loc, \"stack guard value must be an exact power of 2\");\n+      return true;\n+\n+    case OPT_mstack_size_:\n+      if (exact_log2 (value) == -1)\n+\terror_at (loc, \"stack size must be an exact power of 2\");\n+      return true;\n+\n+    case OPT_mtune_:\n+      opts->x_s390_tune_flags = processor_flags_table[value];\n+      return true;\n+\n+    case OPT_mwarn_framesize_:\n+      return sscanf (arg, HOST_WIDE_INT_PRINT_DEC,\n+\t\t     &opts->x_s390_warn_framesize) == 1;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT)\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION s390_handle_option\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE s390_option_optimization_table\n+\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT s390_option_init_struct\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "756e5b312e18ff593456e91a7542e6f5bfc38a23", "filename": "gcc/common/config/score/score-common.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fscore%2Fscore-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fscore%2Fscore-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fscore%2Fscore-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,75 @@\n+/* Common hooks for Sunplus S+CORE.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options score_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS     TARGET_DEFAULT\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION            score_handle_option\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE score_option_optimization_table\n+\n+#define MASK_ALL_CPU_BITS\t(MASK_SCORE7 | MASK_SCORE7D)\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+static bool\n+score_handle_option (struct gcc_options *opts,\n+\t\t     struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t     const struct cl_decoded_option *decoded,\n+\t\t     location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mscore7d:\n+      opts->x_target_flags &= ~(MASK_ALL_CPU_BITS);\n+      opts->x_target_flags |= MASK_SCORE7 | MASK_SCORE7D;\n+      return true;\n+\n+    case OPT_march_:\n+      opts->x_target_flags &= ~(MASK_ALL_CPU_BITS);\n+      opts->x_target_flags |= value;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "8677fd491746ef59d7a6d731494a52784749b0a1", "filename": "gcc/common/config/sh/sh-common.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,208 @@\n+/* Common hooks for Renesas / SuperH SH.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Set default optimization options.  */\n+static const struct default_options sh_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS_SPEED_ONLY, OPT_mdiv_, \"inv:minlat\", 1 },\n+    { OPT_LEVELS_SIZE, OPT_mdiv_, SH_DIV_STR_FOR_SIZE, 1 },\n+    { OPT_LEVELS_0_ONLY, OPT_mdiv_, \"\", 1 },\n+    { OPT_LEVELS_SIZE, OPT_mcbranchdi, NULL, 0 },\n+    /* We can't meaningfully test TARGET_SHMEDIA here, because -m\n+       options haven't been parsed yet, hence we'd read only the\n+       default.  sh_target_reg_class will return NO_REGS if this is\n+       not SHMEDIA, so it's OK to always set\n+       flag_branch_target_load_optimize.  */\n+    { OPT_LEVELS_2_PLUS, OPT_fbranch_target_load_optimize, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+sh_handle_option (struct gcc_options *opts,\n+\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t  const struct cl_decoded_option *decoded,\n+\t\t  location_t loc ATTRIBUTE_UNUSED)\n+{\n+  size_t code = decoded->opt_index;\n+\n+  switch (code)\n+    {\n+    case OPT_m1:\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH1;\n+      return true;\n+\n+    case OPT_m2:\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2;\n+      return true;\n+\n+    case OPT_m2a:\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A;\n+      return true;\n+\n+    case OPT_m2a_nofpu:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_NOFPU;\n+      return true;\n+\n+    case OPT_m2a_single:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_SINGLE;\n+      return true;\n+\n+    case OPT_m2a_single_only:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_SINGLE_ONLY;\n+      return true;\n+\n+    case OPT_m2e:\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2E;\n+      return true;\n+\n+    case OPT_m3:\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH3;\n+      return true;\n+\n+    case OPT_m3e:\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH3E;\n+      return true;\n+\n+    case OPT_m4:\n+    case OPT_m4_100:\n+    case OPT_m4_200:\n+    case OPT_m4_300:\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4;\n+      return true;\n+\n+    case OPT_m4_nofpu:\n+    case OPT_m4_100_nofpu:\n+    case OPT_m4_200_nofpu:\n+    case OPT_m4_300_nofpu:\n+    case OPT_m4_340:\n+    case OPT_m4_400:\n+    case OPT_m4_500:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_NOFPU;\n+      return true;\n+\n+    case OPT_m4_single:\n+    case OPT_m4_100_single:\n+    case OPT_m4_200_single:\n+    case OPT_m4_300_single:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE;\n+      return true;\n+\n+    case OPT_m4_single_only:\n+    case OPT_m4_100_single_only:\n+    case OPT_m4_200_single_only:\n+    case OPT_m4_300_single_only:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE_ONLY;\n+      return true;\n+\n+    case OPT_m4a:\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A;\n+      return true;\n+\n+    case OPT_m4a_nofpu:\n+    case OPT_m4al:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_NOFPU;\n+      return true;\n+\n+    case OPT_m4a_single:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_SINGLE;\n+      return true;\n+\n+    case OPT_m4a_single_only:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_SINGLE_ONLY;\n+      return true;\n+\n+    case OPT_m5_32media:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_32MEDIA;\n+      return true;\n+\n+    case OPT_m5_32media_nofpu:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_32MEDIA_NOFPU;\n+      return true;\n+\n+    case OPT_m5_64media:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_64MEDIA;\n+      return true;\n+\n+    case OPT_m5_64media_nofpu:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_64MEDIA_NOFPU;\n+      return true;\n+\n+    case OPT_m5_compact:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_COMPACT;\n+      return true;\n+\n+    case OPT_m5_compact_nofpu:\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_COMPACT_NOFPU;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+static void\n+sh_option_init_struct (struct gcc_options *opts)\n+{\n+  /* We can't meaningfully test TARGET_SH2E / TARGET_IEEE\n+     here, so leave it to TARGET_OPTION_OVERRIDE to set\n+     flag_finite_math_only.  We set it to 2 here so we know if the user\n+     explicitly requested this to be on or off.  */\n+  opts->x_flag_finite_math_only = 2;\n+}\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE sh_option_optimization_table\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT sh_option_init_struct\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION sh_handle_option\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "fe2ee6d2dbe58193bffc0e148a9d4d251ad7dae6", "filename": "gcc/common/config/sparc/sparc-common.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fsparc%2Fsparc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fsparc%2Fsparc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fsparc%2Fsparc-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,42 @@\n+/* Common hooks for SPARC.\n+   Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options sparc_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE sparc_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "d4a9f3c7cd98b00a30c6bf05f9f015d361903c9f", "filename": "gcc/common/config/spu/spu-common.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fspu%2Fspu-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fspu%2Fspu-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fspu%2Fspu-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,44 @@\n+/* Common hooks for SPU.\n+   Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3 of the License, or (at your option) \n+   any later version.\n+\n+   This file is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+static void\n+spu_option_init_struct (struct gcc_options *opts)\n+{\n+  /* With so many registers this is better on by default. */\n+  opts->x_flag_rename_registers = 1;\n+}\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT)\n+\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT spu_option_init_struct\n+\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "0e2d81760ea7255a37b82e1858f1253ba0129617", "filename": "gcc/common/config/v850/v850-common.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fv850%2Fv850-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fv850%2Fv850-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fv850%2Fv850-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,133 @@\n+/* Common hooks for NEC V850 series.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+\n+/* Information about the various small memory areas.  */\n+static const int small_memory_physical_max[(int) SMALL_MEMORY_max] =\n+{\n+  256,\n+  65536,\n+  32768,\n+};\n+\n+/* Set the maximum size of small memory area TYPE to the value given\n+   by SIZE in structure OPTS (option text OPT passed at location LOC).  */\n+\n+static void\n+v850_handle_memory_option (enum small_memory_type type,\n+\t\t\t   struct gcc_options *opts, const char *opt,\n+\t\t\t   int size, location_t loc)\n+{\n+  if (size > small_memory_physical_max[type])\n+    error_at (loc, \"value passed in %qs is too large\", opt);\n+  else\n+    opts->x_small_memory_max[type] = size;\n+}\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+v850_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_decoded_option *decoded,\n+\t\t    location_t loc)\n+{\n+  size_t code = decoded->opt_index;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mspace:\n+      opts->x_target_flags |= MASK_EP | MASK_PROLOG_FUNCTION;\n+      return true;\n+\n+    case OPT_mv850:\n+      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850);\n+      return true;\n+\n+    case OPT_mv850e:\n+    case OPT_mv850e1:\n+    case OPT_mv850es:\n+      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850E);\n+      return true;\n+\n+    case OPT_mv850e2:\n+      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850E2);\n+      return true;\n+\n+    case OPT_mv850e2v3:\n+      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850E2V3);\n+      return true;\n+\n+    case OPT_mtda_:\n+      v850_handle_memory_option (SMALL_MEMORY_TDA, opts,\n+\t\t\t\t decoded->orig_option_with_args_text,\n+\t\t\t\t value, loc);\n+      return true;\n+\n+    case OPT_msda_:\n+      v850_handle_memory_option (SMALL_MEMORY_SDA, opts,\n+\t\t\t\t decoded->orig_option_with_args_text,\n+\t\t\t\t value, loc);\n+      return true;\n+\n+    case OPT_mzda_:\n+      v850_handle_memory_option (SMALL_MEMORY_ZDA, opts,\n+\t\t\t\t decoded->orig_option_with_args_text,\n+\t\t\t\t value, loc);\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options v850_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    /* Note - we no longer enable MASK_EP when optimizing.  This is\n+       because of a hardware bug which stops the SLD and SST instructions\n+       from correctly detecting some hazards.  If the user is sure that\n+       their hardware is fixed or that their program will not encounter\n+       the conditions that trigger the bug then they can enable -mep by\n+       hand.  */\n+    { OPT_LEVELS_1_PLUS, OPT_mprolog_function, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (MASK_DEFAULT | MASK_APP_REGS)\n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION v850_handle_option\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE v850_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "11b1a4e833a42b2dcc2c5a6eaa5f29798b5f7728", "filename": "gcc/common/config/vax/vax-common.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fvax%2Fvax-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fvax%2Fvax-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fvax%2Fvax-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,32 @@\n+/* Common hooks for VAX.\n+   Copyright (C) 1987, 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002,\n+   2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "23850c205ba061e362f0479379ed8fc0fdde988e", "filename": "gcc/common/config/xstormy16/xstormy16-common.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fxstormy16%2Fxstormy16-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fxstormy16%2Fxstormy16-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fxstormy16%2Fxstormy16-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,38 @@\n+/* Common hooks for Xstormy16.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+   2006, 2007, 2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options xstorym16_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE xstorym16_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "4770f45c1abc14754bb4fbea6acc0a795f9a17d1", "filename": "gcc/common/config/xtensa/xtensa-common.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fxtensa%2Fxtensa-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcommon%2Fconfig%2Fxtensa%2Fxtensa-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fxtensa%2Fxtensa-common.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -0,0 +1,47 @@\n+/* Common hooks for Tensilica's Xtensa architecture.\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+\n+static const struct default_options xtensa_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    /* Reordering blocks for Xtensa is not a good idea unless the\n+       compiler understands the range of conditional branches.\n+       Currently all branch relaxation for Xtensa is handled in the\n+       assembler, so GCC cannot do a good job of reordering blocks.\n+       Do not enable reordering unless it is explicitly requested.  */\n+    { OPT_LEVELS_ALL, OPT_freorder_blocks, NULL, 0 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT)\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE xtensa_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "2a67bc4006eb4da056d819828208a1875e74d7db", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -217,7 +217,7 @@ c_target_objs=\n cxx_target_objs=\n fortran_target_objs=\n target_has_targetcm=no\n-target_has_targetm_common=no\n+target_has_targetm_common=yes\n tm_defines=\n xm_defines=\n libgcc_tm_file=\n@@ -329,6 +329,7 @@ frv*)\tcpu_type=frv\n \textra_options=\"${extra_options} g.opt\"\n \t;;\n moxie*)\tcpu_type=moxie\n+\ttarget_has_targetm_common=no\n \t;;\n fido-*-*)\n \tcpu_type=m68k\n@@ -367,7 +368,6 @@ ia64-*-*)\n \t;;\n hppa*-*-*)\n \tcpu_type=pa\n-\ttarget_has_targetm_common=yes\n \t;;\n lm32*)\n \textra_options=\"${extra_options} g.opt\""}, {"sha": "35172967718b201e97a3200491a481dac38ab2a5", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"common/common-target.h\"\n #include \"debug.h\"\n #include \"langhooks.h\"\n #include \"splay-tree.h\"\n@@ -199,46 +200,6 @@ static void alpha_write_linkage (FILE *, const char *, tree);\n static bool vms_valid_pointer_mode (enum machine_mode);\n #endif\n \f\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options alpha_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-alpha_handle_option (struct gcc_options *opts,\n-\t\t     struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t     const struct cl_decoded_option *decoded,\n-\t\t     location_t loc)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mfp_regs:\n-      if (value == 0)\n-\topts->x_target_flags |= MASK_SOFT_FP;\n-      break;\n-\n-    case OPT_mieee:\n-    case OPT_mieee_with_inexact:\n-      opts->x_target_flags |= MASK_IEEE_CONFORMANT;\n-      break;\n-\n-    case OPT_mtls_size_:\n-      if (value != 16 && value != 32 && value != 64)\n-\terror_at (loc, \"bad value %qs for -mtls-size switch\", arg);\n-      break;\n-    }\n-\n-  return true;\n-}\n-\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n /* Implement TARGET_MANGLE_TYPE.  */\n \n@@ -9932,18 +9893,9 @@ alpha_conditional_register_usage (void)\n #undef TARGET_RELAXED_ORDERING\n #define TARGET_RELAXED_ORDERING true\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS \\\n-  (TARGET_DEFAULT | TARGET_CPU_DEFAULT | TARGET_DEFAULT_EXPLICIT_RELOCS)\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION alpha_handle_option\n-\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE alpha_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE alpha_option_optimization_table\n-\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE alpha_mangle_type"}, {"sha": "8f7d18ad882f1e9009d977c6517a7819f5b56957", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -23,6 +23,7 @@\n #ifndef GCC_ARM_PROTOS_H\n #define GCC_ARM_PROTOS_H\n \n+extern enum unwind_info_type arm_except_unwind_info (struct gcc_options *);\n extern int use_return_insn (int, rtx);\n extern enum reg_class arm_regno_class (int);\n extern void arm_load_pic_register (unsigned long);"}, {"sha": "717e289e4c98c63ffcb7e7152592aa044189e4d0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -204,7 +204,6 @@ static bool arm_output_ttype (rtx);\n static void arm_asm_emit_except_personality (rtx);\n static void arm_asm_init_sections (void);\n #endif\n-static enum unwind_info_type arm_except_unwind_info (struct gcc_options *);\n static void arm_dwarf_handle_frame_unspec (const char *, rtx, int);\n static rtx arm_dwarf_register_span (rtx);\n \n@@ -303,15 +302,6 @@ static const struct attribute_spec arm_attribute_table[] =\n #endif\n   { NULL,           0, 0, false, false, false, NULL, false }\n };\n-\n-/* Set default optimization options.  */\n-static const struct default_options arm_option_optimization_table[] =\n-  {\n-    /* Enable section anchors by default at -O1 or higher.  */\n-    { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n /* Initialize the GCC target structure.  */\n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n@@ -351,12 +341,8 @@ static const struct default_options arm_option_optimization_table[] =\n #undef  TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE arm_output_function_epilogue\n \n-#undef  TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | MASK_SCHED_PROLOG)\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE arm_option_override\n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE arm_option_optimization_table\n \n #undef  TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES arm_comp_type_attributes\n@@ -516,9 +502,6 @@ static const struct default_options arm_option_optimization_table[] =\n #define TARGET_ASM_INIT_SECTIONS arm_asm_init_sections\n #endif /* ARM_UNWIND_INFO */\n \n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO  arm_except_unwind_info\n-\n #undef TARGET_DWARF_HANDLE_FRAME_UNSPEC\n #define TARGET_DWARF_HANDLE_FRAME_UNSPEC arm_dwarf_handle_frame_unspec\n \n@@ -22848,33 +22831,6 @@ arm_asm_init_sections (void)\n }\n #endif /* ARM_UNWIND_INFO */\n \n-/* Implement TARGET_EXCEPT_UNWIND_INFO.  */\n-\n-static enum unwind_info_type\n-arm_except_unwind_info (struct gcc_options *opts)\n-{\n-  /* Honor the --enable-sjlj-exceptions configure switch.  */\n-#ifdef CONFIG_SJLJ_EXCEPTIONS\n-  if (CONFIG_SJLJ_EXCEPTIONS)\n-    return UI_SJLJ;\n-#endif\n-\n-  /* If not using ARM EABI unwind tables... */\n-  if (ARM_UNWIND_INFO)\n-    {\n-      /* For simplicity elsewhere in this file, indicate that all unwind\n-\t info is disabled if we're not emitting unwind tables.  */\n-      if (!opts->x_flag_exceptions && !opts->x_flag_unwind_tables)\n-\treturn UI_NONE;\n-      else\n-\treturn UI_TARGET;\n-    }\n-\n-  /* ... we use sjlj exceptions for backwards compatibility.  */\n-  return UI_SJLJ;\n-}\n-\n-\n /* Handle UNSPEC DWARF call frame instructions.  These are needed for dynamic\n    stack alignment.  */\n "}, {"sha": "de24937e4d30fc6b8bc71196979350086cf63739", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -156,13 +156,6 @@ static const struct attribute_spec avr_attribute_table[] =\n     false },\n   { NULL,        0, 0, false, false, false, NULL, false }\n };\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options avr_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -254,18 +247,12 @@ static const struct default_options avr_option_optimization_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE avr_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE avr_option_optimization_table\n-\n #undef TARGET_CANNOT_MODIFY_JUMPS_P\n #define TARGET_CANNOT_MODIFY_JUMPS_P avr_cannot_modify_jumps_p\n \n #undef TARGET_HELP\n #define TARGET_HELP avr_help\n \n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n-\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL avr_function_ok_for_sibcall\n "}, {"sha": "e5fae38001aa89eccc5b3e162e2b188cb8101d0a", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 0, "deletions": 365, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -86,270 +86,6 @@ const char *byte_reg_names[]   =  BYTE_REGISTER_NAMES;\n static int arg_regs[] = FUNCTION_ARG_REGISTERS;\n static int ret_regs[] = FUNCTION_RETURN_REGISTERS;\n \n-struct bfin_cpu\n-{\n-  const char *name;\n-  bfin_cpu_t type;\n-  int si_revision;\n-  unsigned int workarounds;\n-};\n-\n-static const struct bfin_cpu bfin_cpus[] =\n-{\n-\n-  {\"bf512\", BFIN_CPU_BF512, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf512\", BFIN_CPU_BF512, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf512\", BFIN_CPU_BF512, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-\n-  {\"bf514\", BFIN_CPU_BF514, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf514\", BFIN_CPU_BF514, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf514\", BFIN_CPU_BF514, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-\n-  {\"bf516\", BFIN_CPU_BF516, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf516\", BFIN_CPU_BF516, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf516\", BFIN_CPU_BF516, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-\n-  {\"bf518\", BFIN_CPU_BF518, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf518\", BFIN_CPU_BF518, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf518\", BFIN_CPU_BF518, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-\n-  {\"bf522\", BFIN_CPU_BF522, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf522\", BFIN_CPU_BF522, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-  {\"bf522\", BFIN_CPU_BF522, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-\n-  {\"bf523\", BFIN_CPU_BF523, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf523\", BFIN_CPU_BF523, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-  {\"bf523\", BFIN_CPU_BF523, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-\n-  {\"bf524\", BFIN_CPU_BF524, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf524\", BFIN_CPU_BF524, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-  {\"bf524\", BFIN_CPU_BF524, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-\n-  {\"bf525\", BFIN_CPU_BF525, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf525\", BFIN_CPU_BF525, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-  {\"bf525\", BFIN_CPU_BF525, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-\n-  {\"bf526\", BFIN_CPU_BF526, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf526\", BFIN_CPU_BF526, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-  {\"bf526\", BFIN_CPU_BF526, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-\n-  {\"bf527\", BFIN_CPU_BF527, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf527\", BFIN_CPU_BF527, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-  {\"bf527\", BFIN_CPU_BF527, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n-\n-  {\"bf531\", BFIN_CPU_BF531, 0x0006,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf531\", BFIN_CPU_BF531, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n-   | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf531\", BFIN_CPU_BF531, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-  {\"bf531\", BFIN_CPU_BF531, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf532\", BFIN_CPU_BF532, 0x0006,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf532\", BFIN_CPU_BF532, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n-   | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf532\", BFIN_CPU_BF532, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-  {\"bf532\", BFIN_CPU_BF532, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf533\", BFIN_CPU_BF533, 0x0006,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf533\", BFIN_CPU_BF533, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n-   | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf533\", BFIN_CPU_BF533, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-  {\"bf533\", BFIN_CPU_BF533, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf534\", BFIN_CPU_BF534, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf534\", BFIN_CPU_BF534, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-  {\"bf534\", BFIN_CPU_BF534, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf536\", BFIN_CPU_BF536, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf536\", BFIN_CPU_BF536, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-  {\"bf536\", BFIN_CPU_BF536, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf537\", BFIN_CPU_BF537, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf537\", BFIN_CPU_BF537, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-  {\"bf537\", BFIN_CPU_BF537, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf538\", BFIN_CPU_BF538, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf538\", BFIN_CPU_BF538, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf538\", BFIN_CPU_BF538, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS\n-   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf538\", BFIN_CPU_BF538, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf539\", BFIN_CPU_BF539, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf539\", BFIN_CPU_BF539, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf539\", BFIN_CPU_BF539, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS\n-   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf539\", BFIN_CPU_BF539, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf542m\", BFIN_CPU_BF542M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-\n-  {\"bf542\", BFIN_CPU_BF542, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf542\", BFIN_CPU_BF542, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf542\", BFIN_CPU_BF542, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf542\", BFIN_CPU_BF542, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf544m\", BFIN_CPU_BF544M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-\n-  {\"bf544\", BFIN_CPU_BF544, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf544\", BFIN_CPU_BF544, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf544\", BFIN_CPU_BF544, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf544\", BFIN_CPU_BF544, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf547m\", BFIN_CPU_BF547M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-\n-  {\"bf547\", BFIN_CPU_BF547, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf547\", BFIN_CPU_BF547, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf547\", BFIN_CPU_BF547, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf547\", BFIN_CPU_BF547, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf548m\", BFIN_CPU_BF548M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-\n-  {\"bf548\", BFIN_CPU_BF548, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf548\", BFIN_CPU_BF548, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf548\", BFIN_CPU_BF548, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf548\", BFIN_CPU_BF548, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf549m\", BFIN_CPU_BF549M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-\n-  {\"bf549\", BFIN_CPU_BF549, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf549\", BFIN_CPU_BF549, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf549\", BFIN_CPU_BF549, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n-  {\"bf549\", BFIN_CPU_BF549, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf561\", BFIN_CPU_BF561, 0x0005, WA_RETS\n-   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n-  {\"bf561\", BFIN_CPU_BF561, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-  {\"bf561\", BFIN_CPU_BF561, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n-   | WA_05000074},\n-\n-  {\"bf592\", BFIN_CPU_BF592, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-  {\"bf592\", BFIN_CPU_BF592, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_05000074},\n-\n-  {NULL, BFIN_CPU_UNKNOWN, 0, 0}\n-};\n-\n int splitting_for_sched, splitting_loops;\n \n static void\n@@ -2572,101 +2308,6 @@ bfin_class_likely_spilled_p (reg_class_t rclass)\n   return false;\n }\n \f\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-bfin_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mshared_library_id_:\n-      if (value > MAX_LIBRARY_ID)\n-\terror_at (loc, \"-mshared-library-id=%s is not between 0 and %d\",\n-\t\t  arg, MAX_LIBRARY_ID);\n-      return true;\n-\n-    case OPT_mcpu_:\n-      {\n-\tconst char *p, *q;\n-\tint i;\n-\n-\ti = 0;\n-\twhile ((p = bfin_cpus[i].name) != NULL)\n-\t  {\n-\t    if (strncmp (arg, p, strlen (p)) == 0)\n-\t      break;\n-\t    i++;\n-\t  }\n-\n-\tif (p == NULL)\n-\t  {\n-\t    error_at (loc, \"-mcpu=%s is not valid\", arg);\n-\t    return false;\n-\t  }\n-\n-\topts->x_bfin_cpu_type = bfin_cpus[i].type;\n-\n-\tq = arg + strlen (p);\n-\n-\tif (*q == '\\0')\n-\t  {\n-\t    opts->x_bfin_si_revision = bfin_cpus[i].si_revision;\n-\t    opts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n-\t  }\n-\telse if (strcmp (q, \"-none\") == 0)\n-\t  opts->x_bfin_si_revision = -1;\n-      \telse if (strcmp (q, \"-any\") == 0)\n-\t  {\n-\t    opts->x_bfin_si_revision = 0xffff;\n-\t    while (bfin_cpus[i].type == opts->x_bfin_cpu_type)\n-\t      {\n-\t\topts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n-\t\ti++;\n-\t      }\n-\t  }\n-\telse\n-\t  {\n-\t    unsigned int si_major, si_minor;\n-\t    int rev_len, n;\n-\n-\t    rev_len = strlen (q);\n-\n-\t    if (sscanf (q, \"-%u.%u%n\", &si_major, &si_minor, &n) != 2\n-\t\t|| n != rev_len\n-\t\t|| si_major > 0xff || si_minor > 0xff)\n-\t      {\n-\t      invalid_silicon_revision:\n-\t\terror_at (loc, \"-mcpu=%s has invalid silicon revision\", arg);\n-\t\treturn false;\n-\t      }\n-\n-\t    opts->x_bfin_si_revision = (si_major << 8) | si_minor;\n-\n-\t    while (bfin_cpus[i].type == opts->x_bfin_cpu_type\n-\t\t   && bfin_cpus[i].si_revision != opts->x_bfin_si_revision)\n-\t      i++;\n-\n-\t    if (bfin_cpus[i].type != opts->x_bfin_cpu_type)\n-\t      goto invalid_silicon_revision;\n-\n-\t    opts->x_bfin_workarounds |= bfin_cpus[i].workarounds;\n-\t  }\n-\n-\treturn true;\n-      }\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n static struct machine_function *\n bfin_init_machine_status (void)\n {\n@@ -6700,15 +6341,9 @@ bfin_conditional_register_usage (void)\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P bfin_vector_mode_supported_p\n \n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION bfin_handle_option\n-\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE bfin_option_override\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n-\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD bfin_secondary_reload\n "}, {"sha": "635c61b243aaf151dc5a6abdf3f6dcbe9ce2da16", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1169,4 +1169,14 @@ extern int splitting_for_sched, splitting_loops;\n #define TARGET_SUPPORTS_SYNC_CALLS 0\n #endif\n \n+struct bfin_cpu\n+{\n+  const char *name;\n+  bfin_cpu_t type;\n+  int si_revision;\n+  unsigned int workarounds;\n+};\n+\n+extern const struct bfin_cpu bfin_cpus[];\n+\n #endif /*  _BFIN_CONFIG */"}, {"sha": "74ce110098d765adb19f2c9f84de72c4ebc5ab00", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -137,8 +137,6 @@ static void cris_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n static tree cris_md_asm_clobbers (tree, tree, tree);\n \n-static bool cris_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t\tconst struct cl_decoded_option *, location_t);\n static void cris_option_override (void);\n \n static bool cris_frame_pointer_required (void);\n@@ -156,14 +154,6 @@ int cris_max_stackframe = 0;\n /* This is the parsed result of the \"-march=\" option, if given.  */\n int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options cris_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_2_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n #undef TARGET_ASM_ALIGNED_SI_OP\n@@ -232,17 +222,11 @@ static const struct default_options cris_option_optimization_table[] =\n #define TARGET_FUNCTION_ARG_ADVANCE cris_function_arg_advance\n #undef TARGET_MD_ASM_CLOBBERS\n #define TARGET_MD_ASM_CLOBBERS cris_md_asm_clobbers\n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | CRIS_SUBTARGET_DEFAULT)\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION cris_handle_option\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED cris_frame_pointer_required\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE cris_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE cris_option_optimization_table\n \n #undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE cris_asm_trampoline_template\n@@ -2324,66 +2308,6 @@ cris_asm_output_case_end (FILE *stream, int num, rtx table)\n \t       (TARGET_PDEBUG ? \"; default\" : \"\"));\n }\n \n-/* TARGET_HANDLE_OPTION worker.  We just store the values into local\n-   variables here.  Checks for correct semantics are in\n-   cris_option_override.  */\n-\n-static bool\n-cris_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-\n-  switch (code)\n-    {\n-    case OPT_metrax100:\n-      opts->x_target_flags\n-\t|= (MASK_SVINTO\n-\t    + MASK_ETRAX4_ADD\n-\t    + MASK_ALIGN_BY_32);\n-      break;\n-\n-    case OPT_mno_etrax100:\n-      opts->x_target_flags\n-\t&= ~(MASK_SVINTO\n-\t     + MASK_ETRAX4_ADD\n-\t     + MASK_ALIGN_BY_32);\n-      break;\n-\n-    case OPT_m32_bit:\n-    case OPT_m32bit:\n-      opts->x_target_flags\n-\t|= (MASK_STACK_ALIGN\n-\t    + MASK_CONST_ALIGN\n-\t    + MASK_DATA_ALIGN\n-\t    + MASK_ALIGN_BY_32);\n-      break;\n-\n-    case OPT_m16_bit:\n-    case OPT_m16bit:\n-      opts->x_target_flags\n-\t|= (MASK_STACK_ALIGN\n-\t    + MASK_CONST_ALIGN\n-\t    + MASK_DATA_ALIGN);\n-      break;\n-\n-    case OPT_m8_bit:\n-    case OPT_m8bit:\n-      opts->x_target_flags\n-\t&= ~(MASK_STACK_ALIGN\n-\t     + MASK_CONST_ALIGN\n-\t     + MASK_DATA_ALIGN);\n-      break;\n-\n-    default:\n-      break;\n-    }\n-\n-  return true;\n-}\n-\n /* The TARGET_OPTION_OVERRIDE worker.\n    As is the norm, this also parses -mfoo=bar type parameters.  */\n "}, {"sha": "40c39aad4740e2f1c9964dae586048946242b96f", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,6 +1,6 @@\n /* FR30 specific functions.\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009,\n-   2010 Free Software Foundation, Inc.\n+   2010, 2011 Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n    This file is part of GCC.\n@@ -150,13 +150,6 @@ static int fr30_num_arg_regs (enum machine_mode, const_tree);\n #if UNITS_PER_WORD == 4\n #define WORD_ALIGN(SIZE) (((SIZE) + 3) & ~3)\n #endif\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options fr30_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_ALIGNED_HI_OP\n@@ -198,12 +191,6 @@ static const struct default_options fr30_option_optimization_table[] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT fr30_trampoline_init\n \n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n-\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE fr30_option_optimization_table\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n "}, {"sha": "de8eac6176a66b0a19aa42f0838afb6fa88152aa", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -400,20 +400,6 @@ static bool frv_can_eliminate\t\t\t(const int, const int);\n static void frv_conditional_register_usage\t(void);\n static void frv_trampoline_init\t\t\t(rtx, tree, rtx);\n static bool frv_class_likely_spilled_p \t\t(reg_class_t);\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options frv_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\f\n-/* Allow us to easily change the default for -malloc-cc.  */\n-#ifndef DEFAULT_NO_ALLOC_CC\n-#define MASK_DEFAULT_ALLOC_CC\tMASK_ALLOC_CC\n-#else\n-#define MASK_DEFAULT_ALLOC_CC\t0\n-#endif\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_PRINT_OPERAND\n@@ -428,19 +414,8 @@ static const struct default_options frv_option_optimization_table[] =\n #define TARGET_ASM_FUNCTION_EPILOGUE frv_function_epilogue\n #undef  TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER frv_assemble_integer\n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n-  (MASK_DEFAULT_ALLOC_CC\t\t\t\\\n-   | MASK_COND_MOVE\t\t\t\t\\\n-   | MASK_SCC\t\t\t\t\t\\\n-   | MASK_COND_EXEC\t\t\t\t\\\n-   | MASK_VLIW_BRANCH\t\t\t\t\\\n-   | MASK_MULTI_CE\t\t\t\t\\\n-   | MASK_NESTED_CE)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE frv_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE frv_option_optimization_table\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS frv_init_builtins\n #undef TARGET_EXPAND_BUILTIN"}, {"sha": "77fc2d2e0104313470ff7e2aa918ce1a9d7cdc81", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -309,17 +309,6 @@ enum h8_cpu\n   H8_S\n };\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options h8300_option_optimization_table[] =\n-  {\n-    /* Basic block reordering is only beneficial on targets with cache\n-       and/or variable-cycle branches where (cycle count taken !=\n-       cycle count not taken).  */\n-    { OPT_LEVELS_ALL, OPT_freorder_blocks, NULL, 0 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Initialize various cpu specific globals at start up.  */\n \n static void\n@@ -5987,9 +5976,6 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\th8300_legitimate_address_p\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n-\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE h8300_can_eliminate\n \n@@ -6002,12 +5988,6 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE h8300_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE h8300_option_optimization_table\n-\n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n-\n #undef TARGET_MODE_DEPENDENT_ADDRESS_P\n #define TARGET_MODE_DEPENDENT_ADDRESS_P h8300_mode_dependent_address_p\n "}, {"sha": "83f39dcc78489ee6c7a2f90233391f1081c62216", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GCC for IA-32.\n    Copyright (C) 1988, 1992, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -19,6 +19,12 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* In i386-common.c.  */\n+extern bool ix86_handle_option (struct gcc_options *opts,\n+\t\t\t\tstruct gcc_options *opts_set ATTRIBUTE_UNUSED,\n+\t\t\t\tconst struct cl_decoded_option *decoded,\n+\t\t\t\tlocation_t loc);\n+\n /* Functions in i386.c */\n extern bool ix86_target_stack_probe (void);\n extern bool ix86_can_use_return_insn_p (void);"}, {"sha": "507d4c691ef7cd4f0be9e1269c84dbe4ac9f0688", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 606, "changes": 607, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"cgraph.h\"\n #include \"gimple.h\"\n@@ -2461,120 +2462,6 @@ static enum calling_abi ix86_function_abi (const_tree);\n static int ix86_tune_defaulted;\n static int ix86_arch_specified;\n \n-/* Define a set of ISAs which are available when a given ISA is\n-   enabled.  MMX and SSE ISAs are handled separately.  */\n-\n-#define OPTION_MASK_ISA_MMX_SET OPTION_MASK_ISA_MMX\n-#define OPTION_MASK_ISA_3DNOW_SET \\\n-  (OPTION_MASK_ISA_3DNOW | OPTION_MASK_ISA_MMX_SET)\n-\n-#define OPTION_MASK_ISA_SSE_SET OPTION_MASK_ISA_SSE\n-#define OPTION_MASK_ISA_SSE2_SET \\\n-  (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_SSE_SET)\n-#define OPTION_MASK_ISA_SSE3_SET \\\n-  (OPTION_MASK_ISA_SSE3 | OPTION_MASK_ISA_SSE2_SET)\n-#define OPTION_MASK_ISA_SSSE3_SET \\\n-  (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_SSE3_SET)\n-#define OPTION_MASK_ISA_SSE4_1_SET \\\n-  (OPTION_MASK_ISA_SSE4_1 | OPTION_MASK_ISA_SSSE3_SET)\n-#define OPTION_MASK_ISA_SSE4_2_SET \\\n-  (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_SSE4_1_SET)\n-#define OPTION_MASK_ISA_AVX_SET \\\n-  (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_SSE4_2_SET)\n-#define OPTION_MASK_ISA_FMA_SET \\\n-  (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_AVX_SET)\n-\n-/* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n-   as -msse4.2.  */\n-#define OPTION_MASK_ISA_SSE4_SET OPTION_MASK_ISA_SSE4_2_SET\n-\n-#define OPTION_MASK_ISA_SSE4A_SET \\\n-  (OPTION_MASK_ISA_SSE4A | OPTION_MASK_ISA_SSE3_SET)\n-#define OPTION_MASK_ISA_FMA4_SET \\\n-  (OPTION_MASK_ISA_FMA4 | OPTION_MASK_ISA_SSE4A_SET \\\n-   | OPTION_MASK_ISA_AVX_SET)\n-#define OPTION_MASK_ISA_XOP_SET \\\n-  (OPTION_MASK_ISA_XOP | OPTION_MASK_ISA_FMA4_SET)\n-#define OPTION_MASK_ISA_LWP_SET \\\n-  OPTION_MASK_ISA_LWP\n-\n-/* AES and PCLMUL need SSE2 because they use xmm registers */\n-#define OPTION_MASK_ISA_AES_SET \\\n-  (OPTION_MASK_ISA_AES | OPTION_MASK_ISA_SSE2_SET)\n-#define OPTION_MASK_ISA_PCLMUL_SET \\\n-  (OPTION_MASK_ISA_PCLMUL | OPTION_MASK_ISA_SSE2_SET)\n-\n-#define OPTION_MASK_ISA_ABM_SET \\\n-  (OPTION_MASK_ISA_ABM | OPTION_MASK_ISA_POPCNT)\n-\n-#define OPTION_MASK_ISA_BMI_SET OPTION_MASK_ISA_BMI\n-#define OPTION_MASK_ISA_TBM_SET OPTION_MASK_ISA_TBM\n-#define OPTION_MASK_ISA_POPCNT_SET OPTION_MASK_ISA_POPCNT\n-#define OPTION_MASK_ISA_CX16_SET OPTION_MASK_ISA_CX16\n-#define OPTION_MASK_ISA_SAHF_SET OPTION_MASK_ISA_SAHF\n-#define OPTION_MASK_ISA_MOVBE_SET OPTION_MASK_ISA_MOVBE\n-#define OPTION_MASK_ISA_CRC32_SET OPTION_MASK_ISA_CRC32\n-\n-#define OPTION_MASK_ISA_FSGSBASE_SET OPTION_MASK_ISA_FSGSBASE\n-#define OPTION_MASK_ISA_RDRND_SET OPTION_MASK_ISA_RDRND\n-#define OPTION_MASK_ISA_F16C_SET \\\n-  (OPTION_MASK_ISA_F16C | OPTION_MASK_ISA_AVX_SET)\n-\n-/* Define a set of ISAs which aren't available when a given ISA is\n-   disabled.  MMX and SSE ISAs are handled separately.  */\n-\n-#define OPTION_MASK_ISA_MMX_UNSET \\\n-  (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_3DNOW_UNSET)\n-#define OPTION_MASK_ISA_3DNOW_UNSET \\\n-  (OPTION_MASK_ISA_3DNOW | OPTION_MASK_ISA_3DNOW_A_UNSET)\n-#define OPTION_MASK_ISA_3DNOW_A_UNSET OPTION_MASK_ISA_3DNOW_A\n-\n-#define OPTION_MASK_ISA_SSE_UNSET \\\n-  (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_SSE2_UNSET)\n-#define OPTION_MASK_ISA_SSE2_UNSET \\\n-  (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_SSE3_UNSET)\n-#define OPTION_MASK_ISA_SSE3_UNSET \\\n-  (OPTION_MASK_ISA_SSE3 \\\n-   | OPTION_MASK_ISA_SSSE3_UNSET \\\n-   | OPTION_MASK_ISA_SSE4A_UNSET )\n-#define OPTION_MASK_ISA_SSSE3_UNSET \\\n-  (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_SSE4_1_UNSET)\n-#define OPTION_MASK_ISA_SSE4_1_UNSET \\\n-  (OPTION_MASK_ISA_SSE4_1 | OPTION_MASK_ISA_SSE4_2_UNSET)\n-#define OPTION_MASK_ISA_SSE4_2_UNSET \\\n-  (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_AVX_UNSET )\n-#define OPTION_MASK_ISA_AVX_UNSET \\\n-  (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_FMA_UNSET \\\n-   | OPTION_MASK_ISA_FMA4_UNSET | OPTION_MASK_ISA_F16C_UNSET)\n-#define OPTION_MASK_ISA_FMA_UNSET OPTION_MASK_ISA_FMA\n-\n-/* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n-   as -mno-sse4.1. */\n-#define OPTION_MASK_ISA_SSE4_UNSET OPTION_MASK_ISA_SSE4_1_UNSET\n-\n-#define OPTION_MASK_ISA_SSE4A_UNSET \\\n-  (OPTION_MASK_ISA_SSE4A | OPTION_MASK_ISA_FMA4_UNSET)\n-\n-#define OPTION_MASK_ISA_FMA4_UNSET \\\n-  (OPTION_MASK_ISA_FMA4 | OPTION_MASK_ISA_XOP_UNSET)\n-#define OPTION_MASK_ISA_XOP_UNSET OPTION_MASK_ISA_XOP\n-#define OPTION_MASK_ISA_LWP_UNSET OPTION_MASK_ISA_LWP\n-\n-#define OPTION_MASK_ISA_AES_UNSET OPTION_MASK_ISA_AES\n-#define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n-#define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n-#define OPTION_MASK_ISA_BMI_UNSET OPTION_MASK_ISA_BMI\n-#define OPTION_MASK_ISA_TBM_UNSET OPTION_MASK_ISA_TBM\n-#define OPTION_MASK_ISA_POPCNT_UNSET OPTION_MASK_ISA_POPCNT\n-#define OPTION_MASK_ISA_CX16_UNSET OPTION_MASK_ISA_CX16\n-#define OPTION_MASK_ISA_SAHF_UNSET OPTION_MASK_ISA_SAHF\n-#define OPTION_MASK_ISA_MOVBE_UNSET OPTION_MASK_ISA_MOVBE\n-#define OPTION_MASK_ISA_CRC32_UNSET OPTION_MASK_ISA_CRC32\n-\n-#define OPTION_MASK_ISA_FSGSBASE_UNSET OPTION_MASK_ISA_FSGSBASE\n-#define OPTION_MASK_ISA_RDRND_UNSET OPTION_MASK_ISA_RDRND\n-#define OPTION_MASK_ISA_F16C_UNSET OPTION_MASK_ISA_F16C\n-\n /* Vectorization library interface and handlers.  */\n static tree (*ix86_veclib_handler) (enum built_in_function, tree, tree);\n \n@@ -2656,427 +2543,6 @@ ix86_using_red_zone (void)\n {\n   return TARGET_RED_ZONE && !TARGET_64BIT_MS_ABI;\n }\n-\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-ix86_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc)\n-{\n-  size_t code = decoded->opt_index;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mmmx:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MMX_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MMX_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_MMX_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MMX_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_m3dnow:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_3DNOW_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_3DNOW_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_3DNOW_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_3DNOW_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_m3dnowa:\n-      return false;\n-\n-    case OPT_msse:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_msse2:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE2_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE2_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_msse3:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE3_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE3_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE3_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE3_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mssse3:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSSE3_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSSE3_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSSE3_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSSE3_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_msse4_1:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_1_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_1_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_1_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_1_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_msse4_2:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_2_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_2_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_2_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_2_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mavx:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mfma:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FMA_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FMA_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_FMA_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FMA_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_msse4:\n-      opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_SET;\n-      opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_SET;\n-      return true;\n-\n-    case OPT_mno_sse4:\n-      opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_UNSET;\n-      opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_UNSET;\n-      return true;\n-\n-    case OPT_msse4a:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4A_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4A_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4A_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4A_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mfma4:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FMA4_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FMA4_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_FMA4_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FMA4_UNSET;\n-\t}\n-      return true;\n-\n-   case OPT_mxop:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XOP_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XOP_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_XOP_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XOP_UNSET;\n-\t}\n-      return true;\n-\n-   case OPT_mlwp:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_LWP_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_LWP_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_LWP_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_LWP_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mabm:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_ABM_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_ABM_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_ABM_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_ABM_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mbmi:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_BMI_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_BMI_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_BMI_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_BMI_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mtbm:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_TBM_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_TBM_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_TBM_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_TBM_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mpopcnt:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_POPCNT_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_POPCNT_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_POPCNT_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_POPCNT_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_msahf:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SAHF_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SAHF_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SAHF_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SAHF_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mcx16:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CX16_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CX16_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_CX16_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CX16_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mmovbe:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MOVBE_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MOVBE_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_MOVBE_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MOVBE_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mcrc32:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CRC32_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CRC32_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_CRC32_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CRC32_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_maes:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AES_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AES_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AES_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AES_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mpclmul:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PCLMUL_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PCLMUL_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_PCLMUL_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PCLMUL_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mfsgsbase:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FSGSBASE_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FSGSBASE_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_FSGSBASE_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FSGSBASE_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mrdrnd:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_RDRND_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_RDRND_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_RDRND_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_RDRND_UNSET;\n-\t}\n-      return true;\n-\n-    case OPT_mf16c:\n-      if (value)\n-\t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_F16C_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_F16C_SET;\n-\t}\n-      else\n-\t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_F16C_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_F16C_UNSET;\n-\t}\n-      return true;\n-\n-  /* Comes from final.c -- no real reason to change it.  */\n-#define MAX_CODE_ALIGN 16\n-\n-    case OPT_malign_loops_:\n-      warning_at (loc, 0, \"-malign-loops is obsolete, use -falign-loops\");\n-      if (value > MAX_CODE_ALIGN)\n-\terror_at (loc, \"-malign-loops=%d is not between 0 and %d\",\n-\t\t  value, MAX_CODE_ALIGN);\n-      else\n-\topts->x_align_loops = 1 << value;\n-      return true;\n-\n-    case OPT_malign_jumps_:\n-      warning_at (loc, 0, \"-malign-jumps is obsolete, use -falign-jumps\");\n-      if (value > MAX_CODE_ALIGN)\n-\terror_at (loc, \"-malign-jumps=%d is not between 0 and %d\",\n-\t\t  value, MAX_CODE_ALIGN);\n-      else\n-\topts->x_align_jumps = 1 << value;\n-      return true;\n-\n-    case OPT_malign_functions_:\n-      warning_at (loc, 0,\n-\t\t  \"-malign-functions is obsolete, use -falign-functions\");\n-      if (value > MAX_CODE_ALIGN)\n-\terror_at (loc, \"-malign-functions=%d is not between 0 and %d\",\n-\t\t  value, MAX_CODE_ALIGN);\n-      else\n-\topts->x_align_functions = 1 << value;\n-      return true;\n-\n-    case OPT_mbranch_cost_:\n-      if (value > 5)\n-\t{\n-\t  error_at (loc, \"-mbranch-cost=%d is not between 0 and 5\", value);\n-\t  opts->x_ix86_branch_cost = 5;\n-\t}\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n \f\n /* Return a string that documents the current -m options.  The caller is\n    responsible for freeing the string.  */\n@@ -5092,35 +4558,6 @@ x86_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n   ASM_OUTPUT_SKIP (file, size ? size : 1);\n }\n \f\n-static const struct default_options ix86_option_optimization_table[] =\n-  {\n-    /* Turn off -fschedule-insns by default.  It tends to make the\n-       problem with not enough registers even worse.  */\n-#ifdef INSN_SCHEDULING\n-    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n-#endif\n-\n-#ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n-    SUBTARGET_OPTIMIZATION_OPTIONS,\n-#endif\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-/* Implement TARGET_OPTION_INIT_STRUCT.  */\n-\n-static void\n-ix86_option_init_struct (struct gcc_options *opts)\n-{\n-  if (TARGET_MACHO)\n-    /* The Darwin libraries never set errno, so we might as well\n-       avoid calling them when that's the only reason we would.  */\n-    opts->x_flag_errno_math = 0;\n-\n-  opts->x_flag_pcc_struct_return = 2;\n-  opts->x_flag_asynchronous_unwind_tables = 2;\n-  opts->x_flag_vect_cost_model = 1;\n-}\n-\n /* Decide whether we must probe the stack before any space allocation\n    on this target.  It's essentially TARGET_STACK_PROBE except when\n    -fstack-check causes the stack to be already probed differently.  */\n@@ -9142,32 +8579,6 @@ ix86_builtin_setjmp_frame_value (void)\n   return stack_realign_fp ? hard_frame_pointer_rtx : virtual_stack_vars_rtx;\n }\n \n-/* On the x86 -fsplit-stack and -fstack-protector both use the same\n-   field in the TCB, so they can not be used together.  */\n-\n-static bool\n-ix86_supports_split_stack (bool report ATTRIBUTE_UNUSED,\n-\t\t\t   struct gcc_options *opts ATTRIBUTE_UNUSED)\n-{\n-  bool ret = true;\n-\n-#ifndef TARGET_THREAD_SPLIT_STACK_OFFSET\n-  if (report)\n-    error (\"%<-fsplit-stack%> currently only supported on GNU/Linux\");\n-  ret = false;\n-#else\n-  if (!HAVE_GAS_CFI_PERSONALITY_DIRECTIVE)\n-    {\n-      if (report)\n-\terror (\"%<-fsplit-stack%> requires \"\n-\t       \"assembler support for CFI directives\");\n-      ret = false;\n-    }\n-#endif\n-\n-  return ret;\n-}\n-\n /* When using -fsplit-stack, the allocation routines set a field in\n    the TCB to the bottom of the stack plus this much space, measured\n    in bytes.  */\n@@ -35297,21 +34708,8 @@ ix86_autovectorize_vector_sizes (void)\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START x86_file_start\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS\t\\\n-  (TARGET_DEFAULT\t\t\t\\\n-   | TARGET_SUBTARGET_DEFAULT\t\t\\\n-   | TARGET_TLS_DIRECT_SEG_REFS_DEFAULT)\n-\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION ix86_handle_option\n-\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE ix86_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE ix86_option_optimization_table\n-#undef TARGET_OPTION_INIT_STRUCT\n-#define TARGET_OPTION_INIT_STRUCT ix86_option_init_struct\n \n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST ix86_register_move_cost\n@@ -35412,9 +34810,6 @@ ix86_autovectorize_vector_sizes (void)\n #define TARGET_STACK_PROTECT_FAIL ix86_stack_protect_fail\n #endif\n \n-#undef TARGET_SUPPORTS_SPLIT_STACK\n-#define TARGET_SUPPORTS_SPLIT_STACK ix86_supports_split_stack\n-\n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE ix86_function_value\n "}, {"sha": "d51006561ac38217dd037a1819d0b85e0fc60591", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -24,7 +24,7 @@ i386.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(GGC_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h $(CGRAPH_H) \\\n   $(TREE_GIMPLE_H) $(DWARF2_H) $(DF_H) tm-constrs.h $(PARAMS_H) \\\n   i386-builtin-types.inc debug.h dwarf2out.h sbitmap.h $(FIBHEAP_H) \\\n-  $(OPTS_H) $(DIAGNOSTIC_H)\n+  $(OPTS_H) $(DIAGNOSTIC_H) $(COMMON_TARGET_H)\n \n i386-c.o: $(srcdir)/config/i386/i386-c.c \\\n   $(srcdir)/config/i386/i386-protos.h $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "893ed8861033c02fb35ac2814e8fad0bc3c3e11c", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for IA-64.\n-   Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005, 2007, 2010\n+   Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005, 2007, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -18,6 +18,9 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* Shared between the driver and cc1.  */\n+extern enum unwind_info_type ia64_except_unwind_info (struct gcc_options *);\n+\n /* Functions defined in ia64.c */\n \n extern int bundling_p;"}, {"sha": "e930028961f68eb5982fac93528749c406c874ff", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -221,8 +221,6 @@ static int ia64_memory_move_cost (enum machine_mode mode, reg_class_t,\n static bool ia64_rtx_costs (rtx, int, int, int *, bool);\n static int ia64_unspec_may_trap_p (const_rtx, unsigned);\n static void fix_range (const char *);\n-static bool ia64_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t\tconst struct cl_decoded_option *, location_t);\n static struct machine_function * ia64_init_machine_status (void);\n static void emit_insn_group_barriers (FILE *);\n static void emit_all_insn_group_barriers (FILE *);\n@@ -253,7 +251,6 @@ static void ia64_asm_emit_except_personality (rtx);\n static void ia64_asm_init_sections (void);\n \n static enum unwind_info_type ia64_debug_unwind_info (void);\n-static enum unwind_info_type ia64_except_unwind_info (struct gcc_options *);\n \n static struct bundle_state *get_free_bundle_state (void);\n static void free_bundle_state (struct bundle_state *);\n@@ -348,16 +345,6 @@ static const struct attribute_spec ia64_attribute_table[] =\n   { NULL,\t       0, 0, false, false, false, NULL, false }\n };\n \n-/* Implement overriding of the optimization options.  */\n-static const struct default_options ia64_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-#ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n-    SUBTARGET_OPTIMIZATION_OPTIONS,\n-#endif\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE ia64_attribute_table\n@@ -390,8 +377,6 @@ static const struct default_options ia64_option_optimization_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE ia64_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE ia64_option_optimization_table\n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS ia64_option_default_params\n \n@@ -580,8 +565,6 @@ static const struct default_options ia64_option_optimization_table[] =\n \n #undef TARGET_DEBUG_UNWIND_INFO\n #define TARGET_DEBUG_UNWIND_INFO  ia64_debug_unwind_info\n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO  ia64_except_unwind_info\n \n #undef TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P ia64_scalar_mode_supported_p\n@@ -593,11 +576,6 @@ static const struct default_options ia64_option_optimization_table[] =\n #undef TARGET_RELAXED_ORDERING\n #define TARGET_RELAXED_ORDERING true\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | TARGET_CPU_DEFAULT)\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION ia64_handle_option\n-\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P ia64_legitimate_constant_p\n \n@@ -5641,30 +5619,6 @@ fix_range (const char *const_str)\n     }\n }\n \n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-ia64_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mtls_size_:\n-      if (value != 14 && value != 22 && value != 64)\n-\terror_at (loc, \"bad value %<%s%> for -mtls-size= switch\", arg);\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Implement TARGET_OPTION_OVERRIDE.  */\n \n static void\n@@ -10095,25 +10049,6 @@ ia64_debug_unwind_info (void)\n {\n   return UI_TARGET;\n }\n-\n-/* Implement TARGET_EXCEPT_UNWIND_INFO.  */\n-\n-static enum unwind_info_type\n-ia64_except_unwind_info (struct gcc_options *opts)\n-{\n-  /* Honor the --enable-sjlj-exceptions configure switch.  */\n-#ifdef CONFIG_UNWIND_EXCEPTIONS\n-  if (CONFIG_UNWIND_EXCEPTIONS)\n-    return UI_SJLJ;\n-#endif\n-\n-  /* For simplicity elsewhere in this file, indicate that all unwind\n-     info is disabled if we're not emitting unwind tables.  */\n-  if (!opts->x_flag_exceptions && !opts->x_flag_unwind_tables)\n-    return UI_NONE;\n-\n-  return UI_TARGET;\n-}\n \f\n enum ia64_builtins\n {"}, {"sha": "7512df8564e27275206aeeb315c51099be2d60bb", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -176,13 +176,6 @@ static void iq2000_print_operand      (FILE *, rtx, int);\n static void iq2000_print_operand_address (FILE *, rtx);\n static bool iq2000_print_operand_punct_valid_p (unsigned char code);\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options iq2000_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n #undef  TARGET_EXPAND_BUILTIN\n@@ -191,8 +184,6 @@ static const struct default_options iq2000_option_optimization_table[] =\n #define TARGET_ASM_SELECT_RTX_SECTION\tiq2000_select_rtx_section\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tiq2000_option_override\n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE iq2000_option_optimization_table\n #undef  TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS\t\tiq2000_rtx_costs\n #undef  TARGET_ADDRESS_COST"}, {"sha": "551c160d6054421191e9207532cbf45529368e9b", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,7 +1,7 @@\n /* Subroutines used for code generation on the Lattice Mico32 architecture.\n    Contributed by Jon Beniston <jon@beniston.com>\n \n-   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -83,17 +83,8 @@ static void lm32_function_arg_advance (CUMULATIVE_ARGS * cum,\n \t\t\t\t       const_tree type, bool named);\n static bool lm32_legitimate_constant_p (enum machine_mode, rtx);\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options lm32_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE lm32_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE lm32_option_optimization_table\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n #undef TARGET_RTX_COSTS\n@@ -118,8 +109,6 @@ static const struct default_options lm32_option_optimization_table[] =\n #define TARGET_CAN_ELIMINATE lm32_can_eliminate\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P lm32_legitimate_address_p\n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P lm32_legitimate_constant_p\n "}, {"sha": "4084b2ab20e899125d1b8d3aa43acff56e0759ee", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -2549,11 +2549,6 @@ m32c_address_cost (rtx addr, bool speed ATTRIBUTE_UNUSED)\n \n /* Defining the Output Assembler Language */\n \n-/* The Overall Framework of an Assembler File */\n-\n-#undef TARGET_HAVE_NAMED_SECTIONS\n-#define TARGET_HAVE_NAMED_SECTIONS true\n-\n /* Output of Data */\n \n /* We may have 24 bit sizes, which is the native address size."}, {"sha": "ba1a266a9b002bfdc3b35ac77c76cbc1d43785d6", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -56,8 +56,6 @@ static char m32r_punct_chars[256];\n #define LIT_NAME_P(NAME) ((NAME)[0] == '*' && (NAME)[1] == '.')\n \n /* Forward declaration.  */\n-static bool  m32r_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t\t const struct cl_decoded_option *, location_t);\n static void  m32r_option_override (void);\n static void  init_reg_tables (void);\n static void  block_move_call (rtx, rtx, rtx);\n@@ -112,13 +110,6 @@ static const struct attribute_spec m32r_attribute_table[] =\n     false },\n   { NULL,        0, 0, false, false, false, NULL, false }\n };\n-\n-static const struct default_options m32r_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS, OPT_fregmove, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ATTRIBUTE_TABLE\n@@ -156,14 +147,8 @@ static const struct default_options m32r_option_optimization_table[] =\n #undef  TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE m32r_issue_rate\n \n-#undef  TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS TARGET_CPU_DEFAULT\n-#undef  TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION m32r_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE m32r_option_override\n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE m32r_option_optimization_table\n \n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO m32r_encode_section_info\n@@ -215,40 +200,8 @@ static const struct default_options m32r_option_optimization_table[] =\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P m32r_legitimate_constant_p\n \n-#undef  TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO\t\tsjlj_except_unwind_info\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-m32r_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_m32r:\n-      opts->x_target_flags &= ~(MASK_M32R2 | MASK_M32RX);\n-      return true;\n-\n-    case OPT_mno_flush_func:\n-      opts->x_m32r_cache_flush_func = NULL;\n-      return true;\n-\n-    case OPT_mflush_trap_:\n-      return value <= 15;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Called by m32r_option_override to initialize various things.  */\n \n void\n@@ -1380,10 +1333,7 @@ m32r_issue_rate (void)\n }\n \f\n /* Cost functions.  */\n-\n-/* Implement TARGET_HANDLE_OPTION.\n-\n-   Memory is 3 times as expensive as registers.\n+/* Memory is 3 times as expensive as registers.\n    ??? Is that the right way to look at it?  */\n \n static int"}, {"sha": "bfaa14fbd689e604ce99cd41d7e8edbaaaa646b0", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -135,8 +135,6 @@ static int m68k_sched_first_cycle_multipass_dfa_lookahead (void);\n static bool m68k_can_eliminate (const int, const int);\n static void m68k_conditional_register_usage (void);\n static bool m68k_legitimate_address_p (enum machine_mode, rtx, bool);\n-static bool m68k_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t\tconst struct cl_decoded_option *, location_t);\n static void m68k_option_override (void);\n static rtx find_addr_reg (rtx);\n static const char *singlemove_string (rtx *);\n@@ -234,9 +232,6 @@ static bool m68k_cannot_force_const_mem (enum machine_mode mode, rtx x);\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\t\\\n   m68k_sched_first_cycle_multipass_dfa_lookahead\n \n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION m68k_handle_option\n-\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE m68k_option_override\n \n@@ -430,47 +425,6 @@ const char *m68k_symbolic_jump;\n enum M68K_SYMBOLIC_CALL m68k_symbolic_call_var;\n \n \f\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-m68k_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_m68020_40:\n-      opts->x_m68k_tune_option = u68020_40;\n-      opts->x_m68k_cpu_option = m68020;\n-      return true;\n-\n-    case OPT_m68020_60:\n-      opts->x_m68k_tune_option = u68020_60;\n-      opts->x_m68k_cpu_option = m68020;\n-      return true;\n-\n-    case OPT_mshared_library_id_:\n-      if (value > MAX_LIBRARY_ID)\n-\terror_at (loc, \"-mshared-library-id=%s is not between 0 and %d\",\n-\t\t  arg, MAX_LIBRARY_ID);\n-      else\n-        {\n-\t  char *tmp;\n-\t  asprintf (&tmp, \"%d\", (value * -4) - 4);\n-\t  opts->x_m68k_library_id_string = tmp;\n-\t}\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Implement TARGET_OPTION_OVERRIDE.  */\n \n static void"}, {"sha": "ff6e6804c6c1ea8a9043606be93785e2de94b20c", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for Motorola MCore processor\n    Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n-   2009, 2010 Free Software Foundation, Inc.\n+   2009, 2010, 2011 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -152,23 +152,6 @@ static const struct attribute_spec mcore_attribute_table[] =\n     false },\n   { NULL,        0, 0, false, false, false, NULL, false }\n };\n-\n-/* What options are we going to default to specific settings when\n-   -O* happens; the user can subsequently override these settings.\n-  \n-   Omitting the frame pointer is a very good idea on the MCore.\n-   Scheduling isn't worth anything on the current MCore implementation.  */\n-\n-static const struct default_options mcore_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_ffunction_cse, NULL, 0 },\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },\n-    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n-    { OPT_LEVELS_ALL, OPT_fschedule_insns2, NULL, 0 },\n-    { OPT_LEVELS_SIZE, OPT_mhardlit, NULL, 0 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_EXTERNAL_LIBCALL\n@@ -199,8 +182,6 @@ static const struct default_options mcore_option_optimization_table[] =\n #define TARGET_ASM_UNIQUE_SECTION \tmcore_unique_section\n #undef  TARGET_ASM_FUNCTION_RODATA_SECTION\n #define TARGET_ASM_FUNCTION_RODATA_SECTION default_no_function_rodata_section\n-#undef  TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO \tmcore_encode_section_info\n #undef  TARGET_STRIP_NAME_ENCODING\n@@ -242,11 +223,6 @@ static const struct default_options mcore_option_optimization_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mcore_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE mcore_option_optimization_table\n-\n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n \n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P mcore_legitimate_constant_p"}, {"sha": "81d902db2e99d0eb2a2f2cfdc4dc46433ad57013", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -222,8 +222,6 @@ static rtx mep_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n static void mep_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n static bool mep_vector_mode_supported_p (enum machine_mode);\n-static bool mep_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t       const struct cl_decoded_option *, location_t);\n static rtx  mep_allocate_initial_value (rtx);\n static void mep_asm_init_sections (void);\n static int mep_comp_type_attributes (const_tree, const_tree);\n@@ -296,21 +294,6 @@ mep_conditional_register_usage (void)\n     global_regs[i] = 1;\n }\n \n-\n-static const struct default_options mep_option_optimization_table[] =\n-  {\n-    /* The first scheduling pass often increases register pressure and\n-       tends to result in more spill code.  Only run it when\n-       specifically asked.  */\n-    { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },\n-\n-    /* Using $fp doesn't gain us much, even when debugging is\n-       important.  */\n-    { OPT_LEVELS_ALL, OPT_fomit_frame_pointer, NULL, 1 },\n-\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n static void\n mep_option_override (void)\n {\n@@ -7312,45 +7295,6 @@ mep_address_cost (rtx addr ATTRIBUTE_UNUSED, bool ATTRIBUTE_UNUSED speed_p)\n   return 1;\n }\n \n-static bool\n-mep_handle_option (struct gcc_options *opts,\n-\t\t   struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t   const struct cl_decoded_option *decoded,\n-\t\t   location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-\n-  switch (code)\n-    {\n-    case OPT_mall_opts:\n-      opts->x_target_flags |= MEP_ALL_OPTS;\n-      break;\n-\n-    case OPT_mno_opts:\n-      opts->x_target_flags &= ~ MEP_ALL_OPTS;\n-      break;\n-\n-    case OPT_mcop64:\n-      opts->x_target_flags |= MASK_COP;\n-      opts->x_target_flags |= MASK_64BIT_CR_REGS;\n-      break;\n-\n-    case OPT_mivc2:\n-      opts->x_target_flags |= MASK_COP;\n-      opts->x_target_flags |= MASK_64BIT_CR_REGS;\n-      opts->x_target_flags |= MASK_VLIW;\n-      opts->x_target_flags |= MASK_OPT_VL64;\n-      opts->x_target_flags |= MASK_IVC2;\n-\n-      /* Remaining handling of this option deferred.  */\n-      break;\n-\n-    default:\n-      break;\n-    }\n-  return TRUE;\n-}\n-\n static void\n mep_asm_init_sections (void)\n {\n@@ -7450,14 +7394,8 @@ mep_asm_init_sections (void)\n #define TARGET_FUNCTION_ARG_ADVANCE     mep_function_arg_advance\n #undef  TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P\tmep_vector_mode_supported_p\n-#undef  TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION            mep_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tmep_option_override\n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE\tmep_option_optimization_table\n-#undef  TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n #undef  TARGET_ALLOCATE_INITIAL_VALUE\n #define TARGET_ALLOCATE_INITIAL_VALUE   mep_allocate_initial_value\n #undef  TARGET_ASM_INIT_SECTIONS"}, {"sha": "223d5f634ef15d71b08a7aff31928c2eeaae5f6a", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1416,13 +1416,6 @@ microblaze_option_override (void)\n     }\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options microblaze_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Return true if FUNC is an interrupt function as specified\n    by the \"interrupt_handler\" attribute.  */\n \n@@ -2996,9 +2989,6 @@ microblaze_legitimate_constant_p (enum machine_mode mode, rtx x)\n #define TARGET_ASM_FUNCTION_END_PROLOGUE \\\n                                         microblaze_function_end_prologue\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n-\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES\tfunction_arg_partial_bytes\n \n@@ -3044,12 +3034,6 @@ microblaze_legitimate_constant_p (enum machine_mode mode, rtx x)\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tmicroblaze_option_override \n \n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE microblaze_option_optimization_table\n-\n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n-\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P microblaze_legitimate_constant_p\n "}, {"sha": "609d32068b427286bb8aa6be007c2dec7533c40b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -15302,27 +15302,6 @@ mips_set_tune (const struct mips_cpu_info *info)\n     }\n }\n \n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-mips_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-\n-  switch (code)\n-    {\n-    case OPT_mno_flush_func:\n-      opts->x_mips_cache_flush_func = NULL;\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Implement TARGET_OPTION_OVERRIDE.  */\n \n static void\n@@ -15697,13 +15676,6 @@ mips_option_override (void)\n   mips_set_mips16_mode (false);\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options mips_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Swap the register information for registers I and I + 1, which\n    currently have the wrong endianness.  Note that the registers'\n    fixedness and call-clobberedness might have been set on the\n@@ -16216,8 +16188,6 @@ mips_shift_truncation_mask (enum machine_mode mode)\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mips_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE mips_option_optimization_table\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS mips_legitimize_address\n@@ -16254,17 +16224,6 @@ mips_shift_truncation_mask (enum machine_mode mode)\n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P \\\n   mips_small_register_classes_for_mode_p\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n-  (TARGET_DEFAULT\t\t\t\t\\\n-   | TARGET_CPU_DEFAULT\t\t\t\t\\\n-   | TARGET_ENDIAN_DEFAULT\t\t\t\\\n-   | TARGET_FP_EXCEPTIONS_DEFAULT\t\t\\\n-   | MASK_CHECK_ZERO_DIV\t\t\t\\\n-   | MASK_FUSED_MADD)\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION mips_handle_option\n-\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL mips_function_ok_for_sibcall\n "}, {"sha": "53e9c91b155a180057f56232ec46985e1917e441", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -161,15 +161,6 @@ static void mmix_asm_trampoline_template (FILE *);\n static void mmix_trampoline_init (rtx, tree, rtx);\n static void mmix_conditional_register_usage (void);\n \n-/* TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options mmix_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fregmove, NULL, 1 },\n-    { OPT_LEVELS_2_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n    for a general description.  */\n \n@@ -248,8 +239,6 @@ static const struct default_options mmix_option_optimization_table[] =\n #define TARGET_PASS_BY_REFERENCE mmix_pass_by_reference\n #undef TARGET_CALLEE_COPIES\n #define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n \n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tmmix_legitimate_address_p\n@@ -266,8 +255,6 @@ static const struct default_options mmix_option_optimization_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mmix_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE mmix_option_optimization_table\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "1dba8ec88aad759ba12e2fe1f322c64359a07727", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -68,13 +68,6 @@ enum processor_type mn10300_tune_cpu = PROCESSOR_DEFAULT;\n \t\t\t\t|| df_regs_ever_live_p (16)\t\\\n \t\t\t\t|| df_regs_ever_live_p (17)))\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options mn10300_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #define CC_FLAG_Z\t1\n #define CC_FLAG_N\t2\n #define CC_FLAG_C\t4\n@@ -83,38 +76,6 @@ static const struct default_options mn10300_option_optimization_table[] =\n static int cc_flags_for_mode(enum machine_mode);\n static int cc_flags_for_code(enum rtx_code);\n \f\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-mn10300_handle_option (struct gcc_options *opts,\n-\t\t       struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t       const struct cl_decoded_option *decoded,\n-\t\t       location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mam33:\n-      opts->x_mn10300_processor = value ? PROCESSOR_AM33 : PROCESSOR_MN10300;\n-      return true;\n-\n-    case OPT_mam33_2:\n-      opts->x_mn10300_processor = (value\n-\t\t\t\t   ? PROCESSOR_AM33_2\n-\t\t\t\t   : MIN (PROCESSOR_AM33, PROCESSOR_DEFAULT));\n-      return true;\n-\n-    case OPT_mam34:\n-      opts->x_mn10300_processor = (value ? PROCESSOR_AM34 : PROCESSOR_DEFAULT);\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Implement TARGET_OPTION_OVERRIDE.  */\n \n static void\n@@ -3320,9 +3281,6 @@ mn10300_reorg (void)\n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG mn10300_reorg\n \n-#undef  TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n-\n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.hword\\t\"\n \n@@ -3346,14 +3304,8 @@ mn10300_reorg (void)\n #undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n #define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA mn10300_asm_output_addr_const_extra\n \n-#undef  TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS MASK_MULT_BUG | MASK_PTR_A0D0 | MASK_ALLOW_LIW | MASK_ALLOW_SETLB\n-#undef  TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION mn10300_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mn10300_option_override\n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE mn10300_option_optimization_table\n \n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO mn10300_encode_section_info"}, {"sha": "b358fc3ad5fa63193529c7f6f5b223603eecd6e9", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 7, "deletions": 57, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"predict.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n@@ -88,8 +89,6 @@ hppa_fpstore_bypass_p (rtx out_insn, rtx in_insn)\n static void pa_option_override (void);\n static void copy_reg_pointer (rtx, rtx);\n static void fix_range (const char *);\n-static bool pa_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t      const struct cl_decoded_option *, location_t);\n static int hppa_register_move_cost (enum machine_mode mode, reg_class_t,\n \t\t\t\t    reg_class_t);\n static int hppa_address_cost (rtx, bool);\n@@ -224,21 +223,11 @@ struct GTY(()) deferred_plabel\n static GTY((length (\"n_deferred_plabels\"))) struct deferred_plabel *\n   deferred_plabels;\n static size_t n_deferred_plabels = 0;\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options pa_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n \f\n /* Initialize the GCC target structure.  */\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE pa_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE pa_option_optimization_table\n \n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n@@ -310,11 +299,6 @@ static const struct default_options pa_option_optimization_table[] =\n #define TARGET_ASM_DESTRUCTOR pa_asm_out_destructor\n #endif\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | TARGET_CPU_DEFAULT)\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION pa_handle_option\n-\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS pa_init_builtins\n \n@@ -476,41 +460,6 @@ fix_range (const char *const_str)\n     target_flags |= MASK_DISABLE_FPREGS;\n }\n \n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-pa_handle_option (struct gcc_options *opts,\n-\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t  const struct cl_decoded_option *decoded,\n-\t\t  location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-\n-  switch (code)\n-    {\n-    case OPT_mnosnake:\n-    case OPT_mpa_risc_1_0:\n-    case OPT_march_1_0:\n-      opts->x_target_flags &= ~(MASK_PA_11 | MASK_PA_20);\n-      return true;\n-\n-    case OPT_msnake:\n-    case OPT_mpa_risc_1_1:\n-    case OPT_march_1_1:\n-      opts->x_target_flags &= ~MASK_PA_20;\n-      opts->x_target_flags |= MASK_PA_11;\n-      return true;\n-\n-    case OPT_mpa_risc_2_0:\n-    case OPT_march_2_0:\n-      opts->x_target_flags |= MASK_PA_11 | MASK_PA_20;\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Implement the TARGET_OPTION_OVERRIDE hook.  */\n \n static void\n@@ -538,7 +487,7 @@ pa_option_override (void)\n      call frame information.  There is no benefit in using this optimization\n      on PA8000 and later processors.  */\n   if (pa_cpu >= PROCESSOR_8000\n-      || (targetm.except_unwind_info (&global_options) == UI_DWARF2\n+      || (targetm_common.except_unwind_info (&global_options) == UI_DWARF2\n \t  && flag_exceptions)\n       || flag_unwind_tables)\n     target_flags &= ~MASK_JUMP_IN_DELAY;\n@@ -8205,7 +8154,7 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n        && !(flag_pic && TREE_PUBLIC (function))\n        && (TARGET_GAS || last_address < 262132))\n       || (!TARGET_LONG_CALLS && !TARGET_SOM && !TARGET_PORTABLE_RUNTIME\n-\t  && ((targetm.have_named_sections\n+\t  && ((targetm_common.have_named_sections\n \t       && DECL_SECTION_NAME (thunk_fndecl) != NULL\n \t       /* The GNU 64-bit linker has rather poor stub management.\n \t\t  So, we use a long branch from thunks that aren't in\n@@ -8216,11 +8165,12 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n \t\t   || ((DECL_SECTION_NAME (thunk_fndecl)\n \t\t\t== DECL_SECTION_NAME (function))\n \t\t       && last_address < 262132)))\n-\t      || (targetm.have_named_sections\n+\t      || (targetm_common.have_named_sections\n \t\t  && DECL_SECTION_NAME (thunk_fndecl) == NULL\n \t\t  && DECL_SECTION_NAME (function) == NULL\n \t\t  && last_address < 262132)\n-\t      || (!targetm.have_named_sections && last_address < 262132))))\n+\t      || (!targetm_common.have_named_sections\n+\t\t  && last_address < 262132))))\n     {\n       if (!val_14)\n \toutput_asm_insn (\"addil L'%2,%%r26\", xoperands);\n@@ -10264,7 +10214,7 @@ pa_function_section (tree decl, enum node_frequency freq,\n \t\t     bool startup, bool exit)\n {\n   /* Put functions in text section if target doesn't have named sections.  */\n-  if (!targetm.have_named_sections)\n+  if (!targetm_common.have_named_sections)\n     return text_section;\n \n   /* Force nested functions into the same section as the containing"}, {"sha": "a3a550b02d375d58c1fb97b3912d39b5b3c2f384", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -139,9 +139,6 @@ decode_pdp11_d (const struct real_format *fmt ATTRIBUTE_UNUSED,\n /* This is where the condition code register lives.  */\n /* rtx cc0_reg_rtx; - no longer needed? */\n \n-static bool pdp11_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t\t const struct cl_decoded_option *, location_t);\n-static void pdp11_option_init_struct (struct gcc_options *);\n static const char *singlemove_string (rtx *);\n static bool pdp11_assemble_integer (rtx, unsigned int, int);\n static void pdp11_output_function_prologue (FILE *, HOST_WIDE_INT);\n@@ -158,14 +155,6 @@ static void pdp11_function_arg_advance (CUMULATIVE_ARGS *,\n \t\t\t\t\tenum machine_mode, const_tree, bool);\n static void pdp11_conditional_register_usage (void);\n static bool pdp11_legitimate_constant_p (enum machine_mode, rtx);\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options pdp11_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_3_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -187,16 +176,6 @@ static const struct default_options pdp11_option_optimization_table[] =\n #undef TARGET_ASM_CLOSE_PAREN\n #define TARGET_ASM_CLOSE_PAREN \"]\"\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS \\\n-  (MASK_FPU | MASK_45 | TARGET_UNIX_ASM_DEFAULT)\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION pdp11_handle_option\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE pdp11_option_optimization_table\n-#undef TARGET_OPTION_INIT_STRUCT\n-#define TARGET_OPTION_INIT_STRUCT pdp11_option_init_struct\n-\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS pdp11_rtx_costs\n \n@@ -248,37 +227,6 @@ static const struct default_options pdp11_option_optimization_table[] =\n #undef  TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P pdp11_legitimate_constant_p\n \f\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-pdp11_handle_option (struct gcc_options *opts,\n-\t\t     struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t     const struct cl_decoded_option *decoded,\n-\t\t     location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-\n-  switch (code)\n-    {\n-    case OPT_m10:\n-      opts->x_target_flags &= ~(MASK_40 | MASK_45);\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n-/* Implement TARGET_OPTION_INIT_STRUCT.  */\n-\n-static void\n-pdp11_option_init_struct (struct gcc_options *opts)\n-{\n-  opts->x_flag_finite_math_only = 0;\n-  opts->x_flag_trapping_math = 0;\n-  opts->x_flag_signaling_nans = 0;\n-}\n-\n /*\n    stream is a stdio stream to output the code to.\n    size is an int: how many units of temporary storage to allocate."}, {"sha": "7c910fbaa279fa5de680efb63a11731fb9671c5f", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on picoChip processors.\n-   Copyright (C) 2001, 2008, 2009, 2010   Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2008, 2009, 2010, 2011   Free Software Foundation, Inc.\n    Contributed by Picochip Ltd. (http://www.picochip.com)\n    Maintained by Daniel Towner (daniel.towner@picochip.com) and\n    Hariharan Sandanagobalane (hariharan@picochip.com)\n@@ -192,13 +192,6 @@ static struct recog_data picochip_saved_recog_data;\n /* Determine which ALU to use for the instruction in\n    picochip_current_prescan_insn. */\n static char picochip_get_vliw_alu_id (void);\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options picochip_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -250,9 +243,6 @@ static const struct default_options picochip_option_optimization_table[] =\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION picochip_asm_named_section\n \n-#undef TARGET_HAVE_NAMED_SECTIONS\n-#define TARGET_HAVE_NAMED_SECTIONS 1\n-\n #undef TARGET_HAVE_SWITCHABLE_BSS_SECTIONS\n #define TARGET_HAVE_SWITCHABLE_BSS_SECTIONS 1\n \n@@ -330,12 +320,6 @@ static const struct default_options picochip_option_optimization_table[] =\n #undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n #define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE picochip_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE picochip_option_optimization_table\n-\n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n-\n /* The 2nd scheduling pass option is switched off, and a machine\n    dependent reorganisation ensures that it is run later on, after the\n    second jump optimisation.  */"}, {"sha": "a6c9f5e5bd10ef942f396651539c8af21578ff98", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 292, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -48,6 +48,7 @@\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"reload.h\"\n #include \"cfglayout.h\"\n@@ -1044,11 +1045,7 @@ static rtx altivec_expand_vec_set_builtin (tree);\n static rtx altivec_expand_vec_ext_builtin (tree, rtx);\n static int get_element_number (tree, tree);\n static void rs6000_option_override (void);\n-static void rs6000_option_init_struct (struct gcc_options *);\n static void rs6000_option_default_params (void);\n-static bool rs6000_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t\t  const struct cl_decoded_option *,\n-\t\t\t\t  location_t);\n static int rs6000_loop_align_max_skip (rtx);\n static int first_altivec_reg_to_save (void);\n static unsigned int compute_vrsave_mask (void);\n@@ -1290,13 +1287,6 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #endif\n   { NULL,        0, 0, false, false, false, NULL, false }\n };\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options rs6000_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n #ifndef MASK_STRICT_ALIGN\n #define MASK_STRICT_ALIGN 0\n@@ -1532,32 +1522,19 @@ static const struct default_options rs6000_option_optimization_table[] =\n #undef TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN\n #define TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN invalid_arg_for_unprototyped_fn\n \n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION rs6000_handle_option\n-\n #undef TARGET_ASM_LOOP_ALIGN_MAX_SKIP\n #define TARGET_ASM_LOOP_ALIGN_MAX_SKIP rs6000_loop_align_max_skip\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE rs6000_option_override\n \n-#undef TARGET_OPTION_INIT_STRUCT\n-#define TARGET_OPTION_INIT_STRUCT rs6000_option_init_struct\n-\n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n-\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n   rs6000_builtin_vectorized_function\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS \\\n-  (TARGET_DEFAULT)\n-\n #ifndef TARGET_MACHO\n #undef TARGET_STACK_PROTECT_FAIL\n #define TARGET_STACK_PROTECT_FAIL rs6000_stack_protect_fail\n@@ -3701,21 +3678,6 @@ rs6000_preferred_simd_mode (enum machine_mode mode)\n   return word_mode;\n }\n \n-/* Implement TARGET_OPTION_INIT_STRUCT.  */\n-\n-static void\n-rs6000_option_init_struct (struct gcc_options *opts)\n-{\n-  if (DEFAULT_ABI == ABI_DARWIN)\n-    /* The Darwin libraries never set errno, so we might as well\n-       avoid calling them when that's the only reason we would.  */\n-    opts->x_flag_errno_math = 0;\n-\n-  /* Enable section anchors by default.  */\n-  if (!TARGET_MACHO)\n-    opts->x_flag_section_anchors = 1;\n-}\n-\n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n \n static void\n@@ -4051,259 +4013,6 @@ rs6000_builtin_vectorized_function (tree fndecl, tree type_out,\n \n   return NULL_TREE;\n }\n-\n-\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t\t      const struct cl_decoded_option *decoded,\n-\t\t      location_t loc)\n-{\n-  enum fpu_type_t fpu_type = FPU_NONE;\n-  char *p, *q;\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mno_power:\n-      opts->x_target_flags &= ~(MASK_POWER | MASK_POWER2\n-\t\t\t\t| MASK_MULTIPLE | MASK_STRING);\n-      opts_set->x_target_flags |= (MASK_POWER | MASK_POWER2\n-\t\t\t\t   | MASK_MULTIPLE | MASK_STRING);\n-      break;\n-    case OPT_mno_powerpc:\n-      opts->x_target_flags &= ~(MASK_POWERPC | MASK_PPC_GPOPT\n-\t\t\t\t| MASK_PPC_GFXOPT | MASK_POWERPC64);\n-      opts_set->x_target_flags |= (MASK_POWERPC | MASK_PPC_GPOPT\n-\t\t\t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64);\n-      break;\n-    case OPT_mfull_toc:\n-      opts->x_target_flags &= ~MASK_MINIMAL_TOC;\n-      opts->x_TARGET_NO_FP_IN_TOC = 0;\n-      opts->x_TARGET_NO_SUM_IN_TOC = 0;\n-      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n-#ifdef TARGET_USES_SYSV4_OPT\n-      /* Note, V.4 no longer uses a normal TOC, so make -mfull-toc, be\n-\t just the same as -mminimal-toc.  */\n-      opts->x_target_flags |= MASK_MINIMAL_TOC;\n-      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n-#endif\n-      break;\n-\n-#ifdef TARGET_USES_SYSV4_OPT\n-    case OPT_mtoc:\n-      /* Make -mtoc behave like -mminimal-toc.  */\n-      opts->x_target_flags |= MASK_MINIMAL_TOC;\n-      opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n-      break;\n-#endif\n-\n-#ifdef TARGET_USES_AIX64_OPT\n-    case OPT_maix64:\n-#else\n-    case OPT_m64:\n-#endif\n-      opts->x_target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n-      opts->x_target_flags |= ~opts_set->x_target_flags & MASK_PPC_GFXOPT;\n-      opts_set->x_target_flags |= MASK_POWERPC64 | MASK_POWERPC;\n-      break;\n-\n-#ifdef TARGET_USES_AIX64_OPT\n-    case OPT_maix32:\n-#else\n-    case OPT_m32:\n-#endif\n-      opts->x_target_flags &= ~MASK_POWERPC64;\n-      opts_set->x_target_flags |= MASK_POWERPC64;\n-      break;\n-\n-    case OPT_mminimal_toc:\n-      if (value == 1)\n-\t{\n-\t  opts->x_TARGET_NO_FP_IN_TOC = 0;\n-\t  opts->x_TARGET_NO_SUM_IN_TOC = 0;\n-\t}\n-      break;\n-\n-    case OPT_mpower:\n-      if (value == 1)\n-\t{\n-\t  opts->x_target_flags |= (MASK_MULTIPLE | MASK_STRING);\n-\t  opts_set->x_target_flags |= (MASK_MULTIPLE | MASK_STRING);\n-\t}\n-      break;\n-\n-    case OPT_mpower2:\n-      if (value == 1)\n-\t{\n-\t  opts->x_target_flags |= (MASK_POWER | MASK_MULTIPLE | MASK_STRING);\n-\t  opts_set->x_target_flags |= (MASK_POWER\n-\t\t\t\t       | MASK_MULTIPLE\n-\t\t\t\t       | MASK_STRING);\n-\t}\n-      break;\n-\n-    case OPT_mpowerpc_gpopt:\n-    case OPT_mpowerpc_gfxopt:\n-      if (value == 1)\n-\t{\n-\t  opts->x_target_flags |= MASK_POWERPC;\n-\t  opts_set->x_target_flags |= MASK_POWERPC;\n-\t}\n-      break;\n-\n-    case OPT_mdebug_:\n-      p = ASTRDUP (arg);\n-      opts->x_rs6000_debug = 0;\n-\n-      while ((q = strtok (p, \",\")) != NULL)\n-\t{\n-\t  unsigned mask = 0;\n-\t  bool invert;\n-\n-\t  p = NULL;\n-\t  if (*q == '!')\n-\t    {\n-\t      invert = true;\n-\t      q++;\n-\t    }\n-\t  else\n-\t    invert = false;\n-\n-\t  if (! strcmp (q, \"all\"))\n-\t    mask = MASK_DEBUG_ALL;\n-\t  else if (! strcmp (q, \"stack\"))\n-\t    mask = MASK_DEBUG_STACK;\n-\t  else if (! strcmp (q, \"arg\"))\n-\t    mask = MASK_DEBUG_ARG;\n-\t  else if (! strcmp (q, \"reg\"))\n-\t    mask = MASK_DEBUG_REG;\n-\t  else if (! strcmp (q, \"addr\"))\n-\t    mask = MASK_DEBUG_ADDR;\n-\t  else if (! strcmp (q, \"cost\"))\n-\t    mask = MASK_DEBUG_COST;\n-\t  else if (! strcmp (q, \"target\"))\n-\t    mask = MASK_DEBUG_TARGET;\n-\t  else\n-\t    error_at (loc, \"unknown -mdebug-%s switch\", q);\n-\n-\t  if (invert)\n-\t    opts->x_rs6000_debug &= ~mask;\n-\t  else\t\n-\t    opts->x_rs6000_debug |= mask;\n-\t}\n-      break;\n-\n-#ifdef TARGET_USES_SYSV4_OPT\n-    case OPT_mrelocatable:\n-      if (value == 1)\n-\t{\n-\t  opts->x_target_flags |= MASK_MINIMAL_TOC;\n-\t  opts_set->x_target_flags |= MASK_MINIMAL_TOC;\n-\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n-\t}\n-      break;\n-\n-    case OPT_mrelocatable_lib:\n-      if (value == 1)\n-\t{\n-\t  opts->x_target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n-\t  opts_set->x_target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC;\n-\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n-\t}\n-      else\n-\t{\n-\t  opts->x_target_flags &= ~MASK_RELOCATABLE;\n-\t  opts_set->x_target_flags |= MASK_RELOCATABLE;\n-\t}\n-      break;\n-#endif\n-\n-    case OPT_mabi_altivec:\n-      /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n-      opts->x_rs6000_spe_abi = 0;\n-      break;\n-\n-    case OPT_mabi_spe:\n-      opts->x_rs6000_altivec_abi = 0;\n-      break;\n-\n-    case OPT_mlong_double_:\n-      if (value != 64 && value != 128)\n-\t{\n-\t  error_at (loc, \"unknown switch -mlong-double-%s\", arg);\n-\t  opts->x_rs6000_long_double_type_size\n-\t    = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n-\t  return false;\n-\t}\n-      break;\n-\n-    case OPT_msingle_float:\n-      if (!TARGET_SINGLE_FPU) \n-\twarning_at (loc, 0,\n-\t\t    \"-msingle-float option equivalent to -mhard-float\");\n-      /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n-      opts->x_rs6000_double_float = 0;\n-      opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n-      opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n-      break;\n-\n-    case OPT_mdouble_float:\n-      /* -mdouble-float implies -msingle-float and TARGET_HARD_FLOAT. */\n-      opts->x_rs6000_single_float = 1;\n-      opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n-      opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n-      break;\n-\n-    case OPT_msimple_fpu:\n-      if (!TARGET_SINGLE_FPU) \n-\twarning_at (loc, 0, \"-msimple-fpu option ignored\");\n-      break;\n-\n-    case OPT_mhard_float:\n-      /* -mhard_float implies -msingle-float and -mdouble-float. */\n-      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n-      break;\n-\n-    case OPT_msoft_float:\n-      /* -msoft_float implies -mnosingle-float and -mnodouble-float. */\n-      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n-      break;\n-\n-    case OPT_mfpu_:\n-      fpu_type = (enum fpu_type_t) value;\n-      if (fpu_type != FPU_NONE)\n-\t{\n-\t  /* If -mfpu is not none, then turn off SOFT_FLOAT, turn on\n-\t     HARD_FLOAT. */\n-\t  opts->x_target_flags &= ~MASK_SOFT_FLOAT;\n-\t  opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n-\t  opts->x_rs6000_xilinx_fpu = 1;\n-\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_SF_FULL) \n-\t    opts->x_rs6000_single_float = 1;\n-\t  if (fpu_type == FPU_DF_LITE || fpu_type == FPU_DF_FULL) \n-\t    opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n-\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_DF_LITE) \n-\t    opts->x_rs6000_simple_fpu = 1;\n-\t}\n-      else\n-\t{\n-\t  /* -mfpu=none is equivalent to -msoft-float.  */\n-\t  opts->x_target_flags |= MASK_SOFT_FLOAT;\n-\t  opts_set->x_target_flags |= MASK_SOFT_FLOAT;\n-\t  opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n-\t}\n-      break;\n-\n-    case OPT_mrecip:\n-      opts->x_rs6000_recip_name = (value) ? \"default\" : \"none\";\n-      break;\n-    }\n-  return true;\n-}\n \f\n /* Default CPU string for rs6000*_file_start functions.  */\n static const char *rs6000_default_cpu;"}, {"sha": "5204f589d5d621b1b89a9160768237d7e01f26d8", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -27,7 +27,7 @@ rs6000.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(OBSTACK_H) $(TREE_H) $(EXPR_H) $(OPTABS_H) except.h function.h \\\n   output.h $(BASIC_BLOCK_H) $(INTEGRATE_H) toplev.h $(GGC_H) $(HASHTAB_H) \\\n   $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h gt-rs6000.h \\\n-  cfglayout.h cfgloop.h $(OPTS_H)\n+  cfglayout.h cfgloop.h $(OPTS_H) $(COMMON_TARGET_H)\n \n rs6000-c.o: $(srcdir)/config/rs6000/rs6000-c.c \\\n     $(srcdir)/config/rs6000/rs6000-protos.h \\"}, {"sha": "296b092d0400954fccf6473879d42d89e9034f2e", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -2283,46 +2283,6 @@ const struct attribute_spec rx_attribute_table[] =\n   { NULL,             0, 0, false, false, false, NULL, false }\n };\n \n-/* Extra processing for target specific command line options.  */\n-\n-static bool\n-rx_handle_option (struct gcc_options *opts,\n-\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t  const struct cl_decoded_option *decoded,\n-\t\t  location_t loc)\n-{\n-  size_t code = decoded->opt_index;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mint_register_:\n-      /* Make sure that the -mint-register option is in range.  Other\n-\t handling in rx_option_override.  */\n-      return value >= 0 && value <= 4;\n-      break;\n-\n-    case OPT_mmax_constant_size_:\n-      /* Make sure that the -mmax-constant_size option is in range.  */\n-      return value >= 0 && value <= 4;\n-\n-    case OPT_mcpu_:\n-      if ((enum rx_cpu_types) value == RX200)\n-\topts->x_target_flags |= MASK_NO_USE_FPU;\n-      break;\n-      \n-    case OPT_fpu:\n-      if (opts->x_rx_cpu_type == RX200)\n-\terror_at (loc, \"the RX200 cpu does not have FPU hardware\");\n-      break;\n-\n-    default:\n-      break;\n-    }\n-\n-  return true;\n-}\n-\n /* Implement TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE.  */\n \n static void\n@@ -2405,13 +2365,6 @@ rx_option_override (void)\n     align_labels = 3;\n }\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options rx_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n \f\n static bool\n rx_allocate_stack_slots_for_args (void)\n@@ -3027,9 +2980,6 @@ rx_adjust_insn_length (rtx insn, int current_length)\n #undef  TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION\t\trx_set_current_function\n \n-#undef  TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION\t\t\trx_handle_option\n-\n #undef  TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER\t\t\trx_assemble_integer\n \n@@ -3069,18 +3019,12 @@ rx_adjust_insn_length (rtx insn, int current_length)\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\t\trx_option_override\n \n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE\trx_option_optimization_table\n-\n #undef  TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE\t\trx_promote_function_mode\n \n #undef  TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n #define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\trx_override_options_after_change\n \n-#undef  TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO\t\tsjlj_except_unwind_info\n-\n #undef  TARGET_FLAGS_REGNUM\n #define TARGET_FLAGS_REGNUM\t\t\tCC_REG\n "}, {"sha": "51f10ab3d8a5ab8ddb5df4b0ddf4bf66aded823a", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -55,22 +55,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"opts.h\"\n \n-static const int processor_flags_table[] =\n-  {\n-    /* g5 */     PF_IEEE_FLOAT,\n-    /* g6 */     PF_IEEE_FLOAT,\n-    /* z900 */   PF_IEEE_FLOAT | PF_ZARCH,\n-    /* z990 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT,\n-    /* z9-109 */ PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n-                 | PF_EXTIMM,\n-    /* z9-ec */  PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n-                 | PF_EXTIMM | PF_DFP,\n-    /* z10 */    PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n-                 | PF_EXTIMM | PF_DFP | PF_Z10,\n-    /* z196 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n-                 | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196\n-  };\n-\n /* Define the specific costs for a given cpu.  */\n \n struct processor_costs\n@@ -1519,74 +1503,6 @@ s390_init_machine_status (void)\n   return ggc_alloc_cleared_machine_function ();\n }\n \n-/* Change optimizations to be performed, depending on the\n-   optimization level.  */\n-\n-static const struct default_options s390_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-\n-    /* ??? There are apparently still problems with -fcaller-saves.  */\n-    { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },\n-\n-    /* Use MVCLE instructions to decrease code size if requested.  */\n-    { OPT_LEVELS_SIZE, OPT_mmvcle, NULL, 1 },\n-\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n-/* Implement TARGET_OPTION_INIT_STRUCT.  */\n-\n-static void\n-s390_option_init_struct (struct gcc_options *opts)\n-{\n-  /* By default, always emit DWARF-2 unwind info.  This allows debugging\n-     without maintaining a stack frame back-chain.  */\n-  opts->x_flag_asynchronous_unwind_tables = 1;\n-}\n-\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-s390_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-  \t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_march_:\n-      opts->x_s390_arch_flags = processor_flags_table[value];\n-      opts->x_s390_arch_string = arg;\n-      return true;\n-\n-    case OPT_mstack_guard_:\n-      if (exact_log2 (value) == -1)\n-\terror_at (loc, \"stack guard value must be an exact power of 2\");\n-      return true;\n-\n-    case OPT_mstack_size_:\n-      if (exact_log2 (value) == -1)\n-\terror_at (loc, \"stack size must be an exact power of 2\");\n-      return true;\n-\n-    case OPT_mtune_:\n-      opts->x_s390_tune_flags = processor_flags_table[value];\n-      return true;\n-\n-    case OPT_mwarn_framesize_:\n-      return sscanf (arg, HOST_WIDE_INT_PRINT_DEC,\n-\t\t     &opts->x_s390_warn_framesize) == 1;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n static void\n s390_option_override (void)\n {\n@@ -10688,21 +10604,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef  TARGET_ASM_CLOSE_PAREN\n #define TARGET_ASM_CLOSE_PAREN \"\"\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT)\n-\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION s390_handle_option\n-\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE s390_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE s390_option_optimization_table\n-\n-#undef TARGET_OPTION_INIT_STRUCT\n-#define TARGET_OPTION_INIT_STRUCT s390_option_init_struct\n-\n #undef\tTARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n "}, {"sha": "afd22ad883b30efe1261b175ff0f063f9002f6ba", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -904,4 +904,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Reads can reuse write prefetches, used by tree-ssa-prefetch-loops.c.  */\n #define READ_CAN_USE_WRITE_PREFETCH 1\n+\n+extern const int processor_flags_table[];\n #endif"}, {"sha": "c256df295dc3a3ef72d58572b77793913c398a4e", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -53,13 +53,6 @@\n \n static void score_option_override (void);\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options score_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #undef  TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START           score_asm_file_start\n \n@@ -72,18 +65,9 @@ static const struct default_options score_option_optimization_table[] =\n #undef  TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE    score_function_epilogue\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS     TARGET_DEFAULT\n-\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION            score_handle_option\n-\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE          score_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE score_option_optimization_table\n-\n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS\tscore_legitimize_address\n \n@@ -279,35 +263,6 @@ score_asm_file_end (void)\n     gcc_unreachable ();\n }\n \n-#define MASK_ALL_CPU_BITS\t(MASK_SCORE7 | MASK_SCORE7D)\n-\n-/* Implement TARGET_HANDLE_OPTION.  */\n-static bool\n-score_handle_option (struct gcc_options *opts,\n-\t\t     struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t     const struct cl_decoded_option *decoded,\n-\t\t     location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mscore7d:\n-      opts->x_target_flags &= ~(MASK_ALL_CPU_BITS);\n-      opts->x_target_flags |= MASK_SCORE7 | MASK_SCORE7D;\n-      return true;\n-\n-    case OPT_march_:\n-      opts->x_target_flags &= ~(MASK_ALL_CPU_BITS);\n-      opts->x_target_flags |= value;\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Implement TARGET_OPTION_OVERRIDE hook.  */\n static void\n score_option_override (void)"}, {"sha": "c677a630db4317c8cac23d1f9e095464b0e45149", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 0, "deletions": 179, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -168,8 +168,6 @@ int assembler_dialect;\n \n static bool shmedia_space_reserved_for_target_registers;\n \n-static bool sh_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t      const struct cl_decoded_option *, location_t);\n static void split_branches (rtx);\n static int branch_dest (rtx);\n static void force_into (rtx, rtx);\n@@ -184,7 +182,6 @@ static int noncall_uses_reg (rtx, rtx, rtx *);\n static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n static void sh_option_override (void);\n-static void sh_option_init_struct (struct gcc_options *);\n static void sh_option_default_params (void);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n static rtx frame_insn (rtx);\n@@ -329,23 +326,6 @@ static const struct attribute_spec sh_attribute_table[] =\n     sh2a_handle_function_vector_handler_attribute, false },\n   { NULL,                0, 0, false, false, false, NULL, false }\n };\n-\n-/* Set default optimization options.  */\n-static const struct default_options sh_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS_SPEED_ONLY, OPT_mdiv_, \"inv:minlat\", 1 },\n-    { OPT_LEVELS_SIZE, OPT_mdiv_, SH_DIV_STR_FOR_SIZE, 1 },\n-    { OPT_LEVELS_0_ONLY, OPT_mdiv_, \"\", 1 },\n-    { OPT_LEVELS_SIZE, OPT_mcbranchdi, NULL, 0 },\n-    /* We can't meaningfully test TARGET_SHMEDIA here, because -m\n-       options haven't been parsed yet, hence we'd read only the\n-       default.  sh_target_reg_class will return NO_REGS if this is\n-       not SHMEDIA, so it's OK to always set\n-       flag_branch_target_load_optimize.  */\n-    { OPT_LEVELS_2_PLUS, OPT_fbranch_target_load_optimize, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -365,10 +345,6 @@ static const struct default_options sh_option_optimization_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE sh_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE sh_option_optimization_table\n-#undef TARGET_OPTION_INIT_STRUCT\n-#define TARGET_OPTION_INIT_STRUCT sh_option_init_struct\n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS sh_option_default_params\n \n@@ -395,11 +371,6 @@ static const struct default_options sh_option_optimization_table[] =\n #undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION sh_handle_option\n-\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST sh_register_move_cost\n \n@@ -607,157 +578,7 @@ static const struct default_options sh_option_optimization_table[] =\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-sh_handle_option (struct gcc_options *opts,\n-\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t  const struct cl_decoded_option *decoded,\n-\t\t  location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-\n-  switch (code)\n-    {\n-    case OPT_m1:\n-      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH1;\n-      return true;\n-\n-    case OPT_m2:\n-      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2;\n-      return true;\n-\n-    case OPT_m2a:\n-      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A;\n-      return true;\n-\n-    case OPT_m2a_nofpu:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_NOFPU;\n-      return true;\n-\n-    case OPT_m2a_single:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_SINGLE;\n-      return true;\n-\n-    case OPT_m2a_single_only:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_SINGLE_ONLY;\n-      return true;\n-\n-    case OPT_m2e:\n-      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2E;\n-      return true;\n-\n-    case OPT_m3:\n-      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH3;\n-      return true;\n-\n-    case OPT_m3e:\n-      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH3E;\n-      return true;\n-\n-    case OPT_m4:\n-    case OPT_m4_100:\n-    case OPT_m4_200:\n-    case OPT_m4_300:\n-      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4;\n-      return true;\n-\n-    case OPT_m4_nofpu:\n-    case OPT_m4_100_nofpu:\n-    case OPT_m4_200_nofpu:\n-    case OPT_m4_300_nofpu:\n-    case OPT_m4_340:\n-    case OPT_m4_400:\n-    case OPT_m4_500:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_NOFPU;\n-      return true;\n-\n-    case OPT_m4_single:\n-    case OPT_m4_100_single:\n-    case OPT_m4_200_single:\n-    case OPT_m4_300_single:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE;\n-      return true;\n-\n-    case OPT_m4_single_only:\n-    case OPT_m4_100_single_only:\n-    case OPT_m4_200_single_only:\n-    case OPT_m4_300_single_only:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE_ONLY;\n-      return true;\n-\n-    case OPT_m4a:\n-      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A;\n-      return true;\n-\n-    case OPT_m4a_nofpu:\n-    case OPT_m4al:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_NOFPU;\n-      return true;\n-\n-    case OPT_m4a_single:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_SINGLE;\n-      return true;\n-\n-    case OPT_m4a_single_only:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_SINGLE_ONLY;\n-      return true;\n-\n-    case OPT_m5_32media:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_32MEDIA;\n-      return true;\n-\n-    case OPT_m5_32media_nofpu:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_32MEDIA_NOFPU;\n-      return true;\n-\n-    case OPT_m5_64media:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_64MEDIA;\n-      return true;\n-\n-    case OPT_m5_64media_nofpu:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_64MEDIA_NOFPU;\n-      return true;\n-\n-    case OPT_m5_compact:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_COMPACT;\n-      return true;\n-\n-    case OPT_m5_compact_nofpu:\n-      opts->x_target_flags\n-\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_COMPACT_NOFPU;\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n \f\n-/* Implement TARGET_OPTION_INIT_STRUCT.  */\n-static void\n-sh_option_init_struct (struct gcc_options *opts)\n-{\n-  /* We can't meaningfully test TARGET_SH2E / TARGET_IEEE\n-     here, so leave it to TARGET_OPTION_OVERRIDE to set\n-     flag_finite_math_only.  We set it to 2 here so we know if the user\n-     explicitly requested this to be on or off.  */\n-  opts->x_flag_finite_math_only = 2;\n-}\n-\n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n static void\n sh_option_default_params (void)"}, {"sha": "0bad6fe79785c40d5d9bb9d837f7ae2b85c1a654", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"common/common-target.h\"\n #include \"cfglayout.h\"\n #include \"gimple.h\"\n #include \"langhooks.h\"\n@@ -494,13 +495,6 @@ enum cmodel sparc_cmodel;\n \n char sparc_hard_reg_printed[8];\n \n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options sparc_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Initialize the GCC target structure.  */\n \n /* The default is to use .half rather than .short for aligned HI objects.  */\n@@ -633,12 +627,8 @@ static const struct default_options sparc_option_optimization_table[] =\n #undef TARGET_RELAXED_ORDERING\n #define TARGET_RELAXED_ORDERING SPARC_RELAXED_ORDERING\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE sparc_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE sparc_option_optimization_table\n \n #if TARGET_GNU_TLS && defined(HAVE_AS_SPARC_UA_PCREL)\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL"}, {"sha": "38db96934f317a11f8bece1b4b8b4360c4adaebd", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -149,7 +149,6 @@ char regs_ever_allocated[FIRST_PSEUDO_REGISTER];\n \n /*  Prototypes and external defs.  */\n static void spu_option_override (void);\n-static void spu_option_init_struct (struct gcc_options *opts);\n static void spu_option_default_params (void);\n static void spu_init_builtins (void);\n static tree spu_builtin_decl (unsigned, bool);\n@@ -422,9 +421,6 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR spu_gimplify_va_arg_expr\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT)\n-\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS spu_init_libfuncs\n \n@@ -485,15 +481,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE spu_option_override\n \n-#undef TARGET_OPTION_INIT_STRUCT\n-#define TARGET_OPTION_INIT_STRUCT spu_option_init_struct\n-\n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS spu_option_default_params\n \n-#undef TARGET_EXCEPT_UNWIND_INFO\n-#define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n-\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE spu_conditional_register_usage\n \n@@ -512,13 +502,6 @@ static const struct attribute_spec spu_attribute_table[] =\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n-static void\n-spu_option_init_struct (struct gcc_options *opts)\n-{\n-  /* With so many registers this is better on by default. */\n-  opts->x_flag_rename_registers = 1;\n-}\n-\n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n static void\n spu_option_default_params (void)"}, {"sha": "b0e33c3e3883ab9ffd2eed01081d8039274a567a", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -2602,13 +2602,6 @@ xstormy16_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n   return (size == -1 || size > UNITS_PER_WORD * NUM_ARGUMENT_REGISTERS);\n }\n \f\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-static const struct default_options xstorym16_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\f\n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.hword\\t\"\n #undef  TARGET_ASM_ALIGNED_SI_OP\n@@ -2682,9 +2675,6 @@ static const struct default_options xstorym16_option_optimization_table[] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT xstormy16_trampoline_init\n \n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE xstorym16_option_optimization_table\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-stormy16.h\""}, {"sha": "92812ceade3a184ea1b5f591509996124cef3180", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -50,14 +50,6 @@\n \n static void v850_print_operand_address (FILE *, rtx);\n \n-/* Information about the various small memory areas.  */\n-static const int small_memory_physical_max[(int) SMALL_MEMORY_max] =\n-{\n-  256,\n-  65536,\n-  32768,\n-};\n-\n /* Names of the various data areas used on the v850.  */\n tree GHS_default_section_names [(int) COUNT_OF_GHS_SECTION_KINDS];\n tree GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_KINDS];\n@@ -81,93 +73,6 @@ static GTY(()) section * tdata_section;\n static GTY(()) section * zdata_section;\n static GTY(()) section * zbss_section;\n \f\n-/* Set the maximum size of small memory area TYPE to the value given\n-   by SIZE in structure OPTS (option text OPT passed at location LOC).  */\n-\n-static void\n-v850_handle_memory_option (enum small_memory_type type,\n-\t\t\t   struct gcc_options *opts, const char *opt,\n-\t\t\t   int size, location_t loc)\n-{\n-  if (size > small_memory_physical_max[type])\n-    error_at (loc, \"value passed in %qs is too large\", opt);\n-  else\n-    opts->x_small_memory_max[type] = size;\n-}\n-\n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-v850_handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc)\n-{\n-  size_t code = decoded->opt_index;\n-  int value = decoded->value;\n-\n-  switch (code)\n-    {\n-    case OPT_mspace:\n-      opts->x_target_flags |= MASK_EP | MASK_PROLOG_FUNCTION;\n-      return true;\n-\n-    case OPT_mv850:\n-      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850);\n-      return true;\n-\n-    case OPT_mv850e:\n-    case OPT_mv850e1:\n-    case OPT_mv850es:\n-      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850E);\n-      return true;\n-\n-    case OPT_mv850e2:\n-      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850E2);\n-      return true;\n-\n-    case OPT_mv850e2v3:\n-      opts->x_target_flags &= ~(MASK_CPU ^ MASK_V850E2V3);\n-      return true;\n-\n-    case OPT_mtda_:\n-      v850_handle_memory_option (SMALL_MEMORY_TDA, opts,\n-\t\t\t\t decoded->orig_option_with_args_text,\n-\t\t\t\t value, loc);\n-      return true;\n-\n-    case OPT_msda_:\n-      v850_handle_memory_option (SMALL_MEMORY_SDA, opts,\n-\t\t\t\t decoded->orig_option_with_args_text,\n-\t\t\t\t value, loc);\n-      return true;\n-\n-    case OPT_mzda_:\n-      v850_handle_memory_option (SMALL_MEMORY_ZDA, opts,\n-\t\t\t\t decoded->orig_option_with_args_text,\n-\t\t\t\t value, loc);\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options v850_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    /* Note - we no longer enable MASK_EP when optimizing.  This is\n-       because of a hardware bug which stops the SLD and SST instructions\n-       from correctly detecting some hazards.  If the user is sure that\n-       their hardware is fixed or that their program will not encounter\n-       the conditions that trigger the bug then they can enable -mep by\n-       hand.  */\n-    { OPT_LEVELS_1_PLUS, OPT_mprolog_function, NULL, 1 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n /* Handle the TARGET_PASS_BY_REFERENCE target hook.\n    Specify whether to pass the argument by reference.  */\n \n@@ -3216,11 +3121,6 @@ static const struct attribute_spec v850_attribute_table[] =\n #undef  TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n-#undef  TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (MASK_DEFAULT | MASK_APP_REGS)\n-#undef  TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION v850_handle_option\n-\n #undef  TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS v850_rtx_costs\n \n@@ -3276,9 +3176,6 @@ static const struct attribute_spec v850_attribute_table[] =\n #undef  TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING v850_strict_argument_naming\n \n-#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE v850_option_optimization_table\n-\n #undef  TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P v850_legitimate_constant_p\n "}, {"sha": "b80e9f63619b95dea366aeaeb09b6f5a1255b1b4", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for VAX.\n    Copyright (C) 1987, 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -86,9 +86,6 @@ static int vax_return_pops_args (tree, tree, int);\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n-\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS vax_rtx_costs\n #undef TARGET_ADDRESS_COST"}, {"sha": "d2cadd2b1c3c4ab4625985f1912754bd47fbabf6", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -177,20 +177,6 @@ static bool xtensa_legitimate_constant_p (enum machine_mode, rtx);\n \n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n   REG_ALLOC_ORDER;\n-\n-/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n-\n-static const struct default_options xtensa_option_optimization_table[] =\n-  {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    /* Reordering blocks for Xtensa is not a good idea unless the\n-       compiler understands the range of conditional branches.\n-       Currently all branch relaxation for Xtensa is handled in the\n-       assembler, so GCC cannot do a good job of reordering blocks.\n-       Do not enable reordering unless it is explicitly requested.  */\n-    { OPT_LEVELS_ALL, OPT_freorder_blocks, NULL, 0 },\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n \f\n \n /* This macro generates the assembly code for function exit,\n@@ -210,9 +196,6 @@ static const struct default_options xtensa_option_optimization_table[] =\n #undef TARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION  xtensa_select_rtx_section\n \n-#undef TARGET_DEFAULT_TARGET_FLAGS\n-#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT)\n-\n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS xtensa_legitimize_address\n #undef TARGET_MODE_DEPENDENT_ADDRESS_P\n@@ -304,8 +287,6 @@ static const struct default_options xtensa_option_optimization_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE xtensa_option_override\n-#undef TARGET_OPTION_OPTIMIZATION_TABLE\n-#define TARGET_OPTION_OPTIMIZATION_TABLE xtensa_option_optimization_table\n \n #undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n #define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA xtensa_output_addr_const_extra"}, {"sha": "55a2d5d49285c6f4996604fe67df299c0fc1b334", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,3 +1,9 @@\n+2011-06-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (cp/method.o): Update dependencies.\n+\t* method.c: Include common/common-target.h.\n+\t(use_thunk): Use targetm_common.have_named_sections.\n+\n 2011-06-14  Steve Ellcey  <sje@cup.hp.com>\n \n \t* decl.c (cxx_init_decl_processing): Use ptr_mode instead of Pmode."}, {"sha": "c47132280bf420989bfc6a90fefcb81b780b1369", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -292,7 +292,8 @@ cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H)\n cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n   $(EXCEPT_H) $(TARGET_H)\n cp/method.o: cp/method.c $(CXX_TREE_H) $(TM_H) toplev.h \\\n-  $(TM_P_H) $(TARGET_H) $(DIAGNOSTIC_H) gt-cp-method.h $(GIMPLE_H)\n+  $(TM_P_H) $(TARGET_H) $(DIAGNOSTIC_H) gt-cp-method.h $(GIMPLE_H) \\\n+  $(COMMON_TARGET_H)\n cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h $(FLAGS_H) \\\n   convert.h $(TARGET_H) intl.h\n cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h \\"}, {"sha": "06e20e271752973a119299201ab23126d7b017d4", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"tree-pass.h\"\n #include \"diagnostic.h\"\n #include \"cgraph.h\"\n@@ -353,7 +354,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   push_to_top_level ();\n \n   if (TARGET_USE_LOCAL_THUNK_ALIAS_P (function)\n-      && targetm.have_named_sections)\n+      && targetm_common.have_named_sections)\n     {\n       resolve_unique_section (function, 0, flag_function_sections);\n "}, {"sha": "8c59b4594383bdf0751ac843128d936d40261864", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -88,6 +88,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"function.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"obstack.h\"\n #include \"expr.h\"\n@@ -951,7 +952,7 @@ dbxout_function_end (tree decl ATTRIBUTE_UNUSED)\n      named sections.  */\n   if (!use_gnu_debug_info_extensions\n       || NO_DBX_FUNCTION_END\n-      || !targetm.have_named_sections)\n+      || !targetm_common.have_named_sections)\n     return;\n \n   /* By convention, GCC will mark the end of a function with an N_FUN"}, {"sha": "5e84cb8cd78fd02649ae7155ef1d2533835b0e84", "filename": "gcc/defaults.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of various defaults for tm.h macros.\n    Copyright (C) 1992, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2007, 2008, 2009, 2010\n+   2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com)\n \n@@ -1288,19 +1288,19 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifdef STACK_CHECK_PROTECT\n #define STACK_OLD_CHECK_PROTECT STACK_CHECK_PROTECT\n #else\n-#define STACK_OLD_CHECK_PROTECT\t\t\t\t\t\\\n- (targetm.except_unwind_info (&global_options) == UI_SJLJ\t\\\n-  ? 75 * UNITS_PER_WORD\t\t\t\t\t\t\\\n+#define STACK_OLD_CHECK_PROTECT\t\t\t\t\t\t\\\n+ (targetm_common.except_unwind_info (&global_options) == UI_SJLJ\t\\\n+  ? 75 * UNITS_PER_WORD\t\t\t\t\t\t\t\\\n   : 8 * 1024)\n #endif\n \n /* Minimum amount of stack required to recover from an anticipated stack\n    overflow detection.  The default value conveys an estimate of the amount\n    of stack required to propagate an exception.  */\n #ifndef STACK_CHECK_PROTECT\n-#define STACK_CHECK_PROTECT\t\t\t\t\t\\\n- (targetm.except_unwind_info (&global_options) == UI_SJLJ\t\\\n-  ? 75 * UNITS_PER_WORD\t\t\t\t\t\t\\\n+#define STACK_CHECK_PROTECT\t\t\t\t\t\t\\\n+ (targetm_common.except_unwind_info (&global_options) == UI_SJLJ\t\\\n+  ? 75 * UNITS_PER_WORD\t\t\t\t\t\t\t\\\n   : 12 * 1024)\n #endif\n "}, {"sha": "d1752fd83f4bf8fc1cc61a21097dfb076e6973c5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -678,15 +678,15 @@ This variable is declared in @file{options.h}, which is included before\n any target-specific headers.\n @end deftypevar\n \n-@deftypevr {Target Hook} int TARGET_DEFAULT_TARGET_FLAGS\n+@deftypevr {Common Target Hook} int TARGET_DEFAULT_TARGET_FLAGS\n This variable specifies the initial value of @code{target_flags}.\n Its default setting is 0.\n @end deftypevr\n \n @cindex optional hardware or system features\n @cindex features, optional, in system conventions\n \n-@deftypefn {Target Hook} bool TARGET_HANDLE_OPTION (struct gcc_options *@var{opts}, struct gcc_options *@var{opts_set}, const struct cl_decoded_option *@var{decoded}, unsigned int @var{loc})\n+@deftypefn {Common Target Hook} bool TARGET_HANDLE_OPTION (struct gcc_options *@var{opts}, struct gcc_options *@var{opts_set}, const struct cl_decoded_option *@var{decoded}, location_t @var{loc})\n This hook is called whenever the user specifies one of the\n target-specific options described by the @file{.opt} definition files\n (@pxref{Options}).  It has the opportunity to do some option-specific\n@@ -744,7 +744,7 @@ used to alter option flag variables which only exist in those\n frontends.\n @end defmac\n \n-@deftypevr {Target Hook} {const struct default_options *} TARGET_OPTION_OPTIMIZATION_TABLE\n+@deftypevr {Common Target Hook} {const struct default_options *} TARGET_OPTION_OPTIMIZATION_TABLE\n Some machines may desire to change what optimizations are performed for\n various optimization levels.   This variable, if defined, describes\n options to enable at particular sets of optimization levels.  These\n@@ -758,7 +758,7 @@ options are changed via @code{#pragma GCC optimize} or by using the\n @code{optimize} attribute.\n @end deftypevr\n \n-@deftypefn {Target Hook} void TARGET_OPTION_INIT_STRUCT (struct gcc_options *@var{opts})\n+@deftypefn {Common Target Hook} void TARGET_OPTION_INIT_STRUCT (struct gcc_options *@var{opts})\n Set target-dependent initial values of fields in @var{opts}.\n @end deftypefn\n \n@@ -4965,7 +4965,7 @@ The default version of this hook invokes a function called\n normally defined in @file{libgcc2.c}.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_SUPPORTS_SPLIT_STACK (bool @var{report}, struct gcc_options *@var{opts})\n+@deftypefn {Common Target Hook} bool TARGET_SUPPORTS_SPLIT_STACK (bool @var{report}, struct gcc_options *@var{opts})\n Whether this target supports splitting the stack when the options described in @var{opts} have been passed.  This is called after options have been parsed, so the target may reject splitting the stack in some configurations.  The default version of this hook returns false.  If @var{report} is true, this function may issue a warning or error; if @var{report} is false, it must simply return a value\n @end deftypefn\n \n@@ -7355,7 +7355,7 @@ Return NULL if function should go to default text section.\n Used by the target to emit any assembler directives or additional  labels needed when a function is partitioned between different  sections.  Output should be written to @var{file}.  The function  decl is available as @var{decl} and the new section is `cold' if  @var{new_is_cold} is @code{true}.\n @end deftypefn\n \n-@deftypevr {Target Hook} bool TARGET_HAVE_NAMED_SECTIONS\n+@deftypevr {Common Target Hook} bool TARGET_HAVE_NAMED_SECTIONS\n This flag is true if the target supports @code{TARGET_ASM_NAMED_SECTION}.\n It must not be modified by command-line option processing.\n @end deftypevr\n@@ -8870,7 +8870,7 @@ Otherwise, if your target supports this information (if it defines\n or @code{OBJECT_FORMAT_ELF}), GCC will provide a default definition of 1.\n @end defmac\n \n-@deftypefn {Target Hook} {enum unwind_info_type} TARGET_EXCEPT_UNWIND_INFO (struct gcc_options *@var{opts})\n+@deftypefn {Common Target Hook} {enum unwind_info_type} TARGET_EXCEPT_UNWIND_INFO (struct gcc_options *@var{opts})\n This hook defines the mechanism that will be used for exception handling\n by the target.  If the target has ABI specified unwind tables, the hook\n should return @code{UI_TARGET}.  If the target is to use the\n@@ -8896,7 +8896,7 @@ The default implementation of the hook first honors the\n must define this hook so that @var{opts} is used correctly.\n @end deftypefn\n \n-@deftypevr {Target Hook} bool TARGET_UNWIND_TABLES_DEFAULT\n+@deftypevr {Common Target Hook} bool TARGET_UNWIND_TABLES_DEFAULT\n This variable should be set to @code{true} if the target ABI requires unwinding\n tables even when exceptions are not used.  It must not be modified by\n command-line option processing."}, {"sha": "9ea8a299b1b3ee3744a01c83eb7e43c22d99d8d2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -85,6 +85,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"debug.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"hashtab.h\"\n #include \"cgraph.h\"\n@@ -154,7 +155,7 @@ dwarf2out_do_frame (void)\n     return true;\n \n   if ((flag_unwind_tables || flag_exceptions)\n-      && targetm.except_unwind_info (&global_options) == UI_DWARF2)\n+      && targetm_common.except_unwind_info (&global_options) == UI_DWARF2)\n     return true;\n \n   return false;\n@@ -190,7 +191,7 @@ dwarf2out_do_cfi_asm (void)\n      dwarf2 unwind info for exceptions, then emit .debug_frame by hand.  */\n   if (!HAVE_GAS_CFI_SECTIONS_DIRECTIVE\n       && !flag_unwind_tables && !flag_exceptions\n-      && targetm.except_unwind_info (&global_options) != UI_DWARF2)\n+      && targetm_common.except_unwind_info (&global_options) != UI_DWARF2)\n     return false;\n \n   saved_do_cfi_asm = true;\n@@ -4081,7 +4082,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n      call-site information.  We must emit this label if it might be used.  */\n   if (!do_frame\n       && (!flag_exceptions\n-\t  || targetm.except_unwind_info (&global_options) != UI_TARGET))\n+\t  || targetm_common.except_unwind_info (&global_options) != UI_TARGET))\n     return;\n \n   fnsec = function_section (current_function_decl);\n@@ -4244,7 +4245,7 @@ dwarf2out_frame_init (void)\n   dwarf2out_def_cfa (NULL, STACK_POINTER_REGNUM, INCOMING_FRAME_SP_OFFSET);\n \n   if (targetm.debug_unwind_info () == UI_DWARF2\n-      || targetm.except_unwind_info (&global_options) == UI_DWARF2)\n+      || targetm_common.except_unwind_info (&global_options) == UI_DWARF2)\n     initial_return_save (INCOMING_RETURN_ADDR_RTX);\n }\n \n@@ -4257,7 +4258,7 @@ dwarf2out_frame_finish (void)\n \n   /* Output another copy for the unwinder.  */\n   if ((flag_unwind_tables || flag_exceptions)\n-      && targetm.except_unwind_info (&global_options) == UI_DWARF2)\n+      && targetm_common.except_unwind_info (&global_options) == UI_DWARF2)\n     output_call_frame_info (1);\n }\n \n@@ -23538,7 +23539,7 @@ dwarf2out_assembly_start (void)\n   if (HAVE_GAS_CFI_SECTIONS_DIRECTIVE\n       && dwarf2out_do_cfi_asm ()\n       && (!(flag_unwind_tables || flag_exceptions)\n-\t  || targetm.except_unwind_info (&global_options) != UI_DWARF2))\n+\t  || targetm_common.except_unwind_info (&global_options) != UI_DWARF2))\n     fprintf (asm_out_file, \"\\t.cfi_sections\\t.debug_frame\\n\");\n }\n "}, {"sha": "bb16036d3618de4b07f6a8142f898ac189a9366a", "filename": "gcc/except.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,6 +1,6 @@\n /* Implements exception handling.\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Mike Stump <mrs@cygnus.com>.\n \n@@ -136,6 +136,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"cgraph.h\"\n #include \"diagnostic.h\"\n@@ -209,7 +210,7 @@ init_eh (void)\n \n   /* Create the SjLj_Function_Context structure.  This should match\n      the definition in unwind-sjlj.c.  */\n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n     {\n       tree f_jbuf, f_per, f_lsda, f_prev, f_cs, f_data, tmp;\n \n@@ -1395,13 +1396,13 @@ finish_eh_generation (void)\n   basic_block bb;\n \n   /* Construct the landing pads.  */\n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n     sjlj_build_landing_pads ();\n   else\n     dw2_build_landing_pads ();\n   break_superblocks ();\n \n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ\n       /* Kludge for Alpha/Tru64 (see alpha_gp_save_rtx).  */\n       || single_succ_edge (ENTRY_BLOCK_PTR)->insns.r)\n     commit_edge_insertions ();\n@@ -2645,7 +2646,7 @@ gate_convert_to_eh_region_ranges (void)\n   /* Nothing to do for SJLJ exceptions or if no regions created.  */\n   if (cfun->eh->region_tree == NULL)\n     return false;\n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n     return false;\n   return true;\n }\n@@ -2834,7 +2835,7 @@ switch_to_exception_section (const char * ARG_UNUSED (fnname))\n     {\n       /* Compute the section and cache it into exception_section,\n \t unless it depends on the function name.  */\n-      if (targetm.have_named_sections)\n+      if (targetm_common.have_named_sections)\n \t{\n \t  int flags;\n \n@@ -2984,7 +2985,7 @@ output_one_function_exception_table (int section)\n \t\t       eh_data_format_name (tt_format));\n \n #ifndef HAVE_AS_LEB128\n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n     call_site_len = sjlj_size_of_call_site_table ();\n   else\n     call_site_len = dw2_size_of_call_site_table (section);\n@@ -3051,14 +3052,14 @@ output_one_function_exception_table (int section)\n   dw2_asm_output_delta_uleb128 (cs_end_label, cs_after_size_label,\n \t\t\t\t\"Call-site table length\");\n   ASM_OUTPUT_LABEL (asm_out_file, cs_after_size_label);\n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n     sjlj_output_call_site_table ();\n   else\n     dw2_output_call_site_table (cs_format, section);\n   ASM_OUTPUT_LABEL (asm_out_file, cs_end_label);\n #else\n   dw2_asm_output_data_uleb128 (call_site_len, \"Call-site table length\");\n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n     sjlj_output_call_site_table ();\n   else\n     dw2_output_call_site_table (cs_format, section);"}, {"sha": "c7d818380332beceb8c3afb03e496f3327d9098b", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"langhooks.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"output.h\"\n \n static rtx break_out_memory_refs (rtx);"}, {"sha": "c4bba281cd8c6cbd88f9314f32f06492382339a9", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"tree-flow.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"timevar.h\"\n #include \"df.h\"\n #include \"diagnostic.h\"\n@@ -10298,7 +10299,7 @@ build_personality_function (const char *lang)\n   tree decl, type;\n   char *name;\n \n-  switch (targetm.except_unwind_info (&global_options))\n+  switch (targetm_common.except_unwind_info (&global_options))\n     {\n     case UI_NONE:\n       return NULL;"}, {"sha": "81c4d39de470cb7e89ef78b01853a414ad14e1f2", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"integrate.h\"\n #include \"langhooks.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"cfglayout.h\"\n #include \"gimple.h\"\n #include \"tree-pass.h\"\n@@ -4968,7 +4969,7 @@ expand_function_end (void)\n   /* Output the label for the actual return from the function.  */\n   emit_label (return_label);\n \n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n     {\n       /* Let except.c know where it should emit the call to unregister\n \t the function context for sjlj exceptions.  */\n@@ -5127,7 +5128,7 @@ expand_function_end (void)\n      may trap are not moved into the epilogue by scheduling, because\n      we don't always emit unwind information for the epilogue.  */\n   if (cfun->can_throw_non_call_exceptions\n-      && targetm.except_unwind_info (&global_options) != UI_SJLJ)\n+      && targetm_common.except_unwind_info (&global_options) != UI_SJLJ)\n     emit_insn (gen_blockage ());\n \n   /* If stack protection is enabled for this function, check the guard.  */"}, {"sha": "20385d1ea8ecc5c984e0cf46b67c05ff0e97fc6b", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,3 +1,13 @@\n+2011-06-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (go/go-lang.o, go/go-backend.o): Update\n+\tdependencies.\n+\t* go-backend.c: Include common/common-target.h.\n+\t(go_write_export_data): Use targetm_common.have_named_sections.\n+\t* go-lang.c: Include common/common-target.h.\n+\t(go_langhook_init_options_struct): Use\n+\ttargetm_common.supports_split_stack.\n+\n 2011-06-13  Ian Lance Taylor  <iant@google.com>\n \n \t* Make-lang.in (go/expressions.o): Depend on $(GO_RUNTIME_H)."}, {"sha": "26c16194d7f9708d2eb79ecbd56c1d1f943be5f9", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -224,13 +224,14 @@ GO_IMPORT_H = go/gofrontend/import.h go/gofrontend/export.h\n GO_RUNTIME_H = go/gofrontend/runtime.h go/gofrontend/runtime.def\n \n go/go-backend.o: go/go-backend.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-\t$(TM_H) $(RTL_H) $(TREE_H) $(TM_P_H) output.h $(TARGET_H)\n+\t$(TM_H) $(RTL_H) $(TREE_H) $(TM_P_H) output.h $(TARGET_H) \\\n+\t$(COMMON_TARGET_H)\n \n go/go-lang.o: go/go-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n \t\t$(TREE_H) $(GIMPLE_H) $(GGC_H) $(TOPLEV_H) debug.h options.h \\\n \t\t$(FLAGS_H) convert.h $(DIAGNOSTIC_H) langhooks.h \\\n \t\t$(LANGHOOKS_DEF_H) $(EXCEPT_H) $(TARGET_H) $(GO_C_H) \\\n-\t\tgt-go-go-lang.h gtype-go.h\n+\t\tgt-go-go-lang.h gtype-go.h $(COMMON_TARGET_H)\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t  -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n \t  -DDEFAULT_TARGET_MACHINE=\\\"$(target_noncanonical)\\\" \\"}, {"sha": "62102a2e08bca62fc0d92b8c6ba7b44a7c4b8d9a", "filename": "gcc/go/go-backend.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fgo%2Fgo-backend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fgo%2Fgo-backend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-backend.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"output.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n \n #include \"go-c.h\"\n \n@@ -103,7 +104,7 @@ go_write_export_data (const char *bytes, unsigned int size)\n \n   if (sec == NULL)\n     {\n-      gcc_assert (targetm.have_named_sections);\n+      gcc_assert (targetm_common.have_named_sections);\n       sec = get_section (\".go_export\", SECTION_DEBUG, NULL);\n     }\n "}, {"sha": "576e35f75510545d9f9d2ee8e13a4aad9d7f5c9f", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks-def.h\"\n #include \"except.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n \n #include <mpfr.h>\n \n@@ -143,7 +144,7 @@ go_langhook_init_options_struct (struct gcc_options *opts)\n   opts->frontend_set_flag_errno_math = true;\n \n   /* We turn on stack splitting if we can.  */\n-  if (targetm.supports_split_stack (false, opts))\n+  if (targetm_common.supports_split_stack (false, opts))\n     opts->x_flag_split_stack = 1;\n \n   /* Exceptions are used to handle recovering from panics.  */"}, {"sha": "407b626d60d234ed91eb63414cb80f4a0d916aa6", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -141,6 +141,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"sched-int.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"output.h\"\n #include \"params.h\"\n #include \"vecprim.h\"\n@@ -4503,7 +4504,7 @@ sched_create_recovery_edges (basic_block first_bb, basic_block rec,\n     {\n       /* Rewritten from cfgrtl.c.  */\n       if (flag_reorder_blocks_and_partition\n-\t  && targetm.have_named_sections)\n+\t  && targetm_common.have_named_sections)\n \t{\n \t  /* We don't need the same note for the check because\n \t     any_condjump_p (check) == true.  */"}, {"sha": "296739ed73839a77eb4959ceaed56591f9ef0a27", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"opts.h\"\n #include \"options.h\"\n-#include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"diagnostic.h\"\n #include \"lto-streamer.h\"\n \n@@ -405,8 +405,8 @@ lto_reissue_options (void)\n \t{\n \t  struct cl_decoded_option decoded;\n \t  generate_option (o->code, o->arg, o->value, CL_TARGET, &decoded);\n-\t  targetm.handle_option (&global_options, &global_options_set,\n-\t\t\t\t &decoded, UNKNOWN_LOCATION);\n+\t  targetm_common.handle_option (&global_options, &global_options_set,\n+\t\t\t\t\t&decoded, UNKNOWN_LOCATION);\n \t}\n       else if (o->type == CL_COMMON)\n \tgcc_assert (flag_var);"}, {"sha": "e9b433454c7dd9466f6719a581417f5095e39bf3", "filename": "gcc/opts.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts-diagnostic.h\"\n #include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING and DELAY_SLOTS.  */\n #include \"target.h\"\n+#include \"common/common-target.h\"\n \n /* Parse the -femit-struct-debug-detailed option value\n    and set the flag variables. */\n@@ -231,7 +232,7 @@ target_handle_option (struct gcc_options *opts,\n {\n   gcc_assert (dc == global_dc);\n   gcc_assert (kind == DK_UNSPECIFIED);\n-  return targetm.handle_option (opts, opts_set, decoded, loc);\n+  return targetm_common.handle_option (opts, opts_set, decoded, loc);\n }\n \n /* Add comma-separated strings to a char_p vector.  */\n@@ -295,15 +296,15 @@ init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n      is set after target options have been processed.  */\n   opts->x_flag_short_enums = 2;\n \n-  /* Initialize target_flags before targetm.target_option.optimization\n+  /* Initialize target_flags before default_options_optimization\n      so the latter can modify it.  */\n-  opts->x_target_flags = targetm.default_target_flags;\n+  opts->x_target_flags = targetm_common.default_target_flags;\n \n   /* Some targets have ABI-specified unwind tables.  */\n-  opts->x_flag_unwind_tables = targetm.unwind_tables_default;\n+  opts->x_flag_unwind_tables = targetm_common.unwind_tables_default;\n \n   /* Some targets have other target-specific initialization.  */\n-  targetm.target_option.init_struct (opts);\n+  targetm_common.option_init_struct (opts);\n }\n \n /* If indicated by the optimization level LEVEL (-Os if SIZE is set,\n@@ -596,7 +597,7 @@ default_options_optimization (struct gcc_options *opts,\n \n   /* Allow default optimizations to be specified on a per-machine basis.  */\n   maybe_default_options (opts, opts_set,\n-\t\t\t targetm.target_option.optimization_table,\n+\t\t\t targetm_common.option_optimization_table,\n \t\t\t opts->x_optimize, opts->x_optimize_size,\n \t\t\t opts->x_optimize_fast, lang_mask, handlers, loc, dc);\n }\n@@ -700,7 +701,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n      generating unwind info.  If opts->x_flag_exceptions is turned on\n      we need to turn off the partitioning optimization.  */\n \n-  ui_except = targetm.except_unwind_info (opts);\n+  ui_except = targetm_common.except_unwind_info (opts);\n \n   if (opts->x_flag_exceptions\n       && opts->x_flag_reorder_blocks_and_partition\n@@ -717,7 +718,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n      optimization.  */\n \n   if (opts->x_flag_unwind_tables\n-      && !targetm.unwind_tables_default\n+      && !targetm_common.unwind_tables_default\n       && opts->x_flag_reorder_blocks_and_partition\n       && (ui_except == UI_SJLJ || ui_except == UI_TARGET))\n     {\n@@ -733,9 +734,9 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n      support named sections.  */\n \n   if (opts->x_flag_reorder_blocks_and_partition\n-      && (!targetm.have_named_sections\n+      && (!targetm_common.have_named_sections\n \t  || (opts->x_flag_unwind_tables\n-\t      && targetm.unwind_tables_default\n+\t      && targetm_common.unwind_tables_default\n \t      && (ui_except == UI_SJLJ || ui_except == UI_TARGET))))\n     {\n       inform (loc,\n@@ -795,7 +796,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n     opts->x_flag_split_stack = 0;\n   else if (opts->x_flag_split_stack)\n     {\n-      if (!targetm.supports_split_stack (true, opts))\n+      if (!targetm_common.supports_split_stack (true, opts))\n \t{\n \t  error_at (loc, \"%<-fsplit-stack%> is not supported by \"\n \t\t    \"this compiler configuration\");"}, {"sha": "53ca29ca46d745080378ef2358aed836ae85b6e1", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,3 +1,7 @@\n+2011-06-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* exgettext: Handle common/ directory and subdirectories.\n+\n 2011-05-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* EXCLUDES: Remove gthr-gnat.c, gthr-gnat.h."}, {"sha": "a7bbf185a04f126b62e4a5037353ea75f57ea745", "filename": "gcc/po/exgettext", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fpo%2Fexgettext", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fpo%2Fexgettext", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fexgettext?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -72,6 +72,9 @@ pottmp=$pwd/$T/tmp.pot\n # Locate files to scan.  We scan the following directories:\n #  $srcdir\n #  $srcdir/c-family\n+#  $srcdir/common\n+#  $srcdir/common/config\n+#  $srcdir/common/config/*\n #  $srcdir/config\n #  $srcdir/config/*\n #  all subdirectories of $srcdir containing a config-lang.in file, and\n@@ -91,7 +94,8 @@ echo \"scanning for keywords, %e and %n strings...\" >&2\n \n ( cd $srcdir\n   lang_subdirs=`echo */config-lang.in */*/config-lang.in | sed -e 's|/config-lang\\.in||g'`\n-  { for dir in \"\" c-family/ config/ config/*/ \\\n+  { for dir in \"\" c-family/ common/ common/config/ common/config/*/ \\\n+      config/ config/*/ \\\n       `find $lang_subdirs -type d -print | fgrep -v .svn | sort | sed -e 's|$|/|'`\n     do  for glob in '*.c' '*.cc' '*.h' '*.def'\n         do  eval echo $dir$glob"}, {"sha": "8609512220887e8fc37b37f049f7479e75595e00", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,6 +1,6 @@\n /* Default initializers for a generic GCC target.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by the\n@@ -78,10 +78,6 @@\n # endif\n #endif\n \n-#ifdef TARGET_ASM_NAMED_SECTION\n-#define TARGET_HAVE_NAMED_SECTIONS true\n-#endif\n-\n #ifndef TARGET_TERMINATE_DW2_EH_FRAME_INFO\n #ifdef EH_FRAME_SECTION_NAME\n #define TARGET_TERMINATE_DW2_EH_FRAME_INFO false"}, {"sha": "1ea59078b08a3f29300b7ece86c337b29e1ecf8f", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1012,12 +1012,6 @@ HOOK_VECTOR_END (vectorize)\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\"\n \n-/* The initial value of target_flags.  */\n-DEFHOOKPOD\n-(default_target_flags,\n- \"\",\n- int, 0)\n-\n /* Allow target specific overriding of option settings after options have\n   been changed by an attribute or pragma or when it is reset at the\n   end of the code affected by an attribute or pragma.  */\n@@ -1027,16 +1021,6 @@ DEFHOOK\n  void, (void),\n  hook_void_void)\n \n-/* Handle target switch DECODED for options structures OPTS and\n-   OPTS_SET, at location LOC.  Return true if the switch was valid.  */\n-DEFHOOK\n-(handle_option,\n- \"\",\n- bool, (struct gcc_options *opts, struct gcc_options *opts_set,\n-\tconst struct cl_decoded_option *decoded,\n-\tunsigned int /*location_t*/ loc),\n- default_target_handle_option)\n-\n /* Display extra, target specific information in response to a\n    --target-help switch.  */\n DEFHOOK\n@@ -1876,17 +1860,6 @@ DEFHOOK\n  tree, (void),\n  default_external_stack_protect_fail)\n \n-DEFHOOK\n-(supports_split_stack,\n- \"Whether this target supports splitting the stack when the options\\\n- described in @var{opts} have been passed.  This is called\\\n- after options have been parsed, so the target may reject splitting\\\n- the stack in some configurations.  The default version of this hook\\\n- returns false.  If @var{report} is true, this function may issue a warning\\\n- or error; if @var{report} is false, it must simply return a value\",\n- bool, (bool report, struct gcc_options *opts),\n- hook_bool_bool_gcc_optionsp_false)\n-\n /* Returns NULL if target supports the insn within a doloop block,\n    otherwise it returns an error message.  */\n DEFHOOK\n@@ -2579,25 +2552,13 @@ DEFHOOK\n  void, (void),\n  hook_void_void)\n \n-/* Set default optimizations for the target.  */\n-DEFHOOKPOD\n-(optimization_table,\n- \"\",\n- const struct default_options *, empty_optimization_table)\n-\n DEFHOOK\n (default_params,\n \"Set target-dependent default values for @option{--param} settings, using\\\n  calls to @code{set_default_param_value}.\",\n  void, (void),\n  hook_void_void)\n \n-DEFHOOK\n-(init_struct,\n-\"Set target-dependent initial values of fields in @var{opts}.\",\n- void, (struct gcc_options *opts),\n- hook_void_gcc_optionsp)\n-\n /* Function to determine if one function can inline another function.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\"\n@@ -2625,27 +2586,8 @@ DEFHOOK\n  enum unwind_info_type, (void),\n  default_debug_unwind_info)\n \n-/* Determine the type of unwind info to emit for exceptions.  */\n-DEFHOOK\n-(except_unwind_info,\n- \"\",\n- enum unwind_info_type, (struct gcc_options *opts),\n- default_except_unwind_info)\n-\n /* Leave the boolean fields at the end.  */\n \n-/* True if unwinding tables should be generated by default.  */\n-DEFHOOKPOD\n-(unwind_tables_default,\n- \"\",\n- bool, false)\n-\n-/* True if arbitrary sections are supported.  */\n-DEFHOOKPOD\n-(have_named_sections,\n- \"\",\n- bool, false)\n-\n /* True if we can create zeroed data by switching to a BSS section\n    and then using ASM_OUTPUT_SKIP to allocate the space.  */\n DEFHOOKPOD"}, {"sha": "707fbef6ad6fcbca6435e5ea91faa719c471dfcd", "filename": "gcc/target.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -131,41 +131,6 @@ enum vect_cost_for_stmt\n   vec_perm\n };\n \n-/* Sets of optimization levels at which an option may be enabled by\n-   default_options_optimization.  */\n-enum opt_levels\n-{\n-  OPT_LEVELS_NONE, /* No levels (mark end of array).  */\n-  OPT_LEVELS_ALL, /* All levels (used by targets to disable options\n-\t\t     enabled in target-independent code).  */\n-  OPT_LEVELS_0_ONLY, /* -O0 only.  */\n-  OPT_LEVELS_1_PLUS, /* -O1 and above, including -Os.  */\n-  OPT_LEVELS_1_PLUS_SPEED_ONLY, /* -O1 and above, but not -Os.  */\n-  OPT_LEVELS_2_PLUS, /* -O2 and above, including -Os.  */\n-  OPT_LEVELS_2_PLUS_SPEED_ONLY, /* -O2 and above, but not -Os.  */\n-  OPT_LEVELS_3_PLUS, /* -O3 and above.  */\n-  OPT_LEVELS_3_PLUS_AND_SIZE, /* -O3 and above and -Os.  */\n-  OPT_LEVELS_SIZE, /* -Os only.  */\n-  OPT_LEVELS_FAST /* -Ofast only.  */\n-};\n-\n-/* Description of options to enable by default at given levels.  */\n-struct default_options\n-{\n-  /* The levels at which to enable the option.  */\n-  enum opt_levels levels;\n-\n-  /* The option index and argument or enabled/disabled sense of the\n-     option, as passed to handle_generated_option.  If ARG is NULL and\n-     the option allows a negative form, the option is considered to be\n-     passed in negative form when the optimization level is not one of\n-     those in LEVELS (in order to handle changes to the optimization\n-     level with the \"optimize\" attribute).  */\n-  size_t opt_index;\n-  const char *arg;\n-  int value;\n-};\n-\n /* The target structure.  This holds all the backend hooks.  */\n #define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n #define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME) PARAMS;"}, {"sha": "6ecb3898baf6f53790b5e9a8c132ea7a9aa7e2b8", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1323,48 +1323,6 @@ default_debug_unwind_info (void)\n   return UI_NONE;\n }\n \n-/* Determine the exception handling mechanism for the target.  */\n-\n-enum unwind_info_type\n-default_except_unwind_info (struct gcc_options *opts ATTRIBUTE_UNUSED)\n-{\n-  /* Obey the configure switch to turn on sjlj exceptions.  */\n-#ifdef CONFIG_SJLJ_EXCEPTIONS\n-  if (CONFIG_SJLJ_EXCEPTIONS)\n-    return UI_SJLJ;\n-#endif\n-\n-  /* ??? Change all users to the hook, then poison this.  */\n-#ifdef DWARF2_UNWIND_INFO\n-  if (DWARF2_UNWIND_INFO)\n-    return UI_DWARF2;\n-#endif\n-\n-  return UI_SJLJ;\n-}\n-\n-/* To be used by targets that force dwarf2 unwind enabled.  */\n-\n-enum unwind_info_type\n-dwarf2_except_unwind_info (struct gcc_options *opts ATTRIBUTE_UNUSED)\n-{\n-  /* Obey the configure switch to turn on sjlj exceptions.  */\n-#ifdef CONFIG_SJLJ_EXCEPTIONS\n-  if (CONFIG_SJLJ_EXCEPTIONS)\n-    return UI_SJLJ;\n-#endif\n-\n-  return UI_DWARF2;\n-}\n-\n-/* To be used by targets that force sjlj unwind enabled.  */\n-\n-enum unwind_info_type\n-sjlj_except_unwind_info (struct gcc_options *opts ATTRIBUTE_UNUSED)\n-{\n-  return UI_SJLJ;\n-}\n-\n /* To be used by targets where reg_raw_mode doesn't return the right\n    mode for registers used in apply_builtin_return and apply_builtin_arg.  */\n \n@@ -1483,20 +1441,4 @@ default_pch_valid_p (const void *data_p, size_t len)\n   return NULL;\n }\n \n-/* Default version of TARGET_HANDLE_OPTION.  */\n-\n-bool\n-default_target_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n-\t\t\t      struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t\t      const struct cl_decoded_option *decoded ATTRIBUTE_UNUSED,\n-\t\t\t      location_t loc ATTRIBUTE_UNUSED)\n-{\n-  return true;\n-}\n-\n-const struct default_options empty_optimization_table[] =\n-  {\n-    { OPT_LEVELS_NONE, 0, NULL, 0 }\n-  };\n-\n #include \"gt-targhooks.h\""}, {"sha": "a1cc3281ac70e5ac34b60f75d55d35e0a30ca586", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -163,9 +163,6 @@ extern reg_class_t default_preferred_rename_class (reg_class_t rclass);\n extern bool default_class_likely_spilled_p (reg_class_t);\n \n extern enum unwind_info_type default_debug_unwind_info (void);\n-extern enum unwind_info_type default_except_unwind_info (struct gcc_options *);\n-extern enum unwind_info_type dwarf2_except_unwind_info (struct gcc_options *);\n-extern enum unwind_info_type sjlj_except_unwind_info (struct gcc_options *);\n \n extern int default_label_align_after_barrier_max_skip (rtx);\n extern int default_loop_align_max_skip (rtx);\n@@ -175,12 +172,5 @@ extern section * default_function_section(tree decl, enum node_frequency freq,\n \t\t\t\t\t  bool startup, bool exit);\n extern enum machine_mode default_get_reg_raw_mode(int);\n \n-extern const struct default_options empty_optimization_table[];\n-\n-extern bool default_target_handle_option (struct gcc_options *,\n-\t\t\t\t\t  struct gcc_options *,\n-\t\t\t\t\t  const struct cl_decoded_option *,\n-\t\t\t\t\t  location_t);\n-\n extern void *default_get_pch_validity (size_t *);\n extern const char *default_pch_valid_p (const void *, size_t);"}, {"sha": "2597140b58c904907bb0b0fbae67e44bbeb8f150", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"integrate.h\"\n #include \"debug.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"cfglayout.h\"\n #include \"cfgloop.h\"\n@@ -1512,7 +1513,7 @@ process_options (void)\n \tfatal_error (\"can%'t open %s: %m\", aux_info_file_name);\n     }\n \n-  if (! targetm.have_named_sections)\n+  if (!targetm_common.have_named_sections)\n     {\n       if (flag_function_sections)\n \t{"}, {"sha": "87fc566ddee2f3fa7b4c16a8ebcc9d76cdf67f26", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -1,5 +1,5 @@\n /* Tail call optimization on trees.\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"dbgcnt.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n \n /* The file implements the tail recursion elimination.  It is also used to\n    analyze the tail calls in general, passing the results to the rtl level\n@@ -152,7 +153,7 @@ suitable_for_tail_call_opt_p (void)\n   /* If we are using sjlj exceptions, we may need to add a call to\n      _Unwind_SjLj_Unregister at exit of the function.  Which means\n      that we cannot do any sibcall transformations.  */\n-  if (targetm.except_unwind_info (&global_options) == UI_SJLJ\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ\n       && current_function_has_exception_handlers ())\n     return false;\n "}, {"sha": "73126cf30d69ba03c4e36ce67f0bce89bcac00de", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"filenames.h\"\n #include \"output.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"tree-inline.h\"\n #include \"tree-iterator.h\"\n@@ -9476,7 +9477,7 @@ build_common_builtin_nodes (void)\n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n   local_define_builtin (\"__builtin_unwind_resume\", ftype,\n \t\t\tBUILT_IN_UNWIND_RESUME,\n-\t\t\t((targetm.except_unwind_info (&global_options)\n+\t\t\t((targetm_common.except_unwind_info (&global_options)\n \t\t\t  == UI_SJLJ)\n \t\t\t ? \"_Unwind_SjLj_Resume\" : \"_Unwind_Resume\"),\n \t\t\tECF_NORETURN);"}, {"sha": "cfdf8d7d13ef22af97a692b664f015d47a5e5494", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677f3fa8158c48c278b09c86d9573e7c1afa3c53/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=677f3fa8158c48c278b09c86d9573e7c1afa3c53", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"debug.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n #include \"targhooks.h\"\n #include \"tree-mudflap.h\"\n #include \"cgraph.h\"\n@@ -416,7 +417,7 @@ resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n \t\t\tint flag_function_or_data_sections)\n {\n   if (DECL_SECTION_NAME (decl) == NULL_TREE\n-      && targetm.have_named_sections\n+      && targetm_common.have_named_sections\n       && (flag_function_or_data_sections\n \t  || DECL_ONE_ONLY (decl)))\n     {\n@@ -464,7 +465,7 @@ hot_function_section (tree decl)\n {\n   if (decl != NULL_TREE\n       && DECL_SECTION_NAME (decl) != NULL_TREE\n-      && targetm.have_named_sections)\n+      && targetm_common.have_named_sections)\n     return get_named_section (decl, NULL, 0);\n   else\n     return text_section;\n@@ -536,7 +537,7 @@ default_function_section (tree decl, enum node_frequency freq,\n #endif\n \n   if (!flag_reorder_functions\n-      || !targetm.have_named_sections)\n+      || !targetm_common.have_named_sections)\n     return NULL;\n   /* Startup code should go to startup subsection unless it is\n      unlikely executed (this happens especially with function splitting"}]}