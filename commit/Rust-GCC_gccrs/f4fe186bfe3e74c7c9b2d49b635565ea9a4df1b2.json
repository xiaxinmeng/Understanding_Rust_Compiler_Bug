{"sha": "f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRmZTE4NmJmZTNlNzRjN2M5YjJkNDliNjM1NTY1ZWE5YTRkZjFiMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-03T19:15:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-16T08:43:04Z"}, "message": "[Ada] Fix floating-point exponentiation with Integer'First exponent\n\ngcc/ada/\n\n\t* urealp.adb (Scale): Change first paramter to Uint and adjust.\n\t(Equivalent_Decimal_Exponent): Pass U.Den directly to Scale.\n\t* libgnat/s-exponr.adb (Negative): Rename to...\n\t(Safe_Negative): ...this and change its lower bound.\n\t(Exponr): Adjust to above renaming and deal with Integer'First.", "tree": {"sha": "d05d7cef7094ef78e900aa25cd6e0749dc094ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d05d7cef7094ef78e900aa25cd6e0749dc094ab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07b7dc09b21d1a2f000f2861a87b017b764b38b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b7dc09b21d1a2f000f2861a87b017b764b38b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b7dc09b21d1a2f000f2861a87b017b764b38b4"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "ad7f40188dd9d090d66e7aa5170419293e8b5bb5", "filename": "gcc/ada/libgnat/s-exponr.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2/gcc%2Fada%2Flibgnat%2Fs-exponr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2/gcc%2Fada%2Flibgnat%2Fs-exponr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exponr.adb?ref=f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2", "patch": "@@ -57,8 +57,8 @@ function System.Exponr (Left : Num; Right : Integer) return Num is\n    subtype Double_T is Double_Real.Double_T;\n    --  The double floating-point type\n \n-   subtype Negative is Integer range Integer'First .. -1;\n-   --  The range of negative exponents\n+   subtype Safe_Negative is Integer range Integer'First + 1 .. -1;\n+   --  The range of safe negative exponents\n \n    function Expon (Left : Num; Right : Natural) return Num;\n    --  Routine used if Right is greater than 4\n@@ -113,9 +113,12 @@ begin\n             return Num'Machine (Sqr * Sqr);\n          end;\n \n-      when Negative =>\n+      when Safe_Negative =>\n          return Num'Machine (1.0 / Exponr (Left, -Right));\n \n+      when Integer'First =>\n+         return Num'Machine (1.0 / (Exponr (Left, Integer'Last) * Left));\n+\n       when others =>\n          return Num'Machine (Expon (Left, Right));\n    end case;"}, {"sha": "0f57043ffcd599bf47cec39f828411086f7bcdf2", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=f4fe186bfe3e74c7c9b2d49b635565ea9a4df1b2", "patch": "@@ -270,23 +270,21 @@ package body Urealp is\n         15 => (Num =>  53_385_559, Den =>   45_392_361),  -- 1.176091259055681\n         16 => (Num =>  78_897_839, Den =>   65_523_237)); -- 1.204119982655924\n \n-      function Scale (X : Int; R : Ratio) return Int;\n+      function Scale (X : Uint; R : Ratio) return Int;\n       --  Compute the value of X scaled by R\n \n       -----------\n       -- Scale --\n       -----------\n \n-      function Scale (X : Int; R : Ratio) return Int is\n-         type Wide_Int is range -2**63 .. 2**63 - 1;\n-\n+      function Scale (X : Uint; R : Ratio) return Int is\n       begin\n-         return Int (Wide_Int (X) * Wide_Int (R.Num) / Wide_Int (R.Den));\n+         return UI_To_Int (X * R.Num / R.Den);\n       end Scale;\n \n    begin\n       pragma Assert (U.Rbase /= 0);\n-      return Scale (UI_To_Int (U.Den), Logs (U.Rbase));\n+      return Scale (U.Den, Logs (U.Rbase));\n    end Equivalent_Decimal_Exponent;\n \n    ----------------"}]}