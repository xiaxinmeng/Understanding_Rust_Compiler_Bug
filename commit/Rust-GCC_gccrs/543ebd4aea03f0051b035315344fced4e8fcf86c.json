{"sha": "543ebd4aea03f0051b035315344fced4e8fcf86c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzZWJkNGFlYTAzZjAwNTFiMDM1MzE1MzQ0ZmNlZDRlOGZjZjg2Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-01-05T06:24:47Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-01-05T06:24:47Z"}, "message": "re PR c++/13157 (Argument Dependent Lookup Failure)\n\n\tPR c++/13157\n\t* name-lookup.c (lookup_using_namespace): Remove spacesp\n\tparameter.\n\t(unqualified_namespace_lookup): Likewise.\n\t(lookup_qualified_name): Adjust accordingly.\n\t(lookup_name_real): Likewise.\n\t(lookup_arg_dependent): Do not eliminate the namespace of the\n\tfunctions found by unqualified name lookup unless that is the\n\tcurrent namespace.\n\n\tPR c++/13157\n\t* g++.dg/template/koenig3.C: New test.\n\nFrom-SVN: r75416", "tree": {"sha": "8839f7280c9dbcd84c08e24327572e09044a43e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8839f7280c9dbcd84c08e24327572e09044a43e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/543ebd4aea03f0051b035315344fced4e8fcf86c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/543ebd4aea03f0051b035315344fced4e8fcf86c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/543ebd4aea03f0051b035315344fced4e8fcf86c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/543ebd4aea03f0051b035315344fced4e8fcf86c/comments", "author": null, "committer": null, "parents": [{"sha": "572c2b17aa1580433f6ea5cf0267a62424fe2020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572c2b17aa1580433f6ea5cf0267a62424fe2020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/572c2b17aa1580433f6ea5cf0267a62424fe2020"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "e3baeebd3df0193f047e23af7fb65b17cc6406ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543ebd4aea03f0051b035315344fced4e8fcf86c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543ebd4aea03f0051b035315344fced4e8fcf86c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=543ebd4aea03f0051b035315344fced4e8fcf86c", "patch": "@@ -1,3 +1,15 @@\n+2004-01-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13157\n+\t* name-lookup.c (lookup_using_namespace): Remove spacesp\n+\tparameter.\n+\t(unqualified_namespace_lookup): Likewise.\n+\t(lookup_qualified_name): Adjust accordingly.\n+\t(lookup_name_real): Likewise.\n+\t(lookup_arg_dependent): Do not eliminate the namespace of the\n+\tfunctions found by unqualified name lookup unless that is the\n+\tcurrent namespace.\n+\n 2004-01-04  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* semantics.c (push_deferring_access_checks): Fix format."}, {"sha": "a7888161d1a14d9503a265372811cd1267043bb1", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543ebd4aea03f0051b035315344fced4e8fcf86c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543ebd4aea03f0051b035315344fced4e8fcf86c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=543ebd4aea03f0051b035315344fced4e8fcf86c", "patch": "@@ -38,7 +38,7 @@ static tree lookup_name_current_level (tree);\n static void push_local_binding (tree, tree, int);\n static tree push_overloaded_decl (tree, int);\n static bool lookup_using_namespace (tree, cxx_binding *, tree,\n-                                    tree, int, tree *);\n+                                    tree, int);\n static bool qualified_lookup_using_namespace (tree, tree, cxx_binding *, int);\n static tree lookup_type_current_level (tree);\n static tree push_using_directive (tree);\n@@ -3640,11 +3640,10 @@ select_decl (cxx_binding *binding, int flags)\n }\n \n /* Unscoped lookup of a global: iterate over current namespaces,\n-   considering using-directives.  If SPACESP is non-NULL, store a list\n-   of the namespaces we've considered in it.  */\n+   considering using-directives.  */\n \n static tree\n-unqualified_namespace_lookup (tree name, int flags, tree* spacesp)\n+unqualified_namespace_lookup (tree name, int flags)\n {\n   tree initial = current_decl_namespace ();\n   tree scope = initial;\n@@ -3655,15 +3654,11 @@ unqualified_namespace_lookup (tree name, int flags, tree* spacesp)\n \n   timevar_push (TV_NAME_LOOKUP);\n   cxx_binding_clear (&binding);\n-  if (spacesp)\n-    *spacesp = NULL_TREE;\n \n   for (; !val; scope = CP_DECL_CONTEXT (scope))\n     {\n       cxx_binding *b =\n          cxx_scope_find_binding_for_name (NAMESPACE_LEVEL (scope), name);\n-      if (spacesp)\n-\t*spacesp = tree_cons (scope, NULL_TREE, *spacesp);\n \n       /* Ignore anticipated built-in functions.  */\n       if (b && b->value && DECL_P (b->value)\n@@ -3681,7 +3676,7 @@ unqualified_namespace_lookup (tree name, int flags, tree* spacesp)\n \t   level->kind != sk_namespace;\n \t   level = level->level_chain)\n \tif (!lookup_using_namespace (name, &binding, level->using_directives,\n-                                     scope, flags, spacesp))\n+                                     scope, flags))\n \t  /* Give up because of error.  */\n \t  POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n \n@@ -3692,7 +3687,7 @@ unqualified_namespace_lookup (tree name, int flags, tree* spacesp)\n \t{\n \t  if (!lookup_using_namespace (name, &binding,\n                                        DECL_NAMESPACE_USING (siter),\n-\t\t\t\t       scope, flags, spacesp))\n+\t\t\t\t       scope, flags))\n \t    /* Give up because of error.  */\n \t    POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n \t  if (siter == scope) break;\n@@ -3728,8 +3723,7 @@ lookup_qualified_name (tree scope, tree name, bool is_type_p, bool complain)\n       flags |= LOOKUP_COMPLAIN;\n       if (is_type_p)\n \tflags |= LOOKUP_PREFER_TYPES;\n-      if (qualified_lookup_using_namespace (name, scope, &binding, \n-\t\t\t\t\t    flags))\n+      if (qualified_lookup_using_namespace (name, scope, &binding, flags))\n \treturn select_decl (&binding, flags);\n     }\n   else if (is_aggr_type (scope, complain))\n@@ -3752,7 +3746,7 @@ lookup_qualified_name (tree scope, tree name, bool is_type_p, bool complain)\n \n static bool\n lookup_using_namespace (tree name, cxx_binding *val, tree usings, tree scope,\n-                        int flags, tree *spacesp)\n+                        int flags)\n {\n   tree iter;\n   timevar_push (TV_NAME_LOOKUP);\n@@ -3764,8 +3758,6 @@ lookup_using_namespace (tree name, cxx_binding *val, tree usings, tree scope,\n         tree used = ORIGINAL_NAMESPACE (TREE_PURPOSE (iter));\n         cxx_binding *val1 =\n           cxx_scope_find_binding_for_name (NAMESPACE_LEVEL (used), name);\n-        if (spacesp)\n-          *spacesp = tree_cons (used, NULL_TREE, *spacesp);\n         /* Resolve ambiguities.  */\n         if (val1)\n           val = ambiguous_decl (name, val, val1, flags);\n@@ -3900,7 +3892,7 @@ lookup_name_real (tree name, int prefer_type, int nonclass,\n   /* Now lookup in namespace scopes.  */\n   if (!val)\n     {\n-      tree t = unqualified_namespace_lookup (name, flags, 0);\n+      tree t = unqualified_namespace_lookup (name, flags);\n       if (t)\n \tval = t;\n     }\n@@ -4371,14 +4363,23 @@ lookup_arg_dependent (tree name, tree fns, tree args)\n   k.functions = fns;\n   k.classes = NULL_TREE;\n \n-  /* Note that we've already looked at some namespaces during normal\n-     unqualified lookup, unless we found a decl in function scope.  */\n+  /* We've already looked at some namespaces during normal unqualified\n+     lookup -- but we don't know exactly which ones.  If the functions\n+     we found were brought into the current namespace via a using\n+     declaration, we have not really checked the namespace from which\n+     they came.  Therefore, we check all namespaces here -- unless the\n+     function we have is from the current namespace.  */\n   if (fns)\n     fn = OVL_CURRENT (fns);\n-  if (fn && TREE_CODE (fn) == FUNCTION_DECL && DECL_LOCAL_FUNCTION_P (fn))\n+  if (fn && TREE_CODE (fn) == FUNCTION_DECL \n+      && CP_DECL_CONTEXT (fn) != current_decl_namespace ())\n     k.namespaces = NULL_TREE;\n   else\n-    unqualified_namespace_lookup (name, 0, &k.namespaces);\n+    /* Setting NAMESPACES is purely an optimization; it prevents\n+       adding functions which are already in FNS.  Adding them would\n+       be safe -- \"joust\" will eliminate the duplicates -- but\n+       wasteful.  */\n+    k.namespaces = build_tree_list (current_decl_namespace (), NULL_TREE);\n \n   arg_assoc_args (&k, args);\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, k.functions);"}, {"sha": "9b161c459b9ba4400e1f7030ce21ef10c3ce29d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543ebd4aea03f0051b035315344fced4e8fcf86c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543ebd4aea03f0051b035315344fced4e8fcf86c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=543ebd4aea03f0051b035315344fced4e8fcf86c", "patch": "@@ -1,5 +1,8 @@\n 2004-01-04  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/13157\n+\t* g++.dg/template/koenig3.C: New test.\n+\n \tPR c++/13529\n \t* g++.dg/parse/offsetof3.C: New test.\n "}, {"sha": "f90059d653b73eac2c0a8171cfa70d651570924e", "filename": "gcc/testsuite/g++.dg/template/koenig3.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543ebd4aea03f0051b035315344fced4e8fcf86c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543ebd4aea03f0051b035315344fced4e8fcf86c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig3.C?ref=543ebd4aea03f0051b035315344fced4e8fcf86c", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/13157\n+\n+namespace aa\n+{\n+  double abs(double);\n+  long double abs(long double);\n+}\n+\n+namespace fu\n+{\n+  template <class T>\n+  struct X\n+  {};\n+  \n+  template <class T>\n+  X<T> test(X<T> x)\n+  {\n+    using ::aa::abs;\n+    return abs(x);\n+  }\n+  \n+  template <class T>\n+  X<T> abs(X<T>);\n+  \n+  X<int> x;\n+  X<int> z = test(x);\n+}\n+"}]}