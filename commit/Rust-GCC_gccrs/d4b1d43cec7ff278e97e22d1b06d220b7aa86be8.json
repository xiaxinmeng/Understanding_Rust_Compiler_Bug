{"sha": "d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiMWQ0M2NlYzdmZjI3OGU5N2UyMmQxYjA2ZDIyMGI3YWE4NmJlOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-17T02:28:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-17T02:28:18Z"}, "message": "PR c++/80465 - ICE with generic lambda with noexcept-specifier.\n\n\t* lambda.c (maybe_add_lambda_conv_op): Keep processing_template_decl\n\tset longer for a generic lambda.\n\nFrom-SVN: r249322", "tree": {"sha": "cd623ba15f2144a7d523bda6db25843c5d18e963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd623ba15f2144a7d523bda6db25843c5d18e963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc14602e32f0ba0b6b7628c487bfa1441c2d78f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc14602e32f0ba0b6b7628c487bfa1441c2d78f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc14602e32f0ba0b6b7628c487bfa1441c2d78f4"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "1ec3b2261ba889535ad2a3fa1c28c67ab500ba36", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "patch": "@@ -1,5 +1,9 @@\n 2017-06-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/80465 - ICE with generic lambda with noexcept-specifier.\n+\t* lambda.c (maybe_add_lambda_conv_op): Keep processing_template_decl\n+\tset longer for a generic lambda.\n+\n \tPR c++/80614 - Wrong mangling for C++17 noexcept type\n \t* mangle.c (write_type): Put the eh spec back on the function type.\n "}, {"sha": "41d4921c1db49fd7a05b3135a074b2ccf30b0757", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "patch": "@@ -987,6 +987,8 @@ maybe_add_lambda_conv_op (tree type)\n \t\t\t    null_pointer_node);\n   if (generic_lambda_p)\n     {\n+      ++processing_template_decl;\n+\n       /* Prepare the dependent member call for the static member function\n \t '_FUN' and, potentially, prepare another call to be used in a decltype\n \t return expression for a deduced return call op to allow for simple\n@@ -1036,9 +1038,7 @@ maybe_add_lambda_conv_op (tree type)\n \n \tif (generic_lambda_p)\n \t  {\n-\t    ++processing_template_decl;\n \t    tree a = forward_parm (tgt);\n-\t    --processing_template_decl;\n \n \t    CALL_EXPR_ARG (call, ix) = a;\n \t    if (decltype_call)\n@@ -1062,11 +1062,9 @@ maybe_add_lambda_conv_op (tree type)\n     {\n       if (decltype_call)\n \t{\n-\t  ++processing_template_decl;\n \t  fn_result = finish_decltype_type\n \t    (decltype_call, /*id_expression_or_member_access_p=*/false,\n \t     tf_warning_or_error);\n-\t  --processing_template_decl;\n \t}\n     }\n   else\n@@ -1084,6 +1082,9 @@ maybe_add_lambda_conv_op (tree type)\n       && TYPE_NOTHROW_P (TREE_TYPE (callop)))\n     stattype = build_exception_variant (stattype, noexcept_true_spec);\n \n+  if (generic_lambda_p)\n+    --processing_template_decl;\n+\n   /* First build up the conversion op.  */\n \n   tree rettype = build_pointer_type (stattype);"}, {"sha": "46aefddedf89888bb47ae4621d801ba01bd8ff1e", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type17.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b1d43cec7ff278e97e22d1b06d220b7aa86be8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type17.C?ref=d4b1d43cec7ff278e97e22d1b06d220b7aa86be8", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/80465\n+// { dg-options -std=c++1z }\n+\n+int foo(...);\n+int main() {\n+  [](auto a) noexcept(noexcept(foo(a))){}(42);\n+}"}]}