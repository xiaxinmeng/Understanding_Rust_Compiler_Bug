{"sha": "788a2908650b5d11f5b5168768554779a845ce25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4YTI5MDg2NTBiNWQxMWY1YjUxNjg3Njg1NTQ3NzlhODQ1Y2UyNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-31T19:36:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-31T19:36:57Z"}, "message": "i386: Remove TARGET_VECTORIZE_BUILTIN_CONVERSION.\n\nRenaming all of the insn patterns as needed to the standard\noptab forms.  Sadly, only one of the builtins is unused by\nthe various header files, so most of them must stay around.\n\n        * config/i386/sse.md (floatv8siv8sf2): Rename from avx_cvtdq2ps256.\n        (floatv4siv4sf2): Rename from sse2_cvtdq2ps.\n        (floatunsv4siv4sf2): Rename from sse2_cvtudq2ps.\n        (fix_truncv8sfv8si2): Rename from avx_cvttps2dq256.\n        (fix_truncv4sfv4si2): Rename from sse2_cvttps2dq.\n        (floatv4siv4df2): Rename from avx_cvtdq2pd256.\n        (fix_truncv4dfv4si2): Rename from avx_cvttpd2dq256.\n        (vec_unpacku_float_hi_v8si): Update for insn pattern name changes.\n        * config/i386/i386.md (splitters for int-float conversion): Likewise.\n        * config/i386/i386.c (ix86_split_convert_uns_si_sse): Likewise.\n        (bdesc_args): Likewise.\n        (enum ix86_builtins) [IX86_BUILTIN_CVTUDQ2PS]: Remove.\n        (ix86_vectorize_builtin_conversion): Remove.\n        (TARGET_VECTORIZE_BUILTIN_CONVERSION): Remove.\n\nFrom-SVN: r180709", "tree": {"sha": "30cd478216c1e785099a9f9c74b7845239f316cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30cd478216c1e785099a9f9c74b7845239f316cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/788a2908650b5d11f5b5168768554779a845ce25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788a2908650b5d11f5b5168768554779a845ce25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788a2908650b5d11f5b5168768554779a845ce25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788a2908650b5d11f5b5168768554779a845ce25/comments", "author": null, "committer": null, "parents": [{"sha": "1fb80b0c5359f696aa61d537e25b7901d8b56ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb80b0c5359f696aa61d537e25b7901d8b56ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb80b0c5359f696aa61d537e25b7901d8b56ff7"}], "stats": {"total": 167, "additions": 48, "deletions": 119}, "files": [{"sha": "caed12e5e6940b4479452b4a323e27218e9df9a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788a2908650b5d11f5b5168768554779a845ce25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788a2908650b5d11f5b5168768554779a845ce25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=788a2908650b5d11f5b5168768554779a845ce25", "patch": "@@ -1,3 +1,20 @@\n+2011-10-31  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/sse.md (floatv8siv8sf2): Rename from avx_cvtdq2ps256.\n+\t(floatv4siv4sf2): Rename from sse2_cvtdq2ps.\n+\t(floatunsv4siv4sf2): Rename from sse2_cvtudq2ps.\n+\t(fix_truncv8sfv8si2): Rename from avx_cvttps2dq256.\n+\t(fix_truncv4sfv4si2): Rename from sse2_cvttps2dq.\n+\t(floatv4siv4df2): Rename from avx_cvtdq2pd256.\n+\t(fix_truncv4dfv4si2): Rename from avx_cvttpd2dq256.\n+\t(vec_unpacku_float_hi_v8si): Update for insn pattern name changes.\n+\t* config/i386/i386.md (splitters for int-float conversion): Likewise.\n+\t* config/i386/i386.c (ix86_split_convert_uns_si_sse): Likewise.\n+\t(bdesc_args): Likewise.\n+\t(enum ix86_builtins) [IX86_BUILTIN_CVTUDQ2PS]: Remove.\n+\t(ix86_vectorize_builtin_conversion): Remove.\n+\t(TARGET_VECTORIZE_BUILTIN_CONVERSION): Remove.\n+\n 2011-10-31  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.c (mark_modified): Moved up in the file."}, {"sha": "4e34f25e62200485df76343b141f1fcdba99d7a9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 103, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788a2908650b5d11f5b5168768554779a845ce25/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788a2908650b5d11f5b5168768554779a845ce25/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=788a2908650b5d11f5b5168768554779a845ce25", "patch": "@@ -16857,7 +16857,7 @@ ix86_split_convert_uns_si_sse (rtx operands[])\n \n   x = gen_rtx_REG (V4SImode, REGNO (value));\n   if (vecmode == V4SFmode)\n-    emit_insn (gen_sse2_cvttps2dq (x, value));\n+    emit_insn (gen_fix_truncv4sfv4si2 (x, value));\n   else\n     emit_insn (gen_sse2_cvttpd2dq (x, value));\n   value = x;\n@@ -25077,8 +25077,6 @@ enum ix86_builtins\n   IX86_BUILTIN_CPYSGNPS256,\n   IX86_BUILTIN_CPYSGNPD256,\n \n-  IX86_BUILTIN_CVTUDQ2PS,\n-\n   /* FMA4 instructions.  */\n   IX86_BUILTIN_VFMADDSS,\n   IX86_BUILTIN_VFMADDSD,\n@@ -25791,8 +25789,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmovmskb, \"__builtin_ia32_pmovmskb128\", IX86_BUILTIN_PMOVMSKB128, UNKNOWN, (int) INT_FTYPE_V16QI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sqrtv2df2, \"__builtin_ia32_sqrtpd\", IX86_BUILTIN_SQRTPD, UNKNOWN, (int) V2DF_FTYPE_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtdq2pd, \"__builtin_ia32_cvtdq2pd\", IX86_BUILTIN_CVTDQ2PD, UNKNOWN, (int) V2DF_FTYPE_V4SI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtdq2ps, \"__builtin_ia32_cvtdq2ps\", IX86_BUILTIN_CVTDQ2PS, UNKNOWN, (int) V4SF_FTYPE_V4SI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtudq2ps, \"__builtin_ia32_cvtudq2ps\", IX86_BUILTIN_CVTUDQ2PS, UNKNOWN, (int) V4SF_FTYPE_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_floatv4siv4sf2, \"__builtin_ia32_cvtdq2ps\", IX86_BUILTIN_CVTDQ2PS, UNKNOWN, (int) V4SF_FTYPE_V4SI },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpd2dq, \"__builtin_ia32_cvtpd2dq\", IX86_BUILTIN_CVTPD2DQ, UNKNOWN, (int) V4SI_FTYPE_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpd2pi, \"__builtin_ia32_cvtpd2pi\", IX86_BUILTIN_CVTPD2PI, UNKNOWN, (int) V2SI_FTYPE_V2DF },\n@@ -25809,7 +25806,7 @@ static const struct builtin_description bdesc_args[] =\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtps2dq, \"__builtin_ia32_cvtps2dq\", IX86_BUILTIN_CVTPS2DQ, UNKNOWN, (int) V4SI_FTYPE_V4SF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtps2pd, \"__builtin_ia32_cvtps2pd\", IX86_BUILTIN_CVTPS2PD, UNKNOWN, (int) V2DF_FTYPE_V4SF },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttps2dq, \"__builtin_ia32_cvttps2dq\", IX86_BUILTIN_CVTTPS2DQ, UNKNOWN, (int) V4SI_FTYPE_V4SF },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_fix_truncv4sfv4si2, \"__builtin_ia32_cvttps2dq\", IX86_BUILTIN_CVTTPS2DQ, UNKNOWN, (int) V4SI_FTYPE_V4SF },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_addv2df3, \"__builtin_ia32_addpd\", IX86_BUILTIN_ADDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_subv2df3, \"__builtin_ia32_subpd\", IX86_BUILTIN_SUBPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n@@ -26147,14 +26144,14 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vextractf128v4df, \"__builtin_ia32_vextractf128_pd256\", IX86_BUILTIN_EXTRACTF128PD256, UNKNOWN, (int) V2DF_FTYPE_V4DF_INT },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vextractf128v8sf, \"__builtin_ia32_vextractf128_ps256\", IX86_BUILTIN_EXTRACTF128PS256, UNKNOWN, (int) V4SF_FTYPE_V8SF_INT },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vextractf128v8si, \"__builtin_ia32_vextractf128_si256\", IX86_BUILTIN_EXTRACTF128SI256, UNKNOWN, (int) V4SI_FTYPE_V8SI_INT },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_cvtdq2pd256, \"__builtin_ia32_cvtdq2pd256\", IX86_BUILTIN_CVTDQ2PD256, UNKNOWN, (int) V4DF_FTYPE_V4SI },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_cvtdq2ps256, \"__builtin_ia32_cvtdq2ps256\", IX86_BUILTIN_CVTDQ2PS256, UNKNOWN, (int) V8SF_FTYPE_V8SI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_floatv4siv4df2, \"__builtin_ia32_cvtdq2pd256\", IX86_BUILTIN_CVTDQ2PD256, UNKNOWN, (int) V4DF_FTYPE_V4SI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_floatv8siv8sf2, \"__builtin_ia32_cvtdq2ps256\", IX86_BUILTIN_CVTDQ2PS256, UNKNOWN, (int) V8SF_FTYPE_V8SI },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_cvtpd2ps256, \"__builtin_ia32_cvtpd2ps256\", IX86_BUILTIN_CVTPD2PS256, UNKNOWN, (int) V4SF_FTYPE_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_cvtps2dq256, \"__builtin_ia32_cvtps2dq256\", IX86_BUILTIN_CVTPS2DQ256, UNKNOWN, (int) V8SI_FTYPE_V8SF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_cvtps2pd256, \"__builtin_ia32_cvtps2pd256\", IX86_BUILTIN_CVTPS2PD256, UNKNOWN, (int) V4DF_FTYPE_V4SF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_cvttpd2dq256, \"__builtin_ia32_cvttpd2dq256\", IX86_BUILTIN_CVTTPD2DQ256, UNKNOWN, (int) V4SI_FTYPE_V4DF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_fix_truncv4sfv4si2, \"__builtin_ia32_cvttpd2dq256\", IX86_BUILTIN_CVTTPD2DQ256, UNKNOWN, (int) V4SI_FTYPE_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_cvtpd2dq256, \"__builtin_ia32_cvtpd2dq256\", IX86_BUILTIN_CVTPD2DQ256, UNKNOWN, (int) V4SI_FTYPE_V4DF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_cvttps2dq256, \"__builtin_ia32_cvttps2dq256\", IX86_BUILTIN_CVTTPS2DQ256, UNKNOWN, (int) V8SI_FTYPE_V8SF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_fix_truncv8sfv8si2, \"__builtin_ia32_cvttps2dq256\", IX86_BUILTIN_CVTTPS2DQ256, UNKNOWN, (int) V8SI_FTYPE_V8SF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vperm2f128v4df3, \"__builtin_ia32_vperm2f128_pd256\", IX86_BUILTIN_VPERM2F128PD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_INT },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vperm2f128v8sf3, \"__builtin_ia32_vperm2f128_ps256\", IX86_BUILTIN_VPERM2F128PS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_INT },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vperm2f128v8si3, \"__builtin_ia32_vperm2f128_si256\", IX86_BUILTIN_VPERM2F128SI256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT },\n@@ -29406,96 +29403,6 @@ ix86_veclibabi_acml (enum built_in_function fn, tree type_out, tree type_in)\n   return new_fndecl;\n }\n \n-\n-/* Returns a decl of a function that implements conversion of an integer vector\n-   into a floating-point vector, or vice-versa.  DEST_TYPE and SRC_TYPE\n-   are the types involved when converting according to CODE.\n-   Return NULL_TREE if it is not available.  */\n-\n-static tree\n-ix86_vectorize_builtin_conversion (unsigned int code,\n-\t\t\t\t   tree dest_type, tree src_type)\n-{\n-  if (! TARGET_SSE2)\n-    return NULL_TREE;\n-\n-  switch (code)\n-    {\n-    case FLOAT_EXPR:\n-      switch (TYPE_MODE (src_type))\n-\t{\n-\tcase V4SImode:\n-\t  switch (TYPE_MODE (dest_type))\n-\t    {\n-\t    case V4SFmode:\n-\t      return (TYPE_UNSIGNED (src_type)\n-\t\t      ? ix86_builtins[IX86_BUILTIN_CVTUDQ2PS]\n-\t\t      : ix86_builtins[IX86_BUILTIN_CVTDQ2PS]);\n-\t    case V4DFmode:\n-\t      return (TYPE_UNSIGNED (src_type)\n-\t\t      ? NULL_TREE\n-\t\t      : ix86_builtins[IX86_BUILTIN_CVTDQ2PD256]);\n-\t    default:\n-\t      return NULL_TREE;\n-\t    }\n-\t  break;\n-\tcase V8SImode:\n-\t  switch (TYPE_MODE (dest_type))\n-\t    {\n-\t    case V8SFmode:\n-\t      return (TYPE_UNSIGNED (src_type)\n-\t\t      ? NULL_TREE\n-\t\t      : ix86_builtins[IX86_BUILTIN_CVTDQ2PS256]);\n-\t    default:\n-\t      return NULL_TREE;\n-\t    }\n-\t  break;\n-\tdefault:\n-\t  return NULL_TREE;\n-\t}\n-\n-    case FIX_TRUNC_EXPR:\n-      switch (TYPE_MODE (dest_type))\n-\t{\n-\tcase V4SImode:\n-\t  switch (TYPE_MODE (src_type))\n-\t    {\n-\t    case V4SFmode:\n-\t      return (TYPE_UNSIGNED (dest_type)\n-\t\t      ? NULL_TREE\n-\t\t      : ix86_builtins[IX86_BUILTIN_CVTTPS2DQ]);\n-\t    case V4DFmode:\n-\t      return (TYPE_UNSIGNED (dest_type)\n-\t\t      ? NULL_TREE\n-\t\t      : ix86_builtins[IX86_BUILTIN_CVTTPD2DQ256]);\n-\t    default:\n-\t      return NULL_TREE;\n-\t    }\n-\t  break;\n-\n-\tcase V8SImode:\n-\t  switch (TYPE_MODE (src_type))\n-\t    {\n-\t    case V8SFmode:\n-\t      return (TYPE_UNSIGNED (dest_type)\n-\t\t      ? NULL_TREE\n-\t\t      : ix86_builtins[IX86_BUILTIN_CVTTPS2DQ256]);\n-\t    default:\n-\t      return NULL_TREE;\n-\t    }\n-\t  break;\n-\n-\tdefault:\n-\t  return NULL_TREE;\n-\t}\n-\n-    default:\n-      return NULL_TREE;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Returns a code for a target-specific builtin that implements\n    reciprocal of the function, or NULL_TREE if not available.  */\n \n@@ -37695,9 +37602,6 @@ ix86_autovectorize_vector_sizes (void)\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n   ix86_builtin_vectorized_function\n \n-#undef TARGET_VECTORIZE_BUILTIN_CONVERSION\n-#define TARGET_VECTORIZE_BUILTIN_CONVERSION ix86_vectorize_builtin_conversion\n-\n #undef TARGET_BUILTIN_RECIPROCAL\n #define TARGET_BUILTIN_RECIPROCAL ix86_builtin_reciprocal\n "}, {"sha": "491037149b63290138b8dec7fff754450e4ccd73", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788a2908650b5d11f5b5168768554779a845ce25/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788a2908650b5d11f5b5168768554779a845ce25/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=788a2908650b5d11f5b5168768554779a845ce25", "patch": "@@ -5053,8 +5053,10 @@\n       emit_insn (gen_sse2_loadld (operands[4],\n \t\t\t\t  CONST0_RTX (V4SImode), operands[2]));\n     }\n-  emit_insn\n-    (gen_sse2_cvtdq2<ssevecmodesuffix> (operands[3], operands[4]));\n+  if (<ssevecmode>mode == V4SImode)\n+    emit_insn (gen_floatv4siv4sf2 (operands[3], operands[4]));\n+  else\n+    emit_insn (gen_sse2_cvtdq2pd (operands[3], operands[4]));\n   DONE;\n })\n \n@@ -5076,8 +5078,10 @@\n \n   emit_insn (gen_sse2_loadld (operands[4],\n \t\t\t      CONST0_RTX (V4SImode), operands[1]));\n-  emit_insn\n-    (gen_sse2_cvtdq2<ssevecmodesuffix> (operands[3], operands[4]));\n+  if (<ssevecmode>mode == V4SFmode)\n+    emit_insn (gen_floatv4siv4sf2 (operands[3], operands[4]));\n+  else\n+    emit_insn (gen_sse2_cvtdq2pd (operands[3], operands[4]));\n   DONE;\n })\n \n@@ -5120,8 +5124,10 @@\n     operands[4] = simplify_gen_subreg (V4SImode, operands[1], SImode, 0);\n   else\n     gcc_unreachable ();\n-  emit_insn\n-    (gen_sse2_cvtdq2<ssevecmodesuffix> (operands[3], operands[4]));\n+  if (<ssevecmode>mode == V4SFmode)\n+    emit_insn (gen_floatv4siv4sf2 (operands[3], operands[4]));\n+  else\n+    emit_insn (gen_sse2_cvtdq2pd (operands[3], operands[4]));\n   DONE;\n })\n \n@@ -5142,8 +5148,10 @@\n \n   emit_insn (gen_sse2_loadld (operands[4],\n \t\t\t      CONST0_RTX (V4SImode), operands[1]));\n-  emit_insn\n-    (gen_sse2_cvtdq2<ssevecmodesuffix> (operands[3], operands[4]));\n+  if (<ssevecmode>mode == V4SFmode)\n+    emit_insn (gen_floatv4siv4sf2 (operands[3], operands[4]));\n+  else\n+    emit_insn (gen_sse2_cvtdq2pd (operands[3], operands[4]));\n   DONE;\n })\n "}, {"sha": "65ca5ed24aceac376adbe6289759f98bbab06ebf", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788a2908650b5d11f5b5168768554779a845ce25/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788a2908650b5d11f5b5168768554779a845ce25/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=788a2908650b5d11f5b5168768554779a845ce25", "patch": "@@ -2224,7 +2224,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"avx_cvtdq2ps256\"\n+(define_insn \"floatv8siv8sf2\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(float:V8SF (match_operand:V8SI 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n@@ -2233,7 +2233,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"sse2_cvtdq2ps\"\n+(define_insn \"floatv4siv4sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(float:V4SF (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n@@ -2242,7 +2242,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_expand \"sse2_cvtudq2ps\"\n+(define_expand \"floatunsv4siv4sf2\"\n   [(set (match_dup 5)\n \t(float:V4SF (match_operand:V4SI 1 \"nonimmediate_operand\" \"\")))\n    (set (match_dup 6)\n@@ -2293,7 +2293,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx_cvttps2dq256\"\n+(define_insn \"fix_truncv8sfv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n \t(fix:V8SI (match_operand:V8SF 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n@@ -2302,7 +2302,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"sse2_cvttps2dq\"\n+(define_insn \"fix_truncv4sfv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(fix:V4SI (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n@@ -2495,7 +2495,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"avx_cvtdq2pd256\"\n+(define_insn \"floatv4siv4df2\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(float:V4DF (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n@@ -2591,7 +2591,7 @@\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"double\")])\n \n-(define_insn \"avx_cvttpd2dq256\"\n+(define_insn \"fix_truncv4dfv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(fix:V4SI (match_operand:V4DF 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n@@ -2995,7 +2995,7 @@\n   for (i = 2; i < 5; i++)\n     tmp[i] = gen_reg_rtx (V4DFmode);\n   emit_insn (gen_vec_extract_hi_v8si (tmp[5], operands[1]));\n-  emit_insn (gen_avx_cvtdq2pd256 (tmp[2], tmp[5]));\n+  emit_insn (gen_floatv4siv4df2 (tmp[2], tmp[5]));\n   emit_insn (gen_rtx_SET (VOIDmode, tmp[3],\n \t\t\t  gen_rtx_LT (V4DFmode, tmp[2], tmp[0])));\n   emit_insn (gen_andv4df3 (tmp[4], tmp[3], tmp[1]));"}]}