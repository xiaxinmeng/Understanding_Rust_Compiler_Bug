{"sha": "056299563bb2365dfcf66c0187ffe55f75868c47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2Mjk5NTYzYmIyMzY1ZGZjZjY2YzAxODdmZmU1NWY3NTg2OGM0Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2007-05-22T16:14:13Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-05-22T16:14:13Z"}, "message": "i386-cpuid.h (bit_SSE4_1): New.\n\n2007-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.dg/i386-cpuid.h (bit_SSE4_1): New.\n\t(bit_SSE4_2): Likewise.\n\t(bit_POPCNT): Likewise.\n\n\t* gcc.target/i386/i386.exp (check_effective_target_sse4): New.\n\tCheck if assembler supports SSE4 instructions.\n\n\t* gcc.target/i386/sse4_1-blendpd.c: New file.\n\t* gcc.target/i386/sse4_1-blendps.c: Likewise.\n\t* gcc.target/i386/sse4_1-blendvpd.c: Likewise.\n\t* gcc.target/i386/sse4_1-blendvps.c: Likewise.\n\t* gcc.target/i386/sse4_1-check.h: Likewise.\n\t* gcc.target/i386/sse4_1-dppd-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-dppd-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-dpps-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-dpps-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-extractps.c: Likewise.\n\t* gcc.target/i386/sse4_1-insertps-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-insertps-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-movntdqa.c: Likewise.\n\t* gcc.target/i386/sse4_1-mpsadbw.c: Likewise.\n\t* gcc.target/i386/sse4_1-packusdw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pblendvb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pblendw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pcmpeqq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pextrb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pextrd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pextrq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pextrw.c: Likewise.\n\t* gcc.target/i386/sse4_1-phminposuw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pinsrb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pinsrd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pinsrq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmaxsb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmaxsd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmaxud.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmaxuw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pminsb.c: Likewise.\n\t* gcc.target/i386/sse4_1-pminsd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pminud.c: Likewise.\n\t* gcc.target/i386/sse4_1-pminuw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxbd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxbq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxbw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxdq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxwd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovsxwq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxbd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxbq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxbw.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxdq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxwd.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmovzxwq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmuldq.c: Likewise.\n\t* gcc.target/i386/sse4_1-pmulld.c: Likewise.\n\t* gcc.target/i386/sse4_1-ptest-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-ptest-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-ptest-3.c: Likewise.\n\t* gcc.target/i386/sse4_1-round.h: Likewise.\n\t* gcc.target/i386/sse4_1-roundpd-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundpd-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundpd-3.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundps-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundps-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundps-3.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundsd-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundsd-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundsd-3.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundsd-4.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundss-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundss-2.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundss-3.c: Likewise.\n\t* gcc.target/i386/sse4_1-roundss-4.c: Likewise.\n\nFrom-SVN: r124947", "tree": {"sha": "50dbe47fb6ff3e2cfbdee9bb2ea846a97f4f11d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50dbe47fb6ff3e2cfbdee9bb2ea846a97f4f11d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056299563bb2365dfcf66c0187ffe55f75868c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056299563bb2365dfcf66c0187ffe55f75868c47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056299563bb2365dfcf66c0187ffe55f75868c47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056299563bb2365dfcf66c0187ffe55f75868c47/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a5cee0228a8b8d639e29682c800fe251175ce62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5cee0228a8b8d639e29682c800fe251175ce62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a5cee0228a8b8d639e29682c800fe251175ce62"}], "stats": {"total": 3383, "additions": 3383, "deletions": 0}, "files": [{"sha": "a74038d80e09a9cb6754b793a4310dd18f5dfcb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -1,3 +1,79 @@\n+2007-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.dg/i386-cpuid.h (bit_SSE4_1): New.\n+\t(bit_SSE4_2): Likewise.\n+\t(bit_POPCNT): Likewise.\n+\n+\t* gcc.target/i386/i386.exp (check_effective_target_sse4): New.\n+\tCheck if assembler supports SSE4 instructions.\n+\n+\t* gcc.target/i386/sse4_1-blendpd.c: New file.\n+\t* gcc.target/i386/sse4_1-blendps.c: Likewise.\n+\t* gcc.target/i386/sse4_1-blendvpd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-blendvps.c: Likewise.\n+\t* gcc.target/i386/sse4_1-check.h: Likewise.\n+\t* gcc.target/i386/sse4_1-dppd-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-dppd-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-dpps-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-dpps-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-extractps.c: Likewise.\n+\t* gcc.target/i386/sse4_1-insertps-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-insertps-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-movntdqa.c: Likewise.\n+\t* gcc.target/i386/sse4_1-mpsadbw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-packusdw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pblendvb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pblendw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pcmpeqq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pextrb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pextrd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pextrq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pextrw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-phminposuw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pinsrb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pinsrd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pinsrq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmaxsb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmaxsd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmaxud.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmaxuw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pminsb.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pminsd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pminud.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pminuw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxbd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxbq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxbw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxdq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxwd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovsxwq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxbd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxbq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxbw.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxdq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxwd.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmovzxwq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmuldq.c: Likewise.\n+\t* gcc.target/i386/sse4_1-pmulld.c: Likewise.\n+\t* gcc.target/i386/sse4_1-ptest-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-ptest-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-ptest-3.c: Likewise.\n+\t* gcc.target/i386/sse4_1-round.h: Likewise.\n+\t* gcc.target/i386/sse4_1-roundpd-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundpd-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundpd-3.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundps-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundps-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundps-3.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundsd-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundsd-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundsd-3.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundsd-4.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundss-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundss-2.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundss-3.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundss-4.c: Likewise.\n+\n 2007-05-22 Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31627"}, {"sha": "8c7a39f45a9c7dd64889d483106b8eea6693ec3f", "filename": "gcc/testsuite/gcc.dg/i386-cpuid.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-cpuid.h?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -5,6 +5,9 @@\n /* %ecx */\n #define bit_SSE3 (1 << 0)\n #define bit_SSSE3 (1 << 9)\n+#define bit_SSE4_1 (1 << 19)\n+#define bit_SSE4_2 (1 << 20)\n+#define bit_POPCNT (1 << 23)\n \n /* %edx */\n #define bit_CMOV (1 << 15)"}, {"sha": "f982045b35cc611382ab8c30ce93adc493a69833", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -37,6 +37,20 @@ proc check_effective_target_ssse3 { } {\n     } \"-O2 -mssse3\" ]\n }\n \n+# Return 1 if sse4 instructions can be compiled.\n+proc check_effective_target_sse4 { } {\n+    return [check_no_compiler_messages sse4.1 object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_mullo_epi32 (__m128i __X, __m128i __Y)\n+\t{\n+\t    return (__m128i) __builtin_ia32_pmulld128 ((__v4si)__X,\n+\t\t\t\t\t\t       (__v4si)__Y);\n+\t}\n+    } \"-O2 -msse4.1\" ]\n+}\n+\n # Return 1 if sse4a instructions can be compiled.\n proc check_effective_target_sse4a { } {\n     return [check_no_compiler_messages sse4a object {"}, {"sha": "8f51a99cd34f16062a0e5c22bb3669a4d3a68651", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-blendpd.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendpd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#ifndef MASK\n+#define MASK 0x03\n+#endif\n+\n+static void\n+init_blendpd (double *src1, double *src2)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM * 2; i++)\n+    {\n+      src1[i] = i * i * sign;\n+      src2[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendpd (__m128d *dst, double *src1, double *src2)\n+{\n+  double tmp[2];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+\n+  for(j = 0; j < 2; j++)\n+    if ((MASK & (1 << j)))\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  __m128d x, y;\n+  union\n+    {\n+      __m128d x[NUM];\n+      double d[NUM * 2];\n+    } dst, src1, src2;\n+  union\n+    {\n+      __m128d x;\n+      double d[2];\n+    } src3;\n+  int i;\n+\n+  init_blendpd (src1.d, src2.d);\n+\n+  /* Check blendpd imm8, m128, xmm */\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blend_pd (src1.x[i], src2.x[i], MASK);\n+      if (check_blendpd (&dst.x[i], &src1.d[i * 2], &src2.d[i * 2]))\n+\tabort ();\n+    }\n+    \n+  /* Check blendpd imm8, xmm, xmm */\n+  src3.x = _mm_setzero_pd ();\n+\n+  x = _mm_blend_pd (dst.x[2], src3.x, MASK);\n+  y = _mm_blend_pd (src3.x, dst.x[2], MASK);\n+\n+  if (check_blendpd (&x, &dst.d[4], &src3.d[0]))\n+    abort ();\n+\n+  if (check_blendpd (&y, &src3.d[0], &dst.d[4]))\n+    abort ();\n+}"}, {"sha": "6e0d3d1528c4257acc92ea7fa5a86a2704f68349", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-blendps.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendps.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#ifndef MASK\n+#define MASK 0x0f\n+#endif\n+\n+static void\n+init_blendps (float *src1, float *src2)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM * 4; i++)\n+    {\n+      src1[i] = i * i * sign;\n+      src2[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendps (__m128 *dst, float *src1, float *src2)\n+{\n+  float tmp[4];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 4; j++)\n+    if ((MASK & (1 << j)))\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  __m128 x, y;\n+  union\n+    {\n+      __m128 x[NUM];\n+      float f[NUM * 4];\n+    } dst, src1, src2;\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } src3;\n+  int i;\n+\n+  init_blendps (src1.f, src2.f);\n+\n+  /* Check blendps imm8, m128, xmm */\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blend_ps (src1.x[i], src2.x[i], MASK); \n+      if (check_blendps (&dst.x[i], &src1.f[i * 4], &src2.f[i * 4]))\n+\tabort ();\n+    }\n+    \n+   /* Check blendps imm8, xmm, xmm */\n+  x = _mm_blend_ps (dst.x[2], src3.x, MASK);\n+  y = _mm_blend_ps (src3.x, dst.x[2], MASK);\n+\n+  if (check_blendps (&x, &dst.f[8], &src3.f[0]))\n+    abort ();\n+\n+  if (check_blendps (&y, &src3.f[0], &dst.f[8]))\n+    abort ();\n+}"}, {"sha": "3892f826b713b054e13583e6ea920e633f877861", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-blendvpd.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendvpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendvpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendvpd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+static void\n+init_blendvpd (double *src1, double *src2, double *mask)\n+{\n+  int i, msk, sign = 1; \n+\n+  msk = -1;\n+  for (i = 0; i < NUM * 2; i++)\n+    {\n+      if((i % 2) == 0)\n+\tmsk++;\n+      src1[i] = i* (i + 1) * sign;\n+      src2[i] = (i + 20) * sign;\n+      mask[i] = (i + 120) * i;\n+      if( (msk & (1 << (i % 2))))\n+\tmask[i] = -mask[i];\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendvpd (__m128d *dst, double *src1, double *src2,\n+\t\tdouble *mask)\n+{\n+  double tmp[2];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 2; j++)\n+    if (mask [j] < 0.0)\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128d x[NUM];\n+      double d[NUM * 2];\n+    } dst, src1, src2, mask;\n+  int i;\n+\n+  init_blendvpd (src1.d, src2.d, mask.d);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blendv_pd (src1.x[i], src2.x[i], mask.x[i]);\n+      if (check_blendvpd (&dst.x[i], &src1.d[i * 2], &src2.d[i * 2],\n+\t\t\t  &mask.d[i * 2]))\n+\tabort ();\n+    }\n+}"}, {"sha": "6fff77665958f536aa239daa37d63475aadcf988", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-blendvps.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendvps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendvps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-blendvps.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+static void\n+init_blendvps (float *src1, float *src2, float *mask)\n+{\n+  int i, msk, sign = 1; \n+\n+  msk = -1;\n+  for (i = 0; i < NUM * 4; i++)\n+    {\n+      if((i % 4) == 0)\n+\tmsk++;\n+      src1[i] = i* (i + 1) * sign;\n+      src2[i] = (i + 20) * sign;\n+      mask[i] = (i + 120) * i;\n+      if( (msk & (1 << (i % 4))))\n+\tmask[i] = -mask[i];\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendvps (__m128 *dst, float *src1, float *src2,\n+\t\tfloat *mask)\n+{\n+  float tmp[4];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 4; j++)\n+    if (mask [j] < 0.0)\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128 x[NUM];\n+      float f[NUM * 4];\n+    } dst, src1, src2, mask;\n+  int i;\n+\n+  init_blendvps (src1.f, src2.f, mask.f);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blendv_ps (src1.x[i], src2.x[i], mask.x[i]);\n+      if (check_blendvps (&dst.x[i], &src1.f[i * 4], &src2.f[i * 4],\n+\t\t\t  &mask.f[i * 4]))\n+\tabort ();\n+    }\n+}"}, {"sha": "78e80511c3c40301dc87e472aee83ffa5d256147", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-check.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-check.h?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,22 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"../auto-host.h\"\n+\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+static void sse4_1_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned long cpu_facilities;\n+ \n+  cpu_facilities = i386_cpuid_ecx ();\n+\n+  /* Run SSE4.1 test only if host has SSE4.1 support.  */\n+  if ((cpu_facilities & bit_SSE4_1))\n+    sse4_1_test ();\n+\n+  exit (0);\n+}"}, {"sha": "0a150542c6033001d64929f67a2cb24480882270", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-dppd-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dppd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dppd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dppd-1.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define lmskN  0x00\n+#define lmsk0  0x01\n+#define lmsk1  0x02\n+#define lmsk01 0x03\n+\n+#define hmskA  0x30\n+#define hmsk0  0x10\n+#define hmsk1  0x20\n+#define hmsk01 0x30\n+#define hmskN  0x00\n+\n+#ifndef HIMASK\n+#define HIMASK hmskA\n+#endif\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128d x;\n+      double d[2];\n+    } val1, val2, res[4];\n+  int masks[4];\n+  int i, j;\n+\n+  val1.d[0] = 2.;\n+  val1.d[1] = 3.;\n+\n+  val2.d[0] = 10.;\n+  val2.d[1] = 100.;\n+\n+  res[0].x = _mm_dp_pd (val1.x, val2.x, HIMASK | lmskN);\n+  res[1].x = _mm_dp_pd (val1.x, val2.x, HIMASK | lmsk0);\n+  res[2].x = _mm_dp_pd (val1.x, val2.x, HIMASK | lmsk1);\n+  res[3].x = _mm_dp_pd (val1.x, val2.x, HIMASK | lmsk01);\n+\n+  masks[0] = HIMASK | lmskN;\n+  masks[1] = HIMASK | lmsk0;\n+  masks[2] = HIMASK | lmsk1;\n+  masks[3] = HIMASK | lmsk01; \n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      double tmp = 0.;\n+\n+      for (j = 0; j < 2; j++)\n+\tif (HIMASK & (0x10 << j))\n+\t  tmp = tmp + (val1.d[j] * val2.d[j]);\n+\n+      for (j = 0; j < 2; j++)\n+\tif ((masks[i] & (1 << j)) && res[i].d[j] != tmp)\n+\t  abort ();\n+   }\n+} "}, {"sha": "2a8a0bcdcf8bb012fc482db97dc1fdfc8f0d1670", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-dppd-2.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dppd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dppd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dppd-2.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define lmskN  0x00\n+#define lmsk0  0x01\n+#define lmsk1  0x02\n+#define lmsk01 0x03\n+\n+#define hmskA  0x30\n+#define hmsk0  0x10\n+#define hmsk1  0x20\n+#define hmsk01 0x30\n+#define hmskN  0x00\n+\n+#ifndef HIMASK\n+#define HIMASK hmskA\n+#endif\n+\n+#ifndef LOMASK\n+#define LOMASK lmsk01\n+#endif\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128d x;\n+      double d[2];\n+    } val1[4], val2[4], res[4], chk[4];\n+  int i, j;\n+  double tmp;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      val1[i].d [0] = 2.;\n+      val1[i].d [1] = 3.;\n+\n+      val2[i].d [0] = 10.;\n+      val2[i].d [1] = 100.;\n+\n+      tmp = 0.;\n+      for (j = 0; j < 2; j++)\n+\tif ((HIMASK & (0x10 << j)))\n+\t  tmp += val1[i].d [j] * val2[i].d [j];\n+\n+      for (j = 0; j < 2; j++)\n+        if ((LOMASK & (1 << j)))\n+\t  chk[i].d[j] = tmp;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      res[i].x = _mm_dp_pd (val1[i].x, val2[i].x, HIMASK | LOMASK); \n+      if (memcmp (&res[i], &chk[i], sizeof (chk[i])))\n+\tabort ();\n+    }\n+}"}, {"sha": "08c008399a04c139302ed4c4173cd2d79d9c7982", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-dpps-1.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dpps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dpps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dpps-1.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define lmskN  0x00\n+#define lmsk0  0x01\n+#define lmsk1  0x02\n+#define lmsk2  0x04\n+#define lmsk3  0x08\n+#define lmsk01 0x03\n+#define lmsk02 0x05\n+#define lmsk03 0x09\n+#define lmsk12 0x06\n+#define lmsk13 0x0A\n+#define lmsk23 0x0C\n+#define lmskA  0x0F\n+\n+#define hmskN  0x00\n+#define hmskA  0xF0\n+#define hmsk0  0x10\n+#define hmsk1  0x20\n+#define hmsk2  0x40\n+#define hmsk3  0x80\n+#define hmsk01 0x30\n+#define hmsk02 0x50\n+#define hmsk03 0x90\n+#define hmsk12 0x60\n+#define hmsk13 0xA0\n+#define hmsk23 0xC0\n+\n+#ifndef HIMASK\n+#define HIMASK hmskA\n+#endif\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } val1, val2, res[16];\n+  int masks[16];\n+  int i, j;\n+\n+  val1.f[0] = 2.;\n+  val1.f[1] = 3.;\n+  val1.f[2] = 4.;\n+  val1.f[3] = 5.;\n+\n+  val2.f[0] = 10.;\n+  val2.f[1] = 100.;\n+  val2.f[2] = 1000.;\n+  val2.f[3] = 10000.;\n+\n+  res[0].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk0); \n+  res[1].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk1); \n+  res[2].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk2); \n+  res[3].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk3); \n+  res[4].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk01); \n+  res[5].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk02); \n+  res[6].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk03); \n+  res[7].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk12); \n+  res[8].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk13); \n+  res[9].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmsk23); \n+  res[10].x = _mm_dp_ps (val1.x, val2.x, HIMASK | (0x0F & ~lmsk0)); \n+  res[11].x = _mm_dp_ps (val1.x, val2.x, HIMASK | (0x0F & ~lmsk1)); \n+  res[12].x = _mm_dp_ps (val1.x, val2.x, HIMASK | (0x0F & ~lmsk2)); \n+  res[13].x = _mm_dp_ps (val1.x, val2.x, HIMASK | (0x0F & ~lmsk3)); \n+  res[14].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmskN); \n+  res[15].x = _mm_dp_ps (val1.x, val2.x, HIMASK | lmskA); \n+\n+  masks[0] = HIMASK | lmsk0; \n+  masks[1] = HIMASK | lmsk1; \n+  masks[2] = HIMASK | lmsk2; \n+  masks[3] = HIMASK | lmsk3; \n+  masks[4] = HIMASK | lmsk01; \n+  masks[5] = HIMASK | lmsk02; \n+  masks[6] = HIMASK | lmsk03; \n+  masks[7] = HIMASK | lmsk12; \n+  masks[8] = HIMASK | lmsk13; \n+  masks[9] = HIMASK | lmsk23; \n+  masks[10] = HIMASK | (0x0F & ~lmsk0); \n+  masks[11] = HIMASK | (0x0F & ~lmsk1); \n+  masks[12] = HIMASK | (0x0F & ~lmsk2); \n+  masks[13] = HIMASK | (0x0F & ~lmsk3); \n+  masks[14] = HIMASK | lmskN; \n+  masks[15] = HIMASK | lmskA; \n+\n+  for (i = 0; i <= 15; i++)\n+    {\n+      float tmp = 0.;\n+\n+      for (j = 0; j < 4; j++)\n+\tif ((HIMASK & (0x10 << j)))\n+\t  tmp += val1.f[j] * val2.f[j];\n+\n+      for (j = 0; j < 4; j++)\n+\tif ((masks[i] & (1 << j)) && res[i].f[j] != tmp)\n+\t  abort ();\n+   }\n+} "}, {"sha": "1c9a7c9342e76eed94737f2fefd5da6f19949019", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-dpps-2.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dpps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dpps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-dpps-2.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define lmskN  0x00\n+#define lmsk0  0x01\n+#define lmsk1  0x02\n+#define lmsk2  0x04\n+#define lmsk3  0x08\n+#define lmsk01 0x03\n+#define lmsk02 0x05\n+#define lmsk03 0x09\n+#define lmsk12 0x06\n+#define lmsk13 0x0A\n+#define lmsk23 0x0C\n+#define lmskA  0x0F\n+\n+#define hmskN  0x00\n+#define hmskA  0xF0\n+#define hmsk0  0x10\n+#define hmsk1  0x20\n+#define hmsk2  0x40\n+#define hmsk3  0x80\n+#define hmsk01 0x30\n+#define hmsk02 0x50\n+#define hmsk03 0x90\n+#define hmsk12 0x60\n+#define hmsk13 0xA0\n+#define hmsk23 0xC0\n+\n+#ifndef HIMASK\n+#define HIMASK hmskA\n+#endif\n+\n+#ifndef LOMASK\n+#define LOMASK lmskA\n+#endif\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } val1[16], val2[16], res[16], chk[16];\n+  int i,j;\n+  float tmp;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      val1[i].f[0] = 2.;\n+      val1[i].f[1] = 3.;\n+      val1[i].f[2] = 4.;\n+      val1[i].f[3] = 5.;\n+\n+      val2[i].f[0] = 10.;\n+      val2[i].f[1] = 100.;\n+      val2[i].f[2] = 1000.;\n+      val2[i].f[3] = 10000.;\n+\n+      tmp = 0.;\n+      for (j = 0; j < 4; j++)\n+        if ((HIMASK & (0x10 << j)))\n+\t  tmp += val1[i].f [j] * val2[i].f [j];\n+\n+      for (j = 0; j < 4; j++)\n+\tif ((LOMASK & (1 << j)))\n+\t  chk[i].f[j] = tmp;\n+    }\n+\n+   for (i = 0; i < 16; i++)\n+     {\n+       res[i].x = _mm_dp_ps (val1[i].x, val2[i].x, HIMASK | LOMASK);\n+       if (memcmp (&res[i], &chk[i], sizeof (chk[i])))\n+\t abort ();\n+     }\n+} "}, {"sha": "03a18dd1be42583d27df72d930dcd9804d8c438c", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-extractps.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-extractps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-extractps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-extractps.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+int masks[4];\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+#define msk2 0x02\n+#define msk3 0x03\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } val1, val2;\n+  union\n+    {\n+      int i;\n+      float f;\n+    } res[4];\n+  float resm[4];\n+  int i;\n+\n+  val1.f[0] = 10.;\n+  val1.f[1] = 2.;\n+  val1.f[2] = 3.;\n+  val1.f[3] = 40.;\n+\n+  val2.f[0] = 77.;\n+  val2.f[1] = 21.;\n+  val2.f[2] = 34.;\n+  val2.f[3] = 49.;\n+\n+  res[0].i = _mm_extract_ps (val1.x, msk0);\n+  res[1].i = _mm_extract_ps (val1.x, msk1);\n+  res[2].i = _mm_extract_ps (val1.x, msk2);\n+  res[3].i = _mm_extract_ps (val1.x, msk3);\n+\n+  _MM_EXTRACT_FLOAT (resm[0], val2.x, msk0);\n+  _MM_EXTRACT_FLOAT (resm[1], val2.x, msk1);\n+  _MM_EXTRACT_FLOAT (resm[2], val2.x, msk2);\n+  _MM_EXTRACT_FLOAT (resm[3], val2.x, msk3);\n+  \n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+\n+  for( i=0; i < 4; i++ )\n+    {\n+      if (res[i].f != val1.f[masks[i]])\n+\tabort ();\n+      if (resm[i] != val2.f[masks[i]])\n+\tabort ();\n+    }\n+}"}, {"sha": "eaaaf0d854443ef52c4b841eefec2ac6612417c1", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-insertps-1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-1.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x01\n+#define msk1 0x10\n+#define msk2 0x29\n+#define msk3 0x30\n+\n+#define msk4 0xFC\n+#define msk5 0x05\n+#define msk6 0x0A\n+#define msk7 0x0F\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } res[8], val1, val2, tmp;\n+  int masks[8];\n+  int i, j;\n+\n+  val2.f[0] = 55.0;\n+  val2.f[1] = 55.0;\n+  val2.f[2] = 55.0;\n+  val2.f[3] = 55.0;\n+\n+  val1.f[0] = 1.;\n+  val1.f[1] = 2.;\n+  val1.f[2] = 3.;\n+  val1.f[3] = 4.;\n+\n+  res[0].x = _mm_insert_ps (val2.x, val1.x, msk0);\n+  res[1].x = _mm_insert_ps (val2.x, val1.x, msk1);\n+  res[2].x = _mm_insert_ps (val2.x, val1.x, msk2);\n+  res[3].x = _mm_insert_ps (val2.x, val1.x, msk3);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+\n+  for (i = 0; i < 4; i++)\n+    res[i + 4].x = _mm_insert_ps (val2.x, val1.x, msk4);\n+\n+  masks[4] = msk4;\n+  masks[5] = msk4;\n+  masks[6] = msk4;\n+  masks[7] = msk4;\n+\n+  for (i=0; i < 8; i++)\n+    {\n+      tmp = val2;\n+      tmp.f[(masks[i] & 0x30) >> 4] = val1.f[(masks[i] & 0xC0) >> 6];\n+\n+      for (j = 0; j < 4; j++)\n+\tif (masks[i] & (0x1 << j))\n+\t  tmp.f[j] = 0.f;\n+\n+      if (memcmp (&res[i], &tmp, sizeof (tmp)))\n+\tabort ();\n+    }\n+} "}, {"sha": "fa9e277b8ea4f1298e3951671c2eaadc695b1257", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-insertps-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-2.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } vals[4], val;\n+  int i, j;\n+\n+  val.f[0]= 1.;\n+  val.f[1]= 2.;\n+  val.f[2]= 3.;\n+  val.f[3]= 4.;\n+\n+  vals[0].x = _MM_PICK_OUT_PS (val.x, 0);\n+  vals[1].x = _MM_PICK_OUT_PS (val.x, 1);\n+  vals[2].x = _MM_PICK_OUT_PS (val.x, 2);\n+  vals[3].x = _MM_PICK_OUT_PS (val.x, 3);\n+\n+  for (i = 0; i < 4; i++)\n+    for (j = 0; j < 4; j++)\n+      if ((j != 0 && vals[i].f[j] != 0)\n+\t  || (j == 0 && vals[i].f[j] != val.f[i]))\n+\tabort ();\n+\n+  if (_MM_MK_INSERTPS_NDX(0, 0, 0x1) != 0x01\n+      || _MM_MK_INSERTPS_NDX(0, 1, 0x2) != 0x12\n+      || _MM_MK_INSERTPS_NDX(0, 2, 0x3) != 0x23\n+      || _MM_MK_INSERTPS_NDX(0, 3, 0x4) != 0x34\n+      || _MM_MK_INSERTPS_NDX(1, 0, 0x5) != 0x45\n+      || _MM_MK_INSERTPS_NDX(1, 1, 0x6) != 0x56\n+      || _MM_MK_INSERTPS_NDX(2, 2, 0x7) != 0xA7\n+      || _MM_MK_INSERTPS_NDX(3, 3, 0x8) != 0xF8)\n+    abort ();\n+} "}, {"sha": "a08e317c95afb8121e436582bacaffe2987a1240", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-movntdqa.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-movntdqa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-movntdqa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-movntdqa.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+static void\n+init_movntdqa (int *src)\n+{\n+  int i, j, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    for (j = 0; j < 4; j++)\n+      {\n+\tsrc[i * 4 + j] = j * i * i * sign;\n+\tsign = -sign;\n+      }\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM];\n+      int i[NUM * 4];\n+    } dst, src;\n+  int i;\n+\n+  init_movntdqa (src.i);\n+\n+  for (i = 0; i < NUM; i++)\n+    dst.x[i] = _mm_stream_load_si128 (&src.x[i]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (memcmp (&dst.x[i], &src.x[i], sizeof(src.x[i])))\n+      abort ();\n+}"}, {"sha": "f327c145b278ee95ce2bd161ba2f4981fa7dcf76", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-mpsadbw.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-mpsadbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-mpsadbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-mpsadbw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0xC0\n+#define msk1 0x01\n+#define msk2 0xF2\n+#define msk3 0x03\n+#define msk4 0x84\n+#define msk5 0x05\n+#define msk6 0xE6\n+#define msk7 0x67\n+\n+static __m128i\n+compute_mpsadbw (unsigned char *v1, unsigned char *v2, int mask)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned short s[8];\n+    } ret;\n+  unsigned char s[4];\n+  int i, j;\n+  int offs1, offs2;\n+\n+  offs2 = 4 * (mask & 3);\n+  for (i = 0; i < 4; i++)\n+    s[i] = v2[offs2 + i];\n+\n+  offs1 = 4 * ((mask & 4) >> 2);\n+  for (j = 0; j < 8; j++)\n+    {\n+      ret.s[j] = 0;\n+      for (i = 0; i < 4; i++)\n+\tret.s[j] += abs (v1[offs1 + j + i] - s[i]);\n+    }\n+\n+  return ret.x;\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+      unsigned char c[16];\n+    } val1, val2, val3 [8];\n+  __m128i res[8], tmp;\n+  unsigned char masks[8];\n+  int i;\n+\n+  val1.i[0] = 0x35251505;\n+  val1.i[1] = 0x75655545;\n+  val1.i[2] = 0xB5A59585;\n+  val1.i[3] = 0xF5E5D5C5;\n+\n+  val2.i[0] = 0x31211101;\n+  val2.i[1] = 0x71615141;\n+  val2.i[2] = 0xB1A19181;\n+  val2.i[3] = 0xF1E1D1C1;\n+\n+  for (i=0; i < 8; i++)\n+    switch (i % 3)\n+      {\n+      case 1:\n+\tval3[i].i[0] = 0xF1E1D1C1;\n+\tval3[i].i[1] = 0xB1A19181;\n+\tval3[i].i[2] = 0x71615141;\n+\tval3[i].i[3] = 0x31211101;\n+\tbreak;\n+      default:\n+\tval3[i].x = val2.x;\n+\tbreak;\n+      }\n+\n+  /* Check mpsadbw imm8, xmm, xmm.  */\n+  res[0] = _mm_mpsadbw_epu8 (val1.x, val2.x, msk0);\n+  res[1] = _mm_mpsadbw_epu8 (val1.x, val2.x, msk1);\n+  res[2] = _mm_mpsadbw_epu8 (val1.x, val2.x, msk2);\n+  res[3] = _mm_mpsadbw_epu8 (val1.x, val2.x, msk3);\n+  res[4] = _mm_mpsadbw_epu8 (val1.x, val2.x, msk4);\n+  res[5] = _mm_mpsadbw_epu8 (val1.x, val2.x, msk5);\n+  res[6] = _mm_mpsadbw_epu8 (val1.x, val2.x, msk6);\n+  res[7] = _mm_mpsadbw_epu8 (val1.x, val2.x, msk7);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+\n+  for (i=0; i < 8; i++)\n+    {\n+      tmp = compute_mpsadbw (val1.c, val2.c, masks[i]);\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check mpsadbw imm8, m128, xmm.  */\n+  for (i=0; i < 8; i++)\n+    {\n+      res[i] = _mm_mpsadbw_epu8 (val1.x, val3[i].x, msk4);\n+      masks[i] = msk4;\n+    }\n+\n+  for (i=0; i < 8; i++)\n+    {\n+      tmp = compute_mpsadbw (val1.c, val3[i].c, masks[i]);\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}, {"sha": "d21f4463863a566f90fb4e7bf655d8630d93924b", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-packusdw.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-packusdw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-packusdw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-packusdw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static unsigned short\n+int_to_ushort (int iVal)\n+{\n+  unsigned short sVal;\n+\n+  if (iVal < 0)\n+    sVal = 0;\n+  else if (iVal > 0xffff)\n+    sVal = 0xffff;\n+  else sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+    } src1, src2;\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned short s[NUM * 2];\n+    } dst;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_packus_epi32 (src1.x [i / 4], src2.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i ++)\n+    {\n+      int dstIndex;\n+      unsigned short sVal;\n+\n+      sVal = int_to_ushort (src1.i[i]);\n+      dstIndex = (i % 4) + (i / 4) * 8;\n+      if (sVal != dst.s[dstIndex])\n+\tabort ();\n+\n+      sVal = int_to_ushort (src2.i[i]);\n+      dstIndex += 4;\n+      if (sVal != dst.s[dstIndex])\n+\tabort ();\n+    }\n+}"}, {"sha": "fe93a783b6a0848ffe32519f4ce51cc95e187058", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pblendvb.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pblendvb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pblendvb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pblendvb.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+static void\n+init_pblendvb (unsigned char *src1, unsigned char *src2,\n+\t       unsigned char *mask)\n+{\n+  int i, sign = 1; \n+\n+  for (i = 0; i < NUM * 16; i++)\n+    {\n+      src1[i] = i* i * sign;\n+      src2[i] = (i + 20) * sign;\n+      mask[i] = (i % 3) + ((i * (14 + sign))\n+\t\t\t   ^ (src1[i] | src2[i] | (i*3)));\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_pblendvb (__m128i *dst, unsigned char *src1,\n+\t\tunsigned char *src2, unsigned char *mask)\n+{\n+  unsigned char tmp[16];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 16; j++)\n+    if (mask [j] & 0x80)\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM];\n+      unsigned char c[NUM * 16];\n+    } dst, src1, src2, mask;\n+  int i;\n+\n+  init_pblendvb (src1.c, src2.c, mask.c);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blendv_epi8 (src1.x[i], src2.x[i], mask.x[i]);\n+      if (check_pblendvb (&dst.x[i], &src1.c[i * 16], &src2.c[i * 16],\n+\t\t\t  &mask.c[i * 16]))\n+\tabort ();\n+    }\n+}"}, {"sha": "07e59e8a24d31a3a507a8a1f8406509af0afbf7b", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pblendw.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pblendw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pblendw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pblendw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#ifndef MASK\n+#define MASK 0x0f\n+#endif\n+\n+static void\n+init_pblendw (short *src1, short *src2)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM * 8; i++)\n+    {\n+      src1[i] = i * i * sign;\n+      src2[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_pblendw (__m128i *dst, short *src1, short *src2)\n+{\n+  short tmp[8];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 8; j++)\n+    if ((MASK & (1 << j)))\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  __m128i x, y;\n+  union\n+    {\n+      __m128i x[NUM];\n+      short s[NUM * 8];\n+    } dst, src1, src2;\n+  union\n+    {\n+      __m128i x;\n+      short s[8];\n+    } src3;\n+  int i;\n+\n+  init_pblendw (src1.s, src2.s);\n+\n+  /* Check pblendw imm8, m128, xmm */\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blend_epi16 (src1.x[i], src2.x[i], MASK); \n+      if (check_pblendw (&dst.x[i], &src1.s[i * 8], &src2.s[i * 8]))\n+\tabort ();\n+    }\n+    \n+   /* Check pblendw imm8, xmm, xmm */\n+  src3.x = _mm_setzero_si128 ();\n+\n+  x = _mm_blend_epi16 (dst.x[2], src3.x, MASK);\n+  y = _mm_blend_epi16 (src3.x, dst.x[2], MASK);\n+\n+  if (check_pblendw (&x, &dst.s[16], &src3.s[0]))\n+    abort ();\n+\n+  if (check_pblendw (&y, &src3.s[0], &dst.s[16]))\n+    abort ();\n+}"}, {"sha": "34653c4f4c0001486bdccf8e6d8164922cef0e06", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pcmpeqq.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pcmpeqq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pcmpeqq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pcmpeqq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+    } dst, src1, src2;\n+  int i, sign=1;\n+  long long is_eq;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.ll[i] = i * i * sign;\n+      src2.ll[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cmpeq_epi64(src1.x [i / 2], src2.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      is_eq = src1.ll[i] == src2.ll[i] ? 0xffffffffffffffffLL : 0LL;\n+      if (is_eq != dst.ll[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "dc07d02b93daa55babc18757f3f7e5f9e95bca2b", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pextrb.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrb.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define msk0   0\n+#define msk1   1\n+#define msk2   2\n+#define msk3   3\n+#define msk4   4\n+#define msk5   5\n+#define msk6   6\n+#define msk7   7\n+#define msk8   8\n+#define msk9   9\n+#define msk10 10\n+#define msk11 11\n+#define msk12 12\n+#define msk13 13\n+#define msk14 14\n+#define msk15 15\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      int i[4];\n+      char c[16];\n+    } val1;\n+  int res[16], masks[16];\n+  int i;\n+\n+  val1.i[0] = 0x04030201;\n+  val1.i[1] = 0x08070605;\n+  val1.i[2] = 0x0C0B0A09;\n+  val1.i[3] = 0x100F0E0D;\n+\n+  res[0] = _mm_extract_epi8 (val1.x, msk0);\n+  res[1] = _mm_extract_epi8 (val1.x, msk1);\n+  res[2] = _mm_extract_epi8 (val1.x, msk2);\n+  res[3] = _mm_extract_epi8 (val1.x, msk3);\n+  res[4] = _mm_extract_epi8 (val1.x, msk4);\n+  res[5] = _mm_extract_epi8 (val1.x, msk5);\n+  res[6] = _mm_extract_epi8 (val1.x, msk6);\n+  res[7] = _mm_extract_epi8 (val1.x, msk7);\n+  res[8] = _mm_extract_epi8 (val1.x, msk8);\n+  res[9] = _mm_extract_epi8 (val1.x, msk9);\n+  res[10] = _mm_extract_epi8 (val1.x, msk10);\n+  res[11] = _mm_extract_epi8 (val1.x, msk11);\n+  res[12] = _mm_extract_epi8 (val1.x, msk12);\n+  res[13] = _mm_extract_epi8 (val1.x, msk13);\n+  res[14] = _mm_extract_epi8 (val1.x, msk14);\n+  res[15] = _mm_extract_epi8 (val1.x, msk15);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+  masks[8] = msk8;\n+  masks[9] = msk9;\n+  masks[10] = msk10;\n+  masks[11] = msk11;\n+  masks[12] = msk12;\n+  masks[13] = msk13;\n+  masks[14] = msk14;\n+  masks[15] = msk15;\n+\n+  for (i = 0; i < 16; i++)\n+    if (res[i] != val1.c [masks[i]])\n+      abort ();\n+}"}, {"sha": "b078ca26af6965a6c36a83af316ab1532fc50b26", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pextrd.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define msk0   0\n+#define msk1   1\n+#define msk2   2\n+#define msk3   3\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      int i[4];\n+    } val1;\n+  int res[4], masks[4];\n+  int i;\n+\n+  val1.i[0] = 0x04030201;\n+  val1.i[1] = 0x08070605;\n+  val1.i[2] = 0x0C0B0A09;\n+  val1.i[3] = 0x100F0E0D;\n+\n+  res[0] = _mm_extract_epi32 (val1.x, msk0);\n+  res[1] = _mm_extract_epi32 (val1.x, msk1);\n+  res[2] = _mm_extract_epi32 (val1.x, msk2);\n+  res[3] = _mm_extract_epi32 (val1.x, msk3);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+\n+  for (i = 0; i < 4; i++)\n+    if (res[i] != val1.i [masks[i]])\n+      abort ();\n+}"}, {"sha": "999ed8f063499354d92d57190991e87223eeb1df", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pextrq.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define msk0   0\n+#define msk1   1\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      long long ll[2];\n+    } val1;\n+  long long res[2];\n+  int masks[2];\n+  int i;\n+\n+  val1.ll[0] = 0x0807060504030201LL;\n+  val1.ll[1] = 0x100F0E0D0C0B0A09LL;\n+\n+  res[0] = _mm_extract_epi64 (val1.x, msk0);\n+  res[1] = _mm_extract_epi64 (val1.x, msk1);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+\n+  for (i = 0; i < 2; i++)\n+    if (res[i] != val1.ll [masks[i]])\n+      abort ();\n+}"}, {"sha": "ebfac1a6ad3ef00d926e953d548913aa5e296fa6", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pextrw.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pextrw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define msk0   0\n+#define msk1   1\n+#define msk2   2\n+#define msk3   3\n+#define msk4   4\n+#define msk5   5\n+#define msk6   6\n+#define msk7   7\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      int i[4];\n+      short s[8];\n+    } val1;\n+  int res[8], masks[8];\n+  int i;\n+\n+  val1.i[0] = 0x04030201;\n+  val1.i[1] = 0x08070605;\n+  val1.i[2] = 0x0C0B0A09;\n+  val1.i[3] = 0x100F0E0D;\n+\n+  res[0] = _mm_extract_epi16 (val1.x, msk0);\n+  res[1] = _mm_extract_epi16 (val1.x, msk1);\n+  res[2] = _mm_extract_epi16 (val1.x, msk2);\n+  res[3] = _mm_extract_epi16 (val1.x, msk3);\n+  res[4] = _mm_extract_epi16 (val1.x, msk4);\n+  res[5] = _mm_extract_epi16 (val1.x, msk5);\n+  res[6] = _mm_extract_epi16 (val1.x, msk6);\n+  res[7] = _mm_extract_epi16 (val1.x, msk7);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+\n+  for (i = 0; i < 8; i++)\n+    if (res[i] != val1.s [masks[i]])\n+      abort ();\n+}"}, {"sha": "43f1cade760e85c4b967fdcfa84571a1ceac77ab", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-phminposuw.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-phminposuw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM/8];\n+      unsigned short s[NUM];\n+    } src;\n+  unsigned short minVal[NUM/8];\n+  int minInd[NUM/8];\n+  unsigned short minValScalar, minIndScalar;\n+  int i, j, res;\n+\n+  for (i = 0; i < NUM; i++)\n+    src.s[i] = i * i / (i + i / 3.14 + 1.0);\n+\n+  for (i = 0, j = 0; i < NUM; i += 8, j++)\n+    {\n+      res = _mm_cvtsi128_si32 (_mm_minpos_epu16 (src.x [i/8]));\n+      minVal[j] = res & 0xffff;\n+      minInd[j] = (res >> 16) & 0x3;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    {\n+      minValScalar = src.s[i];\n+      minIndScalar = 0;\n+\n+      for (j = i + 1; j < i + 8; j++)\n+\tif (minValScalar > src.s[j])\n+\t  {\n+\t    minValScalar = src.s[j];\n+\t    minIndScalar = j - i;\n+\t  }\n+\n+      if (minValScalar != minVal[i/8] && minIndScalar != minInd[i/8])\n+\tabort ();\n+    }\n+}"}, {"sha": "2e886c59d92932accd1412a8bb6577e16c5c1938", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pinsrb.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrb.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+#define msk2 0x02\n+#define msk3 0x03\n+#define msk4 0x04\n+#define msk5 0x05\n+#define msk6 0x06\n+#define msk7 0x07\n+#define msk8 0x08\n+#define msk9 0x09\n+#define mskA 0x0A\n+#define mskB 0x0B\n+#define mskC 0x0C\n+#define mskD 0x0D\n+#define mskE 0x0E\n+#define mskF 0x0F\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+      unsigned char c[16];\n+    } res [16], val, tmp;\n+  int masks[16];\n+  unsigned char ins[4] = { 3, 4, 5, 6 };\n+  int i;\n+\n+  val.i[0] = 0x35251505;\n+  val.i[1] = 0x75655545;\n+  val.i[2] = 0xB5A59585;\n+  val.i[3] = 0xF5E5D5C5;\n+\n+  /* Check pinsrb imm8, r32, xmm.  */\n+  res[0].x = _mm_insert_epi8 (val.x, ins[0], msk0);\n+  res[1].x = _mm_insert_epi8 (val.x, ins[0], msk1);\n+  res[2].x = _mm_insert_epi8 (val.x, ins[0], msk2);\n+  res[3].x = _mm_insert_epi8 (val.x, ins[0], msk3);\n+  res[4].x = _mm_insert_epi8 (val.x, ins[0], msk4);\n+  res[5].x = _mm_insert_epi8 (val.x, ins[0], msk5);\n+  res[6].x = _mm_insert_epi8 (val.x, ins[0], msk6);\n+  res[7].x = _mm_insert_epi8 (val.x, ins[0], msk7);\n+  res[8].x = _mm_insert_epi8 (val.x, ins[0], msk8);\n+  res[9].x = _mm_insert_epi8 (val.x, ins[0], msk9);\n+  res[10].x = _mm_insert_epi8 (val.x, ins[0], mskA);\n+  res[11].x = _mm_insert_epi8 (val.x, ins[0], mskB);\n+  res[12].x = _mm_insert_epi8 (val.x, ins[0], mskC);\n+  res[13].x = _mm_insert_epi8 (val.x, ins[0], mskD);\n+  res[14].x = _mm_insert_epi8 (val.x, ins[0], mskE);\n+  res[15].x = _mm_insert_epi8 (val.x, ins[0], mskF);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+  masks[8] = msk8;\n+  masks[9] = msk9;\n+  masks[10] = mskA;\n+  masks[11] = mskB;\n+  masks[12] = mskC;\n+  masks[13] = mskD;\n+  masks[14] = mskE;\n+  masks[15] = mskF;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.c[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check pinsrb imm8, m8, xmm.  */\n+  for (i = 0; i < 16; i++)\n+    {\n+      res[i].x = _mm_insert_epi8 (val.x, ins[i % 4], msk0);\n+      masks[i] = msk0;\n+    }\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.c[masks[i]] = ins[i % 4];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}, {"sha": "85c39a011f86f06e26ac5786856dd567e3470dc2", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pinsrd.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+#define msk2 0x02\n+#define msk3 0x03\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } res [4], val, tmp;\n+  static unsigned int ins[4] = { 3, 4, 5, 6 };\n+  int masks[4];\n+  int i;\n+\n+  val.i[0] = 55;\n+  val.i[1] = 55;\n+  val.i[2] = 55;\n+  val.i[3] = 55;\n+\n+  /* Check pinsrd imm8, r32, xmm.  */\n+  res[0].x = _mm_insert_epi32 (val.x, ins[0], msk0);\n+  res[1].x = _mm_insert_epi32 (val.x, ins[0], msk1);\n+  res[2].x = _mm_insert_epi32 (val.x, ins[0], msk2);\n+  res[3].x = _mm_insert_epi32 (val.x, ins[0], msk3);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.i[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check pinsrd imm8, m32, xmm.  */\n+  for (i = 0; i < 4; i++)\n+    {\n+      res[i].x = _mm_insert_epi32 (val.x, ins[i], msk0);\n+      masks[i] = msk0;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.i[masks[i]] = ins[i];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}, {"sha": "2aa25a0bed5d25305b17f87ea12c855b52f91bce", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pinsrq.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pinsrq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned long long ll[2];\n+    } res [4], val, tmp;\n+  int masks[4];\n+  static unsigned long long ins[2] =\n+    { 0xAABBAABBAABBAABBLL, 0xCCDDCCDDCCDDCCDDLL };\n+  int i;\n+\n+  val.ll[0] = 0x0807060504030201LL;\n+  val.ll[1] = 0x100F0E0D0C0B0A09LL;\n+\n+  /* Check pinsrq imm8, r64, xmm.  */\n+  res[0].x = _mm_insert_epi64 (val.x, ins[0], msk0);\n+  res[1].x = _mm_insert_epi64 (val.x, ins[0], msk1);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.ll[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check pinsrq imm8, m64, xmm.  */\n+  for (i = 0; i < 2; i++)\n+    {\n+      res[i].x = _mm_insert_epi64 (val.x, ins[i], msk0);\n+      masks[i] = msk0;\n+    }\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.ll[masks[i]] = ins[i];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}, {"sha": "116f164a6c59284ed6841932bcae79e60f48eb6f", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmaxsb.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxsb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxsb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxsb.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 1024\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 16];\n+      char i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  char max;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 16)\n+    dst.x[i / 16] = _mm_max_epi8 (src1.x[i / 16], src2.x[i / 16]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      max = src1.i[i] <= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (max != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "2f8dfedc2b6abb91941c597c2f73341fa8082dd6", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmaxsd.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxsd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  int max;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_max_epi32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      max = src1.i[i] <= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (max != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "d8f5d9a090e9bdc604dc0c0f125099616c641d8c", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmaxud.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxud.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxud.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxud.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned int i[NUM];\n+    } dst, src1, src2;\n+  int i;\n+  unsigned int max;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i;\n+      src2.i[i] = i + 20;\n+      if ((i % 4))\n+\tsrc2.i[i] |= 0x80000000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_max_epu32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      max = src1.i[i] <= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (max != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "b0330cbb0f9082c59759e364498920146d06a138", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmaxuw.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmaxuw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 8];\n+      unsigned short i[NUM];\n+    } dst, src1, src2;\n+  int i;\n+  unsigned short max;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i;\n+      src2.i[i] = i + 20;\n+      if ((i % 8))\n+\tsrc2.i[i] |= 0x8000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    dst.x[i / 8] = _mm_max_epu16 (src1.x[i / 8], src2.x[i / 8]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      max = src1.i[i] <= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (max != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "35ad78f82c0b94b4b6bacf1d8a6f9100425162db", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pminsb.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminsb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminsb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminsb.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 1024\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 16];\n+      char i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  char min;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 16)\n+    dst.x[i / 16] = _mm_min_epi8 (src1.x[i / 16], src2.x[i / 16]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      min = src1.i[i] >= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (min != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "62485c4b81e26d2e77af4fc9e12f74b886ae2603", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pminsd.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminsd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  int min;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_min_epi32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      min = src1.i[i] >= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (min != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "82e1012bca801f683b74a5e5f57e2a33a94fd03e", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pminud.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminud.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminud.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminud.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned int i[NUM];\n+    } dst, src1, src2;\n+  int i;\n+  unsigned int min;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i;\n+      src2.i[i] = i + 20;\n+      if ((i % 4))\n+\tsrc2.i[i] |= 0x80000000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_min_epu32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      min = src1.i[i] >= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (min != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "0edff3c17f79e7aec30ebaf62e2b993a23060297", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pminuw.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pminuw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 8];\n+      unsigned short i[NUM];\n+    } dst, src1, src2;\n+  int i;\n+  unsigned short min;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i;\n+      src2.i[i] = i + 20;\n+      if ((i % 8))\n+\tsrc2.i[i] |= 0x8000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    dst.x[i / 8] = _mm_min_epu16 (src1.x[i / 8], src2.x[i / 8]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      min = src1.i[i] >= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (min != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "9443ecfc941b715d88f02760ea77a14ca8380df5", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovsxbd.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+      char c[NUM * 4];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 4) + (i / 4) * 16] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x [i / 4] = _mm_cvtepi8_epi32 (src.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 4) + (i / 4) * 16] != dst.i[i])\n+      abort ();\n+}"}, {"sha": "11c5c82ac4c3989f6d2207c93d349994363992e8", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovsxbq.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+      char c[NUM * 8];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 2) + (i / 2) * 16] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepi8_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 2) + (i / 2) * 16] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "6c6504c19f878e40fe3f523eb1f1c2d318f255a4", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovsxbw.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxbw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 8];\n+      short s[NUM];\n+      char c[NUM * 2];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 8) + (i / 8) * 16] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    dst.x [i / 8] = _mm_cvtepi8_epi16 (src.x [i / 8]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 8) + (i / 8) * 16] != dst.s[i])\n+      abort ();\n+}"}, {"sha": "f27b369ff23ef7b9e2c3cf19d309d523b54b6f41", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovsxdq.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxdq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxdq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxdq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+      int i[NUM * 2];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.i[(i % 2) + (i / 2) * 4] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepi32_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.i[(i % 2) + (i / 2) * 4] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "fbd0e5f6323c5b325a39d1d7bd54c648eef57408", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovsxwd.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxwd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+      short s[NUM * 2];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.s[(i % 4) + (i / 4) * 8] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x [i / 4] = _mm_cvtepi16_epi32 (src.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.s[(i % 4) + (i / 4) * 8] != dst.i[i])\n+      abort ();\n+}"}, {"sha": "67ab24c2f3ca33dd63e0e89db8040dfcdf1b3f27", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovsxwq.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxwq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxwq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovsxwq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+      short s[NUM * 4];\n+    } dst, src;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.s[(i % 2) + (i / 2) * 8] = i * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepi16_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.s[(i % 2) + (i / 2) * 8] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "1319b524508d49447d58faa635fdaa8de786e2ee", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovzxbd.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned int i[NUM];\n+      unsigned char c[NUM * 4];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 4) + (i / 4) * 16] = i * i;\n+      if ((i % 4))\n+\tsrc.c[(i % 4) + (i / 4) * 16] |= 0x80;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x [i / 4] = _mm_cvtepu8_epi32 (src.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 4) + (i / 4) * 16] != dst.i[i])\n+      abort ();\n+}"}, {"sha": "53a880ca622b0d28216ee7ab49366eba9769cad0", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovzxbq.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      unsigned long long ll[NUM];\n+      unsigned char c[NUM * 8];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 2) + (i / 2) * 16] = i * i;\n+      if ((i % 2))\n+\tsrc.c[(i % 2) + (i / 2) * 16] |= 0x80;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepu8_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 2) + (i / 2) * 16] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "8f9f9f18aee10d1e80cf622897309ff1111ed89f", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovzxbw.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxbw.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 8];\n+      unsigned short s[NUM];\n+      unsigned char c[NUM * 2];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.c[(i % 8) + (i / 8) * 16] = i * i;\n+      if ((i % 4))\n+\tsrc.c[(i % 8) + (i / 8) * 16] |= 0x80;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    dst.x [i / 8] = _mm_cvtepu8_epi16 (src.x [i / 8]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.c[(i % 8) + (i / 8) * 16] != dst.s[i])\n+      abort ();\n+}"}, {"sha": "e6df123e191068dd78e462add2e816d3966de509", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovzxdq.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxdq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxdq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxdq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      unsigned long long ll[NUM];\n+      unsigned int i[NUM * 2];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.i[(i % 2) + (i / 2) * 4] = i * i;\n+      if ((i % 2))\n+        src.i[(i % 2) + (i / 2) * 4] |= 0x80000000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepu32_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.i[(i % 2) + (i / 2) * 4] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "840c2fc81969742e87413d19364533b865753e96", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovzxwd.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxwd.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned int i[NUM];\n+      unsigned short s[NUM * 2];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.s[(i % 4) + (i / 4) * 8] = i * i;\n+      if ((i % 4))\n+\tsrc.s[(i % 4) + (i / 4) * 8] |= 0x8000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x [i / 4] = _mm_cvtepu16_epi32 (src.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.s[(i % 4) + (i / 4) * 8] != dst.i[i])\n+      abort ();\n+}"}, {"sha": "2f9a95251859a34cecbcf0fba52531da12293669", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmovzxwq.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxwq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxwq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmovzxwq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 128\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      unsigned long long ll[NUM];\n+      unsigned short s[NUM * 4];\n+    } dst, src;\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src.s[(i % 2) + (i / 2) * 8] = i * i;\n+      if ((i % 2))\n+\tsrc.s[(i % 2) + (i / 2) * 8] |= 0x8000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cvtepu16_epi64 (src.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    if (src.s[(i % 2) + (i / 2) * 8] != dst.ll[i])\n+      abort ();\n+}"}, {"sha": "cd85a17a71c30f2cd05c02cefe0965f06e42deca", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmuldq.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmuldq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmuldq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmuldq.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+    } dst;\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      int i[NUM * 2];\n+    } src1, src2;\n+  int i, sign = 1;\n+  long long value;\n+\n+  for (i = 0; i < NUM; i += 2)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x[i / 2] = _mm_mul_epi32 (src1.x[i / 2], src2.x[i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      value = (long long) src1.i[i * 2] * (long long) src2.i[i * 2];\n+      if (value != dst.ll[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "136b712956e67f74f511012ecbc575eb85ebd38f", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pmulld.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmulld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmulld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pmulld.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  int value;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_mullo_epi32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      value = src1.i[i] * src2.i[i];\n+      if (value != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "246caeecb1589a6d6b3e6b03e6c316f78dab243a", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ptest-1.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-1.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+static int\n+make_ptestz (__m128i m, __m128i v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned char c[16];\n+    } val, mask;\n+  int i, z;\n+\n+  mask.x = m;\n+  val.x = v;\n+\n+  z = 1;\n+  for (i = 0; i < 16; i++)\n+    if ((mask.c[i] & val.c[i]))\n+      {\n+\tz = 0;\n+\tbreak;\n+      }\n+  return z;\n+}\n+\n+static int\n+make_ptestc (__m128i m, __m128i v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned char c[16];\n+    } val, mask;\n+  int i, c;\n+\n+  mask.x = m;\n+  val.x = v;\n+\n+  c = 1;\n+  for (i = 0; i < 16; i++)\n+    if ((val.c[i] & ~mask.c[i]))\n+      {\n+\tc = 0;\n+\tbreak;\n+      }\n+  return c;\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } val[4];\n+  int i, j, l;\n+  int res[32];\n+\n+  val[0].i[0] = 0x11111111;\n+  val[0].i[1] = 0x00000000;\n+  val[0].i[2] = 0x00000000;\n+  val[0].i[3] = 0x11111111;\n+    \n+  val[1].i[0] = 0x00000000;\n+  val[1].i[1] = 0x11111111;\n+  val[1].i[2] = 0x11111111;\n+  val[1].i[3] = 0x00000000;\n+\n+  val[2].i[0] = 0;\n+  val[2].i[1] = 0;\n+  val[2].i[2] = 0;\n+  val[2].i[3] = 0;\n+\n+  val[3].i[0] = 0xffffffff;\n+  val[3].i[1] = 0xffffffff;\n+  val[3].i[2] = 0xffffffff;\n+  val[3].i[3] = 0xffffffff;\n+\n+  l = 0;\n+  for(i = 0; i < 4; i++)\n+    for(j = 0; j < 4; j++)\n+      {\n+\tres[l++] = _mm_testz_si128 (val[j].x, val[i].x);\n+\tres[l++] = _mm_testc_si128 (val[j].x, val[i].x);\n+      }\n+\n+  l = 0;\n+  for(i = 0; i < 4; i++)\n+    for(j = 0; j < 4; j++)\n+      {\n+\tif (res[l++] != make_ptestz (val[j].x, val[i].x))\n+\t  abort ();\n+\tif (res[l++] != make_ptestc (val[j].x, val[i].x))\n+\t  abort ();\n+      }\n+\n+  if (res[2] != _mm_testz_si128 (val[1].x, val[0].x))\n+    abort ();\n+\n+  if (res[3] != _mm_testc_si128 (val[1].x, val[0].x))\n+    abort ();\n+}"}, {"sha": "8f12217680f04c26be600e7621f31da4686b2a76", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ptest-2.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-2.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+static int\n+make_ptestnzc (__m128i m, __m128i v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned char c[16];\n+    } val, mask;\n+  int i, z, c;\n+\n+  mask.x = m;\n+  val.x = v;\n+\n+  z = c = 1;\n+  for (i = 0; i < 16; i++)\n+    {\n+      if ((mask.c[i] & val.c[i]))\n+\tz = 0;\n+      if ((~mask.c[i] & val.c[i]))\n+\tc = 0;\n+    }\n+\n+  return (z == 0 && c == 0) ? 1 : 0;\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } val[4];\n+  int i, j, l;\n+  int res[32];\n+\n+  val[0].i[0] = 0x11111111;\n+  val[0].i[1] = 0x00000000;\n+  val[0].i[2] = 0x00000000;\n+  val[0].i[3] = 0x11111111;\n+    \n+  val[1].i[0] = 0x00000000;\n+  val[1].i[1] = 0x11111111;\n+  val[1].i[2] = 0x11111111;\n+  val[1].i[3] = 0x00000000;\n+\n+  val[2].i[0] = 0;\n+  val[2].i[1] = 0;\n+  val[2].i[2] = 0;\n+  val[2].i[3] = 0;\n+\n+  val[3].i[0] = 0xffffffff;\n+  val[3].i[1] = 0xffffffff;\n+  val[3].i[2] = 0xffffffff;\n+  val[3].i[3] = 0xffffffff;\n+\n+  l = 0;\n+  for(i = 0; i < 4; i++)\n+    for(j = 0; j < 4; j++)\n+      {\n+\tres[l++] = _mm_testnzc_si128 (val[j].x, val[i].x);\n+\tres[l++] = _mm_testnzc_si128 (val[j].x, val[i].x);\n+      }\n+\n+  l = 0;\n+  for(i = 0; i < 4; i++)\n+    for(j = 0; j < 4; j++)\n+      {\n+\tif (res[l++] != make_ptestnzc (val[j].x, val[i].x))\n+\t  abort ();\n+\tif (res[l++] != make_ptestnzc (val[j].x, val[i].x))\n+\t  abort ();\n+      }\n+\n+  if (res[2] != _mm_testnzc_si128 (val[1].x, val[0].x))\n+    abort ();\n+\n+  if (res[3] != _mm_testnzc_si128 (val[1].x, val[0].x))\n+    abort ();\n+}"}, {"sha": "65602d9ddf3b50bbdf7a8306f0b0fb6c973cc577", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ptest-3.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ptest-3.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } val[4];\n+  int correct_zeros[4];\n+  int correct_ones[4];\n+  int correct_mixed[4];\n+  int zeros[4];\n+  int ones[4];\n+  int mixed[4];\n+  int i;\n+  __m128i v;\n+\n+  val[0].i[0] = 0x11111111;\n+  val[0].i[1] = 0x00000000;\n+  val[0].i[2] = 0x00000000;\n+  val[0].i[3] = 0x11111111;\n+  correct_zeros[0] = 0;\n+  correct_ones[0] = 0;\n+  correct_mixed[0] = 1;\n+    \n+  val[1].i[0] = 0x00000000;\n+  val[1].i[1] = 0x11111111;\n+  val[1].i[2] = 0x11111111;\n+  val[1].i[3] = 0x00000000;\n+  correct_zeros[1] = 0;\n+  correct_ones[1] = 0;\n+  correct_mixed[1] = 1;\n+\n+  val[2].i[0] = 0;\n+  val[2].i[1] = 0;\n+  val[2].i[2] = 0;\n+  val[2].i[3] = 0;\n+  correct_zeros[2] = 1;\n+  correct_ones[2] = 0;\n+  correct_mixed[2] = 0;\n+\n+  val[3].i[0] = 0xffffffff;\n+  val[3].i[1] = 0xffffffff;\n+  val[3].i[2] = 0xffffffff;\n+  val[3].i[3] = 0xffffffff;\n+  correct_zeros[3] = 0;\n+  correct_ones[3] = 1;\n+  correct_mixed[3] = 0;\n+\n+  for (i=0; i < 4; i++)\n+    zeros[i] = _mm_test_all_zeros (val[i].x, val[i].x);\n+\n+  for( i=0; i < 4; i++ )\n+    ones[i] = _mm_test_all_ones (val[i].x);\n+\n+  v = _mm_cmpeq_epi32 (val[0].x, val[0].x);\n+  for( i=0; i < 4; i++ )\n+    mixed[i] = _mm_test_mix_ones_zeros (val[i].x, v);\n+\n+  for( i=0; i < 4; i++ )\n+    {\n+      if (zeros[i] != correct_zeros[i])\n+\tabort ();\n+      if (ones[i] != correct_ones[i])\n+\tabort ();\n+      if (mixed[i] != correct_mixed[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "0210ac130b6e0216dedd4902a69f83df47c1895a", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-round.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round.h?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,95 @@\n+#include <smmintrin.h>\n+#include <math.h>\n+\n+#define NUM 64\n+\n+static void\n+init_round (FP_T *src)\n+{\n+  int i, sign = 1;\n+  FP_T f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1)* f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI *sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static FP_T\n+do_round (FP_T f, int type)\n+{\n+  short saved_cw, new_cw, clr_mask;\n+  FP_T ret;\n+\n+  if ((type & 4))\n+    {\n+      type = 0;\n+      clr_mask = 0xFFFF;\n+    }\n+  else\n+    {\n+      type = 0x003F | ((type & 3) << 10);\n+      clr_mask = ~0x0C3F;\n+    }\n+\n+  __asm__ (\"fld\" ASM_SUFFIX \" %0\" : : \"m\" (*&f));\n+\n+  __asm__ (\"fstcw %0\" : \"=m\" (*&saved_cw));\n+  new_cw = saved_cw & clr_mask;\n+  new_cw |= type;\n+  __asm__ (\"fldcw %0\" : : \"m\" (*&new_cw));\n+\n+  __asm__ (\"frndint\\n\"\n+\t   \"fstp\" ASM_SUFFIX \" %0\\n\" : \"=m\" (*&ret));\n+  __asm__ (\"fldcw %0\" : : \"m\" (*&saved_cw));\n+  return ret;\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  int i;\n+  FP_T f;\n+  union\n+    {\n+      VEC_T x[NUM / LOOP_INCREMENT];\n+      FP_T f[NUM];\n+    } dst, src;\n+\n+  init_round (src.f);\n+\n+  for (i = 0; i < NUM / LOOP_INCREMENT; i++)\n+    dst.x[i] =  ROUND_INTRIN (src.x[i], ROUND_MODE);\n+\n+  for (i = 0; i < NUM; i += CHECK_LOOP_INCREMENT)\n+    {\n+      f = do_round (src.f[i], CHECK_ROUND_MODE);\n+     if (f != dst.f[i])\n+       abort ();\n+    }\n+\n+  if (_MM_FROUND_TO_NEAREST_INT != 0x00\n+      || _MM_FROUND_TO_NEG_INF != 0x01\n+      || _MM_FROUND_TO_POS_INF != 0x02\n+      || _MM_FROUND_TO_ZERO != 0x03\n+      || _MM_FROUND_CUR_DIRECTION != 0x04\n+      || _MM_FROUND_RAISE_EXC != 0x00\n+      || _MM_FROUND_NO_EXC != 0x08\n+      || _MM_FROUND_NINT != 0x00\n+      || _MM_FROUND_FLOOR != 0x01\n+      || _MM_FROUND_CEIL != 0x02\n+      || _MM_FROUND_TRUNC != 0x03\n+      || _MM_FROUND_RINT != 0x04\n+      || _MM_FROUND_NEARBYINT != 0x0C)\n+    abort ();\n+}"}, {"sha": "d39b16e636ef92d0fdd30e21d2e72e6d4b8dcd87", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundpd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-1.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+#define ASM_SUFFIX \"l\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_ceil_pd(x)\n+#define ROUND_MODE _MM_FROUND_CEIL\n+#define CHECK_ROUND_MODE 0x02\n+\n+#define LOOP_INCREMENT 2\n+#define CHECK_LOOP_INCREMENT 1\n+\n+#include \"sse4_1-round.h\""}, {"sha": "48fb90f7922b9c54c22ae0e19bfb875de3ef55c1", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundpd-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-2.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+#define ASM_SUFFIX \"l\"\n+\n+#define ROUND_INTRIN _mm_round_pd\n+#define ROUND_MODE _MM_FROUND_NINT\n+#define CHECK_ROUND_MODE 0x00\n+\n+#define LOOP_INCREMENT 2\n+#define CHECK_LOOP_INCREMENT 1\n+\n+#include \"sse4_1-round.h\""}, {"sha": "6753977ad852f5239da6262eaf19ed92cda978ff", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundpd-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundpd-3.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+#define ASM_SUFFIX \"l\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_floor_pd(x)\n+#define ROUND_MODE _MM_FROUND_FLOOR\n+#define CHECK_ROUND_MODE 0x01\n+\n+#define LOOP_INCREMENT 2\n+#define CHECK_LOOP_INCREMENT 1\n+\n+#include \"sse4_1-round.h\""}, {"sha": "370ee13508dc07e09661765a4d906dc3636286fa", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundps-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-1.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128\n+#define FP_T float\n+#define ASM_SUFFIX \"s\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_ceil_ps(x)\n+#define ROUND_MODE _MM_FROUND_CEIL\n+#define CHECK_ROUND_MODE 0x02\n+\n+#define LOOP_INCREMENT 4\n+#define CHECK_LOOP_INCREMENT 1\n+\n+#include \"sse4_1-round.h\""}, {"sha": "b8b15b8c0f6342d6c561635f572c9c658de63706", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundps-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-2.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128\n+#define FP_T float\n+#define ASM_SUFFIX \"s\"\n+\n+#define ROUND_INTRIN _mm_round_ps\n+#define ROUND_MODE _MM_FROUND_NINT\n+#define CHECK_ROUND_MODE 0x00\n+\n+#define LOOP_INCREMENT 4\n+#define CHECK_LOOP_INCREMENT 1\n+\n+#include \"sse4_1-round.h\""}, {"sha": "00ce877f7246ac2af4e894c1d3d9d28f28c34b3a", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundps-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundps-3.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128\n+#define FP_T float\n+#define ASM_SUFFIX \"s\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_floor_ps(x)\n+#define ROUND_MODE _MM_FROUND_FLOOR\n+#define CHECK_ROUND_MODE 0x01\n+\n+#define LOOP_INCREMENT 4\n+#define CHECK_LOOP_INCREMENT 1\n+\n+#include \"sse4_1-round.h\""}, {"sha": "458105281938eefee37535699fbfd7672ac5c387", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundsd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-1.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+#define ASM_SUFFIX \"l\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_ceil_sd(x, x)\n+#define ROUND_MODE _MM_FROUND_CEIL\n+#define CHECK_ROUND_MODE 0x02\n+\n+#define LOOP_INCREMENT 2\n+#define CHECK_LOOP_INCREMENT 2\n+\n+#include \"sse4_1-round.h\""}, {"sha": "48bcbc321a94d2de5b62cdfd51af6e45e055c549", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundsd-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-2.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+#define ASM_SUFFIX \"l\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_round_sd(x, x, mode)\n+#define ROUND_MODE _MM_FROUND_NINT\n+#define CHECK_ROUND_MODE 0x00\n+\n+#define LOOP_INCREMENT 2\n+#define CHECK_LOOP_INCREMENT 2\n+\n+#include \"sse4_1-round.h\""}, {"sha": "bc5390cce8c4f943c5250bf218ef688449a56303", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundsd-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-3.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+#define ASM_SUFFIX \"l\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_floor_sd(x, x)\n+#define ROUND_MODE _MM_FROUND_FLOOR\n+#define CHECK_ROUND_MODE 0x01\n+\n+#define LOOP_INCREMENT 2\n+#define CHECK_LOOP_INCREMENT 2\n+\n+#include \"sse4_1-round.h\""}, {"sha": "f63c4d494702e7e43b66f4af1385e09bc7ef7c08", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundsd-4.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundsd-4.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <math.h>\n+#include <string.h>\n+\n+#define NUM 64\n+\n+static void\n+init_round (double *src)\n+{\n+  int i, sign = 1;\n+  double d = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1)* d * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    d = d * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\td = rand ();\n+      else if ((i % 6) == 0)\n+\td = 1 / (d * (i + 1) * src[i] * M_PI *sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static double\n+do_round (double f, int type)\n+{\n+  short saved_cw, new_cw, clr_mask;\n+  double ret;\n+\n+  if ((type & 4))\n+    {\n+      type = 0;\n+      clr_mask = 0xFFFF;\n+    }\n+  else\n+    {\n+      type = 0x003F | ((type & 3) << 10);\n+      clr_mask = ~0x0C3F;\n+    }\n+\n+  __asm__ (\"fldl %0\" : : \"m\" (*&f));\n+\n+  __asm__ (\"fstcw %0\" : \"=m\" (*&saved_cw));\n+  new_cw = saved_cw & clr_mask;\n+  new_cw |= type;\n+  __asm__ (\"fldcw %0\" : : \"m\" (*&new_cw));\n+\n+  __asm__ (\"frndint\\n\"\n+\t   \"fstpl %0\\n\" : \"=m\" (*&ret));\n+  __asm__ (\"fldcw %0\" : : \"m\" (*&saved_cw));\n+  return ret;\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  int i;\n+  double f;\n+  union\n+    {\n+      __m128d x[NUM / 2];\n+      double d[NUM];\n+    } dst, src;\n+\n+  init_round (src.d);\n+  memset (&dst, 0, NUM * sizeof(double));\n+\n+  for (i = 0; i < NUM / 2 ; i++)\n+    dst.x[i] =  _mm_round_sd (dst.x[i], src.x[i], _MM_FROUND_TRUNC);\n+\n+  for (i = 0; i < NUM; i += 2)\n+    {\n+      if (dst.d[i + 1] != 0.0)\n+\tabort ();\n+\n+      f = do_round (src.d[i], 0x03);\n+      if (f != dst.d[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "68fba94a8b90ac4d6b00e9461fe3e76e8770dd7a", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundss-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-1.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128\n+#define FP_T float\n+#define ASM_SUFFIX \"s\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_ceil_ss(x, x)\n+#define ROUND_MODE _MM_FROUND_CEIL\n+#define CHECK_ROUND_MODE 0x02\n+\n+#define LOOP_INCREMENT 4\n+#define CHECK_LOOP_INCREMENT 4\n+\n+#include \"sse4_1-round.h\""}, {"sha": "77f791c47525a36d882bbdc20fc0879f21957414", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundss-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-2.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128\n+#define FP_T float\n+#define ASM_SUFFIX \"s\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_round_ss(x, x, mode)\n+#define ROUND_MODE _MM_FROUND_NINT\n+#define CHECK_ROUND_MODE 0x00\n+\n+#define LOOP_INCREMENT 4\n+#define CHECK_LOOP_INCREMENT 4\n+\n+#include \"sse4_1-round.h\""}, {"sha": "8be6af1caef0426f4f972c97f3c9592b94448dde", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundss-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-3.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#define VEC_T __m128\n+#define FP_T float\n+#define ASM_SUFFIX \"s\"\n+\n+#define ROUND_INTRIN(x, mode) _mm_floor_ss(x, x)\n+#define ROUND_MODE _MM_FROUND_FLOOR\n+#define CHECK_ROUND_MODE 0x01\n+\n+#define LOOP_INCREMENT 4\n+#define CHECK_LOOP_INCREMENT 4\n+\n+#include \"sse4_1-round.h\""}, {"sha": "a42d39ba377ce200fdc759f1bcdb7f2df3953faa", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundss-4.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056299563bb2365dfcf66c0187ffe55f75868c47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundss-4.c?ref=056299563bb2365dfcf66c0187ffe55f75868c47", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <math.h>\n+#include <string.h>\n+\n+#define NUM 64\n+\n+static void\n+init_round (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1)* f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI *sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static float\n+do_round (float f, int type)\n+{\n+  short saved_cw, new_cw, clr_mask;\n+  float ret;\n+\n+  if ((type & 4))\n+    {\n+      type = 0;\n+      clr_mask = 0xFFFF;\n+    }\n+  else\n+    {\n+      type = 0x003F | ((type & 3) << 10);\n+      clr_mask = ~0x0C3F;\n+    }\n+\n+  __asm__ (\"flds %0\" : : \"m\" (*&f));\n+\n+  __asm__ (\"fstcw %0\" : \"=m\" (*&saved_cw));\n+  new_cw = saved_cw & clr_mask;\n+  new_cw |= type;\n+  __asm__ (\"fldcw %0\" : : \"m\" (*&new_cw));\n+\n+  __asm__ (\"frndint\\n\"\n+\t   \"fstps %0\\n\" : \"=m\" (*&ret));\n+  __asm__ (\"fldcw %0\" : : \"m\" (*&saved_cw));\n+  return ret;\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  int i, j;\n+  float f;\n+  union\n+    {\n+      __m128 x[NUM / 4];\n+      float f[NUM];\n+    } dst, src;\n+\n+  init_round (src.f);\n+  memset (&dst, 0, NUM * sizeof(float));\n+\n+  for (i = 0; i < NUM / 4 ; i++)\n+    dst.x[i] =  _mm_round_ss (dst.x[i], src.x[i], _MM_FROUND_RINT);\n+\n+  for (i = 0; i < NUM; i += 4)\n+    {\n+      for (j = 0; j < 3; j++)\n+\tif (dst.f[i + j + 1] != 0.0)\n+\t  abort ();\n+\n+      f = do_round (src.f[i], 0x04);\n+      if (f != dst.f[i])\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < NUM / 4 ; i++)\n+    dst.x[i] =  _mm_round_ss (dst.x[i], src.x[i], _MM_FROUND_NEARBYINT);\n+\n+  for (i = 0; i < NUM; i += 4)\n+    {\n+      for (j = 0; j < 3; j++)\n+\tif (dst.f[i + j + 1] != 0.0)\n+\t  abort ();\n+\n+      f = do_round (src.f[i], 0x0c);\n+      if (f != dst.f[i])\n+\tabort ();\n+    }\n+}"}]}