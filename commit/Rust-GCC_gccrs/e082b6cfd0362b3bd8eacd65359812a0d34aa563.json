{"sha": "e082b6cfd0362b3bd8eacd65359812a0d34aa563", "node_id": "C_kwDOANBUbNoAKGUwODJiNmNmZDAzNjJiM2JkOGVhY2Q2NTM1OTgxMmEwZDM0YWE1NjM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-07T10:28:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-07T10:28:29Z"}, "message": "Merge #859\n\n859: Fix ICE in generic subsitution of enums containing dataless variants r=philberty a=philberty\n\nDataless variants do not contain fields that can be substituted, which then\r\nhits an assertion on access of the fields for the variant. This patch adds\r\na guard against the substitution of dataless variants. We could have\r\nremoved the assertion which would have also been a good fix but keeping the\r\nassertion for now is very helpful in debugging issues.\r\n\r\nFixs #851\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "195d331afa81d5d8bb484b93932ea8bde1fadc08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195d331afa81d5d8bb484b93932ea8bde1fadc08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e082b6cfd0362b3bd8eacd65359812a0d34aa563", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2BXNCRBK7hj4Ov3rIwAAn9AIAAClqcqGOxWRJqG9b7xua37I\nYObjHyMdVU/pPDyX6CR9N822xZLudbPPh5qFdDHlamkVcugtkIQVq4IDI+qS+If9\nV2zz3OifY82+616PX2rV8eipqi6cGuULxYF/DNmCT9i9onhOfjw0PENp57Grk3xQ\n5/vBqjYX3Zl2m5koc8gn9FPupn6qurZoeRAL12SPiysj74MS5idRyWUh97ai++1K\nQJBLTuMAfEpjUVNAgW8/hD0EzxacP+7qoEdUkr55bD8C8F3cmN8K5Gl8rGKtqPhD\nN+Ye6d1tx7Z0c2aB8VVt81Yn5NQEMT9R8aKPicqBIAnx5FdsuiezXB9Yvwz8bCU=\n=nTwE\n-----END PGP SIGNATURE-----\n", "payload": "tree 195d331afa81d5d8bb484b93932ea8bde1fadc08\nparent 754af6737abd249fdf251a54f31deaff5bc4add1\nparent 5b369a61484c52ea0298cfab11858c3fff8bcc00\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641551309 +0000\ncommitter GitHub <noreply@github.com> 1641551309 +0000\n\nMerge #859\n\n859: Fix ICE in generic subsitution of enums containing dataless variants r=philberty a=philberty\n\nDataless variants do not contain fields that can be substituted, which then\r\nhits an assertion on access of the fields for the variant. This patch adds\r\na guard against the substitution of dataless variants. We could have\r\nremoved the assertion which would have also been a good fix but keeping the\r\nassertion for now is very helpful in debugging issues.\r\n\r\nFixs #851\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e082b6cfd0362b3bd8eacd65359812a0d34aa563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e082b6cfd0362b3bd8eacd65359812a0d34aa563", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e082b6cfd0362b3bd8eacd65359812a0d34aa563/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "754af6737abd249fdf251a54f31deaff5bc4add1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754af6737abd249fdf251a54f31deaff5bc4add1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754af6737abd249fdf251a54f31deaff5bc4add1"}, {"sha": "5b369a61484c52ea0298cfab11858c3fff8bcc00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b369a61484c52ea0298cfab11858c3fff8bcc00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b369a61484c52ea0298cfab11858c3fff8bcc00"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "f141a4118c84d9a7565bc6a9db1b4e2316e0e00f", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e082b6cfd0362b3bd8eacd65359812a0d34aa563/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e082b6cfd0362b3bd8eacd65359812a0d34aa563/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=e082b6cfd0362b3bd8eacd65359812a0d34aa563", "patch": "@@ -822,6 +822,9 @@ ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \n   for (auto &variant : adt->get_variants ())\n     {\n+      if (variant->is_dataless_variant ())\n+\tcontinue;\n+\n       for (auto &field : variant->get_fields ())\n \t{\n \t  bool ok = ::Rust::TyTy::handle_substitions (subst_mappings, field);"}, {"sha": "40c06a577831be64fc8375f328d1a82d9b579898", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e082b6cfd0362b3bd8eacd65359812a0d34aa563/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e082b6cfd0362b3bd8eacd65359812a0d34aa563/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=e082b6cfd0362b3bd8eacd65359812a0d34aa563", "patch": "@@ -1069,6 +1069,8 @@ class VariantDef\n   HirId get_id () const { return id; }\n \n   VariantType get_variant_type () const { return type; }\n+  bool is_data_variant () const { return type != VariantType::NUM; }\n+  bool is_dataless_variant () const { return type == VariantType::NUM; }\n \n   std::string get_identifier () const { return identifier; }\n   int get_discriminant () const { return discriminant; }"}, {"sha": "3881c7a2ada1ce080e65e7d413102d884fd34aa9", "filename": "gcc/testsuite/rust/execute/torture/issue-851.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e082b6cfd0362b3bd8eacd65359812a0d34aa563/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e082b6cfd0362b3bd8eacd65359812a0d34aa563/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs?ref=e082b6cfd0362b3bd8eacd65359812a0d34aa563", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-output \"Result: 123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo<T> {\n+    A,\n+    B(T),\n+}\n+\n+fn inspect(a: Foo<i32>) {\n+    match a {\n+        Foo::A => unsafe {\n+            let a = \"A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::B(x) => unsafe {\n+            let a = \"Result: %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x);\n+        },\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo::B(123);\n+    inspect(a);\n+\n+    0\n+}"}]}