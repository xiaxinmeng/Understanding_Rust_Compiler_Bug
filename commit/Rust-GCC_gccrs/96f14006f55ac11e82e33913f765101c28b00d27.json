{"sha": "96f14006f55ac11e82e33913f765101c28b00d27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmMTQwMDZmNTVhYzExZTgyZTMzOTEzZjc2NTEwMWMyOGIwMGQyNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-31T13:22:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-31T13:22:43Z"}, "message": "selftest.c: avoid explicit \"selftest::\" qualifiers\n\ngcc/ChangeLog:\n\t* selftest.c: Move \"namespace selftest {\" to top of file,\n\tremoving explicit \"selftest::\" qualifiers throughout.\n\nFrom-SVN: r239892", "tree": {"sha": "c46d4ad7c0b4d6b188c1a6415c357c3cc1b14d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c46d4ad7c0b4d6b188c1a6415c357c3cc1b14d12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96f14006f55ac11e82e33913f765101c28b00d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f14006f55ac11e82e33913f765101c28b00d27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f14006f55ac11e82e33913f765101c28b00d27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f14006f55ac11e82e33913f765101c28b00d27/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "4f1132174234c7198aec3bf1f9f8b64fc0054b01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f14006f55ac11e82e33913f765101c28b00d27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f14006f55ac11e82e33913f765101c28b00d27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96f14006f55ac11e82e33913f765101c28b00d27", "patch": "@@ -1,3 +1,8 @@\n+2016-08-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* selftest.c: Move \"namespace selftest {\" to top of file,\n+\tremoving explicit \"selftest::\" qualifiers throughout.\n+\n 2016-08-31  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* config/i386/avx512fintrin.h (__m512_u, __m512i_u, __m512d_u):"}, {"sha": "69d9931fbe75eaa796d581363ea6a3de989d9836", "filename": "gcc/selftest.c", "status": "modified", "additions": 36, "deletions": 42, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f14006f55ac11e82e33913f765101c28b00d27/gcc%2Fselftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f14006f55ac11e82e33913f765101c28b00d27/gcc%2Fselftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.c?ref=96f14006f55ac11e82e33913f765101c28b00d27", "patch": "@@ -24,20 +24,22 @@ along with GCC; see the file COPYING3.  If not see\n \n #if CHECKING_P\n \n-int selftest::num_passes;\n+namespace selftest {\n+\n+int num_passes;\n \n /* Record the successful outcome of some aspect of a test.  */\n \n void\n-selftest::pass (const location &/*loc*/, const char */*msg*/)\n+pass (const location &/*loc*/, const char */*msg*/)\n {\n   num_passes++;\n }\n \n /* Report the failed outcome of some aspect of a test and abort.  */\n \n void\n-selftest::fail (const location &loc, const char *msg)\n+fail (const location &loc, const char *msg)\n {\n   fprintf (stderr,\"%s:%i: %s: FAIL: %s\\n\", loc.m_file, loc.m_line,\n \t   loc.m_function, msg);\n@@ -47,7 +49,7 @@ selftest::fail (const location &loc, const char *msg)\n /* As \"fail\", but using printf-style formatted output.  */\n \n void\n-selftest::fail_formatted (const location &loc, const char *fmt, ...)\n+fail_formatted (const location &loc, const char *fmt, ...)\n {\n   va_list ap;\n \n@@ -65,26 +67,23 @@ selftest::fail_formatted (const location &loc, const char *fmt, ...)\n    to be non-NULL; fail gracefully if either are NULL.  */\n \n void\n-selftest::assert_streq (const location &loc,\n-\t\t\tconst char *desc_expected, const char *desc_actual,\n-\t\t\tconst char *val_expected, const char *val_actual)\n+assert_streq (const location &loc,\n+\t      const char *desc_expected, const char *desc_actual,\n+\t      const char *val_expected, const char *val_actual)\n {\n   /* If val_expected is NULL, the test is buggy.  Fail gracefully.  */\n   if (val_expected == NULL)\n-    ::selftest::fail_formatted\n-\t(loc, \"ASSERT_STREQ (%s, %s) expected=NULL\",\n-\t desc_expected, desc_actual);\n+    fail_formatted (loc, \"ASSERT_STREQ (%s, %s) expected=NULL\",\n+\t\t    desc_expected, desc_actual);\n   /* If val_actual is NULL, fail with a custom error message.  */\n   if (val_actual == NULL)\n-    ::selftest::fail_formatted\n-\t(loc, \"ASSERT_STREQ (%s, %s) expected=\\\"%s\\\" actual=NULL\",\n-\t desc_expected, desc_actual, val_expected);\n+    fail_formatted (loc, \"ASSERT_STREQ (%s, %s) expected=\\\"%s\\\" actual=NULL\",\n+\t\t    desc_expected, desc_actual, val_expected);\n   if (0 == strcmp (val_expected, val_actual))\n-    ::selftest::pass (loc, \"ASSERT_STREQ\");\n+    pass (loc, \"ASSERT_STREQ\");\n   else\n-    ::selftest::fail_formatted\n-\t(loc, \"ASSERT_STREQ (%s, %s) expected=\\\"%s\\\" actual=\\\"%s\\\"\",\n-\t desc_expected, desc_actual, val_expected, val_actual);\n+    fail_formatted (loc, \"ASSERT_STREQ (%s, %s) expected=\\\"%s\\\" actual=\\\"%s\\\"\",\n+\t\t    desc_expected, desc_actual, val_expected, val_actual);\n }\n \n /* Implementation detail of ASSERT_STR_CONTAINS.\n@@ -93,44 +92,43 @@ selftest::assert_streq (const location &loc,\n    ::selftest::fail if it is not found.  */\n \n void\n-selftest::assert_str_contains (const location &loc,\n-\t\t\t       const char *desc_haystack,\n-\t\t\t       const char *desc_needle,\n-\t\t\t       const char *val_haystack,\n-\t\t\t       const char *val_needle)\n+assert_str_contains (const location &loc,\n+\t\t     const char *desc_haystack,\n+\t\t     const char *desc_needle,\n+\t\t     const char *val_haystack,\n+\t\t     const char *val_needle)\n {\n   /* If val_haystack is NULL, fail with a custom error message.  */\n   if (val_haystack == NULL)\n-    ::selftest::fail_formatted\n-\t(loc, \"ASSERT_STR_CONTAINS (%s, %s) haystack=NULL\",\n-\t desc_haystack, desc_needle);\n+    fail_formatted (loc, \"ASSERT_STR_CONTAINS (%s, %s) haystack=NULL\",\n+\t\t    desc_haystack, desc_needle);\n \n   /* If val_needle is NULL, fail with a custom error message.  */\n   if (val_needle == NULL)\n-    ::selftest::fail_formatted\n-\t(loc, \"ASSERT_STR_CONTAINS (%s, %s) haystack=\\\"%s\\\" needle=NULL\",\n-\t desc_haystack, desc_needle, val_haystack);\n+    fail_formatted (loc,\n+\t\t    \"ASSERT_STR_CONTAINS (%s, %s) haystack=\\\"%s\\\" needle=NULL\",\n+\t\t    desc_haystack, desc_needle, val_haystack);\n \n   const char *test = strstr (val_haystack, val_needle);\n   if (test)\n-    ::selftest::pass (loc, \"ASSERT_STR_CONTAINS\");\n+    pass (loc, \"ASSERT_STR_CONTAINS\");\n   else\n-    ::selftest::fail_formatted\n+    fail_formatted\n \t(loc, \"ASSERT_STR_CONTAINS (%s, %s) haystack=\\\"%s\\\" needle=\\\"%s\\\"\",\n \t desc_haystack, desc_needle, val_haystack, val_needle);\n }\n \n /* Constructor.  Generate a name for the file.  */\n \n-selftest::named_temp_file::named_temp_file (const char *suffix)\n+named_temp_file::named_temp_file (const char *suffix)\n {\n   m_filename = make_temp_file (suffix);\n   ASSERT_NE (m_filename, NULL);\n }\n \n /* Destructor.  Delete the tempfile.  */\n \n-selftest::named_temp_file::~named_temp_file ()\n+named_temp_file::~named_temp_file ()\n {\n   unlink (m_filename);\n   diagnostics_file_cache_forcibly_evict_file (m_filename);\n@@ -141,23 +139,20 @@ selftest::named_temp_file::~named_temp_file ()\n    it.  Abort if anything goes wrong, using LOC as the effective\n    location in the problem report.  */\n \n-selftest::temp_source_file::temp_source_file (const location &loc,\n-\t\t\t\t\t      const char *suffix,\n-\t\t\t\t\t      const char *content)\n+temp_source_file::temp_source_file (const location &loc,\n+\t\t\t\t    const char *suffix,\n+\t\t\t\t    const char *content)\n : named_temp_file (suffix)\n {\n   FILE *out = fopen (get_filename (), \"w\");\n   if (!out)\n-    ::selftest::fail_formatted (loc, \"unable to open tempfile: %s\",\n-\t\t\t\tget_filename ());\n+    fail_formatted (loc, \"unable to open tempfile: %s\", get_filename ());\n   fprintf (out, \"%s\", content);\n   fclose (out);\n }\n \n /* Selftests for the selftest system itself.  */\n \n-namespace selftest {\n-\n /* Sanity-check the ASSERT_ macros with various passing cases.  */\n \n static void\n@@ -181,9 +176,8 @@ test_named_temp_file ()\n   named_temp_file t (\".txt\");\n   FILE *f = fopen (t.get_filename (), \"w\");\n   if (!f)\n-    selftest::fail_formatted (SELFTEST_LOCATION,\n-\t\t\t      \"unable to open %s for writing\",\n-\t\t\t      t.get_filename ());\n+    fail_formatted (SELFTEST_LOCATION,\n+\t\t    \"unable to open %s for writing\", t.get_filename ());\n   fclose (f);\n }\n "}]}