{"sha": "2784775405bab5290a9e9feb425d85a5c42b94de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4NDc3NTQwNWJhYjUyOTBhOWU5ZmViNDI1ZDg1YTVjNDJiOTRkZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2003-06-25T18:49:51Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2003-06-25T18:49:51Z"}, "message": "arm.h (BIGGEST_FIELD_ALIGNMENT): Define instead of ADJUST_FIELD_ALIGN if IN_TARGET_LIBS.\n\n* config/arm/arm.h (BIGGEST_FIELD_ALIGNMENT): Define instead of\nADJUST_FIELD_ALIGN if IN_TARGET_LIBS.\nReplace occurances of '???' with 'XXX' incase they are mistaken for trigraphs.\n(THUMB_PRINT_OPERAND_ADDRESS): abort if a compound address does not have a\nregister for the first operand.\n\nFrom-SVN: r68487", "tree": {"sha": "c779255ad54d9471ea807b021e30e399ffa21b9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c779255ad54d9471ea807b021e30e399ffa21b9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2784775405bab5290a9e9feb425d85a5c42b94de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2784775405bab5290a9e9feb425d85a5c42b94de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2784775405bab5290a9e9feb425d85a5c42b94de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2784775405bab5290a9e9feb425d85a5c42b94de/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "96ad8e7dd5df1fe6c0e34e1f1f9970974fd07ac2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2784775405bab5290a9e9feb425d85a5c42b94de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2784775405bab5290a9e9feb425d85a5c42b94de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2784775405bab5290a9e9feb425d85a5c42b94de", "patch": "@@ -1,3 +1,12 @@\n+2003-06-26  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/arm/arm.h (BIGGEST_FIELD_ALIGNMENT): Define instead\n+\tof ADJUST_FIELD_ALIGN if IN_TARGET_LIBS.\n+        Replace occurances of '???' with 'XXX' incase they are\n+\tmistaken for trigraphs.\n+\t(THUMB_PRINT_OPERAND_ADDRESS): abort if a compound address\n+\tdoes not have a register for the first operand.\n+        \n 2003-06-25\tDhananjay Deshpande <dhananjayd@kpitcummins.com>\n \n \t* config/sh/sh.c (sh_register_move_cost):"}, {"sha": "14223cee7c786cdb838da73aa0048dcb114e5eb5", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2784775405bab5290a9e9feb425d85a5c42b94de/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2784775405bab5290a9e9feb425d85a5c42b94de/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2784775405bab5290a9e9feb425d85a5c42b94de", "patch": "@@ -759,6 +759,12 @@ extern int arm_is_6_or_7;\n  (TARGET_REALLY_IWMMXT\t\t\t\t\\\n    && ((TREE_CODE (TYPE) == VECTOR_TYPE) || (TYPE_MODE (TYPE) == DImode) || (TYPE_MODE (TYPE) == DFmode)))\n \n+/* XXX Blah -- this macro is used directly by libobjc.  Since it\n+   supports no vector modes, cut out the complexity and fall back\n+   on BIGGEST_FIELD_ALIGNMENT.  */\n+#ifdef IN_TARGET_LIBS\n+#define BIGGEST_FIELD_ALIGNMENT BIGGEST_ALIGNMENT\n+#else\n /* An expression for the alignment of a structure field FIELD if the\n    alignment computed in the usual way is COMPUTED.  GCC uses this\n    value instead of the value in `BIGGEST_ALIGNMENT' or\n@@ -767,6 +773,7 @@ extern int arm_is_6_or_7;\n   (TYPE_NEEDS_IWMMXT_ALIGNMENT (TREE_TYPE (FIELD))\t\\\n    ? IWMMXT_ALIGNMENT\t\t\t\t\t\\\n    : (COMPUTED))\n+#endif\n \n /* If defined, a C expression to compute the alignment for a static variable.\n    TYPE is the data type, and ALIGN is the alignment that the object\n@@ -1459,7 +1466,7 @@ enum reg_class\n     }\t\t\t\t\t\t\t\t\t   \\\n   while (0)\n \n-/* ??? If an HImode FP+large_offset address is converted to an HImode\n+/* XXX If an HImode FP+large_offset address is converted to an HImode\n    SP+large_offset address, then reload won't know how to fix it.  It sees\n    only that SP isn't valid for HImode, and so reloads the SP into an index\n    register, but the resulting address is still invalid because the offset\n@@ -1947,7 +1954,7 @@ typedef struct\n \t   ldr\t\tpc, [pc]\n \t   .word\tstatic chain value\n \t   .word\tfunction's address\n-   ??? FIXME: When the trampoline returns, r8 will be clobbered.  */\n+   XXX FIXME: When the trampoline returns, r8 will be clobbered.  */\n #define ARM_TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   asm_fprintf (FILE, \"\\tldr\\t%r, [%r, #0]\\n\",\t\t\t\\\n@@ -2603,6 +2610,8 @@ extern int making_const_table;\n     asm_fprintf (STREAM, \"%r!\", REGNO (XEXP (X, 0)));\t\\\n   else if (GET_CODE (X) == PLUS)\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n+      if (GET_CODE (XEXP (X, 0)) != REG)\t\t\\\n+        abort ();\t\t\t\t\t\\\n       if (GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\\\n \tasm_fprintf (STREAM, \"[%r, #%wd]\", \t\t\\\n \t\t     REGNO (XEXP (X, 0)),\t\t\\"}]}