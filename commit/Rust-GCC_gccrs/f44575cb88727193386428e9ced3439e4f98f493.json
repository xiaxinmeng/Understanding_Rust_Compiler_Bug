{"sha": "f44575cb88727193386428e9ced3439e4f98f493", "node_id": "C_kwDOANBUbNoAKGY0NDU3NWNiODg3MjcxOTMzODY0MjhlOWNlZDM0MzllNGY5OGY0OTM", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2022-10-14T10:04:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-24T13:37:33Z"}, "message": "c-family: Implicitly return zero from main even on freestanding\n\n... unless marked noreturn.\n\nThis should not get in anyone's way, but should permit the use of main()\nin freestanding more easily, especially for writing test cases that\nshould work both in freestanding and hosted modes.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.cc (finish_function): Ignore hosted when deciding\n\twhether to implicitly return zero, but check noreturn.\n\t* c-objc-common.cc (c_missing_noreturn_ok_p): Loosen the\n\trequirements to just MAIN_NAME_P when hosted, or `int main'\n\totherwise.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (DECL_MAIN_P): Move most logic, besides the hosted\n\tcheck, from here...\n\t(DECL_MAIN_ANY_P): ... to here, so that it can be reused ...\n\t(DECL_MAIN_FREESTANDING_P): ... here, with an additional\n\tconstraint on (hosted OR return type == int)\n\t* decl.cc (finish_function): Use DECL_MAIN_FREESTANDING_P\n\tinstead of DECL_MAIN_P, to loosen the hosted requirement, but\n\tcheck noreturn, before adding implicit returns.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/noreturn-4.c: Removed.\n\t* g++.dg/freestanding-main.C: New test.\n\t* g++.dg/freestanding-nonint-main.C: New test.\n\t* gcc.dg/freestanding-main.c: New test.\n\t* gcc.dg/freestanding-nonint-main.c: New test.", "tree": {"sha": "676300379ab6560f5333503d820489ecab859ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/676300379ab6560f5333503d820489ecab859ef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f44575cb88727193386428e9ced3439e4f98f493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44575cb88727193386428e9ced3439e4f98f493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44575cb88727193386428e9ced3439e4f98f493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44575cb88727193386428e9ced3439e4f98f493/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bcd92d0d4029f3d1d2eacc0e2bff1685545b74f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcd92d0d4029f3d1d2eacc0e2bff1685545b74f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bcd92d0d4029f3d1d2eacc0e2bff1685545b74f"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "4746e310d2d6ac2fbd03ac021352b86f330648b6", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=f44575cb88727193386428e9ced3439e4f98f493", "patch": "@@ -10542,7 +10542,7 @@ finish_function (location_t end_loc)\n   if (DECL_RESULT (fndecl) && DECL_RESULT (fndecl) != error_mark_node)\n     DECL_CONTEXT (DECL_RESULT (fndecl)) = fndecl;\n \n-  if (MAIN_NAME_P (DECL_NAME (fndecl)) && flag_hosted\n+  if (MAIN_NAME_P (DECL_NAME (fndecl)) && !TREE_THIS_VOLATILE (fndecl)\n       && TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl)))\n       == integer_type_node && flag_isoc99)\n     {"}, {"sha": "b4680912547c2da9b328c13234d8c85ba7e412af", "filename": "gcc/c/c-objc-common.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Fc%2Fc-objc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Fc%2Fc-objc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.cc?ref=f44575cb88727193386428e9ced3439e4f98f493", "patch": "@@ -37,9 +37,12 @@ static bool c_tree_printer (pretty_printer *, text_info *, const char *,\n bool\n c_missing_noreturn_ok_p (tree decl)\n {\n-  /* A missing noreturn is not ok for freestanding implementations and\n-     ok for the `main' function in hosted implementations.  */\n-  return flag_hosted && MAIN_NAME_P (DECL_ASSEMBLER_NAME (decl));\n+  /* A missing noreturn is ok for the `main' function.  */\n+  if (!MAIN_NAME_P (DECL_ASSEMBLER_NAME (decl)))\n+    return false;\n+\n+  return flag_hosted\n+    || TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (decl))) == integer_type_node;\n }\n \n /* Called from check_global_declaration.  */"}, {"sha": "2cca20be6c1d3248ed99c2589037dbff5f5ddb74", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f44575cb88727193386428e9ced3439e4f98f493", "patch": "@@ -772,11 +772,20 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n \n /* Returns nonzero iff NODE is a declaration for the global function\n    `main'.  */\n-#define DECL_MAIN_P(NODE)\t\t\t\t\\\n+#define DECL_MAIN_ANY_P(NODE)\t\t\t\t\\\n    (DECL_EXTERN_C_FUNCTION_P (NODE)\t\t\t\\\n     && DECL_NAME (NODE) != NULL_TREE\t\t\t\\\n-    && MAIN_NAME_P (DECL_NAME (NODE))\t\t\t\\\n-    && flag_hosted)\n+    && MAIN_NAME_P (DECL_NAME (NODE)))\n+\n+/* Nonzero iff NODE is a declaration for `int main', or we are hosted. */\n+#define DECL_MAIN_FREESTANDING_P(NODE)\t\t\t\t\\\n+  (DECL_MAIN_ANY_P(NODE)\t\t\t\t\t\\\n+   && (flag_hosted\t\t\t\t\t\t\\\n+       || TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (NODE)))\t\\\n+\t  == integer_type_node))\n+\n+/* Nonzero iff NODE is a declaration for `main', and we are hosted. */\n+#define DECL_MAIN_P(NODE) (DECL_MAIN_ANY_P(NODE) && flag_hosted)\n \n /* Lookup walker marking.  */\n #define LOOKUP_SEEN_P(NODE) TREE_VISITED (NODE)"}, {"sha": "bc085f8fcce4c0c25640f195d21568c6d524bf0b", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=f44575cb88727193386428e9ced3439e4f98f493", "patch": "@@ -17852,7 +17852,8 @@ finish_function (bool inline_p)\n   if (!DECL_CLONED_FUNCTION_P (fndecl))\n     {\n       /* Make it so that `main' always returns 0 by default.  */\n-      if (DECL_MAIN_P (current_function_decl))\n+      if (DECL_MAIN_FREESTANDING_P (current_function_decl)\n+\t  && !TREE_THIS_VOLATILE (current_function_decl))\n \tfinish_return_stmt (integer_zero_node);\n \n       if (use_eh_spec_block (current_function_decl))"}, {"sha": "3718cc4508ee3cc2b4e1d45afcb999c48df1fa59", "filename": "gcc/testsuite/g++.dg/freestanding-main.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffreestanding-main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffreestanding-main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffreestanding-main.C?ref=f44575cb88727193386428e9ced3439e4f98f493", "patch": "@@ -0,0 +1,5 @@\n+/* Make sure we don't get a missing return warning on freestanding. */\n+/* { dg-do compile } */\n+/* { dg-options \"-ffreestanding -Wreturn-type\" } */\n+\n+int main() {}"}, {"sha": "a8571cc6f0b886b8e707cab48001c20fef89b918", "filename": "gcc/testsuite/g++.dg/freestanding-nonint-main.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffreestanding-nonint-main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffreestanding-nonint-main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffreestanding-nonint-main.C?ref=f44575cb88727193386428e9ced3439e4f98f493", "patch": "@@ -0,0 +1,5 @@\n+/* Check that we get the right warning for nonint main in freestanding. */\n+/* { dg-do compile } */\n+/* { dg-options \"-ffreestanding -Wreturn-type\" } */\n+\n+const char *main() {} /* { dg-warning \"-Wreturn-type\" } */"}, {"sha": "3718cc4508ee3cc2b4e1d45afcb999c48df1fa59", "filename": "gcc/testsuite/gcc.dg/freestanding-main.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Ftestsuite%2Fgcc.dg%2Ffreestanding-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Ftestsuite%2Fgcc.dg%2Ffreestanding-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffreestanding-main.c?ref=f44575cb88727193386428e9ced3439e4f98f493", "patch": "@@ -0,0 +1,5 @@\n+/* Make sure we don't get a missing return warning on freestanding. */\n+/* { dg-do compile } */\n+/* { dg-options \"-ffreestanding -Wreturn-type\" } */\n+\n+int main() {}"}, {"sha": "d8393346b091bb6555c76f2eaaa111c5737bf067", "filename": "gcc/testsuite/gcc.dg/freestanding-nonint-main.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Ftestsuite%2Fgcc.dg%2Ffreestanding-nonint-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44575cb88727193386428e9ced3439e4f98f493/gcc%2Ftestsuite%2Fgcc.dg%2Ffreestanding-nonint-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffreestanding-nonint-main.c?ref=f44575cb88727193386428e9ced3439e4f98f493", "patch": "@@ -0,0 +1,5 @@\n+/* Check that we get the right warning for nonint main in freestanding. */\n+/* { dg-do compile } */\n+/* { dg-options \"-ffreestanding -Wreturn-type\" } */\n+\n+const char *main(void) {} /* { dg-warning \"-Wreturn-type\" } */"}, {"sha": "6fe144754d05ef9b20d086e9518d061450f7d6cb", "filename": "gcc/testsuite/gcc.dg/noreturn-4.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcd92d0d4029f3d1d2eacc0e2bff1685545b74f/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcd92d0d4029f3d1d2eacc0e2bff1685545b74f/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c?ref=5bcd92d0d4029f3d1d2eacc0e2bff1685545b74f", "patch": "@@ -1,10 +0,0 @@\n-/* Check for \"noreturn\" warning in main. */\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Wmissing-noreturn -ffreestanding\" } */\n-extern void exit (int) __attribute__ ((__noreturn__));\n-\n-int\n-main (void) /* { dg-warning \"function might be candidate for attribute 'noreturn'\" \"warn for main\" } */\n-{\n-  exit (0);\n-}"}]}