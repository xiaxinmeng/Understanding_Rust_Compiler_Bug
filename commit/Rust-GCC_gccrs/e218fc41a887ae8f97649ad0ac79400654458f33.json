{"sha": "e218fc41a887ae8f97649ad0ac79400654458f33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxOGZjNDFhODg3YWU4Zjk3NjQ5YWQwYWM3OTQwMDY1NDQ1OGYzMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-27T22:22:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-27T22:22:34Z"}, "message": "jump.c (jump_optimize_1): If we did cross-jumping, and the data will matter, rebuild the CFG.\n\n        * jump.c (jump_optimize_1): If we did cross-jumping, and\n        the data will matter, rebuild the CFG.\n        * reg-stack.c (reg_to_stack): Only (re)build the CFG if\n        not optimizing.  Don't run shorten_branches.\n        * toplev.c (rest_of_compilation): Run shorten_branches after\n        reg_to_stack.\n\nFrom-SVN: r30223", "tree": {"sha": "53ef066b9c79de195ac18303654977657339d8de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ef066b9c79de195ac18303654977657339d8de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e218fc41a887ae8f97649ad0ac79400654458f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e218fc41a887ae8f97649ad0ac79400654458f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e218fc41a887ae8f97649ad0ac79400654458f33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e218fc41a887ae8f97649ad0ac79400654458f33/comments", "author": null, "committer": null, "parents": [{"sha": "163537f7f15b3727538f9c0b5f82efbd7d56f8a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163537f7f15b3727538f9c0b5f82efbd7d56f8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/163537f7f15b3727538f9c0b5f82efbd7d56f8a8"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "fc5d4664409ae6036b86f7a531f01e14443660d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e218fc41a887ae8f97649ad0ac79400654458f33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e218fc41a887ae8f97649ad0ac79400654458f33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e218fc41a887ae8f97649ad0ac79400654458f33", "patch": "@@ -1,3 +1,12 @@\n+Wed Oct 27 15:21:46 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* jump.c (jump_optimize_1): If we did cross-jumping, and\n+\tthe data will matter, rebuild the CFG.\n+\t* reg-stack.c (reg_to_stack): Only (re)build the CFG if\n+\tnot optimizing.  Don't run shorten_branches.\n+\t* toplev.c (rest_of_compilation): Run shorten_branches after\n+\treg_to_stack.\n+\n Wed Oct 27 12:33:40 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* rtl.h (note_stores): Add additional paramter."}, {"sha": "8170930780b5f45cbd05ea8ddd879d54db32fc96", "filename": "gcc/jump.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e218fc41a887ae8f97649ad0ac79400654458f33/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e218fc41a887ae8f97649ad0ac79400654458f33/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=e218fc41a887ae8f97649ad0ac79400654458f33", "patch": "@@ -66,6 +66,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"real.h\"\n #include \"except.h\"\n+#include \"basic-block.h\"\n+#include \"output.h\"\n #include \"toplev.h\"\n \n /* ??? Eventually must record somehow the labels used by jumps\n@@ -190,6 +192,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n   int first = 1;\n   int max_uid = 0;\n   rtx last_insn;\n+  int did_cross_jump = 0;\n \n   cross_jump_death_matters = (cross_jump == 2);\n   max_uid = init_label_info (f) + 1;\n@@ -2127,6 +2130,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n \n \t\t  if (newjpos != 0)\n \t\t    {\n+\t\t      did_cross_jump = 1;\n \t\t      do_cross_jump (insn, newjpos, newlpos);\n \t\t      /* Make the old conditional jump\n \t\t\t into an unconditional one.  */\n@@ -2179,6 +2183,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n \n \t\t  if (newjpos != 0)\n \t\t    {\n+\t\t      did_cross_jump = 1;\n \t\t      do_cross_jump (insn, newjpos, newlpos);\n \t\t      changed = 1;\n \t\t      next = insn;\n@@ -2210,6 +2215,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n \n \t\t  if (newjpos != 0)\n \t\t    {\n+\t\t      did_cross_jump = 1;\n \t\t      do_cross_jump (insn, newjpos, newlpos);\n \t\t      changed = 1;\n \t\t      next = insn;\n@@ -2274,6 +2280,23 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n \n   /* Show JUMP_CHAIN no longer valid.  */\n   jump_chain = 0;\n+\n+#if defined(DELAY_SLOTS) || defined(STACK_REGS)\n+  /* ??? Keep the CFG up to date after cross-jumping.  */\n+  if (did_cross_jump && !cross_jump_death_matters)\n+    {\n+      sbitmap blocks;\n+\n+      find_basic_blocks (f, old_max_reg, NULL, 0);\n+\n+      blocks = sbitmap_alloc (n_basic_blocks);\n+      sbitmap_ones (blocks);\n+      count_or_remove_death_notes (blocks, 1);\n+      sbitmap_free (blocks);\n+\n+      life_analysis (f, old_max_reg, NULL, 0);\n+    }\n+#endif\n }\n \f\n /* Initialize LABEL_NUSES and JUMP_LABEL fields.  Delete any REG_LABEL"}, {"sha": "7ab8184a3a30208c8572ad6619c57c18e2cb5a10", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e218fc41a887ae8f97649ad0ac79400654458f33/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e218fc41a887ae8f97649ad0ac79400654458f33/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=e218fc41a887ae8f97649ad0ac79400654458f33", "patch": "@@ -406,8 +406,7 @@ pop_stack (regstack, regno)\n    register file.  FIRST is the first insn in the function, FILE is the\n    dump file, if used.\n \n-   Construct a CFG and run life analysis.  (When optimizing, the data\n-   was corruped by jump2's cross-jumping.)  Then convert each insn one\n+   Construct a CFG and run life analysis.  Then convert each insn one\n    by one.  Run a last jump_optimize pass, if optimizing, to eliminate\n    code duplication created when the converter inserts pop insns on\n    the edges.  */\n@@ -430,16 +429,19 @@ reg_to_stack (first, file)\n   if (i > LAST_STACK_REG)\n     return;\n \n-  /* Ok, floating point instructions exist.  Rebuild the CFG and run \n-     life analysis.  */\n-  find_basic_blocks (first, max_reg_num (), file, 0);\n+  /* Ok, floating point instructions exist.  If not optimizing, \n+     build the CFG and run life analysis.  */\n+  if (! optimize)\n+    {\n+      find_basic_blocks (first, max_reg_num (), file, 0);\n \n-  blocks = sbitmap_alloc (n_basic_blocks);\n-  sbitmap_ones (blocks);\n-  count_or_remove_death_notes (blocks, 1);\n-  sbitmap_free (blocks);\n+      blocks = sbitmap_alloc (n_basic_blocks);\n+      sbitmap_ones (blocks);\n+      count_or_remove_death_notes (blocks, 1);\n+      sbitmap_free (blocks);\n \n-  life_analysis (first, max_reg_num (), file, 0);\n+      life_analysis (first, max_reg_num (), file, 0);\n+    }\n \n   /* Set up block info for each basic block.  */\n   bi = (block_info) alloca ((n_basic_blocks + 1) * sizeof (*bi));\n@@ -488,9 +490,6 @@ reg_to_stack (first, file)\n     {\n       jump_optimize (first, JUMP_CROSS_JUMP_DEATH_MATTERS,\n \t\t     !JUMP_NOOP_MOVES, !JUMP_AFTER_REGSCAN);\n-\n-      /* This has the effect of resetting label alignments around loops.  */\n-      shorten_branches (get_insns ());\n     }\n \n   VARRAY_FREE (stack_regs_mentioned_data);"}, {"sha": "1933b41b41be16f120169aea4f9e8d8fc65abe79", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e218fc41a887ae8f97649ad0ac79400654458f33/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e218fc41a887ae8f97649ad0ac79400654458f33/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e218fc41a887ae8f97649ad0ac79400654458f33", "patch": "@@ -4333,12 +4333,6 @@ rest_of_compilation (decl)\n      ggc_collect ();\n #endif\n \n-  /* Shorten branches.  */\n-  TIMEVAR (shorten_branch_time,\n-\t   {\n-\t     shorten_branches (get_insns ());\n-\t   });\n-\n #ifdef STACK_REGS\n   if (stack_reg_dump)\n     open_dump_file (\".20.stack\", decl_printable_name (decl, 2));\n@@ -4356,6 +4350,12 @@ rest_of_compilation (decl)\n      ggc_collect ();\n #endif\n \n+  /* Shorten branches.  */\n+  TIMEVAR (shorten_branch_time,\n+\t   {\n+\t     shorten_branches (get_insns ());\n+\t   });\n+\n   /* Now turn the rtl into assembler code.  */\n \n   TIMEVAR (final_time,"}]}