{"sha": "c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBjM2M0MDlhNzhmYTZhNTFkNTE3Y2U2MzQ3M2FiMWU4NGE0NzI3ZA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2008-12-29T20:10:00Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2008-12-29T20:10:00Z"}, "message": "re PR fortran/31832 (FAIL: gfortran.dg/integer_exponentiation_2.f90 at -O1 and above)\n\n\tPR fortran/31832\n\t* acinclude.m4 (LIBGFOR_CHECK_FOR_BROKEN_POWF): New autoconf check for\n\tbroken powf.\n\t* configure.ac (LIBGFOR_CHECK_FOR_BROKEN_POWF): Use it.\n\t* intrinsics/c99_functions.c: Use internal powf implementation if\n\tHAVE_BROKEN_POWF is defined.\n\t* configure: Rebuilt.\n\t* config.h.in: Rebuilt.\n\nFrom-SVN: r142952", "tree": {"sha": "6368f9b96a1136f25e6faa9fc46751b62fba3c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6368f9b96a1136f25e6faa9fc46751b62fba3c73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/comments", "author": null, "committer": null, "parents": [{"sha": "049dba029b93d39013b549cc51364434aa34211d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049dba029b93d39013b549cc51364434aa34211d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049dba029b93d39013b549cc51364434aa34211d"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "aca6e93bfcfb1743ca70b415002e31f9e33d658f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "patch": "@@ -1,3 +1,14 @@\n+2008-12-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR fortran/31832\n+\t* acinclude.m4 (LIBGFOR_CHECK_FOR_BROKEN_POWF): New autoconf check for\n+\tbroken powf.\n+\t* configure.ac (LIBGFOR_CHECK_FOR_BROKEN_POWF): Use it.\n+\t* intrinsics/c99_functions.c: Use internal powf implementation if\n+\tHAVE_BROKEN_POWF is defined.\n+\t* configure: Rebuilt.\n+\t* config.h.in: Rebuilt.\n+\n 2008-12-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/37472"}, {"sha": "33552871001e9e246b8c57fdba06548ec7e6e9c3", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "patch": "@@ -376,3 +376,15 @@ __mingw_snprintf (NULL, 0, \"%d\\n\", 1);\n     AC_DEFINE(HAVE_MINGW_SNPRINTF, 1, [Define if you have __mingw_snprintf.])\n   fi\n ])\n+\n+dnl Check whether we have a broken powf implementation\n+AC_DEFUN([LIBGFOR_CHECK_FOR_BROKEN_POWF], [\n+  AC_CACHE_CHECK([whether powf is broken], libgfor_cv_have_broken_powf, [\n+case \"${target}\" in\n+  hppa*64*-*-hpux*) libgfor_cv_have_broken_powf=yes ;;\n+  *) libgfor_cv_have_broken_powf=no;;\n+esac])\n+  if test x\"$libgfor_cv_have_broken_powf\" = xyes; then\n+    AC_DEFINE(HAVE_BROKEN_POWF, 1, [Define if powf is broken.])\n+  fi\n+])"}, {"sha": "3542638b0cd74f15e68447e7083d64c3769f091c", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "patch": "@@ -96,6 +96,9 @@\n /* Define if isnan is broken. */\n #undef HAVE_BROKEN_ISNAN\n \n+/* Define if powf is broken. */\n+#undef HAVE_BROKEN_POWF\n+\n /* libm includes cabs */\n #undef HAVE_CABS\n "}, {"sha": "2d12f9661af2f6a7bd6ef053dcf35f4c2ac56a1d", "filename": "libgfortran/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "patch": "@@ -33243,6 +33243,30 @@ _ACEOF\n   fi\n \n \n+# Check for a broken powf implementation\n+\n+  echo \"$as_me:$LINENO: checking whether powf is broken\" >&5\n+echo $ECHO_N \"checking whether powf is broken... $ECHO_C\" >&6\n+if test \"${libgfor_cv_have_broken_powf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+case \"${target}\" in\n+  hppa*64*-*-hpux*) libgfor_cv_have_broken_powf=yes ;;\n+  *) libgfor_cv_have_broken_powf=no;;\n+esac\n+fi\n+echo \"$as_me:$LINENO: result: $libgfor_cv_have_broken_powf\" >&5\n+echo \"${ECHO_T}$libgfor_cv_have_broken_powf\" >&6\n+  if test x\"$libgfor_cv_have_broken_powf\" = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_BROKEN_POWF 1\n+_ACEOF\n+\n+  fi\n+\n+\n # Check for GNU libc feenableexcept\n echo \"$as_me:$LINENO: checking for feenableexcept in -lm\" >&5\n echo $ECHO_N \"checking for feenableexcept in -lm... $ECHO_C\" >&6"}, {"sha": "0e0b5a7e31fac354bb513e7f76488f1aaf6b3bcb", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "patch": "@@ -405,6 +405,9 @@ LIBGFOR_CHECK_WORKING_STAT\n # Check whether __mingw_snprintf() is present\n LIBGFOR_CHECK_MINGW_SNPRINTF\n \n+# Check for a broken powf implementation\n+LIBGFOR_CHECK_FOR_BROKEN_POWF\n+\n # Check for GNU libc feenableexcept\n AC_CHECK_LIB([m],[feenableexcept],[have_feenableexcept=yes AC_DEFINE([HAVE_FEENABLEEXCEPT],[1],[libm includes feenableexcept])])\n "}, {"sha": "ce96c8cb54b95d18101db68553c7990225a27989", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c3c409a78fa6a51d517ce63473ab1e84a4727d/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=c0c3c409a78fa6a51d517ce63473ab1e84a4727d", "patch": "@@ -491,8 +491,10 @@ nextafterf(float x, float y)\n #endif\n \n \n+#if !defined(HAVE_POWF) || defined(HAVE_BROKEN_POWF)\n #ifndef HAVE_POWF\n #define HAVE_POWF 1\n+#endif\n float\n powf(float x, float y)\n {"}]}