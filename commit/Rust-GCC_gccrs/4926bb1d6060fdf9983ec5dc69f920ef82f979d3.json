{"sha": "4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkyNmJiMWQ2MDYwZmRmOTk4M2VjNWRjNjlmOTIwZWY4MmY5NzlkMw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-12-04T05:27:39Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-12-04T05:27:39Z"}, "message": "Fix FMA4 and XOP insns.\n\n2009-12-02  Sebastian Pop  <sebastian.pop@amd.com>\n\t    Richard Henderson  <rth@redhat.com>\n\n\t* config/i386/i386-protos.h (ix86_fma4_valid_op_p): Removed.\n\t* config/i386/i386.c (ix86_fma4_valid_op_p): Removed.\n\t* config/i386/i386.md: Do not use ix86_fma4_valid_op_p.\n\t* config/i386/sse.md (fma4_*): Remove alternative with operand 1\n\tmatching a memory access.  Do not use ix86_fma4_valid_op_p.\n\t(xop_*): Same.\n\tDo not use ix86_fma4_valid_op_p in FMA4 and XOP splitters.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r154970", "tree": {"sha": "267191ff0f23bec93254f2394b10bbd82d57036b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267191ff0f23bec93254f2394b10bbd82d57036b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c"}], "stats": {"total": 1010, "additions": 385, "deletions": 625}, "files": [{"sha": "2f29cb5c235590125c377ea1fc24bf35f595b334", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "patch": "@@ -1,3 +1,14 @@\n+2009-12-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386-protos.h (ix86_fma4_valid_op_p): Removed.\n+\t* config/i386/i386.c (ix86_fma4_valid_op_p): Removed.\n+\t* config/i386/i386.md: Do not use ix86_fma4_valid_op_p.\n+\t* config/i386/sse.md (fma4_*): Remove alternative with operand 1\n+\tmatching a memory access.  Do not use ix86_fma4_valid_op_p.\n+\t(xop_*): Same.\n+\tDo not use ix86_fma4_valid_op_p in FMA4 and XOP splitters.\n+\n 2009-12-02  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_fixup_binary_operands): For FMA4, force"}, {"sha": "cf29cc7068046aec8535524d19d3fd0d50a458b8", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "patch": "@@ -218,8 +218,7 @@ extern void ix86_expand_vector_set (bool, rtx, rtx, int);\n extern void ix86_expand_vector_extract (bool, rtx, rtx, int);\n extern void ix86_expand_reduc_v4sf (rtx (*)(rtx, rtx, rtx), rtx, rtx);\n \n-extern bool ix86_fma4_valid_op_p (rtx [], rtx, int, bool, int, bool);\n-extern void ix86_expand_fma4_multiple_memory (rtx [], enum machine_mode);\n+extern bool ix86_expand_fma4_multiple_memory (rtx [], enum machine_mode);\n \n extern void ix86_expand_vec_extract_even_odd (rtx, rtx, rtx, unsigned);\n "}, {"sha": "ade3a7d6d327e73981a440fb281165fe2f0fa9d0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 19, "deletions": 181, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "patch": "@@ -28807,197 +28807,35 @@ ix86_expand_round (rtx operand0, rtx operand1)\n   emit_move_insn (operand0, res);\n }\n \f\n-/* Validate whether a FMA4 instruction is valid or not.\n-   OPERANDS is the array of operands.\n-   NUM is the number of operands.\n-   USES_OC0 is true if the instruction uses OC0 and provides 4 variants.\n-   NUM_MEMORY is the maximum number of memory operands to accept.\n-   NUM_MEMORY less than zero is a special case to allow an operand\n-   of an instruction to be memory operation.\n-   when COMMUTATIVE is set, operand 1 and 2 can be swapped.  */\n \n-bool\n-ix86_fma4_valid_op_p (rtx operands[], rtx insn ATTRIBUTE_UNUSED, int num,\n-\t\t      bool uses_oc0, int num_memory, bool commutative)\n-{\n-  int mem_mask;\n-  int mem_count;\n-  int i;\n-\n-  /* Count the number of memory arguments */\n-  mem_mask = 0;\n-  mem_count = 0;\n-  for (i = 0; i < num; i++)\n-    {\n-      enum machine_mode mode = GET_MODE (operands[i]);\n-      if (register_operand (operands[i], mode))\n-\t;\n-\n-      else if (memory_operand (operands[i], mode))\n-\t{\n-\t  mem_mask |= (1 << i);\n-\t  mem_count++;\n-\t}\n-\n-      else\n-\t{\n-\t  rtx pattern = PATTERN (insn);\n-\n-\t  /* allow 0 for pcmov */\n-\t  if (GET_CODE (pattern) != SET\n-\t      || GET_CODE (SET_SRC (pattern)) != IF_THEN_ELSE\n-\t      || i < 2\n-\t      || operands[i] != CONST0_RTX (mode))\n-\t    return false;\n-\t}\n-    }\n-\n-  /* Special case pmacsdq{l,h} where we allow the 3rd argument to be\n-     a memory operation.  */\n-  if (num_memory < 0)\n-    {\n-      num_memory = -num_memory;\n-      if ((mem_mask & (1 << (num-1))) != 0)\n-\t{\n-\t  mem_mask &= ~(1 << (num-1));\n-\t  mem_count--;\n-\t}\n-    }\n-\n-  /* If there were no memory operations, allow the insn */\n-  if (mem_mask == 0)\n-    return true;\n-\n-  /* Do not allow the destination register to be a memory operand.  */\n-  else if (mem_mask & (1 << 0))\n-    return false;\n-\n-  /* If there are too many memory operations, disallow the instruction.  While\n-     the hardware only allows 1 memory reference, before register allocation\n-     for some insns, we allow two memory operations sometimes in order to allow\n-     code like the following to be optimized:\n+/* Fixup an FMA4 or XOP instruction that has 2 memory input references\n+   into a form the hardware will allow by using the destination\n+   register to load one of the memory operations.  Presently this is\n+   used by the multiply/add routines to allow 2 memory references.  */\n \n-\tfloat fmadd (float *a, float *b, float *c) { return (*a * *b) + *c; }\n-\n-    or similar cases that are vectorized into using the vfmaddss\n-    instruction.  */\n-  else if (mem_count > num_memory)\n-    return false;\n-\n-  /* Don't allow more than one memory operation if not optimizing.  */\n-  else if (mem_count > 1 && !optimize)\n-    return false;\n-\n-  else if (num == 4 && mem_count == 1)\n-    {\n-      /* formats (destination is the first argument), example vfmaddss:\n-\t xmm1, xmm1, xmm2, xmm3/mem\n-\t xmm1, xmm1, xmm2/mem, xmm3\n-\t xmm1, xmm2, xmm3/mem, xmm1\n-\t xmm1, xmm2/mem, xmm3, xmm1 */\n-      if (uses_oc0)\n-\treturn ((mem_mask == (1 << 1))\n-\t\t|| (mem_mask == (1 << 2))\n-\t\t|| (mem_mask == (1 << 3)));\n-\n-      /* format, example vpmacsdd:\n-\t xmm1, xmm2, xmm3/mem, xmm1 */\n-      if (commutative)\n-\treturn (mem_mask == (1 << 2) || mem_mask == (1 << 1));\n-      else\n-\treturn (mem_mask == (1 << 2));\n-    }\n-\n-  else if (num == 4 && num_memory == 2)\n-    {\n-      /* If there are two memory operations, we can load one of the memory ops\n-\t into the destination register.  This is for optimizing the\n-\t multiply/add ops, which the combiner has optimized both the multiply\n-\t and the add insns to have a memory operation.  We have to be careful\n-\t that the destination doesn't overlap with the inputs.  */\n-      rtx op0 = operands[0];\n-\n-      if (reg_mentioned_p (op0, operands[1])\n-\t  || reg_mentioned_p (op0, operands[2])\n-\t  || reg_mentioned_p (op0, operands[3]))\n-\treturn false;\n-\n-      /* formats (destination is the first argument), example vfmaddss:\n-\t xmm1, xmm1, xmm2, xmm3/mem\n-\t xmm1, xmm1, xmm2/mem, xmm3\n-\t xmm1, xmm2, xmm3/mem, xmm1\n-\t xmm1, xmm2/mem, xmm3, xmm1\n-\n-         For the oc0 case, we will load either operands[1] or operands[3] into\n-         operands[0], so any combination of 2 memory operands is ok.  */\n-      if (uses_oc0)\n-\treturn true;\n-\n-      /* format, example vpmacsdd:\n-\t xmm1, xmm2, xmm3/mem, xmm1\n-\n-         For the integer multiply/add instructions be more restrictive and\n-         require operands[2] and operands[3] to be the memory operands.  */\n-      if (commutative)\n-\treturn (mem_mask == ((1 << 1) | (1 << 3)) || ((1 << 2) | (1 << 3)));\n-      else\n-\treturn (mem_mask == ((1 << 2) | (1 << 3)));\n-    }\n-\n-  else if (num == 3 && num_memory == 1)\n-    {\n-      /* formats, example vprotb:\n-\t xmm1, xmm2, xmm3/mem\n-\t xmm1, xmm2/mem, xmm3 */\n-      if (uses_oc0)\n-\treturn ((mem_mask == (1 << 1)) || (mem_mask == (1 << 2)));\n-\n-      /* format, example vpcomeq:\n-\t xmm1, xmm2, xmm3/mem */\n-      else\n-\treturn (mem_mask == (1 << 2));\n-    }\n-\n-  else\n-    gcc_unreachable ();\n-\n-  return false;\n-}\n-\n-\n-/* Fixup an FMA4 instruction that has 2 memory input references into a form the\n-   hardware will allow by using the destination register to load one of the\n-   memory operations.  Presently this is used by the multiply/add routines to\n-   allow 2 memory references.  */\n-\n-void\n+bool\n ix86_expand_fma4_multiple_memory (rtx operands[],\n \t\t\t\t  enum machine_mode mode)\n {\n-  rtx op0 = operands[0];\n+  rtx scratch = operands[0];\n \n-  if (memory_operand (op0, mode)\n-      || reg_mentioned_p (op0, operands[1])\n-      || reg_mentioned_p (op0, operands[2])\n-      || reg_mentioned_p (op0, operands[3]))\n-    gcc_unreachable ();\n+  gcc_assert (register_operand (operands[0], mode));\n+  gcc_assert (register_operand (operands[1], mode));\n+  gcc_assert (MEM_P (operands[2]) && MEM_P (operands[3]));\n \n-  /* For 2 memory operands, pick either operands[1] or operands[3] to move into\n-     the destination register.  */\n-  if (memory_operand (operands[1], mode))\n+  if (reg_mentioned_p (scratch, operands[1]))\n     {\n-      emit_move_insn (op0, operands[1]);\n-      operands[1] = op0;\n-    }\n-  else if (memory_operand (operands[3], mode))\n-    {\n-      emit_move_insn (op0, operands[3]);\n-      operands[3] = op0;\n+      if (!can_create_pseudo_p ())\n+\treturn false;\n+      scratch = gen_reg_rtx (mode);\n     }\n-  else\n-    gcc_unreachable ();\n \n-  return;\n+  emit_move_insn (scratch, operands[3]);\n+  if (rtx_equal_p (operands[2], operands[3]))\n+    operands[2] = operands[3] = scratch;\n+  else\n+    operands[3] = scratch;\n+  return true;\n }\n \n /* Table of valid machine attributes.  */"}, {"sha": "1ef3025ef56ad242cfe13568069146751f55ebc4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "patch": "@@ -19248,7 +19248,7 @@\n \t  (match_operand:MODEF 1 \"register_operand\" \"x\")\n \t  (match_operand:MODEF 2 \"register_operand\" \"x\")\n \t  (match_operand:MODEF 3 \"register_operand\" \"x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+  \"TARGET_XOP\"\n   \"vpcmov\\t{%1, %3, %2, %0|%0, %2, %3, %1}\"\n   [(set_attr \"type\" \"sse4arg\")])\n "}, {"sha": "78e4b6af1d898ba77a4f86576ae96490d7827d24", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 353, "deletions": 441, "changes": 794, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4926bb1d6060fdf9983ec5dc69f920ef82f979d3/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4926bb1d6060fdf9983ec5dc69f920ef82f979d3", "patch": "@@ -1703,14 +1703,13 @@\n ;;\t(set (reg3) (plus (reg2) (mem (addr3))))\n \n (define_insn \"fma4_fmadd<mode>4256\"\n-  [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"=x,x\")\n \t(plus:FMA4MODEF4\n \t (mult:FMA4MODEF4\n-\t  (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"x,x,xm\")\n-\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,xm,x\"))\n-\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x,x\")))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+\t  (match_operand:FMA4MODEF4 1 \"register_operand\" \"%x,x\")\n+\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n+\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x\")))]\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmadd<fma4modesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1720,34 +1719,29 @@\n   [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"\")\n \t(plus:FMA4MODEF4\n \t (mult:FMA4MODEF4\n-\t  (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_FMA4\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t  (match_operand:FMA4MODEF4 1 \"register_operand\" \"\")\n+\t  (match_operand:FMA4MODEF4 2 \"memory_operand\" \"\"))\n+\t (match_operand:FMA4MODEF4 3 \"memory_operand\" \"\")))]\n+  \"TARGET_FMA4\"\n+  [(set (match_dup 0)\n+        (plus:FMA4MODEF4\n+         (mult:FMA4MODEF4 (match_dup 1) (match_dup 2))\n+         (match_dup 3)))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, <MODE>mode);\n-  emit_insn (gen_fma4_fmadd<mode>4256 (operands[0], operands[1],\n-\t\t\t\t    operands[2], operands[3]));\n-  DONE;\n+ if (!ix86_expand_fma4_multiple_memory (operands, <MODE>mode))\n+   FAIL;\n })\n \n ;; Floating multiply and subtract\n ;; Allow two memory operands the same as fmadd\n (define_insn \"fma4_fmsub<mode>4256\"\n-  [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"=x,x\")\n \t(minus:FMA4MODEF4\n \t (mult:FMA4MODEF4\n-\t  (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"x,x,xm\")\n-\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,xm,x\"))\n-\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x,x\")))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+\t  (match_operand:FMA4MODEF4 1 \"register_operand\" \"%x,x\")\n+\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n+\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x\")))]\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsub<fma4modesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1757,36 +1751,31 @@\n   [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"\")\n \t(minus:FMA4MODEF4\n \t (mult:FMA4MODEF4\n-\t  (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_FMA4\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t  (match_operand:FMA4MODEF4 1 \"register_operand\" \"\")\n+\t  (match_operand:FMA4MODEF4 2 \"memory_operand\" \"\"))\n+\t (match_operand:FMA4MODEF4 3 \"memory_operand\" \"\")))]\n+  \"TARGET_FMA4\"\n+  [(set (match_dup 0)\n+        (minus:FMA4MODEF4\n+         (mult:FMA4MODEF4 (match_dup 1) (match_dup 2))\n+         (match_dup 3)))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, <MODE>mode);\n-  emit_insn (gen_fma4_fmsub<mode>4256 (operands[0], operands[1],\n-\t\t\t\t    operands[2], operands[3]));\n-  DONE;\n+ if (!ix86_expand_fma4_multiple_memory (operands, <MODE>mode))\n+   FAIL;\n })\n \n ;; Floating point negative multiply and add\n ;; Rewrite (- (a * b) + c) into the canonical form: c - (a * b)\n ;; Note operands are out of order to simplify call to ix86_fma4_valid_p\n ;; Allow two memory operands to help in optimizing.\n (define_insn \"fma4_fnmadd<mode>4256\"\n-  [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"=x,x\")\n \t(minus:FMA4MODEF4\n-\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x,x\")\n+\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x\")\n \t (mult:FMA4MODEF4\n-\t  (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"x,x,xm\")\n-\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,xm,x\"))))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+\t  (match_operand:FMA4MODEF4 1 \"register_operand\" \"%x,x\")\n+\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,m\"))))]\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmadd<fma4modesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1795,22 +1784,18 @@\n (define_split\n   [(set (match_operand:FMA4MODEF4 0 \"register_operand\" \"\")\n \t(minus:FMA4MODEF4\n-\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"\")\n+\t (match_operand:FMA4MODEF4 3 \"memory_operand\" \"\")\n \t (mult:FMA4MODEF4\n-\t  (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"\"))))]\n-  \"TARGET_FMA4\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t  (match_operand:FMA4MODEF4 1 \"register_operand\" \"\")\n+\t  (match_operand:FMA4MODEF4 2 \"memory_operand\" \"\"))))]\n+  \"TARGET_FMA4\"\n+  [(set (match_dup 0)\n+        (minus:FMA4MODEF4\n+\t (match_dup 3)\n+         (mult:FMA4MODEF4 (match_dup 1) (match_dup 2))))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, <MODE>mode);\n-  emit_insn (gen_fma4_fnmadd<mode>4256 (operands[0], operands[1],\n-\t\t\t\t     operands[2], operands[3]));\n-  DONE;\n+  if (!ix86_expand_fma4_multiple_memory (operands, <MODE>mode))\n+    FAIL;\n })\n \n ;; Floating point negative multiply and subtract\n@@ -1821,11 +1806,10 @@\n \t(minus:FMA4MODEF4\n \t (mult:FMA4MODEF4\n \t  (neg:FMA4MODEF4\n-\t   (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"x,x\"))\n-\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t   (match_operand:FMA4MODEF4 1 \"register_operand\" \"%x,x\"))\n+\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n \t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x\")))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmsub<fma4modesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1836,33 +1820,30 @@\n \t(minus:FMA4MODEF4\n \t (mult:FMA4MODEF4\n \t  (neg:FMA4MODEF4\n-\t   (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"\"))\n-\t  (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_FMA4\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, false)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t   (match_operand:FMA4MODEF4 1 \"register_operand\" \"\"))\n+\t  (match_operand:FMA4MODEF4 2 \"memory_operand\" \"\"))\n+\t (match_operand:FMA4MODEF4 3 \"memory_operand\" \"\")))]\n+  \"TARGET_FMA4\"\n+  [(set (match_dup 0)\n+        (minus:FMA4MODEF4\n+         (mult:FMA4MODEF4\n+\t  (neg:FMA4MODEF4 (match_dup 1))\n+\t  (match_dup 2))\n+         (match_dup 3)))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, <MODE>mode);\n-  emit_insn (gen_fma4_fnmsub<mode>4256 (operands[0], operands[1],\n-\t\t\t\t        operands[2], operands[3]));\n-  DONE;\n+  if (!ix86_expand_fma4_multiple_memory (operands, <MODE>mode))\n+    FAIL;\n })\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n (define_insn \"fma4_fmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x\")\n \t(plus:SSEMODEF4\n \t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"x,x,xm\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,xm,x\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x,x\")))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+\t  (match_operand:SSEMODEF4 1 \"register_operand\" \"%x,x\")\n+\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n+\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x\")))]\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmadd<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1872,21 +1853,17 @@\n   [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"\")\n \t(plus:SSEMODEF4\n \t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_FMA4\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t  (match_operand:SSEMODEF4 1 \"register_operand\" \"\")\n+\t  (match_operand:SSEMODEF4 2 \"memory_operand\" \"\"))\n+\t (match_operand:SSEMODEF4 3 \"memory_operand\" \"\")))]\n+  \"TARGET_FMA4\"\n+  [(set (match_dup 0)\n+        (plus:SSEMODEF4\n+         (mult:SSEMODEF4 (match_dup 1) (match_dup 2))\n+         (match_dup 3)))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, <MODE>mode);\n-  emit_insn (gen_fma4_fmadd<mode>4 (operands[0], operands[1],\n-\t\t\t\t    operands[2], operands[3]));\n-  DONE;\n+  if (!ix86_expand_fma4_multiple_memory (operands, <MODE>mode))\n+    FAIL;\n })\n \n ;; For the scalar operations, use operand1 for the upper words that aren't\n@@ -1897,28 +1874,26 @@\n \t(vec_merge:SSEMODEF2P\n \t (plus:SSEMODEF2P\n \t  (mult:SSEMODEF2P\n-\t   (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\")\n-\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t   (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n \t (match_dup 0)\n \t (const_int 1)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmadd<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; Floating multiply and subtract\n ;; Allow two memory operands the same as fmadd\n (define_insn \"fma4_fmsub<mode>4\"\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x\")\n \t(minus:SSEMODEF4\n \t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"x,x,xm\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,xm,x\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x,x\")))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+\t  (match_operand:SSEMODEF4 1 \"register_operand\" \"%x,x\")\n+\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n+\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x\")))]\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsub<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1928,21 +1903,17 @@\n   [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"\")\n \t(minus:SSEMODEF4\n \t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_FMA4\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t  (match_operand:SSEMODEF4 1 \"register_operand\" \"\")\n+\t  (match_operand:SSEMODEF4 2 \"memory_operand\" \"\"))\n+\t (match_operand:SSEMODEF4 3 \"memory_operand\" \"\")))]\n+  \"TARGET_FMA4\"\n+  [(set (match_dup 0)\n+        (minus:SSEMODEF4\n+         (mult:SSEMODEF4 (match_dup 1) (match_dup 2))\n+         (match_dup 3)))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, <MODE>mode);\n-  emit_insn (gen_fma4_fmsub<mode>4 (operands[0], operands[1],\n-\t\t\t\t    operands[2], operands[3]));\n-  DONE;\n+  if (!ix86_expand_fma4_multiple_memory (operands, <MODE>mode))\n+    FAIL;\n })\n \n ;; For the scalar operations, use operand1 for the upper words that aren't\n@@ -1953,13 +1924,12 @@\n \t(vec_merge:SSEMODEF2P\n \t (minus:SSEMODEF2P\n \t  (mult:SSEMODEF2P\n-\t   (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\")\n-\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t   (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n \t (match_dup 0)\n \t (const_int 1)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsub<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1969,14 +1939,13 @@\n ;; Note operands are out of order to simplify call to ix86_fma4_valid_p\n ;; Allow two memory operands to help in optimizing.\n (define_insn \"fma4_fnmadd<mode>4\"\n-  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"=x,x\")\n \t(minus:SSEMODEF4\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x,x\")\n+\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x\")\n \t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"x,x,xm\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,xm,x\"))))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+\t  (match_operand:SSEMODEF4 1 \"register_operand\" \"%x,x\")\n+\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,m\"))))]\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmadd<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1985,22 +1954,18 @@\n (define_split\n   [(set (match_operand:SSEMODEF4 0 \"register_operand\" \"\")\n \t(minus:SSEMODEF4\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"\")\n+\t (match_operand:SSEMODEF4 3 \"memory_operand\" \"\")\n \t (mult:SSEMODEF4\n-\t  (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"\"))))]\n-  \"TARGET_FMA4\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t  (match_operand:SSEMODEF4 1 \"register_operand\" \"\")\n+\t  (match_operand:SSEMODEF4 2 \"memory_operand\" \"\"))))]\n+  \"TARGET_FMA4\"\n+  [(set (match_dup 0)\n+        (minus:SSEMODEF4\n+\t (match_dup 3)\n+         (mult:SSEMODEF4 (match_dup 1) (match_dup 2))))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, <MODE>mode);\n-  emit_insn (gen_fma4_fnmadd<mode>4 (operands[0], operands[1],\n-\t\t\t\t     operands[2], operands[3]));\n-  DONE;\n+  if (!ix86_expand_fma4_multiple_memory (operands, <MODE>mode))\n+    FAIL;\n })\n \n ;; For the scalar operations, use operand1 for the upper words that aren't\n@@ -2012,12 +1977,11 @@\n \t (minus:SSEMODEF2P\n \t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\")\n \t  (mult:SSEMODEF2P\n-\t   (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\")\n-\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\")))\n+\t   (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\")))\n \t (match_dup 0)\n \t (const_int 1)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmadd<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2030,11 +1994,10 @@\n \t(minus:SSEMODEF4\n \t (mult:SSEMODEF4\n \t  (neg:SSEMODEF4\n-\t   (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"x,x\"))\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t   (match_operand:SSEMODEF4 1 \"register_operand\" \"%x,x\"))\n+\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n \t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"xm,x\")))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmsub<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2045,21 +2008,19 @@\n \t(minus:SSEMODEF4\n \t (mult:SSEMODEF4\n \t  (neg:SSEMODEF4\n-\t   (match_operand:SSEMODEF4 1 \"nonimmediate_operand\" \"\"))\n-\t  (match_operand:SSEMODEF4 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:SSEMODEF4 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_FMA4\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, false)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t   (match_operand:SSEMODEF4 1 \"register_operand\" \"\"))\n+\t  (match_operand:SSEMODEF4 2 \"memory_operand\" \"\"))\n+\t (match_operand:SSEMODEF4 3 \"memory_operand\" \"\")))]\n+  \"TARGET_FMA4\"\n+  [(set (match_dup 0)\n+        (minus:SSEMODEF4\n+         (mult:SSEMODEF4\n+\t  (neg:SSEMODEF4 (match_dup 1))\n+\t  (match_dup 2))\n+         (match_dup 3)))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, <MODE>mode);\n-  emit_insn (gen_fma4_fnmsub<mode>4 (operands[0], operands[1],\n-\t\t\t\t     operands[2], operands[3]));\n-  DONE;\n+  if (!ix86_expand_fma4_multiple_memory (operands, <MODE>mode))\n+    FAIL;\n })\n \n ;; For the scalar operations, use operand1 for the upper words that aren't\n@@ -2071,13 +2032,12 @@\n \t (minus:SSEMODEF2P\n \t  (mult:SSEMODEF2P\n \t   (neg:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\"))\n-\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t    (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\"))\n+\t   (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t  (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n \t (match_dup 0)\n \t (const_int 1)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmsub<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2089,11 +2049,11 @@\n \t(unspec:FMA4MODEF4\n \t [(plus:FMA4MODEF4\n \t   (mult:FMA4MODEF4\n-\t    (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"x,x\")\n-\t    (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t    (match_operand:FMA4MODEF4 1 \"register_operand\" \"%x,x\")\n+\t    (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n \t   (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x\"))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmadd<fma4modesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2103,11 +2063,11 @@\n \t(unspec:FMA4MODEF4\n \t [(minus:FMA4MODEF4\n \t   (mult:FMA4MODEF4\n-\t    (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"x,x\")\n-\t    (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t    (match_operand:FMA4MODEF4 1 \"register_operand\" \"%x,x\")\n+\t    (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n \t   (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x\"))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsub<fma4modesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2118,10 +2078,10 @@\n \t [(minus:FMA4MODEF4\n \t   (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x\")\n \t   (mult:FMA4MODEF4\n-\t    (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"x,x\")\n-\t    (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,xm\")))]\n+\t    (match_operand:FMA4MODEF4 1 \"register_operand\" \"%x,x\")\n+\t    (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,m\")))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmadd<fma4modesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2132,11 +2092,11 @@\n \t [(minus:FMA4MODEF4\n \t   (mult:FMA4MODEF4\n \t    (neg:FMA4MODEF4\n-\t     (match_operand:FMA4MODEF4 1 \"nonimmediate_operand\" \"x,x\"))\n-\t    (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t     (match_operand:FMA4MODEF4 1 \"register_operand\" \"%x,x\"))\n+\t    (match_operand:FMA4MODEF4 2 \"nonimmediate_operand\" \"x,m\"))\n \t   (match_operand:FMA4MODEF4 3 \"nonimmediate_operand\" \"xm,x\"))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmsub<fma4modesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2147,11 +2107,11 @@\n \t(unspec:SSEMODEF2P\n \t [(plus:SSEMODEF2P\n \t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t    (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmadd<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2161,11 +2121,11 @@\n \t(unspec:SSEMODEF2P\n \t [(minus:SSEMODEF2P\n \t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t    (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsub<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2176,10 +2136,10 @@\n \t [(minus:SSEMODEF2P\n \t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\")\n \t   (mult:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\")))]\n+\t    (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\")))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmadd<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2190,11 +2150,11 @@\n \t [(minus:SSEMODEF2P\n \t   (mult:SSEMODEF2P\n \t    (neg:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\"))\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\"))\n+\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t   (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmsub<ssemodesuffixf4>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2207,13 +2167,13 @@\n \t [(vec_merge:SSEMODEF2P\n \t   (plus:SSEMODEF2P\n \t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"x,x\")\n-\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (match_dup 0)\n \t   (const_int 1))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmadd<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n@@ -2224,13 +2184,13 @@\n \t [(vec_merge:SSEMODEF2P\n \t   (minus:SSEMODEF2P\n \t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"x,x\")\n-\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (match_dup 0)\n \t   (const_int 1))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsub<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n@@ -2242,12 +2202,12 @@\n \t   (minus:SSEMODEF2P\n \t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\")\n \t    (mult:SSEMODEF2P\n-\t     (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"x,x\")\n-\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\")))\n+\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\")\n+\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\")))\n \t   (match_dup 0)\n \t   (const_int 1))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmadd<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n@@ -2259,13 +2219,13 @@\n \t   (minus:SSEMODEF2P\n \t    (mult:SSEMODEF2P\n \t     (neg:SSEMODEF2P\n-\t      (match_operand:SSEMODEF2P 1 \"register_operand\" \"x,x\"))\n-\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:SSEMODEF2P 1 \"register_operand\" \"%x,x\"))\n+\t     (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (match_dup 0)\n \t   (const_int 1))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4 && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfnmsub<ssemodesuffixf2s>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n@@ -2281,17 +2241,16 @@\n \t(vec_merge:V8SF\n \t  (plus:V8SF\n \t    (mult:V8SF\n-\t      (match_operand:V8SF 1 \"nonimmediate_operand\" \"x,x\")\n-\t      (match_operand:V8SF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:V8SF 1 \"register_operand\" \"%x,x\")\n+\t      (match_operand:V8SF 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:V8SF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t  (minus:V8SF\n \t    (mult:V8SF\n \t      (match_dup 1)\n \t      (match_dup 2))\n \t    (match_dup 3))\n \t  (const_int 170)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmaddsubps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -2301,17 +2260,16 @@\n \t(vec_merge:V4DF\n \t  (plus:V4DF\n \t    (mult:V4DF\n-\t      (match_operand:V4DF 1 \"nonimmediate_operand\" \"x,x\")\n-\t      (match_operand:V4DF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:V4DF 1 \"register_operand\" \"%x,x\")\n+\t      (match_operand:V4DF 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:V4DF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t  (minus:V4DF\n \t    (mult:V4DF\n \t      (match_dup 1)\n \t      (match_dup 2))\n \t    (match_dup 3))\n \t  (const_int 10)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmaddsubpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V4DF\")])\n@@ -2321,17 +2279,16 @@\n \t(vec_merge:V4SF\n \t  (plus:V4SF\n \t    (mult:V4SF\n-\t      (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,x\")\n-\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:V4SF 1 \"register_operand\" \"%x,x\")\n+\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:V4SF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t  (minus:V4SF\n \t    (mult:V4SF\n \t      (match_dup 1)\n \t      (match_dup 2))\n \t    (match_dup 3))\n \t  (const_int 10)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmaddsubps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V4SF\")])\n@@ -2341,17 +2298,16 @@\n \t(vec_merge:V2DF\n \t  (plus:V2DF\n \t    (mult:V2DF\n-\t      (match_operand:V2DF 1 \"nonimmediate_operand\" \"x,x\")\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:V2DF 1 \"register_operand\" \"%x,x\")\n+\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:V2DF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t  (minus:V2DF\n \t    (mult:V2DF\n \t      (match_dup 1)\n \t      (match_dup 2))\n \t    (match_dup 3))\n \t  (const_int 2)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmaddsubpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V2DF\")])\n@@ -2361,17 +2317,16 @@\n \t(vec_merge:V8SF\n \t  (plus:V8SF\n \t    (mult:V8SF\n-\t      (match_operand:V8SF 1 \"nonimmediate_operand\" \"x,x\")\n-\t      (match_operand:V8SF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:V8SF 1 \"register_operand\" \"%x,x\")\n+\t      (match_operand:V8SF 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:V8SF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t  (minus:V8SF\n \t    (mult:V8SF\n \t      (match_dup 1)\n \t      (match_dup 2))\n \t    (match_dup 3))\n \t  (const_int 85)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsubaddps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -2381,17 +2336,16 @@\n \t(vec_merge:V4DF\n \t  (plus:V4DF\n \t    (mult:V4DF\n-\t      (match_operand:V4DF 1 \"nonimmediate_operand\" \"x,x\")\n-\t      (match_operand:V4DF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:V4DF 1 \"register_operand\" \"%x,x\")\n+\t      (match_operand:V4DF 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:V4DF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t  (minus:V4DF\n \t    (mult:V4DF\n \t      (match_dup 1)\n \t      (match_dup 2))\n \t    (match_dup 3))\n \t  (const_int 5)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsubaddpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V4DF\")])\n@@ -2401,17 +2355,16 @@\n \t(vec_merge:V4SF\n \t  (plus:V4SF\n \t    (mult:V4SF\n-\t      (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,x\")\n-\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:V4SF 1 \"register_operand\" \"%x,x\")\n+\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:V4SF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t  (minus:V4SF\n \t    (mult:V4SF\n \t      (match_dup 1)\n \t      (match_dup 2))\n \t    (match_dup 3))\n \t  (const_int 5)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsubaddps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V4SF\")])\n@@ -2421,17 +2374,16 @@\n \t(vec_merge:V2DF\n \t  (plus:V2DF\n \t    (mult:V2DF\n-\t      (match_operand:V2DF 1 \"nonimmediate_operand\" \"x,x\")\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t      (match_operand:V2DF 1 \"register_operand\" \"%x,x\")\n+\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m\"))\n \t    (match_operand:V2DF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t  (minus:V2DF\n \t    (mult:V2DF\n \t      (match_dup 1)\n \t      (match_dup 2))\n \t    (match_dup 3))\n \t  (const_int 1)))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsubaddpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V2DF\")])\n@@ -2444,8 +2396,8 @@\n \t [(vec_merge:V8SF\n \t   (plus:V8SF\n \t     (mult:V8SF\n-\t       (match_operand:V8SF 1 \"nonimmediate_operand\" \"x,x\")\n-\t       (match_operand:V8SF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t       (match_operand:V8SF 1 \"register_operand\" \"%x,x\")\n+\t       (match_operand:V8SF 2 \"nonimmediate_operand\" \"x,m\"))\n \t     (match_operand:V8SF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (minus:V8SF\n \t     (mult:V8SF\n@@ -2454,8 +2406,7 @@\n \t     (match_dup 3))\n \t   (const_int 170))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmaddsubps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -2466,8 +2417,8 @@\n \t [(vec_merge:V4DF\n \t   (plus:V4DF\n \t     (mult:V4DF\n-\t       (match_operand:V4DF 1 \"nonimmediate_operand\" \"x,x\")\n-\t       (match_operand:V4DF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t       (match_operand:V4DF 1 \"register_operand\" \"%x,x\")\n+\t       (match_operand:V4DF 2 \"nonimmediate_operand\" \"x,m\"))\n \t     (match_operand:V4DF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (minus:V4DF\n \t     (mult:V4DF\n@@ -2476,8 +2427,7 @@\n \t     (match_dup 3))\n \t   (const_int 10))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmaddsubpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V4DF\")])\n@@ -2488,8 +2438,8 @@\n \t [(vec_merge:V4SF\n \t   (plus:V4SF\n \t     (mult:V4SF\n-\t       (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,x\")\n-\t       (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t       (match_operand:V4SF 1 \"register_operand\" \"%x,x\")\n+\t       (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,m\"))\n \t     (match_operand:V4SF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (minus:V4SF\n \t     (mult:V4SF\n@@ -2498,8 +2448,7 @@\n \t     (match_dup 3))\n \t   (const_int 10))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmaddsubps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V4SF\")])\n@@ -2510,8 +2459,8 @@\n \t [(vec_merge:V2DF\n \t   (plus:V2DF\n \t     (mult:V2DF\n-\t       (match_operand:V2DF 1 \"nonimmediate_operand\" \"x,x\")\n-\t       (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t       (match_operand:V2DF 1 \"register_operand\" \"%x,x\")\n+\t       (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m\"))\n \t     (match_operand:V2DF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (minus:V2DF\n \t     (mult:V2DF\n@@ -2520,8 +2469,7 @@\n \t     (match_dup 3))\n \t   (const_int 2))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmaddsubpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V2DF\")])\n@@ -2532,8 +2480,8 @@\n \t [(vec_merge:V8SF\n \t   (plus:V8SF\n \t     (mult:V8SF\n-\t       (match_operand:V8SF 1 \"nonimmediate_operand\" \"x,x\")\n-\t       (match_operand:V8SF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t       (match_operand:V8SF 1 \"register_operand\" \"%x,x\")\n+\t       (match_operand:V8SF 2 \"nonimmediate_operand\" \"x,m\"))\n \t     (match_operand:V8SF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (minus:V8SF\n \t     (mult:V8SF\n@@ -2542,8 +2490,7 @@\n \t     (match_dup 3))\n \t   (const_int 85))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsubaddps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -2554,8 +2501,8 @@\n \t [(vec_merge:V4DF\n \t   (plus:V4DF\n \t     (mult:V4DF\n-\t       (match_operand:V4DF 1 \"nonimmediate_operand\" \"x,x\")\n-\t       (match_operand:V4DF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t       (match_operand:V4DF 1 \"register_operand\" \"%x,x\")\n+\t       (match_operand:V4DF 2 \"nonimmediate_operand\" \"x,m\"))\n \t     (match_operand:V4DF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (minus:V4DF\n \t     (mult:V4DF\n@@ -2564,8 +2511,7 @@\n \t     (match_dup 3))\n \t   (const_int 5))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsubaddpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V4DF\")])\n@@ -2576,8 +2522,8 @@\n \t [(vec_merge:V4SF\n \t   (plus:V4SF\n \t     (mult:V4SF\n-\t       (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,x\")\n-\t       (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t       (match_operand:V4SF 1 \"register_operand\" \"%x,x\")\n+\t       (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,m\"))\n \t     (match_operand:V4SF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (minus:V4SF\n \t     (mult:V4SF\n@@ -2586,8 +2532,7 @@\n \t     (match_dup 3))\n \t   (const_int 5))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsubaddps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V4SF\")])\n@@ -2598,8 +2543,8 @@\n \t [(vec_merge:V2DF\n \t   (plus:V2DF\n \t     (mult:V2DF\n-\t       (match_operand:V2DF 1 \"nonimmediate_operand\" \"x,x\")\n-\t       (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,xm\"))\n+\t       (match_operand:V2DF 1 \"register_operand\" \"%x,x\")\n+\t       (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m\"))\n \t     (match_operand:V2DF 3 \"nonimmediate_operand\" \"xm,x\"))\n \t   (minus:V2DF\n \t     (mult:V2DF\n@@ -2608,8 +2553,7 @@\n \t     (match_dup 3))\n \t   (const_int 1))]\n \t UNSPEC_FMA4_INTRINSIC))]\n-  \"TARGET_FMA4\n-   && ix86_fma4_valid_op_p (operands, insn, 4, true, 2, true)\"\n+  \"TARGET_FMA4 && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vfmsubaddpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"V2DF\")])\n@@ -10356,50 +10300,42 @@\n ;; that it does and splitting it later allows the following to be recognized:\n ;;\ta[i] = b[i] * c[i] + d[i];\n (define_insn \"xop_pmacsww\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (plus:V8HI\n \t (mult:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,m\")\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,x\"))\n-\t (match_operand:V8HI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 2, true)\"\n-  \"@\n-   vpmacsww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacsww\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t  (match_operand:V8HI 1 \"register_operand\" \"%x\")\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))\n+\t (match_operand:V8HI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacsww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; Split pmacsww with two memory operands into a load and the pmacsww.\n (define_split\n   [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n \t(plus:V8HI\n-\t (mult:V8HI (match_operand:V8HI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:V8HI 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_XOP\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, false, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t (mult:V8HI (match_operand:V8HI 1 \"register_operand\" \"\")\n+\t\t    (match_operand:V8HI 2 \"memory_operand\" \"\"))\n+\t (match_operand:V8HI 3 \"memory_operand\" \"\")))]\n+  \"TARGET_XOP\"\n+  [(set (match_dup 0)\n+        (plus:V8HI\n+         (mult:V8HI (match_dup 1) (match_dup 2))\n+         (match_dup 3)))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, V8HImode);\n-  emit_insn (gen_xop_pmacsww (operands[0], operands[1], operands[2],\n-\t\t\t      operands[3]));\n-  DONE;\n+  if (!ix86_expand_fma4_multiple_memory (operands, V8HImode))\n+    FAIL;\n })\n \n (define_insn \"xop_pmacssww\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ss_plus:V8HI\n-\t (mult:V8HI (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,m\")\n-\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,x\"))\n-\t (match_operand:V8HI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmacssww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacssww\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (mult:V8HI (match_operand:V8HI 1 \"register_operand\" \"%x\")\n+\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))\n+\t (match_operand:V8HI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacssww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -10408,134 +10344,120 @@\n ;; that it does and splitting it later allows the following to be recognized:\n ;;\ta[i] = b[i] * c[i] + d[i];\n (define_insn \"xop_pmacsdd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (plus:V4SI\n \t (mult:V4SI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,m\")\n-\t  (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,x\"))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 2, true)\"\n-  \"@\n-   vpmacsdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacsdd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t  (match_operand:V4SI 1 \"register_operand\" \"%x\")\n+\t  (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))\n+\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacsdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; Split pmacsdd with two memory operands into a load and the pmacsdd.\n (define_split\n   [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n \t(plus:V4SI\n-\t (mult:V4SI (match_operand:V4SI 1 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"\"))\n-\t (match_operand:V4SI 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_XOP\n-   && !ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\n-   && ix86_fma4_valid_op_p (operands, insn, 4, false, 2, true)\n-   && !reg_mentioned_p (operands[0], operands[1])\n-   && !reg_mentioned_p (operands[0], operands[2])\n-   && !reg_mentioned_p (operands[0], operands[3])\"\n-  [(const_int 0)]\n+\t (mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n+\t\t    (match_operand:V4SI 2 \"memory_operand\" \"\"))\n+\t (match_operand:V4SI 3 \"memory_operand\" \"\")))]\n+  \"TARGET_XOP\"\n+  [(set (match_dup 0)\n+        (plus:V4SI\n+         (mult:V4SI (match_dup 1) (match_dup 2))\n+         (match_dup 3)))]\n {\n-  ix86_expand_fma4_multiple_memory (operands, V4SImode);\n-  emit_insn (gen_xop_pmacsdd (operands[0], operands[1], operands[2],\n-\t\t\t      operands[3]));\n-  DONE;\n+  if (!ix86_expand_fma4_multiple_memory (operands, V4SImode))\n+    FAIL;\n })\n \n (define_insn \"xop_pmacssdd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ss_plus:V4SI\n-\t (mult:V4SI (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,m\")\n-\t\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,x\"))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmacssdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacssdd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"%x\")\n+\t\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))\n+\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacssdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pmacssdql\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(ss_plus:V2DI\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)])))\n \t  (vec_select:V2SI\n-\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t   (parallel [(const_int 1)\n \t\t      (const_int 3)])))\n-\t (match_operand:V2DI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmacssdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacssdql\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (match_operand:V2DI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacssdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pmacssdqh\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(ss_plus:V2DI\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmacssdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacssdqh\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (match_operand:V2DI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacssdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pmacsdql\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(plus:V2DI\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmacsdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacsdql\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (match_operand:V2DI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacsdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn_and_split \"*xop_pmacsdql_mem\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x,&x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x\")\n \t(plus:V2DI\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)]))))\n-\t (match_operand:V2DI 3 \"memory_operand\" \"m,m\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, -1, true)\"\n+\t (match_operand:V2DI 3 \"memory_operand\" \"m\")))]\n+  \"TARGET_XOP\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n@@ -10564,7 +10486,7 @@\n \t(mult:V2DI\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n+\t      (match_operand:V4SI 1 \"register_operand\" \"%x\")\n \t      (parallel [(const_int 1)\n \t\t\t (const_int 3)])))\n \t  (sign_extend:V2DI\n@@ -10598,43 +10520,41 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pmacsdqh\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(plus:V2DI\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmacsdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacsdqh\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (match_operand:V2DI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacsdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn_and_split \"*xop_pmacsdqh_mem\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x,&x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x\")\n \t(plus:V2DI\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"memory_operand\" \"m,m\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, -1, true)\"\n+\t (match_operand:V2DI 3 \"memory_operand\" \"m\")))]\n+  \"TARGET_XOP\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n@@ -10663,7 +10583,7 @@\n \t(mult:V2DI\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n+\t      (match_operand:V4SI 1 \"register_operand\" \"%x\")\n \t      (parallel [(const_int 0)\n \t\t\t (const_int 2)])))\n \t  (sign_extend:V2DI\n@@ -10698,72 +10618,68 @@\n \n ;; XOP parallel integer multiply/add instructions for the intrinisics\n (define_insn \"xop_pmacsswd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(ss_plus:V4SI\n \t (mult:V4SI\n \t  (sign_extend:V4SI\n \t   (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t    (match_operand:V8HI 1 \"register_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)\n \t\t       (const_int 5)\n \t\t       (const_int 7)])))\n \t  (sign_extend:V4SI\n \t   (vec_select:V4HI\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)\n \t\t       (const_int 5)\n \t\t       (const_int 7)]))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmacsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacsswd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pmacswd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(plus:V4SI\n \t (mult:V4SI\n \t  (sign_extend:V4SI\n \t   (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t    (match_operand:V8HI 1 \"register_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)\n \t\t       (const_int 5)\n \t\t       (const_int 7)])))\n \t  (sign_extend:V4SI\n \t   (vec_select:V4HI\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)\n \t\t       (const_int 5)\n \t\t       (const_int 7)]))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmacswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmacswd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmacswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pmadcsswd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(ss_plus:V4SI\n \t (plus:V4SI\n \t  (mult:V4SI\n \t   (sign_extend:V4SI\n \t    (vec_select:V4HI\n-\t     (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t     (match_operand:V8HI 1 \"register_operand\" \"%x\")\n \t     (parallel [(const_int 0)\n \t\t\t(const_int 2)\n \t\t\t(const_int 4)\n \t\t\t(const_int 6)])))\n \t   (sign_extend:V4SI\n \t    (vec_select:V4HI\n-\t     (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t     (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n \t     (parallel [(const_int 0)\n \t\t\t(const_int 2)\n \t\t\t(const_int 4)\n@@ -10783,29 +10699,27 @@\n \t\t\t(const_int 3)\n \t\t\t(const_int 5)\n \t\t\t(const_int 7)])))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmadcsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmadcsswd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmadcsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pmadcswd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(plus:V4SI\n \t (plus:V4SI\n \t  (mult:V4SI\n \t   (sign_extend:V4SI\n \t    (vec_select:V4HI\n-\t     (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x,m\")\n+\t     (match_operand:V8HI 1 \"register_operand\" \"%x\")\n \t     (parallel [(const_int 0)\n \t\t\t(const_int 2)\n \t\t\t(const_int 4)\n \t\t\t(const_int 6)])))\n \t   (sign_extend:V4SI\n \t    (vec_select:V4HI\n-\t     (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,x\")\n+\t     (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n \t     (parallel [(const_int 0)\n \t\t\t(const_int 2)\n \t\t\t(const_int 4)\n@@ -10825,32 +10739,30 @@\n \t\t\t(const_int 3)\n \t\t\t(const_int 5)\n \t\t\t(const_int 7)])))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, false, 1, true)\"\n-  \"@\n-   vpmadcswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n-   vpmadcswd\\t{%3, %1, %2, %0|%0, %2, %1, %3}\"\n+\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+  \"TARGET_XOP\"\n+  \"vpmadcswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; XOP parallel XMM conditional moves\n (define_insn \"xop_pcmov_<mode>\"\n-  [(set (match_operand:SSEMODE 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:SSEMODE 0 \"register_operand\" \"=x,x\")\n \t(if_then_else:SSEMODE\n-\t  (match_operand:SSEMODE 3 \"nonimmediate_operand\" \"x,x,m\")\n-\t  (match_operand:SSEMODE 1 \"vector_move_operand\" \"x,m,x\")\n-\t  (match_operand:SSEMODE 2 \"vector_move_operand\" \"xm,x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+\t  (match_operand:SSEMODE 3 \"nonimmediate_operand\" \"x,m\")\n+\t  (match_operand:SSEMODE 1 \"vector_move_operand\" \"x,x\")\n+\t  (match_operand:SSEMODE 2 \"vector_move_operand\" \"xm,x\")))]\n+  \"TARGET_XOP\"\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])\n \n (define_insn \"xop_pcmov_<mode>256\"\n-  [(set (match_operand:AVX256MODE 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:AVX256MODE 0 \"register_operand\" \"=x,x\")\n \t(if_then_else:AVX256MODE\n-\t  (match_operand:AVX256MODE 3 \"nonimmediate_operand\" \"x,x,m\")\n-\t  (match_operand:AVX256MODE 1 \"vector_move_operand\" \"x,m,x\")\n-\t  (match_operand:AVX256MODE 2 \"vector_move_operand\" \"xm,x,x\")))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+\t  (match_operand:AVX256MODE 3 \"nonimmediate_operand\" \"x,m\")\n+\t  (match_operand:AVX256MODE 1 \"vector_move_operand\" \"x,x\")\n+\t  (match_operand:AVX256MODE 2 \"vector_move_operand\" \"xm,x\")))]\n+  \"TARGET_XOP\"\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])\n \n@@ -11296,53 +11208,53 @@\n \n ;; XOP permute instructions\n (define_insn \"xop_pperm\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n \t(unspec:V16QI\n-\t  [(match_operand:V16QI 1 \"nonimmediate_operand\" \"x,x,m\")\n-\t   (match_operand:V16QI 2 \"nonimmediate_operand\" \"x,m,x\")\n-\t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,x\")]\n+\t  [(match_operand:V16QI 1 \"register_operand\" \"x,x\")\n+\t   (match_operand:V16QI 2 \"nonimmediate_operand\" \"x,m\")\n+\t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x\")]\n \t  UNSPEC_XOP_PERMUTE))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+  \"TARGET_XOP && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vpperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; XOP pack instructions that combine two vectors into a smaller vector\n (define_insn \"xop_pperm_pack_v2di_v4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V4SI\n \t (truncate:V2SI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,x,m\"))\n+\t  (match_operand:V2DI 1 \"register_operand\" \"x,x\"))\n \t (truncate:V2SI\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"x,m,x\"))))\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,x\"))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"x,m\"))))\n+   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x\"))]\n+  \"TARGET_XOP && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vpperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pperm_pack_v4si_v8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V8HI\n \t (truncate:V4HI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"x,x,m\"))\n+\t  (match_operand:V4SI 1 \"register_operand\" \"x,x\"))\n \t (truncate:V4HI\n-\t  (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m,x\"))))\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,x\"))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+\t  (match_operand:V4SI 2 \"nonimmediate_operand\" \"x,m\"))))\n+   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x\"))]\n+  \"TARGET_XOP && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vpperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_pperm_pack_v8hi_v16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V16QI\n \t (truncate:V8QI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"x,x,m\"))\n+\t  (match_operand:V8HI 1 \"register_operand\" \"x,x\"))\n \t (truncate:V8QI\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,m,x\"))))\n-   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x,x\"))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 4, true, 1, false)\"\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"x,m\"))))\n+   (use (match_operand:V16QI 3 \"nonimmediate_operand\" \"xm,x\"))]\n+  \"TARGET_XOP && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"vpperm\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n    (set_attr \"mode\" \"TI\")])\n@@ -11471,7 +11383,7 @@\n \t (rotatert:SSEMODE1248\n \t  (match_dup 1)\n \t  (neg:SSEMODE1248 (match_dup 2)))))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 3, true, 1, false)\"\n+  \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vprot<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"0\")\n@@ -11526,7 +11438,7 @@\n \t (ashiftrt:SSEMODE1248\n \t  (match_dup 1)\n \t  (neg:SSEMODE1248 (match_dup 2)))))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 3, true, 1, false)\"\n+  \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpsha<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"0\")\n@@ -11545,7 +11457,7 @@\n \t (lshiftrt:SSEMODE1248\n \t  (match_dup 1)\n \t  (neg:SSEMODE1248 (match_dup 2)))))]\n-  \"TARGET_XOP && ix86_fma4_valid_op_p (operands, insn, 3, true, 1, false)\"\n+  \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpshl<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"0\")"}]}