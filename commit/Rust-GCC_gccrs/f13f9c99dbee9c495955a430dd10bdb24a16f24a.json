{"sha": "f13f9c99dbee9c495955a430dd10bdb24a16f24a", "node_id": "C_kwDOANBUbNoAKGYxM2Y5Yzk5ZGJlZTljNDk1OTU1YTQzMGRkMTBiZGIyNGExNmYyNGE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-19T12:26:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-19T14:30:56Z"}, "message": "libstdc++: Implement LWG 3683 for pmr::polymorphic_allocator\n\nThis issue has recently been moved to Tentatively Ready, and seems\nuncontroversial. This allows equality comparison with types that are\nconvertible to pmr::polymorphic_allocator, which fail deduction for the\nexisting equality operator.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/memory_resource (polymorphic_allocator): Add\n\tnon-template equality operator, as proposed for LWG 3683.\n\t* testsuite/20_util/polymorphic_allocator/lwg3683.cc: New test.", "tree": {"sha": "4dac810cf67f6bac7e59ce83be736453bb74e1d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dac810cf67f6bac7e59ce83be736453bb74e1d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f13f9c99dbee9c495955a430dd10bdb24a16f24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13f9c99dbee9c495955a430dd10bdb24a16f24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f13f9c99dbee9c495955a430dd10bdb24a16f24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13f9c99dbee9c495955a430dd10bdb24a16f24a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060173dd73fcaf0767215f9d989ad064e2d5fe2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/060173dd73fcaf0767215f9d989ad064e2d5fe2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/060173dd73fcaf0767215f9d989ad064e2d5fe2a"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "745422ad5eba549e5dcca8fab8d74da6767ff995", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13f9c99dbee9c495955a430dd10bdb24a16f24a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13f9c99dbee9c495955a430dd10bdb24a16f24a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=f13f9c99dbee9c495955a430dd10bdb24a16f24a", "patch": "@@ -356,6 +356,22 @@ namespace pmr\n       __attribute__((__returns_nonnull__))\n       { return _M_resource; }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3683. operator== for polymorphic_allocator cannot deduce template arg\n+      [[nodiscard]]\n+      friend bool\n+      operator==(const polymorphic_allocator& __a,\n+\t\t const polymorphic_allocator& __b) noexcept\n+      { return *__a.resource() == *__b.resource(); }\n+\n+#if __cpp_impl_three_way_comparison < 201907L\n+      [[nodiscard]]\n+      friend bool\n+      operator!=(const polymorphic_allocator& __a,\n+\t\t const polymorphic_allocator& __b) noexcept\n+      { return !(__a == __b); }\n+#endif\n+\n     private:\n #if ! __cpp_lib_make_obj_using_allocator\n       using __uses_alloc1_ = __uses_alloc1<polymorphic_allocator>;"}, {"sha": "acc91f540b5ebd49bd633727137d4e632b3b58db", "filename": "libstdc++-v3/testsuite/20_util/polymorphic_allocator/lwg3683.cc", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f13f9c99dbee9c495955a430dd10bdb24a16f24a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Flwg3683.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f13f9c99dbee9c495955a430dd10bdb24a16f24a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Flwg3683.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Flwg3683.cc?ref=f13f9c99dbee9c495955a430dd10bdb24a16f24a", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <memory_resource>\n+\n+bool\n+test_lwg3683(const std::pmr::polymorphic_allocator<int>& a)\n+{\n+  if (a == std::pmr::get_default_resource())\n+    return true;\n+  if (std::pmr::get_default_resource() != a)\n+    return false;\n+  throw a;\n+}"}]}