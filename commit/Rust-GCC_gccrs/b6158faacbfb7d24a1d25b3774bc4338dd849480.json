{"sha": "b6158faacbfb7d24a1d25b3774bc4338dd849480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxNThmYWFjYmZiN2QyNGExZDI1YjM3NzRiYzQzMzhkZDg0OTQ4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-10-01T08:08:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-02T09:21:28Z"}, "message": "c++: Move CALL_FROM_NEW_OR_DELETE_P to tree.h\n\nAs discussed with richi, we should be able to use TREE_PROTECTED for this\nflag, since CALL_FROM_THUNK_P will never be set on a call to an operator new\nor delete.\n\n2020-10-01  Jason Merril  <jason@redhat.com>\n\ngcc/cp/ChangeLog:\n\t* lambda.c (call_from_lambda_thunk_p): New.\n\t* cp-gimplify.c (cp_genericize_r): Use it.\n\t* pt.c (tsubst_copy_and_build): Use it.\n\t* typeck.c (check_return_expr): Use it.\n\t* cp-tree.h: Declare it.\n\t(CALL_FROM_NEW_OR_DELETE_P): Move to gcc/tree.h.\n\ngcc/ChangeLog:\n\t* tree.h (CALL_FROM_NEW_OR_DELETE_P): Move from cp-tree.h.\n\t* tree-core.h: Document new usage of protected_flag.", "tree": {"sha": "504ac11d39caf4dcd7cd038bdda69ec153d42e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/504ac11d39caf4dcd7cd038bdda69ec153d42e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6158faacbfb7d24a1d25b3774bc4338dd849480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6158faacbfb7d24a1d25b3774bc4338dd849480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6158faacbfb7d24a1d25b3774bc4338dd849480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6158faacbfb7d24a1d25b3774bc4338dd849480/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a0423c52ef56d6fc2e0392b91bf22941fdeb0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0423c52ef56d6fc2e0392b91bf22941fdeb0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0423c52ef56d6fc2e0392b91bf22941fdeb0db"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "07549828dc94e0df37b1640d6a52183be1a76f7e", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=b6158faacbfb7d24a1d25b3774bc4338dd849480", "patch": "@@ -962,7 +962,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n     omp_cxx_notice_variable (wtd->omp_ctx, stmt);\n \n   /* Don't dereference parms in a thunk, pass the references through. */\n-  if ((TREE_CODE (stmt) == CALL_EXPR && CALL_FROM_THUNK_P (stmt))\n+  if ((TREE_CODE (stmt) == CALL_EXPR && call_from_lambda_thunk_p (stmt))\n       || (TREE_CODE (stmt) == AGGR_INIT_EXPR && AGGR_INIT_FROM_THUNK_P (stmt)))\n     {\n       *walk_subtrees = 0;"}, {"sha": "fda5ffa40361b268e6d694d8251d8c3e48a9a9f0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b6158faacbfb7d24a1d25b3774bc4338dd849480", "patch": "@@ -464,7 +464,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       SWITCH_STMT_NO_BREAK_P (in SWITCH_STMT)\n       LAMBDA_EXPR_CAPTURE_OPTIMIZED (in LAMBDA_EXPR)\n       IMPLICIT_CONV_EXPR_BRACED_INIT (in IMPLICIT_CONV_EXPR)\n-      CALL_FROM_NEW_OR_DELETE_P (in CALL_EXPR)\n    3: IMPLICIT_RVALUE_P (in NON_LVALUE_EXPR or STATIC_CAST_EXPR)\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -3839,11 +3838,6 @@ struct GTY(()) lang_decl {\n    should be performed at instantiation time.  */\n #define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0 (CALL_EXPR_CHECK (NODE))\n \n-/* In a CALL_EXPR, true for allocator calls from new or delete\n-   expressions.  */\n-#define CALL_FROM_NEW_OR_DELETE_P(NODE) \\\n-  TREE_LANG_FLAG_2 (CALL_EXPR_CHECK (NODE))\n-\n /* True if the arguments to NODE should be evaluated in left-to-right\n    order regardless of PUSH_ARGS_REVERSED.  */\n #define CALL_EXPR_ORDERED_ARGS(NODE) \\\n@@ -7268,6 +7262,7 @@ extern bool lambda_fn_in_template_p\t\t(tree);\n extern void maybe_add_lambda_conv_op            (tree);\n extern bool is_lambda_ignored_entity            (tree);\n extern bool lambda_static_thunk_p\t\t(tree);\n+extern bool call_from_lambda_thunk_p\t\t(tree);\n extern tree finish_builtin_launder\t\t(location_t, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree cp_build_vec_convert\t\t(tree, location_t, tree,"}, {"sha": "1a1647f465e804f64adefbb279bf61945fdeac11", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=b6158faacbfb7d24a1d25b3774bc4338dd849480", "patch": "@@ -1325,6 +1325,13 @@ lambda_static_thunk_p (tree fn)\n \t  && LAMBDA_TYPE_P (CP_DECL_CONTEXT (fn)));\n }\n \n+bool\n+call_from_lambda_thunk_p (tree call)\n+{\n+  return (CALL_FROM_THUNK_P (call)\n+\t  && lambda_static_thunk_p (current_function_decl));\n+}\n+\n /* Returns true iff VAL is a lambda-related declaration which should\n    be ignored by unqualified lookup.  */\n "}, {"sha": "72efecff37ff9298fdd6a6c86f46173447102b7c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b6158faacbfb7d24a1d25b3774bc4338dd849480", "patch": "@@ -19955,7 +19955,7 @@ tsubst_copy_and_build (tree t,\n \n \t/* Stripped-down processing for a call in a thunk.  Specifically, in\n \t   the thunk template for a generic lambda.  */\n-\tif (CALL_FROM_THUNK_P (t))\n+\tif (call_from_lambda_thunk_p (t))\n \t  {\n \t    /* Now that we've expanded any packs, the number of call args\n \t       might be different.  */"}, {"sha": "95b36a92491026b958946295ce37ce9b6125a2ce", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b6158faacbfb7d24a1d25b3774bc4338dd849480", "patch": "@@ -10171,7 +10171,7 @@ check_return_expr (tree retval, bool *no_warning)\n \n       /* The call in a (lambda) thunk needs no conversions.  */\n       if (TREE_CODE (retval) == CALL_EXPR\n-\t  && CALL_FROM_THUNK_P (retval))\n+\t  && call_from_lambda_thunk_p (retval))\n \tconverted = true;\n \n       /* First convert the value to the function's return type, then"}, {"sha": "752bec31c3f304bc011b5962e78313d926e5c39b", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=b6158faacbfb7d24a1d25b3774bc4338dd849480", "patch": "@@ -1220,7 +1220,8 @@ struct GTY(()) tree_base {\n            all decls\n \n        CALL_FROM_THUNK_P and\n-       CALL_ALLOCA_FOR_VAR_P in\n+       CALL_ALLOCA_FOR_VAR_P and\n+       CALL_FROM_NEW_OR_DELETE_P in\n            CALL_EXPR\n \n        OMP_CLAUSE_LINEAR_VARIABLE_STRIDE in"}, {"sha": "f27a7399a37dccb0f973f230d7e1caa7f777e8a4", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6158faacbfb7d24a1d25b3774bc4338dd849480/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b6158faacbfb7d24a1d25b3774bc4338dd849480", "patch": "@@ -921,7 +921,8 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   (TREE_CHECK (NODE, PARM_DECL)->decl_common.decl_nonshareable_flag)\n \n /* In a CALL_EXPR, means that the call is the jump from a thunk to the\n-   thunked-to function.  */\n+   thunked-to function.  Be careful to avoid using this macro when one of the\n+   next two applies instead.  */\n #define CALL_FROM_THUNK_P(NODE) (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n \n /* In a CALL_EXPR, if the function being called is BUILT_IN_ALLOCA, means that\n@@ -931,6 +932,12 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define CALL_ALLOCA_FOR_VAR_P(NODE) \\\n   (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n \n+/* In a CALL_EXPR, if the function being called is DECL_IS_OPERATOR_NEW_P or\n+   DECL_IS_OPERATOR_DELETE_P, true for allocator calls from C++ new or delete\n+   expressions.  */\n+#define CALL_FROM_NEW_OR_DELETE_P(NODE) \\\n+  (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n+\n /* Used in classes in C++.  */\n #define TREE_PRIVATE(NODE) ((NODE)->base.private_flag)\n /* Used in classes in C++. */"}]}