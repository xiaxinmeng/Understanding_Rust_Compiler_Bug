{"sha": "d50585233d29f2c9d4fb554b05a21c5556177d05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwNTg1MjMzZDI5ZjJjOWQ0ZmI1NTRiMDVhMjFjNTU1NjE3N2QwNQ==", "commit": {"author": {"name": "Changpeng Fang", "email": "changpeng.fang@amd.com", "date": "2010-06-14T20:51:26Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-06-14T20:51:26Z"}, "message": "Account prefetch_mod and unroll_factor for the computation of the prefetch count.\n\n2010-06-14  Changpeng Fang  <changpeng.fang@amd.com>\n\n\t* tree-ssa-loop-prefetch.c (nothing_to_prefetch_p): New.  Return\n\ttrue if no prefetch is going to be generated for a given group.\n\t(estimate_prefetch_count): Use prefetch_mod and unroll_factor to\n\testimate the prefetch_count.\n\t(loop_prefetch_arrays): Call nothing_to_prefetch_p; estimate the\n\tprefetch count by considering the unroll_factor and prefetch_mod\n\tfor is_loop_prefetching_profitable.\n\nFrom-SVN: r160766", "tree": {"sha": "34ac31c39ea1dbf3dd4dafb1ae6caf840737656b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ac31c39ea1dbf3dd4dafb1ae6caf840737656b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d50585233d29f2c9d4fb554b05a21c5556177d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50585233d29f2c9d4fb554b05a21c5556177d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50585233d29f2c9d4fb554b05a21c5556177d05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50585233d29f2c9d4fb554b05a21c5556177d05/comments", "author": {"login": "changpeng", "id": 4239661, "node_id": "MDQ6VXNlcjQyMzk2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4239661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changpeng", "html_url": "https://github.com/changpeng", "followers_url": "https://api.github.com/users/changpeng/followers", "following_url": "https://api.github.com/users/changpeng/following{/other_user}", "gists_url": "https://api.github.com/users/changpeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/changpeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changpeng/subscriptions", "organizations_url": "https://api.github.com/users/changpeng/orgs", "repos_url": "https://api.github.com/users/changpeng/repos", "events_url": "https://api.github.com/users/changpeng/events{/privacy}", "received_events_url": "https://api.github.com/users/changpeng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33d6748532861388e9644438ac5bc5e3de1222db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d6748532861388e9644438ac5bc5e3de1222db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d6748532861388e9644438ac5bc5e3de1222db"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "bf133214bbc1b58384ec751c5653ac5d6dd0418f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50585233d29f2c9d4fb554b05a21c5556177d05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50585233d29f2c9d4fb554b05a21c5556177d05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d50585233d29f2c9d4fb554b05a21c5556177d05", "patch": "@@ -1,3 +1,13 @@\n+2010-06-14  Changpeng Fang  <changpeng.fang@amd.com>\n+\n+\t* tree-ssa-loop-prefetch.c (nothing_to_prefetch_p): New.  Return\n+\ttrue if no prefetch is going to be generated for a given group.\n+\t(estimate_prefetch_count): Use prefetch_mod and unroll_factor to\n+\testimate the prefetch_count.\n+\t(loop_prefetch_arrays): Call nothing_to_prefetch_p; estimate the\n+\tprefetch count by considering the unroll_factor and prefetch_mod\n+\tfor is_loop_prefetching_profitable.\n+\n 2010-06-14  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* config/m68k/m68k.c (m68k_delegitimize_address): Don't do"}, {"sha": "65474898ad9cf706bf98bb6d13dfc13a3e343403", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50585233d29f2c9d4fb554b05a21c5556177d05/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50585233d29f2c9d4fb554b05a21c5556177d05/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=d50585233d29f2c9d4fb554b05a21c5556177d05", "patch": "@@ -994,18 +994,40 @@ schedule_prefetches (struct mem_ref_group *groups, unsigned unroll_factor,\n   return any;\n }\n \n-/* Estimate the number of prefetches in the given GROUPS.  */\n+/* Return TRUE if no prefetch is going to be generated in the given\n+   GROUPS.  */\n+\n+static bool\n+nothing_to_prefetch_p (struct mem_ref_group *groups)\n+{\n+  struct mem_ref *ref;\n+\n+  for (; groups; groups = groups->next)\n+    for (ref = groups->refs; ref; ref = ref->next)\n+      if (should_issue_prefetch_p (ref))\n+\treturn false;\n+\n+  return true;\n+}\n+\n+/* Estimate the number of prefetches in the given GROUPS.\n+   UNROLL_FACTOR is the factor by which LOOP was unrolled.  */\n \n static int\n-estimate_prefetch_count (struct mem_ref_group *groups)\n+estimate_prefetch_count (struct mem_ref_group *groups, unsigned unroll_factor)\n {\n   struct mem_ref *ref;\n+  unsigned n_prefetches;\n   int prefetch_count = 0;\n \n   for (; groups; groups = groups->next)\n     for (ref = groups->refs; ref; ref = ref->next)\n       if (should_issue_prefetch_p (ref))\n-\t  prefetch_count++;\n+\t{\n+\t  n_prefetches = ((unroll_factor + ref->prefetch_mod - 1)\n+\t\t\t  / ref->prefetch_mod);\n+\t  prefetch_count += n_prefetches;\n+\t}\n \n   return prefetch_count;\n }\n@@ -1716,8 +1738,7 @@ loop_prefetch_arrays (struct loop *loop)\n   /* Step 2: estimate the reuse effects.  */\n   prune_by_reuse (refs);\n \n-  prefetch_count = estimate_prefetch_count (refs);\n-  if (prefetch_count == 0)\n+  if (nothing_to_prefetch_p (refs))\n     goto fail;\n \n   determine_loop_nest_reuse (loop, refs, no_other_refs);\n@@ -1733,6 +1754,12 @@ loop_prefetch_arrays (struct loop *loop)\n   ninsns = tree_num_loop_insns (loop, &eni_size_weights);\n   unroll_factor = determine_unroll_factor (loop, refs, ninsns, &desc,\n \t\t\t\t\t   est_niter);\n+\n+  /* Estimate prefetch count for the unrolled loop.  */\n+  prefetch_count = estimate_prefetch_count (refs, unroll_factor);\n+  if (prefetch_count == 0)\n+    goto fail;\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Ahead %d, unroll factor %d, trip count \"\n \t     HOST_WIDE_INT_PRINT_DEC \"\\n\""}]}