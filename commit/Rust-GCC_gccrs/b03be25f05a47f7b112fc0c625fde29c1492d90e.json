{"sha": "b03be25f05a47f7b112fc0c625fde29c1492d90e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzYmUyNWYwNWE0N2Y3YjExMmZjMGM2MjVmZGUyOWMxNDkyZDkwZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-27T07:48:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-27T07:48:37Z"}, "message": "re PR tree-optimization/57396 (Wrong code with -fpredictive-commoning in Fortran double-loop)\n\n2013-05-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/57396\n\t* tree-affine.c (double_int_constant_multiple_p): Properly\n\treturn false for val == 0 and div != 0.\n\n\t* gfortran.fortran-torture/execute/pr57396.f90: New testcase.\n\nFrom-SVN: r199350", "tree": {"sha": "87f262ea797033d8ac94bd6a964c65a64d14106c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87f262ea797033d8ac94bd6a964c65a64d14106c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b03be25f05a47f7b112fc0c625fde29c1492d90e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03be25f05a47f7b112fc0c625fde29c1492d90e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03be25f05a47f7b112fc0c625fde29c1492d90e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03be25f05a47f7b112fc0c625fde29c1492d90e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f631c26698900d68bb6a6a75bb8cc3d006c7b942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f631c26698900d68bb6a6a75bb8cc3d006c7b942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f631c26698900d68bb6a6a75bb8cc3d006c7b942"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "b31591245f9ff2192c8fbe502a99287b199f4494", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03be25f05a47f7b112fc0c625fde29c1492d90e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03be25f05a47f7b112fc0c625fde29c1492d90e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b03be25f05a47f7b112fc0c625fde29c1492d90e", "patch": "@@ -1,3 +1,9 @@\n+2013-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57396\n+\t* tree-affine.c (double_int_constant_multiple_p): Properly\n+\treturn false for val == 0 and div != 0.\n+\n 2013-05-25  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.h: Use #elif in preprocessor conditions."}, {"sha": "d0f01c84c010e8249549287c28a84de165f1c60b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03be25f05a47f7b112fc0c625fde29c1492d90e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03be25f05a47f7b112fc0c625fde29c1492d90e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b03be25f05a47f7b112fc0c625fde29c1492d90e", "patch": "@@ -1,3 +1,8 @@\n+2013-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57396\n+\t* gfortran.fortran-torture/execute/pr57396.f90: New testcase.\n+\n 2013-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/last_bit.ads: New test."}, {"sha": "8ea92924ad85a0e7a6c04fd20dc7940783ec2847", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/pr57396.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03be25f05a47f7b112fc0c625fde29c1492d90e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr57396.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03be25f05a47f7b112fc0c625fde29c1492d90e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr57396.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpr57396.f90?ref=b03be25f05a47f7b112fc0c625fde29c1492d90e", "patch": "@@ -0,0 +1,33 @@\n+module testmod\n+  implicit none\n+\n+  contains\n+\n+  subroutine foo(n)\n+    integer, intent(in) :: n\n+    real :: r(0:n,-n:n), a(0:n,-n:n), dj\n+    integer :: k, j\n+\n+    ! initialize with some dummy values\n+    do j = -n, n\n+      a(:, j) = j\n+      r(:,j) = j + 1\n+    end do\n+\n+    ! here be dragons\n+    do k = 0, n\n+      dj = r(k, k - 2) * a(k, k - 2)\n+      r(k,k) = a(k, k - 1) * dj\n+    enddo\n+\n+    if (r(0,0) .ne. -2.) call abort\n+\n+  end subroutine\n+\n+end module\n+\n+program test\n+  use testmod\n+  implicit none\n+  call foo(5)\n+end program"}, {"sha": "46a183a07b4ddd10e0bb1bb3b1807e37ac0b6fcc", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03be25f05a47f7b112fc0c625fde29c1492d90e/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03be25f05a47f7b112fc0c625fde29c1492d90e/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=b03be25f05a47f7b112fc0c625fde29c1492d90e", "patch": "@@ -736,11 +736,10 @@ free_affine_expand_cache (struct pointer_map_t **cache)\n }\n \n /* If VAL != CST * DIV for any constant CST, returns false.\n-   Otherwise, if VAL != 0 (and hence CST != 0), and *MULT_SET is true,\n-   additionally compares CST and MULT, and if they are different,\n-   returns false.  Finally, if neither of these two cases occur,\n-   true is returned, and if CST != 0, CST is stored to MULT and\n-   MULT_SET is set to true.  */\n+   Otherwise, if *MULT_SET is true, additionally compares CST and MULT,\n+   and if they are different, returns false.  Finally, if neither of these\n+   two cases occur, true is returned, and CST is stored to MULT and MULT_SET\n+   is set to true.  */\n \n static bool\n double_int_constant_multiple_p (double_int val, double_int div,\n@@ -749,7 +748,13 @@ double_int_constant_multiple_p (double_int val, double_int div,\n   double_int rem, cst;\n \n   if (val.is_zero ())\n-    return true;\n+    {\n+      if (*mult_set && !mult->is_zero ())\n+\treturn false;\n+      *mult_set = true;\n+      *mult = double_int_zero;\n+      return true;\n+    }\n \n   if (div.is_zero ())\n     return false;"}]}