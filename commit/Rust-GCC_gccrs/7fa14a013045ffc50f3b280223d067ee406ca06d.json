{"sha": "7fa14a013045ffc50f3b280223d067ee406ca06d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZhMTRhMDEzMDQ1ZmZjNTBmM2IyODAyMjNkMDY3ZWU0MDZjYTA2ZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2011-11-29T17:33:05Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2011-11-29T17:33:05Z"}, "message": "Enable target specific builtins and macros when using the target attribute or pragma on rs6000\n\nFrom-SVN: r181809", "tree": {"sha": "737e31fc34a78e159fbf80d41ff8ed08ce3c6999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/737e31fc34a78e159fbf80d41ff8ed08ce3c6999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fa14a013045ffc50f3b280223d067ee406ca06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa14a013045ffc50f3b280223d067ee406ca06d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa14a013045ffc50f3b280223d067ee406ca06d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa14a013045ffc50f3b280223d067ee406ca06d/comments", "author": null, "committer": null, "parents": [{"sha": "8f5c9d66594de0e717d7d559054d5bfb2f2f5246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5c9d66594de0e717d7d559054d5bfb2f2f5246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5c9d66594de0e717d7d559054d5bfb2f2f5246"}], "stats": {"total": 5159, "additions": 2664, "deletions": 2495}, "files": [{"sha": "d200ed91e8136f8e3d317f8f4131af4f16487c8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fa14a013045ffc50f3b280223d067ee406ca06d", "patch": "@@ -1,3 +1,83 @@\n+2011-11-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtins.def: Completely rewrite builtin\n+\thandling to centralize more of the builtins in this file.  Change\n+\tsome builtin enumerations to be more consistant.  Use a new mask\n+\tto hold the current builtins, including SPE and PAIRED builtins\n+\twhich no longer are set via target_flags masks.  Add\n+\t-mdebug=builtin debug support.  For power machines, define all\n+\tAltivec and VSX buitins when the compiler starts, but don't allow\n+\tthe use of a builtin unless the appropriate switch is used, or\n+\t#pragma GCC target is used to change the options.  If the user\n+\tuses #pragma GCC target, update the appropriate hardware macros.\n+\t* common/config/rs6000/rs6000-common.c (rs6000_handle_option):\n+\tDitto.\n+\t* config/rs6000/rs6000.opt (rs6000_builtin_mask): Ditto.\n+\t* config/rs6000/rs6000-c.c (rs6000_macro_to_expand): Ditto.\n+\t(rs6000_define_or_undefine_macro): Ditto.\n+\t(rs6000_target_modify_macros): Ditto.\n+\t(rs6000_cpu_cpp_builtins): Ditto.\n+\t(altivec_overloaded_builtins): Ditto.\n+\t(altivec_build_resolved_builtin): Ditto.\n+\t* config/rs6000/rs6000.c (rs6000_target_modify_macros_ptr):\n+\tDitto.\n+\t(rs6000_builtin_info): Ditto.\n+\t(def_builtin): Ditto.\n+\t(enable_mask_for_builtins): Ditto.\n+\t(DEBUG_FMT_X): Ditto.\n+\t(rs6000_debug_reg_global): Ditto.\n+\t(rs6000_builtin_mask_calculate): Ditto.\n+\t(rs6000_option_override_internal): Ditto.\n+\t(rs6000_builtin_conversion): Ditto.\n+\t(rs6000_builtin_vectorized_function): Ditto.\n+\t(bdesc_3arg): Ditto.\n+\t(bdesc_dst): Ditto.\n+\t(bdesc_2arg): Ditto.\n+\t(builtin_description_predicates): Ditto.\n+\t(bdesc_altivec_preds): Ditto.\n+\t(bdesc_spe_predicates): Ditto.\n+\t(bdesc_spe_evsel): Ditto.\n+\t(bdesc_paired_preds): Ditto.\n+\t(bdesc_abs): Ditto.\n+\t(bdesc_1arg): Ditto.\n+\t(rs6000_overloaded_builtin_p): Ditto.\n+\t(rs6000_expand_unop_builtin): Ditto.\n+\t(bdesc_2arg_spe): Ditto.\n+\t(spe_expand_builtin): Ditto.\n+\t(rs6000_invalid_builtin): Ditto.\n+\t(rs6000_expand_builtin): Ditto.\n+\t(rs6000_init_builtins): Ditto.\n+\t(spe_init_builtins): Ditto.\n+\t(paired_init_builtins): Ditto.\n+\t(altivec_init_builtins): Ditto.\n+\t(builtin_function_type): Ditto.\n+\t(rs6000_common_init_builtins): Ditto.\n+\t(rs6000_builtin_reciprocal): Ditto.\n+\t(rs6000_builtin_mask_names): Ditto.\n+\t(rs6000_pragma_target_parse): Ditto.\n+\t(rs6000_function_specific_print): Ditto.\n+\t* config/rs6000/rs6000.h (MASK_DEBUG_BUILTIN): Ditto.\n+\t(MASK_DEBUG_ALL): Ditto.\n+\t(TARGET_DEBUG_BUILTIN): Ditto.\n+\t(TARGET_EXTRA_BUILTINS): Ditto.\n+\t(REGISTER_TARGET_PRAGMAS): Ditto.\n+\t(enum rs6000_btc): Ditto.\n+\t(RS6000_BTC_*): Ditto.\n+\t(RS6000_BTM_*): Ditto.\n+\t(enum rs6000_builtins): Ditto.\n+\t* config/rs6000/rs6000-protos.h (rs6000_overloaded_builtin_p):\n+\tDitto.\n+\t(rs6000_target_modify_macros): Ditto.\n+\t(rs6000_target_modify_macros_ptr): Ditto.\n+\n+\t* config/rs6000/vector.md (unsfloat<VEC_int><mode>2): Use the\n+\tstandard name for converting vector unsigned values to floating\n+\tpoint.  Delete the TARGET_VECTORIZE_BUILTIN_CONVERSION hook, which\n+\tis handled by machine independent code.\n+\t* config/rs6000/rs6000.c (TARGET_VECTORIZE_BUILTIN_CONVERSION):\n+\tDitto.\n+\t(rs6000_builtin_conversion): Ditto.\n+\n 2011-11-29  Dodji Seketeli  <dodji@redhat.com>\n \n \t* tree-diagnostic (struct loc_t): Rename into struct loc_map_pair."}, {"sha": "f40b69e3676d04278efbace811cba6ff707c4f59", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=7fa14a013045ffc50f3b280223d067ee406ca06d", "patch": "@@ -202,6 +202,8 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t    mask = MASK_DEBUG_COST;\n \t  else if (! strcmp (q, \"target\"))\n \t    mask = MASK_DEBUG_TARGET;\n+\t  else if (! strcmp (q, \"builtin\"))\n+\t    mask = MASK_DEBUG_BUILTIN;\n \t  else\n \t    error_at (loc, \"unknown -mdebug-%s switch\", q);\n "}, {"sha": "25880ea569104fe62cd723a306abea7177fec570", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1398, "deletions": 980, "changes": 2378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=7fa14a013045ffc50f3b280223d067ee406ca06d"}, {"sha": "76a21463ec3183607cdb5ccc0c81f584f10049ae", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 175, "deletions": 123, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=7fa14a013045ffc50f3b280223d067ee406ca06d", "patch": "@@ -159,6 +159,11 @@ rs6000_macro_to_expand (cpp_reader *pfile, const cpp_token *tok)\n   cpp_hashnode *expand_this = tok->val.node.node;\n   cpp_hashnode *ident;\n \n+  /* If the current machine does not have altivec, don't look for the\n+     keywords.  */\n+  if (!TARGET_ALTIVEC)\n+    return NULL;\n+\n   ident = altivec_categorize_keyword (tok);\n \n   if (ident != expand_this)\n@@ -260,50 +265,114 @@ rs6000_macro_to_expand (cpp_reader *pfile, const cpp_token *tok)\n   return expand_this;\n }\n \n+\n+/* Define or undefine a single macro.  */\n+\n+static void\n+rs6000_define_or_undefine_macro (bool define_p, const char *name)\n+{\n+  if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n+    fprintf (stderr, \"#%s %s\\n\", (define_p) ? \"define\" : \"undef\", name);\n+\n+  if (define_p)\n+    cpp_define (parse_in, name);\n+  else\n+    cpp_undef (parse_in, name);\n+}\n+\n+/* Define or undefine macros based on the current target.  If the user does\n+   #pragma GCC target, we need to adjust the macros dynamically.  Note, some of\n+   the options needed for builtins have been moved to separate variables, so\n+   have both the target flags and the builtin flags as arguments.  */\n+\n+void\n+rs6000_target_modify_macros (bool define_p, int flags, unsigned bu_mask)\n+{\n+  if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n+    fprintf (stderr, \"rs6000_target_modify_macros (%s, 0x%x, 0x%x)\\n\",\n+\t     (define_p) ? \"define\" : \"undef\",\n+\t     (unsigned) flags, bu_mask);\n+\n+  /* target_flags based options.  */\n+  if ((flags & MASK_POWER2) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR2\");\n+  else if ((flags & MASK_POWER) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR\");\n+  if ((flags & MASK_POWERPC) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC\");\n+  if ((flags & MASK_PPC_GPOPT) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPCSQ\");\n+  if ((flags & MASK_PPC_GFXOPT) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPCGR\");\n+  if ((flags & MASK_POWERPC64) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC64\");\n+  if ((flags & MASK_MFCRF) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR4\");\n+  if ((flags & MASK_POPCNTB) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR5\");\n+  if ((flags & MASK_FPRND) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR5X\");\n+  if ((flags & MASK_CMPB) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR6\");\n+  if ((flags & MASK_MFPGPR) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR6X\");\n+  if ((flags & MASK_POPCNTD) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR7\");\n+  if ((flags & MASK_SOFT_FLOAT) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_SOFT_FLOAT\");\n+  if ((flags & MASK_RECIP_PRECISION) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"__RECIP_PRECISION__\");\n+  if ((flags & MASK_ALTIVEC) != 0)\n+    {\n+      const char *vec_str = (define_p) ? \"__VEC__=10206\" : \"__VEC__\";\n+      rs6000_define_or_undefine_macro (define_p, \"__ALTIVEC__\");\n+      rs6000_define_or_undefine_macro (define_p, vec_str);\n+\n+\t  /* Define this when supporting context-sensitive keywords.  */\n+      if (!flag_iso)\n+\trs6000_define_or_undefine_macro (define_p, \"__APPLE_ALTIVEC__\");\n+    }\n+  if ((flags & MASK_VSX) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"__VSX__\");\n+\n+  /* options from the builtin masks.  */\n+  if ((bu_mask & RS6000_BTM_SPE) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"__SPE__\");\n+  if ((bu_mask & RS6000_BTM_PAIRED) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"__PAIRED__\");\n+  if ((bu_mask & RS6000_BTM_CELL) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"__PPU__\");\n+}\n+\n void\n rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n {\n-  if (TARGET_POWER2)\n-    builtin_define (\"_ARCH_PWR2\");\n-  else if (TARGET_POWER)\n-    builtin_define (\"_ARCH_PWR\");\n-  if (TARGET_POWERPC)\n-    builtin_define (\"_ARCH_PPC\");\n-  if (TARGET_PPC_GPOPT)\n-    builtin_define (\"_ARCH_PPCSQ\");\n-  if (TARGET_PPC_GFXOPT)\n-    builtin_define (\"_ARCH_PPCGR\");\n-  if (TARGET_POWERPC64)\n-    builtin_define (\"_ARCH_PPC64\");\n-  if (TARGET_MFCRF)\n-    builtin_define (\"_ARCH_PWR4\");\n-  if (TARGET_POPCNTB)\n-    builtin_define (\"_ARCH_PWR5\");\n-  if (TARGET_FPRND)\n-    builtin_define (\"_ARCH_PWR5X\");\n-  if (TARGET_CMPB)\n-    builtin_define (\"_ARCH_PWR6\");\n-  if (TARGET_MFPGPR)\n-    builtin_define (\"_ARCH_PWR6X\");\n+  /* Define all of the common macros.  */\n+  rs6000_target_modify_macros (true, target_flags,\n+\t\t\t       rs6000_builtin_mask_calculate ());\n+\n+  /* _ARCH_COM does not fit in the framework of target_modify_macros, so handle\n+     it specially.  */\n   if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)\n     builtin_define (\"_ARCH_COM\");\n-  if (TARGET_POPCNTD)\n-    builtin_define (\"_ARCH_PWR7\");\n-  if (TARGET_ALTIVEC)\n-    {\n-      builtin_define (\"__ALTIVEC__\");\n-      builtin_define (\"__VEC__=10206\");\n+  if (TARGET_FRE)\n+    builtin_define (\"__RECIP__\");\n+  if (TARGET_FRES)\n+    builtin_define (\"__RECIPF__\");\n+  if (TARGET_FRSQRTE)\n+    builtin_define (\"__RSQRTE__\");\n+  if (TARGET_FRSQRTES)\n+    builtin_define (\"__RSQRTEF__\");\n \n+  if (TARGET_EXTRA_BUILTINS)\n+    {\n       /* Define the AltiVec syntactic elements.  */\n       builtin_define (\"__vector=__attribute__((altivec(vector__)))\");\n       builtin_define (\"__pixel=__attribute__((altivec(pixel__))) unsigned short\");\n       builtin_define (\"__bool=__attribute__((altivec(bool__))) unsigned\");\n \n       if (!flag_iso)\n \t{\n-\t  /* Define this when supporting context-sensitive keywords.  */\n-\t  builtin_define (\"__APPLE_ALTIVEC__\");\n-\t  \n \t  builtin_define (\"vector=vector\");\n \t  builtin_define (\"pixel=pixel\");\n \t  builtin_define (\"bool=bool\");\n@@ -314,14 +383,6 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n \t  cpp_get_callbacks (pfile)->macro_to_expand = rs6000_macro_to_expand;\n \t}\n     }\n-  if (rs6000_cpu == PROCESSOR_CELL)\n-    builtin_define (\"__PPU__\");\n-  if (TARGET_SPE)\n-    builtin_define (\"__SPE__\");\n-  if (TARGET_PAIRED_FLOAT)\n-    builtin_define (\"__PAIRED__\");\n-  if (TARGET_SOFT_FLOAT)\n-    builtin_define (\"_SOFT_FLOAT\");\n   if ((!(TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)))\n       ||(TARGET_HARD_FLOAT && TARGET_FPRS && !TARGET_DOUBLE_FLOAT))\n     builtin_define (\"_SOFT_DOUBLE\");\n@@ -331,10 +392,9 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n   /* Used by libstdc++.  */\n   if (TARGET_NO_LWSYNC)\n     builtin_define (\"__NO_LWSYNC__\");\n-  if (TARGET_VSX)\n-    {\n-      builtin_define (\"__VSX__\");\n \n+  if (TARGET_EXTRA_BUILTINS)\n+    {\n       /* For the VSX builtin functions identical to Altivec functions, just map\n \t the altivec builtin into the vsx version (the altivec functions\n \t generate VSX code if -mvsx).  */\n@@ -365,16 +425,6 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n       builtin_define (\"__builtin_vsx_xvnmsubasp=__builtin_vsx_xvnmsubsp\");\n       builtin_define (\"__builtin_vsx_xvnmsubmsp=__builtin_vsx_xvnmsubsp\");\n     }\n-  if (RS6000_RECIP_HAVE_RE_P (DFmode))\n-    builtin_define (\"__RECIP__\");\n-  if (RS6000_RECIP_HAVE_RE_P (SFmode))\n-    builtin_define (\"__RECIPF__\");\n-  if (RS6000_RECIP_HAVE_RSQRTE_P (DFmode))\n-    builtin_define (\"__RSQRTE__\");\n-  if (RS6000_RECIP_HAVE_RSQRTE_P (SFmode))\n-    builtin_define (\"__RSQRTEF__\");\n-  if (TARGET_RECIP_PRECISION)\n-    builtin_define (\"__RECIP_PRECISION__\");\n \n   /* Tell users they can use __builtin_bswap{16,64}.  */\n   builtin_define (\"__HAVE_BSWAP__\");\n@@ -516,7 +566,7 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n   { ALTIVEC_BUILTIN_VEC_RSQRT, ALTIVEC_BUILTIN_VRSQRTFP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0, 0 },\n-  { ALTIVEC_BUILTIN_VEC_RSQRT, VSX_BUILTIN_VEC_RSQRT_V2DF,\n+  { ALTIVEC_BUILTIN_VEC_RSQRT, VSX_BUILTIN_RSQRT_2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_RSQRTE, ALTIVEC_BUILTIN_VRSQRTEFP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0, 0 },\n@@ -3198,140 +3248,140 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     ~RS6000_BTI_pixel_V8HI },\n \n   /* Predicates.  */\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTFP_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTFP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n-  { ALTIVEC_BUILTIN_VCMPGT_P, VSX_BUILTIN_XVCMPGTDP_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, VSX_BUILTIN_XVCMPGTDP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DF, RS6000_BTI_V2DF },\n \n \n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_pixel_V8HI, RS6000_BTI_pixel_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQFP_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, ALTIVEC_BUILTIN_VCMPEQFP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n-  { ALTIVEC_BUILTIN_VCMPEQ_P, VSX_BUILTIN_XVCMPEQDP_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPEQ_P, VSX_BUILTIN_XVCMPEQDP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DF, RS6000_BTI_V2DF },\n \n \n   /* cmpge is the same as cmpgt for all cases except floating point.\n      There is further code to deal with this special case in\n      altivec_build_resolved_builtin.  */\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_bool_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSH_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_bool_V8HI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTUW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGEFP_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGEFP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n-  { ALTIVEC_BUILTIN_VCMPGE_P, VSX_BUILTIN_XVCMPGEDP_P,\n+  { ALTIVEC_BUILTIN_VEC_VCMPGE_P, VSX_BUILTIN_XVCMPGEDP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DF, RS6000_BTI_V2DF },\n \n   { (enum rs6000_builtins) 0, (enum rs6000_builtins) 0, 0, 0, 0, 0 }\n@@ -3402,7 +3452,7 @@ altivec_build_resolved_builtin (tree *args, int n,\n      condition (LT vs. EQ, which is recognizable by bit 1 of the first\n      argument) is reversed.  Patch the arguments here before building\n      the resolved CALL_EXPR.  */\n-  if (desc->code == ALTIVEC_BUILTIN_VCMPGE_P\n+  if (desc->code == ALTIVEC_BUILTIN_VEC_VCMPGE_P\n       && desc->overloaded_code != ALTIVEC_BUILTIN_VCMPGEFP_P)\n     {\n       tree t;\n@@ -3448,18 +3498,20 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n {\n   VEC(tree,gc) *arglist = (VEC(tree,gc) *) passed_arglist;\n   unsigned int nargs = VEC_length (tree, arglist);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  enum rs6000_builtins fcode\n+    = (enum rs6000_builtins)DECL_FUNCTION_CODE (fndecl);\n   tree fnargs = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n   tree types[3], args[3];\n   const struct altivec_builtin_types *desc;\n   unsigned int n;\n \n-  if ((fcode < ALTIVEC_BUILTIN_OVERLOADED_FIRST\n-       || fcode > ALTIVEC_BUILTIN_OVERLOADED_LAST)\n-      && (fcode < VSX_BUILTIN_OVERLOADED_FIRST\n-\t  || fcode > VSX_BUILTIN_OVERLOADED_LAST))\n+  if (!rs6000_overloaded_builtin_p (fcode))\n     return NULL_TREE;\n \n+  if (TARGET_DEBUG_BUILTIN)\n+    fprintf (stderr, \"altivec_resolve_overloaded_builtin, code = %4d, %s\\n\",\n+\t     (int)fcode, IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+\n   /* For now treat vec_splats and vec_promote as the same.  */\n   if (fcode == ALTIVEC_BUILTIN_VEC_SPLATS\n       || fcode == ALTIVEC_BUILTIN_VEC_PROMOTE)"}, {"sha": "465015270c6e1ef4320368644e11b1a56ec1160c", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=7fa14a013045ffc50f3b280223d067ee406ca06d", "patch": "@@ -170,6 +170,8 @@ extern const char * output_isel (rtx *);\n extern void rs6000_call_indirect_aix (rtx, rtx, rtx);\n extern void rs6000_aix_asm_output_dwarf_table_ref (char *);\n extern void get_ppc476_thunk_name (char name[32]);\n+extern bool rs6000_overloaded_builtin_p (enum rs6000_builtins);\n+extern unsigned rs6000_builtin_mask_calculate (void);\n \n /* Declare functions in rs6000-c.c */\n \n@@ -178,6 +180,8 @@ extern void rs6000_cpu_cpp_builtins (struct cpp_reader *);\n #ifdef TREE_CODE\n extern bool rs6000_pragma_target_parse (tree, tree);\n #endif\n+extern void rs6000_target_modify_macros (bool, int, unsigned);\n+extern void (*rs6000_target_modify_macros_ptr) (bool, int, unsigned);\n \n #if TARGET_MACHO\n char *output_call (rtx, rtx *, int, int);"}, {"sha": "a615381fd738727b53297e67ee911a3930fcbab8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 887, "deletions": 1372, "changes": 2259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7fa14a013045ffc50f3b280223d067ee406ca06d"}, {"sha": "6bd2b8d310893421919ed1a638c34a90c0fb45ac", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 108, "deletions": 19, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=7fa14a013045ffc50f3b280223d067ee406ca06d", "patch": "@@ -373,19 +373,22 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define MASK_DEBUG_ADDR\t\t0x08\t/* debug memory addressing */\n #define MASK_DEBUG_COST\t\t0x10\t/* debug rtx codes */\n #define MASK_DEBUG_TARGET\t0x20\t/* debug target attribute/pragma */\n+#define MASK_DEBUG_BUILTIN\t0x40\t/* debug builtins */\n #define MASK_DEBUG_ALL\t\t(MASK_DEBUG_STACK \\\n \t\t\t\t | MASK_DEBUG_ARG \\\n \t\t\t\t | MASK_DEBUG_REG \\\n \t\t\t\t | MASK_DEBUG_ADDR \\\n \t\t\t\t | MASK_DEBUG_COST \\\n-\t\t\t\t | MASK_DEBUG_TARGET)\n+\t\t\t\t | MASK_DEBUG_TARGET \\\n+\t\t\t\t | MASK_DEBUG_BUILTIN)\n \n #define\tTARGET_DEBUG_STACK\t(rs6000_debug & MASK_DEBUG_STACK)\n #define\tTARGET_DEBUG_ARG\t(rs6000_debug & MASK_DEBUG_ARG)\n #define TARGET_DEBUG_REG\t(rs6000_debug & MASK_DEBUG_REG)\n #define TARGET_DEBUG_ADDR\t(rs6000_debug & MASK_DEBUG_ADDR)\n #define TARGET_DEBUG_COST\t(rs6000_debug & MASK_DEBUG_COST)\n #define TARGET_DEBUG_TARGET\t(rs6000_debug & MASK_DEBUG_TARGET)\n+#define TARGET_DEBUG_BUILTIN\t(rs6000_debug & MASK_DEBUG_BUILTIN)\n \n extern enum rs6000_vector rs6000_vector_unit[];\n \n@@ -480,6 +483,24 @@ extern int rs6000_vector_align[];\n #define TARGET_FCTIDUZ\tTARGET_POPCNTD\n #define TARGET_FCTIWUZ\tTARGET_POPCNTD\n \n+/* For power systems, we want to enable Altivec and VSX builtins even if the\n+   user did not use -maltivec or -mvsx to allow the builtins to be used inside\n+   of #pragma GCC target or the target attribute to change the code level for a\n+   given system.  The SPE and Paired builtins are only enabled if you configure\n+   the compiler for those builtins, and those machines don't support altivec or\n+   VSX.  */\n+\n+#define TARGET_EXTRA_BUILTINS\t(!TARGET_SPE && !TARGET_PAIRED_FLOAT\t \\\n+\t\t\t\t && ((TARGET_POWERPC64\t\t\t \\\n+\t\t\t\t      || TARGET_PPC_GPOPT /* 970 */\t \\\n+\t\t\t\t      || TARGET_POPCNTB\t  /* ISA 2.02 */ \\\n+\t\t\t\t      || TARGET_CMPB\t  /* ISA 2.05 */ \\\n+\t\t\t\t      || TARGET_POPCNTD\t  /* ISA 2.06 */ \\\n+\t\t\t\t      || TARGET_ALTIVEC\t\t\t \\\n+\t\t\t\t      || TARGET_VSX)))\n+\n+\n+\n /* E500 processors only support plain \"sync\", not lwsync.  */\n #define TARGET_NO_LWSYNC TARGET_E500\n \n@@ -531,6 +552,7 @@ extern unsigned char rs6000_recip_bits[];\n   c_register_pragma (0, \"longcall\", rs6000_pragma_longcall);\t\\\n   targetm.target_option.pragma_parse = rs6000_pragma_target_parse; \\\n   targetm.resolve_overloaded_builtin = altivec_resolve_overloaded_builtin; \\\n+  rs6000_target_modify_macros_ptr = rs6000_target_modify_macros; \\\n } while (0)\n \n /* Target #defines.  */\n@@ -2271,24 +2293,83 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n /* General flags.  */\n extern int frame_pointer_needed;\n \n-/* Classification of the builtin functions to properly set the declaration tree\n-   flags.  */\n-enum rs6000_btc\n-{\n-  RS6000_BTC_MISC,\t\t/* assume builtin can do anything */\n-  RS6000_BTC_CONST,\t\t/* builtin is a 'const' function.  */\n-  RS6000_BTC_PURE,\t\t/* builtin is a 'pure' function.  */\n-  RS6000_BTC_FP_PURE\t\t/* builtin is 'pure' if rounding math.  */\n-};\n+/* Classification of the builtin functions as to which switches enable the\n+   builtin, and what attributes it should have.  We used to use the target\n+   flags macros, but we've run out of bits, so we now map the options into new\n+   settings used here.  */\n+\n+/* Builtin attributes.  */\n+#define RS6000_BTC_SPECIAL\t0x00000000\t/* Special function.  */\n+#define RS6000_BTC_UNARY\t0x00000001\t/* normal unary function.  */\n+#define RS6000_BTC_BINARY\t0x00000002\t/* normal binary function.  */\n+#define RS6000_BTC_TERNARY\t0x00000003\t/* normal ternary function.  */\n+#define RS6000_BTC_PREDICATE\t0x00000004\t/* predicate function.  */\n+#define RS6000_BTC_ABS\t\t0x00000005\t/* Altivec/VSX ABS function.  */\n+#define RS6000_BTC_EVSEL\t0x00000006\t/* SPE EVSEL function.  */\n+#define RS6000_BTC_DST\t\t0x00000007\t/* Altivec DST function.  */\n+#define RS6000_BTC_TYPE_MASK\t0x0000000f\t/* Mask to isolate types */\n+\n+#define RS6000_BTC_MISC\t\t0x00000000\t/* No special attributes.  */\n+#define RS6000_BTC_CONST\t0x00000100\t/* uses no global state.  */\n+#define RS6000_BTC_PURE\t\t0x00000200\t/* reads global state/mem.  */\n+#define RS6000_BTC_FP\t\t0x00000400\t/* depends on rounding mode.  */\n+#define RS6000_BTC_ATTR_MASK\t0x00000700\t/* Mask of the attributes.  */\n+\n+/* Miscellaneous information.  */\n+#define RS6000_BTC_OVERLOADED\t0x4000000\t/* function is overloaded.  */\n \n /* Convenience macros to document the instruction type.  */\n-#define RS6000_BTC_MEM\tRS6000_BTC_MISC\t/* load/store touches memory */\n-#define RS6000_BTC_SAT\tRS6000_BTC_MISC\t/* VMX saturate sets VSCR register */\n-\n-#undef RS6000_BUILTIN\n-#undef RS6000_BUILTIN_EQUATE\n-#define RS6000_BUILTIN(NAME, TYPE) NAME,\n-#define RS6000_BUILTIN_EQUATE(NAME, VALUE) NAME = VALUE,\n+#define RS6000_BTC_MEM\t\tRS6000_BTC_MISC\t/* load/store touches mem.  */\n+#define RS6000_BTC_SAT\t\tRS6000_BTC_MISC\t/* saturate sets VSCR.  */\n+\n+/* Builtin targets.  For now, we reuse the masks for those options that are in\n+   target flags, and pick two random bits for SPE and paired which aren't in\n+   target_flags.  */\n+#define RS6000_BTM_ALTIVEC\tMASK_ALTIVEC\t/* VMX/altivec vectors.  */\n+#define RS6000_BTM_VSX\t\tMASK_VSX\t/* VSX (vector/scalar).  */\n+#define RS6000_BTM_SPE\t\tMASK_STRING\t/* E500 */\n+#define RS6000_BTM_PAIRED\tMASK_MULHW\t/* 750CL paired insns.  */\n+#define RS6000_BTM_FRE\t\tMASK_POPCNTB\t/* FRE instruction.  */\n+#define RS6000_BTM_FRES\t\tMASK_PPC_GFXOPT\t/* FRES instruction.  */\n+#define RS6000_BTM_FRSQRTE\tMASK_PPC_GFXOPT\t/* FRSQRTE instruction.  */\n+#define RS6000_BTM_FRSQRTES\tMASK_POPCNTB\t/* FRSQRTES instruction.  */\n+#define RS6000_BTM_POPCNTD\tMASK_POPCNTD\t/* Target supports ISA 2.06.  */\n+#define RS6000_BTM_POWERPC\tMASK_POWERPC\t/* Target is powerpc.  */\n+#define RS6000_BTM_CELL\t\tMASK_FPRND\t/* Target is cell powerpc.  */\n+\n+#define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n+\t\t\t\t | RS6000_BTM_VSX\t\t\t\\\n+\t\t\t\t | RS6000_BTM_FRE\t\t\t\\\n+\t\t\t\t | RS6000_BTM_FRES\t\t\t\\\n+\t\t\t\t | RS6000_BTM_FRSQRTE\t\t\t\\\n+\t\t\t\t | RS6000_BTM_FRSQRTES\t\t\t\\\n+\t\t\t\t | RS6000_BTM_POPCNTD\t\t\t\\\n+\t\t\t\t | RS6000_BTM_POWERPC\t\t\t\\\n+\t\t\t\t | RS6000_BTM_CELL)\n+\n+/* Define builtin enum index.  */\n+\n+#undef RS6000_BUILTIN_1\n+#undef RS6000_BUILTIN_2\n+#undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_A\n+#undef RS6000_BUILTIN_D\n+#undef RS6000_BUILTIN_E\n+#undef RS6000_BUILTIN_P\n+#undef RS6000_BUILTIN_Q\n+#undef RS6000_BUILTIN_S\n+#undef RS6000_BUILTIN_X\n+\n+#define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n \n enum rs6000_builtins\n {\n@@ -2297,8 +2378,16 @@ enum rs6000_builtins\n   RS6000_BUILTIN_COUNT\n };\n \n-#undef RS6000_BUILTIN\n-#undef RS6000_BUILTIN_EQUATE\n+#undef RS6000_BUILTIN_1\n+#undef RS6000_BUILTIN_2\n+#undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_A\n+#undef RS6000_BUILTIN_D\n+#undef RS6000_BUILTIN_E\n+#undef RS6000_BUILTIN_P\n+#undef RS6000_BUILTIN_Q\n+#undef RS6000_BUILTIN_S\n+#undef RS6000_BUILTIN_X\n \n enum rs6000_builtin_type_index\n {"}, {"sha": "d428133cc749b9c3c650f81d485de0f859789a42", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=7fa14a013045ffc50f3b280223d067ee406ca06d", "patch": "@@ -79,6 +79,10 @@ enum rs6000_cmodel rs6000_current_cmodel = CMODEL_SMALL\n TargetVariable\n unsigned int rs6000_recip_control\n \n+;; Mask of what builtin functions are allowed\n+TargetVariable\n+unsigned int rs6000_builtin_mask\n+\n ;; Debug flags\n TargetVariable\n unsigned int rs6000_debug"}, {"sha": "4930f8c37336e041bf3ed1a8a76d67d1fe83d0bc", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=7fa14a013045ffc50f3b280223d067ee406ca06d", "patch": "@@ -677,7 +677,7 @@\n     }\n }\")\n \n-(define_expand \"unsigned_float<VEC_int><mode>2\"\n+(define_expand \"floatuns<VEC_int><mode>2\"\n   [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n \t(unsigned_float:VEC_F (match_operand:<VEC_INT> 1 \"vint_operand\" \"\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\""}, {"sha": "c8d90be340dea6767684c18dbd5149a05468830e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa14a013045ffc50f3b280223d067ee406ca06d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fa14a013045ffc50f3b280223d067ee406ca06d", "patch": "@@ -1,3 +1,8 @@\n+2011-11-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/ppc-target-4.c: New file to test target\n+\tspecific functions enabling target specific builtins.\n+\n 2011-11-29  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \tUse complex floating-point constant in CDBL."}]}