{"sha": "e4c9c07571387e0d377858d4ee578cece464bba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjOWMwNzU3MTM4N2UwZDM3Nzg1OGQ0ZWU1NzhjZWNlNDY0YmJhNg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-03-11T05:01:17Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-03-11T05:01:17Z"}, "message": "(top level)\n2004-03-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR ada/14131\n\tMove language detection to the top level.\n\t* configure.in: Find default values for the tools as\n\tsoon as possible.  Disable ada if GNAT is not found.\n\tEmit error message about missing languages.  Expand\n\t--enable-languages=all for the gcc subdirectory.\n\n(config)\n2004-03-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR ada/14131\n\tMove language detection to the top level.\n\t* acx.m4 (ACX_PROG_GNAT): New macro, moved here\n\tfrom the gcc subdirectory.\n(gcc)\n2004-03-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR ada/14131\n\tMove language detection to the top level.\n\t* configure.ac: Remove code to detect languages,\n\tit now lives exclusively in the top level.\n\t* aclocal.m4 (gcc_AC_PROG_GNAT): Moved to the\n\ttop level, renamed to ACX_PROG_GNAT.\n\n(gcc/ada)\n2004-03-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR ada/14131\n\tMove language detection to the top level.\n\t* config-lang.in: Build by default.\n\nFrom-SVN: r79299", "tree": {"sha": "5754cfb1e4fb54f59bd27aff97cdfe79c44ce77f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5754cfb1e4fb54f59bd27aff97cdfe79c44ce77f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4c9c07571387e0d377858d4ee578cece464bba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c9c07571387e0d377858d4ee578cece464bba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c9c07571387e0d377858d4ee578cece464bba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c9c07571387e0d377858d4ee578cece464bba6/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e46e9f822e035f84349a34ae4dce020c98c30da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46e9f822e035f84349a34ae4dce020c98c30da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e46e9f822e035f84349a34ae4dce020c98c30da5"}], "stats": {"total": 1190, "additions": 580, "deletions": 610}, "files": [{"sha": "10d9b027ae11ee0847d52e23efc8b7ea67d074b3", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -1,3 +1,12 @@\n+2004-03-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR ada/14131\n+\tMove language detection to the top level.\n+\t* configure.in: Find default values for the tools as\n+\tsoon as possible.  Disable ada if GNAT is not found.\n+\tEmit error message about missing languages.  Expand\n+\t--enable-languages=all for the gcc subdirectory.\n+\n 2004-03-10  Ben Elliston  <bje@gnu.org>\n \n \t* MAINTAINERS: Update my email address."}, {"sha": "7a970b709937ad0f8750879573d3d3dbd4207727", "filename": "config/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -1,3 +1,10 @@\n+2004-03-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR ada/14131\n+\tMove language detection to the top level.\n+\t* acx.m4 (ACX_PROG_GNAT): New macro, moved here\n+\tfrom the gcc subdirectory.\n+\n 2004-03-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* accross.m4 (AC_C_BIGENDIAN_CROSS): Compile endian probe with"}, {"sha": "ab7f98a216c9845c7c6d506c1b9c18d3349cae55", "filename": "config/acx.m4", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/config%2Facx.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/config%2Facx.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Facx.m4?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -155,3 +155,38 @@ AC_DEFUN([AC_PROG_CPP_WERROR],\n [AC_REQUIRE([AC_PROG_CPP])dnl\n m4_define([AC_CHECK_HEADER],m4_defn([_AC_CHECK_HEADER_OLD]))\n ac_c_preproc_warn_flag=yes])# AC_PROG_CPP_WERROR\n+\n+# Test for GNAT.\n+# We require the gnatbind program, and a compiler driver that\n+# understands Ada.  We use the user's CC setting, already found.\n+#\n+# Sets the shell variable have_gnat to yes or no as appropriate, and\n+# substitutes GNATBIND.\n+AC_DEFUN([ACX_PROG_GNAT],\n+[AC_REQUIRE([AC_CHECK_TOOL_PREFIX])\n+AC_REQUIRE([AC_PROG_CC])\n+AC_CHECK_TOOL(GNATBIND, gnatbind, no)\n+AC_CACHE_CHECK([whether compiler driver understands Ada],\n+\t\t acx_cv_cc_gcc_supports_ada,\n+[cat >conftest.adb <<EOF\n+procedure conftest is begin null; end conftest;\n+EOF\n+acx_cv_cc_gcc_supports_ada=no\n+# There is a bug in old released versions of GCC which causes the\n+# driver to exit successfully when the appropriate language module\n+# has not been installed.  This is fixed in 2.95.4, 3.0.2, and 3.1.\n+# Therefore we must check for the error message as well as an\n+# unsuccessful exit.\n+errors=`(${CC} -c conftest.adb) 2>&1 || echo failure`\n+if test x\"$errors\" = x; then\n+  acx_cv_cc_gcc_supports_ada=yes\n+  break\n+fi\n+rm -f conftest.*])\n+\n+if test x$GNATBIND != xno && test x$acx_cv_gcc_supports_ada != xno; then\n+  have_gnat=yes\n+else\n+  have_gnat=no\n+fi\n+])"}, {"sha": "485d8f3b6eb620b4e81d5cde6666fbeb7dacbca5", "filename": "configure.in", "status": "modified", "additions": 467, "deletions": 437, "changes": 904, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -747,273 +747,6 @@ case \"${noconfigdirs}\" in\n   *target-newlib*) noconfigdirs=\"$noconfigdirs target-libgloss\" ;;\n esac\n \n-# Figure out what language subdirectories are present.\n-# Look if the user specified --enable-languages=\"...\"; if not, use\n-# the environment variable $LANGUAGES if defined. $LANGUAGES might\n-# go away some day.\n-# NB:  embedded tabs in this IF block -- do not untabify\n-if test x\"${enable_languages+set}\" != xset; then\n-  if test x\"${LANGUAGES+set}\" = xset; then\n-    enable_languages=\"${LANGUAGES}\"\n-      echo configure.in: warning: setting LANGUAGES is deprecated, use --enable-languages instead 1>&2\n-  else\n-    enable_languages=all\n-  fi\n-else\n-  if test x\"${enable_languages}\" = x ||\n-     test x\"${enable_languages}\" = xyes;\n-     then\n-    echo configure.in: --enable-languages needs at least one language argument 1>&2\n-    exit 1\n-  fi\n-fi\n-enable_languages=`echo \"${enable_languages}\" | sed -e 's/[[ \t,]][[ \t,]]*/,/g' -e 's/,$//'`\n-\n-# First scan to see if an enabled language requires some other language.\n-# We assume that a given config-lang.in will list all the language\n-# front ends it requires, even if some are required indirectly.\n-for lang_frag in ${srcdir}/gcc/*/config-lang.in .. ; do\n-  case ${lang_frag} in\n-    ..) ;;\n-    # The odd quoting in the next line works around\n-    # an apparent bug in bash 1.12 on linux.\n-    ${srcdir}/gcc/[[*]]/config-lang.in) ;;\n-    *)\n-      # From the config-lang.in, get $language, $lang_requires\n-      language=\n-      lang_requires=\n-      . ${lang_frag}\n-      for other in ${lang_requires} ; do\n-        case ,${enable_languages}, in\n-\t  *,$other,*) ;;\n-\t  *,all,*) ;;\n-\t  *,$language,*)\n-\t    echo \" \\`$other' language required by \\`$language'; enabling\" 1>&2\n-\t    enable_languages=\"${enable_languages},${other}\"\n-\t    ;;\n-\tesac\n-      done\n-      ;;\n-  esac\n-done\n-\n-for lang_frag in ${srcdir}/gcc/*/config-lang.in .. ; do\n-  case ${lang_frag} in\n-    ..) ;;\n-    # The odd quoting in the next line works around\n-    # an apparent bug in bash 1.12 on linux.\n-    ${srcdir}/gcc/[[*]]/config-lang.in) ;;\n-    *)\n-      # From the config-lang.in, get $language, $target_libs, \n-      # $lang_dirs, and $build_by_default\n-      language=\n-      target_libs=\n-      lang_dirs=\n-      build_by_default=\n-      . ${lang_frag}\n-      if test \"x$language\" = x ; then\n-        echo \"${lang_frag} doesn't set \\$language.\" 1>&2\n-        exit 1\n-      fi\n-      case ,${enable_languages}, in\n-        *,${language},*)\n-          # Language was explicitly selected; include it.\n-          add_this_lang=yes\n-          ;;\n-        *,all,*)\n-          # 'all' was selected; include 'default' languages.\n-          case ${build_by_default} in\n-            no) add_this_lang=no ;;\n-            *) add_this_lang=yes ;;\n-          esac \n-          ;;\n-        *) add_this_lang=no ;;\n-      esac\n-      case ${add_this_lang} in\n-        no)\n-          # Remove language-dependent dirs.\n-          eval noconfigdirs='\"$noconfigdirs \"'\\\"$target_libs $lang_dirs\\\"\n-          ;;\n-      esac\n-      ;;\n-  esac\n-done\n-\n-# Remove the entries in $skipdirs and $noconfigdirs from $configdirs and\n-# $target_configdirs.\n-# If we have the source for $noconfigdirs entries, add them to $notsupp.\n-\n-notsupp=\"\"\n-for dir in . $skipdirs $noconfigdirs ; do\n-  dirname=`echo $dir | sed -e s/target-//g`\n-  if test $dir != .  && echo \" ${configdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n-    configdirs=`echo \" ${configdirs} \" | sed -e \"s/ ${dir} / /\"`\n-    if test -r $srcdir/$dirname/configure ; then\n-      if echo \" ${skipdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n-\ttrue\n-      else\n-\tnotsupp=\"$notsupp $dir\"\n-      fi\n-    fi\n-  fi\n-  if test $dir != . && echo \" ${target_configdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n-    target_configdirs=`echo \" ${target_configdirs} \" | sed -e \"s/ ${dir} / /\"`\n-    if test -r $srcdir/$dirname/configure ; then\n-      if echo \" ${skipdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n-\ttrue\n-      else\n-\tnotsupp=\"$notsupp $dir\"\n-      fi\n-    fi\n-  fi\n-done\n-\n-# Sometimes the tools are distributed with libiberty but with no other\n-# libraries.  In that case, we don't want to build target-libiberty.\n-if test -n \"${target_configdirs}\" ; then\n-  others=\n-  for i in `echo ${target_configdirs} | sed -e s/target-//g` ; do\n-    if test \"$i\" != \"libiberty\" ; then\n-      if test -r $srcdir/$i/configure ; then\n-\tothers=yes;\n-\tbreak;\n-      fi\n-    fi\n-  done\n-  if test -z \"${others}\" ; then\n-    target_configdirs=\n-  fi\n-fi\n-\n-# Quietly strip out all directories which aren't configurable in this tree.\n-# This relies on all configurable subdirectories being autoconfiscated, which\n-# is now the case.\n-configdirs_all=\"$configdirs\"\n-configdirs=\n-for i in ${configdirs_all} ; do\n-  if test -f ${srcdir}/$i/configure ; then\n-    configdirs=\"${configdirs} $i\"\n-  fi\n-done\n-target_configdirs_all=\"$target_configdirs\"\n-target_configdirs=\n-for i in ${target_configdirs_all} ; do\n-  j=`echo $i | sed -e s/target-//g` \n-  if test -f ${srcdir}/$j/configure ; then\n-    target_configdirs=\"${target_configdirs} $i\"\n-  fi\n-done\n-\n-# Produce a warning message for the subdirs we can't configure.\n-# This isn't especially interesting in the Cygnus tree, but in the individual\n-# FSF releases, it's important to let people know when their machine isn't\n-# supported by the one or two programs in a package.\n-\n-if test -n \"${notsupp}\" && test -z \"${norecursion}\" ; then\n-  # If $appdirs is non-empty, at least one of those directories must still\n-  # be configured, or we error out.  (E.g., if the gas release supports a\n-  # specified target in some subdirs but not the gas subdir, we shouldn't\n-  # pretend that all is well.)\n-  if test -n \"$appdirs\" ; then\n-    for dir in $appdirs ; do\n-      if test -r $dir/Makefile.in ; then\n-\tif echo \" ${configdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n-\t  appdirs=\"\"\n-\t  break\n-\tfi\n-\tif echo \" ${target_configdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n-\t  appdirs=\"\"\n-\t  break\n-\tfi\n-      fi\n-    done\n-    if test -n \"$appdirs\" ; then\n-      echo \"*** This configuration is not supported by this package.\" 1>&2\n-      exit 1\n-    fi\n-  fi\n-  # Okay, some application will build, or we don't care to check.  Still\n-  # notify of subdirs not getting built.\n-  echo \"*** This configuration is not supported in the following subdirectories:\" 1>&2\n-  echo \"    ${notsupp}\" 1>&2\n-  echo \"    (Any other directories should still work fine.)\" 1>&2\n-fi\n-\n-case \"$host\" in\n-  *msdosdjgpp*)\n-    enable_gdbtk=no ;;\n-esac\n-\n-copy_dirs=\n-\n-# Handle --with-headers=XXX.  If the value is not \"yes\", the contents of\n-# the named directory are copied to $(tooldir)/sys-include.\n-if test x\"${with_headers}\" != x && test x\"${with_headers}\" != xno ; then\n-  if test x${is_cross_compiler} = xno ; then\n-    echo 1>&2 '***' --with-headers is only supported when cross compiling\n-    exit 1\n-  fi\n-  if test x\"${with_headers}\" != xyes ; then\n-    case \"${exec_prefixoption}\" in\n-    \"\") x=${prefix} ;;\n-    *) x=${exec_prefix} ;;\n-    esac\n-    copy_dirs=\"${copy_dirs} ${with_headers} $x/${target_alias}/sys-include\"\n-  fi\n-fi\n-\n-# Handle --with-libs=XXX.  If the value is not \"yes\", the contents of\n-# the name directories are copied to $(tooldir)/lib.  Multiple directories\n-# are permitted.\n-if test x\"${with_libs}\" != x && test x\"${with_libs}\" != xno ; then\n-  if test x${is_cross_compiler} = xno ; then\n-    echo 1>&2 '***' --with-libs is only supported when cross compiling\n-    exit 1\n-  fi\n-  if test x\"${with_libs}\" != xyes ; then\n-    # Copy the libraries in reverse order, so that files in the first named\n-    # library override files in subsequent libraries.\n-    case \"${exec_prefixoption}\" in\n-    \"\") x=${prefix} ;;\n-    *) x=${exec_prefix} ;;\n-    esac\n-    for l in ${with_libs}; do\n-      copy_dirs=\"$l $x/${target_alias}/lib ${copy_dirs}\"\n-    done\n-  fi\n-fi\n-\n-# Handle ${copy_dirs}\n-set fnord ${copy_dirs}\n-shift\n-while test $# != 0 ; do\n-  if test -f $2/COPIED && test x\"`cat $2/COPIED`\" = x\"$1\" ; then\n-    :\n-  else\n-    echo Copying $1 to $2\n-\n-    # Use the install script to create the directory and all required\n-    # parent directories.\n-    if test -d $2 ; then\n-      :\n-    else\n-      echo >config.temp\n-      ${srcdir}/install-sh -c -m 644 config.temp $2/COPIED\n-    fi\n-\n-    # Copy the directory, assuming we have tar.\n-    # FIXME: Should we use B in the second tar?  Not all systems support it.\n-    (cd $1; tar -cf - .) | (cd $2; tar -xpf -)\n-\n-    # It is the responsibility of the user to correctly adjust all\n-    # symlinks.  If somebody can figure out how to handle them correctly\n-    # here, feel free to add the code.\n-\n-    echo $1 > $2/COPIED\n-  fi\n-  shift; shift\n-done\n-\n # Work in distributions that contain no compiler tools, like Autoconf.\n tentative_cc=\"\"\n host_makefile_frag=/dev/null\n@@ -1165,6 +898,473 @@ case \"${host}\" in\n esac\n fi\n \n+# If we aren't going to be using gcc, see if we can extract a definition\n+# of CC from the fragment.\n+# Actually, use the 'pre-extracted' version above.\n+if test -z \"${CC}\" && test \"${build}\" = \"${host}\" ; then\n+  IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+  found=\n+  for dir in $PATH; do\n+    test -z \"$dir\" && dir=.\n+    if test -f $dir/gcc; then\n+      found=yes\n+      break\n+    fi\n+  done\n+  IFS=\"$save_ifs\"\n+  if test -z \"${found}\" && test -n \"${tentative_cc}\" ; then\n+    CC=$tentative_cc\n+  fi\n+fi\n+\n+if test \"${build}\" != \"${host}\" ; then\n+  # If we are doing a Canadian Cross, in which the host and build systems\n+  # are not the same, we set reasonable default values for the tools.\n+\n+  BISON=${BISON-bison}\n+  CC=${CC-${host_alias}-gcc}\n+  CFLAGS=${CFLAGS-\"-g -O2\"}\n+  CXX=${CXX-${host_alias}-c++}\n+  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n+  CC_FOR_BUILD=${CC_FOR_BUILD-gcc}\n+  CC_FOR_TARGET=${CC_FOR_TARGET-${target_alias}-gcc}\n+  CXX_FOR_TARGET=${CXX_FOR_TARGET-${target_alias}-c++}\n+  GCJ_FOR_TARGET=${GCJ_FOR_TARGET-${target_alias}-gcj}\n+  GCC_FOR_TARGET=${GCC_FOR_TARGET-${CC_FOR_TARGET-${target_alias}-gcc}}\n+  BUILD_PREFIX=${build_alias}-\n+  BUILD_PREFIX_1=${build_alias}-\n+  MAKEINFO=${MAKEINFO-makeinfo}\n+\n+  if test -z \"${YACC}\" ; then\n+    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+    for dir in $PATH; do\n+      test -z \"$dir\" && dir=.\n+      if test -f $dir/bison; then\n+\tYACC=\"bison -y\"\n+\tbreak\n+      fi\n+      if test -f $dir/byacc; then\n+\tYACC=byacc\n+\tbreak\n+      fi\n+      if test -f $dir/yacc; then\n+\tYACC=yacc\n+\tbreak\n+      fi\n+    done\n+    IFS=\"$save_ifs\"\n+    if test -z \"${YACC}\" ; then\n+      YACC=\"bison -y\"\n+    fi\n+  fi\n+\n+  if test -z \"${LEX}\" ; then\n+    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+    for dir in $PATH; do\n+      test -z \"$dir\" && dir=.\n+      if test -f $dir/flex; then\n+\tLEX=flex\n+\tbreak\n+      fi\n+      if test -f $dir/lex; then\n+\tLEX=lex\n+\tbreak\n+      fi\n+    done\n+    IFS=\"$save_ifs\"\n+    LEX=${LEX-flex}\n+  fi\n+\n+else\n+  # Set reasonable default values for some tools even if not Canadian.\n+  # Of course, these are different reasonable default values, originally\n+  # specified directly in the Makefile.\n+  # We don't export, so that autoconf can do its job.\n+  # Note that all these settings are above the fragment inclusion point\n+  # in Makefile.in, so can still be overridden by fragments.\n+  # This is all going to change when we autoconfiscate...\n+\n+  BISON=\"\\$(USUAL_BISON)\"\n+  CC_FOR_BUILD=\"\\$(CC)\"\n+  GCC_FOR_TARGET=\"\\$(USUAL_GCC_FOR_TARGET)\"\n+  BUILD_PREFIX=\n+  BUILD_PREFIX_1=loser-\n+  MAKEINFO=\"\\$(USUAL_MAKEINFO)\"\n+  LEX=\"\\$(USUAL_LEX)\"\n+  YACC=\"\\$(USUAL_YACC)\"\n+\n+  # If CC is still not set, try to get gcc.\n+  cc_prog_is_gcc=\n+  if test -z \"${CC}\" ; then\n+    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n+    for dir in $PATH; do\n+      test -z \"$dir\" && dir=.\n+      if test -f $dir/gcc; then\n+\tCC=\"gcc\"\n+\tcc_prog_is_gcc=yes\n+\techo 'void f(){}' > conftest.c\n+\tif test -z \"`${CC} -g -c conftest.c 2>&1`\"; then\n+\t  CFLAGS=${CFLAGS-\"-g -O2\"}\n+\t  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n+\telse\n+\t  CFLAGS=${CFLAGS-\"-O2\"}\n+\t  CXXFLAGS=${CXXFLAGS-\"-O2\"}\n+\tfi\n+\trm -f conftest*\n+\tbreak\n+      fi\n+    done\n+    IFS=\"$save_ifs\"\n+    CC=${CC-cc}\n+  else\n+    # Determine if we are using gcc.\n+    cat > conftest.c <<EOF\n+#ifdef __GNUC__\n+  yes;\n+#endif\n+EOF\n+    if ${CC} -E conftest.c | grep yes >/dev/null 2>&1; then\n+      cc_prog_is_gcc=yes\n+    fi\n+    rm -f conftest.c\n+    if test -z \"${CFLAGS}\"; then\n+      # Here CC is set but CFLAGS is not.  Use a quick hack to use -O2 if CC\n+      # is set to a version of gcc.\n+      if test \"$cc_prog_is_gcc\" = yes; then\n+\techo 'void f(){}' > conftest.c\n+\tif test -z \"`${CC} -g -c conftest.c 2>&1`\"; then\n+\t  CFLAGS=${CFLAGS-\"-g -O2\"}\n+\t  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n+\telse\n+\t  CFLAGS=${CFLAGS-\"-O2\"}\n+\t  CXXFLAGS=${CXXFLAGS-\"-O2\"}\n+\tfi\n+\trm -f conftest*\n+      fi\n+    fi\n+  fi\n+\n+  # We must set the default linker to the linker used by gcc for the correct\n+  # operation of libtool.  If LD is not defined and we are using gcc, try to\n+  # set the LD default to the ld used by gcc.\n+  if test -z \"$LD\"; then\n+    if test \"$cc_prog_is_gcc\" = yes; then\n+      case $build in\n+      *-*-mingw*)\n+\tgcc_prog_ld=`$CC -print-prog-name=ld 2>&1 | tr -d '\\015'` ;;\n+      *)\n+\tgcc_prog_ld=`$CC -print-prog-name=ld 2>&1` ;;\n+      esac\n+      case $gcc_prog_ld in\n+      # Accept absolute paths.\n+      [[\\\\/]* | [A-Za-z]:[\\\\/]*)]\n+        LD=\"$gcc_prog_ld\" ;;\n+      esac\n+    fi\n+  fi\n+\n+  CXX=${CXX-\"c++\"}\n+  CFLAGS=${CFLAGS-\"-g\"}\n+  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n+fi\n+\n+ACX_PROG_GNAT\n+\n+# Figure out what language subdirectories are present.\n+# Look if the user specified --enable-languages=\"...\"; if not, use\n+# the environment variable $LANGUAGES if defined. $LANGUAGES might\n+# go away some day.\n+# NB:  embedded tabs in this IF block -- do not untabify\n+if test -d ${srcdir}/gcc; then\n+  if test x\"${enable_languages+set}\" != xset; then\n+    if test x\"${LANGUAGES+set}\" = xset; then\n+      enable_languages=\"${LANGUAGES}\"\n+        echo configure.in: warning: setting LANGUAGES is deprecated, use --enable-languages instead 1>&2\n+    else\n+      enable_languages=all\n+    fi\n+  else\n+    if test x\"${enable_languages}\" = x ||\n+       test x\"${enable_languages}\" = xyes;\n+       then\n+      echo configure.in: --enable-languages needs at least one language argument 1>&2\n+      exit 1\n+    fi\n+  fi\n+  enable_languages=`echo \"${enable_languages}\" | sed -e 's/[[ \t,]][[ \t,]]*/,/g' -e 's/,$//'`\n+\n+  # First scan to see if an enabled language requires some other language.\n+  # We assume that a given config-lang.in will list all the language\n+  # front ends it requires, even if some are required indirectly.\n+  for lang_frag in ${srcdir}/gcc/*/config-lang.in .. ; do\n+    case ${lang_frag} in\n+      ..) ;;\n+      # The odd quoting in the next line works around\n+      # an apparent bug in bash 1.12 on linux.\n+      ${srcdir}/gcc/[[*]]/config-lang.in) ;;\n+      *)\n+        # From the config-lang.in, get $language, $lang_requires\n+        language=\n+        lang_requires=\n+        . ${lang_frag}\n+        for other in ${lang_requires} ; do\n+          case ,${enable_languages}, in\n+\t    *,$other,*) ;;\n+\t    *,all,*) ;;\n+\t    *,$language,*)\n+\t      echo \" \\`$other' language required by \\`$language'; enabling\" 1>&2\n+\t      enable_languages=\"${enable_languages},${other}\"\n+\t      ;;\n+\t  esac\n+        done\n+        ;;\n+    esac\n+  done\n+\n+  new_enable_languages=c\n+  missing_languages=`echo \",$enable_languages,\" | sed -e s/,all,/,/ -e s/,c,/,/ `\n+\n+  for lang_frag in ${srcdir}/gcc/*/config-lang.in .. ; do\n+    case ${lang_frag} in\n+      ..) ;;\n+      # The odd quoting in the next line works around\n+      # an apparent bug in bash 1.12 on linux.\n+      ${srcdir}/gcc/[[*]]/config-lang.in) ;;\n+      *)\n+        # From the config-lang.in, get $language, $target_libs, \n+        # $lang_dirs, and $build_by_default\n+        language=\n+        target_libs=\n+        lang_dirs=\n+        build_by_default=\n+        . ${lang_frag}\n+        # This is quite sensitive to the ordering of the case statement arms.\n+        case ,${enable_languages},:${language}:${have_gnat}:${build_by_default} in\n+          *::*:*)\n+            echo \"${lang_frag} doesn't set \\$language.\" 1>&2\n+            exit 1\n+\t    ;;\n+          *:ada:no:*)\n+            # Ada was requested with no preexisting GNAT.  Disable unconditionally.\n+            add_this_lang=no\n+            ;;\n+          *,${language},*:*:*:*)\n+            # Language was explicitly selected; include it.\n+            add_this_lang=yes\n+            ;;\n+          *,all,*:*:*:no)\n+            # 'all' was selected, but this is not a default language\n+\t    # so do not include it.\n+            add_this_lang=no\n+\t    ;;\n+          *,all,*:*:*:*)\n+            # 'all' was selected and this is a default language; include it.\n+            add_this_lang=yes\n+            ;;\n+          *)\n+            add_this_lang=no\n+            ;;\n+        esac\n+        case $add_this_lang in\n+\t  no)\n+            # Remove language-dependent dirs.\n+            eval noconfigdirs='\"$noconfigdirs \"'\\\"$target_libs $lang_dirs\\\" ;;\n+          *)\n+\t    new_enable_languages=\"$new_enable_languages,$language\"\n+\t    missing_languages=\"`echo \"$missing_languages\" | sed \"s/,$language,/,/\"`\" ;;\n+        esac\n+        ;;\n+    esac\n+  done\n+\n+  missing_languages=\"`echo \"$missing_languages\" | sed -e s/^,// -e s/,$//`\"\n+  if test \"x$missing_languages\" != x; then\n+    AC_MSG_ERROR([\n+The following requested languages were not found: ${missing_languages}])\n+  fi\n+\n+  if test \"x$new_enable_languages\" != \"x$enable_languages\"; then\n+    echo The following languages will be built: ${new_enable_languages}\n+  fi\n+  enable_languages=\"$new_enable_languages\"\n+  ac_configure_args=\"`echo \" $ac_configure_args\" | sed -e 's/ --enable-languages=[[^ ]]*//' -e 's/$/ --enable-languages='\"$enable_languages\"/ `\"\n+fi\n+\n+# Remove the entries in $skipdirs and $noconfigdirs from $configdirs and\n+# $target_configdirs.\n+# If we have the source for $noconfigdirs entries, add them to $notsupp.\n+\n+notsupp=\"\"\n+for dir in . $skipdirs $noconfigdirs ; do\n+  dirname=`echo $dir | sed -e s/target-//g`\n+  if test $dir != .  && echo \" ${configdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n+    configdirs=`echo \" ${configdirs} \" | sed -e \"s/ ${dir} / /\"`\n+    if test -r $srcdir/$dirname/configure ; then\n+      if echo \" ${skipdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n+\ttrue\n+      else\n+\tnotsupp=\"$notsupp $dir\"\n+      fi\n+    fi\n+  fi\n+  if test $dir != . && echo \" ${target_configdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n+    target_configdirs=`echo \" ${target_configdirs} \" | sed -e \"s/ ${dir} / /\"`\n+    if test -r $srcdir/$dirname/configure ; then\n+      if echo \" ${skipdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n+\ttrue\n+      else\n+\tnotsupp=\"$notsupp $dir\"\n+      fi\n+    fi\n+  fi\n+done\n+\n+# Sometimes the tools are distributed with libiberty but with no other\n+# libraries.  In that case, we don't want to build target-libiberty.\n+if test -n \"${target_configdirs}\" ; then\n+  others=\n+  for i in `echo ${target_configdirs} | sed -e s/target-//g` ; do\n+    if test \"$i\" != \"libiberty\" ; then\n+      if test -r $srcdir/$i/configure ; then\n+\tothers=yes;\n+\tbreak;\n+      fi\n+    fi\n+  done\n+  if test -z \"${others}\" ; then\n+    target_configdirs=\n+  fi\n+fi\n+\n+# Quietly strip out all directories which aren't configurable in this tree.\n+# This relies on all configurable subdirectories being autoconfiscated, which\n+# is now the case.\n+configdirs_all=\"$configdirs\"\n+configdirs=\n+for i in ${configdirs_all} ; do\n+  if test -f ${srcdir}/$i/configure ; then\n+    configdirs=\"${configdirs} $i\"\n+  fi\n+done\n+target_configdirs_all=\"$target_configdirs\"\n+target_configdirs=\n+for i in ${target_configdirs_all} ; do\n+  j=`echo $i | sed -e s/target-//g` \n+  if test -f ${srcdir}/$j/configure ; then\n+    target_configdirs=\"${target_configdirs} $i\"\n+  fi\n+done\n+\n+# Produce a warning message for the subdirs we can't configure.\n+# This isn't especially interesting in the Cygnus tree, but in the individual\n+# FSF releases, it's important to let people know when their machine isn't\n+# supported by the one or two programs in a package.\n+\n+if test -n \"${notsupp}\" && test -z \"${norecursion}\" ; then\n+  # If $appdirs is non-empty, at least one of those directories must still\n+  # be configured, or we error out.  (E.g., if the gas release supports a\n+  # specified target in some subdirs but not the gas subdir, we shouldn't\n+  # pretend that all is well.)\n+  if test -n \"$appdirs\" ; then\n+    for dir in $appdirs ; do\n+      if test -r $dir/Makefile.in ; then\n+\tif echo \" ${configdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n+\t  appdirs=\"\"\n+\t  break\n+\tfi\n+\tif echo \" ${target_configdirs} \" | grep \" ${dir} \" >/dev/null 2>&1; then\n+\t  appdirs=\"\"\n+\t  break\n+\tfi\n+      fi\n+    done\n+    if test -n \"$appdirs\" ; then\n+      echo \"*** This configuration is not supported by this package.\" 1>&2\n+      exit 1\n+    fi\n+  fi\n+  # Okay, some application will build, or we don't care to check.  Still\n+  # notify of subdirs not getting built.\n+  echo \"*** This configuration is not supported in the following subdirectories:\" 1>&2\n+  echo \"    ${notsupp}\" 1>&2\n+  echo \"    (Any other directories should still work fine.)\" 1>&2\n+fi\n+\n+case \"$host\" in\n+  *msdosdjgpp*)\n+    enable_gdbtk=no ;;\n+esac\n+\n+copy_dirs=\n+\n+# Handle --with-headers=XXX.  If the value is not \"yes\", the contents of\n+# the named directory are copied to $(tooldir)/sys-include.\n+if test x\"${with_headers}\" != x && test x\"${with_headers}\" != xno ; then\n+  if test x${is_cross_compiler} = xno ; then\n+    echo 1>&2 '***' --with-headers is only supported when cross compiling\n+    exit 1\n+  fi\n+  if test x\"${with_headers}\" != xyes ; then\n+    case \"${exec_prefixoption}\" in\n+    \"\") x=${prefix} ;;\n+    *) x=${exec_prefix} ;;\n+    esac\n+    copy_dirs=\"${copy_dirs} ${with_headers} $x/${target_alias}/sys-include\"\n+  fi\n+fi\n+\n+# Handle --with-libs=XXX.  If the value is not \"yes\", the contents of\n+# the name directories are copied to $(tooldir)/lib.  Multiple directories\n+# are permitted.\n+if test x\"${with_libs}\" != x && test x\"${with_libs}\" != xno ; then\n+  if test x${is_cross_compiler} = xno ; then\n+    echo 1>&2 '***' --with-libs is only supported when cross compiling\n+    exit 1\n+  fi\n+  if test x\"${with_libs}\" != xyes ; then\n+    # Copy the libraries in reverse order, so that files in the first named\n+    # library override files in subsequent libraries.\n+    case \"${exec_prefixoption}\" in\n+    \"\") x=${prefix} ;;\n+    *) x=${exec_prefix} ;;\n+    esac\n+    for l in ${with_libs}; do\n+      copy_dirs=\"$l $x/${target_alias}/lib ${copy_dirs}\"\n+    done\n+  fi\n+fi\n+\n+# Handle ${copy_dirs}\n+set fnord ${copy_dirs}\n+shift\n+while test $# != 0 ; do\n+  if test -f $2/COPIED && test x\"`cat $2/COPIED`\" = x\"$1\" ; then\n+    :\n+  else\n+    echo Copying $1 to $2\n+\n+    # Use the install script to create the directory and all required\n+    # parent directories.\n+    if test -d $2 ; then\n+      :\n+    else\n+      echo >config.temp\n+      ${srcdir}/install-sh -c -m 644 config.temp $2/COPIED\n+    fi\n+\n+    # Copy the directory, assuming we have tar.\n+    # FIXME: Should we use B in the second tar?  Not all systems support it.\n+    (cd $1; tar -cf - .) | (cd $2; tar -xpf -)\n+\n+    # It is the responsibility of the user to correctly adjust all\n+    # symlinks.  If somebody can figure out how to handle them correctly\n+    # here, feel free to add the code.\n+\n+    echo $1 > $2/COPIED\n+  fi\n+  shift; shift\n+done\n+\n extra_arflags_for_target=\n extra_nmflags_for_target=\n extra_ranlibflags_for_target=\n@@ -1279,25 +1479,6 @@ case \"${host}\" in\n     ;;\n esac\n \n-# If we aren't going to be using gcc, see if we can extract a definition\n-# of CC from the fragment.\n-# Actually, use the 'pre-extracted' version above.\n-if test -z \"${CC}\" && test \"${build}\" = \"${host}\" ; then\n-  IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n-  found=\n-  for dir in $PATH; do\n-    test -z \"$dir\" && dir=.\n-    if test -f $dir/gcc; then\n-      found=yes\n-      break\n-    fi\n-  done\n-  IFS=\"$save_ifs\"\n-  if test -z \"${found}\" && test -n \"${tentative_cc}\" ; then\n-    CC=$tentative_cc\n-  fi\n-fi\n-\n # Some systems (e.g., one of the i386-aix systems the gas testers are\n # using) don't handle \"\\$\" correctly, so don't use it here.\n tooldir='${exec_prefix}'/${target_alias}\n@@ -1360,157 +1541,6 @@ do\n   test -n \"$DEFAULT_LEX\" && break\n done\n \n-if test \"${build}\" != \"${host}\" ; then\n-  # If we are doing a Canadian Cross, in which the host and build systems\n-  # are not the same, we set reasonable default values for the tools.\n-\n-  BISON=${BISON-bison}\n-  CC=${CC-${host_alias}-gcc}\n-  CFLAGS=${CFLAGS-\"-g -O2\"}\n-  CXX=${CXX-${host_alias}-c++}\n-  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n-  CC_FOR_BUILD=${CC_FOR_BUILD-gcc}\n-  CC_FOR_TARGET=${CC_FOR_TARGET-${target_alias}-gcc}\n-  CXX_FOR_TARGET=${CXX_FOR_TARGET-${target_alias}-c++}\n-  GCJ_FOR_TARGET=${GCJ_FOR_TARGET-${target_alias}-gcj}\n-  GCC_FOR_TARGET=${GCC_FOR_TARGET-${CC_FOR_TARGET-${target_alias}-gcc}}\n-  BUILD_PREFIX=${build_alias}-\n-  BUILD_PREFIX_1=${build_alias}-\n-  MAKEINFO=${MAKEINFO-makeinfo}\n-\n-  if test -z \"${YACC}\" ; then\n-    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n-    for dir in $PATH; do\n-      test -z \"$dir\" && dir=.\n-      if test -f $dir/bison; then\n-\tYACC=\"bison -y\"\n-\tbreak\n-      fi\n-      if test -f $dir/byacc; then\n-\tYACC=byacc\n-\tbreak\n-      fi\n-      if test -f $dir/yacc; then\n-\tYACC=yacc\n-\tbreak\n-      fi\n-    done\n-    IFS=\"$save_ifs\"\n-    if test -z \"${YACC}\" ; then\n-      YACC=\"bison -y\"\n-    fi\n-  fi\n-\n-  if test -z \"${LEX}\" ; then\n-    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n-    for dir in $PATH; do\n-      test -z \"$dir\" && dir=.\n-      if test -f $dir/flex; then\n-\tLEX=flex\n-\tbreak\n-      fi\n-      if test -f $dir/lex; then\n-\tLEX=lex\n-\tbreak\n-      fi\n-    done\n-    IFS=\"$save_ifs\"\n-    LEX=${LEX-flex}\n-  fi\n-\n-else\n-  # Set reasonable default values for some tools even if not Canadian.\n-  # Of course, these are different reasonable default values, originally\n-  # specified directly in the Makefile.\n-  # We don't export, so that autoconf can do its job.\n-  # Note that all these settings are above the fragment inclusion point\n-  # in Makefile.in, so can still be overridden by fragments.\n-  # This is all going to change when we autoconfiscate...\n-\n-  BISON=\"\\$(USUAL_BISON)\"\n-  CC_FOR_BUILD=\"\\$(CC)\"\n-  GCC_FOR_TARGET=\"\\$(USUAL_GCC_FOR_TARGET)\"\n-  BUILD_PREFIX=\n-  BUILD_PREFIX_1=loser-\n-  MAKEINFO=\"\\$(USUAL_MAKEINFO)\"\n-  LEX=\"\\$(USUAL_LEX)\"\n-  YACC=\"\\$(USUAL_YACC)\"\n-\n-  # If CC is still not set, try to get gcc.\n-  cc_prog_is_gcc=\n-  if test -z \"${CC}\" ; then\n-    IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n-    for dir in $PATH; do\n-      test -z \"$dir\" && dir=.\n-      if test -f $dir/gcc; then\n-\tCC=\"gcc\"\n-\tcc_prog_is_gcc=yes\n-\techo 'void f(){}' > conftest.c\n-\tif test -z \"`${CC} -g -c conftest.c 2>&1`\"; then\n-\t  CFLAGS=${CFLAGS-\"-g -O2\"}\n-\t  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n-\telse\n-\t  CFLAGS=${CFLAGS-\"-O2\"}\n-\t  CXXFLAGS=${CXXFLAGS-\"-O2\"}\n-\tfi\n-\trm -f conftest*\n-\tbreak\n-      fi\n-    done\n-    IFS=\"$save_ifs\"\n-    CC=${CC-cc}\n-  else\n-    # Determine if we are using gcc.\n-    cat > conftest.c <<EOF\n-#ifdef __GNUC__\n-  yes;\n-#endif\n-EOF\n-    if ${CC} -E conftest.c | grep yes >/dev/null 2>&1; then\n-      cc_prog_is_gcc=yes\n-    fi\n-    rm -f conftest.c\n-    if test -z \"${CFLAGS}\"; then\n-      # Here CC is set but CFLAGS is not.  Use a quick hack to use -O2 if CC\n-      # is set to a version of gcc.\n-      if test \"$cc_prog_is_gcc\" = yes; then\n-\techo 'void f(){}' > conftest.c\n-\tif test -z \"`${CC} -g -c conftest.c 2>&1`\"; then\n-\t  CFLAGS=${CFLAGS-\"-g -O2\"}\n-\t  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n-\telse\n-\t  CFLAGS=${CFLAGS-\"-O2\"}\n-\t  CXXFLAGS=${CXXFLAGS-\"-O2\"}\n-\tfi\n-\trm -f conftest*\n-      fi\n-    fi\n-  fi\n-\n-  # We must set the default linker to the linker used by gcc for the correct\n-  # operation of libtool.  If LD is not defined and we are using gcc, try to\n-  # set the LD default to the ld used by gcc.\n-  if test -z \"$LD\"; then\n-    if test \"$cc_prog_is_gcc\" = yes; then\n-      case $build in\n-      *-*-mingw*)\n-\tgcc_prog_ld=`$CC -print-prog-name=ld 2>&1 | tr -d '\\015'` ;;\n-      *)\n-\tgcc_prog_ld=`$CC -print-prog-name=ld 2>&1` ;;\n-      esac\n-      case $gcc_prog_ld in\n-      # Accept absolute paths.\n-      [[\\\\/]* | [A-Za-z]:[\\\\/]*)]\n-        LD=\"$gcc_prog_ld\" ;;\n-      esac\n-    fi\n-  fi\n-\n-  CXX=${CXX-\"c++\"}\n-  CFLAGS=${CFLAGS-\"-g\"}\n-  CXXFLAGS=${CXXFLAGS-\"-g -O2\"}\n-fi\n-\n # FIXME Should this be done recursively ??? (Useful for e.g. gdbtest)\n # Set up the list of links to be made.\n # ${links} is the list of link names, and ${files} is the list of names to link to."}, {"sha": "22cd3bc32c00ede839ccde6482ef911c0356800e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -1,3 +1,12 @@\n+2004-03-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR ada/14131\n+\tMove language detection to the top level.\n+\t* configure.ac: Remove code to detect languages,\n+\tit now lives exclusively in the top level.\n+\t* aclocal.m4 (gcc_AC_PROG_GNAT): Moved to the\n+\ttop level, renamed to ACX_PROG_GNAT.\n+\n 2004-03-10  Richard Henderson  <rth@redhat.com>\n \n \t* c-pch.c (c_common_no_more_pch): Update for gt_pch_use_address"}, {"sha": "4ed2f083254b8a47ec51e5fdbc4c7f543fcfdca8", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -295,41 +295,6 @@ test -z \"$INSTALL_DATA\" && INSTALL_DATA='${INSTALL} -m 644'\n AC_SUBST(INSTALL_DATA)dnl\n ])\n \n-dnl Test for GNAT.\n-dnl We require the gnatbind program, and a compiler driver that\n-dnl understands Ada.  We use the user's CC setting, already found.\n-dnl\n-dnl Sets the shell variable have_gnat to yes or no as appropriate, and\n-dnl substitutes GNATBIND.\n-AC_DEFUN([gcc_AC_PROG_GNAT],\n-[AC_REQUIRE([AC_CHECK_TOOL_PREFIX])\n-AC_REQUIRE([AC_PROG_CC])\n-AC_CHECK_TOOL(GNATBIND, gnatbind, no)\n-AC_CACHE_CHECK([whether compiler driver understands Ada],\n-\t\t gcc_cv_cc_supports_ada,\n-[cat >conftest.adb <<EOF\n-procedure conftest is begin null; end conftest;\n-EOF\n-gcc_cv_cc_supports_ada=no\n-# There is a bug in old released versions of GCC which causes the\n-# driver to exit successfully when the appropriate language module\n-# has not been installed.  This is fixed in 2.95.4, 3.0.2, and 3.1.\n-# Therefore we must check for the error message as well as an\n-# unsuccessful exit.\n-errors=`(${CC} -c conftest.adb) 2>&1 || echo failure`\n-if test x\"$errors\" = x; then\n-  gcc_cv_cc_supports_ada=yes\n-  break\n-fi\n-rm -f conftest.*])\n-\n-if test x$GNATBIND != xno && test x$gcc_cv_supports_ada != xno; then\n-  have_gnat=yes\n-else\n-  have_gnat=no\n-fi\n-])\n-\n dnl GCC_PATH_PROG(VARIABLE, PROG-TO-CHECK-FOR [, VALUE-IF-NOT-FOUND [, PATH]])\n dnl like AC_PATH_PROG but use other cache variables\n AC_DEFUN([GCC_PATH_PROG],"}, {"sha": "dcb898c4684e2af429256f3aed9d7f435696bbca", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -1,3 +1,9 @@\n+2004-03-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR ada/14131\n+\tMove language detection to the top level.\n+\t* config-lang.in: Build by default.\n+\n 2004-03-05  Robert Dewar  <dewar@gnat.com>\n \n \t* 56taprop.adb, 5ataprop.adb: Remove unneeded unchecked conversions"}, {"sha": "9a9599dbf1b09b4cfb315b970b3068b8d4241f19", "filename": "gcc/ada/config-lang.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2Fada%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2Fada%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fconfig-lang.in?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -39,9 +39,3 @@ gtfiles=\"\\$(srcdir)/ada/ada-tree.h \\$(srcdir)/ada/gigi.h \\$(srcdir)/ada/decl.c \\\n outputs=ada/Makefile\n \n target_libs=\"target-libada\"\n-\n-# The logic for determining whether there is a bootstrap Ada compiler\n-# available needs to be moved from gcc/configure to the toplevel configure,\n-# so that target-libada is not built when there is no bootstrap Ada compiler.\n-# Until then disable building this language by default.\n-build_by_default=no"}, {"sha": "775be55690afff074182c1d9b841c6c638043364", "filename": "gcc/configure.ac", "status": "modified", "additions": 47, "deletions": 132, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c9c07571387e0d377858d4ee578cece464bba6/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e4c9c07571387e0d377858d4ee578cece464bba6", "patch": "@@ -300,13 +300,6 @@ if test $ac_cv_c___int64 = yes; then\n   AC_COMPILE_CHECK_SIZEOF(__int64)\n fi\n \n-# -----------------\n-# Find Ada compiler\n-# -----------------\n-\n-# See if GNAT has been installed\n-gcc_AC_PROG_GNAT\n-\n # ---------------------\n # Warnings and checking\n # ---------------------\n@@ -613,6 +606,53 @@ esac],\n [onestep=\"\"])\n AC_SUBST(onestep)\n \n+# Sanity check enable_languages in case someone does not run the toplevel\n+# configure # script.\n+AC_ARG_ENABLE(languages,\n+[  --enable-languages=LIST specify which front-ends to build],\n+[case ,${enable_languages}, in\n+       ,,|,yes,)\n+\t\t# go safe -- we cannot be much sure without the toplevel\n+\t\t# configure's\n+\t\t# analysis of which target libs are present and usable\n+\t\tenable_languages=c\n+\t\t;;\n+\t *,all,*)\n+\t\tAC_MSG_ERROR([only the toplevel supports --enable-languages=all])\n+\t\t;;\n+\t*,c,*)\n+\t\t;;\n+        *)\n+\t\tenable_languages=c,${enable_languages}\n+\t\t;;\n+esac],\n+[enable_languages=c])\n+\n+subdirs=\n+for lang in ${srcdir}/*/config-lang.in\n+do\n+\tcase $lang in\n+\t# The odd quoting in the next line works around\n+\t# an apparent bug in bash 1.12 on linux.\n+changequote(,)dnl\n+\t${srcdir}/[*]/config-lang.in) ;;\n+\t*)\n+\t  lang_alias=`sed -n -e 's,^language=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^language=\\([^   ]*\\).*$,\\1,p' $lang`\n+\t  if test \"x$lang_alias\" = x\n+\t  then\n+\t        echo \"$lang doesn't set \\$language.\" 1>&2\n+\t        exit 1\n+\t  fi\n+\t  case \",$enable_languages,\" in\n+\t  *,$lang_alias,*)\n+\t    subdirs=\"$subdirs `echo $lang | sed -e 's,^.*/\\([^/]*\\)/config-lang.in$,\\1,'`\" ;;\n+\t  esac\n+\t  ;;\n+changequote([,])dnl\n+\tesac\n+done\n+\n+\n # -------------------------\n # Checks for other programs\n # -------------------------\n@@ -2661,131 +2701,6 @@ if test x$with_sysroot = x && test x$host = x$target \\\n [Define to PREFIX/include if cpp should also search that directory.])\n fi\n \n-# Figure out what language subdirectories are present.\n-# Look if the user specified --enable-languages=\"...\"; if not, use\n-# the environment variable $LANGUAGES if defined. $LANGUAGES might\n-# go away some day.\n-# NB:  embedded tabs in this IF block -- do not untabify\n-if test x\"${enable_languages+set}\" != xset; then\n-\tif test x\"${LANGUAGES+set}\" = xset; then\n-\t\tenable_languages=\"${LANGUAGES}\"\n-\t\tAC_MSG_WARN([setting LANGUAGES is deprecated, use --enable-languages instead])\n-\n-\telse\n-\t\tenable_languages=all\n-\tfi\n-else\n-\tif test x\"${enable_languages}\" = x \\\n-        || test x\"${enable_languages}\" = xyes;\n-\tthen\n-\t\tAC_MSG_ERROR([--enable-languages needs at least one language argument])\n-\tfi\n-fi\n-enable_languages=`echo \"${enable_languages}\" | sed -e 's/[[ \t,]][[ \t,]]*/,/g' -e 's/,$//'`\n-\n-# First scan to see if an enabled language requires some other language.\n-# We assume that a given config-lang.in will list all the language\n-# front ends it requires, even if some are required indirectly.\n-for lang in ${srcdir}/*/config-lang.in\n-do\n-   case $lang in\n-    # The odd quoting in the next line works around\n-    # an apparent bug in bash 1.12 on linux.\n-changequote(,)dnl\n-    ${srcdir}/[*]/config-lang.in)\n-       ;;\n-    *)\n-       lang_alias=`sed -n -e 's,^language=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^language=\\([^ \t]*\\).*$,\\1,p' $lang`\n-       this_lang_requires=`sed -n -e 's,^lang_requires=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^lang_requires=\\([^ \t]*\\).*$,\\1,p' $lang`\n-       for other in $this_lang_requires\n-       do\n-\t  case ,${enable_languages}, in\n-\t   *,$other,*)\n-\t      ;;\n-\t   *,all,*)\n-\t      ;;\n-\t   *,$lang_alias,*)\n-\t      enable_languages=\"$enable_languages,$other\"\n-\t      ;;\n-\t  esac\n-       done\n-       ;;\n-changequote([,])dnl\n-   esac\n-done\n-\n-expected_languages=`echo ,${enable_languages}, | sed -e 's:,: :g' -e 's:  *: :g' -e 's:  *: :g' -e 's:^ ::' -e 's: $::'`\n-found_languages=\n-subdirs=\n-for lang in ${srcdir}/*/config-lang.in\n-do\n-\tcase $lang in\n-\t# The odd quoting in the next line works around\n-\t# an apparent bug in bash 1.12 on linux.\n-changequote(,)dnl\n-\t${srcdir}/[*]/config-lang.in) ;;\n-\t*)\n-\t  lang_alias=`sed -n -e 's,^language=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^language=\\([^ \t]*\\).*$,\\1,p' $lang`\n-\t  this_lang_libs=`sed -n -e 's,^target_libs=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^target_libs=\\([^ \t]*\\).*$,\\1,p' $lang`\n-\t  build_by_default=`sed -n -e 's,^build_by_default=['\"'\"'\"'\"]\\(.*\\)[\"'\"'\"'\"'].*$,\\1,p' -e 's,^build_by_default=\\([^ \t]*\\).*$,\\1,p' $lang`\n-\t  if test \"x$lang_alias\" = x\n-\t  then\n-\t\techo \"$lang doesn't set \\$language.\" 1>&2\n-\t\texit 1\n-\t  fi\n-\t  case ${build_by_default},${enable_languages}, in\n-\t  *,$lang_alias,*) add_this_lang=yes ;;\n-\t  no,*) add_this_lang=no ;;\n-\t  *,all,*) add_this_lang=yes ;;\n-\t  *) add_this_lang=no ;;\n-\t  esac\n-          found_languages=\"${found_languages} ${lang_alias}\"\n-\t  if test x\"${add_this_lang}\" = xyes; then\n-\t\tcase $lang in\n-\t\t    ${srcdir}/ada/config-lang.in)\n-\t\t\tif test x$have_gnat = xyes ; then\n-\t\t\t\tsubdirs=\"$subdirs `echo $lang | sed -e 's,^.*/\\([^/]*\\)/config-lang.in$,\\1,'`\"\n-\t\t\tfi\n-\t\t\t;;\n-\t\t    *)\n-\t\t\tsubdirs=\"$subdirs `echo $lang | sed -e 's,^.*/\\([^/]*\\)/config-lang.in$,\\1,'`\"\n-\t\t\t;;\n-\t\tesac\n-\t  fi\n-\t  ;;\n-changequote([,])dnl\n-\tesac\n-done\n-\n-missing_languages=\n-for expected_language in ${expected_languages} ..\n-do \n-    if test \"${expected_language}\" != ..; then\n-        missing_language=\"${expected_language}\"\n-        if test \"${expected_language}\" = \"c\" \\\n-           || test \"${expected_language}\" = \"all\"; then\n-                missing_language=\n-        fi\n-        for found_language in ${found_languages} ..\n-        do \n-            if test \"${found_language}\" != ..; then\n-                if test \"${expected_language}\" = \"${found_language}\"; then\n-                    missing_language=\n-                fi\n-            fi\n-        done\n-        if test \"x${missing_language}\" != x; then\n-           missing_languages=\"${missing_languages} ${missing_language}\"\n-        fi\n-    fi\n-done\n-\n-if test \"x$missing_languages\" != x; then\n-  AC_MSG_ERROR([\n-The following requested languages were not found:${missing_languages}\n-The following languages were available: c${found_languages}])\n-fi\n-\n # Find out what GC implementation we want, or may, use.\n AC_ARG_WITH(gc,\n [  --with-gc={page,zone}   choose the garbage collection mechanism to use"}]}