{"sha": "60342fdbfb0630243d2b85d2ca45204ded990b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzNDJmZGJmYjA2MzAyNDNkMmI4NWQyY2E0NTIwNGRlZDk5MGIxNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-11T08:34:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-11T08:34:59Z"}, "message": "value-prof: Fix abs uses in value-prof.c [PR93962]\n\nJeff has recently fixed dump_histogram_value to use std::abs instead of abs,\nbecause on FreeBSD apparently the ::abs isn't overloaded and only has\nint abs (int);\nSeems on Solaris /usr/include/iso/stdlib_iso.h abs has:\nint abs (int);\nlong abs (long);\noverloads but already not\nlong long abs (long long);\nand there is another abs use in get_nth_most_common_value, also on int64_t.\nThe long long std::abs (long long); overload is there only in C++11 and we\nin GCC10 still support C++98.\n\nMartin has said that a counter should never be INT64_MIN, so IMHO it is\nbetter to use abs_hwi which will assert that.\n\n2020-03-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR bootstrap/93962\n\t* value-prof.c (dump_histogram_value): Use abs_hwi instead of\n\tstd::abs.\n\t(get_nth_most_common_value): Use abs_hwi instead of abs.", "tree": {"sha": "93d887bada979d2cb0c7cd90d33d5a44fe85d86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93d887bada979d2cb0c7cd90d33d5a44fe85d86f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60342fdbfb0630243d2b85d2ca45204ded990b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60342fdbfb0630243d2b85d2ca45204ded990b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60342fdbfb0630243d2b85d2ca45204ded990b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60342fdbfb0630243d2b85d2ca45204ded990b17/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312992f5a07ca25f94d538b08401789c2c764293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312992f5a07ca25f94d538b08401789c2c764293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312992f5a07ca25f94d538b08401789c2c764293"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "e4b74dd1f0625a1df1a589670abeba7590a3854a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60342fdbfb0630243d2b85d2ca45204ded990b17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60342fdbfb0630243d2b85d2ca45204ded990b17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60342fdbfb0630243d2b85d2ca45204ded990b17", "patch": "@@ -1,5 +1,10 @@\n 2020-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR bootstrap/93962\n+\t* value-prof.c (dump_histogram_value): Use abs_hwi instead of\n+\tstd::abs.\n+\t(get_nth_most_common_value): Use abs_hwi instead of abs.\n+\n \tPR middle-end/94111\n \t* dfp.c (decimal_to_binary): Only use decimal128ToString if from->cl\n \tis rvc_normal, otherwise use real_to_decimal to print the number to"}, {"sha": "45677be46b1ea211b905cb31f86db57d914726d7", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60342fdbfb0630243d2b85d2ca45204ded990b17/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60342fdbfb0630243d2b85d2ca45204ded990b17/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=60342fdbfb0630243d2b85d2ca45204ded990b17", "patch": "@@ -266,7 +266,7 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n \t  if (hist->hvalue.counters)\n \t    {\n \t      fprintf (dump_file, \" all: %\" PRId64 \"%s, values: \",\n-\t\t       std::abs ((int64_t) hist->hvalue.counters[0]),\n+\t\t       (int64_t) abs_hwi (hist->hvalue.counters[0]),\n \t\t       hist->hvalue.counters[0] < 0\n \t\t       ? \" (values missing)\": \"\");\n \t      for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n@@ -743,7 +743,7 @@ get_nth_most_common_value (gimple *stmt, const char *counter_type,\n   *count = 0;\n   *value = 0;\n \n-  gcov_type read_all = abs (hist->hvalue.counters[0]);\n+  gcov_type read_all = abs_hwi (hist->hvalue.counters[0]);\n \n   gcov_type v = hist->hvalue.counters[2 * n + 1];\n   gcov_type c = hist->hvalue.counters[2 * n + 2];"}]}