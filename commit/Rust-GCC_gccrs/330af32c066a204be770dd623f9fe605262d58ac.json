{"sha": "330af32c066a204be770dd623f9fe605262d58ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMwYWYzMmMwNjZhMjA0YmU3NzBkZDYyM2Y5ZmU2MDUyNjJkNThhYw==", "commit": {"author": {"name": "Jie Zhang", "email": "jie@codesourcery.com", "date": "2010-04-26T10:59:34Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2010-04-26T10:59:34Z"}, "message": "re PR tree-optimization/43833 (false warning: array subscript is above array bounds with -O3)\n\n\tPR tree-optimization/43833\n\t* tree-vrp.c (range_int_cst_p): New.\n\t(range_int_cst_singleton_p): New.\n\t(extract_range_from_binary_expr): Optimize BIT_AND_EXPR case\n\twhen both operands are constants.  Use range_int_cst_p in\n\tBIT_IOR_EXPR case.\n\n\ttestsuite/\n\tPR tree-optimization/43833\n\tgcc.dg/Warray-bounds-8.c: New test case.\n\nFrom-SVN: r158727", "tree": {"sha": "ce0e499820982aa0f8a5cf58903650b5becea8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0e499820982aa0f8a5cf58903650b5becea8b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/330af32c066a204be770dd623f9fe605262d58ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330af32c066a204be770dd623f9fe605262d58ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330af32c066a204be770dd623f9fe605262d58ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330af32c066a204be770dd623f9fe605262d58ac/comments", "author": null, "committer": null, "parents": [{"sha": "ae2b08888a183d94f9a4f898600b347e5e66b29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2b08888a183d94f9a4f898600b347e5e66b29d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2b08888a183d94f9a4f898600b347e5e66b29d"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "77d63554876f771ab849daa2eef222fd70302355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330af32c066a204be770dd623f9fe605262d58ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330af32c066a204be770dd623f9fe605262d58ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=330af32c066a204be770dd623f9fe605262d58ac", "patch": "@@ -1,3 +1,12 @@\n+2010-04-26  Jie Zhang  <jie@codesourcery.com>\n+\n+\tPR tree-optimization/43833\n+\t* tree-vrp.c (range_int_cst_p): New.\n+\t(range_int_cst_singleton_p): New.\n+\t(extract_range_from_binary_expr): Optimize BIT_AND_EXPR case\n+\twhen both operands are constants.  Use range_int_cst_p in\n+\tBIT_IOR_EXPR case.\n+\n 2010-04-26  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (cgraph_copy_node_for_versioning): Fix profile updating."}, {"sha": "9f470ca7d8cb21fd569ab0dd6f702273d253d047", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330af32c066a204be770dd623f9fe605262d58ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330af32c066a204be770dd623f9fe605262d58ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=330af32c066a204be770dd623f9fe605262d58ac", "patch": "@@ -1,3 +1,8 @@\n+2010-04-26  Jie Zhang  <jie@codesourcery.com>\n+\n+\tPR tree-optimization/43833\n+\tgcc.dg/Warray-bounds-8.c: New test case.\n+\n 2010-04-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/43080"}, {"sha": "85839f3f07eea164daae0ddbb7ab596343493fe4", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330af32c066a204be770dd623f9fe605262d58ac/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330af32c066a204be770dd623f9fe605262d58ac/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-8.c?ref=330af32c066a204be770dd623f9fe605262d58ac", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -Wall\" } */\n+/* based on PR 43833 */\n+\n+extern unsigned char data[5];\n+\n+unsigned char\n+foo (char *str)\n+{\n+  int i, j;\n+  unsigned char c = 0;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      j = i * 5;\n+      if ((j % 8) > 3)\n+\tc |= data[(j / 8) + 1];\n+    }\n+  return c;\n+}"}, {"sha": "d8ebbe8f369b8b43dd375216b4028ae700ca9d72", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330af32c066a204be770dd623f9fe605262d58ac/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330af32c066a204be770dd623f9fe605262d58ac/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=330af32c066a204be770dd623f9fe605262d58ac", "patch": "@@ -764,6 +764,27 @@ range_is_null (value_range_t *vr)\n \t && integer_zerop (vr->max);\n }\n \n+/* Return true if max and min of VR are INTEGER_CST.  It's not necessary\n+   a singleton.  */\n+\n+static inline bool\n+range_int_cst_p (value_range_t *vr)\n+{\n+  return (vr->type == VR_RANGE\n+\t  && TREE_CODE (vr->max) == INTEGER_CST\n+\t  && TREE_CODE (vr->min) == INTEGER_CST\n+\t  && !TREE_OVERFLOW (vr->max)\n+\t  && !TREE_OVERFLOW (vr->min));\n+}\n+\n+/* Return true if VR is a INTEGER_CST singleton.  */\n+\n+static inline bool\n+range_int_cst_singleton_p (value_range_t *vr)\n+{\n+  return (range_int_cst_p (vr)\n+\t  && tree_int_cst_equal (vr->min, vr->max));\n+}\n \n /* Return true if value range VR involves at least one symbol.  */\n \n@@ -2498,19 +2519,20 @@ extract_range_from_binary_expr (value_range_t *vr,\n     }\n   else if (code == BIT_AND_EXPR)\n     {\n-      if (vr0.type == VR_RANGE\n-\t  && vr0.min == vr0.max\n-\t  && TREE_CODE (vr0.max) == INTEGER_CST\n-\t  && !TREE_OVERFLOW (vr0.max)\n-\t  && tree_int_cst_sgn (vr0.max) >= 0)\n+      bool vr0_int_cst_singleton_p, vr1_int_cst_singleton_p;\n+\n+      vr0_int_cst_singleton_p = range_int_cst_singleton_p (&vr0);\n+      vr1_int_cst_singleton_p = range_int_cst_singleton_p (&vr1);\n+\n+      if (vr0_int_cst_singleton_p && vr1_int_cst_singleton_p)\n+\tmin = max = int_const_binop (code, vr0.max, vr1.max, 0);\n+      else if (vr0_int_cst_singleton_p\n+\t       && tree_int_cst_sgn (vr0.max) >= 0)\n \t{\n \t  min = build_int_cst (expr_type, 0);\n \t  max = vr0.max;\n \t}\n-      else if (vr1.type == VR_RANGE\n-\t       && vr1.min == vr1.max\n-\t       && TREE_CODE (vr1.max) == INTEGER_CST\n-\t       && !TREE_OVERFLOW (vr1.max)\n+      else if (vr1_int_cst_singleton_p\n \t       && tree_int_cst_sgn (vr1.max) >= 0)\n \t{\n \t  type = VR_RANGE;\n@@ -2525,12 +2547,8 @@ extract_range_from_binary_expr (value_range_t *vr,\n     }\n   else if (code == BIT_IOR_EXPR)\n     {\n-      if (vr0.type == VR_RANGE\n-          && vr1.type == VR_RANGE\n-\t  && TREE_CODE (vr0.min) == INTEGER_CST\n-\t  && TREE_CODE (vr1.min) == INTEGER_CST\n-\t  && TREE_CODE (vr0.max) == INTEGER_CST\n-\t  && TREE_CODE (vr1.max) == INTEGER_CST\n+      if (range_int_cst_p (&vr0)\n+\t  && range_int_cst_p (&vr1)\n \t  && tree_int_cst_sgn (vr0.min) >= 0\n \t  && tree_int_cst_sgn (vr1.min) >= 0)\n \t{"}]}