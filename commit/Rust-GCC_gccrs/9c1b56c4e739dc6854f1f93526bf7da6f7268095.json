{"sha": "9c1b56c4e739dc6854f1f93526bf7da6f7268095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMxYjU2YzRlNzM5ZGM2ODU0ZjFmOTM1MjZiZjdkYTZmNzI2ODA5NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-09-20T05:21:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-09-20T05:21:09Z"}, "message": "alpha.c (alpha_expand_prologue): Also check flag_stack_clash_protection.\n\n\t* config/alpha/alpha.c (alpha_expand_prologue): Also check\n\tflag_stack_clash_protection.\n\t* config/arm/arm.c (arm_compute_static_chain_stack_bytes): Likewise.\n\t(arm_expand_prologue, thumb1_expand_prologue): Likewise.\n\t(arm_frame_pointer_required): Likewise.\n\t* config/ia64/ia64.c (ia64_compute_frame_size): Likewise.\n\t(ia64_expand_prologue): Likewise.\n\t* config/mips/mips.c (mips_expand_prologue): Likewise.\n\t* config/powerpcspe/powerpcspe.c (rs6000_expand_prologue): Likewise.\n\t* config/sparc/sparc.c (sparc_expand_prologue): Likewise.\n\t(sparc_flat_expand_prologue): Likewise.\n\t* config/spu/spu.c (spu_expand_prologue): Likewise.\n\nFrom-SVN: r252996", "tree": {"sha": "f8408e2321446e4acfeee073e64e4df81d8f7acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8408e2321446e4acfeee073e64e4df81d8f7acc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c1b56c4e739dc6854f1f93526bf7da6f7268095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1b56c4e739dc6854f1f93526bf7da6f7268095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1b56c4e739dc6854f1f93526bf7da6f7268095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1b56c4e739dc6854f1f93526bf7da6f7268095/comments", "author": null, "committer": null, "parents": [{"sha": "8c1dd97000d801abc8c9119304be6bf30c5316c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1dd97000d801abc8c9119304be6bf30c5316c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c1dd97000d801abc8c9119304be6bf30c5316c0"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "070692c5053c6ecf58d91a8425fb0b1fa8aaffe1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c1b56c4e739dc6854f1f93526bf7da6f7268095", "patch": "@@ -1,5 +1,18 @@\n 2017-09-19  Jeff Law  <law@redhat.com>\n \n+\t* config/alpha/alpha.c (alpha_expand_prologue): Also check\n+\tflag_stack_clash_protection.\n+\t* config/arm/arm.c (arm_compute_static_chain_stack_bytes): Likewise.\n+\t(arm_expand_prologue, thumb1_expand_prologue): Likewise.\n+\t(arm_frame_pointer_required): Likewise.\n+\t* config/ia64/ia64.c (ia64_compute_frame_size): Likewise.\n+\t(ia64_expand_prologue): Likewise.\n+\t* config/mips/mips.c (mips_expand_prologue): Likewise.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_expand_prologue): Likewise.\n+\t* config/sparc/sparc.c (sparc_expand_prologue): Likewise.\n+\t(sparc_flat_expand_prologue): Likewise.\n+\t* config/spu/spu.c (spu_expand_prologue): Likewise.\n+\n \t* explow.c: Include \"params.h\".\n \t(anti_adjust_stack_and_probe_stack_clash): New function.\n \t(get_stack_check_protect): Likewise."}, {"sha": "41f3e3a195780a70003cfb5de505a146ef039287", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9c1b56c4e739dc6854f1f93526bf7da6f7268095", "patch": "@@ -7760,7 +7760,7 @@ alpha_expand_prologue (void)\n      Note that we are only allowed to adjust sp once in the prologue.  */\n \n   probed_size = frame_size;\n-  if (flag_stack_check)\n+  if (flag_stack_check || flag_stack_clash_protection)\n     probed_size += get_stack_check_protect ();\n \n   if (probed_size <= 32768)\n@@ -7775,7 +7775,7 @@ alpha_expand_prologue (void)\n \t  /* We only have to do this probe if we aren't saving registers or\n \t     if we are probing beyond the frame because of -fstack-check.  */\n \t  if ((sa_size == 0 && probed_size > probed - 4096)\n-\t      || flag_stack_check)\n+\t      || flag_stack_check || flag_stack_clash_protection)\n \t    emit_insn (gen_probe_stack (GEN_INT (-probed_size)));\n \t}\n \n@@ -7805,15 +7805,16 @@ alpha_expand_prologue (void)\n \t late in the compilation, generate the loop as a single insn.  */\n       emit_insn (gen_prologue_stack_probe_loop (count, ptr));\n \n-      if ((leftover > 4096 && sa_size == 0) || flag_stack_check)\n+      if ((leftover > 4096 && sa_size == 0)\n+\t  || flag_stack_check || flag_stack_clash_protection)\n \t{\n \t  rtx last = gen_rtx_MEM (DImode,\n \t\t\t\t  plus_constant (Pmode, ptr, -leftover));\n \t  MEM_VOLATILE_P (last) = 1;\n \t  emit_move_insn (last, const0_rtx);\n \t}\n \n-      if (flag_stack_check)\n+      if (flag_stack_check || flag_stack_clash_protection)\n \t{\n \t  /* If -fstack-check is specified we have to load the entire\n \t     constant into a register and subtract from the sp in one go,"}, {"sha": "d97f88719c57c3d587586e1e4bdce251f89ad521", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9c1b56c4e739dc6854f1f93526bf7da6f7268095", "patch": "@@ -19164,7 +19164,8 @@ arm_compute_static_chain_stack_bytes (void)\n   /* See the defining assertion in arm_expand_prologue.  */\n   if (IS_NESTED (arm_current_func_type ())\n       && ((TARGET_APCS_FRAME && frame_pointer_needed && TARGET_ARM)\n-\t  || (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+\t  || ((flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+\t       || flag_stack_clash_protection)\n \t      && !df_regs_ever_live_p (LR_REGNUM)))\n       && arm_r3_live_at_start_p ()\n       && crtl->args.pretend_args_size == 0)\n@@ -21466,7 +21467,8 @@ arm_expand_prologue (void)\n      clobbered when creating the frame, we need to save and restore it.  */\n   clobber_ip = IS_NESTED (func_type)\n \t       && ((TARGET_APCS_FRAME && frame_pointer_needed && TARGET_ARM)\n-\t\t   || (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+\t\t   || ((flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+\t\t\t|| flag_stack_clash_protection)\n \t\t       && !df_regs_ever_live_p (LR_REGNUM)\n \t\t       && arm_r3_live_at_start_p ()));\n \n@@ -21680,7 +21682,8 @@ arm_expand_prologue (void)\n      stack checking.  We use IP as the first scratch register, except for the\n      non-APCS nested functions if LR or r3 are available (see clobber_ip).  */\n   if (!IS_INTERRUPT (func_type)\n-      && flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n+      && (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+\t  || flag_stack_clash_protection))\n     {\n       unsigned int regno;\n \n@@ -24991,7 +24994,9 @@ thumb1_expand_prologue (void)\n     current_function_static_stack_size = size;\n \n   /* If we have a frame, then do stack checking.  FIXME: not implemented.  */\n-  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK && size)\n+  if ((flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+       || flag_stack_clash_protection)\n+      && size)\n     sorry (\"-fstack-check=specific for Thumb-1\");\n \n   amount = offsets->outgoing_args - offsets->saved_regs;\n@@ -27871,7 +27876,8 @@ arm_frame_pointer_required (void)\n      instruction prior to the stack adjustment and this requires a frame\n      pointer if we want to catch the exception using the EABI unwinder.  */\n   if (!IS_INTERRUPT (arm_current_func_type ())\n-      && flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+      && (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+\t  || flag_stack_clash_protection)\n       && arm_except_unwind_info (&global_options) == UI_TARGET\n       && cfun->can_throw_non_call_exceptions)\n     {"}, {"sha": "f34f2f852474a2148869eabd6dd65e9449c18ef0", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9c1b56c4e739dc6854f1f93526bf7da6f7268095", "patch": "@@ -2704,7 +2704,8 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n     mark_reg_gr_used_mask (cfun->machine->ia64_eh_epilogue_bsp, NULL);\n \n   /* Static stack checking uses r2 and r3.  */\n-  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n+  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+      || flag_stack_clash_protection)\n     current_frame_info.gr_used_mask |= 0xc;\n \n   /* Find the size of the register stack frame.  We have only 80 local\n@@ -3494,7 +3495,8 @@ ia64_expand_prologue (void)\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = current_frame_info.total_size;\n \n-  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n+  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+      || flag_stack_clash_protection)\n     {\n       HOST_WIDE_INT size = current_frame_info.total_size;\n       int bs_size = BACKING_STORE_SIZE (current_frame_info.n_input_regs"}, {"sha": "8643cb9ad303b28672d6f59eca22b31cdc8a7eb1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9c1b56c4e739dc6854f1f93526bf7da6f7268095", "patch": "@@ -12080,7 +12080,8 @@ mips_expand_prologue (void)\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = size;\n \n-  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n+  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+      || flag_stack_clash_protection)\n     {\n       if (crtl->is_leaf && !cfun->calls_alloca)\n \t{"}, {"sha": "e235d3c6a82392d0371522a477588b75e0ca2503", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=9c1b56c4e739dc6854f1f93526bf7da6f7268095", "patch": "@@ -29687,7 +29687,8 @@ rs6000_emit_prologue (void)\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = info->total_size;\n \n-  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n+  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+      || flag_stack_check_protection)\n     {\n       HOST_WIDE_INT size = info->total_size;\n "}, {"sha": "11e4f4565a52239a73fab9984b02c1c287a30e6d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9c1b56c4e739dc6854f1f93526bf7da6f7268095", "patch": "@@ -5734,7 +5734,8 @@ sparc_expand_prologue (void)\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = size;\n \n-  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n+  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+      || flag_stack_clash_protection)\n     {\n       if (crtl->is_leaf && !cfun->calls_alloca)\n \t{\n@@ -5845,7 +5846,8 @@ sparc_flat_expand_prologue (void)\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = size;\n \n-  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n+  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+      || flag_stack_clash_protection)\n     {\n       if (crtl->is_leaf && !cfun->calls_alloca)\n \t{"}, {"sha": "1fc997722865ae4ba02496b4906be680d4000f20", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1b56c4e739dc6854f1f93526bf7da6f7268095/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=9c1b56c4e739dc6854f1f93526bf7da6f7268095", "patch": "@@ -1767,7 +1767,7 @@ spu_expand_prologue (void)\n \n   if (total_size > 0)\n     {\n-      if (flag_stack_check)\n+      if (flag_stack_check || flag_stack_clash_protection)\n \t{\n \t  /* We compare against total_size-1 because\n \t     ($sp >= total_size) <=> ($sp > total_size-1) */\n@@ -5390,7 +5390,7 @@ spu_allocate_stack (rtx op0, rtx op1)\n   emit_insn (gen_spu_convert (sp, stack_pointer_rtx));\n   emit_insn (gen_subv4si3 (sp, sp, splatted));\n \n-  if (flag_stack_check)\n+  if (flag_stack_check || flag_stack_clash_protection)\n     {\n       rtx avail = gen_reg_rtx(SImode);\n       rtx result = gen_reg_rtx(SImode);"}]}