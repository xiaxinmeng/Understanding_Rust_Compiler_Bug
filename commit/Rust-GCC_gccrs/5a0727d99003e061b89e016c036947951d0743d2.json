{"sha": "5a0727d99003e061b89e016c036947951d0743d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwNzI3ZDk5MDAzZTA2MWI4OWUwMTZjMDM2OTQ3OTUxZDA3NDNkMg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2013-01-14T20:57:58Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2013-01-14T20:57:58Z"}, "message": "vector.cc: Shrink memory usage under simulator.\n\n2013-01-14  Steve Ellcey  <sellcey@mips.com>\n\n\t* testsuite/libstdc++-v3/testsuite/23_containers/vector/profile/vector.cc:\n\tShrink memory usage under simulator.\n\t* testsuite/libstdc++-v3/testsuite/26_numerics/valarray/28277.cc: Ditto.\n\t* testsuite/libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/4.cc:\n\tDitto.\n\t* testsuite/libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/5.cc:\n\tDitto.\n\t* testsuite/libstdc++-v3/testsuite/27_io/basic_istream/ignore/wchar_t/2.cc:\n\tDitto.\n\t* testsuite/libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-1.cc:\n\tDitto.\n\t* testsuite/libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-2.cc:\n\tDitto.\n\t* testsuite/libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/wchar_t/1.cc:\n\tDitto.\n\t* testsuite/libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/wchar_t/4.cc:\n\tDitto.\n\nFrom-SVN: r195177", "tree": {"sha": "1e2a5d01ba299674e33b95a7d8d2348547bf0574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e2a5d01ba299674e33b95a7d8d2348547bf0574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a0727d99003e061b89e016c036947951d0743d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0727d99003e061b89e016c036947951d0743d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0727d99003e061b89e016c036947951d0743d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0727d99003e061b89e016c036947951d0743d2/comments", "author": null, "committer": null, "parents": [{"sha": "4bd18faef21c51e02ab6228c50ee036b84c77c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd18faef21c51e02ab6228c50ee036b84c77c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd18faef21c51e02ab6228c50ee036b84c77c99"}], "stats": {"total": 88, "additions": 71, "deletions": 17}, "files": [{"sha": "7806fb24bf35cd93054a6b3a1b3e9abc854c7566", "filename": "libstdc++-v3/testsuite/23_containers/vector/profile/vector.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fprofile%2Fvector.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fprofile%2Fvector.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fprofile%2Fvector.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,6 +1,12 @@\n // Test vector: performance difference 25% (0.444s vs 0.539s)\n // Advice: set tmp as 10000\n \n+// { dg-options \"-DITERATIONS=20\" { target simulator } }\n+\n+#ifndef ITERATIONS\n+#define ITERATIONS 2000\n+#endif\n+\n #include <vector>\n \n using std::vector;\n@@ -9,7 +15,7 @@ int main()\n {\n   vector <int> tmp;\n \n-  for (int j=0; j<2000; j++)\n+  for (int j=0; j<ITERATIONS; j++)\n     // Insert more than default item\n     for (int i=0; i<10000; i++) {\n       tmp.push_back(i);"}, {"sha": "2712a5de4e62c451d8d3ad750b9d8182d9189997", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/28277.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F28277.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,6 +1,6 @@\n // 2006-07-15  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2006, 2009 Free Software Foundation\n+// Copyright (C) 2006, 2009, 2013 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,6 +17,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-DMAX_SIZE=5000\" { target simulator } }\n+\n+#ifndef MAX_SIZE\n+#define MAX_SIZE 5000000\n+#endif\n+\n #include <valarray>\n #include <testsuite_hooks.h>\n \n@@ -25,7 +31,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  const std::valarray<int> v1(1, 5000000);\n+  const std::valarray<int> v1(1, MAX_SIZE);\n \n   const std::valarray<int> v2 = v1.shift(1);\n   VERIFY( v2.size() == v1.size() );"}, {"sha": "58c100d9f8fb12fd0ea9bc099cff145d171d93c3", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/4.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F4.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,6 +1,6 @@\n // 2005-07-22  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2005, 2006, 2007, 2009 Free Software Foundation\n+// Copyright (C) 2005, 2006, 2007, 2009, 2013 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,6 +19,12 @@\n \n // 27.6.1.2.3 basic_istream::operator>>\n \n+// { dg-options \"-DMAX_SIZE=466\" { target simulator } }\n+\n+#ifndef MAX_SIZE\n+#define MAX_SIZE 666\n+#endif\n+\n #include <istream>\n #include <string>\n #include <fstream>\n@@ -70,7 +76,7 @@ void test01()\n   const char filename[] = \"inserters_extractors-4.txt\";\n \n   const unsigned nchunks = 10;\n-  const wstring data = prepare(666, nchunks);\n+  const wstring data = prepare(MAX_SIZE, nchunks);\n \n   wofstream ofstrm;\n   ofstrm.open(filename);"}, {"sha": "0c8a047262355985f8b994d26d73a6ed13dbde80", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/5.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2005, 2006, 2007, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2013 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,6 +17,12 @@\n \n // 27.6.1.3 unformatted input functions\n \n+// { dg-options \"-DMAX_LENGTH=7\" { target simulator } }\n+\n+#ifndef MAX_LENGTH\n+#define MAX_LENGTH 777\n+#endif\n+\n #include <istream>\n #include <string>\n #include <fstream>\n@@ -68,7 +74,7 @@ void test01()\n \n   const wchar_t delim = L'|';\n   const unsigned nchunks = 10;\n-  const wstring data = prepare(777, nchunks, delim);\n+  const wstring data = prepare(MAX_LENGTH, nchunks, delim);\n \n   wofstream ofstrm;\n   ofstrm.open(filename);"}, {"sha": "867b86e33e80c2bd7f12cc61f4c8356fc9100ad0", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/wchar_t/2.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F2.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2005, 2006, 2007, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2013 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,6 +17,12 @@\n \n // 27.6.1.3 unformatted input functions\n \n+// { dg-options \"-DMAX_SIZE=355\" { target simulator } }\n+\n+#ifndef MAX_SIZE\n+#define MAX_SIZE 555\n+#endif\n+\n #include <istream>\n #include <string>\n #include <fstream>\n@@ -67,7 +73,7 @@ void test01()\n \n   const wchar_t delim = L'|';\n   const unsigned nchunks = 10;\n-  const wstring data = prepare(555, nchunks, delim);\n+  const wstring data = prepare(MAX_SIZE, nchunks, delim);\n \n   wofstream ofstrm;\n   ofstrm.open(filename);"}, {"sha": "8012f794b4018e1dba14c99e286f31d0c42a4e6f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-1.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-1.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,6 +1,6 @@\n // 2006-07-15  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2006, 2009 Free Software Foundation\n+// Copyright (C) 2006, 2009, 2013 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,6 +19,12 @@\n \n // 27.6.2.5.4 basic_ostream character inserters\n \n+// { dg-options \"-DMAX_SIZE=50000\" { target simulator } }\n+\n+#ifndef MAX_SIZE\n+#define MAX_SIZE 5000000\n+#endif\n+\n #include <ostream>\n #include <sstream>\n #include <testsuite_hooks.h>\n@@ -30,7 +36,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n \n   wostringstream oss_01;\n-  const string str_01(5000000, 'a');\n+  const string str_01(MAX_SIZE, 'a');\n \n   oss_01 << str_01.c_str();\n "}, {"sha": "94b6b13eda43cd7698c24ec9fe48f0c6c814cdec", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-2.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-2.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,6 +1,6 @@\n // 2006-10-12  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2006, 2007, 2009 Free Software Foundation\n+// Copyright (C) 2006, 2007, 2009, 2013 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,6 +19,12 @@\n \n // 27.6.2.5.4 basic_ostream character inserters\n \n+// { dg-options \"-DMAX_SIZE=50000\" { target simulator } }\n+\n+#ifndef MAX_SIZE\n+#define MAX_SIZE 5000000\n+#endif\n+\n #include <ostream>\n #include <sstream>\n #include <testsuite_hooks.h>\n@@ -32,7 +38,7 @@ void test01()\n   wostringstream oss_01;\n   const string str_01(50, 'a');\n \n-  oss_01.width(5000000);\n+  oss_01.width(MAX_SIZE);\n   const streamsize width = oss_01.width();\n \n   oss_01 << str_01.c_str();"}, {"sha": "2b35dbdea184b4b48b4f2178117f50ee7bf1ba2e", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/wchar_t/1.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F1.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,6 +1,6 @@\n // 2004-07-07  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2004, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2009, 2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,6 +19,12 @@\n \n // 27.7.1.3 basic_stringbuf overridden virtual functions.\n \n+// { dg-options \"-DMAX_SIZE=100000\" { target simulator } }\n+\n+#ifndef MAX_SIZE\n+#define MAX_SIZE 10000000\n+#endif\n+\n #include <sstream>\n #include <cstdlib>\n #include <testsuite_hooks.h>\n@@ -51,6 +57,6 @@ test01(unsigned iter)\n \n int main()\n {\n-  test01(10000000);\n+  test01(MAX_SIZE);\n   return 0;\n }"}, {"sha": "4a82d8f5fc70232781bccb19e557720317968de0", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/wchar_t/4.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0727d99003e061b89e016c036947951d0743d2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F4.cc?ref=5a0727d99003e061b89e016c036947951d0743d2", "patch": "@@ -1,6 +1,6 @@\n // 2004-10-06  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2004, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2009, 2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,6 +19,12 @@\n \n // 27.8.1.4 Overridden virtual functions\n \n+// { dg-options \"-DMAX_SIZE=4096\" { target simulator } }\n+\n+#ifndef MAX_SIZE\n+#define MAX_SIZE (1 << 18)\n+#endif\n+\n #include <sstream>\n #include <testsuite_hooks.h>\n \n@@ -27,7 +33,7 @@ void test01()\n   using namespace std;\n   bool test __attribute__((unused)) = true;\n \n-  const unsigned max_size = 1 << 18;\n+  const unsigned max_size = MAX_SIZE;\n \n   static wchar_t ref[max_size];\n   wmemset(ref, L'\\0', max_size);"}]}