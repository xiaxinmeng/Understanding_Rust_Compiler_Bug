{"sha": "a7289eafc81bd9598a44b4849fa6d07ccf3e7f19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcyODllYWZjODFiZDk1OThhNDRiNDg0OWZhNmQwN2NjZjNlN2YxOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-06-24T19:53:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-06-24T19:53:21Z"}, "message": "sparc: Fix -mflat unwind info.\n\nThe old definition left a 2 instruction hole in which\nunwind info was out-of-date.\n\nFrom-SVN: r175388", "tree": {"sha": "3fd6198c690a1f27fb3e42b0c5cfed0917edc7ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd6198c690a1f27fb3e42b0c5cfed0917edc7ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19/comments", "author": null, "committer": null, "parents": [{"sha": "c4b9a87e0df50293a420e98952c9593f58dcd1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b9a87e0df50293a420e98952c9593f58dcd1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4b9a87e0df50293a420e98952c9593f58dcd1da"}], "stats": {"total": 201, "additions": 52, "deletions": 149}, "files": [{"sha": "2c9995a8e66c2c56b3375d7b2213825d644c5e16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7289eafc81bd9598a44b4849fa6d07ccf3e7f19", "patch": "@@ -1,3 +1,12 @@\n+2011-06-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/sparc.md (create_flat_frame_1<P:mode>): Remove.\n+\t(create_flat_frame_2<P:mode>, create_flat_frame_3<P:mode>): Remove.\n+\t* config/sparc/sparc.c (gen_create_flat_frame_1): Remove.\n+\t(gen_create_flat_frame_2, gen_create_flat_frame_3): Remove.\n+\t(sparc_flat_expand_prologue): Emit individual instructions\n+\tinstead of one of the above.\n+\n 2011-06-24  Easwaran Raman  <eraman@google.com>\n \n \tPR rtl-optimization/49429"}, {"sha": "7d83dd6d4192f8fc64c4e37d53ab44bd098a76e4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 43, "deletions": 116, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a7289eafc81bd9598a44b4849fa6d07ccf3e7f19", "patch": "@@ -4617,39 +4617,6 @@ emit_save_register_window (rtx increment)\n   return insn;\n }\n \n-/* Generate a create_flat_frame_1 insn.  */\n-\n-static rtx\n-gen_create_flat_frame_1 (rtx increment)\n-{\n-  if (TARGET_ARCH64)\n-    return gen_create_flat_frame_1di (increment);\n-  else\n-    return gen_create_flat_frame_1si (increment);\n-}\n-\n-/* Generate a create_flat_frame_2 insn.  */\n-\n-static rtx\n-gen_create_flat_frame_2 (rtx increment)\n-{\n-  if (TARGET_ARCH64)\n-    return gen_create_flat_frame_2di (increment);\n-  else\n-    return gen_create_flat_frame_2si (increment);\n-}\n-\n-/* Generate a create_flat_frame_3 insn.  */\n-\n-static rtx\n-gen_create_flat_frame_3 (rtx increment)\n-{\n-  if (TARGET_ARCH64)\n-    return gen_create_flat_frame_3di (increment);\n-  else\n-    return gen_create_flat_frame_3si (increment);\n-}\n-\n /* Generate an increment for the stack pointer.  */\n \n static rtx\n@@ -4793,7 +4760,6 @@ sparc_flat_expand_prologue (void)\n {\n   HOST_WIDE_INT size;\n   rtx insn;\n-  int i;\n \n   sparc_leaf_function_p = optimize > 0 && current_function_is_leaf;\n \n@@ -4811,103 +4777,64 @@ sparc_flat_expand_prologue (void)\n \n   if (size == 0)\n     ; /* do nothing.  */\n-  else if (frame_pointer_needed)\n+  else\n     {\n-      if (size <= 4096)\n-\t{\n-\t  if (return_addr_reg_needed_p (sparc_leaf_function_p))\n-\t    insn = emit_insn (gen_create_flat_frame_1 (GEN_INT (-size)));\n-\t  else\n-\t    insn = emit_insn (gen_create_flat_frame_2 (GEN_INT (-size)));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  for (i=0; i < XVECLEN (PATTERN (insn), 0); i++)\n-\t    RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, i)) = 1;\n-\t}\n-      else\n-\t{\n-\t  rtx reg = gen_rtx_REG (Pmode, 1), note;\n-\t  emit_move_insn (reg, GEN_INT (-size));\n-\t  if (return_addr_reg_needed_p (sparc_leaf_function_p))\n-\t    {\n-\t      insn = emit_insn (gen_create_flat_frame_1 (reg));\n-\t      note\n-\t\t= gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t\t    gen_rtvec\n-\t\t\t\t    (3, copy_rtx\n-\t\t\t\t\t(XVECEXP (PATTERN (insn), 0, 0)),\n-\t\t\t\t\tgen_stack_pointer_inc\n-\t\t\t\t\t(GEN_INT (-size)),\n-\t\t\t\t\tcopy_rtx\n-\t\t\t\t\t(XVECEXP (PATTERN (insn), 0, 2))));\n-\t    }\n-\t  else\n-\t    {\n-\t      insn = emit_insn (gen_create_flat_frame_2 (reg));\n-\t      note\n-\t\t= gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t\t    gen_rtvec\n-\t\t\t\t    (2, copy_rtx\n-\t\t\t\t\t(XVECEXP (PATTERN (insn), 0, 0)),\n-\t\t\t\t\tgen_stack_pointer_inc\n-\t\t\t\t\t(GEN_INT (-size))));\n-\t    }\n+      rtx size_int_rtx, size_rtx;\n+\n+      size_rtx = size_int_rtx = GEN_INT (-size);\n \n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, note);\n-\t  for (i=0; i < XVECLEN (note, 0); i++)\n-\t    RTX_FRAME_RELATED_P (XVECEXP (note, 0, i)) = 1;\n-\t}\n-    }\n-  else if (return_addr_reg_needed_p (sparc_leaf_function_p))\n-    {\n       if (size <= 4096)\n+\tinsn = emit_insn (gen_stack_pointer_inc (size_int_rtx));\n+      else if (size <= 8192 && !frame_pointer_needed)\n \t{\n-\t  insn = emit_insn (gen_create_flat_frame_3 (GEN_INT (-size)));\n+\t  insn = emit_insn (gen_stack_pointer_inc (GEN_INT (-4096)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  for (i=0; i < XVECLEN (PATTERN (insn), 0); i++)\n-\t    RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, i)) = 1;\n+\t  insn = emit_insn (gen_stack_pointer_inc (GEN_INT (4096 - size)));\n \t}\n       else\n \t{\n-\t  rtx reg = gen_rtx_REG (Pmode, 1), note;\n-\t  emit_move_insn (reg, GEN_INT (-size));\n-\t  insn = emit_insn (gen_create_flat_frame_3 (reg));\n-\t  note\n-\t    = gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t\tgen_rtvec\n-\t\t\t\t(2, gen_stack_pointer_inc (GEN_INT (-size)),\n-\t\t\t\t    copy_rtx\n-\t\t\t\t    (XVECEXP (PATTERN (insn), 0, 1))));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, note);\n-\t  for (i=0; i < XVECLEN (note, 0); i++)\n-\t    RTX_FRAME_RELATED_P (XVECEXP (note, 0, i)) = 1;\n+\t  size_rtx = gen_rtx_REG (Pmode, 1);\n+\t  emit_move_insn (size_rtx, size_int_rtx);\n+\t  insn = emit_insn (gen_stack_pointer_inc (size_rtx));\n+\t  add_reg_note (insn, REG_CFA_ADJUST_CFA,\n+\t\t\tgen_stack_pointer_inc (size_int_rtx));\n \t}\n-    }\n-  else\n-    {\n-      if (size <= 4096)\n-\tinsn = emit_insn (gen_stack_pointer_inc (GEN_INT (-size)));\n-      else if (size <= 8192)\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+\n+      if (frame_pointer_needed)\n \t{\n-\t  insn = emit_insn (gen_stack_pointer_inc (GEN_INT (-4096)));\n+\t  insn = emit_insn (gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+\t\t\t\t\t gen_rtx_MINUS (Pmode,\n+\t\t\t\t\t\t\tstack_pointer_rtx,\n+\t\t\t\t\t\t\tsize_rtx)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  insn = emit_insn (gen_stack_pointer_inc (GEN_INT (4096 - size)));\n+\n+\t  add_reg_note (insn, REG_CFA_ADJUST_CFA,\n+\t\t\tgen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+\t\t\t\t     plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t    size)));\n+\n+\t  /* Make sure nothing is scheduled until after the frame\n+\t     is established.  */\n+\t  emit_insn (gen_blockage ());\n \t}\n-      else\n+\n+      if (return_addr_reg_needed_p (sparc_leaf_function_p))\n \t{\n-\t  rtx reg = gen_rtx_REG (Pmode, 1);\n-\t  emit_move_insn (reg, GEN_INT (-size));\n-\t  insn = emit_insn (gen_stack_pointer_inc (reg));\n-\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_stack_pointer_inc (GEN_INT (-size)));\n-\t}\n+\t  rtx i7 = gen_rtx_REG (Pmode, INCOMING_RETURN_ADDR_REGNUM);\n+\t  rtx o7 = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n \n-      RTX_FRAME_RELATED_P (insn) = 1;\n-    }\n+\t  insn = emit_move_insn (o7, i7);\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n \n-  /* Make sure nothing is scheduled until after the frame is established.  */\n-  emit_insn (gen_blockage ());\n+\t  add_reg_note (insn, REG_CFA_REGISTER,\n+\t\t\tgen_rtx_SET (VOIDmode, o7, i7));\n+\n+\t  /* Prevent this instruction from ever being considered dead,\n+\t     even if this function has no epilogue.  */\n+\t  emit_insn (gen_rtx_USE (VOIDmode, o7));\n+\t}\n+    }\n \n   if (frame_pointer_needed)\n     {"}, {"sha": "2c8d306fecc8be0ea496e1487ef6009e6536ce30", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7289eafc81bd9598a44b4849fa6d07ccf3e7f19/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=a7289eafc81bd9598a44b4849fa6d07ccf3e7f19", "patch": "@@ -6287,39 +6287,6 @@\n   \"save\\t%%sp, %0, %%sp\"\n   [(set_attr \"type\" \"savew\")])\n \n-;; For the \"create flat frame\" insns, we need to use special insns\n-;; because %fp cannot be clobbered until after the frame is established (so\n-;; that it contains the live register window save area) and %i7 changed with\n-;; a simple move as it is a fixed register and the move would be eliminated.\n-\n-(define_insn \"create_flat_frame_1<P:mode>\"\n-  [(set (reg:P 30) (reg:P 14))\n-   (set (reg:P 14) (plus:P (reg:P 14)\n-\t\t\t   (match_operand:P 0 \"arith_operand\" \"rI\")))\n-   (set (reg:P 31) (reg:P 15))]\n-  \"TARGET_FLAT\"\n-  \"add\\t%%sp, %0, %%sp\\n\\tsub\\t%%sp, %0, %%fp\\n\\tmov\\t%%o7, %%i7\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"3\")])\n-\n-(define_insn \"create_flat_frame_2<P:mode>\"\n-  [(set (reg:P 30) (reg:P 14))\n-   (set (reg:P 14) (plus:P (reg:P 14)\n-\t\t           (match_operand:P 0 \"arith_operand\" \"rI\")))]\n-  \"TARGET_FLAT\"\n-  \"add\\t%%sp, %0, %%sp\\n\\tsub\\t%%sp, %0, %%fp\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")])\n-\n-(define_insn \"create_flat_frame_3<P:mode>\"\n-  [(set (reg:P 14) (plus:P (reg:P 14)\n-\t\t           (match_operand:P 0 \"arith_operand\" \"rI\")))\n-   (set (reg:P 31) (reg:P 15))]\n-  \"TARGET_FLAT\"\n-  \"add\\t%%sp, %0, %%sp\\n\\tmov\\t%%o7, %%i7\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")])\n-\n (define_expand \"epilogue\"\n   [(return)]\n   \"\""}]}