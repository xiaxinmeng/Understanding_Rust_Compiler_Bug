{"sha": "f8104bb9dc2365d268ca93e43a24f42e8314fcc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgxMDRiYjlkYzIzNjVkMjY4Y2E5M2U0M2EyNGY0MmU4MzE0ZmNjMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-18T15:31:49Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-18T15:31:49Z"}, "message": "i386: Rewrite restore_stack_nonlocal expander [PR96536].\n\n-fcf-protection code in restore_stack_nonlocal uses a branch based on\na clobber result.  The patch adds missing compare and completely\nrewrites the expander to use high-level functions in RTL construction.\n\n2020-08-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/96536\n\t* config/i386/i386.md (restore_stack_nonlocal): Add missing compare\n\tRTX.  Rewrite expander to use high-level functions in RTL construction.", "tree": {"sha": "bee376c8e8242a536d6a5b307103bdf5d0ea13d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bee376c8e8242a536d6a5b307103bdf5d0ea13d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8104bb9dc2365d268ca93e43a24f42e8314fcc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8104bb9dc2365d268ca93e43a24f42e8314fcc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8104bb9dc2365d268ca93e43a24f42e8314fcc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8104bb9dc2365d268ca93e43a24f42e8314fcc1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1a58b7fbdaa8ac00957fccfb379af163309311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1a58b7fbdaa8ac00957fccfb379af163309311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1a58b7fbdaa8ac00957fccfb379af163309311"}], "stats": {"total": 115, "additions": 43, "deletions": 72}, "files": [{"sha": "fb677e178176a67f291ce069659d838b7152d7aa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 43, "deletions": 72, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8104bb9dc2365d268ca93e43a24f42e8314fcc1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8104bb9dc2365d268ca93e43a24f42e8314fcc1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f8104bb9dc2365d268ca93e43a24f42e8314fcc1", "patch": "@@ -19112,15 +19112,17 @@\n   \"\"\n {\n   rtx stack_slot;\n-  if ((flag_cf_protection & CF_RETURN))\n+\n+  if (flag_cf_protection & CF_RETURN)\n     {\n-      /* Copy shadow stack pointer to the first slot and stack ppointer\n-\t to the second slot.  */\n+      /* Copy shadow stack pointer to the first slot\n+\t and stack pointer to the second slot.  */\n       rtx ssp_slot = adjust_address (operands[0], word_mode, 0);\n       stack_slot = adjust_address (operands[0], Pmode, UNITS_PER_WORD);\n-      rtx ssp = force_reg (word_mode, const0_rtx);\n-      emit_insn (gen_rdssp (word_mode, ssp, ssp));\n-      emit_move_insn (ssp_slot, ssp);\n+\n+      rtx reg_ssp = force_reg (word_mode, const0_rtx);\n+      emit_insn (gen_rdssp (word_mode, reg_ssp, reg_ssp));\n+      emit_move_insn (ssp_slot, reg_ssp);\n     }\n   else\n     stack_slot = adjust_address (operands[0], Pmode, 0);\n@@ -19134,95 +19136,64 @@\n   \"\"\n {\n   rtx stack_slot;\n-  if ((flag_cf_protection & CF_RETURN))\n+\n+  if (flag_cf_protection & CF_RETURN)\n     {\n-      /* Restore shadow stack pointer from the first slot and stack\n-\t pointer from the second slot.  */\n+      /* Restore shadow stack pointer from the first slot\n+\t and stack pointer from the second slot.  */\n       rtx ssp_slot = adjust_address (operands[1], word_mode, 0);\n       stack_slot = adjust_address (operands[1], Pmode, UNITS_PER_WORD);\n \n-      rtx flags, jump, noadj_label, inc_label, loop_label;\n-      rtx reg_adj, reg_ssp, tmp, clob;\n-\n       /* Get the current shadow stack pointer.  The code below will check if\n \t SHSTK feature is enabled.  If it is not enabled the RDSSP instruction\n \t is a NOP.  */\n-      reg_ssp = force_reg (word_mode, const0_rtx);\n+      rtx reg_ssp = force_reg (word_mode, const0_rtx);\n       emit_insn (gen_rdssp (word_mode, reg_ssp, reg_ssp));\n \n-      /* Compare through substraction the saved and the current ssp to decide\n-\t if ssp has to be adjusted.  */\n-      tmp = gen_rtx_SET (reg_ssp, gen_rtx_MINUS (word_mode, reg_ssp,\n-\t\t\t\t\t\t ssp_slot));\n-      clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n-      tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n-      emit_insn (tmp);\n+      /* Compare through subtraction the saved and the current ssp\n+\t to decide if ssp has to be adjusted.  */\n+      reg_ssp = expand_simple_binop (word_mode, MINUS,\n+\t\t\t\t     reg_ssp, ssp_slot,\n+\t\t\t\t     reg_ssp, 1, OPTAB_DIRECT);\n \n       /* Compare and jump over adjustment code.  */\n-      noadj_label = gen_label_rtx ();\n-      flags = gen_rtx_REG (CCZmode, FLAGS_REG);\n-      tmp = gen_rtx_EQ (VOIDmode, flags, const0_rtx);\n-      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, noadj_label),\n-\t\t\t\t  pc_rtx);\n-      jump = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n-      JUMP_LABEL (jump) = noadj_label;\n-\n-      /* Compute the numebr of frames to adjust.  */\n-      reg_adj = gen_lowpart (ptr_mode, reg_ssp);\n-      tmp = gen_rtx_SET (reg_adj,\n-\t\t\t gen_rtx_LSHIFTRT (ptr_mode,\n-\t\t\t\t\t   negate_rtx (ptr_mode, reg_adj),\n-\t\t\t\t\t   GEN_INT ((word_mode == SImode)\n-\t\t\t\t\t\t    ? 2\n-\t\t\t\t\t\t    : 3)));\n-      clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n-      tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n-      emit_insn (tmp);\n+      rtx noadj_label = gen_label_rtx ();\n+      emit_cmp_and_jump_insns (reg_ssp, const0_rtx, EQ, NULL_RTX,\n+\t\t\t       word_mode, 1, noadj_label);\n \n-      /* Check if number of frames <= 255 so no loop is needed.  */\n-      tmp = gen_rtx_COMPARE (CCmode, reg_adj, GEN_INT (255));\n-      flags = gen_rtx_REG (CCmode, FLAGS_REG);\n-      emit_insn (gen_rtx_SET (flags, tmp));\n+      /* Compute the number of frames to adjust.  */\n+      rtx reg_adj = gen_lowpart (ptr_mode, reg_ssp);\n+      rtx reg_adj_neg = expand_simple_unop (ptr_mode, NEG, reg_adj,\n+\t\t\t\t\t    NULL_RTX, 1);\n \n-      inc_label = gen_label_rtx ();\n-      tmp = gen_rtx_LEU (VOIDmode, flags, const0_rtx);\n-      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, inc_label),\n-\t\t\t\t  pc_rtx);\n-      jump = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n-      JUMP_LABEL (jump) = inc_label;\n+      reg_adj = expand_simple_binop (ptr_mode, LSHIFTRT, reg_adj_neg,\n+\t\t\t\t     GEN_INT (exact_log2 (UNITS_PER_WORD)),\n+\t\t\t\t     reg_adj, 1, OPTAB_DIRECT);\n \n-      rtx reg_255 = gen_reg_rtx (word_mode);\n-      emit_move_insn (reg_255, GEN_INT (255));\n+      /* Check if number of frames <= 255 so no loop is needed.  */\n+      rtx inc_label = gen_label_rtx ();\n+      emit_cmp_and_jump_insns (reg_adj, GEN_INT (255), LEU, NULL_RTX,\n+\t\t\t       ptr_mode, 1, inc_label);\n \n       /* Adjust the ssp in a loop.  */\n-      loop_label = gen_label_rtx ();\n+      rtx loop_label = gen_label_rtx ();\n       emit_label (loop_label);\n       LABEL_NUSES (loop_label) = 1;\n \n+      rtx reg_255 = force_reg (word_mode, GEN_INT (255));\n       emit_insn (gen_incssp (word_mode, reg_255));\n-      tmp = gen_rtx_SET (reg_adj, gen_rtx_MINUS (ptr_mode,\n-\t\t\t\t\t\t reg_adj,\n-\t\t\t\t\t\t GEN_INT (255)));\n-      clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n-      tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n-      emit_insn (tmp);\n-\n-      tmp = gen_rtx_COMPARE (CCmode, reg_adj, GEN_INT (255));\n-      flags = gen_rtx_REG (CCmode, FLAGS_REG);\n-      emit_insn (gen_rtx_SET (flags, tmp));\n-\n-      /* Jump to the loop label.  */\n-      tmp = gen_rtx_GTU (VOIDmode, flags, const0_rtx);\n-      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, loop_label),\n-\t\t\t\t  pc_rtx);\n-      jump = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n-      JUMP_LABEL (jump) = loop_label;\n+\n+      reg_adj = expand_simple_binop (ptr_mode, MINUS,\n+\t\t\t\t     reg_adj, GEN_INT (255),\n+\t\t\t\t     reg_adj, 1, OPTAB_DIRECT);\n+\n+      /* Compare and jump to the loop label.  */\n+      emit_cmp_and_jump_insns (reg_adj, GEN_INT (255), GTU, NULL_RTX,\n+\t\t\t       ptr_mode, 1, loop_label);\n \n       emit_label (inc_label);\n       LABEL_NUSES (inc_label) = 1;\n+\n       emit_insn (gen_incssp (word_mode, reg_ssp));\n \n       emit_label (noadj_label);"}]}