{"sha": "005fad9d251b7ce6c009b646e213fbbf8d43a02b", "node_id": "C_kwDOANBUbNoAKDAwNWZhZDlkMjUxYjdjZTZjMDA5YjY0NmUyMTNmYmJmOGQ0M2EwMmI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-03T06:55:30Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-26T18:53:00Z"}, "message": "RISC-V: Fix bugs for refine vsetvl a5, zero into vsetvl zero, zero incorrectly\n\nCurrently we support this optimization:\n\nbb 0:\n vsetvli a5,zero,e32,mf2\nbb 1:\n vsetvli a5,zero,e64,m1 --> vsetvli zero,zero,e64,m1\n\nAccording RVV ISA, we can do this optimization only if both RATIO and AVL are equal.\nHowever, current VSETVL PASS missed the check of AVL. This patch add this condition\ncheck to fix bugs.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vsetvl.cc (vector_infos_manager::all_same_avl_p): New function.\n\t(pass_vsetvl::can_refine_vsetvl_p): Add AVL check.\n\t(pass_vsetvl::commit_vsetvls): Ditto.\n\t* config/riscv/riscv-vsetvl.h: New function declaration.", "tree": {"sha": "6ba4b2e4745d5a5104b80c8ad9f25d4333b18b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba4b2e4745d5a5104b80c8ad9f25d4333b18b6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/005fad9d251b7ce6c009b646e213fbbf8d43a02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005fad9d251b7ce6c009b646e213fbbf8d43a02b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005fad9d251b7ce6c009b646e213fbbf8d43a02b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005fad9d251b7ce6c009b646e213fbbf8d43a02b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91a41201b5cea1d72cd84e0e8751289774fcba42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a41201b5cea1d72cd84e0e8751289774fcba42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a41201b5cea1d72cd84e0e8751289774fcba42"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "3b84db39199b2d2b7ad9cb85a483088d6055025a", "filename": "gcc/config/riscv/riscv-vsetvl.cc", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005fad9d251b7ce6c009b646e213fbbf8d43a02b/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005fad9d251b7ce6c009b646e213fbbf8d43a02b/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc?ref=005fad9d251b7ce6c009b646e213fbbf8d43a02b", "patch": "@@ -1440,6 +1440,29 @@ vector_infos_manager::all_same_ratio_p (sbitmap bitdata) const\n   return true;\n }\n \n+bool\n+vector_infos_manager::all_same_avl_p (const basic_block cfg_bb,\n+\t\t\t\t      sbitmap bitdata) const\n+{\n+  if (bitmap_empty_p (bitdata))\n+    return false;\n+\n+  const auto &block_info = vector_block_infos[cfg_bb->index];\n+  if (!block_info.local_dem.demand_p (DEMAND_AVL))\n+    return true;\n+\n+  avl_info avl = block_info.local_dem.get_avl_info ();\n+  unsigned int bb_index;\n+  sbitmap_iterator sbi;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (bitdata, 0, bb_index, sbi)\n+  {\n+    if (vector_exprs[bb_index]->get_avl_info () != avl)\n+      return false;\n+  }\n+  return true;\n+}\n+\n size_t\n vector_infos_manager::expr_set_num (sbitmap bitdata) const\n {\n@@ -2111,6 +2134,10 @@ pass_vsetvl::can_refine_vsetvl_p (const basic_block cfg_bb, uint8_t ratio) const\n \tm_vector_manager->vector_avin[cfg_bb->index]))\n     return false;\n \n+  if (!m_vector_manager->all_same_avl_p (\n+\tcfg_bb, m_vector_manager->vector_avin[cfg_bb->index]))\n+    return false;\n+\n   size_t expr_id\n     = bitmap_first_set_bit (m_vector_manager->vector_avin[cfg_bb->index]);\n   if (m_vector_manager->vector_exprs[expr_id]->get_ratio () != ratio)\n@@ -2225,11 +2252,11 @@ pass_vsetvl::commit_vsetvls (void)\n \n \t      insn_info *insn = require->get_insn ();\n \t      vector_insn_info prev_info = vector_insn_info ();\n-\t      if (m_vector_manager->all_same_ratio_p (\n-\t\t    m_vector_manager->vector_avout[eg->src->index]))\n+\t      sbitmap bitdata = m_vector_manager->vector_avout[eg->src->index];\n+\t      if (m_vector_manager->all_same_ratio_p (bitdata)\n+\t\t  && m_vector_manager->all_same_avl_p (eg->dest, bitdata))\n \t\t{\n-\t\t  size_t first = bitmap_first_set_bit (\n-\t\t    m_vector_manager->vector_avout[eg->src->index]);\n+\t\t  size_t first = bitmap_first_set_bit (bitdata);\n \t\t  prev_info = *m_vector_manager->vector_exprs[first];\n \t\t}\n "}, {"sha": "f05b16659d3b511bed74d9b7f54c7fd77238fd52", "filename": "gcc/config/riscv/riscv-vsetvl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005fad9d251b7ce6c009b646e213fbbf8d43a02b/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005fad9d251b7ce6c009b646e213fbbf8d43a02b/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h?ref=005fad9d251b7ce6c009b646e213fbbf8d43a02b", "patch": "@@ -333,6 +333,9 @@ class vector_infos_manager\n   /* Get all relaxer expression id for corresponding vector info.  */\n   auto_vec<size_t> get_all_available_exprs (const vector_insn_info &) const;\n \n+  /* Return true if all expression set in bitmap are same AVL.  */\n+  bool all_same_avl_p (const basic_block, sbitmap) const;\n+\n   /* Return true if all expression set in bitmap are same ratio.  */\n   bool all_same_ratio_p (sbitmap) const;\n "}]}