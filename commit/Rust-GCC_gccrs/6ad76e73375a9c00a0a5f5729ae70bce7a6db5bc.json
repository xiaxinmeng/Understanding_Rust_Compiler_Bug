{"sha": "6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc", "node_id": "C_kwDOANBUbNoAKDZhZDc2ZTczMzc1YTljMDBhMGE1ZjU3MjlhZTcwYmNlN2E2ZGI1YmM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-06T14:45:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-07T00:25:43Z"}, "message": "c++: nested catch in ctor fn-try-block [PR61611]\n\nBeing in_function_try_handler isn't enough to satisfy the condition of\nreaching the end of such a handler; in this case, we're reaching the end of\na handler within that handler, so we don't want the special semantics.\n\n\tPR c++/61611\n\ngcc/cp/ChangeLog:\n\n\t* except.c (in_nested_catch): New.\n\t(expand_end_catch_block): Check it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/eh/ctor-fntry1.C: New test.", "tree": {"sha": "8bef3fdb4867b142b1006f4dc37069f47bcfc8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bef3fdb4867b142b1006f4dc37069f47bcfc8cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b10e031458d541f794dfaa08ba606487603a4bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10e031458d541f794dfaa08ba606487603a4bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10e031458d541f794dfaa08ba606487603a4bb6"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "9b746be231ae34ccd0664deaf5a14be091d780c8", "filename": "gcc/cp/except.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc", "patch": "@@ -448,6 +448,23 @@ expand_start_catch_block (tree decl)\n   return type;\n }\n \n+/* True if we are in a catch block within a catch block.  Assumes that we are\n+   in function scope.  */\n+\n+static bool\n+in_nested_catch (void)\n+{\n+  int catches = 0;\n+\n+  /* Scan through the template parameter scopes.  */\n+  for (cp_binding_level *b = current_binding_level;\n+       b->kind != sk_function_parms;\n+       b = b->level_chain)\n+    if (b->kind == sk_catch\n+\t&& ++catches == 2)\n+      return true;\n+  return false;\n+}\n \n /* Call this to end a catch block.  Its responsible for emitting the\n    code to handle jumping back to the correct place, and for emitting\n@@ -463,7 +480,8 @@ expand_end_catch_block (void)\n      a handler of the function-try-block of a constructor or destructor.  */\n   if (in_function_try_handler\n       && (DECL_CONSTRUCTOR_P (current_function_decl)\n-\t  || DECL_DESTRUCTOR_P (current_function_decl)))\n+\t  || DECL_DESTRUCTOR_P (current_function_decl))\n+      && !in_nested_catch ())\n     {\n       tree rethrow = build_throw (input_location, NULL_TREE);\n       /* Disable all warnings for the generated rethrow statement.  */"}, {"sha": "0c783bb45ee769f2cf35c122d06c97c6110e96d0", "filename": "gcc/testsuite/g++.dg/eh/ctor-fntry1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor-fntry1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor-fntry1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor-fntry1.C?ref=6ad76e73375a9c00a0a5f5729ae70bce7a6db5bc", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/61611\n+// { dg-do run }\n+\n+struct A { };\n+struct B { };\n+\n+struct Test\n+{\n+  Test()\n+  try { throw A(); }\n+  catch(const A&)\n+    {\n+      try { throw B(); }\n+      catch(const B&) { }\n+    }\n+};\n+\n+int\n+main()\n+{\n+  try { Test x; }\n+  catch(const A&) { }\n+}"}]}