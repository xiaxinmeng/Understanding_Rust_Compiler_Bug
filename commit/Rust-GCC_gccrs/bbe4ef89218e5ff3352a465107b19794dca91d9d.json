{"sha": "bbe4ef89218e5ff3352a465107b19794dca91d9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlNGVmODkyMThlNWZmMzM1MmE0NjUxMDdiMTk3OTRkY2E5MWQ5ZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-09T08:58:59Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-09T08:58:59Z"}, "message": "2004-01-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/geom/PathIterator.java\n\t(WIND_EVEN_ODD): Removed redundant modifiers.\n\t(WIND_NON_ZERO): Likewise.\n\t(SEG_MOVETO): Likewise.\n\t(SEG_LINETO): Likewise.\n\t(SEG_QUADTO): Likewise.\n\t(SEG_CUBICTO): Likewise.\n\t(SEG_CLOSE): Likewise.\n\t* java/awt/image/SinglePixelPackedSampleModel.java:\n\tRemoved redundant semicolon.\n\t* java/io/ObjectInputStream.java\n\t(inputGetObjectStreamClasses): Removed unused variable \"ret_val\".\n\t* java/util/logging/Filter.java\n\t(isLoggable): Removed redundant modifier.\n\t* java/util/logging/LogManager.java:\n\tRemoved redundant semicolon.\n\t* java/util/logging/XMLFormatter.java\n\t(format): Removed unused variable \"key\".\n\nFrom-SVN: r75570", "tree": {"sha": "712fe98c10f62b75c267a5e7427d8b02811f1702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/712fe98c10f62b75c267a5e7427d8b02811f1702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbe4ef89218e5ff3352a465107b19794dca91d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe4ef89218e5ff3352a465107b19794dca91d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe4ef89218e5ff3352a465107b19794dca91d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe4ef89218e5ff3352a465107b19794dca91d9d/comments", "author": null, "committer": null, "parents": [{"sha": "90e4e4c58d96511359fcede8e00658953ae9faaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e4e4c58d96511359fcede8e00658953ae9faaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e4e4c58d96511359fcede8e00658953ae9faaa"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "67f280367a137126d984ac2f7635c7c948b029de", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bbe4ef89218e5ff3352a465107b19794dca91d9d", "patch": "@@ -1,3 +1,24 @@\n+2004-01-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/geom/PathIterator.java\n+\t(WIND_EVEN_ODD): Removed redundant modifiers.\n+\t(WIND_NON_ZERO): Likewise.\n+\t(SEG_MOVETO): Likewise.\n+\t(SEG_LINETO): Likewise.\n+\t(SEG_QUADTO): Likewise.\n+\t(SEG_CUBICTO): Likewise.\n+\t(SEG_CLOSE): Likewise.\n+\t* java/awt/image/SinglePixelPackedSampleModel.java:\n+\tRemoved redundant semicolon.\n+\t* java/io/ObjectInputStream.java\n+\t(inputGetObjectStreamClasses): Removed unused variable \"ret_val\".\n+\t* java/util/logging/Filter.java\n+\t(isLoggable): Removed redundant modifier.\n+\t* java/util/logging/LogManager.java:\n+\tRemoved redundant semicolon.\n+\t* java/util/logging/XMLFormatter.java\n+\t(format): Removed unused variable \"key\".\n+\n 2004-01-08  Fernando Nasser  <fnasser@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GtkFileDialogPeer.java (nativeSetFile):"}, {"sha": "1fb0a46e0ff66aa55a854fbe663accac2628c8cc", "filename": "libjava/java/awt/geom/PathIterator.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java?ref=bbe4ef89218e5ff3352a465107b19794dca91d9d", "patch": "@@ -59,24 +59,24 @@\n    * from the point to infinity (in any direction) crosses an odd number of\n    * segments.\n    */\n-  static final int WIND_EVEN_ODD = 0;\n+  int WIND_EVEN_ODD = 0;\n \n   /**\n    * The non-zero winding mode: a point is internal to the shape if a ray\n    * from the point to infinity (in any direction) crosses a different number\n    * of segments headed clockwise than those headed counterclockwise.\n    */\n-  static final int WIND_NON_ZERO = 1;\n+  int WIND_NON_ZERO = 1;\n \n   /**\n    * Starts a new subpath. There is no segment from the previous vertex.\n    */\n-  static final int SEG_MOVETO = 0;\n+  int SEG_MOVETO = 0;\n \n   /**\n    * The current segment is a line.\n    */\n-  static final int SEG_LINETO = 1;\n+  int SEG_LINETO = 1;\n \n   /**\n    * The current segment is a quadratic parametric curve. It is interpolated\n@@ -91,7 +91,7 @@\n    *         = n! / (m! * (n-m)!)\n    * </pre>\n    */\n-  static final int SEG_QUADTO = 2;\n+  int SEG_QUADTO = 2;\n \n   /**\n    * The current segment is a cubic parametric curve (more commonly known as\n@@ -107,13 +107,13 @@\n    *         = n! / (m! * (n-m)!)\n    * </pre>\n    */\n-  static final int SEG_CUBICTO = 3;\n+  int SEG_CUBICTO = 3;\n \n   /**\n    * The current segment closes a loop by an implicit line to the previous\n    * SEG_MOVETO coordinate.\n    */\n-  static final int SEG_CLOSE = 4;\n+  int SEG_CLOSE = 4;\n \n   /**\n    * Returns the winding rule to determine which points are inside this path."}, {"sha": "3affe055411eefdff1c055579ad5a1f952de276d", "filename": "libjava/java/awt/image/SinglePixelPackedSampleModel.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Fawt%2Fimage%2FSinglePixelPackedSampleModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Fawt%2Fimage%2FSinglePixelPackedSampleModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FSinglePixelPackedSampleModel.java?ref=bbe4ef89218e5ff3352a465107b19794dca91d9d", "patch": "@@ -47,7 +47,7 @@ public class SinglePixelPackedSampleModel extends SampleModel\n   private int scanlineStride;\n   private int[] bitMasks;\n   private int[] bitOffsets;\n-  private int[] sampleSize;;\n+  private int[] sampleSize;\n   \n   public SinglePixelPackedSampleModel(int dataType, int w, int h,\n \t\t\t\t      int[] bitMasks)"}, {"sha": "a277691e9761b351543597cbde465cb08dca6712", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=bbe4ef89218e5ff3352a465107b19794dca91d9d", "patch": "@@ -657,8 +657,6 @@ private ObjectStreamClass[] inputGetObjectStreamClasses(Class clazz)\n   {\n     ObjectStreamClass osc = lookupClass(clazz);\n \n-    ObjectStreamClass[] ret_val;\n-\n     if (osc == null)\n       return new ObjectStreamClass[0];\n     else"}, {"sha": "fc46d0992db0973ee70bba5941df710e59281f55", "filename": "libjava/java/util/logging/Filter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Futil%2Flogging%2FFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Futil%2Flogging%2FFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FFilter.java?ref=bbe4ef89218e5ff3352a465107b19794dca91d9d", "patch": "@@ -64,5 +64,5 @@\n    * @return <code>true</code> if the record should be published,\n    *         <code>false</code> if it should be discarded.\n    */\n-  public boolean isLoggable(LogRecord record);\n+  boolean isLoggable(LogRecord record);\n }"}, {"sha": "36216bc408bd1ccdaab6e73a679aef23a1b0804e", "filename": "libjava/java/util/logging/LogManager.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Futil%2Flogging%2FLogManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Futil%2Flogging%2FLogManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FLogManager.java?ref=bbe4ef89218e5ff3352a465107b19794dca91d9d", "patch": "@@ -200,7 +200,7 @@ public static LogManager getLogManager()\n     {\n       /* FIXME: Is it ok to ignore exceptions here? */\n     }\n-  };\n+  }\n   \n \n   private static LogManager makeLogManager()"}, {"sha": "2de6c73c8b0a00efd2833c3c263987481183e638", "filename": "libjava/java/util/logging/XMLFormatter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Futil%2Flogging%2FXMLFormatter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe4ef89218e5ff3352a465107b19794dca91d9d/libjava%2Fjava%2Futil%2Flogging%2FXMLFormatter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FXMLFormatter.java?ref=bbe4ef89218e5ff3352a465107b19794dca91d9d", "patch": "@@ -195,7 +195,7 @@ public String format(LogRecord record)\n     long            millis = record.getMillis();\n     Object[]        params = record.getParameters();\n     ResourceBundle  bundle = record.getResourceBundle();\n-    String          key, message;\n+    String          message;\n     \n     buf.append(\"<record>\");\n     buf.append(lineSep);"}]}