{"sha": "2a67ff5e9e1a909a2c4a056920abdfadbbe293dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2N2ZmNWU5ZTFhOTA5YTJjNGEwNTY5MjBhYmRmYWRiYmUyOTNkZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-12-05T14:06:46Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-12-05T14:06:46Z"}, "message": "dojump.c (do_jump): If the expression being compared against zero...\n\n\n\t* dojump.c (do_jump): If the expression being compared against\n\tzero, is the subreg of a promoted variable, perform the comparison\n\tin the promoted mode.\n\t* simplify-rtx.c (simplify_unary_operation): Optimize sign and\n\tzero-extensions of subregs of promoted variables where the\n\textension is identical to that used to promote the variable.\n\nFrom-SVN: r74332", "tree": {"sha": "7b626e91f813aeaea1a249d43406dd0cb5930b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b626e91f813aeaea1a249d43406dd0cb5930b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd/comments", "author": null, "committer": null, "parents": [{"sha": "64ed86c71833cb21c29cee783cde01c5e1a3d2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ed86c71833cb21c29cee783cde01c5e1a3d2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ed86c71833cb21c29cee783cde01c5e1a3d2f4"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "66ba57984c96c237450f34be3139b114c53957df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a67ff5e9e1a909a2c4a056920abdfadbbe293dd", "patch": "@@ -1,3 +1,12 @@\n+2003-12-05  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* dojump.c (do_jump): If the expression being compared against\n+\tzero, is the subreg of a promoted variable, perform the comparison\n+\tin the promoted mode.\n+\t* simplify-rtx.c (simplify_unary_operation): Optimize sign and\n+\tzero-extensions of subregs of promoted variables where the\n+\textension is identical to that used to promote the variable.\n+\n 2003-12-05  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/13256"}, {"sha": "8887c498eca9d49cc88caba731e03d2673b926d1", "filename": "gcc/dojump.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=2a67ff5e9e1a909a2c4a056920abdfadbbe293dd", "patch": "@@ -584,7 +584,14 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n \t{\n \t  /* The RTL optimizers prefer comparisons against pseudos.  */\n \t  if (GET_CODE (temp) == SUBREG)\n-\t    temp = copy_to_reg (temp);\n+\t    {\n+\t      /* Compare promoted variables in their promoted mode.  */\n+\t      if (SUBREG_PROMOTED_VAR_P (temp)\n+\t\t  && GET_CODE (XEXP (temp, 0)) == REG)\n+\t\ttemp = XEXP (temp, 0);\n+\t      else\n+\t\ttemp = copy_to_reg (temp);\n+\t    }\n \t  do_compare_rtx_and_jump (temp, CONST0_RTX (GET_MODE (temp)),\n \t\t\t\t   NE, TREE_UNSIGNED (TREE_TYPE (exp)),\n \t\t\t\t   GET_MODE (temp), NULL_RTX,"}, {"sha": "ffa87cd785fc368b155f2409e8b0cc49aec281e0", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67ff5e9e1a909a2c4a056920abdfadbbe293dd/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=2a67ff5e9e1a909a2c4a056920abdfadbbe293dd", "patch": "@@ -1031,6 +1031,15 @@ simplify_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t      && GET_CODE (XEXP (XEXP (op, 0), 1)) == LABEL_REF)\n \t    return XEXP (op, 0);\n \n+\t  /* Check for a sign extension of a subreg of a promoted\n+\t     variable, where the promotion is sign-extended, and the\n+\t     target mode is the same as the variable's promotion.  */\n+\t  if (GET_CODE (op) == SUBREG\n+\t      && SUBREG_PROMOTED_VAR_P (op)\n+\t      && ! SUBREG_PROMOTED_UNSIGNED_P (op)\n+\t      && GET_MODE (XEXP (op, 0)) == mode)\n+\t    return XEXP (op, 0);\n+\n #if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n \t  if (! POINTERS_EXTEND_UNSIGNED\n \t      && mode == Pmode && GET_MODE (op) == ptr_mode\n@@ -1043,8 +1052,17 @@ simplify_unary_operation (enum rtx_code code, enum machine_mode mode,\n #endif\n \t  break;\n \n-#if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n \tcase ZERO_EXTEND:\n+\t  /* Check for a zero extension of a subreg of a promoted\n+\t     variable, where the promotion is zero-extended, and the\n+\t     target mode is the same as the variable's promotion.  */\n+\t  if (GET_CODE (op) == SUBREG\n+\t      && SUBREG_PROMOTED_VAR_P (op)\n+\t      && SUBREG_PROMOTED_UNSIGNED_P (op)\n+\t      && GET_MODE (XEXP (op, 0)) == mode)\n+\t    return XEXP (op, 0);\n+\n+#if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n \t  if (POINTERS_EXTEND_UNSIGNED > 0\n \t      && mode == Pmode && GET_MODE (op) == ptr_mode\n \t      && (CONSTANT_P (op)\n@@ -1053,8 +1071,8 @@ simplify_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t\t      && REG_POINTER (SUBREG_REG (op))\n \t\t      && GET_MODE (SUBREG_REG (op)) == Pmode)))\n \t    return convert_memory_address (Pmode, op);\n-\t  break;\n #endif\n+\t  break;\n \n \tdefault:\n \t  break;"}]}