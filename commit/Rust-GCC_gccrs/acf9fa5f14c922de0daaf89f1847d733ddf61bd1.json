{"sha": "acf9fa5f14c922de0daaf89f1847d733ddf61bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmOWZhNWYxNGM5MjJkZTBkYWFmODlmMTg0N2Q3MzNkZGY2MWJkMQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-01-25T23:57:30Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-01-25T23:57:30Z"}, "message": "reload.c (maybe_memory_address_p): New function.\n\ngcc/\n        * reload.c (maybe_memory_address_p): New function.\n        (find_reloads_address): Use it instead of memory_address_p.\n\ngcc/testsuite/\n\t* gcc.dg/20030123-1.c: New test.\n\nFrom-SVN: r61805", "tree": {"sha": "34763eb4183577d75b1cefd91523c1a402fc1ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34763eb4183577d75b1cefd91523c1a402fc1ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf9fa5f14c922de0daaf89f1847d733ddf61bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf9fa5f14c922de0daaf89f1847d733ddf61bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf9fa5f14c922de0daaf89f1847d733ddf61bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/comments", "author": null, "committer": null, "parents": [{"sha": "5a09edba1f72e8f2781127c38f45c9b36dea7509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a09edba1f72e8f2781127c38f45c9b36dea7509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a09edba1f72e8f2781127c38f45c9b36dea7509"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "a308d0f14dcc99fd177b6b0ba8cc809d6c860d40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acf9fa5f14c922de0daaf89f1847d733ddf61bd1", "patch": "@@ -1,3 +1,8 @@\n+2003-01-25  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+        * reload.c (maybe_memory_address_p): New function.\n+        (find_reloads_address): Use it instead of memory_address_p.\n+\n 2003-01-25  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* final.c (shorten_branches): Align the address of code label"}, {"sha": "a16012c651fa1560add4fdd6d409932a4cb15382", "filename": "gcc/reload.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=acf9fa5f14c922de0daaf89f1847d733ddf61bd1", "patch": "@@ -260,6 +260,7 @@ static int alternative_allows_memconst PARAMS ((const char *, int));\n static rtx find_reloads_toplev\tPARAMS ((rtx, int, enum reload_type, int,\n \t\t\t\t\t int, rtx, int *));\n static rtx make_memloc\t\tPARAMS ((rtx, int));\n+static int maybe_memory_address_p PARAMS ((enum machine_mode, rtx, rtx *));\n static int find_reloads_address\tPARAMS ((enum machine_mode, rtx *, rtx, rtx *,\n \t\t\t\t       int, enum reload_type, int, rtx));\n static rtx subst_reg_equivs\tPARAMS ((rtx, rtx));\n@@ -4587,6 +4588,27 @@ make_memloc (ad, regno)\n   return tem;\n }\n \n+/* Returns true if AD could be turned into a valid memory reference\n+   to mode MODE by reloading the part pointed to by PART into a \n+   register.  */\n+\n+static int\n+maybe_memory_address_p (mode, ad, part)\n+     enum machine_mode mode;\n+     rtx ad;\n+     rtx *part;\n+{\n+  int retv;\n+  rtx tem = *part;\n+  rtx reg = gen_rtx_REG (GET_MODE (tem), max_reg_num ());\n+\n+  *part = reg;\n+  retv = memory_address_p (mode, ad);\n+  *part = tem;\n+\n+  return retv;\n+}\n+\n /* Record all reloads needed for handling memory address AD\n    which appears in *LOC in a memory reference to mode MODE\n    which itself is found in location  *MEMREFLOC.\n@@ -4886,7 +4908,7 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels, insn)\n \t       || XEXP (XEXP (ad, 0), 0) == arg_pointer_rtx\n #endif\n \t       || XEXP (XEXP (ad, 0), 0) == stack_pointer_rtx)\n-\t   && ! memory_address_p (mode, ad))\n+\t   && ! maybe_memory_address_p (mode, ad, &XEXP (XEXP (ad, 0), 1)))\n     {\n       *loc = ad = gen_rtx_PLUS (GET_MODE (ad),\n \t\t\t\tplus_constant (XEXP (XEXP (ad, 0), 0),\n@@ -4911,7 +4933,7 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels, insn)\n \t       || XEXP (XEXP (ad, 0), 1) == arg_pointer_rtx\n #endif\n \t       || XEXP (XEXP (ad, 0), 1) == stack_pointer_rtx)\n-\t   && ! memory_address_p (mode, ad))\n+\t   && ! maybe_memory_address_p (mode, ad, &XEXP (XEXP (ad, 0), 0)))\n     {\n       *loc = ad = gen_rtx_PLUS (GET_MODE (ad),\n \t\t\t\tXEXP (XEXP (ad, 0), 0),"}, {"sha": "0f62daf09a31d297106ff25b38d43f400f69d968", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acf9fa5f14c922de0daaf89f1847d733ddf61bd1", "patch": "@@ -1,3 +1,7 @@\n+2003-01-25  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* gcc.dg/20030123-1.c: New test.\n+\n Sat Jan 25 21:06:49 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \tPR opt/8492"}, {"sha": "1f5858808c42f1b7c83a65b59185e0f2b44ec4fc", "filename": "gcc/testsuite/gcc.dg/20030123-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/gcc%2Ftestsuite%2Fgcc.dg%2F20030123-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf9fa5f14c922de0daaf89f1847d733ddf61bd1/gcc%2Ftestsuite%2Fgcc.dg%2F20030123-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030123-1.c?ref=acf9fa5f14c922de0daaf89f1847d733ddf61bd1", "patch": "@@ -0,0 +1,17 @@\n+/* This used to ICE due to a reload bug on s390*.  */\n+\n+/* { dg-do compile { target s390*-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+void func (char *p);\n+\n+void test (void)\n+{\n+   char *p = alloca (4096);\n+   long idx;\n+\n+   asm (\"\" : \"=r\" (idx) : : \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\");\n+\n+   func (p + idx + 1);\n+}\n+"}]}