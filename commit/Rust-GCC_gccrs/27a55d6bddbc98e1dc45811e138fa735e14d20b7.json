{"sha": "27a55d6bddbc98e1dc45811e138fa735e14d20b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhNTVkNmJkZGJjOThlMWRjNDU4MTFlMTM4ZmE3MzVlMTRkMjBiNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-16T20:57:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-16T20:57:31Z"}, "message": "Greatly simplify the run-time trampoline code:\n\n(TRAMPOLINE_TEMPLATE, TRANSFER_FROM_TRAMPOLINE): Delete define.\n(TRAMPOLINE_SIZE, INITIALIZE_TRAMPOLINE): Changed.\n(TRAMPOLINE_ALIGN): No point aligning to cache line.\n(FINISH_INIT_TRAMPOLINE): New define.\n\nFrom-SVN: r11824", "tree": {"sha": "bb23846ce6631455d1093c4e94cb021baededdc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb23846ce6631455d1093c4e94cb021baededdc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a55d6bddbc98e1dc45811e138fa735e14d20b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a55d6bddbc98e1dc45811e138fa735e14d20b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a55d6bddbc98e1dc45811e138fa735e14d20b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a55d6bddbc98e1dc45811e138fa735e14d20b7/comments", "author": null, "committer": null, "parents": [{"sha": "f0e969bd285aa79043bacfc80550d3a74abbb863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e969bd285aa79043bacfc80550d3a74abbb863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e969bd285aa79043bacfc80550d3a74abbb863"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "de8e250b194a2ef7d9e9bba3be4fb0e954e2ae87", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a55d6bddbc98e1dc45811e138fa735e14d20b7/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a55d6bddbc98e1dc45811e138fa735e14d20b7/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=27a55d6bddbc98e1dc45811e138fa735e14d20b7", "patch": "@@ -1012,42 +1012,49 @@ while(0)\n    of a trampoline, leaving space for the variable parts.  */\n \n /* On the 68k, the trampoline looks like this:\n-     movl pc@(8),a0\n-     movl pc@(8),sp@-\n-     rts\n-     .long STATIC\n-     .long FUNCTION\n-The use of pc relative addressing mode ensures that the constants are\n-accessed through the data cache.  */\n-\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x207a));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x2f3a));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4e75));\t\\\n-  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n-}\n+     movl #STATIC,a0\n+     jmp  FUNCTION\n+\n+   WARNING: Targets that may run on 68040+ cpus must arrange for\n+   the instruction cache to be flushed.  Previous incarnations of\n+   the m68k trampoline code attempted to get around this by either\n+   using an out-of-line transfer function or pc-relative data, but\n+   the fact remains that the code to jump to the transfer function\n+   or the code to load the pc-relative data needs to be flushed\n+   just as much as the \"variable\" portion of the trampoline.  \n+   Recognizing that a cache flush is going to be required anyway,\n+   dispense with such notions and build a smaller trampoline.  */\n+\n+/* Since more instructions are required to move a template into\n+   place than to create it on the spot, don't use a template.  */\n \n /* Length in units of the trampoline for entering a nested function.  */\n \n-#define TRAMPOLINE_SIZE 18\n+#define TRAMPOLINE_SIZE 12\n+\n+/* Alignment required for a trampoline in bits.  */\n \n-/* Alignment required (in *bits*) for a trampoline.  16 is used to find the\n-   beginning of a line in the instruction cache.  */\n+#define TRAMPOLINE_ALIGNMENT 16\n \n-#define TRAMPOLINE_ALIGNMENT (16 * BITS_PER_UNIT)\n+/* Targets redefine this to invoke code to either flush the cache,\n+   or enable stack execution (or both).  */\n+\n+#ifndef FINALIZE_TRAMPOLINE\n+#define FINALIZE_TRAMPOLINE(TRAMP)\n+#endif\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 10)), CXT); \\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 14)), FNADDR); \\\n+  emit_move_insn (gen_rtx (MEM, HImode, TRAMP), GEN_INT(0x207C));\t\\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 2)), CXT); \\\n+  emit_move_insn (gen_rtx (MEM, HImode, plus_constant (TRAMP, 6)),\t\\\n+\t\t  GEN_INT(0x4EF9));\t\t\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 8)), FNADDR); \\\n+  FINALIZE_TRAMPOLINE(TRAMP);\t\t\t\t\t\t\\\n }\n \n /* This is the library routine that is used"}]}