{"sha": "e3528ce197f8886869f95e8a8f901861a319851c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1MjhjZTE5N2Y4ODg2ODY5Zjk1ZThhOGY5MDE4NjFhMzE5ODUxYw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-02T17:54:57Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-02T17:54:57Z"}, "message": "c++: unqualified member template in constraint [PR101247]\n\nHere any_template_parm_r is failing to mark the template parameters\nimplicitly used by the unqualified use of 'd' inside the constraint\nbecause the code to do so assumes each level of a template parameter\nlist points to the corresponding primary template, but here the\nparameter level for A in the out-of-line definition of A::B does not\n(nor do the parameter levels for A and C in the definition of A::C),\nwhich causes us to overlook the sharing.\n\nSo it seems we can't in general depend on the TREE_TYPE of a template\nparameter level being non-empty here.  This patch partially fixes this\nby rewriting the relevant part of any_template_parm_r to not depend on\nthe TREE_TYPE of outer levels.  We still depend on the innermost level\nto point to the innermost primary template, so we still crash on the\ncommented out line in the below testcase.\n\n\tPR c++/101247\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (any_template_parm_r) <case TEMPLATE_DECL>: Rewrite to\n\tuse common_enclosing_class and to not depend on the TREE_TYPE\n\tof outer levels pointing to the corresponding primary template.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-memtmpl4.C: New test.", "tree": {"sha": "052326ad1c396e980b2467d1c88408ee9904ff98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/052326ad1c396e980b2467d1c88408ee9904ff98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3528ce197f8886869f95e8a8f901861a319851c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3528ce197f8886869f95e8a8f901861a319851c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3528ce197f8886869f95e8a8f901861a319851c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3528ce197f8886869f95e8a8f901861a319851c/comments", "author": null, "committer": null, "parents": [{"sha": "42a9e4e1381ba14d8ef21b331494945c2f51e6be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a9e4e1381ba14d8ef21b331494945c2f51e6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a9e4e1381ba14d8ef21b331494945c2f51e6be"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "7e56ccfc45fceb43c517020e8a3ef6ccf85cfe7b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3528ce197f8886869f95e8a8f901861a319851c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3528ce197f8886869f95e8a8f901861a319851c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e3528ce197f8886869f95e8a8f901861a319851c", "patch": "@@ -10731,24 +10731,11 @@ any_template_parm_r (tree t, void *data)\n       {\n \t/* If T is a member template that shares template parameters with\n \t   ctx_parms, we need to mark all those parameters for mapping.  */\n-\ttree dparms = DECL_TEMPLATE_PARMS (t);\n-\ttree cparms = ftpi->ctx_parms;\n-\twhile (TMPL_PARMS_DEPTH (dparms) > ftpi->max_depth)\n-\t  dparms = TREE_CHAIN (dparms);\n-\twhile (TMPL_PARMS_DEPTH (cparms) > TMPL_PARMS_DEPTH (dparms))\n-\t  cparms = TREE_CHAIN (cparms);\n-\twhile (dparms\n-\t       && (TREE_TYPE (TREE_VALUE (dparms))\n-\t\t   != TREE_TYPE (TREE_VALUE (cparms))))\n-\t  dparms = TREE_CHAIN (dparms),\n-\t    cparms = TREE_CHAIN (cparms);\n-\tif (dparms)\n-\t  {\n-\t    int ddepth = TMPL_PARMS_DEPTH (dparms);\n-\t    tree dargs = TI_ARGS (get_template_info (DECL_TEMPLATE_RESULT (t)));\n-\t    for (int i = 0; i < ddepth; ++i)\n-\t      WALK_SUBTREE (TMPL_ARGS_LEVEL (dargs, i+1));\n-\t  }\n+\tif (tree ctmpl = TREE_TYPE (INNERMOST_TEMPLATE_PARMS (ftpi->ctx_parms)))\n+\t  if (tree com = common_enclosing_class (DECL_CONTEXT (t),\n+\t\t\t\t\t\t DECL_CONTEXT (ctmpl)))\n+\t    if (tree ti = CLASSTYPE_TEMPLATE_INFO (com))\n+\t      WALK_SUBTREE (TI_ARGS (ti));\n       }\n       break;\n "}, {"sha": "625149e5025e6782742db8c1e74d6f49e4fb9edc", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-memtmpl4.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3528ce197f8886869f95e8a8f901861a319851c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memtmpl4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3528ce197f8886869f95e8a8f901861a319851c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memtmpl4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memtmpl4.C?ref=e3528ce197f8886869f95e8a8f901861a319851c", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/101247\n+// { dg-do compile { target concepts } }\n+// A variant of concepts-memtmpl3.C where f is defined outside A's definition.\n+\n+template <typename> struct A {\n+  template <typename c> static constexpr bool d = true;\n+  struct B;\n+  template <typename> struct C;\n+};\n+\n+template <typename a>\n+struct A<a>::B {\n+  template <typename c> static void f(c) requires d<c>;\n+};\n+\n+template <typename a>\n+template <typename b>\n+struct A<a>::C {\n+  template <typename c> static void f(c) requires d<c>;\n+  static void g() requires d<b>;\n+};\n+\n+int main()\n+{\n+  A<void>::B::f(0);\n+  A<void>::C<int>::f(0);\n+  // A<void>::C<int>::g();\n+}"}]}