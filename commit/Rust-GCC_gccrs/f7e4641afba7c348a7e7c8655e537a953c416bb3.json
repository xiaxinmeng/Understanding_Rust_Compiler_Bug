{"sha": "f7e4641afba7c348a7e7c8655e537a953c416bb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlNDY0MWFmYmE3YzM0OGE3ZTdjODY1NWU1MzdhOTUzYzQxNmJiMw==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-04-17T15:54:12Z"}, "committer": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-04-23T15:14:28Z"}, "message": "aarch64: ensure bti c is emitted at function start [PR94697]\n\nThe bti pass currently first emits bti c at function start\nif there is no paciasp (which also acts as indirect call\nlanding pad), then bti j is emitted at jump labels, however\nif there is a label right before paciasp then the function\nstart can end up like\n\n  foo:\n  label:\n    bti j\n    paciasp\n    ...\n\nThis patch is a minimal fix that just moves the bti c handling\nafter the bti j handling so we end up with\n\n  foo:\n    bti c\n  label:\n    bti j\n    paciasp\n    ...\n\nThis could be improved by emitting bti jc in this case, or by\ndetecting that the label is not in fact an indirect jump target\nand then this situation would be much less common.\n\nNeeds to be backported to gcc-9 branch.\n\ngcc/ChangeLog:\n\n\tPR target/94697\n\t* config/aarch64/aarch64-bti-insert.c (rest_of_insert_bti): Swap\n\tbti c and bti j handling.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/94697\n\t* gcc.target/aarch64/pr94697.c: New test.", "tree": {"sha": "09c18d44d073ab39f6ad54c1cf417bd525aaf1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09c18d44d073ab39f6ad54c1cf417bd525aaf1fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7e4641afba7c348a7e7c8655e537a953c416bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4641afba7c348a7e7c8655e537a953c416bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e4641afba7c348a7e7c8655e537a953c416bb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4641afba7c348a7e7c8655e537a953c416bb3/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857d1fa3f0a04569382bab12829e5bfd3725ecbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857d1fa3f0a04569382bab12829e5bfd3725ecbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/857d1fa3f0a04569382bab12829e5bfd3725ecbf"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "c806e5e8181f87083b338b98589af06219a6733b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4641afba7c348a7e7c8655e537a953c416bb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4641afba7c348a7e7c8655e537a953c416bb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7e4641afba7c348a7e7c8655e537a953c416bb3", "patch": "@@ -1,3 +1,9 @@\n+2020-04-23  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/94697\n+\t* config/aarch64/aarch64-bti-insert.c (rest_of_insert_bti): Swap\n+\tbti c and bti j handling.\n+\n 2020-04-23  Andrew Stubbs  <ams@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "aa091c308f617a9eeaff465d6052243dce737262", "filename": "gcc/config/aarch64/aarch64-bti-insert.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4641afba7c348a7e7c8655e537a953c416bb3/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4641afba7c348a7e7c8655e537a953c416bb3/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c?ref=f7e4641afba7c348a7e7c8655e537a953c416bb3", "patch": "@@ -132,22 +132,6 @@ rest_of_insert_bti (void)\n   rtx_insn *insn;\n   basic_block bb;\n \n-  /* Since a Branch Target Exception can only be triggered by an indirect call,\n-     we exempt function that are only called directly.  We also exempt\n-     functions that are already protected by Return Address Signing (PACIASP/\n-     PACIBSP).  For all other cases insert a BTI C at the beginning of the\n-     function.  */\n-  if (!cgraph_node::get (cfun->decl)->only_called_directly_p ())\n-    {\n-      bb = ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb;\n-      insn = BB_HEAD (bb);\n-      if (!aarch64_pac_insn_p (get_first_nonnote_insn ()))\n-\t{\n-\t  bti_insn = gen_bti_c ();\n-\t  emit_insn_before (bti_insn, insn);\n-\t}\n-    }\n-\n   bb = 0;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n@@ -203,6 +187,22 @@ rest_of_insert_bti (void)\n \t}\n     }\n \n+  /* Since a Branch Target Exception can only be triggered by an indirect call,\n+     we exempt function that are only called directly.  We also exempt\n+     functions that are already protected by Return Address Signing (PACIASP/\n+     PACIBSP).  For all other cases insert a BTI C at the beginning of the\n+     function.  */\n+  if (!cgraph_node::get (cfun->decl)->only_called_directly_p ())\n+    {\n+      bb = ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb;\n+      insn = BB_HEAD (bb);\n+      if (!aarch64_pac_insn_p (get_first_nonnote_insn ()))\n+\t{\n+\t  bti_insn = gen_bti_c ();\n+\t  emit_insn_before (bti_insn, insn);\n+\t}\n+    }\n+\n   timevar_pop (TV_MACH_DEP);\n   return 0;\n }"}, {"sha": "15e7d9e4893ac7153d3192e7ec3bd66a0a8acfcc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4641afba7c348a7e7c8655e537a953c416bb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4641afba7c348a7e7c8655e537a953c416bb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7e4641afba7c348a7e7c8655e537a953c416bb3", "patch": "@@ -1,3 +1,8 @@\n+2020-04-23  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/94697\n+\t* gcc.target/aarch64/pr94697.c: New test.\n+\n 2020-04-23  Felix Yang  <felix.yang@huawei.com>\n \n \tPR target/94678"}, {"sha": "e6069d22eced5499a0ab6503c0a52ab89d8cb9c1", "filename": "gcc/testsuite/gcc.target/aarch64/pr94697.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4641afba7c348a7e7c8655e537a953c416bb3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94697.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4641afba7c348a7e7c8655e537a953c416bb3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94697.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94697.c?ref=f7e4641afba7c348a7e7c8655e537a953c416bb3", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbranch-protection=standard\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+void bar (int *);\n+void *addr;\n+\n+/*\n+** foo:\n+**\thint\t(25|34|38) // (paciasp|bti c|bti jc)\n+**\t...\n+*/\n+int foo (int x)\n+{\n+label:\n+  addr = &&label;\n+  bar (&x);\n+  return x;\n+}"}]}