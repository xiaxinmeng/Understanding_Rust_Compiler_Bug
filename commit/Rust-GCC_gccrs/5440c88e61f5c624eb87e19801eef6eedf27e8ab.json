{"sha": "5440c88e61f5c624eb87e19801eef6eedf27e8ab", "node_id": "C_kwDOANBUbNoAKDU0NDBjODhlNjFmNWM2MjRlYjg3ZTE5ODAxZWVmNmVlZGYyN2U4YWI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-19T22:01:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-22T22:42:53Z"}, "message": "c++: improved return expression location\n\nStripping the location wrapper from retval meant we didn't have the\nnecessary location information for any conversion diagnostics.  We only need\nthe stripping for the named return value optimization, let's use the\nunstripped expression for everything else.\n\ngcc/cp/ChangeLog:\n\n\t* typeck.c (check_return_expr): Only strip location wrapper during\n\tNRV handling.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/pr65327.C: Adjust location.\n\t* g++.dg/cpp23/constexpr-nonlit4.C: Likewise.\n\t* g++.dg/cpp23/constexpr-nonlit5.C: Likewise.\n\t* g++.dg/cpp2a/constexpr-init1.C: Likewise.", "tree": {"sha": "c5ede3ce9a981ca2934d5a24df4b7102c8ef5e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5ede3ce9a981ca2934d5a24df4b7102c8ef5e42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5440c88e61f5c624eb87e19801eef6eedf27e8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5440c88e61f5c624eb87e19801eef6eedf27e8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5440c88e61f5c624eb87e19801eef6eedf27e8ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5440c88e61f5c624eb87e19801eef6eedf27e8ab/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e0d593707ae44dec0bdf2bcdc4f539050b46db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e0d593707ae44dec0bdf2bcdc4f539050b46db"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "63a0eaef2da68c51ed66e8949b9b2f01fda7b832", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5440c88e61f5c624eb87e19801eef6eedf27e8ab", "patch": "@@ -10545,19 +10545,20 @@ check_return_expr (tree retval, bool *no_warning)\n      this restriction, anyway.  (jason 2000-11-19)\n \n      See finish_function and finalize_nrv for the rest of this optimization.  */\n+  tree bare_retval = NULL_TREE;\n   if (retval)\n     {\n       retval = maybe_undo_parenthesized_ref (retval);\n-      STRIP_ANY_LOCATION_WRAPPER (retval);\n+      bare_retval = tree_strip_any_location_wrapper (retval);\n     }\n \n-  bool named_return_value_okay_p = can_do_nrvo_p (retval, functype);\n+  bool named_return_value_okay_p = can_do_nrvo_p (bare_retval, functype);\n   if (fn_returns_value_p && flag_elide_constructors)\n     {\n       if (named_return_value_okay_p\n           && (current_function_return_value == NULL_TREE\n-              || current_function_return_value == retval))\n-\tcurrent_function_return_value = retval;\n+\t      || current_function_return_value == bare_retval))\n+\tcurrent_function_return_value = bare_retval;\n       else\n \tcurrent_function_return_value = error_mark_node;\n     }\n@@ -10571,7 +10572,7 @@ check_return_expr (tree retval, bool *no_warning)\n     maybe_warn_pessimizing_move (retval, functype);\n \n   /* Do any required conversions.  */\n-  if (retval == result || DECL_CONSTRUCTOR_P (current_function_decl))\n+  if (bare_retval == result || DECL_CONSTRUCTOR_P (current_function_decl))\n     /* No conversions are required.  */\n     ;\n   else"}, {"sha": "e8149953ffd4402158d5b18674b5949bd8bc4c09", "filename": "gcc/testsuite/g++.dg/cpp0x/pr65327.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65327.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65327.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65327.C?ref=5440c88e61f5c624eb87e19801eef6eedf27e8ab", "patch": "@@ -14,5 +14,5 @@ foo ()\n constexpr volatile int // { dg-warning \"deprecated\" \"\" { target c++2a } }\n bar ()\n {\n-  return i;\n-} // { dg-error \"lvalue-to-rvalue conversion of a volatile lvalue\" }\n+  return i;  // { dg-error \"lvalue-to-rvalue conversion of a volatile lvalue\" }\n+}"}, {"sha": "bdc97a9bc79213b0776ffa8262ed0d81c69a605f", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit4.C?ref=5440c88e61f5c624eb87e19801eef6eedf27e8ab", "patch": "@@ -34,7 +34,7 @@ baz (int x)\n     {\n       static const int v = qux ();\t// { dg-message \"'v' was not initialized with a constant expression\" }\n     case 12:\n-      return v;\n+      return v;\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n     }\n   return 0;\n }\n@@ -46,12 +46,12 @@ corge (int x)\n     {\n       const thread_local int v = qux ();\t// { dg-message \"'v' was not initialized with a constant expression\" }\n     case 12:\n-      return v;\n+      return v; // { dg-error \"the value of 'v' is not usable in a constant expression\" }\n     }\n   return 0;\n }\n \n constexpr int a = foo (12);\n constexpr int b = bar (12);\n-constexpr int c = baz (12);\t\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n-constexpr int d = corge (12);\t\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n+constexpr int c = baz (12);\n+constexpr int d = corge (12);"}, {"sha": "86d5dba77a39e0ec067dfbdb3ff1473f042a9c85", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit5.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit5.C?ref=5440c88e61f5c624eb87e19801eef6eedf27e8ab", "patch": "@@ -34,7 +34,7 @@ baz (int x)\n     {\n       static int v = 6;\t// { dg-message \"int v' is not const\" }\n     case 12:\n-      return v;\n+      return v;\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n     }\n   return 0;\n }\n@@ -46,12 +46,12 @@ corge (int x)\n     {\n       thread_local int v = 6;\t// { dg-message \"int v' is not const\" }\n     case 12:\n-      return v;\n+      return v;\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n     }\n   return 0;\n }\n \n constexpr int a = foo (12);\n constexpr int b = bar (12);\n-constexpr int c = baz (12);\t\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n-constexpr int d = corge (12);\t\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n+constexpr int c = baz (12);\n+constexpr int d = corge (12);"}, {"sha": "e56ecfed48adb93e260e8323235949935eb6c82a", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5440c88e61f5c624eb87e19801eef6eedf27e8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C?ref=5440c88e61f5c624eb87e19801eef6eedf27e8ab", "patch": "@@ -73,11 +73,11 @@ fn7 (bool b)\n   int a; // { dg-message \".int a. is not const\" }\n   if (b)\n     a = 42;\n-  return a;\n+  return a;\t\t       // { dg-error \"the value of .a. is not usable\" }\n }\n \n static_assert (fn7 (true) == 42);\n-static_assert (fn7 (false) == 42); // { dg-error \"non-constant condition|the value of .a. is not usable\" }\n+static_assert (fn7 (false) == 42); // { dg-error \"non-constant condition\" }\n // { dg-message \"in .constexpr. expansion of\" \"\" { target *-*-* } .-1 }\n \n constexpr int"}]}