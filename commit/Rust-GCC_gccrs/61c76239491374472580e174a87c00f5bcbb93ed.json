{"sha": "61c76239491374472580e174a87c00f5bcbb93ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjNzYyMzk0OTEzNzQ0NzI1ODBlMTc0YTg3YzAwZjViY2JiOTNlZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-11-22T16:41:29Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-11-22T16:41:29Z"}, "message": "spe.md (SPE64): New mode macro.\n\n\t* config/rs6000/spe.md (SPE64): New mode macro.\n\t(mov_sidf_e500_subreg0): Change to mov_si<mode>_e500_subreg0.  Add\n\tmemory load.\n\t(mov_si<mode>_e500_subreg0_2): New.\n\t(mov_sidf_e500_subreg4): Change to mov_si<mode>_e500_subreg4.  Add\n\tmemory load.\n\t(mov_si<mode>_e500_subreg4_2): New.\n\t* config/rs6000/predicates.md (input_operand): Do not allow\n\tinvalid E500 subregs.\n\t(rs6000_nonimmediate_operand): Check for invalid E500 subregs also\n\tif TARGET_SPE.\n\t* config/rs6000/rs6000.c (invalid_e500_subreg): Check for subregs\n\tinvolving DFmode if TARGET_E500_DOUBLE.  Check for subregs\n\tinvolving vector modes if TARGET_SPE.\n\nFrom-SVN: r119094", "tree": {"sha": "91ff68afec415ea5b2e524162f6383539ae2a334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ff68afec415ea5b2e524162f6383539ae2a334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61c76239491374472580e174a87c00f5bcbb93ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c76239491374472580e174a87c00f5bcbb93ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c76239491374472580e174a87c00f5bcbb93ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c76239491374472580e174a87c00f5bcbb93ed/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c21975d479cb69bbf9bafcc4dbf29e4138949c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c21975d479cb69bbf9bafcc4dbf29e4138949c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c21975d479cb69bbf9bafcc4dbf29e4138949c5"}], "stats": {"total": 101, "additions": 80, "deletions": 21}, "files": [{"sha": "31edafe97a5629b186e156f3380641accfe75efa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c76239491374472580e174a87c00f5bcbb93ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c76239491374472580e174a87c00f5bcbb93ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61c76239491374472580e174a87c00f5bcbb93ed", "patch": "@@ -1,3 +1,20 @@\n+2006-11-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/spe.md (SPE64): New mode macro.\n+\t(mov_sidf_e500_subreg0): Change to mov_si<mode>_e500_subreg0.  Add\n+\tmemory load.\n+\t(mov_si<mode>_e500_subreg0_2): New.\n+\t(mov_sidf_e500_subreg4): Change to mov_si<mode>_e500_subreg4.  Add\n+\tmemory load.\n+\t(mov_si<mode>_e500_subreg4_2): New.\n+\t* config/rs6000/predicates.md (input_operand): Do not allow\n+\tinvalid E500 subregs.\n+\t(rs6000_nonimmediate_operand): Check for invalid E500 subregs also\n+\tif TARGET_SPE.\n+\t* config/rs6000/rs6000.c (invalid_e500_subreg): Check for subregs\n+\tinvolving DFmode if TARGET_E500_DOUBLE.  Check for subregs\n+\tinvolving vector modes if TARGET_SPE.\n+\n 2006-11-22  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tRevert"}, {"sha": "2ff0ba77b857d5d6c0c49c59e4eff2a6e850eae5", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c76239491374472580e174a87c00f5bcbb93ed/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c76239491374472580e174a87c00f5bcbb93ed/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=61c76239491374472580e174a87c00f5bcbb93ed", "patch": "@@ -722,6 +722,12 @@\n       && easy_vector_constant (op, mode))\n     return 1;\n \n+  /* Do not allow invalid E500 subregs.  */\n+  if ((TARGET_E500_DOUBLE || TARGET_SPE)\n+      && GET_CODE (op) == SUBREG\n+      && invalid_e500_subreg (op, mode))\n+    return 0;\n+\n   /* For floating-point or multi-word mode, the only remaining valid type\n      is a register.  */\n   if (SCALAR_FLOAT_MODE_P (mode)\n@@ -756,7 +762,7 @@\n (define_predicate \"rs6000_nonimmediate_operand\"\n   (match_code \"reg,subreg,mem\")\n {\n-  if (TARGET_E500_DOUBLE\n+  if ((TARGET_E500_DOUBLE || TARGET_SPE)\n       && GET_CODE (op) == SUBREG\n       && invalid_e500_subreg (op, mode))\n     return 0;"}, {"sha": "f8e58fb43c008dff8e882e817707fd022e3a7276", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c76239491374472580e174a87c00f5bcbb93ed/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c76239491374472580e174a87c00f5bcbb93ed/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=61c76239491374472580e174a87c00f5bcbb93ed", "patch": "@@ -2713,18 +2713,29 @@ build_mask64_2_operands (rtx in, rtx *out)\n bool\n invalid_e500_subreg (rtx op, enum machine_mode mode)\n {\n-  /* Reject (subreg:SI (reg:DF)).  */\n-  if (GET_CODE (op) == SUBREG\n-      && mode == SImode\n-      && REG_P (SUBREG_REG (op))\n-      && GET_MODE (SUBREG_REG (op)) == DFmode)\n-    return true;\n+  if (TARGET_E500_DOUBLE)\n+    {\n+      /* Reject (subreg:SI (reg:DF)).  */\n+      if (GET_CODE (op) == SUBREG\n+\t  && mode == SImode\n+\t  && REG_P (SUBREG_REG (op))\n+\t  && GET_MODE (SUBREG_REG (op)) == DFmode)\n+\treturn true;\n \n-  /* Reject (subreg:DF (reg:DI)).  */\n-  if (GET_CODE (op) == SUBREG\n-      && mode == DFmode\n+      /* Reject (subreg:DF (reg:DI)).  */\n+      if (GET_CODE (op) == SUBREG\n+\t  && mode == DFmode\n+\t  && REG_P (SUBREG_REG (op))\n+\t  && GET_MODE (SUBREG_REG (op)) == DImode)\n+\treturn true;\n+    }\n+\n+  if (TARGET_SPE\n+      && GET_CODE (op) == SUBREG\n+      && mode == SImode\n       && REG_P (SUBREG_REG (op))\n-      && GET_MODE (SUBREG_REG (op)) == DImode)\n+      && SPE_VECTOR_MODE (GET_MODE (SUBREG_REG (op)))\n+      && SUBREG_BYTE (op) != 4)\n     return true;\n \n   return false;"}, {"sha": "7d05e0882d5bad95921d754de294efdb4014c5b1", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c76239491374472580e174a87c00f5bcbb93ed/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c76239491374472580e174a87c00f5bcbb93ed/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=61c76239491374472580e174a87c00f5bcbb93ed", "patch": "@@ -32,6 +32,9 @@\n    (E500_CR_IOR_COMPARE 1012)\n    ])\n \n+;; Modes using a 64-bit register.\n+(define_mode_macro SPE64 [DF V4HI V2SF V1DI V2SI])\n+\n (define_insn \"*negsf2_gpr\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=r\")\n         (neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"r\")))]\n@@ -2241,17 +2244,39 @@\n }\"\n   [(set_attr \"length\" \"8,8\")])\n \n-(define_insn \"*mov_sidf_e500_subreg0\"\n-  [(set (subreg:SI (match_operand:DF 0 \"register_operand\" \"+r\") 0)\n-\t(match_operand:SI 1 \"register_operand\" \"r\"))]\n-  \"TARGET_E500_DOUBLE\"\n-  \"evmergelo %0,%1,%0\")\n+(define_insn \"*mov_si<mode>_e500_subreg0\"\n+  [(set (subreg:SI (match_operand:SPE64 0 \"register_operand\" \"+r,&r\") 0)\n+\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n+  \"(TARGET_E500_DOUBLE && <MODE>mode == DFmode) || (TARGET_SPE && <MODE>mode != DFmode)\"\n+  \"@\n+   evmergelo %0,%1,%0\n+   evmergelohi %0,%0,%0\\;{l%U1%X1|lwz%U1%X1} %0,%1\\;evmergelohi %0,%0,%0\")\n+\n+;; ??? Could use evstwwe for memory stores in some cases, depending on\n+;; the offset.\n+(define_insn \"*mov_si<mode>_e500_subreg0_2\"\n+  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n+\t(subreg:SI (match_operand:SPE64 1 \"register_operand\" \"+r,&r\") 0))]\n+  \"(TARGET_E500_DOUBLE && <MODE>mode == DFmode) || (TARGET_SPE && <MODE>mode != DFmode)\"\n+  \"@\n+   evmergehi %0,%0,%1\n+   evmergelohi %1,%1,%1\\;{st%U0%X0|stw%U0%X0} %1,%0\")\n \n-(define_insn \"*mov_sidf_e500_subreg4\"\n-  [(set (subreg:SI (match_operand:DF 0 \"register_operand\" \"+r\") 4)\n-\t(match_operand:SI 1 \"register_operand\" \"r\"))]\n-  \"TARGET_E500_DOUBLE\"\n-  \"mr %0,%1\")\n+(define_insn \"*mov_si<mode>_e500_subreg4\"\n+  [(set (subreg:SI (match_operand:SPE64 0 \"register_operand\" \"+r,r\") 4)\n+\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n+  \"(TARGET_E500_DOUBLE && <MODE>mode == DFmode) || (TARGET_SPE && <MODE>mode != DFmode)\"\n+  \"@\n+   mr %0,%1\n+   {l%U1%X1|lwz%U1%X1} %0,%1\")\n+\n+(define_insn \"*mov_si<mode>_e500_subreg4_2\"\n+  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n+\t(subreg:SI (match_operand:SPE64 1 \"register_operand\" \"r,r\") 4))]\n+  \"(TARGET_E500_DOUBLE && <MODE>mode == DFmode) || (TARGET_SPE && <MODE>mode != DFmode)\"\n+  \"@\n+   mr %0,%1\n+   {st%U0%X0|stw%U0%X0} %1,%0\")\n \n ;; FIXME: Allow r=CONST0.\n (define_insn \"*movdf_e500_double\""}]}