{"sha": "da4c6ed815c2723b3e9f6ddc375ea915da62d207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0YzZlZDgxNWMyNzIzYjNlOWY2ZGRjMzc1ZWE5MTVkYTYyZDIwNw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2006-12-21T03:04:43Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2006-12-21T03:04:43Z"}, "message": "re PR fortran/25392 (ICEs with -ff2c)\n\nPR fortran/25392\nfortran/\n* trans-stmt.c (gfc_trans_return): Fix comment formatting.\n* trans-types.c (gfc_sym_type): Don't return early for functions.\nRemove special handling for -ff2c.\n(gfc_get_function_type): Add special handling for -ff2c.\n* trans-decl.c (gfc_create_function_decl): Fix comment formatting.\n(gfc_get_fake_result_decl): Make sure we get the right type for\nfunctions.\n(gfc_generate_function_code): Convert type of result variable to\ntype of function.\ntestsuite/\n* gfortran.dg/f2c_8.f90: New test.\n\nFrom-SVN: r120099", "tree": {"sha": "e08435e41b0ca91e22171efc98b4f40e3898d64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e08435e41b0ca91e22171efc98b4f40e3898d64c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da4c6ed815c2723b3e9f6ddc375ea915da62d207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4c6ed815c2723b3e9f6ddc375ea915da62d207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da4c6ed815c2723b3e9f6ddc375ea915da62d207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4c6ed815c2723b3e9f6ddc375ea915da62d207/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5165f1258bb2b110382156d62f46627e3e81654c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5165f1258bb2b110382156d62f46627e3e81654c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5165f1258bb2b110382156d62f46627e3e81654c"}], "stats": {"total": 94, "additions": 67, "deletions": 27}, "files": [{"sha": "dbc724a432138db86c029538e30d83338f47a701", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=da4c6ed815c2723b3e9f6ddc375ea915da62d207", "patch": "@@ -1,3 +1,16 @@\n+2006-12-20  Tobias Schl\ufffd\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/25392\n+\t* trans-stmt.c (gfc_trans_return): Fix comment formatting.\n+\t* trans-types.c (gfc_sym_type): Don't return early for functions.\n+\tRemove special handling for -ff2c.\n+\t(gfc_get_function_type): Add special handling for -ff2c.\n+\t* trans-decl.c (gfc_create_function_decl): Fix comment formatting.\n+\t(gfc_get_fake_result_decl): Make sure we get the right type for\n+\tfunctions.\n+\t(gfc_generate_function_code): Convert type of result variable to\n+\ttype of function.\n+\n 2006-12-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30190"}, {"sha": "2a0341698a5ec5d730dc1a5d420e99694c432bb9", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=da4c6ed815c2723b3e9f6ddc375ea915da62d207", "patch": "@@ -1777,7 +1777,7 @@ gfc_create_function_decl (gfc_namespace * ns)\n }\n \n /* Return the decl used to hold the function return value.  If\n-   parent_flag is set, the context is the parent_scope*/\n+   parent_flag is set, the context is the parent_scope.  */\n \n tree\n gfc_get_fake_result_decl (gfc_symbol * sym, int parent_flag)\n@@ -1886,9 +1886,12 @@ gfc_get_fake_result_decl (gfc_symbol * sym, int parent_flag)\n       sprintf (name, \"__result_%.20s\",\n \t       IDENTIFIER_POINTER (DECL_NAME (this_function_decl)));\n \n-      decl = build_decl (VAR_DECL, get_identifier (name),\n-\t\t\t TREE_TYPE (TREE_TYPE (this_function_decl)));\n-\n+      if (!sym->attr.mixed_entry_master && sym->attr.function)\n+\tdecl = build_decl (VAR_DECL, get_identifier (name),\n+\t\t\t   gfc_sym_type (sym));\n+      else\n+\tdecl = build_decl (VAR_DECL, get_identifier (name),\n+\t\t\t   TREE_TYPE (TREE_TYPE (this_function_decl)));\n       DECL_ARTIFICIAL (decl) = 1;\n       DECL_EXTERNAL (decl) = 0;\n       TREE_PUBLIC (decl) = 0;\n@@ -3258,9 +3261,12 @@ gfc_generate_function_code (gfc_namespace * ns)\n \twarning (0, \"Function return value not set\");\n       else\n \t{\n-\t  /* Set the return value to the dummy result variable.  */\n-\t  tmp = build2 (MODIFY_EXPR, TREE_TYPE (result),\n-\t\t\tDECL_RESULT (fndecl), result);\n+\t  /* Set the return value to the dummy result variable.  The\n+\t     types may be different for scalar default REAL functions\n+\t     with -ff2c, therefore we have to convert.  */\n+\t  tmp = convert (TREE_TYPE (DECL_RESULT (fndecl)), result);\n+\t  tmp = build2 (MODIFY_EXPR, TREE_TYPE (tmp),\n+\t\t\tDECL_RESULT (fndecl), tmp);\n \t  tmp = build1_v (RETURN_EXPR, tmp);\n \t  gfc_add_expr_to_block (&block, tmp);\n \t}"}, {"sha": "8a2a2b37255a9ac7e1fe46f5a74ce41027ffac4c", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=da4c6ed815c2723b3e9f6ddc375ea915da62d207", "patch": "@@ -431,7 +431,7 @@ gfc_trans_return (gfc_code * code ATTRIBUTE_UNUSED)\n       tree tmp;\n       tree result;\n \n-      /* if code->expr is not NULL, this return statement must appear\n+      /* If code->expr is not NULL, this return statement must appear\n          in a subroutine and current_fake_result_decl has already\n \t been generated.  */\n "}, {"sha": "d0775f7711154922bb09fcea6d626b9e5e93b222", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=da4c6ed815c2723b3e9f6ddc375ea915da62d207", "patch": "@@ -1321,27 +1321,13 @@ gfc_sym_type (gfc_symbol * sym)\n   if (sym->attr.flavor == FL_PROCEDURE && !sym->attr.function)\n     return void_type_node;\n \n-  if (sym->backend_decl)\n-    {\n-      if (sym->attr.function)\n-\treturn TREE_TYPE (TREE_TYPE (sym->backend_decl));\n-      else\n-\treturn TREE_TYPE (sym->backend_decl);\n-    }\n+  /* In the case of a function the fake result variable may have a\n+     type different from the function type, so don't return early in\n+     that case.  */\n+  if (sym->backend_decl && !sym->attr.function)\n+    return TREE_TYPE (sym->backend_decl);\n \n   type = gfc_typenode_for_spec (&sym->ts);\n-  if (gfc_option.flag_f2c\n-      && sym->attr.function\n-      && sym->ts.type == BT_REAL\n-      && sym->ts.kind == gfc_default_real_kind\n-      && !sym->attr.always_explicit)\n-    {\n-      /* Special case: f2c calling conventions require that (scalar) \n-\t default REAL functions return the C type double instead.  */\n-      sym->ts.kind = gfc_default_double_kind;\n-      type = gfc_typenode_for_spec (&sym->ts);\n-      sym->ts.kind = gfc_default_real_kind;\n-    }\n \n   if (sym->attr.dummy && !sym->attr.function && !sym->attr.value)\n     byref = 1;\n@@ -1790,6 +1776,20 @@ gfc_get_function_type (gfc_symbol * sym)\n     type = void_type_node;\n   else if (sym->attr.mixed_entry_master)\n     type = gfc_get_mixed_entry_union (sym->ns);\n+  else if (gfc_option.flag_f2c\n+\t   && sym->ts.type == BT_REAL\n+\t   && sym->ts.kind == gfc_default_real_kind\n+\t   && !sym->attr.always_explicit)\n+    {\n+      /* Special case: f2c calling conventions require that (scalar) \n+\t default REAL functions return the C type double instead.  f2c\n+\t compatibility is only an issue with functions that don't\n+\t require an explicit interface, as only these could be\n+\t implemented in Fortran 77.  */\n+      sym->ts.kind = gfc_default_double_kind;\n+      type = gfc_typenode_for_spec (&sym->ts);\n+      sym->ts.kind = gfc_default_real_kind;\n+    }\n   else\n     type = gfc_sym_type (sym);\n "}, {"sha": "a1e84b11b5efd84cdbb65dc80ce2a477e79f0772", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da4c6ed815c2723b3e9f6ddc375ea915da62d207", "patch": "@@ -1,3 +1,8 @@\n+2006-12-20  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/25392\n+\t* gfortran.dg/f2c_8.f90: New test.\n+\n 2006-12-20  Bill Wendling  <wendling@apple.com>\n \n \t* gcc.dg/asm-b.c: Check for __ppc64__."}, {"sha": "03baa36be53683a517a01c3b9be225a4bbf561f4", "filename": "gcc/testsuite/gfortran.dg/f2c_8.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4c6ed815c2723b3e9f6ddc375ea915da62d207/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_8.f90?ref=da4c6ed815c2723b3e9f6ddc375ea915da62d207", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-ff2c\" }\n+! PR 25392\n+! Verify that the type of the result variable matches the declared\n+! type of the function.  The actual type of the function may be\n+! different for f2c calling conventions.\n+real function goo () result (foo)\n+  real x\n+  foo = sign(foo, x)\n+end\n+\n+real function foo ()\n+  real x\n+  foo = sign(foo, x)\n+end\n+"}]}