{"sha": "261640d521fd97e7a0f32a074bbdddb74e0cb3e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxNjQwZDUyMWZkOTdlN2EwZjMyYTA3NGJiZGRkYjc0ZTBjYjNlOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-05-20T01:30:48Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-05-20T01:30:48Z"}, "message": "rs6000.c (rs6000_emit_allocate_stack): Return stack adjusting insn.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Return\n\tstack adjusting insn.  Formatting.\n\t(rs6000_emit_prologue): Track stack adjusting insn, and use of\n\tr12.  If possible, emit first -fsplit-stack arg pointer insn\n\tbefore stack adjust.  Don't use r12 to save cr if split-stack.\n\nFrom-SVN: r223427", "tree": {"sha": "449b95a9c59f4f623eac0b5e0591a8e3684f0783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/449b95a9c59f4f623eac0b5e0591a8e3684f0783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261640d521fd97e7a0f32a074bbdddb74e0cb3e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261640d521fd97e7a0f32a074bbdddb74e0cb3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261640d521fd97e7a0f32a074bbdddb74e0cb3e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261640d521fd97e7a0f32a074bbdddb74e0cb3e9/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f0fd745255adf8b2904b0acaf1c3b66ec93ddb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0fd745255adf8b2904b0acaf1c3b66ec93ddb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f0fd745255adf8b2904b0acaf1c3b66ec93ddb2"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "95326a3f5aa0b0e1a441f7e3787e2494db9b4c28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261640d521fd97e7a0f32a074bbdddb74e0cb3e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261640d521fd97e7a0f32a074bbdddb74e0cb3e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=261640d521fd97e7a0f32a074bbdddb74e0cb3e9", "patch": "@@ -1,3 +1,11 @@\n+2015-05-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Return\n+\tstack adjusting insn.  Formatting.\n+\t(rs6000_emit_prologue): Track stack adjusting insn, and use of\n+\tr12.  If possible, emit first -fsplit-stack arg pointer insn\n+\tbefore stack adjust.  Don't use r12 to save cr if split-stack.\n+\n 2015-05-20  Alan Modra  <amodra@gmail.com>\n \n \t* common/config/rs6000/rs6000-common.c (TARGET_SUPPORTS_SPLIT_STACK):"}, {"sha": "a590ef4dae41dbaf8ae777c8bee50aba3ccfc619", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261640d521fd97e7a0f32a074bbdddb74e0cb3e9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261640d521fd97e7a0f32a074bbdddb74e0cb3e9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=261640d521fd97e7a0f32a074bbdddb74e0cb3e9", "patch": "@@ -22607,7 +22607,7 @@ rs6000_emit_stack_tie (rtx fp, bool hard_frame_needed)\n    If COPY_REG, make sure a copy of the old frame is left there.\n    The generated code may use hard register 0 as a temporary.  */\n \n-static void\n+static rtx_insn *\n rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg, int copy_off)\n {\n   rtx_insn *insn;\n@@ -22620,7 +22620,7 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg, int copy_off)\n     {\n       warning (0, \"stack frame too large\");\n       emit_insn (gen_trap ());\n-      return;\n+      return 0;\n     }\n \n   if (crtl->limit_stack)\n@@ -22671,9 +22671,9 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg, int copy_off)\n   \n   insn = emit_insn (TARGET_32BIT\n \t\t    ? gen_movsi_update_stack (stack_reg, stack_reg,\n-\t\t\t\t\ttodec, stack_reg)\n+\t\t\t\t\t      todec, stack_reg)\n \t\t    : gen_movdi_di_update_stack (stack_reg, stack_reg,\n-\t\t\t\t\t   todec, stack_reg));\n+\t\t\t\t\t\t todec, stack_reg));\n   /* Since we didn't use gen_frame_mem to generate the MEM, grab\n      it now and set the alias set/attributes. The above gen_*_update\n      calls will generate a PARALLEL with the MEM set being the first\n@@ -22691,6 +22691,7 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg, int copy_off)\n   add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n \t\tgen_rtx_SET (stack_reg, gen_rtx_PLUS (Pmode, stack_reg,\n \t\t\t\t\t\t      GEN_INT (-size))));\n+  return insn;\n }\n \n #define PROBE_INTERVAL (1 << STACK_CHECK_PROBE_INTERVAL_EXP)\n@@ -23495,6 +23496,10 @@ rs6000_emit_prologue (void)\n   /* Offset to top of frame for frame_reg and sp respectively.  */\n   HOST_WIDE_INT frame_off = 0;\n   HOST_WIDE_INT sp_off = 0;\n+  /* sp_adjust is the stack adjusting instruction, tracked so that the\n+     insn setting up the split-stack arg pointer can be emitted just\n+     prior to it, when r12 is not used here for other purposes.  */\n+  rtx_insn *sp_adjust = 0;\n \n #ifdef ENABLE_CHECKING\n   /* Track and check usage of r0, r11, r12.  */\n@@ -23713,7 +23718,10 @@ rs6000_emit_prologue (void)\n \t    ptr_off = info->altivec_save_offset + info->altivec_size;\n \t  frame_off = -ptr_off;\n \t}\n-      rs6000_emit_allocate_stack (info->total_size, ptr_reg, ptr_off);\n+      sp_adjust = rs6000_emit_allocate_stack (info->total_size,\n+\t\t\t\t\t      ptr_reg, ptr_off);\n+      if (REGNO (frame_reg_rtx) == 12)\n+\tsp_adjust = 0;\n       sp_off = info->total_size;\n       if (frame_reg_rtx != sp_reg_rtx)\n \trs6000_emit_stack_tie (frame_reg_rtx, false);\n@@ -23754,7 +23762,8 @@ rs6000_emit_prologue (void)\n   if (!WORLD_SAVE_P (info)\n       && info->cr_save_p\n       && REGNO (frame_reg_rtx) != cr_save_regno\n-      && !(using_static_chain_p && cr_save_regno == 11))\n+      && !(using_static_chain_p && cr_save_regno == 11)\n+      && !(flag_split_stack && cr_save_regno == 12 && sp_adjust))\n     {\n       cr_save_rtx = gen_rtx_REG (SImode, cr_save_regno);\n       START_USE (cr_save_regno);\n@@ -23900,6 +23909,8 @@ rs6000_emit_prologue (void)\n       int end_save = info->gp_save_offset + info->gp_size;\n       int ptr_off;\n \n+      if (ptr_regno == 12)\n+\tsp_adjust = 0;\n       if (!ptr_set_up)\n \tptr_reg = gen_rtx_REG (Pmode, ptr_regno);\n \n@@ -24218,7 +24229,10 @@ rs6000_emit_prologue (void)\n \t}\n       else if (REGNO (frame_reg_rtx) == 1)\n \tframe_off = info->total_size;\n-      rs6000_emit_allocate_stack (info->total_size, ptr_reg, ptr_off);\n+      sp_adjust = rs6000_emit_allocate_stack (info->total_size,\n+\t\t\t\t\t      ptr_reg, ptr_off);\n+      if (REGNO (frame_reg_rtx) == 12)\n+\tsp_adjust = 0;\n       sp_off = info->total_size;\n       if (frame_reg_rtx != sp_reg_rtx)\n \trs6000_emit_stack_tie (frame_reg_rtx, false);\n@@ -24248,6 +24262,8 @@ rs6000_emit_prologue (void)\n \n       gcc_checking_assert (scratch_regno == 11 || scratch_regno == 12);\n       NOT_INUSE (0);\n+      if (scratch_regno == 12)\n+\tsp_adjust = 0;\n       if (end_save + frame_off != 0)\n \t{\n \t  rtx offset = GEN_INT (end_save + frame_off);\n@@ -24325,7 +24341,7 @@ rs6000_emit_prologue (void)\n       if ((DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n \t  && !using_static_chain_p)\n \tsave_regno = 11;\n-      else if (REGNO (frame_reg_rtx) == 12)\n+      else if (flag_split_stack || REGNO (frame_reg_rtx) == 12)\n \t{\n \t  save_regno = 11;\n \t  if (using_static_chain_p)\n@@ -24371,6 +24387,7 @@ rs6000_emit_prologue (void)\n \t  rtx lr = gen_rtx_REG (Pmode, LR_REGNO);\n \t  rtx tmp = gen_rtx_REG (Pmode, 12);\n \n+\t  sp_adjust = 0;\n \t  insn = emit_move_insn (tmp, lr);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \n@@ -24433,7 +24450,13 @@ rs6000_emit_prologue (void)\n \t __morestack was called, it left the arg pointer to the old\n \t stack in r29.  Otherwise, the arg pointer is the top of the\n \t current frame.  */\n-      if (frame_off != 0 || REGNO (frame_reg_rtx) != 12)\n+      if (sp_adjust)\n+\t{\n+\t  rtx r12 = gen_rtx_REG (Pmode, 12);\n+\t  rtx set_r12 = gen_rtx_SET (r12, sp_reg_rtx);\n+\t  emit_insn_before (set_r12, sp_adjust);\n+\t}\n+      else if (frame_off != 0 || REGNO (frame_reg_rtx) != 12)\n \t{\n \t  rtx r12 = gen_rtx_REG (Pmode, 12);\n \t  if (frame_off == 0)"}]}