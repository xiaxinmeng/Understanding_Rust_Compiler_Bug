{"sha": "3175d40fc52fb8eb3c3b18cc343d773da24434fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE3NWQ0MGZjNTJmYjhlYjNjM2IxOGNjMzQzZDc3M2RhMjQ0MzRmYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-07T22:34:09Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-12T16:03:07Z"}, "message": "analyzer: add warnings about writes to constant regions [PR95007]\n\nThis patch adds two new warnings:\n  -Wanalyzer-write-to-const\n  -Wanalyzer-write-to-string-literal\nfor code paths where the analyzer detects a write to a constant region.\n\nAs noted in the documentation part of the patch, the analyzer doesn't\nprioritize detection of such writes, in that the state-merging logic\nwill blithely lose the distinction between const and non-const regions.\nHence false negatives are likely to arise due to state-merging.\n\nHowever, if the analyzer does happen to spot such a write, it seems worth\nreporting, hence this patch.\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.opt (Wanalyzer-write-to-const): New.\n\t(Wanalyzer-write-to-string-literal): New.\n\t* region-model-impl-calls.cc (region_model::impl_call_memcpy):\n\tCall check_for_writable_region.\n\t(region_model::impl_call_memset): Likewise.\n\t(region_model::impl_call_strcpy): Likewise.\n\t* region-model.cc (class write_to_const_diagnostic): New.\n\t(class write_to_string_literal_diagnostic): New.\n\t(region_model::check_for_writable_region): New.\n\t(region_model::set_value): Call check_for_writable_region.\n\t* region-model.h (region_model::check_for_writable_region): New\n\tdecl.\n\ngcc/ChangeLog:\n\t* doc/invoke.texi: Document -Wanalyzer-write-to-const and\n\t-Wanalyzer-write-to-string-literal.\n\ngcc/testsuite/ChangeLog:\n\tPR c/83347\n\tPR middle-end/90404\n\tPR analyzer/95007\n\t* gcc.dg/analyzer/write-to-const-1.c: New test.\n\t* gcc.dg/analyzer/write-to-string-literal-1.c: New test.", "tree": {"sha": "d1c8e7c2e09a91ed75f0e5476c648c2e745aa2de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1c8e7c2e09a91ed75f0e5476c648c2e745aa2de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3175d40fc52fb8eb3c3b18cc343d773da24434fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3175d40fc52fb8eb3c3b18cc343d773da24434fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3175d40fc52fb8eb3c3b18cc343d773da24434fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3175d40fc52fb8eb3c3b18cc343d773da24434fb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be51a3a9ac3409561223c8058d4943f9b574d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be51a3a9ac3409561223c8058d4943f9b574d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be51a3a9ac3409561223c8058d4943f9b574d15"}], "stats": {"total": 249, "additions": 248, "deletions": 1}, "files": [{"sha": "c9df6dc76737bb110a8e1f15fda225e6ca5f25ad", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=3175d40fc52fb8eb3c3b18cc343d773da24434fb", "patch": "@@ -114,6 +114,14 @@ Wanalyzer-use-of-pointer-in-stale-stack-frame\n Common Var(warn_analyzer_use_of_pointer_in_stale_stack_frame) Init(1) Warning\n Warn about code paths in which a pointer to a stale stack frame is used.\n \n+Wanalyzer-write-to-const\n+Common Var(warn_analyzer_write_to_const) Init(1) Warning\n+Warn about code paths which attempt to write to a const object.\n+\n+Wanalyzer-write-to-string-literal\n+Common Var(warn_analyzer_write_to_string_literal) Init(1) Warning\n+Warn about code paths which attempt to write to a string literal.\n+\n Wanalyzer-too-complex\n Common Var(warn_analyzer_too_complex) Init(0) Warning\n Warn if the code is too complicated for the analyzer to fully explore."}, {"sha": "ef84e638992107ed13299b98ef1b4ebccb64f8c1", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=3175d40fc52fb8eb3c3b18cc343d773da24434fb", "patch": "@@ -305,6 +305,8 @@ region_model::impl_call_memcpy (const call_details &cd)\n \treturn;\n     }\n \n+  check_for_writable_region (dest_reg, cd.get_ctxt ());\n+\n   /* Otherwise, mark region's contents as unknown.  */\n   mark_region_as_unknown (dest_reg);\n }\n@@ -346,6 +348,8 @@ region_model::impl_call_memset (const call_details &cd)\n \t}\n     }\n \n+  check_for_writable_region (dest_reg, cd.get_ctxt ());\n+\n   /* Otherwise, mark region's contents as unknown.  */\n   mark_region_as_unknown (dest_reg);\n   return false;\n@@ -397,6 +401,8 @@ region_model::impl_call_strcpy (const call_details &cd)\n \n   cd.maybe_set_lhs (dest_sval);\n \n+  check_for_writable_region (dest_reg, cd.get_ctxt ());\n+\n   /* For now, just mark region's contents as unknown.  */\n   mark_region_as_unknown (dest_reg);\n }"}, {"sha": "480f25a3a4b0d2135e17216408bbf93ab2a153f1", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=3175d40fc52fb8eb3c3b18cc343d773da24434fb", "patch": "@@ -1532,16 +1532,131 @@ region_model::deref_rvalue (const svalue *ptr_sval, tree ptr_tree,\n   return m_mgr->get_symbolic_region (ptr_sval);\n }\n \n+/* A subclass of pending_diagnostic for complaining about writes to\n+   constant regions of memory.  */\n+\n+class write_to_const_diagnostic\n+: public pending_diagnostic_subclass<write_to_const_diagnostic>\n+{\n+public:\n+  write_to_const_diagnostic (const region *reg, tree decl)\n+  : m_reg (reg), m_decl (decl)\n+  {}\n+\n+  const char *get_kind () const FINAL OVERRIDE\n+  {\n+    return \"write_to_const_diagnostic\";\n+  }\n+\n+  bool operator== (const write_to_const_diagnostic &other) const\n+  {\n+    return (m_reg == other.m_reg\n+\t    && m_decl == other.m_decl);\n+  }\n+\n+  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  {\n+    bool warned = warning_at (rich_loc, OPT_Wanalyzer_write_to_const,\n+\t\t\t      \"write to %<const%> object %qE\", m_decl);\n+    if (warned)\n+      inform (DECL_SOURCE_LOCATION (m_decl), \"declared here\");\n+    return warned;\n+  }\n+\n+  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  {\n+    return ev.formatted_print (\"write to %<const%> object %qE here\", m_decl);\n+  }\n+\n+private:\n+  const region *m_reg;\n+  tree m_decl;\n+};\n+\n+/* A subclass of pending_diagnostic for complaining about writes to\n+   string literals.  */\n+\n+class write_to_string_literal_diagnostic\n+: public pending_diagnostic_subclass<write_to_string_literal_diagnostic>\n+{\n+public:\n+  write_to_string_literal_diagnostic (const region *reg)\n+  : m_reg (reg)\n+  {}\n+\n+  const char *get_kind () const FINAL OVERRIDE\n+  {\n+    return \"write_to_string_literal_diagnostic\";\n+  }\n+\n+  bool operator== (const write_to_string_literal_diagnostic &other) const\n+  {\n+    return m_reg == other.m_reg;\n+  }\n+\n+  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  {\n+    return warning_at (rich_loc, OPT_Wanalyzer_write_to_string_literal,\n+\t\t       \"write to string literal\");\n+    /* Ideally we would show the location of the STRING_CST as well,\n+       but it is not available at this point.  */\n+  }\n+\n+  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  {\n+    return ev.formatted_print (\"write to string literal here\");\n+  }\n+\n+private:\n+  const region *m_reg;\n+};\n+\n+/* Use CTXT to warn If DEST_REG is a region that shouldn't be written to.  */\n+\n+void\n+region_model::check_for_writable_region (const region* dest_reg,\n+\t\t\t\t\t region_model_context *ctxt) const\n+{\n+  /* Fail gracefully if CTXT is NULL.  */\n+  if (!ctxt)\n+    return;\n+\n+  const region *base_reg = dest_reg->get_base_region ();\n+  switch (base_reg->get_kind ())\n+    {\n+    default:\n+      break;\n+    case RK_DECL:\n+      {\n+\tconst decl_region *decl_reg = as_a <const decl_region *> (base_reg);\n+\ttree decl = decl_reg->get_decl ();\n+\t/* Warn about writes to const globals.\n+\t   Don't warn for writes to const locals, and params in particular,\n+\t   since we would warn in push_frame when setting them up (e.g the\n+\t   \"this\" param is \"T* const\").  */\n+\tif (TREE_READONLY (decl)\n+\t    && is_global_var (decl))\n+\t  ctxt->warn (new write_to_const_diagnostic (dest_reg, decl));\n+      }\n+      break;\n+    case RK_STRING:\n+      ctxt->warn (new write_to_string_literal_diagnostic (dest_reg));\n+      break;\n+    }\n+}\n+\n /* Set the value of the region given by LHS_REG to the value given\n    by RHS_SVAL.  */\n \n void\n region_model::set_value (const region *lhs_reg, const svalue *rhs_sval,\n-\t\t\t region_model_context */*ctxt*/)\n+\t\t\t region_model_context *ctxt)\n {\n   gcc_assert (lhs_reg);\n   gcc_assert (rhs_sval);\n \n+  check_for_writable_region (lhs_reg, ctxt);\n+\n   m_store.set_value (m_mgr->get_store_manager(), lhs_reg, rhs_sval,\n \t\t     BK_direct);\n }"}, {"sha": "234ca16bcefc74f668f99fd28308c6ba1590783c", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=3175d40fc52fb8eb3c3b18cc343d773da24434fb", "patch": "@@ -2736,6 +2736,9 @@ class region_model\n   bool called_from_main_p () const;\n   const svalue *get_initial_value_for_global (const region *reg) const;\n \n+  void check_for_writable_region (const region* dest_reg,\n+\t\t\t\t  region_model_context *ctxt) const;\n+\n   /* Storing this here to avoid passing it around everywhere.  */\n   region_model_manager *const m_mgr;\n "}, {"sha": "c8281ecf5021063f8a3a902b36d2af97755214fe", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3175d40fc52fb8eb3c3b18cc343d773da24434fb", "patch": "@@ -429,6 +429,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-analyzer-use-after-free @gol\n -Wno-analyzer-use-of-pointer-in-stale-stack-frame @gol\n -Wno-analyzer-use-of-uninitialized-value @gol\n+-Wno-analyzer-write-to-const @gol\n+-Wno-analyzer-write-to-string-literal @gol\n }\n \n @item C and Objective-C-only Warning Options\n@@ -8801,6 +8803,8 @@ Enabling this option effectively enables the following warnings:\n -Wanalyzer-unsafe-call-within-signal-handler @gol\n -Wanalyzer-use-after-free @gol\n -Wanalyzer-use-of-pointer-in-stale-stack-frame @gol\n+-Wanalyzer-write-to-const @gol\n+-Wanalyzer-write-to-string-literal @gol\n }\n \n This option is only available if GCC was configured with analyzer\n@@ -8983,6 +8987,30 @@ to disable it.\n This diagnostic warns for paths through the code in which a pointer\n is dereferenced that points to a variable in a stale stack frame.\n \n+@item -Wno-analyzer-write-to-const\n+@opindex Wanalyzer-write-to-const\n+@opindex Wno-analyzer-write-to-const\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-write-to-const}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which the analyzer\n+detects an attempt to write through a pointer to a @code{const} object.\n+However, the analyzer does not prioritize detection of such paths, so\n+false negatives are more likely relative to other warnings.\n+\n+@item -Wno-analyzer-write-to-string-literal\n+@opindex Wanalyzer-write-to-string-literal\n+@opindex Wno-analyzer-write-to-string-literal\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-write-to-string-literal}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which the analyzer\n+detects an attempt to write through a pointer to a string literal.\n+However, the analyzer does not prioritize detection of such paths, so\n+false negatives are more likely relative to other warnings.\n+\n @end table\n \n Pertinent parameters for controlling the exploration are:"}, {"sha": "dc724e29185ad53215a8dfc5fd31fddbf477c50c", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-const-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-const-1.c?ref=3175d40fc52fb8eb3c3b18cc343d773da24434fb", "patch": "@@ -0,0 +1,29 @@\n+/* PR middle-end/90404 */\n+\n+const int c1 = 20; /* { dg-message \"declared here\" } */\n+int test_1 (void)\n+{\n+  *((int*) &c1) = 10; /* { dg-warning \"write to 'const' object 'c1'\" } */\n+  return c1;\n+}\n+\n+/* Example of writing to a subregion (an element within a const array).  */\n+\n+const int c2[10]; /* { dg-message \"declared here\" } */\n+int test_2 (void)\n+{\n+  ((int*) &c2)[5] = 10; /* { dg-warning \"write to 'const' object 'c2'\" } */\n+  return c2[5];\n+}\n+\n+const char s3[] = \"012.45\"; /* { dg-message \"declared here\" } */\n+int test_3 (void)\n+{\n+  char *p = __builtin_strchr (s3, '.');\n+  *p = 0; /* { dg-warning \"write to 'const' object 's3'\" } */\n+\n+  if (__builtin_strlen (p) != 3)\n+    __builtin_abort ();\n+\n+  return s3[3] == 0;\n+}"}, {"sha": "092500e066fd7ddb66bb70b9bf28704216c3a7c8", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3175d40fc52fb8eb3c3b18cc343d773da24434fb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-1.c?ref=3175d40fc52fb8eb3c3b18cc343d773da24434fb", "patch": "@@ -0,0 +1,58 @@\n+#include <string.h>\n+\n+/* PR analyzer/95007.  */\n+\n+void test_1 (void)\n+{\n+  char *s = \"foo\";\n+  s[0] = 'g'; /* { dg-warning \"write to string literal\" } */\n+}\n+\n+/* PR c/83347.  */\n+\n+void test_2 (void)\n+{\n+  memcpy (\"abc\", \"def\", 3); /* { dg-warning \"write to string literal\" } */\n+}\n+\n+static char * __attribute__((noinline))\n+called_by_test_3 (void)\n+{\n+  return (char *)\"foo\";\n+}\n+\n+void test_3 (void)\n+{\n+  char *s = called_by_test_3 ();\n+  s[1] = 'a'; /* { dg-warning \"write to string literal\" } */\n+}\n+\n+static char * __attribute__((noinline))\n+called_by_test_4 (int flag)\n+{\n+  if (flag)\n+    return (char *)\"foo\";\n+  else\n+    return (char *)\"bar\";\n+}\n+\n+void test_4 (void)\n+{\n+  char *s = called_by_test_4 (0);\n+  s[1] = 'z'; /* { dg-warning \"write to string literal\" } */\n+}\n+\n+static char * __attribute__((noinline))\n+called_by_test_5 (int flag)\n+{\n+  if (flag)\n+    return (char *)\"foo\";\n+  else\n+    return (char *)\"bar\";\n+}\n+\n+void test_5 (int flag)\n+{\n+  char *s = called_by_test_5 (flag);\n+  s[1] = 'z'; /* We miss this one, unless we disable state merging.  */\n+}"}]}