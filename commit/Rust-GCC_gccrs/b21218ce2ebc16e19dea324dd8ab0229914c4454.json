{"sha": "b21218ce2ebc16e19dea324dd8ab0229914c4454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxMjE4Y2UyZWJjMTZlMTlkZWEzMjRkZDhhYjAyMjk5MTRjNDQ1NA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-11-26T12:20:50Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-11-26T12:20:50Z"}, "message": "tests_flags.in: New file.\n\nlibstdc++-v3:\n\n       * tests_flags.in: New file. Split out of ...\n       * mkcheck.in: ... this. Move flags computation into\n       tests_flags.in.\n       * configure.in: Add support for tests_flags.\n       * confiigure: Regenerate.\n\ngcc/testsuite:\n       * lib/g++.exp (g++_include_flags): Invoke 'tests_flags --compiler'\n       instead of 'mkcheck 2'.\n\nFrom-SVN: r37756", "tree": {"sha": "b90f795174fd1f5cb94eb1f865c393e5eec35f85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b90f795174fd1f5cb94eb1f865c393e5eec35f85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b21218ce2ebc16e19dea324dd8ab0229914c4454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21218ce2ebc16e19dea324dd8ab0229914c4454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21218ce2ebc16e19dea324dd8ab0229914c4454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21218ce2ebc16e19dea324dd8ab0229914c4454/comments", "author": null, "committer": null, "parents": [{"sha": "ba188b3d0da77d94a86acb7809810782fd43e0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba188b3d0da77d94a86acb7809810782fd43e0b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba188b3d0da77d94a86acb7809810782fd43e0b7"}], "stats": {"total": 2347, "additions": 1236, "deletions": 1111}, "files": [{"sha": "7c874aa53627cf225441907690c508ba819ee53a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21218ce2ebc16e19dea324dd8ab0229914c4454/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21218ce2ebc16e19dea324dd8ab0229914c4454/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b21218ce2ebc16e19dea324dd8ab0229914c4454", "patch": "@@ -1,3 +1,8 @@\n+2000-11-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* lib/g++.exp (g++_include_flags): Invoke 'tests_flags --compiler'\n+\tinstead of 'mkcheck 2'.\n+\n 2000-11-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.c-torture/execute/memcheck/driver.c,"}, {"sha": "c0762b4331f222d7b8cd0453b78aca537c570e00", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21218ce2ebc16e19dea324dd8ab0229914c4454/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21218ce2ebc16e19dea324dd8ab0229914c4454/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=b21218ce2ebc16e19dea324dd8ab0229914c4454", "patch": "@@ -86,7 +86,7 @@ proc g++_include_flags { args } {\n     if { ${HAVE_LIBSTDCXX_V3} } {\n       set odir_v3 [lookfor_file ${gccpath} libstdc++-v3]\n       set sdir_v3 [lookfor_file ${srcdir} libstdc++-v3]\n-      append flags [exec ${odir_v3}/mkcheck 2 ${odir_v3} ${sdir_v3}]\n+      append flags [exec ${odir_v3}/tests_flags --compiler ${odir_v3} ${sdir_v3}]\n     } else {\n       set odir_v2 [lookfor_file ${gccpath} libstdc++]\n       set sdir_v2 [lookfor_file ${srcdir} libstdc++]"}, {"sha": "73953fbdda7e532e004b60b3dab588ad0aa583cc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b21218ce2ebc16e19dea324dd8ab0229914c4454", "patch": "@@ -1,3 +1,11 @@\n+2000-11-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* tests_flags.in: New file. Split out of ...\n+\t* mkcheck.in: ... this. Move flags computation into\n+\ttests_flags.in. \n+\t* configure.in: Add support for tests_flags.\n+\t* confiigure: Regenerate.\n+\n 2000-11-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* acinclude.m4: Change C9X references to refer to C99."}, {"sha": "c8155227c8370ed00291107fbcd499a90fd22590", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1031, "deletions": 1019, "changes": 2050, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=b21218ce2ebc16e19dea324dd8ab0229914c4454"}, {"sha": "b54450a23e984cd39756233cd143b5c00579da14", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=b21218ce2ebc16e19dea324dd8ab0229914c4454", "patch": "@@ -226,11 +226,12 @@ fi\n # place. To work around this not being passed down from config-ml.in\n # -> top_srcdir/Makefile.am -> top_srcdir/src/Makefile.am, manually\n # append it here.\n-AC_OUTPUT(mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile,\n+AC_OUTPUT(tests_flags mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile,\n [if test -n \"$CONFIG_FILES\"; then\n   ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n   grep '^MULTISUBDIR =' Makefile >> src/Makefile\n fi\n+chmod +x tests_flags\n chmod +x mkcheck\n ],\n srcdir=${srcdir}"}, {"sha": "24c138f9ee5e85ca1252cac74a892064863145a9", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 12, "deletions": 90, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=b21218ce2ebc16e19dea324dd8ab0229914c4454", "patch": "@@ -9,7 +9,7 @@\n # has been enabled.\n \n # Invocation \n-# mkcheck [012] (path to build) (path to src) (path to install)\n+# mkcheck [01] (path to build) (path to src) (path to install)\n \n ### XXX There are a lot of tests in here for OS-specific stuff.  If we\n ###     move to a 'configure.target' method of determining those extra\n@@ -19,120 +19,42 @@\n ### XXX Note that breaking out of this with ^C will not work.  Dunno why.\n \n \n-#\n # 1: variables\n #\n # WHICH determines if you are\n # (0) testing the build binary and headers, or\n # (1) testing the installed binary and headers, or\n-# (2) testing under dejagnu (just print the standard flags needed).\n WHICH=$1\n if [ \"$WHICH\"x = 0x ] && [ $# -eq 3 ]; then\n   echo \"running mkcheck\"\n   echo \"$0: testing the build directory\"\n+  query=\"--built-library\"\n elif [ \"$WHICH\"x = 1x ] && [ $# -eq 4 ]; then\n   echo \"running mkcheck\"\n   echo \"$0: testing the install directory $4\"\n-elif [ \"$WHICH\"x = 2x ] && [ $# -eq 3 ]; then\n-  true\n+  query=\"--installed-library\"\n else\n   echo 'Usage: mkcheck 0 (path to build) (path to src)'\n   echo '       mkcheck 1 (path to build) (path to src) (path to install)'\n-  echo '       mkcheck 2 (path to build) (path to src)'\n   exit 1;\n fi\n-  \n-BUILD_DIR=$2\n-if [ ! -d \"$BUILD_DIR\" ]; then\n-  echo \"build directory $BUILD_DIR not found, exiting.\"\n-  exit 1\n-fi\n \n-SRC_DIR=$3\n-if [ ! -d \"$SRC_DIR\" ]; then\n-  echo \"source directory $SRC_DIR not found, exiting.\"\n-  exit 1\n-fi\n-\n-if [ $WHICH -eq 1 ]; then \n-    PREFIX_DIR=$4\n-    if [ ! -d \"$PREFIX_DIR\" ]; then\n-    echo \"install directory $PREFIX_DIR not found, exiting.\"\n-    exit 1\n-    fi\n-fi\n-\n-# This is LIBTOOL=@LIBTOOL@ piped through a bit of sanity that we can\n-# assume for this script (by the time we run this).\n-LIBTOOL=\"$BUILD_DIR/libtool\"\n-chmod u+x $LIBTOOL\n-\n-# INC_PATH == include path to new headers for use on gcc command-line\n-top_srcdir=@top_srcdir@\n-C_DIR=\"`basename @C_INCLUDE_DIR@`\"\n-if [ $WHICH != \"1\" ]; then\n-  INC_PATH=\"-nostdinc++ @CSHADOW_FLAGS@ -I$BUILD_DIR/include \\\n-    -I$SRC_DIR/include/std  -I$SRC_DIR/include/$C_DIR \\\n-    -I$SRC_DIR/include -I$SRC_DIR/libsupc++ -I$SRC_DIR/libio \\\n-    -I$SRC_DIR/testsuite\"\n-elif [ $WHICH -eq 1 ]; then\n-  INC_PATH=\"-I$SRC_DIR/testsuite\"\n-fi\n-\n-if [ $WHICH -eq 2 ]; then\n-  echo $INC_PATH -I$SRC_DIR/include/backward -I$SRC_DIR/include/ext\n-  exit 0;\n-fi\n+# Now that we've successfully translated the numerical option into\n+# a symbolic one, we can safely ignore it.\n+shift\n \n # This has been true all along.  Found out about it the hard way...\n case $BASH_VERSION in\n     1*)  echo 'You need bash 2.x to run mkcheck.  Exiting.'; exit 1 ;;\n     *)   ;;   # ??\n esac\n \n-# It's not dejagnu; we need to do things ourselves.  Pick up any extra\n-# settings for this target.\n-. ${top_srcdir}/configure.target\n-\n-# LIB_PATH == where to find the build libraries for libtool's use\n-# CXX == how to call the compiler\n-if [ $WHICH -eq 0 ]; then\n-  LIB_PATH=\"$BUILD_DIR/src\"\n-  CXX=\"$BUILD_DIR/../../gcc/g++ -B$BUILD_DIR/../../gcc/\"\n-elif [ $WHICH -eq 1 ]; then\n-  LIB_PATH=\"$PREFIX_DIR/lib\"\n-  CXX=\"$PREFIX_DIR/bin/g++\"\n-fi\n-\n-# gcc compiler flags (maybe use glibcpp_cxxflags from configure.target,\n-# but thst's really meant for building the library itself, not using it)\n-CXX_FLAG=\"-ggdb3 -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n-\n-# specific libtool flag(s) to force the use of shared libraries, if any\n-SH_FLAG=\"\"\n-\n-# specific libtool flag(s) to force the use of static libraries, if any\n-ST_FLAG=\"-static\"\n-#ST_FLAG=\"-all-static\"\n-\n-# LTCXX == how to call libtool when creating an executable\n-# LIBS == any extra needed -l switches, etc (may need more libs, lose lose)\n-if [ $WHICH -eq 0 ]; then\n-  LTCXX=\"$LIBTOOL --tag=CXX --mode=link \\\n-          $CXX $CXX_FLAG $INC_PATH   \\\n-          $LIB_PATH/../libsupc++/libsupc++.la  $LIB_PATH/libstdc++.la   \\\n-          -no-install\"\n-  LIBS=\"-nodefaultlibs -lc -lgcc -lc\"\n-elif [ $WHICH -eq 1 ]; then\n-  # For the installed version, we really only need to use libtool and\n-  # the .la file to get correct rpaths.\n-  LTCXX=\"$LIBTOOL --tag=CXX --mode=link \\\n-          $CXX $CXX_FLAG $INC_PATH -L$LIB_PATH   \\\n-          $LIB_PATH/libstdc++.la -no-install -rpath $LIB_PATH\"\n-  LIBS=\n-fi\n-# LTEXE == how to call libtool when running an executable\n-LTEXE=\"$LIBTOOL --mode=execute\"\n+# Compute the flags necessary to run the testsuite.\n+saved_ifs=$IFS\n+IFS=':'\n+set `./tests_flags ${query} $*` || exit 1\n+BUILD_DIR=$1; SRC_DIR=$2; PREFIX_DIR=$3; LTCXX=$4; LIBS=$5; LTEXE=$6;\n+IFS=$saved_ifs\n \n # Set up the testing directory, which should be in a directory called\n # \"testsuite\" in the root level of the build directory."}, {"sha": "be6da64aa6433e612bc5cf717fe6a9c2ac76c1d4", "filename": "libstdc++-v3/tests_flags.in", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2Ftests_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21218ce2ebc16e19dea324dd8ab0229914c4454/libstdc%2B%2B-v3%2Ftests_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftests_flags.in?ref=b21218ce2ebc16e19dea324dd8ab0229914c4454", "patch": "@@ -0,0 +1,177 @@\n+#!/bin/sh\n+\n+#\n+# This script computes the various flags needed to run GNU C++ testsuites\n+# (compiler specific as well as library specific).  It is based on \n+# the ./mkcheck.in, which in the long will be removed in favor of a\n+# DejaGnu-base framework.\n+#\n+# Written by Gabriel Dos Reis <gdr@codesourcery.com>\n+#\n+\n+#\n+# Synopsis\n+#   * tests_flags --compiler build-dir src-dir\n+#\n+#      Returns a space-separated list of flags needed to run front-end\n+#      specific tests.\n+# \n+#   * tests_flags --built-library build-dir src-dir\n+#   * tests_flags --installed-library build-dir src-dir install-dir\n+#     \n+#      Returns a colon-separated list of space-separated list of flags,\n+#      needed to run library specific tests,\n+#      BUILD_DIR:SRC_DIR:PREFIX_DIR:LTCXX:LIBS:LTEXE the meaning of which\n+#      is as follows:\n+#        BUILD_DIR   build-dir\n+#        SRC_DIR     src-dir\n+#        PREFIX_DIR  install-dir (meaningful only with --installed-library)\n+#        LTCXX       libtoolized command to compile a C++ program\n+#        LIBS        flags to pass to the linker\n+#        LTEXE       libtoolized command to run a compiled C++ program\n+#\n+\n+\n+##\n+## Utility functions\n+##\n+\n+# Print a message saying how this script is intended to be invoked\n+print_usage() {\n+    cat <<EOF\n+Usage: \n+  tests_fags --compiler <build-dir> <src-dir>\n+             --built-library <build-dir>  <src-dir>\n+             --installed-library <build-dir> <src-dir> <install-dir>\n+EOF\n+    exit 1\n+}\n+\n+# Check for command line option\n+check_options() {\n+    # First, check for number of command line arguments\n+    if [ \\( $1 -ne 3 \\) -a \\( $1 -ne 4 \\) ]; then\n+\tprint_usage;\n+    fi\n+    \n+    # Then, see if we understand the job we're asked for\n+    case $2 in\n+\t--compiler|--built-library|--installed-library)\n+\t# OK\n+\t;;\n+\t*) \n+\tprint_usage\n+\t;;\n+    esac\n+}\n+\n+# Directory sanity check\n+check_directory() {\n+    if [ ! $2 ]; then\n+\techo \"$1 '$2' directory not found, exiting.\"\n+\texit 1\n+    fi\n+}\n+\n+##\n+## Main processing\n+##\n+\n+# Command line options sanity check\n+check_options $# $1\n+\n+query=$1\n+\n+# Check for build, source and install directories\n+BUILD_DIR=$2; SRC_DIR=$3\n+check_directory 'Build' ${BUILD_DIR}\n+check_directory 'Source' ${SRC_DIR}\n+case ${query} in\n+    --installed-library)\n+    PREFIX_DIR=$4\n+    check_directory 'Install' ${PREFIX_FIR}\n+    ;;\n+    *)\n+    PREFIX_DIR=\n+    ;;\n+esac\n+\n+# This is LIBTOOL=@LIBTOOL@ piped through a bit of sanity that we can\n+# assume for this script (by the time we run this).\n+LIBTOOL=\"${BUILD_DIR}/libtool\"\n+chmod u+x ${LIBTOOL}\n+\n+# Compute include paths\n+# INC_PATH == include path to new headers for use on gcc command-line\n+top_srcdir=@top_srcdir@\n+C_DIR=\"`basename  @C_INCLUDE_DIR@`\"\n+case ${query} in\n+    --installed-library)\n+    INC_PATH=\"-I${SRC_DIR}/testsuite\"\n+    ;;\n+    *)\n+    INC_PATH=\"-nostdinc++ @CSHADOW_FLAGS@ -I${BUILD_DIR}/include\n+\t      -I${SRC_DIR}/include/std  -I${SRC_DIR}/include/$C_DIR\n+\t      -I${SRC_DIR}/include -I${SRC_DIR}/libsupc++ -I${SRC_DIR}/libio \n+\t      -I${SRC_DIR}/testsuite\"\n+    ;;\n+esac\n+\n+# If called for compiler tests, just output include paths\n+case ${query} in\n+    --compiler)\n+    echo ${INC_PATH} -I${SRC_DIR}/include/backward -I${SRC_DIR}/include/ext\n+    exit 0\n+    ;;\n+esac\n+\n+# For built or installed libraries, we need to get right OS-specific bits.\n+. ${top_srcdir}/configure.target\n+\n+# LIB_PATH == where to find the build libraries for libtool's use\n+# CXX == how to call the compiler\n+case ${query} in\n+    --built-library)\n+    LIB_PATH=${BUILD_DIR}/src\n+    CXX=\"${BUILD_DIR}/../../gcc/g++ -B${BUILD_DIR}/../../gcc/\"\n+    ;;\n+    --installed-library)\n+    LIB_PATH=${PREFIX_DIR}/lib\n+    CXX=${PREFIX_DIR}/bin/g++\n+    ;;\n+esac\n+\n+# gcc compiler flags (maybe use glibcpp_cxxflags from configure.target,\n+# but thst's really meant for building the library itself, not using it)\n+CXXFLAGS=\"-ggdb3 -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n+\n+# specific libtool flag(s) to force the use of shared libraries, if any\n+SH_FLAGS=\n+\n+# specific libtool flag(s) to force the use of static libraries, if any\n+ST_FLAGS=\"-static\"\n+#ST_FLAGS=\"-all-static\"\n+\n+# LTCXX == how to call libtool when creating an executable\n+# LIBS == any extra needed -l switches, etc (may need more libs, lose lose)\n+case ${query} in\n+    --built-library)\n+    LTCXX=\"${LIBTOOL} --tag=CXX --mode=link ${CXX} ${CXX_FLAG} ${INC_PATH} \n+\t   ${LIB_PATH}/../libsupc++/libsupc++.la  ${LIB_PATH}/libstdc++.la\n+\t   -no-install\"\n+    LTEXE=\"${LIBTOOL} --mode=execute\"\n+    LIBS=\"-nodefaultlibs -lc -lgcc -lc\"\n+    ;;\n+    --installed-library)\n+    # For the installed version, we really only need to use libtool and\n+    # the .la file to get correct rpaths.\n+    LTCXX=\"${LIBTOOL} --tag=CXX --mode=link ${CXX} ${CXX_FLAG} ${INC_PATH}\n+\t   -L${LIB_PATH} ${LIB_PATH}/libstdc++.la -no-install \n+\t   -rpath ${LIB_PATH}\"\n+    LTEXE=\"${LIBTOOL} --mode=execute\"\n+    LIBS=\n+    ;;\n+esac\n+\n+echo ${BUILD_DIR}:${SRC_DIR}:${PREFIX_DIR}:${LTCXX}:${LIBS}:${LTEXE}\n+exit 0"}]}