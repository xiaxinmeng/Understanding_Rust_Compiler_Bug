{"sha": "dd396a321be5099536af36e64454c1fcf9d67e12", "node_id": "C_kwDOANBUbNoAKGRkMzk2YTMyMWJlNTA5OTUzNmFmMzZlNjQ0NTRjMWZjZjlkNjdlMTI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-22T12:56:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-23T15:07:38Z"}, "message": "libstdc++: Improvements to standard error category objects\n\nThis ensures that the objects returned by std::generic_category() and\nstd::system_category() are initialized before any code starts executing,\nand are not destroyed at the end of the program. This means it is always\nsafe to access them, even during startup and termination. See LWG 2992\nand P1195R0 for further discussion of this.\n\nAdditionally, make the types of those objects final, which might\npotentially allow additional devirtualization opportunities. The types\nare not visible to users, so there is no way they can derive from them,\nso making them final has no semantic change.\n\nFinally, add overrides for equivalent(int, const error_condition&) to\nthose types, to avoid the second virtual call that would be performed by\nthe base class definition of the function. Because we know what\ndefault_error_condition(int) does for the derived type, we don't need to\nmake a virtual call.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/system_error.cc (generic_error_category): Define\n\tclass and virtual functions as 'final'.\n\t(generic_error_category::equivalent(int, const error_condition&)):\n\tOverride.\n\t(system_error_category): Define class and virtual functions as\n\t'final'.\n\t(system_error_category::equivalent(int, const error_condition&)):\n\tOverride.\n\t(generic_category_instance, system_category_instance): Use\n\tconstinit union to make the objects immortal.", "tree": {"sha": "c51599a9c7c74eb56cd05af63a2c40f9f066cf25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c51599a9c7c74eb56cd05af63a2c40f9f066cf25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd396a321be5099536af36e64454c1fcf9d67e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd396a321be5099536af36e64454c1fcf9d67e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd396a321be5099536af36e64454c1fcf9d67e12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd396a321be5099536af36e64454c1fcf9d67e12/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce01e2e64c340dadb55a8a24c545a13e654804d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce01e2e64c340dadb55a8a24c545a13e654804d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce01e2e64c340dadb55a8a24c545a13e654804d4"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "7fc178a4deb35debbe4f39eb6a6b29a27e05309b", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd396a321be5099536af36e64454c1fcf9d67e12/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd396a321be5099536af36e64454c1fcf9d67e12/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=dd396a321be5099536af36e64454c1fcf9d67e12", "patch": "@@ -36,39 +36,58 @@ namespace\n {\n   using std::string;\n \n-  struct generic_error_category : public std::error_category\n+  template<typename T>\n+    struct constant_init\n+    {\n+      union {\n+\tunsigned char unused;\n+\tT obj;\n+      };\n+      constexpr constant_init() : obj() { }\n+\n+      ~constant_init() { /* do nothing, union member is not destroyed */ }\n+    };\n+\n+  struct generic_error_category final : public std::error_category\n   {\n-    virtual const char*\n-    name() const noexcept\n+    const char*\n+    name() const noexcept final\n     { return \"generic\"; }\n \n     _GLIBCXX_DEFAULT_ABI_TAG\n-    virtual string\n-    message(int i) const\n+    string\n+    message(int i) const final\n     {\n       // XXX locale issues: how does one get or set loc.\n       // _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)\n       return string(strerror(i));\n     }\n+\n+    // Override this to avoid a virtual call to default_error_condition(i).\n+    bool\n+    equivalent(int i, const std::error_condition& cond) const noexcept final\n+    { return i == cond.value() && *this == cond.category(); }\n   };\n \n-  struct system_error_category : public std::error_category\n+  __constinit constant_init<generic_error_category> generic_category_instance{};\n+\n+  struct system_error_category final : public std::error_category\n   {\n-    virtual const char*\n-    name() const noexcept\n+    const char*\n+    name() const noexcept final\n     { return \"system\"; }\n \n     _GLIBCXX_DEFAULT_ABI_TAG\n-    virtual string\n-    message(int i) const\n+    string\n+    message(int i) const final\n     {\n       // XXX locale issues: how does one get or set loc.\n       // _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)\n       return string(strerror(i));\n     }\n \n-    virtual std::error_condition\n-    default_error_condition(int ev) const noexcept\n+    std::error_condition\n+    default_error_condition(int ev) const noexcept final\n     {\n       // Use generic category for all known POSIX errno values (including zero)\n       // and system category otherwise.\n@@ -79,7 +98,7 @@ namespace\n       // They expand to integer constant expressions with type int,\n       // and distinct positive values, suitable for use in #if directives.\n       // POSIX adds more macros (but they're not defined on all targets,\n-      // see config/os/*/error_constants.h), and POSIX allows\n+      // see config/os/.../error_constants.h), and POSIX allows\n       // EAGAIN == EWOULDBLOCK and ENOTSUP == EOPNOTSUPP.\n \n #ifdef E2BIG\n@@ -313,7 +332,7 @@ namespace\n       case EXDEV:\n #endif\n       case 0:\n-        return std::error_condition(ev, std::generic_category());\n+\treturn std::error_condition(ev, generic_category_instance.obj);\n \n       /* Additional system-dependent mappings from non-standard error codes\n        * to one of the POSIX values above would go here, e.g.\n@@ -322,13 +341,17 @@ namespace\n        */\n \n       default:\n-\treturn std::error_condition(ev, std::system_category());\n+\treturn std::error_condition(ev, *this);\n       }\n     }\n+\n+    // Override this to avoid a virtual call to default_error_condition(i).\n+    bool\n+    equivalent(int i, const std::error_condition& cond) const noexcept final\n+    { return system_error_category::default_error_condition(i) == cond; }\n   };\n \n-  const generic_error_category generic_category_instance{};\n-  const system_error_category system_category_instance{};\n+  __constinit constant_init<system_error_category> system_category_instance{};\n }\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -338,16 +361,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   void\n   __throw_system_error(int __i __attribute__((unused)))\n   {\n-    _GLIBCXX_THROW_OR_ABORT(system_error(error_code(__i, generic_category())));\n+    _GLIBCXX_THROW_OR_ABORT(system_error(__i, generic_category_instance.obj));\n   }\n \n   error_category::~error_category() = default;\n \n   const error_category&\n-  _V2::system_category() noexcept { return system_category_instance; }\n+  _V2::system_category() noexcept { return system_category_instance.obj; }\n \n   const error_category&\n-  _V2::generic_category() noexcept { return generic_category_instance; }\n+  _V2::generic_category() noexcept { return generic_category_instance.obj; }\n \n   system_error::~system_error() = default;\n "}]}