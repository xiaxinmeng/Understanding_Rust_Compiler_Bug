{"sha": "353434b65ef7972172597d232ae17022d9a57244", "node_id": "C_kwDOANBUbNoAKDM1MzQzNGI2NWVmNzk3MjE3MjU5N2QyMzJhZTE3MDIyZDlhNTcyNDQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-13T11:49:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-19T14:42:04Z"}, "message": "tree-optimization/104010 - fix SLP scalar costing with patterns\n\nWhen doing BB vectorization the scalar cost compute is derailed\nby patterns, causing lanes to be considered live and thus not\ncosted on the scalar side.  For the testcase in PR104010 this\nprevents vectorization which was done by GCC 11.  PR103941\nshows similar cases of missed optimizations that are fixed by\nthis patch.\n\n2022-04-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104010\n\tPR tree-optimization/103941\n\t* tree-vect-slp.cc (vect_bb_slp_scalar_cost): When\n\twe run into stmts in patterns continue walking those\n\tfor uses outside of the vectorized region instead of\n\tmarking the lane live.\n\n\t* gcc.target/i386/pr103941-1.c: New testcase.\n\t* gcc.target/i386/pr103941-2.c: Likewise.", "tree": {"sha": "49896352786db10b425a1fc134d52b776f9b1696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49896352786db10b425a1fc134d52b776f9b1696"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/353434b65ef7972172597d232ae17022d9a57244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353434b65ef7972172597d232ae17022d9a57244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353434b65ef7972172597d232ae17022d9a57244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353434b65ef7972172597d232ae17022d9a57244/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd3964ebd3e94ed0df4ecaadb7fd34e991cec753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3964ebd3e94ed0df4ecaadb7fd34e991cec753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3964ebd3e94ed0df4ecaadb7fd34e991cec753"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "524fdd0b4b156e86b007465b4ab27394407d1ed4", "filename": "gcc/testsuite/gcc.target/i386/pr103941-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353434b65ef7972172597d232ae17022d9a57244/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103941-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353434b65ef7972172597d232ae17022d9a57244/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103941-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103941-1.c?ref=353434b65ef7972172597d232ae17022d9a57244", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+unsigned char ur[16], ua[16], ub[16];\n+\n+void avgu_v2qi (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    ur[i] = (ua[i] + ub[i] + 1) >> 1;\n+}\n+\n+/* { dg-final { scan-assembler \"pavgb\" } } */"}, {"sha": "972a32be997250db87b0581b3c03fc24cd451eda", "filename": "gcc/testsuite/gcc.target/i386/pr103941-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353434b65ef7972172597d232ae17022d9a57244/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103941-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353434b65ef7972172597d232ae17022d9a57244/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103941-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103941-2.c?ref=353434b65ef7972172597d232ae17022d9a57244", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+void foo (int *c, float *x, float *y)\n+{\n+  c[0] = x[0] < y[0];\n+  c[1] = x[1] < y[1];\n+  c[2] = x[2] < y[2];\n+  c[3] = x[3] < y[3];\n+}\n+\n+/* { dg-final { scan-assembler \"cmpltps\" } } */"}, {"sha": "805dd7e10e27d1a7f93255de69b2da8a6ab62bf4", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353434b65ef7972172597d232ae17022d9a57244/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353434b65ef7972172597d232ae17022d9a57244/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=353434b65ef7972172597d232ae17022d9a57244", "patch": "@@ -5185,22 +5185,46 @@ vect_bb_slp_scalar_cost (vec_info *vinfo,\n \t the scalar cost.  */\n       if (!STMT_VINFO_LIVE_P (stmt_info))\n \t{\n-\t  FOR_EACH_PHI_OR_STMT_DEF (def_p, orig_stmt, op_iter, SSA_OP_DEF)\n+\t  auto_vec<gimple *, 8> worklist;\n+\t  hash_set<gimple *> *worklist_visited = NULL;\n+\t  worklist.quick_push (orig_stmt);\n+\t  do\n \t    {\n-\t      imm_use_iterator use_iter;\n-\t      gimple *use_stmt;\n-\t      FOR_EACH_IMM_USE_STMT (use_stmt, use_iter, DEF_FROM_PTR (def_p))\n-\t\tif (!is_gimple_debug (use_stmt))\n-\t\t  {\n-\t\t    stmt_vec_info use_stmt_info = vinfo->lookup_stmt (use_stmt);\n-\t\t    if (!use_stmt_info\n-\t\t\t|| !vectorized_scalar_stmts.contains (use_stmt_info))\n+\t      gimple *work_stmt = worklist.pop ();\n+\t      FOR_EACH_PHI_OR_STMT_DEF (def_p, work_stmt, op_iter, SSA_OP_DEF)\n+\t\t{\n+\t\t  imm_use_iterator use_iter;\n+\t\t  gimple *use_stmt;\n+\t\t  FOR_EACH_IMM_USE_STMT (use_stmt, use_iter,\n+\t\t\t\t\t DEF_FROM_PTR (def_p))\n+\t\t    if (!is_gimple_debug (use_stmt))\n \t\t      {\n-\t\t\t(*life)[i] = true;\n-\t\t\tbreak;\n+\t\t\tstmt_vec_info use_stmt_info\n+\t\t\t  = vinfo->lookup_stmt (use_stmt);\n+\t\t\tif (!use_stmt_info\n+\t\t\t    || !vectorized_scalar_stmts.contains (use_stmt_info))\n+\t\t\t  {\n+\t\t\t    if (use_stmt_info\n+\t\t\t\t&& STMT_VINFO_IN_PATTERN_P (use_stmt_info))\n+\t\t\t      {\n+\t\t\t\t/* For stmts participating in patterns we have\n+\t\t\t\t   to check its uses recursively.  */\n+\t\t\t\tif (!worklist_visited)\n+\t\t\t\t  worklist_visited = new hash_set<gimple *> ();\n+\t\t\t\tif (!worklist_visited->add (use_stmt))\n+\t\t\t\t  worklist.safe_push (use_stmt);\n+\t\t\t\tcontinue;\n+\t\t\t      }\n+\t\t\t    (*life)[i] = true;\n+\t\t\t    goto next_lane;\n+\t\t\t  }\n \t\t      }\n-\t\t  }\n+\t\t}\n \t    }\n+\t  while (!worklist.is_empty ());\n+next_lane:\n+\t  if (worklist_visited)\n+\t    delete worklist_visited;\n \t  if ((*life)[i])\n \t    continue;\n \t}"}]}