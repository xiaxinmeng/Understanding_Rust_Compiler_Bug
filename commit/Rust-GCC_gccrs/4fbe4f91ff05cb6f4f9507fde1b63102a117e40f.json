{"sha": "4fbe4f91ff05cb6f4f9507fde1b63102a117e40f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiZTRmOTFmZjA1Y2I2ZjRmOTUwN2ZkZTFiNjMxMDJhMTE3ZTQwZg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-05-06T20:24:00Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-05-06T20:24:00Z"}, "message": "re PR rtl-optimization/21254 (Incorrect code with -funroll-loops for multiple targets with same code)\n\n\tPR rtl-optimization/21254\n\t* loop-iv.c (iv_number_of_iterations): Simplify infiniteness\n\tassumptions for loops that otherwise do not roll.\n\t(find_simple_exit): Prefer # of iterations that is guaranteed\n\tnot to be infinite.\n\t* loop-unroll.c (decide_peel_once_rolling,\n\tdecide_peel_completely): Check whether the loop is infinite.\n\nFrom-SVN: r99332", "tree": {"sha": "d915060a51b36c45e01302a15b2e5cc3e27f761c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d915060a51b36c45e01302a15b2e5cc3e27f761c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f/comments", "author": null, "committer": null, "parents": [{"sha": "6245372caaee11600cf7aab808ff30bfaccaf4e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6245372caaee11600cf7aab808ff30bfaccaf4e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6245372caaee11600cf7aab808ff30bfaccaf4e8"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "e579c1de34262f828ede0648d7a70d421b0149c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fbe4f91ff05cb6f4f9507fde1b63102a117e40f", "patch": "@@ -1,3 +1,13 @@\n+2005-05-06  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR rtl-optimization/21254\n+\t* loop-iv.c (iv_number_of_iterations): Simplify infiniteness\n+\tassumptions for loops that otherwise do not roll.\n+\t(find_simple_exit): Prefer # of iterations that is guaranteed\n+\tnot to be infinite.\n+\t* loop-unroll.c (decide_peel_once_rolling,\n+\tdecide_peel_completely): Check whether the loop is infinite.\n+\n 2005-05-06  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/sysv4.opt: Fix typo."}, {"sha": "bacf8382b7f9440937419d84c74b7847b109c5d0", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=4fbe4f91ff05cb6f4f9507fde1b63102a117e40f", "patch": "@@ -2148,7 +2148,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t    assumption = simplify_gen_relational (EQ, SImode, mode, tmp,\n \t\t\t\t\t\t  mode_mmax);\n \t    if (assumption == const_true_rtx)\n-\t      goto zero_iter;\n+\t      goto zero_iter_simplify;\n \t    iv0.base = simplify_gen_binary (PLUS, comp_mode,\n \t\t\t\t\t    iv0.base, const1_rtx);\n \t  }\n@@ -2158,7 +2158,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t    assumption = simplify_gen_relational (EQ, SImode, mode, tmp,\n \t\t\t\t\t\t  mode_mmin);\n \t    if (assumption == const_true_rtx)\n-\t      goto zero_iter;\n+\t      goto zero_iter_simplify;\n \t    iv1.base = simplify_gen_binary (PLUS, comp_mode,\n \t\t\t\t\t    iv1.base, constm1_rtx);\n \t  }\n@@ -2185,7 +2185,8 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t    {\n \t      desc->infinite =\n \t\t      alloc_EXPR_LIST (0, const_true_rtx, NULL_RTX);\n-\t      return;\n+\t      /* Fill in the remaining fields somehow.  */\n+\t      goto zero_iter_simplify;\n \t    }\n \t}\n       else\n@@ -2195,7 +2196,8 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t    {\n \t      desc->infinite =\n \t\t      alloc_EXPR_LIST (0, const_true_rtx, NULL_RTX);\n-\t      return;\n+\t      /* Fill in the remaining fields somehow.  */\n+\t      goto zero_iter_simplify;\n \t    }\n \t}\n     }\n@@ -2306,7 +2308,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t  assumption = simplify_gen_relational (reverse_condition (cond),\n \t\t\t\t\t\tSImode, mode, tmp0, tmp1);\n \t  if (assumption == const_true_rtx)\n-\t    goto zero_iter;\n+\t    goto zero_iter_simplify;\n \t  else if (assumption != const0_rtx)\n \t    desc->noloop_assumptions =\n \t\t    alloc_EXPR_LIST (0, assumption, desc->noloop_assumptions);\n@@ -2449,7 +2451,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t  delta = simplify_gen_binary (MINUS, mode, tmp1, delta);\n \t}\n       if (assumption == const_true_rtx)\n-\tgoto zero_iter;\n+\tgoto zero_iter_simplify;\n       else if (assumption != const0_rtx)\n \tdesc->noloop_assumptions =\n \t\talloc_EXPR_LIST (0, assumption, desc->noloop_assumptions);\n@@ -2517,16 +2519,26 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \n   return;\n \n-fail:\n-  desc->simple_p = false;\n-  return;\n+zero_iter_simplify:\n+  /* Simplify the assumptions.  */\n+  simplify_using_initial_values (loop, AND, &desc->assumptions);\n+  if (desc->assumptions\n+      && XEXP (desc->assumptions, 0) == const0_rtx)\n+    goto fail;\n+  simplify_using_initial_values (loop, IOR, &desc->infinite);\n \n+  /* Fallthru.  */\n zero_iter:\n   desc->const_iter = true;\n   desc->niter = 0;\n   desc->niter_max = 0;\n+  desc->noloop_assumptions = NULL_RTX;\n   desc->niter_expr = const0_rtx;\n   return;\n+\n+fail:\n+  desc->simple_p = false;\n+  return;\n }\n \n /* Checks whether E is a simple exit from LOOP and stores its description\n@@ -2603,12 +2615,21 @@ find_simple_exit (struct loop *loop, struct niter_desc *desc)\n \t  if (!act.simple_p)\n \t    continue;\n \n-\t  /* Prefer constant iterations; the less the better.  */\n \t  if (!any)\n \t    any = true;\n-\t  else if (!act.const_iter\n-\t\t   || (desc->const_iter && act.niter >= desc->niter))\n-\t    continue;\n+\t  else\n+\t    {\n+\t      /* Prefer constant iterations; the less the better.  */\n+\t      if (!act.const_iter\n+\t\t  || (desc->const_iter && act.niter >= desc->niter))\n+\t\tcontinue;\n+\n+\t      /* Also if the actual exit may be infinite, while the old one\n+\t\t not, prefer the old one.  */\n+\t      if (act.infinite && !desc->infinite)\n+\t\tcontinue;\n+\t    }\n+\t  \n \t  *desc = act;\n \t}\n     }"}, {"sha": "68512d02a5a796139c3ebb6c51cbe4400522874d", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbe4f91ff05cb6f4f9507fde1b63102a117e40f/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=4fbe4f91ff05cb6f4f9507fde1b63102a117e40f", "patch": "@@ -375,6 +375,7 @@ decide_peel_once_rolling (struct loop *loop, int flags ATTRIBUTE_UNUSED)\n   /* Check number of iterations.  */\n   if (!desc->simple_p\n       || desc->assumptions\n+      || desc->infinite\n       || !desc->const_iter\n       || desc->niter != 0)\n     {\n@@ -444,7 +445,8 @@ decide_peel_completely (struct loop *loop, int flags ATTRIBUTE_UNUSED)\n   /* Check number of iterations.  */\n   if (!desc->simple_p\n       || desc->assumptions\n-      || !desc->const_iter)\n+      || !desc->const_iter\n+      || desc->infinite)\n     {\n       if (dump_file)\n \tfprintf (dump_file,"}]}