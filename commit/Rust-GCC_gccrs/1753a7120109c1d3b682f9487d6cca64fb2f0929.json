{"sha": "1753a7120109c1d3b682f9487d6cca64fb2f0929", "node_id": "C_kwDOANBUbNoAKDE3NTNhNzEyMDEwOWMxZDNiNjgyZjk0ODdkNmNjYTY0ZmIyZjA5Mjk", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-10T14:14:23Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-10T14:16:55Z"}, "message": "PR rtl-optimization/7061: Complex number arguments on x86_64-like ABIs.\n\nThis patch addresses the issue in comment #6 of PR rtl-optimization/7061\n(a four digit PR number) from 2006 where on x86_64 complex number arguments\nare unconditionally spilled to the stack.\n\nFor the test cases below:\nfloat re(float _Complex a) { return __real__ a; }\nfloat im(float _Complex a) { return __imag__ a; }\n\nGCC with -O2 currently generates:\n\nre:\tmovq    %xmm0, -8(%rsp)\n        movss   -8(%rsp), %xmm0\n        ret\nim:\tmovq    %xmm0, -8(%rsp)\n        movss   -4(%rsp), %xmm0\n        ret\n\nwith this patch we now generate:\n\nre:\tret\nim:\tmovq    %xmm0, %rax\n        shrq    $32, %rax\n        movd    %eax, %xmm0\n        ret\n\n[Technically, this shift can be performed on %xmm0 in a single\ninstruction, but the backend needs to be taught to do that, the\nimportant bit is that the SCmode argument isn't written to the\nstack].\n\nThe patch itself is to emit_group_store where just before RTL\nexpansion commits to writing to the stack, we check if the store\ngroup consists of a single scalar integer register that holds\na complex mode value; on x86_64 SCmode arguments are passed in\nDImode registers.  If this is the case, we can use a SUBREG to\n\"view_convert\" the integer to the equivalent complex mode.\n\nAn interesting corner case that showed up during testing is that\nx86_64 also passes HCmode arguments in DImode registers(!), i.e.\nusing modes of different sizes.  This is easily handled/supported\nby first converting to an integer mode of the correct size, and\nthen generating a complex mode SUBREG of this.  This is similar\nin concept to the patch I proposed here:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-February/590139.html\n\n2020-06-10  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR rtl-optimization/7061\n\t* expr.cc (emit_group_store): For groups that consist of a single\n\tscalar integer register that hold a complex mode value, use\n\tgen_lowpart to generate a SUBREG to \"view_convert\" to the complex\n\tmode.  For modes of different sizes, first convert to an integer\n\tmode of the appropriate size.\n\ngcc/testsuite/ChangeLog\n\tPR rtl-optimization/7061\n\t* gcc.target/i386/pr7061-1.c: New test case.\n\t* gcc.target/i386/pr7061-2.c: New test case.", "tree": {"sha": "4c3c8c67ffe077a435db25eb7ab8c60d7e795f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c3c8c67ffe077a435db25eb7ab8c60d7e795f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1753a7120109c1d3b682f9487d6cca64fb2f0929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1753a7120109c1d3b682f9487d6cca64fb2f0929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1753a7120109c1d3b682f9487d6cca64fb2f0929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1753a7120109c1d3b682f9487d6cca64fb2f0929/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b370ed0bf93ecf0ff51d29e7fc132c433b2aa1be"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "78c839ab425bdf81a7c9e506dddfd0cabb25fe8c", "filename": "gcc/expr.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1753a7120109c1d3b682f9487d6cca64fb2f0929/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1753a7120109c1d3b682f9487d6cca64fb2f0929/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=1753a7120109c1d3b682f9487d6cca64fb2f0929", "patch": "@@ -2801,10 +2801,26 @@ emit_group_store (rtx orig_dst, rtx src, tree type ATTRIBUTE_UNUSED,\n \t    {\n \t      machine_mode dest_mode = GET_MODE (dest);\n \t      machine_mode tmp_mode = GET_MODE (tmps[i]);\n+\t      scalar_int_mode imode;\n \n \t      gcc_assert (known_eq (bytepos, 0) && XVECLEN (src, 0));\n \n-\t      if (GET_MODE_ALIGNMENT (dest_mode)\n+\t      if (finish == 1\n+\t\t  && REG_P (tmps[i])\n+\t\t  && COMPLEX_MODE_P (dest_mode)\n+\t\t  && SCALAR_INT_MODE_P (tmp_mode)\n+\t\t  && int_mode_for_mode (dest_mode).exists (&imode))\n+\t\t{\n+\t\t  if (tmp_mode != imode)\n+\t\t    {\n+\t\t      rtx tmp = gen_reg_rtx (imode);\n+\t\t      emit_move_insn (tmp, gen_lowpart (imode, tmps[i]));\n+\t\t      dst = gen_lowpart (dest_mode, tmp);\n+\t\t    }\n+\t\t  else\n+\t\t    dst = gen_lowpart (dest_mode, tmps[i]);\n+\t\t}\n+\t      else if (GET_MODE_ALIGNMENT (dest_mode)\n \t\t  >= GET_MODE_ALIGNMENT (tmp_mode))\n \t\t{\n \t\t  dest = assign_stack_temp (dest_mode,"}, {"sha": "ce5f6b2741c3c7d004d94181f7db78a68dd3a95d", "filename": "gcc/testsuite/gcc.target/i386/pr7061-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1753a7120109c1d3b682f9487d6cca64fb2f0929/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr7061-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1753a7120109c1d3b682f9487d6cca64fb2f0929/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr7061-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr7061-1.c?ref=1753a7120109c1d3b682f9487d6cca64fb2f0929", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+float re(float _Complex a) { return __real__ a; }\n+/* { dg-final { scan-assembler-not \"mov\" } } */"}, {"sha": "ac33340099bda2986a387947c9e520cd85707235", "filename": "gcc/testsuite/gcc.target/i386/pr7061-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1753a7120109c1d3b682f9487d6cca64fb2f0929/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr7061-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1753a7120109c1d3b682f9487d6cca64fb2f0929/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr7061-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr7061-2.c?ref=1753a7120109c1d3b682f9487d6cca64fb2f0929", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+float im(float _Complex a) { return __imag__ a; }\n+/* { dg-final { scan-assembler-not \"movss\" } } */\n+/* { dg-final { scan-assembler-not \"rsp\" } } */"}]}