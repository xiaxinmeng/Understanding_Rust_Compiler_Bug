{"sha": "02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI3MzFkMjliZWQzNmU4YTRiMmUyOWVjYjljZThiYmJhNWEyN2FjZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2004-01-23T17:32:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-01-23T17:32:16Z"}, "message": "linux64.h (MD_FALLBACK_FRAME_STATE_FOR): Corrected to handle kernels with changed ucontext.\n\n\t* config/rs6000/linux64.h (MD_FALLBACK_FRAME_STATE_FOR)\n\t[!__powerpc64__]: Corrected to handle kernels with changed ucontext.\n\n\t* include/powerpc-signal.h: Add #ifndef __powerpc64__ around the\n\theader.  For __powerpc64__ provide the default-signal.h definitions\n\tfor now.\n\t* include/x86_64-signal.h [!__x86_64__]: Include java-signal-aux.h\n\tinstead of the dummy definitions.\n\t* configure.host (x86_64-*): Remove CHECKREFSPEC, add DIVIDESPEC.\n\t(powerpc64*-*): Remove with_libffi_default.\n\tOnly add -mminimal-toc for 64-bit compilations.\n\t* configure.in: Use powerpc-signal.h on powerpc64 as well.\n\t(x86_64-*-linux*): Set SIGNAL_HANDLER_AUX.\n\tLink SIGNAL_HANDLER_AUX to include/java-signal-aux.h.\n\t* configure: Rebuilt.\n\nFrom-SVN: r76437", "tree": {"sha": "69217cf85354fc3dea053bd54868f93c845f5e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69217cf85354fc3dea053bd54868f93c845f5e30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a944ef648a5d7cab40f741d7a4491904f200936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a944ef648a5d7cab40f741d7a4491904f200936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a944ef648a5d7cab40f741d7a4491904f200936"}], "stats": {"total": 128, "additions": 89, "deletions": 39}, "files": [{"sha": "f71af429e9a24cfed966807d941e2d71080332e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "patch": "@@ -1,3 +1,8 @@\n+2004-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/rs6000/linux64.h (MD_FALLBACK_FRAME_STATE_FOR)\n+\t[!__powerpc64__]: Corrected to handle kernels with changed ucontext.\n+\n 2004-01-23  Eric Botcazou  <ebotcazou@act-europe.fr>\n             Olivier Hainque  <hainque@act-europe.fr>\n "}, {"sha": "560795e1d75a5ccbe8e7376a7fec6e9cee01a006", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "patch": "@@ -550,13 +550,27 @@ while (0)\n \n #ifdef IN_LIBGCC2\n #include <signal.h>\n+#ifdef __powerpc64__\n #include <sys/ucontext.h>\n \n-#ifdef __powerpc64__\n enum { SIGNAL_FRAMESIZE = 128 };\n+\n #else\n+\n+/* During the 2.5 kernel series the kernel ucontext was changed, but\n+   the new layout is compatible with the old one, so we just define\n+   and use the old one here for simplicity and compatibility.  */\n+\n+struct kernel_old_ucontext {\n+  unsigned long     uc_flags;\n+  struct ucontext  *uc_link;\n+  stack_t           uc_stack;\n+  struct sigcontext_struct uc_mcontext;\n+  sigset_t          uc_sigmask;\n+};\n enum { SIGNAL_FRAMESIZE = 64 };\n #endif\n+\n #endif\n \n #ifdef __powerpc64__\n@@ -674,7 +688,7 @@ enum { SIGNAL_FRAMESIZE = 64 };\n \t  struct siginfo *pinfo;\t\t\t\t\t\\\n \t  void *puc;\t\t\t\t\t\t\t\\\n \t  struct siginfo info;\t\t\t\t\t\t\\\n-\t  struct ucontext uc;\t\t\t\t\t\t\\\n+\t  struct kernel_old_ucontext uc;\t\t\t\t\\\n \t} *rt_ = (CONTEXT)->cfa;\t\t\t\t\t\\\n \tsc_ = &rt_->uc.uc_mcontext;\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -698,15 +712,9 @@ enum { SIGNAL_FRAMESIZE = 64 };\n     (FS)->regs.reg[LINK_REGISTER_REGNUM].loc.offset \t\t\t\\\n       = (long)&(sc_->regs->link) - new_cfa_;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    /* The unwinder expects the IP to point to the following insn,\t\\\n-       whereas the kernel returns the address of the actual\t\t\\\n-       faulting insn. We store NIP+4 in an unused register slot to\t\\\n-       get the same result for multiple evaluation of the same signal\t\\\n-       frame.  */\t\t\t\t\t\t\t\\\n-    sc_->regs->gpr[47] = sc_->regs->nip + 4;  \t\t\t\t\\\n     (FS)->regs.reg[CR0_REGNO].how = REG_SAVED_OFFSET;\t\t\t\\\n     (FS)->regs.reg[CR0_REGNO].loc.offset \t\t\t\t\\\n-      = (long)&(sc_->regs->gpr[47]) - new_cfa_;\t\t\t\t\\\n+      = (long)&(sc_->regs->nip) - new_cfa_;\t\t\t\t\\\n     (FS)->retaddr_column = CR0_REGNO;\t\t\t\t\t\\\n     goto SUCCESS;\t\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "7386f1da0522eb7b696021217e15af12d83f9419", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "patch": "@@ -1,3 +1,18 @@\n+2004-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/powerpc-signal.h: Add #ifndef __powerpc64__ around the\n+\theader.  For __powerpc64__ provide the default-signal.h definitions\n+\tfor now.\n+\t* include/x86_64-signal.h [!__x86_64__]: Include java-signal-aux.h\n+\tinstead of the dummy definitions.\n+\t* configure.host (x86_64-*): Remove CHECKREFSPEC, add DIVIDESPEC.\n+\t(powerpc64*-*): Remove with_libffi_default.\n+\tOnly add -mminimal-toc for 64-bit compilations.\n+\t* configure.in: Use powerpc-signal.h on powerpc64 as well.\n+\t(x86_64-*-linux*): Set SIGNAL_HANDLER_AUX.\n+\tLink SIGNAL_HANDLER_AUX to include/java-signal-aux.h.\n+\t* configure: Rebuilt.\n+\n 2004-01-23  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/FileLockImpl.java: Compile fixes."}, {"sha": "6e837132128e42951f2fad4052dd4e5bca96e625", "filename": "libjava/configure", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "patch": "@@ -9015,6 +9015,7 @@ test -n \"$PERL\" || PERL=\"false\"\n \n \n SYSDEP_SOURCES=\n+SIGNAL_HANDLER_AUX=\n \n case \"${host}\" in\n  i?86-*-linux*)\n@@ -9030,7 +9031,7 @@ case \"${host}\" in\n  ia64-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;\n- powerpc-*-linux*)\n+ powerpc*-*-linux*)\n     SIGNAL_HANDLER=include/powerpc-signal.h\n     ;;\n  alpha*-*-linux*)\n@@ -9041,6 +9042,7 @@ case \"${host}\" in\n     ;;\n  x86_64*-*-linux*)\n     SIGNAL_HANDLER=include/x86_64-signal.h\n+    SIGNAL_HANDLER_AUX=include/i386-signal.h\n     ;;\n  sparc*-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n@@ -9062,6 +9064,7 @@ esac\n # If we're using sjlj exceptions, forget what we just learned.\n if test \"$enable_sjlj_exceptions\" = yes; then\n    SIGNAL_HANDLER=include/default-signal.h\n+   SIGNAL_HANDLER_AUX=\n fi\n \n # Define here any compiler flags that you need in order to make backtrace() work.\n@@ -9075,6 +9078,10 @@ esac\n \n \n \n+if test -z \"$SIGNAL_HANDLER_AUX\"; then\n+  SIGNAL_HANDLER_AUX=$SIGNAL_HANDLER\n+fi\n+\n \n \n if test \"${multilib}\" = \"yes\"; then\n@@ -9573,8 +9580,8 @@ fi; done\n EOF\n \n cat >> $CONFIG_STATUS <<EOF\n-ac_sources=\"include/$PLATFORMH java/io/natFile${FILE-${PLATFORM}}.cc java/io/natFileDescriptor${FILE-${PLATFORM}}.cc java/lang/${PLATFORM}Process.java java/lang/nat${PLATFORM}Process.cc java/net/natInetAddress${PLATFORMNET}.cc java/net/natNetworkInterface${PLATFORMNET}.cc gnu/java/net/natPlainSocketImpl${PLATFORMNET}.cc gnu/java/net/natPlainDatagramSocketImpl${PLATFORMNET}.cc gnu/java/nio/natPipeImpl${PLATFORM}.cc gnu/java/nio/natSelectorImpl${PLATFORM}.cc include/$GCHDR include/$THREADH sysdep/$sysdeps_dir/locks.h $SIGNAL_HANDLER\"\n-ac_dests=\"include/platform.h java/io/natFile.cc java/io/natFileDescriptor.cc java/lang/ConcreteProcess.java java/lang/natConcreteProcess.cc java/net/natInetAddress.cc java/net/natNetworkInterface.cc gnu/java/net/natPlainSocketImpl.cc gnu/java/net/natPlainDatagramSocketImpl.cc gnu/java/nio/natPipeImpl.cc gnu/java/nio/natSelectorImpl.cc include/java-gc.h include/java-threads.h sysdep/locks.h include/java-signal.h\"\n+ac_sources=\"include/$PLATFORMH java/io/natFile${FILE-${PLATFORM}}.cc java/io/natFileDescriptor${FILE-${PLATFORM}}.cc java/lang/${PLATFORM}Process.java java/lang/nat${PLATFORM}Process.cc java/net/natInetAddress${PLATFORMNET}.cc java/net/natNetworkInterface${PLATFORMNET}.cc gnu/java/net/natPlainSocketImpl${PLATFORMNET}.cc gnu/java/net/natPlainDatagramSocketImpl${PLATFORMNET}.cc gnu/java/nio/natPipeImpl${PLATFORM}.cc gnu/java/nio/natSelectorImpl${PLATFORM}.cc include/$GCHDR include/$THREADH sysdep/$sysdeps_dir/locks.h $SIGNAL_HANDLER $SIGNAL_HANDLER_AUX\"\n+ac_dests=\"include/platform.h java/io/natFile.cc java/io/natFileDescriptor.cc java/lang/ConcreteProcess.java java/lang/natConcreteProcess.cc java/net/natInetAddress.cc java/net/natNetworkInterface.cc gnu/java/net/natPlainSocketImpl.cc gnu/java/net/natPlainDatagramSocketImpl.cc gnu/java/nio/natPipeImpl.cc gnu/java/nio/natSelectorImpl.cc include/java-gc.h include/java-threads.h sysdep/locks.h include/java-signal.h include/java-signal-aux.h\"\n EOF\n \n cat >> $CONFIG_STATUS <<\\EOF"}, {"sha": "6e19f0cbd17aa354469fef435f1c7854ee9d79b5", "filename": "libjava/configure.host", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "patch": "@@ -99,11 +99,11 @@ case \"${host}\" in\n \tslow_pthread_self=yes\n \t;;\n   x86_64-*)\n-\tCHECKREFSPEC=\"%{m32:-fcheck-references}\"\n \tsysdeps_dir=x86-64\n \tlibgcj_flags=\"${libgcj_flags} -ffloat-store -fno-omit-frame-pointer\"\n \tlibgcj_cxxflags=\n \tlibgcj_cflags=\n+\tDIVIDESPEC=-f%{m32:no-}use-divide-subroutine\n \tenable_hash_synchronization_default=yes\n \tslow_pthread_self=yes\n \tlibgcj_interpreter=yes\n@@ -116,11 +116,11 @@ case \"${host}\" in\n \tIEEESPEC=-mieee\n \t;;\n   powerpc64*-*)\n-\twith_libffi_default=yes\n-\tlibgcj_interpreter=yes\n-\tlibgcj_flags=\"${libgcj_flags} -mminimal-toc\"\n-\t# this may not be correct\n \tsysdeps_dir=powerpc\n+\tlibgcj_interpreter=yes\n+\tif [ x`$CC -print-multi-os-directory` = x../lib64 ]; then\n+\t    libgcj_flags=\"${libgcj_flags} -mminimal-toc\"\n+\tfi\n \tenable_hash_synchronization_default=yes\n \tslow_pthread_self=yes\n \t;;"}, {"sha": "26f39cc3359ddb52f0a3519aba02c1cbd36fd79c", "filename": "libjava/configure.in", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "patch": "@@ -1128,6 +1128,7 @@ AC_FUNC_MMAP\n AC_CHECK_PROGS(PERL, perl, false)\n \n SYSDEP_SOURCES=\n+SIGNAL_HANDLER_AUX=\n \n case \"${host}\" in\n  i?86-*-linux*)\n@@ -1143,7 +1144,7 @@ case \"${host}\" in\n  ia64-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;\n- powerpc-*-linux*)\n+ powerpc*-*-linux*)\n     SIGNAL_HANDLER=include/powerpc-signal.h\n     ;;\n  alpha*-*-linux*)\n@@ -1154,6 +1155,7 @@ case \"${host}\" in\n     ;;\n  x86_64*-*-linux*)\n     SIGNAL_HANDLER=include/x86_64-signal.h\n+    SIGNAL_HANDLER_AUX=include/i386-signal.h\n     ;;\n  sparc*-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n@@ -1175,6 +1177,7 @@ esac\n # If we're using sjlj exceptions, forget what we just learned.\n if test \"$enable_sjlj_exceptions\" = yes; then\n    SIGNAL_HANDLER=include/default-signal.h\n+   SIGNAL_HANDLER_AUX=\n fi\n \n # Define here any compiler flags that you need in order to make backtrace() work.\n@@ -1188,7 +1191,12 @@ AC_SUBST(BACKTRACESPEC)\n \n AC_SUBST(SYSDEP_SOURCES)\n \n-AC_LINK_FILES($SIGNAL_HANDLER, include/java-signal.h)\n+if test -z \"$SIGNAL_HANDLER_AUX\"; then\n+  SIGNAL_HANDLER_AUX=$SIGNAL_HANDLER\n+fi\n+\n+AC_LINK_FILES($SIGNAL_HANDLER $SIGNAL_HANDLER_AUX,\n+\t      include/java-signal.h include/java-signal-aux.h)\n \n if test \"${multilib}\" = \"yes\"; then\n   multilib_arg=\"--enable-multilib\""}, {"sha": "386fb18291a58d985e10c047ddc3dadbaa4949f2", "filename": "libjava/include/powerpc-signal.h", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Finclude%2Fpowerpc-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Finclude%2Fpowerpc-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fpowerpc-signal.h?ref=02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "patch": "@@ -13,21 +13,23 @@ details.  */\n #ifndef JAVA_SIGNAL_H\n # define JAVA_SIGNAL_H 1\n \n-# include <signal.h>\n-# include <sys/syscall.h>\n+# ifndef __powerpc64__\n \n-# define HANDLE_SEGV 1\n-# undef HANDLE_FPE\n+#  include <signal.h>\n+#  include <sys/syscall.h>\n \n-# define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n+#  define HANDLE_SEGV 1\n+#  undef HANDLE_FPE\n+\n+#  define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n   static void _name (int /* _signal */, struct sigcontext *_sc)\n \n /* PPC either leaves PC pointing at a faulting instruction or the\n    following instruction, depending on the signal.  SEGV always does\n    the former, so we adjust the saved PC to point to the following\n    instruction. This is what the handler in libgcc expects.  */\n \n-# define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n+#  define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     _sc->regs->nip += 4;\t\t\t\t\t\t\\\n@@ -58,7 +60,7 @@ struct kernel_old_sigaction {\n   void (*k_sa_restorer) (void);\n };\n \n-# define INIT_SEGV\t\t\t\t\t\t\t\\\n+#  define INIT_SEGV\t\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     struct kernel_old_sigaction kact;\t\t\t\t\t\\\n@@ -69,7 +71,7 @@ do\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)  \n \n-# define INIT_FPE\t\t\t\t\t\t\t\\\n+#  define INIT_FPE\t\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     struct kernel_old_sigaction kact;\t\t\t\t\t\\\n@@ -78,7 +80,15 @@ do\t\t\t\t\t\t\t\t\t\\\n     kact.k_sa_flags = 0;\t\t\t\t\t\t\\\n     syscall (SYS_sigaction, SIGFPE, &kact, NULL);\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n-while (0)  \n+while (0)\n \n-#endif /* JAVA_SIGNAL_H */\n+# else\n \n+#  undef HANDLE_SEGV\n+#  undef HANDLE_FPE\n+\n+#  define INIT_SEGV   do {} while (0)\n+#  define INIT_FPE   do {} while (0)\n+# endif\n+\n+#endif /* JAVA_SIGNAL_H */"}, {"sha": "ab59e5e69bc3a8ed3108355187d1c31e0bd6273c", "filename": "libjava/include/x86_64-signal.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Finclude%2Fx86_64-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace/libjava%2Finclude%2Fx86_64-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fx86_64-signal.h?ref=02731d29bed36e8a4b2e29ecb9ce8bbba5a27ace", "patch": "@@ -10,14 +10,14 @@ Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n \n+#ifdef __x86_64__\n+\n #ifndef JAVA_SIGNAL_H\n #define JAVA_SIGNAL_H 1\n \n #include <signal.h>\n #include <sys/syscall.h>\n \n-#ifdef __x86_64__\n-\n #define HANDLE_SEGV 1\n \n #define SIGNAL_HANDLER(_name)\t\\\n@@ -80,16 +80,13 @@ while (0)\n  * go away if all systems ever have pthreads libraries that are\n  * compiled with unwind info.  */\n \n-#else /* __x86_64__ */\n+#endif /* JAVA_SIGNAL_H */\n \n-/* This is for the 32-bit subsystem on on x86-64.  Catching signals\n-   doesn't yet work on that target.  */\n+#else /* __x86_64__ */\n \n-#undef HANDLE_SEGV\n-#undef HANDLE_FPE\n+/* This is for the 32-bit subsystem on on x86-64.  */\n \n-#define INIT_SEGV   do {} while (0)\n-#define INIT_FPE   do {} while (0)\n+#define sigcontext_struct sigcontext\n+#include <java-signal-aux.h>\n \n #endif /* __x86_64__ */\n-#endif /* JAVA_SIGNAL_H */"}]}