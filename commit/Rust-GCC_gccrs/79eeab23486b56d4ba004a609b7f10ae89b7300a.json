{"sha": "79eeab23486b56d4ba004a609b7f10ae89b7300a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllZWFiMjM0ODZiNTZkNGJhMDA0YTYwOWI3ZjEwYWU4OWI3MzAwYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-03-12T16:49:36Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-03-12T16:49:36Z"}, "message": "Add ix86_gen_tls_global_dynamic_64 and ix86_gen_tls_local_dynamic_base_64\n\n2012-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_gen_tls_global_dynamic_64): New.\n\t(ix86_gen_tls_local_dynamic_base_64): Likewise.\n\t(ix86_option_override_internal): Set ix86_gen_tls_global_dynamic_64\n\tand ix86_gen_tls_local_dynamic_base_64.\n\t(legitimize_tls_address): Use ix86_gen_tls_global_dynamic_64 and\n\tix86_gen_tls_local_dynamic_base_64.\n\n\t* config/i386/i386.md (*tls_global_dynamic_64): Renamed to ...\n\t(*tls_global_dynamic_64_<mode>): This.\n\t(tls_global_dynamic_64): Renamed to ...\n\t(tls_global_dynamic_64_<mode>): This.\n\t(*tls_local_dynamic_base_64): Renamed to ...\n\t(*tls_local_dynamic_base_64_<mode>): This.\n\t(tls_local_dynamic_base_64): Renamed to ...\n\t(tls_local_dynamic_base_64_<mode>): This.\n\nFrom-SVN: r185250", "tree": {"sha": "5b894be0e2b909b2f2a5806d3912f73e6c7e8ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b894be0e2b909b2f2a5806d3912f73e6c7e8ac2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79eeab23486b56d4ba004a609b7f10ae89b7300a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79eeab23486b56d4ba004a609b7f10ae89b7300a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79eeab23486b56d4ba004a609b7f10ae89b7300a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79eeab23486b56d4ba004a609b7f10ae89b7300a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0738fdbda99f9b8cc639a2a461512e41ba205ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0738fdbda99f9b8cc639a2a461512e41ba205ab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0738fdbda99f9b8cc639a2a461512e41ba205ab5"}], "stats": {"total": 90, "additions": 62, "deletions": 28}, "files": [{"sha": "86287d1c95ec61a6753083c088b98a5b5583bbe5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79eeab23486b56d4ba004a609b7f10ae89b7300a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79eeab23486b56d4ba004a609b7f10ae89b7300a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79eeab23486b56d4ba004a609b7f10ae89b7300a", "patch": "@@ -1,3 +1,21 @@\n+2012-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_gen_tls_global_dynamic_64): New.\n+\t(ix86_gen_tls_local_dynamic_base_64): Likewise.\n+\t(ix86_option_override_internal): Set ix86_gen_tls_global_dynamic_64\n+\tand ix86_gen_tls_local_dynamic_base_64.\n+\t(legitimize_tls_address): Use ix86_gen_tls_global_dynamic_64 and\n+\tix86_gen_tls_local_dynamic_base_64.\n+\n+\t* config/i386/i386.md (*tls_global_dynamic_64): Renamed to ...\n+\t(*tls_global_dynamic_64_<mode>): This.\n+\t(tls_global_dynamic_64): Renamed to ...\n+\t(tls_global_dynamic_64_<mode>): This.\n+\t(*tls_local_dynamic_base_64): Renamed to ...\n+\t(*tls_local_dynamic_base_64_<mode>): This.\n+\t(tls_local_dynamic_base_64): Renamed to ...\n+\t(tls_local_dynamic_base_64_<mode>): This.\n+\n 2012-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_option_override_internal): Properly"}, {"sha": "dbcf5a9ab499843b4121a579762deac4f0117d05", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79eeab23486b56d4ba004a609b7f10ae89b7300a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79eeab23486b56d4ba004a609b7f10ae89b7300a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=79eeab23486b56d4ba004a609b7f10ae89b7300a", "patch": "@@ -2444,6 +2444,8 @@ static rtx (*ix86_gen_andsp) (rtx, rtx, rtx);\n static rtx (*ix86_gen_allocate_stack_worker) (rtx, rtx);\n static rtx (*ix86_gen_adjust_stack_and_probe) (rtx, rtx, rtx);\n static rtx (*ix86_gen_probe_stack_range) (rtx, rtx, rtx);\n+static rtx (*ix86_gen_tls_global_dynamic_64) (rtx, rtx, rtx);\n+static rtx (*ix86_gen_tls_local_dynamic_base_64) (rtx, rtx);\n \n /* Preferred alignment for stack boundary in bits.  */\n unsigned int ix86_preferred_stack_boundary;\n@@ -3754,9 +3756,19 @@ ix86_option_override_internal (bool main_args_p)\n     {\n       ix86_gen_leave = gen_leave_rex64;\n       if (Pmode == DImode)\n-\tix86_gen_monitor = gen_sse3_monitor64_di;\n+\t{\n+\t  ix86_gen_monitor = gen_sse3_monitor64_di;\n+\t  ix86_gen_tls_global_dynamic_64 = gen_tls_global_dynamic_64_di;\n+\t  ix86_gen_tls_local_dynamic_base_64\n+\t    = gen_tls_local_dynamic_base_64_di;\n+\t}\n       else\n-\tix86_gen_monitor = gen_sse3_monitor64_si;\n+\t{\n+\t  ix86_gen_monitor = gen_sse3_monitor64_si;\n+\t  ix86_gen_tls_global_dynamic_64 = gen_tls_global_dynamic_64_si;\n+\t  ix86_gen_tls_local_dynamic_base_64\n+\t    = gen_tls_local_dynamic_base_64_si;\n+\t}\n     }\n   else\n     {\n@@ -12549,7 +12561,8 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t      rtx rax = gen_rtx_REG (Pmode, AX_REG), insns;\n \n \t      start_sequence ();\n-\t      emit_call_insn (gen_tls_global_dynamic_64 (rax, x, caddr));\n+\t      emit_call_insn (ix86_gen_tls_global_dynamic_64 (rax, x,\n+\t\t\t\t\t\t\t      caddr));\n \t      insns = get_insns ();\n \t      end_sequence ();\n \n@@ -12597,7 +12610,8 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t      rtx rax = gen_rtx_REG (Pmode, AX_REG), insns, eqv;\n \n \t      start_sequence ();\n-\t      emit_call_insn (gen_tls_local_dynamic_base_64 (rax, caddr));\n+\t      emit_call_insn (ix86_gen_tls_local_dynamic_base_64 (rax,\n+\t\t\t\t\t\t\t\t  caddr));\n \t      insns = get_insns ();\n \t      end_sequence ();\n "}, {"sha": "60dc814bb0d397397a9be9c9eb24396769033bc3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79eeab23486b56d4ba004a609b7f10ae89b7300a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79eeab23486b56d4ba004a609b7f10ae89b7300a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=79eeab23486b56d4ba004a609b7f10ae89b7300a", "patch": "@@ -12623,13 +12623,13 @@\n      (clobber (match_scratch:SI 5 \"\"))\n      (clobber (reg:CC FLAGS_REG))])])\n \n-(define_insn \"*tls_global_dynamic_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(call:DI\n-\t (mem:QI (match_operand:DI 2 \"constant_call_address_operand\" \"z\"))\n-\t (match_operand:DI 3 \"\" \"\")))\n-   (unspec:DI [(match_operand 1 \"tls_symbolic_operand\" \"\")]\n-\t      UNSPEC_TLS_GD)]\n+(define_insn \"*tls_global_dynamic_64_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=a\")\n+\t(call:P\n+\t (mem:QI (match_operand:P 2 \"constant_call_address_operand\" \"z\"))\n+\t (match_operand:P 3 \"\" \"\")))\n+   (unspec:P [(match_operand:P 1 \"tls_symbolic_operand\" \"\")]\n+\t     UNSPEC_TLS_GD)]\n   \"TARGET_64BIT\"\n {\n   if (!TARGET_X32)\n@@ -12646,14 +12646,15 @@\n    (set (attr \"length\")\n \t(symbol_ref \"TARGET_X32 ? 15 : 16\"))])\n \n-(define_expand \"tls_global_dynamic_64\"\n+(define_expand \"tls_global_dynamic_64_<mode>\"\n   [(parallel\n-    [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t  (call:DI\n-\t   (mem:QI (match_operand:DI 2 \"constant_call_address_operand\" \"\"))\n+    [(set (match_operand:P 0 \"register_operand\" \"\")\n+\t  (call:P\n+\t   (mem:QI (match_operand:P 2 \"constant_call_address_operand\" \"\"))\n \t   (const_int 0)))\n-     (unspec:DI [(match_operand 1 \"tls_symbolic_operand\" \"\")]\n-\t\tUNSPEC_TLS_GD)])])\n+     (unspec:P [(match_operand:P 1 \"tls_symbolic_operand\" \"\")]\n+\t       UNSPEC_TLS_GD)])]\n+  \"TARGET_64BIT\")\n \n (define_insn \"*tls_local_dynamic_base_32_gnu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n@@ -12690,12 +12691,12 @@\n       (clobber (match_scratch:SI 4 \"\"))\n       (clobber (reg:CC FLAGS_REG))])])\n \n-(define_insn \"*tls_local_dynamic_base_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(call:DI\n-\t (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"z\"))\n-\t (match_operand:DI 2 \"\" \"\")))\n-   (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)]\n+(define_insn \"*tls_local_dynamic_base_64_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=a\")\n+\t(call:P\n+\t (mem:QI (match_operand:P 1 \"constant_call_address_operand\" \"z\"))\n+\t (match_operand:P 2 \"\" \"\")))\n+   (unspec:P [(const_int 0)] UNSPEC_TLS_LD_BASE)]\n   \"TARGET_64BIT\"\n {\n   output_asm_insn\n@@ -12707,13 +12708,14 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n-(define_expand \"tls_local_dynamic_base_64\"\n+(define_expand \"tls_local_dynamic_base_64_<mode>\"\n   [(parallel\n-     [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t   (call:DI\n-\t    (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n+     [(set (match_operand:P 0 \"register_operand\" \"\")\n+\t   (call:P\n+\t    (mem:QI (match_operand:P 1 \"constant_call_address_operand\" \"\"))\n \t    (const_int 0)))\n-      (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)])])\n+      (unspec:P [(const_int 0)] UNSPEC_TLS_LD_BASE)])]\n+  \"TARGET_64BIT\")\n \n ;; Local dynamic of a single variable is a lose.  Show combine how\n ;; to convert that back to global dynamic."}]}