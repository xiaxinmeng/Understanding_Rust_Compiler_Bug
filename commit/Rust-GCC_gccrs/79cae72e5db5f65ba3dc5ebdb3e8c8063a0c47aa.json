{"sha": "79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljYWU3MmU1ZGI1ZjY1YmEzZGM1ZWJkYjNlOGM4MDYzYTBjNDdhYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-12-15T20:20:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-12-15T20:20:10Z"}, "message": "re PR fortran/46945 (gfortran.dg/unpack_zerosize_1.f90 FAILs with -ftree-vrp -fno-tree-ccp -fno-tree-fre)\n\n\tPR fortran/46945\n\t* trans-array.c (gfc_array_init_size): Perform stride overflow\n\tchecking and multiplication by element_size in size_type_node instead\n\tof sizetype, return value with size_type_node type instead of\n\tsometimes with sizetype and sometimes with gfc_array_index_type.\n\n\t* gfortran.dg/pr46945.f90: New test.\n\nFrom-SVN: r167871", "tree": {"sha": "d12dca7941696c16152f73535639f61e74287638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d12dca7941696c16152f73535639f61e74287638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50ba28bb635a2a4d451efc108634f9ae0cb8b0a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ba28bb635a2a4d451efc108634f9ae0cb8b0a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ba28bb635a2a4d451efc108634f9ae0cb8b0a4"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "2c4de57e31e886232206e0ef59f17370527adc00", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "patch": "@@ -1,3 +1,11 @@\n+2010-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/46945\n+\t* trans-array.c (gfc_array_init_size): Perform stride overflow\n+\tchecking and multiplication by element_size in size_type_node instead\n+\tof sizetype, return value with size_type_node type instead of\n+\tsometimes with sizetype and sometimes with gfc_array_index_type.\n+\n 2010-12-15  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* trans.c (gfc_allocate_with_status): Better error message for"}, {"sha": "7ea84c75d8f05180aebcc31dac4dfb00ba17b089", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "patch": "@@ -4006,6 +4006,7 @@ gfc_array_init_size (tree descriptor, int rank, int corank, tree * poffset,\n   tree or_expr;\n   tree thencase;\n   tree elsecase;\n+  tree cond;\n   tree var;\n   stmtblock_t thenblock;\n   stmtblock_t elseblock;\n@@ -4091,17 +4092,15 @@ gfc_array_init_size (tree descriptor, int rank, int corank, tree * poffset,\n \t\t\t     fold_convert (gfc_array_index_type, \n \t\t\t\t\t   TYPE_MAX_VALUE (gfc_array_index_type)),\n \t\t\t\t\t   size);\n-      tmp = fold_build3_loc \n-\t(input_location, COND_EXPR, integer_type_node,\n-\t gfc_unlikely (fold_build2_loc (input_location, LT_EXPR, \n-\t\t\t\t\tboolean_type_node, tmp, stride)),\n-\t integer_one_node, integer_zero_node);\n-      tmp = fold_build3_loc \n-\t(input_location, COND_EXPR, integer_type_node,\n-\t gfc_unlikely (fold_build2_loc (input_location, EQ_EXPR,\n-\t\t\t\t\tboolean_type_node, size, \n-\t\t\t\t\tbuild_zero_cst (gfc_array_index_type))),\n-\t integer_zero_node, tmp);\n+      cond = gfc_unlikely (fold_build2_loc (input_location, LT_EXPR,\n+\t\t\t\t\t    boolean_type_node, tmp, stride));\n+      tmp = fold_build3_loc (input_location, COND_EXPR, integer_type_node, cond,\n+\t\t\t     integer_one_node, integer_zero_node);\n+      cond = gfc_unlikely (fold_build2_loc (input_location, EQ_EXPR,\n+\t\t\t\t\t    boolean_type_node, size,\n+\t\t\t\t\t    gfc_index_zero_node));\n+      tmp = fold_build3_loc (input_location, COND_EXPR, integer_type_node, cond,\n+\t\t\t     integer_zero_node, tmp);\n       tmp = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,\n \t\t\t     *overflow, tmp);\n       *overflow = gfc_evaluate_now (tmp, pblock);\n@@ -4154,31 +4153,29 @@ gfc_array_init_size (tree descriptor, int rank, int corank, tree * poffset,\n      size of an element to get the total size.  */\n   tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n   /* Convert to size_t.  */\n-  element_size = fold_convert (sizetype, tmp);\n-  stride = fold_convert (sizetype, stride);\n+  element_size = fold_convert (size_type_node, tmp);\n+  stride = fold_convert (size_type_node, stride);\n \n   /* First check for overflow. Since an array of type character can\n      have zero element_size, we must check for that before\n      dividing.  */\n   tmp = fold_build2_loc (input_location, TRUNC_DIV_EXPR, \n-\t\t\t sizetype, \n-\t\t\t TYPE_MAX_VALUE (sizetype), element_size);\n-  tmp = fold_build3_loc (input_location, COND_EXPR, integer_type_node,\n-\t\t\t gfc_unlikely (fold_build2_loc (input_location, LT_EXPR, \n-\t\t\t\t\t\t\tboolean_type_node, tmp, \n-\t\t\t\t\t\t\tstride)),\n+\t\t\t size_type_node,\n+\t\t\t TYPE_MAX_VALUE (size_type_node), element_size);\n+  cond = gfc_unlikely (fold_build2_loc (input_location, LT_EXPR,\n+\t\t\t\t\tboolean_type_node, tmp, stride));\n+  tmp = fold_build3_loc (input_location, COND_EXPR, integer_type_node, cond,\n \t\t\t integer_one_node, integer_zero_node);\n-  tmp = fold_build3_loc (input_location, COND_EXPR, integer_type_node,\n-\t\t\t gfc_unlikely (fold_build2_loc (input_location, EQ_EXPR,\n-\t\t\t\t\t\t\tboolean_type_node, \n-\t\t\t\t\t\t\telement_size, \n-\t\t\t\t\t\t\tsize_zero_node)),\n+  cond = gfc_unlikely (fold_build2_loc (input_location, EQ_EXPR,\n+\t\t\t\t\tboolean_type_node, element_size,\n+\t\t\t\t\tbuild_int_cst (size_type_node, 0)));\n+  tmp = fold_build3_loc (input_location, COND_EXPR, integer_type_node, cond,\n \t\t\t integer_zero_node, tmp);\n   tmp = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,\n \t\t\t *overflow, tmp);\n   *overflow = gfc_evaluate_now (tmp, pblock);\n \n-  size = fold_build2_loc (input_location, MULT_EXPR, sizetype,\n+  size = fold_build2_loc (input_location, MULT_EXPR, size_type_node,\n \t\t\t  stride, element_size);\n \n   if (poffset != NULL)\n@@ -4190,11 +4187,11 @@ gfc_array_init_size (tree descriptor, int rank, int corank, tree * poffset,\n   if (integer_zerop (or_expr))\n     return size;\n   if (integer_onep (or_expr))\n-    return gfc_index_zero_node;\n+    return build_int_cst (size_type_node, 0);\n \n   var = gfc_create_var (TREE_TYPE (size), \"size\");\n   gfc_start_block (&thenblock);\n-  gfc_add_modify (&thenblock, var, size_zero_node);\n+  gfc_add_modify (&thenblock, var, build_int_cst (size_type_node, 0));\n   thencase = gfc_finish_block (&thenblock);\n \n   gfc_start_block (&elseblock);"}, {"sha": "09170a2819310db6e9dd93c2a9f6008ed3d8af03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "patch": "@@ -1,5 +1,8 @@\n 2010-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR fortran/46945\n+\t* gfortran.dg/pr46945.f90: New test.\n+\n \tPR debug/46815\n \t* g++.dg/guality/pr46815.C: New test.\n "}, {"sha": "da4d7c7e5e37bb2a191a5030b3d5018cd6c4dd0d", "filename": "gcc/testsuite/gfortran.dg/pr46945.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46945.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46945.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr46945.f90?ref=79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "patch": "@@ -0,0 +1,10 @@\n+! PR fortran/46945\n+! { dg-do run }\n+! { dg-options \"-O -ftree-vrp -fno-tree-ccp -fno-tree-fre\" }\n+\n+program pr46945\n+  real, allocatable :: a(:,:,:)\n+  integer :: n\n+  n = 0\n+  allocate (a(n,n,n))\n+end program pr46945"}]}