{"sha": "4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQzZTZmYWU0ZGQzNWE3MGMzYjYzZmFkOGUwMmI2ZDRiNGI3MDAwMg==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@apple.com", "date": "2005-03-08T21:01:47Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2005-03-08T21:01:47Z"}, "message": "Target Hook to issue diagnostics for AltiVec argument to funtion with unknown prototype.\n\nTarget Hook to issue diagnostics for AltiVec argument to funtion\nwith unknown prototype.\nOKed by Mark Mitchel.\n\nFrom-SVN: r96124", "tree": {"sha": "8e733d5b7a3ce8d9267f4f50ab0923c79cbd51f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e733d5b7a3ce8d9267f4f50ab0923c79cbd51f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/comments", "author": null, "committer": null, "parents": [{"sha": "2470e6670af2f53985d726d89c4c3e52e8d7e0b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2470e6670af2f53985d726d89c4c3e52e8d7e0b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2470e6670af2f53985d726d89c4c3e52e8d7e0b2"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "ddfe3a603cffe226ffc838407c617e2149840748", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -1,3 +1,18 @@\n+2005-03-08  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\t* config/rs6000/rs6000.c (invalid_arg_for_unprototyped_fn): \n+\tDefine the real function for ppc-darwin.\n+\t* c-typeck.c (convert_arguments): Check for target-specific\n+\tinvalid argument call to unprototyped function.\n+\t* target-def.h (TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN): \n+\tNew Macro.\n+\t* target.h (invalid_arg_for_unprototyped_fn): New field \n+\tin struct calls.\n+\t* targhooks.c (hook_invalid_arg_for_unprototyped_fn): New \n+\tdefault target hook.\n+\t* targhooks.h (hook_invalid_arg_for_unprototyped_fn): \n+\tDeclare.\n+\n 2005-03-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-typeck.c (constructor_stack, constructor_range_stack,"}, {"sha": "9c94b034b6aa0b92821b08247ef108275e42f110", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -2122,6 +2122,7 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n       tree val = TREE_VALUE (valtail);\n       tree rname = function;\n       int argnum = parmnum + 1;\n+      const char *invalid_func_diag;\n \n       if (type == void_type_node)\n \t{\n@@ -2273,6 +2274,12 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t           < TYPE_PRECISION (double_type_node)))\n \t/* Convert `float' to `double'.  */\n \tresult = tree_cons (NULL_TREE, convert (double_type_node, val), result);\n+      else if ((invalid_func_diag = \n+\t        targetm.calls.invalid_arg_for_unprototyped_fn (typelist, fundecl, val)))\n+\t{\n+\t  error (invalid_func_diag);\n+\t  return error_mark_node; \n+\t}\n       else\n \t/* Convert `short' and `char' to full-size `int'.  */\n \tresult = tree_cons (NULL_TREE, default_conversion (val), result);"}, {"sha": "9b9d3aee249300affdfe3f7ad4d8735fd229a28d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -53,6 +53,7 @@\n #include \"cfglayout.h\"\n #include \"sched-int.h\"\n #include \"tree-gimple.h\"\n+#include \"intl.h\"\n #if TARGET_XCOFF\n #include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n #endif\n@@ -757,6 +758,7 @@ static bool rs6000_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      tree, bool);\n static int rs6000_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     tree, bool);\n+static const char *invalid_arg_for_unprototyped_fn (tree, tree, tree);\n #if TARGET_MACHO\n static void macho_branch_islands (void);\n static void add_compiler_branch_island (tree, tree, int);\n@@ -1003,6 +1005,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P rs6000_vector_mode_supported_p\n \n+#undef TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN\n+#define TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN invalid_arg_for_unprototyped_fn\n+\n /* MPC604EUM 3.5.2 Weak Consistency between Multiple Processors\n    The PowerPC architecture requires only weak consistency among\n    processors--that is, memory accesses between processors need not be\n@@ -17504,4 +17509,18 @@ rs6000_vector_mode_supported_p (enum machine_mode mode)\n     return false;\n }\n \n+/* Target hook for invalid_arg_for_unprototyped_fn. */ \n+static const char * \n+invalid_arg_for_unprototyped_fn (tree typelist, tree funcdecl, tree val)\n+{\n+  return (!rs6000_darwin64_abi\n+\t  && typelist == 0\n+          && TREE_CODE (TREE_TYPE (val)) == VECTOR_TYPE\n+          && (funcdecl == NULL_TREE\n+              || (TREE_CODE (funcdecl) == FUNCTION_DECL\n+                  && DECL_BUILT_IN_CLASS (funcdecl) != BUILT_IN_MD)))\n+\t  ? N_(\"AltiVec argument passed to unprototyped function\")\n+\t  : NULL;\n+}\n+\n #include \"gt-rs6000.h\""}, {"sha": "0a6735387ad689c7cda0a597e3b11c7fc33d0619", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -9587,6 +9587,12 @@ many recent processors which implement a policy of ``relaxed,''\n and ia64.  The default is @code{false}.\n @end deftypefn\n \n+@deftypefn {Target Hook} const char *TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN (tree @var{typelist}, tree @var{funcdecl}, tree @var{val})\n+If defined, this macro returns the diagnostic message when it is \n+illegal to pass argument @var{val} to function @var{funcdecl} \n+with prototype @var{typelist}.\n+@end deftypefn\n+\n @defmac TARGET_USE_JCR_SECTION\n This macro determines whether to use the JCR section to register Java\n classes. By default, TARGET_USE_JCR_SECTION is defined to 1 if both"}, {"sha": "01759dbe160228580095d9307b449e2ecf373676", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -356,6 +356,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ENCODE_SECTION_INFO default_encode_section_info\n #endif\n \n+#ifndef TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN\n+#define TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN hook_invalid_arg_for_unprototyped_fn\n+#endif\n+\n #define TARGET_FIXED_CONDITION_CODE_REGS hook_bool_uintp_uintp_false\n \n #define TARGET_CC_MODES_COMPATIBLE default_cc_modes_compatible\n@@ -416,7 +420,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    TARGET_SPLIT_COMPLEX_ARG,\t\t\t\t\t\\\n    TARGET_MUST_PASS_IN_STACK,\t\t\t\t\t\\\n    TARGET_CALLEE_COPIES,\t\t\t\t\t\\\n-   TARGET_ARG_PARTIAL_BYTES\t\t\t\t\t\\\n+   TARGET_ARG_PARTIAL_BYTES,\t\t\t\t\t\\\n+   TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN\t\t\t\\\n    }\n \n "}, {"sha": "914d6dee6f2f8172ab55a209276ba20fafe09a32", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -543,6 +543,11 @@ struct gcc_target\n        in registers; the balance is therefore passed on the stack.  */\n     int (* arg_partial_bytes) (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n \t\t\t       tree type, bool named);\n+\n+    /* Return the diagnostic message string if function without a prototype\n+       is not allowed for this 'val' argument; NULL otherwise. */\n+    const char *(*invalid_arg_for_unprototyped_fn) (tree typelist, \n+\t\t\t\t\t     \t    tree funcdecl, tree val);\n   } calls;\n \n   /* Functions specific to the C++ frontend.  */"}, {"sha": "e31f857886c872d752e814e55b9db46431c6fe1c", "filename": "gcc/targhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -288,3 +288,12 @@ hook_int_CUMULATIVE_ARGS_mode_tree_bool_0 (\n {\n   return 0;\n }\n+\n+const char *\n+hook_invalid_arg_for_unprototyped_fn (\n+\ttree typelist ATTRIBUTE_UNUSED,\n+\ttree funcdecl ATTRIBUTE_UNUSED,\n+\ttree val ATTRIBUTE_UNUSED)\n+{\n+  return NULL;\n+}"}, {"sha": "ae6cf53c2a0f602c842444648532e5be8147570c", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -58,3 +58,5 @@ extern bool hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n   (CUMULATIVE_ARGS *, enum machine_mode, tree, bool);\n extern int hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n   (CUMULATIVE_ARGS *, enum machine_mode, tree, bool);\n+extern const char *hook_invalid_arg_for_unprototyped_fn\n+  (tree, tree, tree);"}, {"sha": "d81bb31032738768c13f35068e2f00e06c226eac", "filename": "gcc/testsuite/gcc.dg/altivec-21.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-21.c?ref=4d3e6fae4dd35a70c3b63fad8e02b6d4b4b70002", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+extern void preansi();\n+\n+typedef void (*pvecfunc) ();\n+\n+void foo(pvecfunc pvf) {\n+   vector int v = (vector int){1, 2, 3, 4};\n+#ifndef __LP64__\n+   preansi (4, 4.0, v); /* { dg-error \"AltiVec argument passed to unprototyped function\" } */\n+   (*pvf)  (4, 4.0, v); /* { dg-error \"AltiVec argument passed to unprototyped function\" } */\n+#endif /* __LP64__ */\n+}\n+"}]}