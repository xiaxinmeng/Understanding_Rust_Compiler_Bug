{"sha": "2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMyOGM3YTdiNTAzY2EzYjNiYjA0MjAxZDU5NzFiMmU1NWQyZGZmMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:51:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:51:06Z"}, "message": "[multiple changes]\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb: Generate X SCOs for default expressions in\n\tsubprogram body stubs.\tDo not generate any SCO for package,\n\ttask, or protected body stubs.\n\n2013-01-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb: Further improvement to ASIS mode for anonymous\n\taccess to protected subprograms.\n\nFrom-SVN: r194796", "tree": {"sha": "74a08790f5fdaf424b765723697ac353e95c1a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74a08790f5fdaf424b765723697ac353e95c1a2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1/comments", "author": null, "committer": null, "parents": [{"sha": "9b23b7defd5004f853329253ac96b4aabd7995b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b23b7defd5004f853329253ac96b4aabd7995b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b23b7defd5004f853329253ac96b4aabd7995b1"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "6753ce4a1d5f5580387f2ff943eddd760d38344e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "patch": "@@ -1,3 +1,14 @@\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb: Generate X SCOs for default expressions in\n+\tsubprogram body stubs.\tDo not generate any SCO for package,\n+\ttask, or protected body stubs.\n+\n+2013-01-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb: Further improvement to ASIS mode for anonymous\n+\taccess to protected subprograms.\n+\n 2013-01-02  Robert Dewar  <dewar@adacore.com>\n \n \t* par_sco.adb, vms_data.ads: Minor reformatting."}, {"sha": "e46f2422c48f8fbc4f7c77324499eec181ffdc46", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "patch": "@@ -1048,10 +1048,15 @@ package body Par_SCO is\n \n       Index := Condition_Pragma_Hash_Table.Get (Loc);\n \n-      --  The test here for zero is to deal with possible previous errors\n+      --  A zero index here indicates that semantic analysis found an\n+      --  activated pragma at Loc which does not have a corresponding pragma\n+      --  or aspect at the syntax level. This may occur in legitimate cases\n+      --  because of expanded code (such are Pre/Post conditions generated for\n+      --  formal parameter validity checks), or as a consequence of a previous\n+      --  error.\n \n       if Index = 0 then\n-         Check_Error_Detected;\n+         return;\n \n       else\n          declare\n@@ -1533,7 +1538,7 @@ package body Par_SCO is\n \n             --  Subprogram declaration\n \n-            when N_Subprogram_Declaration =>\n+            when N_Subprogram_Declaration | N_Subprogram_Body_Stub =>\n                Process_Decisions_Defer\n                  (Parameter_Specifications (Specification (N)), 'X');\n \n@@ -2041,7 +2046,10 @@ package body Par_SCO is\n \n                      when N_Representation_Clause         |\n                           N_Use_Package_Clause            |\n-                          N_Use_Type_Clause               =>\n+                          N_Use_Type_Clause               |\n+                          N_Package_Body_Stub             |\n+                          N_Task_Body_Stub                |\n+                          N_Protected_Body_Stub           =>\n                         Typ := ASCII.NUL;\n \n                      when others                          =>"}, {"sha": "5b67e26aa8475a7b2e704b257399bd068f1a3762", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "patch": "@@ -5049,10 +5049,45 @@ package body Sem_Ch3 is\n       Decl :=\n         Make_Full_Type_Declaration (Loc,\n           Defining_Identifier => Anon,\n-          Type_Definition     => Relocate_Node (Spec));\n+          Type_Definition     => Copy_Separate_Tree (Spec));\n \n       Mark_Rewrite_Insertion (Decl);\n \n+      --  In ASIS mode, analyze the profile on the original node, because\n+      --  the separate copy does not provide enough links to recover the\n+      --  original tree. Analysis is limited to type annotations, within\n+      --  a temporary scope that serves as an anonnymous subprogram to\n+      --  collect otherwise useless temporaries and itypes.\n+\n+      if ASIS_Mode then\n+         declare\n+            Typ : constant Entity_Id :=  Make_Temporary (Loc, 'S');\n+\n+         begin\n+            if Nkind (Spec) = N_Access_Function_Definition then\n+               Set_Ekind (Typ, E_Function);\n+            else\n+               Set_Ekind (Typ, E_Procedure);\n+            end if;\n+\n+            Set_Parent (Typ, N);\n+            Set_Scope  (Typ, Current_Scope);\n+            Push_Scope (Typ);\n+\n+            Process_Formals (Parameter_Specifications (Spec), Spec);\n+\n+            if Nkind (Spec) = N_Access_Function_Definition then\n+               if Nkind (Result_Definition (Spec)) = N_Access_Definition then\n+                  Find_Type (Subtype_Mark (Result_Definition (Spec)));\n+               else\n+                  Find_Type (Result_Definition (Spec));\n+               end if;\n+            end if;\n+\n+            End_Scope;\n+         end;\n+      end if;\n+\n       --  Insert the new declaration in the nearest enclosing scope. If the\n       --  node is a body and N is its return type, the declaration belongs in\n       --  the enclosing scope."}]}