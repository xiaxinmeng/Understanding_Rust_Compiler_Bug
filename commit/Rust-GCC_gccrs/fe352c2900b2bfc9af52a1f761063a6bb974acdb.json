{"sha": "fe352c2900b2bfc9af52a1f761063a6bb974acdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUzNTJjMjkwMGIyYmZjOWFmNTJhMWY3NjEwNjNhNmJiOTc0YWNkYg==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2003-01-28T19:25:49Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2003-01-28T19:25:49Z"}, "message": "emit-rtl.c (const_double_htab_hash): Use mode in the hash.\n\n2003-01-28  Dale Johannesen  <dalej@apple.com>\n        * emit-rtl.c (const_double_htab_hash):  Use mode in the hash.\n        * loop.c (scan_loop):  Move movables on -Os rich-register targets.\n        * config/rs6000/rs6000.md (sibcall*):  Use match_operand for LR.\n\nFrom-SVN: r62004", "tree": {"sha": "6d82077d573f3479764a7ac71bd2fcff5afe6198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d82077d573f3479764a7ac71bd2fcff5afe6198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe352c2900b2bfc9af52a1f761063a6bb974acdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe352c2900b2bfc9af52a1f761063a6bb974acdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe352c2900b2bfc9af52a1f761063a6bb974acdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe352c2900b2bfc9af52a1f761063a6bb974acdb/comments", "author": null, "committer": null, "parents": [{"sha": "00d29f7d01fddd0d60af388b73bbb68b4e662e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d29f7d01fddd0d60af388b73bbb68b4e662e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d29f7d01fddd0d60af388b73bbb68b4e662e23"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "405ea857ad6d71694ff650fbbdbf540e21221744", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe352c2900b2bfc9af52a1f761063a6bb974acdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe352c2900b2bfc9af52a1f761063a6bb974acdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe352c2900b2bfc9af52a1f761063a6bb974acdb", "patch": "@@ -1,3 +1,8 @@\n+2003-01-28  Dale Johannesen  <dalej@apple.com>\n+        * emit-rtl.c (const_double_htab_hash):  Use mode in the hash.\n+        * loop.c (scan_loop):  Move movables on -Os rich-register targets.\n+        * config/rs6000/rs6000.md (sibcall*):  Use match_operand for LR.\n+\n 2003-01-28  Richard Henderson  <rth@redhat.com>\n \n \t* target.h (targetm.address_cost): New."}, {"sha": "34415c27755a8902ed7f0a7422fb838c610619fc", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe352c2900b2bfc9af52a1f761063a6bb974acdb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe352c2900b2bfc9af52a1f761063a6bb974acdb/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fe352c2900b2bfc9af52a1f761063a6bb974acdb", "patch": "@@ -11115,7 +11115,7 @@\n   [(parallel [(call (mem:SI (match_operand 0 \"address_operand\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n-\t      (use (scratch:SI))\n+\t      (use (match_operand 3 \"\" \"\"))\n \t      (return)])]\n   \"\"\n   \"\n@@ -11129,6 +11129,7 @@\n     abort ();\n \n   operands[0] = XEXP (operands[0], 0);\n+  operands[3] = gen_reg_rtx (SImode);\n \n }\")\n \n@@ -11140,7 +11141,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"current_file_function_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n-   (use (match_scratch:SI 3 \"=l,l\"))\n+   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n    (return)]\n   \"(INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"*\n@@ -11160,7 +11161,7 @@\n   [(call (mem:SI (match_operand:DI 0 \"current_file_function_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n-   (use (match_scratch:SI 3 \"=l,l\"))\n+   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n    (return)]\n   \"TARGET_64BIT && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"*\n@@ -11181,7 +11182,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"current_file_function_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (use (match_scratch:SI 4 \"=l,l\"))\n+   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n    (return)]\n   \"(INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"*\n@@ -11203,7 +11204,7 @@\n \t(call (mem:SI (match_operand:DI 1 \"current_file_function_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (use (match_scratch:SI 4 \"=l,l\"))\n+   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n    (return)]\n   \"TARGET_64BIT && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"*\n@@ -11223,7 +11224,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s\"))\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n-   (use (match_scratch:SI 3 \"=l\"))\n+   (use (match_operand:SI 3 \"register_operand\" \"l\"))\n    (return)]\n   \"TARGET_32BIT\n    && DEFAULT_ABI == ABI_AIX\n@@ -11236,7 +11237,7 @@\n   [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s\"))\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n-   (use (match_scratch:SI 3 \"=l\"))\n+   (use (match_operand:SI 3 \"register_operand\" \"l\"))\n    (return)]\n   \"TARGET_64BIT \n    && DEFAULT_ABI == ABI_AIX\n@@ -11250,7 +11251,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n-   (use (match_scratch:SI 4 \"=l\"))\n+   (use (match_operand:SI 4 \"register_operand\" \"l\"))\n    (return)]\n   \"TARGET_32BIT\n    && DEFAULT_ABI == ABI_AIX\n@@ -11264,7 +11265,7 @@\n \t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n-   (use (match_scratch:SI 4 \"=l\"))\n+   (use (match_operand:SI 4 \"register_operand\" \"l\"))\n    (return)]\n   \"TARGET_64BIT \n    && DEFAULT_ABI == ABI_AIX\n@@ -11277,7 +11278,7 @@\n   [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"immediate_operand\" \"O,n\"))\n-   (use (match_scratch:SI 3 \"=l,l\"))\n+   (use (match_operand:SI 3 \"register_operand\" \"l,l\"))\n    (return)]\n   \"(DEFAULT_ABI == ABI_DARWIN\n      || DEFAULT_ABI == ABI_V4\n@@ -11301,7 +11302,7 @@\n \t\t(call (mem:SI (match_operand 1 \"address_operand\" \"\"))\n \t\t      (match_operand 2 \"\" \"\")))\n \t      (use (match_operand 3 \"\" \"\"))\n-\t      (use (scratch:SI))\n+\t      (use (match_operand 4 \"\" \"\"))\n \t      (return)])]\n   \"\"\n   \"\n@@ -11315,6 +11316,7 @@\n     abort ();\n \n   operands[1] = XEXP (operands[1], 0);\n+  operands[4] = gen_reg_rtx (SImode);\n \n }\")\n \n@@ -11323,7 +11325,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (use (match_scratch:SI 4 \"=l,l\"))\n+   (use (match_operand:SI 4 \"register_operand\" \"l,l\"))\n    (return)]\n   \"(DEFAULT_ABI == ABI_DARWIN\n        || DEFAULT_ABI == ABI_V4"}, {"sha": "ab950fd19d3ee4f5fcc5ed90c6c2a699be5874fd", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe352c2900b2bfc9af52a1f761063a6bb974acdb/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe352c2900b2bfc9af52a1f761063a6bb974acdb/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fe352c2900b2bfc9af52a1f761063a6bb974acdb", "patch": "@@ -237,7 +237,11 @@ const_double_htab_hash (x)\n   if (GET_MODE (value) == VOIDmode)\n     h = CONST_DOUBLE_LOW (value) ^ CONST_DOUBLE_HIGH (value);\n   else\n-    h = real_hash (CONST_DOUBLE_REAL_VALUE (value));\n+    {\n+      h = real_hash (CONST_DOUBLE_REAL_VALUE (value));\t\n+      /* MODE is used in the comparison, so it should be in the hash.  */\n+      h ^= GET_MODE (value);\n+    }\n   return h;\n }\n "}, {"sha": "b366b542445917a921d976dba6030af9de8f6409", "filename": "gcc/loop.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe352c2900b2bfc9af52a1f761063a6bb974acdb/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe352c2900b2bfc9af52a1f761063a6bb974acdb/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=fe352c2900b2bfc9af52a1f761063a6bb974acdb", "patch": "@@ -1108,10 +1108,12 @@ scan_loop (loop, flags)\n   /* Now consider each movable insn to decide whether it is worth moving.\n      Store 0 in regs->array[I].set_in_loop for each reg I that is moved.\n \n-     Generally this increases code size, so do not move moveables when\n-     optimizing for code size.  */\n+     For machines with few registers this increases code size, so do not\n+     move moveables when optimizing for code size on such machines.  \n+     (The 18 below is the value for i386.)  */\n \n-  if (! optimize_size)\n+  if (!optimize_size \n+      || (reg_class_size[GENERAL_REGS] > 18 && !loop_info->has_call))\n     {\n       move_movables (loop, movables, threshold, insn_count);\n "}]}