{"sha": "4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYxNWE1ZGE2ZjQxYmVjNWVjZWQyOTU2Y2IzZjJlMDk4ZWM4ZDc3Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-11T17:38:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-11T17:38:55Z"}, "message": "name-lookup.h (pushdecl): Add default friend parm.\n\n\t* name-lookup.h (pushdecl): Add default friend parm.\n\t(pushdecl_maybe_friend): Delete.\n\t(pushdecl_top_level): Add default friend parm.\n\t(pushdecl_top_level_maybe_friend): Delete.\n\t* name-lookup.c (pushdecl_maybe_friend): Delete.\n\t(pushdecl): Add is_friend parm.\n\t(pushdecl_top_level): Add is friend_parm.\n\t(pushdecl_top_level_maybe_friend, pushdecl_top_level_1): Delete.\n\t(pushdecl_top_level_and_finish): Do pushing and finishing\n\tdirectly.\n\t* friend.c (do_friend): Adjust.\n\t* pt.c (tsubst_friend_class): Adjust.\n\nFrom-SVN: r247918", "tree": {"sha": "efc7463bec84070e699dc61f8cffd14e12e1d647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc7463bec84070e699dc61f8cffd14e12e1d647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59fbddcfff234b2f074288b92da7523c11d23aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fbddcfff234b2f074288b92da7523c11d23aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59fbddcfff234b2f074288b92da7523c11d23aa0"}], "stats": {"total": 74, "additions": 30, "deletions": 44}, "files": [{"sha": "a1770d172645cc44a2b7319429ec4dd0f2f90013", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "patch": "@@ -1,5 +1,17 @@\n 2017-05-11  Nathan Sidwell  <nathan@acm.org>\n \n+\t* name-lookup.h (pushdecl): Add default friend parm.\n+\t(pushdecl_maybe_friend): Delete.\n+\t(pushdecl_top_level): Add default friend parm.\n+\t(pushdecl_top_level_maybe_friend): Delete.\n+\t* name-lookup.c (pushdecl_maybe_friend): Delete.\n+\t(pushdecl): Add is_friend parm.\n+\t(pushdecl_top_level): Add is friend_parm.\n+\t(pushdecl_top_level_maybe_friend, pushdecl_top_level_1): Delete.\n+\t(pushdecl_top_level_and_finish): Do pushing and finishing directly.\n+\t* friend.c (do_friend): Adjust.\n+\t* pt.c (tsubst_friend_class): Adjust.\n+\n \tRevert pushdecl_top_level_and_finish name change.\n \t* name-lookup.h (pushdecl_top_level_and_finish): Resurrect old name.\n \t* name-lookup.c (pushdecl_top_level_and_finish): Likewise."}, {"sha": "8708fe596a253862df83c82cdd458dae49352e56", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "patch": "@@ -620,7 +620,7 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t\t declaration, the program is ill-formed.  */\n \t      tree t = lookup_name_innermost_nonclass_level (DECL_NAME (decl));\n \t      if (t)\n-\t\tdecl = pushdecl_maybe_friend (decl, /*is_friend=*/true);\n+\t\tdecl = pushdecl (decl, /*is_friend=*/true);\n \t      else\n \t\t{\n \t\t  error (\"friend declaration %qD in local class without \""}, {"sha": "885ced5a75a1b945130db19c522e765e63e2a2df", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "patch": "@@ -1862,10 +1862,11 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n   return x;\n }\n \n-/* Wrapper for pushdecl_maybe_friend_1.  */\n+/* Record a decl-node X as belonging to the current lexical scope.\n+   It's a friend if IS_FRIEND is true.  */\n \n tree\n-pushdecl_maybe_friend (tree x, bool is_friend)\n+pushdecl (tree x, bool is_friend)\n {\n   tree ret;\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n@@ -1874,14 +1875,6 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n   return ret;\n }\n \n-/* Record a decl-node X as belonging to the current lexical scope.  */\n-\n-tree\n-pushdecl (tree x)\n-{\n-  return pushdecl_maybe_friend (x, false);\n-}\n-\n /* Enter DECL into the symbol table, if that's appropriate.  Returns\n    DECL, or a modified version thereof.  */\n \n@@ -2862,7 +2855,7 @@ pushdecl_with_scope_1 (tree x, cp_binding_level *level, bool is_friend)\n     {\n       b = current_binding_level;\n       current_binding_level = level;\n-      x = pushdecl_maybe_friend (x, is_friend);\n+      x = pushdecl (x, is_friend);\n       current_binding_level = b;\n     }\n   current_function_decl = function_decl;\n@@ -4548,47 +4541,30 @@ parse_using_directive (tree name_space, tree attribs)\n     }\n }\n \n-/* Like pushdecl, only it places X in the global scope if appropriate.\n-   Calls cp_finish_decl to register the variable, initializing it with\n-   *INIT, if INIT is non-NULL.  */\n+/* Pushes X into the global namespace.  */\n \n-static tree\n-pushdecl_top_level_1 (tree x, tree *init, bool is_friend)\n+tree\n+pushdecl_top_level (tree x, bool is_friend)\n {\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n   push_to_top_level ();\n   x = pushdecl_namespace_level (x, is_friend);\n-  if (init)\n-    cp_finish_decl (x, *init, false, NULL_TREE, 0);\n   pop_from_top_level ();\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n   return x;\n }\n \n-/* Like pushdecl, only it places X in the global scope if appropriate.  */\n-\n-tree\n-pushdecl_top_level (tree x)\n-{\n-  return pushdecl_top_level_1 (x, NULL, false);\n-}\n-\n-/* Like pushdecl_top_level, but adding the IS_FRIEND parameter.  */\n-\n-tree\n-pushdecl_top_level_maybe_friend (tree x, bool is_friend)\n-{\n-  return pushdecl_top_level_1 (x, NULL, is_friend);\n-}\n-\n-/* Like pushdecl, only it places X in the global scope if\n-   appropriate.  Calls cp_finish_decl to register the variable,\n-   initializing it with INIT.  */\n+/* Pushes X into the global namespace and Calls cp_finish_decl to\n+   register the variable, initializing it with INIT.  */\n \n tree\n pushdecl_top_level_and_finish (tree x, tree init)\n {\n-  return pushdecl_top_level_1 (x, &init, false);\n+  push_to_top_level ();\n+  x = pushdecl_namespace_level (x, false);\n+  cp_finish_decl (x, init, false, NULL_TREE, 0);\n+  pop_from_top_level ();\n+  return x;\n }\n \n /* Combines two sets of overloaded functions into an OVERLOAD chain, removing"}, {"sha": "9755884026b8ab6bd70421ef49d936fddd2e6088", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "patch": "@@ -335,11 +335,9 @@ extern tree innermost_non_namespace_value (tree);\n extern cxx_binding *outer_binding (tree, cxx_binding *, bool);\n extern void cp_emit_debug_info_for_using (tree, tree);\n \n-extern tree pushdecl_maybe_friend (tree, bool is_friend);\n-extern tree pushdecl (tree);\n extern tree pushdecl_outermost_localscope (tree);\n-extern tree pushdecl_top_level_maybe_friend (tree, bool is_friend);\n-extern tree pushdecl_top_level (tree);\n+extern tree pushdecl (tree, bool is_friend = false);\n+extern tree pushdecl_top_level (tree, bool is_friend = false);\n extern tree pushdecl_top_level_and_finish (tree, tree);\n extern tree pushtag (tree, tree, tag_scope);\n extern bool push_namespace (tree);"}, {"sha": "e7e2aa669f735bce614c0bee8f24b8eeec8d5b12", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15a5da6f41bec5eced2956cb3f2e098ec8d77b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4f15a5da6f41bec5eced2956cb3f2e098ec8d77b", "patch": "@@ -9920,7 +9920,7 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n \t= INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (TREE_TYPE (tmpl)));\n \n       /* Inject this template into the global scope.  */\n-      friend_type = TREE_TYPE (pushdecl_top_level_maybe_friend (tmpl, true));\n+      friend_type = TREE_TYPE (pushdecl_top_level (tmpl, true));\n     }\n \n   if (context != global_namespace)"}]}