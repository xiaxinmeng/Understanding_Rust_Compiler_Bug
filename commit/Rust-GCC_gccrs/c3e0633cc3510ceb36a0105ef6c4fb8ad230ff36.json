{"sha": "c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlMDYzM2NjMzUxMGNlYjM2YTAxMDVlZjZjNGZiOGFkMjMwZmYzNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-21T10:08:03Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-21T10:08:03Z"}, "message": "2002-11-21  Michael Koch <konqueror@gmx.de>\n\n       * include/posix.h\n       (_Jv_socket): New method.\n       (_Jv_connect): New method.\n       (_Jv_close): New method.\n       (_Jv_platform_close_on_exec): Prefixed system function with \"::\".\n       (_Jv_bind): New method.\n       (_Jv_listen): New method.\n       (_Jv_write): New method.\n       (_Jv_read): New method.\n       * include/win32.h\n       (_Jv_socket): New method.\n       (_Jv_connect): New method.\n       (_Jv_close): New method.\n       (_Jv_bind): New method.\n       (_Jv_listen): New method.\n       (_Jv_write): New method.\n       (_Jv_read): New method.\n       * java/net/natNetworkInterface.cc:\n       Include platform.h, removed inclusion of socket.h\n       (getRealNetworkInterfaces): Replaced ::socket() by _Jv_socket() and\n       ::close() by _Jv_close().\n       * java/net/natPlainDatagramSocketImpl.cc:\n       Removed include of socket.h, definition of NATIVE_CLOSE and _Jv_bind,\n       added some new lines to make code more readable.\n       (create): Replaced ::socket() by _Jv_socket().\n       (close): Replaced NATIVE_CLOSE() by _Jv_close().\n       * java/net/natPlainSocketImpl.cc:\n       Removed definition of NATIVE_CLOSE, _Jv_bind, Jv_connect and _Jv_accept,\n       removed include of socket.h, removed some windows defines\n       (now in include/win32.h).\n       (create): Replaced ::socket() by _Jv_socket().\n       (close): Replaced NATIVE_CLOSE() by _Jv_close().\n       (write): Replaced ::read by _Jv_write().\n       (read): Replaced ::read by _Jv_read().\n\nFrom-SVN: r59338", "tree": {"sha": "795095557dd4555cce7687419b819d95b30d4b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/795095557dd4555cce7687419b819d95b30d4b74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/comments", "author": null, "committer": null, "parents": [{"sha": "0e4f7d33ad125d023fc7d03a46a732e1eecbf4c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4f7d33ad125d023fc7d03a46a732e1eecbf4c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4f7d33ad125d023fc7d03a46a732e1eecbf4c7"}], "stats": {"total": 161, "additions": 153, "deletions": 8}, "files": [{"sha": "4fcd4d0ed19367b8cf49339a1e5c1be70e56007b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36", "patch": "@@ -1,3 +1,40 @@\n+2002-11-21  Michael Koch <konqueror@gmx.de>\n+\n+\t* include/posix.h\n+\t(_Jv_socket): New method.\n+\t(_Jv_connect): New method.\n+\t(_Jv_close): New method.\n+\t(_Jv_platform_close_on_exec): Prefixed system function with \"::\".\n+\t(_Jv_bind): New method.\n+\t(_Jv_listen): New method.\n+\t(_Jv_write): New method.\n+\t(_Jv_read): New method.\n+\t* include/win32.h\n+\t(_Jv_socket): New method.\n+\t(_Jv_connect): New method.\n+\t(_Jv_close): New method.\n+\t(_Jv_bind): New method.\n+\t(_Jv_listen): New method.\n+\t(_Jv_write): New method.\n+\t(_Jv_read): New method.\n+\t* java/net/natNetworkInterface.cc:\n+\tInclude platform.h, removed inclusion of socket.h\n+\t(getRealNetworkInterfaces): Replaced ::socket() by _Jv_socket() and\n+\t::close() by _Jv_close().\n+\t* java/net/natPlainDatagramSocketImpl.cc:\n+\tRemoved include of socket.h, definition of NATIVE_CLOSE and _Jv_bind,\n+\tadded some new lines to make code more readable.\n+\t(create): Replaced ::socket() by _Jv_socket().\n+\t(close): Replaced NATIVE_CLOSE() by _Jv_close().\n+\t* java/net/natPlainSocketImpl.cc:\n+\tRemoved definition of NATIVE_CLOSE, _Jv_bind, Jv_connect and _Jv_accept,\n+\tremoved include of socket.h, removed some windows defines\n+\t(now in include/win32.h).\n+\t(create): Replaced ::socket() by _Jv_socket().\n+\t(close): Replaced NATIVE_CLOSE() by _Jv_close().\n+\t(write): Replaced ::read by _Jv_write().\n+\t(read): Replaced ::read by _Jv_read().\n+\n 2002-11-20  Michael Koch <konqueror@gmx.de>\n \n \t* Makefile.am (ordinary_java_source_files):"}, {"sha": "975b93c56f40e576b27c47afe67ec7d2f20a27d2", "filename": "libjava/include/posix.h", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36", "patch": "@@ -27,6 +27,10 @@ details.  */\n #include <sys/select.h>\n #endif\n \n+#ifdef HAVE_SYS_SOCKET_H\n+#include <sys/socket.h>\n+#endif\n+\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n@@ -41,11 +45,61 @@ extern jlong _Jv_platform_gettimeofday ();\n extern void _Jv_platform_initialize (void);\n extern void _Jv_platform_initProperties (java::util::Properties*);\n \n+static inline int\n+_Jv_socket (int domain, int type, int protocol)\n+{\n+  return ::socket (domain, type, protocol);\n+}\n+\n+inline int\n+_Jv_connect (jint fd, sockaddr *ptr, int len)\n+{\n+   return ::connect (fd, ptr, len);\n+}\n+\n+inline int\n+_Jv_close (jint fd)\n+{\n+  return ::close (fd);\n+}\n+\n inline void\n _Jv_platform_close_on_exec (jint fd)\n {\n   // Ignore errors.\n-  fcntl (fd, F_SETFD, FD_CLOEXEC);\n+  ::fcntl (fd, F_SETFD, FD_CLOEXEC);\n }\n \n+// Avoid macro definitions of bind from system headers, e.g. on\n+// Solaris 7 with _XOPEN_SOURCE.  FIXME\n+inline int\n+_Jv_bind (int fd, struct sockaddr *addr, int addrlen)\n+{\n+  return ::bind (fd, addr, addrlen);\n+}\n+\n+// Same problem with accept on Tru64 UNIX with _POSIX_PII_SOCKET\n+inline int\n+_Jv_accept (int fd, struct sockaddr *addr, socklen_t *addrlen)\n+{\n+  return ::accept (fd, addr, addrlen);\n+}\n+\n+inline int\n+_Jv_listen (int fd, int backlog)\n+{\n+  return ::listen (fd, backlog);\n+}\n+\n+inline int\n+_Jv_write(int s, void *buf, int len)\n+{\n+  return ::write (s, buf, len);\n+}\n+\n+inline int\n+_Jv_read(int s, void *buf, int len)\n+{\n+  return ::read (s, buf, len);\n+}\n #endif"}, {"sha": "3965cb2575ff667d731a76f2411abafa63e5e974", "filename": "libjava/include/win32.h", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/libjava%2Finclude%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/libjava%2Finclude%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32.h?ref=c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36", "patch": "@@ -22,16 +22,71 @@ details.  */\n \n #include <io.h>\n \n+// these errors cannot occur on Win32\n+#define ENOTCONN 0\n+#define ECONNRESET 0\n+\n+#ifndef ENOPROTOOPT\n+#define ENOPROTOOPT 109\n+#endif\n+\n extern void _Jv_platform_initialize (void);\n extern void _Jv_platform_initProperties (java::util::Properties*);\n extern jlong _Jv_platform_gettimeofday ();\n \n+static inline int\n+_Jv_socket (int domain, int type, int protocol)\n+{\n+  return ::socket (domain, type, protocol);\n+}\n+\n+inline int\n+_Jv_connect (jint fd, sockaddr *ptr, int len)\n+{\n+   return ::connect (fd, ptr, len);\n+}\n+\n+inline int\n+_Jv_close (jint fd)\n+{\n+  return ::closesocket (fd);\n+}\n+\n inline void\n _Jv_platform_close_on_exec (jint)\n {\n   // Ignore.\n }\n \n+inline int\n+_Jv_bind (int fd, struct sockaddr *addr, int addrlen)\n+{\n+  return ::bind (fd, addr, addrlen);\n+}\n+\n+inline int\n+_Jv_accept (int fd, struct sockaddr *addr, socklen_t *addrlen)\n+{\n+  return ::accept (fd, addr, addrlen);\n+}\n+\n+inline int\n+_Jv_listen (int fd, int backlog)\n+{\n+  return ::listen (fd, backlog);\n+}\n+\n+inline int\n+_Jv_write(int s, void *buf, int len)\n+{\n+  return ::send (s, (char*) buf, len, 0);\n+}\n+\n+inline int\n+_Jv_read(int s, void *buf, int len)\n+{\n+  return ::recv (s, (char*) buf, len, 0);\n+}\n #define HAVE_BACKTRACE\n \n /* Store up to SIZE return address of the current program state in"}, {"sha": "65bcf16a2c5c811c94c3cb00fb11e18fb8df0ab6", "filename": "libjava/java/net/natNetworkInterface.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc?ref=c3e0633cc3510ceb36a0105ef6c4fb8ad230ff36", "patch": "@@ -9,6 +9,7 @@ Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n #include <config.h>\n+#include <platform.h>\n \n #ifdef WIN32\n \n@@ -27,9 +28,6 @@ details.  */\n \n #include <sys/param.h>\n #include <sys/types.h>\n-#ifdef HAVE_SYS_SOCKET_H\n-#include <sys/socket.h>\n-#endif\n #ifdef HAVE_NETINET_IN_H\n #include <netinet/in.h>\n #endif\n@@ -83,7 +81,7 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n   if_data.ifc_buf = NULL;\n \n   // Open a (random) socket to have a file descriptor for the ioctl calls.\n-  fd = ::socket (PF_INET, SOCK_DGRAM, htons (IPPROTO_IP));\n+  fd = _Jv_socket (PF_INET, SOCK_DGRAM, htons (IPPROTO_IP));\n \n   if (fd < 0)\n     throw new ::java::net::SocketException;\n@@ -96,7 +94,7 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n       \n       if_data.ifc_len = sizeof (struct ifreq) * num_interfaces;\n       if_data.ifc_buf =\n-\t(char*) _Jv_Realloc (if_data.ifc_buf, if_data.ifc_len);\n+        (char*) _Jv_Realloc (if_data.ifc_buf, if_data.ifc_len);\n \n       // Try to get all local interfaces.\n       if (::ioctl (fd, SIOCGIFCONF, &if_data) < 0)\n@@ -106,6 +104,7 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n \n   // Get addresses of all interfaces.\n   if_record = if_data.ifc_req;\n+\n   for (int n = 0; n < if_data.ifc_len; n += sizeof (struct ifreq))\n     {\n       struct ifreq ifr;\n@@ -115,7 +114,7 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n \n       // Try to get the IPv4-address of the local interface\n       if (::ioctl (fd, SIOCGIFADDR, &ifr) < 0)\n-\tthrow new java::net::SocketException;\n+        throw new java::net::SocketException;\n \n       int len = 4;\n       struct sockaddr_in sa = *((sockaddr_in*) &(ifr.ifr_addr));\n@@ -136,7 +135,7 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n   _Jv_Free (if_data.ifc_buf);\n   \n   if (fd >= 0)\n-    ::close (fd);\n+    _Jv_close (fd);\n   \n   return ht;\n #endif /* WIN32 */"}]}