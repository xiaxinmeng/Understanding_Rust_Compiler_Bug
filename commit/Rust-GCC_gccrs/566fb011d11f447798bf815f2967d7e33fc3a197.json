{"sha": "566fb011d11f447798bf815f2967d7e33fc3a197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2ZmIwMTFkMTFmNDQ3Nzk4YmY4MTVmMjk2N2Q3ZTMzZmMzYTE5Nw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-11-17T03:25:59Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-11-17T03:25:59Z"}, "message": "extend.texi: Various copy-edits to comply with GCC coding standards for spelling...\n\n2012-11-16  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi: Various copy-edits to comply with GCC coding\n\tstandards for spelling, terminology, and markup, including use of\n\tAmerican spelling, correct use of terms like \"back end\" and\n\t\"run time\", use correct name for GCC, use \"@:\" markup.\n\nFrom-SVN: r193583", "tree": {"sha": "eb6eef42658814ff71b98813b254a293c9331680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb6eef42658814ff71b98813b254a293c9331680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/566fb011d11f447798bf815f2967d7e33fc3a197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566fb011d11f447798bf815f2967d7e33fc3a197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/566fb011d11f447798bf815f2967d7e33fc3a197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566fb011d11f447798bf815f2967d7e33fc3a197/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95d89457e2f8878a33b5f20009c170d898b8e5b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d89457e2f8878a33b5f20009c170d898b8e5b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d89457e2f8878a33b5f20009c170d898b8e5b1"}], "stats": {"total": 169, "additions": 90, "deletions": 79}, "files": [{"sha": "a7a10b73e1ae97c739e610254bd2112259ff622e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566fb011d11f447798bf815f2967d7e33fc3a197/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566fb011d11f447798bf815f2967d7e33fc3a197/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=566fb011d11f447798bf815f2967d7e33fc3a197", "patch": "@@ -1,3 +1,10 @@\n+2012-11-16  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi: Various copy-edits to comply with GCC coding\n+\tstandards for spelling, terminology, and markup, including use of\n+\tAmerican spelling, correct use of terms like \"back end\" and\n+\t\"run time\", use correct name for GCC, use \"@:\" markup.\n+\n 2012-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/55329"}, {"sha": "16fb0332c057da17fafc801e062a1e1cb2473a5c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 83, "deletions": 79, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566fb011d11f447798bf815f2967d7e33fc3a197/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566fb011d11f447798bf815f2967d7e33fc3a197/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=566fb011d11f447798bf815f2967d7e33fc3a197", "patch": "@@ -601,7 +601,7 @@ an inline function.  It can be used only in inline functions that\n are always inlined, never compiled as a separate function, such\n as those using @code{__attribute__ ((__always_inline__))} or\n @code{__attribute__ ((__gnu_inline__))} extern inline functions.\n-For example following does link or runtime checking of open\n+For example following does link- or run-time checking of open\n arguments for optimized code:\n @smallexample\n #ifdef __OPTIMIZE__\n@@ -916,7 +916,7 @@ examine and set these two fictitious variables with your debugger.\n @cindex @code{W} floating point suffix\n @cindex @code{Q} floating point suffix\n \n-As an extension, the GNU C compiler supports additional floating\n+As an extension, GNU C supports additional floating\n types, @code{__float80} and @code{__float128} to support 80-bit\n (@code{XFmode}) and 128-bit (@code{TFmode}) floating types.\n Support for additional types includes the arithmetic operators:\n@@ -1000,7 +1000,7 @@ as library calls.\n @cindex @code{DD} integer suffix\n @cindex @code{DL} integer suffix\n \n-As an extension, the GNU C compiler supports decimal floating types as\n+As an extension, GNU C supports decimal floating types as\n defined in the N1312 draft of ISO/IEC WDTR24732.  Support for decimal\n floating types in GCC will evolve as the draft technical report changes.\n Calling conventions for any target might also change.  Not all targets\n@@ -1106,7 +1106,7 @@ extension for floating-point constants of type @code{float}.\n @cindex @code{ULK} fixed-suffix\n @cindex @code{ULLK} fixed-suffix\n \n-As an extension, the GNU C compiler supports fixed-point types as\n+As an extension, GNU C supports fixed-point types as\n defined in the N1169 draft of ISO/IEC DTR 18037.  Support for fixed-point\n types in GCC will evolve as the draft technical report changes.\n Calling conventions for any target might also change.  Not all targets\n@@ -1218,7 +1218,7 @@ Fixed-point types are supported by the DWARF2 debug information format.\n @section Named Address Spaces\n @cindex Named Address Spaces\n \n-As an extension, the GNU C compiler supports named address spaces as\n+As an extension, GNU C supports named address spaces as\n defined in the N1275 draft of ISO/IEC DTR 18037.  Support for named\n address spaces in GCC will evolve as the draft technical report\n changes.  Calling conventions for any target might also change.  At\n@@ -1345,7 +1345,7 @@ together with attribute @code{progmem}.\n @item\n Reading across the 64@tie{}KiB section boundary of\n the @code{__flash} or @code{__flash@var{N}} address spaces\n-shows undefined behaviour. The only address space that\n+shows undefined behavior. The only address space that\n supports reading across the 64@tie{}KiB flash segment boundaries is\n @code{__memx}.\n \n@@ -1463,14 +1463,14 @@ initialized, as if they were flexible arrays.  In addition to those\n cases that were useful, it also allowed initializations in situations\n that would corrupt later data.  Non-empty initialization of zero-length\n arrays is now treated like any case where there are more initializer\n-elements than the array holds, in that a suitable warning about \"excess\n-elements in array\" is given, and the excess elements (all of them, in\n+elements than the array holds, in that a suitable warning about ``excess\n+elements in array'' is given, and the excess elements (all of them, in\n this case) are ignored.\n \n Instead GCC allows static initialization of flexible array members.\n This is equivalent to defining a new structure containing the original\n structure followed by an array of sufficient size to contain the data.\n-I.e.@: in the following, @code{f1} is constructed as if it were declared\n+E.g.@: in the following, @code{f1} is constructed as if it were declared\n like @code{f2}.\n \n @smallexample\n@@ -1693,7 +1693,7 @@ yet been replaced with spaces.\n In ISO C99, arrays that are not lvalues still decay to pointers, and\n may be subscripted, although they may not be modified or used after\n the next sequence point and the unary @samp{&} operator may not be\n-applied to them.  As an extension, GCC allows such arrays to be\n+applied to them.  As an extension, GNU C allows such arrays to be\n subscripted in C90 mode, though otherwise they do not decay to\n pointers outside C99 mode.  For example,\n this is valid in GNU C though not valid in C90:\n@@ -2072,7 +2072,7 @@ hack ((union foo) x);\n @cindex code, mixed with declarations\n \n ISO C99 and ISO C++ allow declarations and code to be freely mixed\n-within compound statements.  As an extension, GCC also allows this in\n+within compound statements.  As an extension, GNU C also allows this in\n C90 mode.  For example, you could do:\n \n @smallexample\n@@ -2272,7 +2272,7 @@ the current inlining parameters.\n If this attribute is used on a function declaration and a call to such a function\n is not eliminated through dead code elimination or other optimizations, an error\n that includes @var{message} is diagnosed.  This is useful\n-for compile time checking, especially together with @code{__builtin_constant_p}\n+for compile-time checking, especially together with @code{__builtin_constant_p}\n and inline functions where checking the inline function arguments is not\n possible through @code{extern char [(condition) ? 1 : -1];} tricks.\n While it is possible to leave the function undefined and thus invoke\n@@ -2285,7 +2285,7 @@ functions or when not emitting debugging information.\n If this attribute is used on a function declaration and a call to such a function\n is not eliminated through dead code elimination or other optimizations, a warning\n that includes @var{message} is diagnosed.  This is useful\n-for compile time checking, especially together with @code{__builtin_constant_p}\n+for compile-time checking, especially together with @code{__builtin_constant_p}\n and inline functions.  While it is possible to define the function with\n a message in @code{.gnu.warning*} section, when using this attribute the problem\n is diagnosed earlier and with exact location of the call even in presence\n@@ -2403,9 +2403,9 @@ explicitly specify any other visibility.\n \n In previous versions of GCC, the @code{dllexport} attribute was ignored\n for inlined functions, unless the @option{-fkeep-inline-functions} flag\n-had been used.  The default behaviour now is to emit all dllexported\n+had been used.  The default behavior now is to emit all dllexported\n inline functions; however, this can cause object file-size bloat, in\n-which case the old behaviour can be restored by using\n+which case the old behavior can be restored by using\n @option{-fno-keep-inline-dllexport}.\n \n The attribute is also ignored for undefined symbols.\n@@ -2457,7 +2457,7 @@ and, for either of those two conditions, the class also has an inline\n constructor or destructor and has a key function that is defined in\n the current translation unit.\n \n-For Microsoft Windows based targets the use of the @code{dllimport}\n+For Microsoft Windows targets the use of the @code{dllimport}\n attribute on functions is not necessary, but provides a small\n performance benefit by eliminating a thunk in the DLL@.  The use of the\n @code{dllimport} attribute on imported variables was required on older\n@@ -2544,7 +2544,7 @@ function pops the arguments off the stack.\n If the number of arguments is variable all arguments are pushed on the\n stack.\n The @code{thiscall} attribute is intended for C++ non-static member functions.\n-As gcc extension this calling convention can be used for C-functions\n+As a GCC extension, this calling convention can be used for C functions\n and for static member methods.\n \n @item format (@var{archetype}, @var{string-index}, @var{first-to-check})\n@@ -2574,7 +2574,7 @@ interpreted, and should be @code{printf}, @code{scanf}, @code{strftime},\n MinGW targets, @code{ms_printf}, @code{ms_scanf}, and\n @code{ms_strftime} are also present.\n @var{archtype} values such as @code{printf} refer to the formats accepted\n-by the system's C run-time library, while @code{gnu_} values always refer\n+by the system's C runtime library, while @code{gnu_} values always refer\n to the formats accepted by the GNU C Library.  On Microsoft Windows\n targets, @code{ms_} values refer to the formats accepted by the\n @file{msvcrt.dll} library.\n@@ -2824,7 +2824,7 @@ Permissible values for these parameters are: @w{@code{reset}},\n @w{@code{timer0}}, @w{@code{timer1}}, @w{@code{message}},\n @w{@code{dma0}}, @w{@code{dma1}}, @w{@code{wand}} and @w{@code{swi}}.\n Multiple parameters indicate that multiple entries in the interrupt\n-vector table should be initialized for this function, i.e. for each\n+vector table should be initialized for this function, i.e.@: for each\n parameter @w{@var{name}}, a jump to the function is emitted in\n the section @w{ivt_entry_@var{name}}.  The parameter(s) may be omitted\n entirely, in which case no interrupt vector table entry is provided.\n@@ -2892,7 +2892,7 @@ void __attribute__ ((interrupt, use_shadow_register_set,\n @end smallexample\n \n On RL78, use @code{brk_interrupt} instead of @code{interrupt} for\n-handlers intended to be used with the @code{BRK} opcode (i.e.  those\n+handlers intended to be used with the @code{BRK} opcode (i.e.@: those\n that must end with @code{RETB} instead of @code{RETI}).\n \n @item interrupt_handler\n@@ -2957,7 +2957,7 @@ compliant way to write such a signal handler is to declare such variables\n \n The attribute has no effect on functions defined within the current compilation\n unit.  This is to allow easy merging of multiple compilation units into one,\n-for example, by using the link time optimization.  For this reason the\n+for example, by using the link-time optimization.  For this reason the\n attribute is not allowed on types to annotate indirect calls.\n \n @item long_call/short_call\n@@ -3066,7 +3066,7 @@ while the @code{sysv_abi} attribute tells the compiler to use the ABI\n used on GNU/Linux and other systems.  The default is to use the Microsoft ABI\n when targeting Windows.  On all other systems, the default is the x86/AMD ABI.\n \n-Note, the @code{ms_abi} attribute for Windows 64-bit targets currently\n+Note, the @code{ms_abi} attribute for Microsoft Windows 64-bit targets currently\n requires the @option{-maccumulate-outgoing-args} option.\n \n @item callee_pop_aggregate_return (@var{number})\n@@ -3079,14 +3079,15 @@ zero -, or if the callee is responsible to pop hidden pointer - @var{number}\n equal to one.  The default i386 ABI assumes that the callee pops the\n stack for hidden pointer.\n \n-Note that on 32-bit i386 Windows targets, the compiler assumes that the\n+Note that on 32-bit i386 Microsoft Windows targets,\n+the compiler assumes that the\n caller pops the stack for hidden pointer.\n \n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute\n \n On 32-bit i[34567]86-*-* targets and 64-bit x86_64-*-* targets, you can use\n-this function attribute to make gcc generate the \"hot-patching\" function\n+this function attribute to make GCC generate the ``hot-patching'' function\n prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n and newer.\n \n@@ -3111,7 +3112,7 @@ option.\n \n On MeP targets this attribute causes the compiler to assume the called\n function is close enough to use the normal calling convention,\n-overriding the @code{-mtf} command line option.\n+overriding the @code{-mtf} command-line option.\n \n @item nesting\n @cindex Allow nesting in an interrupt handler on the Blackfin processor.\n@@ -3431,7 +3432,7 @@ floating-point arguments on the stack.\n @cindex @code{force_align_arg_pointer} attribute\n On the Intel x86, the @code{force_align_arg_pointer} attribute may be\n applied to individual function definitions, generating an alternate\n-prologue and epilogue that realigns the runtime stack if necessary.\n+prologue and epilogue that realigns the run-time stack if necessary.\n This supports mixing legacy codes that run with a 4-byte aligned stack\n with modern codes that keep a 16-byte stack for SSE compatibility.\n \n@@ -3754,7 +3755,7 @@ On the PowerPC, the following options are allowed:\n @itemx no-altivec\n @cindex @code{target(\"altivec\")} attribute\n Generate code that uses (does not use) AltiVec instructions.  In\n-32-bit code, you cannot enable Altivec instructions unless\n+32-bit code, you cannot enable AltiVec instructions unless\n @option{-mabi=altivec} is used on the command line.\n \n @item cmpb\n@@ -3873,7 +3874,7 @@ do small block moves.\n Generate code that uses (does not use) vector/scalar (VSX)\n instructions, and also enable the use of built-in functions that allow\n more direct access to the VSX instruction set.  In 32-bit code, you\n-cannot enable VSX or Altivec instructions unless\n+cannot enable VSX or AltiVec instructions unless\n @option{-mabi=altivec} is used on the command line.\n \n @item friz\n@@ -3907,7 +3908,7 @@ away so that a longer more expensive calling sequence is required.\n @cindex @code{target(\"cpu=@var{CPU}\")} attribute\n Specify the architecture to generate code for when compiling the\n function.  If you select the @code{target(\"cpu=power7\")} attribute when\n-generating 32-bit code, VSX and Altivec instructions are not generated\n+generating 32-bit code, VSX and AltiVec instructions are not generated\n unless you use the @option{-mabi=altivec} option on the command line.\n \n @item tune=@var{TUNE}\n@@ -3919,19 +3920,19 @@ compilation tunes for the @var{CPU} architecture, and not the\n default tuning specified on the command line.\n @end table\n \n-On the 386/x86_64 and PowerPC backends, you can use either multiple\n+On the 386/x86_64 and PowerPC back ends, you can use either multiple\n strings to specify multiple options, or you can separate the option\n with a comma (@code{,}).\n \n-On the 386/x86_64 and PowerPC backends, the inliner does not inline a\n+On the 386/x86_64 and PowerPC back ends, the inliner does not inline a\n function that has different target options than the caller, unless the\n callee has a subset of the target options of the caller.  For example\n a function declared with @code{target(\"sse3\")} can inline a function\n with @code{target(\"sse2\")}, since @code{-msse3} implies @code{-msse2}.\n \n The @code{target} attribute is not implemented in GCC versions earlier\n-than 4.4 for the i386/x86_64 and 4.6 for the PowerPC backends.  It is\n-not currently implemented for other backends.\n+than 4.4 for the i386/x86_64 and 4.6 for the PowerPC back ends.  It is\n+not currently implemented for other back ends.\n \n @item tiny_data\n @cindex tiny data section on the H8/300H and H8S\n@@ -4083,7 +4084,7 @@ visibility from the template is used.\n On MeP, the @code{vliw} attribute tells the compiler to emit\n instructions in VLIW mode instead of core mode.  Note that this\n attribute is not allowed unless a VLIW coprocessor has been configured\n-and enabled through command line options.\n+and enabled through command-line options.\n \n @item warn_unused_result\n @cindex @code{warn_unused_result} attribute\n@@ -4560,7 +4561,7 @@ The default alignment is sufficient for all scalar types, but may not be\n enough for all vector types on a target that supports vector operations.\n The default alignment is fixed for a particular target ABI.\n \n-Gcc also provides a target specific macro @code{__BIGGEST_ALIGNMENT__},\n+GCC also provides a target specific macro @code{__BIGGEST_ALIGNMENT__},\n which is the largest alignment ever used for any data type on the\n target machine you are compiling for.  For example, you could write:\n \n@@ -4574,7 +4575,7 @@ often make copy operations more efficient, because the compiler can\n use whatever instructions copy the biggest chunks of memory when\n performing copies to or from the variables or fields that you have\n aligned this way.  Note that the value of @code{__BIGGEST_ALIGNMENT__}\n-may change depending on command line options.\n+may change depending on command-line options.\n \n When used on a struct, or struct member, the @code{aligned} attribute can\n only increase the alignment; in order to decrease it, the @code{packed}\n@@ -6168,7 +6169,7 @@ to fall through to the next statement.\n This form of @code{asm} is restricted to not have outputs.  This is due\n to a internal restriction in the compiler that control transfer instructions\n cannot have outputs.  This restriction on @code{asm goto} may be lifted\n-in some future version of the compiler.  In the mean time, @code{asm goto}\n+in some future version of the compiler.  In the meantime, @code{asm goto}\n may include a memory clobber, and so leave outputs in memory.\n \n @smallexample\n@@ -6241,7 +6242,7 @@ occasions we'd like to keep the overhead to the absolute minimum.\n The normal code path consists of a single @code{nop} instruction.\n However, we record the address of this @code{nop} together with the\n address of a label that calls the @code{trace} function.  This allows\n-the @code{nop} instruction to be patched at runtime to be an\n+the @code{nop} instruction to be patched at run time to be an\n unconditional branch to the stored label.  It is assumed that an\n optimizing compiler moves the labeled block out of line, to\n optimize the fall through path from the @code{asm}.\n@@ -6260,7 +6261,7 @@ statements in the pattern of the @code{asm} and multiplying that by the\n length of the longest instruction on that processor.  Statements in the\n @code{asm} are identified by newline characters and whatever statement\n separator characters are supported by the assembler; on most processors\n-this is the `@code{;}' character.\n+this is the @samp{;} character.\n \n Normally, GCC's estimate is perfectly adequate to ensure that correct\n code is generated, but it is possible to confuse the compiler if you use\n@@ -6280,7 +6281,7 @@ stack-like regs:\n @item\n Given a set of input regs that die in an asm_operands, it is\n necessary to know which are implicitly popped by the asm, and\n-which must be explicitly popped by gcc.\n+which must be explicitly popped by GCC@.\n \n An input reg that is implicitly popped by the asm must be\n explicitly clobbered, unless it is constrained to match an\n@@ -6903,7 +6904,7 @@ a = l + a;    /* Error, cannot convert long to int. */\n \n Vectors can be subscripted as if the vector were an array with\n the same number of elements and base type.  Out of bound accesses\n-invoke undefined behavior at runtime.  Warnings for out of bound\n+invoke undefined behavior at run time.  Warnings for out of bound\n accesses for vector subscription can be enabled with\n @option{-Warray-bounds}.\n \n@@ -7005,7 +7006,7 @@ The following built-in functions\n are intended to be compatible with those described\n in the @cite{Intel Itanium Processor-specific Application Binary Interface},\n section 7.4.  As such, they depart from the normal GCC practice of using\n-the ``__builtin_'' prefix, and further that they are overloaded such that\n+the @samp{__builtin_} prefix, and further that they are overloaded such that\n they work on multiple types.\n \n The definition given in the Intel documentation allows only for the use of\n@@ -7155,19 +7156,19 @@ Target architectures are encouraged to provide their own patterns for\n each of these built-in functions.  If no target is provided, the original \n non-memory model set of @samp{__sync} atomic built-in functions are\n utilized, along with any required synchronization fences surrounding it in\n-order to achieve the proper behaviour.  Execution in this case is subject\n+order to achieve the proper behavior.  Execution in this case is subject\n to the same restrictions as those built-in functions.\n \n If there is no pattern or mechanism to provide a lock free instruction\n sequence, a call is made to an external routine with the same parameters\n-to be resolved at runtime.\n+to be resolved at run time.\n \n The four non-arithmetic functions (load, store, exchange, and \n compare_exchange) all have a generic version as well.  This generic\n version works on any data type.  If the data type size maps to one\n of the integral sizes that may have lock free support, the generic\n version utilizes the lock free built-in function.  Otherwise an\n-external call is left to be resolved at runtime.  This external call is\n+external call is left to be resolved at run time.  This external call is\n the same format with the addition of a @samp{size_t} parameter inserted\n as the first parameter indicating the size of the object being pointed to.\n All objects must be the same size.\n@@ -7209,8 +7210,8 @@ efficiently as they could with a more appropriate implemention of the\n relaxed requirements.\n \n Note that the C++11 standard allows for the memory model parameter to be\n-determined at runtime rather than at compile time.  These built-in\n-functions map any runtime value to @code{__ATOMIC_SEQ_CST} rather\n+determined at run time rather than at compile time.  These built-in\n+functions map any run-time value to @code{__ATOMIC_SEQ_CST} rather\n than invoke a runtime library call or inline a switch statement.  This is\n standard compliant, safe, and the simplest approach for now.\n \n@@ -7336,8 +7337,8 @@ All memory models are valid.\n \n This built-in function performs an atomic test-and-set operation on\n the byte at @code{*@var{ptr}}.  The byte is set to some implementation\n-defined non-zero \"set\" value and the return value is @code{true} if and only\n-if the previous contents were \"set\".\n+defined nonzero ``set'' value and the return value is @code{true} if and only\n+if the previous contents were ``set''.\n \n All memory models are valid.\n \n@@ -7376,7 +7377,8 @@ All memory orders are valid.\n \n This built-in function returns true if objects of @var{size} bytes always\n generate lock free atomic instructions for the target architecture.  \n-@var{size} must resolve to a compile time constant and the result also resolves to compile time constant.\n+@var{size} must resolve to a compile-time constant and the result also\n+resolves to a compile-time constant.\n \n @var{ptr} is an optional pointer to the object that may be used to determine\n alignment.  A value of 0 indicates typical alignment should be used.  The \n@@ -7472,7 +7474,7 @@ it is known at compile time that the destination object will not\n be overflown.  If the compiler can determine at compile time the\n object will be always overflown, it issues a warning.\n \n-The intended use can be e.g.\n+The intended use can be e.g.@:\n \n @smallexample\n #undef memcpy\n@@ -7490,11 +7492,11 @@ memcpy (p, \"abcde\", n);\n memcpy (&buf[5], \"abcde\", 5);\n /* Destination is known, but the length is not known at compile time.\n    This will result in __memcpy_chk call that can check for overflow\n-   at runtime.  */\n+   at run time.  */\n memcpy (&buf[5], \"abcde\", n);\n /* Destination is known and it is known at compile time there will\n    be overflow.  There will be a warning and __memcpy_chk call that\n-   will abort the program at runtime.  */\n+   will abort the program at run time.  */\n memcpy (&buf[6], \"abcde\", 5);\n @end smallexample\n \n@@ -8180,7 +8182,7 @@ infinities, NaNs and negative zeros are involved.\n \n @deftypefn {Built-in Function} int __builtin_constant_p (@var{exp})\n You can use the built-in function @code{__builtin_constant_p} to\n-determine if a value is known to be constant at compile-time and hence\n+determine if a value is known to be constant at compile time and hence\n that GCC can perform constant-folding on expressions involving that\n value.  The argument of the function is the value to test.  The function\n returns the integer 1 if the argument is known to be a compile-time\n@@ -8333,7 +8335,7 @@ This function returns its first argument, and allows the compiler\n to assume that the returned pointer is at least @var{align} bytes\n aligned.  This built-in can have either two or three arguments,\n if it has three, the third argument should have integer type, and\n-if it is non-zero means misalignment offset.  For example:\n+if it is nonzero means misalignment offset.  For example:\n \n @smallexample\n void *x = __builtin_assume_aligned (arg, 16);\n@@ -8548,7 +8550,7 @@ significant bit position.  If @var{x} is 0, the result is undefined.\n @end deftypefn\n \n @deftypefn {Built-in Function} int __builtin_clrsb (int x)\n-Returns the number of leading redundant sign bits in @var{x}, i.e. the\n+Returns the number of leading redundant sign bits in @var{x}, i.e.@: the\n number of bits following the most significant bit that are identical\n to it.  There are no special cases for 0 or other values. \n @end deftypefn\n@@ -8937,7 +8939,7 @@ or if not a specific built-in is implemented or not. For example, if\n @code{__BUILTIN_AVR_NOP} is defined to @code{1} and undefined otherwise.\n \n The following built-in functions map to the respective machine\n-instruction, i.e. @code{nop}, @code{sei}, @code{cli}, @code{sleep},\n+instruction, i.e.@: @code{nop}, @code{sei}, @code{cli}, @code{sleep},\n @code{wdr}, @code{swap}, @code{fmul}, @code{fmuls}\n resp. @code{fmulsu}. The three @code{fmul*} built-ins are implemented\n as library call if no hardware multiplier is available.\n@@ -8963,7 +8965,7 @@ void __builtin_avr_delay_cycles (unsigned long ticks)\n @noindent\n @code{ticks} is the number of ticks to delay execution. Note that this\n built-in does not take into account the effect of interrupts that\n-might increase delay time. @code{ticks} must be a compile time\n+might increase delay time. @code{ticks} must be a compile-time\n integer constant; delays with a variable number of cycles are not supported.\n \n @smallexample\n@@ -9047,7 +9049,7 @@ GCC provides many FR-V-specific built-in functions.  In general,\n these functions are intended to be compatible with those described\n by @cite{FR-V Family, Softune C/C++ Compiler Manual (V6), Fujitsu\n Semiconductor}.  The two exceptions are @code{__MDUNPACKH} and\n-@code{__MBTOHE}, the gcc forms of which pass 128-bit values by\n+@code{__MBTOHE}, the GCC forms of which pass 128-bit values by\n pointer rather than by value.\n \n Most of the functions are named after specific FR-V instructions.\n@@ -9475,7 +9477,7 @@ of computers, depending on the command-line switches used.\n If you specify command-line switches such as @option{-msse},\n the compiler could use the extended instruction sets even if the built-ins\n are not used explicitly in the program.  For this reason, applications\n-that perform runtime CPU detection must compile separate files for each\n+that perform run-time CPU detection must compile separate files for each\n supported architecture, using the appropriate flags.  In particular,\n the file containing the CPU detection code should be compiled without\n these options.\n@@ -9563,8 +9565,9 @@ void *memcpy (void *, const void *, size_t)\n @end deftypefn\n \n @deftypefn {Built-in Function} int __builtin_cpu_is (const char *@var{cpuname})\n-This function returns a positive integer if the runtime cpu is of type @var{cpuname}\n- and returns @code{0} otherwise. The following cpu names can be detected:\n+This function returns a positive integer if the run-time CPU\n+is of type @var{cpuname}\n+and returns @code{0} otherwise. The following CPU names can be detected:\n \n @table @samp\n @item intel\n@@ -9636,8 +9639,9 @@ else\n @end deftypefn\n \n @deftypefn {Built-in Function} int __builtin_cpu_supports (const char *@var{feature})\n-This function returns a positive integer if the runtime cpu supports @var{feature}\n- and returns @code{0} otherwise. The following features can be detected:\n+This function returns a positive integer if the run-time CPU\n+supports @var{feature}\n+and returns @code{0} otherwise. The following features can be detected:\n \n @table @samp\n @item cmov\n@@ -13711,7 +13715,7 @@ void vec_vsx_st (vector bool char, int, signed char *);\n @end smallexample\n \n Note that the @samp{vec_ld} and @samp{vec_st} built-in functions always\n-generate the Altivec @samp{LVX} and @samp{STVX} instructions even\n+generate the AltiVec @samp{LVX} and @samp{STVX} instructions even\n if the VSX instruction set is available.  The @samp{vec_vsx_ld} and\n @samp{vec_vsx_st} built-in functions always generate the VSX @samp{LXVD2X},\n @samp{LXVW4X}, @samp{STXVD2X}, and @samp{STXVW4X} instructions.\n@@ -14296,7 +14300,7 @@ char port3;\n \n @item custom io_volatile (on|off)\n @cindex pragma, custom io_volatile\n-Overrides the command line option @code{-mio-volatile} for the current\n+Overrides the command-line option @code{-mio-volatile} for the current\n file.  Note that for compatibility with future GCC releases, this\n option should only be used once before any @code{io} variables in each\n file.\n@@ -14514,7 +14518,7 @@ multiple @code{#pragma pack(@var{n})} instances and finalized by a single\n @code{#pragma pack(pop)}.\n @end enumerate\n \n-Some targets, e.g.@: i386 and powerpc, support the @code{ms_struct}\n+Some targets, e.g.@: i386 and PowerPC, support the @code{ms_struct}\n @code{#pragma} which lays out a structure as the documented\n @code{__attribute__ ((ms_struct))}.\n @enumerate\n@@ -14589,7 +14593,7 @@ after a line do not affect diagnostics caused by that line.\n \n Causes GCC to remember the state of the diagnostics as of each\n @code{push}, and restore to that point at each @code{pop}.  If a\n-@code{pop} has no matching @code{push}, the command line options are\n+@code{pop} has no matching @code{push}, the command-line options are\n restored.\n \n @example\n@@ -14601,7 +14605,7 @@ restored.\n #pragma GCC diagnostic pop\n   foo(c);\t\t\t/* error is given for this one */\n #pragma GCC diagnostic pop\n-  foo(d);\t\t\t/* depends on command line options */\n+  foo(d);\t\t\t/* depends on command-line options */\n @end example\n \n @end table\n@@ -14706,8 +14710,8 @@ function.  The parenthesis around the options is optional.\n @code{target} attribute and the attribute syntax.\n \n The @code{#pragma GCC target} attribute is not implemented in GCC versions earlier\n-than 4.4 for the i386/x86_64 and 4.6 for the PowerPC backends.  At\n-present, it is not implemented for other backends.\n+than 4.4 for the i386/x86_64 and 4.6 for the PowerPC back ends.  At\n+present, it is not implemented for other back ends.\n @end table\n \n @table @code\n@@ -14840,7 +14844,7 @@ These usages are only permitted when they are not ambiguous.\n \n Thread-local storage (@acronym{TLS}) is a mechanism by which variables\n are allocated such that there is one instance of the variable per extant\n-thread.  The run-time model GCC uses to implement this originates\n+thread.  The runtime model GCC uses to implement this originates\n in the IA-64 processor-specific ABI, but has since been migrated\n to other processors as well.  It requires significant support from\n the linker (@command{ld}), dynamic linker (@command{ld.so}), and\n@@ -14866,7 +14870,7 @@ static, function-scoped static, or static data member of a class.  It may\n not be applied to block-scoped automatic or non-static data member.\n \n When the address-of operator is applied to a thread-local variable, it is\n-evaluated at run-time and returns the address of the current thread's\n+evaluated at run time and returns the address of the current thread's\n instance of that variable.  An address so obtained may be used by any\n thread.  When a thread terminates, any pointers to thread-local variables\n in that thread become invalid.\n@@ -14879,7 +14883,7 @@ standard.\n \n See @uref{http://www.akkadia.org/drepper/tls.pdf,\n ELF Handling For Thread-Local Storage} for a detailed explanation of\n-the four thread-local storage addressing models, and how the run-time\n+the four thread-local storage addressing models, and how the runtime\n is expected to function.\n \n @menu\n@@ -15141,7 +15145,7 @@ Predefined Macros,cpp,The GNU C Preprocessor}).\n * Namespace Association:: Strong using-directives for namespace association.\n * Type Traits::         Compiler support for type traits\n * Java Exceptions::     Tweaking exception handling to work with Java.\n-* Deprecated Features:: Things will disappear from g++.\n+* Deprecated Features:: Things will disappear from G++.\n * Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n @end menu\n \n@@ -15189,7 +15193,7 @@ references.  Again, if you wish to force a read, cast the reference to\n an rvalue.\n \n G++ implements the same behavior as GCC does when assigning to a\n-volatile object -- there is no reread of the assigned-to object, the\n+volatile object---there is no reread of the assigned-to object, the\n assigned rvalue is reused.  Note that in C++ assignment expressions\n are lvalues, and if used as an lvalue, the volatile object is\n referred to.  For instance, @var{vref} refers to @var{vobj}, as\n@@ -15296,7 +15300,7 @@ C++ requires information about types to be written out in order to\n implement @samp{dynamic_cast}, @samp{typeid} and exception handling.\n For polymorphic classes (classes with virtual functions), the @samp{type_info}\n object is written out along with the vtable so that @samp{dynamic_cast}\n-can determine the dynamic type of a class object at runtime.  For all\n+can determine the dynamic type of a class object at run time.  For all\n other types, we write out the @samp{type_info} object when it is used: when\n applying @samp{typeid} to an expression, throwing an object, or\n referring to a type in a catch clause or exception specification.\n@@ -15714,7 +15718,7 @@ int main()\n @node Type Traits\n @section Type Traits\n \n-The C++ front-end implements syntactic extensions that allow\n+The C++ front end implements syntactic extensions that allow\n compile-time determination of \n various characteristics of a type (or of a\n pair of types).\n@@ -15940,7 +15944,7 @@ and other places where they are not permitted by the standard is\n deprecated and will be removed from a future version of G++.\n \n G++ allows floating-point literals to appear in integral constant expressions,\n-e.g. @samp{ enum E @{ e = int(2.2 * 3.7) @} }\n+e.g.@: @samp{ enum E @{ e = int(2.2 * 3.7) @} }\n This extension is deprecated and will be removed from a future version.\n \n G++ allows static data members of const floating-point type to be declared"}]}