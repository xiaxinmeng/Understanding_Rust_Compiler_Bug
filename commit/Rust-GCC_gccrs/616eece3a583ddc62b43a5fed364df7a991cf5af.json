{"sha": "616eece3a583ddc62b43a5fed364df7a991cf5af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE2ZWVjZTNhNTgzZGRjNjJiNDNhNWZlZDM2NGRmN2E5OTFjZjVhZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-05-10T14:17:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-05-10T14:17:37Z"}, "message": "re PR c++/57047 ([C++11] stl_pair.h:137:64: internal compiler error: Segmentation fault in constexpr constructor)\n\n\tPR c++/57047\n\t* semantics.c (cxx_fold_indirect_ref): Fix thinko.\n\nFrom-SVN: r198777", "tree": {"sha": "6c879342dbcc4b414daee14c71f6959f849ebba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c879342dbcc4b414daee14c71f6959f849ebba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/616eece3a583ddc62b43a5fed364df7a991cf5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616eece3a583ddc62b43a5fed364df7a991cf5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616eece3a583ddc62b43a5fed364df7a991cf5af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616eece3a583ddc62b43a5fed364df7a991cf5af/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ced939e817428c45e51f8caa16db26a7d7168c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ced939e817428c45e51f8caa16db26a7d7168c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ced939e817428c45e51f8caa16db26a7d7168c6"}], "stats": {"total": 65, "additions": 62, "deletions": 3}, "files": [{"sha": "63cc71475188f33d72fe422e743a102944c24a7a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616eece3a583ddc62b43a5fed364df7a991cf5af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616eece3a583ddc62b43a5fed364df7a991cf5af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=616eece3a583ddc62b43a5fed364df7a991cf5af", "patch": "@@ -1,5 +1,8 @@\n 2013-05-10  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/57047\n+\t* semantics.c (cxx_fold_indirect_ref): Fix thinko.\n+\n \tPR c++/55149\n \t* semantics.c (add_capture): Error rather than abort on copy\n \tcapture of VLA."}, {"sha": "3e78887ca2f5090b23d2cd3c411a82ed1836bc08", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616eece3a583ddc62b43a5fed364df7a991cf5af/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616eece3a583ddc62b43a5fed364df7a991cf5af/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=616eece3a583ddc62b43a5fed364df7a991cf5af", "patch": "@@ -7643,15 +7643,17 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t    }\n \t}\n     }\n-  /* *(foo *)fooarrptreturn> (*fooarrptr)[0] */\n+  /* *(foo *)fooarrptr => (*fooarrptr)[0] */\n   else if (TREE_CODE (TREE_TYPE (subtype)) == ARRAY_TYPE\n \t   && (same_type_ignoring_top_level_qualifiers_p\n \t       (type, TREE_TYPE (TREE_TYPE (subtype)))))\n     {\n       tree type_domain;\n       tree min_val = size_zero_node;\n-      sub = cxx_fold_indirect_ref (loc, TREE_TYPE (subtype), sub, NULL);\n-      if (!sub)\n+      tree newsub = cxx_fold_indirect_ref (loc, TREE_TYPE (subtype), sub, NULL);\n+      if (newsub)\n+\tsub = newsub;\n+      else\n \tsub = build1_loc (loc, INDIRECT_REF, TREE_TYPE (subtype), sub);\n       type_domain = TYPE_DOMAIN (TREE_TYPE (sub));\n       if (type_domain && TYPE_MIN_VALUE (type_domain))"}, {"sha": "ee425ea1a156cd4c0d7983f56fe182c83503716a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array-ptr8.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/616eece3a583ddc62b43a5fed364df7a991cf5af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/616eece3a583ddc62b43a5fed364df7a991cf5af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr8.C?ref=616eece3a583ddc62b43a5fed364df7a991cf5af", "patch": "@@ -0,0 +1,54 @@\n+// PR c++/57047\n+// { dg-require-effective-target c++11 }\n+\n+template <typename>\n+struct A;\n+template <typename T>\n+struct A <T &>\n+{\n+  typedef T type;\n+};\n+template <typename T>\n+constexpr T && foo (typename A <T>::type & __t) noexcept\n+{\n+  return static_cast <T &&>(__t);\n+}\n+template <class T1, class T2>\n+struct B\n+{\n+  T1 t1;\n+  T2 t2;\n+  template <class U>\n+  constexpr B (U && __x, const T2 & __y) : t1 (foo <U> (__x)), t2 (__y) {}\n+};\n+static inline constexpr bool\n+fn1 (const char c)\n+{\n+  return ('0' <= c) && (c <= '9');\n+}\n+static inline constexpr bool\n+fn2 (const char c)\n+{\n+  return (('A' <= c) && (c <= 'Z')) || (('a' <= c) && (c <= 'z'));\n+}\n+static constexpr bool\n+fn3 (const char *const x)\n+{\n+  return (x[1] == '\\0' && x[0] == ']') ? true : (!fn1 (x[0])) ? false : fn3 (&x[1]);\n+}\n+static constexpr bool\n+fn4 (const char *const x)\n+{\n+  return (x[0] == '\\0') ? fn3 (&x[1]) : fn4 (&x[1]);\n+}\n+static inline constexpr bool\n+fn5 (const char *const x)\n+{\n+  return fn2 (x[0]) ? fn4 (x) : false;\n+}\n+struct C final\n+{\n+  constexpr C (const char *const t1) : c (fn5 (t1) ? 199 : 69) {}\n+  unsigned c;\n+};\n+B <C, C> p (\"a\", \"b\");"}]}