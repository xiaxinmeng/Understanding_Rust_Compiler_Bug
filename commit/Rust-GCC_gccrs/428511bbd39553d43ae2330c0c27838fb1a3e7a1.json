{"sha": "428511bbd39553d43ae2330c0c27838fb1a3e7a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4NTExYmJkMzk1NTNkNDNhZTIzMzBjMGMyNzgzOGZiMWEzZTdhMQ==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2004-07-24T11:12:29Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2004-07-24T11:12:29Z"}, "message": "m68k.c (output_scc_di): Fix coding style.\n\n2004-07-24  Roman Zippel  <zippel@linux-m68k.org>\n\n\t* config/m68k/m68k.c (output_scc_di): Fix coding style.\n\t(symbolic_operand): Fix prototype.\n\t* config/m68k/m68k.h (PREDICATE_CODES): Add symbolic_operand.\n\t* config/m68k/m68k.md: Add constants for registers a0 and sp and\n\tuse them, change from the \"{...}\" syntax to the simpler {...}\n\tsyntax.\n\t(*cfv4_extendqisi2): Fix destination predicate.\n\t* config/m68k/m68k-protos.h: Remove various declarations also\n\tgenerated via PREDICATE_CODES.\n\nFrom-SVN: r85115", "tree": {"sha": "218e3cd16c47ba73924fe8fd4591c5b964ff902c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/218e3cd16c47ba73924fe8fd4591c5b964ff902c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/428511bbd39553d43ae2330c0c27838fb1a3e7a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428511bbd39553d43ae2330c0c27838fb1a3e7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/428511bbd39553d43ae2330c0c27838fb1a3e7a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428511bbd39553d43ae2330c0c27838fb1a3e7a1/comments", "author": null, "committer": null, "parents": [{"sha": "0c6d842886b9dce2a675dd484526522ddfe7dd12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6d842886b9dce2a675dd484526522ddfe7dd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6d842886b9dce2a675dd484526522ddfe7dd12"}], "stats": {"total": 151, "additions": 66, "deletions": 85}, "files": [{"sha": "c4010d46d18c65d39d770bbf87ccdd720743f7c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=428511bbd39553d43ae2330c0c27838fb1a3e7a1", "patch": "@@ -1,3 +1,15 @@\n+2004-07-24  Roman Zippel  <zippel@linux-m68k.org>\n+\n+\t* config/m68k/m68k.c (output_scc_di): Fix coding style.\n+\t(symbolic_operand): Fix prototype.\n+\t* config/m68k/m68k.h (PREDICATE_CODES): Add symbolic_operand.\n+\t* config/m68k/m68k.md: Add constants for registers a0 and sp and\n+\tuse them, change from the \"{...}\" syntax to the simpler {...}\n+\tsyntax.\n+\t(*cfv4_extendqisi2): Fix destination predicate.\n+\t* config/m68k/m68k-protos.h: Remove various declarations also\n+\tgenerated via PREDICATE_CODES.\n+\n 2004-07-23  Mike Stump  <mrs@apple.com>\n \n \t* c-typeck.c (convert_for_assignment): Tightened up pointer converstions"}, {"sha": "8538b8e0d28887c311dcdedccea4e173ea17518e", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=428511bbd39553d43ae2330c0c27838fb1a3e7a1", "patch": "@@ -41,24 +41,14 @@ extern const char *output_iorsi3 (rtx *);\n extern const char *output_xorsi3 (rtx *);\n extern void m68k_output_pic_call (rtx dest);\n extern void output_dbcc_and_branch (rtx *);\n-extern int const_uint32_operand (rtx, enum machine_mode);\n-extern int const_sint32_operand (rtx, enum machine_mode);\n extern int floating_exact_log2 (rtx);\n-extern int not_sp_operand (rtx, enum machine_mode);\n-extern int valid_dbcc_comparison_p (rtx, enum machine_mode);\n-extern int extend_operator (rtx, enum machine_mode);\n extern bool strict_low_part_peephole_ok (enum machine_mode mode, rtx first_insn, rtx target);\n \n /* Functions from m68k.c used in macros.  */\n-extern bool symbolic_operand (rtx, enum machine_mode);\n extern int standard_68881_constant_p (rtx);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);\n extern void notice_update_cc (rtx, rtx);\n-extern int general_src_operand (rtx, enum machine_mode);\n-extern int nonimmediate_src_operand (rtx, enum machine_mode);\n-extern int memory_src_operand (rtx, enum machine_mode);\n-extern int pcrel_address (rtx, enum machine_mode);\n extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);\n #endif /* RTX_CODE */\n "}, {"sha": "4f2b71e06f9dc37507089b04e7c931dfb7e0b8fe", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=428511bbd39553d43ae2330c0c27838fb1a3e7a1", "patch": "@@ -1118,7 +1118,7 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n       else\n \tloperands[3] = adjust_address (operand2, SImode, 4);\n     }\n-  loperands[4] = gen_label_rtx();\n+  loperands[4] = gen_label_rtx ();\n   if (operand2 != const0_rtx)\n     {\n       output_asm_insn (MOTOROLA ?\n@@ -1160,7 +1160,7 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n         break;\n \n       case GT:\n-        loperands[6] = gen_label_rtx();\n+        loperands[6] = gen_label_rtx ();\n         output_asm_insn (MOTOROLA ?\n \t\t\t   \"shi %5\\n\\tjbra %l6\" :\n \t\t\t   \"shi %5\\n\\tjra %l6\",\n@@ -1179,7 +1179,7 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n         break;\n \n       case LT:\n-        loperands[6] = gen_label_rtx();\n+        loperands[6] = gen_label_rtx ();\n         output_asm_insn (MOTOROLA ?\n \t\t\t   \"scs %5\\n\\tjbra %l6\" :\n \t\t\t   \"scs %5\\n\\tjra %l6\",\n@@ -1198,7 +1198,7 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n         break;\n \n       case GE:\n-        loperands[6] = gen_label_rtx();\n+        loperands[6] = gen_label_rtx ();\n         output_asm_insn (MOTOROLA ?\n \t\t\t   \"scc %5\\n\\tjbra %l6\" :\n \t\t\t   \"scc %5\\n\\tjra %l6\",\n@@ -1217,7 +1217,7 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n         break;\n \n       case LE:\n-        loperands[6] = gen_label_rtx();\n+        loperands[6] = gen_label_rtx ();\n         output_asm_insn (MOTOROLA ?\n \t\t\t   \"sls %5\\n\\tjbra %l6\" :\n \t\t\t   \"sls %5\\n\\tjra %l6\",\n@@ -1283,7 +1283,7 @@ output_btst (rtx *operands, rtx countop, rtx dataop, rtx insn, int signpos)\n /* Returns true if OP is either a symbol reference or a sum of a symbol\n    reference and a constant.  */\n \n-bool\n+int\n symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   switch (GET_CODE (op))"}, {"sha": "62f839af566cf614eb726db50c20ea10cadfddb1", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=428511bbd39553d43ae2330c0c27838fb1a3e7a1", "patch": "@@ -1270,4 +1270,5 @@ extern int m68k_last_compare_had_fp_operands;\n   {\"const_sint32_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"valid_dbcc_comparison_p\", {EQ, NE, GTU, LTU, GEU, LEU,\t\t\\\n \t\t\t       GT, LT, GE, LE}},\t\t\t\\\n-  {\"extend_operator\", {SIGN_EXTEND, ZERO_EXTEND}},\n+  {\"extend_operator\", {SIGN_EXTEND, ZERO_EXTEND}},\t\t\t\\\n+  {\"symbolic_operand\", {SYMBOL_REF, LABEL_REF, CONST}},"}, {"sha": "cc69553683c138b173ad1999cc49b9191c9e713f", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 46, "deletions": 68, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428511bbd39553d43ae2330c0c27838fb1a3e7a1/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=428511bbd39553d43ae2330c0c27838fb1a3e7a1", "patch": "@@ -122,6 +122,12 @@\n (define_constants\n   [(UNSPECV_BLOCKAGE\t0)\n   ])\n+\n+;; Registers by name.\n+(define_constants\n+  [(A0_REG\t\t8)\n+   (SP_REG\t\t15)\n+  ])\n \f\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=m\")\n@@ -233,10 +239,9 @@\n   [(set (cc0)\n \t(match_operand:SF 0 \"general_operand\" \"\"))]\n   \"TARGET_68881\"\n-  \"\n {\n   m68k_last_compare_had_fp_operands = 1;\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -253,10 +258,9 @@\n   [(set (cc0)\n \t(match_operand:DF 0 \"general_operand\" \"\"))]\n   \"TARGET_68881\"\n-  \"\n {\n   m68k_last_compare_had_fp_operands = 1;\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -303,7 +307,6 @@\n \t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t (match_operand:SI 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   m68k_last_compare_had_fp_operands = 0;\n   if (flag_pic && !TARGET_PCREL && symbolic_operand (operands[1], SImode))\n@@ -315,7 +318,7 @@\n       rtx temp = reload_in_progress ? operands[0] : gen_reg_rtx (Pmode);\n       operands[1] = legitimize_pic_address (operands[1], SImode, temp);\n     }\n-}\")\n+})\n \n ;; A composite of the cmp, cmpa, cmpi & cmpm m68000 op codes.\n (define_insn \"\"\n@@ -408,10 +411,9 @@\n \t(compare (match_operand:DF 0 \"general_operand\" \"\")\n \t\t (match_operand:DF 1 \"general_operand\" \"\")))]\n   \"TARGET_68881\"\n-  \"\n {\n   m68k_last_compare_had_fp_operands = 1;\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -436,10 +438,9 @@\n        (compare (match_operand:SF 0 \"general_operand\" \"\")\n \t\t(match_operand:SF 1 \"general_operand\" \"\")))]\n  \"TARGET_68881\"\n- \"\n {\n   m68k_last_compare_had_fp_operands = 1;\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -639,7 +640,6 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   if (flag_pic && !TARGET_PCREL && symbolic_operand (operands[1], SImode))\n     {\n@@ -661,7 +661,7 @@\n \toperands[0] = gen_rtx_MEM (SImode,\n \t\t\t       force_reg (SImode, XEXP (operands[0], 0)));\n     }\n-}\")\n+})\n \n ;; General case of fullword move.  The register constraints\n ;; force integer constants in range for a moveq to be reloaded\n@@ -774,8 +774,8 @@\n   \"* return output_move_strictqi (operands);\")\n \n (define_expand \"pushqi1\"\n-  [(set (reg:SI 15) (plus:SI (reg:SI 15) (const_int -2)))\n-   (set (mem:QI (plus:SI (reg:SI 15) (const_int 1)))\n+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -2)))\n+   (set (mem:QI (plus:SI (reg:SI SP_REG) (const_int 1)))\n \t(match_operand:QI 0 \"general_operand\" \"\"))]\n   \"!TARGET_COLDFIRE\"\n   \"\")\n@@ -899,7 +899,6 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:XF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* We can't rewrite operands during reload.  */\n   if (! reload_in_progress)\n@@ -920,7 +919,7 @@\n \t\t\t\t   force_reg (SImode, XEXP (operands[0], 0)));\n \t}\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,!r,!f,!r\")\n@@ -1485,7 +1484,7 @@\n   \"\")\n \n (define_insn \"*cfv4_extendqisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d\")\n \t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rms\")))]\n   \"TARGET_CFV4\"\n   \"mvs%.b %1,%0\")\n@@ -2645,7 +2644,6 @@\n \t    (const_int 32))))\n      (clobber (match_dup 3))])]\n   \"TARGET_68020 && !TARGET_68060 && !TARGET_COLDFIRE\"\n-  \"\n {\n   operands[3] = gen_reg_rtx (SImode);\n \n@@ -2659,7 +2657,7 @@\n \t\t\t\t\t     operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -2693,7 +2691,6 @@\n \t    (const_int 32))))\n      (clobber (match_dup 3))])]\n   \"TARGET_68020 && !TARGET_68060 && !TARGET_COLDFIRE\"\n-  \"\n {\n   operands[3] = gen_reg_rtx (SImode);\n   if (GET_CODE (operands[2]) == CONST_INT)\n@@ -2703,7 +2700,7 @@\n \t\t\t\t\t     operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -3153,9 +3150,9 @@\n       && GET_CODE (operands[2]) == CONST_INT)\n     {\n       if (INTVAL (operands[2]) == 0x000000ff)\n-        return \\\"mvz%.b %0,%0\\\";\n+        return \"mvz%.b %0,%0\";\n       else if (INTVAL (operands[2]) == 0x0000ffff)\n-        return \\\"mvz%.w %0,%0\\\";\n+        return \"mvz%.w %0,%0\";\n     }\n   return output_andsi3 (operands);\n })\n@@ -3553,14 +3550,13 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t(neg:DI (match_operand:DI 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (TARGET_COLDFIRE)\n     emit_insn (gen_negdi2_5200 (operands[0], operands[1]));\n   else\n     emit_insn (gen_negdi2_internal (operands[0], operands[1]));\n   DONE;\n-}\")\n+})\n \n (define_insn \"negdi2_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=<,do,!*a\")\n@@ -3592,14 +3588,13 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(neg:SI (match_operand:SI 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (TARGET_COLDFIRE)\n     emit_insn (gen_negsi2_5200 (operands[0], operands[1]));\n   else\n     emit_insn (gen_negsi2_internal (operands[0], operands[1]));\n   DONE;\n-}\")\n+})\n \n (define_insn \"negsi2_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=dm\")\n@@ -3643,7 +3638,6 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n \t(neg:SF (match_operand:SF 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_68881)\n     {\n@@ -3664,7 +3658,7 @@\n       emit_move_insn (operands[0], operands[0]);\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,d\")\n@@ -3685,7 +3679,6 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_68881)\n     {\n@@ -3713,7 +3706,7 @@\n       emit_no_conflict_block (insns, operands[0], operands[1], 0, 0);\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,d\")\n@@ -3761,7 +3754,6 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n \t(abs:SF (match_operand:SF 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_68881)\n     {\n@@ -3782,7 +3774,7 @@\n       emit_move_insn (operands[0], operands[0]);\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f\")\n@@ -3798,7 +3790,6 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n \t(abs:DF (match_operand:DF 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_68881)\n     {\n@@ -3826,7 +3817,7 @@\n       emit_no_conflict_block (insns, operands[0], operands[1], 0, 0);\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f\")\n@@ -3861,14 +3852,13 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(not:SI (match_operand:SI 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (TARGET_COLDFIRE)\n     emit_insn (gen_one_cmplsi2_5200 (operands[0], operands[1]));\n   else\n     emit_insn (gen_one_cmplsi2_internal (operands[0], operands[1]));\n   DONE;\n-}\")\n+})\n \n (define_insn \"one_cmplsi2_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=dm\")\n@@ -5059,14 +5049,13 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(eq:QI (cc0) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (TARGET_68060 && m68k_last_compare_had_fp_operands)\n     {\n       m68k_last_compare_had_fp_operands = 0;\n       FAIL;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n@@ -5081,14 +5070,13 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(ne:QI (cc0) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (TARGET_68060 && m68k_last_compare_had_fp_operands)\n     {\n       m68k_last_compare_had_fp_operands = 0;\n       FAIL;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n@@ -5103,14 +5091,13 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(gt:QI (cc0) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (TARGET_68060 && m68k_last_compare_had_fp_operands)\n     {\n       m68k_last_compare_had_fp_operands = 0;\n       FAIL;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n@@ -5140,14 +5127,13 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(lt:QI (cc0) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (TARGET_68060 && m68k_last_compare_had_fp_operands)\n     {\n       m68k_last_compare_had_fp_operands = 0;\n       FAIL;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n@@ -5177,14 +5163,13 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(ge:QI (cc0) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (TARGET_68060 && m68k_last_compare_had_fp_operands)\n     {\n       m68k_last_compare_had_fp_operands = 0;\n       FAIL;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n@@ -5214,14 +5199,13 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(le:QI (cc0) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (TARGET_68060 && m68k_last_compare_had_fp_operands)\n     {\n       m68k_last_compare_had_fp_operands = 0;\n       FAIL;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n@@ -6092,13 +6076,12 @@\n   [(parallel [(set (pc) (match_operand 0 \"\" \"\"))\n \t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n   \"\"\n-  \"\n {\n #ifdef CASE_VECTOR_PC_RELATIVE\n     operands[0] = gen_rtx_PLUS (SImode, pc_rtx,\n \t\t\t\tgen_rtx_SIGN_EXTEND (SImode, operands[0]));\n #endif\n-}\")\n+})\n \n ;; Jump to variable address from dispatch table of absolute addresses.\n (define_insn \"\"\n@@ -6298,11 +6281,10 @@\n   ;; Operand 1 not really used on the m68000.\n \n   \"\"\n-  \"\n {\n   if (flag_pic && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n     SYMBOL_REF_FLAG (XEXP (operands[0], 0)) = 1;\n-}\")\n+})\n \n ;; This is a normal call sequence.\n (define_insn \"\"\n@@ -6340,11 +6322,10 @@\n      (match_operand:SI 2 \"general_operand\" \"\")))]\n   ;; Operand 2 not really used on the m68000.\n   \"\"\n-  \"\n {\n   if (flag_pic && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n     SYMBOL_REF_FLAG (XEXP (operands[1], 0)) = 1;\n-}\")\n+})\n \n ;; This is a normal call_value\n (define_insn \"\"\n@@ -6381,7 +6362,6 @@\n \t      (match_operand 1 \"\" \"\")\n \t      (match_operand 2 \"\" \"\")])]\n   \"NEEDS_UNTYPED_CALL\"\n-  \"\n {\n   int i;\n \n@@ -6400,7 +6380,7 @@\n   emit_insn (gen_blockage ());\n \n   DONE;\n-}\")\n+})\n \n ;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and\n ;; all of memory.  This blocks insns from being moved across this point.\n@@ -6464,7 +6444,7 @@\n ;; But it is mainly intended to test the support for these optimizations.\n \n (define_peephole\n-  [(set (reg:SI 15) (plus:SI (reg:SI 15) (const_int 4)))\n+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))\n    (set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operand:DF 1 \"register_operand\" \"ad\"))]\n   \"FP_REG_P (operands[0]) && ! FP_REG_P (operands[1])\"\n@@ -6481,8 +6461,8 @@\n ;; when there are consecutive library calls.\n \n (define_peephole\n-  [(set (reg:SI 15) (plus:SI (reg:SI 15)\n-\t\t\t     (match_operand:SI 0 \"const_int_operand\" \"n\")))\n+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG)\n+\t\t\t\t (match_operand:SI 0 \"const_int_operand\" \"n\")))\n    (set (match_operand:SF 1 \"push_operand\" \"=m\")\n \t(match_operand:SF 2 \"general_operand\" \"rmfF\"))]\n   \"INTVAL (operands[0]) >= 4\n@@ -6525,8 +6505,8 @@\n ;; Speed up stack adjust followed by a fullword fixedpoint push.\n \n (define_peephole\n-  [(set (reg:SI 15) (plus:SI (reg:SI 15)\n-\t\t\t     (match_operand:SI 0 \"const_int_operand\" \"n\")))\n+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG)\n+\t\t\t\t (match_operand:SI 0 \"const_int_operand\" \"n\")))\n    (set (match_operand:SI 1 \"push_operand\" \"=m\")\n \t(match_operand:SI 2 \"general_operand\" \"g\"))]\n   \"INTVAL (operands[0]) >= 4\n@@ -6569,9 +6549,9 @@\n ;; Speed up pushing a single byte but leaving four bytes of space.\n \n (define_peephole\n-  [(set (mem:QI (pre_dec:SI (reg:SI 15)))\n+  [(set (mem:QI (pre_dec:SI (reg:SI SP_REG)))\n \t(match_operand:QI 1 \"general_operand\" \"dami\"))\n-   (set (reg:SI 15) (minus:SI (reg:SI 15) (const_int 2)))]\n+   (set (reg:SI SP_REG) (minus:SI (reg:SI SP_REG) (const_int 2)))]\n   \"! reg_mentioned_p (stack_pointer_rtx, operands[1])\"\n {\n   rtx xoperands[4];\n@@ -7026,7 +7006,6 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_68881)\n     {\n@@ -7056,7 +7035,7 @@\n       emit_no_conflict_block (insns, operands[0], operands[1], 0, 0);\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"negxf2_68881\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f\")\n@@ -7072,7 +7051,6 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(abs:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (!TARGET_68881)\n     {\n@@ -7102,7 +7080,7 @@\n       emit_no_conflict_block (insns, operands[0], operands[1], 0, 0);\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"absxf2_68881\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f\")"}]}