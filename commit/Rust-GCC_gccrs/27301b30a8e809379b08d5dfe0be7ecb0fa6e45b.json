{"sha": "27301b30a8e809379b08d5dfe0be7ecb0fa6e45b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjczMDFiMzBhOGU4MDkzNzliMDhkNWRmZTBiZTdlY2IwZmE2ZTQ1Yg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T17:24:48Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T17:24:48Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r777", "tree": {"sha": "97b10b05c9d0fc563129bd0c40748e52eb5a22c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97b10b05c9d0fc563129bd0c40748e52eb5a22c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27301b30a8e809379b08d5dfe0be7ecb0fa6e45b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27301b30a8e809379b08d5dfe0be7ecb0fa6e45b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27301b30a8e809379b08d5dfe0be7ecb0fa6e45b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27301b30a8e809379b08d5dfe0be7ecb0fa6e45b/comments", "author": null, "committer": null, "parents": [{"sha": "b434fc81908780cb0a606d8ab257b1c169ce12e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b434fc81908780cb0a606d8ab257b1c169ce12e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b434fc81908780cb0a606d8ab257b1c169ce12e2"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "c1b44fe4622a53f442bc2e3f2e9f9daf3f030ab2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27301b30a8e809379b08d5dfe0be7ecb0fa6e45b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27301b30a8e809379b08d5dfe0be7ecb0fa6e45b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=27301b30a8e809379b08d5dfe0be7ecb0fa6e45b", "patch": "@@ -4266,6 +4266,10 @@ parmlist_tags_warning ()\n   for (elt = current_binding_level->tags; elt; elt = TREE_CHAIN (elt))\n     {\n       enum tree_code code = TREE_CODE (TREE_VALUE (elt));\n+      /* An anonymous union parm type is meaningful as a GNU extension.\n+\t So don't warn for that.  */\n+      if (code == UNION_TYPE && !pedantic)\n+\tcontinue;\n       if (TREE_PURPOSE (elt) != 0)\n \twarning (\"`%s %s' declared inside parameter list\",\n \t\t (code == RECORD_TYPE ? \"struct\""}]}