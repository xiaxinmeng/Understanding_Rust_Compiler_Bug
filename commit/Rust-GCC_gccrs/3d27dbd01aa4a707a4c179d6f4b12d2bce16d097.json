{"sha": "3d27dbd01aa4a707a4c179d6f4b12d2bce16d097", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QyN2RiZDAxYWE0YTcwN2E0YzE3OWQ2ZjRiMTJkMmJjZTE2ZDA5Nw==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-06-12T12:50:42Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-06-12T12:50:42Z"}, "message": "rtl.h (MEM_P, [...]): New predicates.\n\n\t* rtl.h (MEM_P, NONJUMP_INSN_P, CALL_INSN_P): New predicates.\n\t(INSN_P): Don't look at the rtx code class, just explicitly\n\tcheck for one of the tree RTX_INSN codes.\n\nFrom-SVN: r83023", "tree": {"sha": "e80d601c577378ca09b95d7b7afd1ead0b4caaa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e80d601c577378ca09b95d7b7afd1ead0b4caaa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d27dbd01aa4a707a4c179d6f4b12d2bce16d097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d27dbd01aa4a707a4c179d6f4b12d2bce16d097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d27dbd01aa4a707a4c179d6f4b12d2bce16d097", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d27dbd01aa4a707a4c179d6f4b12d2bce16d097/comments", "author": null, "committer": null, "parents": [{"sha": "4a787fa8bfc011e9cd2f8d2b4eb6aeadcf77beb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a787fa8bfc011e9cd2f8d2b4eb6aeadcf77beb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a787fa8bfc011e9cd2f8d2b4eb6aeadcf77beb2"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "820e20721f02e9359bab8460895607a3e7597e68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d27dbd01aa4a707a4c179d6f4b12d2bce16d097/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d27dbd01aa4a707a4c179d6f4b12d2bce16d097/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d27dbd01aa4a707a4c179d6f4b12d2bce16d097", "patch": "@@ -1,3 +1,9 @@\n+2004-06-12  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* rtl.h (MEM_P, NONJUMP_INSN_P, CALL_INSN_P): New predicates.\n+\t(INSN_P): Don't look at the rtx code class, just explicitly\n+\tcheck for one of the tree RTX_INSN codes.\n+\n 2004-06-11  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-typeck.c (default_function_array_conversion): Use"}, {"sha": "edd750bb99dc576979b266f8383db3589856f4b3", "filename": "gcc/rtl.h", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d27dbd01aa4a707a4c179d6f4b12d2bce16d097/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d27dbd01aa4a707a4c179d6f4b12d2bce16d097/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3d27dbd01aa4a707a4c179d6f4b12d2bce16d097", "patch": "@@ -311,15 +311,28 @@ struct rtvec_def GTY(()) {\n #define GET_NUM_ELEM(RTVEC)\t\t((RTVEC)->num_elem)\n #define PUT_NUM_ELEM(RTVEC, NUM)\t((RTVEC)->num_elem = (NUM))\n \n-/* Predicate yielding nonzero iff X is an rtl for a register.  */\n+/* Predicate yielding nonzero iff X is an rtx for a register.  */\n #define REG_P(X) (GET_CODE (X) == REG)\n \n+/* Predicate yielding nonzero iff X is an rtx for a memory location.  */\n+#define MEM_P(X) (GET_CODE (X) == MEM)\n+\n /* Predicate yielding nonzero iff X is a label insn.  */\n #define LABEL_P(X) (GET_CODE (X) == CODE_LABEL)\n \n /* Predicate yielding nonzero iff X is a jump insn.  */\n #define JUMP_P(X) (GET_CODE (X) == JUMP_INSN)\n \n+/* Predicate yielding nonzero iff X is a call insn.  */\n+#define CALL_P(X) (GET_CODE (X) == CALL_INSN)\n+\n+/* Predicate yielding nonzero iff X is an insn that cannot jump.  */\n+#define NONJUMP_INSN_P(X) (GET_CODE (X) == INSN)\n+\n+/* Predicate yielding nonzero iff X is a real insn.  */\n+#define INSN_P(X) \\\n+  (NONJUMP_INSN_P (X) || JUMP_P (X) || CALL_P (X))\n+\n /* Predicate yielding nonzero iff X is a note insn.  */\n #define NOTE_P(X) (GET_CODE (X) == NOTE)\n \n@@ -331,11 +344,6 @@ struct rtvec_def GTY(()) {\n   (JUMP_P (INSN) && (GET_CODE (PATTERN (INSN)) == ADDR_VEC || \\\n \t\t     GET_CODE (PATTERN (INSN)) == ADDR_DIFF_VEC))\n \n-\n-/* 1 if X is an insn.  */\n-#define INSN_P(X)    \\\n-  (GET_RTX_CLASS (GET_CODE(X)) == RTX_INSN)\n-\n /* 1 if X is a unary operator.  */\n \n #define UNARY_P(X)   \\"}]}