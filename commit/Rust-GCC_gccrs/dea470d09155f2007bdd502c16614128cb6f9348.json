{"sha": "dea470d09155f2007bdd502c16614128cb6f9348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhNDcwZDA5MTU1ZjIwMDdiZGQ1MDJjMTY2MTQxMjhjYjZmOTM0OA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-09-19T15:17:41Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-09-19T15:17:41Z"}, "message": "c++: std::is_constant_evaluated inside constraint [PR97051]\n\nAccording to [expr.const]/14, the result of substitution into an atomic\nconstraint is manifestly constant-evaluated; this patch adjusts the call\nto maybe_constant_value in satisfy_atom to that effect.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97051\n\t* constraint.cc (satisfy_atom): Pass true as the\n\tmanifestly_const_eval argument to maybe_constant_value.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97051\n\t* g++.dg/cpp2a/is-constant-evaluated11.C: New test.", "tree": {"sha": "834719a35164db0c246a1e4addb2f00b2495f84b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/834719a35164db0c246a1e4addb2f00b2495f84b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea470d09155f2007bdd502c16614128cb6f9348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea470d09155f2007bdd502c16614128cb6f9348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea470d09155f2007bdd502c16614128cb6f9348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea470d09155f2007bdd502c16614128cb6f9348/comments", "author": null, "committer": null, "parents": [{"sha": "83858ba1db31cd83667592a41d71315090459da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83858ba1db31cd83667592a41d71315090459da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83858ba1db31cd83667592a41d71315090459da4"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "8137df59e37efd8c5c9c6f2e65c689aa77789911", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea470d09155f2007bdd502c16614128cb6f9348/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea470d09155f2007bdd502c16614128cb6f9348/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=dea470d09155f2007bdd502c16614128cb6f9348", "patch": "@@ -2643,7 +2643,8 @@ satisfy_atom (tree t, tree args, subst_info info)\n     result = cxx_constant_value (result);\n   else\n     {\n-      result = maybe_constant_value (result);\n+      result = maybe_constant_value (result, NULL_TREE,\n+\t\t\t\t     /*manifestly_const_eval=*/true);\n       if (!TREE_CONSTANT (result))\n \tresult = error_mark_node;\n     }"}, {"sha": "a31867f74fbbc86093089ec03c5945390d1c74c3", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated11.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea470d09155f2007bdd502c16614128cb6f9348/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea470d09155f2007bdd502c16614128cb6f9348/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated11.C?ref=dea470d09155f2007bdd502c16614128cb6f9348", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/97051\n+// { dg-do compile { target c++20 } }\n+\n+namespace std {\n+  constexpr inline bool\n+  is_constant_evaluated () noexcept\n+  {\n+    return __builtin_is_constant_evaluated ();\n+  }\n+}\n+\n+template<typename>\n+  requires (std::is_constant_evaluated())\n+constexpr int a = 0;\n+\n+constexpr int b = a<int>;"}]}