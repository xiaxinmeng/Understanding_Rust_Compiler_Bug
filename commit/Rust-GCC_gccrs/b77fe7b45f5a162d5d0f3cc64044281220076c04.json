{"sha": "b77fe7b45f5a162d5d0f3cc64044281220076c04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3ZmU3YjQ1ZjVhMTYyZDVkMGYzY2M2NDA0NDI4MTIyMDA3NmMwNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-10-18T12:30:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-10-18T12:30:32Z"}, "message": "re PR c++/22604 (ICE after invalid covariant return)\n\ncp:\n\tPR c++/22604\n\t* class.c (update_vtable_entry_for_fn): Don't process invalid\n\tcovariant overriders.\n\n\tPR c++/23118\n\t* cp-tree.h (add_method): Add return value.\n\t* class.c (add_method): Return success indicator.\n\t* semantics.c (finish_member_declaration): Don't add an invalid\n\tmethod to the method list.\ntestsuite:\n\tPR c++/23118\n\t* g++.dg/overload/error2.C: New.\n\n\tPR c++/22604\n\t* g++.dg/inherit/covariant14.C: New.\n\nFrom-SVN: r105549", "tree": {"sha": "8c6ffe176818c794b78be35002d3b48a05a4cf5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c6ffe176818c794b78be35002d3b48a05a4cf5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b77fe7b45f5a162d5d0f3cc64044281220076c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77fe7b45f5a162d5d0f3cc64044281220076c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77fe7b45f5a162d5d0f3cc64044281220076c04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77fe7b45f5a162d5d0f3cc64044281220076c04/comments", "author": null, "committer": null, "parents": [{"sha": "6d7e9a3582b6ce807b1d380c757cf50e5f41ec65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7e9a3582b6ce807b1d380c757cf50e5f41ec65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7e9a3582b6ce807b1d380c757cf50e5f41ec65"}], "stats": {"total": 92, "additions": 74, "deletions": 18}, "files": [{"sha": "cd3cded707a3a37534d6905f329b31d1576a252e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b77fe7b45f5a162d5d0f3cc64044281220076c04", "patch": "@@ -1,3 +1,15 @@\n+2005-10-18  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/22604\n+\t* class.c (update_vtable_entry_for_fn): Don't process invalid\n+\tcovariant overriders.\n+\n+\tPR c++/23118\n+\t* cp-tree.h (add_method): Add return value.\n+\t* class.c (add_method): Return success indicator.\n+\t* semantics.c (finish_member_declaration): Don't add an invalid\n+\tmethod to the method list.\n+\n 2005-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21908"}, {"sha": "ff5190ab7d6c6ea48ce992ed8d054b633a0b2da2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b77fe7b45f5a162d5d0f3cc64044281220076c04", "patch": "@@ -879,9 +879,10 @@ modify_vtable_entry (tree t,\n \n \f\n /* Add method METHOD to class TYPE.  If USING_DECL is non-null, it is\n-   the USING_DECL naming METHOD.  */\n+   the USING_DECL naming METHOD.  Returns true if the method could be\n+   added to the method vec.  */\n \n-void\n+bool\n add_method (tree type, tree method, tree using_decl)\n {\n   unsigned slot;\n@@ -894,7 +895,7 @@ add_method (tree type, tree method, tree using_decl)\n   tree current_fns;\n \n   if (method == error_mark_node)\n-    return;\n+    return false;\n \n   complete_p = COMPLETE_TYPE_P (type);\n   conv_p = DECL_CONV_FN_P (method);\n@@ -1027,7 +1028,7 @@ add_method (tree type, tree method, tree using_decl)\n \t\t{\n \t\t  if (DECL_CONTEXT (fn) == type)\n \t\t    /* Defer to the local function.  */\n-\t\t    return;\n+\t\t    return false;\n \t\t  if (DECL_CONTEXT (fn) == DECL_CONTEXT (method))\n \t\t    error (\"repeated using declaration %q+D\", using_decl);\n \t\t  else\n@@ -1044,7 +1045,7 @@ add_method (tree type, tree method, tree using_decl)\n \t\t declarations because that will confuse things if the\n \t\t methods have inline definitions.  In particular, we\n \t\t will crash while processing the definitions.  */\n-\t      return;\n+\t      return false;\n \t    }\n \t}\n     }\n@@ -1069,6 +1070,7 @@ add_method (tree type, tree method, tree using_decl)\n   else\n     /* Replace the current slot.  */\n     VEC_replace (tree, method_vec, slot, overload);\n+  return true;\n }\n \n /* Subroutines of finish_struct.  */\n@@ -1980,7 +1982,9 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n   if (POINTER_TYPE_P (over_return)\n       && TREE_CODE (over_return) == TREE_CODE (base_return)\n       && CLASS_TYPE_P (TREE_TYPE (over_return))\n-      && CLASS_TYPE_P (TREE_TYPE (base_return)))\n+      && CLASS_TYPE_P (TREE_TYPE (base_return))\n+      /* If the overrider is invalid, don't even try.  */\n+      && !DECL_INVALID_OVERRIDER_P (overrider_target))\n     {\n       /* If FN is a covariant thunk, we must figure out the adjustment\n \t to the final base FN was converting to. As OVERRIDER_TARGET might"}, {"sha": "97cc064110c7b87ee2981485b013e1ff85cd2106", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b77fe7b45f5a162d5d0f3cc64044281220076c04", "patch": "@@ -3709,7 +3709,7 @@ extern tree build_vfn_ref\t\t\t(tree, tree);\n extern tree get_vtable_decl\t\t\t(tree, int);\n extern void resort_type_method_vec\t\t(void *, void *,\n \t\t\t\t\t\t gt_pointer_operator, void *);\n-extern void add_method\t\t\t\t(tree, tree, tree);\n+extern bool add_method\t\t\t\t(tree, tree, tree);\n extern int currently_open_class\t\t\t(tree);\n extern tree currently_open_derived_class\t(tree);\n extern tree finish_struct\t\t\t(tree, tree);"}, {"sha": "95387e13bc3a32b5f283a44783638eaac73d495b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b77fe7b45f5a162d5d0f3cc64044281220076c04", "patch": "@@ -2232,13 +2232,14 @@ finish_member_declaration (tree decl)\n     {\n       /* We also need to add this function to the\n \t CLASSTYPE_METHOD_VEC.  */\n-      add_method (current_class_type, decl, NULL_TREE);\n-\n-      TREE_CHAIN (decl) = TYPE_METHODS (current_class_type);\n-      TYPE_METHODS (current_class_type) = decl;\n+      if (add_method (current_class_type, decl, NULL_TREE))\n+\t{\n+\t  TREE_CHAIN (decl) = TYPE_METHODS (current_class_type);\n+\t  TYPE_METHODS (current_class_type) = decl;\n \n-      maybe_add_class_template_decl_list (current_class_type, decl,\n-\t\t\t\t\t  /*friend_p=*/0);\n+\t  maybe_add_class_template_decl_list (current_class_type, decl,\n+\t\t\t\t\t      /*friend_p=*/0);\n+\t}\n     }\n   /* Enter the DECL into the scope of the class.  */\n   else if ((TREE_CODE (decl) == USING_DECL && !DECL_DEPENDENT_P (decl))"}, {"sha": "ce6dd03c08272de57426f27e2a72762e72f80da4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b77fe7b45f5a162d5d0f3cc64044281220076c04", "patch": "@@ -1,3 +1,11 @@\n+2005-10-18  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/23118\n+\t* g++.dg/overload/error2.C: New.\n+\n+\tPR c++/22604\n+\t* g++.dg/inherit/covariant14.C: New.\n+\n 2005-10-17  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/23440\n@@ -9,19 +17,19 @@\n \t* gfortran.dg/host_dummy_index_1.f90: New test.\n \n \tPR fortran/21459\n-\tgfortran.dg/automatic_char_len_2.f90: New test.\n+\t* gfortran.dg/automatic_char_len_2.f90: New test.\n \n \tPR fortran/20866\n-\tgfortran.dg/recursive_statement_functions.f90: New test.\n+\t* gfortran.dg/recursive_statement_functions.f90: New test.\n \n \tPR fortran/20853\n-\tgfortran.dg/assumed_size_dt_dummy.f90: New test.\n+\t* gfortran.dg/assumed_size_dt_dummy.f90: New test.\n \n \tPR fortran/20849\n-\tgfortran.dg/external_initializer.f90: New test.\n+\t* gfortran.dg/external_initializer.f90: New test.\n \n \tPR fortran/20837\n-\tnon_module_public.f90: New test.\n+\t* non_module_public.f90: New test.\n \n 2005-10-17  Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "13ca877b4ab07af7b2f835cfd21ac0e2fd022ec7", "filename": "gcc/testsuite/g++.dg/inherit/covariant14.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C?ref=b77fe7b45f5a162d5d0f3cc64044281220076c04", "patch": "@@ -0,0 +1,20 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 18 Oct 2005 <nathan@codesourcery.com>\n+\n+// PR 22604\n+// Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+struct A;\n+\n+struct B\n+{\n+  virtual A* foo();  // { dg-error \"overriding\" \"\" }\n+};\n+\n+namespace N\n+{\n+  struct A : B\n+  {\n+    virtual A* foo(); // { dg-error \"invalid covariant\" \"\" }\t\n+  };\n+}"}, {"sha": "3270621334d6c025e6e71a3bbb5ad0719c1dc4d4", "filename": "gcc/testsuite/g++.dg/overload/error2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77fe7b45f5a162d5d0f3cc64044281220076c04/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror2.C?ref=b77fe7b45f5a162d5d0f3cc64044281220076c04", "patch": "@@ -0,0 +1,11 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 18 Oct 2005 <nathan@codesourcery.com>\n+\n+// PR 22604\n+// Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+struct A\n+{\n+  void foo();  // { dg-error \"with\" \"\" }\n+  virtual void foo();  // { dg-error \"cannot be overloaded\" \"\" }\n+};"}]}