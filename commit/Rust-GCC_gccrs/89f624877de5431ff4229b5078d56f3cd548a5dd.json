{"sha": "89f624877de5431ff4229b5078d56f3cd548a5dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmNjI0ODc3ZGU1NDMxZmY0MjI5YjUwNzhkNTZmM2NkNTQ4YTVkZA==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-17T16:55:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:13Z"}, "message": "Initial type comparison code for error: E0308", "tree": {"sha": "4bc923755487734afa21429f8ce80ea4d24182ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bc923755487734afa21429f8ce80ea4d24182ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89f624877de5431ff4229b5078d56f3cd548a5dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f624877de5431ff4229b5078d56f3cd548a5dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f624877de5431ff4229b5078d56f3cd548a5dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f624877de5431ff4229b5078d56f3cd548a5dd/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8cff6a9da47a189b1e40f4e728fd29bb3af1e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8cff6a9da47a189b1e40f4e728fd29bb3af1e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8cff6a9da47a189b1e40f4e728fd29bb3af1e7b"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "0b53d345ed83c25a5bc9050c094cf67f177e9193", "filename": "gcc/rust/analysis/rust-resolution.cc", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f624877de5431ff4229b5078d56f3cd548a5dd/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f624877de5431ff4229b5078d56f3cd548a5dd/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.cc?ref=89f624877de5431ff4229b5078d56f3cd548a5dd", "patch": "@@ -65,6 +65,14 @@ TypeResolution::go ()\n   return true;\n }\n \n+bool\n+TypeResolution::typesAreCompatible (std::string &lhs, std::string &rhs) const\n+{\n+  // FIXME this needs to handle the cases of an i8 going into an i32 which is\n+  // compatible\n+  return lhs.compare (rhs) == 0;\n+}\n+\n void\n TypeResolution::visit (AST::Token &tok)\n {}\n@@ -124,18 +132,21 @@ TypeResolution::visit (AST::TypePathSegmentFunction &segment)\n void\n TypeResolution::visit (AST::TypePath &path)\n {\n-  printf (\"TypePath: %s\\n\", path.as_string ().c_str ());\n+  // this may not be robust enough for type comparisons but lets try it for now\n+  typeComparisonBuffer.push_back (path.as_string ());\n }\n \n void\n TypeResolution::visit (AST::QualifiedPathInExpression &path)\n {\n-  printf (\"QualifiedPathInExpression: %s\\n\", path.as_string ().c_str ());\n+  typeComparisonBuffer.push_back (path.as_string ());\n }\n \n void\n TypeResolution::visit (AST::QualifiedPathInType &path)\n-{}\n+{\n+  typeComparisonBuffer.push_back (path.as_string ());\n+}\n \n // rust-expr.h\n void\n@@ -245,7 +256,34 @@ TypeResolution::visit (AST::ArithmeticOrLogicalExpr &expr)\n   // scope will require knowledge of the type\n \n   // do the lhsType and the rhsType match\n-  // TODO\n+  before = typeComparisonBuffer.size ();\n+  lhsType->accept_vis (*this);\n+  if (typeComparisonBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"Failed to unwrap type for lhs\");\n+      return;\n+    }\n+\n+  before = typeComparisonBuffer.size ();\n+  rhsType->accept_vis (*this);\n+  if (typeComparisonBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"Failed to unwrap type for rhs\");\n+      return;\n+    }\n+\n+  auto rhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+  auto lhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+\n+  if (!typesAreCompatible (lhsTypeStr, rhsTypeStr))\n+    {\n+      rust_error_at (expr.right_expr->get_locus_slow (),\n+\t\t     \"E0308: expected: %s, found %s\", lhsTypeStr.c_str (),\n+\t\t     rhsTypeStr.c_str ());\n+      return;\n+    }\n }\n \n void\n@@ -288,7 +326,34 @@ TypeResolution::visit (AST::AssignmentExpr &expr)\n   // scope will require knowledge of the type\n \n   // do the lhsType and the rhsType match\n-  // TODO\n+  before = typeComparisonBuffer.size ();\n+  lhsType->accept_vis (*this);\n+  if (typeComparisonBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"Failed to unwrap type for lhs\");\n+      return;\n+    }\n+\n+  before = typeComparisonBuffer.size ();\n+  rhsType->accept_vis (*this);\n+  if (typeComparisonBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"Failed to unwrap type for rhs\");\n+      return;\n+    }\n+\n+  auto rhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+  auto lhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+\n+  if (!typesAreCompatible (lhsTypeStr, rhsTypeStr))\n+    {\n+      rust_error_at (expr.right_expr->get_locus_slow (),\n+\t\t     \"E0308: expected: %s, found %s\", lhsTypeStr.c_str (),\n+\t\t     rhsTypeStr.c_str ());\n+      return;\n+    }\n }\n \n void"}, {"sha": "c71871efa425cd233df9f94740dc2713e8406ee2", "filename": "gcc/rust/analysis/rust-resolution.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f624877de5431ff4229b5078d56f3cd548a5dd/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f624877de5431ff4229b5078d56f3cd548a5dd/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.h?ref=89f624877de5431ff4229b5078d56f3cd548a5dd", "patch": "@@ -225,12 +225,15 @@ class TypeResolution : public AST::ASTVisitor\n \n   bool go ();\n \n+  bool typesAreCompatible (std::string &lhs, std::string &rhs) const;\n+\n   Scope<AST::Type *> scope;\n   Scope<AST::Type *> typeScope;\n   AST::Crate &crate;\n \n   std::vector<AST::IdentifierPattern> letPatternBuffer;\n   std::vector<AST::Type *> typeBuffer;\n+  std::vector<std::string> typeComparisonBuffer;\n };\n \n } // namespace Analysis"}]}