{"sha": "c13db5d119dd543d25d410ec9622be07e186bdff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEzZGI1ZDExOWRkNTQzZDI1ZDQxMGVjOTYyMmJlMDdlMTg2YmRmZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-05T16:33:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-05T16:33:31Z"}, "message": "demangle.h (cplus_demangle_v3): Add \"options\" parm.\n\n        * demangle.h (cplus_demangle_v3): Add \"options\" parm.\n        (cplus_demangle_v3_type): Remove prototype.\n        (DMGL_VERBOSE): New macro.\n        (DMGL_TYPES): New macro.\n\n        * cplus-dem.c (flags): Add DMGL_VERBOSE\n        (cplus_demangle_v3_p): Remove.\n        (demangle_it): Add DMGL_TYPES to passed flags.\n        * cp-demangle.c (cplus_demangle_v3_all): Remove.\n        (cplus_demangle_v3_type): Remove.\n        (cplus_demangle_v3): Add options parm.\n\n        * collect2.c (dump_file): Pass DMGL_VERBOSE to cplus_demangle.\n\nFrom-SVN: r49525", "tree": {"sha": "421a01819111b8d1eef8a7b2067ed77dc62d91aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/421a01819111b8d1eef8a7b2067ed77dc62d91aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c13db5d119dd543d25d410ec9622be07e186bdff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13db5d119dd543d25d410ec9622be07e186bdff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c13db5d119dd543d25d410ec9622be07e186bdff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13db5d119dd543d25d410ec9622be07e186bdff/comments", "author": null, "committer": null, "parents": [{"sha": "e07554eb1747af7a6fd6479ee38db3a04aa08e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07554eb1747af7a6fd6479ee38db3a04aa08e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e07554eb1747af7a6fd6479ee38db3a04aa08e2d"}], "stats": {"total": 117, "additions": 66, "deletions": 51}, "files": [{"sha": "a8095d881bb7a530131a6d8eefae35db001f6288", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13db5d119dd543d25d410ec9622be07e186bdff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13db5d119dd543d25d410ec9622be07e186bdff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c13db5d119dd543d25d410ec9622be07e186bdff", "patch": "@@ -1,3 +1,21 @@\n+2002-02-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-typeck.c (convert_for_assignment): Don't allow conversions\n+\tbetween pointers and references.  Only allow lvalues to convert to\n+\treference.\n+\n+\t* c-decl.c (finish_function): Warn about a non-void function with\n+\tno return statement and no abnormal exit.\n+\t(current_function_returns_abnormally): New variable.\n+\t(start_function): Clear it.\n+\t(struct c_language_function): Add returns_abnormally.\n+\t(push_c_function_context): Save it.\n+\t(pop_c_function_context): Restore it.\n+\t* c-tree.h: Declare current_function_returns_abnormally.\n+\t* c-typeck.c (build_function_call): Set it.\n+\n+\t* collect2.c (dump_file): Pass DMGL_VERBOSE to cplus_demangle.\n+\n 2002-02-05  Andreas Jaeger  <aj@suse.de>\n \n \t* crtstuff.c: Fix comments.\n@@ -14,26 +32,26 @@\n \n 2002-02-05  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/altivec.h (vec_step_help): Rename to\n-        __vec_step_help.\n+\t* config/rs6000/altivec.h (vec_step_help): Rename to\n+\t__vec_step_help.\n \n 2002-02-05  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/altivec.h: Fix typos.\n+\t* config/rs6000/altivec.h: Fix typos.\n \n 2002-02-05  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/arm/netbsd.h: Correct a comment.\n \n 2002-02-05  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (altivec_init_builtins): Fix typo\n-        building void typed builtins.\n+\t* config/rs6000/rs6000.c (altivec_init_builtins): Fix typo\n+\tbuilding void typed builtins.\n \n-        * config/rs6000/altivec.h (vec_ld*): Fix typos.\n-        (vec_step): Implement for C++.\n+\t* config/rs6000/altivec.h (vec_ld*): Fix typos.\n+\t(vec_step): Implement for C++.\n \n-Mon Feb  4 19:23:19 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+Mon Feb\t 4 19:23:19 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* final.c (final_scan_insn): Add case for NOTE_INSN_LOOP_END_TOP_COND.\n \n@@ -44,20 +62,20 @@ Mon Feb  4 19:23:19 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2002-02-05  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * doc/extend.texi: Warn about unsupported usage of altivec\n-        builtins.\n+\t* doc/extend.texi: Warn about unsupported usage of altivec\n+\tbuiltins.\n \n-        * config/rs6000/rs6000.md (altivec_vcmp*_p): Remove.\n-        (altivec_predicate_*): New.\n+\t* config/rs6000/rs6000.md (altivec_vcmp*_p): Remove.\n+\t(altivec_predicate_*): New.\n \n-        * config/rs6000/altivec.h: Rewrite predicates to use new builtins.\n-        Add C++ version of vec_*() functions.\n+\t* config/rs6000/altivec.h: Rewrite predicates to use new builtins.\n+\tAdd C++ version of vec_*() functions.\n \n-        * config/rs6000/rs6000.c (bdesc_altivec_preds): New.\n-        (bdesc_2arg): Remove altivec predicates.\n-        (altivec_expand_builtin): Handle predicates.\n-        (altivec_init_builtins): Handle predicates.\n-        (altivec_expand_predicate_builtin): New.\n+\t* config/rs6000/rs6000.c (bdesc_altivec_preds): New.\n+\t(bdesc_2arg): Remove altivec predicates.\n+\t(altivec_expand_builtin): Handle predicates.\n+\t(altivec_init_builtins): Handle predicates.\n+\t(altivec_expand_predicate_builtin): New.\n \n 2002-02-04  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n "}, {"sha": "6fb2efd76b10b16ab2ea064c0f763a9aabce3855", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13db5d119dd543d25d410ec9622be07e186bdff/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13db5d119dd543d25d410ec9622be07e186bdff/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=c13db5d119dd543d25d410ec9622be07e186bdff", "patch": "@@ -532,7 +532,7 @@ dump_file (name)\n \t  if (no_demangle)\n \t    result = 0;\n \t  else\n-\t    result = cplus_demangle (p, DMGL_PARAMS | DMGL_ANSI);\n+\t    result = cplus_demangle (p, DMGL_PARAMS | DMGL_ANSI | DMGL_VERBOSE);\n \n \t  if (result)\n \t    {"}, {"sha": "599adbaa1f736589e2f04cc55fbe13fbba15730d", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13db5d119dd543d25d410ec9622be07e186bdff/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13db5d119dd543d25d410ec9622be07e186bdff/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=c13db5d119dd543d25d410ec9622be07e186bdff", "patch": "@@ -1,3 +1,10 @@\n+2002-02-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* demangle.h (cplus_demangle_v3): Add \"options\" parm.\n+\t(cplus_demangle_v3_type): Remove prototype.\n+\t(DMGL_VERBOSE): New macro.\n+\t(DMGL_TYPES): New macro.\n+\n 2002-02-02  H.J. Lu  (hjl@gnu.org)\n \n \t* demangle.h (cplus_demangle_v3_type): New prototype."}, {"sha": "ad0569a0d572cf01487d7c6e0ca0bad3b0ccfc41", "filename": "include/demangle.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13db5d119dd543d25d410ec9622be07e186bdff/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13db5d119dd543d25d410ec9622be07e186bdff/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=c13db5d119dd543d25d410ec9622be07e186bdff", "patch": "@@ -29,6 +29,8 @@\n #define DMGL_PARAMS\t (1 << 0)\t/* Include function args */\n #define DMGL_ANSI\t (1 << 1)\t/* Include const, volatile, etc */\n #define DMGL_JAVA\t (1 << 2)\t/* Demangle as Java rather than C++. */\n+#define DMGL_VERBOSE\t (1 << 3)\t/* Include implementation details.  */\n+#define DMGL_TYPES\t (1 << 4)\t/* Also try to demangle type encodings.  */\n \n #define DMGL_AUTO\t (1 << 8)\n #define DMGL_GNU\t (1 << 9)\n@@ -125,12 +127,7 @@ cplus_demangle_name_to_style PARAMS ((const char *name));\n \n /* V3 ABI demangling entry points, defined in cp-demangle.c.  */\n extern char*\n-cplus_demangle_v3 PARAMS ((const char* mangled));\n-\n-/* V3 ABI demangling entry points, defined in cp-demangle.c. Also\n-   demagle types. */\n-extern char*\n-cplus_demangle_v3_type PARAMS ((const char* mangled));\n+cplus_demangle_v3 PARAMS ((const char* mangled, int options));\n \n extern char*\n java_demangle_v3 PARAMS ((const char* mangled));"}, {"sha": "08cf00d048cbbb7737d736cbc1a62e88c5154a32", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13db5d119dd543d25d410ec9622be07e186bdff/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13db5d119dd543d25d410ec9622be07e186bdff/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c13db5d119dd543d25d410ec9622be07e186bdff", "patch": "@@ -1,3 +1,12 @@\n+2002-02-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* cplus-dem.c (flags): Add DMGL_VERBOSE\n+\t(cplus_demangle_v3_p): Remove.\n+\t(demangle_it): Add DMGL_TYPES to passed flags.\n+\t* cp-demangle.c (cplus_demangle_v3_all): Remove.\n+\t(cplus_demangle_v3_type): Remove.\n+\t(cplus_demangle_v3): Add options parm.\n+\n 2002-02-02  H.J. Lu  (hjl@gnu.org)\n \n \t* cp-demangle.c (cp_demangle_type): Do not protect with"}, {"sha": "136dc723d2ed15f7075e513c84d8ff4aa1a09c8c", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13db5d119dd543d25d410ec9622be07e186bdff/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13db5d119dd543d25d410ec9622be07e186bdff/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=c13db5d119dd543d25d410ec9622be07e186bdff", "patch": "@@ -940,8 +940,6 @@ static status_t cp_demangle\n   PARAMS ((const char *, dyn_string_t, int));\n static status_t cp_demangle_type\n   PARAMS ((const char*, dyn_string_t));\n-static char* cplus_demangle_v3_all\n-  PARAMS ((const char*, int));\n \n /* When passed to demangle_bare_function_type, indicates that the\n    function's return type is not encoded before its parameter types.  */\n@@ -3687,26 +3685,13 @@ __cxa_demangle (mangled_name, output_buffer, length, status)\n    If the demangling failes, returns NULL.  */\n \n char *\n-cplus_demangle_v3 (mangled)\n+cplus_demangle_v3 (mangled, options)\n      const char* mangled;\n-{\n-  return cplus_demangle_v3_all (mangled, 0);\n-}\n-\n-char *\n-cplus_demangle_v3_type (mangled)\n-     const char* mangled;\n-{\n-  return cplus_demangle_v3_all (mangled, 1);\n-}\n-\n-static char *\n-cplus_demangle_v3_all (mangled, type)\n-     const char* mangled;\n-     int type;\n+     int options;\n {\n   dyn_string_t demangled;\n   status_t status;\n+  int type = !!(options & DMGL_TYPES);\n \n   if (mangled[0] == '_' && mangled[1] == 'Z')\n     /* It is not a type.  */\n@@ -3718,6 +3703,8 @@ cplus_demangle_v3_all (mangled, type)\n \treturn NULL;\n     }\n \n+  flag_verbose = !!(options & DMGL_VERBOSE);\n+\n   /* Create a dyn_string to hold the demangled name.  */\n   demangled = dyn_string_new (0);\n   /* Attempt the demangling.  */"}, {"sha": "4e60b2cfcbd11436685825f77410d04535ef666d", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c13db5d119dd543d25d410ec9622be07e186bdff/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c13db5d119dd543d25d410ec9622be07e186bdff/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=c13db5d119dd543d25d410ec9622be07e186bdff", "patch": "@@ -478,9 +478,6 @@ do_hpacc_template_literal PARAMS ((struct work_stuff *, const char **, string *)\n static int\n snarf_numeric_literal PARAMS ((const char **, string *));\n \n-static char* (*cplus_demangle_v3_p) PARAMS ((const char* mangled))\n-  = cplus_demangle_v3;\n-\n /* There is a TYPE_QUAL value for each type qualifier.  They can be\n    combined by bitwise-or to form the complete set of qualifiers for a\n    type.  */\n@@ -914,7 +911,7 @@ cplus_demangle (mangled, options)\n   /* The V3 ABI demangling is implemented elsewhere.  */\n   if (GNU_V3_DEMANGLING || AUTO_DEMANGLING)\n     {\n-      ret = cplus_demangle_v3_p (mangled);\n+      ret = cplus_demangle_v3 (mangled, work->options);\n       if (ret || GNU_V3_DEMANGLING)\n \treturn ret;\n     }\n@@ -4877,7 +4874,7 @@ string_append_template_idx (s, idx)\n \n static const char *program_name;\n static const char *program_version = VERSION;\n-static int flags = DMGL_PARAMS | DMGL_ANSI;\n+static int flags = DMGL_PARAMS | DMGL_ANSI | DMGL_VERBOSE;\n \n static void demangle_it PARAMS ((char *));\n static void usage PARAMS ((FILE *, int)) ATTRIBUTE_NORETURN;\n@@ -4890,7 +4887,8 @@ demangle_it (mangled_name)\n {\n   char *result;\n \n-  result = cplus_demangle (mangled_name, flags);\n+  /* For command line args, also try to demangle type encodings.  */\n+  result = cplus_demangle (mangled_name, flags | DMGL_TYPES);\n   if (result == NULL)\n     {\n       printf (\"%s\\n\", mangled_name);\n@@ -5089,7 +5087,6 @@ main (argc, argv)\n \n   if (optind < argc)\n     {\n-      cplus_demangle_v3_p = cplus_demangle_v3_type;\n       for ( ; optind < argc; optind++)\n \t{\n \t  demangle_it (argv[optind]);"}]}