{"sha": "c4ccdc0e63150d1cab2686a16dafeb7520315cb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjY2RjMGU2MzE1MGQxY2FiMjY4NmExNmRhZmViNzUyMDMxNWNiMg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-09-17T08:30:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-09-17T08:30:50Z"}, "message": "re PR fortran/91588 (ICE in check_inquiry, at fortran/expr.c:2673)\n\n2019-09-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91588\n\t* expr.c (check_inquiry): Remove extended component refs by\n\tusing symbol pointers. If a function argument is an associate\n\tvariable with a constant target, copy the target expression in\n\tplace of the argument expression. Check that the charlen is not\n\tNULL before using the string length.\n\t(gfc_check_assign): Remove extraneous space.\n\n2019-09-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91588\n\t* gfortran.dg/associate_49.f90 : New test.\n\nFrom-SVN: r275800", "tree": {"sha": "5097632df9d13621c49c887823c65c3a42c0456e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5097632df9d13621c49c887823c65c3a42c0456e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4ccdc0e63150d1cab2686a16dafeb7520315cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ccdc0e63150d1cab2686a16dafeb7520315cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ccdc0e63150d1cab2686a16dafeb7520315cb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/comments", "author": null, "committer": null, "parents": [{"sha": "ecd4d80cb2ee6a72d46c59eff47860d2a0fa2daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd4d80cb2ee6a72d46c59eff47860d2a0fa2daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd4d80cb2ee6a72d46c59eff47860d2a0fa2daa"}], "stats": {"total": 128, "additions": 94, "deletions": 34}, "files": [{"sha": "853bd32ecde6045aedf69814d84c831e22b99f6b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c4ccdc0e63150d1cab2686a16dafeb7520315cb2", "patch": "@@ -1,3 +1,13 @@\n+2019-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91588\n+\t* expr.c (check_inquiry): Remove extended component refs by\n+\tusing symbol pointers. If a function argument is an associate\n+\tvariable with a constant target, copy the target expression in\n+\tplace of the argument expression. Check that the charlen is not\n+\tNULL before using the string length.\n+\t(gfc_check_assign): Remove extraneous space.\n+\n 2019-09-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91727"}, {"sha": "5d3480eb4a5912dcbe70041bf9d1530b2c610caa", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=c4ccdc0e63150d1cab2686a16dafeb7520315cb2", "patch": "@@ -2610,6 +2610,8 @@ check_inquiry (gfc_expr *e, int not_restricted)\n \n   int i = 0;\n   gfc_actual_arglist *ap;\n+  gfc_symbol *sym;\n+  gfc_symbol *asym;\n \n   if (!e->value.function.isym\n       || !e->value.function.isym->inquiry)\n@@ -2619,20 +2621,22 @@ check_inquiry (gfc_expr *e, int not_restricted)\n   if (e->symtree == NULL)\n     return MATCH_NO;\n \n-  if (e->symtree->n.sym->from_intmod)\n+  sym = e->symtree->n.sym;\n+\n+  if (sym->from_intmod)\n     {\n-      if (e->symtree->n.sym->from_intmod == INTMOD_ISO_FORTRAN_ENV\n-\t  && e->symtree->n.sym->intmod_sym_id != ISOFORTRAN_COMPILER_OPTIONS\n-\t  && e->symtree->n.sym->intmod_sym_id != ISOFORTRAN_COMPILER_VERSION)\n+      if (sym->from_intmod == INTMOD_ISO_FORTRAN_ENV\n+\t  && sym->intmod_sym_id != ISOFORTRAN_COMPILER_OPTIONS\n+\t  && sym->intmod_sym_id != ISOFORTRAN_COMPILER_VERSION)\n \treturn MATCH_NO;\n \n-      if (e->symtree->n.sym->from_intmod == INTMOD_ISO_C_BINDING\n-\t  && e->symtree->n.sym->intmod_sym_id != ISOCBINDING_C_SIZEOF)\n+      if (sym->from_intmod == INTMOD_ISO_C_BINDING\n+\t  && sym->intmod_sym_id != ISOCBINDING_C_SIZEOF)\n \treturn MATCH_NO;\n     }\n   else\n     {\n-      name = e->symtree->n.sym->name;\n+      name = sym->name;\n \n       functions = inquiry_func_gnu;\n       if (gfc_option.warn_std & GFC_STD_F2003)\n@@ -2657,41 +2661,48 @@ check_inquiry (gfc_expr *e, int not_restricted)\n       if (!ap->expr)\n \tcontinue;\n \n+      asym = ap->expr->symtree ? ap->expr->symtree->n.sym : NULL;\n+\n       if (ap->expr->ts.type == BT_UNKNOWN)\n \t{\n-\t  if (ap->expr->symtree->n.sym->ts.type == BT_UNKNOWN\n-\t      && !gfc_set_default_type (ap->expr->symtree->n.sym, 0, gfc_current_ns))\n+\t  if (asym && asym->ts.type == BT_UNKNOWN\n+\t      && !gfc_set_default_type (asym, 0, gfc_current_ns))\n \t    return MATCH_NO;\n \n-\t  ap->expr->ts = ap->expr->symtree->n.sym->ts;\n+\t  ap->expr->ts = asym->ts;\n \t}\n \n-\t/* Assumed character length will not reduce to a constant expression\n-\t   with LEN, as required by the standard.  */\n-\tif (i == 5 && not_restricted && ap->expr->symtree\n-\t    && ap->expr->symtree->n.sym->ts.type == BT_CHARACTER\n-\t    && (ap->expr->symtree->n.sym->ts.u.cl->length == NULL\n-\t\t|| ap->expr->symtree->n.sym->ts.deferred))\n-\t  {\n-\t    gfc_error (\"Assumed or deferred character length variable %qs \"\n-\t\t\t\"in constant expression at %L\",\n-\t\t\tap->expr->symtree->n.sym->name,\n-\t\t\t&ap->expr->where);\n-\t      return MATCH_ERROR;\n-\t  }\n-\telse if (not_restricted && !gfc_check_init_expr (ap->expr))\n-\t  return MATCH_ERROR;\n+      if (asym && asym->assoc && asym->assoc->target\n+\t  && asym->assoc->target->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  gfc_free_expr (ap->expr);\n+\t  ap->expr = gfc_copy_expr (asym->assoc->target);\n+\t}\n \n-\tif (not_restricted == 0\n-\t      && ap->expr->expr_type != EXPR_VARIABLE\n-\t      && !check_restricted (ap->expr))\n+      /* Assumed character length will not reduce to a constant expression\n+\t with LEN, as required by the standard.  */\n+      if (i == 5 && not_restricted && asym\n+\t  && asym->ts.type == BT_CHARACTER\n+\t  && ((asym->ts.u.cl && asym->ts.u.cl->length == NULL)\n+\t      || asym->ts.deferred))\n+\t{\n+\t  gfc_error (\"Assumed or deferred character length variable %qs \"\n+\t\t     \"in constant expression at %L\",\n+\t\t      asym->name, &ap->expr->where);\n \t  return MATCH_ERROR;\n+\t}\n+      else if (not_restricted && !gfc_check_init_expr (ap->expr))\n+\treturn MATCH_ERROR;\n \n-\tif (not_restricted == 0\n-\t    && ap->expr->expr_type == EXPR_VARIABLE\n-\t    && ap->expr->symtree->n.sym->attr.dummy\n-\t    && ap->expr->symtree->n.sym->attr.optional)\n-\t  return MATCH_NO;\n+      if (not_restricted == 0\n+\t  && ap->expr->expr_type != EXPR_VARIABLE\n+\t  && !check_restricted (ap->expr))\n+\treturn MATCH_ERROR;\n+\n+      if (not_restricted == 0\n+\t  && ap->expr->expr_type == EXPR_VARIABLE\n+\t  && asym->attr.dummy && asym->attr.optional)\n+\treturn MATCH_NO;\n     }\n \n   return MATCH_YES;\n@@ -3683,7 +3694,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n \n       gfc_error (\"BOZ literal constant near %L cannot be assigned to a \"\n \t\t \"%qs variable\", &rvalue->where, gfc_typename (&lvalue->ts));\n- \n+\n       return false;\n     }\n "}, {"sha": "de8b5a66febe632b016fc38972b7ea018e602b79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4ccdc0e63150d1cab2686a16dafeb7520315cb2", "patch": "@@ -1,3 +1,8 @@\n+2019-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91588\n+\t* gfortran.dg/associate_49.f90 : New test.\n+\n 2019-09-17  Yannick Moy  <moy@adacore.com>\n \n \t* gnat.dg/fixedpnt7.adb: New testcase."}, {"sha": "1b2059505566f1217c63a9e97f40858f224acd6e", "filename": "gcc/testsuite/gfortran.dg/associate_49.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_49.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ccdc0e63150d1cab2686a16dafeb7520315cb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_49.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_49.f90?ref=c4ccdc0e63150d1cab2686a16dafeb7520315cb2", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR91588, in which the declaration of 'a' caused\n+! an ICE.\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   character(4), parameter :: parm = '7890'\n+   associate (z => '1234')\n+      block\n+         integer(len(z)) :: a\n+         if (kind(a) .ne. 4) stop 1\n+      end block\n+   end associate\n+   associate (z => '123')\n+      block\n+         integer(len(z)+1) :: a\n+         if (kind(a) .ne. 4) stop 2\n+      end block\n+   end associate\n+   associate (z => 1_8)\n+      block\n+         integer(kind(z)) :: a\n+         if (kind(a) .ne. 8) stop 3\n+      end block\n+   end associate\n+   associate (z => parm)\n+      block\n+         integer(len(z)) :: a\n+         if (kind(a) .ne. 4) stop 4\n+      end block\n+   end associate\n+end"}]}