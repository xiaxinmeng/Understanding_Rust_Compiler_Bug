{"sha": "98088266e55b9c34ff9b0852fa9a7c559594cdcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwODgyNjZlNTViOWMzNGZmOWIwODUyZmE5YTdjNTU5NTk0Y2RjZA==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2015-12-17T14:10:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2015-12-17T14:10:12Z"}, "message": "DWARF: create a macro for max dimensions for array descr. lang. hook\n\nThe array descriptor language hook can hold the description of a limited\nnumber of array dimensions.  This macro will ease preventing overflow in\nfront-ends.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/misc.c (gnat_get_array_descr_info): When the\n\tarray has more dimensions than the language hook can handle,\n\tfall back to a nested arrays description.  Handle context-less\n\tarray types.\n\ngcc/ChangeLog:\n\n\t* dwarf2out.h (DWARF2OUT_ARRAY_DESCR_INFO_MAX_DIMEN): New macro.\n\t(struct array_descr_info): Use it for the dimensions array's\n\tsize.\n\t* dwarf2out.c (gen_type_die_with_usage): Check that the array\n\tdescr. language hook does not return an array with more\n\tdimensions that it should.\n\nFrom-SVN: r231766", "tree": {"sha": "147811576da6971191a0556e3c237b728b185cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/147811576da6971191a0556e3c237b728b185cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98088266e55b9c34ff9b0852fa9a7c559594cdcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98088266e55b9c34ff9b0852fa9a7c559594cdcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98088266e55b9c34ff9b0852fa9a7c559594cdcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98088266e55b9c34ff9b0852fa9a7c559594cdcd/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24bd3c6e80acc80f02d5016cf192a702553ae673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bd3c6e80acc80f02d5016cf192a702553ae673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bd3c6e80acc80f02d5016cf192a702553ae673"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "9736786df3177cb9ea033c18187cab53850d03da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98088266e55b9c34ff9b0852fa9a7c559594cdcd", "patch": "@@ -1,3 +1,12 @@\n+2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.h (DWARF2OUT_ARRAY_DESCR_INFO_MAX_DIMEN): New macro.\n+\t(struct array_descr_info): Use it for the dimensions array's\n+\tsize.\n+\t* dwarf2out.c (gen_type_die_with_usage): Check that the array\n+\tdescr. language hook does not return an array with more\n+\tdimensions that it should.\n+\n 2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* langhooks.h (struct lang_hooks_for_types): Add a"}, {"sha": "eb1092380bfb7fc242e829d38129d5c1f1c51df6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=98088266e55b9c34ff9b0852fa9a7c559594cdcd", "patch": "@@ -1,3 +1,10 @@\n+2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/misc.c (gnat_get_array_descr_info): When the\n+\tarray has more dimensions than the language hook can handle,\n+\tfall back to a nested arrays description.  Handle context-less\n+\tarray types.\n+\n 2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): When"}, {"sha": "891ca3f338c0194fe2613724ddf52372adcb8520", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=98088266e55b9c34ff9b0852fa9a7c559594cdcd", "patch": "@@ -856,7 +856,20 @@ gnat_get_array_descr_info (const_tree type, struct array_descr_info *info)\n \tbreak;\n       last_dimen = dimen;\n     }\n+\n   info->ndimensions = i;\n+\n+  /* Too many dimensions?  Give up generating proper description: yield instead\n+     nested arrays.  Note that in this case, this hook is invoked once on each\n+     intermediate array type: be consistent and output nested arrays for all\n+     dimensions.  */\n+  if (info->ndimensions > DWARF2OUT_ARRAY_DESCR_INFO_MAX_DIMEN\n+      || TYPE_MULTI_ARRAY_P (first_dimen))\n+    {\n+      info->ndimensions = 1;\n+      last_dimen = first_dimen;\n+    }\n+\n   info->element_type = TREE_TYPE (last_dimen);\n \n   /* Now iterate over all dimensions in source-order and fill the info\n@@ -881,7 +894,8 @@ gnat_get_array_descr_info (const_tree type, struct array_descr_info *info)\n \t     expressions:  arrays that are constrained by record discriminants\n \t     and XUA types.  */\n \t  const bool is_xua_type =\n-\t   (TREE_CODE (TYPE_CONTEXT (first_dimen)) != RECORD_TYPE\n+\t   (TYPE_CONTEXT (first_dimen) != NULL_TREE\n+            && TREE_CODE (TYPE_CONTEXT (first_dimen)) != RECORD_TYPE\n \t    && contains_placeholder_p (TYPE_MIN_VALUE (index_type)));\n \n \t  if (is_xua_type && gnat_encodings != DWARF_GNAT_ENCODINGS_MINIMAL)"}, {"sha": "98528c7e0628aad1826a06653f5133e89c0efe73", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=98088266e55b9c34ff9b0852fa9a7c559594cdcd", "patch": "@@ -22563,6 +22563,10 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n       memset (&info, 0, sizeof (info));\n       if (lang_hooks.types.get_array_descr_info (type, &info))\n \t{\n+\t  /* Fortran sometimes emits array types with no dimension.  */\n+\t  gcc_assert (info.ndimensions >= 0\n+\t\t      && (info.ndimensions\n+\t\t\t  <= DWARF2OUT_ARRAY_DESCR_INFO_MAX_DIMEN));\n \t  gen_descr_array_type_die (type, &info, context_die);\n \t  TREE_ASM_WRITTEN (type) = 1;\n \t  return;"}, {"sha": "24a384c8143b8694c60090a8c94ca1a28275b066", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98088266e55b9c34ff9b0852fa9a7c559594cdcd/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=98088266e55b9c34ff9b0852fa9a7c559594cdcd", "patch": "@@ -316,6 +316,8 @@ enum array_descr_ordering\n   array_descr_ordering_column_major\n };\n \n+#define DWARF2OUT_ARRAY_DESCR_INFO_MAX_DIMEN 16\n+\n struct array_descr_info\n {\n   int ndimensions;\n@@ -339,7 +341,7 @@ struct array_descr_info\n       /* Only Fortran uses more than one dimension for array types.  For other\n \t languages, the stride can be rather specified for the whole array.  */\n       tree stride;\n-    } dimen[10];\n+    } dimen[DWARF2OUT_ARRAY_DESCR_INFO_MAX_DIMEN];\n };\n \n enum fixed_point_scale_factor"}]}