{"sha": "d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyODhkZmI5ZmFjMTQ1MWFkZWRlOTZlODU1YzhmZGU5ZWU1ZjJjMQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-12-14T10:00:56Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-12-14T10:00:56Z"}, "message": "re PR target/50931 ([avr] Support a 24-bit scalar integer mode)\n\nlibgcc/\n\tPR target/50931\n\t* config/avr/t-avr (LIB1ASMSRC): Add _mulpsi3, _mulsqipsi3.\n\t* config/avr/lib1funcs.S (__mulpsi3, __mulsqipsi3): New functions.\ngcc/\n\tPR target/50931\n\t* config/avr/avr.md (mulpsi3): New expander.\n\t(*umulqihipsi3, *umulhiqipsi3): New insns.\n\t(*mulsqipsi3.libgcc, *mulpsi3.libgcc): New insns.\n\t(mulsqipsi3, *mulpsi3): New insn-and-splits.\n\t(ashlpsi3): Turn to expander.  Move insn code to...\n\t(*ashlpsi3): ...this new insn.\ntestsuite/\n\tPR target/50931\n\t* gcc.target/avr/torture/int24-mul.c: New testcase.\n\nFrom-SVN: r182328", "tree": {"sha": "da23e4e79b412c8171d2375bf3121ad99e702e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da23e4e79b412c8171d2375bf3121ad99e702e08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552d2db5659aae080edbfdb27f446a98334b323d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552d2db5659aae080edbfdb27f446a98334b323d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552d2db5659aae080edbfdb27f446a98334b323d"}], "stats": {"total": 414, "additions": 411, "deletions": 3}, "files": [{"sha": "c9e927ad324bd9b948e9e28a8fa018f7e9ce6260", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "patch": "@@ -1,3 +1,13 @@\n+2011-12-14  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50931\n+\t* config/avr/avr.md (mulpsi3): New expander.\n+\t(*umulqihipsi3, *umulhiqipsi3): New insns.\n+\t(*mulsqipsi3.libgcc, *mulpsi3.libgcc): New insns.\n+\t(mulsqipsi3, *mulpsi3): New insn-and-splits.\n+\t(ashlpsi3): Turn to expander.  Move insn code to...\n+\t(*ashlpsi3): ...this new insn.\n+\n 2011-12-14  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (replace_uses_by): Only mark blocks altered"}, {"sha": "21e329b7424361ce7353ae7ac33ef6b7400236c4", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 155, "deletions": 2, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "patch": "@@ -2113,7 +2113,7 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-;; To support widening multiplicatioon with constant we postpone\n+;; To support widening multiplication with constant we postpone\n ;; expanding to the implicit library call until post combine and\n ;; prior to register allocation.  Clobber all hard registers that\n ;; might be used by the (widening) multiply until it is split and\n@@ -2574,6 +2574,132 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; 24-bit multiply\n+\n+;; To support widening multiplication with constant we postpone\n+;; expanding to the implicit library call until post combine and\n+;; prior to register allocation.  Clobber all hard registers that\n+;; might be used by the (widening) multiply until it is split and\n+;; it's final register footprint is worked out.\n+\n+(define_expand \"mulpsi3\"\n+  [(parallel [(set (match_operand:PSI 0 \"register_operand\" \"\")\n+                   (mult:PSI (match_operand:PSI 1 \"register_operand\" \"\")\n+                             (match_operand:PSI 2 \"nonmemory_operand\" \"\")))\n+              (clobber (reg:HI 26))\n+              (clobber (reg:DI 18))])]\n+  \"AVR_HAVE_MUL\"\n+  {\n+    if (s8_operand (operands[2], PSImode))\n+      {\n+        rtx reg = force_reg (QImode, gen_int_mode (INTVAL (operands[2]), QImode));\n+        emit_insn (gen_mulsqipsi3 (operands[0], reg, operands[1]));\n+        DONE;\n+      }\n+  })\n+\n+(define_insn \"*umulqihipsi3\"\n+  [(set (match_operand:PSI 0 \"register_operand\"                         \"=&r\")\n+        (mult:PSI (zero_extend:PSI (match_operand:QI 1 \"register_operand\" \"r\"))\n+                  (zero_extend:PSI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n+  \"AVR_HAVE_MUL\"\n+  \"mul %1,%A2\n+\tmovw %A0,r0\n+\tmul %1,%B2\n+\tclr %C0\n+\tadd %B0,r0\n+\tadc %C0,r1\n+\tclr __zero_reg__\"\n+  [(set_attr \"length\" \"7\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"*umulhiqipsi3\"\n+  [(set (match_operand:PSI 0 \"register_operand\"                         \"=&r\")\n+        (mult:PSI (zero_extend:PSI (match_operand:HI 2 \"register_operand\" \"r\"))\n+                  (zero_extend:PSI (match_operand:QI 1 \"register_operand\" \"r\"))))]\n+  \"AVR_HAVE_MUL\"\n+  \"mul %1,%A2\n+\tmovw %A0,r0\n+\tmul %1,%B2\n+\tadd %B0,r0\n+\tmov %C0,r1\n+\tclr __zero_reg__\n+\tadc %C0,__zero_reg__\"\n+  [(set_attr \"length\" \"7\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn_and_split \"mulsqipsi3\"\n+  [(set (match_operand:PSI 0 \"pseudo_register_operand\"                          \"=r\")\n+        (mult:PSI (sign_extend:PSI (match_operand:QI 1 \"pseudo_register_operand\" \"r\"))\n+                  (match_operand:PSI 2 \"pseudo_register_or_const_int_operand\"    \"rn\")))\n+   (clobber (reg:HI 26))\n+   (clobber (reg:DI 18))]\n+  \"AVR_HAVE_MUL && !reload_completed\"\n+  { gcc_unreachable(); }\n+  \"&& 1\"\n+  [(set (reg:QI 25)\n+        (match_dup 1))\n+   (set (reg:PSI 22)\n+        (match_dup 2))\n+   (set (reg:PSI 18)\n+        (mult:PSI (sign_extend:PSI (reg:QI 25))\n+                  (reg:PSI 22)))\n+   (set (match_dup 0)\n+        (reg:PSI 18))])\n+\n+(define_insn_and_split \"*mulpsi3\"\n+  [(set (match_operand:PSI 0 \"pseudo_register_operand\"                       \"=r\")\n+        (mult:PSI (match_operand:PSI 1 \"pseudo_register_operand\"              \"r\")\n+                  (match_operand:PSI 2 \"pseudo_register_or_const_int_operand\" \"rn\")))\n+   (clobber (reg:HI 26))\n+   (clobber (reg:DI 18))]\n+  \"AVR_HAVE_MUL && !reload_completed\"\n+  { gcc_unreachable(); }\n+  \"&& 1\"\n+  [(set (reg:PSI 18)\n+        (match_dup 1))\n+   (set (reg:PSI 22) \n+        (match_dup 2))\n+   (parallel [(set (reg:PSI 22)\n+                   (mult:PSI (reg:PSI 22)\n+                             (reg:PSI 18)))\n+              (clobber (reg:QI 21))\n+              (clobber (reg:QI 25))\n+              (clobber (reg:HI 26))])\n+   (set (match_dup 0)\n+        (reg:PSI 22))]\n+  {\n+    if (s8_operand (operands[2], PSImode))\n+      {\n+        rtx reg = force_reg (QImode, gen_int_mode (INTVAL (operands[2]), QImode));\n+        emit_insn (gen_mulsqipsi3 (operands[0], reg, operands[1]));\n+        DONE;\n+      }\n+  })\n+\n+(define_insn \"*mulsqipsi3.libgcc\"\n+  [(set (reg:PSI 18)\n+        (mult:PSI (sign_extend:PSI (reg:QI 25))\n+                  (reg:PSI 22)))]\n+  \"AVR_HAVE_MUL\"\n+  \"%~call __mulsqipsi3\"\n+  [(set_attr \"type\" \"xcall\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"*mulpsi3.libgcc\"\n+  [(set (reg:PSI 22)\n+        (mult:PSI (reg:PSI 22)\n+                  (reg:PSI 18)))\n+   (clobber (reg:QI 21))\n+   (clobber (reg:QI 25))\n+   (clobber (reg:HI 26))]\n+  \"AVR_HAVE_MUL\"\n+  \"%~call __mulpsi3\"\n+  [(set_attr \"type\" \"xcall\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; 24-bit signed/unsigned division and modulo.\n ;; Notice that the libgcc implementation return the quotient in R22\n@@ -3363,7 +3489,34 @@\n    (set_attr \"adjust_len\" \"ashlsi\")\n    (set_attr \"cc\" \"none,set_n,clobber,clobber\")])\n \n-(define_insn \"ashlpsi3\"\n+(define_expand \"ashlpsi3\"\n+  [(parallel [(set (match_operand:PSI 0 \"register_operand\"             \"\")\n+                   (ashift:PSI (match_operand:PSI 1 \"register_operand\" \"\")\n+                               (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n+              (clobber (scratch:QI))])]\n+  \"\"\n+  {\n+    if (AVR_HAVE_MUL\n+        && CONST_INT_P (operands[2]))\n+      {\n+        if (IN_RANGE (INTVAL (operands[2]), 3, 6))\n+          {\n+            rtx xoffset = force_reg (QImode, gen_int_mode (1 << INTVAL (operands[2]), QImode));\n+            emit_insn (gen_mulsqipsi3 (operands[0], xoffset, operands[1])); \n+            DONE;\n+          }\n+        else if (optimize_insn_for_speed_p ()\n+                 && INTVAL (operands[2]) != 16\n+                 && IN_RANGE (INTVAL (operands[2]), 9, 22))\n+          {\n+            rtx xoffset = force_reg (PSImode, gen_int_mode (1 << INTVAL (operands[2]), PSImode));\n+            emit_insn (gen_mulpsi3 (operands[0], operands[1], xoffset)); \n+            DONE;\n+          }\n+      }\n+  })\n+\n+(define_insn \"*ashlpsi3\"\n   [(set (match_operand:PSI 0 \"register_operand\"             \"=r,r,r,r\")\n         (ashift:PSI (match_operand:PSI 1 \"register_operand\"  \"0,0,r,0\")\n                     (match_operand:QI 2 \"nonmemory_operand\"  \"r,P,O,n\")))"}, {"sha": "81d50c9d0fc87d5fa65d5eb599b78dc5ce8c3f25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "patch": "@@ -1,3 +1,8 @@\n+2011-12-14  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50931\n+\t* gcc.target/avr/torture/int24-mul.c: New.\n+\n 2011-12-14  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/51476"}, {"sha": "084e5a58d978365bc340964178dce59764891da2", "filename": "gcc/testsuite/gcc.target/avr/torture/int24-mul.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fint24-mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fint24-mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fint24-mul.c?ref=d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run } */\n+/* { dg-options \"-w\" } */\n+\n+#include <stdlib.h>\n+\n+const __pgm __int24 vals[] =\n+  {\n+    0, 1, 2, 3, -1, -2, -3, 0xff, 0x100, 0x101,\n+    0xffL * 0xff, 0xfffL * 0xfff, 0x101010L, 0xaaaaaaL\n+  };\n+\n+void test_u (void)\n+{\n+  unsigned int i;\n+  unsigned long la, lb, lc;\n+  __uint24 a, b, c;\n+\n+  int S = sizeof (vals) / sizeof (*vals);\n+\n+  for (i = 0; i < 500; i++)\n+    {\n+      if (i < S*S)\n+        {\n+          a = vals[i / S];\n+          b = vals[i % S];\n+        }\n+      else\n+        {\n+          if (i & 1)\n+            a += 0x7654321L;\n+          else\n+            b += 0x5fe453L;\n+        }\n+\n+      c = a * b;\n+\n+      la = a;\n+      lb = b;\n+      lc = 0xffffff & (la * lb);\n+      \n+      if (c != lc)\n+        abort();\n+    }\n+}\n+\n+#define TEST_N_U(A1,A2,B)                       \\\n+  do {                                          \\\n+    if ((0xffffff & (A1*B)) != A2*B)            \\\n+      abort();                                  \\\n+  } while (0)\n+\n+void test_nu (void)\n+{\n+  unsigned long la;\n+  unsigned int i;\n+  int S = sizeof (vals) / sizeof (*vals);\n+  __uint24 a;\n+  \n+  for (i = 0; i < 500; i++)\n+    {\n+      a = i < S\n+        ? vals[i % S]\n+        : a + 0x7654321;\n+\n+      la = a;\n+\n+      TEST_N_U (la, a, 2);\n+      TEST_N_U (la, a, 3);\n+      TEST_N_U (la, a, 4);\n+      TEST_N_U (la, a, 5);\n+      TEST_N_U (la, a, 15);\n+      TEST_N_U (la, a, 16);\n+      TEST_N_U (la, a, 128);\n+      TEST_N_U (la, a, 0x1000);\n+    }\n+}\n+     \n+int main (void)\n+{\n+  test_u();\n+  test_nu();\n+  \n+  exit(0);\n+    \n+  return 0;\n+}"}, {"sha": "ce2df4acd326e14b5075b24801e5bb287cdddeaf", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "patch": "@@ -1,3 +1,9 @@\n+2011-12-14  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/49313\n+\t* config/avr/t-avr (LIB1ASMSRC): Add _mulpsi3, _mulsqipsi3.\n+\t* config/avr/lib1funcs.S (__mulpsi3, __mulsqipsi3): New functions.\n+\n 2011-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sol2-unwind.h: Use #ifdef directive consistently."}, {"sha": "bc16cf282073e25f375032cb74710f4cecbb8201", "filename": "libgcc/config/avr/lib1funcs.S", "status": "modified", "additions": 148, "deletions": 1, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flib1funcs.S?ref=d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "patch": "@@ -465,6 +465,153 @@ ENDF __mulsi3\n \n #endif /* __AVR_HAVE_MUL__ */\n \n+/*******************************************************\n+       Multiplication 24 x 24\n+*******************************************************/\n+\n+#if defined (L_mulpsi3)\n+\n+;; A[0..2]: In: Multiplicand; Out: Product\n+#define A0  22\n+#define A1  A0+1\n+#define A2  A0+2\n+\n+;; B[0..2]: In: Multiplier\n+#define B0  18\n+#define B1  B0+1\n+#define B2  B0+2\n+\n+#if defined (__AVR_HAVE_MUL__)\n+\n+;; C[0..2]: Expand Result\n+#define C0  22\n+#define C1  C0+1\n+#define C2  C0+2\n+\n+;; R24:R22 *= R20:R18\n+;; Clobbers: r21, r25, r26, r27, __tmp_reg__\n+\n+#define AA0 26\n+#define AA2 21\n+\n+DEFUN __mulpsi3\n+    wmov    AA0, A0\n+    mov     AA2, A2\n+    XCALL   __umulhisi3\n+    mul     AA2, B0     $  add  C2, r0\n+    mul     AA0, B2     $  add  C2, r0\n+    clr     __zero_reg__\n+    ret\n+ENDF __mulpsi3\n+\n+#undef AA2\n+#undef AA0\n+\n+#undef C2\n+#undef C1\n+#undef C0\n+\n+#else /* !HAVE_MUL */\n+\n+;; C[0..2]: Expand Result\n+#define C0  0\n+#define C1  C0+1\n+#define C2  21\n+\n+;; R24:R22 *= R20:R18\n+;; Clobbers: __tmp_reg__, R18, R19, R20, R21\n+\n+DEFUN __mulpsi3\n+\n+    ;; C[] = 0\n+    clr     __tmp_reg__\n+    clr     C2\n+    \n+0:  ;; Shift N-th Bit of B[] into Carry.  N = 24 - Loop\n+    LSR  B2     $  ror  B1     $  ror  B0\n+    \n+    ;; If the N-th Bit of B[] was set...\n+    brcc    1f\n+    \n+    ;; ...then add A[] * 2^N to the Result C[]\n+    ADD  C0,A0  $  adc  C1,A1  $  adc  C2,A2\n+    \n+1:  ;; Multiply A[] by 2\n+    LSL  A0     $  rol  A1     $  rol  A2\n+    \n+    ;; Loop until B[] is 0\n+    subi B0,0   $  sbci B1,0   $  sbci B2,0\n+    brne    0b\n+    \n+    ;; Copy C[] to the return Register A[]\n+    wmov    A0, C0\n+    mov     A2, C2\n+\n+    clr     __zero_reg__\n+    ret\n+ENDF __mulpsi3\n+\n+#undef C2\n+#undef C1\n+#undef C0\n+\n+#endif /* HAVE_MUL */\n+\n+#undef B2\n+#undef B1\n+#undef B0\n+\n+#undef A2\n+#undef A1\n+#undef A0\n+\n+#endif /* L_mulpsi3 */\n+\n+#if defined (L_mulsqipsi3) && defined (__AVR_HAVE_MUL__)\n+\n+;; A[0..2]: In: Multiplicand\n+#define A0  22\n+#define A1  A0+1\n+#define A2  A0+2\n+\n+;; BB: In: Multiplier\n+#define BB  25\n+\n+;; C[0..2]: Result\n+#define C0  18\n+#define C1  C0+1\n+#define C2  C0+2\n+\n+;; C[] = A[] * sign_extend (BB)\n+DEFUN __mulsqipsi3\n+    mul     A0, BB\n+    movw    C0, r0\n+    mul     A2, BB\n+    mov     C2, r0\n+    mul     A1, BB\n+    add     C1, r0\n+    adc     C2, r1\n+    clr     __zero_reg__\n+    sbrs    BB, 7\n+    ret\n+    ;; One-extend BB\n+    sub     C1, A0\n+    sbc     C2, A1\n+    ret\n+ENDF __mulsqipsi3\n+\n+#undef C2\n+#undef C1\n+#undef C0\n+\n+#undef BB\n+\n+#undef A2\n+#undef A1\n+#undef A0\n+\n+#endif /* L_mulsqipsi3  &&  HAVE_MUL */\n+\n /*******************************************************\n        Multiplication 64 x 64\n *******************************************************/\n@@ -1342,7 +1489,7 @@ DEFUN  __divdi3_moddi3\n #endif /* SPEED_DIV */    \n \n 0:  ;; The Prologue\n-    ;; Save Z = 12 Registers:  Y, 17...8\n+    ;; Save 12 Registers:  Y, 17...8\n     ;; No Frame needed (X = 0)\n     clr r26\n     clr r27"}, {"sha": "7d7dc9ef33b866a1e99f1799c8a0e7b1624aba4f", "filename": "libgcc/config/avr/t-avr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/libgcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7288dfb9fac1451adede96e855c8fde9ee5f2c1/libgcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avr?ref=d7288dfb9fac1451adede96e855c8fde9ee5f2c1", "patch": "@@ -2,6 +2,7 @@ LIB1ASMSRC = avr/lib1funcs.S\n LIB1ASMFUNCS = \\\n \t_mulqi3 \\\n \t_mulhi3 \\\n+\t_mulpsi3 _mulsqipsi3 \\\n \t_mulhisi3 \\\n \t_umulhisi3 \\\n \t_usmulhisi3 \\"}]}