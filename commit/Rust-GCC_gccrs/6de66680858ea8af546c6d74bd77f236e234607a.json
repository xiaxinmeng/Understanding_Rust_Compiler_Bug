{"sha": "6de66680858ea8af546c6d74bd77f236e234607a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlNjY2ODA4NThlYThhZjU0NmM2ZDc0YmQ3N2YyMzZlMjM0NjA3YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-05T17:28:37Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-05T17:28:37Z"}, "message": "langhooks.c: Don't include gt-langhooks.h.\n\n\t* langhooks.c: Don't include gt-langhooks.h.\n\t(var_labelno): Delete.\n\t(lhd_set_decl_assembler_name): Do not append a distinguishing\n\tnumber to file-scope internal-linkage declarations for the first\n\tinput file, even if they have DECL_CONTEXT set.  Use DECL_UID of\n\tthe declaration itself (if at block scope), or its containing\n\tTRANSLATION_UNIT_DECL (if at file scope) for the distinguishing\n\tnumber.\n\n\t* opts.c (cur_in_fname): New global.\n\t* opts.h: Declare it.\n\t* tree.c: Include opts.h.\n\t(make_node_stat): If creating a TRANSLATION_UNIT_DECL, give it\n\tDECL_UID equal to cur_in_fname.\n\t(copy_node_stat): Do not change DECL_UID when copying a\n\tTRANSLATION_UNIT_DECL.\n\t(build_common_tree_nodes): Adjust next_decl_uid to reserve the\n\trange 0 .. num_in_fnames-1 for TRANSLATION_UNIT_DECLs.\n\n\t* c-decl.c (c_static_assembler_name): Delete.\n\t* c-tree.h (c_static_assembler_name): Delete prototype.\n\t* c-lang.c, objc/objc-lang.c: Don't override\n\tLANG_HOOKS_SET_DECL_ASSEMBLER_NAME.\n\n\t* Makefile.in (tree.o): Update dependencies.\n\t(GTFILES): Remove langhooks.c.\n\ncp:\n\t* decl.c (cxx_init_decl_processing): Call\n\tbuild_common_tree_nodes before creating the global NAMESPACE_DECL.\n\nFrom-SVN: r84123", "tree": {"sha": "3123dea64dc9e9124841c660cee9869693ee9f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3123dea64dc9e9124841c660cee9869693ee9f00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6de66680858ea8af546c6d74bd77f236e234607a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de66680858ea8af546c6d74bd77f236e234607a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de66680858ea8af546c6d74bd77f236e234607a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de66680858ea8af546c6d74bd77f236e234607a/comments", "author": null, "committer": null, "parents": [{"sha": "ab0e8f666d04db063342c726ea95a91401ec7545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0e8f666d04db063342c726ea95a91401ec7545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0e8f666d04db063342c726ea95a91401ec7545"}], "stats": {"total": 154, "additions": 96, "deletions": 58}, "files": [{"sha": "3d06b8874ec6e480aec154fb4c1c3737241fca9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -1,3 +1,32 @@\n+2004-07-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* langhooks.c: Don't include gt-langhooks.h.\n+\t(var_labelno): Delete.\n+\t(lhd_set_decl_assembler_name): Do not append a distinguishing\n+\tnumber to file-scope internal-linkage declarations for the first\n+\tinput file, even if they have DECL_CONTEXT set.  Use DECL_UID of\n+\tthe declaration itself (if at block scope), or its containing\n+\tTRANSLATION_UNIT_DECL (if at file scope) for the distinguishing\n+\tnumber.\n+\n+\t* opts.c (cur_in_fname): New global.\n+\t* opts.h: Declare it.\n+\t* tree.c: Include opts.h.\n+\t(make_node_stat): If creating a TRANSLATION_UNIT_DECL, give it\n+\tDECL_UID equal to cur_in_fname.\n+\t(copy_node_stat): Do not change DECL_UID when copying a\n+\tTRANSLATION_UNIT_DECL.\n+\t(build_common_tree_nodes): Adjust next_decl_uid to reserve the\n+\trange 0 .. num_in_fnames-1 for TRANSLATION_UNIT_DECLs.\n+\n+\t* c-decl.c (c_static_assembler_name): Delete.\n+\t* c-tree.h (c_static_assembler_name): Delete prototype.\n+\t* c-lang.c, objc/objc-lang.c: Don't override\n+\tLANG_HOOKS_SET_DECL_ASSEMBLER_NAME.\n+\n+\t* Makefile.in (tree.o): Update dependencies.\n+\t(GTFILES): Remove langhooks.c.\n+\n 2004-07-05  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold) <TRUNC_MOD_EXPR>: Optimize unsigned modulus\n@@ -30,13 +59,13 @@\n \t(walk_type_fields): New function.\n \t(walk_tree): Use it.\n \t* tree-nested.c (create_tmp_var_for): Show seen in BIND_EXPR.\n-\t\n+\n \t* tree-sra.c (struct sra_walk_fns): Init function now returns bool.\n \t(sra_walk_modify_expr): Allow init function to fail.\n \t(scan_init): Now returns bool.\n \t(generate_element_init): If can't understand INIT, return false.\n \t(scalarize_init): Return false if generate_element_init does.\n-\t\n+\n \t* tree-pretty-print.c (dump_generic_node, case ARRAY_TYPE): Properly\n \tprint bounds.\n \n@@ -79,7 +108,7 @@\n \t(make_tree_binfo_stat): Declare.\n \t(make_tree_binfo): New.\n \t(enum tree_node_kind): Add binfo_kind.\n-\t\n+\n \t* objc/objc-act.c (start_class, objc_declare_protocols,\n \tstart_protocols): Use TYPE_LANG_SLOT_1.\n \t* objc/objc-act.h (CLASS_BINFO_ELTS, PROTOCOL_BINFO_ELTS): Rename\n@@ -123,7 +152,7 @@\n \t(struct assign_parm_data_one): New.\n \t(assign_parms_initialize_all, assign_parms_augmented_arg_list,\n \tassign_parm_find_data_types, assign_parms_setup_varargs,\n-\tassign_parm_find_entry_rtl, assign_parm_is_stack_parm, \n+\tassign_parm_find_entry_rtl, assign_parm_is_stack_parm,\n \tassign_parm_find_stack_rtl, assign_parm_adjust_entry_rtl,\n \tassign_parm_adjust_stack_rtl, assign_parm_setup_block_p,\n \tassign_parm_setup_block, assign_parm_setup_reg,\n@@ -137,7 +166,7 @@\n \t(bitmap_insert_into_set): No point in inserting the value if\n \tit's invariant.\n \t(bitmap_set_contains): New function.\n-\t(bitmap_set_replace_value): Add comment on why we do it \n+\t(bitmap_set_replace_value): Add comment on why we do it\n \tthis way.\n \t(set_contains): Removed.\n \t(bitmap_set_subtract_from_value_set): New name of\n@@ -282,7 +311,7 @@\n \tgen_mem_addressof, flush_addressof, put_addressof_into_stack,\n \tpurge_bitfield_addressof_replacements, purge_addressof_replacements,\n \tpurge_addressof_1, insns_for_mem_hash, insns_for_mem_comp,\n-\tstruct insns_for_mem_walk_info, insns_for_mem_walk, \n+\tstruct insns_for_mem_walk_info, insns_for_mem_walk,\n \tcompute_insns_for_mem, is_addressof, purge_addressof, setjmp_protect,\n \tsetjmp_protect_args): Remove.\n \t(push_function_context_to): Don't handle var_refs_queue.\n@@ -344,7 +373,7 @@\n \t(walk_tree, case POINTER_TYPE): Deal with mutually recursive pointers.\n \n \t* tree-sra.c (generate_element_init): Remove any useless conversions.\n-\t\n+\n \t* gimplify.c (gimplify_conversion): Remove stripping useless\n \tconversions from here.\n \t(gimplify_expr): Put it here, in place of call to STRIP_MAIN_TYPE_NOPS."}, {"sha": "5da0f951f4baf46071e127e0688f548441676e82", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -1569,7 +1569,7 @@ langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H)\n    $(LANGHOOKS_DEF_H) $(FLAGS_H) $(GGC_H) gt-langhooks.h diagnostic.h\n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(FLAGS_H) function.h \\\n    toplev.h $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h \\\n-   real.h gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H)\n+   real.h gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H) opts.h\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(C_TREE_H) $(FLAGS_H) langhooks.h toplev.h output.h c-pragma.h $(RTL_H) \\\n    $(GGC_H) $(EXPR_H) $(SPLAY_TREE_H) $(TREE_DUMP_H) tree-iterator.h\n@@ -2337,7 +2337,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/fold-const.c $(srcdir)/function.c \\\n   $(srcdir)/gcse.c $(srcdir)/integrate.c $(srcdir)/lists.c $(srcdir)/optabs.c \\\n   $(srcdir)/profile.c $(srcdir)/ra-build.c $(srcdir)/regclass.c \\\n-  $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c $(srcdir)/langhooks.c \\\n+  $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c \\\n   $(srcdir)/sdbout.c $(srcdir)/stmt.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n   $(srcdir)/tree-mudflap.c $(srcdir)/tree-flow.h \\"}, {"sha": "56351512ff48cea6abad991388694247706ba86d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -6576,22 +6576,6 @@ make_pointer_declarator (tree type_quals_attrs, tree target)\n   return build1 (INDIRECT_REF, quals, itarget);\n }\n \n-/* A wrapper around lhd_set_decl_assembler_name that gives static\n-   variables their C names if they are at file scope and only one\n-   translation unit is being compiled, for backwards compatibility\n-   with certain bizarre assembler hacks (like crtstuff.c).  */\n-\n-void\n-c_static_assembler_name (tree decl)\n-{\n-  if (num_in_fnames == 1\n-      && !TREE_PUBLIC (decl) && DECL_CONTEXT (decl)\n-      && TREE_CODE (DECL_CONTEXT (decl)) == TRANSLATION_UNIT_DECL)\n-    SET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n-  else\n-    lhd_set_decl_assembler_name (decl);\n-}\n-\n /* Perform final processing on file-scope data.  */\n static void\n c_write_global_declarations_1 (tree globals)"}, {"sha": "f58a89905876ecbd575c168c3dbde7cfb63eb597", "filename": "gcc/c-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -76,8 +76,6 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n-#undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n-#define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME c_static_assembler_name\n #undef LANG_HOOKS_NO_BODY_BLOCKS\n #define LANG_HOOKS_NO_BODY_BLOCKS true\n #undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL"}, {"sha": "6083b1fbafaf891a72147af9bd5ce765a6e9807b", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -189,7 +189,6 @@ extern tree start_struct (enum tree_code, tree);\n extern void store_parm_decls (void);\n extern tree xref_tag (enum tree_code, tree);\n extern int c_expand_decl (tree);\n-extern void c_static_assembler_name (tree);\n extern tree make_pointer_declarator (tree, tree);\n \n /* in c-objc-common.c */"}, {"sha": "77aaf45568bac308386c4b16b186bbcb26ceedfa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -1,3 +1,8 @@\n+2004-07-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl.c (cxx_init_decl_processing): Call\n+\tbuild_common_tree_nodes before creating the global NAMESPACE_DECL.\n+\n 2004-07-05  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/2518\n@@ -197,12 +202,12 @@\n \n 2004-06-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n-\tPR c++/14123\t\n+\tPR c++/14123\n \t* cxx-pretty-print.c (pp_cxx_ptr_operator): Properly put\n \tparanthesis in case of pointers to array members.\n \t* error.c (dump_type_prefix): Likewise.\n \t(dump_type_suffix): Maybe issue a whitespace when printing\n-\tARRAY_TYPE. \n+\tARRAY_TYPE.\n \n 2004-06-27  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -219,12 +224,12 @@\n \t(pp_non_consecutive_character): Likewise.\n \t(dump_scope): Use pp_cxx_colon_colon.\n \t(dump_template_parameter): Use pp_cxx_identifier,\n-\tpp_cxx_tree_identifier and pp_cxx_whitespace. \n+\tpp_cxx_tree_identifier and pp_cxx_whitespace.\n \t(dump_templat_bindings): Replace use of pp_string with sequence\n \tof pp_cxx_whitespace and pp_equal.\n \t(dump_type): Use pp_cxx_identifier, pp_cxx_tree_identifier,\n \tpp_cxx_colon_colon, pp_cxx_whitespace throughout.  Don't set\n-\tpadding here. \n+\tpadding here.\n \t(dump_aggr_type): Use pp_cxx_identifier amd pp_cxx_tree_identifier.\n \t(dump_type_prefix): Don't set padding.  Use pp_cxx_whitespace,\n \tpp_cxx_left_parent, pp_cxx_colon_colon and pp_cxx_star troughout.\n@@ -234,17 +239,17 @@\n \t(dump_template_decl): Likewise.\n \t(dump_function_decl): Likewise.  Set padding as appropriate.\n \t(dump_parameters): Use pp_cxx_left_paren, pp_cxx_identifier and\n-\tpp_cxx_right_paren. \n+\tpp_cxx_right_paren.\n \t(dump_exception_spec): Likewise.\n \t(dump_function_name): Use pp_cxx_tree_identifier and\n-\tpp_cxx_identifier. \n+\tpp_cxx_identifier.\n \t(dump_template_parms): Use pp_cxx_begin_template_argument_list and\n \tpp_cxx_end_template_argument_list.\n \t(dump_expr): Use pp_cxx_left_paren, pp_cxx_right_paren,\n \tpp_cxx_colon_colon, pp_cxx_identifier, pp_cxx_tree_identifier and\n-\tpp_cxx_whitespace throughout. \n+\tpp_cxx_whitespace throughout.\n \t(dump_binary_op): Use pp_cxx_whitespace, pp_cxx_left_paren and\n-\tpp_cxx_right_paren. \n+\tpp_cxx_right_paren.\n \t(dump_unary_op): Likewise.\n \t(reinit_cxx_pp): New function.\n \t(type_as_string); Use it.\n@@ -399,8 +404,8 @@\n \t(cp_parser_set_decl_spec_type): Likewise.\n \t* pt.c: Do not include lex.h.\n \t* semantics.c: Likewise.\n-\t(finish_member_class_template): Remove.\t\n-\t\n+\t(finish_member_class_template): Remove.\n+\n 2004-06-23  Roger Sayle  <roger@eyesopen.com>\n \n \t* call.c (build_cxx_call): Don't call expand_tree_builtin.  No"}, {"sha": "bee0402b954a68339094332b0a394496020cefeb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -2887,6 +2887,8 @@ cxx_init_decl_processing (void)\n   tree void_ftype;\n   tree void_ftype_ptr;\n \n+  build_common_tree_nodes (flag_signed_char);\n+\n   /* Create all the identifiers we need.  */\n   initialize_predefined_identifiers ();\n \n@@ -2926,8 +2928,6 @@ cxx_init_decl_processing (void)\n   /* Initially, C.  */\n   current_lang_name = lang_name_c;\n \n-  build_common_tree_nodes (flag_signed_char);\n-\n   error_mark_list = build_tree_list (error_mark_node, error_mark_node);\n   TREE_TYPE (error_mark_list) = error_mark_node;\n "}, {"sha": "1b2a84e20ed4707282bd118d0d52395511d3777a", "filename": "gcc/langhooks.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -157,11 +157,6 @@ lhd_warn_unused_global_decl (tree decl)\n   return true;\n }\n \n-/* Number for making the label on the next\n-   static variable internal to a function.  */\n-\n-static GTY(()) int var_labelno;\n-\n /* Set the DECL_ASSEMBLER_NAME for DECL.  */\n void\n lhd_set_decl_assembler_name (tree decl)\n@@ -184,18 +179,33 @@ lhd_set_decl_assembler_name (tree decl)\n \n          Can't use just the variable's own name for a variable whose\n \t scope is less than the whole compilation.  Concatenate a\n-\t distinguishing number.  */\n-      if (!TREE_PUBLIC (decl) && DECL_CONTEXT (decl))\n+\t distinguishing number.  If the decl is at block scope, the\n+\t number assigned is the DECL_UID; if the decl is at file\n+\t scope, the number is the DECL_UID of the surrounding\n+\t TRANSLATION_UNIT_DECL, except for the T_U_D with UID 0.\n+\t Those (the file-scope internal-linkage declarations from the\n+\t first input file) get no suffix, which is consistent with\n+\t what has historically been done for file-scope declarations\n+\t with internal linkage.  */\n+      if (TREE_PUBLIC (decl)\n+\t  || DECL_CONTEXT (decl) == NULL_TREE\n+\t  || (TREE_CODE (DECL_CONTEXT (decl)) == TRANSLATION_UNIT_DECL\n+\t      && DECL_UID (DECL_CONTEXT (decl)) == 0))\n+\tSET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n+      else\n \t{\n \t  const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n \t  char *label;\n-\t  \n-\t  ASM_FORMAT_PRIVATE_NAME (label, name, var_labelno);\n-\t  var_labelno++;\n+\t  unsigned int uid;\n+\n+\t  if (TREE_CODE (DECL_CONTEXT (decl)) == TRANSLATION_UNIT_DECL)\n+\t    uid = DECL_UID (DECL_CONTEXT (decl));\n+\t  else\n+\t    uid = DECL_UID (decl);\n+\n+\t  ASM_FORMAT_PRIVATE_NAME (label, name, uid);\n \t  SET_DECL_ASSEMBLER_NAME (decl, get_identifier (label));\n \t}\n-      else\n-\tSET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n     }\n   else\n     /* Nobody should ever be asking for the DECL_ASSEMBLER_NAME of\n@@ -581,5 +591,3 @@ lhd_make_node (enum tree_code code)\n {\n   return make_node (code);\n }\n-\n-#include \"gt-langhooks.h\""}, {"sha": "fde6cbd0907385f919a13be6f1f9163d44176d20", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -73,8 +73,6 @@ enum c_language_kind c_language = clk_objc;\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n-#undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n-#define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME c_static_assembler_name\n #undef LANG_HOOKS_NO_BODY_BLOCKS\n #define LANG_HOOKS_NO_BODY_BLOCKS true\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL"}, {"sha": "b54a63fc45ae30ad43a0717cbbdfd408bc9b665f", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -92,6 +92,7 @@ static bool flag_peel_loops_set, flag_branch_probabilities_set;\n /* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;\n+unsigned cur_in_fname;\n \n static size_t find_opt (const char *, int);\n static int common_handle_option (size_t scode, const char *arg, int value);"}, {"sha": "69eb3b8a55d66f6b1e932da7c16395bcf313fb7f", "filename": "gcc/opts.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -57,4 +57,8 @@ extern const char **in_fnames;\n \n extern unsigned num_in_fnames;\n \n+/* Current input filename index.  */\n+\n+extern unsigned cur_in_fname;\n+\n #endif"}, {"sha": "9183a5cc86416a76476d357602d976b40e93c0df", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de66680858ea8af546c6d74bd77f236e234607a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6de66680858ea8af546c6d74bd77f236e234607a", "patch": "@@ -48,6 +48,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-iterator.h\"\n #include \"basic-block.h\"\n #include \"tree-flow.h\"\n+#include \"opts.h\"\n \n /* obstack.[ch] explicitly declined to prototype this.  */\n extern int _obstack_allocated_p (struct obstack *h, void *obj);\n@@ -309,7 +310,10 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n       DECL_USER_ALIGN (t) = 0;\n       DECL_IN_SYSTEM_HEADER (t) = in_system_header;\n       DECL_SOURCE_LOCATION (t) = input_location;\n-      DECL_UID (t) = next_decl_uid++;\n+      if (code == TRANSLATION_UNIT_DECL)\n+\tDECL_UID (t) = cur_in_fname;\n+      else\n+\tDECL_UID (t) = next_decl_uid++;\n \n       /* We have not yet computed the alias set for this declaration.  */\n       DECL_POINTER_ALIAS_SET (t) = -1;\n@@ -382,7 +386,7 @@ copy_node_stat (tree node MEM_STAT_DECL)\n   TREE_VISITED (t) = 0;\n   t->common.ann = 0;\n \n-  if (TREE_CODE_CLASS (code) == 'd')\n+  if (TREE_CODE_CLASS (code) == 'd' && code != TRANSLATION_UNIT_DECL)\n     DECL_UID (t) = next_decl_uid++;\n   else if (TREE_CODE_CLASS (code) == 't')\n     {\n@@ -5310,6 +5314,14 @@ make_or_reuse_type (unsigned size, int unsignedp)\n void\n build_common_tree_nodes (int signed_char)\n {\n+  /* This function is called after command line parsing is complete,\n+     but before any DECL nodes should have been created.  Therefore,\n+     now is the appropriate time to adjust next_decl_uid so that the\n+     range 0 .. num_in_fnames-1 is reserved for TRANSLATION_UNIT_DECLs.  */\n+  if (next_decl_uid)\n+    abort ();\n+  next_decl_uid = num_in_fnames;\n+\n   error_mark_node = make_node (ERROR_MARK);\n   TREE_TYPE (error_mark_node) = error_mark_node;\n "}]}