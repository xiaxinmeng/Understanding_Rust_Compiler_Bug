{"sha": "5829cc0fe4d56025bdad318535b9ecb64b2fae77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyOWNjMGZlNGQ1NjAyNWJkYWQzMTg1MzViOWVjYjY0YjJmYWU3Nw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-08-09T21:59:32Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-08-09T21:59:32Z"}, "message": "calls.c (mem_overlaps_already_clobbered_arg_p): Use SBITMAP_SIZE instead of looking at sbitmap n_bits member directly.\n\n\t* calls.c (mem_overlaps_already_clobbered_arg_p): Use SBITMAP_SIZE\n\tinstead of looking at sbitmap n_bits member directly.\n\t* gcse.c (hoist_code): Likewise.\n\t* sched-rgn.c (split_edges): Likewise.\n\t* tree-into-ssa.c (is_old_name, is_new_name, add_new_name_mapping,\n\tupdate_ssa): Likewise.\n\nFrom-SVN: r190268", "tree": {"sha": "1e7008b03a7aff28f1cd7bb22f1c37a20bc77b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e7008b03a7aff28f1cd7bb22f1c37a20bc77b6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5829cc0fe4d56025bdad318535b9ecb64b2fae77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5829cc0fe4d56025bdad318535b9ecb64b2fae77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5829cc0fe4d56025bdad318535b9ecb64b2fae77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5829cc0fe4d56025bdad318535b9ecb64b2fae77/comments", "author": null, "committer": null, "parents": [{"sha": "b197fc48f9dd8f5f6074721c7afa2306a35820bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b197fc48f9dd8f5f6074721c7afa2306a35820bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b197fc48f9dd8f5f6074721c7afa2306a35820bf"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "e9652f8543995e2c25d22aa39bf7eab7309afc7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5829cc0fe4d56025bdad318535b9ecb64b2fae77", "patch": "@@ -1,3 +1,12 @@\n+2012-08-09  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* calls.c (mem_overlaps_already_clobbered_arg_p): Use SBITMAP_SIZE\n+\tinstead of looking at sbitmap n_bits member directly.\n+\t* gcse.c (hoist_code): Likewise.\n+\t* sched-rgn.c (split_edges): Likewise.\n+\t* tree-into-ssa.c (is_old_name, is_new_name, add_new_name_mapping,\n+\tupdate_ssa): Likewise.\n+\n 2012-08-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Return preferred"}, {"sha": "5bc1b1ebb87f3bc0572f446e22251cd85a3ca4f1", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=5829cc0fe4d56025bdad318535b9ecb64b2fae77", "patch": "@@ -1850,7 +1850,7 @@ mem_overlaps_already_clobbered_arg_p (rtx addr, unsigned HOST_WIDE_INT size)\n       unsigned HOST_WIDE_INT k;\n \n       for (k = 0; k < size; k++)\n-\tif (i + k < stored_args_map->n_bits\n+\tif (i + k < SBITMAP_SIZE (stored_args_map)\n \t    && TEST_BIT (stored_args_map, i + k))\n \t  return true;\n     }"}, {"sha": "fd285de5d88b703d1262ff34839180a9cac365e7", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=5829cc0fe4d56025bdad318535b9ecb64b2fae77", "patch": "@@ -2982,7 +2982,7 @@ hoist_code (void)\n \n       /* Examine each expression that is very busy at the exit of this\n \t block.  These are the potentially hoistable expressions.  */\n-      for (i = 0; i < hoist_vbeout[bb->index]->n_bits; i++)\n+      for (i = 0; i < SBITMAP_SIZE (hoist_vbeout[bb->index]); i++)\n \t{\n \t  if (TEST_BIT (hoist_vbeout[bb->index], i))\n \t    {"}, {"sha": "0498cede6948867e31c02b611b053d0fb0945a79", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=5829cc0fe4d56025bdad318535b9ecb64b2fae77", "patch": "@@ -1455,7 +1455,7 @@ compute_dom_prob_ps (int bb)\n static void\n split_edges (int bb_src, int bb_trg, edgelst *bl)\n {\n-  sbitmap src = sbitmap_alloc (pot_split[bb_src]->n_bits);\n+  sbitmap src = sbitmap_alloc (SBITMAP_SIZE (pot_split[bb_src]));\n   sbitmap_copy (src, pot_split[bb_src]);\n \n   sbitmap_difference (src, src, pot_split[bb_trg]);"}, {"sha": "3e0c817b23b0bb63ad0edc2e6fb83e7e6bbcce71", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5829cc0fe4d56025bdad318535b9ecb64b2fae77/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=5829cc0fe4d56025bdad318535b9ecb64b2fae77", "patch": "@@ -588,7 +588,8 @@ is_old_name (tree name)\n   unsigned ver = SSA_NAME_VERSION (name);\n   if (!new_ssa_names)\n     return false;\n-  return ver < new_ssa_names->n_bits && TEST_BIT (old_ssa_names, ver);\n+  return (ver < SBITMAP_SIZE (new_ssa_names)\n+\t  && TEST_BIT (old_ssa_names, ver));\n }\n \n \n@@ -600,7 +601,8 @@ is_new_name (tree name)\n   unsigned ver = SSA_NAME_VERSION (name);\n   if (!new_ssa_names)\n     return false;\n-  return ver < new_ssa_names->n_bits && TEST_BIT (new_ssa_names, ver);\n+  return (ver < SBITMAP_SIZE (new_ssa_names)\n+\t  && TEST_BIT (new_ssa_names, ver));\n }\n \n \n@@ -640,7 +642,7 @@ add_new_name_mapping (tree new_tree, tree old)\n \n   /* We may need to grow NEW_SSA_NAMES and OLD_SSA_NAMES because our\n      caller may have created new names since the set was created.  */\n-  if (new_ssa_names->n_bits <= num_ssa_names - 1)\n+  if (SBITMAP_SIZE (new_ssa_names) <= num_ssa_names - 1)\n     {\n       unsigned int new_sz = num_ssa_names + NAME_SETS_GROWTH_FACTOR;\n       new_ssa_names = sbitmap_resize (new_ssa_names, new_sz, 0);\n@@ -3247,7 +3249,7 @@ update_ssa (unsigned update_flags)\n \t     will grow while we are traversing it (but it will not\n \t     gain any new members).  Copy OLD_SSA_NAMES to a temporary\n \t     for traversal.  */\n-\t  sbitmap tmp = sbitmap_alloc (old_ssa_names->n_bits);\n+\t  sbitmap tmp = sbitmap_alloc (SBITMAP_SIZE (old_ssa_names));\n \t  sbitmap_copy (tmp, old_ssa_names);\n \t  EXECUTE_IF_SET_IN_SBITMAP (tmp, 0, i, sbi)\n \t    insert_updated_phi_nodes_for (ssa_name (i), dfs, blocks_to_update,"}]}