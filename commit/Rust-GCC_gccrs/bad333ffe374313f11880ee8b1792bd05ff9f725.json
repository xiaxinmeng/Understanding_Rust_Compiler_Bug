{"sha": "bad333ffe374313f11880ee8b1792bd05ff9f725", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkMzMzZmZlMzc0MzEzZjExODgwZWU4YjE3OTJiZDA1ZmY5ZjcyNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-02-13T00:25:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-02-13T00:25:30Z"}, "message": "re PR libstdc++/21172 (potential integer overflow error in STL heap functions)\n\n2007-02-12  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/21172\n\t* include/bits/stl_heap.h (__adjust_heap(_RandomAccessIterator,\n\t_Distance, _Distance, _Tp), __adjust_heap(_RandomAccessIterator,\n\t_Distance, _Distance, _Tp, _Compare)): Avoid potential integer\n\toverflow.\n\n\t* include/bits/stl_heap.h (__is_heap(_RandomAccessIterator,\n\t_RandomAccessIterator), __is_heap(_RandomAccessIterator,\n\t_RandomAccessIterator, _StrictWeakOrdering): Mark inline.\n\t(make_heap(_RandomAccessIterator, _RandomAccessIterator,\n\t_Compare)): Do not mark inline.\n\n\t* include/bits/stl_heap.h (push_heap(_RandomAccessIterator,\n\t_RandomAccessIterator), sort_heap(_RandomAccessIterator,\n\t_RandomAccessIterator)): Uncomment __glibcxx_requires_heap.\n\nFrom-SVN: r121875", "tree": {"sha": "425fc9e1ce06d50cf40508800cd51b380d82dd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/425fc9e1ce06d50cf40508800cd51b380d82dd05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad333ffe374313f11880ee8b1792bd05ff9f725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad333ffe374313f11880ee8b1792bd05ff9f725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad333ffe374313f11880ee8b1792bd05ff9f725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad333ffe374313f11880ee8b1792bd05ff9f725/comments", "author": null, "committer": null, "parents": [{"sha": "51d4712ed1c31cd4408298591373e4acf90c829e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d4712ed1c31cd4408298591373e4acf90c829e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d4712ed1c31cd4408298591373e4acf90c829e"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "cd928efb7b66a369b22f0c5914e0561cc179e7df", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad333ffe374313f11880ee8b1792bd05ff9f725/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad333ffe374313f11880ee8b1792bd05ff9f725/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bad333ffe374313f11880ee8b1792bd05ff9f725", "patch": "@@ -1,3 +1,21 @@\n+2007-02-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/21172\n+\t* include/bits/stl_heap.h (__adjust_heap(_RandomAccessIterator,\n+\t_Distance, _Distance, _Tp), __adjust_heap(_RandomAccessIterator,\n+\t_Distance, _Distance, _Tp, _Compare)): Avoid potential integer\n+\toverflow.\n+\n+\t* include/bits/stl_heap.h (__is_heap(_RandomAccessIterator,\n+\t_RandomAccessIterator), __is_heap(_RandomAccessIterator,\n+\t_RandomAccessIterator, _StrictWeakOrdering): Mark inline.\n+\t(make_heap(_RandomAccessIterator, _RandomAccessIterator,\n+\t_Compare)): Do not mark inline.\n+\n+\t* include/bits/stl_heap.h (push_heap(_RandomAccessIterator,\n+\t_RandomAccessIterator), sort_heap(_RandomAccessIterator,\n+\t_RandomAccessIterator)): Uncomment __glibcxx_requires_heap.\n+\n 2007-02-09  Richard Sandiford  <richard@codesourcery.com>\n \n \t* testsuite/22_locale/time_put/put/wchar_t/1.cc: XFAIL if"}, {"sha": "2965a12e8acea980850f999e490ab8a1cd5da5db", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad333ffe374313f11880ee8b1792bd05ff9f725/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad333ffe374313f11880ee8b1792bd05ff9f725/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=bad333ffe374313f11880ee8b1792bd05ff9f725", "patch": "@@ -1,6 +1,7 @@\n // Heap implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -100,14 +101,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _RandomAccessIterator>\n-    bool\n+    inline bool\n     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     { return std::__is_heap(__first, std::distance(__first, __last)); }\n \n   template<typename _RandomAccessIterator, typename _StrictWeakOrdering>\n-    bool\n+    inline bool\n     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t    _StrictWeakOrdering __comp)\n+\t      _StrictWeakOrdering __comp)\n     { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }\n \n   // Heap-manipulation functions: push_heap, pop_heap, make_heap, sort_heap.\n@@ -150,7 +151,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    _RandomAccessIterator>)\n       __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      //      __glibcxx_requires_heap(__first, __last - 1);\n+      __glibcxx_requires_heap(__first, __last - 1);\n \n       std::__push_heap(__first, _DistanceType((__last - __first) - 1),\n \t\t       _DistanceType(0), _ValueType(*(__last - 1)));\n@@ -210,17 +211,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t  _Distance __len, _Tp __value)\n     {\n       const _Distance __topIndex = __holeIndex;\n-      _Distance __secondChild = 2 * __holeIndex + 2;\n-      while (__secondChild < __len)\n+      _Distance __secondChild = __holeIndex;\n+      while (__secondChild < (__len - 1) / 2)\n \t{\n+\t  __secondChild = 2 * (__secondChild + 1);\n \t  if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))\n \t    __secondChild--;\n \t  *(__first + __holeIndex) = *(__first + __secondChild);\n \t  __holeIndex = __secondChild;\n-\t  __secondChild = 2 * (__secondChild + 1);\n \t}\n-      if (__secondChild == __len)\n+      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)\n \t{\n+\t  __secondChild = 2 * (__secondChild + 1);\n \t  *(__first + __holeIndex) = *(__first + (__secondChild - 1));\n \t  __holeIndex = __secondChild - 1;\n \t}\n@@ -273,18 +275,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t  _Distance __len, _Tp __value, _Compare __comp)\n     {\n       const _Distance __topIndex = __holeIndex;\n-      _Distance __secondChild = 2 * __holeIndex + 2;\n-      while (__secondChild < __len)\n+      _Distance __secondChild = __holeIndex;\n+      while (__secondChild < (__len - 1) / 2)\n \t{\n+\t  __secondChild = 2 * (__secondChild + 1);\n \t  if (__comp(*(__first + __secondChild),\n \t\t     *(__first + (__secondChild - 1))))\n \t    __secondChild--;\n \t  *(__first + __holeIndex) = *(__first + __secondChild);\n \t  __holeIndex = __secondChild;\n-\t  __secondChild = 2 * (__secondChild + 1);\n \t}\n-      if (__secondChild == __len)\n+      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)\n \t{\n+\t  __secondChild = 2 * (__secondChild + 1);\n \t  *(__first + __holeIndex) = *(__first + (__secondChild - 1));\n \t  __holeIndex = __secondChild - 1;\n \t}\n@@ -319,14 +322,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     pop_heap(_RandomAccessIterator __first,\n \t     _RandomAccessIterator __last, _Compare __comp)\n     {\n+      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n+\t_ValueType;\n+\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n-      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n-\t_ValueType;\n       std::__pop_heap(__first, __last - 1, __last - 1,\n \t\t      _ValueType(*(__last - 1)), __comp);\n     }\n@@ -380,7 +384,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  Comparisons are made using comp.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n-    inline void\n+    void\n     make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t      _Compare __comp)\n     {\n@@ -427,7 +431,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      //      __glibcxx_requires_heap(__first, __last);\n+      __glibcxx_requires_heap(__first, __last);\n \n       while (__last - __first > 1)\n \tstd::pop_heap(__first, _RandomAccessIterator(__last--));"}]}