{"sha": "28a19c5be3c3982595230497f1a6142fda69bdfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhMTljNWJlM2MzOTgyNTk1MjMwNDk3ZjFhNjE0MmZkYTY5YmRmYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-02-23T14:05:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-02-23T14:05:31Z"}, "message": "PR c++/88294 - ICE with non-constant noexcept-specifier.\n\n\t* pt.c (maybe_instantiate_noexcept): Set up the list of local\n\tspecializations.  Set current_class_{ptr,ref}.\n\n\t* g++.dg/cpp0x/noexcept34.C: New test.\n\t* g++.dg/cpp0x/noexcept35.C: New test.\n\nFrom-SVN: r269158", "tree": {"sha": "2e28c31b6d5c2e1f9a5384301740141655ad547e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e28c31b6d5c2e1f9a5384301740141655ad547e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28a19c5be3c3982595230497f1a6142fda69bdfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a19c5be3c3982595230497f1a6142fda69bdfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a19c5be3c3982595230497f1a6142fda69bdfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a19c5be3c3982595230497f1a6142fda69bdfa/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "524cee402e974b7e8e6e8e7ca6af189360c99526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524cee402e974b7e8e6e8e7ca6af189360c99526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524cee402e974b7e8e6e8e7ca6af189360c99526"}], "stats": {"total": 101, "additions": 95, "deletions": 6}, "files": [{"sha": "2da2e3d60dc3009149844ff04679895cf8cda68c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=28a19c5be3c3982595230497f1a6142fda69bdfa", "patch": "@@ -1,3 +1,9 @@\n+2019-02-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88294 - ICE with non-constant noexcept-specifier.\n+\t* pt.c (maybe_instantiate_noexcept): Set up the list of local\n+\tspecializations.  Set current_class_{ptr,ref}.\n+\n 2019-02-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/89390"}, {"sha": "d678e27807810a2353a6f3ebdbc60ff79a953025", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=28a19c5be3c3982595230497f1a6142fda69bdfa", "patch": "@@ -24203,12 +24203,39 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t  push_access_scope (fn);\n \t  push_deferring_access_checks (dk_no_deferred);\n \t  input_location = DECL_SOURCE_LOCATION (fn);\n-\t  noex = tsubst_copy_and_build (DEFERRED_NOEXCEPT_PATTERN (noex),\n-\t\t\t\t\tDEFERRED_NOEXCEPT_ARGS (noex),\n-\t\t\t\t\ttf_warning_or_error, fn,\n-\t\t\t\t\t/*function_p=*/false,\n-\t\t\t\t\t/*integral_constant_expression_p=*/true);\n-\t  spec = build_noexcept_spec (noex, tf_warning_or_error);\n+\n+\t  /* A new stack interferes with pop_access_scope.  */\n+\t  {\n+\t    /* Set up the list of local specializations.  */\n+\t    local_specialization_stack lss (lss_copy);\n+\n+\t    tree save_ccp = current_class_ptr;\n+\t    tree save_ccr = current_class_ref;\n+\t    /* If needed, set current_class_ptr for the benefit of\n+\t       tsubst_copy/PARM_DECL.  */\n+\t    tree tdecl = DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (fn));\n+\t    if (DECL_NONSTATIC_MEMBER_FUNCTION_P (tdecl))\n+\t      {\n+\t\ttree this_parm = DECL_ARGUMENTS (tdecl);\n+\t\tcurrent_class_ptr = NULL_TREE;\n+\t\tcurrent_class_ref = cp_build_fold_indirect_ref (this_parm);\n+\t\tcurrent_class_ptr = this_parm;\n+\t      }\n+\n+\t    /* Create substitution entries for the parameters.  */\n+\t    register_parameter_specializations (tdecl, fn);\n+\n+\t    /* Do deferred instantiation of the noexcept-specifier.  */\n+\t    noex = tsubst_copy_and_build (DEFERRED_NOEXCEPT_PATTERN (noex),\n+\t\t\t\t\t  DEFERRED_NOEXCEPT_ARGS (noex),\n+\t\t\t\t\t  tf_warning_or_error, fn,\n+\t\t\t\t\t  /*function_p=*/false,\n+\t\t\t\t\t  /*i_c_e_p=*/true);\n+\t    current_class_ptr = save_ccp;\n+\t    current_class_ref = save_ccr;\n+\t    spec = build_noexcept_spec (noex, tf_warning_or_error);\n+\t  }\n+\n \t  pop_deferring_access_checks ();\n \t  pop_access_scope (fn);\n \t  pop_tinst_level ();"}, {"sha": "da4aa85aa412758a526ef6aea128b31cf283a35a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28a19c5be3c3982595230497f1a6142fda69bdfa", "patch": "@@ -1,3 +1,9 @@\n+2019-02-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88294 - ICE with non-constant noexcept-specifier.\n+\t* g++.dg/cpp0x/noexcept34.C: New test.\n+\t* g++.dg/cpp0x/noexcept35.C: New test.\n+\n 2019-02-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/88117"}, {"sha": "dce35652ef5580ccf1ae4256aa050dcab7143757", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept34.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept34.C?ref=28a19c5be3c3982595230497f1a6142fda69bdfa", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/88294\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int foo (bool b) { return b; }\n+\n+template<typename> struct A\n+{\n+  constexpr int f () { return 0; }\n+  bool b = true;\n+  void g () noexcept (f()) { } // { dg-error \"use of parameter\" }\n+  void g2 () noexcept (this->f()) { } // { dg-error \"use of parameter\" }\n+  void g3 () noexcept (b) { } // { dg-error \"use of .this. in a constant expression|use of parameter\" }\n+  void g4 (int i) noexcept (i) { } // { dg-error \"use of parameter\" }\n+  void g5 () noexcept (A::f()) { } // { dg-error \"use of parameter\" }\n+  void g6 () noexcept (foo(b)) { } // { dg-error \"use of .this. in a constant expression|use of parameter\" }\n+  void g7 () noexcept (int{f()}) { } // { dg-error \"use of parameter\" }\n+};\n+\n+int main ()\n+{\n+  A<int> a;\n+  a.g ();\n+  a.g2 ();\n+  a.g3 ();\n+  a.g4 (1);\n+  a.g5 ();\n+  a.g6 ();\n+  a.g7 ();\n+}"}, {"sha": "8606b1ad28c12b1a995a430abc36df2bc6d070f4", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept35.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a19c5be3c3982595230497f1a6142fda69bdfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept35.C?ref=28a19c5be3c3982595230497f1a6142fda69bdfa", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <typename _Tp, _Tp __v> struct A { static constexpr _Tp value = __v; };\n+typedef A<bool, false> false_type;\n+struct is_same : false_type {};\n+template <bool> struct enable_if;\n+template <typename> using __remove_cvref_t = int;\n+template <typename _Tp> class reference_wrapper {\n+  static _Tp _S_fun();\n+  template <typename _Up, typename = __remove_cvref_t<_Up>>\n+  using __not_same = enable_if<is_same::value>;\n+\n+public:\n+  template <typename _Up, typename = __not_same<_Up>>\n+  reference_wrapper(_Up) noexcept(noexcept(reference_wrapper::_S_fun));\n+};\n+\n+reference_wrapper<int> fn1() {\n+  int __t = 10;\n+  return __t;\n+}"}]}