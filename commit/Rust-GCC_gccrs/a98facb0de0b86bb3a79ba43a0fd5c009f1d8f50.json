{"sha": "a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4ZmFjYjBkZTBiODZiYjNhNzliYTQzYTBmZDVjMDA5ZjFkOGY1MA==", "commit": {"author": {"name": "Craig Rodrigues", "email": "rodrigc@gcc.gnu.org", "date": "2002-01-23T14:26:07Z"}, "committer": {"name": "Craig Rodrigues", "email": "rodrigc@gcc.gnu.org", "date": "2002-01-23T14:26:07Z"}, "message": "call.c, [...]: Change my_fancy_abort() to abort().\n\n2002-01-23  Craig Rodrigues  <rodrigc@gcc.gnu.org>\n\n        * call.c, class.c, decl.c, decl2.c, error.c, expr.c, friend.c,\n        init.c, lex.c, mangle.c, method.c, pt.c, repo.c, rtti.c, search.c,\n        semantics.c, spew.c, tree.c, typeck.c, typeck2.c, xref.c:\n        Change my_fancy_abort() to abort().\n\nFrom-SVN: r49139", "tree": {"sha": "a6e5dfa0033cccdbd5f2cbe47102d6d4c0c5e80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6e5dfa0033cccdbd5f2cbe47102d6d4c0c5e80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/comments", "author": null, "committer": null, "parents": [{"sha": "d1e76310602bad2a01c3023bbff0634f2380f95a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e76310602bad2a01c3023bbff0634f2380f95a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e76310602bad2a01c3023bbff0634f2380f95a"}], "stats": {"total": 237, "additions": 122, "deletions": 115}, "files": [{"sha": "9c6fce3862ae0b5281aa54c5284c9da71b00a4e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -1,3 +1,10 @@\n+2002-01-23  Craig Rodrigues  <rodrigc@gcc.gnu.org>\n+\n+\t* call.c, class.c, decl.c, decl2.c, error.c, expr.c, friend.c, \n+\tinit.c, lex.c, mangle.c, method.c, pt.c, repo.c, rtti.c, search.c, \n+\tsemantics.c, spew.c, tree.c, typeck.c, typeck2.c, xref.c: \n+\tChange my_fancy_abort() to abort().\n+\n 2002-01-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/5453"}, {"sha": "cf6f0b4210408d8ddd27ee73e8bc13bb806f0172", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -206,7 +206,7 @@ check_dtor_name (basetype, name)\n   else if (DECL_CLASS_TEMPLATE_P (name))\n     return 0;\n   else\n-    my_friendly_abort (980605);\n+    abort ();\n \n   if (name && TYPE_MAIN_VARIANT (basetype) == TYPE_MAIN_VARIANT (name))\n     return 1;\n@@ -423,7 +423,7 @@ build_call (function, parms)\n \t  || !strncmp (IDENTIFIER_POINTER (DECL_NAME (decl)), \"__\", 2))\n \tmark_used (decl);\n       else\n-\tmy_friendly_abort (990125);\n+\tabort ();\n     }\n \n   /* Don't pass empty class objects by value.  This is useful\n@@ -1932,7 +1932,7 @@ add_builtin_candidate (candidates, code, code2, fnname, type1, type2,\n \t  return candidates;\n \n \tdefault:\n-\t  my_friendly_abort (367);\n+\t  abort ();\n \t}\n       type1 = build_reference_type (type1);\n       break;\n@@ -1976,7 +1976,7 @@ add_builtin_candidate (candidates, code, code2, fnname, type1, type2,\n       return candidates;\n \n     default:\n-      my_friendly_abort (367);\n+      abort ();\n     }\n \n   /* If we're dealing with two pointer types or two enumeral types,\n@@ -3260,7 +3260,7 @@ build_new_op (code, flags, arg1, arg2, arg3)\n     case VEC_DELETE_EXPR:\n     case DELETE_EXPR:\n       /* Use build_op_new_call and build_op_delete_call instead. */\n-      my_friendly_abort (981018);\n+      abort ();\n \n     case CALL_EXPR:\n       return build_object_call (arg1, arg2);\n@@ -3565,7 +3565,7 @@ build_new_op (code, flags, arg1, arg2, arg3)\n       return NULL_TREE;\n \n     default:\n-      my_friendly_abort (367);\n+      abort ();\n       return NULL_TREE;\n     }\n }\n@@ -4447,7 +4447,7 @@ in_charge_arg_for_name (name)\n \n   /* This function should only be called with one of the names listed\n      above.  */\n-  my_friendly_abort (20000411);\n+  abort ();\n   return NULL_TREE;\n }\n \n@@ -5152,7 +5152,7 @@ source_type (t)\n \t  || TREE_CODE (t) == IDENTITY_CONV)\n \treturn TREE_TYPE (t);\n     }\n-  my_friendly_abort (1823);\n+  abort ();\n }\n \n /* Note a warning about preferring WINNER to LOSER.  We do this by storing\n@@ -5236,7 +5236,7 @@ joust (cand1, cand2, warn)\n \t  --len;\n \t}\n       else\n-\tmy_friendly_abort (42);\n+\tabort ();\n     }\n \n   for (i = 0; i < len; ++i)"}, {"sha": "aa83b8df7bb4a80316d834acf2306c4616bd1fcf", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -5044,7 +5044,7 @@ finish_struct_1 (t)\n       if (IS_AGGR_TYPE (t))\n \terror (\"redefinition of `%#T'\", t);\n       else\n-\tmy_friendly_abort (172);\n+\tabort ();\n       popclass ();\n       return;\n     }\n@@ -6090,7 +6090,7 @@ instantiate_type (lhstype, rhs, flags)\n     case SAVE_EXPR:\n     case CONSTRUCTOR:\n     case BUFFER_REF:\n-      my_friendly_abort (177);\n+      abort ();\n       return error_mark_node;\n \n     case INDIRECT_REF:\n@@ -6159,7 +6159,7 @@ instantiate_type (lhstype, rhs, flags)\n \n     case CALL_EXPR:\n       /* This is too hard for now.  */\n-      my_friendly_abort (183);\n+      abort ();\n       return error_mark_node;\n \n     case PLUS_EXPR:\n@@ -6266,14 +6266,14 @@ instantiate_type (lhstype, rhs, flags)\n       return instantiate_type (lhstype, TREE_OPERAND (rhs, 0), flags);\n     }\n     case ENTRY_VALUE_EXPR:\n-      my_friendly_abort (184);\n+      abort ();\n       return error_mark_node;\n \n     case ERROR_MARK:\n       return error_mark_node;\n \n     default:\n-      my_friendly_abort (185);\n+      abort ();\n       return error_mark_node;\n     }\n }\n@@ -6386,7 +6386,7 @@ get_enclosing_class (type)\n \t  break;\n \n \tdefault:\n-\t  my_friendly_abort (0);\n+\t  abort ();\n \t}\n     }\n   return NULL_TREE;\n@@ -6550,7 +6550,7 @@ get_primary_binfo (binfo)\n \t}\n \n       /* We should always find the primary base.  */\n-      my_friendly_abort (20000729);\n+      abort ();\n     }\n \n   /* For a primary virtual base, we have to scan the entire hierarchy\n@@ -6960,7 +6960,7 @@ get_original_base (base_binfo, binfo)\n     if (same_type_p (BINFO_TYPE (base_binfo),\n                      BINFO_TYPE (BINFO_BASETYPE (derived, ix))))\n       return BINFO_BASETYPE (derived, ix);\n-  my_friendly_abort (20010223);\n+  abort ();\n   return NULL;\n }\n \n@@ -7718,7 +7718,7 @@ build_vbase_offset_vtbl_entries (binfo, vid)\n \t  /* The vbase offset had better be the same.  */\n \t  if (!tree_int_cst_equal (delta,\n \t\t\t\t   BINFO_VPTR_FIELD (orig_vbase)))\n-\t    my_friendly_abort (20000403);\n+\t    abort ();\n \t}\n \n       /* The next vbase will come at a more negative offset.  */"}, {"sha": "3747cabe9e3e4c3b71ce0adab4c016693dda6429", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -547,7 +547,7 @@ pop_binding_level ()\n     {\n       /* Cannot pop a level, if there are none left to pop.  */\n       if (current_binding_level == global_binding_level)\n-\tmy_friendly_abort (123);\n+\tabort ();\n     }\n   /* Pop the current level, and free the structure for reuse.  */\n #if defined(DEBUG_CP_BINDING_LEVELS)\n@@ -586,7 +586,7 @@ suspend_binding_level ()\n     {\n       /* Cannot suspend a level, if there are none left to suspend.  */\n       if (current_binding_level == global_binding_level)\n-\tmy_friendly_abort (123);\n+\tabort ();\n     }\n   /* Suspend the current level.  */\n #if defined(DEBUG_CP_BINDING_LEVELS)\n@@ -887,7 +887,7 @@ begin_scope (sk)\n       break;\n \n     default:\n-      my_friendly_abort (20000309);\n+      abort ();\n     }\n }\n \n@@ -1187,7 +1187,7 @@ pop_binding (id, decl)\n   else if (BINDING_TYPE (binding) == decl)\n     BINDING_TYPE (binding) = NULL_TREE;\n   else\n-    my_friendly_abort (0);\n+    abort ();\n \n   if (!BINDING_VALUE (binding) && !BINDING_TYPE (binding))\n     {\n@@ -1491,7 +1491,7 @@ poplevel (keep, reverse, functionbody)\n \t  else if (TREE_CODE (decl) == OVERLOAD)\n \t    pop_binding (DECL_NAME (OVL_FUNCTION (decl)), decl);\n \t  else\n-\t    my_friendly_abort (0);\n+\t    abort ();\n \t}\n     }\n \n@@ -4677,7 +4677,7 @@ push_overloaded_decl (decl, flags)\n \t      }\n \n \t  /* We should always find a previous binding in this case.  */\n-\t  my_friendly_abort (0);\n+\t  abort ();\n \t}\n \n       /* Install the new binding.  */\n@@ -5662,7 +5662,7 @@ make_typename_type (context, name, complain)\n       return error_mark_node;\n     }\n   if (TREE_CODE (name) != IDENTIFIER_NODE)\n-    my_friendly_abort (2000);\n+    abort ();\n \n   if (TREE_CODE (context) == NAMESPACE_DECL)\n     {\n@@ -5743,7 +5743,7 @@ make_unbound_class_template (context, name, complain)\n   else if (DECL_P (name))\n     name = DECL_NAME (name);\n   if (TREE_CODE (name) != IDENTIFIER_NODE)\n-    my_friendly_abort (20010902);\n+    abort ();\n \n   if (!uses_template_parms (context)\n       || currently_open_class (context))\n@@ -9534,7 +9534,7 @@ check_special_function_return_type (sfk, type, optype)\n       break;\n \n     default:\n-      my_friendly_abort (20000408);\n+      abort ();\n       break;\n     }\n \n@@ -10923,7 +10923,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\tTREE_COMPLEXITY (declarator) = current_class_depth;\n \t      }\n \t    else\n-\t      my_friendly_abort (16);\n+\t      abort ();\n \n \t    if (TREE_OPERAND (declarator, 0) == NULL_TREE)\n \t      {\n@@ -11016,7 +11016,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\tdeclarator = sname;\n \t      }\n \t    else if (TREE_CODE (sname) == SCOPE_REF)\n-\t      my_friendly_abort (17);\n+\t      abort ();\n \t    else\n \t      {\n \t      done_scoping:\n@@ -11051,7 +11051,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  break;\n \n \tdefault:\n-\t  my_friendly_abort (158);\n+\t  abort ();\n \t}\n     }\n \n@@ -11128,7 +11128,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n     }\n   else\n     /* Unexpected declarator format.  */\n-    my_friendly_abort (990210);\n+    abort ();\n \n   /* If this is declaring a typedef name, return a TYPE_DECL.  */\n \n@@ -11352,7 +11352,7 @@ friend declaration requires class-key, i.e. `friend %#T'\",\n       else if (TREE_CODE (declarator) == IDENTIFIER_NODE)\n \t{\n \t  if (IDENTIFIER_OPNAME_P (declarator))\n-\t    my_friendly_abort (356);\n+\t    abort ();\n \t  else\n \t    error (\"variable or field `%s' declared void\", name);\n \t}\n@@ -12322,7 +12322,7 @@ grok_op_properties (decl, friendp)\n #include \"operators.def\"\n #undef DEF_OPERATOR\n \n-\tmy_friendly_abort (20000527);\n+\tabort ();\n       }\n     while (0);\n   my_friendly_assert (operator_code != LAST_CPLUS_TREE_CODE, 20000526);\n@@ -12495,7 +12495,7 @@ grok_op_properties (decl, friendp)\n \t\t  break;\n \n \t\tdefault:\n-\t\t  my_friendly_abort (20000527);\n+\t\t  abort ();\n \t\t}\n \n \t      SET_OVERLOADED_OPERATOR_CODE (decl, operator_code);\n@@ -12623,7 +12623,7 @@ tag_name (code)\n     case enum_type:\n       return \"enum\";\n     default:\n-      my_friendly_abort (981122);\n+      abort ();\n     }\n }\n \n@@ -12675,7 +12675,7 @@ xref_tag (code_type_node, name, globalize)\n       code = ENUMERAL_TYPE;\n       break;\n     default:\n-      my_friendly_abort (18);\n+      abort ();\n     }\n \n   /* If a cross reference is requested, look up the type\n@@ -14168,7 +14168,7 @@ finish_function (flags)\n      have declarations (from inline functions) that need to go into\n      this function's blocks.  */\n   if (current_binding_level->parm_flag != 1)\n-    my_friendly_abort (122);\n+    abort ();\n   poplevel (1, 0, 1);\n \n   /* Set up the named return value optimization, if we can.  Here, we"}, {"sha": "67559b92299423160e5a88cc9493648a07beca9a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -1653,7 +1653,7 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n       DECL_IN_AGGR_P (value) = 1;\n       return value;\n     }\n-  my_friendly_abort (21);\n+  abort ();\n   /* NOTREACHED */\n   return NULL_TREE;\n }\n@@ -2383,7 +2383,7 @@ output_vtable_inherit (vars)\n       parent_rtx = XEXP (DECL_RTL (parent), 0);  /* strip the mem ref  */\n     }\n   else\n-    my_friendly_abort (980826);\n+    abort ();\n \n   assemble_vtable_inherit (child_rtx, parent_rtx);\n }\n@@ -2833,7 +2833,7 @@ start_static_storage_duration_function ()\n       /* Overflow occurred.  That means there are at least 4 billion\n \t initialization functions.  */\n       sorry (\"too many initialization functions required\");\n-      my_friendly_abort (19990430);\n+      abort ();\n     }\n \n   /* Create the parameters.  */\n@@ -3804,7 +3804,7 @@ build_expr_from_tree (t)\n \treturn build_x_compound_expr\n \t  (build_expr_from_tree (TREE_OPERAND (t, 0)));\n       else\n-\tmy_friendly_abort (42);\n+\tabort ();\n \n     case METHOD_CALL_EXPR:\n       if (TREE_CODE (TREE_OPERAND (t, 0)) == SCOPE_REF)\n@@ -4022,7 +4022,7 @@ finish_decl_parsing (decl)\n     case TEMPLATE_ID_EXPR:\n       return decl;\n     default:\n-      my_friendly_abort (5);\n+      abort ();\n       return NULL_TREE;\n     }\n }\n@@ -4670,7 +4670,7 @@ arg_assoc_type (k, type)\n \treturn 0;\n       /* else fall through */\n     default:\n-      my_friendly_abort (390);\n+      abort ();\n     }\n   return 0;\n }\n@@ -4865,7 +4865,7 @@ validate_nonmember_using_decl (decl, scope, name)\n       return NULL_TREE;\n     }\n   else\n-    my_friendly_abort (382);\n+    abort ();\n   if (DECL_P (*name))\n     *name = DECL_NAME (*name);\n   /* Make a USING_DECL. */"}, {"sha": "4642fcd1829b5dd4c0396da63fe91043749e8340", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -803,7 +803,7 @@ dump_global_iord (t)\n   else if (DECL_GLOBAL_DTOR_P (t))\n     p = \"destructors\";\n   else\n-    my_friendly_abort (352);\n+    abort ();\n \n   output_printf (scratch_buffer, \"(static %s for %s)\", p, input_filename);\n }\n@@ -910,7 +910,7 @@ dump_decl (t, flags)\n       break;\n \n     case TYPE_EXPR:\n-      my_friendly_abort (69);\n+      abort ();\n       break;\n \n       /* These special cases are duplicated here so that other functions\n@@ -1050,7 +1050,7 @@ dump_template_decl (t, flags)\n   else if (TREE_CODE (DECL_TEMPLATE_RESULT (t)) == VAR_DECL)\n     dump_decl (DECL_TEMPLATE_RESULT (t), flags | TFF_TEMPLATE_NAME);\n   else if (TREE_TYPE (t) == NULL_TREE)\n-    my_friendly_abort (353);\n+    abort ();\n   else\n     switch (NEXT_CODE (t))\n     {\n@@ -2272,7 +2272,7 @@ language_to_string (c, v)\n       return \"Java\";\n \n     default:\n-      my_friendly_abort (355);\n+      abort ();\n       return 0;\n     }\n }"}, {"sha": "34f779ebb97fcd3e9137b065ba5dac1dfdcba9cf", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -106,7 +106,7 @@ cplus_expand_expr (exp, target, tmode, modifier)\n \n     case OFFSET_REF:\n       /* Offset refs should not make it through to here. */\n-      my_friendly_abort (20010724);\n+      abort ();\n       return const0_rtx;\n       \n     case THROW_EXPR:\n@@ -126,7 +126,7 @@ cplus_expand_expr (exp, target, tmode, modifier)\n     default:\n       return c_expand_expr (exp, target, tmode, modifier);\n     }\n-  my_friendly_abort (40);\n+  abort ();\n   /* NOTREACHED */\n   return NULL;\n }"}, {"sha": "1d9670133a60141fdcb74ef18b952462b5bd4dbc", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -323,7 +323,7 @@ do_friend (ctype, declarator, decl, parmdecls, attrlist,\n     }\n \n   if (TREE_CODE (decl) != FUNCTION_DECL)\n-    my_friendly_abort (990513);\n+    abort ();\n \n   is_friend_template = PROCESSING_REAL_TEMPLATE_DECL_P ();\n "}, {"sha": "017b89439064e3ce67d29ab12e2fb11ee87db742", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -1737,7 +1737,7 @@ build_offset_ref (type, name)\n   /* static class functions too.  */\n   if (TREE_CODE (t) == FUNCTION_DECL\n       && TREE_CODE (TREE_TYPE (t)) == FUNCTION_TYPE)\n-    my_friendly_abort (53);\n+    abort ();\n \n   /* In member functions, the form `type::name' is no longer\n      equivalent to `this->type::name', at least not until\n@@ -1887,7 +1887,7 @@ resolve_offset_ref (exp)\n     {\n       return get_member_function_from_ptrfunc (&addr, member);\n     }\n-  my_friendly_abort (56);\n+  abort ();\n   /* NOTREACHED */\n   return NULL_TREE;\n }\n@@ -1976,7 +1976,7 @@ build_new (placement, decl, init, use_global_new)\n       nelts = integer_one_node;\n \n       if (absdcl && TREE_CODE (absdcl) == CALL_EXPR)\n-\tmy_friendly_abort (215);\n+\tabort ();\n       while (absdcl && TREE_CODE (absdcl) == INDIRECT_REF)\n \t{\n \t  last_absdcl = absdcl;\n@@ -2952,7 +2952,7 @@ build_vec_init (base, init, from_array)\n \t  else if (from)\n \t    elt_init = build_modify_expr (to, NOP_EXPR, from);\n \t  else\n-\t    my_friendly_abort (57);\n+\t    abort ();\n \t}\n       else if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n@@ -3075,7 +3075,7 @@ build_dtor_call (exp, dtor_kind, flags)\n       break;\n \n     default:\n-      my_friendly_abort (20000524);\n+      abort ();\n     }\n   return build_method_call (exp, name, NULL_TREE, NULL_TREE, flags);\n }"}, {"sha": "b30c8171675d3ea76aa988eb36fc8cb8a3701837", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -780,7 +780,7 @@ yyprint (file, yychar, yylval)\n       else if (yylval.ttype == enum_type_node)\n \tfprintf (file, \" `enum'\");\n       else\n-\tmy_friendly_abort (80);\n+\tabort ();\n       break;\n \n     case CONSTANT:\n@@ -1012,7 +1012,7 @@ note_got_semicolon (type)\n      tree type;\n {\n   if (!TYPE_P (type))\n-    my_friendly_abort (60);\n+    abort ();\n   if (CLASS_TYPE_P (type))\n     CLASSTYPE_GOT_SEMICOLON (type) = 1;\n }\n@@ -1514,7 +1514,7 @@ retrofit_lang_decl (t)\n     SET_DECL_LANGUAGE (t, lang_c);\n   else if (current_lang_name == lang_name_java)\n     SET_DECL_LANGUAGE (t, lang_java);\n-  else my_friendly_abort (64);\n+  else abort ();\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)lang_decl] += 1;\n@@ -1687,6 +1687,6 @@ cp_type_qual_from_rid (rid)\n   else if (rid == ridpointers[(int) RID_RESTRICT])\n     return TYPE_QUAL_RESTRICT;\n \n-  my_friendly_abort (0);\n+  abort ();\n   return TYPE_UNQUALIFIED;\n }"}, {"sha": "8a230d2566b846b05cb53a626b720b84ee949afb", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -361,7 +361,7 @@ add_substitution (node)\n \t    || (TYPE_P (node) \n \t\t&& TYPE_P (candidate) \n \t\t&& same_type_p (node, candidate)))\n-\t  my_friendly_abort (20000524);\n+\t  abort ();\n       }\n   }\n #endif /* ENABLE_CHECKING */\n@@ -779,7 +779,7 @@ write_unscoped_name (decl)\n \t   || TREE_CODE (context) == FUNCTION_DECL)\n     write_unqualified_name (decl);\n   else \n-    my_friendly_abort (20000521);\n+    abort ();\n }\n \n /* <unscoped-template-name> ::= <unscoped-name>\n@@ -923,7 +923,7 @@ write_template_prefix (node)\n     template = CLASSTYPE_TI_TEMPLATE (type);\n   else\n     /* Oops, not a template.  */\n-    my_friendly_abort (20000524);\n+    abort ();\n \n   /* For a member template, though, the template name for the\n      innermost name must have all the outer template levels\n@@ -1185,7 +1185,7 @@ write_special_name_constructor (ctor)\n   else if (DECL_BASE_CONSTRUCTOR_P (ctor))\n     write_string (\"C2\");\n   else\n-    my_friendly_abort (20001115);\n+    abort ();\n }\n \n /* Handle destructor productions of non-terminal <special-name>.\n@@ -1214,7 +1214,7 @@ write_special_name_destructor (dtor)\n   else if (DECL_BASE_DESTRUCTOR_P (dtor))\n     write_string (\"D2\");\n   else\n-    my_friendly_abort (20001115);\n+    abort ();\n }\n \n /* Return the discriminator for ENTITY appearing inside\n@@ -1445,7 +1445,7 @@ write_type (type)\n \t  break;\n \n \tdefault:\n-\t  my_friendly_abort (20000409);\n+\t  abort ();\n \t}\n     }\n \n@@ -1558,7 +1558,7 @@ write_builtin_type (type)\n \t      tree t = type_for_mode (TYPE_MODE (type), TREE_UNSIGNED (type));\n \t      if (type == t)\n \t\t/* Couldn't find this type.  */\n-\t\tmy_friendly_abort (20000408);\n+\t\tabort ();\n \t      type = t;\n \t      goto iagain;\n \t    }\n@@ -1575,11 +1575,11 @@ write_builtin_type (type)\n       else if (type == long_double_type_node)\n \twrite_char ('e');\n       else\n-\tmy_friendly_abort (20000409);\n+\tabort ();\n       break;\n \n     default:\n-      my_friendly_abort (20000509);\n+      abort ();\n     }\n }\n \n@@ -1877,7 +1877,7 @@ write_template_arg_literal (value)\n \t  else if (value == boolean_true_node)\n \t    write_unsigned_number (1);\n \t  else \n-\t    my_friendly_abort (20000412);\n+\t    abort ();\n \t}\n       else\n \twrite_integer_cst (value);\n@@ -1902,7 +1902,7 @@ write_template_arg_literal (value)\n #endif\n     }\n   else\n-    my_friendly_abort (20000412);\n+    abort ();\n \n   write_char ('E');\n }\n@@ -2069,7 +2069,7 @@ write_template_param (parm)\n       break;\n \n     default:\n-      my_friendly_abort (20000523);\n+      abort ();\n     }\n \n   write_char ('T');\n@@ -2477,6 +2477,6 @@ write_java_integer_type_codes (type)\n   else if (type == java_boolean_type_node)\n     write_char ('b');\n   else\n-    my_friendly_abort (20001207);\n+    abort ();\n }\n "}, {"sha": "0848bd35a27155d58af7131fcf325f66bc307b46", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -159,7 +159,7 @@ hack_identifier (value, name)\n \t      fndecl = TREE_VALUE (fields);\n \t      my_friendly_assert (TREE_CODE (fndecl) == FUNCTION_DECL, 251);\n \t      /* I could not trigger this code. MvL */\n-\t      my_friendly_abort (980325);\n+\t      abort ();\n #ifdef DEAD\n \t      if (DECL_CHAIN (fndecl) == NULL_TREE)\n \t\t{\n@@ -1020,7 +1020,7 @@ implicitly_declare_fn (kind, type, const_p)\n       break;\n     }\n     default:\n-      my_friendly_abort (59);\n+      abort ();\n     }\n \n   TREE_PARMLIST (args) = 1;"}, {"sha": "5084f727823fbc7526e81585d0599cb23ff391cd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -352,7 +352,7 @@ push_inline_template_parms_recursive (parmlist, levels)\n \t  break;\n \n \tdefault:\n-\t  my_friendly_abort (0);\n+\t  abort ();\n \t}\n     }\n }\n@@ -1448,7 +1448,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n       break;\n \n     default:\n-      my_friendly_abort (20000309);\n+      abort ();\n     }\n \n   if (specialization || member_specialization)\n@@ -3158,7 +3158,7 @@ convert_nontype_argument (type, expr)\n \n     default:\n       /* All non-type parameters must have one of these types.  */\n-      my_friendly_abort (0);\n+      abort ();\n       break;\n     }\n \n@@ -3247,7 +3247,7 @@ coerce_template_template_parms (parm_parms, arg_parms, complain,\n \t  break;\n \t  \n \tdefault:\n-\t  my_friendly_abort (0);\n+\t  abort ();\n \t}\n     }\n   return 1;\n@@ -5210,7 +5210,7 @@ instantiate_class_template (type)\n \t\t      tsubst_friend_function (TREE_VALUE (friends),\n \t\t\t\t\t      args));\n \telse\n-\t  my_friendly_abort (20000216);\n+\t  abort ();\n     }\n \n   for (t = CLASSTYPE_FRIEND_CLASSES (pattern);\n@@ -6058,7 +6058,7 @@ tsubst_decl (t, args, type)\n       break;\n \n     default:\n-      my_friendly_abort (0);\n+      abort ();\n     } \n \n   /* Restore the file and line information.  */\n@@ -6259,7 +6259,7 @@ tsubst (t, args, complain, in_decl)\n   else\n     type = TREE_TYPE (t);\n   if (type == unknown_type_node)\n-    my_friendly_abort (42);\n+    abort ();\n \n   if (type && TREE_CODE (t) != FUNCTION_DECL\n       && TREE_CODE (t) != TYPENAME_TYPE\n@@ -6432,7 +6432,7 @@ tsubst (t, args, complain, in_decl)\n \t      }\n \t  }\n \telse\n-\t  my_friendly_abort (981018);\n+\t  abort ();\n \n \tif (level == 1)\n \t  /* This can happen during the attempted tsubst'ing in\n@@ -6483,7 +6483,7 @@ tsubst (t, args, complain, in_decl)\n \t    break;\n \t   \n \t  default:\n-\t    my_friendly_abort (0);\n+\t    abort ();\n \t  }\n \n \treturn r;\n@@ -6931,7 +6931,7 @@ tsubst_copy (t, args, complain, in_decl)\n \t  /* We didn't find the name.  That should never happen; if\n \t     name-lookup found it during preliminary parsing, we\n \t     should find it again here during instantiation.  */\n-\tmy_friendly_abort (0);\n+\tabort ();\n       }\n       return t;\n \n@@ -7592,7 +7592,7 @@ instantiate_template (tmpl, targ_ptr)\n \tif (DECL_NAME (clone) == DECL_NAME (tmpl))\n \t  return clone;\n       /* We should always have found the clone by now.  */\n-      my_friendly_abort (20000411);\n+      abort ();\n       return NULL_TREE;\n     }\n   \n@@ -7844,7 +7844,7 @@ maybe_adjust_types_for_deduction (strict, parm, arg)\n         }\n       break;\n     default:\n-      my_friendly_abort (0);\n+      abort ();\n     }\n \n   if (TREE_CODE (*parm) != REFERENCE_TYPE)\n@@ -7939,7 +7939,7 @@ type_unification_real (tparms, targs, xparms, xargs, subr,\n       break;\n       \n     default:\n-      my_friendly_abort (0);\n+      abort ();\n     }\n \n   if (xlen == 0)\n@@ -8137,7 +8137,7 @@ resolve_overloaded_unification (tparms, targs, parm, arg, strict,\n \t}\n     }\n   else\n-    my_friendly_abort (981006);\n+    abort ();\n \n   /* [temp.deduct.type] A template-argument can be deduced from a pointer\n      to function or pointer to member function argument if the set of\n@@ -8455,7 +8455,7 @@ template_decl_level (decl)\n       return TEMPLATE_PARM_LEVEL (DECL_INITIAL (decl));\n \n     default:\n-      my_friendly_abort (0);\n+      abort ();\n       return 0;\n     }\n }\n@@ -8731,7 +8731,7 @@ unify (tparms, targs, parm, arg, strict)\n \t  else if (i == 0)\n \t    return 1;\n \t  else\n-\t    my_friendly_abort (42);\n+\t    abort ();\n \t}\n \n       /* [temp.deduct.type] If, in the declaration of a function template"}, {"sha": "fe2eb62601bba3159298b829285369c428fa9f44", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -103,7 +103,7 @@ repo_get_id (t)\n \t the vtable, so going ahead would give the wrong answer.\n          See g++.pt/instantiate4.C.  */\n       if (!COMPLETE_TYPE_P (t) || TYPE_BEING_DEFINED (t))\n-\tmy_friendly_abort (981113);\n+\tabort ();\n \n       vtable = get_vtbl_decl_for_binfo (TYPE_BINFO (t));\n \n@@ -147,7 +147,7 @@ repo_template_used (t)\n \t\t\t\t0);\n     }\n   else\n-    my_friendly_abort (1);\n+    abort ();\n \n   if (! IDENTIFIER_REPO_USED (id))\n     {"}, {"sha": "8c9b1c14f7fd40f48cf5423e6b7ebeba7479b690", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -1075,7 +1075,7 @@ synthesize_tinfo_var (target_type, real_name)\n \t  var_init = generic_initializer (var_type, target_type);\n \t  break;\n \t}\n-      my_friendly_abort (20000117);\n+      abort ();\n     }\n   \n   return create_real_tinfo_var (target_type,"}, {"sha": "22d53323468d5432b1657d47f065fde2b6a2d8f7", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -1414,7 +1414,7 @@ lookup_member (xbasetype, name, protect, want_type)\n \t\t\t  980827);\n     }\n   else\n-    my_friendly_abort (97);\n+    abort ();\n \n   complete_type (type);\n "}, {"sha": "1f8d48164769082a40d222d710063d92ab7b8f1c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -2168,7 +2168,7 @@ cp_expand_stmt (t)\n       break;\n     \n     default:\n-      my_friendly_abort (19990810);\n+      abort ();\n       break;\n     }\n }"}, {"sha": "74f89a05a5376f38f98b67698956dffb2c42bf15", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -675,7 +675,7 @@ do_aggr ()\n       nth_token (1)->yychar = IDENTIFIER_DEFN;\n       break;\n     default:\n-      my_friendly_abort (102);\n+      abort ();\n     }\n }  \n \n@@ -917,7 +917,7 @@ frob_id (yyc, peek, idp)\n             lastiddecl = trrr;\n             break;\n           default:\n-            my_friendly_abort (20000907);\n+            abort ();\n         }\n     }\n   else"}, {"sha": "d353b06b8082fff51eab2456b89eed120e532e37", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -127,7 +127,7 @@ lvalue_p_1 (ref, treat_class_rvalues_as_lvalues)\n \n       /* A currently unresolved scope ref.  */\n     case SCOPE_REF:\n-      my_friendly_abort (103);\n+      abort ();\n     case OFFSET_REF:\n       if (TREE_CODE (TREE_OPERAND (ref, 1)) == FUNCTION_DECL)\n \treturn clk_ordinary;\n@@ -896,7 +896,7 @@ count_functions (t)\n       return i;\n     }\n \n-  my_friendly_abort (359);\n+  abort ();\n   return 0;\n }\n \n@@ -1049,7 +1049,7 @@ lang_printable_name (decl, v)\n       if (ring_counter == PRINT_RING_SIZE)\n \tring_counter = 0;\n       if (decl_ring[ring_counter] == current_function_decl)\n-\tmy_friendly_abort (106);\n+\tabort ();\n     }\n \n   if (print_ring[ring_counter])\n@@ -1155,7 +1155,7 @@ verify_stmt_tree_r (tp, walk_subtrees, data)\n   /* If this statement is already present in the hash table, then\n      there is a circularity in the statement tree.  */\n   if (htab_find (*statements, t))\n-    my_friendly_abort (20000727);\n+    abort ();\n   \n   slot = htab_find_slot (*statements, t, INSERT);\n   *slot = t;\n@@ -1480,7 +1480,7 @@ get_type_decl (t)\n   if (t == error_mark_node)\n     return t;\n   \n-  my_friendly_abort (42);\n+  abort ();\n \n   /* Stop compiler from complaining control reaches end of non-void function.  */\n   return 0;"}, {"sha": "5e69b98fc9dabe0829108f2b6167516732db9505", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -585,7 +585,7 @@ common_type (t1, t2)\n     case REAL_TYPE:\n       /* We should have called type_after_usual_arithmetic_conversions\n \t above.  */\n-      my_friendly_abort (19990725);\n+      abort ();\n       break;\n \n     case POINTER_TYPE:\n@@ -759,7 +759,7 @@ common_type (t1, t2)\n     case OFFSET_TYPE:\n       /* Pointers to members should now be handled by the POINTER_TYPE\n \t case above.  */\n-      my_friendly_abort (990325);\n+      abort ();\n \n     default:\n       return build_type_attribute_variant (t1, attributes);\n@@ -1729,7 +1729,7 @@ decay_conversion (exp)\n       return error_mark_node;\n     }\n   if (code == METHOD_TYPE)\n-    my_friendly_abort (990506);\n+    abort ();\n   if (code == FUNCTION_TYPE || is_overloaded_fn (exp))\n     return build_unary_op (ADDR_EXPR, exp, 0);\n   if (code == ARRAY_TYPE)\n@@ -2057,7 +2057,7 @@ build_component_ref (datum, component, basetype_path, protect)\n   if (TREE_CODE (component) == TREE_LIST)\n     {\n       /* I could not trigger this code. MvL */\n-      my_friendly_abort (980326);\n+      abort ();\n #ifdef DEAD\n       my_friendly_assert (!(TREE_CHAIN (component) == NULL_TREE\n \t\t&& DECL_CHAIN (TREE_VALUE (component)) == NULL_TREE), 309);\n@@ -2811,7 +2811,7 @@ build_x_function_call (function, params, decl)\n \t}\n       /* Unexpected node type?  */\n       else\n-\tmy_friendly_abort (116);\n+\tabort ();\n       if (decl == NULL_TREE)\n \t{\n \t  if (current_function_decl\n@@ -3705,7 +3705,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t&& same_type_p (TYPE_PTRMEMFUNC_FN_TYPE (type0), type1))\n \t       || (TYPE_PTRMEMFUNC_P (type1)\n \t\t   && same_type_p (TYPE_PTRMEMFUNC_FN_TYPE (type1), type0)))\n-\tmy_friendly_abort (20000221);\n+\tabort ();\n       break;\n \n     case MAX_EXPR:\n@@ -4672,7 +4672,7 @@ build_unary_op (code, xarg, noconvert)\n       if (TREE_CODE (arg) == IDENTIFIER_NODE\n \t  && IDENTIFIER_OPNAME_P (arg))\n \t{\n-\t  my_friendly_abort (117);\n+\t  abort ();\n \t  /* We don't know the type yet, so just work around the problem.\n \t     We know that this will resolve to an lvalue.  */\n \t  return build1 (ADDR_EXPR, unknown_type_node, arg);\n@@ -6263,7 +6263,7 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n   register enum tree_code coder;\n \n   if (codel == OFFSET_TYPE)\n-    my_friendly_abort (990505);\n+    abort ();\n \n   if (TREE_CODE (rhs) == OFFSET_REF)\n     rhs = resolve_offset_ref (rhs);"}, {"sha": "05b4aca9f1c6cc88194a3759c45947c3854096d9", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -248,7 +248,7 @@ incomplete_type_error (value, type)\n       break;\n     \n     default:\n-      my_friendly_abort (108);\n+      abort ();\n     }\n }\n \n@@ -318,7 +318,7 @@ store_init_value (decl, init)\n     {\n       if (! TYPE_HAS_TRIVIAL_INIT_REF (type)\n \t  && TREE_CODE (init) != CONSTRUCTOR)\n-\tmy_friendly_abort (109);\n+\tabort ();\n \n       if (TREE_CODE (init) == TREE_LIST)\n \t{\n@@ -925,7 +925,7 @@ process_init_constructor (type, init, elts)\n \t  next1 = digest_init (TREE_TYPE (field),\n \t\t\t       TREE_VALUE (tail), &tail1);\n \t  if (tail1 != 0 && TREE_CODE (tail1) != TREE_LIST)\n-\t    my_friendly_abort (357);\n+\t    abort ();\n \t  tail = tail1;\n \t}\n       else"}, {"sha": "4560c4a2c6f38040ea6b6fe06d56c04269796720", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=a98facb0de0b86bb3a79ba43a0fd5c009f1d8f50", "patch": "@@ -376,7 +376,7 @@ GNU_xref_decl (fndecl,decl)\n       else if (TREE_CODE (DECL_RESULT (decl)) == VAR_DECL)\n \tcls = \"VARTEMP\";\n       else\n-\tmy_friendly_abort (358);\n+\tabort ();\n       uselin = TRUE;\n     }\n   else cls = \"UNKNOWN\";"}]}