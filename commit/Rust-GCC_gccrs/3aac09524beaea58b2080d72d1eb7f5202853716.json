{"sha": "3aac09524beaea58b2080d72d1eb7f5202853716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhYzA5NTI0YmVhZWE1OGIyMDgwZDcyZDFlYjdmNTIwMjg1MzcxNg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-10-14T14:45:36Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-10-14T14:45:36Z"}, "message": "line-map.h (linemap_location_from_macro_expansion_p): const struct line_maps * argument.\n\nlibcpp/ChangeLog:\n\n2014-10-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* include/line-map.h (linemap_location_from_macro_expansion_p):\n\tconst struct line_maps * argument.\n\t(linemap_position_for_line_and_column): const struct line_map *\n\targument.\n\t* line-map.c (linemap_add_macro_token): Use correct argument name\n\tin comment.\n\t(linemap_position_for_line_and_column): const struct line_map *\n\targument.\n\t(linemap_macro_map_loc_to_def_point): Fix comment. Make static.\n\t(linemap_location_from_macro_expansion_p): const struct line_maps *\n\targument.\n\t(linemap_resolve_location): Fix argument names in comment.\n\nFrom-SVN: r216205", "tree": {"sha": "14ba88901f9fa27aced570ad65125c5c7d902a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14ba88901f9fa27aced570ad65125c5c7d902a01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aac09524beaea58b2080d72d1eb7f5202853716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aac09524beaea58b2080d72d1eb7f5202853716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aac09524beaea58b2080d72d1eb7f5202853716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aac09524beaea58b2080d72d1eb7f5202853716/comments", "author": null, "committer": null, "parents": [{"sha": "48d3af1259c6365615027708f259f04c8ac292fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d3af1259c6365615027708f259f04c8ac292fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d3af1259c6365615027708f259f04c8ac292fc"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "eeef815ca5236b9b74ad0f11a1dc9695301ec921", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac09524beaea58b2080d72d1eb7f5202853716/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac09524beaea58b2080d72d1eb7f5202853716/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=3aac09524beaea58b2080d72d1eb7f5202853716", "patch": "@@ -1,3 +1,18 @@\n+2014-10-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* include/line-map.h (linemap_location_from_macro_expansion_p):\n+\tconst struct line_maps * argument.\n+\t(linemap_position_for_line_and_column): const struct line_map *\n+\targument.\n+\t* line-map.c (linemap_add_macro_token): Use correct argument name\n+\tin comment.\n+\t(linemap_position_for_line_and_column): const struct line_map *\n+\targument.\n+\t(linemap_macro_map_loc_to_def_point): Fix comment. Make static.\n+\t(linemap_location_from_macro_expansion_p): const struct line_maps *\n+\targument.\n+\t(linemap_resolve_location): Fix argument names in comment.\n+\n 2014-10-03  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* lex.c (search_line_fast): Add new version to be used for Power8"}, {"sha": "1f6553c94686f9bc877c74d1f3495125e92f3018", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac09524beaea58b2080d72d1eb7f5202853716/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac09524beaea58b2080d72d1eb7f5202853716/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=3aac09524beaea58b2080d72d1eb7f5202853716", "patch": "@@ -523,7 +523,7 @@ int linemap_location_in_system_header_p (struct line_maps *,\n /* Return TRUE if LOCATION is a source code location of a token coming\n    from a macro replacement-list at a macro expansion point, FALSE\n    otherwise.  */\n-bool linemap_location_from_macro_expansion_p (struct line_maps *,\n+bool linemap_location_from_macro_expansion_p (const struct line_maps *,\n \t\t\t\t\t      source_location);\n \n /* source_location values from 0 to RESERVED_LOCATION_COUNT-1 will\n@@ -599,9 +599,10 @@ linemap_position_for_column (struct line_maps *, unsigned int);\n \n /* Encode and return a source location from a given line and\n    column.  */\n-source_location linemap_position_for_line_and_column (struct line_map *,\n-\t\t\t\t\t\t      linenum_type,\n-\t\t\t\t\t\t      unsigned int);\n+source_location\n+linemap_position_for_line_and_column (const struct line_map *,\n+\t\t\t\t      linenum_type, unsigned int);\n+\n /* Return the file this map is for.  */\n #define LINEMAP_FILE(MAP)\t\t\t\t\t\\\n   (linemap_check_ordinary (MAP)->d.ordinary.to_file)"}, {"sha": "d10d578f62e0d5a78ee5090d8fd9689a9d150784", "filename": "libcpp/line-map.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac09524beaea58b2080d72d1eb7f5202853716/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac09524beaea58b2080d72d1eb7f5202853716/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=3aac09524beaea58b2080d72d1eb7f5202853716", "patch": "@@ -484,7 +484,7 @@ linemap_enter_macro (struct line_maps *set, struct cpp_hashnode *macro_node,\n    (which is a virtual location or a source location if the caller is\n    itself a macro expansion or not).\n \n-   MACRO_DEFINITION_LOC is the location in the macro definition,\n+   ORIG_PARM_REPLACEMENT_LOC is the location in the macro definition,\n    either of the token itself or of a macro parameter that it\n    replaces.  */\n \n@@ -621,7 +621,7 @@ linemap_position_for_column (struct line_maps *set, unsigned int to_column)\n    column.  */\n \n source_location\n-linemap_position_for_line_and_column (struct line_map *map,\n+linemap_position_for_line_and_column (const struct line_map *map,\n \t\t\t\t      linenum_type line,\n \t\t\t\t      unsigned column)\n {\n@@ -772,15 +772,13 @@ linemap_macro_map_loc_to_exp_point (const struct line_map *map,\n   return MACRO_MAP_EXPANSION_POINT_LOCATION (map);\n }\n \n-/* If LOCATION is the source location of a token that belongs to a\n-   macro replacement-list -- as part of a macro expansion -- then\n-   return the location of the token at the definition point of the\n-   macro.  Otherwise, return LOCATION.  SET is the set of maps\n-   location come from.  ORIGINAL_MAP is an output parm. If non NULL,\n-   the function sets *ORIGINAL_MAP to the ordinary (non-macro) map the\n-   returned location comes from.  */\n+/* LOCATION is the source location of a token that belongs to a macro\n+   replacement-list as part of the macro expansion denoted by MAP.\n \n-source_location\n+   Return the location of the token at the definition point of the\n+   macro.  */\n+\n+static source_location\n linemap_macro_map_loc_to_def_point (const struct line_map *map,\n \t\t\t\t    source_location location)\n {\n@@ -940,7 +938,7 @@ linemap_location_in_system_header_p (struct line_maps *set,\n    otherwise.  */\n \n bool\n-linemap_location_from_macro_expansion_p (struct line_maps *set,\n+linemap_location_from_macro_expansion_p (const struct line_maps *set,\n \t\t\t\t\t source_location location)\n {\n   if (IS_ADHOC_LOC (location))\n@@ -1233,9 +1231,9 @@ linemap_macro_loc_to_exp_point (struct line_maps *set,\n    function-like macro, then the function behaves as if LRK was set to\n    LRK_SPELLING_LOCATION.\n \n-   If LOC_MAP is not NULL, *LOC_MAP is set to the map encoding the\n+   If MAP is not NULL, *MAP is set to the map encoding the\n    returned location.  Note that if the returned location wasn't originally\n-   encoded by a map, the *MAP is set to NULL.  This can happen if LOC\n+   encoded by a map, then *MAP is set to NULL.  This can happen if LOC\n    resolves to a location reserved for the client code, like\n    UNKNOWN_LOCATION or BUILTINS_LOCATION in GCC.  */\n "}]}