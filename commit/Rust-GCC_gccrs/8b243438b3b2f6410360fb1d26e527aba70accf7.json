{"sha": "8b243438b3b2f6410360fb1d26e527aba70accf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIyNDM0MzhiM2IyZjY0MTAzNjBmYjFkMjZlNTI3YWJhNzBhY2NmNw==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-06-17T14:50:21Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-06-17T14:50:21Z"}, "message": "[nvptx] Fix missing mode warnings in nvptx.md, omp part\n\nFix these warnings:\n...\ngcc/config/nvptx/nvptx.md:1074:1: warning: operand 0 missing mode?\ngcc/config/nvptx/nvptx.md:1240:1: warning: operand 0 missing mode?\ngcc/config/nvptx/nvptx.md:1240:1: warning: operand 1 missing mode?\ngcc/config/nvptx/nvptx.md:1240:1: warning: operand 2 missing mode?\ngcc/config/nvptx/nvptx.md:1268:1: warning: operand 0 missing mode?\n...\n\nBuild and reg-tested on x86_64 with nvptx accelerator.\n\n2019-06-17  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx-protos.h (gen_set_softstack_insn): Declare.\n\t* config/nvptx/nvptx.c (gen_set_softstack_insn): New function.\n\t* config/nvptx/nvptx.md (define_insn \"set_softstack_insn\"): Rename to\n\t...\n\t(define_insn \"set_softstack_<mode>\"): ... this.  Use P iterator on\n\tmatch_operand 0.\n\t(define_insn \"omp_simt_enter_insn\"): Rename to ...\n\t(define_insn \"omp_simt_enter_<mode>\"): ... this.  Use P iterator on\n\tmatch_operand 0, 1 and 2, as well as the unspec_volatile result.\n\t(define_expand \"omp_simt_enter): Use gen_omp_simt_enter_di and\n\tgen_omp_simt_enter_si.\n\t(define_expand \"omp_simt_exit\"): New.\n\t(define_insn \"omp_simt_exit\"): Rename to ...\n\t(define_insn \"omp_simt_exit_<mode>\"): ... this.  Use P iterator on\n\tmatch_operand 0.\n\nFrom-SVN: r272388", "tree": {"sha": "191b6862cf2b189c1cdf8b81238bae890334d9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/191b6862cf2b189c1cdf8b81238bae890334d9f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b243438b3b2f6410360fb1d26e527aba70accf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b243438b3b2f6410360fb1d26e527aba70accf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b243438b3b2f6410360fb1d26e527aba70accf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b243438b3b2f6410360fb1d26e527aba70accf7/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f32f75858a14e7b304df7a71dae15d75081b0deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32f75858a14e7b304df7a71dae15d75081b0deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32f75858a14e7b304df7a71dae15d75081b0deb"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "807ce3da874735d812b4df2eb25b0c8a0f135352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b243438b3b2f6410360fb1d26e527aba70accf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b243438b3b2f6410360fb1d26e527aba70accf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b243438b3b2f6410360fb1d26e527aba70accf7", "patch": "@@ -1,3 +1,21 @@\n+2019-06-17  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx-protos.h (gen_set_softstack_insn): Declare.\n+\t* config/nvptx/nvptx.c (gen_set_softstack_insn): New function.\n+\t* config/nvptx/nvptx.md (define_insn \"set_softstack_insn\"): Rename to\n+\t...\n+\t(define_insn \"set_softstack_<mode>\"): ... this.  Use P iterator on\n+\tmatch_operand 0.\n+\t(define_insn \"omp_simt_enter_insn\"): Rename to ...\n+\t(define_insn \"omp_simt_enter_<mode>\"): ... this.  Use P iterator on\n+\tmatch_operand 0, 1 and 2, as well as the unspec_volatile result.\n+\t(define_expand \"omp_simt_enter): Use gen_omp_simt_enter_di and\n+\tgen_omp_simt_enter_si.\n+\t(define_expand \"omp_simt_exit\"): New.\n+\t(define_insn \"omp_simt_exit\"): Rename to ...\n+\t(define_insn \"omp_simt_exit_<mode>\"): ... this.  Use P iterator on\n+\tmatch_operand 0.\n+\n 2019-06-17  Matthew Green  <mrg@eterna.com.au>\n \t    Maya Rashish  <coypu@sdf.org>\n "}, {"sha": "061897a39213dd249ecb4ffc890306b473d6f52d", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b243438b3b2f6410360fb1d26e527aba70accf7/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b243438b3b2f6410360fb1d26e527aba70accf7/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=8b243438b3b2f6410360fb1d26e527aba70accf7", "patch": "@@ -57,5 +57,6 @@ extern const char *nvptx_output_set_softstack (unsigned);\n extern const char *nvptx_output_simt_enter (rtx, rtx, rtx);\n extern const char *nvptx_output_simt_exit (rtx);\n extern const char *nvptx_output_red_partition (rtx, rtx);\n+extern rtx gen_set_softstack_insn (rtx);\n #endif\n #endif"}, {"sha": "aa4a67fbeadcd24151445986a8f9e3066a83605a", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b243438b3b2f6410360fb1d26e527aba70accf7/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b243438b3b2f6410360fb1d26e527aba70accf7/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=8b243438b3b2f6410360fb1d26e527aba70accf7", "patch": "@@ -112,6 +112,18 @@ enum nvptx_data_area\n   DATA_AREA_MAX\n };\n \n+rtx\n+gen_set_softstack_insn (rtx op)\n+{\n+  gcc_assert (GET_MODE (op) == Pmode);\n+  if (GET_MODE (op) == DImode)\n+    return gen_set_softstack_di (op);\n+  else if (GET_MODE (op) == SImode)\n+    return gen_set_softstack_si (op);\n+  else\n+    gcc_unreachable ();\n+}\n+\n /*  We record the data area in the target symbol flags.  */\n #define SYMBOL_DATA_AREA(SYM) \\\n   (nvptx_data_area)((SYMBOL_REF_FLAGS (SYM) >> SYMBOL_FLAG_MACH_DEP_SHIFT) \\"}, {"sha": "84c0ea4543152e6a3b6f60e6ab8e31fa8410020a", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b243438b3b2f6410360fb1d26e527aba70accf7/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b243438b3b2f6410360fb1d26e527aba70accf7/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=8b243438b3b2f6410360fb1d26e527aba70accf7", "patch": "@@ -1071,8 +1071,8 @@\n   DONE;\n })\n \n-(define_insn \"set_softstack_insn\"\n-  [(unspec [(match_operand 0 \"nvptx_register_operand\" \"R\")]\n+(define_insn \"set_softstack_<mode>\"\n+  [(unspec [(match_operand:P 0 \"nvptx_register_operand\" \"R\")]\n \t   UNSPEC_SET_SOFTSTACK)]\n   \"TARGET_SOFT_STACK\"\n {\n@@ -1237,10 +1237,10 @@\n \n ;; Patterns for OpenMP SIMD-via-SIMT lowering\n \n-(define_insn \"omp_simt_enter_insn\"\n-  [(set (match_operand 0 \"nvptx_register_operand\" \"=R\")\n-\t(unspec_volatile [(match_operand 1 \"nvptx_nonmemory_operand\" \"Ri\")\n-\t\t\t    (match_operand 2 \"nvptx_nonmemory_operand\" \"Ri\")]\n+(define_insn \"omp_simt_enter_<mode>\"\n+  [(set (match_operand:P 0 \"nvptx_register_operand\" \"=R\")\n+\t(unspec_volatile:P [(match_operand:P 1 \"nvptx_nonmemory_operand\" \"Ri\")\n+\t\t\t    (match_operand:P 2 \"nvptx_nonmemory_operand\" \"Ri\")]\n \t\t\t   UNSPECV_SIMT_ENTER))]\n   \"\"\n {\n@@ -1261,12 +1261,32 @@\n   cfun->machine->simt_stack_align = MAX (UINTVAL (operands[2]),\n \t\t\t\t\t cfun->machine->simt_stack_align);\n   cfun->machine->has_simtreg = true;\n-  emit_insn (gen_omp_simt_enter_insn (operands[0], operands[1], operands[2]));\n+  gcc_assert (GET_MODE (operands[0]) == Pmode);\n+  if (GET_MODE (operands[0]) == DImode)\n+    emit_insn (gen_omp_simt_enter_di (operands[0], operands[1], operands[2]));\n+  else if (GET_MODE (operands[0]) == SImode)\n+    emit_insn (gen_omp_simt_enter_si (operands[0], operands[1], operands[2]));\n+  else\n+    gcc_unreachable ();\n+  DONE;\n+})\n+\n+(define_expand \"omp_simt_exit\"\n+  [(match_operand 0 \"nvptx_register_operand\" \"R\")]\n+  \"\"\n+{\n+  gcc_assert (GET_MODE (operands[0]) == Pmode);\n+  if (GET_MODE (operands[0]) == DImode)\n+    emit_insn (gen_omp_simt_exit_di (operands[0]));\n+  else if (GET_MODE (operands[0]) == SImode)\n+    emit_insn (gen_omp_simt_exit_si (operands[0]));\n+  else\n+    gcc_unreachable ();\n   DONE;\n })\n \n-(define_insn \"omp_simt_exit\"\n-  [(unspec_volatile [(match_operand 0 \"nvptx_register_operand\" \"R\")]\n+(define_insn \"omp_simt_exit_<mode>\"\n+  [(unspec_volatile [(match_operand:P 0 \"nvptx_register_operand\" \"R\")]\n \t\t    UNSPECV_SIMT_EXIT)]\n   \"\"\n {"}]}