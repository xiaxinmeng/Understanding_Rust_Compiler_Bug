{"sha": "25f68d908ff41a912a9bacb88afba665dd59c2ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmNjhkOTA4ZmY0MWE5MTJhOWJhY2I4OGFmYmE2NjVkZDU5YzJmZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-07-03T13:37:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-07-03T13:37:07Z"}, "message": "Add a helper for getting the overall alignment of a DR\n\nThis combines the information from previous patches to give a guaranteed\nalignment for the DR as a whole.  This should be a bit safer than using\nbase_element_aligned, since that only really took the base into account\n(not the init or offset).\n\n2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-data-ref.h (dr_alignment): Declare.\n\t* tree-data-ref.c (dr_alignment): New function.\n\t* tree-vectorizer.h (dataref_aux): Remove base_element_aligned.\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Don't\n\tset it.\n\t* tree-vect-stmts.c (vectorizable_store): Use dr_alignment.\n\nFrom-SVN: r249917", "tree": {"sha": "67ac693ded20cc4120dbf6e06c393b0918f0e88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67ac693ded20cc4120dbf6e06c393b0918f0e88a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25f68d908ff41a912a9bacb88afba665dd59c2ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f68d908ff41a912a9bacb88afba665dd59c2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f68d908ff41a912a9bacb88afba665dd59c2ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f68d908ff41a912a9bacb88afba665dd59c2ff/comments", "author": null, "committer": null, "parents": [{"sha": "bb64297941f34721c7d4e94e754b454086511cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb64297941f34721c7d4e94e754b454086511cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb64297941f34721c7d4e94e754b454086511cf9"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "d384bbf063fa33cf5de13185b5bdb935ce751ded", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25f68d908ff41a912a9bacb88afba665dd59c2ff", "patch": "@@ -1,3 +1,12 @@\n+2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-data-ref.h (dr_alignment): Declare.\n+\t* tree-data-ref.c (dr_alignment): New function.\n+\t* tree-vectorizer.h (dataref_aux): Remove base_element_aligned.\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Don't\n+\tset it.\n+\t* tree-vect-stmts.c (vectorizable_store): Use dr_alignment.\n+\n 2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-data-ref.h (innermost_loop_behavior): Add base_alignment"}, {"sha": "b7f9a570abb8f23c61b1047eb4a4dd77b992e690", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=25f68d908ff41a912a9bacb88afba665dd59c2ff", "patch": "@@ -4770,6 +4770,30 @@ find_data_references_in_loop (struct loop *loop,\n   return NULL_TREE;\n }\n \n+/* Return the alignment in bytes that DRB is guaranteed to have at all\n+   times.  */\n+\n+unsigned int\n+dr_alignment (innermost_loop_behavior *drb)\n+{\n+  /* Get the alignment of BASE_ADDRESS + INIT.  */\n+  unsigned int alignment = drb->base_alignment;\n+  unsigned int misalignment = (drb->base_misalignment\n+\t\t\t       + TREE_INT_CST_LOW (drb->init));\n+  if (misalignment != 0)\n+    alignment = MIN (alignment, misalignment & -misalignment);\n+\n+  /* Cap it to the alignment of OFFSET.  */\n+  if (!integer_zerop (drb->offset))\n+    alignment = MIN (alignment, drb->offset_alignment);\n+\n+  /* Cap it to the alignment of STEP.  */\n+  if (!integer_zerop (drb->step))\n+    alignment = MIN (alignment, drb->step_alignment);\n+\n+  return alignment;\n+}\n+\n /* Recursive helper function.  */\n \n static bool"}, {"sha": "1559cd90bd2af048ead5b5dd365138dc190ed5b0", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=25f68d908ff41a912a9bacb88afba665dd59c2ff", "patch": "@@ -405,6 +405,16 @@ extern bool compute_all_dependences (vec<data_reference_p> ,\n \t\t\t\t     vec<loop_p>, bool);\n extern tree find_data_references_in_bb (struct loop *, basic_block,\n                                         vec<data_reference_p> *);\n+extern unsigned int dr_alignment (innermost_loop_behavior *);\n+\n+/* Return the alignment in bytes that DR is guaranteed to have at all\n+   times.  */\n+\n+inline unsigned int\n+dr_alignment (data_reference *dr)\n+{\n+  return dr_alignment (&DR_INNERMOST (dr));\n+}\n \n extern bool dr_may_alias_p (const struct data_reference *,\n \t\t\t    const struct data_reference *, bool);"}, {"sha": "907f35e6703b7e3afa5a3ce1feb897d1c3f85feb", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=25f68d908ff41a912a9bacb88afba665dd59c2ff", "patch": "@@ -731,12 +731,6 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n   unsigned int base_alignment = drb->base_alignment;\n   unsigned int base_misalignment = drb->base_misalignment;\n   unsigned HOST_WIDE_INT vector_alignment = TYPE_ALIGN_UNIT (vectype);\n-  unsigned HOST_WIDE_INT element_alignment\n-    = TYPE_ALIGN_UNIT (TREE_TYPE (vectype));\n-\n-  if (base_alignment >= element_alignment\n-      && (base_misalignment & (element_alignment - 1)) == 0)\n-    DR_VECT_AUX (dr)->base_element_aligned = true;\n \n   if (drb->offset_alignment < vector_alignment\n       || !step_preserves_misalignment_p\n@@ -797,7 +791,6 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n \n       DR_VECT_AUX (dr)->base_decl = base;\n       DR_VECT_AUX (dr)->base_misaligned = true;\n-      DR_VECT_AUX (dr)->base_element_aligned = true;\n       base_misalignment = 0;\n     }\n   unsigned int misalignment = (base_misalignment"}, {"sha": "1ad8eedf2184858f78ffd7c30963519813161eb1", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=25f68d908ff41a912a9bacb88afba665dd59c2ff", "patch": "@@ -6353,11 +6353,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\tmisalign = 0;\n \t      else if (DR_MISALIGNMENT (first_dr) == -1)\n \t\t{\n-\t\t  if (DR_VECT_AUX (first_dr)->base_element_aligned)\n-\t\t    align = TYPE_ALIGN_UNIT (elem_type);\n-\t\t  else\n-\t\t    align = get_object_alignment (DR_REF (first_dr))\n-\t\t\t/ BITS_PER_UNIT;\n+\t\t  align = dr_alignment (vect_dr_behavior (first_dr));\n \t\t  misalign = 0;\n \t\t  TREE_TYPE (data_ref)\n \t\t    = build_aligned_type (TREE_TYPE (data_ref),\n@@ -7429,11 +7425,7 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\t      }\n \t\t    else if (DR_MISALIGNMENT (first_dr) == -1)\n \t\t      {\n-\t\t\tif (DR_VECT_AUX (first_dr)->base_element_aligned)\n-\t\t\t  align = TYPE_ALIGN_UNIT (elem_type);\n-\t\t\telse\n-\t\t\t  align = (get_object_alignment (DR_REF (first_dr))\n-\t\t\t\t   / BITS_PER_UNIT);\n+\t\t\talign = dr_alignment (vect_dr_behavior (first_dr));\n \t\t\tmisalign = 0;\n \t\t\tTREE_TYPE (data_ref)\n \t\t\t  = build_aligned_type (TREE_TYPE (data_ref),"}, {"sha": "8935e78afea3742a6f29de72b8e4739630bd9689", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f68d908ff41a912a9bacb88afba665dd59c2ff/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=25f68d908ff41a912a9bacb88afba665dd59c2ff", "patch": "@@ -754,8 +754,6 @@ struct dataref_aux {\n   int misalignment;\n   /* If true the alignment of base_decl needs to be increased.  */\n   bool base_misaligned;\n-  /* If true we know the base is at least vector element alignment aligned.  */\n-  bool base_element_aligned;\n   tree base_decl;\n };\n "}]}