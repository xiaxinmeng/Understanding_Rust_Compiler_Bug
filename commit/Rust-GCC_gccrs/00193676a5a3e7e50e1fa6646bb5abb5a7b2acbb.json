{"sha": "00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb", "node_id": "C_kwDOANBUbNoAKDAwMTkzNjc2YTVhM2U3ZTUwZTFmYTY2NDZiYjVhYmI1YTdiMmFjYmI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-30T10:00:03Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-30T10:00:03Z"}, "message": "Use xchg for DImode double word rotate by 32 bits with -m32 on x86.\n\nThis patch was motivated by the investigation of Linus Torvalds' spill\nheavy cryptography kernels in PR 105930.  The <any_rotate>di3 expander\nhandles all rotations by an immediate constant for 1..63 bits with the\nexception of 32 bits, which FAILs and is then split by the middle-end.\nThis patch makes these 32-bit doubleword rotations consistent with the\nother DImode rotations during reload, which results in reduced register\npressure, fewer instructions and the use of x86's xchg instruction\nwhen appropriate.  In theory, xchg can be handled by register renaming,\nbut even on micro-architectures where it's implemented by 3 uops (no\nworse than a three instruction shuffle), avoiding nominating a\n\"temporary\" register, reduces user-visible register pressure (and\nhas obvious code size benefits).\n\nThe effects are best shown with the new testcase:\n\nunsigned long long bar();\nunsigned long long foo()\n{\n  unsigned long long x = bar();\n  return (x>>32) | (x<<32);\n}\n\nfor which GCC with -m32 -O2 currently generates:\n\n        subl    $12, %esp\n        call    bar\n        addl    $12, %esp\n        movl    %eax, %ecx\n        movl    %edx, %eax\n        movl    %ecx, %edx\n        ret\n\nbut with this patch now generates:\n\n        subl    $12, %esp\n        call    bar\n        addl    $12, %esp\n        xchgl   %edx, %eax\n        ret\n\nWith this patch, the number of lines of assembly language generated\nfor the blake2b kernel (from the attachment to PR105930) decreases\nfrom 5626 to 5404. Although there's an impressive reduction in\ninstruction count, there's no change/reduction in stack frame size.\n\n2022-06-30  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (swap_mode): Rename from *swap<mode> to\n\tprovide gen_swapsi.\n\t(<any_rotate>di3): Handle !TARGET_64BIT rotations by 32 bits\n\tvia new gen_<insn>32di2_doubleword below.\n\t(<anyrotate>32di2_doubleword): New define_insn_and_split\n\tthat splits after reload as either a pair of move instructions\n\tor an xchgl (using gen_swapsi).\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/xchg-3.c: New test case.", "tree": {"sha": "fd8a11dfd3a4aace8418eabef5e34bad02c83e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd8a11dfd3a4aace8418eabef5e34bad02c83e2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea329432b8e405668861bbe0cd2662a80508c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea329432b8e405668861bbe0cd2662a80508c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea329432b8e405668861bbe0cd2662a80508c45"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "04cd2bc173e11552d5da9a59fdf5126763cf515e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb", "patch": "@@ -2966,7 +2966,7 @@\n    (set_attr \"memory\" \"load\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*swap<mode>\"\n+(define_insn \"swap<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"+r\")\n \t(match_operand:SWI48 1 \"register_operand\" \"+r\"))\n    (set (match_dup 1)\n@@ -13673,6 +13673,8 @@\n   else if (const_1_to_31_operand (operands[2], VOIDmode))\n     emit_insn (gen_ix86_<insn>di3_doubleword\n \t\t(operands[0], operands[1], operands[2]));\n+  else if (CONST_INT_P (operands[2]) && INTVAL (operands[2]) == 32)\n+    emit_insn (gen_<insn>32di2_doubleword (operands[0], operands[1]));\n   else\n     FAIL;\n \n@@ -13845,6 +13847,24 @@\n   split_double_mode (<DWI>mode, &operands[0], 1, &operands[4], &operands[5]);\n })\n \n+(define_insn_and_split \"<insn>32di2_doubleword\"\n+ [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n+       (any_rotate:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,r,o\")\n+                      (const_int 32)))]\n+ \"!TARGET_64BIT\"\n+ \"#\"\n+ \"&& reload_completed\"\n+ [(set (match_dup 0) (match_dup 3))\n+  (set (match_dup 2) (match_dup 1))]\n+{\n+  split_double_mode (DImode, &operands[0], 2, &operands[0], &operands[2]);\n+  if (rtx_equal_p (operands[0], operands[1]))\n+    {\n+      emit_insn (gen_swapsi (operands[0], operands[2]));\n+      DONE;\n+    }\n+})\n+\n (define_mode_attr rorx_immediate_operand\n \t[(SI \"const_0_to_31_operand\")\n \t (DI \"const_0_to_63_operand\")])"}, {"sha": "eec05f06c97bc4fc54c7208b8379d839d56bdb60", "filename": "gcc/testsuite/gcc.target/i386/xchg-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxchg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxchg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxchg-3.c?ref=00193676a5a3e7e50e1fa6646bb5abb5a7b2acbb", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned long long bar();\n+\n+unsigned long long foo()\n+{\n+  unsigned long long x = bar();\n+  return (x>>32) | (x<<32);\n+}\n+\n+/*{ dg-final { scan-assembler \"xchgl\" } } */"}]}