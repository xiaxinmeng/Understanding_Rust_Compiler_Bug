{"sha": "d6cde8451a650824fcf971d56978b50d949aa3a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjZGU4NDUxYTY1MDgyNGZjZjk3MWQ1Njk3OGI1MGQ5NDlhYTNhMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-24T19:51:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-24T19:51:09Z"}, "message": "alpha.c (alpha_emit_xfloating_cvt): Thinko in operand manipulation.\n\n        * alpha.c (alpha_emit_xfloating_cvt): Thinko in operand manipulation.\n        * alpha.md (movtf): New expander, insn, and splitter.\n\nFrom-SVN: r31589", "tree": {"sha": "7fb46d7621f9dfd631a3e47f2328346b7204ea23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb46d7621f9dfd631a3e47f2328346b7204ea23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6cde8451a650824fcf971d56978b50d949aa3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cde8451a650824fcf971d56978b50d949aa3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cde8451a650824fcf971d56978b50d949aa3a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cde8451a650824fcf971d56978b50d949aa3a2/comments", "author": null, "committer": null, "parents": [{"sha": "eedf2f550c5ed120f8ca22d0c4a4836bcbe82727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedf2f550c5ed120f8ca22d0c4a4836bcbe82727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedf2f550c5ed120f8ca22d0c4a4836bcbe82727"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "87611ce4dbd7cef0744c05c70b9572e704b2568c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cde8451a650824fcf971d56978b50d949aa3a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cde8451a650824fcf971d56978b50d949aa3a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6cde8451a650824fcf971d56978b50d949aa3a2", "patch": "@@ -1,3 +1,8 @@\n+2000-01-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (alpha_emit_xfloating_cvt): Thinko in operand manipulation.\n+\t* alpha.md (movtf): New expander, insn, and splitter.\n+\n Mon Jan 24 19:49:47 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* reg-stack.c (subst_stack_regs_pat): Handle correctly USEs of"}, {"sha": "ca9e0ecaf3505a22959ff2b1a4baf11eae39e09a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cde8451a650824fcf971d56978b50d949aa3a2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cde8451a650824fcf971d56978b50d949aa3a2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d6cde8451a650824fcf971d56978b50d949aa3a2", "patch": "@@ -1971,11 +1971,13 @@ alpha_emit_xfloating_cvt (code, operands)\n     {\n     case FIX:\n       mode = alpha_compute_xfloating_mode_arg (code, ALPHA_FPRM_CHOP);\n-      operands[noperands++] = GEN_INT (mode);\n+      operands[2] = GEN_INT (mode);\n+      noperands = 2;\n       break;\n     case FLOAT_TRUNCATE:\n       mode = alpha_compute_xfloating_mode_arg (code, alpha_fprm);\n-      operands[noperands++] = GEN_INT (mode);\n+      operands[2] = GEN_INT (mode);\n+      noperands = 2;\n       break;\n     default:\n       break;"}, {"sha": "5f0e2219bbd8d72354e26e6fe53fe2515d8f2ba7", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cde8451a650824fcf971d56978b50d949aa3a2/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cde8451a650824fcf971d56978b50d949aa3a2/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=d6cde8451a650824fcf971d56978b50d949aa3a2", "patch": "@@ -4076,6 +4076,57 @@\n    ftoit %1,%0\"\n   [(set_attr \"type\" \"fcpys,fld,ilog,ild,fst,ist,itof,ftoi\")])\n \n+;; Subregs suck for register allocation.  Pretend we can move TFmode\n+;; data between general registers until after reload.\n+(define_insn \"\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=r,o\")\n+\t(match_operand:TF 1 \"input_operand\" \"ro,r\"))]\n+  \"register_operand (operands[0], TFmode)\n+   || reg_or_fp0_operand (operands[1], TFmode)\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:TF 1 \"input_operand\" \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (match_dup 2))\n+   (set (match_dup 1) (match_dup 3))]\n+  \"\n+{\n+  if (GET_CODE (operands[1]) == REG)\n+    {\n+      operands[3] = gen_rtx_REG (DImode, REGNO (operands[1]) + 1);\n+      operands[2] = gen_rtx_REG (DImode, REGNO (operands[1]));\n+    }\n+  else if (GET_CODE (operands[1]) == MEM)\n+    {\n+      operands[3] = change_address (operands[1], DImode,\n+\t\t\t\t    plus_constant (XEXP (operands[1], 0), 8));\n+      operands[2] = change_address (operands[1], DImode, NULL_RTX);\n+    }\n+\n+  if (GET_CODE (operands[0]) == REG)\n+    {\n+      operands[1] = gen_rtx_REG (DImode, REGNO (operands[0]) + 1);\n+      operands[0] = gen_rtx_REG (DImode, REGNO (operands[0]));\n+    }\n+  else if (GET_CODE (operands[0]) == MEM)\n+    {\n+      operands[1] = change_address (operands[0], DImode,\n+\t\t\t\t    plus_constant (XEXP (operands[0], 0), 8));\n+      operands[0] = change_address (operands[0], DImode, NULL_RTX);\n+    }\n+\n+  if (rtx_equal_p (operands[0], operands[3]))\n+    {\n+      rtx tmp;\n+      tmp = operands[0], operands[0] = operands[1], operands[1] = tmp;\n+      tmp = operands[2], operands[2] = operands[3], operands[3] = tmp;\n+    }\n+}\")\n+\n+\n+\n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:SF 1 \"general_operand\" \"\"))]\n@@ -4098,6 +4149,17 @@\n     operands[1] = force_reg (DFmode, operands[1]);\n }\")\n \n+(define_expand \"movtf\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:TF 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  if (GET_CODE (operands[0]) == MEM\n+      && ! reg_or_fp0_operand (operands[1], TFmode))\n+    operands[1] = force_reg (TFmode, operands[1]);\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,*f,*f,m\")\n \t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,m,rJ,*fJ,m,*f\"))]"}]}