{"sha": "f4ab7b998ed27cc52815ed77710fb1e2bcb03dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhYjdiOTk4ZWQyN2NjNTI4MTVlZDc3NzEwZmIxZTJiY2IwM2RjZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-14T20:02:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-14T20:02:32Z"}, "message": "i386.c (ix86_expand_round_sse4): New function.\n\n\t* config/i386/i386.c (ix86_expand_round_sse4): New function.\n\t* config/i386/i386-protos.h (ix86_expand_round_sse4): New prototype.\n\t* config/i386/i386.md (round<mode>2): Use ix86_expand_round_sse4\n\tfor TARGET_ROUND.\n\n\t(rint<mode>2): Simplify TARGET_ROUND check.\n\t(floor<mode>2): Ditto.\n\t(ceil<mode>2): Ditto.\n\t(btrunc<mode>2): Ditto.\n\nFrom-SVN: r177751", "tree": {"sha": "e7566e626ff76d3c38f49235ce9927d79eaa70f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7566e626ff76d3c38f49235ce9927d79eaa70f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/comments", "author": null, "committer": null, "parents": [{"sha": "8533a1cae9bcc18f1d8b56da641f34db37e63547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8533a1cae9bcc18f1d8b56da641f34db37e63547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8533a1cae9bcc18f1d8b56da641f34db37e63547"}], "stats": {"total": 271, "additions": 165, "deletions": 106}, "files": [{"sha": "82e79b06944078f215bd95c4000016ab4d37f54d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 105, "deletions": 95, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4ab7b998ed27cc52815ed77710fb1e2bcb03dce", "patch": "@@ -1,10 +1,22 @@\n+2011-08-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_round_sse4): New function.\n+\t* config/i386/i386-protos.h (ix86_expand_round_sse4): New prototype.\n+\t* config/i386/i386.md (round<mode>2): Use ix86_expand_round_sse4\n+\tfor TARGET_ROUND.\n+\n+\t(rint<mode>2): Simplify TARGET_ROUND check.\n+\t(floor<mode>2): Ditto.\n+\t(ceil<mode>2): Ditto.\n+\t(btrunc<mode>2): Ditto.\n+\n 2011-08-14  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/mmix/mmix.c (TARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Redefine\n \tas mmix_preferred_output_reload_class.\n \n 2011-08-14  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* PR target/49903\n \t* config/avr/avr.md (UNSPEC_IDENTITY): New c_enum.\n \t(branch_unspec): New insn.\n@@ -38,98 +50,97 @@\n 2011-08-12   Diego Novillo  <dnovillo@google.com>\n \n \t* data-streamer.h (streamer_write_zero): Rename from output_zero.\n- \t(streamer_write_uhwi): Rename from lto_output_uleb128.\n- \t(streamer_write_hwi): Rename from output_sleb128.\n- \t(streamer_write_string): Rename from lto_output_string.\n- \t(streamer_string_index): Rename from lto_string_index.\n- \t(streamer_write_string_with_length): Rename from\n- \tlto_output_string_with_length.\n- \t(streamer_write_uhwi_stream): Rename from lto_output_uleb128_stream.\n- \t(streamer_write_hwi_stream): Rename from lto_output_sleb128_stream.\n- \t(streamer_read_string): Rename from lto_input_string.\n- \t(streamer_read_indexed_string): Rename from input_string_internal.\n- \t(streamer_read_uhwi): Rename from lto_input_uleb128.\n- \t(streamer_read_hwi): Rename from lto_input_sleb128.\n- \t(streamer_write_hwi_in_range): Rename from lto_output_int_in_range.\n- \t(streamer_read_hwi_in_range): Rename from lto_input_int_in_range.\n- \t(streamer_write_enum): Rename from lto_output_enum.\n- \t(streamer_read_enum): Rename from lto_input_enum.\n- \t(streamer_write_record_start): Rename from output_record_start.\n- \t(streamer_read_record_start): Rename from input_record_start.\n- \t(streamer_write_bitpack): Rename from lto_output_bitpack.\n- \t(streamer_read_bitpack): Rename from lto_input_bitpack.\n- \t(streamer_write_char_stream): Rename from lto_output_1_stream.\n- \t(streamer_read_uchar): Rename from lto_input_1_unsigned.\n- \t* tree-streamer.h (streamer_cache_d): Rename from lto_streamer_cache_d.\n- \t(streamer_handle_as_builtin_p): Rename from lto_stream_as_builtin_p.\n- \t(streamer_read_string_cst): Rename from input_string_cst.\n- \t(streamer_read_chain): Rename from lto_input_chain.\n- \t(streamer_alloc_tree): Rename from lto_materialize_tree.\n- \t(streamer_read_tree_body): Rename from lto_input_tree_pointers.\n- \t(streamer_get_pickled_tree): Rename from lto_get_pickled_tree.\n- \t(streamer_get_builtin_tree): Rename from lto_get_builtin_tree.\n- \t(streamer_read_integer_cst): Rename from lto_input_integer_cst.\n- \t(streamer_read_tree_bitfields): Rename from tree_read_bitfields.\n- \t(streamer_write_chain): Rename from lto_output_chain.\n- \t(streamer_write_tree_header): Rename from lto_output_tree_header.\n- \t(streamer_pack_tree_bitfields): Rename from pack_value_fields.\n- \t(streamer_write_tree_body): Rename from lto_output_tree_pointers.\n- \t(streamer_write_integer_cst): Rename from lto_output_integer_cst.\n- \t(streamer_write_builtin): Rename from lto_output_builtin_tree.\n- \t(streamer_check_handled_ts_structures): Rename from\n- \tcheck_handled_ts_structures.\n- \t(streamer_tree_cache_insert): Rename from lto_streamer_cache_insert.\n- \t(streamer_tree_cache_insert_at): Rename from\n- \tlto_streamer_cache_insert_at.\n- \t(streamer_tree_cache_append): Rename from lto_streamer_cache_append.\n- \t(streamer_tree_cache_lookup): Rename from lto_streamer_cache_lookup.\n- \t(streamer_tree_cache_get): Rename from lto_streamer_cache_get.\n- \t(streamer_tree_cache_create): Rename from lto_streamer_cache_create.\n- \t(streamer_tree_cache_delete): Rename from lto_streamer_cache_delete.\n- \t* tree-streamer-out.c (write_string_cst): Rename from output_string_cst.\n- \t(write_identifier): Rename from output_identifier.\n- \t(write_ts_common_tree_pointers): Rename from\n- \tlto_output_ts_common_tree_pointers.\n- \t(write_ts_vector_tree_pointers): Rename from\n- \tlto_output_ts_vector_tree_pointers.\n- \t(write_ts_complex_tree_pointers): Rename from\n- \tlto_output_ts_complex_tree_pointers.\n- \t(write_ts_decl_minimal_tree_pointers): Rename from\n- \tlto_output_ts_decl_minimal_tree_pointers.\n- \t(write_ts_decl_common_tree_pointers): Rename from\n- \tlto_output_ts_decl_common_tree_pointers.\n- \t(write_ts_decl_non_common_tree_pointers): Rename from\n- \tlto_output_ts_decl_non_common_tree_pointers.\n- \t(write_ts_decl_with_vis_tree_pointers): Rename from\n- \tlto_output_ts_decl_with_vis_tree_pointers.\n- \t(write_ts_field_decl_tree_pointers): Rename from\n- \tlto_output_ts_field_decl_tree_pointers.\n- \t(write_ts_function_decl_tree_pointers): Rename from\n- \tlto_output_ts_function_decl_tree_pointers.\n- \t(write_ts_type_common_tree_pointers): Rename from\n- \tlto_output_ts_type_common_tree_pointers.\n- \t(write_ts_type_non_common_tree_pointers): Rename from\n- \tlto_output_ts_type_non_common_tree_pointers.\n- \t(write_ts_list_tree_pointers): Rename from\n- \tlto_output_ts_list_tree_pointers.\n- \t(write_ts_vec_tree_pointers): Rename from\n- \tlto_output_ts_vec_tree_pointers.\n- \t(write_ts_exp_tree_pointers): Rename from\n- \tlto_output_ts_exp_tree_pointers.\n- \t(write_ts_block_tree_pointers): Rename from\n- \tlto_output_ts_block_tree_pointers.\n- \t(write_ts_binfo_tree_pointers): Rename from\n- \tlto_output_ts_binfo_tree_pointers.\n- \t(write_ts_constructor_tree_pointers): Rename from\n- \tlto_output_ts_constructor_tree_pointers.\n- \t(write_ts_target_option): Rename from\n- \tlto_output_ts_target_option.\n- \t(write_ts_translation_unit_decl_tree_pointers): Rename from\n- \tlto_output_ts_translation_unit_decl_tree_pointers.\n- \t* tree-streamer.c (streamer_tree_cache_add_to_node_array):\n- \tRename from lto_streamer_cache_add_to_node_array.\n- \t(streamer_tree_cache_insert_1): Rename from lto_streamer_cache_insert_1.\n- \t(record_common_node): Rename from lto_record_common_node.\n+\t(streamer_write_uhwi): Rename from lto_output_uleb128.\n+\t(streamer_write_hwi): Rename from output_sleb128.\n+\t(streamer_write_string): Rename from lto_output_string.\n+\t(streamer_string_index): Rename from lto_string_index.\n+\t(streamer_write_string_with_length): Rename from\n+\tlto_output_string_with_length.\n+\t(streamer_write_uhwi_stream): Rename from lto_output_uleb128_stream.\n+\t(streamer_write_hwi_stream): Rename from lto_output_sleb128_stream.\n+\t(streamer_read_string): Rename from lto_input_string.\n+\t(streamer_read_indexed_string): Rename from input_string_internal.\n+\t(streamer_read_uhwi): Rename from lto_input_uleb128.\n+\t(streamer_read_hwi): Rename from lto_input_sleb128.\n+\t(streamer_write_hwi_in_range): Rename from lto_output_int_in_range.\n+\t(streamer_read_hwi_in_range): Rename from lto_input_int_in_range.\n+\t(streamer_write_enum): Rename from lto_output_enum.\n+\t(streamer_read_enum): Rename from lto_input_enum.\n+\t(streamer_write_record_start): Rename from output_record_start.\n+\t(streamer_read_record_start): Rename from input_record_start.\n+\t(streamer_write_bitpack): Rename from lto_output_bitpack.\n+\t(streamer_read_bitpack): Rename from lto_input_bitpack.\n+\t(streamer_write_char_stream): Rename from lto_output_1_stream.\n+\t(streamer_read_uchar): Rename from lto_input_1_unsigned.\n+\t* tree-streamer.h (streamer_cache_d): Rename from lto_streamer_cache_d.\n+\t(streamer_handle_as_builtin_p): Rename from lto_stream_as_builtin_p.\n+\t(streamer_read_string_cst): Rename from input_string_cst.\n+\t(streamer_read_chain): Rename from lto_input_chain.\n+\t(streamer_alloc_tree): Rename from lto_materialize_tree.\n+\t(streamer_read_tree_body): Rename from lto_input_tree_pointers.\n+\t(streamer_get_pickled_tree): Rename from lto_get_pickled_tree.\n+\t(streamer_get_builtin_tree): Rename from lto_get_builtin_tree.\n+\t(streamer_read_integer_cst): Rename from lto_input_integer_cst.\n+\t(streamer_read_tree_bitfields): Rename from tree_read_bitfields.\n+\t(streamer_write_chain): Rename from lto_output_chain.\n+\t(streamer_write_tree_header): Rename from lto_output_tree_header.\n+\t(streamer_pack_tree_bitfields): Rename from pack_value_fields.\n+\t(streamer_write_tree_body): Rename from lto_output_tree_pointers.\n+\t(streamer_write_integer_cst): Rename from lto_output_integer_cst.\n+\t(streamer_write_builtin): Rename from lto_output_builtin_tree.\n+\t(streamer_check_handled_ts_structures): Rename from\n+\tcheck_handled_ts_structures.\n+\t(streamer_tree_cache_insert): Rename from lto_streamer_cache_insert.\n+\t(streamer_tree_cache_insert_at): Rename from\n+\tlto_streamer_cache_insert_at.\n+\t(streamer_tree_cache_append): Rename from lto_streamer_cache_append.\n+\t(streamer_tree_cache_lookup): Rename from lto_streamer_cache_lookup.\n+\t(streamer_tree_cache_get): Rename from lto_streamer_cache_get.\n+\t(streamer_tree_cache_create): Rename from lto_streamer_cache_create.\n+\t(streamer_tree_cache_delete): Rename from lto_streamer_cache_delete.\n+\t* tree-streamer-out.c (write_string_cst): Rename from output_string_cst.\n+\t(write_identifier): Rename from output_identifier.\n+\t(write_ts_common_tree_pointers): Rename from\n+\tlto_output_ts_common_tree_pointers.\n+\t(write_ts_vector_tree_pointers): Rename from\n+\tlto_output_ts_vector_tree_pointers.\n+\t(write_ts_complex_tree_pointers): Rename from\n+\tlto_output_ts_complex_tree_pointers.\n+\t(write_ts_decl_minimal_tree_pointers): Rename from\n+\tlto_output_ts_decl_minimal_tree_pointers.\n+\t(write_ts_decl_common_tree_pointers): Rename from\n+\tlto_output_ts_decl_common_tree_pointers.\n+\t(write_ts_decl_non_common_tree_pointers): Rename from\n+\tlto_output_ts_decl_non_common_tree_pointers.\n+\t(write_ts_decl_with_vis_tree_pointers): Rename from\n+\tlto_output_ts_decl_with_vis_tree_pointers.\n+\t(write_ts_field_decl_tree_pointers): Rename from\n+\tlto_output_ts_field_decl_tree_pointers.\n+\t(write_ts_function_decl_tree_pointers): Rename from\n+\tlto_output_ts_function_decl_tree_pointers.\n+\t(write_ts_type_common_tree_pointers): Rename from\n+\tlto_output_ts_type_common_tree_pointers.\n+\t(write_ts_type_non_common_tree_pointers): Rename from\n+\tlto_output_ts_type_non_common_tree_pointers.\n+\t(write_ts_list_tree_pointers): Rename from\n+\tlto_output_ts_list_tree_pointers.\n+\t(write_ts_vec_tree_pointers): Rename from\n+\tlto_output_ts_vec_tree_pointers.\n+\t(write_ts_exp_tree_pointers): Rename from\n+\tlto_output_ts_exp_tree_pointers.\n+\t(write_ts_block_tree_pointers): Rename from\n+\tlto_output_ts_block_tree_pointers.\n+\t(write_ts_binfo_tree_pointers): Rename from\n+\tlto_output_ts_binfo_tree_pointers.\n+\t(write_ts_constructor_tree_pointers): Rename from\n+\tlto_output_ts_constructor_tree_pointers.\n+\t(write_ts_target_option): Rename from lto_output_ts_target_option.\n+\t(write_ts_translation_unit_decl_tree_pointers): Rename from\n+\tlto_output_ts_translation_unit_decl_tree_pointers.\n+\t* tree-streamer.c (streamer_tree_cache_add_to_node_array):\n+\tRename from lto_streamer_cache_add_to_node_array.\n+\t(streamer_tree_cache_insert_1): Rename from lto_streamer_cache_insert_1.\n+\t(record_common_node): Rename from lto_record_common_node.\n \n \t* streamer-hooks.h (bitpack_d, lto_streamer_cache_d): Remove forward\n \tdeclarations.\n@@ -144,8 +155,7 @@\n \n 2011-08-12  Nick Clifton  <nickc@redhat.com>\n \n-\t* builtins.c (expand_builtin_memcmp): Do not use cmpstrnsi\n-\tpattern.\n+\t* builtins.c (expand_builtin_memcmp): Do not use cmpstrnsi pattern.\n \t* doc/md.texi (cmpstrn): Note that the comparison stops if both\n \tfetched bytes are zero.\n \t(cmpstr): Likewise."}, {"sha": "7deeae732ae84362ac4ed9171927683eb35c2343", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f4ab7b998ed27cc52815ed77710fb1e2bcb03dce", "patch": "@@ -174,6 +174,7 @@ extern void ix86_expand_lfloorceil (rtx, rtx, bool);\n extern void ix86_expand_rint (rtx, rtx);\n extern void ix86_expand_floorceil (rtx, rtx, bool);\n extern void ix86_expand_floorceildf_32 (rtx, rtx, bool);\n+extern void ix86_expand_round_sse4 (rtx, rtx);\n extern void ix86_expand_round (rtx, rtx);\n extern void ix86_expand_rounddf_32 (rtx, rtx);\n extern void ix86_expand_trunc (rtx, rtx);"}, {"sha": "fe6ccbeb59c66cc7eb1321c8bb2a12bc753d7375", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f4ab7b998ed27cc52815ed77710fb1e2bcb03dce", "patch": "@@ -32676,6 +32676,52 @@ ix86_expand_round (rtx operand0, rtx operand1)\n \n   emit_move_insn (operand0, res);\n }\n+\n+/* Expand SSE sequence for computing round\n+   from OP1 storing into OP0 using sse4 round insn.  */\n+void\n+ix86_expand_round_sse4 (rtx op0, rtx op1)\n+{\n+  enum machine_mode mode = GET_MODE (op0);\n+  rtx e1, e2, e3, res, half, mask;\n+  const struct real_format *fmt;\n+  REAL_VALUE_TYPE pred_half, half_minus_pred_half;\n+  rtx (*gen_round) (rtx, rtx, rtx);\n+\n+  switch (mode)\n+    {\n+    case SFmode:\n+      gen_round = gen_sse4_1_roundsf2;\n+      break;\n+    case DFmode:\n+      gen_round = gen_sse4_1_rounddf2;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* e1 = fabs(op1) */\n+  e1 = ix86_expand_sse_fabs (op1, &mask);\n+\n+  /* load nextafter (0.5, 0.0) */\n+  fmt = REAL_MODE_FORMAT (mode);\n+  real_2expN (&half_minus_pred_half, -(fmt->p) - 1, mode);\n+  REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+\n+  /* e2 = e1 + 0.5 */\n+  half = force_reg (mode, const_double_from_real_value (pred_half, mode));\n+  e2 = expand_simple_binop (mode, PLUS, e1, half, NULL_RTX, 0, OPTAB_DIRECT);\n+\n+  /* e3 = trunc(e2) */\n+  e3 = gen_reg_rtx (mode);\n+  emit_insn (gen_round (e3, e2, GEN_INT (ROUND_TRUNC)));\n+\n+  /* res = copysign (e3, op1) */\n+  res = gen_reg_rtx (mode);\n+  ix86_sse_copysign_to_positive (res, e3, op1, mask);\n+\n+  emit_move_insn (op0, res);\n+}\n \f\n \n /* Table of valid machine attributes.  */"}, {"sha": "e7ae3970511b0fa5b84da899ed74ac548132011a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ab7b998ed27cc52815ed77710fb1e2bcb03dce/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f4ab7b998ed27cc52815ed77710fb1e2bcb03dce", "patch": "@@ -14394,11 +14394,11 @@\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !flag_trapping_math)\n     {\n-      if (!TARGET_ROUND && optimize_insn_for_size_p ())\n-\tFAIL;\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n \t\t   (operands[0], operands[1], GEN_INT (ROUND_MXCSR)));\n+      else if (optimize_insn_for_size_p ())\n+        FAIL;\n       else\n \tix86_expand_rint (operand0, operand1);\n     }\n@@ -14431,7 +14431,12 @@\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !flag_trapping_math && !flag_rounding_math)\n     {\n-      if (TARGET_64BIT || (<MODE>mode != DFmode))\n+      if (TARGET_ROUND)\n+        {\n+\t  operands[1] = force_reg (<MODE>mode, operands[1]);\n+\t  ix86_expand_round_sse4 (operands[0], operands[1]);\n+\t}\n+      else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \tix86_expand_round (operands[0], operands[1]);\n       else\n \tix86_expand_rounddf_32 (operands[0], operands[1]);\n@@ -14663,14 +14668,13 @@\n        && !flag_trapping_math)\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && !flag_trapping_math\n-      && (TARGET_ROUND || optimize_insn_for_speed_p ()))\n+      && !flag_trapping_math)\n     {\n-      if (!TARGET_ROUND && optimize_insn_for_size_p ())\n-\tFAIL;\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n \t\t   (operands[0], operands[1], GEN_INT (ROUND_FLOOR)));\n+      else if (optimize_insn_for_size_p ())\n+        FAIL;\n       else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \tix86_expand_floorceil (operand0, operand1, true);\n       else\n@@ -14922,8 +14926,7 @@\n        && !flag_trapping_math)\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && !flag_trapping_math\n-      && (TARGET_ROUND || optimize_insn_for_speed_p ()))\n+      && !flag_trapping_math)\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n@@ -15179,8 +15182,7 @@\n        && !flag_trapping_math)\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && !flag_trapping_math\n-      && (TARGET_ROUND || optimize_insn_for_speed_p ()))\n+      && !flag_trapping_math)\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2"}]}