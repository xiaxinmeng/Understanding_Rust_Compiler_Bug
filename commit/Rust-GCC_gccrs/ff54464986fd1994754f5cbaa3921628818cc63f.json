{"sha": "ff54464986fd1994754f5cbaa3921628818cc63f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY1NDQ2NDk4NmZkMTk5NDc1NGY1Y2JhYTM5MjE2Mjg4MThjYzYzZg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2013-02-08T13:23:34Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-02-08T13:23:34Z"}, "message": "re PR tree-optimization/56064 (Optimize VIEW_CONVERT_EXPR with FIXED_CST)\n\ngcc/\n\tPR tree-optimization/56064\n\t* fixed-value.c (fixed_from_double_int): Sign/zero extend payload\n\tbits according to mode.\n\t* fixed-value.h (fixed_from_double_int)\n\t(const_fixed_from_double_int): Adjust comments.\n\ngcc/testsuite/\n\tPR tree-optimization/56064\n\t* gcc.dg/fixed-point/view-convert-2.c: New test.\n\nFrom-SVN: r195885", "tree": {"sha": "f151da27f7789e368ab8961edc7f453c040b899a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f151da27f7789e368ab8961edc7f453c040b899a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff54464986fd1994754f5cbaa3921628818cc63f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff54464986fd1994754f5cbaa3921628818cc63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff54464986fd1994754f5cbaa3921628818cc63f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff54464986fd1994754f5cbaa3921628818cc63f/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45cde982611c5a86c215dd4079ca7f0375e141b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45cde982611c5a86c215dd4079ca7f0375e141b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45cde982611c5a86c215dd4079ca7f0375e141b"}], "stats": {"total": 166, "additions": 162, "deletions": 4}, "files": [{"sha": "55e90b4abdfaa8dd00e37a30183f60ea32a9c23d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff54464986fd1994754f5cbaa3921628818cc63f", "patch": "@@ -1,3 +1,11 @@\n+2013-02-08  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR tree-optimization/56064\n+\t* fixed-value.c (fixed_from_double_int): Sign/zero extend payload\n+\tbits according to mode.\n+\t* fixed-value.h (fixed_from_double_int)\n+\t(const_fixed_from_double_int): Adjust comments.\n+\n 2013-02-08  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/56231"}, {"sha": "18ce47e3657bee1ced147df20421c30bfee5d442", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=ff54464986fd1994754f5cbaa3921628818cc63f", "patch": "@@ -83,7 +83,7 @@ check_real_for_fixed_mode (REAL_VALUE_TYPE *real_value, enum machine_mode mode)\n \n \n /* Construct a CONST_FIXED from a bit payload and machine mode MODE.\n-   The bits in PAYLOAD are used verbatim.  */\n+   The bits in PAYLOAD are sign-extended/zero-extended according to MODE.  */\n \n FIXED_VALUE_TYPE\n fixed_from_double_int (double_int payload, enum machine_mode mode)\n@@ -92,7 +92,13 @@ fixed_from_double_int (double_int payload, enum machine_mode mode)\n \n   gcc_assert (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_DOUBLE_INT);\n \n-  value.data = payload;\n+  if (SIGNED_SCALAR_FIXED_POINT_MODE_P (mode))\n+    value.data = payload.sext (1 + GET_MODE_IBIT (mode) + GET_MODE_FBIT (mode));\n+  else if (UNSIGNED_SCALAR_FIXED_POINT_MODE_P (mode))\n+    value.data = payload.zext (GET_MODE_IBIT (mode) + GET_MODE_FBIT (mode));\n+  else\n+    gcc_unreachable();\n+\n   value.mode = mode;\n \n   return value;"}, {"sha": "f59466ad4f1f0d1f0936fb2ca805c353d669a2ac", "filename": "gcc/fixed-value.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2Ffixed-value.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2Ffixed-value.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.h?ref=ff54464986fd1994754f5cbaa3921628818cc63f", "patch": "@@ -50,12 +50,12 @@ extern FIXED_VALUE_TYPE fconst1[MAX_FCONST1];\n extern rtx const_fixed_from_fixed_value (FIXED_VALUE_TYPE, enum machine_mode);\n \n /* Construct a FIXED_VALUE from a bit payload and machine mode MODE.\n-   The bits in PAYLOAD are used verbatim.  */\n+   The bits in PAYLOAD are sign-extended/zero-extended according to MODE.  */\n extern FIXED_VALUE_TYPE fixed_from_double_int (double_int,\n \t\t\t\t\t\t     enum machine_mode);\n \n /* Return a CONST_FIXED from a bit payload and machine mode MODE.\n-   The bits in PAYLOAD are used verbatim.  */\n+   The bits in PAYLOAD are sign-extended/zero-extended according to MODE.  */\n static inline rtx\n const_fixed_from_double_int (double_int payload,\n                              enum machine_mode mode)"}, {"sha": "31f0bf2844f6bd21b96489af7de3cbcd2d9dd373", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff54464986fd1994754f5cbaa3921628818cc63f", "patch": "@@ -1,3 +1,8 @@\n+2013-02-08  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR tree-optimization/56064\n+\t* gcc.dg/fixed-point/view-convert-2.c: New test.\n+\n 2013-02-08  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/52448"}, {"sha": "fbce5185e16602f1d432302305e1e66fd8446607", "filename": "gcc/testsuite/gcc.dg/fixed-point/view-convert-2.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fview-convert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff54464986fd1994754f5cbaa3921628818cc63f/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fview-convert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fview-convert-2.c?ref=ff54464986fd1994754f5cbaa3921628818cc63f", "patch": "@@ -0,0 +1,139 @@\n+/* PR tree-optimization/56064 */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+void test_k (void)\n+{\n+  _Accum a;\n+  __INT32_TYPE__ i = -__INT32_MAX__;\n+  \n+  if (sizeof (a) != sizeof (i))\n+    return;\n+\n+  __builtin_memcpy (&a, &i, sizeof (a));\n+\n+  if (a >= 0k)\n+    abort();\n+}\n+\n+void test_0k (void)\n+{\n+  _Accum a;\n+  __INT32_TYPE__ i = 0;\n+  \n+  if (sizeof (a) != sizeof (i))\n+    return;\n+\n+  __builtin_memcpy (&a, &i, sizeof (a));\n+\n+  if (a != 0k)\n+    abort();\n+}\n+\n+\n+void test_hr (void)\n+{\n+  short _Fract a;\n+  __INT8_TYPE__ i = -__INT8_MAX__;\n+\n+  if (sizeof (a) != sizeof (i))\n+    return;\n+\n+  __builtin_memcpy (&a, &i, sizeof (a));\n+\n+  if (a >= 0hr)\n+    abort();\n+}\n+\n+void test_0hr (void)\n+{\n+  short _Fract a;\n+  __INT8_TYPE__ i = 0;\n+\n+  if (sizeof (a) != sizeof (i))\n+    return;\n+\n+  __builtin_memcpy (&a, &i, sizeof (a));\n+\n+  if (a != 0hr)\n+    abort();\n+}\n+\n+\n+void test_si (void)\n+{\n+  _Accum a = __ACCUM_MIN__;\n+  __INT32_TYPE__ i;\n+\n+  if (sizeof (a) != sizeof (i))\n+    return;\n+\n+  __builtin_memcpy (&i, &a, sizeof (i));\n+\n+  if (i >= 0)\n+    abort();\n+}\n+\n+void test_0si (void)\n+{\n+  _Accum a = 0;\n+  __INT32_TYPE__ i;\n+\n+  if (sizeof (a) != sizeof (i))\n+    return;\n+\n+  __builtin_memcpy (&i, &a, sizeof (i));\n+\n+  if (i != 0)\n+    abort();\n+}\n+\n+\n+void test_qi (void)\n+{\n+  short _Fract a = __SFRACT_MIN__;\n+  __INT8_TYPE__ i;\n+\n+  if (sizeof (a) != sizeof (i))\n+    return;\n+\n+  __builtin_memcpy (&i, &a, sizeof (i));\n+\n+  if (i >= 0)\n+    abort();\n+}\n+\n+void test_0qi (void)\n+{\n+  short _Fract a = 0hr;\n+  __INT8_TYPE__ i;\n+\n+  if (sizeof (a) != sizeof (i))\n+    return;\n+\n+  __builtin_memcpy (&i, &a, sizeof (i));\n+\n+  if (i != 0)\n+    abort();\n+}\n+\n+\n+int main (void)\n+{\n+  test_hr();\n+  test_k();\n+  test_qi();\n+  test_si();\n+\n+  test_0hr();\n+  test_0k();\n+  test_0qi();\n+  test_0si();\n+\n+  exit (0);\n+\n+  return 0;\n+}"}]}