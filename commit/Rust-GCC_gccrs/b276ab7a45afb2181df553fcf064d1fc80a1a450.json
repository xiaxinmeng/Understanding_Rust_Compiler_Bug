{"sha": "b276ab7a45afb2181df553fcf064d1fc80a1a450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI3NmFiN2E0NWFmYjIxODFkZjU1M2ZjZjA2NGQxZmM4MGExYTQ1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T11:02:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T11:02:33Z"}, "message": "[multiple changes]\n\n2017-09-06  Yannick Moy  <moy@adacore.com>\n\n\t* inline.adb: Add comments to Can_Be_Inlined_In_GNATprove_Mode.\n\n2017-09-06  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_aggr.adb (Component_Not_OK_For_Backend): The C backend\n\tcannot handle a type conversion of an array as an aggregate\n\tcomponent.\n\n2017-09-06  Bob Duff  <duff@adacore.com>\n\n\t* g-comlin.adb (Try_Help): Remove \".exe\" so we\n\tget the same results on windows and unix.\n\n2017-09-06  Justin Squirek  <squirek@adacore.com>\n\n\t* exp_imgv.adb (Expand_Image_Attribute),\n\t(Expand_Wide_Image_Attribute), (Expand_Wide_Wide_Image_Attribute):\n\tAdded case to handle new-style 'Image expansion\n\t(Rewrite_Object_Image): Moved from exp_attr.adb\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Modified Image\n\tattribute cases so that the relevant subprograms in exp_imgv.adb\n\thandle all expansion.\n\t(Rewrite_Object_Reference_Image): Moved to exp_imgv.adb\n\t* sem_attr.adb (Analyze_Attribute): Modified Image attribute\n\tcases to call common function Analyze_Image_Attribute.\n\t(Analyze_Image_Attribute): Created as a common path for all\n\timage attributes (Check_Object_Reference_Image): Removed\n\t* sem_util.ads, sem_util.adb (Is_Image_Applied_To_Object):\n\tRemoved and refactored into Is_Object_Image (Is_Object_Image):\n\tCreated as a replacement for Is_Image_Applied_To_Object\n\nFrom-SVN: r251779", "tree": {"sha": "ccef384004066e3d6a99615da9190ace21b4287d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccef384004066e3d6a99615da9190ace21b4287d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b276ab7a45afb2181df553fcf064d1fc80a1a450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b276ab7a45afb2181df553fcf064d1fc80a1a450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b276ab7a45afb2181df553fcf064d1fc80a1a450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b276ab7a45afb2181df553fcf064d1fc80a1a450/comments", "author": null, "committer": null, "parents": [{"sha": "a9e6f868cb1467dc53328ed3585156bc8bc0620f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e6f868cb1467dc53328ed3585156bc8bc0620f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e6f868cb1467dc53328ed3585156bc8bc0620f"}], "stats": {"total": 434, "additions": 243, "deletions": 191}, "files": [{"sha": "2d8077d3e24960d55c8ca88f8aa5b7ba36326ac8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -1,3 +1,36 @@\n+2017-09-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb: Add comments to Can_Be_Inlined_In_GNATprove_Mode.\n+\n+2017-09-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_aggr.adb (Component_Not_OK_For_Backend): The C backend\n+\tcannot handle a type conversion of an array as an aggregate\n+\tcomponent.\n+\n+2017-09-06  Bob Duff  <duff@adacore.com>\n+\n+\t* g-comlin.adb (Try_Help): Remove \".exe\" so we\n+\tget the same results on windows and unix.\n+\n+2017-09-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute),\n+\t(Expand_Wide_Image_Attribute), (Expand_Wide_Wide_Image_Attribute):\n+\tAdded case to handle new-style 'Image expansion\n+\t(Rewrite_Object_Image): Moved from exp_attr.adb\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Modified Image\n+\tattribute cases so that the relevant subprograms in exp_imgv.adb\n+\thandle all expansion.\n+\t(Rewrite_Object_Reference_Image): Moved to exp_imgv.adb\n+\t* sem_attr.adb (Analyze_Attribute): Modified Image attribute\n+\tcases to call common function Analyze_Image_Attribute.\n+\t(Analyze_Image_Attribute): Created as a common path for all\n+\timage attributes (Check_Object_Reference_Image): Removed\n+\t* sem_util.ads, sem_util.adb (Is_Image_Applied_To_Object):\n+\tRemoved and refactored into Is_Object_Image (Is_Object_Image):\n+\tCreated as a replacement for Is_Image_Applied_To_Object\n+\n 2017-09-06  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Analyze_Depends_In_Decl_Part): Add continuation"}, {"sha": "549be9673ef835a051e25486654429ed004de1e7", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -7151,6 +7151,13 @@ package body Exp_Aggr is\n             then\n                Static_Components := False;\n                return True;\n+\n+            elsif Modify_Tree_For_C\n+              and then Nkind (Expr_Q) = N_Type_Conversion\n+              and then Is_Array_Type (Etype (Expr_Q))\n+            then\n+               Static_Components := False;\n+               return True;\n             end if;\n \n             if Is_Elementary_Type (Etype (Expr_Q)) then"}, {"sha": "d1908bd04f95beaea82686d31c5eeee28ea850ad", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -1594,34 +1594,10 @@ package body Exp_Attr is\n       Exprs : constant List_Id      := Expressions (N);\n       Id    : constant Attribute_Id := Get_Attribute_Id (Attribute_Name (N));\n \n-      procedure Rewrite_Object_Reference_Image\n-        (Name    : Name_Id;\n-         Str_Typ : Entity_Id);\n-      --  AI12-00124: Rewrite attribute 'Image when it is applied to an object\n-      --  reference as an attribute applied to a type.\n-\n       procedure Rewrite_Stream_Proc_Call (Pname : Entity_Id);\n       --  Rewrites a stream attribute for Read, Write or Output with the\n       --  procedure call. Pname is the entity for the procedure to call.\n \n-      ------------------------------------\n-      -- Rewrite_Object_Reference_Image --\n-      ------------------------------------\n-\n-      procedure Rewrite_Object_Reference_Image\n-        (Name    : Name_Id;\n-         Str_Typ : Entity_Id)\n-      is\n-      begin\n-         Rewrite (N,\n-           Make_Attribute_Reference (Loc,\n-             Prefix         => New_Occurrence_Of (Ptyp, Loc),\n-             Attribute_Name => Name,\n-             Expressions    => New_List (Relocate_Node (Pref))));\n-\n-         Analyze_And_Resolve (N, Str_Typ);\n-      end Rewrite_Object_Reference_Image;\n-\n       ------------------------------\n       -- Rewrite_Stream_Proc_Call --\n       ------------------------------\n@@ -3637,11 +3613,6 @@ package body Exp_Attr is\n       --  Image attribute is handled in separate unit Exp_Imgv\n \n       when Attribute_Image =>\n-         if Is_Image_Applied_To_Object (Pref, Ptyp) then\n-            Rewrite_Object_Reference_Image (Name_Image, Standard_String);\n-            return;\n-         end if;\n-\n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n \n@@ -3658,7 +3629,7 @@ package body Exp_Attr is\n       --  X'Img is expanded to typ'Image (X), where typ is the type of X\n \n       when Attribute_Img =>\n-         Rewrite_Object_Reference_Image (Name_Image, Standard_String);\n+         Exp_Imgv.Expand_Image_Attribute (N);\n \n       -----------\n       -- Input --\n@@ -7004,12 +6975,6 @@ package body Exp_Attr is\n       --  Wide_Image attribute is handled in separate unit Exp_Imgv\n \n       when Attribute_Wide_Image =>\n-         if Is_Image_Applied_To_Object (Pref, Ptyp) then\n-            Rewrite_Object_Reference_Image\n-              (Name_Wide_Image, Standard_Wide_String);\n-            return;\n-         end if;\n-\n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n \n@@ -7026,12 +6991,6 @@ package body Exp_Attr is\n       --  Wide_Wide_Image attribute is handled in separate unit Exp_Imgv\n \n       when Attribute_Wide_Wide_Image =>\n-         if Is_Image_Applied_To_Object (Pref, Ptyp) then\n-            Rewrite_Object_Reference_Image\n-              (Name_Wide_Wide_Image, Standard_Wide_Wide_String);\n-            return;\n-         end if;\n-\n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n "}, {"sha": "f42f94dababf0e10d74430ebb7e337dbf3970634", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -36,6 +36,7 @@ with Opt;      use Opt;\n with Rtsfind;  use Rtsfind;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Res;  use Sem_Res;\n+with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n@@ -52,6 +53,17 @@ package body Exp_Imgv is\n    --  Ordinary_Fixed_Point_Type with a small that is a negative power of ten.\n    --  Shouldn't this be in einfo.adb or sem_aux.adb???\n \n+   procedure Rewrite_Object_Image\n+     (N         : Node_Id;\n+      Pref      : Entity_Id;\n+      Attr_Name : Name_Id;\n+      Str_Typ   : Entity_Id);\n+   --  AI12-00124: Rewrite attribute 'Image when it is applied to an object\n+   --  reference as an attribute applied to a type. N denotes the node to be\n+   --  rewritten, Pref denotes the prefix of the 'Image attribute, and Name\n+   --  and Str_Typ specify which specific string type and 'Image attribute to\n+   --  apply (e.g. Name_Wide_Image and Standard_Wide_String).\n+\n    ------------------------------------\n    -- Build_Enumeration_Image_Tables --\n    ------------------------------------\n@@ -254,10 +266,10 @@ package body Exp_Imgv is\n       Loc       : constant Source_Ptr := Sloc (N);\n       Exprs     : constant List_Id    := Expressions (N);\n       Pref      : constant Node_Id    := Prefix (N);\n-      Ptyp      : constant Entity_Id  := Entity (Pref);\n-      Rtyp      : constant Entity_Id  := Root_Type (Ptyp);\n       Expr      : constant Node_Id    := Relocate_Node (First (Exprs));\n       Imid      : RE_Id;\n+      Ptyp      : Entity_Id;\n+      Rtyp      : Entity_Id;\n       Tent      : Entity_Id;\n       Ttyp      : Entity_Id;\n       Proc_Ent  : Entity_Id;\n@@ -273,6 +285,14 @@ package body Exp_Imgv is\n       Pnn : constant Entity_Id := Make_Temporary (Loc, 'P');\n \n    begin\n+      if Is_Object_Image (Pref) then\n+         Rewrite_Object_Image (N, Pref, Name_Image, Standard_String);\n+         return;\n+      end if;\n+\n+      Ptyp := Entity (Pref);\n+      Rtyp := Root_Type (Ptyp);\n+\n       --  Build declarations of Snn and Pnn to be inserted\n \n       Ins_List := New_List (\n@@ -791,11 +811,19 @@ package body Exp_Imgv is\n \n    procedure Expand_Wide_Image_Attribute (N : Node_Id) is\n       Loc  : constant Source_Ptr := Sloc (N);\n-      Rtyp : constant Entity_Id  := Root_Type (Entity (Prefix (N)));\n-      Rnn  : constant Entity_Id := Make_Temporary (Loc, 'S');\n-      Lnn  : constant Entity_Id := Make_Temporary (Loc, 'P');\n+      Pref : constant Entity_Id  := Prefix (N);\n+      Rnn  : constant Entity_Id  := Make_Temporary (Loc, 'S');\n+      Lnn  : constant Entity_Id  := Make_Temporary (Loc, 'P');\n+      Rtyp : Entity_Id;\n \n    begin\n+      if Is_Object_Image (Pref) then\n+         Rewrite_Object_Image (N, Pref, Name_Wide_Image, Standard_Wide_String);\n+         return;\n+      end if;\n+\n+      Rtyp := Root_Type (Entity (Pref));\n+\n       Insert_Actions (N, New_List (\n \n          --  Rnn : Wide_String (1 .. base_typ'Width);\n@@ -882,12 +910,20 @@ package body Exp_Imgv is\n \n    procedure Expand_Wide_Wide_Image_Attribute (N : Node_Id) is\n       Loc  : constant Source_Ptr := Sloc (N);\n-      Rtyp : constant Entity_Id  := Root_Type (Entity (Prefix (N)));\n-\n-      Rnn : constant Entity_Id := Make_Temporary (Loc, 'S');\n-      Lnn : constant Entity_Id := Make_Temporary (Loc, 'P');\n+      Pref : constant Entity_Id  := Prefix (N);\n+      Rnn  : constant Entity_Id  := Make_Temporary (Loc, 'S');\n+      Lnn  : constant Entity_Id  := Make_Temporary (Loc, 'P');\n+      Rtyp : Entity_Id;\n \n    begin\n+      if Is_Object_Image (Pref) then\n+         Rewrite_Object_Image\n+           (N, Pref, Name_Wide_Wide_Image, Standard_Wide_Wide_String);\n+         return;\n+      end if;\n+\n+      Rtyp := Root_Type (Entity (Pref));\n+\n       Insert_Actions (N, New_List (\n \n          --  Rnn : Wide_Wide_String (1 .. rt'Wide_Wide_Width);\n@@ -1373,4 +1409,23 @@ package body Exp_Imgv is\n              and then Ureal_10**Aft_Value (E) * Small_Value (E) = Ureal_1);\n    end Has_Decimal_Small;\n \n+   --------------------------\n+   -- Rewrite_Object_Image --\n+   --------------------------\n+\n+   procedure Rewrite_Object_Image\n+     (N         : Node_Id;\n+      Pref      : Entity_Id;\n+      Attr_Name : Name_Id;\n+      Str_Typ   : Entity_Id)\n+   is\n+   begin\n+      Rewrite (N,\n+        Make_Attribute_Reference (Sloc (N),\n+          Prefix         => New_Occurrence_Of (Etype (Pref), Sloc (N)),\n+          Attribute_Name => Attr_Name,\n+          Expressions    => New_List (Relocate_Node (Pref))));\n+\n+      Analyze_And_Resolve (N, Str_Typ);\n+   end Rewrite_Object_Image;\n end Exp_Imgv;"}, {"sha": "30cae4cfd25adeaa16a9b9391278f9203d95c9ad", "filename": "gcc/ada/exp_imgv.ads", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fexp_imgv.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fexp_imgv.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.ads?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -70,20 +70,20 @@ package Exp_Imgv is\n    --    declarations are not constructed, and the fields remain Empty.\n \n    procedure Expand_Image_Attribute (N : Node_Id);\n-   --  This procedure is called from Exp_Attr to expand an occurrence\n-   --  of the attribute Image.\n+   --  This procedure is called from Exp_Attr to expand an occurrence of the\n+   --  attribute Image.\n \n    procedure Expand_Wide_Image_Attribute (N : Node_Id);\n-   --  This procedure is called from Exp_Attr to expand an occurrence\n-   --  of the attribute Wide_Image.\n+   --  This procedure is called from Exp_Attr to expand an occurrence of the\n+   --  attribute Wide_Image.\n \n    procedure Expand_Wide_Wide_Image_Attribute (N : Node_Id);\n-   --  This procedure is called from Exp_Attr to expand an occurrence\n-   --  of the attribute Wide_Wide_Image.\n+   --  This procedure is called from Exp_Attr to expand an occurrence of the\n+   --  attribute Wide_Wide_Image.\n \n    procedure Expand_Value_Attribute (N : Node_Id);\n-   --  This procedure is called from Exp_Attr to expand an occurrence\n-   --  of the attribute Value.\n+   --  This procedure is called from Exp_Attr to expand an occurrence of the\n+   --  attribute Value.\n \n    type Atype is (Normal, Wide, Wide_Wide);\n    --  Type of attribute in call to Expand_Width_Attribute"}, {"sha": "2fd90df480207f214436581b53f711b25427c0f4", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -3606,7 +3606,7 @@ package body GNAT.Command_Line is\n    begin\n       Put_Line\n         (Standard_Error,\n-         \"try \"\"\" & Base_Name (Ada.Command_Line.Command_Name)\n+         \"try \"\"\" & Base_Name (Ada.Command_Line.Command_Name, Suffix => \".exe\")\n          & \" --help\"\" for more information.\");\n    end Try_Help;\n "}, {"sha": "0bbe9cfd9de3ae260ac3d94c9b56ee777864cd2a", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -1178,8 +1178,9 @@ package body Inline is\n       --  types.\n \n       function Has_Some_Contract (Id : Entity_Id) return Boolean;\n-      --  Returns True if subprogram Id has any contract (Pre, Post, Global,\n-      --  Depends, etc.)\n+      --  Returns True if subprogram Id has any contract (Pre, Post,\n+      --  Global, Depends, etc.) The presence of Extensions_Visible\n+      --  or Volatile_Function is also considered as a contract here.\n \n       function Is_Unit_Subprogram (Id : Entity_Id) return Boolean;\n       --  Returns True if subprogram Id defines a compilation unit\n@@ -1272,6 +1273,11 @@ package body Inline is\n          if Is_Subprogram_Or_Generic_Subprogram (Id) then\n             Items := Contract (Id);\n \n+            --  Note that Classifications is not Empty when Extensions_Visible\n+            --  or Volatile_Function is present, which causes such subprograms\n+            --  to be considered to have a contract here. This is fine as we\n+            --  want to avoid inlining these too.\n+\n             return Present (Items)\n               and then (Present (Pre_Post_Conditions (Items)) or else\n                         Present (Contract_Test_Cases (Items)) or else\n@@ -1365,7 +1371,8 @@ package body Inline is\n          return False;\n \n       --  Do not inline subprograms that have a contract on the spec or the\n-      --  body. Use the contract(s) instead in GNATprove.\n+      --  body. Use the contract(s) instead in GNATprove. This also prevents\n+      --  inlining of subprograms with Extensions_Visible or Volatile_Function.\n \n       elsif (Present (Spec_Id) and then Has_Some_Contract (Spec_Id))\n                or else"}, {"sha": "748df60736c181575319fb324a8ecae4ecb742f0", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 86, "deletions": 98, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -261,6 +261,12 @@ package body Sem_Attr is\n       --  when the above criteria are met. Spec_Id denotes the entity of the\n       --  subprogram [body] or Empty if the attribute is illegal.\n \n+      procedure Analyze_Image_Attribute (Str_Typ : Entity_Id);\n+      --  Common processing for attributes 'Img, 'Image, 'Wide_Image, and\n+      --  'Wide_Wide_Image. The routine checks that the prefix is valid and\n+      --  sets the entity type to the one specified by Str_Typ (e.g.\n+      --  Standard_String for 'Image and Standard_Wide_String for 'Wide_Image).\n+\n       procedure Bad_Attribute_For_Predicate;\n       --  Output error message for use of a predicate (First, Last, Range) not\n       --  allowed with a type that has predicates. If the type is a generic\n@@ -363,10 +369,6 @@ package body Sem_Attr is\n       procedure Check_Object_Reference (P : Node_Id);\n       --  Check that P is an object reference\n \n-      procedure Check_Object_Reference_Image (Str_Typ : Entity_Id);\n-      --  Verify that the prefix of attribute 'Image is an object reference and\n-      --  set the type of the prefix to Str_Typ.\n-\n       procedure Check_PolyORB_Attribute;\n       --  Validity checking for PolyORB/DSA attribute\n \n@@ -1427,6 +1429,82 @@ package body Sem_Attr is\n          end if;\n       end Analyze_Attribute_Old_Result;\n \n+      -----------------------------\n+      -- Analyze_Image_Attribute --\n+      -----------------------------\n+\n+      procedure Analyze_Image_Attribute (Str_Typ : Entity_Id) is\n+      begin\n+         Check_SPARK_05_Restriction_On_Attribute;\n+\n+         --  AI12-00124: The ARG has adopted the GNAT semantics of 'Img for\n+         --  scalar types, so that the prefix can be an object, a named value,\n+         --  or a type, and there is no need for an argument in this case.\n+\n+         if Attr_Id = Attribute_Img\n+           or else (Ada_Version > Ada_2005 and then Is_Object_Image (P))\n+         then\n+            Check_E0;\n+            Set_Etype (N, Str_Typ);\n+\n+            if Attr_Id = Attribute_Img and then not Is_Object_Image (P) then\n+               Error_Attr_P\n+                 (\"prefix of % attribute must be a scalar object name\");\n+            end if;\n+         else\n+            Check_E1;\n+            Set_Etype (N, Str_Typ);\n+\n+            --  Check that the prefix type is scalar - much in the same way as\n+            --  Check_Scalar_Type but with custom error messages to denote the\n+            --  variants of 'Image attributes.\n+\n+            if Is_Entity_Name (P)\n+              and then Is_Type (Entity (P))\n+              and then Ekind (Entity (P)) = E_Incomplete_Type\n+              and then Present (Full_View (Entity (P)))\n+            then\n+               P_Type := Full_View (Entity (P));\n+               Set_Entity (P, P_Type);\n+            end if;\n+\n+            if not Is_Entity_Name (P)\n+              or else not Is_Type (Entity (P))\n+              or else not Is_Scalar_Type (P_Type)\n+            then\n+               if Ada_Version > Ada_2005 then\n+                  Error_Attr_P\n+                    (\"prefix of % attribute must be a scalar type or a scalar \"\n+                      & \"object name\");\n+               else\n+                  Error_Attr_P (\"prefix of % attribute must be a scalar type\");\n+               end if;\n+\n+            elsif Is_Protected_Self_Reference (P) then\n+               Error_Attr_P\n+                 (\"prefix of % attribute denotes current instance \"\n+                  & \"(RM 9.4(21/2))\");\n+            end if;\n+\n+            Resolve (E1, P_Base_Type);\n+            Validate_Non_Static_Attribute_Function_Call;\n+         end if;\n+\n+         Check_Enum_Image;\n+\n+         --  Check restriction No_Fixed_IO. Note the check of Comes_From_Source\n+         --  to avoid giving a duplicate message for when Image attributes\n+         --  applied to object references get expanded into type-based Image\n+         --  attributes.\n+\n+         if Restriction_Check_Required (No_Fixed_IO)\n+           and then Comes_From_Source (N)\n+           and then Is_Fixed_Point_Type (P_Type)\n+         then\n+            Check_Restriction (No_Fixed_IO, P);\n+         end if;\n+      end Analyze_Image_Attribute;\n+\n       ---------------------------------\n       -- Bad_Attribute_For_Predicate --\n       ---------------------------------\n@@ -2164,33 +2242,6 @@ package body Sem_Attr is\n          end if;\n       end Check_Object_Reference;\n \n-      ----------------------------------\n-      -- Check_Object_Reference_Image --\n-      ----------------------------------\n-\n-      procedure Check_Object_Reference_Image (Str_Typ : Entity_Id) is\n-      begin\n-         Check_E0;\n-         Set_Etype (N, Str_Typ);\n-\n-         if not Is_Scalar_Type (P_Type)\n-           or else (Is_Entity_Name (P) and then Is_Type (Entity (P)))\n-         then\n-            Error_Attr_P\n-              (\"prefix of % attribute must be scalar object name\");\n-         end if;\n-\n-         Check_Enum_Image;\n-\n-         --  Check restriction No_Fixed_IO\n-\n-         if Restriction_Check_Required (No_Fixed_IO)\n-           and then Is_Fixed_Point_Type (P_Type)\n-         then\n-            Check_Restriction (No_Fixed_IO, P);\n-         end if;\n-      end Check_Object_Reference_Image;\n-\n       ----------------------------\n       -- Check_PolyORB_Attribute --\n       ----------------------------\n@@ -4073,16 +4124,6 @@ package body Sem_Attr is\n       -----------\n \n       when Attribute_Image =>\n-         Check_SPARK_05_Restriction_On_Attribute;\n-\n-         if Is_Image_Applied_To_Object (P, P_Type) then\n-            Check_Object_Reference_Image (Standard_String);\n-            return;\n-         end if;\n-\n-         Check_Scalar_Type;\n-         Set_Etype (N, Standard_String);\n-\n          if Is_Real_Type (P_Type) then\n             if Ada_Version = Ada_83 and then Comes_From_Source (N) then\n                Error_Msg_Name_1 := Aname;\n@@ -4091,31 +4132,14 @@ package body Sem_Attr is\n             end if;\n          end if;\n \n-         if Is_Enumeration_Type (P_Type) then\n-            Check_Restriction (No_Enumeration_Maps, N);\n-         end if;\n-\n-         Check_E1;\n-         Resolve (E1, P_Base_Type);\n-         Check_Enum_Image;\n-         Validate_Non_Static_Attribute_Function_Call;\n-\n-         --  Check restriction No_Fixed_IO. Note the check of Comes_From_Source\n-         --  to avoid giving a duplicate message for Img expanded into Image.\n-\n-         if Restriction_Check_Required (No_Fixed_IO)\n-           and then Comes_From_Source (N)\n-           and then Is_Fixed_Point_Type (P_Type)\n-         then\n-            Check_Restriction (No_Fixed_IO, P);\n-         end if;\n+         Analyze_Image_Attribute (Standard_String);\n \n       ---------\n       -- Img --\n       ---------\n \n       when Attribute_Img =>\n-         Check_Object_Reference_Image (Standard_String);\n+         Analyze_Image_Attribute (Standard_String);\n \n       -----------\n       -- Input --\n@@ -6995,50 +7019,14 @@ package body Sem_Attr is\n       ----------------\n \n       when Attribute_Wide_Image =>\n-         Check_SPARK_05_Restriction_On_Attribute;\n-\n-         if Is_Image_Applied_To_Object (P, P_Type) then\n-            Check_Object_Reference_Image (Standard_Wide_String);\n-            return;\n-         end if;\n-\n-         Check_Scalar_Type;\n-         Set_Etype (N, Standard_Wide_String);\n-         Check_E1;\n-         Resolve (E1, P_Base_Type);\n-         Validate_Non_Static_Attribute_Function_Call;\n-\n-         --  Check restriction No_Fixed_IO\n-\n-         if Restriction_Check_Required (No_Fixed_IO)\n-           and then Is_Fixed_Point_Type (P_Type)\n-         then\n-            Check_Restriction (No_Fixed_IO, P);\n-         end if;\n+         Analyze_Image_Attribute (Standard_Wide_String);\n \n       ---------------------\n       -- Wide_Wide_Image --\n       ---------------------\n \n       when Attribute_Wide_Wide_Image =>\n-         if Is_Image_Applied_To_Object (P, P_Type) then\n-            Check_Object_Reference_Image (Standard_Wide_Wide_String);\n-            return;\n-         end if;\n-\n-         Check_Scalar_Type;\n-         Set_Etype (N, Standard_Wide_Wide_String);\n-         Check_E1;\n-         Resolve (E1, P_Base_Type);\n-         Validate_Non_Static_Attribute_Function_Call;\n-\n-         --  Check restriction No_Fixed_IO\n-\n-         if Restriction_Check_Required (No_Fixed_IO)\n-           and then Is_Fixed_Point_Type (P_Type)\n-         then\n-            Check_Restriction (No_Fixed_IO, P);\n-         end if;\n+         Analyze_Image_Attribute (Standard_Wide_Wide_String);\n \n       ----------------\n       -- Wide_Value --"}, {"sha": "ffbe86afbc2c80e253cf160993ddb8968de0b9a5", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -13773,21 +13773,6 @@ package body Sem_Util is\n                              N_Generic_Subprogram_Declaration);\n    end Is_Generic_Declaration_Or_Body;\n \n-   --------------------------------\n-   -- Is_Image_Applied_To_Object --\n-   --------------------------------\n-\n-   function Is_Image_Applied_To_Object\n-     (Prefix : Node_Id;\n-      P_Typ  : Entity_Id) return Boolean\n-   is\n-   begin\n-      return\n-        Ada_Version > Ada_2005\n-          and then Is_Object_Reference (Prefix)\n-          and then Is_Scalar_Type (P_Typ);\n-   end Is_Image_Applied_To_Object;\n-\n    ----------------------------\n    -- Is_Inherited_Operation --\n    ----------------------------\n@@ -14139,6 +14124,27 @@ package body Sem_Util is\n             or else Null_Present (Component_List (Type_Definition (Decl))));\n    end Is_Null_Record_Type;\n \n+   ---------------------\n+   -- Is_Object_Image --\n+   ---------------------\n+\n+   function Is_Object_Image (Prefix : Node_Id) return Boolean is\n+   begin\n+      --  When the type of the prefix is not scalar then the prefix is not\n+      --  valid in any senario.\n+\n+      if not Is_Scalar_Type (Etype (Prefix)) then\n+         return False;\n+      end if;\n+\n+      --  Here we test for the case that the prefix is not a type and assume\n+      --  if it is not then it must be a named value or an object reference.\n+      --  This is because the parser always checks that prefix's of attributes\n+      --  are named.\n+\n+      return not (Is_Entity_Name (Prefix) and then Is_Type (Entity (Prefix)));\n+   end Is_Object_Image;\n+\n    -------------------------\n    -- Is_Object_Reference --\n    -------------------------\n@@ -14222,9 +14228,9 @@ package body Sem_Util is\n                return not Nkind_In (Original_Node (N), N_Case_Expression,\n                                                        N_If_Expression);\n \n-            --  A view conversion of a tagged object is an object reference\n-\n             when N_Type_Conversion =>\n+               --  A view conversion of a tagged object is an object reference\n+\n                return Is_Tagged_Type (Etype (Subtype_Mark (N)))\n                  and then Is_Tagged_Type (Etype (Expression (N)))\n                  and then Is_Object_Reference (Expression (N));"}, {"sha": "4331b2405ecdad0acec5340c7d681d95e03e6d9c", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b276ab7a45afb2181df553fcf064d1fc80a1a450/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=b276ab7a45afb2181df553fcf064d1fc80a1a450", "patch": "@@ -1598,18 +1598,6 @@ package Sem_Util is\n    --  Determine whether arbitrary declaration Decl denotes a generic package,\n    --  a generic subprogram or a generic body.\n \n-   function Is_Image_Applied_To_Object\n-     (Prefix : Node_Id;\n-      P_Typ  : Entity_Id) return Boolean;\n-   --  Returns true if an 'Image, 'Wide_Image, or 'Wide_Wide_Image attribute\n-   --  can be applied to a given object-reference prefix (see AI12-00124).\n-\n-   --  AI12-00124: The ARG has adopted the GNAT semantics of 'Img for scalar\n-   --  types, so that the prefix can be an object and not a type, and there is\n-   --  no need for an argument. Given the vote of confidence from the ARG,\n-   --  simplest is to transform this new usage of 'Image into a reference to\n-   --  'Img.\n-\n    function Is_Inherited_Operation (E : Entity_Id) return Boolean;\n    --  E is a subprogram. Return True is E is an implicit operation inherited\n    --  by a derived type declaration.\n@@ -1683,6 +1671,15 @@ package Sem_Util is\n    --  Determine whether T is declared with a null record definition or a\n    --  null component list.\n \n+   function Is_Object_Image (Prefix : Node_Id) return Boolean;\n+   --  Returns true if an 'Image, 'Wide_Image, or 'Wide_Wide_Image attribute\n+   --  is applied to a given object or named value prefix (see below).\n+\n+   --  AI12-00124: The ARG has adopted the GNAT semantics of 'Img for scalar\n+   --  types, so that the prefix of any 'Image attribute can be an object, a\n+   --  named value, or a type, and there is no need for an argument in the\n+   --  case it is an object reference.\n+\n    function Is_Object_Reference (N : Node_Id) return Boolean;\n    --  Determines if the tree referenced by N represents an object. Both\n    --  variable and constant objects return True (compare Is_Variable)."}]}