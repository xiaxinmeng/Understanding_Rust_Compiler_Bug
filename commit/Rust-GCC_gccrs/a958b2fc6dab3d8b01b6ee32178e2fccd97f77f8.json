{"sha": "a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1OGIyZmM2ZGFiM2Q4YjAxYjZlZTMyMTc4ZTJmY2NkOTdmNzdmOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:26Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:26Z"}, "message": "aarch64: Add support for unpacked SVE ASRD\n\nThis patch adds support for both conditional and unconditional unpacked\nASRD.  This meant adding a new define_insn for the unconditional form,\ninstead of reusing the conditional instructions.  It also meant\nextending the current conditional patterns to support merging with\nany independent value, not just zero.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (sdiv_pow2<mode>3): Extend from\n\tSVE_FULL_I to SVE_I.  Generate an UNSPEC_PRED_X.\n\t(*sdiv_pow2<mode>3): New pattern.\n\t(@cond_<sve_int_op><mode>): Extend from SVE_FULL_I to SVE_I.\n\tWrap the ASRD in an UNSPEC_PRED_X.\n\t(*cond_<sve_int_op><mode>_2): Likewise.  Replace the UNSPEC_PRED_X\n\tpredicate with a constant PTRUE, if it isn't already.\n\t(*cond_<sve_int_op><mode>_z): Replace with...\n\t(*cond_<sve_int_op><mode>_any): ...this new pattern.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/asrdiv_4.c: New test.\n\t* gcc.target/aarch64/sve/cond_asrd_1.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_asrd_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_asrd_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_asrd_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_asrd_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_asrd_3_run.c: Likewise.", "tree": {"sha": "c4df114cbe0aca1cafd28f6115cb396bdf2b515b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4df114cbe0aca1cafd28f6115cb396bdf2b515b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37426e0f060447cf059f3846275a157084dfdfe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37426e0f060447cf059f3846275a157084dfdfe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37426e0f060447cf059f3846275a157084dfdfe5"}], "stats": {"total": 328, "additions": 290, "deletions": 38}, "files": [{"sha": "a6f8450f9518c3e24bb2116369ce5239dd7e0c0e", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 81, "deletions": 38, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "patch": "@@ -4724,68 +4724,111 @@\n ;; - URSHR (SVE2)\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated <SVE_INT_OP>.\n+;; Unpredicated ASRD.\n (define_expand \"sdiv_pow2<mode>3\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_dup 3)\n-\t   (unspec:SVE_FULL_I\n-\t     [(match_operand:SVE_FULL_I 1 \"register_operand\")\n+\t   (unspec:SVE_I\n+\t     [(match_operand:SVE_I 1 \"register_operand\")\n \t      (match_operand 2 \"aarch64_simd_rshift_imm\")]\n-\t     UNSPEC_ASRD)\n-\t   (match_dup 1)]\n-\t UNSPEC_SEL))]\n+\t     UNSPEC_ASRD)]\n+\t UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n     operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n-;; Predicated right shift with merging.\n+;; Predicated ASRD.\n+(define_insn \"*sdiv_pow2<mode>3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_I\n+\t     [(match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t      (match_operand:SVE_I 3 \"aarch64_simd_rshift_imm\")]\n+\t     UNSPEC_ASRD)]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE\"\n+  \"@\n+   asrd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0, %2\\;asrd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n+  [(set_attr \"movprfx\" \"*,yes\")])\n+\n+;; Predicated shift with merging.\n (define_expand \"@cond_<sve_int_op><mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n-\t   (unspec:SVE_FULL_I\n-\t     [(match_operand:SVE_FULL_I 2 \"register_operand\")\n-\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\")]\n-\t     SVE_INT_SHIFT_IMM)\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\")]\n+\t   (unspec:SVE_I\n+\t     [(match_dup 5)\n+\t      (unspec:SVE_I\n+\t\t[(match_operand:SVE_I 2 \"register_operand\")\n+\t\t (match_operand:SVE_I 3 \"aarch64_simd_<lr>shift_imm\")]\n+\t\tSVE_INT_SHIFT_IMM)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n+  {\n+    operands[5] = aarch64_ptrue_reg (<VPRED>mode);\n+  }\n )\n \n-;; Predicated right shift, merging with the first input.\n-(define_insn \"*cond_<sve_int_op><mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+;; Predicated shift, merging with the first input.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_2\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (unspec:SVE_FULL_I\n-\t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\")]\n-\t     SVE_INT_SHIFT_IMM)\n+\t   (unspec:SVE_I\n+\t     [(match_operand 4)\n+\t      (unspec:SVE_I\n+\t\t[(match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t\t (match_operand:SVE_I 3 \"aarch64_simd_<lr>shift_imm\")]\n+\t\tSVE_INT_SHIFT_IMM)]\n+\t     UNSPEC_PRED_X)\n \t   (match_dup 2)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n   \"@\n    <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n    movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n   [(set_attr \"movprfx\" \"*,yes\")])\n \n-;; Predicated right shift, merging with zero.\n-(define_insn \"*cond_<sve_int_op><mode>_z\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_FULL_I\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (unspec:SVE_FULL_I\n-\t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"w\")\n-\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\")]\n-\t     SVE_INT_SHIFT_IMM)\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_imm_zero\")]\n-\t  UNSPEC_SEL))]\n-  \"TARGET_SVE\"\n-  \"movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n-  [(set_attr \"movprfx\" \"yes\")])\n+;; Predicated shift, merging with an independent value.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_any\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, &w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:SVE_I\n+\t     [(match_operand 5)\n+\t      (unspec:SVE_I\n+\t\t[(match_operand:SVE_I 2 \"register_operand\" \"w, w, w\")\n+\t\t (match_operand:SVE_I 3 \"aarch64_simd_<lr>shift_imm\")]\n+\t\tSVE_INT_SHIFT_IMM)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n+\t UNSPEC_SEL))]\n+  \"TARGET_SVE && !rtx_equal_p (operands[2], operands[4])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   #\"\n+  \"&& reload_completed\n+   && register_operand (operands[4], <MODE>mode)\n+   && !rtx_equal_p (operands[0], operands[4])\"\n+  {\n+    emit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[2],\n+\t\t\t\t\t     operands[4], operands[1]));\n+    operands[4] = operands[2] = operands[0];\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n \n ;; -------------------------------------------------------------------------\n ;; ---- [FP<-INT] General binary arithmetic corresponding to unspecs"}, {"sha": "6684fe1c12441399faac941bdca79d90de1eb611", "filename": "gcc/testsuite/gcc.target/aarch64/sve/asrdiv_4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_4.c?ref=a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##TYPE3 (TYPE2 *restrict r,\t\t\\\n+\t\t\t\t    TYPE1 *restrict pred,\t\\\n+\t\t\t\t    TYPE2 *restrict a)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      if (pred[i])\t\t\t\t\t\t\\\n+\tr[i] = a[i] / 16;\t\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t, 7) \\\n+  T (int32_t, int8_t, 3) \\\n+  T (int32_t, int16_t, 3) \\\n+  T (int64_t, int8_t, 5) \\\n+  T (int64_t, int16_t, 5) \\\n+  T (int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #4\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #4\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #4\\n} 1 } } */"}, {"sha": "478b52ac27cfaf66181acc13b56b7899103f8a1f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_asrd_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1.c?ref=a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2 (TYPE2 *__restrict r,\t\t\t\\\n+\t\t\t  TYPE1 *__restrict a,\t\t\t\\\n+\t\t\t  TYPE2 *__restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] == 0 ? b[i] / 16 : b[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t, 7) \\\n+  T (int32_t, int8_t, 3) \\\n+  T (int32_t, int16_t, 3) \\\n+  T (int64_t, int8_t, 5) \\\n+  T (int64_t, int16_t, 5) \\\n+  T (int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #4\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #4\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #4\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "25c88ea6b11a230054f624b29727fedbe74d5b20", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_asrd_1_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_1_run.c?ref=a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_asrd_1.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i % 3 < 2 ? 0 : i * 13;\t\t\t\t\\\n+\tb[i] = (i & 1 ? i : -i) * 17;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] == 0 ? b[i] / 16 : b[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "e4040ee3520c8dd50282e4aeaf4930c7f66c929c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_asrd_2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_2.c?ref=a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2 (TYPE2 *__restrict r,\t\t\t\\\n+\t\t\t  TYPE1 *__restrict a,\t\t\t\\\n+\t\t\t  TYPE2 *__restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] == 0 ? b[i] / 16 : a[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t, 7) \\\n+  T (int32_t, int8_t, 3) \\\n+  T (int32_t, int16_t, 3) \\\n+  T (int64_t, int8_t, 5) \\\n+  T (int64_t, int16_t, 5) \\\n+  T (int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #4\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #4\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #4\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "ba1b722a51b70b73ed3ed5c8b71537e6576f7acb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_asrd_2_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_2_run.c?ref=a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_asrd_2.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i % 3 < 2 ? 0 : i * 13;\t\t\t\t\\\n+\tb[i] = (i & 1 ? i : -i) * 17;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] == 0 ? b[i] / 16 : a[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "0d620a30d5d74895939319974dc4bbd64db3bf57", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_asrd_3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_3.c?ref=a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2 (TYPE2 *__restrict r,\t\t\t\\\n+\t\t\t  TYPE1 *__restrict a,\t\t\t\\\n+\t\t\t  TYPE2 *__restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] == 0 ? b[i] / 16 : 0;\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t, 7) \\\n+  T (int32_t, int8_t, 3) \\\n+  T (int32_t, int16_t, 3) \\\n+  T (int64_t, int8_t, 5) \\\n+  T (int64_t, int16_t, 5) \\\n+  T (int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #4\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #4\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasrd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #4\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 3 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 1 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} { xfail *-*-* } } } */"}, {"sha": "42ab6fe9ecdc7506a8c088fcc8743122b27a2c47", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_asrd_3_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_asrd_3_run.c?ref=a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_asrd_3.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i % 3 < 2 ? 0 : i * 13;\t\t\t\t\\\n+\tb[i] = (i & 1 ? i : -i) * 17;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] == 0 ? b[i] / 16 : 0))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}