{"sha": "b6e446cb58183557a5a5d87dc866aae9613544f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlNDQ2Y2I1ODE4MzU1N2E1YTVkODdkYzg2NmFhZTk2MTM1NDRmOA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-02-17T13:40:03Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-02-20T00:49:35Z"}, "message": "IBM Z: Fix long double <-> DFP conversions\n\nWhen switching the s390 backend to store long doubles in vector\nregisters, the patterns for long double <-> DFP conversions were\nforgotten.  This did not cause observable problems so far, because\nlibdfp calls are emitted instead of pfpo.  However, when building\nlibdfp itself, this leads to infinite recursion.\n\ngcc/ChangeLog:\n\n\tPR target/99134\n\t* config/s390/vector.md (trunctf<DFP_ALL:mode>2_vr): New\n\tpattern.\n\t(trunctf<DFP_ALL:mode>2): Likewise.\n\t(trunctdtf2_vr): Likewise.\n\t(trunctdtf2): Likewise.\n\t(extend<DFP_ALL:mode>tf2_vr): Likewise.\n\t(extend<DFP_ALL:mode>tf2): Likewise.\n\t(extendtftd2_vr): Likewise.\n\t(extendtftd2): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99134\n\t* gcc.target/s390/vector/long-double-from-decimal128.c: New test.\n\t* gcc.target/s390/vector/long-double-from-decimal32.c: New test.\n\t* gcc.target/s390/vector/long-double-from-decimal64.c: New test.\n\t* gcc.target/s390/vector/long-double-to-decimal128.c: New test.\n\t* gcc.target/s390/vector/long-double-to-decimal32.c: New test.\n\t* gcc.target/s390/vector/long-double-to-decimal64.c: New test.", "tree": {"sha": "25bbbd4050ab0c727c726222ee99e18b64892a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25bbbd4050ab0c727c726222ee99e18b64892a83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e446cb58183557a5a5d87dc866aae9613544f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e446cb58183557a5a5d87dc866aae9613544f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e446cb58183557a5a5d87dc866aae9613544f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e446cb58183557a5a5d87dc866aae9613544f8/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a974b8a592e1f131a2b1698582e348666d1e2973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a974b8a592e1f131a2b1698582e348666d1e2973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a974b8a592e1f131a2b1698582e348666d1e2973"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "bc52211c55e5f7c7a568bd7593a1ba6abd2c6878", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=b6e446cb58183557a5a5d87dc866aae9613544f8", "patch": "@@ -2480,6 +2480,42 @@\n   \"HAVE_TF (trunctfsf2)\"\n   { EXPAND_TF (trunctfsf2, 2); })\n \n+(define_expand \"trunctf<DFP_ALL:mode>2_vr\"\n+  [(match_operand:DFP_ALL 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:TF 1 \"nonimmediate_operand\" \"\")]\n+  \"TARGET_HARD_DFP\n+   && GET_MODE_SIZE (TFmode) > GET_MODE_SIZE (<DFP_ALL:MODE>mode)\n+   && TARGET_VXE\"\n+{\n+  rtx fprx2 = gen_reg_rtx (FPRX2mode);\n+  emit_insn (gen_tf_to_fprx2 (fprx2, operands[1]));\n+  emit_insn (gen_truncfprx2<DFP_ALL:mode>2 (operands[0], fprx2));\n+  DONE;\n+})\n+\n+(define_expand \"trunctf<DFP_ALL:mode>2\"\n+  [(match_operand:DFP_ALL 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:TF 1 \"nonimmediate_operand\" \"\")]\n+  \"HAVE_TF (trunctf<DFP_ALL:mode>2)\"\n+  { EXPAND_TF (trunctf<DFP_ALL:mode>2, 2); })\n+\n+(define_expand \"trunctdtf2_vr\"\n+  [(match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:TD 1 \"nonimmediate_operand\" \"\")]\n+  \"TARGET_HARD_DFP && TARGET_VXE\"\n+{\n+  rtx fprx2 = gen_reg_rtx (FPRX2mode);\n+  emit_insn (gen_trunctdfprx22 (fprx2, operands[1]));\n+  emit_insn (gen_fprx2_to_tf (operands[0], fprx2));\n+  DONE;\n+})\n+\n+(define_expand \"trunctdtf2\"\n+  [(match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:TD 1 \"nonimmediate_operand\" \"\")]\n+  \"HAVE_TF (trunctdtf2)\"\n+  { EXPAND_TF (trunctdtf2, 2); })\n+\n ; load lengthened\n \n (define_insn \"extenddftf2_vr\"\n@@ -2511,6 +2547,42 @@\n   \"HAVE_TF (extendsftf2)\"\n   { EXPAND_TF (extendsftf2, 2); })\n \n+(define_expand \"extend<DFP_ALL:mode>tf2_vr\"\n+  [(match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:DFP_ALL 1 \"nonimmediate_operand\" \"\")]\n+  \"TARGET_HARD_DFP\n+   && GET_MODE_SIZE (<DFP_ALL:MODE>mode) < GET_MODE_SIZE (TFmode)\n+   && TARGET_VXE\"\n+{\n+  rtx fprx2 = gen_reg_rtx (FPRX2mode);\n+  emit_insn (gen_extend<DFP_ALL:mode>fprx22 (fprx2, operands[1]));\n+  emit_insn (gen_fprx2_to_tf (operands[0], fprx2));\n+  DONE;\n+})\n+\n+(define_expand \"extend<DFP_ALL:mode>tf2\"\n+  [(match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:DFP_ALL 1 \"nonimmediate_operand\" \"\")]\n+  \"HAVE_TF (extend<DFP_ALL:mode>tf2)\"\n+  { EXPAND_TF (extend<DFP_ALL:mode>tf2, 2); })\n+\n+(define_expand \"extendtftd2_vr\"\n+  [(match_operand:TD 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:TF 1 \"nonimmediate_operand\" \"\")]\n+  \"TARGET_HARD_DFP && TARGET_VXE\"\n+{\n+  rtx fprx2 = gen_reg_rtx (FPRX2mode);\n+  emit_insn (gen_tf_to_fprx2 (fprx2, operands[1]));\n+  emit_insn (gen_extendfprx2td2 (operands[0], fprx2));\n+  DONE;\n+})\n+\n+(define_expand \"extendtftd2\"\n+  [(match_operand:TD 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:TF 1 \"nonimmediate_operand\" \"\")]\n+  \"HAVE_TF (extendtftd2)\"\n+  { EXPAND_TF (extendtftd2, 2); })\n+\n ; test data class\n \n (define_expand \"signbittf2_vr\""}, {"sha": "3cd2c68f5c65999991235dd49f5c9cf7cb29ad3e", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-decimal128.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal128.c?ref=b6e446cb58183557a5a5d87dc866aae9613544f8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_decimal128 (_Decimal128 x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tpfpo\\n} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_decimal128 ((_Decimal128) 42) == 42.L);\n+  assert (long_double_from_decimal128 ((_Decimal128) -42) == -42.L);\n+}"}, {"sha": "84e3c4b11c080e83f562930fd3174cbe469d1205", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-decimal32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal32.c?ref=b6e446cb58183557a5a5d87dc866aae9613544f8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_decimal32 (_Decimal32 x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tpfpo\\n} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_decimal32 ((_Decimal32) 42) == 42.L);\n+  assert (long_double_from_decimal32 ((_Decimal32) -42) == -42.L);\n+}"}, {"sha": "f855e4b39c8c57832cb8b1f095be728a1304d44e", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-from-decimal64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-from-decimal64.c?ref=b6e446cb58183557a5a5d87dc866aae9613544f8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+#include <stdint.h>\n+\n+__attribute__ ((noipa)) static long double\n+long_double_from_decimal64 (_Decimal64 x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tpfpo\\n} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_from_decimal64 ((_Decimal64) 42) == 42.L);\n+  assert (long_double_from_decimal64 ((_Decimal64) -42) == -42.L);\n+}"}, {"sha": "5f7833a66e764c492f2e86213d86305674d6635d", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-decimal128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal128.c?ref=b6e446cb58183557a5a5d87dc866aae9613544f8", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static _Decimal128\n+long_double_to_decimal128 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tpfpo\\n} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_decimal128 (42.L) == (_Decimal128) 42.);\n+  assert (long_double_to_decimal128 (-42.L) == (_Decimal128) -42.);\n+}"}, {"sha": "f09288a5177ee619892936c81d54e4a3332457f6", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-decimal32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal32.c?ref=b6e446cb58183557a5a5d87dc866aae9613544f8", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static _Decimal32\n+long_double_to_decimal32 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tpfpo\\n} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_decimal32 (42.L) == (_Decimal32) 42.);\n+  assert (long_double_to_decimal32 (-42.L) == (_Decimal32) -42.);\n+}"}, {"sha": "08aecfea43a3d9a83a1ada8a4f8d49ec2919041a", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-to-decimal64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e446cb58183557a5a5d87dc866aae9613544f8/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-to-decimal64.c?ref=b6e446cb58183557a5a5d87dc866aae9613544f8", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch --save-temps\" } */\n+/* { dg-do run { target { s390_z14_hw } } } */\n+#include <assert.h>\n+\n+__attribute__ ((noipa)) static _Decimal64\n+long_double_to_decimal64 (long double x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tpfpo\\n} 1 } } */\n+\n+int\n+main (void)\n+{\n+  assert (long_double_to_decimal64 (42.L) == (_Decimal64) 42.);\n+  assert (long_double_to_decimal64 (-42.L) == (_Decimal64) -42.);\n+}"}]}