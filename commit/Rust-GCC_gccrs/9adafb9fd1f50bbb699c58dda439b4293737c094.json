{"sha": "9adafb9fd1f50bbb699c58dda439b4293737c094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkYWZiOWZkMWY1MGJiYjY5OWM1OGRkYTQzOWI0MjkzNzM3YzA5NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-08T13:29:29Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-08T13:29:29Z"}, "message": "sparc-protos.h (function_arg_advance, [...]): Delete.\n\n\t* config/sparc/sparc-protos.h (function_arg_advance, function-arg):\n\tDelete.\n\t* config/sparc/sparc.h (FUNCTION_ARG_ADVANCE, FUNCTION_ARG): Delete.\n\t(FUNCTION_INCOMING_ARG): Delete.\n\t* config/sparc/sparc.c (scan_record_type): Const-ify tree argument.\n\t(function_arg_slotno): Likewise.  Take bool arguments.\n\t(sparc_arg_partial_bytes): Update call to it.\n\t(function_arg): Rename to...\n\t(sparc_function_arg_1): ...this.  Take bool arguments.\n\t(sparc_function_arg, sparc_function_incoming_arg): New functions.\n\t(function_arg_advance): Rename to...\n\t(sparc_function_arg_advance): ...this.  Take bool argument.\n\t(TARGET_FUNCTION_ARG_ADVANCE, TARGET_FUNCTION_ARG): Define.\n\t(TARGET_FUNCTION_INCOMING_ARG): Define.\n\nFrom-SVN: r165183", "tree": {"sha": "57cece720e53fd73c9005df8f56dbc656f07bcc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57cece720e53fd73c9005df8f56dbc656f07bcc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9adafb9fd1f50bbb699c58dda439b4293737c094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adafb9fd1f50bbb699c58dda439b4293737c094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adafb9fd1f50bbb699c58dda439b4293737c094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adafb9fd1f50bbb699c58dda439b4293737c094/comments", "author": null, "committer": null, "parents": [{"sha": "74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f41f0282714b0485d4ffcaf0d6b9f92133db7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74f41f0282714b0485d4ffcaf0d6b9f92133db7f"}], "stats": {"total": 122, "additions": 70, "deletions": 52}, "files": [{"sha": "5c1d4815d111a7f18782e2cab764d65d4bd7b830", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adafb9fd1f50bbb699c58dda439b4293737c094/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adafb9fd1f50bbb699c58dda439b4293737c094/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9adafb9fd1f50bbb699c58dda439b4293737c094", "patch": "@@ -1,3 +1,20 @@\n+2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/sparc/sparc-protos.h (function_arg_advance, function-arg):\n+\tDelete.\n+\t* config/sparc/sparc.h (FUNCTION_ARG_ADVANCE, FUNCTION_ARG): Delete.\n+\t(FUNCTION_INCOMING_ARG): Delete.\n+\t* config/sparc/sparc.c (scan_record_type): Const-ify tree argument.\n+\t(function_arg_slotno): Likewise.  Take bool arguments.\n+\t(sparc_arg_partial_bytes): Update call to it.\n+\t(function_arg): Rename to...\n+\t(sparc_function_arg_1): ...this.  Take bool arguments.\n+\t(sparc_function_arg, sparc_function_incoming_arg): New functions.\n+\t(function_arg_advance): Rename to...\n+\t(sparc_function_arg_advance): ...this.  Take bool argument.\n+\t(TARGET_FUNCTION_ARG_ADVANCE, TARGET_FUNCTION_ARG): Define.\n+\t(TARGET_FUNCTION_INCOMING_ARG): Define.\n+\n 2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/bfin/bfin-protos.h (function_arg, function_arg_advance):"}, {"sha": "d37823f566f286ba18e8590fc71ee4b0732a385c", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adafb9fd1f50bbb699c58dda439b4293737c094/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adafb9fd1f50bbb699c58dda439b4293737c094/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=9adafb9fd1f50bbb699c58dda439b4293737c094", "patch": "@@ -25,10 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #define __SPARC_PROTOS_H__\n \n #ifdef TREE_CODE\n-extern void function_arg_advance (CUMULATIVE_ARGS *,\n-\t\t\t\t  enum machine_mode, tree, int);\n-extern struct rtx_def *function_arg (const CUMULATIVE_ARGS *,\n-\t\t\t\t     enum machine_mode, tree, int, int);\n #ifdef RTX_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n #endif"}, {"sha": "44145ef7c4bf660f0ade07b801150f323c251477", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 53, "deletions": 19, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adafb9fd1f50bbb699c58dda439b4293737c094/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adafb9fd1f50bbb699c58dda439b4293737c094/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9adafb9fd1f50bbb699c58dda439b4293737c094", "patch": "@@ -351,9 +351,9 @@ int sparc_indent_opcode = 0;\n static bool sparc_handle_option (size_t, const char *, int);\n static void sparc_option_override (void);\n static void sparc_init_modes (void);\n-static void scan_record_type (tree, int *, int *, int *);\n+static void scan_record_type (const_tree, int *, int *, int *);\n static int function_arg_slotno (const CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\ttree, int, int, int *, int *);\n+\t\t\t\tconst_tree, bool, bool, int *, int *);\n \n static int supersparc_adjust_cost (rtx, rtx, rtx, int);\n static int hypersparc_adjust_cost (rtx, rtx, rtx, int);\n@@ -424,6 +424,14 @@ static rtx sparc_legitimize_address (rtx, rtx, enum machine_mode);\n static bool sparc_mode_dependent_address_p (const_rtx);\n static bool sparc_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, const_tree, bool);\n+static void sparc_function_arg_advance (CUMULATIVE_ARGS *,\n+\t\t\t\t\tenum machine_mode, const_tree, bool);\n+static rtx sparc_function_arg_1 (const CUMULATIVE_ARGS *,\n+\t\t\t\t enum machine_mode, const_tree, bool, bool);\n+static rtx sparc_function_arg (CUMULATIVE_ARGS *,\n+\t\t\t       enum machine_mode, const_tree, bool);\n+static rtx sparc_function_incoming_arg (CUMULATIVE_ARGS *,\n+\t\t\t\t\tenum machine_mode, const_tree, bool);\n static int sparc_arg_partial_bytes (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree, bool);\n static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n@@ -559,6 +567,12 @@ static bool fpu_option_set = false;\n #define TARGET_PASS_BY_REFERENCE sparc_pass_by_reference\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES sparc_arg_partial_bytes\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE sparc_function_arg_advance\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG sparc_function_arg\n+#undef TARGET_FUNCTION_INCOMING_ARG\n+#define TARGET_FUNCTION_INCOMING_ARG sparc_function_incoming_arg\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS sparc_builtin_saveregs\n@@ -4938,7 +4952,8 @@ sparc_strict_argument_naming (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n    Sub-fields are not taken into account for the PACKED_P predicate.  */\n \n static void\n-scan_record_type (tree type, int *intregs_p, int *fpregs_p, int *packed_p)\n+scan_record_type (const_tree type, int *intregs_p, int *fpregs_p,\n+\t\t  int *packed_p)\n {\n   tree field;\n \n@@ -4978,7 +4993,7 @@ scan_record_type (tree type, int *intregs_p, int *fpregs_p, int *packed_p)\n \n static int\n function_arg_slotno (const struct sparc_args *cum, enum machine_mode mode,\n-\t\t     tree type, int named, int incoming_p,\n+\t\t     const_tree type, bool named, bool incoming_p,\n \t\t     int *pregno, int *ppadding)\n {\n   int regbase = (incoming_p\n@@ -5552,8 +5567,7 @@ function_arg_vector_value (int size, int regno)\n   return regs;\n }\n \n-/* Handle the FUNCTION_ARG macro.\n-   Determine where to put an argument to a function.\n+/* Determine where to put an argument to a function.\n    Value is zero to push the argument on the stack,\n    or a hard register in which to store the argument.\n \n@@ -5563,13 +5577,14 @@ function_arg_vector_value (int size, int regno)\n    TYPE is the data type of the argument (as a tree).\n     This is null for libcalls where that information may\n     not be available.\n-   NAMED is nonzero if this argument is a named parameter\n+   NAMED is true if this argument is a named parameter\n     (otherwise it is an extra parameter matching an ellipsis).\n-   INCOMING_P is zero for FUNCTION_ARG, nonzero for FUNCTION_INCOMING_ARG.  */\n+   INCOMING_P is false for TARGET_FUNCTION_ARG, true for\n+    TARGET_FUNCTION_INCOMING_ARG.  */\n \n-rtx\n-function_arg (const struct sparc_args *cum, enum machine_mode mode,\n-\t      tree type, int named, int incoming_p)\n+static rtx\n+sparc_function_arg_1 (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t      const_tree type, bool named, bool incoming_p)\n {\n   int regbase = (incoming_p\n \t\t ? SPARC_INCOMING_INT_ARG_FIRST\n@@ -5701,6 +5716,24 @@ function_arg (const struct sparc_args *cum, enum machine_mode mode,\n   return gen_rtx_REG (mode, regno);\n }\n \n+/* Handle the TARGET_FUNCTION_ARG target hook.  */\n+\n+static rtx\n+sparc_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t    const_tree type, bool named)\n+{\n+  return sparc_function_arg_1 (cum, mode, type, named, false);\n+}\n+\n+/* Handle the TARGET_FUNCTION_INCOMING_ARG target hook.  */\n+\n+static rtx\n+sparc_function_incoming_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t     const_tree type, bool named)\n+{\n+  return sparc_function_arg_1 (cum, mode, type, named, true);\n+}\n+\n /* For an arg passed partly in registers and partly in memory,\n    this is the number of bytes of registers used.\n    For args passed entirely in registers or entirely in memory, zero.\n@@ -5717,8 +5750,9 @@ sparc_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n {\n   int slotno, regno, padding;\n \n-  /* We pass 0 for incoming_p here, it doesn't matter.  */\n-  slotno = function_arg_slotno (cum, mode, type, named, 0, &regno, &padding);\n+  /* We pass false for incoming_p here, it doesn't matter.  */\n+  slotno = function_arg_slotno (cum, mode, type, named, false,\n+\t\t\t\t&regno, &padding);\n \n   if (slotno == -1)\n     return 0;\n@@ -5816,19 +5850,19 @@ sparc_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \t    || GET_MODE_SIZE (mode) > 16);\n }\n \n-/* Handle the FUNCTION_ARG_ADVANCE macro.\n+/* Handle the TARGET_FUNCTION_ARG_ADVANCE hook.\n    Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE.\n    TYPE is null for libcalls where that information may not be available.  */\n \n-void\n-function_arg_advance (struct sparc_args *cum, enum machine_mode mode,\n-\t\t      tree type, int named)\n+static void\n+sparc_function_arg_advance (struct sparc_args *cum, enum machine_mode mode,\n+\t\t\t    const_tree type, bool named)\n {\n   int regno, padding;\n \n-  /* We pass 0 for incoming_p here, it doesn't matter.  */\n-  function_arg_slotno (cum, mode, type, named, 0, &regno, &padding);\n+  /* We pass false for incoming_p here, it doesn't matter.  */\n+  function_arg_slotno (cum, mode, type, named, false, &regno, &padding);\n \n   /* If argument requires leading padding, add it.  */\n   cum->words += padding;"}, {"sha": "ccb7dca353d48b00882d16581469308f022d4a8b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adafb9fd1f50bbb699c58dda439b4293737c094/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adafb9fd1f50bbb699c58dda439b4293737c094/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=9adafb9fd1f50bbb699c58dda439b4293737c094", "patch": "@@ -1444,35 +1444,6 @@ struct sparc_args {\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n init_cumulative_args (& (CUM), (FNTYPE), (LIBNAME), (FNDECL));\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   TYPE is null for libcalls where that information may not be available.  */\n-\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED) \\\n-function_arg_advance (& (CUM), (MODE), (TYPE), (NAMED))\n-\n-/* Determine where to put an argument to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-function_arg (& (CUM), (MODE), (TYPE), (NAMED), 0)\n-\n-/* Define where a function finds its arguments.\n-   This is different from FUNCTION_ARG because of register windows.  */\n-\n-#define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED) \\\n-function_arg (& (CUM), (MODE), (TYPE), (NAMED), 1)\n-\n /* If defined, a C expression which determines whether, and in which direction,\n    to pad out an argument with extra space.  The value should be of type\n    `enum direction': either `upward' to pad above the argument,"}]}