{"sha": "41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhNGVmMjI0M2IwMTI4ZjZmMzViM2RhOGY3ZDE4YTYwOWE5MjNlYQ==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2015-12-24T11:05:34Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-12-24T11:05:34Z"}, "message": "Introduce support for PKU instructions.\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PKU_SET): New.\n\t(OPTION_MASK_ISA_PKU_UNSET): Ditto.\n\t(ix86_handle_option): Handle OPT_mpku.\n\t* config.gcc: Add pkuintrin.h to i[34567]86-*-* and x86_64-*-*\n\ttargets.\n\t* config/i386/cpuid.h (host_detect_local_cpu): Detect PKU feature.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle PKU ISA\n\tflag.\n\t* config/i386/i386.c (ix86_target_string): Add \"-mpku\" to\n\tix86_target_opts.\n\t(ix86_option_override_internal): Define PTA_PKU, mention new key\n\tin skylake-avx512. Handle new ISA bits.\n\t(ix86_valid_target_attribute_inner_p): Add \"pku\".\n\t(enum ix86_builtins): Add IX86_BUILTIN_RDPKRU and IX86_BUILTIN_WRPKRU.\n\t(builtin_description bdesc_special_args[]): Add new built-ins.\n\t* config/i386/i386.h (define TARGET_PKU): New.\n\t(define TARGET_PKU_P): Ditto.\n\t* config/i386/i386.md (define_c_enum \"unspecv\"): Add UNSPEC_PKU.\n\t(define_expand \"rdpkru\"): New.\n\t(define_insn \"*rdpkru\"): Ditto.\n\t(define_expand \"wrpkru\"): Ditto.\n\t(define_insn \"*wrpkru\"): Ditto.\n\t* config/i386/i386.opt (mpku): Ditto.\n\t* config/i386/pkuintrin.h: New file.\n\t* config/i386/x86intrin.h: Include pkuintrin.h\n\t* doc/extend.texi: Describe new built-ins.\n\t* doc/invoke.texi: Describe new switches.\ngcc/testsuite/\n\t* g++.dg/other/i386-2.C: Add -mpku.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/rdpku-1.c: New test.\n\t* gcc.target/i386/sse-12.c: Add -mpku.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-33.c: Ditto.\n\t* gcc.target/i386/wrpku-1.c: New test.\n\nFrom-SVN: r231944", "tree": {"sha": "211be33d7501be799b39b9f03a5d06b4b070eff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/211be33d7501be799b39b9f03a5d06b4b070eff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/comments", "author": null, "committer": null, "parents": [{"sha": "6549bdc6beb08b4d5737415b1ed97081e7a900d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6549bdc6beb08b4d5737415b1ed97081e7a900d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6549bdc6beb08b4d5737415b1ed97081e7a900d3"}], "stats": {"total": 197, "additions": 180, "deletions": 17}, "files": [{"sha": "e7758fbf0005558e6601ba3936e6879990a8c547", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -1,3 +1,33 @@\n+2015-12-24  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PKU_SET): New.\n+\t(OPTION_MASK_ISA_PKU_UNSET): Ditto.\n+\t(ix86_handle_option): Handle OPT_mpku.\n+\t* config.gcc: Add pkuintrin.h to i[34567]86-*-* and x86_64-*-*\n+\ttargets.\n+\t* config/i386/cpuid.h (host_detect_local_cpu): Detect PKU feature.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle PKU ISA\n+\tflag.\n+\t* config/i386/i386.c (ix86_target_string): Add \"-mpku\" to\n+\tix86_target_opts.\n+\t(ix86_option_override_internal): Define PTA_PKU, mention new key\n+\tin skylake-avx512. Handle new ISA bits.\n+\t(ix86_valid_target_attribute_inner_p): Add \"pku\".\n+\t(enum ix86_builtins): Add IX86_BUILTIN_RDPKRU and IX86_BUILTIN_WRPKRU.\n+\t(builtin_description bdesc_special_args[]): Add new built-ins.\n+\t* config/i386/i386.h (define TARGET_PKU): New.\n+\t(define TARGET_PKU_P): Ditto.\n+\t* config/i386/i386.md (define_c_enum \"unspecv\"): Add UNSPEC_PKU.\n+\t(define_expand \"rdpkru\"): New.\n+\t(define_insn \"*rdpkru\"): Ditto.\n+\t(define_expand \"wrpkru\"): Ditto.\n+\t(define_insn \"*wrpkru\"): Ditto.\n+\t* config/i386/i386.opt (mpku): Ditto.\n+\t* config/i386/pkuintrin.h: New file.\n+\t* config/i386/x86intrin.h: Include pkuintrin.h\n+\t* doc/extend.texi: Describe new built-ins.\n+\t* doc/invoke.texi: Describe new switches.\n+\n 2015-12-23  Richard Henderson  <rth@redhat.com>\n \n \tPR ipa/67811"}, {"sha": "6039e046ef3cb04c94766f7c4c02d8512c6cf67b", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -129,6 +129,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_F16C | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA_MWAITX_SET OPTION_MASK_ISA_MWAITX\n #define OPTION_MASK_ISA_CLZERO_SET OPTION_MASK_ISA_CLZERO\n+#define OPTION_MASK_ISA_PKU_SET OPTION_MASK_ISA_PKU\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -190,6 +191,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_CLWB_UNSET OPTION_MASK_ISA_CLWB\n #define OPTION_MASK_ISA_MWAITX_UNSET OPTION_MASK_ISA_MWAITX\n #define OPTION_MASK_ISA_CLZERO_UNSET OPTION_MASK_ISA_CLZERO\n+#define OPTION_MASK_ISA_PKU_UNSET OPTION_MASK_ISA_PKU\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -962,6 +964,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mpku:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PKU_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PKU_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_PKU_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PKU_UNSET;\n+\t}\n+      return true;\n+\n \n   /* Comes from final.c -- no real reason to change it.  */\n #define MAX_CODE_ALIGN 16"}, {"sha": "2caf9f3b271249b5f373a0c37e3fd04a4e14de59", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -374,7 +374,8 @@ i[34567]86-*-*)\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n-\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h mwaitxintrin.h clzerointrin.h\"\n+\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h\n+\t\t       mwaitxintrin.h clzerointrin.h pkuintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -395,7 +396,8 @@ x86_64-*-*)\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n-\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h mwaitxintrin.h clzerointrin.h\"\n+\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h\n+\t\t       mwaitxintrin.h clzerointrin.h pkuintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "05cdc80a18ef063f54a95af5adcbb622763af1d0", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -95,6 +95,8 @@\n /* %ecx */\n #define bit_PREFETCHWT1\t  (1 << 0)\n #define bit_AVX512VBMI\t(1 << 1)\n+#define bit_PKU\t(1 << 3)\n+#define bit_OSPKE\t(1 << 4)\n \n /* XFEATURE_ENABLED_MASK register bits (%eax == 13, %ecx == 0) */\n #define bit_BNDREGS     (1 << 3)"}, {"sha": "b91d38aa4a30285215fbb272dcb7d371283a0ba4", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -414,7 +414,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx512dq = 0, has_avx512bw = 0, has_avx512vl = 0;\n   unsigned int has_avx512vbmi = 0, has_avx512ifma = 0, has_clwb = 0;\n   unsigned int has_pcommit = 0, has_mwaitx = 0;\n-  unsigned int has_clzero = 0;\n+  unsigned int has_clzero = 0, has_pku = 0;\n \n   bool arch;\n \n@@ -501,7 +501,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512vl = ebx & bit_AVX512IFMA;\n \n       has_prefetchwt1 = ecx & bit_PREFETCHWT1;\n-      has_avx512vl = ecx & bit_AVX512VBMI;\n+      has_avx512vbmi = ecx & bit_AVX512VBMI;\n+      has_pku = ecx & bit_OSPKE;\n     }\n \n   if (max_level >= 13)\n@@ -971,6 +972,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *pcommit = has_pcommit ? \" -mpcommit\" : \" -mno-pcommit\";\n       const char *mwaitx  = has_mwaitx  ? \" -mmwaitx\"  : \" -mno-mwaitx\"; \n       const char *clzero  = has_clzero  ? \" -mclzero\"  : \" -mno-clzero\";\n+      const char *pku = has_pku ? \" -mpku\" : \" -mno-pku\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n@@ -980,7 +982,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n \t\t\tavx512ifma, avx512vbmi, clwb, pcommit, mwaitx,\n-\t\t\tclzero, NULL);\n+\t\t\tclzero, pku, NULL);\n     }\n \n done:"}, {"sha": "64001b10ec9b32b4104bc8d2847bacaf583cb3eb", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -439,6 +439,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__CLWB__\");\n   if (isa_flag & OPTION_MASK_ISA_MWAITX)\n     def_or_undef (parse_in, \"__MWAITX__\");\n+  if (isa_flag & OPTION_MASK_ISA_PKU)\n+    def_or_undef (parse_in, \"__PKU__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "733d0ab6275d5f8a329e016ce199c48b655bb53a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -3755,6 +3755,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mpcommit\",\tOPTION_MASK_ISA_PCOMMIT },\n     { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX  },\n     { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO  },\n+    { \"-mpku\",\t\tOPTION_MASK_ISA_PKU  },\n   };\n \n   /* Flag options.  */\n@@ -4310,6 +4311,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_MWAITX\t\t(HOST_WIDE_INT_1 << 57)\n #define PTA_CLZERO\t\t(HOST_WIDE_INT_1 << 58)\n #define PTA_NO_80387\t\t(HOST_WIDE_INT_1 << 59)\n+#define PTA_PKU\t\t(HOST_WIDE_INT_1 << 60)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -4331,7 +4333,7 @@ ix86_option_override_internal (bool main_args_p,\n   (PTA_BROADWELL | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES)\n #define PTA_SKYLAKE_AVX512 \\\n   (PTA_SKYLAKE | PTA_AVX512F | PTA_AVX512CD | PTA_AVX512VL \\\n-   | PTA_AVX512BW | PTA_AVX512DQ)\n+   | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU)\n #define PTA_KNL \\\n   (PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER | PTA_AVX512F | PTA_AVX512CD)\n #define PTA_BONNELL \\\n@@ -4934,6 +4936,9 @@ ix86_option_override_internal (bool main_args_p,\n \tif (processor_alias_table[i].flags & PTA_MWAITX\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MWAITX))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MWAITX;\n+\tif (processor_alias_table[i].flags & PTA_PKU\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PKU))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PKU;\n \n \tif (!(opts_set->x_target_flags & MASK_80387))\n \t  {\n@@ -5930,6 +5935,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"pcommit\",\tOPT_mpcommit),\n     IX86_ATTR_ISA (\"mwaitx\",\tOPT_mmwaitx),\n     IX86_ATTR_ISA (\"clzero\",    OPT_mclzero),\n+    IX86_ATTR_ISA (\"pku\",\tOPT_mpku),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -32286,6 +32292,10 @@ enum ix86_builtins\n   IX86_BUILTIN_READ_FLAGS,\n   IX86_BUILTIN_WRITE_FLAGS,\n \n+  /* PKU instructions.  */\n+  IX86_BUILTIN_RDPKRU,\n+  IX86_BUILTIN_WRPKRU,\n+\n   IX86_BUILTIN_MAX\n };\n \n@@ -32791,6 +32801,10 @@ static const struct builtin_description bdesc_special_args[] =\n \n   /* PCOMMIT.  */\n   { OPTION_MASK_ISA_PCOMMIT, CODE_FOR_pcommit, \"__builtin_ia32_pcommit\", IX86_BUILTIN_PCOMMIT, UNKNOWN, (int) VOID_FTYPE_VOID },\n+\n+  /* RDPKRU and WRPKRU.  */\n+  { OPTION_MASK_ISA_PKU, CODE_FOR_rdpkru,  \"__builtin_ia32_rdpkru\", IX86_BUILTIN_RDPKRU, UNKNOWN, (int) UNSIGNED_FTYPE_VOID },\n+  { OPTION_MASK_ISA_PKU, CODE_FOR_wrpkru,  \"__builtin_ia32_wrpkru\", IX86_BUILTIN_WRPKRU, UNKNOWN, (int) VOID_FTYPE_UNSIGNED }\n };\n \n /* Builtins with variable number of arguments.  */"}, {"sha": "7e6548bdcfd1f05a9564bd9eb21645551c3c6958", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -158,6 +158,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_CLWB_P(x)\tTARGET_ISA_CLWB_P(x)\n #define TARGET_MWAITX\tTARGET_ISA_MWAITX\n #define TARGET_MWAITX_P(x)\tTARGET_ISA_MWAITX_P(x)\n+#define TARGET_PKU\tTARGET_ISA_PKU\n+#define TARGET_PKU_P(x)\tTARGET_ISA_PKU_P(x)\n+\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "38191df12be89c6aed2e7566fbae852ac0cefd33", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -268,6 +268,8 @@\n   ;; For CLZERO support\n   UNSPECV_CLZERO\n \n+  ;; For RDPKRU and WRPKRU support\n+  UNSPECV_PKU\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -19320,6 +19322,48 @@\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; RDPKRU and WRPKRU\n+\n+(define_expand \"rdpkru\"\n+  [(parallel\n+     [(set (match_operand:SI 0 \"register_operand\")\n+\t   (unspec_volatile:SI [(match_dup 1)] UNSPECV_PKU))\n+      (set (match_dup 2) (const_int 0))])]\n+  \"TARGET_PKU\"\n+{\n+  operands[1] = force_reg (SImode, const0_rtx);\n+  operands[2] = gen_reg_rtx (SImode);\n+})\n+\n+(define_insn \"*rdpkru\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"c\")]\n+\t\t\t    UNSPECV_PKU))\n+   (set (match_operand:SI 1 \"register_operand\" \"=d\")\n+\t(const_int 0))]\n+  \"TARGET_PKU\"\n+  \"rdpkru\"\n+  [(set_attr \"type\" \"other\")])\n+\n+(define_expand \"wrpkru\"\n+  [(unspec_volatile:SI\n+     [(match_operand:SI 0 \"register_operand\")\n+      (match_dup 1) (match_dup 2)] UNSPECV_PKU)]\n+  \"TARGET_PKU\"\n+{\n+  operands[1] = force_reg (SImode, const0_rtx);\n+  operands[2] = force_reg (SImode, const0_rtx);\n+})\n+\n+(define_insn \"*wrpkru\"\n+  [(unspec_volatile:SI\n+     [(match_operand:SI 0 \"register_operand\" \"a\")\n+      (match_operand:SI 1 \"register_operand\" \"d\")\n+      (match_operand:SI 2 \"register_operand\" \"c\")] UNSPECV_PKU)]\n+  \"TARGET_PKU\"\n+  \"wrpkru\"\n+  [(set_attr \"type\" \"other\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "5f83b3a94be3be17ee3c0b575bb06bf4b184c25a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -876,6 +876,10 @@ mclzero\n Target Report Mask(ISA_CLZERO) Var(ix86_isa_flags) Save\n Support CLZERO built-in functions and code generation.\n \n+mpku\n+Target Report Mask(ISA_PKU) Var(ix86_isa_flags) Save\n+Support PKU built-in functions and code generation.\n+\n mstack-protector-guard=\n Target RejectNegative Joined Enum(stack_protector_guard) Var(ix86_stack_protector_guard) Init(SSP_TLS)\n Use given stack-protector guard."}, {"sha": "c8819eb7442a23015e25c241dc3ee41cb4f01c95", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -95,6 +95,8 @@\n \n #include <clzerointrin.h>\n \n+#include <pkuintrin.h>\n+\n #endif /* __iamcu__ */\n \n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "4578925854dbb607ca6ecaea6c2d45f554cd7642", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -18343,6 +18343,13 @@ All of them generate the machine instruction that is part of the name.\n void __builtin_i32_clzero (void *)\n @end smallexample\n \n+The following built-in functions are available when @option{-mpku} is used.\n+They generate reads and writes to PKRU.\n+@smallexample\n+void __builtin_ia32_wrpkru (unsigned int)\n+unsigned int __builtin_ia32_rdpkru ()\n+@end smallexample\n+\n @node x86 transactional memory intrinsics\n @subsection x86 Transactional Memory Intrinsics\n "}, {"sha": "4e2cf8f7beba93ae5e728e59282245ac06b68bd4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -1103,7 +1103,8 @@ See RS/6000 and PowerPC Options.\n -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n -mprefetchwt1 -mclflushopt -mxsavec -mxsaves @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n--mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mmpx -mmwaitx -mclzero -mthreads @gol\n+-mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mmpx -mmwaitx -mclzero\n+-mpku -mthreads @gol\n -mms-bitfields -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy} -mmemset-strategy=@var{strategy} @gol\n@@ -22625,7 +22626,7 @@ AVX512CD instruction set support.\n \n @item skylake-avx512\n Intel Skylake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,\n-SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,\n+SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,\n BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F,\n AVX512VL, AVX512BW, AVX512DQ and AVX512CD instruction set support.\n \n@@ -23247,11 +23248,13 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mclzero\n @opindex mclzero\n+@itemx -mpku\n+@opindex mpku\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA AVX512VBMI, BMI, BMI2, FXSR,\n-XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX or 3DNow!@:\n+XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX, PKU or 3DNow!@:\n extended instruction sets.  Each has a corresponding @option{-mno-} option\n to disable use of these instructions.\n "}, {"sha": "aa9355dc0e41e90c7b0d2d0281dfe22384cd7ec4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -1,3 +1,14 @@\n+2015-12-24  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mpku.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/rdpku-1.c: New test.\n+\t* gcc.target/i386/sse-12.c: Add -mpku.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-33.c: Ditto.\n+\t* gcc.target/i386/wrpku-1.c: New test.\n+\n 2015-12-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/69023"}, {"sha": "74b3cb83bf89eaf13d11928e8c947bec46fcfb61", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx -mclzero\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx -mclzero -mpku\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n-   popcntintrin.h, fmaintrin.h and mm_malloc.h.h are usable with \n+   popcntintrin.h, fmaintrin.h, pkuintrin.h and mm_malloc.h.h are usable with\n    -O -pedantic-errors.  */\n \n #include <x86intrin.h>"}, {"sha": "04ea372bce8e1057093f7e8d4e09285925e44759", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx -mclzero\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx -mclzero -mpku\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n-   popcntintrin.h, fmaintrin.h and mm_malloc.h are usable with\n+   popcntintrin.h, fmaintrin.h, pkuintrin.h and mm_malloc.h are usable with\n    -O -fkeep-inline-functions.  */\n \n #include <x86intrin.h>"}, {"sha": "044301c5f0f2a5965fa568baccccc84037724023", "filename": "gcc/testsuite/gcc.target/i386/rdpku-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdpku-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdpku-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdpku-1.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpku -O2\" } */\n+/* { dg-final { scan-assembler \"rdpkru\\n\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned extern\n+rdpku_test (void)\n+{\n+  return _rdpkru_u32 ();\n+}"}, {"sha": "af15946b415bea2a29bc48fa5069e99fdd9db289", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx -mclzero\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx -mclzero -mpku\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "1144e5d068b9fc502adbeaad931768713cec8b00", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx -mclzero\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx -mclzero -mpku\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "9b155157b3839b753650d77b7d1ef1e1aa2511c2", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -699,7 +699,7 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt,xsavec,xsaves,clflushopt,clwb,pcommit\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt,xsavec,xsaves,clflushopt,clwb,pcommit,pku\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "d29d2d769f28f106f8ac5cf743911a70c7c5a93d", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -594,6 +594,6 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,clwb,pcommit,mwaitx,clzero\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,clwb,pcommit,mwaitx,clzero,pku\")\n \n #include <x86intrin.h>"}, {"sha": "44a4b720722528bbe50d16199bfbd33f1027ac8d", "filename": "gcc/testsuite/gcc.target/i386/wrpku-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrpku-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a4ef2243b0128f6f35b3da8f7d18a609a923ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrpku-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrpku-1.c?ref=41a4ef2243b0128f6f35b3da8f7d18a609a923ea", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpku -O2\" } */\n+/* { dg-final { scan-assembler \"wrpkru\\n\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+wrpku_test (unsigned int key)\n+{\n+  _wrpkru (key);\n+}"}]}