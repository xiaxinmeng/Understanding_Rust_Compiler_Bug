{"sha": "0f67fa83f2c26552227efc893ae27a910a40e140", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2N2ZhODNmMmMyNjU1MjIyN2VmYzg5M2FlMjdhOTEwYTQwZTE0MA==", "commit": {"author": {"name": "Wolfgang Gellerich", "email": "gellerich@de.ibm.com", "date": "2007-07-09T20:12:51Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2007-07-09T20:12:51Z"}, "message": "optabs.h: Added declaration for signbit_optab.\n\n2007-07-09  Wolfgang Gellerich  <gellerich@de.ibm.com>\n\n\t* optabs.h: Added declaration for signbit_optab.  \n\t* optabs.c: (init_optabs): Added initialization for signbit_optab.\n\t* genoptinit.c (optabs): Added entry for signbit insns.  \n\t* builtins.c (expand_builtin_signbit): Added code to use a signbit insn,\n\tif available.  \n\t* config/s390/s390.h (S390_TDC_SIGNBIT_SET): New constant.  \n\t* config/s390/s390.md (signbit<mode>2): New expander.\n\nFrom-SVN: r126495", "tree": {"sha": "01bce16cd8187f0c885645cbd5419094990089a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01bce16cd8187f0c885645cbd5419094990089a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f67fa83f2c26552227efc893ae27a910a40e140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f67fa83f2c26552227efc893ae27a910a40e140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f67fa83f2c26552227efc893ae27a910a40e140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f67fa83f2c26552227efc893ae27a910a40e140/comments", "author": null, "committer": null, "parents": [{"sha": "b462d62dafaa25a4445191cd1685d2a7c343d1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b462d62dafaa25a4445191cd1685d2a7c343d1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b462d62dafaa25a4445191cd1685d2a7c343d1b6"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "51c3df30a5c0f4bc6a4105e609a5868520605560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f67fa83f2c26552227efc893ae27a910a40e140", "patch": "@@ -1,3 +1,13 @@\n+2007-07-09  Wolfgang Gellerich  <gellerich@de.ibm.com>\n+\n+\t* optabs.h: Added declaration for signbit_optab.  \n+\t* optabs.c: (init_optabs): Added initialization for signbit_optab.\n+\t* genoptinit.c (optabs): Added entry for signbit insns.  \n+\t* builtins.c (expand_builtin_signbit): Added code to use a signbit insn,\n+\tif available.  \n+\t* config/s390/s390.h (S390_TDC_SIGNBIT_SET): New constant.  \n+\t* config/s390/s390.md (signbit<mode>2): New expander.  \n+\n 2007-07-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/32698"}, {"sha": "c01d4d0642e53267ff2369691fc2dce3f8458fb3", "filename": "gcc/builtins.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0f67fa83f2c26552227efc893ae27a910a40e140", "patch": "@@ -240,6 +240,11 @@ static tree do_mpfr_remquo (tree, tree, tree);\n static tree do_mpfr_lgamma_r (tree, tree, tree);\n #endif\n \n+/* This array records the insn_code of insns to imlement the signbit\n+   function.  */\n+enum insn_code signbit_optab[NUM_MACHINE_MODES];\n+\n+\n /* Return true if NODE should be considered for inline expansion regardless\n    of the optimization level.  This means whenever a function is invoked with\n    its \"internal\" name, which normally contains the prefix \"__builtin\".  */\n@@ -5584,12 +5589,15 @@ expand_builtin_adjust_trampoline (tree exp)\n   return tramp;\n }\n \n-/* Expand a call to the built-in signbit, signbitf, signbitl, signbitd32,\n-   signbitd64, or signbitd128 function.\n-   Return NULL_RTX if a normal call should be emitted rather than expanding\n-   the function in-line.  EXP is the expression that is a call to the builtin\n-   function; if convenient, the result should be placed in TARGET.  */\n-\n+/* Expand the call EXP to the built-in signbit, signbitf or signbitl\n+   function.  The function first checks whether the back end provides\n+   an insn to implement signbit for the respective mode.  If not, it\n+   checks whether the floating point format of the value is such that\n+   the sign bit can be extracted.  If that is not the case, the\n+   function returns NULL_RTX to indicate that a normal call should be\n+   emitted rather than expanding the function in-line.  EXP is the\n+   expression that is a call to the builtin function; if convenient,\n+   the result should be placed in TARGET.  */\n static rtx\n expand_builtin_signbit (tree exp, rtx target)\n {\n@@ -5598,6 +5606,7 @@ expand_builtin_signbit (tree exp, rtx target)\n   HOST_WIDE_INT hi, lo;\n   tree arg;\n   int word, bitpos;\n+  enum insn_code signbit_insn_code;\n   rtx temp;\n \n   if (!validate_arglist (exp, REAL_TYPE, VOID_TYPE))\n@@ -5608,6 +5617,21 @@ expand_builtin_signbit (tree exp, rtx target)\n   rmode = TYPE_MODE (TREE_TYPE (exp));\n   fmt = REAL_MODE_FORMAT (fmode);\n \n+  arg = builtin_save_expr (arg);\n+\n+  /* Expand the argument yielding a RTX expression. */\n+  temp = expand_normal (arg);\n+\n+  /* Check if the back end provides an insn that handles signbit for the\n+     argument's mode. */\n+  signbit_insn_code = signbit_optab [(int) fmode];\n+  if (signbit_insn_code != CODE_FOR_nothing)\n+    {\n+      target = gen_reg_rtx (TYPE_MODE (TREE_TYPE (exp)));\n+      emit_unop_insn (signbit_insn_code, target, temp, UNKNOWN);\n+      return target;\n+    }\n+\n   /* For floating point formats without a sign bit, implement signbit\n      as \"ARG < 0.0\".  */\n   bitpos = fmt->signbit_ro;\n@@ -5622,7 +5646,6 @@ expand_builtin_signbit (tree exp, rtx target)\n     return expand_expr (arg, target, VOIDmode, EXPAND_NORMAL);\n   }\n \n-  temp = expand_normal (arg);\n   if (GET_MODE_SIZE (fmode) <= UNITS_PER_WORD)\n     {\n       imode = int_mode_for_mode (fmode);"}, {"sha": "8336a8fe63d77c444088af4f18eb6dab54c03909", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=0f67fa83f2c26552227efc893ae27a910a40e140", "patch": "@@ -156,6 +156,13 @@ extern enum processor_flags s390_arch_flags;\n #define S390_TDC_POSITIVE_SIGNALING_NAN       (1 << 1)\n #define S390_TDC_NEGATIVE_SIGNALING_NAN       (1 << 0)\n \n+#define S390_TDC_SIGNBIT_SET (S390_TDC_NEGATIVE_ZERO \\\n+                          | S390_TDC_NEGATIVE_NORMALIZED_NUMBER \\\n+                          | S390_TDC_NEGATIVE_DENORMALIZED_NUMBER\\\n+                          | S390_TDC_NEGATIVE_INFINITY \\\n+                          | S390_TDC_NEGATIVE_QUIET_NAN \\\n+\t\t\t  | S390_TDC_NEGATIVE_SIGNALING_NAN )\n+\n #define S390_TDC_INFINITY (S390_TDC_POSITIVE_INFINITY \\\n \t\t\t  | S390_TDC_NEGATIVE_INFINITY )\n "}, {"sha": "eb05553a98e22d831d78770b67ae4280110681ca", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=0f67fa83f2c26552227efc893ae27a910a40e140", "patch": "@@ -2308,6 +2308,18 @@\n ; Test data class.\n ;\n \n+(define_expand \"signbit<mode>2\"\n+  [(set (reg:CCZ CC_REGNUM)\n+        (unspec:CCZ [(match_operand:BFP 1 \"register_operand\" \"f\") \n+                     (match_dup 2)] \n+                     UNSPEC_TDC_INSN))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (unspec:SI [(reg:CCZ CC_REGNUM)] UNSPEC_CCZ_TO_INT))]\n+  \"TARGET_HARD_FLOAT\"\n+{\n+  operands[2] = GEN_INT (S390_TDC_SIGNBIT_SET);\n+})\n+\n (define_expand \"isinf<mode>2\"\n   [(set (reg:CCZ CC_REGNUM)\n         (unspec:CCZ [(match_operand:BFP 1 \"register_operand\" \"f\") "}, {"sha": "3ed772e0db70d071260eb193a6bb8718651a30de", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=0f67fa83f2c26552227efc893ae27a910a40e140", "patch": "@@ -177,6 +177,7 @@ static const char * const optabs[] =\n   \"push_optab->handlers[$A].insn_code = CODE_FOR_$(push$a1$)\",\n   \"reload_in_optab[$A] = CODE_FOR_$(reload_in$a$)\",\n   \"reload_out_optab[$A] = CODE_FOR_$(reload_out$a$)\",\n+  \"signbit_optab[$A] = CODE_FOR_$(signbit$F$a2$)\",\n   \"movmem_optab[$A] = CODE_FOR_$(movmem$a$)\",\n   \"cmpstr_optab[$A] = CODE_FOR_$(cmpstr$a$)\",\n   \"cmpstrn_optab[$A] = CODE_FOR_$(cmpstrn$a$)\","}, {"sha": "1af4388ef328d6cd0ab8d99ec7e6396273d77bb3", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=0f67fa83f2c26552227efc893ae27a910a40e140", "patch": "@@ -5655,6 +5655,7 @@ init_optabs (void)\n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n       movmem_optab[i] = CODE_FOR_nothing;\n+      signbit_optab[i] = CODE_FOR_nothing;\n       cmpstr_optab[i] = CODE_FOR_nothing;\n       cmpstrn_optab[i] = CODE_FOR_nothing;\n       cmpmem_optab[i] = CODE_FOR_nothing;"}, {"sha": "aed7a5488a387b6a8e26eab20b7b7afe90d51524", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67fa83f2c26552227efc893ae27a910a40e140/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=0f67fa83f2c26552227efc893ae27a910a40e140", "patch": "@@ -553,6 +553,9 @@ extern enum insn_code vcondu_gen_code[NUM_MACHINE_MODES];\n /* This array records the insn_code of insns to perform block moves.  */\n extern enum insn_code movmem_optab[NUM_MACHINE_MODES];\n \n+/* This array records the insn_code of insns to implement the signbit function.  */\n+extern enum insn_code signbit_optab[NUM_MACHINE_MODES];\n+\n /* This array records the insn_code of insns to perform block sets.  */\n extern enum insn_code setmem_optab[NUM_MACHINE_MODES];\n "}]}