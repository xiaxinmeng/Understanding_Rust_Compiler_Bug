{"sha": "5faf1c8c7ab64340945972ee5acb9eb0a655567a", "node_id": "C_kwDOANBUbNoAKDVmYWYxYzhjN2FiNjQzNDA5NDU5NzJlZTVhY2I5ZWIwYTY1NTU2N2E", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-19T12:26:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-19T20:22:52Z"}, "message": "libstdc++: Use __is_single_threaded in locale initialization\n\nThis replaces a __gthread_active_p() check with __is_single_threaded()\nso that std::locale initialization doesn't use __gthread_once if it\nhappens before the first thread is created.\n\nThis means that _S_initialize_once() might now be called twice instead\nof only once, because if __is_single_threaded() changes to false then we\nwill do the __gthread_once call even if _S_initialize_once() was already\ncalled. Add a check to _S_initialize_once() and return immediately if\nit is the second call.\n\nAlso use __builtin_expect to _S_initialize, as the branch will be taken\nat most once in the lifetime of the program.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++98/locale_init.cc (_S_initialize_once): Check if\n\tinitialization has already been done.\n\t(_S_initialize): Replace __gthread_active_p with\n\t__is_single_threaded. Use __builtin_expect.", "tree": {"sha": "ab1a05f24e1885afd867d1d41ce649fc0cc5a2e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab1a05f24e1885afd867d1d41ce649fc0cc5a2e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5faf1c8c7ab64340945972ee5acb9eb0a655567a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5faf1c8c7ab64340945972ee5acb9eb0a655567a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5faf1c8c7ab64340945972ee5acb9eb0a655567a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5faf1c8c7ab64340945972ee5acb9eb0a655567a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f8d01eb1476a997eb1fc686b60fccdf97747faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8d01eb1476a997eb1fc686b60fccdf97747faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8d01eb1476a997eb1fc686b60fccdf97747faa"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "ff563b80465c382b19f74393b6f4118c80796cc3", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5faf1c8c7ab64340945972ee5acb9eb0a655567a/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5faf1c8c7ab64340945972ee5acb9eb0a655567a/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=5faf1c8c7ab64340945972ee5acb9eb0a655567a", "patch": "@@ -31,6 +31,7 @@\n #include <cctype>\n #include <cwctype>     // For towupper, etc.\n #include <locale>\n+#include <ext/atomicity.h>\n #include <ext/concurrence.h>\n \n #if _GLIBCXX_USE_DUAL_ABI\n@@ -321,6 +322,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   void\n   locale::_S_initialize_once() throw()\n   {\n+    // Need to check this because we could get called once from _S_initialize()\n+    // when the program is single-threaded, and then again (via __gthread_once)\n+    // when it's multi-threaded.\n+    if (_S_classic)\n+      return;\n+\n     // 2 references.\n     // One reference for _S_classic, one for _S_global\n     _S_classic = new (&c_locale_impl) _Impl(2);\n@@ -332,10 +339,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   locale::_S_initialize()\n   {\n #ifdef __GTHREADS\n-    if (__gthread_active_p())\n+    if (!__gnu_cxx::__is_single_threaded())\n       __gthread_once(&_S_once, _S_initialize_once);\n #endif\n-    if (!_S_classic)\n+    if (__builtin_expect(!_S_classic, 0))\n       _S_initialize_once();\n   }\n "}]}