{"sha": "17b706a6876c5dcc2f3f104d39cd445264fe21e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiNzA2YTY4NzZjNWRjYzJmM2YxMDRkMzljZDQ0NTI2NGZlMjFlNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-13T15:35:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-13T15:35:46Z"}, "message": "h8300.c (adds_subs_operand): Fix thinko in last change.\n\n        * h8300/h8300.c (adds_subs_operand): Fix thinko in last change.\n\n        * h8300/h8300.md (subhi3): Turn into a define_expand.\n        (subhi3 using adds_subs): New pattern.\n        (H8300 subhi): Derived from old subhi pattern.  Simplified.\n        (H8300H subhi): Likewise.\n        (subsi using adds_subs): New pattern.  Only used on H8300H.\n        (subsi_h8300): Allow \"a\" registers as destination.\n        (subsi_h8300h): Allow \"a\" registers as destination.  Simplify.\n\n        * h8300/h8300.md (bcs_qiqi, bcs_hihi, bs_hiqi): Fix thinkos\n        in last change.\n\nFrom-SVN: r11754", "tree": {"sha": "459957eb8aedea94bdaefb5ea507177884636ebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/459957eb8aedea94bdaefb5ea507177884636ebc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17b706a6876c5dcc2f3f104d39cd445264fe21e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b706a6876c5dcc2f3f104d39cd445264fe21e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b706a6876c5dcc2f3f104d39cd445264fe21e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b706a6876c5dcc2f3f104d39cd445264fe21e4/comments", "author": null, "committer": null, "parents": [{"sha": "a3ec0d4b2d4eb03fdbb43384b053accb72eed80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ec0d4b2d4eb03fdbb43384b053accb72eed80e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ec0d4b2d4eb03fdbb43384b053accb72eed80e"}], "stats": {"total": 117, "additions": 85, "deletions": 32}, "files": [{"sha": "4ea0cfa9e552fb83700880a08697bda75ff4068c", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b706a6876c5dcc2f3f104d39cd445264fe21e4/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b706a6876c5dcc2f3f104d39cd445264fe21e4/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=17b706a6876c5dcc2f3f104d39cd445264fe21e4", "patch": "@@ -444,11 +444,11 @@ adds_subs_operand (op, mode)\n \treturn 1;\n       if (TARGET_H8300H\n \t  && INTVAL (op) != 7\n-\t  && (INTVAL (op) <= 8 || INTVAL (op) >= 0))\n+\t  && (INTVAL (op) <= 8 && INTVAL (op) >= 0))\n \treturn 1;\n       if (TARGET_H8300H\n \t  && INTVAL (op) != -7\n-\t  && (INTVAL (op) >= -8 || INTVAL (op) <= 0))\n+\t  && (INTVAL (op) >= -8 && INTVAL (op) <= 0))\n \treturn 1;\n     }\n   return 0;"}, {"sha": "282710efedc1dae1e89a198ea792092d2f0ea746", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 83, "deletions": 30, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b706a6876c5dcc2f3f104d39cd445264fe21e4/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b706a6876c5dcc2f3f104d39cd445264fe21e4/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=17b706a6876c5dcc2f3f104d39cd445264fe21e4", "patch": "@@ -39,6 +39,9 @@\n ;; Some move patterns have conditions which check that one operand\n ;; is a register.  Shouldn't all of them have such a condition?\n \n+;; Consistently use \"a\" constraint.  Probably makes little difference\n+;; in the generated code, but it's easy to do.\n+\n ;; Loading some 32bit integer constants could be done more\n ;; efficiently.  For example loading the value 4 as a 32bit\n ;; is normally done via mov.l #4,erX.  sub.l erX,erX, inc.l #4,erX \n@@ -682,23 +685,54 @@\n \n ;; h8300h: subs operates on the 32bit register.  We can use it because we don't\n ;; use the e0-7 registers.\n-;; ??? 4 can be handled in one insn on the 300h.\n-;; ??? The fourth alternative can use sub.w on the 300h.\n-;; ??? Should the 'n' constraint be an 'i' here?\n \n-(define_insn \"subhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=ra,ra,ra,r\")\n-\t(minus:HI (match_operand:HI 1 \"general_operand\" \"0,0,0,0\")\n-\t\t  (match_operand:HI 2 \"nonmemory_operand\" \"K,M,ra,n\")))]\n+(define_expand \"subhi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(minus:HI (match_operand:HI 1 \"general_operand\" \"\")\n+\t\t  (match_operand:HI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n+  \"\")\n+\n+;; Specialized version using adds/subs.  This must come before\n+;; the more general patterns below.  This may not be needed\n+;; due to instruction canonicalization.\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=ra\")\n+\t(minus:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:HI 2 \"adds_subs_operand\" \"i\")))]\n+  \"\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (-INTVAL (operands[2]));\n+  return output_adds_subs (operands);\n+}\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"none_0hit\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=ra,&ra\")\n+\t(minus:HI (match_operand:HI 1 \"general_operand\" \"0,0\")\n+\t\t  (match_operand:HI 2 \"nonmemory_operand\" \"ra,n\")))]\n+  \"TARGET_H8300\"\n   \"@\n-   subs\t%T2,%T0\n-   subs\t#2,%T0\\;subs\t%M2,%T0\n    sub.w\t%T2,%T0\n    add.b\t%E2,%s0\\;addx\t%F2,%t0 ; -%0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2,4,2,4\")\n-   (set_attr \"cc\" \"none_0hit,none_0hit,set_zn_c0,clobber\")])\n+  [(set_attr \"type\" \"arith,multi\")\n+   (set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"set_zn_c0,clobber\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=ra,&ra\")\n+\t(minus:HI (match_operand:HI 1 \"general_operand\" \"0,0\")\n+\t\t  (match_operand:HI 2 \"nonmemory_operand\" \"ra,i\")))]\n+  \"TARGET_H8300H\"\n+  \"@\n+   sub.w\t%T2,%T0\n+   sub.w\t%T2,%T0\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \n (define_expand \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -717,21 +751,34 @@\n    (set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n \n-;; ??? 4 can be handled in one insn on the 300h.\n+;; Specialized version using adds/subs.  This must come before\n+;; the more general patterns below.  This may not be needed\n+;; due to instruction canonicalization.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=ra\")\n+\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+\t\t  (match_operand:SI 2 \"adds_subs_operand\" \"i\")))]\n+  \"TARGET_H8300H\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (-INTVAL (operands[2]));\n+  return output_adds_subs (operands);\n+}\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"subsi3_h8300h\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=ra,ra,ra,r\")\n-\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0,0,0,0\")\n-\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"K,M,ra,n\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=ra,ra\")\n+\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0,0\")\n+\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"ra,i\")))]\n   \"TARGET_H8300H\"\n   \"@\n-   subs\t%T2,%T0\n-   subs\t#2,%T0\\;subs\t%E2,%T0\n    sub.l\t%S2,%S0\n    sub.l\t%S2,%S0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2,4,2,6\")\n-   (set_attr \"cc\" \"none_0hit,none_0hit,set_zn_c0,set_zn_c0\")])\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"length\" \"2,6\")\n+   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; MULTIPLY INSTRUCTIONS\n@@ -1774,15 +1821,17 @@\n   int branch_length = get_attr_length (insn);\n \n   if (! register_operand (operands[2], QImode))\n+    branch_length -= 4;\n+  else\n     branch_length -= 2;\n \n   output_asm_insn(\\\"bld\t%Z3,%Y2\\\", operands);\n   if (branch_length == 2) \n-    return \\\"b%d1\t%l0\\\";\n+    return \\\"%d1\t%l0\\\";\n   else if (branch_length == 4) \n-    return \\\"b%d1\t%l0:16\\\";\n+    return \\\"%d1\t%l0:16\\\";\n   else\n-    return \\\"b%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n+    return \\\"%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n }\" \n   [(set_attr \"type\" \"bcs\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1806,15 +1855,17 @@\n   int branch_length = get_attr_length (insn);\n \n   if (! register_operand (operands[2], QImode))\n+    branch_length -= 4;\n+  else\n     branch_length -= 2;\n \n   output_asm_insn(\\\"bld\t%Z3,%Y2\\\", operands);\n   if (branch_length == 2) \n-    return \\\"b%d1\t%l0\\\";\n+    return \\\"%d1\t%l0\\\";\n   else if (branch_length == 4) \n-    return \\\"b%d1\t%l0:16\\\";\n+    return \\\"%d1\t%l0:16\\\";\n   else\n-    return \\\"b%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n+    return \\\"%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n }\" \n   [(set_attr \"type\" \"bcs\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1838,15 +1889,17 @@\n   int branch_length = get_attr_length (insn);\n \n   if (! register_operand (operands[2], QImode))\n+    branch_length -= 4;\n+  else\n     branch_length -= 2;\n \n   output_asm_insn(\\\"bld\t%Z3,%Y2\\\", operands);\n   if (branch_length == 2) \n-    return \\\"b%d1\t%l0\\\";\n+    return \\\"%d1\t%l0\\\";\n   else if (branch_length == 4) \n-    return \\\"b%d1\t%l0:16\\\";\n+    return \\\"%d1\t%l0:16\\\";\n   else\n-    return \\\"b%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n+    return \\\"%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n }\" \n   [(set_attr \"type\" \"bcs\")\n    (set_attr \"cc\" \"clobber\")])"}]}