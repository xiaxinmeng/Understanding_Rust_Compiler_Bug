{"sha": "f99303eb4aafef70075951731b3ad99266fe6225", "node_id": "C_kwDOANBUbNoAKGY5OTMwM2ViNGFhZmVmNzAwNzU5NTE3MzFiM2FkOTkyNjZmZTYyMjU", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-01-29T20:06:59Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-02-21T14:33:38Z"}, "message": "d: Merge upstream dmd, druntime 09faa4eacd, phobos 13ef27a56.\n\nD front-end changes:\n\n\t- Import dmd v2.102.0-beta.1\n\t- `static assert' now supports multiple message arguments.\n\nD runtime changes:\n\n\t- Import druntime v2.102.0-beta.1\n\t- The default `Throwable.TraceInfo' generation now is `@nogc'.\n\t- `Object.factory' method has now been deprecated.\n\nPhobos changes:\n\n\t- Import phobos v2.102.0-beta.1\n\t- Added float- and double-precision implementations for log\n\t  function families in std.math.\n\t- `std.typecons.Unique' now calls `destroy` on struct types\n\ngcc/d/ChangeLog:\n\n\t* Make-lang.in (D_FRONTEND_OBJS): Add d/location.o.\n\t* d-lang.cc (d_init_options): Update for new front-end interface.\n\t(d_post_options): Call Loc::set after handling options.\n\t* dmd/MERGE: Merge upstream dmd 09faa4eacd.\n\t* dmd/VERSION: Bump version to v2.102.0-beta.1.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime 09faa4eacd.\n\t* src/MERGE: Merge upstream phobos 13ef27a56.\n\t* testsuite/libphobos.exceptions/refcounted.d: Add test for chained\n\treference counted exceptions.\n\t* testsuite/libphobos.shared/finalize.d: Add dg-warning for deprecated\n\tfactory interfaces.\n\t* testsuite/libphobos.gc/issue22843.d: New test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/simd2a.d: Update.\n\t* gdc.dg/simd2b.d: Update.\n\t* gdc.dg/simd2c.d: Update.\n\t* gdc.dg/simd2d.d: Update.\n\t* gdc.dg/simd2e.d: Update.\n\t* gdc.dg/simd2f.d: Update.\n\t* gdc.dg/simd2g.d: Update.\n\t* gdc.dg/simd2h.d: Update.\n\t* gdc.dg/simd2i.d: Update.\n\t* gdc.dg/simd2j.d: Update.", "tree": {"sha": "582ebb6e3e8fd966732bc3b92da1a63caad1aca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/582ebb6e3e8fd966732bc3b92da1a63caad1aca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99303eb4aafef70075951731b3ad99266fe6225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99303eb4aafef70075951731b3ad99266fe6225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99303eb4aafef70075951731b3ad99266fe6225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99303eb4aafef70075951731b3ad99266fe6225/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9dd9de169034810b92d47bf78284db731fa5da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9dd9de169034810b92d47bf78284db731fa5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9dd9de169034810b92d47bf78284db731fa5da"}], "stats": {"total": 3626, "additions": 2627, "deletions": 999}, "files": [{"sha": "4feebac982ba7b30e64a18cdbbe48024f280d0fc", "filename": "gcc/d/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FMake-lang.in?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -147,6 +147,7 @@ D_FRONTEND_OBJS = \\\n \td/json.o \\\n \td/lambdacomp.o \\\n \td/lexer.o \\\n+\td/location.o \\\n \td/mtype.o \\\n \td/mustuse.o \\\n \td/nogc.o \\"}, {"sha": "449c69296a770638fc9588a8abca717f0f656417", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -303,7 +303,7 @@ d_init_options (unsigned int, cl_decoded_option *decoded_options)\n   /* Warnings and deprecations are disabled by default.  */\n   global.params.useDeprecated = DIAGNOSTICinform;\n   global.params.warnings = DIAGNOSTICoff;\n-  global.params.messageStyle = MESSAGESTYLEgnu;\n+  global.params.messageStyle = MessageStyle::gnu;\n \n   global.params.imppath = d_gc_malloc<Strings> ();\n   global.params.fileImppath = d_gc_malloc<Strings> ();\n@@ -940,6 +940,9 @@ d_post_options (const char ** fn)\n   global.params.showColumns = flag_show_column;\n   global.params.printErrorContext = flag_diagnostics_show_caret;\n \n+  /* Keep the front-end location type in sync with params.  */\n+  Loc::set (global.params.showColumns, global.params.messageStyle);\n+\n   if (global.params.useInline)\n     global.params.dihdr.fullOutput = true;\n "}, {"sha": "ac3dd1292685979e3dd29bba401c8eb7a6628118", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,4 +1,4 @@\n-c8ae4adb2eda515b09b326948e3a4aa9f489af45\n+09faa4eacd4fb147107e94eeebf56b3a73fdcc05\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "43eb187c735b71af08d347081e509a317526683e", "filename": "gcc/d/dmd/README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2FREADME.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2FREADME.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FREADME.md?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -47,6 +47,7 @@ Note that these groups have no strict meaning, the category assignments are a bi\n | File                                                                  | Purpose                                                              |\n |-----------------------------------------------------------------------|----------------------------------------------------------------------|\n | [lexer.d](https://github.com/dlang/dmd/blob/master/compiler/src/dmd/lexer.d)   | Convert source code into tokens for the D and ImportC parsers        |\n+| [location.d](https://github.com/dlang/dmd/blob/master/compiler/src/dmd/location.d)| Encapsulate file/line/column info for error messages, etc.        |\n | [entity.d](https://github.com/dlang/dmd/blob/master/compiler/src/dmd/entity.d) | Define \"\\\\&Entity;\" escape sequence for strings / character literals |\n | [tokens.d](https://github.com/dlang/dmd/blob/master/compiler/src/dmd/tokens.d) | Define lexical tokens.                                               |\n | [parse.d](https://github.com/dlang/dmd/blob/master/compiler/src/dmd/parse.d)   | D parser, converting tokens into an Abstract Syntax Tree (AST)       |"}, {"sha": "177c41dd63bad254e35fe3350a24315155304eb2", "filename": "gcc/d/dmd/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FVERSION?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1 +1 @@\n-v2.101.0-beta.1\n+v2.102.0-beta.1"}, {"sha": "f2d68d53d752dc6286c15182a8570900e9d51e2a", "filename": "gcc/d/dmd/access.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faccess.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faccess.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faccess.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/attribute.html#visibility_attributes, Visibility Attributes)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/access.d, _access.d)\n@@ -25,6 +25,7 @@ import dmd.errors;\n import dmd.expression;\n import dmd.func;\n import dmd.globals;\n+import dmd.location;\n import dmd.mtype;\n import dmd.tokens;\n "}, {"sha": "1306a104fff540db5a2f3877e9a7ccec8f638ba2", "filename": "gcc/d/dmd/aggregate.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faggregate.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faggregate.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faggregate.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -4,7 +4,7 @@\n  * Specification: $(LINK2 https://dlang.org/spec/struct.html, Structs, Unions),\n  *                $(LINK2 https://dlang.org/spec/class.html, Class).\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/aggregate.d, _aggregate.d)\n@@ -34,6 +34,7 @@ import dmd.func;\n import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.tokens;\n import dmd.typesem : defaultInit;\n@@ -206,7 +207,7 @@ extern (C++) abstract class AggregateDeclaration : ScopeDsymbol\n         //printf(\"AggregateDeclaration::determineSize() %s, sizeok = %d\\n\", toChars(), sizeok);\n \n         // The previous instance size finalizing had:\n-        if (type.ty == Terror)\n+        if (type.ty == Terror || errors)\n             return false;   // failed already\n         if (sizeok == Sizeok.done)\n             return true;    // succeeded"}, {"sha": "9f9098f7f2b006e6015fc93b655e9341ccbd958a", "filename": "gcc/d/dmd/aggregate.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faggregate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faggregate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faggregate.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0.\n@@ -41,13 +41,6 @@ enum class Baseok : uint8_t\n     semanticdone  // all base classes semantic done\n };\n \n-enum class ThreeState : uint8_t\n-{\n-    none,         // value not yet computed\n-    no,           // value is false\n-    yes,          // value is true\n-};\n-\n FuncDeclaration *search_toString(StructDeclaration *sd);\n \n enum class ClassKind : uint8_t"}, {"sha": "ef839fae536aabea302c4d55fc7fb34b4cf5fe0a", "filename": "gcc/d/dmd/aliasthis.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faliasthis.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faliasthis.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faliasthis.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/class.html#alias-this, Alias This)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/aliasthis.d, _aliasthis.d)\n@@ -21,6 +21,7 @@ import dmd.expression;\n import dmd.expressionsem;\n import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.opover;\n import dmd.tokens;\n@@ -94,7 +95,7 @@ Expression resolveAliasThis(Scope* sc, Expression e, bool gag = false, bool find\n             Type tthis = (e.op == EXP.type ? e.type : null);\n             const flags = DotExpFlag.noAliasThis | (gag ? DotExpFlag.gag : 0);\n             uint olderrors = gag ? global.startGagging() : 0;\n-            e = dotExp(e.type, sc, e, ad.aliasthis.ident, flags);\n+            e = dotExp(ad.type, sc, e, ad.aliasthis.ident, flags);\n             if (!e || findOnly)\n                 return gag && global.endGagging(olderrors) ? null : e;\n "}, {"sha": "389cff40054d07c7587767336bf5283425e62710", "filename": "gcc/d/dmd/aliasthis.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faliasthis.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Faliasthis.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faliasthis.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 2009-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 2009-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "f5855c4758aa67852556403b0641cb9e1ff34cfd", "filename": "gcc/d/dmd/apply.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fapply.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fapply.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fapply.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * A depth-first visitor for expressions.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/apply.d, _apply.d)"}, {"sha": "da2f8000fc1c3a55cf55bfcdee10adcc9f8614a2", "filename": "gcc/d/dmd/arrayop.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Farrayop.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Farrayop.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Farrayop.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/arrays.html#array-operations, Array Operations)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/arrayop.d, _arrayop.d)\n@@ -26,6 +26,7 @@ import dmd.globals;\n import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.common.outbuffer;\n import dmd.statement;"}, {"sha": "34ffa6eb8fd7913aa387c814ba60a42e8606a38a", "filename": "gcc/d/dmd/arraytypes.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Farraytypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Farraytypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Farraytypes.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Provide aliases for arrays of certain declarations or statements.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/arraytypes.d, _arraytypes.d)"}, {"sha": "05126a53d7ee9173f0427716fe11e3c9f2b008c8", "filename": "gcc/d/dmd/arraytypes.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Farraytypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Farraytypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Farraytypes.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 2006-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 2006-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "c0dd186628af52f91a1d0b0af38b310ca2f5bd2c", "filename": "gcc/d/dmd/ast_node.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fast_node.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fast_node.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fast_node.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Defines the base class for all nodes which are part of the AST.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/ast_node.d, _ast_node.d)"}, {"sha": "6154c6d1b3afacc77b8083a07734297b137a8269", "filename": "gcc/d/dmd/ast_node.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fast_node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fast_node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fast_node.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "6e882082bed9581de19f45641bd8c7b52c34ba7f", "filename": "gcc/d/dmd/astenums.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fastenums.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fastenums.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fastenums.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Defines enums common to dmd and dmd as parse library.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/astenums.d, _astenums.d)\n  * Documentation:  https://dlang.org/phobos/dmd_astenums.html"}, {"sha": "712099ed333a339f45afb66e10a76411ab8ebb5d", "filename": "gcc/d/dmd/attrib.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fattrib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fattrib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -14,7 +14,7 @@\n  * - Protection (`private`, `public`)\n  * - Deprecated declarations (`@deprecated`)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/attrib.d, _attrib.d)\n@@ -40,6 +40,7 @@ import dmd.globals;\n import dmd.hdrgen : visibilityToBuffer;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.objc; // for objc.addSymbols\n import dmd.common.outbuffer;"}, {"sha": "96c46e8f7184d18da4b4ff0656975b09a313b3da", "filename": "gcc/d/dmd/attrib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fattrib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fattrib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "6369b5ab04b479f97611356de0f4878cda1192ea", "filename": "gcc/d/dmd/blockexit.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fblockexit.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fblockexit.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fblockexit.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Find out in what ways control flow can exit a statement block.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/blockexit.d, _blockexit.d)\n@@ -23,6 +23,7 @@ import dmd.func;\n import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.statement;\n import dmd.tokens;"}, {"sha": "27ba1e03454f4a706c76ae6b5ad12e1ff57f611b", "filename": "gcc/d/dmd/builtin.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fbuiltin.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fbuiltin.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fbuiltin.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Currently includes functions from `std.math`, `core.math` and `core.bitop`.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/builtin.d, _builtin.d)\n@@ -16,7 +16,7 @@ module dmd.builtin;\n import dmd.arraytypes;\n import dmd.expression;\n import dmd.func;\n-import dmd.globals;\n+import dmd.location;\n \n /**********************************\n  * Determine if function is a builtin one that we can"}, {"sha": "7c18040eb02790b3fcc040bea556d8eaa8929a2c", "filename": "gcc/d/dmd/canthrow.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcanthrow.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcanthrow.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcanthrow.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/function.html#nothrow-functions, Nothrow Functions)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/canthrow.d, _canthrow.d)"}, {"sha": "21a1b5e6def7ff4e8391287d68fe5a3e8a5a9ba8", "filename": "gcc/d/dmd/chkformat.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fchkformat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fchkformat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fchkformat.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Check the arguments to `printf` and `scanf` against the `format` string.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/chkformat.d, _chkformat.d)\n@@ -19,6 +19,7 @@ import dmd.errors;\n import dmd.expression;\n import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.target;\n "}, {"sha": "ef5464d75e0e0474c8faf7f9a3d21e1ff428fdb1", "filename": "gcc/d/dmd/clone.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fclone.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fclone.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fclone.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2,7 +2,7 @@\n  * Builds struct member functions if needed and not defined by the user.\n  * Includes `opEquals`, `opAssign`, post blit, copy constructor and destructor.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/clone.d, _clone.d)\n@@ -31,6 +31,7 @@ import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n import dmd.init;\n+import dmd.location;\n import dmd.mtype;\n import dmd.opover;\n import dmd.semantic2;"}, {"sha": "b9fcb0995c91448f8edb67bc6a3ebc4be0cd3209", "filename": "gcc/d/dmd/common/bitfields.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Fbitfields.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Fbitfields.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcommon%2Fbitfields.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * A library bitfields utility\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Dennis Korpel\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/common/bitfields.d, common/bitfields.d)"}, {"sha": "ae13c41d310002a6653279a4e9fb1059f8a0eb1e", "filename": "gcc/d/dmd/common/file.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Ffile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Ffile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcommon%2Ffile.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -4,7 +4,7 @@\n  * Functions and objects dedicated to file I/O and management. TODO: Move here artifacts\n  * from places such as root/ so both the frontend and the backend have access to them.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/common/file.d, common/_file.d)"}, {"sha": "276928a6bd875d065ca441ff828372b8773b5209", "filename": "gcc/d/dmd/common/outbuffer.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Foutbuffer.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Foutbuffer.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcommon%2Foutbuffer.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * An expandable buffer in which you can write text or binary data.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/outbuffer.d, root/_outbuffer.d)"}, {"sha": "b672842e74d54c7c35168039c0a1c4c73506ffdc", "filename": "gcc/d/dmd/common/outbuffer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Foutbuffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Foutbuffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcommon%2Foutbuffer.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,5 +1,5 @@\n \n-/* Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "1111cec2cf1ea8a614cdf56555d77eb45117e629", "filename": "gcc/d/dmd/common/string.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcommon%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcommon%2Fstring.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Common string functions including filename manipulation.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/common/string.d, common/_string.d)"}, {"sha": "68ec1d3848ddb21bf6b25b5b29ec4d07d345fff8", "filename": "gcc/d/dmd/compiler.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcompiler.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcompiler.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcompiler.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Describes a back-end compiler and implements compiler-specific actions.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/compiler.d, _compiler.d)"}, {"sha": "c7cbce3bd7f5bbfbee60ec29635ca6d987033916", "filename": "gcc/d/dmd/compiler.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcompiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcompiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcompiler.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "c0c4cf1ce82f45916299373093762ba8889cb506", "filename": "gcc/d/dmd/cond.d", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcond.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcond.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/version.html, Conditional Compilation)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/cond.d, _cond.d)\n@@ -26,6 +26,7 @@ import dmd.expression;\n import dmd.expressionsem;\n import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.typesem;\n import dmd.common.outbuffer;\n@@ -80,6 +81,11 @@ extern (C++) abstract class Condition : ASTNode\n         return null;\n     }\n \n+    inout(StaticIfCondition) isStaticIfCondition() inout\n+    {\n+        return null;\n+    }\n+\n     override void accept(Visitor v)\n     {\n         v.visit(this);\n@@ -218,12 +224,12 @@ extern (C++) final class StaticForeach : RootObject\n     {\n         if (aggrfe)\n         {\n-            return new ForeachStatement(loc, aggrfe.op, parameters, aggrfe.aggr.syntaxCopy(), s, loc);\n+            return new ForeachStatement(loc, aggrfe.op, parameters, aggrfe.aggr, s, loc);\n         }\n         else\n         {\n             assert(rangefe && parameters.length == 1);\n-            return new ForeachRangeStatement(loc, rangefe.op, (*parameters)[0], rangefe.lwr.syntaxCopy(), rangefe.upr.syntaxCopy(), s, loc);\n+            return new ForeachRangeStatement(loc, rangefe.op, (*parameters)[0], rangefe.lwr, rangefe.upr, s, loc);\n         }\n     }\n \n@@ -953,6 +959,11 @@ extern (C++) final class StaticIfCondition : Condition\n         v.visit(this);\n     }\n \n+    override inout(StaticIfCondition) isStaticIfCondition() inout\n+    {\n+        return this;\n+    }\n+\n     override const(char)* toChars() const\n     {\n         return exp ? exp.toChars() : \"static if\".ptr;"}, {"sha": "422a715bdba3f451bed2994b60f72604f556f881", "filename": "gcc/d/dmd/cond.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcond.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcond.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "79bbd5dead5cfa81a36a7adcbc72ecb42eddd78e", "filename": "gcc/d/dmd/constfold.d", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fconstfold.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fconstfold.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fconstfold.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -5,7 +5,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/float.html#fp_const_folding, Floating Point Constant Folding)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/constfold.d, _constfold.d)\n@@ -25,6 +25,7 @@ import dmd.dstruct;\n import dmd.errors;\n import dmd.expression;\n import dmd.globals;\n+import dmd.location;\n import dmd.mtype;\n import dmd.root.complex;\n import dmd.root.ctfloat;\n@@ -1249,7 +1250,14 @@ UnionExp Slice(Type type, Expression e1, Expression lwr, Expression upr)\n         }\n     }\n \n-    if (e1.op == EXP.string_ && lwr.op == EXP.int64 && upr.op == EXP.int64)\n+    if (!lwr)\n+    {\n+        if (e1.op == EXP.string_)\n+            emplaceExp(&ue, e1);\n+        else\n+            cantExp(ue);\n+    }\n+    else if (e1.op == EXP.string_ && lwr.op == EXP.int64 && upr.op == EXP.int64)\n     {\n         StringExp es1 = e1.isStringExp();\n         const uinteger_t ilwr = lwr.toInteger();"}, {"sha": "a6bc42b1014023b561520973597f069c1e43c5a0", "filename": "gcc/d/dmd/cparse.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcparse.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: C11\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/cparse.d, _cparse.d)\n@@ -20,6 +20,7 @@ import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n import dmd.lexer;\n+import dmd.location;\n import dmd.parse;\n import dmd.errors;\n import dmd.root.array;"}, {"sha": "d3effa99ddd78aa0420534a504d198fd338bf861", "filename": "gcc/d/dmd/cppmangle.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcppmangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fcppmangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcppmangle.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -4,7 +4,7 @@\n  * This is the POSIX side of the implementation.\n  * It exports two functions to C++, `toCppMangleItanium` and `cppTypeInfoMangleItanium`.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors: Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/cppmangle.d, _cppmangle.d)\n@@ -38,6 +38,7 @@ import dmd.func;\n import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.nspace;\n import dmd.root.array;"}, {"sha": "1071edf7c93126741f54e90a57cd02a955fb0e78", "filename": "gcc/d/dmd/ctfe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fctfe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fctfe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fctfe.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "c902149e2b52acec68aaac50f7bb15d14df6bfb9", "filename": "gcc/d/dmd/ctfeexpr.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fctfeexpr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fctfeexpr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fctfeexpr.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * CTFE for expressions involving pointers, slices, array concatenation etc.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/ctfeexpr.d, _ctfeexpr.d)\n@@ -27,6 +27,7 @@ import dmd.errors;\n import dmd.expression;\n import dmd.func;\n import dmd.globals;\n+import dmd.location;\n import dmd.mtype;\n import dmd.root.complex;\n import dmd.root.ctfloat;"}, {"sha": "a3953af6ce87435887837029d660ce0e05fa4707", "filename": "gcc/d/dmd/ctorflow.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fctorflow.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fctorflow.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fctorflow.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Manage flow analysis for constructors.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/ctorflow.d, _ctorflow.d)\n@@ -14,7 +14,7 @@ module dmd.ctorflow;\n import core.stdc.stdio;\n \n import dmd.root.rmem;\n-import dmd.globals : Loc;\n+import dmd.location;\n \n enum CSX : ushort\n {"}, {"sha": "b305360a3abc0afc7c9ea48ec159ce5999161161", "filename": "gcc/d/dmd/dcast.d", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdcast.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdcast.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdcast.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Semantic analysis for cast-expressions.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dcast.d, _dcast.d)\n@@ -30,6 +30,7 @@ import dmd.expressionsem;\n import dmd.func;\n import dmd.globals;\n import dmd.hdrgen;\n+import dmd.location;\n import dmd.impcnvtab;\n import dmd.id;\n import dmd.importc;\n@@ -66,10 +67,14 @@ Expression implicitCastTo(Expression e, Scope* sc, Type t)\n {\n     Expression visit(Expression e)\n     {\n-        //printf(\"Expression.implicitCastTo(%s of type %s) => %s\\n\", e.toChars(), e.type.toChars(), t.toChars());\n+        // printf(\"Expression.implicitCastTo(%s of type %s) => %s\\n\", e.toChars(), e.type.toChars(), t.toChars());\n \n         if (const match = (sc && sc.flags & SCOPE.Cfile) ? e.cimplicitConvTo(t) : e.implicitConvTo(t))\n         {\n+            if (match == MATCH.convert && e.type.isTypeNoreturn())\n+            {\n+                return specialNoreturnCast(e, t);\n+            }\n             if (match == MATCH.constant && (e.type.constConv(t) || !e.isLvalue() && e.type.equivalent(t)))\n             {\n                 /* Do not emit CastExp for const conversions and\n@@ -1526,6 +1531,10 @@ Expression castTo(Expression e, Scope* sc, Type t, Type att = null)\n         {\n             return e;\n         }\n+        if (e.type.isTypeNoreturn())\n+        {\n+            return specialNoreturnCast(e, t);\n+        }\n         if (auto ve = e.isVarExp())\n         {\n             VarDeclaration v = ve.var.isVarDeclaration();\n@@ -2539,7 +2548,12 @@ Expression castTo(Expression e, Scope* sc, Type t, Type att = null)\n \n         // Handle the cast from Tarray to Tsarray with CT-known slicing\n \n-        TypeSArray tsa = toStaticArrayType(e).isTypeSArray();\n+        TypeSArray tsa;\n+        {\n+            Type t = toStaticArrayType(e);\n+            tsa = t ? t.isTypeSArray() : null;\n+        }\n+\n         if (tsa && tsa.size(e.loc) == tb.size(e.loc))\n         {\n             /* Match if the sarray sizes are equal:\n@@ -3858,3 +3872,21 @@ IntRange getIntRange(Expression e)\n         case EXP.negate             : return visitNeg(e.isNegExp());\n     }\n }\n+/**\n+ * A helper function to \"cast\" from expressions of type noreturn to\n+ * any other type - noreturn is implicitly convertible to any other type.\n+ * However, the dmd backend does not like a naive cast from a noreturn expression\n+ * (particularly an `assert(0)`) so this function generates:\n+ *\n+ * `(assert(0), value)` instead of `cast(to)(assert(0))`.\n+ *\n+ * `value` is currently `to.init` however it cannot be read so could be made simpler.\n+ * Params:\n+ *   toBeCasted = Expression of type noreturn to cast\n+ *   to = Type to cast the expression to.\n+ * Returns: A CommaExp, upon any failure ErrorExp will be returned.\n+ */\n+Expression specialNoreturnCast(Expression toBeCasted, Type to)\n+{\n+    return Expression.combine(toBeCasted, to.defaultInitLiteral(toBeCasted.loc));\n+}"}, {"sha": "1fdd0730fcf335623e1c06065275543da72532c6", "filename": "gcc/d/dmd/dclass.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdclass.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdclass.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdclass.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/class.html, Classes)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dclass.d, _dclass.d)\n@@ -30,6 +30,7 @@ import dmd.func;\n import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.objc;\n import dmd.root.rmem;\n@@ -468,7 +469,7 @@ extern (C++) class ClassDeclaration : AggregateDeclaration\n     {\n         //printf(\"%s.ClassDeclaration.search('%s', flags=x%x)\\n\", toChars(), ident.toChars(), flags);\n         //if (_scope) printf(\"%s baseok = %d\\n\", toChars(), baseok);\n-        if (_scope && baseok < Baseok.done)\n+        if (_scope && baseok < Baseok.semanticdone)\n         {\n             if (!inuse)\n             {"}, {"sha": "51737cef2c6f55a3f4b30103e9b9e28cd99d5d43", "filename": "gcc/d/dmd/declaration.d", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdeclaration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdeclaration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2,7 +2,7 @@\n  * Miscellaneous declarations, including typedef, alias, variable declarations including the\n  * implicit this declaration, type tuples, ClassInfo, ModuleInfo and various TypeInfos.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/declaration.d, _declaration.d)\n@@ -35,6 +35,7 @@ import dmd.identifier;\n import dmd.init;\n import dmd.initsem;\n import dmd.intrange;\n+import dmd.location;\n import dmd.mtype;\n import dmd.common.outbuffer;\n import dmd.root.rootobject;\n@@ -81,6 +82,9 @@ bool checkFrameAccess(Loc loc, Scope* sc, AggregateDeclaration ad, size_t iStart\n /***********************************************\n  * Mark variable v as modified if it is inside a constructor that var\n  * is a field in.\n+ * Also used to allow immutable globals to be initialized inside a static constructor.\n+ * Returns:\n+ *    true if it's an initialization of v\n  */\n bool modifyFieldVar(Loc loc, Scope* sc, VarDeclaration var, Expression e1)\n {\n@@ -93,7 +97,7 @@ bool modifyFieldVar(Loc loc, Scope* sc, VarDeclaration var, Expression e1)\n             fd = s.isFuncDeclaration();\n         if (fd &&\n             ((fd.isCtorDeclaration() && var.isField()) ||\n-             (fd.isStaticCtorDeclaration() && !var.isField())) &&\n+             ((fd.isStaticCtorDeclaration() || fd.isCrtCtor) && !var.isField())) &&\n             fd.toParentDecl() == var.toParent2() &&\n             (!e1 || e1.op == EXP.this_))\n         {"}, {"sha": "5d5c4234b7456c38d22c59bf11fa89bb36bf6c76", "filename": "gcc/d/dmd/declaration.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdeclaration.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdeclaration.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "3f982b3faf770514e5590e2bca19c3de12aedb8f", "filename": "gcc/d/dmd/delegatize.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdelegatize.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdelegatize.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdelegatize.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/function.html#lazy-params, Lazy Parameters)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/delegatize.d, _delegatize.d)\n@@ -25,6 +25,7 @@ import dmd.func;\n import dmd.globals;\n import dmd.init;\n import dmd.initsem;\n+import dmd.location;\n import dmd.mtype;\n import dmd.statement;\n import dmd.tokens;"}, {"sha": "221250b27e0e574eb078662d6013925d6d9ec2a2", "filename": "gcc/d/dmd/denum.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdenum.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdenum.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdenum.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/enum.html, Enums)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/denum.d, _denum.d)\n@@ -28,6 +28,7 @@ import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n import dmd.init;\n+import dmd.location;\n import dmd.mtype;\n import dmd.tokens;\n import dmd.typesem;"}, {"sha": "b653d9bbf894e72b2101fd2f05f9c2505cffc9d7", "filename": "gcc/d/dmd/dimport.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdimport.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdimport.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdimport.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * A `Dsymbol` representing a renamed import.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dimport.d, _dimport.d)\n@@ -22,6 +22,7 @@ import dmd.errors;\n import dmd.expression;\n import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.visitor;\n "}, {"sha": "7920df799910e7bf8c1cc246ab8d31a591907e27", "filename": "gcc/d/dmd/dinterpret.d", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdinterpret.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdinterpret.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: ($LINK2 https://dlang.org/spec/function.html#interpretation, Compile Time Function Execution (CTFE))\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dinterpret.d, _dinterpret.d)\n@@ -39,6 +39,7 @@ import dmd.id;\n import dmd.identifier;\n import dmd.init;\n import dmd.initsem;\n+import dmd.location;\n import dmd.mtype;\n import dmd.printast;\n import dmd.root.rmem;\n@@ -165,7 +166,7 @@ public Expression ctfeInterpretForPragmaMsg(Expression e)\n     return e;\n }\n \n-public extern (C++) Expression getValue(VarDeclaration vd)\n+public Expression getValue(VarDeclaration vd)\n {\n     return ctfeGlobals.stack.getValue(vd);\n }\n@@ -280,33 +281,33 @@ private:\n     Expression localThis;       // value of 'this', or NULL if none\n \n public:\n-    extern (C++) size_t stackPointer()\n+    size_t stackPointer()\n     {\n         return values.length;\n     }\n \n     // The current value of 'this', or NULL if none\n-    extern (C++) Expression getThis()\n+    Expression getThis()\n     {\n         return localThis;\n     }\n \n     // Largest number of stack positions we've used\n-    extern (C++) size_t maxStackUsage()\n+    size_t maxStackUsage()\n     {\n         return maxStackPointer;\n     }\n \n     // Start a new stack frame, using the provided 'this'.\n-    extern (C++) void startFrame(Expression thisexp)\n+    void startFrame(Expression thisexp)\n     {\n         frames.push(cast(void*)cast(size_t)framepointer);\n         savedThis.push(localThis);\n         framepointer = stackPointer();\n         localThis = thisexp;\n     }\n \n-    extern (C++) void endFrame()\n+    void endFrame()\n     {\n         size_t oldframe = cast(size_t)frames[frames.length - 1];\n         localThis = savedThis[savedThis.length - 1];\n@@ -316,14 +317,14 @@ public:\n         savedThis.setDim(savedThis.length - 1);\n     }\n \n-    extern (C++) bool isInCurrentFrame(VarDeclaration v)\n+    bool isInCurrentFrame(VarDeclaration v)\n     {\n         if (v.isDataseg() && !v.isCTFE())\n             return false; // It's a global\n         return v.ctfeAdrOnStack >= framepointer;\n     }\n \n-    extern (C++) Expression getValue(VarDeclaration v)\n+    Expression getValue(VarDeclaration v)\n     {\n         //printf(\"getValue() %s\\n\", v.toChars());\n         if ((v.isDataseg() || v.storage_class & STC.manifest) && !v.isCTFE())\n@@ -335,15 +336,15 @@ public:\n         return values[v.ctfeAdrOnStack];\n     }\n \n-    extern (C++) void setValue(VarDeclaration v, Expression e)\n+    void setValue(VarDeclaration v, Expression e)\n     {\n         //printf(\"setValue() %s : %s\\n\", v.toChars(), e.toChars());\n         assert(!v.isDataseg() || v.isCTFE());\n         assert(v.ctfeAdrOnStack < stackPointer());\n         values[v.ctfeAdrOnStack] = e;\n     }\n \n-    extern (C++) void push(VarDeclaration v)\n+    void push(VarDeclaration v)\n     {\n         //printf(\"push() %s\\n\", v.toChars());\n         assert(!v.isDataseg() || v.isCTFE());\n@@ -359,7 +360,7 @@ public:\n         values.push(null);\n     }\n \n-    extern (C++) void pop(VarDeclaration v)\n+    void pop(VarDeclaration v)\n     {\n         assert(!v.isDataseg() || v.isCTFE());\n         assert(!v.isReference());\n@@ -373,7 +374,7 @@ public:\n         }\n     }\n \n-    extern (C++) void popAll(size_t stackpointer)\n+    void popAll(size_t stackpointer)\n     {\n         if (stackPointer() > maxStackPointer)\n             maxStackPointer = stackPointer();\n@@ -388,7 +389,7 @@ public:\n         savedId.setDim(stackpointer);\n     }\n \n-    extern (C++) void saveGlobalConstant(VarDeclaration v, Expression e)\n+    void saveGlobalConstant(VarDeclaration v, Expression e)\n     {\n         assert(v._init && (v.isConst() || v.isImmutable() || v.storage_class & STC.manifest) && !v.isCTFE());\n         v.ctfeAdrOnStack = cast(uint)globalValues.length;\n@@ -1529,7 +1530,7 @@ public:\n         }\n         // Little sanity check to make sure it's really a Throwable\n         ClassReferenceExp boss = oldest.thrown;\n-        const next = 4;                         // index of Throwable.next\n+        const next = 5;                         // index of Throwable.next\n         assert((*boss.value.elements)[next].type.ty == Tclass); // Throwable.next\n         ClassReferenceExp collateral = newest.thrown;\n         if (collateral.originalClass().isErrorException() && !boss.originalClass().isErrorException())\n@@ -1849,10 +1850,27 @@ public:\n         {\n             printf(\"%s StringExp::interpret() %s\\n\", e.loc.toChars(), e.toChars());\n         }\n-        /* Attempts to modify string literals are prevented\n-         * in BinExp::interpretAssignCommon.\n-         */\n-        result = e;\n+        if (e.ownedByCtfe >= OwnedBy.ctfe) // We've already interpreted the string\n+        {\n+            result = e;\n+            return;\n+        }\n+\n+        if (e.type.ty != Tsarray ||\n+            (cast(TypeNext)e.type).next.mod & (MODFlags.const_ | MODFlags.immutable_))\n+        {\n+            // If it's immutable, we don't need to dup it. Attempts to modify\n+            // string literals are prevented in BinExp::interpretAssignCommon.\n+            result = e;\n+        }\n+        else\n+        {\n+            // https://issues.dlang.org/show_bug.cgi?id=20811\n+            // Create a copy of mutable string literals, so that any change in\n+            // value via an index or slice will not survive CTFE.\n+            *pue = copyLiteral(e);\n+            result = pue.exp();\n+        }\n     }\n \n     override void visit(FuncExp e)\n@@ -4287,12 +4305,12 @@ public:\n                 bool needsPostblit;\n                 bool needsDtor;\n \n-                extern (C++) Expression assignTo(ArrayLiteralExp ae)\n+                Expression assignTo(ArrayLiteralExp ae)\n                 {\n                     return assignTo(ae, 0, ae.elements.length);\n                 }\n \n-                extern (C++) Expression assignTo(ArrayLiteralExp ae, size_t lwr, size_t upr)\n+                Expression assignTo(ArrayLiteralExp ae, size_t lwr, size_t upr)\n                 {\n                     Expressions* w = ae.elements;\n                     assert(ae.type.ty == Tsarray || ae.type.ty == Tarray);\n@@ -6178,7 +6196,7 @@ public:\n     {\n         debug (LOG)\n         {\n-            printf(\"%s ThrowExpression::interpret()\\n\", e.loc.toChars());\n+            printf(\"%s ThrowExpression::interpret()\\n\", te.loc.toChars());\n         }\n         interpretThrow(te.e1, te.loc);\n     }"}, {"sha": "6fc23e99e8680b9dc56e62afb14fa1cb7801be31", "filename": "gcc/d/dmd/dmacro.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdmacro.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdmacro.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmacro.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Text macro processor for Ddoc.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dmacro.d, _dmacro.d)"}, {"sha": "867d3cacb2f2531ca7dbc6a3f437868511f52f57", "filename": "gcc/d/dmd/dmangle.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdmangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdmangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/abi.html#name_mangling, Name Mangling)\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors: Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dmangle.d, _dmangle.d)"}, {"sha": "e1234e5bde95e6f3efbc10af551df0bfc5001b75", "filename": "gcc/d/dmd/dmodule.d", "status": "modified", "additions": 75, "deletions": 22, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdmodule.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdmodule.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/module.html, Modules)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dmodule.d, _dmodule.d)\n@@ -35,6 +35,7 @@ import dmd.file_manager;\n import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.parse;\n import dmd.cparse;\n import dmd.root.array;\n@@ -359,7 +360,8 @@ extern (C++) final class Module : Package\n     Package pkg;                // if isPackageFile is true, the Package that contains this package.d\n     Strings contentImportedFiles; // array of files whose content was imported\n     int needmoduleinfo;\n-    int selfimports;            // 0: don't know, 1: does not, 2: does\n+    private ThreeState selfimports;\n+    private ThreeState rootimports;\n     Dsymbol[void*] tagSymTab;   /// ImportC: tag symbols that conflict with other symbols used as the index\n \n     private OutBuffer defines;  // collect all the #define lines here\n@@ -371,48 +373,46 @@ extern (C++) final class Module : Package\n     bool selfImports()\n     {\n         //printf(\"Module::selfImports() %s\\n\", toChars());\n-        if (selfimports == 0)\n+        if (selfimports == ThreeState.none)\n         {\n             foreach (Module m; amodules)\n-                m.insearch = 0;\n-            selfimports = imports(this) + 1;\n+                m.insearch = false;\n+            selfimports = imports(this) ? ThreeState.yes : ThreeState.no;\n             foreach (Module m; amodules)\n-                m.insearch = 0;\n+                m.insearch = false;\n         }\n-        return selfimports == 2;\n+        return selfimports == ThreeState.yes;\n     }\n \n-    int rootimports;            // 0: don't know, 1: does not, 2: does\n-\n     /*************************************\n      * Return true if module imports root module.\n      */\n     bool rootImports()\n     {\n         //printf(\"Module::rootImports() %s\\n\", toChars());\n-        if (rootimports == 0)\n+        if (rootimports == ThreeState.none)\n         {\n             foreach (Module m; amodules)\n-                m.insearch = 0;\n-            rootimports = 1;\n+                m.insearch = false;\n+            rootimports = ThreeState.no;\n             foreach (Module m; amodules)\n             {\n                 if (m.isRoot() && imports(m))\n                 {\n-                    rootimports = 2;\n+                    rootimports = ThreeState.yes;\n                     break;\n                 }\n             }\n             foreach (Module m; amodules)\n-                m.insearch = 0;\n+                m.insearch = false;\n         }\n-        return rootimports == 2;\n+        return rootimports == ThreeState.yes;\n     }\n \n-    int insearch;\n-    Identifier searchCacheIdent;\n-    Dsymbol searchCacheSymbol;  // cached value of search\n-    int searchCacheFlags;       // cached flags\n+    private Identifier searchCacheIdent;\n+    private Dsymbol searchCacheSymbol;  // cached value of search\n+    private int searchCacheFlags;       // cached flags\n+    private bool insearch;\n \n     /**\n      * A root module is one that will be compiled all the way to\n@@ -1041,9 +1041,9 @@ extern (C++) final class Module : Package\n \n         uint errors = global.errors;\n \n-        insearch = 1;\n+        insearch = true;\n         Dsymbol s = ScopeDsymbol.search(loc, ident, flags);\n-        insearch = 0;\n+        insearch = false;\n \n         if (errors == global.errors)\n         {\n@@ -1214,7 +1214,7 @@ extern (C++) final class Module : Package\n                 return true;\n             if (!mi.insearch)\n             {\n-                mi.insearch = 1;\n+                mi.insearch = true;\n                 int r = mi.imports(m);\n                 if (r)\n                     return r;\n@@ -1284,6 +1284,59 @@ extern (C++) final class Module : Package\n             _escapetable = new Escape();\n         return _escapetable;\n     }\n+\n+    /****************************\n+     * A Singleton that loads core.atomic\n+     * Returns:\n+     *  Module of core.atomic, null if couldn't find it\n+     */\n+    extern (D) static Module loadCoreAtomic()\n+    {\n+        __gshared Module core_atomic;\n+        return loadModuleFromLibrary(core_atomic, Id.core, Id.atomic);\n+    }\n+\n+    /****************************\n+     * A Singleton that loads std.math\n+     * Returns:\n+     *  Module of std.math, null if couldn't find it\n+     */\n+    extern (D) static Module loadStdMath()\n+    {\n+        __gshared Module std_math;\n+        return loadModuleFromLibrary(std_math, Id.std, Id.math);\n+    }\n+\n+    /**********************************\n+     * Load a Module from the library.\n+     * Params:\n+     *  mod = cached return value of this call\n+     *  pkgid = package id\n+     *  modid = module id\n+     * Returns:\n+     *  Module loaded, null if cannot load it\n+     */\n+    private static Module loadModuleFromLibrary(ref Module mod, Identifier pkgid, Identifier modid)\n+    {\n+        if (mod)\n+            return mod;\n+\n+        auto ids = new Identifier[1];\n+        ids[0] = pkgid;\n+        auto imp = new Import(Loc.initial, ids[], modid, null, true);\n+        // Module.load will call fatal() if there's no module available.\n+        // Gag the error here, pushing the error handling to the caller.\n+        const errors = global.startGagging();\n+        imp.load(null);\n+        if (imp.mod)\n+        {\n+            imp.mod.importAll(null);\n+            imp.mod.dsymbolSemantic(null);\n+        }\n+        global.endGagging(errors);\n+        mod = imp.mod;\n+        return mod;\n+    }\n }\n \n /***********************************************************"}, {"sha": "732a7370a77e34394b805279ee4ff36df29d9185", "filename": "gcc/d/dmd/doc.d", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdoc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdoc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdoc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/ddoc.html, Documentation Generator)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/doc.d, _doc.d)\n@@ -41,6 +41,7 @@ import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n import dmd.lexer;\n+import dmd.location;\n import dmd.mtype;\n import dmd.root.array;\n import dmd.root.file;\n@@ -5181,7 +5182,8 @@ private void highlightCode2(Scope* sc, Dsymbols* a, ref OutBuffer buf, size_t of\n {\n     uint errorsave = global.startGagging();\n \n-    scope Lexer lex = new Lexer(null, cast(char*)buf[].ptr, 0, buf.length - 1, 0, 1);\n+    scope Lexer lex = new Lexer(null, cast(char*)buf[].ptr, 0, buf.length - 1, 0, 1,\n+        global.vendor, global.versionNumber());\n     OutBuffer res;\n     const(char)* lastp = cast(char*)buf[].ptr;\n     //printf(\"highlightCode2('%.*s')\\n\", cast(int)(buf.length - 1), buf[].ptr);"}, {"sha": "d16806beda2ac9176bed398f304ad1ea311c5f72", "filename": "gcc/d/dmd/doc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdoc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdoc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdoc.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "8f196266c79cd5a0e1c10df6ce9e19c113f71c17", "filename": "gcc/d/dmd/dscope.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdscope.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdscope.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Not to be confused with the `scope` storage class.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dscope.d, _dscope.d)\n@@ -33,6 +33,7 @@ import dmd.func;\n import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.common.outbuffer;\n import dmd.root.rmem;\n import dmd.root.speller;"}, {"sha": "6ab93d4c39c67e87ad2013378367c5ced7a20417", "filename": "gcc/d/dmd/dstruct.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdstruct.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdstruct.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/struct.html, Structs, Unions)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dstruct.d, _dstruct.d)\n@@ -29,6 +29,7 @@ import dmd.func;\n import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.opover;\n import dmd.target;"}, {"sha": "3611e09c2867701ebaf27d1d88002456ab4a3c48", "filename": "gcc/d/dmd/dsymbol.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdsymbol.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdsymbol.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * The base class for a D symbol, which can be a module, variable, function, enum, etc.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dsymbol.d, _dsymbol.d)\n@@ -42,6 +42,7 @@ import dmd.id;\n import dmd.identifier;\n import dmd.init;\n import dmd.lexer;\n+import dmd.location;\n import dmd.mtype;\n import dmd.nspace;\n import dmd.opover;"}, {"sha": "88110e1f5d2f4d6834491dacc36eb0d5b7c164f7", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0.\n@@ -87,6 +87,13 @@ struct Ungag\n     ~Ungag() { global.gag = oldgag; }\n };\n \n+enum class ThreeState : uint8_t\n+{\n+    none,         // value not yet computed\n+    no,           // value is false\n+    yes,          // value is true\n+};\n+\n void dsymbolSemantic(Dsymbol *dsym, Scope *sc);\n void semantic2(Dsymbol *dsym, Scope *sc);\n void semantic3(Dsymbol *dsym, Scope* sc);"}, {"sha": "49e1c5978798118ec24ea48c9edb207ad5f9e276", "filename": "gcc/d/dmd/dsymbolsem.d", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbolsem.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2,7 +2,7 @@\n  * Does the semantic 1 pass on the AST, which looks at symbol declarations but not initializers\n  * or function bodies.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dsymbolsem.d, _dsymbolsem.d)\n@@ -51,6 +51,7 @@ import dmd.init;\n import dmd.initsem;\n import dmd.intrange;\n import dmd.hdrgen;\n+import dmd.location;\n import dmd.mtype;\n import dmd.mustuse;\n import dmd.nogc;\n@@ -1594,6 +1595,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                 if (pd.ident == Id.printf || pd.ident == Id.scanf)\n                 {\n                     s.setPragmaPrintf(pd.ident == Id.printf);\n+                    s.dsymbolSemantic(sc2);\n                     continue;\n                 }\n \n@@ -2310,6 +2312,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             auto inneruda = em.userAttribDecl.userAttribDecl;\n             em.userAttribDecl.setScope(sc);\n             em.userAttribDecl.userAttribDecl = inneruda;\n+            em.userAttribDecl.dsymbolSemantic(sc);\n         }\n \n         // The first enum member is special\n@@ -2464,8 +2467,11 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             e = e.ctfeInterpret();\n             if (e.toInteger())\n             {\n+                auto mt = em.ed.memtype;\n+                if (!mt)\n+                    mt = eprev.type;\n                 em.error(\"initialization with `%s.%s+1` causes overflow for type `%s`\",\n-                    emprev.ed.toChars(), emprev.toChars(), em.ed.memtype.toChars());\n+                    emprev.ed.toChars(), emprev.toChars(), mt.toChars());\n                 return errorReturn();\n             }\n \n@@ -5165,6 +5171,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                 }\n \n                 // Copy vtbl[] from base class\n+                assert(cldec.vtbl.length == 0);\n                 cldec.vtbl.setDim(cldec.baseClass.vtbl.length);\n                 memcpy(cldec.vtbl.tdata(), cldec.baseClass.vtbl.tdata(), (void*).sizeof * cldec.vtbl.length);\n \n@@ -5205,7 +5212,6 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                             cldec.baseClass.toChars(),\n                             cldec.baseClass.toParentLocal().toChars());\n                     }\n-                    cldec.enclosing = null;\n                 }\n                 if (cldec.vthis2)\n                 {\n@@ -5378,10 +5384,11 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             cldec.error(\"already exists at %s. Perhaps in another function with the same name?\", cd.loc.toChars());\n         }\n \n-        if (global.errors != errors)\n+        if (global.errors != errors || (cldec.baseClass && cldec.baseClass.errors))\n         {\n-            // The type is no good.\n-            cldec.type = Type.terror;\n+            // The type is no good, but we should keep the\n+            // the type so that we have more accurate error messages\n+            // See: https://issues.dlang.org/show_bug.cgi?id=23552\n             cldec.errors = true;\n             if (cldec.deferred)\n                 cldec.deferred.errors = true;\n@@ -7073,33 +7080,13 @@ bool determineFields(AggregateDeclaration ad)\n /// Do an atomic operation (currently tailored to [shared] static ctors|dtors) needs\n private CallExp doAtomicOp (string op, Identifier var, Expression arg)\n {\n-    __gshared Import imp = null;\n-    __gshared Identifier[1] id;\n-\n     assert(op == \"-=\" || op == \"+=\");\n \n-    const loc = Loc.initial;\n+    Module mod = Module.loadCoreAtomic();\n+    if (!mod)\n+        return null;    // core.atomic couldn't be loaded\n \n-    // Below code is similar to `loadStdMath` (used for `^^` operator)\n-    if (!imp)\n-    {\n-        id[0] = Id.core;\n-        auto s = new Import(Loc.initial, id[], Id.atomic, null, true);\n-        // Module.load will call fatal() if there's no std.math available.\n-        // Gag the error here, pushing the error handling to the caller.\n-        uint errors = global.startGagging();\n-        s.load(null);\n-        if (s.mod)\n-        {\n-            s.mod.importAll(null);\n-            s.mod.dsymbolSemantic(null);\n-        }\n-        global.endGagging(errors);\n-        imp = s;\n-    }\n-    // Module couldn't be loaded\n-    if (imp.mod is null)\n-        return null;\n+    const loc = Loc.initial;\n \n     Objects* tiargs = new Objects(1);\n     (*tiargs)[0] = new StringExp(loc, op);\n@@ -7108,7 +7095,7 @@ private CallExp doAtomicOp (string op, Identifier var, Expression arg)\n     (*args)[0] = new IdentifierExp(loc, var);\n     (*args)[1] = arg;\n \n-    auto sc = new ScopeExp(loc, imp.mod);\n+    auto sc = new ScopeExp(loc, mod);\n     auto dti = new DotTemplateInstanceExp(\n         loc, sc, Id.atomicOp, tiargs);\n "}, {"sha": "32799aa04e3251712ffc3757e7c44292eaa563ba", "filename": "gcc/d/dmd/dtemplate.d", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdtemplate.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdtemplate.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -28,7 +28,7 @@\n  *   arguments, and uses it if found.\n  * - Otherwise, the rest of semantic is run on the `TemplateInstance`.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dtemplate.d, _dtemplate.d)\n@@ -64,6 +64,7 @@ import dmd.identifier;\n import dmd.impcnvtab;\n import dmd.init;\n import dmd.initsem;\n+import dmd.location;\n import dmd.mtype;\n import dmd.opover;\n import dmd.root.array;\n@@ -567,7 +568,6 @@ extern (C++) final class TemplateDeclaration : ScopeDsymbol\n     bool isTrivialAlias;    /// matches pattern `template Alias(T) { alias Alias = qualifiers(T); }`\n     bool deprecated_;       /// this template declaration is deprecated\n     Visibility visibility;\n-    int inuse;              /// for recursive expansion detection\n \n     // threaded list of previous instantiation attempts on stack\n     TemplatePrevious* previous;\n@@ -1117,9 +1117,7 @@ extern (C++) final class TemplateDeclaration : ScopeDsymbol\n                     printf(\"\\tparameter[%d] is %s : %s\\n\", i, tp.ident.toChars(), ttp.specType ? ttp.specType.toChars() : \"\");\n             }\n \n-            inuse++;\n             m2 = tp.matchArg(ti.loc, paramscope, ti.tiargs, i, parameters, dedtypes, &sparam);\n-            inuse--;\n             //printf(\"\\tm2 = %d\\n\", m2);\n             if (m2 == MATCH.nomatch)\n             {\n@@ -1783,9 +1781,7 @@ extern (C++) final class TemplateDeclaration : ScopeDsymbol\n                             }\n                             else\n                             {\n-                                inuse++;\n                                 oded = tparam.defaultArg(instLoc, paramscope);\n-                                inuse--;\n                                 if (oded)\n                                     (*dedargs)[i] = declareParameter(paramscope, tparam, oded);\n                             }\n@@ -2166,9 +2162,7 @@ extern (C++) final class TemplateDeclaration : ScopeDsymbol\n             }\n             else\n             {\n-                inuse++;\n                 oded = tparam.defaultArg(instLoc, paramscope);\n-                inuse--;\n                 if (!oded)\n                 {\n                     // if tuple parameter and\n@@ -2813,11 +2807,6 @@ void functionResolve(ref MatchAccumulator m, Dsymbol dstart, Loc loc, Scope* sc,\n     int applyTemplate(TemplateDeclaration td)\n     {\n         //printf(\"applyTemplate()\\n\");\n-        if (td.inuse)\n-        {\n-            td.error(loc, \"recursive template expansion\");\n-            return 1;\n-        }\n         if (td == td_best)   // skip duplicates\n             return 0;\n \n@@ -3613,8 +3602,29 @@ MATCH deduceType(RootObject o, Scope* sc, Type tparam, TemplateParameters* param\n                 }\n \n                 // Found the corresponding parameter tp\n+                /+\n+                    https://issues.dlang.org/show_bug.cgi?id=23578\n+                    To pattern match:\n+                    static if (is(S!int == S!av, alias av))\n+\n+                    We eventually need to deduce `int` (Tint32 [0]) and `av` (Tident).\n+                    Previously this would not get pattern matched at all, but now we check if the\n+                    template parameter `av` came from.\n+\n+                    This note has been left to serve as a hint for further explorers into\n+                    how IsExp matching works.\n+                +/\n+                if (auto ta = tp.isTemplateAliasParameter())\n+                {\n+                    (*dedtypes)[i] = t;\n+                    goto Lexact;\n+                }\n+                // (23578) - ensure previous behaviour for non-alias template params\n                 if (!tp.isTemplateTypeParameter())\n+                {\n                     goto Lnomatch;\n+                }\n+\n                 Type at = cast(Type)(*dedtypes)[i];\n                 Type tt;\n                 if (ubyte wx = wm ? deduceWildHelper(t, &tt, tparam) : 0)\n@@ -4100,6 +4110,7 @@ MATCH deduceType(RootObject o, Scope* sc, Type tparam, TemplateParameters* param\n                         }\n                         goto Lnomatch;\n                     }\n+\n                     TemplateParameter tpx = (*parameters)[i];\n                     if (!tpx.matchArg(sc, tempdecl, i, parameters, dedtypes, null))\n                         goto Lnomatch;\n@@ -4110,7 +4121,7 @@ MATCH deduceType(RootObject o, Scope* sc, Type tparam, TemplateParameters* param\n             L2:\n                 for (size_t i = 0; 1; i++)\n                 {\n-                    //printf(\"\\ttest: tempinst.tiargs[%d]\\n\", i);\n+                    //printf(\"\\ttest: tempinst.tiargs[%zu]\\n\", i);\n                     RootObject o1 = null;\n                     if (i < t.tempinst.tiargs.length)\n                         o1 = (*t.tempinst.tiargs)[i];\n@@ -4121,7 +4132,7 @@ MATCH deduceType(RootObject o, Scope* sc, Type tparam, TemplateParameters* param\n                     }\n                     else if (i >= tp.tempinst.tiargs.length)\n                         break;\n-\n+                    //printf(\"\\ttest: o1 = %s\\n\", o1.toChars());\n                     if (i >= tp.tempinst.tiargs.length)\n                     {\n                         size_t dim = tempdecl.parameters.length - (tempdecl.isVariadic() ? 1 : 0);\n@@ -4136,7 +4147,7 @@ MATCH deduceType(RootObject o, Scope* sc, Type tparam, TemplateParameters* param\n \n                     RootObject o2 = (*tp.tempinst.tiargs)[i];\n                     Type t2 = isType(o2);\n-\n+                    //printf(\"\\ttest: o2 = %s\\n\", o2.toChars());\n                     size_t j = (t2 && t2.ty == Tident && i == tp.tempinst.tiargs.length - 1)\n                         ? templateParameterLookup(t2, parameters) : IDX_NOTFOUND;\n                     if (j != IDX_NOTFOUND && j == parameters.length - 1 &&\n@@ -5571,15 +5582,25 @@ extern (C++) final class TemplateValueParameter : TemplateParameter\n         if (e)\n         {\n             e = e.syntaxCopy();\n-            uint olderrs = global.errors;\n             if ((e = e.expressionSemantic(sc)) is null)\n                 return null;\n+            if (auto te = e.isTemplateExp())\n+            {\n+                assert(sc && sc.tinst);\n+                if (te.td == sc.tinst.tempdecl)\n+                {\n+                    // defaultValue is a reference to its template declaration\n+                    // i.e: `template T(int arg = T)`\n+                    // Raise error now before calling resolveProperties otherwise we'll\n+                    // start looping on the expansion of the template instance.\n+                    sc.tinst.tempdecl.error(\"recursive template expansion\");\n+                    return ErrorExp.get();\n+                }\n+            }\n             if ((e = resolveProperties(sc, e)) is null)\n                 return null;\n             e = e.resolveLoc(instLoc, sc); // use the instantiated loc\n             e = e.optimize(WANTvalue);\n-            if (global.errors != olderrs)\n-                e = ErrorExp.get();\n         }\n         return e;\n     }\n@@ -6910,11 +6931,6 @@ extern (C++) class TemplateInstance : ScopeDsymbol\n                 auto td = s.isTemplateDeclaration();\n                 if (!td)\n                     return 0;\n-                if (td.inuse)\n-                {\n-                    td.error(loc, \"recursive template expansion\");\n-                    return 1;\n-                }\n                 if (td == td_best)   // skip duplicates\n                     return 0;\n \n@@ -7133,11 +7149,6 @@ extern (C++) class TemplateInstance : ScopeDsymbol\n                 auto td = s.isTemplateDeclaration();\n                 if (!td)\n                     return 0;\n-                if (td.inuse)\n-                {\n-                    td.error(loc, \"recursive template expansion\");\n-                    return 1;\n-                }\n \n                 /* If any of the overloaded template declarations need inference,\n                  * then return true"}, {"sha": "30ca3d1f8c6fd1c7ceb3b1ee225b53e3d05a3a1c", "filename": "gcc/d/dmd/dtoh.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdtoh.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdtoh.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtoh.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2,7 +2,7 @@\n  * This module contains the implementation of the C++ header generation available through\n  * the command line switch -Hc.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dtohd, _dtoh.d)\n@@ -24,6 +24,7 @@ import dmd.errors;\n import dmd.globals;\n import dmd.hdrgen;\n import dmd.identifier;\n+import dmd.location;\n import dmd.root.filename;\n import dmd.visitor;\n import dmd.tokens;"}, {"sha": "259f85c5128597d27fe69c91e69ef354dfd59b4b", "filename": "gcc/d/dmd/dversion.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdversion.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fdversion.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdversion.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -4,7 +4,7 @@\n  * Specification: $(LINK2 https://dlang.org/spec/version.html#version-specification, Version Specification),\n  *                $(LINK2 https://dlang.org/spec/version.html#debug_specification, Debug Specification).\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/dversion.d, _dversion.d)\n@@ -22,6 +22,7 @@ import dmd.dsymbol;\n import dmd.dsymbolsem;\n import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n import dmd.common.outbuffer;\n import dmd.visitor;\n "}, {"sha": "c31883f11d90fd5ee073367e0d216c3da73b39f0", "filename": "gcc/d/dmd/entity.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fentity.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fentity.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fentity.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification $(LINK2 https://dlang.org/spec/entity.html, Named Character Entities)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/entity.d, _entity.d)"}, {"sha": "be12c65e6d66fe5dbbd551ed1005e13c3d86b665", "filename": "gcc/d/dmd/enum.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fenum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fenum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fenum.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "03c78a5acdce226f816ed488967440d6a36f7cb3", "filename": "gcc/d/dmd/errors.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ferrors.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ferrors.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ferrors.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Functions for raising errors.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/errors.d, _errors.d)\n@@ -13,6 +13,7 @@ module dmd.errors;\n \n import core.stdc.stdarg;\n import dmd.globals;\n+import dmd.location;\n \n nothrow:\n "}, {"sha": "cc72811b112dd00e840d3d39d0b7a6aec35c9f4e", "filename": "gcc/d/dmd/errors.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ferrors.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "7bc018e1e32b338b9fb43cdec1cf10d8cae70d31", "filename": "gcc/d/dmd/escape.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fescape.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fescape.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fescape.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Most of the logic to implement scoped pointers and scoped references is here.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/escape.d, _escape.d)\n@@ -29,6 +29,7 @@ import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n import dmd.init;\n+import dmd.location;\n import dmd.mtype;\n import dmd.printast;\n import dmd.root.rootobject;\n@@ -1788,7 +1789,7 @@ void escapeByValue(Expression e, EscapeByResults* er, bool live = false, bool re\n                         if (tf.isreturn)\n                             stc |= STC.return_;\n                         if (tf.isreturnscope)\n-                            stc |= STC.returnScope;\n+                            stc |= STC.returnScope | STC.scope_;\n                         auto ad = fd.isThis();\n                         if (ad.isClassDeclaration() || tf.isScopeQual)\n                             stc |= STC.scope_;"}, {"sha": "e0f258c5a577d614881a06d81c78badf42079fbb", "filename": "gcc/d/dmd/expression.d", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fexpression.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fexpression.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: ($LINK2 https://dlang.org/spec/expression.html, Expressions)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/expression.d, _expression.d)\n@@ -50,6 +50,7 @@ import dmd.id;\n import dmd.identifier;\n import dmd.init;\n import dmd.inline;\n+import dmd.location;\n import dmd.mtype;\n import dmd.nspace;\n import dmd.objc;\n@@ -1291,12 +1292,16 @@ extern (C++) abstract class Expression : ASTNode\n             return false; // ...or manifest constants\n \n         // accessing empty structs is pure\n+        // https://issues.dlang.org/show_bug.cgi?id=18694\n+        // https://issues.dlang.org/show_bug.cgi?id=21464\n+        // https://issues.dlang.org/show_bug.cgi?id=23589\n         if (v.type.ty == Tstruct)\n         {\n             StructDeclaration sd = (cast(TypeStruct)v.type).sym;\n             if (sd.members) // not opaque\n             {\n-                sd.determineSize(v.loc);\n+                if (sd.semanticRun >= PASS.semanticdone)\n+                    sd.determineSize(v.loc);\n                 if (sd.hasNoFields)\n                     return false;\n             }"}, {"sha": "7202960af63a140661dfb9d022491fe80d0fd4c7", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "63236cdb8826f861d7243723010168e276c51b01", "filename": "gcc/d/dmd/expressionsem.d", "status": "modified", "additions": 40, "deletions": 68, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: ($LINK2 https://dlang.org/spec/expression.html, Expressions)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/expressionsem.d, _expressionsem.d)\n@@ -55,6 +55,7 @@ import dmd.init;\n import dmd.initsem;\n import dmd.inline;\n import dmd.intrange;\n+import dmd.location;\n import dmd.mtype;\n import dmd.mustuse;\n import dmd.nspace;\n@@ -512,7 +513,7 @@ private Expression resolveUFCS(Scope* sc, CallExp ce)\n     {\n         Identifier ident = die.ident;\n \n-        Expression ex = die.semanticX(sc);\n+        Expression ex = die.dotIdSemanticPropX(sc);\n         if (ex != die)\n         {\n             ce.e1 = ex;\n@@ -561,7 +562,7 @@ private Expression resolveUFCS(Scope* sc, CallExp ce)\n         }\n         else\n         {\n-            if (Expression ey = die.semanticY(sc, 1))\n+            if (Expression ey = die.dotIdSemanticProp(sc, 1))\n             {\n                 if (ey.op == EXP.error)\n                     return ey;\n@@ -632,7 +633,7 @@ private Expression resolveUFCS(Scope* sc, CallExp ce)\n     }\n     else if (auto dti = ce.e1.isDotTemplateInstanceExp())\n     {\n-        if (Expression ey = dti.semanticY(sc, 1))\n+        if (Expression ey = dti.dotTemplateSemanticProp(sc, 1))\n         {\n             ce.e1 = ey;\n             return null;\n@@ -2536,28 +2537,6 @@ Package resolveIsPackage(Dsymbol sym)\n     return pkg;\n }\n \n-private Module loadStdMath()\n-{\n-    __gshared Import impStdMath = null;\n-    __gshared Identifier[1] stdID;\n-    if (!impStdMath)\n-    {\n-        stdID[0] = Id.std;\n-        auto s = new Import(Loc.initial, stdID[], Id.math, null, false);\n-        // Module.load will call fatal() if there's no std.math available.\n-        // Gag the error here, pushing the error handling to the caller.\n-        uint errors = global.startGagging();\n-        s.load(null);\n-        if (s.mod)\n-        {\n-            s.mod.importAll(null);\n-            s.mod.dsymbolSemantic(null);\n-        }\n-        global.endGagging(errors);\n-        impStdMath = s;\n-    }\n-    return impStdMath.mod;\n-}\n \n private extern (C++) final class ExpressionSemanticVisitor : Visitor\n {\n@@ -3585,6 +3564,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         if (auto tc = tb.isTypeClass())\n         {\n             auto cd = tc.sym;\n+            if (cd.errors)\n+                return setError();\n             cd.size(exp.loc);\n             if (cd.sizeok != Sizeok.done)\n                 return setError();\n@@ -3630,21 +3611,25 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 {\n                     if (!cdthis)\n                     {\n-                        if (!sc.hasThis)\n+                        void noReferenceToOuterClass()\n                         {\n-                            string msg = \"cannot construct \" ~\n-                            (cd.isAnonymous ? \"anonymous nested class\" : \"nested class `%s`\") ~\n-                            \" because no implicit `this` reference to outer class\" ~\n-                            (cdn.isAnonymous ? \"\" : \" `%s`\") ~ \" is available\\0\";\n-\n-                            exp.error(msg.ptr, cd.toChars, cdn.toChars);\n+                            if (cd.isAnonymous)\n+                                exp.error(\"cannot construct anonymous nested class because no implicit `this` reference to outer class is available\");\n+                            else\n+                                exp.error(\"cannot construct nested class `%s` because no implicit `this` reference to outer class `%s` is available\",\n+                                    cd.toChars(), cdn.toChars());\n                             return setError();\n                         }\n \n+                        if (!sc.hasThis)\n+                            return noReferenceToOuterClass();\n+\n                         // Supply an implicit 'this' and try again\n                         exp.thisexp = new ThisExp(exp.loc);\n                         for (Dsymbol sp = sc.parent; 1; sp = sp.toParentLocal())\n                         {\n+                            if (!sp)\n+                                return noReferenceToOuterClass();\n                             ClassDeclaration cdp = sp.isClassDeclaration();\n                             if (!cdp)\n                                 continue;\n@@ -4671,8 +4656,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 else if (exp.arguments.length == 1)\n                 {\n                     e = (*exp.arguments)[0];\n-                    if (!e.type.isTypeNoreturn())\n-                        e = e.implicitCastTo(sc, t1);\n+                    e = e.implicitCastTo(sc, t1);\n+                    e = new CastExp(exp.loc, e, t1);\n                 }\n                 else\n                 {\n@@ -5851,8 +5836,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             dedtypes.zero();\n \n             MATCH m = deduceType(e.targ, sc, e.tspec, e.parameters, &dedtypes, null, 0, e.tok == TOK.equal);\n-            //printf(\"targ: %s\\n\", targ.toChars());\n-            //printf(\"tspec: %s\\n\", tspec.toChars());\n+\n             if (m == MATCH.nomatch || (m != MATCH.exact && e.tok == TOK.equal))\n             {\n                 return no();\n@@ -6557,7 +6541,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             }\n         }\n \n-        Expression e = exp.semanticY(sc, 1);\n+        Expression e = exp.dotIdSemanticProp(sc, 1);\n \n         if (e && isDotOpDispatch(e))\n         {\n@@ -6786,7 +6770,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return;\n         }\n         // Indicate we need to resolve by UFCS.\n-        Expression e = exp.semanticY(sc, 1);\n+        Expression e = exp.dotTemplateSemanticProp(sc, 1);\n         if (!e)\n             e = resolveUFCSProperties(sc, exp);\n         if (e is exp)\n@@ -7528,11 +7512,6 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return;\n         }\n \n-        if (exp.e1.type.isTypeNoreturn() && (!exp.to || !exp.to.isTypeNoreturn()))\n-        {\n-            result = exp.e1;\n-            return;\n-        }\n         if (exp.to && !exp.to.isTypeSArray() && !exp.to.isTypeFunction())\n             exp.e1 = exp.e1.arrayFuncConv(sc);\n \n@@ -8069,22 +8048,12 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 Expression el = new ArrayLengthExp(exp.loc, exp.e1);\n                 el = el.expressionSemantic(sc);\n                 el = el.optimize(WANTvalue);\n-                if (el.op == EXP.int64 && t1b.ty == Tsarray)\n+                if (el.op == EXP.int64)\n                 {\n                     // Array length is known at compile-time. Upper is in bounds if it fits length.\n                     dinteger_t length = el.toInteger();\n                     auto bounds = IntRange(SignExtendedNumber(0), SignExtendedNumber(length));\n                     exp.upperIsInBounds = bounds.contains(uprRange);\n-                    if (exp.lwr.op == EXP.int64 && exp.upr.op == EXP.int64 && exp.lwr.toInteger() > exp.upr.toInteger())\n-                    {\n-                        exp.error(\"in slice `%s[%llu .. %llu]`, lower bound is greater than upper bound\", exp.e1.toChars, exp.lwr.toInteger(), exp.upr.toInteger());\n-                        return setError();\n-                    }\n-                    if (exp.upr.op == EXP.int64 && exp.upr.toInteger() > length)\n-                    {\n-                        exp.error(\"in slice `%s[%llu .. %llu]`, upper bound is greater than array length `%llu`\", exp.e1.toChars, exp.lwr.toInteger(), exp.upr.toInteger(), length);\n-                        return setError();\n-                    }\n                 }\n                 else if (exp.upr.op == EXP.int64 && exp.upr.toInteger() == 0)\n                 {\n@@ -8884,7 +8853,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n              */\n             if (auto dti = e1x.isDotTemplateInstanceExp())\n             {\n-                Expression e = dti.semanticY(sc, 1);\n+                Expression e = dti.dotTemplateSemanticProp(sc, 1);\n                 if (!e)\n                 {\n                     return setResult(resolveUFCSProperties(sc, e1x, exp.e2));\n@@ -8899,7 +8868,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             }\n             else if (auto die = e1x.isDotIdExp())\n             {\n-                Expression e = die.semanticY(sc, 1);\n+                Expression e = die.dotIdSemanticProp(sc, 1);\n                 if (e && isDotOpDispatch(e))\n                 {\n                     /* https://issues.dlang.org/show_bug.cgi?id=19687\n@@ -11275,7 +11244,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return;\n         }\n \n-        Module mmath = loadStdMath();\n+        Module mmath = Module.loadStdMath();\n         if (!mmath)\n         {\n             e.error(\"`%s` requires `std.math` for `^^` operators\", e.toChars());\n@@ -11823,8 +11792,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return;\n         }\n \n-        if (t1.isTypeVector())\n-            exp.type = t1;\n+        if (auto tv = t1.isTypeVector())\n+            exp.type = tv.toBooleanVector();\n \n         result = exp;\n         return;\n@@ -12105,8 +12074,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return;\n         }\n \n-        if (t1.isTypeVector())\n-            exp.type = t1;\n+        if (auto tv = t1.isTypeVector())\n+            exp.type = tv.toBooleanVector();\n \n         result = exp;\n     }\n@@ -12244,10 +12213,12 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         if (t1.ty == Tnoreturn)\n         {\n             exp.type = t2;\n+            exp.e1 = specialNoreturnCast(exp.e1, exp.type);\n         }\n         else if (t2.ty == Tnoreturn)\n         {\n             exp.type = t1;\n+            exp.e2 = specialNoreturnCast(exp.e2, exp.type);\n         }\n         // If either operand is void the result is void, we have to cast both\n         // the expression to void so that we explicitly discard the expression\n@@ -12541,7 +12512,7 @@ extern (C++) Expression expressionSemantic(Expression e, Scope* sc)\n     return v.result;\n }\n \n-Expression semanticX(DotIdExp exp, Scope* sc)\n+private Expression dotIdSemanticPropX(DotIdExp exp, Scope* sc)\n {\n     //printf(\"DotIdExp::semanticX(this = %p, '%s')\\n\", this, toChars());\n     if (Expression ex = unaSemantic(exp, sc))\n@@ -12649,7 +12620,7 @@ Expression semanticX(DotIdExp exp, Scope* sc)\n  * Returns:\n  *      resolved expression, null if error\n  */\n-Expression semanticY(DotIdExp exp, Scope* sc, int flag)\n+Expression dotIdSemanticProp(DotIdExp exp, Scope* sc, int flag)\n {\n     //printf(\"DotIdExp::semanticY(this = %p, '%s')\\n\", exp, exp.toChars());\n \n@@ -12681,7 +12652,7 @@ Expression semanticY(DotIdExp exp, Scope* sc, int flag)\n     }\n \n     {\n-        Expression e = semanticX(exp, sc);\n+        Expression e = dotIdSemanticPropX(exp, sc);\n         if (e != exp)\n             return e;\n     }\n@@ -12983,7 +12954,7 @@ Expression semanticY(DotIdExp exp, Scope* sc, int flag)\n \n // Resolve e1.ident!tiargs without seeing UFCS.\n // If flag == 1, stop \"not a property\" error and return NULL.\n-Expression semanticY(DotTemplateInstanceExp exp, Scope* sc, int flag)\n+Expression dotTemplateSemanticProp(DotTemplateInstanceExp exp, Scope* sc, int flag)\n {\n     static if (LOGSEMANTIC)\n     {\n@@ -13007,7 +12978,7 @@ Expression semanticY(DotTemplateInstanceExp exp, Scope* sc, int flag)\n \n     auto die = new DotIdExp(exp.loc, e1, exp.ti.name);\n \n-    Expression e = die.semanticX(sc);\n+    Expression e = die.dotIdSemanticPropX(sc);\n     if (e == die)\n     {\n         exp.e1 = die.e1; // take back\n@@ -13020,7 +12991,7 @@ Expression semanticY(DotTemplateInstanceExp exp, Scope* sc, int flag)\n             if (flag)\n                 return null;\n         }\n-        e = die.semanticY(sc, flag);\n+        e = die.dotIdSemanticProp(sc, flag);\n         if (flag)\n         {\n             if (!e ||\n@@ -13169,6 +13140,7 @@ Lerr:\n bool checkSharedAccess(Expression e, Scope* sc, bool returnRef = false)\n {\n     if (global.params.noSharedAccess != FeatureState.enabled ||\n+        !sc ||\n         sc.intypeof ||\n         sc.flags & SCOPE.ctfe)\n     {"}, {"sha": "a0e5d0519c8ec3c3ac935b9d171b2a74ac13c9b8", "filename": "gcc/d/dmd/file_manager.d", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ffile_manager.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ffile_manager.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffile_manager.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Read a file from disk and store it in memory.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/file_manager.d, _file_manager.d)\n  * Documentation:  https://dlang.org/phobos/dmd_file_manager.html\n@@ -16,6 +16,7 @@ import dmd.root.filename : FileName, isDirSeparator;\n import dmd.root.string : toDString;\n import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n \n enum package_d  = \"package.\" ~ mars_ext;\n enum package_di = \"package.\" ~ hdr_ext;\n@@ -123,7 +124,7 @@ nothrow:\n     const(char)[] lookForSourceFile(const char[] filename, const char*[] path)\n     {\n         //printf(\"lookForSourceFile(`%.*s`)\\n\", cast(int)filename.length, filename.ptr);\n-        /* Search along path[] for .di file, then .d file, then .i file, then .c file.\n+        /* Search along path[] for .di file, then .d file.\n         */\n         // see if we should check for the module locally.\n         bool checkLocal = packageExists(filename);\n@@ -140,16 +141,6 @@ nothrow:\n             return sd;\n         scope(exit) FileName.free(sd.ptr);\n \n-        const si = FileName.forceExt(filename, i_ext);\n-        if (checkLocal && FileName.exists(si) == 1)\n-            return si;\n-        scope(exit) FileName.free(si.ptr);\n-\n-        const sc = FileName.forceExt(filename, c_ext);\n-        if (checkLocal && FileName.exists(sc) == 1)\n-            return sc;\n-        scope(exit) FileName.free(sc.ptr);\n-\n         if (checkLocal)\n         {\n             auto cached = packageStatus.lookup(filename);\n@@ -198,18 +189,6 @@ nothrow:\n             }\n             FileName.free(n.ptr);\n \n-            n = FileName.combine(p, si);\n-            if (FileName.exists(n) == 1) {\n-                return n;\n-            }\n-            FileName.free(n.ptr);\n-\n-            n = FileName.combine(p, sc);\n-            if (FileName.exists(n) == 1) {\n-                return n;\n-            }\n-            FileName.free(n.ptr);\n-\n             const b = FileName.removeExt(filename);\n             n = FileName.combine(p, b);\n             FileName.free(b.ptr);\n@@ -235,6 +214,34 @@ nothrow:\n                 FileName.free(n2.ptr);\n             }\n         }\n+\n+        /* ImportC: No D modules found, now search along path[] for .i file, then .c file.\n+         */\n+        const si = FileName.forceExt(filename, i_ext);\n+        if (FileName.exists(si) == 1)\n+            return si;\n+        scope(exit) FileName.free(si.ptr);\n+\n+        const sc = FileName.forceExt(filename, c_ext);\n+        if (FileName.exists(sc) == 1)\n+            return sc;\n+        scope(exit) FileName.free(sc.ptr);\n+        foreach (entry; path)\n+        {\n+            const p = entry.toDString();\n+\n+            const(char)[] n = FileName.combine(p, si);\n+            if (FileName.exists(n) == 1) {\n+                return n;\n+            }\n+            FileName.free(n.ptr);\n+\n+            n = FileName.combine(p, sc);\n+            if (FileName.exists(n) == 1) {\n+                return n;\n+            }\n+            FileName.free(n.ptr);\n+        }\n         return null;\n     }\n "}, {"sha": "7c4df0deca8eede1bedd094b2790f8837283e094", "filename": "gcc/d/dmd/foreachvar.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fforeachvar.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fforeachvar.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fforeachvar.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Utility to visit every variable in an expression.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/foreachvar.d, _foreachvar.d)"}, {"sha": "3a85679626c15768099737f19fd125e03186c6c4", "filename": "gcc/d/dmd/func.d", "status": "modified", "additions": 75, "deletions": 63, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ffunc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ffunc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -8,7 +8,7 @@\n  * - `invariant`\n  * - `unittest`\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/func.d, _func.d)\n@@ -43,6 +43,7 @@ import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n import dmd.init;\n+import dmd.location;\n import dmd.mtype;\n import dmd.objc;\n import dmd.root.aav;\n@@ -2924,89 +2925,100 @@ Expression addInvariant(AggregateDeclaration ad, VarDeclaration vthis)\n  */\n extern (D) int overloadApply(Dsymbol fstart, scope int delegate(Dsymbol) dg, Scope* sc = null)\n {\n-    Dsymbol next;\n-    for (auto d = fstart; d; d = next)\n+    Dsymbols visited;\n+\n+    int overloadApplyRecurse(Dsymbol fstart, scope int delegate(Dsymbol) dg, Scope* sc)\n     {\n-        import dmd.access : checkSymbolAccess;\n-        if (auto od = d.isOverDeclaration())\n+        // Detect cyclic calls.\n+        if (visited.contains(fstart))\n+            return 0;\n+        visited.push(fstart);\n+\n+        Dsymbol next;\n+        for (auto d = fstart; d; d = next)\n         {\n-            /* The scope is needed here to check whether a function in\n-               an overload set was added by means of a private alias (or a\n-               selective import). If the scope where the alias is created\n-               is imported somewhere, the overload set is visible, but the private\n-               alias is not.\n-            */\n-            if (sc)\n+            import dmd.access : checkSymbolAccess;\n+            if (auto od = d.isOverDeclaration())\n             {\n-                if (checkSymbolAccess(sc, od))\n+                /* The scope is needed here to check whether a function in\n+                   an overload set was added by means of a private alias (or a\n+                   selective import). If the scope where the alias is created\n+                   is imported somewhere, the overload set is visible, but the private\n+                   alias is not.\n+                */\n+                if (sc)\n                 {\n-                    if (int r = overloadApply(od.aliassym, dg, sc))\n+                    if (checkSymbolAccess(sc, od))\n+                    {\n+                        if (int r = overloadApplyRecurse(od.aliassym, dg, sc))\n+                            return r;\n+                    }\n+                }\n+                else if (int r = overloadApplyRecurse(od.aliassym, dg, sc))\n+                    return r;\n+                next = od.overnext;\n+            }\n+            else if (auto fa = d.isFuncAliasDeclaration())\n+            {\n+                if (fa.hasOverloads)\n+                {\n+                    if (int r = overloadApplyRecurse(fa.funcalias, dg, sc))\n                         return r;\n                 }\n+                else if (auto fd = fa.toAliasFunc())\n+                {\n+                    if (int r = dg(fd))\n+                        return r;\n+                }\n+                else\n+                {\n+                    d.error(\"is aliased to a function\");\n+                    break;\n+                }\n+                next = fa.overnext;\n             }\n-            else if (int r = overloadApply(od.aliassym, dg, sc))\n-                return r;\n-            next = od.overnext;\n-        }\n-        else if (auto fa = d.isFuncAliasDeclaration())\n-        {\n-            if (fa.hasOverloads)\n+            else if (auto ad = d.isAliasDeclaration())\n             {\n-                if (int r = overloadApply(fa.funcalias, dg, sc))\n+                if (sc)\n+                {\n+                    if (checkSymbolAccess(sc, ad))\n+                        next = ad.toAlias();\n+                }\n+                else\n+                   next = ad.toAlias();\n+                if (next == ad)\n+                    break;\n+                if (next == fstart)\n+                    break;\n+            }\n+            else if (auto td = d.isTemplateDeclaration())\n+            {\n+                if (int r = dg(td))\n                     return r;\n+                next = td.overnext;\n             }\n-            else if (auto fd = fa.toAliasFunc())\n+            else if (auto fd = d.isFuncDeclaration())\n             {\n                 if (int r = dg(fd))\n                     return r;\n+                next = fd.overnext;\n+            }\n+            else if (auto os = d.isOverloadSet())\n+            {\n+                foreach (ds; os.a)\n+                    if (int r = dg(ds))\n+                        return r;\n             }\n             else\n             {\n                 d.error(\"is aliased to a function\");\n                 break;\n+                // BUG: should print error message?\n             }\n-            next = fa.overnext;\n-        }\n-        else if (auto ad = d.isAliasDeclaration())\n-        {\n-            if (sc)\n-            {\n-                if (checkSymbolAccess(sc, ad))\n-                    next = ad.toAlias();\n-            }\n-            else\n-               next = ad.toAlias();\n-            if (next == ad)\n-                break;\n-            if (next == fstart)\n-                break;\n-        }\n-        else if (auto td = d.isTemplateDeclaration())\n-        {\n-            if (int r = dg(td))\n-                return r;\n-            next = td.overnext;\n-        }\n-        else if (auto fd = d.isFuncDeclaration())\n-        {\n-            if (int r = dg(fd))\n-                return r;\n-            next = fd.overnext;\n-        }\n-        else if (auto os = d.isOverloadSet())\n-        {\n-            foreach (ds; os.a)\n-                if (int r = dg(ds))\n-                    return r;\n-        }\n-        else\n-        {\n-            d.error(\"is aliased to a function\");\n-            break;\n-            // BUG: should print error message?\n         }\n+        return 0;\n     }\n-    return 0;\n+    return overloadApplyRecurse(fstart, dg, sc);\n }\n \n /**"}, {"sha": "80c183e5a7727e5e9b36ccc922a1269cb564a33d", "filename": "gcc/d/dmd/globals.d", "status": "modified", "additions": 3, "deletions": 129, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fglobals.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fglobals.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Stores command line options and contains other miscellaneous declarations.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/globals.d, _globals.d)\n@@ -17,6 +17,7 @@ import dmd.root.filename;\n import dmd.common.outbuffer;\n import dmd.file_manager;\n import dmd.identifier;\n+import dmd.location;\n \n /// Defines a setting for how compiler warnings and deprecations are handled\n enum DiagnosticReporting : ubyte\n@@ -26,13 +27,6 @@ enum DiagnosticReporting : ubyte\n     off,          /// disable diagnostic\n }\n \n-/// How code locations are formatted for diagnostic reporting\n-enum MessageStyle : ubyte\n-{\n-    digitalmars,  /// filename.d(line): message\n-    gnu,          /// filename.d:line: message, see https://www.gnu.org/prep/standards/html_node/Errors.html\n-}\n-\n /// In which context checks for assertions, contracts, bounds checks etc. are enabled\n enum CHECKENABLE : ubyte\n {\n@@ -266,7 +260,7 @@ extern (C++) struct Global\n {\n     const(char)[] inifilename; /// filename of configuration file as given by `-conf=`, or default value\n \n-    string copyright = \"Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\";\n+    string copyright = \"Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\";\n     string written = \"written by Walter Bright\";\n \n     Array!(const(char)*)* path;         /// Array of char*'s which form the import lookup path\n@@ -446,125 +440,5 @@ alias dinteger_t = ulong;\n alias sinteger_t = long;\n alias uinteger_t = ulong;\n \n-version (DMDLIB)\n-{\n-    version = LocOffset;\n-}\n-\n-/**\n-A source code location\n-\n-Used for error messages, `__FILE__` and `__LINE__` tokens, `__traits(getLocation, XXX)`,\n-debug info etc.\n-*/\n-struct Loc\n-{\n-    /// zero-terminated filename string, either absolute or relative to cwd\n-    const(char)* filename;\n-    uint linnum; /// line number, starting from 1\n-    uint charnum; /// utf8 code unit index relative to start of line, starting from 1\n-    version (LocOffset)\n-        uint fileOffset; /// utf8 code unit index relative to start of file, starting from 0\n-\n-    static immutable Loc initial; /// use for default initialization of const ref Loc's\n-\n-nothrow:\n-    extern (D) this(const(char)* filename, uint linnum, uint charnum) pure\n-    {\n-        this.linnum = linnum;\n-        this.charnum = charnum;\n-        this.filename = filename;\n-    }\n-\n-    extern (C++) const(char)* toChars(\n-        bool showColumns = global.params.showColumns,\n-        ubyte messageStyle = global.params.messageStyle) const pure nothrow\n-    {\n-        OutBuffer buf;\n-        if (filename)\n-        {\n-            buf.writestring(filename);\n-        }\n-        if (linnum)\n-        {\n-            final switch (messageStyle)\n-            {\n-                case MessageStyle.digitalmars:\n-                    buf.writeByte('(');\n-                    buf.print(linnum);\n-                    if (showColumns && charnum)\n-                    {\n-                        buf.writeByte(',');\n-                        buf.print(charnum);\n-                    }\n-                    buf.writeByte(')');\n-                    break;\n-                case MessageStyle.gnu: // https://www.gnu.org/prep/standards/html_node/Errors.html\n-                    buf.writeByte(':');\n-                    buf.print(linnum);\n-                    if (showColumns && charnum)\n-                    {\n-                        buf.writeByte(':');\n-                        buf.print(charnum);\n-                    }\n-                    break;\n-            }\n-        }\n-        return buf.extractChars();\n-    }\n-\n-    /**\n-     * Checks for equivalence by comparing the filename contents (not the pointer) and character location.\n-     *\n-     * Note:\n-     *  - Uses case-insensitive comparison on Windows\n-     *  - Ignores `charnum` if `global.params.showColumns` is false.\n-     */\n-    extern (C++) bool equals(ref const(Loc) loc) const\n-    {\n-        return (!global.params.showColumns || charnum == loc.charnum) &&\n-               linnum == loc.linnum &&\n-               FileName.equals(filename, loc.filename);\n-    }\n-\n-    /**\n-     * `opEquals()` / `toHash()` for AA key usage\n-     *\n-     * Compare filename contents (case-sensitively on Windows too), not\n-     * the pointer - a static foreach loop repeatedly mixing in a mixin\n-     * may lead to multiple equivalent filenames (`foo.d-mixin-<line>`),\n-     * e.g., for test/runnable/test18880.d.\n-     */\n-    extern (D) bool opEquals(ref const(Loc) loc) const @trusted pure nothrow @nogc\n-    {\n-        import core.stdc.string : strcmp;\n-\n-        return charnum == loc.charnum &&\n-               linnum == loc.linnum &&\n-               (filename == loc.filename ||\n-                (filename && loc.filename && strcmp(filename, loc.filename) == 0));\n-    }\n-\n-    /// ditto\n-    extern (D) size_t toHash() const @trusted pure nothrow\n-    {\n-        import dmd.root.string : toDString;\n-\n-        auto hash = hashOf(linnum);\n-        hash = hashOf(charnum, hash);\n-        hash = hashOf(filename.toDString, hash);\n-        return hash;\n-    }\n-\n-    /******************\n-     * Returns:\n-     *   true if Loc has been set to other than the default initialization\n-     */\n-    bool isValid() const pure\n-    {\n-        return filename !is null;\n-    }\n-}\n-\n /// Collection of global state\n extern (C++) __gshared Global global;"}, {"sha": "45c5624b19c124aac822a98ee63f9091451b147b", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0.\n@@ -30,11 +30,10 @@ enum\n     DIAGNOSTICoff     // disable diagnostic\n };\n \n-typedef unsigned char MessageStyle;\n-enum\n+enum class MessageStyle : unsigned char\n {\n-    MESSAGESTYLEdigitalmars, // file(line,column): message\n-    MESSAGESTYLEgnu          // file:line:column: message\n+    digitalmars, // file(line,column): message\n+    gnu          // file:line:column: message\n };\n \n // The state of array bounds checking\n@@ -342,6 +341,11 @@ struct Loc\n     unsigned linnum;\n     unsigned charnum;\n \n+    static void set(bool showColumns, MessageStyle messageStyle);\n+\n+    static bool showColumns;\n+    static MessageStyle messageStyle;\n+\n     Loc()\n     {\n         linnum = 0;\n@@ -357,8 +361,8 @@ struct Loc\n     }\n \n     const char *toChars(\n-        bool showColumns = global.params.showColumns,\n-        MessageStyle messageStyle = global.params.messageStyle) const;\n+        bool showColumns = Loc::showColumns,\n+        MessageStyle messageStyle = Loc::messageStyle) const;\n     bool equals(const Loc& loc) const;\n };\n "}, {"sha": "7b52eff663d943c7fc058e14994de37c7efc5e43", "filename": "gcc/d/dmd/gluelayer.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fgluelayer.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fgluelayer.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fgluelayer.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * This 'glues' either the DMC or GCC back-end to the front-end.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/gluelayer.d, _gluelayer.d)"}, {"sha": "68670d929e50019db77407be1b51d47a4f6d8af2", "filename": "gcc/d/dmd/hdrgen.d", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fhdrgen.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fhdrgen.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Also used to convert AST nodes to D code in general, e.g. for error messages or `printf` debugging.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/hdrgen.d, _hdrgen.d)\n@@ -823,10 +823,13 @@ public:\n         buf.writestring(s.kind());\n         buf.writeByte('(');\n         s.exp.expressionToBuffer(buf, hgs);\n-        if (s.msg)\n+        if (s.msgs)\n         {\n-            buf.writestring(\", \");\n-            s.msg.expressionToBuffer(buf, hgs);\n+            foreach (m; (*s.msgs)[])\n+            {\n+                buf.writestring(\", \");\n+                m.expressionToBuffer(buf, hgs);\n+            }\n         }\n         buf.writestring(\");\");\n         buf.writenl();"}, {"sha": "43fea34255f75c68fb43988f75c6977d2dd9c840", "filename": "gcc/d/dmd/hdrgen.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fhdrgen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fhdrgen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Dave Fladebo\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "4d780b302b09b7e7501d21ce2e5a05cef7a525d3", "filename": "gcc/d/dmd/iasm.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fiasm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fiasm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fiasm.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/iasm.html, Inline Assembler)\n  *\n- *              Copyright (C) 2018-2022 by The D Language Foundation, All Rights Reserved\n+ *              Copyright (C) 2018-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/iasm.d, _iasm.d)"}, {"sha": "baf6b14b97d84a948e591ba0b8c6555e5f0b96c2", "filename": "gcc/d/dmd/iasmgcc.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fiasmgcc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fiasmgcc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fiasmgcc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Inline assembler for the GCC D compiler.\n  *\n- *              Copyright (C) 2018-2022 by The D Language Foundation, All Rights Reserved\n+ *              Copyright (C) 2018-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     Iain Buclaw\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/iasmgcc.d, _iasmgcc.d)\n@@ -21,6 +21,7 @@ import dmd.expression;\n import dmd.expressionsem;\n import dmd.identifier;\n import dmd.globals;\n+import dmd.location;\n import dmd.parse;\n import dmd.tokens;\n import dmd.statement;"}, {"sha": "40a5c6e47f680dd6ff0aefd84c8c3d0b48c45276", "filename": "gcc/d/dmd/id.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fid.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fid.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fid.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Contains the `Id` struct with a list of predefined symbols the compiler knows about.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/id.d, _id.d)"}, {"sha": "f6cf6e59c34cc5a01af191dba767ddb96bf4d4cf", "filename": "gcc/d/dmd/id.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fid.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 2017-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 2017-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "2233d7777708eb0e7de3f702a8a6bb62f5d437d7", "filename": "gcc/d/dmd/identifier.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fidentifier.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fidentifier.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidentifier.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Defines an identifier, which is the name of a `Dsymbol`.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/identifier.d, _identifier.d)\n@@ -14,8 +14,8 @@ module dmd.identifier;\n import core.stdc.ctype;\n import core.stdc.stdio;\n import core.stdc.string;\n-import dmd.globals;\n import dmd.id;\n+import dmd.location;\n import dmd.common.outbuffer;\n import dmd.root.rootobject;\n import dmd.root.string;"}, {"sha": "c12c3554c1b348c710efeb8c870ffca673eb1be2", "filename": "gcc/d/dmd/identifier.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fidentifier.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fidentifier.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidentifier.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "b45880a288724fe1e84069c2335ac3fed1ce02d1", "filename": "gcc/d/dmd/impcnvtab.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fimpcnvtab.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fimpcnvtab.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimpcnvtab.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -6,7 +6,7 @@\n  * Specification: $(LINK2 https://dlang.org/spec/type.html#integer-promotions, Integer Promotions),\n  *   $(LINK2 https://dlang.org/spec/type.html#usual-arithmetic-conversions, Usual Arithmetic Conversions).\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/impcnvtab.d, _impcnvtab.d)"}, {"sha": "913de9fa61cb092d9bf6ecc2c1bfbb9ab15a7404", "filename": "gcc/d/dmd/imphint.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fimphint.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fimphint.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimphint.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * For example, prompt to `import std.stdio` when using `writeln`.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/imphint.d, _imphint.d)"}, {"sha": "ff25ba2045d44aab9598c2bd9dbb42d0764a1ab4", "filename": "gcc/d/dmd/import.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimport.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "97710b88199f0a2a884ae95f96c048f7bc344478", "filename": "gcc/d/dmd/importc.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fimportc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fimportc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimportc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: C11\n  *\n- * Copyright:   Copyright (C) 2021-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 2021-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/importc.d, _importc.d)"}, {"sha": "f646d0382eb6e714f9084383e71249600e569afb", "filename": "gcc/d/dmd/init.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Finit.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Finit.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finit.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Defines initializers of variables, e.g. the array literal in `int[3] x = [0, 1, 2]`.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/init.d, _init.d)\n@@ -22,6 +22,7 @@ import dmd.expression;\n import dmd.globals;\n import dmd.hdrgen;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.common.outbuffer;\n import dmd.root.rootobject;"}, {"sha": "66b874c91b5f30bcd94d26828edea6a9b17a282a", "filename": "gcc/d/dmd/init.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Finit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Finit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finit.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "572753b2dd868cf55841a66ea38b79e3525dca3f", "filename": "gcc/d/dmd/initsem.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Finitsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Finitsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finitsem.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Semantic analysis of initializers.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/initsem.d, _initsem.d)\n@@ -33,6 +33,7 @@ import dmd.id;\n import dmd.identifier;\n import dmd.importc;\n import dmd.init;\n+import dmd.location;\n import dmd.mtype;\n import dmd.opover;\n import dmd.statement;"}, {"sha": "8e63122f4cbee2c6fe0f8a9fa5ad0ef03ac15439", "filename": "gcc/d/dmd/inline.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Finline.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Finline.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finline.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -4,7 +4,7 @@\n  * The AST is traversed, and every function call is considered for inlining using `inlinecost.d`.\n  * The function call is then inlined if this cost is below a threshold.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/inline.d, _inline.d)"}, {"sha": "d67e0f5958df7dc6b07613960a4bd638416e2cf9", "filename": "gcc/d/dmd/intrange.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fintrange.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fintrange.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fintrange.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Implement $(LINK2 https://digitalmars.com/articles/b62.html, Value Range Propagation).\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/intrange.d, _intrange.d)"}, {"sha": "38e03e7d20dcc08810bb814615e28960578bfc2e", "filename": "gcc/d/dmd/json.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fjson.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fjson.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fjson.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Code for generating .json descriptions of the module when passing the `-X` flag to dmd.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/json.d, _json.d)\n@@ -32,6 +32,7 @@ import dmd.globals;\n import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.common.outbuffer;\n import dmd.root.rootobject;"}, {"sha": "7a238979e206adf176e673c2e15db169b36da408", "filename": "gcc/d/dmd/json.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fjson.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fjson.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fjson.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "c800273e2d41e93c5ec050dbdd134d558c0e9cf0", "filename": "gcc/d/dmd/lambdacomp.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Flambdacomp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Flambdacomp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Flambdacomp.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -5,7 +5,7 @@\n  * The serialization is a string which contains the type of the parameters and the string\n  * represantation of the lambda expression.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/lamdbacomp.d, _lambdacomp.d)"}, {"sha": "bd53433d6c832c5fd26a2adc287265f4563448aa", "filename": "gcc/d/dmd/lexer.d", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Flexer.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Flexer.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Flexer.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/lex.html, Lexical)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/lexer.d, _lexer.d)\n@@ -26,6 +26,7 @@ import dmd.errors;\n import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.root.array;\n import dmd.root.ctfloat;\n import dmd.common.outbuffer;\n@@ -79,15 +80,14 @@ class Lexer\n         bool commentToken;      // comments are TOK.comment's\n         bool tokenizeNewlines;  // newlines are turned into TOK.endOfLine's\n \n-        version (DMDLIB)\n-        {\n-            bool whitespaceToken;   // tokenize whitespaces\n-        }\n+        bool whitespaceToken;   // tokenize whitespaces (only for DMDLIB)\n \n         int inTokenStringConstant; // can be larger than 1 when in nested q{} strings\n         int lastDocLine;        // last line of previous doc comment\n \n         Token* tokenFreelist;\n+        uint versionNumber;\n+        const(char)[] vendor;\n     }\n \n   nothrow:\n@@ -103,9 +103,12 @@ class Lexer\n      *  endoffset = the last offset to read into base[]\n      *  doDocComment = handle documentation comments\n      *  commentToken = comments become TOK.comment's\n+     *  vendor = name of the vendor\n+     *  versionNumber = version of the caller\n      */\n     this(const(char)* filename, const(char)* base, size_t begoffset,\n-        size_t endoffset, bool doDocComment, bool commentToken) pure\n+        size_t endoffset, bool doDocComment, bool commentToken,\n+        const(char)[] vendor = \"DLF\", uint versionNumber = 1) pure\n     {\n         scanloc = Loc(filename, 1, 1);\n         // debug printf(\"Lexer::Lexer(%p)\\n\", base);\n@@ -120,6 +123,8 @@ class Lexer\n         this.tokenizeNewlines = false;\n         this.inTokenStringConstant = 0;\n         this.lastDocLine = 0;\n+        this.versionNumber = versionNumber;\n+        this.vendor = vendor;\n         //initKeywords();\n         /* If first line starts with '#!', ignore the line\n          */\n@@ -154,6 +159,16 @@ class Lexer\n         }\n     }\n \n+    /***********************\n+     * Alternative entry point for DMDLIB, adds `whitespaceToken`\n+     */\n+    this(const(char)* filename, const(char)* base, size_t begoffset, size_t endoffset,\n+        bool doDocComment, bool commentToken, bool whitespaceToken)\n+    {\n+        this(filename, base, begoffset, endoffset, doDocComment, commentToken);\n+        this.whitespaceToken = whitespaceToken;\n+    }\n+\n     /******************\n      * Used for unittests for a mock Lexer\n      */\n@@ -184,29 +199,23 @@ class Lexer\n         tokenizeNewlines = true;\n     }\n \n-    version (DMDLIB)\n-    {\n-        this(const(char)* filename, const(char)* base, size_t begoffset, size_t endoffset,\n-            bool doDocComment, bool commentToken, bool whitespaceToken)\n-        {\n-            this(filename, base, begoffset, endoffset, doDocComment, commentToken);\n-            this.whitespaceToken = whitespaceToken;\n-        }\n+    /***************\n+     * Range interface\n+     */\n \n-        bool empty() const pure @property @nogc @safe\n-        {\n-            return front() == TOK.endOfFile;\n-        }\n+    final bool empty() const pure @property @nogc @safe\n+    {\n+        return front() == TOK.endOfFile;\n+    }\n \n-        TOK front() const pure @property @nogc @safe\n-        {\n-            return token.value;\n-        }\n+    final TOK front() const pure @property @nogc @safe\n+    {\n+        return token.value;\n+    }\n \n-        void popFront()\n-        {\n-            nextToken();\n-        }\n+    final void popFront()\n+    {\n+        nextToken();\n     }\n \n     /// Returns: a newly allocated `Token`.\n@@ -570,7 +579,7 @@ class Lexer\n                         }\n                         else if (id == Id.VENDOR)\n                         {\n-                            t.ustring = global.vendor.xarraydup.ptr;\n+                            t.ustring = vendor.xarraydup.ptr;\n                             goto Lstr;\n                         }\n                         else if (id == Id.TIMESTAMP)\n@@ -584,7 +593,7 @@ class Lexer\n                         else if (id == Id.VERSIONX)\n                         {\n                             t.value = TOK.int64Literal;\n-                            t.unsvalue = global.versionNumber();\n+                            t.unsvalue = versionNumber;\n                         }\n                         else if (id == Id.EOFX)\n                         {\n@@ -1965,7 +1974,7 @@ class Lexer\n     {\n         int base = 10;\n         const start = p;\n-        uinteger_t n = 0; // unsigned >=64 bit integer type\n+        ulong n = 0; // unsigned >=64 bit integer type\n         int d;\n         bool err = false;\n         bool overflow = false;\n@@ -2274,7 +2283,7 @@ class Lexer\n      * Returns:\n      *  token value\n      */\n-    private TOK cnumber(int base, uinteger_t n)\n+    private TOK cnumber(int base, ulong n)\n     {\n         /* C11 6.4.4.1\n          * Parse trailing suffixes:"}, {"sha": "020d297b06dcad0cb347b5a09cd83f4207176205", "filename": "gcc/d/dmd/location.d", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Flocation.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Flocation.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Flocation.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,158 @@\n+/**\n+ * Encapsulates file/line/column locations.\n+ *\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n+ * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n+ * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n+ * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/location.d, _location.d)\n+ * Documentation:  https://dlang.org/phobos/dmd_location.html\n+ * Coverage:    https://codecov.io/gh/dlang/dmd/src/master/src/dmd/location.d\n+ */\n+\n+module dmd.location;\n+\n+import dmd.common.outbuffer;\n+import dmd.root.filename;\n+\n+version (DMDLIB)\n+{\n+    version = LocOffset;\n+}\n+\n+/// How code locations are formatted for diagnostic reporting\n+enum MessageStyle : ubyte\n+{\n+    digitalmars,  /// filename.d(line): message\n+    gnu,          /// filename.d:line: message, see https://www.gnu.org/prep/standards/html_node/Errors.html\n+}\n+\n+/**\n+A source code location\n+\n+Used for error messages, `__FILE__` and `__LINE__` tokens, `__traits(getLocation, XXX)`,\n+debug info etc.\n+*/\n+struct Loc\n+{\n+    /// zero-terminated filename string, either absolute or relative to cwd\n+    const(char)* filename;\n+    uint linnum; /// line number, starting from 1\n+    uint charnum; /// utf8 code unit index relative to start of line, starting from 1\n+    version (LocOffset)\n+        uint fileOffset; /// utf8 code unit index relative to start of file, starting from 0\n+\n+    static immutable Loc initial; /// use for default initialization of const ref Loc's\n+\n+    extern (C++) __gshared bool showColumns;\n+    extern (C++) __gshared MessageStyle messageStyle;\n+\n+nothrow:\n+\n+    /*******************************\n+     * Configure how display is done\n+     * Params:\n+     *  showColumns = when to display columns\n+     *  messageStyle = digitalmars or gnu style messages\n+     */\n+    extern (C++) static void set(bool showColumns, MessageStyle messageStyle)\n+    {\n+        this.showColumns = showColumns;\n+        this.messageStyle = messageStyle;\n+    }\n+\n+    extern (D) this(const(char)* filename, uint linnum, uint charnum) pure\n+    {\n+        this.linnum = linnum;\n+        this.charnum = charnum;\n+        this.filename = filename;\n+    }\n+\n+    extern (C++) const(char)* toChars(\n+        bool showColumns = Loc.showColumns,\n+        MessageStyle messageStyle = Loc.messageStyle) const pure nothrow\n+    {\n+        OutBuffer buf;\n+        if (filename)\n+        {\n+            buf.writestring(filename);\n+        }\n+        if (linnum)\n+        {\n+            final switch (messageStyle)\n+            {\n+                case MessageStyle.digitalmars:\n+                    buf.writeByte('(');\n+                    buf.print(linnum);\n+                    if (showColumns && charnum)\n+                    {\n+                        buf.writeByte(',');\n+                        buf.print(charnum);\n+                    }\n+                    buf.writeByte(')');\n+                    break;\n+                case MessageStyle.gnu: // https://www.gnu.org/prep/standards/html_node/Errors.html\n+                    buf.writeByte(':');\n+                    buf.print(linnum);\n+                    if (showColumns && charnum)\n+                    {\n+                        buf.writeByte(':');\n+                        buf.print(charnum);\n+                    }\n+                    break;\n+            }\n+        }\n+        return buf.extractChars();\n+    }\n+\n+    /**\n+     * Checks for equivalence by comparing the filename contents (not the pointer) and character location.\n+     *\n+     * Note:\n+     *  - Uses case-insensitive comparison on Windows\n+     *  - Ignores `charnum` if `Columns` is false.\n+     */\n+    extern (C++) bool equals(ref const(Loc) loc) const\n+    {\n+        return (!showColumns || charnum == loc.charnum) &&\n+               linnum == loc.linnum &&\n+               FileName.equals(filename, loc.filename);\n+    }\n+\n+    /**\n+     * `opEquals()` / `toHash()` for AA key usage\n+     *\n+     * Compare filename contents (case-sensitively on Windows too), not\n+     * the pointer - a static foreach loop repeatedly mixing in a mixin\n+     * may lead to multiple equivalent filenames (`foo.d-mixin-<line>`),\n+     * e.g., for test/runnable/test18880.d.\n+     */\n+    extern (D) bool opEquals(ref const(Loc) loc) const @trusted pure nothrow @nogc\n+    {\n+        import core.stdc.string : strcmp;\n+\n+        return charnum == loc.charnum &&\n+               linnum == loc.linnum &&\n+               (filename == loc.filename ||\n+                (filename && loc.filename && strcmp(filename, loc.filename) == 0));\n+    }\n+\n+    /// ditto\n+    extern (D) size_t toHash() const @trusted pure nothrow\n+    {\n+        import dmd.root.string : toDString;\n+\n+        auto hash = hashOf(linnum);\n+        hash = hashOf(charnum, hash);\n+        hash = hashOf(filename.toDString, hash);\n+        return hash;\n+    }\n+\n+    /******************\n+     * Returns:\n+     *   true if Loc has been set to other than the default initialization\n+     */\n+    bool isValid() const pure\n+    {\n+        return filename !is null;\n+    }\n+}"}, {"sha": "37953c2ca4a9188f353ba095e4a8be2835bac683", "filename": "gcc/d/dmd/mangle.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmangle.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "bc89ac4677eeb3826c3e30ccd056da9e773bf26c", "filename": "gcc/d/dmd/module.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmodule.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmodule.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmodule.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0.\n@@ -79,18 +79,18 @@ class Module final : public Package\n     Package *pkg;       // if isPackageFile is true, the Package that contains this package.d\n     Strings contentImportedFiles;  // array of files whose content was imported\n     int needmoduleinfo;\n-    int selfimports;            // 0: don't know, 1: does not, 2: does\n+    ThreeState selfimports;\n+    ThreeState rootimports;\n     void* tagSymTab;            // ImportC: tag symbols that conflict with other symbols used as the index\n     OutBuffer defines;          // collect all the #define lines here\n     bool selfImports();         // returns true if module imports itself\n \n-    int rootimports;            // 0: don't know, 1: does not, 2: does\n     bool rootImports();         // returns true if module imports root module\n \n-    int insearch;\n     Identifier *searchCacheIdent;\n     Dsymbol *searchCacheSymbol; // cached value of search\n     int searchCacheFlags;       // cached flags\n+    bool insearch;\n \n     // module from command line we're imported from,\n     // i.e. a module that will be taken all the"}, {"sha": "232042d9f4fab74425f3e47606f30a4c95d64390", "filename": "gcc/d/dmd/mtype.d", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmtype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmtype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Defines a D type.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/mtype.d, _mtype.d)\n@@ -41,6 +41,7 @@ import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n import dmd.init;\n+import dmd.location;\n import dmd.opover;\n import dmd.root.ctfloat;\n import dmd.common.outbuffer;\n@@ -7384,3 +7385,51 @@ private extern(D) MATCH matchTypeSafeVarArgs(TypeFunction tf, Parameter p,\n         return MATCH.nomatch;\n     }\n }\n+\n+/**\n+ * Creates an appropriate vector type for `tv` that will hold one boolean\n+ * result for each element of the vector type. The result of vector comparisons\n+ * is a single or doubleword mask of all 1s (comparison true) or all 0s\n+ * (comparison false). This SIMD mask type does not have an equivalent D type,\n+ * however its closest equivalent would be an integer vector of the same unit\n+ * size and length.\n+ *\n+ * Params:\n+ *   tv = The `TypeVector` to build a vector from.\n+ * Returns:\n+ *   A vector type suitable for the result of a vector comparison operation.\n+ */\n+TypeVector toBooleanVector(TypeVector tv)\n+{\n+    Type telem = tv.elementType();\n+    switch (telem.ty)\n+    {\n+        case Tvoid:\n+        case Tint8:\n+        case Tuns8:\n+        case Tint16:\n+        case Tuns16:\n+        case Tint32:\n+        case Tuns32:\n+        case Tint64:\n+        case Tuns64:\n+            // No need to build an equivalent mask type.\n+            return tv;\n+\n+        case Tfloat32:\n+            telem = Type.tuns32;\n+            break;\n+\n+        case Tfloat64:\n+            telem = Type.tuns64;\n+            break;\n+\n+        default:\n+            assert(0);\n+    }\n+\n+    TypeSArray tsa = tv.basetype.isTypeSArray();\n+    assert(tsa !is null);\n+\n+    return new TypeVector(new TypeSArray(telem, tsa.dim));\n+}"}, {"sha": "d0775f2f5fb4b1a9f5a702adb13ca913c617e9d1", "filename": "gcc/d/dmd/mtype.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "11cc3b8d6d8c6c7d1d5271475f2240eeff9728e0", "filename": "gcc/d/dmd/mustuse.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmustuse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fmustuse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmustuse.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Compile-time checks associated with the @mustuse attribute.\n  *\n- * Copyright: Copyright (C) 2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 2022-2023 by The D Language Foundation, All Rights Reserved\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/mustuse.d, _mustuse.d)\n  * Documentation:  https://dlang.org/phobos/dmd_mustuse.html\n@@ -15,6 +15,7 @@ import dmd.dsymbol;\n import dmd.expression;\n import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n \n // Used in isIncrementOrDecrement\n private static const StringExp plusPlus, minusMinus;\n@@ -147,7 +148,7 @@ private bool isAssignmentOpId(Identifier id)\n private bool isIncrementOrDecrement(Expression e)\n {\n     import dmd.dtemplate : isExpression;\n-    import dmd.globals : Loc;\n+    import dmd.location;\n     import dmd.id : Id;\n     import dmd.tokens : EXP;\n "}, {"sha": "370e3b81d20fb246cc0591335276dc7459524938", "filename": "gcc/d/dmd/nogc.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fnogc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fnogc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnogc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/function.html#nogc-functions, No-GC Functions)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/nogc.d, _nogc.d)"}, {"sha": "551db5b74754be81a8c9ba9ba49fb0b932a3c1be", "filename": "gcc/d/dmd/nspace.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fnspace.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fnspace.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnspace.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -36,7 +36,7 @@\n  * are valid D identifier.\n  *\n  * See_Also:    https://github.com/dlang/dmd/pull/10031\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/nspace.d, _nspace.d)\n@@ -55,6 +55,7 @@ import dmd.dsymbolsem;\n import dmd.expression;\n import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n import dmd.visitor;\n import core.stdc.stdio;\n "}, {"sha": "e9fb7bdc7771a86344eb9c5699cfecc685ef80f6", "filename": "gcc/d/dmd/nspace.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fnspace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fnspace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnspace.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "31e93a7637f15a4d8a43ff1d0f55cdf368acaaa8", "filename": "gcc/d/dmd/ob.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fob.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fob.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fob.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Flow analysis for Ownership/Borrowing\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/ob.d, _ob.d)\n@@ -35,6 +35,7 @@ import dmd.func;\n import dmd.globals;\n import dmd.identifier;\n import dmd.init;\n+import dmd.location;\n import dmd.mtype;\n import dmd.printast;\n import dmd.statement;"}, {"sha": "c493323e2380c36842dc39152ba39f6948b55c74", "filename": "gcc/d/dmd/objc.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fobjc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fobjc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fobjc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/objc_interface.html, Interfacing to Objective-C)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/objc.d, _objc.d)\n@@ -36,6 +36,7 @@ import dmd.gluelayer;\n import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.root.array;\n import dmd.common.outbuffer;"}, {"sha": "305ce812487fe33cef1c587b7b3015bfcf044d24", "filename": "gcc/d/dmd/objc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fobjc.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 2015-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 2015-2023 by The D Language Foundation, All Rights Reserved\n  * written by Michel Fortin\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "4d7fe9fcea362b1741f25ff2cc950fede69036c6", "filename": "gcc/d/dmd/opover.d", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fopover.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fopover.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fopover.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/operatoroverloading.html, Operator Overloading)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/opover.d, _opover.d)\n@@ -32,6 +32,7 @@ import dmd.globals;\n import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.statement;\n import dmd.tokens;\n@@ -931,6 +932,12 @@ Expression op_overload(Expression e, Scope* sc, EXP* pop = null)\n                     /* Rewrite as:\n                      *      .object.opEquals(e1, e2)\n                      */\n+                    if (!ClassDeclaration.object)\n+                    {\n+                        e.error(\"cannot compare classes for equality because `object.Object` was not declared\");\n+                        return null;\n+                    }\n+\n                     Expression e1x = e.e1;\n                     Expression e2x = e.e2;\n "}, {"sha": "b5d32b2932d95115ab0a55d0ee498f5e57964cf7", "filename": "gcc/d/dmd/optimize.d", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Foptimize.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Foptimize.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Foptimize.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Perform constant folding.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/optimize.d, _optimize.d)\n@@ -25,6 +25,7 @@ import dmd.expression;\n import dmd.expressionsem;\n import dmd.globals;\n import dmd.init;\n+import dmd.location;\n import dmd.mtype;\n import dmd.printast;\n import dmd.root.ctfloat;\n@@ -586,7 +587,7 @@ Expression Expression_optimize(Expression e, int result, bool keepLvalue)\n                     Expression ex = new AddrExp(ae1.loc, ae1);  // &a[i]\n                     ex.type = ae1.type.pointerTo();\n \n-                    Expression add = new AddExp(ae.loc, ex, new IntegerExp(ae.loc, offset, e.type));\n+                    Expression add = new AddExp(ae.loc, ex, new IntegerExp(ae.e2.loc, offset, ae.e2.type));\n                     add.type = e.type;\n                     ret = Expression_optimize(add, result, keepLvalue);\n                     return;\n@@ -862,7 +863,8 @@ Expression Expression_optimize(Expression e, int result, bool keepLvalue)\n                 return returnE_e1();    // can always convert a class to Object\n             // Need to determine correct offset before optimizing away the cast.\n             // https://issues.dlang.org/show_bug.cgi?id=16980\n-            cdfrom.size(e.loc);\n+            if (cdfrom.size(e.loc) == SIZE_INVALID)\n+                return error();\n             assert(cdfrom.sizeok == Sizeok.done);\n             assert(cdto.sizeok == Sizeok.done || !cdto.isBaseOf(cdfrom, null));\n             int offset;"}, {"sha": "6eb3021dd82e9a90bc9434f1b3b103a6ba71e96a", "filename": "gcc/d/dmd/parse.d", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/grammar.html, D Grammar)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/parse.d, _parse.d)\n@@ -20,6 +20,7 @@ import dmd.globals;\n import dmd.id;\n import dmd.identifier;\n import dmd.lexer;\n+import dmd.location;\n import dmd.errors;\n import dmd.root.filename;\n import dmd.common.outbuffer;\n@@ -52,7 +53,8 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n      */\n     extern (D) this(const ref Loc loc, AST.Module _module, const(char)[] input, bool doDocComment)\n     {\n-        super(_module ? _module.srcfile.toChars() : null, input.ptr, 0, input.length, doDocComment, false);\n+        super(_module ? _module.srcfile.toChars() : null, input.ptr, 0, input.length, doDocComment, false,\n+                global.vendor, global.versionNumber());\n \n         //printf(\"Parser::Parser()\\n\");\n         scanloc = loc;\n@@ -74,7 +76,8 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n \n     extern (D) this(AST.Module _module, const(char)[] input, bool doDocComment)\n     {\n-        super(_module ? _module.srcfile.toChars() : null, input.ptr, 0, input.length, doDocComment, false);\n+        super(_module ? _module.srcfile.toChars() : null, input.ptr, 0, input.length, doDocComment, false,\n+              global.vendor, global.versionNumber());\n \n         //printf(\"Parser::Parser()\\n\");\n         mod = _module;\n@@ -1982,7 +1985,7 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n     {\n         const loc = token.loc;\n         AST.Expression exp;\n-        AST.Expression msg = null;\n+        AST.Expressions* msg = null;\n \n         //printf(\"parseStaticAssert()\\n\");\n         nextToken();\n@@ -1991,15 +1994,16 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n         exp = parseAssignExp();\n         if (token.value == TOK.comma)\n         {\n-            nextToken();\n-            if (token.value != TOK.rightParenthesis)\n+            if (peekNext() == TOK.rightParenthesis)\n             {\n-                msg = parseAssignExp();\n-                if (token.value == TOK.comma)\n-                    nextToken();\n+                nextToken(); // consume `,`\n+                nextToken(); // consume `)`\n             }\n+            else\n+                msg = parseArguments();\n         }\n-        check(TOK.rightParenthesis);\n+        else\n+            check(TOK.rightParenthesis);\n         check(TOK.semicolon, \"static assert\");\n         return new AST.StaticAssert(loc, exp, msg);\n     }\n@@ -5719,6 +5723,8 @@ LagainStc:\n                         s = null;\n                     else if (token.value == TOK.leftCurly)\n                         s = parseStatement(ParseStatementFlags.curly | ParseStatementFlags.scope_);\n+                    else if (flags & ParseStatementFlags.curlyScope)\n+                        s = parseStatement(ParseStatementFlags.semiOk | ParseStatementFlags.curlyScope);\n                     else\n                         s = parseStatement(ParseStatementFlags.semiOk);\n                     s = new AST.LabelStatement(loc, ident, s);"}, {"sha": "9975c9c1f1ea441c2487e650eb1232e171e4ea2a", "filename": "gcc/d/dmd/printast.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fprintast.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fprintast.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fprintast.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Provides an AST printer for debugging.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/printast.d, _printast.d)"}, {"sha": "42d13994126ed7e861cdbaf10a51d903122e3295", "filename": "gcc/d/dmd/root/aav.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Faav.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Faav.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Faav.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Associative array implementation.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/aav.d, root/_aav.d)"}, {"sha": "e352c61ce6bf456999d1212e971026d63abf9e21", "filename": "gcc/d/dmd/root/array.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Farray.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Farray.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Farray.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2,7 +2,7 @@\n /**\n  * Dynamic array implementation.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/array.d, root/_array.d)"}, {"sha": "ebe2c47d0a0baca127d590d97879debd5e81b5b7", "filename": "gcc/d/dmd/root/array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Farray.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2011-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 2011-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "66adab65877b587df54c120372ea8174d71ede7a", "filename": "gcc/d/dmd/root/bitarray.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Implementation of a bit array.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/bitarray.d, root/_bitarray.d)"}, {"sha": "617cc9e2cfae8d823e33ce4c07bc58a5ec809d8f", "filename": "gcc/d/dmd/root/bitarray.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2011-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 2011-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "fc93bd7d404b6d18af4db99ced7cc3754847f873", "filename": "gcc/d/dmd/root/complex.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fcomplex.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fcomplex.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fcomplex.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Implements a complex number type.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/complex.d, _complex.d)"}, {"sha": "de2040b88f7854c9f7f7d43b1b10352518ec9ae3", "filename": "gcc/d/dmd/root/complex_t.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fcomplex_t.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fcomplex_t.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fcomplex_t.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "cd336e63f722d7043fb146c67bd31673986c5b4d", "filename": "gcc/d/dmd/root/ctfloat.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fctfloat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fctfloat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fctfloat.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Collects functions for compile-time floating-point calculations.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/ctfloat.d, root/_ctfloat.d)"}, {"sha": "44bd959edd9ff51d1ce6c0b08f526c3fe061a471", "filename": "gcc/d/dmd/root/ctfloat.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fctfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fctfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fctfloat.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,5 +1,5 @@\n \n-/* Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "0bc23b7a8b335617be0b7e81876e6de0a2cc0150", "filename": "gcc/d/dmd/root/dcompat.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,5 +1,5 @@\n \n-/* Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "1fb105682ea39f92aadca13ab2a3c6be18c83ea0", "filename": "gcc/d/dmd/root/file.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Ffile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Ffile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffile.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Read a file from disk and store it in memory.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/file.d, root/_file.d)"}, {"sha": "33f4a7aa4b155017af4a9eb52f69989318706174", "filename": "gcc/d/dmd/root/filename.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Ffilename.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Ffilename.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffilename.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Encapsulate path and file names.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/filename.d, root/_filename.d)"}, {"sha": "89774119d4d6600e2061c3ac6f71bf7107ff06a4", "filename": "gcc/d/dmd/root/filename.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Ffilename.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Ffilename.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffilename.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,5 +1,5 @@\n \n-/* Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "2acee35c4f3705266f5ad1831fb18fbf2a593189", "filename": "gcc/d/dmd/root/hash.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fhash.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fhash.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fhash.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Hash functions for arbitrary binary data.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Martin Nowak, Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/hash.d, root/_hash.d)"}, {"sha": "8e505f036c79e33db67bf06c5ec98b381ec8df39", "filename": "gcc/d/dmd/root/object.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fobject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fobject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fobject.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,5 +1,5 @@\n \n-/* Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "bc1016b102a24b8b706f1b8dbd4f90b06d496244", "filename": "gcc/d/dmd/root/optional.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Foptional.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Foptional.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foptional.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Implementation of an 'Optional' type\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/optional.d, root/_optional.d)"}, {"sha": "cc2ee79edeb6c47a0cea28adfc5226f432ed58e5", "filename": "gcc/d/dmd/root/optional.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Foptional.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Foptional.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foptional.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n /**\n  * Optional implementation.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/optional.h, root/_optional.h)"}, {"sha": "290280f619c990444724a08dd44e17529ecd1350", "filename": "gcc/d/dmd/root/port.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fport.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fport.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fport.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Portable routines for functions that have different implementations on different platforms.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/port.d, root/_port.d)"}, {"sha": "6fa3c000e5ac6aed9fbd3a507f106582683e5f53", "filename": "gcc/d/dmd/root/port.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fport.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,5 +1,5 @@\n \n-/* Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "9fc57f1e3a8131c44cb5b88f9e5486619b1d5e8c", "filename": "gcc/d/dmd/root/region.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fregion.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fregion.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fregion.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Region storage allocator implementation.\n  *\n- * Copyright:   Copyright (C) 2019-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 2019-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/region.d, root/_region.d)"}, {"sha": "9b1d9fba5244975d140535cb39701bc07bc0650e", "filename": "gcc/d/dmd/root/rmem.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Frmem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Frmem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Frmem.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Allocate memory using `malloc` or the GC depending on the configuration.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/rmem.d, root/_rmem.d)"}, {"sha": "36aa2646fdc68f56f6057a1c7f8907de638710e2", "filename": "gcc/d/dmd/root/rmem.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Frmem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Frmem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Frmem.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,5 +1,5 @@\n \n-/* Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+/* Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "4437d1622e4a156230d89283f102f0202f6bce93", "filename": "gcc/d/dmd/root/rootobject.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Frootobject.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Frootobject.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Frootobject.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Provide the root object that classes in dmd inherit from.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/rootobject.d, root/_rootobject.d)"}, {"sha": "b646bdda0ccfb840e81c57a6d913c0a7e903cae6", "filename": "gcc/d/dmd/root/speller.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fspeller.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fspeller.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fspeller.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Does not have any dependencies on the rest of DMD.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/speller.d, root/_speller.d)"}, {"sha": "8b204ab4cad5eefd7405313557e03fd5d93c1b12", "filename": "gcc/d/dmd/root/string.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fstring.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Contains various string related functions.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/string.d, root/_string.d)"}, {"sha": "de293eb9b55d968ee73502f951472a4f057024ac", "filename": "gcc/d/dmd/root/stringtable.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * A specialized associative array with string keys stored in a variable length structure.\n  *\n- * Copyright: Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright: Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:   Walter Bright, https://www.digitalmars.com\n  * License:   $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:    $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/stringtable.d, root/_stringtable.d)"}, {"sha": "c9781a46bc6db6fd437c5b940b7fdcb50499e14d", "filename": "gcc/d/dmd/root/utf.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Futf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Froot%2Futf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Futf.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Functions related to UTF encoding.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/root/utf.d, _utf.d)"}, {"sha": "c3fa90d7f791093bfb73e68698ff9cbd9e148f15", "filename": "gcc/d/dmd/safe.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsafe.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsafe.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsafe.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/function.html#function-safety, Function Safety)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/safe.d, _safe.d)"}, {"sha": "848602897b987bd8fd7efbff969eed579a6de756", "filename": "gcc/d/dmd/sapply.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsapply.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsapply.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsapply.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Provides a depth-first statement visitor.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/sparse.d, _sparse.d)"}, {"sha": "b25c26afff279ea850184e0047b3b05d6e8c0f8e", "filename": "gcc/d/dmd/scope.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fscope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fscope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fscope.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "c103f60689b8953b7718a281781ded0744e06f4b", "filename": "gcc/d/dmd/semantic2.d", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsemantic2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsemantic2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsemantic2.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Performs the semantic2 stage, which deals with initializer expressions.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/semantic2.d, _semantic2.d)\n@@ -110,21 +110,36 @@ private extern(C++) final class Semantic2Visitor : Visitor\n         else if (result)\n             return;\n \n-        if (sa.msg)\n+        if (sa.msgs)\n         {\n-            sc = sc.startCTFE();\n-            sa.msg = sa.msg.expressionSemantic(sc);\n-            sa.msg = resolveProperties(sc, sa.msg);\n-            sc = sc.endCTFE();\n-            sa.msg = sa.msg.ctfeInterpret();\n-            if (StringExp se = sa.msg.toStringExp())\n+            OutBuffer msgbuf;\n+            for (size_t i = 0; i < sa.msgs.length; i++)\n             {\n-                // same with pragma(msg)\n-                const slice = se.toUTF8(sc).peekString();\n-                error(sa.loc, \"static assert:  \\\"%.*s\\\"\", cast(int)slice.length, slice.ptr);\n+                Expression e = (*sa.msgs)[i];\n+                sc = sc.startCTFE();\n+                e = e.expressionSemantic(sc);\n+                e = resolveProperties(sc, e);\n+                sc = sc.endCTFE();\n+                e = ctfeInterpretForPragmaMsg(e);\n+                if (e.op == EXP.error)\n+                {\n+                    errorSupplemental(sa.loc, \"while evaluating `static assert` argument `%s`\", (*sa.msgs)[i].toChars());\n+                    return;\n+                }\n+                StringExp se = e.toStringExp();\n+                if (se)\n+                {\n+                    const slice = se.toUTF8(sc).peekString();\n+                    // Hack to keep old formatting to avoid changing error messages everywhere\n+                    if (sa.msgs.length == 1)\n+                        msgbuf.printf(\"\\\"%.*s\\\"\", cast(int)slice.length, slice.ptr);\n+                    else\n+                        msgbuf.printf(\"%.*s\", cast(int)slice.length, slice.ptr);\n+                }\n+                else\n+                    msgbuf.printf(\"%s\", e.toChars());\n             }\n-            else\n-                error(sa.loc, \"static assert:  %s\", sa.msg.toChars());\n+            error(sa.loc, \"static assert:  %s\", msgbuf.extractChars());\n         }\n         else\n             error(sa.loc, \"static assert:  `%s` is false\", sa.exp.toChars());"}, {"sha": "78da4a15a42e9244a2450d05bc221af463425dbd", "filename": "gcc/d/dmd/semantic3.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsemantic3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsemantic3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsemantic3.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Performs the semantic3 stage, which deals with function bodies.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/semantic3.d, _semantic3.d)\n@@ -47,6 +47,7 @@ import dmd.identifier;\n import dmd.init;\n import dmd.initsem;\n import dmd.hdrgen;\n+import dmd.location;\n import dmd.mtype;\n import dmd.nogc;\n import dmd.nspace;"}, {"sha": "ed938762babc30969576051820b26b999caf53a6", "filename": "gcc/d/dmd/sideeffect.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsideeffect.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fsideeffect.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsideeffect.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Find side-effects of expressions.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/sideeffect.d, _sideeffect.d)"}, {"sha": "96c59ba219c27af8a32daafc7b95b88c354a943d", "filename": "gcc/d/dmd/statement.d", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstatement.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstatement.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/statement.html, Statements)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/statement.d, _statement.d)\n@@ -36,6 +36,7 @@ import dmd.globals;\n import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.dinterpret;\n import dmd.mtype;\n import dmd.common.outbuffer;\n@@ -323,6 +324,10 @@ extern (C++) abstract class Statement : ASTNode\n             override void visit(DefaultStatement s)\n             {\n             }\n+\n+            override void visit(LabelStatement s)\n+            {\n+            }\n         }\n \n         scope HasCode hc = new HasCode();"}, {"sha": "76a39912718ccd9c3defcb93aaccfb2aefd082a5", "filename": "gcc/d/dmd/statement.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstatement.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstatement.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "dcdd96300022f6385e4903f690613e355713bc8a", "filename": "gcc/d/dmd/statement_rewrite_walker.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstatement_rewrite_walker.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstatement_rewrite_walker.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement_rewrite_walker.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Provides a visitor for statements that allows rewriting the currently visited node.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/statement_rewrite_walker.d, _statement_rewrite_walker.d)"}, {"sha": "5764efd60fd8331f53a5bb056def92bfbafbbf59", "filename": "gcc/d/dmd/statementsem.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstatementsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstatementsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/statement.html, Statements)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/statementsem.d, _statementsem.d)\n@@ -50,6 +50,7 @@ import dmd.identifier;\n import dmd.importc;\n import dmd.init;\n import dmd.intrange;\n+import dmd.location;\n import dmd.mtype;\n import dmd.mustuse;\n import dmd.nogc;"}, {"sha": "15c46b304baf9c2979e54a6109bc6a1ce9ebf83b", "filename": "gcc/d/dmd/staticassert.d", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstaticassert.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstaticassert.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstaticassert.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/version.html#static-assert, Static Assert)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/staticassert.d, _staticassert.d)\n@@ -13,10 +13,12 @@\n \n module dmd.staticassert;\n \n+import dmd.arraytypes;\n import dmd.dscope;\n import dmd.dsymbol;\n import dmd.expression;\n import dmd.globals;\n+import dmd.location;\n import dmd.id;\n import dmd.identifier;\n import dmd.mtype;\n@@ -27,19 +29,27 @@ import dmd.visitor;\n extern (C++) final class StaticAssert : Dsymbol\n {\n     Expression exp;\n-    Expression msg;\n+    Expressions* msgs;\n \n     extern (D) this(const ref Loc loc, Expression exp, Expression msg)\n     {\n         super(loc, Id.empty);\n         this.exp = exp;\n-        this.msg = msg;\n+        this.msgs = new Expressions(1);\n+        (*this.msgs)[0] = msg;\n+    }\n+\n+    extern (D) this(const ref Loc loc, Expression exp, Expressions* msgs)\n+    {\n+        super(loc, Id.empty);\n+        this.exp = exp;\n+        this.msgs = msgs;\n     }\n \n     override StaticAssert syntaxCopy(Dsymbol s)\n     {\n         assert(!s);\n-        return new StaticAssert(loc, exp.syntaxCopy(), msg ? msg.syntaxCopy() : null);\n+        return new StaticAssert(loc, exp.syntaxCopy(), msgs ? Expression.arraySyntaxCopy(msgs) : null);\n     }\n \n     override void addMember(Scope* sc, ScopeDsymbol sds)"}, {"sha": "2b7d300f6af42385e5ee4885b91649c33bb42e64", "filename": "gcc/d/dmd/staticassert.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstaticassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstaticassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstaticassert.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0.\n@@ -18,7 +18,7 @@ class StaticAssert : public Dsymbol\n {\n public:\n     Expression *exp;\n-    Expression *msg;\n+    Expressions *msg;\n \n     StaticAssert *syntaxCopy(Dsymbol *s) override;\n     void addMember(Scope *sc, ScopeDsymbol *sds) override;"}, {"sha": "aa6f37ca67b478a9257d5a1e19814edca1e80104", "filename": "gcc/d/dmd/staticcond.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstaticcond.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstaticcond.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstaticcond.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Lazily evaluate static conditions for `static if`, `static assert` and template constraints.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/staticcond.d, _staticcond.d)"}, {"sha": "7b2ea972f0e55067b747f1763bde8a16a0b1165e", "filename": "gcc/d/dmd/stmtstate.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstmtstate.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fstmtstate.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstmtstate.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Used to help transform statement AST into flow graph.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/stmtstate.d, _stmtstate.d)"}, {"sha": "fddfd546742d1214ed041fc026ec43f129a0bd39", "filename": "gcc/d/dmd/target.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftarget.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftarget.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftarget.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -15,7 +15,7 @@\n  * - $(LINK2 https://github.com/ldc-developers/ldc, LDC repository)\n  * - $(LINK2 https://github.com/D-Programming-GDC/gcc, GDC repository)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/target.d, _target.d)\n@@ -61,7 +61,7 @@ extern (C++) struct Target\n     import dmd.dscope : Scope;\n     import dmd.expression : Expression;\n     import dmd.func : FuncDeclaration;\n-    import dmd.globals : Loc;\n+    import dmd.location;\n     import dmd.astenums : LINK, TY;\n     import dmd.mtype : Type, TypeFunction, TypeTuple;\n     import dmd.root.ctfloat : real_t;"}, {"sha": "ef2c09d4147895b0c0f1884459155832f52be391", "filename": "gcc/d/dmd/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftarget.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 2013-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 2013-2023 by The D Language Foundation, All Rights Reserved\n  * written by Iain Buclaw\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "8e8ba16c0ab58844b45a99d1faa7e50325d7f68e", "filename": "gcc/d/dmd/template.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftemplate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftemplate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftemplate.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0.\n@@ -70,7 +70,6 @@ class TemplateDeclaration final : public ScopeDsymbol\n     bool isTrivialAlias;        // matches pattern `template Alias(T) { alias Alias = qualifiers(T); }`\n     bool deprecated_;           // this template declaration is deprecated\n     Visibility visibility;\n-    int inuse;                  // for recursive expansion detection\n \n     TemplatePrevious *previous;         // threaded list of previous instantiation attempts on stack\n "}, {"sha": "432daeea5c78cdcfb03526487137987e2d2e5044", "filename": "gcc/d/dmd/templateparamsem.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftemplateparamsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftemplateparamsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftemplateparamsem.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Semantic analysis of template parameters.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/templateparamsem.d, _templateparamsem.d)\n@@ -16,6 +16,7 @@ import dmd.dsymbol;\n import dmd.dscope;\n import dmd.dtemplate;\n import dmd.globals;\n+import dmd.location;\n import dmd.expression;\n import dmd.expressionsem;\n import dmd.root.rootobject;"}, {"sha": "b3cd2d3c4036a59bb3013553a94be4d0734d6e73", "filename": "gcc/d/dmd/tokens.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftokens.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftokens.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/lex.html#tokens, Tokens)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/tokens.d, _tokens.d)\n@@ -16,8 +16,8 @@ module dmd.tokens;\n import core.stdc.ctype;\n import core.stdc.stdio;\n import core.stdc.string;\n-import dmd.globals;\n import dmd.identifier;\n+import dmd.location;\n import dmd.root.ctfloat;\n import dmd.common.outbuffer;\n import dmd.root.rmem;\n@@ -636,8 +636,8 @@ extern (C++) struct Token\n     union\n     {\n         // Integers\n-        sinteger_t intvalue;\n-        uinteger_t unsvalue;\n+        long intvalue;\n+        ulong unsvalue;\n         // Floats\n         real_t floatvalue;\n "}, {"sha": "32ae5f437c40e2278121ac2bd04de92bd3f77d36", "filename": "gcc/d/dmd/tokens.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftokens.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftokens.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "048c24f7b22c8af483cd5c0fd09402caf53121d3", "filename": "gcc/d/dmd/traits.d", "status": "modified", "additions": 111, "deletions": 90, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftraits.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftraits.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,7 +3,7 @@\n  *\n  * Specification: $(LINK2 https://dlang.org/spec/traits.html, Traits)\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/traits.d, _traits.d)\n@@ -38,6 +38,7 @@ import dmd.globals;\n import dmd.hdrgen;\n import dmd.id;\n import dmd.identifier;\n+import dmd.location;\n import dmd.mtype;\n import dmd.nogc;\n import dmd.parse;\n@@ -88,82 +89,6 @@ private Dsymbol getDsymbolWithoutExpCtx(RootObject oarg)\n     return getDsymbol(oarg);\n }\n \n-private const StringTable!bool traitsStringTable;\n-\n-shared static this()\n-{\n-    static immutable string[] names =\n-    [\n-        \"isAbstractClass\",\n-        \"isArithmetic\",\n-        \"isAssociativeArray\",\n-        \"isDisabled\",\n-        \"isDeprecated\",\n-        \"isFuture\",\n-        \"isFinalClass\",\n-        \"isPOD\",\n-        \"isNested\",\n-        \"isFloating\",\n-        \"isIntegral\",\n-        \"isScalar\",\n-        \"isStaticArray\",\n-        \"isUnsigned\",\n-        \"isVirtualFunction\",\n-        \"isVirtualMethod\",\n-        \"isAbstractFunction\",\n-        \"isFinalFunction\",\n-        \"isOverrideFunction\",\n-        \"isStaticFunction\",\n-        \"isModule\",\n-        \"isPackage\",\n-        \"isRef\",\n-        \"isOut\",\n-        \"isLazy\",\n-        \"isReturnOnStack\",\n-        \"hasMember\",\n-        \"identifier\",\n-        \"getProtection\",\n-        \"getVisibility\",\n-        \"parent\",\n-        \"child\",\n-        \"getLinkage\",\n-        \"getMember\",\n-        \"getOverloads\",\n-        \"getVirtualFunctions\",\n-        \"getVirtualMethods\",\n-        \"classInstanceSize\",\n-        \"classInstanceAlignment\",\n-        \"allMembers\",\n-        \"derivedMembers\",\n-        \"isSame\",\n-        \"compiles\",\n-        \"getAliasThis\",\n-        \"getAttributes\",\n-        \"getFunctionAttributes\",\n-        \"getFunctionVariadicStyle\",\n-        \"getParameterStorageClasses\",\n-        \"getUnitTests\",\n-        \"getVirtualIndex\",\n-        \"getPointerBitmap\",\n-        \"isZeroInit\",\n-        \"getTargetInfo\",\n-        \"getLocation\",\n-        \"hasPostblit\",\n-        \"hasCopyConstructor\",\n-        \"isCopyable\",\n-        \"parameters\"\n-    ];\n-\n-    StringTable!(bool)* stringTable = cast(StringTable!(bool)*) &traitsStringTable;\n-    stringTable._init(names.length);\n-\n-    foreach (s; names)\n-    {\n-        auto sv = stringTable.insert(s, true);\n-        assert(sv);\n-    }\n-}\n-\n /**\n  * get an array of size_t values that indicate possible pointer words in memory\n  *  if interpreted as the type given as argument\n@@ -2122,20 +2047,11 @@ Expression semanticTraits(TraitsExp e, Scope* sc)\n         auto tup = new TupleExp(e.loc, exps);\n         return tup.expressionSemantic(sc);\n     }\n-    static const(char)[] trait_search_fp(const(char)[] seed, out int cost)\n-    {\n-        //printf(\"trait_search_fp('%s')\\n\", seed);\n-        if (!seed.length)\n-            return null;\n-        cost = 0;       // all the same cost\n-        const sv = traitsStringTable.lookup(seed);\n-        return sv ? sv.toString() : null;\n-    }\n \n-    if (auto sub = speller!trait_search_fp(e.ident.toString()))\n-        e.error(\"unrecognized trait `%s`, did you mean `%.*s`?\", e.ident.toChars(), cast(int) sub.length, sub.ptr);\n-    else\n-        e.error(\"unrecognized trait `%s`\", e.ident.toChars());\n+    /* Can't find the identifier. Try a spell check for a better error message\n+     */\n+    traitNotFound(e);\n+\n     return ErrorExp.get();\n }\n \n@@ -2263,3 +2179,108 @@ Lnext:\n     }\n     return true;\n }\n+\n+\n+/***********************************\n+ * A trait was not found. Give a decent error message\n+ * by trying a spell check.\n+ * Params:\n+ *      e = the offending trait\n+ */\n+private void traitNotFound(TraitsExp e)\n+{\n+    __gshared const StringTable!bool traitsStringTable;\n+    __gshared bool initialized;\n+\n+    if (!initialized)\n+    {\n+        initialized = true;     // lazy initialization\n+\n+        // All possible traits\n+        __gshared Identifier*[58] idents =\n+        [\n+            &Id.isAbstractClass,\n+            &Id.isArithmetic,\n+            &Id.isAssociativeArray,\n+            &Id.isDisabled,\n+            &Id.isDeprecated,\n+            &Id.isFuture,\n+            &Id.isFinalClass,\n+            &Id.isPOD,\n+            &Id.isNested,\n+            &Id.isFloating,\n+            &Id.isIntegral,\n+            &Id.isScalar,\n+            &Id.isStaticArray,\n+            &Id.isUnsigned,\n+            &Id.isVirtualFunction,\n+            &Id.isVirtualMethod,\n+            &Id.isAbstractFunction,\n+            &Id.isFinalFunction,\n+            &Id.isOverrideFunction,\n+            &Id.isStaticFunction,\n+            &Id.isModule,\n+            &Id.isPackage,\n+            &Id.isRef,\n+            &Id.isOut,\n+            &Id.isLazy,\n+            &Id.isReturnOnStack,\n+            &Id.hasMember,\n+            &Id.identifier,\n+            &Id.getProtection,\n+            &Id.getVisibility,\n+            &Id.parent,\n+            &Id.child,\n+            &Id.getLinkage,\n+            &Id.getMember,\n+            &Id.getOverloads,\n+            &Id.getVirtualFunctions,\n+            &Id.getVirtualMethods,\n+            &Id.classInstanceSize,\n+            &Id.classInstanceAlignment,\n+            &Id.allMembers,\n+            &Id.derivedMembers,\n+            &Id.isSame,\n+            &Id.compiles,\n+            &Id.getAliasThis,\n+            &Id.getAttributes,\n+            &Id.getFunctionAttributes,\n+            &Id.getFunctionVariadicStyle,\n+            &Id.getParameterStorageClasses,\n+            &Id.getUnitTests,\n+            &Id.getVirtualIndex,\n+            &Id.getPointerBitmap,\n+            &Id.isZeroInit,\n+            &Id.getTargetInfo,\n+            &Id.getLocation,\n+            &Id.hasPostblit,\n+            &Id.hasCopyConstructor,\n+            &Id.isCopyable,\n+            &Id.parameters,\n+        ];\n+\n+        StringTable!(bool)* stringTable = cast(StringTable!(bool)*) &traitsStringTable;\n+        stringTable._init(idents.length);\n+\n+        foreach (id; idents)\n+        {\n+            auto sv = stringTable.insert((*id).toString(), true);\n+            assert(sv);\n+        }\n+    }\n+\n+    static const(char)[] trait_search_fp(const(char)[] seed, out int cost)\n+    {\n+        //printf(\"trait_search_fp('%s')\\n\", seed);\n+        if (!seed.length)\n+            return null;\n+        cost = 0;       // all the same cost\n+        const sv = traitsStringTable.lookup(seed);\n+        return sv ? sv.toString() : null;\n+    }\n+\n+    if (auto sub = speller!trait_search_fp(e.ident.toString()))\n+        e.error(\"unrecognized trait `%s`, did you mean `%.*s`?\", e.ident.toChars(), cast(int) sub.length, sub.ptr);\n+    else\n+        e.error(\"unrecognized trait `%s`\", e.ident.toChars());\n+}"}, {"sha": "5844911bc6aeb63619750e5f0cadbcce6df0c6e4", "filename": "gcc/d/dmd/transitivevisitor.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -490,8 +490,9 @@ package mixin template ParseVisitMethods(AST)\n     {\n         //printf(\"Visiting StaticAssert\\n\");\n         s.exp.accept(this);\n-        if (s.msg)\n-            s.msg.accept(this);\n+        if (s.msgs)\n+            foreach (m; (*s.msgs)[])\n+                m.accept(this);\n     }\n \n     override void visit(AST.EnumMember em)"}, {"sha": "0d64ba46a503c528dc55fe220288d0fb8d3b5d77", "filename": "gcc/d/dmd/typesem.d", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftypesem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftypesem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftypesem.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Semantic analysis for D types.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/typesem.d, _typesem.d)\n@@ -46,6 +46,7 @@ import dmd.imphint;\n import dmd.importc;\n import dmd.init;\n import dmd.initsem;\n+import dmd.location;\n import dmd.visitor;\n import dmd.mtype;\n import dmd.objc;\n@@ -234,7 +235,7 @@ private void resolveHelper(TypeQualified mt, const ref Loc loc, Scope* sc, Dsymb\n                 .error(loc, \"`%s` is not visible from module `%s`\", sm.toPrettyChars(), sc._module.toChars());\n                 sm = null;\n             }\n-            // Same check as in Expression.semanticY(DotIdExp)\n+            // Same check as in dotIdSemanticProp(DotIdExp)\n             else if (sm.isPackage() && checkAccess(sc, sm.isPackage()))\n             {\n                 // @@@DEPRECATED_2.106@@@\n@@ -3685,7 +3686,7 @@ Expression dotExp(Type mt, Scope* sc, Expression e, Identifier ident, int flag)\n                  *  template opDispatch(name) if (isValid!name) { ... }\n                  */\n                 uint errors = gagError ? global.startGagging() : 0;\n-                e = dti.semanticY(sc, 0);\n+                e = dti.dotTemplateSemanticProp(sc, 0);\n                 if (gagError && global.endGagging(errors))\n                     e = null;\n                 return returnExp(e);\n@@ -3703,7 +3704,7 @@ Expression dotExp(Type mt, Scope* sc, Expression e, Identifier ident, int flag)\n                 auto die = new DotIdExp(e.loc, alias_e, ident);\n \n                 auto errors = gagError ? 0 : global.startGagging();\n-                auto exp = die.semanticY(sc, gagError);\n+                auto exp = die.dotIdSemanticProp(sc, gagError);\n                 if (!gagError)\n                 {\n                     global.endGagging(errors);\n@@ -3959,7 +3960,14 @@ Expression dotExp(Type mt, Scope* sc, Expression e, Identifier ident, int flag)\n         Dsymbol s = mt.sym.search(e.loc, ident);\n         if (!s)\n         {\n-            if (ident == Id.max || ident == Id.min || ident == Id._init)\n+            if (ident == Id._init)\n+            {\n+                return mt.getProperty(sc, e.loc, ident, flag & 1);\n+            }\n+\n+            /* Allow special enums to not need a member list\n+             */\n+            if ((ident == Id.max || ident == Id.min) && (mt.sym.members || !mt.sym.isSpecial()))\n             {\n                 return mt.getProperty(sc, e.loc, ident, flag & 1);\n             }\n@@ -4880,13 +4888,6 @@ Expression getMaxMinValue(EnumDeclaration ed, const ref Loc loc, Identifier id)\n         return errorReturn();\n     if (!ed.members)\n     {\n-        if (ed.isSpecial())\n-        {\n-            /* Allow these special enums to not need a member list\n-             */\n-            return ed.memtype.getProperty(ed._scope, loc, id, 0);\n-        }\n-\n         ed.error(loc, \"is opaque and has no `.%s`\", id.toChars());\n         return errorReturn();\n     }"}, {"sha": "b35e03de91f9f420c8e2cd65c5a9db820e60a49a", "filename": "gcc/d/dmd/typinf.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftypinf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Ftypinf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftypinf.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Generate `TypeInfo` objects, which are needed for run-time introspection of types.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/typeinf.d, _typeinf.d)\n@@ -21,6 +21,7 @@ import dmd.errors;\n import dmd.expression;\n import dmd.globals;\n import dmd.gluelayer;\n+import dmd.location;\n import dmd.mtype;\n import dmd.visitor;\n import core.stdc.stdio;"}, {"sha": "dfb4cb5ee2d6bd3eb158a5707dcecad491bf954a", "filename": "gcc/d/dmd/utils.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Futils.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Futils.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Futils.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * This module defines some utility functions for DMD.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/utils.d, _utils.d)\n@@ -13,7 +13,7 @@ module dmd.utils;\n \n import core.stdc.string;\n import dmd.errors;\n-import dmd.globals;\n+import dmd.location;\n import dmd.root.file;\n import dmd.root.filename;\n import dmd.common.outbuffer;"}, {"sha": "697d46ee211425d6a0e174667fb3529bea443f23", "filename": "gcc/d/dmd/version.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fversion.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * written by Walter Bright\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0."}, {"sha": "e4c2a91e7f7adf377e58cd9777a69e62f0f758aa", "filename": "gcc/d/dmd/visitor.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fvisitor.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fvisitor.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fvisitor.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,7 +1,7 @@\n /**\n  * Provides a visitor class visiting all AST nodes present in the compiler.\n  *\n- * Copyright:   Copyright (C) 1999-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright:   Copyright (C) 1999-2023 by The D Language Foundation, All Rights Reserved\n  * Authors:     $(LINK2 https://www.digitalmars.com, Walter Bright)\n  * License:     $(LINK2 https://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source:      $(LINK2 https://github.com/dlang/dmd/blob/master/src/dmd/visitor.d, _visitor.d)"}, {"sha": "f8cbdb48c923ec63fcaf6965bf938b51db9a0267", "filename": "gcc/d/dmd/visitor.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fvisitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Fd%2Fdmd%2Fvisitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fvisitor.h?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,6 +1,6 @@\n \n /* Compiler implementation of the D programming language\n- * Copyright (C) 2013-2022 by The D Language Foundation, All Rights Reserved\n+ * Copyright (C) 2013-2023 by The D Language Foundation, All Rights Reserved\n  * https://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0.\n  * https://www.boost.org/LICENSE_1_0.txt"}, {"sha": "373d5d1e229b056438c4d89ac3bcf5b39c52fbc7", "filename": "gcc/testsuite/gdc.dg/simd2a.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2a()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "e72da0d9b777bcede341f02a81d572b130fa247d", "filename": "gcc/testsuite/gdc.dg/simd2b.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2b()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "dc4954e219438a0d71c6daae08782236865c0dfa", "filename": "gcc/testsuite/gdc.dg/simd2c.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2c()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "2d782bac89cba5bccde44871786c83133c79c0a0", "filename": "gcc/testsuite/gdc.dg/simd2d.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2d()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "b6d4ed6ef3a8582bd6ec2881c66a51ae65032c5e", "filename": "gcc/testsuite/gdc.dg/simd2e.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2e()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "df8f13fddd17e116504f46a3f73dacde1ad73aac", "filename": "gcc/testsuite/gdc.dg/simd2f.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2f()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "028b25e7d170f08f3eacbf159d7e2904988438d0", "filename": "gcc/testsuite/gdc.dg/simd2g.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2g()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "6c3e91a88142dcc9716881643ef2aaaeecf863dc", "filename": "gcc/testsuite/gdc.dg/simd2h.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2h()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     v1 = v2 << 1;\n     v1 = v2 >> 1;\n     v1 = v2 >>> 1;"}, {"sha": "2fa7f3ad86ea2acbecc24cd4463187f900d2fcca", "filename": "gcc/testsuite/gdc.dg/simd2i.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2i()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     static assert(!__traits(compiles, v1 << 1));\n     static assert(!__traits(compiles, v1 >> 1));\n     static assert(!__traits(compiles, v1 >>> 1));"}, {"sha": "7c2d12f33cf5026899844ccffd825395b217298b", "filename": "gcc/testsuite/gdc.dg/simd2j.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -18,12 +18,12 @@ void test2j()\n     static assert(!__traits(compiles, v1 ^^ v2));\n     static assert(!__traits(compiles, v1 is v2));\n     static assert(!__traits(compiles, v1 !is v2));\n-    v1 = v1 == v2;\n-    v1 = v1 != v2;\n-    v1 = v1 < v2;\n-    v1 = v1 > v2;\n-    v1 = v1 <= v2;\n-    v1 = v1 >= v2;\n+    static assert( __traits(compiles, v1 == v2));\n+    static assert( __traits(compiles, v1 != v2));\n+    static assert( __traits(compiles, v1 < v2));\n+    static assert( __traits(compiles, v1 > v2));\n+    static assert( __traits(compiles, v1 <= v2));\n+    static assert( __traits(compiles, v1 >= v2));\n     static assert(!__traits(compiles, v1 << 1));\n     static assert(!__traits(compiles, v1 >> 1));\n     static assert(!__traits(compiles, v1 >>> 1));"}, {"sha": "1983b4acdd234b24ca79ebcecc1e2e3ed316d959", "filename": "gcc/testsuite/gdc.test/compilable/extra-files/build23499.d", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fbuild23499.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fbuild23499.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fbuild23499.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,7 @@\n+import imports.file23499;\n+\n+bool do_build()\n+{\n+    string outdir ;\n+    return (exists(outdir));\n+}"}, {"sha": "76e1b781ac1142ad6a7e4a233b281838554806ba", "filename": "gcc/testsuite/gdc.test/compilable/imports/file23499.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ffile23499.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ffile23499.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ffile23499.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,19 @@\n+\n+///---- file.d\n+struct TempCStringBuffer(To )\n+{\n+    ~this()\n+    {\n+    }\n+    To* _ptr;\n+}\n+\n+auto tempCString(To, From)(From)\n+{\n+    return TempCStringBuffer!To();\n+}\n+\n+bool exists(R)(R name)\n+{\n+    return name.tempCString!wchar._ptr != null;\n+}"}, {"sha": "13fc78fc10e00c8fe0f6ba8a41551f88c96503ec", "filename": "gcc/testsuite/gdc.test/compilable/imports/test23490frop.d", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490frop.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490frop.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490frop.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,7 @@\n+module imports.test23490frop;\n+import imports.test23490pop;\n+class Mu23490 : Pop23490 { }\n+class Frop23490 : Pop23490 {\n+  // final       // does not fail if declared final\n+  void frolick() {}\n+}"}, {"sha": "4757bbd0208e0c0fc1e32e512656e235283b4673", "filename": "gcc/testsuite/gdc.test/compilable/imports/test23490pop.d", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490pop.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490pop.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490pop.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,7 @@\n+module imports.test23490pop;\n+import imports.test23490frop;\n+import imports.test23490zoo : Zoo23490;\n+class Pop23490 {\n+  void frop(Frop23490) { }\n+  void zoo(Zoo23490) { }\n+}"}, {"sha": "7ae8b97d7c65b2a774d1793cc1ef103ab4a7bc9e", "filename": "gcc/testsuite/gdc.test/compilable/imports/test23490zoo.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490zoo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490zoo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest23490zoo.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,17 @@\n+module imports.test23490zoo;\n+import imports.test23490pop;\n+import imports.test23490frop;\n+class Foo23490() : Pop23490 {\n+  override void frop(Frop23490 f) {\n+    f.frolick;\n+  }\n+}\n+class Baz23490 {\n+  Foo23490!() foo;\n+  Frop23490 frop;\n+}\n+class Bar23490 {\n+  static instance() { return new Baz23490; }\n+  auto ss = __traits(getAttributes, instance.frop);\n+}\n+class Zoo23490 { }"}, {"sha": "5cd8d8ecfc51dff8066dbd18e8922dd6ec2466ac", "filename": "gcc/testsuite/gdc.test/compilable/isexpalias.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fisexpalias.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fisexpalias.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fisexpalias.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,9 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23578\n+struct S(alias a)\n+{\n+}\n+\n+static if (is(S!int == S!av, alias av))\n+    static assert(is(av == int));\n+else\n+    static assert(false);"}, {"sha": "0cc90cff66125fcb10837139501825e1f47ef184", "filename": "gcc/testsuite/gdc.test/compilable/issue20618.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue20618.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue20618.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue20618.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,10 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22198\n+// This test was in fail_compilation, however the change in the compiler has\n+// been reverted to make this code compilable again.\n+void main()\n+{\n+    int[10] a;\n+    auto b = a[1..12];\n+    auto c = a[4..3];\n+    auto d = a[0..$ + 1];\n+}"}, {"sha": "88a3b60cdab5610feaf88c6c7b9a8ddd696493d7", "filename": "gcc/testsuite/gdc.test/compilable/issue22646.d", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22646.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22646.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22646.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,67 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22646\n+\n+static template logicalOr22646(T, const T name)\n+{\n+    enum bool ok = name.length < 3 || name[0..3] != \"pad\";\n+}\n+static template logicalAnd22646(T, const T name)\n+{\n+    enum bool ok = name.length >= 3 && name[0..3] == \"pad\";\n+}\n+\n+bool runtime22646Or(T, const T name)()\n+{\n+    return name.length < 3 || name[0..3] != \"pad\";\n+}\n+\n+// SCOPE.ctfe\n+static assert(logicalOr22646!(string, \"x\").ok == true);\n+static assert(logicalOr22646!(string, \"foo\").ok == true);\n+static assert(logicalOr22646!(string, \"pad\").ok == false);\n+static assert(logicalOr22646!(string, \"pad123\").ok == false);\n+\n+static assert(logicalOr22646!(char[1], \"x\").ok == true);\n+static assert(logicalOr22646!(char[3], \"foo\").ok == true);\n+static assert(logicalOr22646!(char[3], \"pad\").ok == false);\n+static assert(logicalOr22646!(char[6], \"pad123\").ok == false);\n+\n+static assert(logicalAnd22646!(string, \"x\").ok == false);\n+static assert(logicalAnd22646!(string, \"foo\").ok == false);\n+static assert(logicalAnd22646!(string, \"pad\").ok == true);\n+static assert(logicalAnd22646!(string, \"pad123\").ok == true);\n+\n+static assert(logicalAnd22646!(char[1], \"x\").ok == false);\n+static assert(logicalAnd22646!(char[3], \"foo\").ok == false);\n+static assert(logicalAnd22646!(char[3], \"pad\").ok == true);\n+static assert(logicalAnd22646!(char[6], \"pad123\").ok == true);\n+\n+// SCOPE.compile\n+enum char[1] x22646 = \"x\";\n+enum char[3] pad22646 = \"pad\";\n+\n+static assert(__traits(compiles, x22646.length < 3 || x22646[0..3] != \"pad\") == true);\n+static assert(__traits(compiles, x22646.length >= 3 || x22646[0..3] == \"pad\") == true);\n+static assert(__traits(compiles, pad22646.length < 3 || pad22646[0..3] != \"pad\") == true);\n+static assert(__traits(compiles, pad22646.length >= 3 || pad22646[0..3] == \"pad\") == true);\n+\n+// sc.intypeof\n+typeof(x22646.length < 3 || x22646[0..3] != \"pad\") typeof22646or1;\n+static assert(is(typeof(typeof22646or1) == bool));\n+typeof(pad22646.length < 3 || pad22646[0..3] != \"pad\") typeof22646or2;\n+static assert(is(typeof(typeof22646or2) == bool));\n+\n+typeof(x22646.length >= 3 && x22646[0..3] == \"pad\") typeof22646and1;\n+static assert(is(typeof(typeof22646and1) == bool));\n+typeof(pad22646.length >= 3 && pad22646[0..3] == \"pad\") typeof22646and2;\n+static assert(is(typeof(typeof22646and2) == bool));\n+\n+// No SCOPE flags\n+alias test22646a = runtime22646Or!(string, \"x\");\n+alias test22646b = runtime22646Or!(string, \"foo\");\n+alias test22646c = runtime22646Or!(string, \"pad\");\n+alias test22646d = runtime22646Or!(string, \"pad123\");\n+\n+alias test22646e = runtime22646Or!(char[1], \"x\");\n+alias test22646f = runtime22646Or!(char[3], \"foo\");\n+alias test22646g = runtime22646Or!(char[3], \"pad\");\n+alias test22646h = runtime22646Or!(char[6], \"pad123\");"}, {"sha": "4d5a518853fe594c4c337746d71ede6e5475c91e", "filename": "gcc/testsuite/gdc.test/compilable/issue22854.d", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22854.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22854.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22854.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,20 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22854\n+void test22854()\n+{\n+    static foreach (ch; SomeContainer().range) { }\n+}\n+\n+struct SomeContainer\n+{\n+    SomeRange range() { return SomeRange(); }\n+    TypeWithDestructor data;\n+}\n+\n+struct TypeWithDestructor { ~this() { } }\n+\n+struct SomeRange\n+{\n+    int front() { return 0; }\n+    bool empty() { return true; }\n+    void popFront() { }\n+}"}, {"sha": "02b59aa71c0901295881d579ad1b13472a07bcd1", "filename": "gcc/testsuite/gdc.test/compilable/issue22975.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22975.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22975.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue22975.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,12 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22975\n+void test22975a(int) {};\n+\n+alias test22975b = test22975a;\n+\n+void test22975b(bool) {}\n+\n+alias test22975c = test22975b;\n+\n+alias test22975a = test22975c;\n+\n+void test22975c(float) {}"}, {"sha": "d33242ded3b2da60577d59bac1db5d6dd5f7aead", "filename": "gcc/testsuite/gdc.test/compilable/issue23391.d", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue23391.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue23391.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue23391.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,31 @@\n+struct MyTuple {\n+    string s;\n+}\n+\n+inout(string) myfront(inout(string)[] a)\n+{\n+    return a[0];\n+}\n+\n+MyTuple[] myarray(MyZip r)\n+{\n+    MyTuple[] result;\n+    foreach (e; r)\n+        result ~= e;\n+    return result;\n+}\n+\n+struct MyZip\n+{\n+    bool empty = false;\n+    MyTuple front()\n+    {\n+        return MyTuple([\"\"].myfront);\n+    }\n+    void popFront()\n+    {\n+        empty = true;\n+    }\n+}\n+\n+static foreach(t; MyZip().myarray) {}"}, {"sha": "9c0406b81edccf2250bd0ab604c2e868aa8a06e0", "filename": "gcc/testsuite/gdc.test/compilable/issue23567.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue23567.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue23567.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue23567.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,9 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23567\n+extern(C++) abstract class CCvar\n+{\n+public:\n+    pragma(printf) void func1(const(char)* pFormat, ...);\n+    pragma(printf) void func2(const(char)* pFormat, ...);\n+}\n+\n+static assert(__traits(getVirtualIndex, CCvar.func2) == 1);"}, {"sha": "daf194d034cc1a2fffd93aaa8f46de56f856f6f3", "filename": "gcc/testsuite/gdc.test/compilable/noreturn1.d", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn1.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -150,3 +150,14 @@ void noreturnImplicit()\n         auto y = (throw new Exception(\"wow\")) + value;\n     }\n }\n+\n+// https://issues.dlang.org/show_bug.cgi?id=23549\n+int foo(int g = assert(0)) {\n+    return g;\n+}\n+\n+// https://issues.dlang.org/show_bug.cgi?id=22587\n+int front(int param)\n+{\n+    return param ? 1 : assert(0);\n+}"}, {"sha": "69689d24d8560b76d4a015165881d7beb3a76ea6", "filename": "gcc/testsuite/gdc.test/compilable/noreturn3.d", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn3.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -245,13 +245,3 @@ struct S22858\n static assert (S22858.arr.offsetof % size_t.sizeof == 0);\n static assert (S22858.arr2.offsetof == S22858.c.offsetof + 1);\n static assert (S22858.arr2.offsetof == S22858.c2.offsetof);\n-\n-// https://issues.dlang.org/show_bug.cgi?id=23331\n-\n-auto fun() { return double(new noreturn[](0)[0]); }\n-auto gun() { return double(assert(0)); }\n-auto hun() { return int(assert(0)); }\n-\n-// https://issues.dlang.org/show_bug.cgi?id=23379\n-\n-void casting_noreturn() { auto b = cast(double)(assert(0)); }"}, {"sha": "a9d62a1ebaa0e85e056fb02f657550b1e27d739a", "filename": "gcc/testsuite/gdc.test/compilable/test18646.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest18646.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest18646.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest18646.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,14 @@\n+// https://issues.dlang.org/show_bug.cgi?id=18646\n+class SuperClass {}\n+\n+class TemplatedClass(T : SuperClass) {}\n+\n+class A18646 : SuperClass {\n+    alias T = TemplatedClass!B18646;\n+}\n+\n+class B18646 : SuperClass {\n+    alias T = TemplatedClass!C18646;\n+}\n+\n+class C18646 : SuperClass {}"}, {"sha": "a84a7ee3cd617d4e63c168ce6671c403fce0e46f", "filename": "gcc/testsuite/gdc.test/compilable/test19585.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19585.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19585.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19585.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,10 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19585\n+struct S19585\n+{\n+    M2 stdin;\n+}\n+\n+mixin template Handle(T, T invalid_value = T.init) {}\n+\n+struct M1 { mixin Handle!(size_t); }\n+struct M2 { mixin Handle!(M1); }"}, {"sha": "d7b5fdf1a9dd0b850190fb17f234ba6d12d73b0a", "filename": "gcc/testsuite/gdc.test/compilable/test22638.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22638.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22638.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22638.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,15 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22638\n+\n+struct S\n+{\n+    this(ref const(S));\n+    ~this();\n+}\n+\n+extern(C++) void set(const S s);\n+\n+void disp()\n+{\n+    S p;\n+    return set(p);\n+}"}, {"sha": "7cdd5345b99a0e326b767ad0f3dc8745f4eea8fa", "filename": "gcc/testsuite/gdc.test/compilable/test22813.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22813.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22813.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22813.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,9 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22813\n+struct Template(int i) { }\n+uint test22813()\n+{\n+    Template!(1) x;\n+    return 0;\n+}\n+immutable constant = test22813();\n+alias X = Template!constant;"}, {"sha": "7c03e824bc626c15540fb157e4b7551533ca9e37", "filename": "gcc/testsuite/gdc.test/compilable/test23481.d", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23481.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23481.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23481.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,28 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23481\n+\n+struct flagenum(I = ubyte)\n+{\n+\tI i = 1;\n+    alias i this;\n+\n+\tauto opBinary(string s)(int j) {\n+\t\treturn typeof(this)(cast(I)(i*2));\n+\t}\n+\tauto opEquals(I a) {\n+\t\treturn false;\n+\t}\n+}\n+\n+enum alphakey\n+{\n+    a = flagenum!int(), b, c, d, e, f, g, h, i, j, k, l,\n+    m, n, o, p, q, r, s, t, u, v, w, x, y, z\n+}\n+\n+flagenum!int alpha;\n+\n+void main()\n+{\n+\talpha &= alphakey.a;\n+    alpha = alpha & alphakey.a; // also crashed in another way\n+}"}, {"sha": "0d61a092cac2d68eabd2bc865e50c45cacb68601", "filename": "gcc/testsuite/gdc.test/compilable/test23490.d", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23490.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23490.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23490.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,3 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23490\n+// EXTRA_FILES: imports/test23490frop.d imports/test23490pop.d imports/test23490zoo.d\n+import imports.test23490pop;"}, {"sha": "7a13c042fdc79120dfaf406a655fda41ca6f4ae7", "filename": "gcc/testsuite/gdc.test/compilable/test23497.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23497.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23497.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23497.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,19 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23497\n+\n+class A {}\n+\n+A getA(T t) {\n+    return t.a;\n+}\n+\n+struct T {\n+    A _a;\n+\n+    void k() {}\n+\n+    auto a() in {\n+        k();\n+    } do {\n+        return _a;\n+    }\n+}"}, {"sha": "12e3f25b22547a7725b2d1554270d16ea974029c", "filename": "gcc/testsuite/gdc.test/compilable/test23499.d", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23499.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23499.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23499.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,6 @@\n+// REQUIRED_ARGS: -inline\n+// EXTRA_SOURCES: extra-files/build23499.d\n+// EXTRA_FILES: imports/file23499.d\n+// https://issues.dlang.org/show_bug.cgi?id=23499\n+\n+import imports.file23499;"}, {"sha": "712c284bb1135e58a1a60d16be8912fc699bd3bb", "filename": "gcc/testsuite/gdc.test/compilable/test23529.d", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23529.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23529.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23529.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,6 @@\n+static assert(!__traits(compiles, ()\n+{\n+    char[24] x;\n+    int myNumber = 4;\n+    return cast(char[4]) (x[myNumber .. myNumber + 4]);\n+} ()));"}, {"sha": "db6bbe749d34b8b92b032b7aef34bdd03e599584", "filename": "gcc/testsuite/gdc.test/compilable/test23532.d", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23532.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23532.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23532.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,67 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23532\n+// DISABLED: win32 win64\n+struct _Complex(T)\n+{\n+    T re;\n+    T im;\n+    static @property epsilon()()    { return _Complex(T.epsilon, T.epsilon); }\n+    static @property infinity()()   { return _Complex(T.infinity, T.infinity); }\n+    static @property max()()        { return _Complex(T.max, T.max); }\n+    static @property min_normal()() { return _Complex(T.min_normal, T.min_normal); }\n+    static @property nan()()        { return _Complex(T.nan, T.nan); }\n+    static @property dig()()        { return T.dig; }\n+    static @property mant_dig()()   { return T.mant_dig; }\n+    static @property max_10_exp()() { return T.max_10_exp; }\n+    static @property max_exp()()    { return T.max_exp; }\n+    static @property min_10_exp()() { return T.min_10_exp; }\n+    static @property min_exp()()    { return T.min_exp; }\n+}\n+\n+enum __c_complex_float  : _Complex!float;\n+enum __c_complex_double : _Complex!double;\n+enum __c_complex_real   : _Complex!real;\n+\n+static assert(__c_complex_float.epsilon is _Complex!float.epsilon);\n+static assert(__c_complex_float.infinity is _Complex!float.infinity);\n+static assert(__c_complex_float.init is _Complex!float.init);\n+static assert(__c_complex_float.max is _Complex!float.max);\n+static assert(__c_complex_float.min_normal is _Complex!float.min_normal);\n+static assert(__c_complex_float.nan is _Complex!float.nan);\n+static assert(__c_complex_float.sizeof == _Complex!float.sizeof);\n+static assert(__c_complex_float.alignof == _Complex!float.alignof);\n+static assert(__c_complex_float.dig == _Complex!float.dig);\n+static assert(__c_complex_float.mant_dig == _Complex!float.mant_dig);\n+static assert(__c_complex_float.max_10_exp == _Complex!float.max_10_exp);\n+static assert(__c_complex_float.max_exp == _Complex!float.max_exp);\n+static assert(__c_complex_float.min_10_exp == _Complex!float.min_10_exp);\n+static assert(__c_complex_float.min_exp == _Complex!float.min_exp);\n+\n+static assert(__c_complex_double.epsilon is _Complex!double.epsilon);\n+static assert(__c_complex_double.infinity is _Complex!double.infinity);\n+static assert(__c_complex_double.init is _Complex!double.init);\n+static assert(__c_complex_double.max is _Complex!double.max);\n+static assert(__c_complex_double.min_normal is _Complex!double.min_normal);\n+static assert(__c_complex_double.nan is _Complex!double.nan);\n+static assert(__c_complex_double.sizeof == _Complex!double.sizeof);\n+static assert(__c_complex_double.alignof == _Complex!double.alignof);\n+static assert(__c_complex_double.dig == _Complex!double.dig);\n+static assert(__c_complex_double.mant_dig == _Complex!double.mant_dig);\n+static assert(__c_complex_double.max_10_exp == _Complex!double.max_10_exp);\n+static assert(__c_complex_double.max_exp == _Complex!double.max_exp);\n+static assert(__c_complex_double.min_10_exp == _Complex!double.min_10_exp);\n+static assert(__c_complex_double.min_exp == _Complex!double.min_exp);\n+\n+static assert(__c_complex_real.epsilon is _Complex!real.epsilon);\n+static assert(__c_complex_real.infinity is _Complex!real.infinity);\n+static assert(__c_complex_real.init is _Complex!real.init);\n+static assert(__c_complex_real.max is _Complex!real.max);\n+static assert(__c_complex_real.min_normal is _Complex!real.min_normal);\n+static assert(__c_complex_real.nan is _Complex!real.nan);\n+static assert(__c_complex_real.sizeof == _Complex!real.sizeof);\n+static assert(__c_complex_real.alignof == _Complex!real.alignof);\n+static assert(__c_complex_real.dig == _Complex!real.dig);\n+static assert(__c_complex_real.mant_dig == _Complex!real.mant_dig);\n+static assert(__c_complex_real.max_10_exp == _Complex!real.max_10_exp);\n+static assert(__c_complex_real.max_exp == _Complex!real.max_exp);\n+static assert(__c_complex_real.min_10_exp == _Complex!real.min_10_exp);\n+static assert(__c_complex_real.min_exp == _Complex!real.min_exp);"}, {"sha": "6cf116eab12d0fdae53630e9e771becd2cc00275", "filename": "gcc/testsuite/gdc.test/compilable/test23533.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23533.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23533.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23533.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,10 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23533\n+// REQUIRED_ARGS: -preview=nosharedaccess\n+\n+enum E { a, b }\n+\n+void main()\n+{\n+\tE x = E.b;\n+\tE y = E.max;\n+}"}, {"sha": "ee7ef3c42805df8f1bd5fa5184d496b0edd78062", "filename": "gcc/testsuite/gdc.test/compilable/test23586.d", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23586.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23586.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23586.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,34 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23586\n+\n+int test23686a(int x)\n+{\n+    switch(x)\n+    {\n+        case 0:\n+            goto Bar;\n+\n+        Bar:\n+        default:\n+            auto y = 6;\n+            return y;\n+    }\n+}\n+\n+int test23686b(int x)\n+{\n+    switch(x)\n+    {\n+        case 0:\n+        Bar:\n+        case 1:\n+        case 2:\n+            auto y = 7;\n+            return y;\n+\n+        default:\n+            goto Bar;\n+    }\n+}\n+\n+static assert(test23686a(0) == 6);\n+static assert(test23686b(3) == 7);"}, {"sha": "6698f9cbc8796544e8b7e6f97fcbe5102f8789c2", "filename": "gcc/testsuite/gdc.test/compilable/test23587.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23587.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23587.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23587.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,18 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23587\n+// REQUIRED_ARGS: -w\n+noreturn stuff()\n+{\n+    assert(false);\n+}\n+\n+void doStuff(alias fun)()\n+{\n+    cast(void) fun();\n+    string s = \"never executed\";\n+    static assert(is(typeof(cast(void) fun()) == void));\n+}\n+\n+void main()\n+{\n+    doStuff!stuff();\n+}"}, {"sha": "beff31f28f1d612f3a6e451ba40747931a43236c", "filename": "gcc/testsuite/gdc.test/compilable/test23589.d", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23589.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23589.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23589.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,30 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23589\n+struct TemplStr(string Description_) {}\n+\n+template A() {\n+    bool member;\n+    alias THIS = typeof(this);\n+    static THIS staticInstance;\n+    static asSize()\n+    {\n+        return staticInstance.member;\n+    }\n+}\n+\n+template B() {\n+    enum cols = columns();\n+\n+    enum cols_two = cols;\n+    TemplStr!(cols_two) tstr;\n+}\n+\n+struct S\n+{\n+  mixin A;\n+  mixin B;\n+\n+  static string columns() {\n+    auto dummy = &asSize;\n+    return \"as\";\n+  }\n+}"}, {"sha": "87297dbacd7f233e28237ded16d47dd3a7f163ad", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail109.d", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail109.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail109.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail109.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -90,3 +90,19 @@ enum RegValueType2b : DWORD\n     DWORD = REG_DWORD,\n     Unknown = DWORD.min,\n }\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail109.d(107): Error: enum member `fail109.d` initialization with `__anonymous.c+1` causes overflow for type `Q`\n+---\n+*/\n+\n+struct Q {\n+\tenum max = Q();\n+}\n+\n+enum {\n+\tc = Q(),\n+\td\n+}"}, {"sha": "ac6b33a3a9cd7d119d3c8f2c91bb1e515b39b3e2", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail20618.d", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9dd9de169034810b92d47bf78284db731fa5da/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20618.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9dd9de169034810b92d47bf78284db731fa5da/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20618.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20618.d?ref=7e9dd9de169034810b92d47bf78284db731fa5da", "patch": "@@ -1,16 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/fail20618.d(13): Error: in slice `a[1 .. 12]`, upper bound is greater than array length `10`\n-fail_compilation/fail20618.d(14): Error: in slice `a[4 .. 3]`, lower bound is greater than upper bound\n-fail_compilation/fail20618.d(15): Error: in slice `a[0 .. 11]`, upper bound is greater than array length `10`\n----\n-*/\n-\n-void main()\n-{\n-    int[10] a;\n-    auto b = a[1..12];\n-    auto c = a[4..3];\n-    auto d = a[0..$ + 1];\n-}"}, {"sha": "e24dcc2b704ef949ce1b2cf63ca6a27236233b99", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail23151.d", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23151.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23151.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23151.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,41 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail23151.d(30): Error: class `fail23151.makeDerivedObj.Derived` is nested within `makeDerivedObj`, but super class `Base` is nested within `makeBaseObj`\n+---\n+*/\n+interface I\n+{\n+    void intfunc(int x);\n+}\n+\n+auto makeBaseObj()\n+{\n+    int realPrivateX;\n+    class Base : I\n+    {\n+        private int modulePrivateX;\n+        int publicX;\n+        override void intfunc(int x)\n+        {\n+            realPrivateX++; // expected OK\n+        }\n+    }\n+    return new Base;\n+}\n+\n+auto makeDerivedObj()\n+{\n+    int realPrivateY;\n+    class Derived : typeof(makeBaseObj())\n+    {\n+        private int modulePrivateY;\n+        int publicY;\n+        override void intfunc(int x)\n+        {\n+            realPrivateX++; // expected NG\n+            modulePrivateX++;\n+        }\n+    }\n+    return new Derived;\n+}"}, {"sha": "c314d92fae519bd43e89922b67a4d5ef489b26a0", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail23574.d", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23574.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23574.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23574.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,41 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23574\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail23574.d(26): Error: function `object._xopEquals` has no `return` statement, but is expected to return a value of type `bool`\n+Error: undefined identifier `size_t` in module `object`\n+fail_compilation/fail23574.d(34): Error: template instance `object.S17915!(MyClass)` error instantiating\n+fail_compilation/fail23574.d(30): Error: function `object.SDL_GetKeyName` has no `return` statement, but is expected to return a value of type `const(char)`\n+---\n+*/\n+module object;\n+\n+class Object\n+{\n+}\n+\n+bool opEquals(LHS, RHS)(LHS lhs, RHS)\n+{\n+    opEquals(cast()lhs);\n+}\n+\n+class TypeInfo\n+{\n+}\n+\n+bool _xopEquals()\n+{\n+}\n+\n+const(char)SDL_GetKeyName()\n+{\n+    class MyClass\n+    {\n+        S17915!MyClass m_member;\n+    }\n+}\n+\n+struct S17915(T)\n+{\n+    T owner;\n+}"}, {"sha": "ddfc5587c64174983768cf5a6730bb08e232932b", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail23591.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23591.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23591.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23591.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,16 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23591\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail23591.d(13): Error: cannot implicitly convert expression `square(i) , null` of type `string` to `int`\n+fail_compilation/fail23591.d(14): Error: cannot implicitly convert expression `assert(0) , null` of type `real function(char)` to `int`\n+---\n+*/\n+noreturn square(int x);\n+\n+int example(int i)\n+{\n+    int x = cast(string)square(i);\n+    int y = cast(real function(char))assert(0);\n+    return x + y;\n+}"}, {"sha": "012305af9564a3b0872e53ca82c9a4ef437c8e8f", "filename": "gcc/testsuite/gdc.test/fail_compilation/failattr.d", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffailattr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffailattr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffailattr.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -3,14 +3,17 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/failattr.d(16): Error: variable `failattr.C2901.v1` cannot be `synchronized`\n-fail_compilation/failattr.d(17): Error: variable `failattr.C2901.v2` cannot be `override`\n-fail_compilation/failattr.d(18): Error: variable `failattr.C2901.v3` cannot be `abstract`\n-fail_compilation/failattr.d(19): Error: variable `failattr.C2901.v4` cannot be `final`, perhaps you meant `const`?\n-fail_compilation/failattr.d(31): Error: variable `failattr.C2901.v13` cannot be `final abstract synchronized override`\n-fail_compilation/failattr.d(33): Error: variable `failattr.C2901.v14` cannot be `final`, perhaps you meant `const`?\n+fail_compilation/failattr.d(103): Error: variable `failattr.C2901.v1` cannot be `synchronized`\n+fail_compilation/failattr.d(104): Error: variable `failattr.C2901.v2` cannot be `override`\n+fail_compilation/failattr.d(105): Error: variable `failattr.C2901.v3` cannot be `abstract`\n+fail_compilation/failattr.d(106): Error: variable `failattr.C2901.v4` cannot be `final`, perhaps you meant `const`?\n+fail_compilation/failattr.d(118): Error: variable `failattr.C2901.v13` cannot be `final abstract synchronized override`\n+fail_compilation/failattr.d(120): Error: variable `failattr.C2901.v14` cannot be `final`, perhaps you meant `const`?\n+fail_compilation/failattr.d(123): Error: undefined identifier `ERROR`\n ---\n */\n+#line 100\n+\n class C2901\n {\n     synchronized    int v1;         // error\n@@ -32,3 +35,5 @@ class C2901\n \n     static final int v14;           // error, even if static is applied at the same time\n }\n+\n+enum B23122 { @ERROR e }"}, {"sha": "75b5d4ef9c6c17c65731214457e5b3e43e23b49c", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice23564.d", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23564.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23564.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23564.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,25 @@\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/ice23564.d(10): Error: cannot construct nested class `FreeList` because no implicit `this` reference to outer class `RBTree` is available\n+---\n+*/\n+class BlockHeader\n+{\n+    this()\n+    {\n+        new FreeList;\n+    }\n+}\n+\n+class RBTree\n+{\n+    class FreeList\n+    {\n+    }\n+\n+    void _each_reverse()\n+    {\n+    }\n+}\n+\n+alias FreeList = RBTree.FreeList;"}, {"sha": "277814f76cfabaa3eb5dc79783931b19805ade19", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice23569.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23569.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23569.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23569.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,19 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23569\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/ice23569.d(18): Error: cannot compare classes for equality because `object.Object` was not declared\n+---\n+*/\n+module object;\n+\n+@safe unittest1()\n+{\n+    class F\n+    {\n+        this(int )\n+        {\n+        }\n+    }\n+    auto ice23569 = new F(0) == new F(0);\n+}"}, {"sha": "9591fd809a90922dca53b81891c51392a044fe2e", "filename": "gcc/testsuite/gdc.test/fail_compilation/staticassertargs.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticassertargs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticassertargs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticassertargs.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,9 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/staticassertargs.d(9): Error: static assert:  abcxe3!!\n+---\n+*/\n+\n+enum e = \"!!\";\n+static assert(false, \"abc\", ['x', 'e'], 3, e);"}, {"sha": "911d5887562867181cad17669b41d54f9e39f096", "filename": "gcc/testsuite/gdc.test/fail_compilation/staticassertargsfail.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticassertargsfail.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticassertargsfail.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticassertargsfail.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,10 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/staticassertargsfail.d(10): Error: incompatible types for `('x') : (new Object)`: `char` and `object.Object`\n+fail_compilation/staticassertargsfail.d(10):        while evaluating `static assert` argument `['x', new Object] ~ \"\"`\n+---\n+*/\n+\n+\n+static assert(0, \"abc\", ['x', new Object] ~ \"\");"}, {"sha": "d96b2a522d935a3e795433765a0b9267f86bffe4", "filename": "gcc/testsuite/gdc.test/fail_compilation/test12228.d", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12228.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12228.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest12228.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,10 +1,9 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/test12228.d(13): Error: undefined identifier `this`, did you mean `typeof(this)`?\n-fail_compilation/test12228.d(18): Error: no property `x` for type `object.Object`\n+fail_compilation/test12228.d(12): Error: undefined identifier `this`, did you mean `typeof(this)`?\n+fail_compilation/test12228.d(18): Error: undefined identifier `super`, did you mean `typeof(super)`?\n fail_compilation/test12228.d(19): Error: undefined identifier `super`, did you mean `typeof(super)`?\n-fail_compilation/test12228.d(20): Error: undefined identifier `super`, did you mean `typeof(super)`?\n ---\n */\n "}, {"sha": "7d5bb375c10194e51b543103c68a53c3e872eebd", "filename": "gcc/testsuite/gdc.test/fail_compilation/test21008.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21008.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21008.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21008.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -12,7 +12,6 @@ fail_compilation/test21008.d(117): Error: `Monitor` has no effect\n fail_compilation/test21008.d(117): Error: function `object.Object.factory(string classname)` is not callable using argument types `()`\n fail_compilation/test21008.d(117):        too few arguments, expected 1, got 0\n fail_compilation/test21008.d(105):        called from here: `handleMiddlewareAnnotation()`\n-fail_compilation/test21008.d(108): Error: class `test21008.C` no size because of forward reference\n ---\n */\n "}, {"sha": "bf9e3a66399258887efd17652565ba1e39e363c3", "filename": "gcc/testsuite/gdc.test/fail_compilation/test23552.d", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest23552.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest23552.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest23552.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,24 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23552\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/test23552.d(17): Error: cannot implicitly override base class method `test23552.Base.foo` with `test23552.Derived.foo`; add `override` attribute\n+---\n+*/\n+\n+abstract class Base\n+{\n+    void foo();\n+}\n+\n+class Derived : Base\n+{\n+    void foo() { }\n+    int data() { return 0; }\n+}\n+\n+class DerivedX : Derived\n+{\n+    override int data() { return 1; }\n+}"}, {"sha": "c4cae17f95b2c676f94938d5bd4560f7e8c24443", "filename": "gcc/testsuite/gdc.test/runnable/issue22854.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fissue22854.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fissue22854.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fissue22854.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,27 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22854\n+void main()\n+{\n+    uint loops = 0;\n+    static foreach (i; 0 .. 50)\n+    {\n+        static foreach (ch; SomeContainer().range)\n+            loops++;\n+    }\n+    assert(loops == 50 * 50);\n+}\n+\n+struct SomeContainer\n+{\n+    SomeRange range() { return SomeRange(); }\n+    TypeWithDestructor data;\n+}\n+\n+struct TypeWithDestructor { ~this() { } }\n+\n+struct SomeRange\n+{\n+    int count = 50;\n+    int front() { return count; }\n+    bool empty() { return count <= 0; }\n+    void popFront() { count--; }\n+}"}, {"sha": "16b34f1894cb63117e17ba22bb32eb494a1f7b99", "filename": "gcc/testsuite/gdc.test/runnable/test16098.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest16098.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest16098.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest16098.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,14 @@\n+\n+// https://issues.dlang.org/show_bug.cgi?id=16098\n+\n+void main() {\n+    byte a;\n+    align(128) byte b;\n+    assert((cast(size_t) &b) % 128 == 0);\n+\n+    byte foo() { return b; }\n+    dg = &foo;\n+    assert(dg() == false);\n+}\n+\n+__gshared byte delegate() dg;"}, {"sha": "a300d2a3b1d0c151b97c8fbe9de377352ed90d51", "filename": "gcc/testsuite/gdc.test/runnable/test20811.d", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20811.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20811.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20811.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,34 @@\n+// https://issues.dlang.org/show_bug.cgi?id=20811\n+\n+// OK: Mutable array literals are copied before CTFE takes ownership.\n+string issue20811a()\n+{\n+    char[1] counter = ['0'];\n+    counter[$-1]++;\n+    return counter.dup;\n+}\n+\n+static assert(issue20811a() == \"1\");\n+static assert(issue20811a() == \"1\");\n+static assert(issue20811a() == \"1\");\n+static assert(issue20811a() == \"1\");\n+\n+// Issue 20811: String literals were assumed to be read-only, so weren't copied.\n+string issue20811b()\n+{\n+    char[1] counter = \"0\";\n+    counter[$-1]++;\n+    return counter.dup;\n+}\n+\n+static assert(issue20811b() == \"1\");\n+static assert(issue20811b() == \"1\");\n+static assert(issue20811b() == \"1\");\n+static assert(issue20811b() == \"1\");\n+\n+void main()\n+{\n+    // Ensure CTFE did not overwrite the original AST.\n+    assert(issue20811a() == \"1\");\n+    assert(issue20811b() == \"1\");\n+}"}, {"sha": "a61b0d7ca582c556db2b2fe08347ab3fdc3cca2b", "filename": "gcc/testsuite/gdc.test/runnable/test23307.d", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23307.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23307.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23307.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,93 @@\n+// REQUIRED_ARGS: -inline -O\n+\n+// https://issues.dlang.org/show_bug.cgi?id=23307\n+import core.simd;\n+\n+static if(__traits(compiles, int4))\n+{\n+\n+alias __m128i = int4;\n+\n+uint bitwiseRotateRight_uint(const uint value, const uint count)\n+{\n+    assert(count < 8 * uint.sizeof);\n+    return cast(uint) ((value >> count) | (value << (uint.sizeof * 8 - count)));\n+}\n+\n+\n+__m128i _mm_sha256rnds2_epu32(__m128i a, __m128i b, __m128i k)\n+{\n+\n+    static uint Ch(uint x, uint y, uint z)\n+    {\n+        return z ^ (x & (y ^ z));\n+    }\n+\n+    static uint Maj(uint x, uint y, uint z)\n+    {\n+        return (x & y) | (z & (x ^ y));\n+    }\n+\n+    static uint sum0(uint x)\n+    {\n+        return bitwiseRotateRight_uint(x, 2) ^ bitwiseRotateRight_uint(x, 13) ^ bitwiseRotateRight_uint(x, 22);\n+    }\n+\n+    static uint sum1(uint x)\n+    {\n+        return bitwiseRotateRight_uint(x, 6) ^ bitwiseRotateRight_uint(x, 11) ^ bitwiseRotateRight_uint(x, 25);\n+    }\n+\n+    int4 dst;\n+    int4 a4 = cast(int4) a;\n+    int4 b4 = cast(int4) b;\n+    int4 k4 = cast(int4) k;\n+\n+    const A0 = b4.array[3];\n+    const B0 = b4.array[2];\n+    const C0 = a4.array[3];\n+    const D0 = a4.array[2];\n+    const E0 = b4.array[1];\n+    const F0 = b4.array[0];\n+    const G0 = a4.array[1];\n+    const H0 = a4.array[0];\n+    const W_K0 = k4.array[0];\n+    const W_K1 = k4.array[1];\n+    const A1 = Ch(E0, F0, G0) + sum1(E0) + W_K0 + H0 + Maj(A0, B0, C0) + sum0(A0);\n+    const B1 = A0;\n+    const C1 = B0;\n+    const D1 = C0;\n+    const E1 = Ch(E0, F0, G0) + sum1(E0) + W_K0 + H0 + D0;\n+    const F1 = E0;\n+    const G1 = F0;\n+    const H1 = G0;\n+    const A2 = Ch(E1, F1, G1) + sum1(E1) + W_K1 + H1 + Maj(A1, B1, C1) + sum0(A1);\n+    const B2 = A1;\n+    const C2 = B1;\n+    const D2 = C1;\n+    const E2 = Ch(E1, F1, G1) + sum1(E1) + W_K1 + H1 + D1;\n+    const F2 = E1;\n+    const G2 = F1;\n+    const H2 = G1;\n+\n+    dst.ptr[3] = A2;\n+    dst.ptr[2] = B2;\n+    dst.ptr[1] = E2;\n+    dst.ptr[0] = F2;\n+\n+    return cast(__m128i) dst;\n+}\n+\n+void main(string[] args)\n+{\n+    __m128i a = [15, 20, 130, 12345];\n+    __m128i b = [15, 20, 130, 12345];\n+    __m128i k = [15, 20, 130, 12345];\n+    __m128i result = _mm_sha256rnds2_epu32(a, b, k);\n+    assert(result.array == [1384123044, -2050674062, 327754346, 956342016]);\n+}\n+}\n+else\n+{\n+int main() { return 0; }\n+}"}, {"sha": "11543f1ae85661452d492534e061684e5cefaced", "filename": "gcc/testsuite/gdc.test/runnable/test34.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest34.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest34.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest34.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,3 +1,5 @@\n+// REQUIRED_ARGS: -d\n+\n module test34;\n \n import core.exception;"}, {"sha": "a0907f4b856ca654966e85a0d5a14c305359c98d", "filename": "gcc/testsuite/gdc.test/runnable/xtest46.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxtest46.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxtest46.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxtest46.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,4 +1,4 @@\n-// REQUIRED_ARGS: -preview=rvaluerefparam\n+// REQUIRED_ARGS: -d -preview=rvaluerefparam\n //\n /* TEST_OUTPUT:\n ---"}, {"sha": "b0288a25e0817909719b141ab56c6e3ef9205a33", "filename": "gcc/testsuite/gdc.test/runnable/xtest46_gc.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxtest46_gc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxtest46_gc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fxtest46_gc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,5 +1,5 @@\n /*\n-REQUIRED_ARGS: -lowmem -Jrunnable -preview=rvaluerefparam\n+REQUIRED_ARGS: -d -lowmem -Jrunnable -preview=rvaluerefparam\n EXTRA_FILES: xtest46.d\n TEST_OUTPUT:\n ---"}, {"sha": "ac3dd1292685979e3dd29bba401c8eb7a6628118", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,4 +1,4 @@\n-c8ae4adb2eda515b09b326948e3a4aa9f489af45\n+09faa4eacd4fb147107e94eeebf56b3a73fdcc05\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "fe273319f21320004978c5eff9d2b6847772e25b", "filename": "libphobos/libdruntime/core/demangle.d", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fdemangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fdemangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fdemangle.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2134,7 +2134,7 @@ pure @safe:\n  */\n char[] demangle(return scope const(char)[] buf, return scope char[] dst = null, CXX_DEMANGLER __cxa_demangle = null) nothrow pure @safe\n {\n-    if (buf.length > 2 && buf[0..2] == \"_Z\")\n+    if (__cxa_demangle && buf.length > 2 && buf[0..2] == \"_Z\")\n         return demangleCXX(buf, __cxa_demangle, dst);\n     auto d = Demangle!()(buf, dst);\n     // fast path (avoiding throwing & catching exception) for obvious\n@@ -2734,6 +2734,9 @@ unittest\n     s ~= \"FiZi\";\n     expected ~= \"F\";\n     assert(s.demangle == expected);\n+\n+    // https://issues.dlang.org/show_bug.cgi?id=23562\n+    assert(demangle(\"_Zv\") == \"_Zv\");\n }\n \n // https://issues.dlang.org/show_bug.cgi?id=22235\n@@ -2929,6 +2932,7 @@ CXX_DEMANGLER getCXXDemangler() nothrow @trusted\n         version (FreeBSD) import core.sys.freebsd.dlfcn : RTLD_DEFAULT;\n         version (linux) import core.sys.linux.dlfcn : RTLD_DEFAULT;\n         version (NetBSD) import core.sys.netbsd.dlfcn : RTLD_DEFAULT;\n+        version (OpenBSD) import core.sys.openbsd.dlfcn : RTLD_DEFAULT;\n         version (OSX) import core.sys.darwin.dlfcn : RTLD_DEFAULT;\n         version (Solaris) import core.sys.solaris.dlfcn : RTLD_DEFAULT;\n "}, {"sha": "d2016b115f113af22605ada3a5068f06767a4f05", "filename": "libphobos/libdruntime/core/exception.d", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fexception.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fexception.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fexception.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -278,7 +278,6 @@ class FinalizeError : Error\n     this( TypeInfo ci, string file = __FILE__, size_t line = __LINE__, Throwable next = null ) @safe pure nothrow @nogc\n     {\n         super( \"Finalization error\", file, line, next );\n-        super.info = SuppressTraceInfo.instance;\n         info = ci;\n     }\n \n@@ -393,7 +392,6 @@ class InvalidMemoryOperationError : Error\n     this(string file = __FILE__, size_t line = __LINE__, Throwable next = null ) @safe pure nothrow @nogc\n     {\n         super( \"Invalid memory operation\", file, line, next );\n-        this.info = SuppressTraceInfo.instance;\n     }\n \n     override string toString() const @trusted"}, {"sha": "6d19247fbe01ec9033f796eac95b88a23850bced", "filename": "libphobos/libdruntime/core/internal/gc/impl/conservative/gc.d", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fgc%2Fimpl%2Fconservative%2Fgc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fgc%2Fimpl%2Fconservative%2Fgc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fgc%2Fimpl%2Fconservative%2Fgc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -110,13 +110,23 @@ alias GC gc_t;\n /* ============================ GC =============================== */\n \n // register GC in C constructor (_STI_)\n-extern(C) pragma(crt_constructor) void _d_register_conservative_gc()\n+private pragma(crt_constructor) void gc_conservative_ctor()\n+{\n+    _d_register_conservative_gc();\n+}\n+\n+extern(C) void _d_register_conservative_gc()\n {\n     import core.gc.registry;\n     registerGCFactory(\"conservative\", &initialize);\n }\n \n-extern(C) pragma(crt_constructor) void _d_register_precise_gc()\n+private pragma(crt_constructor) void gc_precise_ctor()\n+{\n+    _d_register_precise_gc();\n+}\n+\n+extern(C) void _d_register_precise_gc()\n {\n     import core.gc.registry;\n     registerGCFactory(\"precise\", &initialize_precise);"}, {"sha": "570781e2fdccc6c2ef814fcef08956f933f99325", "filename": "libphobos/libdruntime/core/internal/gc/impl/manual/gc.d", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fgc%2Fimpl%2Fmanual%2Fgc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fgc%2Fimpl%2Fmanual%2Fgc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fgc%2Fimpl%2Fmanual%2Fgc.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -29,7 +29,12 @@ static import core.memory;\n extern (C) void onOutOfMemoryError(void* pretend_sideffect = null) @trusted pure nothrow @nogc; /* dmd @@@BUG11461@@@ */\n \n // register GC in C constructor (_STI_)\n-extern(C) pragma(crt_constructor) void _d_register_manual_gc()\n+private pragma(crt_constructor) void gc_manual_ctor()\n+{\n+    _d_register_manual_gc();\n+}\n+\n+extern(C) void _d_register_manual_gc()\n {\n     import core.gc.registry;\n     registerGCFactory(\"manual\", &initialize);"}, {"sha": "19bb61b0c220c6b70a4c1a7a0c5c21fab082218c", "filename": "libphobos/libdruntime/core/runtime.d", "status": "modified", "additions": 71, "deletions": 18, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fruntime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fruntime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fruntime.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -112,7 +112,7 @@ private\n     alias void delegate( Throwable ) ExceptionHandler;\n     extern (C) void _d_print_throwable(Throwable t);\n \n-    extern (C) void* thread_stackBottom();\n+    extern (C) void* thread_stackBottom() nothrow @nogc;\n }\n \n \n@@ -122,7 +122,7 @@ shared static this()\n     //       still possible the app could exit without a stack trace.  If\n     //       this becomes an issue, the handler could be set in C main\n     //       before the module ctors are run.\n-    Runtime.traceHandler = &defaultTraceHandler;\n+    Runtime.traceHandler(&defaultTraceHandler, &defaultTraceDeallocator);\n }\n \n \n@@ -284,10 +284,18 @@ struct Runtime\n      * If the supplied pointer is null then the trace routine should determine\n      * an appropriate calling context from which to begin the trace.\n      *\n+     * If the deallocator is set, then it is called with the traceinfo when the\n+     * exception is finalized. The deallocator is only set in the exception if\n+     * the default handler is used to generate the trace info.\n+     *\n      * Params:\n      *  h = The new trace handler.  Set to null to disable exception backtracing.\n+     *  d = The new trace deallocator. If non-null, this will be called on\n+     *      exception destruction with the trace info, only when the trace\n+     *      handler is used to generate TraceInfo.\n      */\n-    extern(C) pragma(mangle, \"rt_setTraceHandler\") static @property void traceHandler(TraceHandler h);\n+    extern(C) pragma(mangle, \"rt_setTraceHandler\") static @property void traceHandler(TraceHandler h,\n+                    Throwable.TraceDeallocator d = null);\n \n     /**\n      * Gets the current trace handler.\n@@ -297,6 +305,14 @@ struct Runtime\n      */\n     extern(C) pragma(mangle, \"rt_getTraceHandler\") static @property TraceHandler traceHandler();\n \n+    /**\n+     * Gets the current trace deallocator.\n+     *\n+     * Returns:\n+     *  The current trace deallocator or null if none has been set.\n+     */\n+    extern(C) pragma(mangle, \"rt_getTraceDeallocator\") static @property Throwable.TraceDeallocator traceDeallocator();\n+\n     /**\n      * Overrides the default collect hander with a user-supplied version.  This\n      * routine will be called for each resource object that is finalized in a\n@@ -705,6 +721,10 @@ extern (C) UnitTestResult runModuleUnitTests()\n  * This functions returns a trace handler, allowing to inspect the\n  * current stack trace.\n  *\n+ * IMPORTANT NOTE! the returned trace is potentially not GC allocated, and so\n+ * you must call `defaultTraceDeallocator` when you are finished with the\n+ * `TraceInfo`\n+ *\n  * Params:\n  *   ptr = (Windows only) The context to get the stack trace from.\n  *         When `null` (the default), start from the current frame.\n@@ -714,50 +734,60 @@ extern (C) UnitTestResult runModuleUnitTests()\n  *   or `null`. If called from a finalizer (destructor), always returns `null`\n  *   as trace handlers allocate.\n  */\n-Throwable.TraceInfo defaultTraceHandler( void* ptr = null )\n+Throwable.TraceInfo defaultTraceHandler( void* ptr = null ) // @nogc\n {\n+    // NOTE: with traces now being allocated using C malloc, no need to worry\n+    // about GC reentrancy. This code left commented out for reference.\n+    //\n     // avoid recursive GC calls in finalizer, trace handlers should be made @nogc instead\n-    import core.memory : GC;\n+    /*import core.memory : GC;\n     if (GC.inFinalizer)\n-        return null;\n+        return null;*/\n \n-    static if (__traits(compiles, new LibBacktrace(0)))\n+    static T allocate(T, Args...)(auto ref Args args) @nogc\n+    {\n+        import core.lifetime : emplace;\n+        import core.stdc.stdlib : malloc;\n+        auto result = cast(T)malloc(__traits(classInstanceSize, T));\n+        return emplace(result, args);\n+    }\n+    static if (__traits(compiles, allocate!LibBacktrace(0)))\n     {\n         version (Posix)\n             static enum FIRSTFRAME = 4;\n         else version (Win64)\n             static enum FIRSTFRAME = 4;\n         else\n             static enum FIRSTFRAME = 0;\n-        return new LibBacktrace(FIRSTFRAME);\n+        return allocate!LibBacktrace(FIRSTFRAME);\n     }\n-    else static if (__traits(compiles, new UnwindBacktrace(0)))\n+    else static if (__traits(compiles, allocate!UnwindBacktrace(0)))\n     {\n         version (Posix)\n             static enum FIRSTFRAME = 5;\n         else version (Win64)\n             static enum FIRSTFRAME = 4;\n         else\n             static enum FIRSTFRAME = 0;\n-        return new UnwindBacktrace(FIRSTFRAME);\n+        return allocate!UnwindBacktrace(FIRSTFRAME);\n     }\n     else version (Windows)\n     {\n         import core.sys.windows.stacktrace;\n-        static if (__traits(compiles, new StackTrace(0, null)))\n+        static if (__traits(compiles, allocate!StackTrace(0, null)))\n         {\n             import core.sys.windows.winnt : CONTEXT;\n             version (Win64)\n                 enum FIRSTFRAME = 4;\n             else version (Win32)\n                 enum FIRSTFRAME = 0;\n-            return new StackTrace(FIRSTFRAME, cast(CONTEXT*)ptr);\n+            return allocate!StackTrace(FIRSTFRAME, cast(CONTEXT*)ptr);\n         }\n         else\n             return null;\n     }\n-    else static if (__traits(compiles, new DefaultTraceInfo()))\n-        return new DefaultTraceInfo();\n+    else static if (__traits(compiles, allocate!DefaultTraceInfo()))\n+        return allocate!DefaultTraceInfo();\n     else\n         return null;\n }\n@@ -775,9 +805,32 @@ unittest\n         {\n             printf(\"%.*s\\n\", cast(int)line.length, line.ptr);\n         }\n+        defaultTraceDeallocator(trace);\n     }\n }\n \n+/***\n+ * Deallocate a traceinfo generated by deaultTraceHander.\n+ *\n+ * Call this function on a TraceInfo generated via `defaultTraceHandler` when\n+ * you are done with it. If necessary, this cleans up any manually managed\n+ * resources from the `TraceInfo`, and invalidates it. After this, the object\n+ * is no longer valid.\n+ *\n+ * Params:\n+ *      info = The `TraceInfo` to deallocate. This should only be a value that\n+ *             was returned by `defaultTraceHandler`.\n+ */\n+void defaultTraceDeallocator(Throwable.TraceInfo info) nothrow\n+{\n+    if (info is null)\n+        return;\n+    auto obj = cast(Object)info;\n+    destroy(obj);\n+    import core.stdc.stdlib : free;\n+    free(cast(void *)obj);\n+}\n+\n version (DRuntime_Use_Libunwind)\n {\n     import core.internal.backtrace.handler;\n@@ -791,7 +844,7 @@ else static if (hasExecinfo) private class DefaultTraceInfo : Throwable.TraceInf\n     import core.stdc.stdlib : free;\n     import core.stdc.string : strlen, memchr, memmove;\n \n-    this()\n+    this() @nogc\n     {\n         // it may not be 1 but it is good enough to get\n         // in CALL instruction address range for backtrace\n@@ -805,13 +858,13 @@ else static if (hasExecinfo) private class DefaultTraceInfo : Throwable.TraceInf\n                 elem -= CALL_INSTRUCTION_SIZE;\n         else // backtrace() failed, do it ourselves\n         {\n-            static void** getBasePtr()\n+            static void** getBasePtr() @nogc\n             {\n                 version (D_InlineAsm_X86)\n-                    asm { naked; mov EAX, EBP; ret; }\n+                    asm @nogc { naked; mov EAX, EBP; ret; }\n                 else\n                     version (D_InlineAsm_X86_64)\n-                        asm { naked; mov RAX, RBP; ret; }\n+                        asm @nogc { naked; mov RAX, RBP; ret; }\n                 else\n                     return null;\n             }"}, {"sha": "16bc47501e34813a73eb172dca2bf8a9dd349034", "filename": "libphobos/libdruntime/core/stdc/config.d", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -286,6 +286,22 @@ private struct _Complex(T)\n {\n     T re;\n     T im;\n+\n+    // Helper properties.\n+    pragma(inline, true)\n+    {\n+        static @property epsilon()()    { return _Complex(T.epsilon, T.epsilon); }\n+        static @property infinity()()   { return _Complex(T.infinity, T.infinity); }\n+        static @property max()()        { return _Complex(T.max, T.max); }\n+        static @property min_normal()() { return _Complex(T.min_normal, T.min_normal); }\n+        static @property nan()()        { return _Complex(T.nan, T.nan); }\n+        static @property dig()()        { return T.dig; }\n+        static @property mant_dig()()   { return T.mant_dig; }\n+        static @property max_10_exp()() { return T.max_10_exp; }\n+        static @property max_exp()()    { return T.max_exp; }\n+        static @property min_10_exp()() { return T.min_10_exp; }\n+        static @property min_exp()()    { return T.min_exp; }\n+    }\n }\n \n enum __c_complex_float  : _Complex!float;"}, {"sha": "b6e10a81b00f9a9a82ff3da0bfe408446a1d6cc1", "filename": "libphobos/libdruntime/core/sys/darwin/mach/getsect.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fgetsect.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fgetsect.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fgetsect.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -148,7 +148,7 @@ version (CoreDdoc)\n      *\n      *      auto mph = _NSGetMachExecuteHeader();\n      *      int size;\n-     *      assert(getsectdata(mph, \"__TEXT\", \"__text\", &size));\n+     *      assert(getsectiondata(mph, \"__TEXT\", \"__text\", &size));\n      *      assert(size > 0);\n      * }\n      * ---"}, {"sha": "f6b0674a3b161dc5a5769cb8d56911647c5609fb", "filename": "libphobos/libdruntime/core/sys/posix/sys/wait.d", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -386,9 +386,15 @@ else version (NetBSD)\n else version (OpenBSD)\n {\n     enum WCONTINUED     = 8;\n-    // OpenBSD does not define the following:\n-    //enum WSTOPPED\n-    //enum WNOWAIT\n+    enum WSTOPPED       = WUNTRACED;\n+    enum WNOWAIT        = 16;\n+\n+    enum idtype_t\n+    {\n+        P_ALL,\n+        P_PID,\n+        P_PGID\n+    }\n }\n else version (DragonFlyBSD)\n {"}, {"sha": "55fbc56a754c9a5440cfc1fa3f878d2e42c5a5b5", "filename": "libphobos/libdruntime/core/sys/windows/dbghelp.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -31,7 +31,7 @@ extern(Windows)\n     alias PVOID        function(HANDLE hProcess, DWORD64 AddrBase) SymFunctionTableAccess64Func;\n     alias BOOL         function(DWORD MachineType, HANDLE hProcess, HANDLE hThread, STACKFRAME64 *StackFrame, PVOID ContextRecord,\n                                 ReadProcessMemoryProc64 ReadMemoryRoutine, FunctionTableAccessProc64 FunctoinTableAccess,\n-                                GetModuleBaseProc64 GetModuleBaseRoutine, TranslateAddressProc64 TranslateAddress) StackWalk64Func;\n+                                GetModuleBaseProc64 GetModuleBaseRoutine, TranslateAddressProc64 TranslateAddress) @nogc StackWalk64Func;\n     alias BOOL         function(HANDLE hProcess, DWORD64 dwAddr, PDWORD pdwDisplacement, IMAGEHLP_LINEA64 *line) SymGetLineFromAddr64Func;\n     alias DWORD64      function(HANDLE hProcess, DWORD64 dwAddr) SymGetModuleBase64Func;\n     alias BOOL         function(HANDLE hProcess, DWORD64 dwAddr, IMAGEHLP_MODULEA64 *ModuleInfo) SymGetModuleInfo64Func;\n@@ -66,7 +66,7 @@ struct DbgHelp\n     SymRegisterCallback64Func SymRegisterCallback64;\n     ImagehlpApiVersionFunc   ImagehlpApiVersion;\n \n-    static DbgHelp* get()\n+    static DbgHelp* get() @nogc\n     {\n         if ( sm_hndl != sm_hndl.init )\n             return &sm_inst;"}, {"sha": "8df29729af3987655b7ee44762e75df60ce1d2d5", "filename": "libphobos/libdruntime/core/sys/windows/stacktrace.d", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstacktrace.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstacktrace.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstacktrace.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -24,10 +24,10 @@ import core.sys.windows.windef;\n debug(PRINTF) import core.stdc.stdio;\n \n \n-extern(Windows) void RtlCaptureContext(CONTEXT* ContextRecord);\n+extern(Windows) void RtlCaptureContext(CONTEXT* ContextRecord) @nogc;\n extern(Windows) DWORD GetEnvironmentVariableA(LPCSTR lpName, LPSTR pBuffer, DWORD nSize);\n \n-extern(Windows) alias USHORT function(ULONG FramesToSkip, ULONG FramesToCapture, PVOID *BackTrace, PULONG BackTraceHash) RtlCaptureStackBackTraceFunc;\n+extern(Windows) alias USHORT function(ULONG FramesToSkip, ULONG FramesToCapture, PVOID *BackTrace, PULONG BackTraceHash) @nogc RtlCaptureStackBackTraceFunc;\n \n private __gshared RtlCaptureStackBackTraceFunc RtlCaptureStackBackTrace;\n private __gshared immutable bool initialized;\n@@ -42,7 +42,7 @@ public:\n      *  skip = The number of stack frames to skip.\n      *  context = The context to receive the stack trace from. Can be null.\n      */\n-    this(size_t skip, CONTEXT* context)\n+    this(size_t skip, CONTEXT* context) @nogc\n     {\n         if (context is null)\n         {\n@@ -64,7 +64,7 @@ public:\n             skip += INTERNALFRAMES;\n         }\n         if ( initialized )\n-            m_trace = trace(skip, context);\n+            m_trace = trace(tracebuf[], skip, context);\n     }\n \n     int opApply( scope int delegate(ref const(char[])) dg ) const\n@@ -100,18 +100,27 @@ public:\n     }\n \n     /**\n-     * Receive a stack trace in the form of an address list.\n+     * Receive a stack trace in the form of an address list. One form accepts\n+     * an allocated buffer, the other form automatically allocates the buffer.\n+     *\n      * Params:\n      *  skip = How many stack frames should be skipped.\n      *  context = The context that should be used. If null the current context is used.\n+     *  buffer = The buffer to use for the trace. This should be at least 63 elements.\n      * Returns:\n      *  A list of addresses that can be passed to resolve at a later point in time.\n      */\n     static ulong[] trace(size_t skip = 0, CONTEXT* context = null)\n+    {\n+        return trace(new ulong[63], skip, context);\n+    }\n+\n+    /// ditto\n+    static ulong[] trace(ulong[] buffer, size_t skip = 0, CONTEXT* context = null) @nogc\n     {\n         synchronized( typeid(StackTrace) )\n         {\n-            return traceNoSync(skip, context);\n+            return traceNoSync(buffer, skip, context);\n         }\n     }\n \n@@ -131,38 +140,43 @@ public:\n     }\n \n private:\n+    ulong[128] tracebuf;\n     ulong[] m_trace;\n \n \n-    static ulong[] traceNoSync(size_t skip, CONTEXT* context)\n+    static ulong[] traceNoSync(ulong[] buffer, size_t skip, CONTEXT* context) @nogc\n     {\n         auto dbghelp  = DbgHelp.get();\n         if (dbghelp is null)\n             return []; // dbghelp.dll not available\n \n-        if (RtlCaptureStackBackTrace !is null && context is null)\n+        if (buffer.length >= 63 && RtlCaptureStackBackTrace !is null &&\n+            context is null)\n         {\n-            size_t[63] buffer = void; // On windows xp the sum of \"frames to skip\" and \"frames to capture\" can't be greater then 63\n-            auto backtraceLength = RtlCaptureStackBackTrace(cast(ULONG)skip, cast(ULONG)(buffer.length - skip), cast(void**)buffer.ptr, null);\n+            version (Win64)\n+            {\n+                auto bufptr = cast(void**)buffer.ptr;\n+            }\n+            version (Win32)\n+            {\n+                size_t[63] bufstorage = void; // On windows xp the sum of \"frames to skip\" and \"frames to capture\" can't be greater then 63\n+                auto bufptr = cast(void**)bufstorage.ptr;\n+            }\n+            auto backtraceLength = RtlCaptureStackBackTrace(cast(ULONG)skip, cast(ULONG)(63 - skip), bufptr, null);\n \n             // If we get a backtrace and it does not have the maximum length use it.\n             // Otherwise rely on tracing through StackWalk64 which is slower but works when no frame pointers are available.\n-            if (backtraceLength > 1 && backtraceLength < buffer.length - skip)\n+            if (backtraceLength > 1 && backtraceLength < 63 - skip)\n             {\n                 debug(PRINTF) printf(\"Using result from RtlCaptureStackBackTrace\\n\");\n-                version (Win64)\n+                version (Win32)\n                 {\n-                    return buffer[0..backtraceLength].dup;\n-                }\n-                else version (Win32)\n-                {\n-                    auto result = new ulong[backtraceLength];\n-                    foreach (i, ref e; result)\n+                    foreach (i, ref e; buffer[0 .. backtraceLength])\n                     {\n-                        e = buffer[i];\n+                        e = bufstorage[i];\n                     }\n-                    return result;\n                 }\n+                return buffer[0..backtraceLength];\n             }\n         }\n \n@@ -210,21 +224,21 @@ private:\n         else version (X86_64) enum imageType = IMAGE_FILE_MACHINE_AMD64;\n         else                  static assert(0, \"unimplemented\");\n \n-        ulong[] result;\n         size_t frameNum = 0;\n+        size_t nframes = 0;\n \n         // do ... while so that we don't skip the first stackframe\n         do\n         {\n             if (frameNum >= skip)\n             {\n-                result ~= stackframe.AddrPC.Offset;\n+                buffer[nframes++] = stackframe.AddrPC.Offset;\n             }\n             frameNum++;\n         }\n         while (dbghelp.StackWalk64(imageType, hProcess, hThread, &stackframe,\n                                    &ctxt, null, null, null, null));\n-        return result;\n+        return buffer[0 .. nframes];\n     }\n \n     static char[][] resolveNoSync(const(ulong)[] addresses)"}, {"sha": "7316373195a5050fb25f85f1796d26d3b5db0da1", "filename": "libphobos/libdruntime/core/thread/osthread.d", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1997,22 +1997,30 @@ extern (C) void thread_suspendAll() nothrow\n         Thread.criticalRegionLock.lock_nothrow();\n         scope (exit) Thread.criticalRegionLock.unlock_nothrow();\n         size_t cnt;\n+        bool suspendedSelf;\n         Thread t = ThreadBase.sm_tbeg.toThread;\n         while (t)\n         {\n             auto tn = t.next.toThread;\n             if (suspend(t))\n+            {\n+                if (t is ThreadBase.getThis())\n+                    suspendedSelf = true;\n                 ++cnt;\n+            }\n             t = tn;\n         }\n \n         version (Darwin)\n         {}\n         else version (Posix)\n         {\n-            // subtract own thread\n+            // Subtract own thread if we called suspend() on ourselves.\n+            // For example, suspendedSelf would be false if the current\n+            // thread ran thread_detachThis().\n             assert(cnt >= 1);\n-            --cnt;\n+            if (suspendedSelf)\n+                --cnt;\n             // wait for semaphore notifications\n             for (; cnt; --cnt)\n             {"}, {"sha": "8d508755c7dada490aa34c3b6105e2c7fa1dbffd", "filename": "libphobos/libdruntime/core/time.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fcore%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Ftime.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2822,7 +2822,7 @@ struct TickDuration\n     }\n \n \n-    @trusted shared static this()\n+    static pragma(crt_constructor) void time_initializer()\n     {\n         version (Windows)\n         {"}, {"sha": "0385b51d60e45b94d507c0acbac02cbc3e7525f8", "filename": "libphobos/libdruntime/object.d", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fobject.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Fobject.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fobject.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -246,7 +246,7 @@ class Object\n      * }\n      * ---\n      */\n-    static Object factory(string classname)\n+    deprecated static Object factory(string classname)\n     {\n         auto ci = TypeInfo_Class.find(classname);\n         if (ci)\n@@ -256,7 +256,7 @@ class Object\n         return null;\n     }\n \n-    @system unittest\n+    deprecated @system unittest\n     {\n         Object valid_obj = Object.factory(\"object.Object\");\n         Object invalid_obj = Object.factory(\"object.__this_class_doesnt_exist__\");\n@@ -2481,6 +2481,8 @@ class Throwable : Object\n         string toString() const;\n     }\n \n+    alias TraceDeallocator = void function(TraceInfo) nothrow;\n+\n     string      msg;    /// A message describing the error.\n \n     /**\n@@ -2501,6 +2503,12 @@ class Throwable : Object\n      */\n     TraceInfo   info;\n \n+    /**\n+     * If set, this is used to deallocate the TraceInfo on destruction.\n+     */\n+    TraceDeallocator infoDeallocator;\n+\n+\n     /**\n      * A reference to the _next error in the list. This is used when a new\n      * $(D Throwable) is thrown from inside a $(D catch) block. The originally\n@@ -2614,6 +2622,13 @@ class Throwable : Object\n     {\n         if (nextInChain && nextInChain._refcount)\n             _d_delThrowable(nextInChain);\n+        // handle owned traceinfo\n+        if (infoDeallocator !is null)\n+        {\n+            infoDeallocator(info);\n+            info = null; // avoid any kind of dangling pointers if we can help\n+                         // it.\n+        }\n     }\n \n     /**"}, {"sha": "0a44be3e31f5b6ac0ab4d267bf9a0abd419bc4de", "filename": "libphobos/libdruntime/rt/deh.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Frt%2Fdeh.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Frt%2Fdeh.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fdeh.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -42,12 +42,14 @@ module rt.deh;\n extern (C)\n {\n     Throwable.TraceInfo _d_traceContext(void* ptr = null);\n+    Throwable.TraceDeallocator rt_getTraceDeallocator();\n     void _d_createTrace(Throwable t, void* context)\n     {\n         if (t !is null && t.info is null &&\n             cast(byte*) t !is typeid(t).initializer.ptr)\n         {\n             t.info = _d_traceContext(context);\n+            t.infoDeallocator = rt_getTraceDeallocator();\n         }\n     }\n }"}, {"sha": "8a10aac8fcbbccbd3462730c682b65bb83eeb73d", "filename": "libphobos/libdruntime/rt/dmain2.d", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fdmain2.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -182,17 +182,20 @@ extern (C) int rt_term()\n  */\n alias Throwable.TraceInfo function(void* ptr) TraceHandler;\n private __gshared TraceHandler traceHandler = null;\n+private __gshared Throwable.TraceDeallocator traceDeallocator = null;\n \n \n /**\n  * Overrides the default trace hander with a user-supplied version.\n  *\n  * Params:\n  *  h = The new trace handler.  Set to null to use the default handler.\n+ *  d = The new dealloactor to use.\n  */\n-extern (C) void  rt_setTraceHandler(TraceHandler h)\n+extern (C) void  rt_setTraceHandler(TraceHandler h, Throwable.TraceDeallocator d = null)\n {\n     traceHandler = h;\n+    traceDeallocator = d;\n }\n \n /**\n@@ -203,6 +206,11 @@ extern (C) TraceHandler rt_getTraceHandler()\n     return traceHandler;\n }\n \n+extern (C) Throwable.TraceDeallocator rt_getTraceDeallocator()\n+{\n+    return traceDeallocator;\n+}\n+\n /**\n  * This function will be called when an exception is constructed.  The\n  * user-supplied trace handler will be called if one has been supplied,"}, {"sha": "be31395ec2b7070958d12d196f1e8321114e227f", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1,4 +1,4 @@\n-792c8b7c1d5957767e138f78d04bf175d4b92f10\n+13ef27a56e4c22e122fc4dd54bb46b5955babdb0\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "967d2a6f50c43fa2b78e922942a61ac57783f46b", "filename": "libphobos/src/std/algorithm/iteration.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Falgorithm%2Fiteration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Falgorithm%2Fiteration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Falgorithm%2Fiteration.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -7737,8 +7737,9 @@ if (isInputRange!R &&\n \n // uniq\n /**\n-Lazily iterates unique consecutive elements of the given range (functionality\n-akin to the $(HTTP wikipedia.org/wiki/_Uniq, _uniq) system\n+Lazily iterates unique consecutive elements of the given range, which is\n+assumed to be sorted (functionality akin to the\n+$(HTTP wikipedia.org/wiki/_Uniq, _uniq) system\n utility). Equivalence of elements is assessed by using the predicate\n `pred`, by default `\"a == b\"`. The predicate is passed to\n $(REF binaryFun, std,functional), and can either accept a string, or any callable"}, {"sha": "aef23655f2a8c7ce6a30304fea29a67a33e42719", "filename": "libphobos/src/std/conv.d", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fconv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fconv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fconv.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1891,9 +1891,7 @@ if (!is(S : T) && isAssociativeArray!S &&\n     }\n     // test conversions floating => integral\n     {\n-        // AllInts[0 .. $ - 1] should be AllInts\n-        // @@@ BUG IN COMPILER @@@\n-        foreach (Integral; AllInts[0 .. $ - 1])\n+        foreach (Integral; AllInts)\n         {\n             foreach (Floating; AllFloats)\n             {\n@@ -1903,7 +1901,7 @@ if (!is(S : T) && isAssociativeArray!S &&\n     }\n     // test conversion integral => floating\n     {\n-        foreach (Integral; AllInts[0 .. $ - 1])\n+        foreach (Integral; AllInts)\n         {\n             foreach (Floating; AllFloats)\n             {"}, {"sha": "66f4b8a05928b5108f523116733fd1f626397995", "filename": "libphobos/src/std/math/exponential.d", "status": "modified", "additions": 324, "deletions": 75, "changes": 399, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fmath%2Fexponential.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fmath%2Fexponential.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath%2Fexponential.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2910,7 +2910,7 @@ private\n             alias log10P = logP;\n             alias log10Q = logQ;\n \n-            // Coefficients for log(x) = z + z^^3 P(z^^2)/Q(z^^2)\n+            // Coefficients for log(x) = z + z^^3 R(z^^2)/S(z^^2)\n             // where z = 2(x-1)/(x+1)\n             // Theoretical peak relative error = 1.1e-35\n             static immutable real[6] logR = [\n@@ -2931,7 +2931,8 @@ private\n                 1.0\n             ];\n         }\n-        else\n+        else static if (floatTraits!T.realFormat == RealFormat.ieeeExtended ||\n+                        floatTraits!T.realFormat == RealFormat.ieeeExtended53)\n         {\n             // Coefficients for log(1 + x) = x - x^^2/2 + x^^3 P(x)/Q(x)\n             // Theoretical peak relative error = 2.32e-20\n@@ -2980,7 +2981,7 @@ private\n             alias log10P = log2P;\n             alias log10Q = log2Q;\n \n-            // Coefficients for log(x) = z + z^^3 P(z^^2)/Q(z^^2)\n+            // Coefficients for log(x) = z + z^^3 R(z^^2)/S(z^^2)\n             // where z = 2(x-1)/(x+1)\n             // Theoretical peak relative error = 6.16e-22\n             static immutable real[4] logR = [\n@@ -2996,6 +2997,85 @@ private\n                 1.0000000000000000000000E0L,\n             ];\n         }\n+        else static if (floatTraits!T.realFormat == RealFormat.ieeeDouble)\n+        {\n+            // Coefficients for log(1 + x) = x - x^^2/2 + x^^3 P(x)/Q(x)\n+            static immutable double[6] logP = [\n+                7.70838733755885391666E0,\n+                1.79368678507819816313E1,\n+                1.44989225341610930846E1,\n+                4.70579119878881725854E0,\n+                4.97494994976747001425E-1,\n+                1.01875663804580931796E-4,\n+            ];\n+            static immutable double[6] logQ = [\n+                2.31251620126765340583E1,\n+                7.11544750618563894466E1,\n+                8.29875266912776603211E1,\n+                4.52279145837532221105E1,\n+                1.12873587189167450590E1,\n+                1.00000000000000000000E0,\n+            ];\n+\n+            // log2 uses the same coefficients as log.\n+            alias log2P = logP;\n+            alias log2Q = logQ;\n+\n+            // Coefficients for log(1 + x) = x - x^^2/2 + x^^3 P(x)/Q(x)\n+            static immutable double[7] log10P = [\n+                1.98892446572874072159E1,\n+                5.67349287391754285487E1,\n+                6.06127134467767258030E1,\n+                2.97877425097986925891E1,\n+                6.56312093769992875930E0,\n+                4.98531067254050724270E-1,\n+                4.58482948458143443514E-5,\n+            ];\n+            static immutable double[7] log10Q = [\n+                5.96677339718622216300E1,\n+                2.14955586696422947765E2,\n+                3.07254189979530058263E2,\n+                2.20664384982121929218E2,\n+                8.27410449222435217021E1,\n+                1.50314182634250003249E1,\n+                1.00000000000000000000E0,\n+            ];\n+\n+            // Coefficients for log(x) = z + z^^3 R(z)/S(z)\n+            // where z = 2(x-1)/(x+1)\n+            static immutable double[3] logR = [\n+                -6.41409952958715622951E1,\n+                1.63866645699558079767E1,\n+                -7.89580278884799154124E-1,\n+            ];\n+            static immutable double[4] logS = [\n+                -7.69691943550460008604E2,\n+                3.12093766372244180303E2,\n+                -3.56722798256324312549E1,\n+                1.00000000000000000000E0,\n+            ];\n+        }\n+        else static if (floatTraits!T.realFormat == RealFormat.ieeeSingle)\n+        {\n+            // Coefficients for log(1 + x) = x - x^^2/2 + x^^3 P(x)\n+            static immutable float[9] logP = [\n+                 3.3333331174E-1,\n+                -2.4999993993E-1,\n+                 2.0000714765E-1,\n+                -1.6668057665E-1,\n+                 1.4249322787E-1,\n+                -1.2420140846E-1,\n+                 1.1676998740E-1,\n+                -1.1514610310E-1,\n+                 7.0376836292E-2,\n+            ];\n+\n+            // log2 and log10 uses the same coefficients as log.\n+            alias log2P = logP;\n+            alias log10P = logP;\n+        }\n+        else\n+            static assert(0, \"no coefficients for log()\");\n     }\n }\n \n@@ -3009,6 +3089,7 @@ private\n  *    $(TR $(TD +$(INFIN))    $(TD +$(INFIN)) $(TD no)           $(TD no))\n  *    )\n  */\n+pragma(inline, true)\n real log(real x) @safe pure nothrow @nogc\n {\n     version (INLINE_YL2X)\n@@ -3020,6 +3101,31 @@ real log(real x) @safe pure nothrow @nogc\n         return logImpl(x);\n }\n \n+/// ditto\n+pragma(inline, true)\n+double log(double x) @safe pure nothrow @nogc { return __ctfe ? cast(double) log(cast(real) x) : logImpl(x); }\n+\n+/// ditto\n+pragma(inline, true)\n+float log(float x) @safe pure nothrow @nogc { return __ctfe ? cast(float) log(cast(real) x) : logImpl(x); }\n+\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log` called with argument types `(int)` matches both \"\n+           ~ \"`log(real)`, `log(double)`, and `log(float)`. Cast argument to floating point type instead.\")\n+real log(int x) @safe pure nothrow @nogc { return log(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log` called with argument types `(uint)` matches both \"\n+           ~ \"`log(real)`, `log(double)`, and `log(float)`. Cast argument to floating point type instead.\")\n+real log(uint x) @safe pure nothrow @nogc { return log(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log` called with argument types `(long)` matches both \"\n+           ~ \"`log(real)`, `log(double)`, and `log(float)`. Cast argument to floating point type instead.\")\n+real log(long x) @safe pure nothrow @nogc { return log(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log` called with argument types `(ulong)` matches both \"\n+           ~ \"`log(real)`, `log(double)`, and `log(float)`. Cast argument to floating point type instead.\")\n+real log(ulong x) @safe pure nothrow @nogc { return log(cast(real) x); }\n+\n ///\n @safe pure nothrow @nogc unittest\n {\n@@ -3034,12 +3140,31 @@ private T logImpl(T)(T x) @safe pure nothrow @nogc\n     import std.math.constants : SQRT1_2;\n     import std.math.algebraic : poly;\n     import std.math.traits : isInfinity, isNaN, signbit;\n+    import std.math : floatTraits, RealFormat;\n \n     alias coeffs = LogCoeffs!T;\n+    alias F = floatTraits!T;\n \n-    // C1 + C2 = LN2.\n-    enum T C1 = 6.93145751953125E-1L;\n-    enum T C2 = 1.428606820309417232121458176568075500134E-6L;\n+    static if (F.realFormat == RealFormat.ieeeExtended ||\n+               F.realFormat == RealFormat.ieeeExtended53 ||\n+               F.realFormat == RealFormat.ieeeQuadruple)\n+    {\n+        // C1 + C2 = LN2.\n+        enum T C1 = 6.93145751953125E-1L;\n+        enum T C2 = 1.428606820309417232121458176568075500134E-6L;\n+    }\n+    else static if (F.realFormat == RealFormat.ieeeDouble)\n+    {\n+        enum T C1 = 0.693359375;\n+        enum T C2 = -2.121944400546905827679e-4;\n+    }\n+    else static if (F.realFormat == RealFormat.ieeeSingle)\n+    {\n+        enum T C1 = 0.693359375;\n+        enum T C2 = -2.12194440e-4;\n+    }\n+    else\n+        static assert(0, \"Not implemented for this architecture\");\n \n     // Special cases.\n     if (isNaN(x))\n@@ -3058,30 +3183,36 @@ private T logImpl(T)(T x) @safe pure nothrow @nogc\n \n     x = frexp(x, exp);\n \n-    // Logarithm using log(x) = z + z^^3 R(z) / S(z),\n-    // where z = 2(x - 1)/(x + 1)\n-    if ((exp > 2) || (exp < -2))\n+    static if (F.realFormat == RealFormat.ieeeDouble ||\n+               F.realFormat == RealFormat.ieeeExtended ||\n+               F.realFormat == RealFormat.ieeeExtended53 ||\n+               F.realFormat == RealFormat.ieeeQuadruple)\n     {\n-        if (x < SQRT1_2)\n-        {   // 2(2x - 1)/(2x + 1)\n-            exp -= 1;\n-            z = x - 0.5;\n-            y = 0.5 * z + 0.5;\n-        }\n-        else\n-        {   // 2(x - 1)/(x + 1)\n-            z = x - 0.5;\n-            z -= 0.5;\n-            y = 0.5 * x  + 0.5;\n-        }\n-        x = z / y;\n-        z = x * x;\n-        z = x * (z * poly(z, coeffs.logR) / poly(z, coeffs.logS));\n-        z += exp * C2;\n-        z += x;\n-        z += exp * C1;\n+        // Logarithm using log(x) = z + z^^3 R(z) / S(z),\n+        // where z = 2(x - 1)/(x + 1)\n+        if ((exp > 2) || (exp < -2))\n+        {\n+            if (x < SQRT1_2)\n+            {   // 2(2x - 1)/(2x + 1)\n+                exp -= 1;\n+                z = x - 0.5;\n+                y = 0.5 * z + 0.5;\n+            }\n+            else\n+            {   // 2(x - 1)/(x + 1)\n+                z = x - 0.5;\n+                z -= 0.5;\n+                y = 0.5 * x  + 0.5;\n+            }\n+            x = z / y;\n+            z = x * x;\n+            z = x * (z * poly(z, coeffs.logR) / poly(z, coeffs.logS));\n+            z += exp * C2;\n+            z += x;\n+            z += exp * C1;\n \n-        return z;\n+            return z;\n+        }\n     }\n \n     // Logarithm using log(1 + x) = x - .5x^^2 + x^^3 P(x) / Q(x)\n@@ -3095,7 +3226,10 @@ private T logImpl(T)(T x) @safe pure nothrow @nogc\n         x = x - 1.0;\n     }\n     z = x * x;\n-    y = x * (z * poly(x, coeffs.logP) / poly(x, coeffs.logQ));\n+    static if (F.realFormat == RealFormat.ieeeSingle)\n+        y = x * (z * poly(x, coeffs.logP));\n+    else\n+        y = x * (z * poly(x, coeffs.logP) / poly(x, coeffs.logQ));\n     y += exp * C2;\n     z = y - 0.5 * z;\n \n@@ -3117,6 +3251,7 @@ private T logImpl(T)(T x) @safe pure nothrow @nogc\n  *      $(TR $(TD +$(INFIN))    $(TD +$(INFIN)) $(TD no)           $(TD no))\n  *      )\n  */\n+pragma(inline, true)\n real log10(real x) @safe pure nothrow @nogc\n {\n     version (INLINE_YL2X)\n@@ -3128,29 +3263,72 @@ real log10(real x) @safe pure nothrow @nogc\n         return log10Impl(x);\n }\n \n+/// ditto\n+pragma(inline, true)\n+double log10(double x) @safe pure nothrow @nogc { return __ctfe ? cast(double) log10(cast(real) x) : log10Impl(x); }\n+\n+/// ditto\n+pragma(inline, true)\n+float log10(float x) @safe pure nothrow @nogc { return __ctfe ? cast(float) log10(cast(real) x) : log10Impl(x); }\n+\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log10` called with argument types `(int)` matches both \"\n+           ~ \"`log10(real)`, `log10(double)`, and `log10(float)`. Cast argument to floating point type instead.\")\n+real log10(int x) @safe pure nothrow @nogc { return log10(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log10` called with argument types `(uint)` matches both \"\n+           ~ \"`log10(real)`, `log10(double)`, and `log10(float)`. Cast argument to floating point type instead.\")\n+real log10(uint x) @safe pure nothrow @nogc { return log10(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log10` called with argument types `(long)` matches both \"\n+           ~ \"`log10(real)`, `log10(double)`, and `log10(float)`. Cast argument to floating point type instead.\")\n+real log10(long x) @safe pure nothrow @nogc { return log10(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log10` called with argument types `(ulong)` matches both \"\n+           ~ \"`log10(real)`, `log10(double)`, and `log10(float)`. Cast argument to floating point type instead.\")\n+real log10(ulong x) @safe pure nothrow @nogc { return log10(cast(real) x); }\n+\n ///\n @safe pure nothrow @nogc unittest\n {\n     import std.math.algebraic : fabs;\n \n-    assert(fabs(log10(1000) - 3) < .000001);\n+    assert(fabs(log10(1000.0L) - 3) < .000001);\n }\n \n private T log10Impl(T)(T x) @safe pure nothrow @nogc\n {\n     import std.math.constants : SQRT1_2;\n     import std.math.algebraic : poly;\n     import std.math.traits : isNaN, isInfinity, signbit;\n+    import std.math : floatTraits, RealFormat;\n \n     alias coeffs = LogCoeffs!T;\n+    alias F = floatTraits!T;\n \n-    // log10(2) split into two parts.\n-    enum T L102A =  0.3125L;\n-    enum T L102B = -1.14700043360188047862611052755069732318101185E-2L;\n+    static if (F.realFormat == RealFormat.ieeeExtended ||\n+               F.realFormat == RealFormat.ieeeExtended53 ||\n+               F.realFormat == RealFormat.ieeeQuadruple)\n+    {\n+        // log10(2) split into two parts.\n+        enum T L102A =  0.3125L;\n+        enum T L102B = -1.14700043360188047862611052755069732318101185E-2L;\n \n-    // log10(e) split into two parts.\n-    enum T L10EA =  0.5L;\n-    enum T L10EB = -6.570551809674817234887108108339491770560299E-2L;\n+        // log10(e) split into two parts.\n+        enum T L10EA =  0.5L;\n+        enum T L10EB = -6.570551809674817234887108108339491770560299E-2L;\n+    }\n+    else static if (F.realFormat == RealFormat.ieeeDouble ||\n+                    F.realFormat == RealFormat.ieeeSingle)\n+    {\n+        enum T L102A =  3.0078125E-1;\n+        enum T L102B = 2.48745663981195213739E-4;\n+\n+        enum T L10EA =  4.3359375E-1;\n+        enum T L10EB = 7.00731903251827651129E-4;\n+    }\n+    else\n+        static assert(0, \"Not implemented for this architecture\");\n \n     // Special cases are the same as for log.\n     if (isNaN(x))\n@@ -3169,26 +3347,31 @@ private T log10Impl(T)(T x) @safe pure nothrow @nogc\n \n     x = frexp(x, exp);\n \n-    // Logarithm using log(x) = z + z^^3 R(z) / S(z),\n-    // where z = 2(x - 1)/(x + 1)\n-    if ((exp > 2) || (exp < -2))\n-    {\n-        if (x < SQRT1_2)\n-        {   // 2(2x - 1)/(2x + 1)\n-            exp -= 1;\n-            z = x - 0.5;\n-            y = 0.5 * z + 0.5;\n-        }\n-        else\n-        {   // 2(x - 1)/(x + 1)\n-            z = x - 0.5;\n-            z -= 0.5;\n-            y = 0.5 * x  + 0.5;\n+    static if (F.realFormat == RealFormat.ieeeExtended ||\n+               F.realFormat == RealFormat.ieeeExtended53 ||\n+               F.realFormat == RealFormat.ieeeQuadruple)\n+    {\n+        // Logarithm using log(x) = z + z^^3 R(z) / S(z),\n+        // where z = 2(x - 1)/(x + 1)\n+        if ((exp > 2) || (exp < -2))\n+        {\n+            if (x < SQRT1_2)\n+            {   // 2(2x - 1)/(2x + 1)\n+                exp -= 1;\n+                z = x - 0.5;\n+                y = 0.5 * z + 0.5;\n+            }\n+            else\n+            {   // 2(x - 1)/(x + 1)\n+                z = x - 0.5;\n+                z -= 0.5;\n+                y = 0.5 * x  + 0.5;\n+            }\n+            x = z / y;\n+            z = x * x;\n+            y = x * (z * poly(z, coeffs.logR) / poly(z, coeffs.logS));\n+            goto Ldone;\n         }\n-        x = z / y;\n-        z = x * x;\n-        y = x * (z * poly(z, coeffs.logR) / poly(z, coeffs.logS));\n-        goto Ldone;\n     }\n \n     // Logarithm using log(1 + x) = x - .5x^^2 + x^^3 P(x) / Q(x)\n@@ -3201,7 +3384,10 @@ private T log10Impl(T)(T x) @safe pure nothrow @nogc\n         x = x - 1.0;\n \n     z = x * x;\n-    y = x * (z * poly(x, coeffs.log10P) / poly(x, coeffs.log10Q));\n+    static if (F.realFormat == RealFormat.ieeeSingle)\n+        y = x * (z * poly(x, coeffs.log10P));\n+    else\n+        y = x * (z * poly(x, coeffs.log10P) / poly(x, coeffs.log10Q));\n     y = y - 0.5 * z;\n \n     // Multiply log of fraction by log10(e) and base 2 exponent by log10(2).\n@@ -3232,6 +3418,7 @@ Ldone:\n  *  $(TR $(TD +$(INFIN))    $(TD +$(INFIN))    $(TD no)           $(TD no))\n  *  )\n  */\n+pragma(inline, true)\n real log1p(real x) @safe pure nothrow @nogc\n {\n     version (INLINE_YL2X)\n@@ -3245,6 +3432,31 @@ real log1p(real x) @safe pure nothrow @nogc\n         return log1pImpl(x);\n }\n \n+/// ditto\n+pragma(inline, true)\n+double log1p(double x) @safe pure nothrow @nogc { return __ctfe ? cast(double) log1p(cast(real) x) : log1pImpl(x); }\n+\n+/// ditto\n+pragma(inline, true)\n+float log1p(float x) @safe pure nothrow @nogc { return __ctfe ? cast(float) log1p(cast(real) x) : log1pImpl(x); }\n+\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log1p` called with argument types `(int)` matches both \"\n+           ~ \"`log1p(real)`, `log1p(double)`, and `log1p(float)`. Cast argument to floating point type instead.\")\n+real log1p(int x) @safe pure nothrow @nogc { return log1p(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log1p` called with argument types `(uint)` matches both \"\n+           ~ \"`log1p(real)`, `log1p(double)`, and `log1p(float)`. Cast argument to floating point type instead.\")\n+real log1p(uint x) @safe pure nothrow @nogc { return log1p(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log1p` called with argument types `(long)` matches both \"\n+           ~ \"`log1p(real)`, `log1p(double)`, and `log1p(float)`. Cast argument to floating point type instead.\")\n+real log1p(long x) @safe pure nothrow @nogc { return log1p(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log1p` called with argument types `(ulong)` matches both \"\n+           ~ \"`log1p(real)`, `log1p(double)`, and `log1p(float)`. Cast argument to floating point type instead.\")\n+real log1p(ulong x) @safe pure nothrow @nogc { return log1p(cast(real) x); }\n+\n ///\n @safe pure unittest\n {\n@@ -3289,6 +3501,7 @@ private T log1pImpl(T)(T x) @safe pure nothrow @nogc\n  *  $(TR $(TD +$(INFIN))    $(TD +$(INFIN)) $(TD no)           $(TD no) )\n  *  )\n  */\n+pragma(inline, true)\n real log2(real x) @safe pure nothrow @nogc\n {\n     version (INLINE_YL2X)\n@@ -3297,6 +3510,31 @@ real log2(real x) @safe pure nothrow @nogc\n         return log2Impl(x);\n }\n \n+/// ditto\n+pragma(inline, true)\n+double log2(double x) @safe pure nothrow @nogc { return __ctfe ? cast(double) log2(cast(real) x) : log2Impl(x); }\n+\n+/// ditto\n+pragma(inline, true)\n+float log2(float x) @safe pure nothrow @nogc { return __ctfe ? cast(float) log2(cast(real) x) : log2Impl(x); }\n+\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log2` called with argument types `(int)` matches both \"\n+           ~ \"`log2(real)`, `log2(double)`, and `log2(float)`. Cast argument to floating point type instead.\")\n+real log2(int x) @safe pure nothrow @nogc { return log2(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log2` called with argument types `(uint)` matches both \"\n+           ~ \"`log2(real)`, `log2(double)`, and `log2(float)`. Cast argument to floating point type instead.\")\n+real log2(uint x) @safe pure nothrow @nogc { return log2(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log2` called with argument types `(long)` matches both \"\n+           ~ \"`log2(real)`, `log2(double)`, and `log2(float)`. Cast argument to floating point type instead.\")\n+real log2(long x) @safe pure nothrow @nogc { return log2(cast(real) x); }\n+// @@@DEPRECATED_[2.112.0]@@@\n+deprecated(\"`std.math.exponential.log2` called with argument types `(ulong)` matches both \"\n+           ~ \"`log2(real)`, `log2(double)`, and `log2(float)`. Cast argument to floating point type instead.\")\n+real log2(ulong x) @safe pure nothrow @nogc { return log2(cast(real) x); }\n+\n ///\n @safe unittest\n {\n@@ -3318,8 +3556,10 @@ private T log2Impl(T)(T x) @safe pure nothrow @nogc\n     import std.math.traits : isNaN, isInfinity, signbit;\n     import std.math.constants : SQRT1_2, LOG2E;\n     import std.math.algebraic : poly;\n+    import std.math : floatTraits, RealFormat;\n \n     alias coeffs = LogCoeffs!T;\n+    alias F = floatTraits!T;\n \n     // Special cases are the same as for log.\n     if (isNaN(x))\n@@ -3338,26 +3578,32 @@ private T log2Impl(T)(T x) @safe pure nothrow @nogc\n \n     x = frexp(x, exp);\n \n-    // Logarithm using log(x) = z + z^^3 R(z) / S(z),\n-    // where z = 2(x - 1)/(x + 1)\n-    if ((exp > 2) || (exp < -2))\n+    static if (F.realFormat == RealFormat.ieeeDouble ||\n+               F.realFormat == RealFormat.ieeeExtended ||\n+               F.realFormat == RealFormat.ieeeExtended53 ||\n+               F.realFormat == RealFormat.ieeeQuadruple)\n     {\n-        if (x < SQRT1_2)\n-        {   // 2(2x - 1)/(2x + 1)\n-            exp -= 1;\n-            z = x - 0.5;\n-            y = 0.5 * z + 0.5;\n-        }\n-        else\n-        {   // 2(x - 1)/(x + 1)\n-            z = x - 0.5;\n-            z -= 0.5;\n-            y = 0.5 * x  + 0.5;\n+        // Logarithm using log(x) = z + z^^3 R(z) / S(z),\n+        // where z = 2(x - 1)/(x + 1)\n+        if ((exp > 2) || (exp < -2))\n+        {\n+            if (x < SQRT1_2)\n+            {   // 2(2x - 1)/(2x + 1)\n+                exp -= 1;\n+                z = x - 0.5;\n+                y = 0.5 * z + 0.5;\n+            }\n+            else\n+            {   // 2(x - 1)/(x + 1)\n+                z = x - 0.5;\n+                z -= 0.5;\n+                y = 0.5 * x  + 0.5;\n+            }\n+            x = z / y;\n+            z = x * x;\n+            y = x * (z * poly(z, coeffs.logR) / poly(z, coeffs.logS));\n+            goto Ldone;\n         }\n-        x = z / y;\n-        z = x * x;\n-        y = x * (z * poly(z, coeffs.logR) / poly(z, coeffs.logS));\n-        goto Ldone;\n     }\n \n     // Logarithm using log(1 + x) = x - .5x^^2 + x^^3 P(x) / Q(x)\n@@ -3370,7 +3616,10 @@ private T log2Impl(T)(T x) @safe pure nothrow @nogc\n         x = x - 1.0;\n \n     z = x * x;\n-    y = x * (z * poly(x, coeffs.log2P) / poly(x, coeffs.log2Q));\n+    static if (F.realFormat == RealFormat.ieeeSingle)\n+        y = x * (z * poly(x, coeffs.log2P));\n+    else\n+        y = x * (z * poly(x, coeffs.log2P) / poly(x, coeffs.log2Q));\n     y = y - 0.5 * z;\n \n     // Multiply log of fraction by log10(e) and base 2 exponent by log10(2)."}, {"sha": "f2e18005e25950c21f706996e1bb306b2cb790dd", "filename": "libphobos/src/std/math/operations.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fmath%2Foperations.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fmath%2Foperations.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath%2Foperations.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1793,7 +1793,7 @@ if (isFloatingPoint!T)\n         }\n \n         import std.math.exponential : log2;\n-        enum log2_max_exp = cast(int) log2(T.max_exp);\n+        enum log2_max_exp = cast(int) log2(T(T.max_exp));\n \n         ret.mantissa = ival & ((1L << (T.mant_dig - 1)) - 1);\n         ret.exponent = (ival >> (T.mant_dig - 1)) & ((1L << (log2_max_exp + 1)) - 1);"}, {"sha": "648b70eeea841f0c1a651c29997a4f2f45c61653", "filename": "libphobos/src/std/numeric.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fnumeric.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fnumeric.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fnumeric.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -436,7 +436,7 @@ public:\n     static @property size_t dig()\n     {\n         auto shiftcnt = precision - ((flags&Flags.storeNormalized) == 0);\n-        return shiftcnt == 64 ? 19 : cast(size_t) log10(1uL << shiftcnt);\n+        return shiftcnt == 64 ? 19 : cast(size_t) log10(real(1uL << shiftcnt));\n     }\n \n     /// Returns: smallest increment to the value 1"}, {"sha": "9b231f3ac8a5748d8854f772e439e39a9a6e5fd6", "filename": "libphobos/src/std/parallelism.d", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fparallelism.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fparallelism.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fparallelism.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -1508,7 +1508,7 @@ public:\n \n         if (this.size == 0)\n         {\n-            return rangeLen;\n+            return max(rangeLen, 1);\n         }\n \n         immutable size_t eightSize = 4 * (this.size + 1);\n@@ -3644,6 +3644,15 @@ ParallelForeach!R parallel(R)(R range, size_t workUnitSize)\n     assert(arrIndex.sum == 10.iota.sum);\n }\n \n+// https://issues.dlang.org/show_bug.cgi?id=22745\n+@system unittest\n+{\n+    auto pool = new TaskPool(0);\n+    int[] empty;\n+    foreach (i; pool.parallel(empty)) {}\n+    pool.finish();\n+}\n+\n // Thrown when a parallel foreach loop is broken from.\n class ParallelForeachError : Error\n {\n@@ -4339,7 +4348,7 @@ version (StdUnittest)\n \n     foreach (i, elem; logs)\n     {\n-        assert(isClose(elem, cast(double) log(i + 1)));\n+        assert(isClose(elem, log(double(i + 1))));\n     }\n \n     assert(poolInstance.amap!\"a * a\"([1,2,3,4,5]) == [1,4,9,16,25]);"}, {"sha": "93be764abd182222fb9fad7378ea65b889de0f03", "filename": "libphobos/src/std/random.d", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Frandom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Frandom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Frandom.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2516,7 +2516,7 @@ if (!is(T == enum) && (isIntegral!T || isSomeChar!T))\n     assert(rnd.uniform!ulong == 4838462006927449017);\n \n     enum Fruit { apple, mango, pear }\n-    version (X86_64) // https://issues.dlang.org/show_bug.cgi?id=15147\n+    version (D_LP64) // https://issues.dlang.org/show_bug.cgi?id=15147\n     assert(rnd.uniform!Fruit == Fruit.mango);\n }\n \n@@ -2798,7 +2798,7 @@ auto ref choice(Range)(ref Range range)\n     auto rnd = MinstdRand0(42);\n \n     auto elem  = [1, 2, 3, 4, 5].choice(rnd);\n-    version (X86_64) // https://issues.dlang.org/show_bug.cgi?id=15147\n+    version (D_LP64) // https://issues.dlang.org/show_bug.cgi?id=15147\n     assert(elem == 3);\n }\n \n@@ -2913,7 +2913,7 @@ if (isRandomAccessRange!Range)\n     auto rnd = MinstdRand0(42);\n \n     auto arr = [1, 2, 3, 4, 5].randomShuffle(rnd);\n-    version (X86_64) // https://issues.dlang.org/show_bug.cgi?id=15147\n+    version (D_LP64) // https://issues.dlang.org/show_bug.cgi?id=15147\n     assert(arr == [3, 5, 2, 4, 1]);\n }\n \n@@ -3003,15 +3003,15 @@ if (isRandomAccessRange!Range)\n     auto arr = [1, 2, 3, 4, 5, 6];\n     arr = arr.dup.partialShuffle(1, rnd);\n \n-    version (X86_64) // https://issues.dlang.org/show_bug.cgi?id=15147\n+    version (D_LP64) // https://issues.dlang.org/show_bug.cgi?id=15147\n     assert(arr == [2, 1, 3, 4, 5, 6]); // 1<->2\n \n     arr = arr.dup.partialShuffle(2, rnd);\n-    version (X86_64) // https://issues.dlang.org/show_bug.cgi?id=15147\n+    version (D_LP64) // https://issues.dlang.org/show_bug.cgi?id=15147\n     assert(arr == [1, 4, 3, 2, 5, 6]); // 1<->2, 2<->4\n \n     arr = arr.dup.partialShuffle(3, rnd);\n-    version (X86_64) // https://issues.dlang.org/show_bug.cgi?id=15147\n+    version (D_LP64) // https://issues.dlang.org/show_bug.cgi?id=15147\n     assert(arr == [5, 4, 6, 2, 1, 3]); // 1<->5, 2<->4, 3<->6\n }\n \n@@ -3428,7 +3428,7 @@ if (isRandomAccessRange!Range)\n     import std.range : iota;\n     auto rnd = MinstdRand0(42);\n \n-    version (X86_64) // https://issues.dlang.org/show_bug.cgi?id=15147\n+    version (D_LP64) // https://issues.dlang.org/show_bug.cgi?id=15147\n     assert(10.iota.randomCover(rnd).equal([7, 4, 2, 0, 1, 6, 8, 3, 9, 5]));\n }\n "}, {"sha": "d6a01e244865fa6b3decd746d1ac7a7072db2120", "filename": "libphobos/src/std/regex/package.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fregex%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Fregex%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fregex%2Fpackage.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -212,7 +212,7 @@ They met on 24/01/1970.\n         names work like aliases in addition to direct numbers.\n      )\n     $(REG_TITLE Assertions, Match position rather than character )\n-    $(REG_ROW ^, Matches at the begining of input or line (in multiline mode).)\n+    $(REG_ROW ^, Matches at the beginning of input or line (in multiline mode).)\n     $(REG_ROW $, Matches at the end of input or line (in multiline mode). )\n     $(REG_ROW \\b, Matches at word boundary. )\n     $(REG_ROW \\B, Matches when $(U not) at word boundary. )"}, {"sha": "25cf9e0084134f9824393067cd0bffbd5b588ec9", "filename": "libphobos/src/std/typecons.d", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Ftypecons.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Fsrc%2Fstd%2Ftypecons.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ftypecons.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -225,7 +225,10 @@ public:\n     {\n         if (_p !is null)\n         {\n-            destroy(_p);\n+            static if (is(T == class) || is(T == interface))\n+                destroy(_p);\n+            else\n+                destroy(*_p);\n             _p = null;\n         }\n     }\n@@ -259,7 +262,7 @@ private:\n ///\n @safe unittest\n {\n-    static struct S\n+    struct S\n     {\n         int i;\n         this(int i){this.i = i;}\n@@ -284,6 +287,7 @@ private:\n     Unique!S u1;\n     assert(u1.isEmpty);\n     u1 = produce();\n+    assert(u1.i == 5);\n     increment(u1);\n     assert(u1.i == 6);\n     //consume(u1); // Error: u1 is not copyable\n@@ -292,6 +296,24 @@ private:\n     assert(u1.isEmpty);\n }\n \n+@safe unittest\n+{\n+    int i;\n+    struct S\n+    {\n+        ~this()\n+        {\n+            // check context pointer still exists - dtor also called before GC frees struct\n+            if (this.tupleof[0])\n+                i++;\n+        }\n+    }\n+    {\n+        Unique!S u = new S;\n+    }\n+    assert(i == 1);\n+}\n+\n @system unittest\n {\n     // test conversion to base ref"}, {"sha": "e4ed8e80ee8e81194ae1494b91169d5ab9a66cce", "filename": "libphobos/testsuite/libphobos.exceptions/refcounted.d", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Ftestsuite%2Flibphobos.exceptions%2Frefcounted.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Ftestsuite%2Flibphobos.exceptions%2Frefcounted.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.exceptions%2Frefcounted.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -2,9 +2,9 @@\n class E : Exception\n {\n     static int instances;\n-    this(string msg = \"\")\n+    this(string msg = \"\", Throwable nextInChain = null)\n     {\n-        super(msg);\n+        super(msg, nextInChain);\n         instances++;\n     }\n \n@@ -93,4 +93,34 @@ void main()\n     }\n \n     assert(E.instances == 0);\n+\n+    try\n+    {\n+        throw new E(\"first\");\n+    }\n+    catch (E first)\n+    {\n+        assert(first.refcount == 2);\n+        assert(E.instances == 1);\n+\n+        try\n+        {\n+            throw new E(\"second\", first);\n+        }\n+        catch (E second)\n+        {\n+            assert(first.next is null);\n+            assert(second.next is first);\n+\n+            assert(first.refcount == 3);\n+            assert(second.refcount == 2);\n+\n+            assert(E.instances == 2);\n+        }\n+\n+        assert(first.refcount == 2);\n+        assert(E.instances == 1);\n+    }\n+\n+    assert(E.instances == 0);\n }"}, {"sha": "bf6e830f59807a6fd89561b67a2a1d6dd3786ee6", "filename": "libphobos/testsuite/libphobos.gc/issue22843.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Ftestsuite%2Flibphobos.gc%2Fissue22843.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Ftestsuite%2Flibphobos.gc%2Fissue22843.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.gc%2Fissue22843.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -0,0 +1,12 @@\n+import core.memory;\n+void main()\n+{\n+    auto collections = GC.profileStats().numCollections;\n+    // loop until we trigger a collection\n+    for (;;)\n+    {\n+        cast(void)GC.malloc(100_000, GC.BlkAttr.NO_SCAN);\n+        if (GC.profileStats().numCollections == collections+1)\n+            break;\n+    }\n+}"}, {"sha": "fcec87b1aacc3854dfce2bfbd610a8512ed295c2", "filename": "libphobos/testsuite/libphobos.shared/finalize.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Ftestsuite%2Flibphobos.shared%2Ffinalize.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99303eb4aafef70075951731b3ad99266fe6225/libphobos%2Ftestsuite%2Flibphobos.shared%2Ffinalize.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.shared%2Ffinalize.d?ref=f99303eb4aafef70075951731b3ad99266fe6225", "patch": "@@ -7,9 +7,9 @@ import core.sys.posix.dlfcn;\n void runTest()\n {\n     Object obj;\n-    obj = Object.factory(\"lib.MyFinalizer\");\n+    obj = Object.factory(\"lib.MyFinalizer\");    // { dg-warning \"is deprecated\" } \n     assert(obj.toString() == \"lib.MyFinalizer\");\n-    obj = Object.factory(\"lib.MyFinalizerBig\");\n+    obj = Object.factory(\"lib.MyFinalizerBig\"); // { dg-warning \"is deprecated\" }\n     assert(obj.toString() == \"lib.MyFinalizerBig\");\n }\n "}]}