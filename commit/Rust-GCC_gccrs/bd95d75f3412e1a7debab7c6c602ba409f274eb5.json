{"sha": "bd95d75f3412e1a7debab7c6c602ba409f274eb5", "node_id": "C_kwDOANBUbNoAKGJkOTVkNzVmMzQxMmUxYTdkZWJhYjdjNmM2MDJiYTQwOWYyNzRlYjU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-12T03:03:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-15T07:49:51Z"}, "message": "c++: c++20 constexpr default ctor and array init\n\nThe implicit constexpr patch revealed that marking the constructor in the\nPR70690 testcase as constexpr made the bug reappear, because build_vec_init\nassumed that a constexpr default constructor initialized the whole object,\nso it was equivalent to value-initialization.  But this is no longer true in\nC++20.\n\n\tPR c++/70690\n\ngcc/cp/ChangeLog:\n\n\t* init.c (build_vec_init): Check default_init_uninitialized_part in\n\tC++20.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/init/array41a.C: New test.", "tree": {"sha": "863b4a8caeabd36dc1542a590976dd45fedc453b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/863b4a8caeabd36dc1542a590976dd45fedc453b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd95d75f3412e1a7debab7c6c602ba409f274eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd95d75f3412e1a7debab7c6c602ba409f274eb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd95d75f3412e1a7debab7c6c602ba409f274eb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd95d75f3412e1a7debab7c6c602ba409f274eb5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4df7f8c79835d56928f51f9e674d326300936e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df7f8c79835d56928f51f9e674d326300936e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4df7f8c79835d56928f51f9e674d326300936e8e"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "3ba2e3bbe04a16966a6d97a320c1373cd5871019", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95d75f3412e1a7debab7c6c602ba409f274eb5/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95d75f3412e1a7debab7c6c602ba409f274eb5/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=bd95d75f3412e1a7debab7c6c602ba409f274eb5", "patch": "@@ -4470,11 +4470,14 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n      We do need to keep going if we're copying an array.  */\n \n-  if (try_const && !init)\n+  if (try_const && !init\n+      && (cxx_dialect < cxx20\n+\t  || !default_init_uninitialized_part (inner_elt_type)))\n     /* With a constexpr default constructor, which we checked for when\n        setting try_const above, default-initialization is equivalent to\n        value-initialization, and build_value_init gives us something more\n-       friendly to maybe_constant_init.  */\n+       friendly to maybe_constant_init.  Except in C++20 and up a constexpr\n+       constructor need not initialize all the members.  */\n     explicit_value_init_p = true;\n   if (from_array\n       || ((type_build_ctor_call (type) || init || explicit_value_init_p)"}, {"sha": "aa9fdc629f28e1193b3c285f2f1254b013452cbf", "filename": "gcc/testsuite/g++.dg/init/array41a.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95d75f3412e1a7debab7c6c602ba409f274eb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray41a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95d75f3412e1a7debab7c6c602ba409f274eb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray41a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray41a.C?ref=bd95d75f3412e1a7debab7c6c602ba409f274eb5", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/70690\n+// { dg-do run { target c++11 } }\n+\n+struct A {\n+  constexpr A() {}\n+};\n+\n+struct APadded : public A {\n+  char pad[63];\n+};\n+\n+int f();\n+int i = f();\n+APadded cache[50];\n+APadded *p = cache;\n+\n+int f()\n+{\n+  cache[0].pad[0] = 42;\n+  return 1;\n+}\n+\n+int main()\n+{\n+  if (cache[0].pad[0] != 42)\n+    __builtin_abort();\n+}"}]}