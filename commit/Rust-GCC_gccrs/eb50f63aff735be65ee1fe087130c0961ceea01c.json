{"sha": "eb50f63aff735be65ee1fe087130c0961ceea01c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1MGY2M2FmZjczNWJlNjVlZTFmZTA4NzEzMGMwOTYxY2VlYTAxYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-29T21:59:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-29T21:59:34Z"}, "message": "lto-opts.c (register_user_option_p, [...]): Make type argument unsigned.\n\n\t* lto-opts.c (register_user_option_p, lto_register_user_option):\n\tMake type argument unsigned.\n\t* lto-streamer.h (lto_register_user_option): Make type argument\n\tunsigned.\n\t* opth-gen.awk: Make CL_* macros unsigned.\n\t* opts-common.c (find_opt): Make lang_mask argument unsigned.\n\t* opts.h (CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_DRIVER,\n\tCL_TARGET, CL_COMMON, CL_SEPARATE_NARGS_MASK, CL_SEPARATE_ALIAS,\n\tCL_NO_DRIVER_ARG, CL_REJECT_DRIVER, CL_SAVE, CL_DISABLED,\n\tCL_REPORT, CL_JOINED, CL_SEPARATE, CL_REJECT_NEGATIVE,\n\tCL_MISSING_OK, CL_UINTEGER, CL_UNDOCUMENTED): Make unsigned.\n\t(find_opt): Make lang_mask argument unsigned.\n\nFrom-SVN: r171701", "tree": {"sha": "f8a59988b63f685135bf3e79f824509beb0df5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8a59988b63f685135bf3e79f824509beb0df5e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb50f63aff735be65ee1fe087130c0961ceea01c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb50f63aff735be65ee1fe087130c0961ceea01c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb50f63aff735be65ee1fe087130c0961ceea01c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb50f63aff735be65ee1fe087130c0961ceea01c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76763a6d3f5a93616c92e089a2391611319650a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76763a6d3f5a93616c92e089a2391611319650a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76763a6d3f5a93616c92e089a2391611319650a0"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "a5d2c4dd18733ea95b5c3fd10313ea6b5ead646e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb50f63aff735be65ee1fe087130c0961ceea01c", "patch": "@@ -1,3 +1,18 @@\n+2011-03-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto-opts.c (register_user_option_p, lto_register_user_option):\n+\tMake type argument unsigned.\n+\t* lto-streamer.h (lto_register_user_option): Make type argument\n+\tunsigned.\n+\t* opth-gen.awk: Make CL_* macros unsigned.\n+\t* opts-common.c (find_opt): Make lang_mask argument unsigned.\n+\t* opts.h (CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_DRIVER,\n+\tCL_TARGET, CL_COMMON, CL_SEPARATE_NARGS_MASK, CL_SEPARATE_ALIAS,\n+\tCL_NO_DRIVER_ARG, CL_REJECT_DRIVER, CL_SAVE, CL_DISABLED,\n+\tCL_REPORT, CL_JOINED, CL_SEPARATE, CL_REJECT_NEGATIVE,\n+\tCL_MISSING_OK, CL_UINTEGER, CL_UNDOCUMENTED): Make unsigned.\n+\t(find_opt): Make lang_mask argument unsigned.\n+\n 2011-03-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/48331"}, {"sha": "3cff0ee7430d0d6f07212ae7811585c70e0496e8", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=eb50f63aff735be65ee1fe087130c0961ceea01c", "patch": "@@ -194,7 +194,7 @@ input_string_block (struct lto_input_block *ib)\n    Among others, optimization options may well be appropriate here.  */\n \n static bool\n-register_user_option_p (size_t code, int type)\n+register_user_option_p (size_t code, unsigned int type)\n {\n   if (type == CL_TARGET)\n     return true;\n@@ -215,7 +215,8 @@ register_user_option_p (size_t code, int type)\n    If relevant to LTO, save it in the user options vector.  */\n \n void\n-lto_register_user_option (size_t code, const char *arg, int value, int type)\n+lto_register_user_option (size_t code, const char *arg, int value,\n+\t\t\t  unsigned int type)\n {\n   if (register_user_option_p (code, type))\n     {"}, {"sha": "546e608445f0de6716a84faef73d627c1046d958", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=eb50f63aff735be65ee1fe087130c0961ceea01c", "patch": "@@ -1,7 +1,7 @@\n /* Data structures and declarations used for reading and writing\n    GIMPLE to a file stream.\n \n-   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Doug Kwan <dougkwan@google.com>\n \n This file is part of GCC.\n@@ -933,7 +933,7 @@ extern GTY(()) VEC(tree,gc) *lto_global_var_decls;\n \n \n /* In lto-opts.c.  */\n-extern void lto_register_user_option (size_t, const char *, int, int);\n+extern void lto_register_user_option (size_t, const char *, int, unsigned int);\n extern void lto_read_file_options (struct lto_file_decl_data *);\n extern void lto_write_options (void);\n extern void lto_reissue_options (void);"}, {"sha": "01c2e46331b4201eb246842acb23b3a45fddc420", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=eb50f63aff735be65ee1fe087130c0961ceea01c", "patch": "@@ -451,9 +451,9 @@ for (i = 0; i < n_langs; i++) {\n \tmacros[i] = \"CL_\" langs[i]\n \tgsub( \"[^\" alnum \"_]\", \"X\", macros[i] )\n \ts = substr(\"            \", length (macros[i]))\n-\tprint \"#define \" macros[i] s \" (1 << \" i \")\"\n+\tprint \"#define \" macros[i] s \" (1U << \" i \")\"\n     }\n-print \"#define CL_LANG_ALL   ((1 << \" n_langs \") - 1)\"\n+print \"#define CL_LANG_ALL   ((1U << \" n_langs \") - 1)\"\n \n print \"\"\n print \"enum opt_code\""}, {"sha": "345afe844d2a51d2ef4fbad99010169150494d2a", "filename": "gcc/opts-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=eb50f63aff735be65ee1fe087130c0961ceea01c", "patch": "@@ -1,5 +1,5 @@\n /* Command line option handling.\n-   Copyright (C) 2006, 2007, 2008, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2007, 2008, 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -52,7 +52,7 @@ static void prune_options (struct cl_decoded_option **, unsigned int *);\n    front end, the longest match for a different front end is returned\n    (or N_OPTS if none) and the caller emits an error message.  */\n size_t\n-find_opt (const char *input, int lang_mask)\n+find_opt (const char *input, unsigned int lang_mask)\n {\n   size_t mn, mn_orig, mx, md, opt_len;\n   size_t match_wrong_lang;"}, {"sha": "0d58bae25f25f95c11bb5b923b0cc100df474bdb", "filename": "gcc/opts.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb50f63aff735be65ee1fe087130c0961ceea01c/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=eb50f63aff735be65ee1fe087130c0961ceea01c", "patch": "@@ -1,5 +1,5 @@\n /* Command line option handling.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -83,12 +83,12 @@ extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n extern const unsigned int cl_lang_count;\n \n-#define CL_PARAMS               (1 << 11) /* Fake entry.  Used to display --param info with --help.  */\n-#define CL_WARNING\t\t(1 << 12) /* Enables an (optional) warning message.  */\n-#define CL_OPTIMIZATION\t\t(1 << 13) /* Enables an (optional) optimization.  */\n-#define CL_DRIVER\t\t(1 << 14) /* Driver option.  */\n-#define CL_TARGET\t\t(1 << 15) /* Target-specific option.  */\n-#define CL_COMMON\t\t(1 << 16) /* Language-independent.  */\n+#define CL_PARAMS               (1U << 11) /* Fake entry.  Used to display --param info with --help.  */\n+#define CL_WARNING\t\t(1U << 12) /* Enables an (optional) warning message.  */\n+#define CL_OPTIMIZATION\t\t(1U << 13) /* Enables an (optional) optimization.  */\n+#define CL_DRIVER\t\t(1U << 14) /* Driver option.  */\n+#define CL_TARGET\t\t(1U << 15) /* Target-specific option.  */\n+#define CL_COMMON\t\t(1U << 16) /* Language-independent.  */\n \n #define CL_MIN_OPTION_CLASS\tCL_PARAMS\n #define CL_MAX_OPTION_CLASS\tCL_COMMON\n@@ -101,20 +101,20 @@ extern const unsigned int cl_lang_count;\n /* Options marked with CL_SEPARATE take a number of separate arguments\n    (1 to 4) that is one more than the number in this bit-field.  */\n #define CL_SEPARATE_NARGS_SHIFT\t17\n-#define CL_SEPARATE_NARGS_MASK\t(3 << CL_SEPARATE_NARGS_SHIFT)\n-\n-#define CL_SEPARATE_ALIAS\t(1 << 19) /* Option is an alias when used with separate argument.  */\n-#define CL_NO_DRIVER_ARG\t(1 << 20) /* Option takes no argument in the driver.  */\n-#define CL_REJECT_DRIVER\t(1 << 21) /* Reject this option in the driver.  */\n-#define CL_SAVE\t\t\t(1 << 22) /* Target-specific option for attribute.  */\n-#define CL_DISABLED\t\t(1 << 23) /* Disabled in this configuration.  */\n-#define CL_REPORT\t\t(1 << 24) /* Report argument with -fverbose-asm  */\n-#define CL_JOINED\t\t(1 << 25) /* If takes joined argument.  */\n-#define CL_SEPARATE\t\t(1 << 26) /* If takes a separate argument.  */\n-#define CL_REJECT_NEGATIVE\t(1 << 27) /* Reject no- form.  */\n-#define CL_MISSING_OK\t\t(1 << 28) /* Missing argument OK (joined).  */\n-#define CL_UINTEGER\t\t(1 << 29) /* Argument is an integer >=0.  */\n-#define CL_UNDOCUMENTED\t\t(1 << 30) /* Do not output with --help.  */\n+#define CL_SEPARATE_NARGS_MASK\t(3U << CL_SEPARATE_NARGS_SHIFT)\n+\n+#define CL_SEPARATE_ALIAS\t(1U << 19) /* Option is an alias when used with separate argument.  */\n+#define CL_NO_DRIVER_ARG\t(1U << 20) /* Option takes no argument in the driver.  */\n+#define CL_REJECT_DRIVER\t(1U << 21) /* Reject this option in the driver.  */\n+#define CL_SAVE\t\t\t(1U << 22) /* Target-specific option for attribute.  */\n+#define CL_DISABLED\t\t(1U << 23) /* Disabled in this configuration.  */\n+#define CL_REPORT\t\t(1U << 24) /* Report argument with -fverbose-asm  */\n+#define CL_JOINED\t\t(1U << 25) /* If takes joined argument.  */\n+#define CL_SEPARATE\t\t(1U << 26) /* If takes a separate argument.  */\n+#define CL_REJECT_NEGATIVE\t(1U << 27) /* Reject no- form.  */\n+#define CL_MISSING_OK\t\t(1U << 28) /* Missing argument OK (joined).  */\n+#define CL_UINTEGER\t\t(1U << 29) /* Argument is an integer >=0.  */\n+#define CL_UNDOCUMENTED\t\t(1U << 30) /* Do not output with --help.  */\n \n /* Flags for an enumerated option argument.  */\n #define CL_ENUM_CANONICAL\t(1 << 0) /* Canonical for this value.  */\n@@ -280,7 +280,7 @@ extern const char **in_fnames;\n \n extern unsigned num_in_fnames;\n \n-size_t find_opt (const char *input, int lang_mask);\n+size_t find_opt (const char *input, unsigned int lang_mask);\n extern int integral_argument (const char *arg);\n extern bool enum_value_to_arg (const struct cl_enum_arg *enum_args,\n \t\t\t       const char **argp, int value,"}]}