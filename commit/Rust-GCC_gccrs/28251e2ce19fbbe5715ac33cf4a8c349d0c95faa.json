{"sha": "28251e2ce19fbbe5715ac33cf4a8c349d0c95faa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgyNTFlMmNlMTlmYmJlNTcxNWFjMzNjZjRhOGMzNDlkMGM5NWZhYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-17T14:17:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-17T14:17:33Z"}, "message": "re PR tree-optimization/67221 (ICE at -Os and above on x86_64-linux-gnu: Segmentation fault (program cc1))\n\n2015-08-17  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/67221\n\t* tree-ssa-sccvn.c (visit_phi): Keep all-TOP args TOP.\n\t(sccvn_dom_walker::before_dom_children): Mark backedges of\n\tnon-executable blocks as not executable.\n\n\t* gcc.dg/torture/pr67221.c: New testcase.\n\nFrom-SVN: r226938", "tree": {"sha": "3436d1f599cdaa60d64cfa9b16030e7d0997e0bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3436d1f599cdaa60d64cfa9b16030e7d0997e0bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c825cd46bac36333c1970c549a8630f8c850794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c825cd46bac36333c1970c549a8630f8c850794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c825cd46bac36333c1970c549a8630f8c850794"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "93ec58f49463a20a6eecee30beffece3770e14d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28251e2ce19fbbe5715ac33cf4a8c349d0c95faa", "patch": "@@ -1,3 +1,10 @@\n+2015-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67221\n+\t* tree-ssa-sccvn.c (visit_phi): Keep all-TOP args TOP.\n+\t(sccvn_dom_walker::before_dom_children): Mark backedges of\n+\tnon-executable blocks as not executable.\n+\n 2015-08-17  David Sherwood  <david.sherwood@arm.com>\n \n \t* config/arm/arm.c (neon_element_bits): Replace call to"}, {"sha": "93aed719457fb29e799c910a0d47bb0476d0f5e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28251e2ce19fbbe5715ac33cf4a8c349d0c95faa", "patch": "@@ -1,3 +1,8 @@\n+2015-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67221\n+\t* gcc.dg/torture/pr67221.c: New testcase.\n+\n 2015-08-17 Mike Stump  <mikestump@comcast.net>\n            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n "}, {"sha": "d7d33c5826e872eba2e1afb0e4062589e92531bd", "filename": "gcc/testsuite/gcc.dg/torture/pr67221.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67221.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67221.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67221.c?ref=28251e2ce19fbbe5715ac33cf4a8c349d0c95faa", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+int a, b;\n+\n+int\n+fn1 (int p)\n+{\n+  return 0 == 0 ? p : 0;\n+}\n+\n+void\n+fn2 ()\n+{\n+  int c = 1, d[1] = { 1 };\n+lbl:\n+  for (;;)\n+    {\n+      int e;\n+      c ? 0 : 0 / c;\n+      c = 0;\n+      if (fn1 (d[0]))\n+\tbreak;\n+      for (e = 0; e < 1; e++)\n+\tfor (c = 1; b;)\n+\t  {\n+\t    if (a)\n+\t      break;\n+\t    goto lbl;\n+\t  }\n+    }\n+}"}, {"sha": "aea6acc04510d26cbfee5dabf1e7b6c9f7c81bb0", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28251e2ce19fbbe5715ac33cf4a8c349d0c95faa/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=28251e2ce19fbbe5715ac33cf4a8c349d0c95faa", "patch": "@@ -3271,6 +3271,11 @@ visit_phi (gimple phi)\n \t    break;\n \t  }\n       }\n+  \n+  /* If none of the edges was executable or all incoming values are\n+     undefined keep the value-number at VN_TOP.  */\n+  if (sameval == VN_TOP)\n+    return set_ssa_val_to (PHI_RESULT (phi), VN_TOP);\n \n   /* First see if it is equivalent to a phi node in this block.  We prefer\n      this as it allows IV elimination - see PRs 66502 and 67167.  */\n@@ -4463,7 +4468,7 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n       reachable |= (e->flags & EDGE_EXECUTABLE);\n \n   /* If the block is not reachable all outgoing edges are not\n-     executable.  */\n+     executable.  Neither are incoming edges with src dominated by us.  */\n   if (!reachable)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -4472,6 +4477,18 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n \n       FOR_EACH_EDGE (e, ei, bb->succs)\n \te->flags &= ~EDGE_EXECUTABLE;\n+\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\t{\n+\t  if (dominated_by_p (CDI_DOMINATORS, e->src, bb))\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\tfprintf (dump_file, \"Marking backedge from BB %d into \"\n+\t\t\t \"unreachable BB %d as not executable\\n\",\n+\t\t\t e->src->index, bb->index);\n+\t      e->flags &= ~EDGE_EXECUTABLE;\n+\t    }\n+\t}\n       return;\n     }\n "}]}