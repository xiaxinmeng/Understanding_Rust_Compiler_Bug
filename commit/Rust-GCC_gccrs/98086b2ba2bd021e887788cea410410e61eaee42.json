{"sha": "98086b2ba2bd021e887788cea410410e61eaee42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwODZiMmJhMmJkMDIxZTg4Nzc4OGNlYTQxMDQxMGU2MWVhZWU0Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-28T07:08:01Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-28T07:08:01Z"}, "message": "Makefile.in: Add opt-suggestions.o.\n\n.\n2018-06-28  Martin Liska  <mliska@suse.cz>\n\n\t* Makefile.in: Add opt-suggestions.o.\n\t* gcc-main.c: Include opt-suggestions.h.\n\t* gcc.c (driver::driver): Likewise.\n\t(driver::~driver): Remove m_option_suggestions.\n\t(driver::build_option_suggestions): Moved to option_proposer.\n\t(driver::suggest_option): Likewise.\n\t(driver::handle_unrecognized_options): Use option_proposer.\n\t* gcc.h (class driver): Add new memver m_option_proposer.\n\t* opt-suggestions.c: New file.\n\t* opt-suggestions.h: New file.\n2018-06-28  Martin Liska  <mliska@suse.cz>\n\n\t* cppspec.c: Include opt-suggestions.h.\n2018-06-28  Martin Liska  <mliska@suse.cz>\n\n\t* gfortranspec.c: Include opt-suggestions.h.\n2018-06-28  Martin Liska  <mliska@suse.cz>\n\n\t* jit-playback.c: Include opt-suggestions.h.\n\nFrom-SVN: r262209", "tree": {"sha": "75a8f11816cec8e2dfb5a56b30a3e687f5b27828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75a8f11816cec8e2dfb5a56b30a3e687f5b27828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98086b2ba2bd021e887788cea410410e61eaee42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98086b2ba2bd021e887788cea410410e61eaee42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98086b2ba2bd021e887788cea410410e61eaee42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98086b2ba2bd021e887788cea410410e61eaee42/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3de37a5d22c6f7add3457929d3572d2de678d6c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de37a5d22c6f7add3457929d3572d2de678d6c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de37a5d22c6f7add3457929d3572d2de678d6c2"}], "stats": {"total": 330, "additions": 215, "deletions": 115}, "files": [{"sha": "aee4f0fbf7a956a3900c7bd81782d443a96f461a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -1,3 +1,16 @@\n+2018-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Add opt-suggestions.o.\n+\t* gcc-main.c: Include opt-suggestions.h.\n+\t* gcc.c (driver::driver): Likewise.\n+\t(driver::~driver): Remove m_option_suggestions.\n+\t(driver::build_option_suggestions): Moved to option_proposer.\n+\t(driver::suggest_option): Likewise.\n+\t(driver::handle_unrecognized_options): Use option_proposer.\n+\t* gcc.h (class driver): Add new memver m_option_proposer.\n+\t* opt-suggestions.c: New file.\n+\t* opt-suggestions.h: New file.\n+\n 2018-06-28  Martin Liska  <mliska@suse.cz>\n \n \t* vec.h (class auto_string_vec): New (moved from auto_argvec)."}, {"sha": "66c8b6e4d03411fb9b65033d40dc132ea9e45d7d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -1615,7 +1615,7 @@ OBJS-libcommon = diagnostic.o diagnostic-color.o diagnostic-show-locus.o \\\n # compiler and containing target-dependent code.\n OBJS-libcommon-target = $(common_out_object_file) prefix.o params.o \\\n \topts.o opts-common.o options.o vec.o hooks.o common/common-targhooks.o \\\n-\thash-table.o file-find.o spellcheck.o selftest.o\n+\thash-table.o file-find.o spellcheck.o selftest.o opt-suggestions.o\n \n # This lists all host objects for the front ends.\n ALL_HOST_FRONTEND_OBJS = $(foreach v,$(CONFIG_LANGUAGES),$($(v)_OBJS))"}, {"sha": "9596eec56bc4467a853b77f37acafa28ae2c8400", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -1,3 +1,7 @@\n+2018-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* cppspec.c: Include opt-suggestions.h.\n+\n 2018-06-20  Chung-Lin Tang <cltang@codesourcery.com>\n \t    Thomas Schwinge <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "66540239f5356c41c31388ce7fdbca473f4b8554", "filename": "gcc/c-family/cppspec.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fc-family%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fc-family%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcppspec.c?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"opt-suggestions.h\"\n #include \"gcc.h\"\n #include \"opts.h\"\n "}, {"sha": "6e1af2e3053146b2db5c1e2a0b69580459cf9407", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -1,3 +1,7 @@\n+2018-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* gfortranspec.c: Include opt-suggestions.h.\n+\n 2018-06-25  Fritz Reese  <fritzoreese@gmail.com>\n \n \tPR fortran/82972"}, {"sha": "4ba3a8dba60eda166d4accfe4bd8b13a860cf943", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"opt-suggestions.h\"\n #include \"gcc.h\"\n #include \"opts.h\"\n "}, {"sha": "6a759bbcc1c74614c116aa2f6b9677b73f71f4fd", "filename": "gcc/gcc-main.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fgcc-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fgcc-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-main.c?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"obstack.h\"\n #include \"intl.h\"\n #include \"prefix.h\"\n+#include \"opt-suggestions.h\"\n #include \"gcc.h\"\n \n /* Implement the top-level \"main\" within the driver in terms of"}, {"sha": "dda1fd353988c28d851de265cb809bfd98ecbb7a", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 111, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -36,6 +36,7 @@ compilation is specified by a string called a \"spec\".  */\n #include \"obstack.h\"\n #include \"intl.h\"\n #include \"prefix.h\"\n+#include \"opt-suggestions.h\"\n #include \"gcc.h\"\n #include \"diagnostic.h\"\n #include \"flags.h\"\n@@ -7270,8 +7271,7 @@ compare_files (char *cmpfile[])\n \n driver::driver (bool can_finalize, bool debug) :\n   explicit_link_files (NULL),\n-  decoded_options (NULL),\n-  m_option_suggestions (NULL)\n+  decoded_options (NULL)\n {\n   env.init (can_finalize, debug);\n }\n@@ -7280,14 +7280,6 @@ driver::~driver ()\n {\n   XDELETEVEC (explicit_link_files);\n   XDELETEVEC (decoded_options);\n-  if (m_option_suggestions)\n-    {\n-      int i;\n-      char *str;\n-      FOR_EACH_VEC_ELT (*m_option_suggestions, i, str)\n-\tfree (str);\n-      delete m_option_suggestions;\n-    }\n }\n \n /* driver::main is implemented as a series of driver:: method calls.  */\n@@ -7776,106 +7768,6 @@ driver::maybe_putenv_OFFLOAD_TARGETS () const\n   offload_targets = NULL;\n }\n \n-/* Helper function for driver::suggest_option.  Populate\n-   m_option_suggestions with candidate strings for misspelled options.\n-   The strings will be freed by the driver's dtor.  */\n-\n-void\n-driver::build_option_suggestions (void)\n-{\n-  gcc_assert (m_option_suggestions == NULL);\n-  m_option_suggestions = new auto_vec <char *> ();\n-\n-  /* We build a vec of m_option_suggestions, using add_misspelling_candidates\n-     to add copies of strings, without a leading dash.  */\n-\n-  for (unsigned int i = 0; i < cl_options_count; i++)\n-    {\n-      const struct cl_option *option = &cl_options[i];\n-      const char *opt_text = option->opt_text;\n-      switch (i)\n-\t{\n-\tdefault:\n-\t  if (option->var_type == CLVC_ENUM)\n-\t    {\n-\t      const struct cl_enum *e = &cl_enums[option->var_enum];\n-\t      for (unsigned j = 0; e->values[j].arg != NULL; j++)\n-\t\t{\n-\t\t  char *with_arg = concat (opt_text, e->values[j].arg, NULL);\n-\t\t  add_misspelling_candidates (m_option_suggestions, option,\n-\t\t\t\t\t      with_arg);\n-\t\t  free (with_arg);\n-\t\t}\n-\t    }\n-\t  else\n-\t    add_misspelling_candidates (m_option_suggestions, option,\n-\t\t\t\t\topt_text);\n-\t  break;\n-\n-\tcase OPT_fsanitize_:\n-\tcase OPT_fsanitize_recover_:\n-\t  /* -fsanitize= and -fsanitize-recover= can take\n-\t     a comma-separated list of arguments.  Given that combinations\n-\t     are supported, we can't add all potential candidates to the\n-\t     vec, but if we at least add them individually without commas,\n-\t     we should do a better job e.g. correcting\n-\t       \"-sanitize=address\"\n-\t     to\n-\t       \"-fsanitize=address\"\n-\t     rather than to \"-Wframe-address\" (PR driver/69265).  */\n-\t  {\n-\t    for (int j = 0; sanitizer_opts[j].name != NULL; ++j)\n-\t      {\n-\t\tstruct cl_option optb;\n-\t\t/* -fsanitize=all is not valid, only -fno-sanitize=all.\n-\t\t   So don't register the positive misspelling candidates\n-\t\t   for it.  */\n-\t\tif (sanitizer_opts[j].flag == ~0U && i == OPT_fsanitize_)\n-\t\t  {\n-\t\t    optb = *option;\n-\t\t    optb.opt_text = opt_text = \"-fno-sanitize=\";\n-\t\t    optb.cl_reject_negative = true;\n-\t\t    option = &optb;\n-\t\t  }\n-\t\t/* Get one arg at a time e.g. \"-fsanitize=address\".  */\n-\t\tchar *with_arg = concat (opt_text,\n-\t\t\t\t\t sanitizer_opts[j].name,\n-\t\t\t\t\t NULL);\n-\t\t/* Add with_arg and all of its variant spellings e.g.\n-\t\t   \"-fno-sanitize=address\" to candidates (albeit without\n-\t\t   leading dashes).  */\n-\t\tadd_misspelling_candidates (m_option_suggestions, option,\n-\t\t\t\t\t    with_arg);\n-\t\tfree (with_arg);\n-\t      }\n-\t  }\n-\t  break;\n-\t}\n-    }\n-}\n-\n-/* Helper function for driver::handle_unrecognized_options.\n-\n-   Given an unrecognized option BAD_OPT (without the leading dash),\n-   locate the closest reasonable matching option (again, without the\n-   leading dash), or NULL.\n-\n-   The returned string is owned by the driver instance.  */\n-\n-const char *\n-driver::suggest_option (const char *bad_opt)\n-{\n-  /* Lazily populate m_option_suggestions.  */\n-  if (!m_option_suggestions)\n-    build_option_suggestions ();\n-  gcc_assert (m_option_suggestions);\n-\n-  /* \"m_option_suggestions\" is now populated.  Use it.  */\n-  return find_closest_string\n-    (bad_opt,\n-     (auto_vec <const char *> *) m_option_suggestions);\n-}\n-\n /* Reject switches that no pass was interested in.  */\n \n void\n@@ -7884,7 +7776,7 @@ driver::handle_unrecognized_options ()\n   for (size_t i = 0; (int) i < n_switches; i++)\n     if (! switches[i].validated)\n       {\n-\tconst char *hint = suggest_option (switches[i].part1);\n+\tconst char *hint = m_option_proposer.suggest_option (switches[i].part1);\n \tif (hint)\n \t  error (\"unrecognized command line option %<-%s%>;\"\n \t\t \" did you mean %<-%s%>?\","}, {"sha": "a760618339301e09d6dd68fb52cb9a987ef0564b", "filename": "gcc/gcc.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -45,8 +45,6 @@ class driver\n   void putenv_COLLECT_GCC (const char *argv0) const;\n   void maybe_putenv_COLLECT_LTO_WRAPPER () const;\n   void maybe_putenv_OFFLOAD_TARGETS () const;\n-  void build_option_suggestions (void);\n-  const char *suggest_option (const char *bad_opt);\n   void handle_unrecognized_options ();\n   int maybe_print_and_exit () const;\n   bool prepare_infiles ();\n@@ -59,7 +57,7 @@ class driver\n   char *explicit_link_files;\n   struct cl_decoded_option *decoded_options;\n   unsigned int decoded_options_count;\n-  auto_vec <char *> *m_option_suggestions;\n+  option_proposer m_option_proposer;\n };\n \n /* The mapping of a spec function name to the C function that"}, {"sha": "22679671a0152090014cafd0e7f1543fbdac75aa", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -1,3 +1,7 @@\n+2018-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* jit-playback.c: Include opt-suggestions.h.\n+\n 2018-06-28  Martin Liska  <mliska@suse.cz>\n \n \t* jit-playback.c (class auto_argvec): Moved to vec.h."}, {"sha": "f11642bf4c639864469fa8e4e23b0e0b40b6bcdf", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"context.h\"\n #include \"fold-const.h\"\n+#include \"opt-suggestions.h\"\n #include \"gcc.h\"\n #include \"diagnostic.h\"\n "}, {"sha": "90ab80e627d768358f4152f5630a710b4f3073a7", "filename": "gcc/opt-suggestions.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fopt-suggestions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fopt-suggestions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-suggestions.c?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -0,0 +1,122 @@\n+/* Provide option suggestion for --complete option and a misspelled\n+   used by a user.\n+   Copyright (C) 2016-2018 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"opts.h\"\n+#include \"params.h\"\n+#include \"spellcheck.h\"\n+#include \"opt-suggestions.h\"\n+#include \"selftest.h\"\n+\n+option_proposer::~option_proposer ()\n+{\n+  delete m_option_suggestions;\n+}\n+\n+const char *\n+option_proposer::suggest_option (const char *bad_opt)\n+{\n+  /* Lazily populate m_option_suggestions.  */\n+  if (!m_option_suggestions)\n+    build_option_suggestions ();\n+  gcc_assert (m_option_suggestions);\n+\n+  /* \"m_option_suggestions\" is now populated.  Use it.  */\n+  return find_closest_string\n+    (bad_opt,\n+     (auto_vec <const char *> *) m_option_suggestions);\n+}\n+\n+void\n+option_proposer::build_option_suggestions (void)\n+{\n+  gcc_assert (m_option_suggestions == NULL);\n+  m_option_suggestions = new auto_string_vec ();\n+\n+  /* We build a vec of m_option_suggestions, using add_misspelling_candidates\n+     to add copies of strings, without a leading dash.  */\n+\n+  for (unsigned int i = 0; i < cl_options_count; i++)\n+    {\n+      const struct cl_option *option = &cl_options[i];\n+      const char *opt_text = option->opt_text;\n+      switch (i)\n+\t{\n+\tdefault:\n+\t  if (option->var_type == CLVC_ENUM)\n+\t    {\n+\t      const struct cl_enum *e = &cl_enums[option->var_enum];\n+\t      for (unsigned j = 0; e->values[j].arg != NULL; j++)\n+\t\t{\n+\t\t  char *with_arg = concat (opt_text, e->values[j].arg, NULL);\n+\t\t  add_misspelling_candidates (m_option_suggestions, option,\n+\t\t\t\t\t      with_arg);\n+\t\t  free (with_arg);\n+\t\t}\n+\t    }\n+\t  else\n+\t    add_misspelling_candidates (m_option_suggestions, option,\n+\t\t\t\t\topt_text);\n+\t  break;\n+\n+\tcase OPT_fsanitize_:\n+\tcase OPT_fsanitize_recover_:\n+\t  /* -fsanitize= and -fsanitize-recover= can take\n+\t     a comma-separated list of arguments.  Given that combinations\n+\t     are supported, we can't add all potential candidates to the\n+\t     vec, but if we at least add them individually without commas,\n+\t     we should do a better job e.g. correcting\n+\t       \"-sanitize=address\"\n+\t     to\n+\t       \"-fsanitize=address\"\n+\t     rather than to \"-Wframe-address\" (PR driver/69265).  */\n+\t  {\n+\t    for (int j = 0; sanitizer_opts[j].name != NULL; ++j)\n+\t      {\n+\t\tstruct cl_option optb;\n+\t\t/* -fsanitize=all is not valid, only -fno-sanitize=all.\n+\t\t   So don't register the positive misspelling candidates\n+\t\t   for it.  */\n+\t\tif (sanitizer_opts[j].flag == ~0U && i == OPT_fsanitize_)\n+\t\t  {\n+\t\t    optb = *option;\n+\t\t    optb.opt_text = opt_text = \"-fno-sanitize=\";\n+\t\t    optb.cl_reject_negative = true;\n+\t\t    option = &optb;\n+\t\t  }\n+\t\t/* Get one arg at a time e.g. \"-fsanitize=address\".  */\n+\t\tchar *with_arg = concat (opt_text,\n+\t\t\t\t\t sanitizer_opts[j].name,\n+\t\t\t\t\t NULL);\n+\t\t/* Add with_arg and all of its variant spellings e.g.\n+\t\t   \"-fno-sanitize=address\" to candidates (albeit without\n+\t\t   leading dashes).  */\n+\t\tadd_misspelling_candidates (m_option_suggestions, option,\n+\t\t\t\t\t    with_arg);\n+\t\tfree (with_arg);\n+\t      }\n+\t  }\n+\t  break;\n+\t}\n+    }\n+}"}, {"sha": "ccd4e45a474fffe81bf69d87d7582809861164dc", "filename": "gcc/opt-suggestions.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fopt-suggestions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98086b2ba2bd021e887788cea410410e61eaee42/gcc%2Fopt-suggestions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-suggestions.h?ref=98086b2ba2bd021e887788cea410410e61eaee42", "patch": "@@ -0,0 +1,59 @@\n+/* Provide suggestions to handle misspelled options, and implement the\n+   --complete option for auto-completing options from a prefix.\n+   Copyright (C) 2016-2018 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_OPT_PROPOSER_H\n+#define GCC_OPT_PROPOSER_H\n+\n+/* Option proposer is class used by driver in order to provide hints\n+   for wrong options provided.  And it's used by --complete option that's\n+   intended to be invoked by BASH in order to provide better option\n+   completion support.  */\n+\n+class option_proposer\n+{\n+public:\n+  /* Default constructor.  */\n+  option_proposer (): m_option_suggestions (NULL)\n+  {}\n+\n+  /* Default destructor.  */\n+  ~option_proposer ();\n+\n+  /* Helper function for driver::handle_unrecognized_options.\n+\n+     Given an unrecognized option BAD_OPT (without the leading dash),\n+     locate the closest reasonable matching option (again, without the\n+     leading dash), or NULL.\n+\n+     The returned string is owned by the option_proposer instance.  */\n+  const char *suggest_option (const char *bad_opt);\n+\n+private:\n+  /* Helper function for option_proposer::suggest_option.  Populate\n+     m_option_suggestions with candidate strings for misspelled options.\n+     The strings will be freed by the option_proposer's dtor.  */\n+  void build_option_suggestions ();\n+\n+private:\n+  /* Cache with all suggestions.  */\n+  auto_string_vec *m_option_suggestions;\n+};\n+\n+#endif  /* GCC_OPT_PROPOSER_H */"}]}