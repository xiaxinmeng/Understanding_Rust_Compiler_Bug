{"sha": "0851c6e3747e3b78dac903d3b5ce967af6cd13d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1MWM2ZTM3NDdlM2I3OGRhYzkwM2QzYjVjZTk2N2FmNmNkMTNkMg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-09T14:16:42Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-09T14:16:42Z"}, "message": "mep-protos.h (mep_function_arg): Delete.\n\n\t* config/mep/mep-protos.h (mep_function_arg): Delete.\n\t(mep_function_arg_advance): Delete.\n\t* config/mep/mep.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/mep/mep.c (mep_function_arg): Make static.  Take a\n\tconst_tree and a bool.\n\t(mep_function_arg_advance): Likewise.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165224", "tree": {"sha": "925454b9b4d398edbea9ceeeb3c5887f7d5be3d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/925454b9b4d398edbea9ceeeb3c5887f7d5be3d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0851c6e3747e3b78dac903d3b5ce967af6cd13d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0851c6e3747e3b78dac903d3b5ce967af6cd13d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0851c6e3747e3b78dac903d3b5ce967af6cd13d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/comments", "author": null, "committer": null, "parents": [{"sha": "e5160e93fde5752e5a7fb5c18fa5bf75dcbad3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5160e93fde5752e5a7fb5c18fa5bf75dcbad3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5160e93fde5752e5a7fb5c18fa5bf75dcbad3e8"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "ad9774b3772ea60f97829234d683b7e38c0e1f98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0851c6e3747e3b78dac903d3b5ce967af6cd13d2", "patch": "@@ -1,3 +1,13 @@\n+2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/mep/mep-protos.h (mep_function_arg): Delete.\n+\t(mep_function_arg_advance): Delete.\n+\t* config/mep/mep.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/mep/mep.c (mep_function_arg): Make static.  Take a\n+\tconst_tree and a bool.\n+\t(mep_function_arg_advance): Likewise.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45945"}, {"sha": "c8a0b9b35234f0951e4f4871172f4ed80d42c09f", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=0851c6e3747e3b78dac903d3b5ce967af6cd13d2", "patch": "@@ -75,8 +75,6 @@ extern void mep_print_operand_address (FILE *, rtx);\n extern void mep_print_operand (FILE *, rtx, int);\n extern void mep_final_prescan_insn (rtx, rtx *, int);\n extern void mep_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n-extern rtx mep_function_arg (CUMULATIVE_ARGS, enum machine_mode, tree, int);\n-extern void mep_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern bool mep_return_in_memory (const_tree, const_tree);\n extern rtx mep_function_value (tree, tree);\n extern rtx mep_libcall_value (enum machine_mode);"}, {"sha": "daa56c8f278b64db1930f85fc86d2e950d27fb1a", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=0851c6e3747e3b78dac903d3b5ce967af6cd13d2", "patch": "@@ -216,6 +216,10 @@ static void mep_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\ttree, int *, int);\n static bool mep_pass_by_reference (CUMULATIVE_ARGS * cum, enum machine_mode,\n \t\t\t\t   const_tree, bool);\n+static rtx mep_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t     const_tree, bool);\n+static void mep_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t      const_tree, bool);\n static bool mep_vector_mode_supported_p (enum machine_mode);\n static bool mep_handle_option (size_t, const char *, int);\n static rtx  mep_allocate_initial_value (rtx);\n@@ -3717,23 +3721,29 @@ mep_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n     pcum->vliw = 0;\n }\n \n-rtx\n-mep_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n-\t\t  tree type ATTRIBUTE_UNUSED, int named ATTRIBUTE_UNUSED)\n+/* The ABI is thus: Arguments are in $1, $2, $3, $4, stack.  Arguments\n+   larger than 4 bytes are passed indirectly.  Return value in 0,\n+   unless bigger than 4 bytes, then the caller passes a pointer as the\n+   first arg.  For varargs, we copy $1..$4 to the stack.  */\n+\n+static rtx\n+mep_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t  const_tree type ATTRIBUTE_UNUSED,\n+\t\t  bool named ATTRIBUTE_UNUSED)\n {\n   /* VOIDmode is a signal for the backend to pass data to the call\n      expander via the second operand to the call pattern.  We use\n      this to determine whether to use \"jsr\" or \"jsrv\".  */\n   if (mode == VOIDmode)\n-    return GEN_INT (cum.vliw);\n+    return GEN_INT (cum->vliw);\n \n   /* If we havn't run out of argument registers, return the next.  */\n-  if (cum.nregs < 4)\n+  if (cum->nregs < 4)\n     {\n       if (type && TARGET_IVC2 && VECTOR_TYPE_P (type))\n-\treturn gen_rtx_REG (mode, cum.nregs + 49);\n+\treturn gen_rtx_REG (mode, cum->nregs + 49);\n       else\n-\treturn gen_rtx_REG (mode, cum.nregs + 1);\n+\treturn gen_rtx_REG (mode, cum->nregs + 1);\n     }\n \n   /* Otherwise the argument goes on the stack.  */\n@@ -3762,10 +3772,11 @@ mep_pass_by_reference (CUMULATIVE_ARGS * cum ATTRIBUTE_UNUSED,\n   return true;\n }\n \n-void\n-mep_arg_advance (CUMULATIVE_ARGS *pcum,\n-\t\t enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t tree type ATTRIBUTE_UNUSED, int named ATTRIBUTE_UNUSED)\n+static void\n+mep_function_arg_advance (CUMULATIVE_ARGS *pcum,\n+\t\t\t  enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t  const_tree type ATTRIBUTE_UNUSED,\n+\t\t\t  bool named ATTRIBUTE_UNUSED)\n {\n   pcum->nregs += 1;\n }\n@@ -7405,6 +7416,10 @@ mep_asm_init_sections (void)\n #define TARGET_SETUP_INCOMING_VARARGS\tmep_setup_incoming_varargs\n #undef  TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE        mep_pass_by_reference\n+#undef  TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG             mep_function_arg\n+#undef  TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE     mep_function_arg_advance\n #undef  TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P\tmep_vector_mode_supported_p\n #undef  TARGET_HANDLE_OPTION"}, {"sha": "07f0c856af25cc0088fa4a7eec3e648e186b9203", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0851c6e3747e3b78dac903d3b5ce967af6cd13d2/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=0851c6e3747e3b78dac903d3b5ce967af6cd13d2", "patch": "@@ -499,14 +499,6 @@ extern unsigned int mep_selected_isa;\n \n \f\n \n-/* The ABI is thus: Arguments are in $1, $2, $3, $4, stack.  Arguments\n-   larger than 4 bytes are passed indirectly.  Return value in 0,\n-   unless bigger than 4 bytes, then the caller passes a pointer as the\n-   first arg.  For varargs, we copy $1..$4 to the stack.  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-\tmep_function_arg (CUM, MODE, TYPE, NAMED)\n-\n #define FUNCTION_ARG_CALLEE_COPIES(CUM, MODE, TYPE, NAMED) 1\n \n typedef struct\n@@ -518,9 +510,6 @@ typedef struct\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n \tmep_init_cumulative_args (& (CUM), FNTYPE, LIBNAME, FNDECL)\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\\\n-\tmep_arg_advance (& (CUM), MODE, TYPE, NAMED)\n-\n #define FUNCTION_ARG_REGNO_P(REGNO) \\\n \t(((REGNO) >= 1 && (REGNO) <= 4) \\\n \t || ((REGNO) >= FIRST_CR_REGNO + 1 \\"}]}