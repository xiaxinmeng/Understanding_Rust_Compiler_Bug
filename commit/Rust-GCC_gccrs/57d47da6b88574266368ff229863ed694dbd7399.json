{"sha": "57d47da6b88574266368ff229863ed694dbd7399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkNDdkYTZiODg1NzQyNjYzNjhmZjIyOTg2M2VkNjk0ZGJkNzM5OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-02T18:29:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-02T18:29:03Z"}, "message": "revert: sse.md (\"sse4_1_blendvpd\"): Require \"z\" class XMM register for operand[3].\n\nRevert:\n\n 2007-06-02  Uros Bizjak  <ubizjak@gmail.com>\n \n       * config/i386/sse.md (\"sse4_1_blendvpd\"): Require \"z\" class XMM\n       register for operand[3].  Adjust asm template.\n       (\"sse4_1_blendvpd\"): Ditto.\n       (\"sse4_1_pblendvb\"): Ditto.\n        * config/i386/i386.c (ix86_expand_sse_4_operands_builtin): Do not\n       force operands[3] into xmm0 register for variable blend instructions.\n\nFrom-SVN: r125285", "tree": {"sha": "f1ac05837ae56128564553cfa750e088fd3b7119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1ac05837ae56128564553cfa750e088fd3b7119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d47da6b88574266368ff229863ed694dbd7399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d47da6b88574266368ff229863ed694dbd7399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d47da6b88574266368ff229863ed694dbd7399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d47da6b88574266368ff229863ed694dbd7399/comments", "author": null, "committer": null, "parents": [{"sha": "8cdf2fb9d64bd37bc90c3c1980d82f5e702dc7bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdf2fb9d64bd37bc90c3c1980d82f5e702dc7bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cdf2fb9d64bd37bc90c3c1980d82f5e702dc7bc"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "71bbf0d3d93a398c5707b70dc06cae70c235504a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d47da6b88574266368ff229863ed694dbd7399/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d47da6b88574266368ff229863ed694dbd7399/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57d47da6b88574266368ff229863ed694dbd7399", "patch": "@@ -1,12 +1,7 @@\n 2007-06-02  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386/sse.md (\"sse4_1_blendvpd\"): Require \"z\" class XMM\n-\tregister for operand[3].  Adjust asm template.\n-\t(\"sse4_1_blendvpd\"): Ditto.\n-\t(\"sse4_1_pblendvb\"): Ditto.\n \t* config/i386/i386.c (ix86_expand_sse_4_operands_builtin): Call\n-\tsafe_vector_operand() if input operand is VECTOR_MODE_P operand. Do not\n-\tforce operands[3] into xmm0 register for variable blend instructions.\n+\tsafe_vector_operand() if input operand is VECTOR_MODE_P operand.\n \t(ix86_expand_sse_pcmpestr): Do not check operands for\n \t\"register_operand\", when insn operand predicate is \"register_operand\".\n \t(ix86_expand_sse_pcmpistr): Ditto."}, {"sha": "a150c05dac8b65564fbc74e6450b9130b57da4ea", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d47da6b88574266368ff229863ed694dbd7399/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d47da6b88574266368ff229863ed694dbd7399/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=57d47da6b88574266368ff229863ed694dbd7399", "patch": "@@ -18280,14 +18280,13 @@ ix86_expand_sse_4_operands_builtin (enum insn_code icode, tree exp,\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode2 = insn_data[icode].operand[2].mode;\n-  enum machine_mode mode3 = insn_data[icode].operand[3].mode;\n+  enum machine_mode mode3;\n+  rtx xmm0;\n \n   if (VECTOR_MODE_P (mode1))\n     op0 = safe_vector_operand (op0, mode1);\n   if (VECTOR_MODE_P (mode2))\n     op1 = safe_vector_operand (op1, mode2);\n-  if (VECTOR_MODE_P (mode3))\n-    op2 = safe_vector_operand (op2, mode3);\n \n   if (optimize\n       || target == 0\n@@ -18301,24 +18300,42 @@ ix86_expand_sse_4_operands_builtin (enum insn_code icode, tree exp,\n       || !(*insn_data[icode].operand[2].predicate) (op1, mode2))\n     op1 = copy_to_mode_reg (mode2, op1);\n \n-  if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n-    switch (icode)\n-      {\n-      case CODE_FOR_sse4_1_blendvpd:\n-      case CODE_FOR_sse4_1_blendvps:\n-      case CODE_FOR_sse4_1_pblendvb:\n+  switch (icode)\n+    {\n+    case CODE_FOR_sse4_1_blendvpd:\n+    case CODE_FOR_sse4_1_blendvps:\n+    case CODE_FOR_sse4_1_pblendvb:\n+      mode3 = tmode;\n+      op2 = safe_vector_operand (op2, mode3);\n+\n+      if (!register_operand (op2, mode3))\n \top2 = copy_to_mode_reg (mode3, op2);\n-\tbreak;\n \n-      case CODE_FOR_sse4_1_roundsd:\n-      case CODE_FOR_sse4_1_roundss:\n-\terror (\"the third argument must be a 4-bit immediate\");\n-\treturn const0_rtx;\n+      /* ??? The third argument of variable blends must be xmm0.  */\n+      xmm0 = gen_rtx_REG (mode3, XMM0_REG);\n \n-      default:\n-\terror (\"the third argument must be an 8-bit immediate\");\n-\treturn const0_rtx;\n-      }\n+      emit_move_insn (xmm0, op2);\n+      op2 = xmm0;\n+      break;\n+\n+    default:\n+      mode3 = insn_data[icode].operand[3].mode;\n+      if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n+\t{\n+\t  switch (icode)\n+\t    {\n+\t    case CODE_FOR_sse4_1_roundsd:\n+\t    case CODE_FOR_sse4_1_roundss:\n+\t      error (\"the third argument must be a 4-bit immediate\");\n+\t      break;\n+\t    default:\n+\t      error (\"the third argument must be an 8-bit immediate\");\n+\t      break;\n+\t    }\n+\t  return const0_rtx;\n+\t}\n+      break;\n+    }\n \n   pat = GEN_FCN (icode) (target, op0, op1, op2);\n   if (! pat)"}, {"sha": "ad8ad0032f5667d5a8b5cb178e32c7e1ec026062", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d47da6b88574266368ff229863ed694dbd7399/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d47da6b88574266368ff229863ed694dbd7399/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=57d47da6b88574266368ff229863ed694dbd7399", "patch": "@@ -204,6 +204,7 @@\n    (FLAGS_REG\t\t\t17)\n    (FPSR_REG\t\t\t18)\n    (FPCR_REG\t\t\t19)\n+   (XMM0_REG\t\t\t21)\n    (R10_REG\t\t\t39)\n    (R11_REG\t\t\t40)\n   ])"}, {"sha": "cd8371771ab4caf277dcd7cedd603b812b0833cc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d47da6b88574266368ff229863ed694dbd7399/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d47da6b88574266368ff229863ed694dbd7399/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=57d47da6b88574266368ff229863ed694dbd7399", "patch": "@@ -5844,10 +5844,10 @@\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\"  \"0\")\n \t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")\n-\t\t      (match_operand:V2DF 3 \"register_operand\" \"z\")]\n+\t\t      (reg:V2DF XMM0_REG)]\n \t\t     UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"blendvpd\\t{%3, %2, %0|%0, %2, %3}\"\n+  \"blendvpd\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2DF\")])\n@@ -5856,10 +5856,10 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n \t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")\n-\t\t      (match_operand:V4SF 3 \"register_operand\" \"z\")]\n+\t\t      (reg:V4SF XMM0_REG)]\n \t\t     UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"blendvps\\t{%3, %2, %0|%0, %2, %3}\"\n+  \"blendvps\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n@@ -5927,10 +5927,10 @@\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\"  \"0\")\n \t\t       (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\" \"z\")]\n+\t\t       (reg:V16QI XMM0_REG)]\n \t\t      UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"pblendvb\\t{%3, %2, %0|%0, %2, %3}\"\n+  \"pblendvb\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])"}]}