{"sha": "e95ef1878f06e85f88073db03b7677f3c2c640f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1ZWYxODc4ZjA2ZTg1Zjg4MDczZGIwM2I3Njc3ZjNjMmM2NDBmOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T09:25:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T09:25:19Z"}, "message": "ns32k.c (ns32k_encode_section_info): Remove.\n\n        * config/ns32k/ns32k.c (ns32k_encode_section_info): Remove.\n        (global_symbolic_reference_mentioned_p): Use SYMBOL_REF_LOCAL_P.\n        (print_operand_address): Likewise.\n\n        * config/ns32k/ns32k.h (CANNOT_CHANGE_MODE_CLASS): Add CLASS argument.\n        * config/ns32k/ns32k.c (expand_block_move): Don't check\n        flag_unroll_loops.\n\nFrom-SVN: r65733", "tree": {"sha": "4c63ade27e18583b3f79205a51f27b1d6e14a0b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c63ade27e18583b3f79205a51f27b1d6e14a0b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e95ef1878f06e85f88073db03b7677f3c2c640f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95ef1878f06e85f88073db03b7677f3c2c640f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95ef1878f06e85f88073db03b7677f3c2c640f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95ef1878f06e85f88073db03b7677f3c2c640f8/comments", "author": null, "committer": null, "parents": [{"sha": "6cd4a76401d216061b1b3d6cd30d7f924b5ee321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd4a76401d216061b1b3d6cd30d7f924b5ee321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd4a76401d216061b1b3d6cd30d7f924b5ee321"}], "stats": {"total": 50, "additions": 17, "deletions": 33}, "files": [{"sha": "8b4102881b89a4992b1fe031e7267df6e82d2a2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95ef1878f06e85f88073db03b7677f3c2c640f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95ef1878f06e85f88073db03b7677f3c2c640f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e95ef1878f06e85f88073db03b7677f3c2c640f8", "patch": "@@ -1,3 +1,13 @@\n+2003-04-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ns32k/ns32k.c (ns32k_encode_section_info): Remove.\n+\t(global_symbolic_reference_mentioned_p): Use SYMBOL_REF_LOCAL_P.\n+\t(print_operand_address): Likewise.\n+\n+\t* config/ns32k/ns32k.h (CANNOT_CHANGE_MODE_CLASS): Add CLASS argument.\n+\t* config/ns32k/ns32k.c (expand_block_move): Don't check\n+\tflag_unroll_loops.\n+\n 2003-04-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/mcore/mcore.c (mcore_encode_section_info): Don't set"}, {"sha": "153a6a32a2cddf903bf8f3359d4873149d318497", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95ef1878f06e85f88073db03b7677f3c2c640f8/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95ef1878f06e85f88073db03b7677f3c2c640f8/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=e95ef1878f06e85f88073db03b7677f3c2c640f8", "patch": "@@ -71,7 +71,6 @@ static tree ns32k_handle_fntype_attribute PARAMS ((tree *, tree, tree, int, bool\n const struct attribute_spec ns32k_attribute_table[];\n static void ns32k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void ns32k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void ns32k_encode_section_info PARAMS ((tree, int));\n static bool ns32k_rtx_costs PARAMS ((rtx, int, int, int *));\n static int ns32k_address_cost PARAMS ((rtx));\n \f\n@@ -91,8 +90,6 @@ static int ns32k_address_cost PARAMS ((rtx));\n #define TARGET_ASM_FUNCTION_PROLOGUE ns32k_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ns32k_output_function_epilogue\n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO ns32k_encode_section_info\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ns32k_rtx_costs\n@@ -887,7 +884,7 @@ expand_block_move (operands)\n \n       if (words)\n \t{\n-\t  if (words < 3 || flag_unroll_loops)\n+\t  if (words < 3)\n \t    {\n \t      int offset = 0;\n \n@@ -1003,7 +1000,7 @@ global_symbolic_reference_mentioned_p (op, f)\n \n   if (GET_CODE (op) == SYMBOL_REF)\n     {\n-      if (! SYMBOL_REF_FLAG (op))\n+      if (! SYMBOL_REF_LOCAL_P (op))\n \treturn 1;\n       else\n         return 0;\n@@ -1312,8 +1309,7 @@ print_operand_address (file, addr)\n \t  indexexp = tmp;\n \t  break;\n \tcase SYMBOL_REF:\n-\t  if (flag_pic && ! CONSTANT_POOL_ADDRESS_P (tmp)\n-\t      && ! SYMBOL_REF_FLAG (tmp))\n+\t  if (flag_pic && ! SYMBOL_REF_LOCAL_P (tmp))\n \t    {\n \t      if (base)\n \t\t{\n@@ -1345,12 +1341,7 @@ print_operand_address (file, addr)\n \t\t  if (GET_CODE (off) != CONST_INT)\n \t\t    abort ();\n \n-\t\t  if (CONSTANT_POOL_ADDRESS_P (sym)\n-\t\t      || SYMBOL_REF_FLAG (sym))\n-\t\t    {\n-\t\t      SYMBOL_REF_FLAG (tmp) = 1;\n-\t\t    }\n-\t\t  else\n+\t\t  if (! SYMBOL_REF_LOCAL_P (sym))\n \t\t    {\n \t\t      if (base)\n \t\t\t{\n@@ -1601,21 +1592,3 @@ output_move_dconst (n, s)\n   strcat (r, s);\n   return r;\n }\n-\n-/* If using PIC, mark a SYMBOL_REF for a non-global symbol or a code\n-   symbol. These symbols are referenced via pc and not via sb. */\n-\n-static void\n-ns32k_encode_section_info (decl, first)\n-     tree decl;\n-     int first ATTRIBUTE_UNUSED;\n-{\n-  if (flag_pic)\n-    {\n-      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-\t\t ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n-      SYMBOL_REF_FLAG (XEXP (rtl, 0))\n-\t= (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-\t   || ! TREE_PUBLIC (decl));\n-    }\n-}"}, {"sha": "81343c4928436fa81074bea865e82af4fc2dd5cc", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95ef1878f06e85f88073db03b7677f3c2c640f8/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95ef1878f06e85f88073db03b7677f3c2c640f8/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=e95ef1878f06e85f88073db03b7677f3c2c640f8", "patch": "@@ -474,8 +474,9 @@ enum reg_class\n /* LONG_REGS are registers which can only hold double precision floats\n  * and can only be accessable by long float instructions.\n  */\n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO) \\\n-  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO) ? LONG_REGS : NO_REGS)\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\\\n+   ? reg_classes_intersect_p (LONG_REGS, CLASS) : 0)\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing"}]}