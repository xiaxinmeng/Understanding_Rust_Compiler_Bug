{"sha": "f5b65fab88022c4dcfaa9020ecbc7719e92ca53a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjViNjVmYWI4ODAyMmM0ZGNmYWE5MDIwZWNiYzc3MTllOTJjYTUzYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-05-05T20:54:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:34:58Z"}, "message": "[Ada] Fix bad interaction between Unchecked_Conversion and limited type\n\ngcc/ada/\n\n\t* exp_ch6.adb (Add_Simple_Call_By_Copy_Code): Rename parameter\n\tfrom Bit_Packed_Array to Force.\n\t(Expand_Actuals): Do not apply BIP processing if the subprogram\n\tis intrinsic.  Adjust calls to Add_Simple_Call_By_Copy_Code and\n\tadd one for In parameters whose actual is a CPP constructor call.", "tree": {"sha": "4fccfbc92451b10d44f10c52edffdb130c005ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fccfbc92451b10d44f10c52edffdb130c005ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5b65fab88022c4dcfaa9020ecbc7719e92ca53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b65fab88022c4dcfaa9020ecbc7719e92ca53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b65fab88022c4dcfaa9020ecbc7719e92ca53a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b65fab88022c4dcfaa9020ecbc7719e92ca53a/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c54077e4538c8745abecb0c440a26573e708e100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54077e4538c8745abecb0c440a26573e708e100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54077e4538c8745abecb0c440a26573e708e100"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "92be80287a697465c195284f9451bfb46e15273b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b65fab88022c4dcfaa9020ecbc7719e92ca53a/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b65fab88022c4dcfaa9020ecbc7719e92ca53a/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f5b65fab88022c4dcfaa9020ecbc7719e92ca53a", "patch": "@@ -1469,11 +1469,16 @@ package body Exp_Ch6 is\n       --  also takes care of any constraint checks required for the type\n       --  conversion case (on both the way in and the way out).\n \n-      procedure Add_Simple_Call_By_Copy_Code (Bit_Packed_Array : Boolean);\n+      procedure Add_Simple_Call_By_Copy_Code (Force : Boolean);\n       --  This is similar to the above, but is used in cases where we know\n       --  that all that is needed is to simply create a temporary and copy\n-      --  the value in and out of the temporary. If Bit_Packed_Array is True,\n-      --  the procedure is called for a bit-packed array actual.\n+      --  the value in and out of the temporary. If Force is True, then the\n+      --  procedure may disregard legality considerations.\n+\n+      --  ??? We need to do the copy for a bit-packed array because this is\n+      --  where the rewriting into a mask-and-shift sequence is done. But of\n+      --  course this may break the program if it expects bits to be really\n+      --  passed by reference. That's what we have done historically though.\n \n       procedure Add_Validation_Call_By_Copy_Code (Act : Node_Id);\n       --  Perform copy-back for actual parameter Act which denotes a validation\n@@ -1851,7 +1856,7 @@ package body Exp_Ch6 is\n       -- Add_Simple_Call_By_Copy_Code --\n       ----------------------------------\n \n-      procedure Add_Simple_Call_By_Copy_Code (Bit_Packed_Array : Boolean) is\n+      procedure Add_Simple_Call_By_Copy_Code (Force : Boolean) is\n          Decl   : Node_Id;\n          F_Typ  : Entity_Id := Etype (Formal);\n          Incod  : Node_Id;\n@@ -1862,12 +1867,9 @@ package body Exp_Ch6 is\n          Temp   : Entity_Id;\n \n       begin\n-         --  ??? We need to do the copy for a bit-packed array because this is\n-         --  where the rewriting into a mask-and-shift sequence is done. But of\n-         --  course this may break the program if it expects bits to be really\n-         --  passed by reference. That's what we have done historically though.\n+         --  Unless forced not to, check the legality of the copy operation\n \n-         if not Bit_Packed_Array and then not Is_Legal_Copy then\n+         if not Force and then not Is_Legal_Copy then\n             return;\n          end if;\n \n@@ -2272,7 +2274,13 @@ package body Exp_Ch6 is\n             --  functions that are treated as build-in-place to include other\n             --  composite result types.\n \n-            if Is_Build_In_Place_Function_Call (Actual) then\n+            --  But do not do it here for intrinsic subprograms since this will\n+            --  be done properly after the subprogram is expanded.\n+\n+            if Is_Intrinsic_Subprogram (Subp) then\n+               null;\n+\n+            elsif Is_Build_In_Place_Function_Call (Actual) then\n                Build_Activation_Chain_Entity (N);\n                Build_Master_Entity (Etype (Actual));\n                Make_Build_In_Place_Call_In_Anonymous_Context (Actual);\n@@ -2366,7 +2374,7 @@ package body Exp_Ch6 is\n             --  [in] out parameters.\n \n             elsif Is_Ref_To_Bit_Packed_Array (Actual) then\n-               Add_Simple_Call_By_Copy_Code (Bit_Packed_Array => True);\n+               Add_Simple_Call_By_Copy_Code (Force => True);\n \n             --  If a nonscalar actual is possibly bit-aligned, we need a copy\n             --  because the back-end cannot cope with such objects. In other\n@@ -2382,7 +2390,7 @@ package body Exp_Ch6 is\n                 Component_May_Be_Bit_Aligned (Entity (Selector_Name (Actual)))\n               and then not Represented_As_Scalar (Etype (Formal))\n             then\n-               Add_Simple_Call_By_Copy_Code (Bit_Packed_Array => False);\n+               Add_Simple_Call_By_Copy_Code (Force => False);\n \n             --  References to slices of bit-packed arrays are expanded\n \n@@ -2568,14 +2576,19 @@ package body Exp_Ch6 is\n             --  Is this really necessary in all cases???\n \n             elsif Is_Ref_To_Bit_Packed_Array (Actual) then\n-               Add_Simple_Call_By_Copy_Code (Bit_Packed_Array => True);\n+               Add_Simple_Call_By_Copy_Code (Force => True);\n+\n+            --  If we have a C++ constructor call, we need to create the object\n+\n+            elsif Is_CPP_Constructor_Call (Actual) then\n+               Add_Simple_Call_By_Copy_Code (Force => True);\n \n             --  If a nonscalar actual is possibly unaligned, we need a copy\n \n             elsif Is_Possibly_Unaligned_Object (Actual)\n               and then not Represented_As_Scalar (Etype (Formal))\n             then\n-               Add_Simple_Call_By_Copy_Code (Bit_Packed_Array => False);\n+               Add_Simple_Call_By_Copy_Code (Force => False);\n \n             --  Similarly, we have to expand slices of packed arrays here\n             --  because the result must be byte aligned."}]}