{"sha": "24491a09505847e6e42b50917948ac5dc5780715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ0OTFhMDk1MDU4NDdlNmU0MmI1MDkxNzk0OGFjNWRjNTc4MDcxNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-17T19:02:58Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-17T19:02:58Z"}, "message": "optabs.c (prepare_cmp_insn): Let emit_library_call_value generate a pseudo reg that receives the result of a...\n\n\t* optabs.c (prepare_cmp_insn): Let emit_library_call_value\n\tgenerate a pseudo reg that receives the result of a libcall.\n\t(prepare_float_lib_cmp): Likewise.\n\nFrom-SVN: r57255", "tree": {"sha": "3676f6184e64fbd9cb932b97c0330707f14a408d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3676f6184e64fbd9cb932b97c0330707f14a408d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24491a09505847e6e42b50917948ac5dc5780715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24491a09505847e6e42b50917948ac5dc5780715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24491a09505847e6e42b50917948ac5dc5780715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24491a09505847e6e42b50917948ac5dc5780715/comments", "author": null, "committer": null, "parents": [{"sha": "ec55ac68646195e5469bc622e4e701d28b646503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec55ac68646195e5469bc622e4e701d28b646503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec55ac68646195e5469bc622e4e701d28b646503"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "34852fe2cc39707ce6028387ad89b08278b63b69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24491a09505847e6e42b50917948ac5dc5780715/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24491a09505847e6e42b50917948ac5dc5780715/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24491a09505847e6e42b50917948ac5dc5780715", "patch": "@@ -1,3 +1,9 @@\n+2002-09-17  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* optabs.c (prepare_cmp_insn): Let emit_library_call_value\n+\tgenerate a pseudo reg that receives the result of a libcall.\n+\t(prepare_float_lib_cmp): Likewise.\n+\n 2002-09-17  Steve Ellcey  <sje@cup.hp.com>\n \n         * config/ia64/elf.h: Remove CPP_PREDEFINES."}, {"sha": "0d13bb144f1159b211b020dab3bc7b5fb74e3e2b", "filename": "gcc/optabs.c", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24491a09505847e6e42b50917948ac5dc5780715/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24491a09505847e6e42b50917948ac5dc5780715/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=24491a09505847e6e42b50917948ac5dc5780715", "patch": "@@ -3436,29 +3436,23 @@ prepare_cmp_insn (px, py, pcomparison, size, pmode, punsignedp, purpose)\n #endif\n \t{\n #ifdef TARGET_MEM_FUNCTIONS\n-\t  emit_library_call (memcmp_libfunc, LCT_PURE_MAKE_BLOCK,\n-\t\t\t     TYPE_MODE (integer_type_node), 3,\n-\t\t\t     XEXP (x, 0), Pmode, XEXP (y, 0), Pmode,\n-\t\t\t     convert_to_mode (TYPE_MODE (sizetype), size,\n-\t\t\t\t\t      TREE_UNSIGNED (sizetype)),\n-\t\t\t     TYPE_MODE (sizetype));\n+\t  result = emit_library_call_value (memcmp_libfunc, NULL_RTX, LCT_PURE_MAKE_BLOCK,\n+\t\t\t\t\t    TYPE_MODE (integer_type_node), 3,\n+\t\t\t\t\t    XEXP (x, 0), Pmode, XEXP (y, 0), Pmode,\n+\t\t\t\t\t    convert_to_mode (TYPE_MODE (sizetype), size,\n+\t\t\t\t\t\t\t     TREE_UNSIGNED (sizetype)),\n+\t\t\t\t\t    TYPE_MODE (sizetype));\n #else\n-\t  emit_library_call (bcmp_libfunc, LCT_PURE_MAKE_BLOCK,\n-\t\t\t     TYPE_MODE (integer_type_node), 3,\n-\t\t\t     XEXP (x, 0), Pmode, XEXP (y, 0), Pmode,\n-\t\t\t     convert_to_mode (TYPE_MODE (integer_type_node),\n-\t\t\t\t\t      size,\n-\t\t\t\t\t      TREE_UNSIGNED (integer_type_node)),\n-\t\t\t     TYPE_MODE (integer_type_node));\n+\t  result = emit_library_call_value (bcmp_libfunc, NULL_RTX, LCT_PURE_MAKE_BLOCK,\n+\t\t\t\t\t    TYPE_MODE (integer_type_node), 3,\n+\t\t\t\t\t    XEXP (x, 0), Pmode, XEXP (y, 0), Pmode,\n+\t\t\t\t\t    convert_to_mode (TYPE_MODE (integer_type_node),\n+\t\t\t\t\t\t\t     size,\n+\t\t\t\t\t\t\t     TREE_UNSIGNED (integer_type_node)),\n+\t\t\t\t\t    TYPE_MODE (integer_type_node));\n #endif\n \n-\t  /* Immediately move the result of the libcall into a pseudo\n-\t     register so reload doesn't clobber the value if it needs\n-\t     the return register for a spill reg.  */\n-\t  result = gen_reg_rtx (TYPE_MODE (integer_type_node));\n \t  result_mode = TYPE_MODE (integer_type_node);\n-\t  emit_move_insn (result,\n-\t\t\t  hard_libcall_value (result_mode));\n \t}\n       *px = result;\n       *py = const0_rtx;\n@@ -3483,14 +3477,8 @@ prepare_cmp_insn (px, py, pcomparison, size, pmode, punsignedp, purpose)\n       if (unsignedp && ucmp_optab->handlers[(int) mode].libfunc)\n \tlibfunc = ucmp_optab->handlers[(int) mode].libfunc;\n \n-      emit_library_call (libfunc, LCT_CONST_MAKE_BLOCK, word_mode, 2, x, mode,\n-\t\t\t y, mode);\n-\n-      /* Immediately move the result of the libcall into a pseudo\n-\t register so reload doesn't clobber the value if it needs\n-\t the return register for a spill reg.  */\n-      result = gen_reg_rtx (word_mode);\n-      emit_move_insn (result, hard_libcall_value (word_mode));\n+      result = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST_MAKE_BLOCK,\n+\t\t\t\t\tword_mode, 2, x, mode, y, mode);\n \n       /* Integer comparison returns a result that must be compared against 1,\n \t so that even if we do an unsigned compare afterward,\n@@ -4006,9 +3994,8 @@ prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp)\n   if (libfunc == 0)\n     abort ();\n \n-  result = gen_reg_rtx (word_mode);\n-  emit_library_call_value (libfunc, result, LCT_CONST_MAKE_BLOCK,\n-\t\t\t   word_mode, 2, x, mode, y, mode);\n+  result = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST_MAKE_BLOCK,\n+\t\t\t\t    word_mode, 2, x, mode, y, mode);\n   *px = result;\n   *py = const0_rtx;\n   *pmode = word_mode;"}]}