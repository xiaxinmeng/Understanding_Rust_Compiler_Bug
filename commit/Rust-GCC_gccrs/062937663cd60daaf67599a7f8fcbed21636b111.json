{"sha": "062937663cd60daaf67599a7f8fcbed21636b111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyOTM3NjYzY2Q2MGRhYWY2NzU5OWE3ZjhmY2JlZDIxNjM2YjExMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-02-26T17:21:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-02-26T17:21:43Z"}, "message": "extend.texi (__builtin_object_size): Use @pxref instead of @xref inside parenthesis.\n\n\t* doc/extend.texi (__builtin_object_size):\n\tUse @pxref instead of @xref inside parenthesis.\n\t(__builtin_has_attribute): Add missing comma after @xref.\n\t(__builtin_object_size): Ditto.\n\t* doc/md.texi (cond_*{mode}): Use @samp instead of @var around op1[i].\n\t* fortran/invoke.texi (-ffpe-trap): Use @var for every item\n\tin the list.\n\nFrom-SVN: r269219", "tree": {"sha": "1ae12face5fc8b5add9347b55b134e49b53809aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ae12face5fc8b5add9347b55b134e49b53809aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/062937663cd60daaf67599a7f8fcbed21636b111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062937663cd60daaf67599a7f8fcbed21636b111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062937663cd60daaf67599a7f8fcbed21636b111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062937663cd60daaf67599a7f8fcbed21636b111/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f73675e3c7503d6d48ea5ac29cd9b5e9d007668f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f73675e3c7503d6d48ea5ac29cd9b5e9d007668f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f73675e3c7503d6d48ea5ac29cd9b5e9d007668f"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "8730434a29c71cae83eb93f7aa921a1bd9810ea0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062937663cd60daaf67599a7f8fcbed21636b111/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062937663cd60daaf67599a7f8fcbed21636b111/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=062937663cd60daaf67599a7f8fcbed21636b111", "patch": "@@ -1,3 +1,13 @@\n+2019-02-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* doc/extend.texi (__builtin_object_size):\n+\tUse @pxref instead of @xref inside parenthesis.\n+\t(__builtin_has_attribute): Add missing comma after @xref.\n+\t(__builtin_object_size): Ditto.\n+\t* doc/md.texi (cond_*{mode}): Use @samp instead of @var around op1[i].\n+\t* fortran/invoke.texi (-ffpe-trap): Use @var for every item\n+\tin the list.\n+\n 2019-02-26  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/87761"}, {"sha": "7425d890617bcbe163a364995f3c8ebc12fbf3fb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062937663cd60daaf67599a7f8fcbed21636b111/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062937663cd60daaf67599a7f8fcbed21636b111/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=062937663cd60daaf67599a7f8fcbed21636b111", "patch": "@@ -11775,7 +11775,7 @@ is a built-in construct that returns a constant number of bytes from\n @var{ptr} to the end of the object @var{ptr} pointer points to\n (if known at compile time).  To determine the sizes of dynamically allocated\n objects the function relies on the allocation functions called to obtain\n-the storage to be declared with the @code{alloc_size} attribute (@xref{Common\n+the storage to be declared with the @code{alloc_size} attribute (@pxref{Common\n Function Attributes}).  @code{__builtin_object_size} never evaluates\n its arguments for side effects.  If there are any side effects in them, it\n returns @code{(size_t) -1} for @var{type} 0 or 1 and @code{(size_t) 0}\n@@ -12560,7 +12560,7 @@ restrictions as the argument to @code{typeof} (@pxref{Typeof}).  The\n @var{attribute} argument is an attribute name optionally followed by\n a comma-separated list of arguments enclosed in parentheses.  Both forms\n of attribute names---with and without double leading and trailing\n-underscores---are recognized.  @xref{Attribute Syntax} for details.\n+underscores---are recognized.  @xref{Attribute Syntax}, for details.\n When no attribute arguments are specified for an attribute that expects\n one or more arguments the function returns @code{true} if\n @var{type-or-expression} has been declared with the attribute regardless\n@@ -13163,7 +13163,8 @@ and GCC does not issue a warning.\n @end deftypefn\n \n @deftypefn {Built-in Function}{size_t} __builtin_object_size (const void * @var{ptr}, int @var{type})\n-Returns the size of an object pointed to by @var{ptr}.  @xref{Object Size Checking} for a detailed description of the function.\n+Returns the size of an object pointed to by @var{ptr}.  @xref{Object Size\n+Checking}, for a detailed description of the function.\n @end deftypefn\n \n @deftypefn {Built-in Function} double __builtin_huge_val (void)"}, {"sha": "30612a6aecb3c20c739d84e4e5e7c2f3a9cefb5f", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062937663cd60daaf67599a7f8fcbed21636b111/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062937663cd60daaf67599a7f8fcbed21636b111/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=062937663cd60daaf67599a7f8fcbed21636b111", "patch": "@@ -6628,7 +6628,7 @@ for (i = 0; i < GET_MODE_NUNITS (@var{m}); i++)\n where, for example, @var{op} is @code{+} for @samp{cond_add@var{mode}}.\n \n When defined for floating-point modes, the contents of @samp{op3[i]}\n-are not interpreted if @var{op1[i]} is false, just like they would not\n+are not interpreted if @samp{op1[i]} is false, just like they would not\n be in a normal C @samp{?:} condition.\n \n Operands 0, 2, 3 and 4 all have mode @var{m}.  Operand 1 is a scalar"}, {"sha": "8364c67b2df64d307b9b2db16ffc4b8537b93717", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062937663cd60daaf67599a7f8fcbed21636b111/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062937663cd60daaf67599a7f8fcbed21636b111/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=062937663cd60daaf67599a7f8fcbed21636b111", "patch": "@@ -1205,7 +1205,7 @@ these three exceptions is probably a good idea.\n \n If the option is used more than once in the command line, the lists will\n be joined: '@code{ffpe-trap=}@var{list1} @code{ffpe-trap=}@var{list2}'\n-is equivalent to @code{ffpe-trap=}@var{list1,list2}.\n+is equivalent to @code{ffpe-trap=}@var{list1},@var{list2}.\n \n Note that once enabled an exception cannot be disabled (no negative form).\n "}]}