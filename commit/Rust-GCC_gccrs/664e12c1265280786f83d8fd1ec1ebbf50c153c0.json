{"sha": "664e12c1265280786f83d8fd1ec1ebbf50c153c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0ZTEyYzEyNjUyODA3ODZmODNkOGZkMWVjMWViYmY1MGMxNTNjMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-19T20:48:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-19T20:48:39Z"}, "message": "tuple (tuple_element<__i, [...]): Add.\n\n2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/tuple (tuple_element<__i, const _Tp>,\n\ttuple_element<__i, volatile _Tp>, tuple_element<__i,\n\tconst volatile _Tp>, tuple_size<const _Tp>, tuple_size<volatile _Tp>,\n\ttuple_size<const volatile _Tp>): Add.\n\t* include/std/utility (tuple_size<std::pair<_Tp1, _Tp2>>): Tweak.\n\t* include/std/array (tuple_size<array<_Tp, _Nm>>): Likewise.\n\t* testsuite/20_util/tuple/cv_tuple_size.cc: New.\n\t* testsuite/20_util/tuple/cv_tuple_element.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Tweak dg-warning\n\tline number.\n\nFrom-SVN: r173919", "tree": {"sha": "aa4e6b793f8fc46762e5dce6559c2aacda23a1ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa4e6b793f8fc46762e5dce6559c2aacda23a1ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664e12c1265280786f83d8fd1ec1ebbf50c153c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664e12c1265280786f83d8fd1ec1ebbf50c153c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664e12c1265280786f83d8fd1ec1ebbf50c153c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664e12c1265280786f83d8fd1ec1ebbf50c153c0/comments", "author": null, "committer": null, "parents": [{"sha": "173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2"}], "stats": {"total": 160, "additions": 139, "deletions": 21}, "files": [{"sha": "f6b9159d235ada73d7a04391fe0add686e72dc95", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=664e12c1265280786f83d8fd1ec1ebbf50c153c0", "patch": "@@ -1,3 +1,16 @@\n+2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/tuple (tuple_element<__i, const _Tp>,\n+\ttuple_element<__i, volatile _Tp>, tuple_element<__i,\n+\tconst volatile _Tp>, tuple_size<const _Tp>, tuple_size<volatile _Tp>,\n+\ttuple_size<const volatile _Tp>): Add.\n+\t* include/std/utility (tuple_size<std::pair<_Tp1, _Tp2>>): Tweak.\n+\t* include/std/array (tuple_size<array<_Tp, _Nm>>): Likewise.\n+\t* testsuite/20_util/tuple/cv_tuple_size.cc: New.\n+\t* testsuite/20_util/tuple/cv_tuple_element.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Tweak dg-warning\n+\tline number.\n+\n 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple (tuple<>::operator=(tuple&&)): Specify as"}, {"sha": "474b884ecb5b77bfb3589dc6c702aeeb3bfc7593", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=664e12c1265280786f83d8fd1ec1ebbf50c153c0", "patch": "@@ -242,18 +242,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp> \n     class tuple_size;\n \n+  template<typename _Tp, std::size_t _Nm>\n+    struct tuple_size<array<_Tp, _Nm>>\n+    : public integral_constant<std::size_t, _Nm> { };\n+\n   /// tuple_element\n   template<std::size_t _Int, typename _Tp>\n     class tuple_element;\n \n-  template<typename _Tp, std::size_t _Nm>\n-    struct tuple_size<array<_Tp, _Nm> >\n-    { static const std::size_t value = _Nm; };\n-\n-  template<typename _Tp, std::size_t _Nm>\n-    const std::size_t\n-    tuple_size<array<_Tp, _Nm> >::value;  \n-\n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n     struct tuple_element<_Int, array<_Tp, _Nm> >\n     { typedef _Tp type; };"}, {"sha": "dc9330d0b5981eea902d35a92016afa7957861c5", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=664e12c1265280786f83d8fd1ec1ebbf50c153c0", "patch": "@@ -505,19 +505,53 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Head type;\n     };\n \n+  template<std::size_t __i, typename _Tp>\n+    struct tuple_element<__i, const _Tp>\n+    {\n+      typedef typename\n+      add_const<typename tuple_element<__i, _Tp>::type>::type type;\n+    };\n+\n+  template<std::size_t __i, typename _Tp>\n+    struct tuple_element<__i, volatile _Tp>\n+    {\n+      typedef typename\n+      add_volatile<typename tuple_element<__i, _Tp>::type>::type type;\n+    };\n+\n+  template<std::size_t __i, typename _Tp>\n+    struct tuple_element<__i, const volatile _Tp>\n+    {\n+      typedef typename\n+      add_cv<typename tuple_element<__i, _Tp>::type>::type type;\n+    };\n+\n   /// Finds the size of a given tuple type.\n   template<typename _Tp>\n     struct tuple_size;\n \n-  /// class tuple_size\n-  template<typename... _Elements>\n-    struct tuple_size<tuple<_Elements...> >\n-    {\n-      static const std::size_t value = sizeof...(_Elements);\n-    };\n+  template<typename _Tp>\n+    struct tuple_size<const _Tp>\n+    : public integral_constant<\n+             typename remove_cv<decltype(tuple_size<_Tp>::value)>::type,\n+             tuple_size<_Tp>::value> { };\n \n+  template<typename _Tp>\n+    struct tuple_size<volatile _Tp>\n+    : public integral_constant<\n+             typename remove_cv<decltype(tuple_size<_Tp>::value)>::type,\n+             tuple_size<_Tp>::value> { };\n+\n+  template<typename _Tp>\n+    struct tuple_size<const volatile _Tp>\n+    : public integral_constant<\n+             typename remove_cv<decltype(tuple_size<_Tp>::value)>::type,\n+             tuple_size<_Tp>::value> { };\n+\n+  /// class tuple_size\n   template<typename... _Elements>\n-    const std::size_t tuple_size<tuple<_Elements...> >::value;\n+    struct tuple_size<tuple<_Elements...>>\n+    : public integral_constant<std::size_t, sizeof...(_Elements)> { };\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n     inline typename __add_ref<_Head>::type"}, {"sha": "f433e46acee963a5c424c38746d8fcbe9ada2384", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=664e12c1265280786f83d8fd1ec1ebbf50c153c0", "patch": "@@ -88,11 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    // Various functions which give std::pair a tuple-like interface.\n   template<class _Tp1, class _Tp2>\n     struct tuple_size<std::pair<_Tp1, _Tp2>>\n-    { static const std::size_t value = 2; };\n-\n-  template<class _Tp1, class _Tp2>\n-    const std::size_t\n-    tuple_size<std::pair<_Tp1, _Tp2> >::value;\n+    : public integral_constant<std::size_t, 2> { };\n \n   template<class _Tp1, class _Tp2>\n     struct tuple_element<0, std::pair<_Tp1, _Tp2>>"}, {"sha": "df4fb435e53704fccc77c051cb8bfc2b0d3a16b3", "filename": "libstdc++-v3/testsuite/20_util/tuple/cv_tuple_element.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcv_tuple_element.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcv_tuple_element.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcv_tuple_element.cc?ref=664e12c1265280786f83d8fd1ec1ebbf50c153c0", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <tuple>\n+\n+using namespace std;\n+\n+static_assert(is_same<tuple_element<0, const tuple<double, void, int>>::type,\n+\t      const double>::value, \"Error\");\n+static_assert(is_same<tuple_element<1, volatile tuple<short, void>>::type,\n+\t      volatile void>::value, \"Error\");\n+static_assert(is_same<tuple_element<2, const volatile tuple<float,\n+\t      char, int>>::type, const volatile int>::value, \"Error\");"}, {"sha": "8224528f4dfd02bb9e21825a56699474bc411715", "filename": "libstdc++-v3/testsuite/20_util/tuple/cv_tuple_size.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcv_tuple_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcv_tuple_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcv_tuple_size.cc?ref=664e12c1265280786f83d8fd1ec1ebbf50c153c0", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  VERIFY( tuple_size<const tuple<> >::value == 0 );\n+  VERIFY( tuple_size<volatile tuple<int> >::value == 1 );\n+  VERIFY( tuple_size<const volatile tuple<void> >::value == 1 );\n+\n+  typedef tuple<int, const int&, void> test_tuple1;\n+  VERIFY( tuple_size<const test_tuple1>::value == 3 );\n+  VERIFY( tuple_size<const volatile test_tuple1>::value == 3 );\n+  VERIFY( tuple_size<volatile tuple<tuple<void> > >::value == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d449be317add829bc3eff00e4dac3bca1bc1e6a1", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e12c1265280786f83d8fd1ec1ebbf50c153c0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=664e12c1265280786f83d8fd1ec1ebbf50c153c0", "patch": "@@ -51,7 +51,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 469 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 603 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 637 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }"}]}