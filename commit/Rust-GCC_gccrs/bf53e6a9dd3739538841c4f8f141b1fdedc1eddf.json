{"sha": "bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1M2U2YTlkZDM3Mzk1Mzg4NDFjNGY4ZjE0MWIxZmRlZGMxZWRkZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-01T19:48:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-01T19:48:00Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE_FILESYSTEM_TS): Disable when <dirent.h> is not available.\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_FILESYSTEM_TS): Disable when <dirent.h>\n\tis not available.\n\t(GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for fchmodat.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* configure.ac: Check for utime.h\n\t* include/experimental/fs_path.h (path::string<>)\n\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Remove stray typename keyword.\n\t* src/filesystem/dir.cc [!_GLIBCXX_HAVE_DIRENT_H] (DIR, opendir,\n\tclosedir, dirent, readdir_r): Replace dummy functions with #error.\n\t(native_readdir, _Dir::advance): Use readdir when readdir_r is missing.\n\t* src/filesystem/ops.cc (do_stat, is_set): Make inline.\n\t(last_write_time) [!_GLIBCXX_USE_UTIMENSAT]: Use utime.\n\t(permissions) [!_GLIBCXX_USE_FCHMODAT]: Use chmod.\n\t(space, temp_directory_path) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Set\n\terror_code.\n\nFrom-SVN: r222703", "tree": {"sha": "0bc46ce80de16433e21de47fde04f7ea8d6ff0b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bc46ce80de16433e21de47fde04f7ea8d6ff0b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00d74c4903b344910f1062e1746c15138c8f4b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00d74c4903b344910f1062e1746c15138c8f4b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00d74c4903b344910f1062e1746c15138c8f4b1"}], "stats": {"total": 177, "additions": 158, "deletions": 19}, "files": [{"sha": "7e0700571058c67673bd01e850f66328cd76c331", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "patch": "@@ -1,5 +1,22 @@\n 2015-05-01  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* acinclude.m4 (GLIBCXX_ENABLE_FILESYSTEM_TS): Disable when <dirent.h>\n+\tis not available.\n+\t(GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for fchmodat.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure.ac: Check for utime.h\n+\t* include/experimental/fs_path.h (path::string<>)\n+\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Remove stray typename keyword.\n+\t* src/filesystem/dir.cc [!_GLIBCXX_HAVE_DIRENT_H] (DIR, opendir,\n+\tclosedir, dirent, readdir_r): Replace dummy functions with #error.\n+\t(native_readdir, _Dir::advance): Use readdir when readdir_r is missing.\n+\t* src/filesystem/ops.cc (do_stat, is_set): Make inline.\n+\t(last_write_time) [!_GLIBCXX_USE_UTIMENSAT]: Use utime.\n+\t(permissions) [!_GLIBCXX_USE_FCHMODAT]: Use chmod.\n+\t(space, temp_directory_path) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Set\n+\terror_code.\n+\n \t* include/experimental/fs_path.h (path::_List): Use vector instead of\n \tlist.\n \t* python/libstdcxx/v6/printers.py (StdExpPathPrinter): Adapt."}, {"sha": "07b5bd70ab3cc8f66d82144dc5034a38c069425b", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "patch": "@@ -3914,6 +3914,9 @@ AC_DEFUN([GLIBCXX_ENABLE_FILESYSTEM_TS], [\n     [permit yes|no|auto])\n \n   AC_MSG_CHECKING([whether to build Filesystem TS support])\n+  if test x\"$ac_cv_header_dirent_h\" != x\"yes\"; then\n+    enable_libstdcxx_filesystem_ts=no\n+  fi\n   if test x\"$enable_libstdcxx_filesystem_ts\" = x\"auto\"; then\n     case \"${target_os}\" in\n       freebsd*|netbsd*|openbsd*|dragonfly*|darwin*)\n@@ -3992,6 +3995,22 @@ dnl\n     AC_DEFINE(_GLIBCXX_USE_ST_MTIM, 1, [Define if struct stat has timespec members.])\n   fi\n   AC_MSG_RESULT($glibcxx_cv_st_mtim)\n+dnl\n+  AC_MSG_CHECKING([for fchmodat])\n+  AC_CACHE_VAL(glibcxx_cv_fchmodat, [dnl\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [\n+        #include <fcntl.h>\n+        #include <sys/stat.h>\n+      ],\n+      [fchmodat(AT_FDCWD, \"\", 0, AT_SYMLINK_NOFOLLOW);],\n+      [glibcxx_cv_fchmodat=yes],\n+      [glibcxx_cv_fchmodat=no])\n+  ])\n+  if test $glibcxx_cv_fchmodat = yes; then\n+    AC_DEFINE(_GLIBCXX_USE_FCHMODAT, 1, [Define if fchmodat is available in <sys/stat.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_fchmodat)\n dnl\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   AC_LANG_RESTORE"}, {"sha": "88d56b5ad59bbf28c355ee984a4d6d1f096df3e5", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "patch": "@@ -475,6 +475,9 @@\n /* Defined if usleep exists. */\n #undef HAVE_USLEEP\n \n+/* Define to 1 if you have the <utime.h> header file. */\n+#undef HAVE_UTIME_H\n+\n /* Defined if vfwscanf exists. */\n #undef HAVE_VFWSCANF\n \n@@ -848,6 +851,9 @@\n    this host. */\n #undef _GLIBCXX_USE_DECIMAL_FLOAT\n \n+/* Define if fchmodat is available in <sys/stat.h>. */\n+#undef _GLIBCXX_USE_FCHMODAT\n+\n /* Define if __float128 is supported on this host. */\n #undef _GLIBCXX_USE_FLOAT128\n "}, {"sha": "90a5192db80f9e1cf4f44eb6e1c17810ae7acc8c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "patch": "@@ -78928,7 +78928,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n # For Filesystem TS.\n-for ac_header in fcntl.h dirent.h sys/statvfs.h\n+for ac_header in fcntl.h dirent.h sys/statvfs.h utime.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\"\n@@ -79154,6 +79154,9 @@ fi\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to build Filesystem TS support\" >&5\n $as_echo_n \"checking whether to build Filesystem TS support... \" >&6; }\n+  if test x\"$ac_cv_header_dirent_h\" != x\"yes\"; then\n+    enable_libstdcxx_filesystem_ts=no\n+  fi\n   if test x\"$enable_libstdcxx_filesystem_ts\" = x\"auto\"; then\n     case \"${target_os}\" in\n       freebsd*|netbsd*|openbsd*|dragonfly*|darwin*)\n@@ -79369,6 +79372,68 @@ $as_echo \"#define _GLIBCXX_USE_ST_MTIM 1\" >>confdefs.h\n   fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_st_mtim\" >&5\n $as_echo \"$glibcxx_cv_st_mtim\" >&6; }\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fchmodat\" >&5\n+$as_echo_n \"checking for fchmodat... \" >&6; }\n+  if test \"${glibcxx_cv_fchmodat+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+      if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+        #include <fcntl.h>\n+        #include <sys/stat.h>\n+\n+int\n+main ()\n+{\n+fchmodat(AT_FDCWD, \"\", 0, AT_SYMLINK_NOFOLLOW);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_fchmodat=yes\n+else\n+  glibcxx_cv_fchmodat=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+        #include <fcntl.h>\n+        #include <sys/stat.h>\n+\n+int\n+main ()\n+{\n+fchmodat(AT_FDCWD, \"\", 0, AT_SYMLINK_NOFOLLOW);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_fchmodat=yes\n+else\n+  glibcxx_cv_fchmodat=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+  if test $glibcxx_cv_fchmodat = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_FCHMODAT 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_fchmodat\" >&5\n+$as_echo \"$glibcxx_cv_fchmodat\" >&6; }\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'"}, {"sha": "311baa5a4abc1d746558bf5bb8d6866b273722ca", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "patch": "@@ -403,7 +403,7 @@ GLIBCXX_CONFIGURE_TESTSUITE\n GLIBCXX_CHECK_GTHREADS\n \n # For Filesystem TS.\n-AC_CHECK_HEADERS([fcntl.h dirent.h sys/statvfs.h])\n+AC_CHECK_HEADERS([fcntl.h dirent.h sys/statvfs.h utime.h])\n AC_STRUCT_DIRENT_D_TYPE\n GLIBCXX_ENABLE_FILESYSTEM_TS\n GLIBCXX_CHECK_FILESYSTEM_DEPS"}, {"sha": "33a16dbee56497f00c125cfa58e6e39484e2d1a6", "filename": "libstdc++-v3/include/experimental/fs_path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffs_path.h?ref=bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "patch": "@@ -781,7 +781,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const value_type* __last = __first + _M_pathname.size();\n \n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      using _CharAlloc = typename __alloc_rebind<_Allocator, char>;\n+      using _CharAlloc = __alloc_rebind<_Allocator, char>;\n       using _String = basic_string<char, char_traits<char>, _CharAlloc>;\n       using _WString = basic_string<_CharT, _Traits, _Allocator>;\n "}, {"sha": "016a78dc91bfdf82858fc5e3b20c828fcb040432", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "patch": "@@ -25,7 +25,6 @@\n #include <experimental/filesystem>\n #include <utility>\n #include <stack>\n-#include <tuple>\n #include <string.h>\n #include <errno.h>\n #ifdef _GLIBCXX_HAVE_DIRENT_H\n@@ -34,17 +33,12 @@\n # endif\n # include <dirent.h>\n #else\n-// TODO: replace dummy definitions with suitable Win32 code\n-#ifndef EACCES\n-# define EACCES static_cast<int>(std::errc::permission_denied)\n+# error \"the <dirent.h> header is needed to build the Filesystem TS\"\n #endif\n-using DIR = void;\n-using P = std::experimental::filesystem::path;\n-static DIR* opendir(const P::value_type*) { return nullptr; }\n-static void closedir(DIR*) { }\n-struct dirent { const char* d_name; };\n-static inline int readdir_r(DIR*, dirent*, dirent**)\n-{ return static_cast<int>(std::errc::not_supported); }\n+\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+# undef opendir\n+# define opendir _wopendir\n #endif\n \n namespace fs = std::experimental::filesystem;\n@@ -97,7 +91,7 @@ struct fs::_Dir\n namespace\n {\n   template<typename Bitmask>\n-    bool is_set(Bitmask obj, Bitmask bits)\n+    inline bool is_set(Bitmask obj, Bitmask bits)\n     {\n       return (obj & bits) != Bitmask::none;\n     }\n@@ -157,6 +151,19 @@ namespace\n     }\n #else\n     return fs::file_type::none;\n+#endif\n+  }\n+\n+  int\n+  native_readdir(DIR* dirp, ::dirent*& entryp)\n+  {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    errno = 0;\n+    if ((entryp = ::readdir(dirp)))\n+      return 0;\n+    return errno;\n+#else\n+    return ::readdir_r(dirp, entryp, &entryp);\n #endif\n   }\n }\n@@ -165,8 +172,8 @@ bool\n fs::_Dir::advance(ErrorCode ec)\n {\n   ::dirent ent;\n-  ::dirent* result;\n-  if (int err = readdir_r(dirp, &ent, &result))\n+  ::dirent* result = &ent;\n+  if (int err = native_readdir(dirp, result))\n     {\n       if (!ec)\n \t_GLIBCXX_THROW_OR_ABORT(filesystem_error("}, {"sha": "c7e3960be864a8e3c085433ddcc0174b94247837", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf53e6a9dd3739538841c4f8f141b1fdedc1eddf/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=bf53e6a9dd3739538841c4f8f141b1fdedc1eddf", "patch": "@@ -47,6 +47,16 @@\n # include <ext/stdio_filebuf.h>\n # include <ostream>\n #endif\n+#if _GLIBCXX_HAVE_UTIME_H\n+# include <utime.h>\n+#endif\n+\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+# undef utime\n+# define utime _wutime\n+# undef chmod\n+# define chmod _wchmod\n+#endif\n \n namespace fs = std::experimental::filesystem;\n \n@@ -131,7 +141,7 @@ fs::copy(const path& from, const path& to, copy_options options)\n namespace\n {\n   template<typename Bitmask>\n-    bool is_set(Bitmask obj, Bitmask bits)\n+    inline bool is_set(Bitmask obj, Bitmask bits)\n     {\n       return (obj & bits) != Bitmask::none;\n     }\n@@ -767,7 +777,7 @@ fs::file_size(const path& p)\n namespace\n {\n   template<typename Accessor, typename T>\n-    T\n+    inline T\n     do_stat(const fs::path& p, std::error_code& ec, Accessor f, T deflt)\n     {\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n@@ -871,6 +881,14 @@ fs::last_write_time(const path& p __attribute__((__unused__)),\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n+#elif _GLIBCXX_HAVE_UTIME_H\n+  ::utimbuf times;\n+  times.modtime = s.count();\n+  times.actime = do_stat(p, ec, std::mem_fn(&stat::st_atime), times.modtime);\n+  if (::utime(p.c_str(), &times))\n+    ec.assign(errno, std::generic_category());\n+  else\n+    ec.clear();\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n #endif\n@@ -887,7 +905,11 @@ fs::permissions(const path& p, perms prms)\n \n void fs::permissions(const path& p, perms prms, error_code& ec) noexcept\n {\n+#if _GLIBCXX_USE_FCHMODAT\n   if (int err = ::fchmodat(AT_FDCWD, p.c_str(), static_cast<mode_t>(prms), 0))\n+#else\n+  if (int err = ::chmod(p.c_str(), static_cast<mode_t>(prms)))\n+#endif\n     ec.assign(err, std::generic_category());\n   else\n     ec.clear();\n@@ -1051,6 +1073,8 @@ fs::space(const path& p, error_code& ec) noexcept\n       };\n       ec.clear();\n     }\n+#else\n+  ec = std::make_error_code(std::errc::not_supported);\n #endif\n   return info;\n }\n@@ -1157,6 +1181,7 @@ fs::path fs::temp_directory_path()\n fs::path fs::temp_directory_path(error_code& ec)\n {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  ec = std::make_error_code(std::errc::not_supported);\n   return {}; // TODO\n #else\n   const char* tmpdir = ::getenv(\"TMPDIR\");"}]}