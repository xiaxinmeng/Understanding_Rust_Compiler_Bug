{"sha": "f68963c09232f56ee793ab12b902f16c45af0214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4OTYzYzA5MjMyZjU2ZWU3OTNhYjEyYjkwMmYxNmM0NWFmMDIxNA==", "commit": {"author": {"name": "Felipe Magno de Almeida", "email": "felipe@expertisesolutions.com.br", "date": "2016-12-06T17:58:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-06T17:58:10Z"}, "message": "Add #ifdef case for 16 bits in cow-stdexcept.cc\n\nAdded #ifdef case for when void* is 16 bits so it compiles in AVR\ntarget.\n\n2016-12-06  Felipe Magno de Almeida  <felipe@expertisesolutions.com.br>\n\n\t* src/c++11/cow-stdexcept.cc: Add special case for 16 bit pointers.\n\nFrom-SVN: r243310", "tree": {"sha": "ac0247edd0c766e17035431b412a6497fee73f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac0247edd0c766e17035431b412a6497fee73f38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f68963c09232f56ee793ab12b902f16c45af0214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68963c09232f56ee793ab12b902f16c45af0214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68963c09232f56ee793ab12b902f16c45af0214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68963c09232f56ee793ab12b902f16c45af0214/comments", "author": {"login": "felipealmeida", "id": 252110, "node_id": "MDQ6VXNlcjI1MjExMA==", "avatar_url": "https://avatars.githubusercontent.com/u/252110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felipealmeida", "html_url": "https://github.com/felipealmeida", "followers_url": "https://api.github.com/users/felipealmeida/followers", "following_url": "https://api.github.com/users/felipealmeida/following{/other_user}", "gists_url": "https://api.github.com/users/felipealmeida/gists{/gist_id}", "starred_url": "https://api.github.com/users/felipealmeida/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felipealmeida/subscriptions", "organizations_url": "https://api.github.com/users/felipealmeida/orgs", "repos_url": "https://api.github.com/users/felipealmeida/repos", "events_url": "https://api.github.com/users/felipealmeida/events{/privacy}", "received_events_url": "https://api.github.com/users/felipealmeida/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6649ad7efdd583d84099beb5ee2b03a0ed28b9ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6649ad7efdd583d84099beb5ee2b03a0ed28b9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6649ad7efdd583d84099beb5ee2b03a0ed28b9ee"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "138a0208b2070e9db784945c8fca433362f0149c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68963c09232f56ee793ab12b902f16c45af0214/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68963c09232f56ee793ab12b902f16c45af0214/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f68963c09232f56ee793ab12b902f16c45af0214", "patch": "@@ -1,5 +1,7 @@\n 2016-12-06  Felipe Magno de Almeida  <felipe@expertisesolutions.com.br>\n \n+\t* src/c++11/cow-stdexcept.cc: Add special case for 16 bit pointers.\n+\n \t* crossconfig.m4: Add avr target for cross-compilation.\n \t* configure: Regenerate.\n "}, {"sha": "641b372ccf8d29fe0eadd679f7129bdc4048a7ce", "filename": "libstdc++-v3/src/c++11/cow-stdexcept.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68963c09232f56ee793ab12b902f16c45af0214/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68963c09232f56ee793ab12b902f16c45af0214/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc?ref=f68963c09232f56ee793ab12b902f16c45af0214", "patch": "@@ -208,6 +208,8 @@ extern void* _ZGTtnaX (size_t sz) __attribute__((weak));\n extern void _ZGTtdlPv (void* ptr) __attribute__((weak));\n extern uint8_t _ITM_RU1(const uint8_t *p)\n   ITM_REGPARM __attribute__((weak));\n+extern uint16_t _ITM_RU2(const uint16_t *p)\n+  ITM_REGPARM __attribute__((weak));\n extern uint32_t _ITM_RU4(const uint32_t *p)\n   ITM_REGPARM __attribute__((weak));\n extern uint64_t _ITM_RU8(const uint64_t *p)\n@@ -272,12 +274,15 @@ _txnal_cow_string_C1_for_exceptions(void* that, const char* s,\n static void* txnal_read_ptr(void* const * ptr)\n {\n   static_assert(sizeof(uint64_t) == sizeof(void*)\n-\t\t|| sizeof(uint32_t) == sizeof(void*),\n-\t\t\"Pointers must be 32 bits or 64 bits wide\");\n+\t\t|| sizeof(uint32_t) == sizeof(void*)\n+\t\t|| sizeof(uint16_t) == sizeof(void*),\n+\t\t\"Pointers must be 16 bits, 32 bits or 64 bits wide\");\n #if __UINTPTR_MAX__ == __UINT64_MAX__\n   return (void*)_ITM_RU8((const uint64_t*)ptr);\n-#else\n+#elif __UINTPTR_MAX__ == __UINT32_MAX__\n   return (void*)_ITM_RU4((const uint32_t*)ptr);\n+#else\n+  return (void*)_ITM_RU2((const uint16_t*)ptr);\n #endif\n }\n "}]}