{"sha": "9c1caf50e16b50903364709d774244928c719b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMxY2FmNTBlMTZiNTA5MDMzNjQ3MDlkNzc0MjQ0OTI4YzcxOWIzNQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-12-06T17:59:01Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-12-06T17:59:01Z"}, "message": "PR tree-optimization/82646 - bogus -Wstringop-overflow with -D_FORTIFY_SOURCE=2 on strncpy with range to a member array\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/82646\n\t* builtins.c (maybe_emit_chk_warning): Use size as the bound for\n\tstrncpy, not maxlen.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/82646\n\t* gcc.dg/builtin-stringop-chk-1.c: Adjust.\n\t* gcc.dg/builtin-stringop-chk-9.c: New test.\n\t* g++.dg/ext/strncpy-chk1.C: Adjust.\n\nFrom-SVN: r255448", "tree": {"sha": "37e9610f886770d0980145594fd7487eac2c1c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e9610f886770d0980145594fd7487eac2c1c1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c1caf50e16b50903364709d774244928c719b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1caf50e16b50903364709d774244928c719b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1caf50e16b50903364709d774244928c719b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1caf50e16b50903364709d774244928c719b35/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a797929f09274ccbf95ee7d8e415d35c1f5b0d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a797929f09274ccbf95ee7d8e415d35c1f5b0d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a797929f09274ccbf95ee7d8e415d35c1f5b0d1"}], "stats": {"total": 180, "additions": 174, "deletions": 6}, "files": [{"sha": "de037da6b02776fadda7f56701de0589e48089f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1caf50e16b50903364709d774244928c719b35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1caf50e16b50903364709d774244928c719b35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c1caf50e16b50903364709d774244928c719b35", "patch": "@@ -1,3 +1,9 @@\n+2017-12-06  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/82646\n+\t* builtins.c (maybe_emit_chk_warning): Use size as the bound for\n+\tstrncpy, not maxlen.\n+\n 2017-12-06  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/invoke.texi (-Wstringop-truncation): Mention attribute"}, {"sha": "6b25253950ce390609a8e9fa895bb01a22aa018a", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1caf50e16b50903364709d774244928c719b35/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1caf50e16b50903364709d774244928c719b35/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9c1caf50e16b50903364709d774244928c719b35", "patch": "@@ -9861,6 +9861,8 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n      (such as __strncat_chk) or null if the operation isn't bounded\n      (such as __strcat_chk).  */\n   tree maxlen = NULL_TREE;\n+  /* The exact size of the access (such as in __strncpy_chk).  */\n+  tree size = NULL_TREE;\n \n   switch (fcode)\n     {\n@@ -9888,7 +9890,7 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n     case BUILT_IN_STRNCPY_CHK:\n     case BUILT_IN_STPNCPY_CHK:\n       srcstr = CALL_EXPR_ARG (exp, 1);\n-      maxlen = CALL_EXPR_ARG (exp, 2);\n+      size = CALL_EXPR_ARG (exp, 2);\n       objsize = CALL_EXPR_ARG (exp, 3);\n       break;\n \n@@ -9911,7 +9913,7 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n     }\n \n   check_sizes (OPT_Wstringop_overflow_, exp,\n-\t       /*size=*/NULL_TREE, maxlen, srcstr, objsize);\n+\t       size, maxlen, srcstr, objsize);\n }\n \n /* Emit warning if a buffer overflow is detected at compile time"}, {"sha": "a42348fbb77217f26868d8fdc3c48f942f107370", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1caf50e16b50903364709d774244928c719b35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1caf50e16b50903364709d774244928c719b35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c1caf50e16b50903364709d774244928c719b35", "patch": "@@ -1,3 +1,10 @@\n+2017-12-06  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/82646\n+\t* gcc.dg/builtin-stringop-chk-1.c: Adjust.\n+\t* gcc.dg/builtin-stringop-chk-9.c: New test.\n+\t* g++.dg/ext/strncpy-chk1.C: Adjust.\n+\n 2017-12-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/83075"}, {"sha": "8f8822b67b6a976c5c195276c13ad53bc8622417", "filename": "gcc/testsuite/g++.dg/ext/strncpy-chk1.C", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1caf50e16b50903364709d774244928c719b35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstrncpy-chk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1caf50e16b50903364709d774244928c719b35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstrncpy-chk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstrncpy-chk1.C?ref=9c1caf50e16b50903364709d774244928c719b35", "patch": "@@ -1,4 +1,4 @@\n-// PR c++/40502\n+// PR c++/40502 - [4.5 Regression] crash in cp_diagnostic_starter\n // { dg-do compile }\n // { dg-options \"-O2\" }\n // { dg-skip-if \"packed attribute missing for struct A\" { \"epiphany-*-*\" } }\n@@ -9,7 +9,8 @@ struct B { char z[50]; };\n inline void\n foo (char *dest, const char *__restrict src, __SIZE_TYPE__ n)\n {\n-  __builtin___strncpy_chk (dest, src, n, __builtin_object_size (dest, 0));\t// { dg-warning \"specified bound 36 exceeds destination size 35\" }\n+  // This triggers a -Wstringop-overflow warning (pruned below).\n+  __builtin___strncpy_chk (dest, src, n, __builtin_object_size (dest, 0));\n }\n \n void bar (const char *, int);\n@@ -30,3 +31,5 @@ test ()\n {\n   baz (0);\n }\n+\n+// { dg-prune-output \"\\\\\\[-Wstringop-overflow=]\" }"}, {"sha": "10048f32cf0bc980ab2b9e48e7e4d15fe711a0b3", "filename": "gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1caf50e16b50903364709d774244928c719b35/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1caf50e16b50903364709d774244928c719b35/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-1.c?ref=9c1caf50e16b50903364709d774244928c719b35", "patch": "@@ -36,7 +36,7 @@ test (int arg, ...)\n   vx = stpcpy (&buf2[18], \"a\");\n   vx = stpcpy (&buf2[18], \"ab\"); /* { dg-warning \"writing 3\" \"stpcpy\" } */\n   strncpy (&buf2[18], \"a\", 2);\n-  strncpy (&buf2[18], \"a\", 3); /* { dg-warning \"specified bound 3 exceeds destination size 2\" \"strncpy\" } */\n+  strncpy (&buf2[18], \"a\", 3); /* { dg-warning \"writing 3 bytes into a region of size 2\" \"strncpy\" } */\n   strncpy (&buf2[18], \"abc\", 2);\n   strncpy (&buf2[18], \"abc\", 3); /* { dg-warning \"writing 3 \" \"strncpy\" } */\n   memset (buf2, '\\0', sizeof (buf2));\n@@ -93,7 +93,7 @@ void\n test2 (const H h)\n {\n   char c;\n-  strncpy (&c, str, 3); /* { dg-warning \"specified bound 3 exceeds destination size 1\" \"strncpy\" } */\n+  strncpy (&c, str, 3); /* { dg-warning \"writing 3 bytes into a region of size 1\" \"strncpy\" } */\n \n   struct { char b[4]; } x;\n   sprintf (x.b, \"%s\", \"ABCD\"); /* { dg-warning \"writing 5\" \"sprintf\" } */"}, {"sha": "b5464c2f06ae5fb4865742cbde74d19497377308", "filename": "gcc/testsuite/gcc.dg/builtin-stringop-chk-9.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1caf50e16b50903364709d774244928c719b35/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1caf50e16b50903364709d774244928c719b35/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-9.c?ref=9c1caf50e16b50903364709d774244928c719b35", "patch": "@@ -0,0 +1,150 @@\n+/* PR middle-end/82646 - bogus -Wstringop-overflow with -D_FORTIFY_SOURCE=2\n+   on strncpy with range to a member array\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-overflow -ftrack-macro-expansion=0\" } */\n+\n+#define bos(p)   __builtin_object_size (p, 1)\n+\n+struct S {\n+  char a[5];\n+  void (*pf)(void);\n+};\n+\n+/* Verify that none of the string function calls below triggers a warning.  */\n+\n+char* test_stpncpy_const_nowarn (struct S *p)\n+{\n+  int n = sizeof p->a;\n+\n+  return __builtin_stpncpy (p->a, \"123456\", n);\n+}\n+\n+char* test_strncpy_const_nowarn (struct S *p)\n+{\n+  int n = sizeof p->a;\n+\n+  return __builtin_strncpy (p->a, \"1234567\", n);\n+}\n+\n+char* test_stpncpy_chk_const_nowarn (struct S *p)\n+{\n+  int n = sizeof p->a;\n+\n+  return __builtin___stpncpy_chk (p->a, \"12345678\", n, bos (p->a));\n+}\n+\n+char* test_strncpy_chk_const_nowarn (struct S *p)\n+{\n+  int n = sizeof p->a;\n+\n+  return __builtin___strncpy_chk (p->a, \"123456789\", n, bos (p->a));\n+}\n+\n+\n+char* test_stpncpy_range_nowarn (struct S *p, int n)\n+{\n+  if (n < sizeof p->a)\n+    n = sizeof p->a;\n+\n+  return __builtin_stpncpy (p->a, \"123456\", n);\n+}\n+\n+char* test_strncpy_range_nowarn (struct S *p, int n)\n+{\n+  if (n < sizeof p->a)\n+    n = sizeof p->a;\n+\n+  return __builtin_strncpy (p->a, \"1234567\", n);\n+}\n+\n+char* test_stpncpy_chk_range_nowarn (struct S *p, int n)\n+{\n+  if (n < sizeof p->a)\n+    n = sizeof p->a;\n+\n+  return __builtin___stpncpy_chk (p->a, \"12345678\", n, bos (p->a));   /* { dg-bogus \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+char* test_strncpy_chk_range_nowarn (struct S *p, int n)\n+{\n+  if (n < sizeof p->a)\n+    n = sizeof p->a;\n+\n+  return __builtin___strncpy_chk (p->a, \"123456789\", n, bos (p->a));  /* { dg-bogus \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+\n+/* Verify that all of the string function calls below trigger a warning.  */\n+\n+char* test_stpncpy_const_warn (struct S *p)\n+{\n+  int n = sizeof p->a;\n+\n+  ++n;\n+\n+  return __builtin_stpncpy (p->a, \"123456\", n);                       /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+char* test_strncpy_const_warn (struct S *p)\n+{\n+  int n = sizeof p->a;\n+\n+  /* A call to strncpy() with a known string and small bound is folded\n+     into memcpy() which defeats the warning in this case since memcpy\n+     uses Object Size Type 0, i.e., the largest object that p->a may\n+     be a part of.  Use a larger bound to get around this here.  */\n+  n += 11;\n+\n+  return __builtin_strncpy (p->a, \"1234567\", n);                      /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+char* test_stpncpy_chk_const_warn (struct S *p)\n+{\n+  int n = sizeof p->a;\n+\n+  ++n;\n+\n+  return __builtin___stpncpy_chk (p->a, \"12345678\", n, bos (p->a));   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+char* test_strncpy_chk_const_warn (struct S *p)\n+{\n+  int n = sizeof p->a;\n+\n+  ++n;\n+\n+  return __builtin___strncpy_chk (p->a, \"123456789\", n, bos (p->a));  /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+\n+char* test_stpncpy_range_warn (struct S *p, int n)\n+{\n+  if (n < sizeof p->a + 1)\n+    n = sizeof p->a + 1;\n+\n+  return __builtin_stpncpy (p->a, \"123456\", n);                       /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+char* test_strncpy_range_warn (struct S *p, int n)\n+{\n+  if (n < sizeof p->a + 1)\n+    n = sizeof p->a + 1;\n+\n+  return __builtin_strncpy (p->a, \"1234567\", n);                      /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+char* test_stpncpy_chk_range_warn (struct S *p, int n)\n+{\n+  if (n < sizeof p->a + 1)\n+    n = sizeof p->a + 1;\n+\n+  return __builtin___stpncpy_chk (p->a, \"12345678\", n, bos (p->a));   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+char* test_strncpy_chk_range_warn (struct S *p, int n)\n+{\n+  if (n < sizeof p->a + 1)\n+    n = sizeof p->a + 1;\n+\n+  return __builtin___strncpy_chk (p->a, \"123456789\", n, bos (p->a));  /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}"}]}