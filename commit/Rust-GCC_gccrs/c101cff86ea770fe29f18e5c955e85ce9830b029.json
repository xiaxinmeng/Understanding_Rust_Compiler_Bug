{"sha": "c101cff86ea770fe29f18e5c955e85ce9830b029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEwMWNmZjg2ZWE3NzBmZTI5ZjE4ZTVjOTU1ZTg1Y2U5ODMwYjAyOQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-05-15T09:12:21Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-05-15T09:12:21Z"}, "message": "lto-plugin - support -save-temps, -v, --version.\n\nThis patch makes the lto-plugin follow the same approach\nto save-temps as collect2. \n\n-save-temps causes the temp file to be named meaningfully,\nand for the relevant input files to be saved in CWD.\n\n-v, \u2014version causes the save actions to be output to stderr.\n\none can get this to happen by just putting -save-temps, -v on\nthe regular link line or (for compatibility with the way the\n -debug flag works) by appending -plugin-opt=-save-temps, etc.\n\nlto-plugin/\n\n2019-05-15  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* lto-plugin.c (exec_lto_wrapper): Make the wrapper\n\targuments filename more user-friendly.\n\t(file_exists, maybe_unlink): New.\n\t(cleanup_handler): Use maybe unlink to handle the\n\tcase when temps should be saved.\n\t(process_option): Look for -v, \u2014-version, -save-temps.\n\t(onload): Record the linker output file name.\n\tCheck for -v, \u2014-version, -save-temps in the GCC collect\n\toptions environment.\n\nFrom-SVN: r271202", "tree": {"sha": "4933779deed5857c82376f5f285e54de1998ce29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4933779deed5857c82376f5f285e54de1998ce29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c101cff86ea770fe29f18e5c955e85ce9830b029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c101cff86ea770fe29f18e5c955e85ce9830b029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c101cff86ea770fe29f18e5c955e85ce9830b029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c101cff86ea770fe29f18e5c955e85ce9830b029/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "debe1ba0190b1cf61499533ef01b0bdb51bf581e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/debe1ba0190b1cf61499533ef01b0bdb51bf581e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/debe1ba0190b1cf61499533ef01b0bdb51bf581e"}], "stats": {"total": 109, "additions": 88, "deletions": 21}, "files": [{"sha": "16faa56a4fa718443cabfc644b60ed7433e3c00f", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c101cff86ea770fe29f18e5c955e85ce9830b029/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c101cff86ea770fe29f18e5c955e85ce9830b029/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=c101cff86ea770fe29f18e5c955e85ce9830b029", "patch": "@@ -1,3 +1,15 @@\n+2019-05-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* lto-plugin.c (exec_lto_wrapper): Make the wrapper\n+\targuments filename more user-friendly.\n+\t(file_exists, maybe_unlink): New.\n+\t(cleanup_handler): Use maybe unlink to handle the\n+\tcase when temps should be saved.\n+\t(process_option): Look for -v, \u2014-version, -save-temps.\n+\t(onload): Record the linker output file name.\n+\tCheck for -v, \u2014-version, -save-temps in the GCC collect\n+\toptions environment.\n+\n 2019-02-26  Martin Liska  <mliska@suse.cz>\n \n \t* lto-symtab.c: Remove."}, {"sha": "92bca50b094fe674be0c0912a525b731910bdbd4", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 76, "deletions": 21, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c101cff86ea770fe29f18e5c955e85ce9830b029/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c101cff86ea770fe29f18e5c955e85ce9830b029/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=c101cff86ea770fe29f18e5c955e85ce9830b029", "patch": "@@ -41,6 +41,7 @@ along with this program; see the file COPYING3.  If not see\n #if HAVE_STDINT_H\n #include <stdint.h>\n #endif\n+#include <stdbool.h>\n #include <assert.h>\n #include <errno.h>\n #include <string.h>\n@@ -184,12 +185,15 @@ static int lto_wrapper_num_args;\n static char **pass_through_items = NULL;\n static unsigned int num_pass_through_items;\n \n-static char debug;\n+static bool debug;\n+static bool save_temps;\n+static bool verbose;\n static char nop;\n static char *resolution_file = NULL;\n static enum ld_plugin_output_file_type linker_output;\n static int linker_output_set;\n static int linker_output_known;\n+static const char *link_output_name = NULL;\n \n /* The version of gold being used, or -1 if not gold.  The number is\n    MAJOR * 100 + MINOR.  */\n@@ -560,8 +564,17 @@ exec_lto_wrapper (char *argv[])\n   struct pex_obj *pex;\n   const char *errmsg;\n \n-  /* Write argv to a file to avoid a command line that is too long. */\n-  arguments_file_name = make_temp_file (\"\");\n+  /* Write argv to a file to avoid a command line that is too long\n+     Save the file locally on save-temps.  */\n+  if (save_temps && link_output_name)\n+    {\n+      arguments_file_name = (char *) xmalloc (strlen (link_output_name)\n+\t\t\t\t  + sizeof (\".lto_wrapper_args\") + 1);\n+      strcpy (arguments_file_name, link_output_name);\n+      strcat (arguments_file_name, \".lto_wrapper_args\");\n+    }\n+  else\n+     arguments_file_name = make_temp_file (\".lto_wrapper_args\");\n   check (arguments_file_name, LDPL_FATAL,\n          \"Failed to generate a temorary file name\");\n \n@@ -579,15 +592,21 @@ exec_lto_wrapper (char *argv[])\n   for (i = 1; argv[i]; i++)\n     {\n       char *a = argv[i];\n+      /* Check the input argument list for a verbose marker too.  */\n       if (a[0] == '-' && a[1] == 'v' && a[2] == '\\0')\n \t{\n-\t  for (i = 0; argv[i]; i++)\n-\t    fprintf (stderr, \"%s \", argv[i]);\n-\t  fprintf (stderr, \"\\n\");\n+\t  verbose = true;\n \t  break;\n \t}\n     }\n \n+  if (verbose)\n+    {\n+      for (i = 0; argv[i]; i++)\n+\tfprintf (stderr, \"%s \", argv[i]);\n+      fprintf (stderr, \"\\n\");\n+    }\n+\n   new_argv[0] = argv[0];\n   new_argv[1] = at_args;\n   new_argv[2] = NULL;\n@@ -599,7 +618,6 @@ exec_lto_wrapper (char *argv[])\n       fprintf (stderr, \"\\n\");\n     }\n \n-\n   pex = pex_init (PEX_USE_PIPES, \"lto-wrapper\", NULL);\n   check (pex != NULL, LDPL_FATAL, \"could not pex_init lto-wrapper\");\n \n@@ -759,6 +777,29 @@ all_symbols_read_handler (void)\n   return LDPS_OK;\n }\n \n+/* Helper, as used in collect2.  */\n+static int\n+file_exists (const char *name)\n+{\n+  return access (name, R_OK) == 0;\n+}\n+\n+/* Unlink FILE unless we have save-temps set.\n+   Note that we're saving files if verbose output is set. */\n+\n+static void\n+maybe_unlink (const char *file)\n+{\n+  if (save_temps && file_exists (file))\n+    {\n+      if (verbose)\n+\tfprintf (stderr, \"[Leaving %s]\\n\", file);\n+      return;\n+    }\n+\n+  unlink_if_ordinary (file);\n+}\n+\n /* Remove temporary files at the end of the link. */\n \n static enum ld_plugin_status\n@@ -771,16 +812,10 @@ cleanup_handler (void)\n     return LDPS_OK;\n \n   if (arguments_file_name)\n-    {\n-      t = unlink (arguments_file_name);\n-      check (t == 0, LDPL_FATAL, \"could not unlink arguments file\");\n-    }\n+    maybe_unlink (arguments_file_name);\n \n   for (i = 0; i < num_output_files; i++)\n-    {\n-      t = unlink (output_files[i]);\n-      check (t == 0, LDPL_FATAL, \"could not unlink output file\");\n-    }\n+    maybe_unlink (output_files[i]);\n \n   free_2 ();\n   return LDPS_OK;\n@@ -1143,7 +1178,12 @@ process_option (const char *option)\n   if (strcmp (option, \"-linker-output-known\") == 0)\n     linker_output_known = 1;\n   if (strcmp (option, \"-debug\") == 0)\n-    debug = 1;\n+    debug = true;\n+  else if ((strcmp (option, \"-v\") == 0)\n+           || (strcmp (option, \"--verbose\") == 0))\n+    verbose = true;\n+  else if (strcmp (option, \"-save-temps\") == 0)\n+    save_temps = true;\n   else if (strcmp (option, \"-nop\") == 0)\n     nop = 1;\n   else if (!strncmp (option, \"-pass-through=\", strlen(\"-pass-through=\")))\n@@ -1180,6 +1220,8 @@ process_option (const char *option)\n       if (strncmp (option, \"-fresolution=\", sizeof (\"-fresolution=\") - 1) == 0)\n \tresolution_file = opt + sizeof (\"-fresolution=\") - 1;\n     }\n+  save_temps = save_temps || debug;\n+  verbose = verbose || debug;\n }\n \n /* Called by gold after loading the plugin. TV is the transfer vector. */\n@@ -1232,6 +1274,10 @@ onload (struct ld_plugin_tv *tv)\n \t  linker_output = (enum ld_plugin_output_file_type) p->tv_u.tv_val;\n \t  linker_output_set = 1;\n \t  break;\n+\tcase LDPT_OUTPUT_NAME:\n+\t  /* We only use this to make user-friendly temp file names.  */\n+\t  link_output_name = p->tv_u.tv_string;\n+\t  break;\n \tdefault:\n \t  break;\n \t}\n@@ -1259,12 +1305,21 @@ onload (struct ld_plugin_tv *tv)\n \t     \"could not register the all_symbols_read callback\");\n     }\n \n-  /* Support -fno-use-linker-plugin by failing to load the plugin\n-     for the case where it is auto-loaded by BFD.  */\n   char *collect_gcc_options = getenv (\"COLLECT_GCC_OPTIONS\");\n-  if (collect_gcc_options\n-      && strstr (collect_gcc_options, \"'-fno-use-linker-plugin'\"))\n-    return LDPS_ERR;\n+  if (collect_gcc_options)\n+    {\n+      /* Support -fno-use-linker-plugin by failing to load the plugin\n+\t for the case where it is auto-loaded by BFD.  */\n+      if (strstr (collect_gcc_options, \"'-fno-use-linker-plugin'\"))\n+\treturn LDPS_ERR;\n+\n+      if ( strstr (collect_gcc_options, \"'-save-temps'\"))\n+\tsave_temps = true;\n+\n+      if (strstr (collect_gcc_options, \"'-v'\")\n+          || strstr (collect_gcc_options, \"'--verbose'\"))\n+\tverbose = true;\n+    }\n \n   return LDPS_OK;\n }"}]}