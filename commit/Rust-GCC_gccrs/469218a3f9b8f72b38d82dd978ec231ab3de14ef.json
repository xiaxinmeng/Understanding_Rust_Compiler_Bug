{"sha": "469218a3f9b8f72b38d82dd978ec231ab3de14ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5MjE4YTNmOWI4ZjcyYjM4ZDgyZGQ5NzhlYzIzMWFiM2RlMTRlZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-02T14:00:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-02T14:00:50Z"}, "message": "Avoid redundant runtime checks in std::visit\n\nCalling std::get will check some static assertions and also do a runtime\ncheck for a valid index before calling __detail::__variant::__get. The\nstd::visit function already handles the case where any variant has an\ninvalid index, so __get can be used directly in __visit_invoke.\n\n\t* include/std/variant (__gen_vtable_impl::__visit_invoke): Call __get\n\tdirectly instead of get, as caller ensures correct index is used.\n\t(holds_alternative, get, get_if): Remove redundant inline specifiers.\n\t(_VARIANT_RELATION_FUNCTION_TEMPLATE): Likewise.\n\nFrom-SVN: r264786", "tree": {"sha": "a69a6ba487c13ad4ce8f595f485a8f2f0daefdf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a69a6ba487c13ad4ce8f595f485a8f2f0daefdf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/469218a3f9b8f72b38d82dd978ec231ab3de14ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469218a3f9b8f72b38d82dd978ec231ab3de14ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469218a3f9b8f72b38d82dd978ec231ab3de14ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469218a3f9b8f72b38d82dd978ec231ab3de14ef/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f512bf3ee95914b30ba67f80ca42a72ec630738f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f512bf3ee95914b30ba67f80ca42a72ec630738f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f512bf3ee95914b30ba67f80ca42a72ec630738f"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "388ae9d90692e849da615b956fea3c47209227a1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469218a3f9b8f72b38d82dd978ec231ab3de14ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469218a3f9b8f72b38d82dd978ec231ab3de14ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=469218a3f9b8f72b38d82dd978ec231ab3de14ef", "patch": "@@ -1,3 +1,10 @@\n+2018-10-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (__gen_vtable_impl::__visit_invoke): Call __get\n+\tdirectly instead of get, as caller ensures correct index is used.\n+\t(holds_alternative, get, get_if): Remove redundant inline specifiers.\n+\t(_VARIANT_RELATION_FUNCTION_TEMPLATE): Likewise.\n+\n 2018-10-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* testsuite/lib/libstdc++.exp (libstdc++_init): Use"}, {"sha": "ff340cfc897bdf118330ab39273fa68b8d39c6c6", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469218a3f9b8f72b38d82dd978ec231ab3de14ef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469218a3f9b8f72b38d82dd978ec231ab3de14ef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=469218a3f9b8f72b38d82dd978ec231ab3de14ef", "patch": "@@ -811,9 +811,8 @@ namespace __variant\n \t{\n \t  using _Alternative = variant_alternative_t<__index, _Next>;\n \t  __element = __gen_vtable_impl<\n-\t    remove_reference_t<\n-\t      decltype(__element)>, tuple<_Variants...>,\n-\t      std::index_sequence<__indices..., __index>>::_S_apply();\n+\t    remove_reference_t<decltype(__element)>, tuple<_Variants...>,\n+\t    std::index_sequence<__indices..., __index>>::_S_apply();\n \t}\n     };\n \n@@ -826,11 +825,11 @@ namespace __variant\n       using _Array_type =\n \t  _Multi_array<_Result_type (*)(_Visitor&&, _Variants...)>;\n \n-      decltype(auto)\n-      static constexpr __visit_invoke(_Visitor&& __visitor, _Variants... __vars)\n+      static constexpr decltype(auto)\n+      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)\n       {\n \treturn std::__invoke(std::forward<_Visitor>(__visitor),\n-\t    std::get<__indices>(std::forward<_Variants>(__vars))...);\n+\t    __variant::__get<__indices>(std::forward<_Variants>(__vars))...);\n       }\n \n       static constexpr auto\n@@ -871,16 +870,16 @@ namespace __variant\n } // namespace __detail\n \n   template<typename _Tp, typename... _Types>\n-    inline constexpr bool holds_alternative(const variant<_Types...>& __v)\n-    noexcept\n+    constexpr bool\n+    holds_alternative(const variant<_Types...>& __v) noexcept\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;\n     }\n \n   template<typename _Tp, typename... _Types>\n-    constexpr inline _Tp& get(variant<_Types...>& __v)\n+    constexpr _Tp& get(variant<_Types...>& __v)\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n@@ -889,7 +888,7 @@ namespace __variant\n     }\n \n   template<typename _Tp, typename... _Types>\n-    constexpr inline _Tp&& get(variant<_Types...>&& __v)\n+    constexpr _Tp&& get(variant<_Types...>&& __v)\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n@@ -899,7 +898,7 @@ namespace __variant\n     }\n \n   template<typename _Tp, typename... _Types>\n-    constexpr inline const _Tp& get(const variant<_Types...>& __v)\n+    constexpr const _Tp& get(const variant<_Types...>& __v)\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n@@ -908,7 +907,7 @@ namespace __variant\n     }\n \n   template<typename _Tp, typename... _Types>\n-    constexpr inline const _Tp&& get(const variant<_Types...>&& __v)\n+    constexpr const _Tp&& get(const variant<_Types...>&& __v)\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n@@ -918,8 +917,7 @@ namespace __variant\n     }\n \n   template<size_t _Np, typename... _Types>\n-    constexpr inline\n-    add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>\n+    constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>\n     get_if(variant<_Types...>* __ptr) noexcept\n     {\n       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;\n@@ -932,7 +930,7 @@ namespace __variant\n     }\n \n   template<size_t _Np, typename... _Types>\n-    constexpr inline\n+    constexpr\n     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>\n     get_if(const variant<_Types...>* __ptr) noexcept\n     {\n@@ -946,7 +944,7 @@ namespace __variant\n     }\n \n   template<typename _Tp, typename... _Types>\n-    constexpr inline add_pointer_t<_Tp>\n+    constexpr add_pointer_t<_Tp>\n     get_if(variant<_Types...>* __ptr) noexcept\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n@@ -957,7 +955,7 @@ namespace __variant\n     }\n \n   template<typename _Tp, typename... _Types>\n-    constexpr inline add_pointer_t<const _Tp>\n+    constexpr add_pointer_t<const _Tp>\n     get_if(const variant<_Types...>* __ptr)\n     noexcept\n     {\n@@ -1277,7 +1275,7 @@ namespace __variant\n \t  { &__detail::__variant::__erased_##__NAME< \\\n \t\tconst variant&, __indices>... }; \\\n       template<size_t... __indices> \\\n-\tconstexpr inline bool \\\n+\tconstexpr bool \\\n \t_M_##__NAME(const variant& __rhs, \\\n \t\t    std::index_sequence<__indices...>) const \\\n \t{ \\"}]}