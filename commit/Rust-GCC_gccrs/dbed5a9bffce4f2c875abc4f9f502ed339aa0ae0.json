{"sha": "dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlZDVhOWJmZmNlNGYyYzg3NWFiYzRmOWY1MDJlZDMzOWFhMGFlMA==", "commit": {"author": {"name": "John Marino", "email": "gnugcc@marino.st", "date": "2014-05-21T11:08:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-05-21T11:08:58Z"}, "message": "config.gcc (*-*-dragonfly*): New target.\n\n2014-05-21  John Marino  <gnugcc@marino.st>\n\ngcc:\n\n\t* config.gcc (*-*-dragonfly*): New target.\n\t* configure.ac: Detect dl_iterate_phdr (*freebsd*, *dragonfly*).\n\t* configure: Regenerate.\n\t* config/dragonfly-stdint.h: New.\n\t* config/dragonfly.h: New.\n\t* config/dragonfly.opt: New.\n\t* config/i386/dragonfly.h: New.\n\t* ginclude/stddef.h: Detect _PTRDIFF_T_DECLARED for DragonFly.\n\ninclude:\n\n\t* liberty.h: Use basename function on DragonFly.\n\nlibcilkrts:\n\n\t* runtime/os-unix.c (__DragonFly__): New target.\n\nlibgcc:\n\n\t* config.host (*-*-dragonfly*): New target.\n\t* crtstuff.c: Make dl_iterate_support generic on *bsd.\n\t* enable-execute-stack-mprotect.c: Always mprotect on FreeBSD.\n\t* unwind-dw2-fde-dip.c: Add dl_iterate_phr support for DragonFly.\n\t* config/i386/dragonfly-unwind.h: New.\n\nlibitm:\n\n\t* configure.tgt (*-*-dragonfly*): New target.\n\nlibstdc++-v3:\n\n\t* acinclude.m4 (*-*-dragonfly*): New target.\n\t* configure: Regenerate.\n\t* configure.host (*-*-dragonfly*): New target.\n\t* config/locale/dragonfly/c_locale.cc: New.\n\t* config/locale/dragonfly/ctype_members.cc: New.\n\t* config/os/bsd/dragonfly/ctype_base.h: New.\n\t* config/os/bsd/dragonfly/ctype_configure_char.cc: New.\n\t* config/os/bsd/dragonfly/ctype_inline.h: New.\n\t* config/os/bsd/dragonfly/os_defines.h: New.\n\nFrom-SVN: r210694", "tree": {"sha": "03facded16790b6c727201147904c9c4862b73cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03facded16790b6c727201147904c9c4862b73cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cf9038e10e7b5249645d22621287ffb8280143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17cf9038e10e7b5249645d22621287ffb8280143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17cf9038e10e7b5249645d22621287ffb8280143"}], "stats": {"total": 1518, "additions": 1498, "deletions": 20}, "files": [{"sha": "7d071a0222b0d3490ea5c8b225e9cd0214d3dc51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -1,3 +1,14 @@\n+2014-05-21  John Marino  <gnugcc@marino.st>\n+\n+\t* config.gcc (*-*-dragonfly*): New target.\n+\t* configure.ac: Detect dl_iterate_phdr (*freebsd*, *dragonfly*).\n+\t* configure: Regenerate.\n+\t* config/dragonfly-stdint.h: New.\n+\t* config/dragonfly.h: New.\n+\t* config/dragonfly.opt: New.\n+\t* config/i386/dragonfly.h: New.\n+\t* ginclude/stddef.h: Detect _PTRDIFF_T_DECLARED for DragonFly.\n+\n 2014-05-21  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n \n \t* tree.def (VOID_CST): New."}, {"sha": "bf053851d9f4a1773f19e49bba6019dbba2b3a73", "filename": "gcc/config.gcc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -621,6 +621,26 @@ case ${target} in\n     \"\" | yes | posix) thread_file='posix' ;;\n   esac\n   ;;\n+*-*-dragonfly*)\n+  gas=yes\n+  gnu_ld=yes\n+  tmake_file=\"t-slibgcc\"\n+  case ${enable_threads} in\n+    \"\" | yes | posix)\n+      thread_file='posix'\n+      ;;\n+    no | single)\n+      # Let these non-posix thread selections fall through if requested\n+      ;;\n+    *)\n+      echo 'Unknown thread configuration for DragonFly BSD'\n+      exit 1\n+      ;;\n+  esac\n+  extra_options=\"$extra_options rpath.opt dragonfly.opt\"\n+  default_use_cxa_atexit=yes\n+  use_gcc_stdint=wrap\n+  ;;\n *-*-freebsd*)\n   # This is the generic ELF configuration of FreeBSD.  Later\n   # machine-specific sections may refine and add to this\n@@ -1321,6 +1341,14 @@ x86_64-*-rdos*)\n     tm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h i386/x86-64.h i386/rdos.h i386/rdos64.h\"\n     tmake_file=\"i386/t-i386elf t-svr4\"\n     ;;\n+i[34567]86-*-dragonfly*)\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h dragonfly.h dragonfly-stdint.h i386/dragonfly.h\"\n+\ttmake_file=\"${tmake_file} i386/t-crtstuff\"\n+\t;;\n+x86_64-*-dragonfly*)\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h dragonfly.h dragonfly-stdint.h i386/x86-64.h i386/dragonfly.h\"\n+\ttmake_file=\"${tmake_file} i386/t-crtstuff\"\n+\t;;\n i[34567]86-*-freebsd*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h ${fbsd_tm_file} i386/freebsd.h\"\n \t;;\n@@ -4060,6 +4088,8 @@ case ${target} in\n \t\t;;\n \ti[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t;;\n+\ti[34567]86-*-dragonfly* | x86_64-*-dragonfly*)\n+\t\t;;\n \ti[34567]86-*-freebsd* | x86_64-*-freebsd*)\n \t\t;;\n \tia64*-*-linux*)"}, {"sha": "f0bb30f3a5bc28be59ef2aea9ba912dd001b92cc", "filename": "gcc/config/dragonfly-stdint.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig%2Fdragonfly-stdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig%2Fdragonfly-stdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdragonfly-stdint.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,56 @@\n+/* Definitions for <stdint.h> types for DragonFly systems.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+   Contributed by John Marino <gnugcc@marino.st>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define SIG_ATOMIC_TYPE   \"int\"\n+\n+#define INT8_TYPE         \"signed char\"\n+#define INT16_TYPE        \"short int\"\n+#define INT32_TYPE        \"int\"\n+#define INT64_TYPE        (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT8_TYPE        \"unsigned char\"\n+#define UINT16_TYPE       \"short unsigned int\"\n+#define UINT32_TYPE       \"unsigned int\"\n+#define UINT64_TYPE       (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INT_LEAST8_TYPE   INT8_TYPE\n+#define INT_LEAST16_TYPE  INT16_TYPE\n+#define INT_LEAST32_TYPE  INT32_TYPE\n+#define INT_LEAST64_TYPE  INT64_TYPE\n+#define UINT_LEAST8_TYPE  UINT8_TYPE\n+#define UINT_LEAST16_TYPE UINT16_TYPE\n+#define UINT_LEAST32_TYPE UINT32_TYPE\n+#define UINT_LEAST64_TYPE UINT64_TYPE\n+\n+#define INT_FAST8_TYPE    INT32_TYPE\n+#define INT_FAST16_TYPE   INT32_TYPE\n+#define INT_FAST32_TYPE   INT32_TYPE\n+#define INT_FAST64_TYPE   INT64_TYPE\n+#define UINT_FAST8_TYPE   UINT32_TYPE\n+#define UINT_FAST16_TYPE  UINT32_TYPE\n+#define UINT_FAST32_TYPE  UINT32_TYPE\n+#define UINT_FAST64_TYPE  UINT64_TYPE\n+\n+#define INTPTR_TYPE       (LONG_TYPE_SIZE == 64 ?  INT64_TYPE :  INT32_TYPE)\n+#define UINTPTR_TYPE      (LONG_TYPE_SIZE == 64 ? UINT64_TYPE : UINT32_TYPE)"}, {"sha": "115c25d3b99edb8793f226cb6ff23b13bc2c5c39", "filename": "gcc/config/dragonfly.h", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdragonfly.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,129 @@\n+/* Base configuration file for all DragonFly targets.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+   Contributed by John Marino <gnugcc@marino.st>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#undef  TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()            \\\n+  do                                        \\\n+    {                                       \\\n+       builtin_define_std (\"unix\");         \\\n+       builtin_define (\"__DragonFly__\");    \\\n+       builtin_assert (\"system=unix\");      \\\n+       builtin_assert (\"system=bsd\");       \\\n+       builtin_assert (\"system=DragonFly\"); \\\n+    }                                       \\\n+  while (0)\n+\n+#undef  CPP_SPEC\n+#define CPP_SPEC \\\n+ \"%(cpp_cpu) %(cpp_arch) %{posix:-D_POSIX_SOURCE}\"\n+\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC\t\\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} \\\n+     %{!pg: \\\n+       %{p:gcrt1.o%s} \\\n+       %{!p: \\\n+         %{profile: gcrt1.o%s} \\\n+         %{!profile: \\\n+           %{pie: Scrt1.o%s;:crt1.o%s}}}}} \\\n+   crti.o%s \\\n+   %{shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n+\n+#undef  LIB_SPEC\n+#define LIB_SPEC \\\n+  \"%{pthread:-lpthread} -lc\"\n+\n+#if defined(HAVE_LD_EH_FRAME_HDR)\n+#define LINK_EH_SPEC \"--eh-frame-hdr\"\n+#endif\n+\n+/* Provide a LINK_SPEC appropriate for DragonFly.  Here we provide support\n+   for the special GCC options -static and -shared, which allow us to\n+   link things in one of these three modes by applying the appropriate\n+   combinations of options at link-time.\n+\n+   When the -shared link option is used a final link is not being\n+   done.  */\n+\n+#define DFBSD_LINK_SPEC \\\n+ \"%{p:%nconsider using '-pg' instead of '-p' with gprof(1)} \\\n+  %{v:-V} \\\n+  %{assert*} %{R*} %{rpath*} %{defsym*} \\\n+  %{shared:-Bshareable %{h*} %{soname*}} \\\n+  %{!shared: \\\n+   %{!static: \\\n+    %{rdynamic:-export-dynamic} \\\n+    -dynamic-linker %(dfbsd_dynamic_linker) \\\n+   } \\\n+   %{static:-Bstatic} \\\n+  } \\\n+  %{!static:--hash-style=gnu} \\\n+  %{symbolic:-Bsymbolic}\"\n+\n+#undef  LINK_SPEC\n+#define LINK_SPEC DFBSD_LINK_SPEC\n+\n+#define DFBSD_DYNAMIC_LINKER \"/usr/libexec/ld-elf.so.2\"\n+\n+\n+/* Use --as-needed -lgcc_s for eh support.  */\n+#ifdef HAVE_LD_AS_NEEDED\n+#define USE_LD_AS_NEEDED 1\n+#endif\n+\n+/************************[  Target stuff  ]***********************************/\n+\n+/* All DragonFly Architectures support the ELF object file format.  */\n+#undef  OBJECT_FORMAT_ELF\n+#define OBJECT_FORMAT_ELF\n+\n+/* Don't assume anything about the header files.  */\n+#undef  NO_IMPLICIT_EXTERN_C\n+#define NO_IMPLICIT_EXTERN_C\t1\n+\n+/* Follow DragonFly's standard headers (<machine/stdint.h>, etc...).  */\n+\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef  WINT_TYPE\n+#define WINT_TYPE \"int\"\n+\n+/* Code generation parameters.  */\n+\n+/* Use periods rather than dollar signs in special g++ assembler names.\n+   This ensures the configuration knows our system correctly so we can link\n+   with libraries compiled with the native cc.  */\n+#undef NO_DOLLAR_IN_LABEL\n+\n+/* Used by libgcc2.c.  We support file locking with fcntl / F_SETLKW.\n+   This enables the test coverage code to use file locking when exiting a\n+   program, which avoids race conditions if the program has forked.  */\n+#define TARGET_POSIX_IO"}, {"sha": "c87828d1c6dd127b3d052df46ae32d11e152566a", "filename": "gcc/config/dragonfly.opt", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig%2Fdragonfly.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig%2Fdragonfly.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdragonfly.opt?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,64 @@\n+; DragonFly BSD options.\n+\n+; Copyright (C) 2014 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+; See the GCC internals manual (options.texi) for a description of this file's format.\n+\n+; Please try to keep this file in ASCII collating order.\n+\n+assert\n+Driver Separate\n+\n+assert=\n+Driver JoinedOrMissing\n+\n+defsym\n+Driver Separate\n+\n+defsym=\n+Driver JoinedOrMissing\n+\n+posix\n+Driver\n+\n+profile\n+Driver\n+\n+pthread\n+Driver\n+\n+rdynamic\n+Driver\n+\n+rpath-link\n+Driver Separate\n+\n+rpath-link=\n+Driver JoinedOrMissing\n+\n+rpath=\n+Driver JoinedOrMissing\n+\n+soname\n+Driver Separate\n+\n+soname=\n+Driver JoinedOrMissing\n+\n+; This comment is to ensure we retain the blank line above."}, {"sha": "71362d58e32333e5fecdcf40977c516df6c40972", "filename": "gcc/config/i386/dragonfly.h", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdragonfly.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,104 @@\n+/* Definitions for Intel 386 running DragonFly with ELF format\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+   Contributed by John Marino <gnugcc@marino.st>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+/* Override the default comment-starter of \"/\".  */\n+#undef  ASM_COMMENT_START\n+#define ASM_COMMENT_START \"#\"\n+\n+#undef  ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef  ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+#undef  DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+\n+#undef  NO_PROFILE_COUNTERS\n+#define NO_PROFILE_COUNTERS\t1\n+\n+/* Tell final.c that we don't need a label passed to mcount.  */\n+\n+#undef  MCOUNT_NAME\n+#define MCOUNT_NAME \".mcount\"\n+\n+/* Make gcc agree with <machine/ansi.h>.  */\n+\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE\t(TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")\n+\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE\t(TARGET_64BIT ? \"long int\" : \"int\")\n+\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE\t(TARGET_64BIT ? 32 : BITS_PER_WORD)\n+\n+#undef  SUBTARGET_EXTRA_SPECS\t/* i386.h bogusly defines it.  */\n+#define SUBTARGET_EXTRA_SPECS \\\n+  { \"dfbsd_dynamic_linker\", DFBSD_DYNAMIC_LINKER }\n+\n+/* A C statement to output to the stdio stream FILE an assembler\n+   command to advance the location counter to a multiple of 1<<LOG\n+   bytes if it is within MAX_SKIP bytes.\n+\n+   This is used to align code labels according to Intel recommendations.  */\n+\n+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n+#undef  ASM_OUTPUT_MAX_SKIP_ALIGN\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)\t\t\t\t\t\\\n+  if ((LOG) != 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n+    if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n+    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n+  }\n+#endif\n+\n+/* Don't default to pcc-struct-return, we want to retain compatibility with\n+   older gcc versions AND pcc-struct-return is nonreentrant.\n+   (even though the SVR4 ABI for the i386 says that records and unions are\n+   returned in memory).  */\n+\n+#undef  DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* DragonFly sets the rounding precision of the FPU to 53 bits.  Let the\n+   compiler get the contents of <float.h> and std::numeric_limits correct.  */\n+#undef TARGET_96_ROUND_53_LONG_DOUBLE\n+#define TARGET_96_ROUND_53_LONG_DOUBLE (!TARGET_64BIT)\n+\n+/* Put all *tf routines in libgcc.  */\n+#undef LIBGCC2_HAS_TF_MODE\n+#define LIBGCC2_HAS_TF_MODE 1\n+#define LIBGCC2_TF_CEXT q\n+#define TF_SIZE 113\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* Support for i386 was removed from DragonFly in 2007  */\n+#define SUBTARGET32_DEFAULT_CPU \"i486\"\n+\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack"}, {"sha": "1440d7e7d340a11911c6dac7f35355f8c121aa07", "filename": "gcc/configure", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -27325,6 +27325,13 @@ case \"$target\" in\n       gcc_cv_target_dl_iterate_phdr=no\n     fi\n     ;;\n+  *-*-dragonfly* | *-*-freebsd*)\n+    if grep dl_iterate_phdr $target_header_dir/sys/link_elf.h > /dev/null 2>&1; then\n+      gcc_cv_target_dl_iterate_phdr=yes\n+    else\n+      gcc_cv_target_dl_iterate_phdr=no\n+    fi\n+    ;;\n esac\n \n if test x$gcc_cv_target_dl_iterate_phdr = xyes; then"}, {"sha": "281ce8e06a1f6e8ab5a4a6fdb36630af02944216", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -5019,6 +5019,13 @@ case \"$target\" in\n       gcc_cv_target_dl_iterate_phdr=no\n     fi\n     ;;\n+  *-*-dragonfly* | *-*-freebsd*)\n+    if grep dl_iterate_phdr $target_header_dir/sys/link_elf.h > /dev/null 2>&1; then\n+      gcc_cv_target_dl_iterate_phdr=yes\n+    else\n+      gcc_cv_target_dl_iterate_phdr=no\n+    fi\n+    ;;\n esac\n GCC_TARGET_TEMPLATE([TARGET_DL_ITERATE_PHDR])\n if test x$gcc_cv_target_dl_iterate_phdr = xyes; then"}, {"sha": "62e893a011e06c665e18cd5aa293afe673a2b504", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -133,6 +133,7 @@ _TYPE_wchar_t;\n #ifndef _BSD_PTRDIFF_T_\n #ifndef ___int_ptrdiff_t_h\n #ifndef _GCC_PTRDIFF_T\n+#ifndef _PTRDIFF_T_DECLARED /* DragonFly */\n #define _PTRDIFF_T\n #define _T_PTRDIFF_\n #define _T_PTRDIFF\n@@ -141,10 +142,12 @@ _TYPE_wchar_t;\n #define _BSD_PTRDIFF_T_\n #define ___int_ptrdiff_t_h\n #define _GCC_PTRDIFF_T\n+#define _PTRDIFF_T_DECLARED\n #ifndef __PTRDIFF_TYPE__\n #define __PTRDIFF_TYPE__ long int\n #endif\n typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+#endif /* _PTRDIFF_T_DECLARED */\n #endif /* _GCC_PTRDIFF_T */\n #endif /* ___int_ptrdiff_t_h */\n #endif /* _BSD_PTRDIFF_T_ */\n@@ -198,6 +201,7 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n #define _GCC_SIZE_T\n #define _SIZET_\n #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \\\n+  || defined(__DragonFly__) \\\n   || defined(__FreeBSD_kernel__)\n /* __size_t is a typedef on FreeBSD 5, must not trash it. */\n #elif defined (__VMS__)"}, {"sha": "ff33d291e74e3b10b3ebda061ba5ba4af7ac8755", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -1,3 +1,7 @@\n+2014-05-21  John Marino  <gnugcc@marino.st>\n+\n+\t* liberty.h: Use basename function on DragonFly.\n+\n 2014-05-01  Steve Ellcey  <sellcey@mips.com>\n \n \t* include/longlong.h: Use 'defined()' to check __mips16."}, {"sha": "7fd07036b75a57b93f9d253b4d0446632e445b0d", "filename": "include/libiberty.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -106,7 +106,10 @@ extern int countargv (char**);\n    to find the declaration so provide a fully prototyped one.  If it\n    is 1, we found it so don't provide any declaration at all.  */\n #if !HAVE_DECL_BASENAME\n-#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) || defined (HAVE_DECL_BASENAME)\n+#if defined (__GNU_LIBRARY__ ) || defined (__linux__) \\\n+ || defined (__FreeBSD__) || defined (__OpenBSD__) || defined (__NetBSD__) \\\n+ || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) \\\n+ || defined (__DragonFly__) || defined (HAVE_DECL_BASENAME) \n extern char *basename (const char *) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_NONNULL(1);\n #else\n /* Do not allow basename to be used if there is no prototype seen.  We"}, {"sha": "3881c82b8e73ac9cdfcbeab43daa61e3c2858d93", "filename": "libcilkrts/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libcilkrts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libcilkrts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FChangeLog?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -1,3 +1,7 @@\n+2014-05-21  John Marino  <gnugcc@marino.st>\n+\n+\t* runtime/os-unix.c (__DragonFly__): New target.\n+\n 2014-04-11  Barry Tannenbaum  <barry.m.tannenbaum@intel.com>\n \n \tPR other/60644"}, {"sha": "cb582dd7591c0a5408040f024efc4e6786ddbfc5", "filename": "libcilkrts/runtime/os-unix.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libcilkrts%2Fruntime%2Fos-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libcilkrts%2Fruntime%2Fos-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fos-unix.c?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -54,6 +54,8 @@\n #elif defined __APPLE__\n #   include <sys/sysctl.h>\n     // Uses sysconf(_SC_NPROCESSORS_ONLN) in verbose output\n+#elif defined  __DragonFly__\n+// No additional include files\n #elif defined  __FreeBSD__\n // No additional include files\n #elif defined __CYGWIN__\n@@ -374,7 +376,7 @@ COMMON_SYSDEP int __cilkrts_hardware_cpu_count(void)\n     assert((unsigned)count == count);\n \n     return count;\n-#elif defined  __FreeBSD__ || defined __CYGWIN__\n+#elif defined  __FreeBSD__ || defined __CYGWIN__ || defined __DragonFly__\n     int ncores = sysconf(_SC_NPROCESSORS_ONLN);\n \n     return ncores;\n@@ -402,6 +404,9 @@ COMMON_SYSDEP void __cilkrts_yield(void)\n     // On MacOS, call sched_yield to yield quantum.  I'm not sure why we\n     // don't do this on Linux also.\n     sched_yield();\n+#elif defined(__DragonFly__)\n+    // On DragonFly BSD, call sched_yield to yield quantum.\n+    sched_yield();\n #elif defined(__MIC__)\n     // On MIC, pthread_yield() really trashes things.  Arch's measurements\n     // showed that calling _mm_delay_32() (or doing nothing) was a better"}, {"sha": "d7b93e8215b279f44ff641a44a95a7dc2cc089f8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -1,3 +1,11 @@\n+2014-05-20  John Marino  <gnugcc@marino.st>\n+\n+\t* config.host (*-*-dragonfly*): New target.\n+\t* crtstuff.c: Make dl_iterate_support generic on *bsd.\n+\t* enable-execute-stack-mprotect.c: Always mprotect on FreeBSD.\n+\t* unwind-dw2-fde-dip.c: Add dl_iterate_phr support for DragonFly.\n+\t* config/i386/dragonfly-unwind.h: New.\n+\n 2014-05-21  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \tPR libgcc/60166"}, {"sha": "5f13a9f18bf6303bebb728d6b112b4d0450cee6c", "filename": "libgcc/config.host", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -207,6 +207,11 @@ case ${host} in\n   tmake_file=\"$tmake_file t-darwin ${cpu_type}/t-darwin t-libgcc-pic t-slibgcc-darwin\"\n   extra_parts=\"crt3.o crttms.o crttme.o\"\n   ;;\n+*-*-dragonfly*)\n+  tmake_file=\"$tmake_file t-crtstuff-pic t-libgcc-pic t-eh-dw2-dip\"\n+  tmake_file=\"$tmake_file t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver\"\n+  extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n+  ;;\n *-*-freebsd*)\n   # This is the generic ELF configuration of FreeBSD.  Later\n   # machine-specific sections may refine and add to this\n@@ -302,7 +307,8 @@ case ${host} in\n esac\n \n case ${host} in\n-*-*-darwin* | *-*-freebsd* | *-*-netbsd* | *-*-openbsd* | *-*-solaris2*)\n+*-*-darwin* | *-*-dragonfly* | *-*-freebsd* | *-*-netbsd* | *-*-openbsd* | \\\n+  *-*-solaris2*)\n   enable_execute_stack=enable-execute-stack-mprotect.c\n   ;;\n i[34567]86-*-mingw* | x86_64-*-mingw*)\n@@ -545,6 +551,14 @@ i[34567]86-*-elf*)\n x86_64-*-elf*)\n \ttmake_file=\"$tmake_file i386/t-crtstuff t-crtstuff-pic t-libgcc-pic\"\n \t;;\n+i[34567]86-*-dragonfly*)\n+\ttmake_file=\"${tmake_file} i386/t-dragonfly i386/t-crtstuff\"\n+\tmd_unwind_header=i386/dragonfly-unwind.h\n+\t;;\n+x86_64-*-dragonfly*)\n+\ttmake_file=\"${tmake_file} i386/t-dragonfly i386/t-crtstuff\"\n+\tmd_unwind_header=i386/dragonfly-unwind.h\n+\t;;\n i[34567]86-*-freebsd*)\n \ttmake_file=\"${tmake_file} i386/t-freebsd i386/t-crtstuff\"\n \t;;\n@@ -1262,6 +1276,7 @@ i[34567]86-*-darwin* | x86_64-*-darwin* | \\\n   i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]* | \\\n   i[34567]86-*-cygwin* | x86_64-*-cygwin* | \\\n   i[34567]86-*-mingw* | x86_64-*-mingw* | \\\n+  i[34567]86-*-dragonfly* | x86_64-*-dragonfly* | \\\n   i[34567]86-*-freebsd* | x86_64-*-freebsd* | \\\n   i[34567]86-*-openbsd* | x86_64-*-openbsd*)\n   \ttmake_file=\"${tmake_file} t-softfp-tf\""}, {"sha": "cfea5e313e78a53c7b6dd79b1fa2814925579035", "filename": "libgcc/config/i386/dragonfly-unwind.h", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Fconfig%2Fi386%2Fdragonfly-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Fconfig%2Fi386%2Fdragonfly-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fdragonfly-unwind.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,180 @@\n+/* DWARF2 EH unwinding support for DragonFly BSD: AMD x86-64 and x86.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+   Contributed by John Marino <gnugcc@marino.st>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs. */\n+\n+#include <sys/types.h>\n+#include <sys/sysctl.h>\n+#include <signal.h>\n+#include <sys/ucontext.h>\n+#include <machine/sigframe.h>\n+\n+\n+#define REG_NAME(reg)\tsf_uc.uc_mcontext.mc_## reg\n+\n+#ifdef __x86_64__\n+#define MD_FALLBACK_FRAME_STATE_FOR x86_64_dragonfly_fallback_frame_state\n+\n+\n+static void\n+x86_64_sigtramp_range (unsigned char **start, unsigned char **end)\n+{\n+  unsigned long ps_strings;\n+  int mib[2];\n+  size_t len;\n+\n+  mib[0] = CTL_KERN;\n+  mib[1] = KERN_PS_STRINGS;\n+  len = sizeof (ps_strings);\n+  sysctl (mib, 2, &ps_strings, &len, NULL, 0);\n+\n+  *start = (unsigned char *)ps_strings - 32;\n+  *end   = (unsigned char *)ps_strings;\n+}\n+\n+\n+static _Unwind_Reason_Code\n+x86_64_dragonfly_fallback_frame_state\n+(struct _Unwind_Context *context, _Unwind_FrameState *fs)\n+{\n+  unsigned char *pc = context->ra;\n+  unsigned char *sigtramp_start, *sigtramp_end;\n+  struct sigframe *sf;\n+  long new_cfa;\n+\n+  x86_64_sigtramp_range(&sigtramp_start, &sigtramp_end);\n+  if (pc >= sigtramp_end || pc < sigtramp_start)\n+    return _URC_END_OF_STACK;\n+\n+  sf = (struct sigframe *) context->cfa;\n+  new_cfa = sf->REG_NAME(rsp);\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  /* Register 7 is rsp  */\n+  fs->regs.cfa_reg = 7;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n+\n+  /* The SVR4 register numbering macros aren't usable in libgcc.  */\n+  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[0].loc.offset = (long)&sf->REG_NAME(rax) - new_cfa;\n+  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[1].loc.offset = (long)&sf->REG_NAME(rdx) - new_cfa;\n+  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[2].loc.offset = (long)&sf->REG_NAME(rcx) - new_cfa;\n+  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[3].loc.offset = (long)&sf->REG_NAME(rbx) - new_cfa;\n+  fs->regs.reg[4].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[4].loc.offset = (long)&sf->REG_NAME(rsi) - new_cfa;\n+  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[5].loc.offset = (long)&sf->REG_NAME(rdi) - new_cfa;\n+  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[6].loc.offset = (long)&sf->REG_NAME(rbp) - new_cfa;\n+  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[8].loc.offset = (long)&sf->REG_NAME(r8) - new_cfa;\n+  fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[9].loc.offset = (long)&sf->REG_NAME(r9) - new_cfa;\n+  fs->regs.reg[10].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[10].loc.offset = (long)&sf->REG_NAME(r10) - new_cfa;\n+  fs->regs.reg[11].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[11].loc.offset = (long)&sf->REG_NAME(r11) - new_cfa;\n+  fs->regs.reg[12].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[12].loc.offset = (long)&sf->REG_NAME(r12) - new_cfa;\n+  fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[13].loc.offset = (long)&sf->REG_NAME(r13) - new_cfa;\n+  fs->regs.reg[14].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[14].loc.offset = (long)&sf->REG_NAME(r14) - new_cfa;\n+  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[15].loc.offset = (long)&sf->REG_NAME(r15) - new_cfa;\n+  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[16].loc.offset = (long)&sf->REG_NAME(rip) - new_cfa;\n+  fs->retaddr_column = 16;\n+  fs->signal_frame = 1;\n+  return _URC_NO_REASON;\n+}\n+\n+#else /* Next section is for i386  */\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR x86_dragonfly_fallback_frame_state\n+\n+\n+static void\n+x86_sigtramp_range (unsigned char **start, unsigned char **end)\n+{\n+  unsigned long ps_strings;\n+  int mib[2];\n+  size_t len;\n+\n+  mib[0] = CTL_KERN;\n+  mib[1] = KERN_PS_STRINGS;\n+  len = sizeof (ps_strings);\n+  sysctl (mib, 2, &ps_strings, &len, NULL, 0);\n+\n+  *start = (unsigned char *)ps_strings - 128;\n+  *end   = (unsigned char *)ps_strings;\n+}\n+\n+\n+static _Unwind_Reason_Code\n+x86_dragonfly_fallback_frame_state\n+(struct _Unwind_Context *context, _Unwind_FrameState *fs)\n+{\n+  unsigned char *pc = context->ra;\n+  unsigned char *sigtramp_start, *sigtramp_end;\n+  struct sigframe *sf;\n+  long new_cfa;\n+\n+  x86_sigtramp_range(&sigtramp_start, &sigtramp_end);\n+\n+  if (pc >= sigtramp_end || pc < sigtramp_start)\n+    return _URC_END_OF_STACK;\n+\n+  sf = (struct sigframe *) context->cfa;\n+  new_cfa = sf->REG_NAME(esp);\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 4;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n+\n+  /* The SVR4 register numbering macros aren't usable in libgcc.  */\n+  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[0].loc.offset = (long)&sf->REG_NAME(eax) - new_cfa;\n+  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[3].loc.offset = (long)&sf->REG_NAME(ebx) - new_cfa;\n+  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[1].loc.offset = (long)&sf->REG_NAME(ecx) - new_cfa;\n+  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[2].loc.offset = (long)&sf->REG_NAME(edx) - new_cfa;\n+  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[6].loc.offset = (long)&sf->REG_NAME(esi) - new_cfa;\n+  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[7].loc.offset = (long)&sf->REG_NAME(edi) - new_cfa;\n+  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[5].loc.offset = (long)&sf->REG_NAME(ebp) - new_cfa;\n+  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[8].loc.offset = (long)&sf->REG_NAME(eip) - new_cfa;\n+  fs->retaddr_column = 8;\n+  fs->signal_frame = 1;\n+  return _URC_NO_REASON;\n+}\n+#endif /* ifdef __x86_64__  */"}, {"sha": "2c56af32d607205d96f2e655ee117b312d4d8f90", "filename": "libgcc/crtstuff.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -79,11 +79,16 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n }\n #endif\n \n+#if defined(TARGET_DL_ITERATE_PHDR) && \\\n+   (defined(__DragonFly__) || defined(__FreeBSD__))\n+#define BSD_DL_ITERATE_PHDR_AVAILABLE\n+#endif\n+ \n #if defined(OBJECT_FORMAT_ELF) \\\n     && !defined(OBJECT_FORMAT_FLAT) \\\n     && defined(HAVE_LD_EH_FRAME_HDR) \\\n     && !defined(inhibit_libc) && !defined(CRTSTUFFT_O) \\\n-    && defined(__FreeBSD__) && __FreeBSD__ >= 7\n+    && defined(BSD_DL_ITERATE_PHDR_AVAILABLE)\n #include <link.h>\n # define USE_PT_GNU_EH_FRAME\n #endif"}, {"sha": "e3fb3b60afc496f419ba046f49df57310d8fe703", "filename": "libgcc/enable-execute-stack-mprotect.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Fenable-execute-stack-mprotect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Fenable-execute-stack-mprotect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fenable-execute-stack-mprotect.c?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -33,20 +33,7 @@ static int need_enable_exec_stack;\n static void check_enabling (void) __attribute__ ((unused));\n extern void __enable_execute_stack (void *);\n \n-#if defined __FreeBSD__\n-#include <sys/sysctl.h>\n-\n-static void __attribute__ ((constructor))\n-check_enabling (void)\n-{\n-  int prot = 0;\n-  size_t len = sizeof (prot);\n-\n-  sysctlbyname (\"kern.stackprot\", &prot, &len, NULL, 0);\n-  if (prot != STACK_PROT_RWX)\n-    need_enable_exec_stack = 1;\n-}\n-#elif defined __sun__ && defined __svr4__\n+#if defined __sun__ && defined __svr4__\n static void __attribute__ ((constructor))\n check_enabling (void)\n {"}, {"sha": "b7b9f9192f178e6396514b573e9d91d663ff8ab4", "filename": "libgcc/unwind-dw2-fde-dip.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Funwind-dw2-fde-dip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libgcc%2Funwind-dw2-fde-dip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde-dip.c?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -58,7 +58,8 @@\n #endif\n \n #if !defined(inhibit_libc) && defined(HAVE_LD_EH_FRAME_HDR) \\\n-    && defined(__FreeBSD__) && __FreeBSD__ >= 7\n+    && defined(TARGET_DL_ITERATE_PHDR) \\\n+    && (defined(__DragonFly__) || defined(__FreeBSD__))\n # define ElfW __ElfN\n # define USE_PT_GNU_EH_FRAME\n #endif"}, {"sha": "7dedbb494b19de66a9ed6f8951e793e8ad670d6b", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -1,3 +1,7 @@\n+2014-05-21  John Marino  <gnugcc@marino.st>\n+\n+\t* configure.tgt (*-*-dragonfly*): New target.\n+\n 2014-05-19  Richard Henderson  <rth@redhat.com>\n \n \t* config/aarch64/sjlj.S: New file."}, {"sha": "29b692f857028280d8000ffabf3104ec9cc6af91", "filename": "libitm/configure.tgt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libitm%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libitm%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.tgt?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -141,7 +141,7 @@ case \"${target}\" in\n   *-*-gnu* | *-*-k*bsd*-gnu \\\n   | *-*-netbsd* | *-*-freebsd* | *-*-openbsd* \\\n   | *-*-solaris2* | *-*-sysv4* | *-*-hpux11* \\\n-  | *-*-darwin* | *-*-aix*)\n+  | *-*-darwin* | *-*-aix* | *-*-dragonfly*)\n \t# POSIX system.  The OS is supported.\n \t;;\n "}, {"sha": "bc84abd34a0150f4ac5a82a3d6e01515a8244417", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -1,3 +1,15 @@\n+2014-05-21  John Marino  <gnugcc@marino.st>\n+\n+\t* acinclude.m4 (*-*-dragonfly*): New target.\n+\t* configure: Regenerate.\n+\t* configure.host (*-*-dragonfly*): New target.\n+\t* config/locale/dragonfly/c_locale.cc: New.\n+\t* config/locale/dragonfly/ctype_members.cc: New.\n+\t* config/os/bsd/dragonfly/ctype_base.h: New.\n+\t* config/os/bsd/dragonfly/ctype_configure_char.cc: New.\n+\t* config/os/bsd/dragonfly/ctype_inline.h: New.\n+\t* config/os/bsd/dragonfly/os_defines.h: New.\n+\n 2014-05-20  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* scripts/testsuite_flags.in (cxxflags): Remove @CXXFLAGS@ since "}, {"sha": "69b165f1805bffcacf5d46628b9f1856b5471d3f", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -1989,6 +1989,9 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n       darwin* | freebsd*)\n \tenable_clocale_flag=darwin\n \t;;\n+      dragonfly*)\n+\tenable_clocale_flag=dragonfly\n+\t;;\n       openbsd*)\n \tenable_clocale_flag=newlib\n \t;;\n@@ -2081,6 +2084,23 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n \n+    dragonfly)\n+      AC_MSG_RESULT(dragonfly)\n+\n+      CLOCALE_H=config/locale/generic/c_locale.h\n+      CLOCALE_CC=config/locale/dragonfly/c_locale.cc\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n+      CCOLLATE_CC=config/locale/generic/collate_members.cc\n+      CCTYPE_CC=config/locale/dragonfly/ctype_members.cc\n+      CMESSAGES_H=config/locale/generic/messages_members.h\n+      CMESSAGES_CC=config/locale/generic/messages_members.cc\n+      CMONEY_CC=config/locale/generic/monetary_members.cc\n+      CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n+      CTIME_CC=config/locale/generic/time_members.cc\n+      CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n+      ;;\n+\n     gnu)\n       AC_MSG_RESULT(gnu)\n "}, {"sha": "6c503db1809ea6df9d2dad0637f29e633cb8358a", "filename": "libstdc++-v3/config/locale/dragonfly/c_locale.cc", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fc_locale.cc?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,299 @@\n+// Wrapper for underlying C-language localization -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.8  Standard locale categories.\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <cerrno>  // For errno\n+#include <cmath>  // For isinf, finite, finitef, fabs\n+#include <cstdlib>  // For strof, strtold\n+#include <cstring>\n+#include <cstdio>\n+#include <locale>\n+#include <limits>\n+\n+#ifdef _GLIBCXX_HAVE_IEEEFP_H\n+#include <ieeefp.h>\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err,\n+\t\t   const __c_locale&) throw()\n+    {\n+      // Assumes __s formatted for \"C\" locale.\n+      char* __old = setlocale(LC_ALL, 0);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new char[__len];\n+      memcpy(__sav, __old, __len);\n+      setlocale(LC_ALL, \"C\");\n+      char* __sanity;\n+      bool __overflow = false;\n+\n+#if !__FLT_HAS_INFINITY__\n+      errno = 0;\n+#endif\n+\n+#ifdef _GLIBCXX_HAVE_STRTOF\n+      __v = strtof(__s, &__sanity);\n+#else\n+      double __d = strtod(__s, &__sanity);\n+      __v = static_cast<float>(__d);\n+#ifdef _GLIBCXX_HAVE_FINITEF\n+      if (!finitef (__v))\n+\t__overflow = true;\n+#elif defined (_GLIBCXX_HAVE_FINITE)\n+      if (!finite (static_cast<double> (__v)))\n+\t__overflow = true;\n+#elif defined (_GLIBCXX_HAVE_ISINF)\n+      if (isinf (static_cast<double> (__v)))\n+\t__overflow = true;\n+#else\n+      if (fabs(__d) > numeric_limits<float>::max())\n+\t__overflow = true;\n+#endif\n+#endif // _GLIBCXX_HAVE_STRTOF\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+\t{\n+\t  __v = 0.0f;\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__overflow\n+#if __FLT_HAS_INFINITY__\n+\t       || __v == numeric_limits<float>::infinity()\n+\t       || __v == -numeric_limits<float>::infinity()\n+#else\n+\t       || ((__v > 1.0f || __v < -1.0f) && errno == ERANGE)\n+#endif\n+\t      )\n+\t{\n+\t  if (__v > 0.0f)\n+\t    __v = numeric_limits<float>::max();\n+\t  else\n+\t    __v = -numeric_limits<float>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n+\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err,\n+\t\t   const __c_locale&) throw()\n+    {\n+      // Assumes __s formatted for \"C\" locale.\n+      char* __old = setlocale(LC_ALL, 0);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new char[__len];\n+      memcpy(__sav, __old, __len);\n+      setlocale(LC_ALL, \"C\");\n+      char* __sanity;\n+\n+#if !__DBL_HAS_INFINITY__\n+      errno = 0;\n+#endif\n+\n+      __v = strtod(__s, &__sanity);\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+\t{\n+\t  __v = 0.0;\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (\n+#if __DBL_HAS_INFINITY__\n+\t       __v == numeric_limits<double>::infinity()\n+\t       || __v == -numeric_limits<double>::infinity())\n+#else\n+\t       (__v > 1.0 || __v < -1.0) && errno == ERANGE)\n+#endif\n+\t{\n+\t  if (__v > 0.0)\n+\t    __v = numeric_limits<double>::max();\n+\t  else\n+\t    __v = -numeric_limits<double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n+\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n+    }\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, long double& __v,\n+\t\t   ios_base::iostate& __err, const __c_locale&) throw()\n+    {\n+      // Assumes __s formatted for \"C\" locale.\n+      char* __old = setlocale(LC_ALL, 0);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new char[__len];\n+      memcpy(__sav, __old, __len);\n+      setlocale(LC_ALL, \"C\");\n+\n+#if !__LDBL_HAS_INFINITY__\n+      errno = 0;\n+#endif\n+\n+#if defined(_GLIBCXX_HAVE_STRTOLD) && !defined(_GLIBCXX_HAVE_BROKEN_STRTOLD)\n+      char* __sanity;\n+      __v = strtold(__s, &__sanity);\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+#else\n+      typedef char_traits<char>::int_type int_type;\n+      int __p = sscanf(__s, \"%Lf\", &__v);\n+\n+      if (!__p || static_cast<int_type>(__p) == char_traits<char>::eof())\n+#endif\n+\t{\n+\t  __v = 0.0l;\n+\t  __err = ios_base::failbit;\n+\t}\n+       else if (\n+#if __LDBL_HAS_INFINITY__\n+\t\t__v == numeric_limits<long double>::infinity()\n+\t\t|| __v == -numeric_limits<long double>::infinity())\n+#else\n+\t\t(__v > 1.0l || __v < -1.0l) && errno == ERANGE)\n+#endif\n+\t{\n+\t  if (__v > 0.0l)\n+\t    __v = numeric_limits<long double>::max();\n+\t  else\n+\t    __v = -numeric_limits<long double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n+\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n+    }\n+\n+\n+  /*  DragonFly's implementation of setlocale won't accept something like\n+      \"de_DE\".  According to nls manpage, the expected format is:\n+      language[_territory][.codeset][@modifier], but it seems that both\n+      the _territory and .codeset components are required.\n+      \n+      As an attempt to correct for this, we'll tack on \".UTF-8\" if \n+      a period is not detected in the locale string.  \n+\n+      There are no locales with modifiers on DragonFly so if found, they\n+      will just be stripped off silently.  e.g \"de_DE@euro\" will be reduced\n+      to \"de_DE\".  The UTF-8 default would be added after that.\n+  */\n+\n+  void\n+  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s,\n+\t\t\t\t    __c_locale)\n+  {\n+    const size_t size__s = (__s == NULL) ? 1 : strlen (__s);\n+    const char UTF8[] = \".UTF-8\";\n+    char localspec[size__s + 6 + 1];\n+    \n+    if (__s == NULL) {\n+       localspec[0] = NULL;\n+    } else {\n+       strcpy (localspec, __s);\n+       char * pch = strchr (localspec, '@');\n+       if (pch != NULL)\n+          *pch = 0;\n+\n+       if (  (strchr (__s, '.') == NULL)\n+          && (strcmp (__s, \"C\") != 0)\n+          && (strcmp (__s, \"POSIX\") != 0))\n+          strncat (localspec, UTF8, 6);\n+    }\n+\n+    const char * result = std::setlocale(LC_ALL, localspec);\n+    \n+    if ((strcmp(result, \"C\") != 0) && (strcmp (result, localspec) != 0))\n+      __throw_runtime_error(__N(\"locale::facet::_S_create_c_locale \"\n+\t\t\t    \"name not valid\"));\n+    __cloc = 0;\n+  }\n+\n+  void\n+  locale::facet::_S_destroy_c_locale(__c_locale& __cloc)\n+  { __cloc = 0; }\n+\n+  __c_locale\n+  locale::facet::_S_clone_c_locale(__c_locale&) throw()\n+  { return __c_locale(); }\n+\n+  __c_locale\n+  locale::facet::_S_lc_ctype_c_locale(__c_locale, const char*)\n+  { return __c_locale(); }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n+    {\n+      \"LC_CTYPE\",\n+      \"LC_NUMERIC\",\n+      \"LC_TIME\",\n+      \"LC_COLLATE\",\n+      \"LC_MONETARY\",\n+      \"LC_MESSAGES\"\n+    };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl)))\n+_GLIBCXX_LDBL_COMPAT(_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKPi, _ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKPi);\n+#endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "4fe58fbd8dcc2c0a4db798f6820dbdf1cefcf97c", "filename": "libstdc++-v3/config/locale/dragonfly/ctype_members.cc", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdragonfly%2Fctype_members.cc?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,173 @@\n+// std::ctype implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.2.1.1.2  ctype virtual functions.\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+#include <bits/c++locale_internal.h>\n+#include <cstdlib>\n+#include <cstring>\n+#include <cstdio>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+  // NB: The other ctype<char> specializations are in src/locale.cc and\n+  // various /config/os/* files.\n+\n+  ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n+  : ctype<char>(0, false, __refs) \n+  { \t\t\n+    if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+      {\n+\tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+      }\n+  }\n+\n+  ctype_byname<char>::~ctype_byname()\n+  { }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T  \n+  ctype<wchar_t>::__wmask_type\n+  ctype<wchar_t>::_M_convert_to_wmask(\n+    const mask __attribute__((__unused__)) __m) const throw()\n+  {\n+    // DragonFly uses the same codes for 'char' as 'wchar_t', so this routine\n+    // never gets called.\n+    return __wmask_type();\n+  };\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_toupper(wchar_t __c) const\n+  { return towupper(__c); }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::do_toupper(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+        *__lo = towupper(*__lo);\n+        ++__lo;\n+      }\n+    return __hi;\n+  }\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_tolower(wchar_t __c) const\n+  { return towlower(__c); }\n+  \n+  const wchar_t*\n+  ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+        *__lo = towlower(*__lo);\n+        ++__lo;\n+      }\n+    return __hi;\n+  }\n+\n+  wchar_t\n+  ctype<wchar_t>::\n+  do_widen(char __c) const\n+  { return _M_widen[static_cast<unsigned char>(__c)]; }\n+\n+  const char* \n+  ctype<wchar_t>::\n+  do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n+  {\n+    while (__lo < __hi)\n+      {\n+\t*__dest = _M_widen[static_cast<unsigned char>(*__lo)];\n+\t++__lo;\n+\t++__dest;\n+      }\n+    return __hi;\n+  }\n+\n+  char\n+  ctype<wchar_t>::\n+  do_narrow(wchar_t __wc, char __dfault) const\n+  { \n+    if (__wc >= 0 && __wc < 128 && _M_narrow_ok)\n+      return _M_narrow[__wc];\n+    const int __c = wctob(__wc);\n+    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n+\t    char* __dest) const\n+  {\n+    if (_M_narrow_ok)\n+      while (__lo < __hi)\n+\t{\n+\t  if (*__lo >= 0 && *__lo < 128)\n+\t    *__dest = _M_narrow[*__lo];\n+\t  else\n+\t    {\n+\t      const int __c = wctob(*__lo);\n+\t      *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t    }\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    else\n+      while (__lo < __hi)\n+\t{\n+\t  const int __c = wctob(*__lo);\n+\t  *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    return __hi;\n+  }\n+\n+  void\n+  ctype<wchar_t>::_M_initialize_ctype() throw()\n+  {\n+    wint_t __i;\n+    for (__i = 0; __i < 128; ++__i)\n+      {\n+\tconst int __c = wctob(__i);\n+\tif (__c == EOF)\n+\t  break;\n+\telse\n+\t  _M_narrow[__i] = static_cast<char>(__c);\n+      }\n+    if (__i == 128)\n+      _M_narrow_ok = true;\n+    else\n+      _M_narrow_ok = false;\n+    for (size_t __i = 0;\n+\t __i < sizeof(_M_widen) / sizeof(wint_t); ++__i)\n+      _M_widen[__i] = btowc(__i);\n+  }\n+#endif //  _GLIBCXX_USE_WCHAR_T\n+}"}, {"sha": "a95b248d0162f602c25371bde40265dcafd9b760", "filename": "libstdc++-v3/config/os/bsd/dragonfly/ctype_base.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_base.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,58 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// Information as gleaned from /usr/include/ctype.h on DragonFly.\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /// @brief  Base class for ctype.\n+  struct ctype_base\n+  {\n+    // Non-standard typedefs.\n+    typedef const int*\t\t__to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned long\tmask;\n+    static const mask upper\t= _CTYPE_U;\n+    static const mask lower \t= _CTYPE_L;\n+    static const mask alpha \t= _CTYPE_A;\n+    static const mask digit \t= _CTYPE_D;\n+    static const mask xdigit \t= _CTYPE_X;\n+    static const mask space \t= _CTYPE_S;\n+    static const mask print \t= _CTYPE_R;\n+    static const mask graph \t= _CTYPE_A | _CTYPE_D | _CTYPE_P;\n+    static const mask cntrl \t= _CTYPE_C;\n+    static const mask punct \t= _CTYPE_P;\n+    static const mask alnum \t= _CTYPE_A | _CTYPE_D;\n+  };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "11fa22e737eacacbfca2e232e78cc24a12509952", "filename": "libstdc++-v3/config/os/bsd/dragonfly/ctype_configure_char.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_configure_char.cc?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,99 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ctype_configure_char.cc */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+#include <locale>\n+#include <cstdlib>\n+#include <cstring>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+// Information as gleaned from /usr/include/ctype.h\n+  \n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  { return 0; }\n+\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : facet(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), \n+  _M_table(__table ? __table : classic_table()) \n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n+  : facet(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), \n+  _M_table(__table ? __table : classic_table()) \n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return ::toupper((int) __c); }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::toupper((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return ::tolower((int) __c); }\n+\n+  const char* \n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::tolower((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "984665ef948496381481ad2ad90e8f4251943d70", "filename": "libstdc++-v3/config/os/bsd/dragonfly/ctype_inline.h", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fctype_inline.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,133 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/ctype_inline.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  {\n+    if (_M_table)\n+      return _M_table[static_cast<unsigned char>(__c)] & __m;\n+    else\n+      return __istype(__c, __m);\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    if (_M_table)\n+      while (__low < __high)\n+\t*__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n+    else\n+      for (;__low < __high; ++__vec, ++__low)\n+\t{\n+\t  *__vec = __maskrune (*__low, upper | lower | alpha | digit | xdigit\n+\t\t\t       | space | print | graph | cntrl | punct | alnum);\n+\t}\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    if (_M_table)\n+      while (__low < __high\n+\t     && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n+\t++__low;\n+    else\n+      while (__low < __high && !this->is(__m, *__low))\n+\t++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    if (_M_table)\n+      while (__low < __high\n+\t     && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n+\t++__low;\n+    else\n+      while (__low < __high && this->is(__m, *__low) != 0)\n+\t++__low;\n+    return __low;\n+  }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  inline bool\n+  ctype<wchar_t>::\n+  do_is(mask __m, wchar_t __c) const\n+  {\n+    return __istype (__c, __m);\n+  }\n+\n+  inline const wchar_t*\n+  ctype<wchar_t>::\n+  do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const\n+  {\n+    for (; __lo < __hi; ++__vec, ++__lo)\n+      *__vec = __maskrune (*__lo, upper | lower | alpha | digit | xdigit\n+\t\t\t   | space | print | graph | cntrl | punct | alnum);\n+    return __hi;\n+  }\n+\n+  inline const wchar_t*\n+  ctype<wchar_t>::\n+  do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi && ! __istype (*__lo, __m))\n+      ++__lo;\n+    return __lo;\n+  }\n+\n+  inline const wchar_t*\n+  ctype<wchar_t>::\n+  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+  {\n+    while (__lo < __hi && __istype (*__lo, __m))\n+      ++__lo;\n+    return __lo;\n+  }\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "9160eeb12544c9991d67eda4bafcac2c2c9986ec", "filename": "libstdc++-v3/config/os/bsd/dragonfly/os_defines.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdragonfly%2Fos_defines.h?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -0,0 +1,32 @@\n+// Specific definitions for BSD  -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+#endif"}, {"sha": "32ba6145f61ae7c78332063ad22f9859100fe8f2", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -15849,6 +15849,9 @@ fi\n       darwin* | freebsd*)\n \tenable_clocale_flag=darwin\n \t;;\n+      dragonfly*)\n+\tenable_clocale_flag=dragonfly\n+\t;;\n       openbsd*)\n \tenable_clocale_flag=newlib\n \t;;\n@@ -15994,6 +15997,24 @@ $as_echo \"darwin or freebsd\" >&6; }\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n \n+    dragonfly)\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: dragonfly\" >&5\n+$as_echo \"dragonfly\" >&6; }\n+\n+      CLOCALE_H=config/locale/generic/c_locale.h\n+      CLOCALE_CC=config/locale/dragonfly/c_locale.cc\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n+      CCOLLATE_CC=config/locale/generic/collate_members.cc\n+      CCTYPE_CC=config/locale/dragonfly/ctype_members.cc\n+      CMESSAGES_H=config/locale/generic/messages_members.h\n+      CMESSAGES_CC=config/locale/generic/messages_members.cc\n+      CMONEY_CC=config/locale/generic/monetary_members.cc\n+      CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n+      CTIME_CC=config/locale/generic/time_members.cc\n+      CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n+      ;;\n+\n     gnu)\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: gnu\" >&5\n $as_echo \"gnu\" >&6; }"}, {"sha": "a12871aa365fd36f1cb078604fca21220a1efadb", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=dbed5a9bffce4f2c875abc4f9f502ed339aa0ae0", "patch": "@@ -260,6 +260,9 @@ case \"${host_os}\" in\n     os_include_dir=\"os/djgpp\"\n     error_constants_dir=\"os/djgpp\"\n     ;;\n+  dragonfly*)\n+    os_include_dir=\"os/bsd/dragonfly\"\n+    ;;\n   freebsd*)\n     os_include_dir=\"os/bsd/freebsd\"\n     ;;"}]}