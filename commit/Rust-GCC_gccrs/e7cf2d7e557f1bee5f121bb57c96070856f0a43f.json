{"sha": "e7cf2d7e557f1bee5f121bb57c96070856f0a43f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjZjJkN2U1NTdmMWJlZTVmMTIxYmI1N2M5NjA3MDg1NmYwYTQzZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-02-08T10:49:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-02-08T10:49:05Z"}, "message": "(MUST_PASS_IN_STACK_BAD_ALIGN): Deleted.\n\n(MUST_PASS_IN_STACK): No problem anymore with nonaligned structs.\n\nFrom-SVN: r3438", "tree": {"sha": "d1532a33d142e36bcb797becc233ccc9cd1b4b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1532a33d142e36bcb797becc233ccc9cd1b4b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7cf2d7e557f1bee5f121bb57c96070856f0a43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cf2d7e557f1bee5f121bb57c96070856f0a43f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7cf2d7e557f1bee5f121bb57c96070856f0a43f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cf2d7e557f1bee5f121bb57c96070856f0a43f/comments", "author": null, "committer": null, "parents": [{"sha": "522ae84c3d96ed02964c532a87d9fb20a0432a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522ae84c3d96ed02964c532a87d9fb20a0432a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522ae84c3d96ed02964c532a87d9fb20a0432a17"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "cd3658b9812ba49a0fcc4abb33c01e58d1e28104", "filename": "gcc/expr.h", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cf2d7e557f1bee5f121bb57c96070856f0a43f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cf2d7e557f1bee5f121bb57c96070856f0a43f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e7cf2d7e557f1bee5f121bb57c96070856f0a43f", "patch": "@@ -202,19 +202,11 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n    - if the type is marked as addressable (it is required to be constructed\n      into the stack)\n    - if the padding and mode of the type is such that a copy into a register\n-     would put it into the wrong part of the register\n-   - when STRICT_ALIGNMENT and the type is BLKmode and is is not\n-     aligned to a boundary corresponding to what can be loaded into a\n-     register.  */\n-\n-#define MUST_PASS_IN_STACK_BAD_ALIGN(MODE,TYPE)\t\t\t\\\n-  (STRICT_ALIGNMENT && MODE == BLKmode\t\t\t        \\\n-   && TYPE_ALIGN (TYPE) < (BIGGEST_ALIGNMENT < BITS_PER_WORD\t\\\n-\t\t\t   ? BIGGEST_ALIGNMENT : BITS_PER_WORD))\n-  \n-/* Which padding can't be supported depends on the byte endianness.  */\n+     would put it into the wrong part of the register.\n+\n+/* Which padding can't be supported depends on the byte endianness.\n \n-/* A value in a register is implicitly padded at the most significant end.\n+   A value in a register is implicitly padded at the most significant end.\n    On a big-endian machine, that is the lower end in memory.\n    So a value padded in memory at the upper end can't go in a register.\n    For a little-endian machine, the reverse is true.  */\n@@ -231,8 +223,7 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n        || TREE_ADDRESSABLE (TYPE)\t\t\t\\\n        || ((MODE) == BLKmode \t\t\t\t\\\n \t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n-\t       == MUST_PASS_IN_STACK_BAD_PADDING))\t\\\n-       || MUST_PASS_IN_STACK_BAD_ALIGN (MODE, TYPE)))\n+\t       == MUST_PASS_IN_STACK_BAD_PADDING))))\n \n /* Nonzero if type TYPE should be returned in memory\n    (even though its mode is not BLKmode)."}]}