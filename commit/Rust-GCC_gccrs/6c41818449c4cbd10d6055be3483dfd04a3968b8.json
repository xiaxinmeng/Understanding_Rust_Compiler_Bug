{"sha": "6c41818449c4cbd10d6055be3483dfd04a3968b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0MTgxODQ0OWM0Y2JkMTBkNjA1NWJlMzQ4M2RmZDA0YTM5NjhiOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-01-10T23:06:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-01-10T23:06:30Z"}, "message": "output.h (make_function_rtl): Remove prototype.\n\n\t* output.h (make_function_rtl): Remove prototype.\n\t(make_decl_rtl): Likewise.\n\t* varasm.c (make_function_rtl): Remove.\n\t(make_decl_rtl): Determine top-levelness from DECL_CONTEXT, rather\n\tthan from a third parameter.\n\t* tree.h (make_decl_rtl): Remove last parameter.\n\t* c-decl.c (builtin_function): Remove last argument in call to\n\tmake_decl_rtl; use make_function_rtl instead of make_decl_rtl.\n\t(start_function): Likewise.\n\t* except.c (call_get_eh_context): Likewise.\n\t* expr.c (emit_block_move): Likewise.\n\t(clear_storage): Likewise.\n\t* profile.c (output_func_start_profiler): Likewise.\n\t* toplev.c (rest_of_decl_compilation): Likewise.\n\t* objc/objc-act.c (create_builtin_decl): Likewise.\n\t(synth_module_prologue): Likewise.\n\t(generate_static_reference): Likewise.\n\t(build_selector_reference_decl): Likewise.\n\t(build_class_reference_decl): Likewise.\n\t(build_objc_string_decl): Likewise.\n\t(build_protocol_reference): Likewise.\n\n\t* class.c (finish_struct_1):  Remove last argument in call to\n\tmake_decl_rtl; use make_function_rtl instead of make_decl_rtl.\n\t* decl.c (builtin_function): Likewise.\n\t(build_cp_library_fn): Likewise.\n\t(check_initializer): Likewise.\n\t(make_rtl_for_nonlocal_decl): Likewise.\n\t(cp_finish_decl): Likewise.\n\t(start_function): Likewise.\n\t* decl2.c (finish_anon_union): Likewise.\n\t* friend.c (do_friend): Likewise.\n\t* init.c (build_java_class_ref): Likewise.\n\t* method.c (make_thunk): Likewise.\n\t* pt.c (tsubst_friend_function): Likewise.\n\t* semantics.c (expand_body): Likewise.\n\n\t* com.c (ffecom_init_zero_):  Remove last argument in call to\n\tmake_decl_rtl; use make_function_rtl instead of make_decl_rtl.\n\t(ffecom_lookup_label_): Likewise.\n\t(builtin_function): Likewise.\n\t(start_function): Likewise.\n\n\t* class.c (build_utf8_ref): Remove last argument in call to\n\tmake_decl_rtl; use make_function_rtl instead of make_decl_rtl.\n\t(build_class_ref): Likewise.\n\t(build_static_field_ref): Likewise.\n\t(get_dispatch_table): Likewise.\n\t(layout_class_method): Likewise.\n\t(emit_register_classes): Likewise.\n\t* constants.c (build_constant_data_ref): Likewise.\n\t* decl.c (builtin_function): Likewise.\n\t(create_primitive_vtable): Likewise.\n\t* expr.c (build_known_method_def): Likewise.\n\t(build_jni_stub): Likewise.\n\t(java_lang_expand_expr): Likewise.\n\nFrom-SVN: r38884", "tree": {"sha": "602d2ffa2a02cf8b77e1223d2c61011896bd5d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602d2ffa2a02cf8b77e1223d2c61011896bd5d0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c41818449c4cbd10d6055be3483dfd04a3968b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c41818449c4cbd10d6055be3483dfd04a3968b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c41818449c4cbd10d6055be3483dfd04a3968b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c41818449c4cbd10d6055be3483dfd04a3968b8/comments", "author": null, "committer": null, "parents": [{"sha": "4621c6409a272fad98a78187c26dda887707b3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4621c6409a272fad98a78187c26dda887707b3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4621c6409a272fad98a78187c26dda887707b3ed"}], "stats": {"total": 281, "additions": 127, "deletions": 154}, "files": [{"sha": "94b3a1af5df6c3afb154e30df65ac32a78cdcb44", "filename": "fastjar/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/fastjar%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/fastjar%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fastjar%2FMakefile.in?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -324,7 +324,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "372389991e90baef6c03cb63ad638daa78f0c86c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,3 +1,27 @@\n+2001-01-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* output.h (make_function_rtl): Remove prototype.\n+\t(make_decl_rtl): Likewise.\n+\t* varasm.c (make_function_rtl): Remove.\n+\t(make_decl_rtl): Determine top-levelness from DECL_CONTEXT, rather\n+\tthan from a third parameter.\n+\t* tree.h (make_decl_rtl): Remove last parameter.\n+\t* c-decl.c (builtin_function): Remove last argument in call to\n+\tmake_decl_rtl; use make_function_rtl instead of make_decl_rtl.\n+\t(start_function): Likewise.\n+\t* except.c (call_get_eh_context): Likewise.\n+\t* expr.c (emit_block_move): Likewise.\n+\t(clear_storage): Likewise.\n+\t* profile.c (output_func_start_profiler): Likewise.\n+\t* toplev.c (rest_of_decl_compilation): Likewise.\n+\t* objc/objc-act.c (create_builtin_decl): Likewise.\n+\t(synth_module_prologue): Likewise.\n+\t(generate_static_reference): Likewise.\n+\t(build_selector_reference_decl): Likewise.\n+\t(build_class_reference_decl): Likewise.\n+\t(build_objc_string_decl): Likewise.\n+\t(build_protocol_reference): Likewise.\n+\n 2001-01-10  Richard Henderson  <rth@redhat.com>\n \n \t* hwint.h: Revert yesterday's change."}, {"sha": "bcd414e03cc3efa6b3d239464e55924f54d33462", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -3152,7 +3152,7 @@ builtin_function (name, type, function_code, class, library_name)\n     DECL_BUILT_IN_NONANSI (decl) = 1;\n   if (library_name)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (library_name);\n-  make_decl_rtl (decl, NULL_PTR, 1);\n+  make_decl_rtl (decl, NULL_PTR);\n   pushdecl (decl);\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = function_code;\n@@ -5951,7 +5951,7 @@ start_function (declspecs, declarator, prefix_attributes, attributes)\n   declare_parm_level (1);\n   current_binding_level->subblocks_tag_transparent = 1;\n \n-  make_function_rtl (current_function_decl);\n+  make_decl_rtl (current_function_decl, NULL);\n \n   restype = TREE_TYPE (TREE_TYPE (current_function_decl));\n   /* Promote the value to int before returning it.  */"}, {"sha": "fa3b5ed270ecd4823b85cd3e2eb0d1e8870f69ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,3 +1,20 @@\n+2001-01-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (finish_struct_1):  Remove last argument in call to\n+\tmake_decl_rtl; use make_function_rtl instead of make_decl_rtl.\n+\t* decl.c (builtin_function): Likewise.\n+\t(build_cp_library_fn): Likewise.\n+\t(check_initializer): Likewise.\n+\t(make_rtl_for_nonlocal_decl): Likewise.\n+\t(cp_finish_decl): Likewise.\n+\t(start_function): Likewise.\n+\t* decl2.c (finish_anon_union): Likewise.\n+\t* friend.c (do_friend): Likewise.\n+\t* init.c (build_java_class_ref): Likewise.\n+\t* method.c (make_thunk): Likewise.\n+\t* pt.c (tsubst_friend_function): Likewise.\n+\t* semantics.c (expand_body): Likewise.\n+\n 2001-01-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (DECL_CLONED_FUNCTION_P): Avoid wild reads by not"}, {"sha": "888e8ae6c53b837e3f1a1d279bcbc06a33b39d7c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -5244,7 +5244,7 @@ finish_struct_1 (t)\n \t  && TREE_TYPE (x) == t)\n \t{\n \t  DECL_MODE (x) = TYPE_MODE (t);\n-\t  make_decl_rtl (x, NULL, 0);\n+\t  make_decl_rtl (x, NULL);\n \t}\n     }\n "}, {"sha": "dfe69acb6a3509c2fb3092f54dc4646a878cb31f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -6671,7 +6671,7 @@ builtin_function (name, type, code, class, libname)\n      function in the namespace.  */\n   if (libname)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (libname);\n-  make_function_rtl (decl);\n+  make_decl_rtl (decl, NULL);\n \n   /* Warn if a function in the namespace for users\n      is used without an occasion to consider it declared.  */\n@@ -6709,7 +6709,7 @@ build_library_fn (name, type)\n      tree type;\n {\n   tree fn = build_library_fn_1 (name, ERROR_MARK, type);\n-  make_function_rtl (fn);\n+  make_decl_rtl (fn, NULL);\n   return fn;\n }\n \n@@ -6725,7 +6725,7 @@ build_cp_library_fn (name, operator_code, type)\n   TREE_NOTHROW (fn) = TYPE_NOTHROW_P (type);\n   DECL_CONTEXT (fn) = FROB_CONTEXT (current_namespace);\n   set_mangled_name_for_decl (fn);\n-  make_function_rtl (fn);\n+  make_decl_rtl (fn, NULL);\n   return fn;\n }\n \n@@ -7612,7 +7612,7 @@ check_initializer (decl, init)\n   else if (!DECL_EXTERNAL (decl) && TREE_CODE (type) == REFERENCE_TYPE)\n     {\n       if (TREE_STATIC (decl))\n-\tmake_decl_rtl (decl, NULL_PTR, toplevel_bindings_p ());\n+\tmake_decl_rtl (decl, NULL_PTR);\n       grok_reference_init (decl, type, init);\n       init = NULL_TREE;\n     }\n@@ -7739,7 +7739,7 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n   /* If we're deferring the variable, just make RTL.  Do not actually\n      emit the variable.  */\n   if (defer_p)\n-    make_decl_rtl (decl, asmspec, toplev);\n+    make_decl_rtl (decl, asmspec);\n   /* If we're not deferring, go ahead and assemble the variable.  */\n   else\n     rest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n@@ -8020,7 +8020,7 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n \t grokclassfn.  Lay this out fresh.  */\n       DECL_RTL (TREE_TYPE (decl)) = NULL_RTX;\n       DECL_ASSEMBLER_NAME (decl) = get_identifier (asmspec);\n-      make_decl_rtl (decl, asmspec, 0);\n+      make_decl_rtl (decl, asmspec);\n     }\n \n   /* Deduce size of array from initialization, if not already known.  */\n@@ -13598,7 +13598,7 @@ start_function (declspecs, declarator, attrs, flags)\n \n   /* We need to do this even if we aren't expanding yet so that\n      assemble_external works.  */\n-  make_function_rtl (decl1);\n+  make_decl_rtl (decl1, NULL);\n \n   /* Promote the value to int before returning it.  */\n   if (C_PROMOTING_INTEGER_TYPE_P (restype))"}, {"sha": "e09905672c3e904fa69fd1ea8c0a0e881fb08b04", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -2227,7 +2227,7 @@ finish_anon_union (anon_union_decl)\n \n   if (static_p)\n     {\n-      make_decl_rtl (main_decl, 0, toplevel_bindings_p ());\n+      make_decl_rtl (main_decl, 0);\n       DECL_RTL (anon_union_decl) = DECL_RTL (main_decl);\n       expand_anon_union_decl (anon_union_decl, \n \t\t\t      NULL_TREE,"}, {"sha": "df3281e65cc8e587f82e0ec615a1ea24e931cc29", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,5 +1,5 @@\n /* Help friends in C++.\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -409,7 +409,7 @@ do_friend (ctype, declarator, decl, parmdecls, attrlist,\n \t    }\n \t}\n \n-      make_decl_rtl (decl, NULL_PTR, 1);\n+      make_decl_rtl (decl, NULL_PTR);\n       add_friend (current_class_type, \n \t\t  is_friend_template ? DECL_TI_TEMPLATE (decl) : decl);\n       DECL_FRIEND_P (decl) = 1;"}, {"sha": "98f4bbdeaa5c88474df51cb78d3db889a9436d38", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -2233,7 +2233,7 @@ build_java_class_ref (type)\n       DECL_ARTIFICIAL (class_decl) = 1;\n       DECL_IGNORED_P (class_decl) = 1;\n       pushdecl_top_level (class_decl);\n-      make_decl_rtl (class_decl, NULL_PTR, 1);\n+      make_decl_rtl (class_decl, NULL_PTR);\n     }\n   return class_decl;\n }"}, {"sha": "3e6b3ccf20e252d386a9807ce2f8eb57e999f38d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -2177,7 +2177,7 @@ make_thunk (function, delta, vcall_index, generate_with_vtable_p)\n       /* So that finish_file can write out any thunks that need to be: */\n       pushdecl_top_level (thunk);\n       /* Create RTL for this thunk so that its address can be taken.  */\n-      make_function_rtl (thunk);\n+      make_decl_rtl (thunk, NULL);\n     }\n   return thunk;\n }"}, {"sha": "a6a93819f68676790b8d6c4fcaeebaf0fbe898ee", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -4525,7 +4525,7 @@ tsubst_friend_function (decl, args)\n     {\n       set_mangled_name_for_decl (new_friend);\n       DECL_RTL (new_friend) = 0;\n-      make_decl_rtl (new_friend, NULL_PTR, 1);\n+      make_decl_rtl (new_friend, NULL_PTR);\n     }\n       \n   if (DECL_NAMESPACE_SCOPE_P (new_friend))\n@@ -5789,7 +5789,7 @@ tsubst_decl (t, args, type, in_decl)\n \t      }\n \t    \n \t    DECL_RTL (r) = 0;\n-\t    make_decl_rtl (r, NULL_PTR, 1);\n+\t    make_decl_rtl (r, NULL_PTR);\n \t    \n \t    /* Like grokfndecl.  If we don't do this, pushdecl will\n \t       mess up our TREE_CHAIN because it doesn't find a"}, {"sha": "cf882792ad13dcb8d141f50d6e8eb12cbda4f978", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -3,7 +3,7 @@\n    building RTL.  These routines are used both during actual parsing\n    and during the instantiation of template functions. \n \n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Written by Mark Mitchell (mmitchell@usa.net) based on code found\n    formerly in parse.y and pt.c.  \n \n@@ -2367,7 +2367,7 @@ expand_body (fn)\n     {\n       /* Give the function RTL now so that we can assign it to a\n \t function pointer, etc.  */\n-      make_function_rtl (fn);\n+      make_decl_rtl (fn, NULL);\n       /* Set DECL_EXTERNAL so that assemble_external will be called as\n \t necessary.  We'll clear it again in finish_file.  */\n       if (!DECL_EXTERNAL (fn))"}, {"sha": "5c666d4da55877e3a738c29ad07b791e48b1c329", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1156,7 +1156,7 @@ call_get_eh_context ()\n       TREE_PUBLIC (fn) = 1;\n       DECL_ARTIFICIAL (fn) = 1;\n       TREE_READONLY (fn) = 1;\n-      make_decl_rtl (fn, NULL_PTR, 1);\n+      make_decl_rtl (fn, NULL_PTR);\n       assemble_external (fn);\n \n       ggc_add_tree_root (&fn, 1);"}, {"sha": "5a396f14f6b32e5568b1156e98f007a4851afb55", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1758,7 +1758,7 @@ emit_block_move (x, y, size, align)\n \t  DECL_EXTERNAL (fn) = 1;\n \t  TREE_PUBLIC (fn) = 1;\n \t  DECL_ARTIFICIAL (fn) = 1;\n-\t  make_decl_rtl (fn, NULL_PTR, 1);\n+\t  make_decl_rtl (fn, NULL_PTR);\n \t  assemble_external (fn);\n \t}\n \n@@ -2655,7 +2655,7 @@ clear_storage (object, size, align)\n \t      DECL_EXTERNAL (fn) = 1;\n \t      TREE_PUBLIC (fn) = 1;\n \t      DECL_ARTIFICIAL (fn) = 1;\n-\t      make_decl_rtl (fn, NULL_PTR, 1);\n+\t      make_decl_rtl (fn, NULL_PTR);\n \t      assemble_external (fn);\n \t    }\n "}, {"sha": "73898437074fed19be35a2151645c1d3299689c7", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,3 +1,11 @@\n+Wed Jan 10 14:39:45 2001  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* com.c (ffecom_init_zero_):  Remove last argument in call to\n+\tmake_decl_rtl; use make_function_rtl instead of make_decl_rtl.\n+\t(ffecom_lookup_label_): Likewise.\n+\t(builtin_function): Likewise.\n+\t(start_function): Likewise.\n+\n Thu Dec 21 21:19:42 2000  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* g77install.texi, g77.texi: Update last-updated dates for"}, {"sha": "719df1fb5a159441aaf139844186ae7378081aa8", "filename": "gcc/f/com.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -6460,7 +6460,7 @@ ffecom_init_zero_ (tree decl)\n \n   if (incremental)\n     {\n-      make_decl_rtl (decl, NULL, TREE_PUBLIC (decl) ? 1 : 0);\n+      make_decl_rtl (decl, NULL);\n       assemble_variable (decl, TREE_PUBLIC (decl) ? 1 : 0, 0, 1);\n     }\n \n@@ -12266,7 +12266,7 @@ ffecom_lookup_label (ffelab label)\n \t  TREE_STATIC (glabel) = 1;\n \t  DECL_CONTEXT (glabel) = 0;\n \t  DECL_INITIAL (glabel) = NULL;\n-\t  make_decl_rtl (glabel, NULL, 0);\n+\t  make_decl_rtl (glabel, NULL);\n \t  expand_decl (glabel);\n \n \t  ffecom_save_tree_forever (glabel);\n@@ -13568,7 +13568,7 @@ builtin_function (const char *name, tree type, int function_code,\n   TREE_PUBLIC (decl) = 1;\n   if (library_name)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (library_name);\n-  make_decl_rtl (decl, NULL_PTR, 1);\n+  make_decl_rtl (decl, NULL_PTR);\n   pushdecl (decl);\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = function_code;\n@@ -14426,7 +14426,7 @@ start_function (tree name, tree type, int nested, int public)\n \n   if (TREE_CODE (current_function_decl) != ERROR_MARK)\n     {\n-      make_function_rtl (current_function_decl);\n+      make_decl_rtl (current_function_decl, NULL);\n \n       restype = TREE_TYPE (TREE_TYPE (current_function_decl));\n       DECL_RESULT (current_function_decl)"}, {"sha": "bf0b323c2888194233645661d63bdbdbdb3e1a7a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,3 +1,19 @@\n+2001-01-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (build_utf8_ref): Remove last argument in call to\n+\tmake_decl_rtl; use make_function_rtl instead of make_decl_rtl.\n+\t(build_class_ref): Likewise.\n+\t(build_static_field_ref): Likewise.\n+\t(get_dispatch_table): Likewise.\n+\t(layout_class_method): Likewise.\n+\t(emit_register_classes): Likewise.\n+\t* constants.c (build_constant_data_ref): Likewise.\n+\t* decl.c (builtin_function): Likewise.\n+\t(create_primitive_vtable): Likewise.\n+\t* expr.c (build_known_method_def): Likewise.\n+\t(build_jni_stub): Likewise.\n+\t(java_lang_expand_expr): Likewise.\n+\t\n 2001-01-10  Tom Tromey  <tromey@redhat.com>\n \n \t* jvspec.c (jvgenmain_spec): Omit -fencoding from cc1 invocation."}, {"sha": "dbf3f4ea192945506a53646e4e1220afcb550dba", "filename": "gcc/java/class.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,5 +1,5 @@\n /* Functions related to building classes and their related objects.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -855,7 +855,7 @@ build_utf8_ref (name)\n   pushdecl (decl);\n   rest_of_decl_compilation (decl, (char*) 0, global_bindings_p (), 0);\n   utf8_decl_list = decl;\n-  make_decl_rtl (decl, (char*) 0, 1);\n+  make_decl_rtl (decl, (char*) 0);\n   ref = build1 (ADDR_EXPR, utf8const_ptr_type, decl);\n   IDENTIFIER_UTF8_REF (name) = ref;\n   return ref;\n@@ -891,7 +891,7 @@ build_class_ref (type)\n \t      DECL_IGNORED_P (decl) = 1;\n \t      DECL_ARTIFICIAL (decl) = 1;\n \t      DECL_ASSEMBLER_NAME (decl) = mangle_class_field (type);\n-\t      make_decl_rtl (decl, NULL, 1);\n+\t      make_decl_rtl (decl, NULL);\n \t      pushdecl_top_level (decl);\n \t      if (is_compiled == 1)\n \t\tDECL_EXTERNAL (decl) = 1;\n@@ -943,7 +943,7 @@ build_class_ref (type)\n \t      decl = build_decl (VAR_DECL, decl_name, class_type_node);\n \t      TREE_STATIC (decl) = 1;\n \t      TREE_PUBLIC (decl) = 1;\n-\t      make_decl_rtl (decl, NULL, 1);\n+\t      make_decl_rtl (decl, NULL);\n \t      pushdecl_top_level (decl);\n \t      if (is_compiled == 1)\n \t\tDECL_EXTERNAL (decl) = 1;\n@@ -974,7 +974,7 @@ build_static_field_ref (fdecl)\n     {\n       if (DECL_RTL (fdecl) == 0)\n \t{\n-\t  make_decl_rtl (fdecl, NULL, 1);\n+\t  make_decl_rtl (fdecl, NULL);\n \t  if (is_compiled == 1)\n \t    DECL_EXTERNAL (fdecl) = 1;\n \t}\n@@ -1222,7 +1222,7 @@ get_dispatch_table (type, this_class_addr)\n       else\n \t{\n \t  if (DECL_RTL (method) == 0)\n-\t    make_decl_rtl (method, NULL, 1);\n+\t    make_decl_rtl (method, NULL);\n \t  method = build1 (ADDR_EXPR, nativecode_ptr_type_node, method);\n \t}\n       list = tree_cons (NULL_TREE /*DECL_VINDEX (method) + 2*/,\n@@ -2122,7 +2122,7 @@ layout_class_method (this_class, super_class, method_decl, dtable_count)\n   if (! METHOD_ABSTRACT (method_decl) \n       || (CLASS_INTERFACE (TYPE_NAME (this_class)) \n \t  && (DECL_CLINIT_P (method_decl))))\n-    make_function_rtl (method_decl);\n+    make_decl_rtl (method_decl, NULL);\n   obstack_free (&temporary_obstack, asm_name);\n \n   if (ID_INIT_P (method_name))\n@@ -2219,7 +2219,7 @@ emit_register_classes ()\n   /*  DECL_EXTERNAL (init_decl) = 1;*/\n   TREE_PUBLIC (init_decl) = 1;\n   pushlevel (0);\n-  make_function_rtl (init_decl);\n+  make_decl_rtl (init_decl, NULL);\n   init_function_start (init_decl, input_filename, 0);\n   expand_function_start (init_decl, 0);\n "}, {"sha": "aff5bed0c893dc2be023a92f7eb9ae018fb1a3d9", "filename": "gcc/java/constants.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,5 +1,5 @@\n /* Handle the constant pool of the Java(TM) Virtual Machine.\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -402,7 +402,7 @@ build_constant_data_ref ()\n \t\t\t build_array_type (ptr_type_node,\n \t\t\t\t\t   one_elt_array_domain_type));\n       TREE_STATIC (decl) = 1;\n-      make_decl_rtl (decl, NULL, 1);\n+      make_decl_rtl (decl, NULL);\n       TYPE_CPOOL_DATA_REF (current_class) = current_constant_pool_data_ref\n \t= build1 (ADDR_EXPR, ptr_type_node, decl);\n     }"}, {"sha": "3c5a6cc40208db88aa65076426b743c63f5c721b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for the GNU compiler for the\n    Java(TM) language.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -399,7 +399,7 @@ builtin_function (name, type, function_code, class, library_name)\n   TREE_PUBLIC (decl) = 1;\n   if (library_name)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (library_name);\n-  make_decl_rtl (decl, NULL_PTR, 1);\n+  make_decl_rtl (decl, NULL_PTR);\n   pushdecl (decl);\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = function_code;\n@@ -417,7 +417,7 @@ create_primitive_vtable (name)\n   sprintf (buf, \"_Jv_%sVTable\", name);\n   r = build_decl (VAR_DECL, get_identifier (buf), ptr_type_node);\n   DECL_EXTERNAL (r) = 1;\n-  make_decl_rtl (r, buf, 1);\n+  make_decl_rtl (r, buf);\n   return r;\n }\n "}, {"sha": "4ad903ee70ecc09973ba412c6461c6d2b23e0c86", "filename": "gcc/java/expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1,5 +1,5 @@\n /* Process expressions for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1680,7 +1680,7 @@ build_known_method_ref (method, method_type, self_type, method_signature, arg_li\n   tree func;\n   if (is_compiled_class (self_type))\n     {\n-      make_decl_rtl (method, NULL, 1);\n+      make_decl_rtl (method, NULL);\n       func = build1 (ADDR_EXPR, method_ptr_type_node, method);\n     }\n   else\n@@ -2000,7 +2000,7 @@ build_jni_stub (method)\n   TREE_STATIC (meth_var) = 1;\n   TREE_PUBLIC (meth_var) = 0;\n   DECL_EXTERNAL (meth_var) = 0;\n-  make_decl_rtl (meth_var, NULL, 0);\n+  make_decl_rtl (meth_var, NULL);\n   meth_var = pushdecl_top_level (meth_var);\n \n   /* One strange way that the front ends are different is that they\n@@ -2364,7 +2364,7 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n \t    DECL_IGNORED_P (init_decl) = 1;\n \t    TREE_READONLY (init_decl) = 1;\n \t    TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (init_decl)) = 1;\n-\t    make_decl_rtl (init_decl, NULL, 1);\n+\t    make_decl_rtl (init_decl, NULL);\n \t    init = build1 (ADDR_EXPR, TREE_TYPE (exp), init_decl);\n \t    r = expand_expr (init, target, tmode, modifier);\n \t    return r;\n@@ -2387,7 +2387,7 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n \t    DECL_IGNORED_P (init_decl) = 1;\n \t    TREE_READONLY (init_decl) = 1;\n \t    TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (init_decl)) = 1;\n-\t    make_decl_rtl (init_decl, NULL, 1);\n+\t    make_decl_rtl (init_decl, NULL);\n \t    init = init_decl;\n \t  }\n \texpand_assignment (build (COMPONENT_REF, TREE_TYPE (data_fld),"}, {"sha": "7c0941a06dfa2e7eba14e834ffa7390f438001dc", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1230,7 +1230,7 @@ create_builtin_decl (code, type, name)\n   if (code == VAR_DECL)\n     {\n       TREE_STATIC (decl) = 1;\n-      make_decl_rtl (decl, 0, 1);\n+      make_decl_rtl (decl, 0);\n       pushdecl (decl);\n     }\n \n@@ -1308,7 +1308,7 @@ synth_module_prologue ()\n       if (flag_traditional && TAG_MSGSEND[0] != '_')\n \tDECL_BUILT_IN_NONANSI (umsg_decl) = 1;\n \n-      make_decl_rtl (umsg_decl, NULL_PTR, 1);\n+      make_decl_rtl (umsg_decl, NULL_PTR);\n       pushdecl (umsg_decl);\n     }\n   else\n@@ -1981,7 +1981,7 @@ generate_static_references ()\n \n       type = build_array_type (build_pointer_type (void_type_node), 0);\n       decl = build_decl (VAR_DECL, ident, type);\n-      make_decl_rtl (decl, 0, 1);\n+      make_decl_rtl (decl, 0);\n       TREE_USED (decl) = 1;\n       decls\n \t= tree_cons (NULL_TREE, build_unary_op (ADDR_EXPR, decl, 1), decls);\n@@ -2074,7 +2074,7 @@ build_selector_reference_decl ()\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_CONTEXT (decl) = 0;\n \n-  make_decl_rtl (decl, 0, 1);\n+  make_decl_rtl (decl, 0);\n   pushdecl_top_level (decl);\n \n   return decl;\n@@ -2296,7 +2296,7 @@ build_class_reference_decl ()\n   DECL_CONTEXT (decl) = 0;\n   DECL_ARTIFICIAL (decl) = 1;\n \n-  make_decl_rtl (decl, 0, 1);\n+  make_decl_rtl (decl, 0);\n   pushdecl_top_level (decl);\n \n   return decl;\n@@ -2439,7 +2439,7 @@ build_objc_string_decl (section)\n   DECL_CONTEXT (decl) = 0;\n   DECL_ARTIFICIAL (decl) = 1;\n  \n-  make_decl_rtl (decl, 0, 1);\n+  make_decl_rtl (decl, 0);\n   pushdecl_top_level (decl);\n \n   return decl;\n@@ -5333,7 +5333,7 @@ build_protocol_reference (p)\n       TREE_USED (decl) = 1;\n       DECL_ARTIFICIAL (decl) = 1;\n \n-      make_decl_rtl (decl, 0, 1);\n+      make_decl_rtl (decl, 0);\n       pushdecl_top_level (decl);\n    }\n "}, {"sha": "ae0034f91ed3d62ca63a2493466eafcfd23e6ec9", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -202,11 +202,6 @@ extern void function_section\t\tPARAMS ((tree));\n /* Tell assembler to switch to the section for the exception table.  */\n extern void exception_section\t\tPARAMS ((void));\n \n-/* Create the rtl to represent a function, for a function definition.\n-   DECL is a FUNCTION_DECL node which describes which function.\n-   The rtl is stored into DECL.  */\n-extern void make_function_rtl\t\tPARAMS ((tree));\n-\n /* Declare DECL to be a weak symbol.  */\n extern void declare_weak\t\tPARAMS ((tree));\n #endif /* TREE_CODE */\n@@ -224,15 +219,6 @@ extern void weak_finish\t\t\tPARAMS ((void));\n extern int decode_reg_name\t\tPARAMS ((const char *));\n \n #ifdef TREE_CODE\n-/* Create the DECL_RTL for a declaration for a static or external variable\n-   or static or external function.\n-   ASMSPEC, if not 0, is the string which the user specified\n-   as the assembler symbol name.\n-   TOP_LEVEL is nonzero if this is a file-scope variable.\n-\n-   This is never called for PARM_DECL nodes.  */\n-extern void make_decl_rtl\t\tPARAMS ((tree, const char *, int));\n-\n /* Make the rtl for variable VAR be volatile.\n    Use this only for static variables.  */\n extern void make_var_volatile\t\tPARAMS ((tree));"}, {"sha": "6c12e6916d2a43b801f560e7fa91a3be0bcd168b", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -1117,7 +1117,7 @@ output_func_start_profiler ()\n   announce_function (fndecl);\n   current_function_decl = fndecl;\n   DECL_INITIAL (fndecl) = error_mark_node;\n-  make_function_rtl (fndecl);\n+  make_decl_rtl (fndecl, NULL);\n   init_function_start (fndecl, input_filename, lineno);\n   pushlevel (0);\n   expand_function_start (fndecl, 0);"}, {"sha": "408f04aa279d0790ac90bd4f8b26bfe9a7c6d37a", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -2579,7 +2579,7 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n       || TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       timevar_push (TV_VARCONST);\n-      make_decl_rtl (decl, asmspec, top_level);\n+      make_decl_rtl (decl, asmspec);\n       /* Initialized extern variable exists to be replaced\n \t with its value, or represents something that will be\n \t output in another file.  */\n@@ -2606,13 +2606,13 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n       if (decode_reg_name (asmspec) >= 0)\n \t{\n \t  DECL_RTL (decl) = 0;\n-\t  make_decl_rtl (decl, asmspec, top_level);\n+\t  make_decl_rtl (decl, asmspec);\n \t}\n       else\n \t{\n \t  error (\"invalid register name `%s' for register variable\", asmspec);\n \t  DECL_REGISTER (decl) = 0;\n-\t  make_decl_rtl (decl, NULL, top_level);\n+\t  make_decl_rtl (decl, NULL);\n \t}\n     }\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)"}, {"sha": "5e8a1a119201375aa2daeefb35679065eb9aa654", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -2758,7 +2758,7 @@ extern void set_yydebug\t\t\tPARAMS ((int));\n extern void fixup_signed_type\t\tPARAMS ((tree));\n \n /* varasm.c */\n-extern void make_decl_rtl\t\tPARAMS ((tree, const char *, int));\n+extern void make_decl_rtl\t\tPARAMS ((tree, const char *));\n extern void make_decl_one_only\t\tPARAMS ((tree));\n extern int supports_one_only\t\tPARAMS ((void));\n extern void variable_section\t\tPARAMS ((tree, int));"}, {"sha": "8841fcf064f3afa6d4c1c61fe798cdcc5d6a65a7", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 83, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c41818449c4cbd10d6055be3483dfd04a3968b8/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6c41818449c4cbd10d6055be3483dfd04a3968b8", "patch": "@@ -515,83 +515,6 @@ exception_section ()\n #endif\n }\n \f\n-/* Create the rtl to represent a function, for a function definition.\n-   DECL is a FUNCTION_DECL node which describes which function.\n-   The rtl is stored into DECL.  */\n-\n-void\n-make_function_rtl (decl)\n-     tree decl;\n-{\n-  const char *name;\n-  const char *new_name;\n-\n-  if (DECL_RTL (decl) != 0)\n-    {\n-      /* ??? Another way to do this would be to do what halfpic.c does\n-\t and maintain a hashed table of such critters.  */\n-      /* ??? Another way to do this would be to pass a flag bit to\n-\t ENCODE_SECTION_INFO saying whether this is a new decl or not.  */\n-      /* Let the target reassign the RTL if it wants.\n-\t This is necessary, for example, when one machine specific\n-\t decl attribute overrides another.  */\n-#ifdef REDO_SECTION_INFO_P\n-      if (REDO_SECTION_INFO_P (decl))\n-\tENCODE_SECTION_INFO (decl);\n-#endif\n-      return;\n-    }\n-\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  new_name = name;\n-\n-  /* Rename a nested function to avoid conflicts, unless it's a member of\n-     a local class, in which case the class name is already unique.  */\n-  if (decl_function_context (decl) != 0\n-      && ! TYPE_P (DECL_CONTEXT (decl))\n-      && DECL_INITIAL (decl) != 0\n-      && DECL_RTL (decl) == 0)\n-    {\n-      char *label;\n-      ASM_FORMAT_PRIVATE_NAME (label, name, var_labelno);\n-      var_labelno++;\n-      new_name = label;\n-    }\n-  /* When -fprefix-function-name is used, every function name is\n-     prefixed.  Even static functions are prefixed because they\n-     could be declared latter.  Note that a nested function name\n-     is not prefixed.  */\n-  else if (flag_prefix_function_name)\n-    {\n-      size_t name_len = IDENTIFIER_LENGTH (DECL_ASSEMBLER_NAME (decl));\n-      char *pname;\n-\n-      pname = alloca (name_len + CHKR_PREFIX_SIZE + 1);\n-      memcpy (pname, CHKR_PREFIX, CHKR_PREFIX_SIZE);\n-      memcpy (pname + CHKR_PREFIX_SIZE, name, name_len + 1);\n-      new_name = pname;\n-    }\n-\n-  if (name != new_name)\n-    {\n-      DECL_ASSEMBLER_NAME (decl) = get_identifier (new_name);\n-      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-    }\n-\n-  DECL_RTL (decl)\n-    = gen_rtx_MEM (DECL_MODE (decl),\n-\t\t   gen_rtx_SYMBOL_REF (Pmode, name));\n-\n-  /* Optionally set flags or add text to the name to record\n-     information such as that it is a function name.  If the name\n-     is changed, the macro ASM_OUTPUT_LABELREF will have to know\n-     how to strip this information.  */\n-#ifdef ENCODE_SECTION_INFO\n-  ENCODE_SECTION_INFO (decl);\n-#endif\n-}\n-\n-\n /* Given NAME, a putative register name, discard any customary prefixes.  */\n \n static const char *\n@@ -671,16 +594,15 @@ decode_reg_name (asmspec)\n    or static or external function.\n    ASMSPEC, if not 0, is the string which the user specified\n    as the assembler symbol name.\n-   TOP_LEVEL is nonzero if this is a file-scope variable.\n \n    This is never called for PARM_DECL nodes.  */\n \n void\n-make_decl_rtl (decl, asmspec, top_level)\n+make_decl_rtl (decl, asmspec)\n      tree decl;\n      const char *asmspec;\n-     int top_level;\n {\n+  int top_level = (DECL_CONTEXT (decl) == NULL_TREE);\n   const char *name = 0;\n   const char *new_name = 0;\n   int reg_number;\n@@ -741,7 +663,7 @@ make_decl_rtl (decl, asmspec, top_level)\n \t{\n \t  int nregs;\n \n-\t  if (DECL_INITIAL (decl) != 0 && top_level)\n+\t  if (DECL_INITIAL (decl) != 0 && !TREE_STATIC (decl))\n \t    {\n \t      DECL_INITIAL (decl) = 0;\n \t      error (\"global register variable has initial value\");\n@@ -760,7 +682,7 @@ make_decl_rtl (decl, asmspec, top_level)\n \t  REGNO (DECL_RTL (decl)) = reg_number;\n \t  REG_USERVAR_P (DECL_RTL (decl)) = 1;\n \n-\t  if (top_level)\n+\t  if (TREE_STATIC (decl))\n \t    {\n \t      /* Make this register global, so not usable for anything\n \t\t else.  */\n@@ -4890,7 +4812,7 @@ assemble_alias (decl, target)\n {\n   const char *name;\n \n-  make_decl_rtl (decl, (char *) 0, 1);\n+  make_decl_rtl (decl, (char *) 0);\n   name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n \n #ifdef ASM_OUTPUT_DEF"}]}