{"sha": "d904e9ed26fdf01cd9ba844de0563bab3ea79b3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwNGU5ZWQyNmZkZjAxY2Q5YmE4NDRkZTA1NjNiYWIzZWE3OWIzYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-20T22:46:03Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-20T22:46:03Z"}, "message": "(move_to_float insns): Change move_to_float so that it doesn't have a clobber of the memory address...\n\n(move_to_float insns): Change move_to_float so that it doesn't have a\nclobber of the memory address, and instead passes the stack temp's\nmemory address as one of the unspec args.\n(fix_truncdfsi2): Use rs6000_stack_temp to allocate the temp.\n(multiply, shift insns): Fix all cases of multiply and shift insns so\nthat the right mnemonics are used for -mcpu=common with both\n-m{old,new}-mnemonics.\n\nFrom-SVN: r10487", "tree": {"sha": "d699122254f913279b2de48c58a77684194cd825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d699122254f913279b2de48c58a77684194cd825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d904e9ed26fdf01cd9ba844de0563bab3ea79b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d904e9ed26fdf01cd9ba844de0563bab3ea79b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d904e9ed26fdf01cd9ba844de0563bab3ea79b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d904e9ed26fdf01cd9ba844de0563bab3ea79b3c/comments", "author": null, "committer": null, "parents": [{"sha": "b7676b4631084ee9dcc7a1b0bd3a2efd9b688cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7676b4631084ee9dcc7a1b0bd3a2efd9b688cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7676b4631084ee9dcc7a1b0bd3a2efd9b688cd9"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "f5ecb7ec25544a69f056eae1f882f7f58e7ce6e5", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d904e9ed26fdf01cd9ba844de0563bab3ea79b3c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d904e9ed26fdf01cd9ba844de0563bab3ea79b3c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d904e9ed26fdf01cd9ba844de0563bab3ea79b3c", "patch": "@@ -1155,8 +1155,8 @@\n \t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))]\n   \"! TARGET_POWER\"\n   \"@\n-   mullw %0,%1,%2\n-   mulli %0,%1,%2\"\n+   {muls|mullw} %0,%1,%2\n+   {muli|mulli} %0,%1,%2\"\n    [(set_attr \"type\" \"imul\")])\n \n (define_insn \"\"\n@@ -1177,7 +1177,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n   \"! TARGET_POWER\"\n-  \"mullw. %3,%1,%2\"\n+  \"{muls.|mullw.} %3,%1,%2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n (define_insn \"\"\n@@ -1200,7 +1200,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(mult:SI (match_dup 1) (match_dup 2)))]\n   \"! TARGET_POWER\"\n-  \"mullw. %0,%1,%2\"\n+  \"{muls.|mullw.} %0,%1,%2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n ;; Operand 1 is divided by operand 2; quotient goes to operand\n@@ -2300,7 +2300,7 @@\n \t(ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n   \"! TARGET_POWER\"\n-  \"slw%I2 %0,%1,%h2\"\n+  \"{sl|slw}%I2 %0,%1,%h2\"\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -2323,7 +2323,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n   \"! TARGET_POWER\"\n-  \"slw%I2. %3,%1,%h2\"\n+  \"{sl|slw}%I2. %3,%1,%h2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n (define_insn \"\"\n@@ -2348,7 +2348,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n   \"! TARGET_POWER\"\n-  \"slw%I2. %0,%1,%h2\"\n+  \"{sl|slw}%I2. %0,%1,%h2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n (define_insn \"\"\n@@ -2415,7 +2415,7 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n   \"! TARGET_POWER\"\n-  \"srw%I2 %0,%1,%h2\")\n+  \"{sr|srw}%I2 %0,%1,%h2\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x\")\n@@ -2437,7 +2437,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n   \"! TARGET_POWER\"\n-  \"srw%I2. %3,%1,%h2\"\n+  \"{sr|srw}%I2. %3,%1,%h2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n (define_insn \"\"\n@@ -2462,7 +2462,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"! TARGET_POWER\"\n-  \"srw%I2. %0,%1,%h2\"\n+  \"{sr|srw}%I2. %0,%1,%h2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n (define_insn \"\"\n@@ -2627,7 +2627,7 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")))]\n   \"! TARGET_POWER\"\n-  \"sraw%I2 %0,%1,%h2\")\n+  \"{sra|sraw}%I2 %0,%1,%h2\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x\")\n@@ -2649,7 +2649,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n   \"! TARGET_POWER\"\n-  \"sraw%I2. %3,%1,%h2\"\n+  \"{sra|sraw}%I2. %3,%1,%h2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n (define_insn \"\"\n@@ -2674,7 +2674,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"! TARGET_POWER\"\n-  \"sraw%I2. %0,%1,%h2\"\n+  \"{sra|sraw}%I2. %0,%1,%h2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \f\n ;; Floating-point insns, excluding normal data motion.\n@@ -3362,47 +3362,50 @@\n }\")\n \n (define_expand \"move_to_float\"\n-  [(parallel [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n-\t       (unspec [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"\")] 2))\n-\t      (clobber (match_dup 3))])]\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+\t(unspec [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"\")\n+\t\t (match_dup 3)] 2))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"\n {\n-  if (float_conv_temp == NULL_RTX)\n-    {\n-      float_conv_temp = assign_stack_local (DFmode, 8, 0);\n-      if (!offsettable_mem_operand (float_conv_temp, DFmode))\n-\tXEXP (float_conv_temp, 0) = copy_addr_to_reg (XEXP (float_conv_temp, 0));\n-    }\n-\n-  operands[3] = float_conv_temp;\n+  operands[3] = XEXP (rs6000_stack_temp (DFmode, 8, 1), 0);\n }\")\n \n (define_split\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(unspec [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"\")] 2))\n-   (clobber (match_operand:DF 3 \"offsettable_mem_operand\" \"\"))]\n+\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"\")\n+\t\t (match_operand:SI 3 \"offsettable_addr_operand\" \"\")] 2))]\n   \"reload_completed\"\n   [(set (match_dup 4) (match_dup 1))\n    (set (match_dup 5) (match_dup 2))\n-   (set (match_dup 0) (match_dup 3))]\n+   (set (match_dup 0) (mem:DF (match_dup 3)))]\n   \"\n {\n-  int little = (WORDS_BIG_ENDIAN == 0);\n-  operands[4] = operand_subword (operands[3], 1 - little, 0, DFmode);\n-  operands[5] = operand_subword (operands[3], little, 0, DFmode);\n+  rtx word1 = gen_rtx (MEM, SImode, operands[3]);\n+  rtx word2 = gen_rtx (MEM, SImode, plus_constant (operands[3], 4));\n \n-  MEM_IN_STRUCT_P (operands[4]) = 1;\n-  MEM_IN_STRUCT_P (operands[5]) = 1;\n+  MEM_IN_STRUCT_P (word1) = 1;\n+  MEM_IN_STRUCT_P (word2) = 1;\n+\n+  if (WORDS_BIG_ENDIAN)\n+    {\n+      operands[4] = word2;\n+      operands[5] = word1;\n+    }\n+  else\n+    {\n+      operands[4] = word1;\n+      operands[5] = word2;\n+    }\n }\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\")] 2))\n-   (clobber (match_operand:DF 3 \"offsettable_mem_operand\" \"=o\"))]\n+\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:SI 3 \"offsettable_addr_operand\" \"p\")] 2))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"#\"\n   [(set_attr \"length\" \"12\")])\n@@ -3416,7 +3419,7 @@\n   if (TARGET_POWER2 || TARGET_POWERPC)\n     {\n       int endian = (WORDS_BIG_ENDIAN == 0);\n-      rtx stack_slot = assign_stack_temp (DImode, 8, 0);\n+      rtx stack_slot = rs6000_stack_temp (DImode, 8, 1);\n       rtx temp = gen_reg_rtx (DImode);\n \n       emit_insn (gen_fpcvtsi (temp, operands[1]));\n@@ -3608,12 +3611,13 @@\n {\n   if (! TARGET_POWER && ! TARGET_POWERPC)\n     {\n+      int endian = (WORDS_BIG_ENDIAN == 0);\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n       emit_insn (gen_mull_call ());\n-      emit_move_insn (operand_subword (operands[0], 0, 0, DImode),\n+      emit_move_insn (operand_subword (operands[0], endian, 0, DImode),\n \t\t      gen_rtx (REG, SImode, 3));\n-      emit_move_insn (operand_subword (operands[0], 1, 0, DImode),\n+      emit_move_insn (operand_subword (operands[0], 1 - endian, 0, DImode),\n \t\t      gen_rtx (REG, SImode, 4));\n       DONE;\n     }"}]}