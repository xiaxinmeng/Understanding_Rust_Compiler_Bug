{"sha": "5699b9d11556148547b478d1b4591359c7b89ac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY5OWI5ZDExNTU2MTQ4NTQ3YjQ3OGQxYjQ1OTEzNTljN2I4OWFjNQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2017-01-19T23:19:19Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2017-01-19T23:19:19Z"}, "message": "[RS6000] PR79144, cmpstrnsi optimization breaks glibc\n\nglibc compiled with current gcc-7 fails one test due to strcmp and\nstrncmp appearing in the PLT.  This is because the inline expansion of\nthose functions falls back to a function call, but doesn't use the asm\nname for the call.\n\n\tPR target/79144\n\t* config/rs6000/rs6000.c (expand_strn_compare): Get the asm name\n\tfor strcmp and strncmp from corresponding builtin decl.\n\nFrom-SVN: r244659", "tree": {"sha": "2af0ac8212f9f4209d79244b9c6345cfc2fe7e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af0ac8212f9f4209d79244b9c6345cfc2fe7e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5699b9d11556148547b478d1b4591359c7b89ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5699b9d11556148547b478d1b4591359c7b89ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5699b9d11556148547b478d1b4591359c7b89ac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5699b9d11556148547b478d1b4591359c7b89ac5/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e4160112d24d56852a17ca3627dec24d3ffa1ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4160112d24d56852a17ca3627dec24d3ffa1ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4160112d24d56852a17ca3627dec24d3ffa1ed"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "33eb1298100781f01ab3eecd4eead9fdf593c2a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5699b9d11556148547b478d1b4591359c7b89ac5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5699b9d11556148547b478d1b4591359c7b89ac5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5699b9d11556148547b478d1b4591359c7b89ac5", "patch": "@@ -1,3 +1,9 @@\n+2017-01-20  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/79144\n+\t* config/rs6000/rs6000.c (expand_strn_compare): Get the asm name\n+\tfor strcmp and strncmp from corresponding builtin decl.\n+\n 2017-01-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config.gcc (x86_64-*-rtems*): Use i386/rtemself.h"}, {"sha": "4c6badaaa2b1358c85c770e3e4a8c274af2f3779", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5699b9d11556148547b478d1b4591359c7b89ac5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5699b9d11556148547b478d1b4591359c7b89ac5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5699b9d11556148547b478d1b4591359c7b89ac5", "patch": "@@ -19869,10 +19869,13 @@ expand_strn_compare (rtx operands[], int no_length)\n \t}\n \n       if (no_length)\n-\temit_library_call_value (gen_rtx_SYMBOL_REF (Pmode, \"strcmp\"),\n-\t\t\t\t target, LCT_NORMAL, GET_MODE (target), 2,\n-\t\t\t\t force_reg (Pmode, XEXP (src1, 0)), Pmode,\n-\t\t\t\t force_reg (Pmode, XEXP (src2, 0)), Pmode);\n+\t{\n+\t  tree fun = builtin_decl_explicit (BUILT_IN_STRCMP);\n+\t  emit_library_call_value (XEXP (DECL_RTL (fun), 0),\n+\t\t\t\t   target, LCT_NORMAL, GET_MODE (target), 2,\n+\t\t\t\t   force_reg (Pmode, XEXP (src1, 0)), Pmode,\n+\t\t\t\t   force_reg (Pmode, XEXP (src2, 0)), Pmode);\n+\t}\n       else\n \t{\n \t  /* -m32 -mpowerpc64 results in word_mode being DImode even\n@@ -19886,7 +19889,8 @@ expand_strn_compare (rtx operands[], int no_length)\n \n \t  emit_move_insn (len_rtx, bytes_rtx);\n \n-\t  emit_library_call_value (gen_rtx_SYMBOL_REF (Pmode, \"strncmp\"),\n+\t  tree fun = builtin_decl_explicit (BUILT_IN_STRNCMP);\n+\t  emit_library_call_value (XEXP (DECL_RTL (fun), 0),\n \t\t\t\t   target, LCT_NORMAL, GET_MODE (target), 3,\n \t\t\t\t   force_reg (Pmode, XEXP (src1, 0)), Pmode,\n \t\t\t\t   force_reg (Pmode, XEXP (src2, 0)), Pmode,\n@@ -20131,10 +20135,13 @@ expand_strn_compare (rtx operands[], int no_length)\n \n       /* Construct call to strcmp/strncmp to compare the rest of the string.  */\n       if (no_length)\n-\temit_library_call_value (gen_rtx_SYMBOL_REF (Pmode, \"strcmp\"),\n-\t\t\t\t target, LCT_NORMAL, GET_MODE (target), 2,\n-\t\t\t\t force_reg (Pmode, XEXP (src1, 0)), Pmode,\n-\t\t\t\t force_reg (Pmode, XEXP (src2, 0)), Pmode);\n+\t{\n+\t  tree fun = builtin_decl_explicit (BUILT_IN_STRCMP);\n+\t  emit_library_call_value (XEXP (DECL_RTL (fun), 0),\n+\t\t\t\t   target, LCT_NORMAL, GET_MODE (target), 2,\n+\t\t\t\t   force_reg (Pmode, XEXP (src1, 0)), Pmode,\n+\t\t\t\t   force_reg (Pmode, XEXP (src2, 0)), Pmode);\n+\t}\n       else\n \t{\n \t  rtx len_rtx;\n@@ -20144,7 +20151,8 @@ expand_strn_compare (rtx operands[], int no_length)\n \t    len_rtx = gen_reg_rtx (SImode);\n \n \t  emit_move_insn (len_rtx, GEN_INT (bytes - compare_length));\n-\t  emit_library_call_value (gen_rtx_SYMBOL_REF (Pmode, \"strncmp\"),\n+\t  tree fun = builtin_decl_explicit (BUILT_IN_STRNCMP);\n+\t  emit_library_call_value (XEXP (DECL_RTL (fun), 0),\n \t\t\t\t   target, LCT_NORMAL, GET_MODE (target), 3,\n \t\t\t\t   force_reg (Pmode, XEXP (src1, 0)), Pmode,\n \t\t\t\t   force_reg (Pmode, XEXP (src2, 0)), Pmode,"}]}