{"sha": "9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2ZTQxNTc0Y2Q3YThjOTI4ZjU3Zjg5NDk4YmM5YjRlNzc2ODFmYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T09:01:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T09:01:03Z"}, "message": "[multiple changes]\n\n2012-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_util.adb (Is_Atomic_Object): Return true for an atomic\n\tcomponent as well as a prefix which is an atomic component.\n\n2012-06-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): revert previous\n\tpatch. The processing of interfacing aspects now generates a\n\tproper Ada 2005 pragma.\n\t* sem_prag.adb (Analyze_Pragma, cases Pragma_Export and\n\tPragma_Import): revert previous patch.\tThe processing of\n\tinterfacing aspects now generates a proper Ada 2005 pragma.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): generate proper\n\tpragam for aspects Convention, Import and Export. Scan list\n\tof aspects to collect link name and external name if present,\n\tand verify that a complete pragma can be generated.\n\nFrom-SVN: r188430", "tree": {"sha": "49852a4f278d016b087194fa3527d75ce40977a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49852a4f278d016b087194fa3527d75ce40977a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/comments", "author": null, "committer": null, "parents": [{"sha": "f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b"}], "stats": {"total": 217, "additions": 152, "deletions": 65}, "files": [{"sha": "0d4a8deffce718f6fb0df031f3001851964a74e8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "patch": "@@ -1,3 +1,21 @@\n+2012-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Is_Atomic_Object): Return true for an atomic\n+\tcomponent as well as a prefix which is an atomic component.\n+\n+2012-06-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): revert previous\n+\tpatch. The processing of interfacing aspects now generates a\n+\tproper Ada 2005 pragma.\n+\t* sem_prag.adb (Analyze_Pragma, cases Pragma_Export and\n+\tPragma_Import): revert previous patch.\tThe processing of\n+\tinterfacing aspects now generates a proper Ada 2005 pragma.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): generate proper\n+\tpragam for aspects Convention, Import and Export. Scan list\n+\tof aspects to collect link name and external name if present,\n+\tand verify that a complete pragma can be generated.\n+\n 2012-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Convert GNU_SIZE"}, {"sha": "469cb8379fc8ad3c149954fa3301f1b2795929ee", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "patch": "@@ -531,14 +531,7 @@ package body Exp_Prag is\n       Init_Call : Node_Id;\n \n    begin\n-      --  If the pragma comes from an aspect, the entity is its first argument.\n-\n-      if Present (Corresponding_Aspect (N)) then\n-         Def_Id := Entity (Arg1 (N));\n-      else\n-         Def_Id := Entity (Arg2 (N));\n-      end if;\n-\n+      Def_Id := Entity (Arg2 (N));\n       if Ekind (Def_Id) = E_Variable then\n \n          --  Find generated initialization call for object, if any"}, {"sha": "1d8e268dd6beb442b9dafd5265b92249154603fc", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 119, "deletions": 12, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "patch": "@@ -948,6 +948,33 @@ package body Sem_Ch13 is\n                         Set_Uses_Lock_Free (E);\n                      end if;\n \n+                     goto Continue;\n+\n+                  elsif A_Id = Aspect_Import\n+                    or else A_Id = Aspect_Export\n+                  then\n+\n+                     --  Verify that there is an aspect Convention that will\n+                     --  incorporate the Import/Export aspect, and eventual\n+                     --  Link/External names.\n+\n+                     declare\n+                        A : Node_Id;\n+\n+                     begin\n+                        A := First (L);\n+                        while Present (A) loop\n+                           exit when Chars (Identifier (A)) = Name_Convention;\n+                           Next (A);\n+                        end loop;\n+\n+                        if No (A) then\n+                           Error_Msg_N\n+                             (\"missing Convention aspect for Export/Import\",\n+                                 Aspect);\n+                        end if;\n+                     end;\n+\n                      goto Continue;\n                   end if;\n \n@@ -1168,13 +1195,73 @@ package body Sem_Ch13 is\n                --  the second argument is a local name referring to the entity,\n                --  and the first argument is the aspect definition expression.\n \n-               when Aspect_Convention =>\n-                  Aitem :=\n-                    Make_Pragma (Loc,\n-                      Pragma_Argument_Associations =>\n-                        New_List (Relocate_Node (Expr), Ent),\n-                      Pragma_Identifier            =>\n-                        Make_Identifier (Sloc (Id), Chars (Id)));\n+               when Aspect_Convention  =>\n+\n+                  --  The aspect may be part of the specification of an import\n+                  --  or export pragma. Scan the aspect list to gather the\n+                  --  other components, if any. The name of the generated\n+                  --  pragma is one of Convention/Import/Export.\n+\n+                  declare\n+                     P_Name   : Name_Id;\n+                     A_Name   : Name_Id;\n+                     A        : Node_Id;\n+                     Arg_List : List_Id;\n+                     Found    : Boolean;\n+                     L_Assoc  : Node_Id;\n+                     E_Assoc  : Node_Id;\n+\n+                  begin\n+                     P_Name   := Chars (Id);\n+                     Found    := False;\n+                     Arg_List := New_List;\n+                     L_Assoc  := Empty;\n+                     E_Assoc  := Empty;\n+\n+                     A := First (L);\n+                     while Present (A) loop\n+                        A_Name := Chars (Identifier (A));\n+\n+                        if A_Name = Name_Import\n+                          or else A_Name = Name_Export\n+                        then\n+                           if Found then\n+                              Error_Msg_N (\"conflicting\", A);\n+                           else\n+                              Found := True;\n+                           end if;\n+\n+                           P_Name := A_Name;\n+\n+                        elsif A_Name = Name_Link_Name then\n+                           L_Assoc := Make_Pragma_Argument_Association (Loc,\n+                              Chars => A_Name,\n+                              Expression => Relocate_Node (Expression (A)));\n+\n+                        elsif A_Name = Name_External_Name then\n+                           E_Assoc := Make_Pragma_Argument_Association (Loc,\n+                              Chars => A_Name,\n+                              Expression => Relocate_Node (Expression (A)));\n+                        end if;\n+\n+                        Next (A);\n+                     end loop;\n+\n+                     Arg_List := New_List (Relocate_Node (Expr), Ent);\n+                     if Present (L_Assoc) then\n+                        Append_To (Arg_List, L_Assoc);\n+                     end if;\n+\n+                     if Present (E_Assoc) then\n+                        Append_To (Arg_List, E_Assoc);\n+                     end if;\n+\n+                     Aitem :=\n+                       Make_Pragma (Loc,\n+                         Pragma_Argument_Associations => Arg_List,\n+                         Pragma_Identifier            =>\n+                            Make_Identifier (Loc, P_Name));\n+                  end;\n \n                when Aspect_Warnings =>\n \n@@ -1570,13 +1657,33 @@ package body Sem_Ch13 is\n                   Analyze_Aspect_Dimension_System (N, Id, Expr);\n                   goto Continue;\n \n-               --  Placeholders for new aspects without corresponding pragmas\n+               when Aspect_External_Name |\n+                    Aspect_Link_Name     =>\n \n-               when Aspect_External_Name =>\n-                  null;\n+                  --  Verify that there is an Import/Export aspect defined for\n+                  --  the entity. The processing of that aspect in turn checks\n+                  --  that there is a Convention aspect declared. The pragma is\n+                  --  constructed when processing the Convention aspect.\n \n-               when Aspect_Link_Name =>\n-                  null;\n+                  declare\n+                     A : Node_Id;\n+\n+                  begin\n+                     A := First (L);\n+                     while Present (A) loop\n+                        exit when Chars (Identifier (A)) = Name_Export\n+                          or else Chars (Identifier (A)) = Name_Import;\n+                        Next (A);\n+                     end loop;\n+\n+                     if No (A) then\n+                        Error_Msg_N\n+                          (\"Missing Import/Export for Link/External name\",\n+                               Aspect);\n+                     end if;\n+                  end;\n+\n+                  goto Continue;\n             end case;\n \n             --  If a delay is required, we delay the freeze (not much point in"}, {"sha": "fa41b2c6f3f0841f49b39f71a51eef1488db3304", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 45, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "patch": "@@ -8647,28 +8647,7 @@ package body Sem_Prag is\n                 Name_External_Name,\n                 Name_Link_Name));\n \n-            if Present (Corresponding_Aspect (N)) then\n-\n-               --  If the pragma comes from an Aspect, there is a single entity\n-               --  parameter and an optional booean value with default true.\n-               --  The convention must be provided by a separate aspect.\n-\n-               Check_At_Least_N_Arguments (1);\n-               Check_At_Most_N_Arguments  (2);\n-               Def_Id := Entity (Arg1);\n-\n-               if No (Arg2) then\n-\n-                  --  If the aspect has a default True value, set corresponding\n-                  --  flag on the entity.\n-\n-                  Set_Is_Exported (Def_Id);\n-               end if;\n-               return;\n-\n-            else\n-               Check_At_Least_N_Arguments (2);\n-            end if;\n+            Check_At_Least_N_Arguments (2);\n \n             Check_At_Most_N_Arguments  (4);\n             Process_Convention (C, Def_Id);\n@@ -9603,29 +9582,9 @@ package body Sem_Prag is\n                 Name_External_Name,\n                 Name_Link_Name));\n \n-            if Present (Corresponding_Aspect (N)) then\n-\n-               --  If the pragma comes from an Aspect, there is a single entity\n-               --  parameter and an optional booean value with default true.\n-               --  The convention must be provided by a separate aspect.\n-\n-               Check_At_Least_N_Arguments (1);\n-               Check_At_Most_N_Arguments  (2);\n-\n-               if No (Arg2) then\n-\n-                  --  If the aspect has a default True value, set corresponding\n-                  --  flag on the entity.\n-\n-                  Set_Is_Imported (Entity (Arg1));\n-               end if;\n-               return;\n-\n-            else\n-               Check_At_Least_N_Arguments (2);\n-               Check_At_Most_N_Arguments  (4);\n-               Process_Import_Or_Interface;\n-            end if;\n+            Check_At_Least_N_Arguments (2);\n+            Check_At_Most_N_Arguments  (4);\n+            Process_Import_Or_Interface;\n \n          ----------------------\n          -- Import_Exception --"}, {"sha": "a5c60b51f1940b3b76adca23fe129936a982a75a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e41574cd7a8c928f57f89498bc9b4e77681fa/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9d6e41574cd7a8c928f57f89498bc9b4e77681fa", "patch": "@@ -6749,6 +6749,11 @@ package body Sem_Util is\n          then\n             return True;\n \n+         elsif Nkind (N) = N_Selected_Component\n+           and then Is_Atomic (Entity (Selector_Name (N)))\n+         then\n+            return True;\n+\n          elsif Nkind (N) = N_Indexed_Component\n            or else Nkind (N) = N_Selected_Component\n          then\n@@ -6772,6 +6777,11 @@ package body Sem_Util is\n       then\n          return True;\n \n+      elsif Nkind (N) = N_Selected_Component\n+        and then Is_Atomic (Entity (Selector_Name (N)))\n+      then\n+         return True;\n+\n       elsif Nkind (N) = N_Indexed_Component\n         or else Nkind (N) = N_Selected_Component\n       then"}]}