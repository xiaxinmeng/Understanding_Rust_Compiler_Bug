{"sha": "ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI1ZTI2MTU2ZmIyOGViNTllMGEyNTljY2IwYWI0OTQ4NWExYjk0Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-04T23:21:28Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-04T23:21:28Z"}, "message": "builtin-types.def (BT_FN_FLOAT): New.\n\n        * builtin-types.def (BT_FN_FLOAT): New.\n        (BT_FN_DOUBLE, BT_FN_LONG_DOUBLE): New.\n        * builtins.def (BUILT_IN_INF, BUILT_IN_INFF, BUILT_IN_INFL,\n        BUILT_IN_HUGE_VAL, BUILT_IN_HUGE_VALF, BUILT_IN_HUGE_VALL): New.\n        * builtins.c (fold_builtin_inf): New.\n        (fold_builtin): Call it.\n        * real.c (ereal_inf): New.\n        * real.h: Declare it.\n        * doc/extend.texi: Document new builtins.\n\nFrom-SVN: r56820", "tree": {"sha": "6a9e27455fe10ee403d06e599a3b61ab33cb8756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a9e27455fe10ee403d06e599a3b61ab33cb8756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/comments", "author": null, "committer": null, "parents": [{"sha": "9beb7d208292359f61d839fefa95153590df4200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9beb7d208292359f61d839fefa95153590df4200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9beb7d208292359f61d839fefa95153590df4200"}], "stats": {"total": 143, "additions": 141, "deletions": 2}, "files": [{"sha": "02e70570894cd9a98b98ba3e3f4a040b3fe2e085", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "patch": "@@ -1,3 +1,15 @@\n+2002-09-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtin-types.def (BT_FN_FLOAT): New.\n+\t(BT_FN_DOUBLE, BT_FN_LONG_DOUBLE): New.\n+\t* builtins.def (BUILT_IN_INF, BUILT_IN_INFF, BUILT_IN_INFL,\n+\tBUILT_IN_HUGE_VAL, BUILT_IN_HUGE_VALF, BUILT_IN_HUGE_VALL): New.\n+\t* builtins.c (fold_builtin_inf): New.\n+\t(fold_builtin): Call it.\n+\t* real.c (ereal_inf): New.\n+\t* real.h: Declare it.\n+\t* doc/extend.texi: Document new builtins.\n+\n 2002-09-04  Richard Henderson  <rth@redhat.com>\n \n \t* cse.c (cse_insn): Avoid subreg games if the equivalence"}, {"sha": "89bd500b84cb8baf6356cf8d0ae66c61f4222e6b", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "patch": "@@ -84,6 +84,9 @@ DEF_PRIMITIVE_TYPE (BT_VALIST_ARG, va_list_arg_type_node)\n DEF_FUNCTION_TYPE_0 (BT_FN_VOID, BT_VOID)\n DEF_FUNCTION_TYPE_0 (BT_FN_PTR, BT_PTR)\n DEF_FUNCTION_TYPE_0 (BT_FN_UNSIGNED, BT_UNSIGNED)\n+DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT, BT_FLOAT)\n+DEF_FUNCTION_TYPE_0 (BT_FN_DOUBLE, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_0 (BT_FN_LONG_DOUBLE, BT_LONG_DOUBLE)\n \n DEF_FUNCTION_TYPE_1 (BT_FN_LONG_LONG, BT_LONG, BT_LONG)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_LONGLONG, BT_LONGLONG, BT_LONGLONG)"}, {"sha": "7b2841bcae9ca3401804f0a25eaabdbf7254d615", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "patch": "@@ -148,6 +148,7 @@ static tree stabilize_va_list\t\tPARAMS ((tree, int));\n static rtx expand_builtin_expect\tPARAMS ((tree, rtx));\n static tree fold_builtin_constant_p\tPARAMS ((tree));\n static tree fold_builtin_classify_type\tPARAMS ((tree));\n+static tree fold_builtin_inf\t\tPARAMS ((tree, int));\n static tree build_function_call_expr\tPARAMS ((tree, tree));\n static int validate_arglist\t\tPARAMS ((tree, ...));\n \n@@ -4132,6 +4133,19 @@ fold_builtin_classify_type (arglist)\n   return build_int_2 (type_to_class (TREE_TYPE (TREE_VALUE (arglist))), 0);\n }\n \n+/* Fold a call to __builtin_inf or __builtin_huge_val.  */\n+\n+static tree\n+fold_builtin_inf (type, warn)\n+     tree type;\n+     int warn;\n+{\n+  if (!MODE_HAS_INFINITIES (TYPE_MODE (type)) && warn)\n+    warning (\"target format does not support infinity\");\n+\n+  return build_real (type, ereal_inf (TYPE_MODE (type)));\n+}\n+\n /* Used by constant folding to eliminate some builtin calls early.  EXP is\n    the CALL_EXPR of a call to a builtin function.  */\n \n@@ -4163,6 +4177,16 @@ fold_builtin (exp)\n \t}\n       break;\n \n+    case BUILT_IN_INF:\n+    case BUILT_IN_INFF:\n+    case BUILT_IN_INFL:\n+      return fold_builtin_inf (TREE_TYPE (TREE_TYPE (fndecl)), true);\n+\n+    case BUILT_IN_HUGE_VAL:\n+    case BUILT_IN_HUGE_VALF:\n+    case BUILT_IN_HUGE_VALL:\n+      return fold_builtin_inf (TREE_TYPE (TREE_TYPE (fndecl)), false);\n+\n     default:\n       break;\n     }"}, {"sha": "25ea430fd9ea9f9acab0e69b1f8aa981c1e840a4", "filename": "gcc/builtins.def", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "patch": "@@ -401,6 +401,32 @@ DEF_LIB_BUILTIN(BUILT_IN_LOGL,\n \t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n \n+DEF_GCC_BUILTIN(BUILT_IN_INF,\n+\t\t\"__builtin_inf\",\n+\t\tBT_FN_DOUBLE,\n+\t\tATTR_PURE_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_INFF,\n+\t\t\"__builtin_inff\",\n+\t\tBT_FN_FLOAT,\n+\t\tATTR_PURE_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_INFL,\n+\t\t\"__builtin_infl\",\n+\t\tBT_FN_LONG_DOUBLE,\n+\t\tATTR_PURE_NOTHROW_LIST)\n+\n+DEF_GCC_BUILTIN(BUILT_IN_HUGE_VAL,\n+\t\t\"__builtin_huge_val\",\n+\t\tBT_FN_DOUBLE,\n+\t\tATTR_PURE_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_HUGE_VALF,\n+\t\t\"__builtin_huge_valf\",\n+\t\tBT_FN_FLOAT,\n+\t\tATTR_PURE_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_HUGE_VALL,\n+\t\t\"__builtin_huge_vall\",\n+\t\tBT_FN_LONG_DOUBLE,\n+\t\tATTR_PURE_NOTHROW_LIST)\n+\n DEF_UNUSED_BUILTIN(BUILT_IN_GETEXP)\n DEF_UNUSED_BUILTIN(BUILT_IN_GETMAN)\n "}, {"sha": "ec33daa020bc1045060d80d31b03573cc62c0622", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "patch": "@@ -4833,6 +4833,36 @@ is evaluated if it includes side effects but no other code is generated\n and GCC does not issue a warning.\n @end deftypefn\n \n+@deftypefn {Built-in Function} double __builtin_huge_val (void)\n+Returns a positive infinity, if supported by the floating-point format,\n+else @code{DBL_MAX}.  This function is suitable for implementing the\n+ISO C macro @code{HUGE_VAL}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} float __builtin_huge_valf (void)\n+Similar to @code{__builtin_huge_val}, except the return type is @code{float}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} long double __builtin_huge_vall (void)\n+Similar to @code{__builtin_huge_val}, except the return\n+type is @code{long double}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} double __builtin_inf (void)\n+Similar to @code{__builtin_huge_val}, except a warning is generated\n+if the target floating-point format does not support infinities.\n+This function is suitable for implementing the ISO C99 macro @code{INFINITY}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} float __builtin_inff (void)\n+Similar to @code{__builtin_inf}, except the return type is @code{float}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} long double __builtin_infl (void)\n+Similar to @code{__builtin_inf}, except the return\n+type is @code{long double}.\n+@end deftypefn\n+\n @node Target Builtins\n @section Built-in Functions Specific to Particular Target Machines\n "}, {"sha": "077e313f3490a2e2823f4da1e57b2f008b383e6f", "filename": "gcc/real.c", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "patch": "@@ -1818,8 +1818,8 @@ eisnan (x)\n   return (0);\n }\n \n-/*  Fill e-type number X with infinity pattern (IEEE)\n-    or largest possible number (non-IEEE).  */\n+/* Fill e-type number X with infinity pattern (IEEE)\n+   or largest possible number (non-IEEE).  */\n \n static void\n einfin (x)\n@@ -1860,6 +1860,49 @@ einfin (x)\n #endif\n }\n \n+/* Similar, except return it as a REAL_VALUE_TYPE.  */\n+\n+REAL_VALUE_TYPE\n+ereal_inf (mode)\n+     enum machine_mode mode;\n+{\n+  REAL_VALUE_TYPE r;\n+  UEMUSHORT e[NE];\n+  int prec, rndsav;\n+\n+  switch (mode)\n+    {\n+    case QFmode:\n+    case SFmode:\n+      prec = 24;\n+      break;\n+    case HFmode:\n+    case DFmode:\n+      prec = 53;\n+      break;\n+    case TFmode:\n+      if (!INTEL_EXTENDED_IEEE_FORMAT)\n+\t{\n+\t  prec = 113;\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n+    case XFmode:\n+      prec = 64;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  rndsav = rndprc;\n+  rndprc = prec;\n+  einfin (e);\n+  rndprc = rndsav;\n+\n+  PUT_REAL (e, &r);\n+  return r;\n+}\n+\n /* Output an e-type NaN.\n    This generates Intel's quiet NaN pattern for extended real.\n    The exponent is 7fff, the leading mantissa word is c000.  */"}, {"sha": "f4265826ce952dc0327d557895f526f1e3858f7b", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "patch": "@@ -292,6 +292,7 @@ extern int target_isinf\t\tPARAMS ((REAL_VALUE_TYPE));\n extern int target_negative\tPARAMS ((REAL_VALUE_TYPE));\n extern void debug_real\t\tPARAMS ((REAL_VALUE_TYPE));\n extern REAL_VALUE_TYPE ereal_atof PARAMS ((const char *, enum machine_mode));\n+extern REAL_VALUE_TYPE ereal_inf PARAMS ((enum machine_mode));\n \n /* In tree.c: wrap up a REAL_VALUE_TYPE in a tree node.  */\n extern tree build_real\t\t\tPARAMS ((tree, REAL_VALUE_TYPE));"}]}