{"sha": "bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYyZWFhM2YyZGU3YWRmNjc4ODc2OTA5YjMzYmYwZjdjMmViMjE3MA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2012-03-12T09:59:25Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2012-03-12T09:59:25Z"}, "message": "ChangeLog entry:\n\n\t  * doc/invoke.texi: Document -mrtm option.\n\t  * common/config/i386/i386-common.c (OPTION_MASK_ISA_RTM_SET):\n\t  New.\n\t  (OPTION_MASK_ISA_RTM_UNSET): Ditto.\n\t  (ix86_handle_option): Handle OPT_mrtm.\n\t  * config.gcc (i[34567]86-*-*): Add rtmintrin.h and\n\t  xtestintrin.h.\n\t  (x86_64-*-*): Ditto.\n\t  * i386-builtin-types.def (INT_FTYPE_VOID): New.\n\t  * config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t  __RTM__ if needed.\n\t  (ix86_target_string): Define -mrtm option.\n\t  (PTA_RTM): New.\n\t  (ix86_option_override_internal): Extend \"corei7-avx\" with\n\t  RTM option. Handle new option.\n\t  (ix86_valid_target_attribute_inner_p): Add OPT_mrtm.\n\t  (ix86_builtins): Add IX86_BUILTIN_XBEGIN, IX86_BUILTIN_XEND,\n\t  IX86_BUILTIN_XTEST.\n\t  (bdesc_special_args): Ditto.\n\t  (ix86_init_mmx_sse_builtins): Add IX86_BUILTIN_XABORT.\n\t  (ix86_expand_special_args_builtin): Handle new built-in type.\n\t  (ix86_expand_builtin): Handle XABORT instruction.\n\t  * config/i386/i386.h (TARGET_RTM): New.\n\t  * config/i386/i386.md (UNSPECV_XBEGIN): New.\n\t  (UNSPECV_XEND): Ditto.\n\t  (UNSPECV_XABORT): Ditto.\n\t  (UNSPECV_XTEST): Ditto.\n\t  (xbegin): Ditto.\n\t  (xbegin_1): Ditto.\n\t  (xend): Ditto.\n\t  (xabort): Ditto\n\t  (xtest): Ditto.\n\t  (xtest_1): Ditto.\n\t  * config/i386/i386.opt (mrtm): New.\n\t  * config/i386/immintrin.h: Include rtmintrin.h and\n\t  xtestintrin.h.\n\t  * config/i386/rtmintrin.h: New header.\n\t  * config/i386/xtestintrin.h: Ditto.\n\ntestsuite/ChangeLog entry:\n    * gcc.target/i386/rtm-xabort-1.c: New.\n    * gcc.target/i386/rtm-xbegin-1.c: Ditto.\n    * gcc.target/i386/rtm-xend-1.c: Ditto.\n    * gcc.target/i386/rtm-xtest-1.c: Ditto.\n    * gcc.target/i386/sse-12.c: Test RTM intrinsics.\n    * gcc.target/i386/sse-13.c: Ditto.\n    * gcc.target/i386/sse-14.c: Ditto.\n    * gcc.target/i386/sse-22.c: Ditto.\n    * gcc.target/i386/sse-23.c: Ditto.\n    * g++.dg/other/i386-2.C: Ditto.\n    * g++.dg/other/i386-3.C: Ditto.\n\nFrom-SVN: r185218", "tree": {"sha": "5a61f4517f4666572922eb52e3006ce94cb7ece8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a61f4517f4666572922eb52e3006ce94cb7ece8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/comments", "author": null, "committer": null, "parents": [{"sha": "0859be177649f940d85209820906b0399626d839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0859be177649f940d85209820906b0399626d839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0859be177649f940d85209820906b0399626d839"}], "stats": {"total": 246, "additions": 231, "deletions": 15}, "files": [{"sha": "d79f5befb28ef5a2f37b72175b04a572434747f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -1,3 +1,44 @@\n+2012-02-12  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* doc/invoke.texi: Document -mrtm option.\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_RTM_SET):\n+\tNew.\n+\t(OPTION_MASK_ISA_RTM_UNSET): Ditto.\n+\t(ix86_handle_option): Handle OPT_mrtm.\n+\t* config.gcc (i[34567]86-*-*): Add rtmintrin.h and\n+\txtestintrin.h.\n+\t(x86_64-*-*): Ditto.\n+\t* i386-builtin-types.def (INT_FTYPE_VOID): New.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__RTM__ if needed.\n+\t(ix86_target_string): Define -mrtm option.\n+\t(PTA_RTM): New.\n+\t(ix86_option_override_internal): Extend \"corei7-avx\" with\n+\tRTM option. Handle new option.\n+\t(ix86_valid_target_attribute_inner_p): Add OPT_mrtm.\n+\t(ix86_builtins): Add IX86_BUILTIN_XBEGIN, IX86_BUILTIN_XEND,\n+\tIX86_BUILTIN_XTEST.\n+\t(bdesc_special_args): Ditto.\n+\t(ix86_init_mmx_sse_builtins): Add IX86_BUILTIN_XABORT.\n+\t(ix86_expand_special_args_builtin): Handle new built-in type.\n+\t(ix86_expand_builtin): Handle XABORT instruction.\n+\t* config/i386/i386.h (TARGET_RTM): New.\n+\t* config/i386/i386.md (UNSPECV_XBEGIN): New.\n+\t(UNSPECV_XEND): Ditto.\n+\t(UNSPECV_XABORT): Ditto.\n+\t(UNSPECV_XTEST): Ditto.\n+\t(xbegin): Ditto.\n+\t(xbegin_1): Ditto.\n+\t(xend): Ditto.\n+\t(xabort): Ditto\n+\t(xtest): Ditto.\n+\t(xtest_1): Ditto.\n+\t* config/i386/i386.opt (mrtm): New.\n+\t* config/i386/immintrin.h: Include rtmintrin.h and\n+\txtestintrin.h.\n+\t* config/i386/rtmintrin.h: New header.\n+\t* config/i386/xtestintrin.h: Ditto.\n+\n 2012-03-12  Tristan Gingold  <gingold@adacore.com>\n \n \t* ginclude/stddef.h: Adjust previous patch.  Use __VMS__ instead"}, {"sha": "70b7eb792f6f59d53c67ad456385ae0af575a0fb", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA_AVX2_SET \\\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX_SET)\n+#define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -121,6 +122,7 @@ along with GCC; see the file COPYING3.  If not see\n    | OPTION_MASK_ISA_AVX2_UNSET)\n #define OPTION_MASK_ISA_FMA_UNSET OPTION_MASK_ISA_FMA\n #define OPTION_MASK_ISA_AVX2_UNSET OPTION_MASK_ISA_AVX2\n+#define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -309,6 +311,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mrtm:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_RTM_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_RTM_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_RTM_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_RTM_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_msse4:\n       opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_SET;\n       opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_SET;"}, {"sha": "2ec414586507c446e75b9929da0096a39db20424", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -360,7 +360,8 @@ i[34567]86-*-*)\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h bmi2intrin.h tbmintrin.h\n-\t\t       avx2intrin.h fmaintrin.h f16cintrin.h\"\n+\t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n+\t\t       xtestintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -373,7 +374,8 @@ x86_64-*-*)\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h tbmintrin.h bmi2intrin.h\n-\t\t       avx2intrin.h fmaintrin.h f16cintrin.h\"\n+\t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n+\t\t       xtestintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "6696b7a73030cf29e318322e91496a1410c0bd3d", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -68,6 +68,7 @@\n #define bit_BMI\t\t(1 << 3)\n #define bit_AVX2\t(1 << 5)\n #define bit_BMI2\t(1 << 8)\n+#define bit_RTM\t\t(1 << 11)\n \n #if defined(__i386__) && defined(__PIC__)\n /* %ebx may be the PIC register.  */"}, {"sha": "9b3a01808465a33a7182b8af571e8e7c03fc49ec", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -141,6 +141,7 @@ DEF_POINTER_TYPE (PCV8SI, V8SI, CONST)\n DEF_FUNCTION_TYPE (FLOAT128)\n DEF_FUNCTION_TYPE (UINT64)\n DEF_FUNCTION_TYPE (UNSIGNED)\n+DEF_FUNCTION_TYPE (INT)\n DEF_FUNCTION_TYPE (VOID)\n DEF_FUNCTION_TYPE (PVOID)\n "}, {"sha": "8adb3b46dfaf414258480e8c612fe462590d678a", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -261,6 +261,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVX2__\");\n   if (isa_flag & OPTION_MASK_ISA_FMA)\n     def_or_undef (parse_in, \"__FMA__\");\n+  if (isa_flag & OPTION_MASK_ISA_RTM)\n+    def_or_undef (parse_in, \"__RTM__\");\n   if (isa_flag & OPTION_MASK_ISA_SSE4A)\n     def_or_undef (parse_in, \"__SSE4A__\");\n   if (isa_flag & OPTION_MASK_ISA_FMA4)"}, {"sha": "6744f89a82176dd26b1a2951c2ee061654426987", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -2682,6 +2682,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mfsgsbase\",\tOPTION_MASK_ISA_FSGSBASE },\n     { \"-mrdrnd\",\tOPTION_MASK_ISA_RDRND },\n     { \"-mf16c\",\t\tOPTION_MASK_ISA_F16C },\n+    { \"-mrtm\",\t\tOPTION_MASK_ISA_RTM },\n   };\n \n   /* Flag options.  */\n@@ -2930,6 +2931,7 @@ ix86_option_override_internal (bool main_args_p)\n #define PTA_XOP\t\t \t(HOST_WIDE_INT_1 << 29)\n #define PTA_AVX2\t\t(HOST_WIDE_INT_1 << 30)\n #define PTA_BMI2\t \t(HOST_WIDE_INT_1 << 31)\n+#define PTA_RTM\t\t \t(HOST_WIDE_INT_1 << 32)\n /* if this reaches 64, need to widen struct pta flags below */\n \n   static struct pta\n@@ -2988,7 +2990,7 @@ ix86_option_override_internal (bool main_args_p)\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX | PTA_AVX2\n \t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL | PTA_FSGSBASE\n \t| PTA_RDRND | PTA_F16C | PTA_BMI | PTA_BMI2 | PTA_LZCNT\n-        | PTA_FMA | PTA_MOVBE},\n+        | PTA_FMA | PTA_MOVBE | PTA_RTM},\n       {\"atom\", PROCESSOR_ATOM, CPU_ATOM,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_CX16 | PTA_MOVBE},\n@@ -3355,6 +3357,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_F16C\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_F16C))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_F16C;\n+\tif (processor_alias_table[i].flags & PTA_RTM\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_RTM))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_RTM;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -4155,6 +4160,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"fsgsbase\",\tOPT_mfsgsbase),\n     IX86_ATTR_ISA (\"rdrnd\",\tOPT_mrdrnd),\n     IX86_ATTR_ISA (\"f16c\",\tOPT_mf16c),\n+    IX86_ATTR_ISA (\"rtm\",\tOPT_mrtm),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -25643,6 +25649,12 @@ enum ix86_builtins\n \n   IX86_BUILTIN_CLZS,\n \n+  /* RTM */\n+  IX86_BUILTIN_XBEGIN,\n+  IX86_BUILTIN_XEND,\n+  IX86_BUILTIN_XABORT,\n+  IX86_BUILTIN_XTEST,\n+\n   /* BMI instructions.  */\n   IX86_BUILTIN_BEXTR32,\n   IX86_BUILTIN_BEXTR64,\n@@ -25981,6 +25993,11 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrfsbasedi, \"__builtin_ia32_wrfsbase64\", IX86_BUILTIN_WRFSBASE64, UNKNOWN, (int) VOID_FTYPE_UINT64 },\n   { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrgsbasesi, \"__builtin_ia32_wrgsbase32\", IX86_BUILTIN_WRGSBASE32, UNKNOWN, (int) VOID_FTYPE_UNSIGNED },\n   { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrgsbasedi, \"__builtin_ia32_wrgsbase64\", IX86_BUILTIN_WRGSBASE64, UNKNOWN, (int) VOID_FTYPE_UINT64 },\n+\n+  /* RTM */\n+  { OPTION_MASK_ISA_RTM, CODE_FOR_xbegin, \"__builtin_ia32_xbegin\", IX86_BUILTIN_XBEGIN, UNKNOWN, (int) UNSIGNED_FTYPE_VOID },\n+  { OPTION_MASK_ISA_RTM, CODE_FOR_xend, \"__builtin_ia32_xend\", IX86_BUILTIN_XEND, UNKNOWN, (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_RTM, CODE_FOR_xtest, \"__builtin_ia32_xtest\", IX86_BUILTIN_XTEST, UNKNOWN, (int) INT_FTYPE_VOID },\n };\n \n /* Builtins with variable number of arguments.  */\n@@ -27427,6 +27444,10 @@ ix86_init_mmx_sse_builtins (void)\n \t       V8SI_FTYPE_V8SI_PCINT_V4DI_V8SI_INT,\n \t       IX86_BUILTIN_GATHERALTDIV8SI);\n \n+  /* RTM.  */\n+  def_builtin (OPTION_MASK_ISA_RTM, \"__builtin_ia32_xabort\",\n+\t       VOID_FTYPE_UNSIGNED, IX86_BUILTIN_XABORT);\n+\n   /* MMX access to the vec_init patterns.  */\n   def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_vec_init_v2si\",\n \t\t     V2SI_FTYPE_INT_INT, IX86_BUILTIN_VEC_INIT_V2SI);\n@@ -28866,6 +28887,8 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       klass = store;\n       memory = 0;\n       break;\n+\n+    case INT_FTYPE_VOID:\n     case UINT64_FTYPE_VOID:\n     case UNSIGNED_FTYPE_VOID:\n       nargs = 0;\n@@ -29663,6 +29686,19 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n       return target;\n \n+    case IX86_BUILTIN_XABORT:\n+      icode = CODE_FOR_xabort;\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+      if (!insn_data[icode].operand[0].predicate (op0, mode0))\n+\t{\n+\t  error (\"the xabort's argument must be an 8-bit immediate\");\n+\t  return const0_rtx;\n+\t}\n+      emit_insn (gen_xabort (op0));\n+      return 0;\n+\n     default:\n       break;\n     }"}, {"sha": "c77070bc10a2a1ef635932509f0cda6189328644", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -75,6 +75,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_FSGSBASE\tOPTION_ISA_FSGSBASE\n #define TARGET_RDRND\tOPTION_ISA_RDRND\n #define TARGET_F16C\tOPTION_ISA_F16C\n+#define TARGET_RTM      OPTION_ISA_RTM\n \n #define TARGET_LP64\t(TARGET_64BIT && !TARGET_X32)\n "}, {"sha": "3aac3ed83350e29494ffd10831504e4707d2ad7e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -114,6 +114,7 @@\n   UNSPEC_CALL_NEEDS_VZEROUPPER\n   UNSPEC_PAUSE\n   UNSPEC_LEA_ADDR\n+  UNSPEC_XBEGIN_ABORT\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -206,6 +207,12 @@\n   UNSPECV_RDGSBASE\n   UNSPECV_WRFSBASE\n   UNSPECV_WRGSBASE\n+\n+  ;; For RTM support\n+  UNSPECV_XBEGIN\n+  UNSPECV_XEND\n+  UNSPECV_XABORT\n+  UNSPECV_XTEST\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -18196,6 +18203,72 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"memory\" \"unknown\")])\n \n+(define_expand \"xbegin\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(unspec_volatile:SI [(match_dup 1)] UNSPECV_XBEGIN))]\n+  \"TARGET_RTM\"\n+{\n+  rtx label = gen_label_rtx ();\n+\n+  operands[1] = force_reg (SImode, constm1_rtx);\n+\n+  emit_jump_insn (gen_xbegin_1 (operands[0], operands[1], label));\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  DONE;\n+})\n+\n+(define_insn \"xbegin_1\"\n+  [(set (pc)\n+\t(if_then_else (ne (unspec [(const_int 0)] UNSPEC_XBEGIN_ABORT)\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"register_operand\" \"0\")]\n+\t\t\t    UNSPECV_XBEGIN))]\n+  \"TARGET_RTM\"\n+  \"xbegin\\t%l2\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"6\")])\n+\n+(define_insn \"xend\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_XEND)]\n+  \"TARGET_RTM\"\n+  \"xend\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"3\")])\n+\n+(define_insn \"xabort\"\n+  [(unspec_volatile [(match_operand:SI 0 \"const_0_to_255_operand\" \"n\")]\n+\t\t    UNSPECV_XABORT)]\n+  \"TARGET_RTM\"\n+  \"xabort\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"3\")])\n+\n+(define_expand \"xtest\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(unspec_volatile:QI [(const_int 0)] UNSPECV_XTEST))]\n+  \"TARGET_RTM\"\n+{\n+  emit_insn (gen_xtest_1 ());\n+\n+  ix86_expand_setcc (operands[0], EQ, gen_rtx_REG (CCZmode, FLAGS_REG), const0_rtx);\n+\n+  DONE;\n+})\n+\n+(define_insn \"xtest_1\"\n+  [(set (reg:CCZ FLAGS_REG)\n+\t(unspec_volatile:CCZ [(const_int 0)] UNSPECV_XTEST))]\n+  \"TARGET_RTM\"\n+  \"xtest\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"3\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "1d8dc44e72fae4bb19706d5d3466c0f2bae5ab37", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -573,3 +573,7 @@ Split 32-byte AVX unaligned load\n mavx256-split-unaligned-store\n Target Report Mask(AVX256_SPLIT_UNALIGNED_STORE) Save\n Split 32-byte AVX unaligned store\n+\n+mrtm\n+Target Report Mask(ISA_RTM) Var(ix86_isa_flags) Save\n+Support RTM built-in functions and code generation"}, {"sha": "a477f05df33db2647e9efc73ef266252746e6c06", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -80,6 +80,14 @@\n #include <f16cintrin.h>\n #endif\n \n+#ifdef __RTM__\n+#include <rtmintrin.h>\n+#endif\n+\n+#ifdef __RTM__\n+#include <xtestintrin.h>\n+#endif\n+\n #ifdef __RDRND__\n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "096ef1f154d1355af14cc29d3e80b7ad18a3f635", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -629,7 +629,8 @@ Objective-C and Objective-C++ Dialects}.\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -mavx2 -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n--mbmi2 -mlwp -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n+-mbmi2 -mrtm -mlwp -mthreads @gol\n+-mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n@@ -13605,6 +13606,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-bmi2\n @itemx -mlzcnt\n @itemx -mno-lzcnt\n+@itemx -mrtm\n @itemx -mtbm\n @itemx -mno-tbm\n @opindex mmmx\n@@ -13615,7 +13617,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, F16C,\n-FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, LZCNT or 3DNow!@: \n+FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, LZCNT, RTM or 3DNow!@:\n extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "d12b3356993b5f8f1b111715c84f6b67086896bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -1,3 +1,17 @@\n+2012-03-12  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* gcc.target/i386/rtm-xabort-1.c: New.\n+\t* gcc.target/i386/rtm-xbegin-1.c: Ditto.\n+\t* gcc.target/i386/rtm-xend-1.c: Ditto.\n+\t* gcc.target/i386/rtm-xtest-1.c: Ditto.\n+\t* gcc.target/i386/sse-12.c: Test RTM intrinsics.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2012-03-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52542"}, {"sha": "680035371d1fb1780c23845a76cb0fb2b186fd62", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "b92168238138d4cf218916305f02dc4ce1768435", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "1d8fc3af83390cba6f99c8ffa9642fa48d3ec16b", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "a540864038fc6e040130d0c012eb4039b3a9fe0b", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n \n #include <mm_malloc.h>\n \n@@ -180,4 +180,5 @@\n #define __builtin_ia32_gatherdiv4si(X, Y, Z, K, M) __builtin_ia32_gatherdiv4si(X, Y, Z, K, 1)\n #define __builtin_ia32_gatherdiv4si256(X, Y, Z, K, M) __builtin_ia32_gatherdiv4si256(X, Y, Z, K, 1)\n \n-#include <x86intrin.h>\n+/* rtmintrin.h */\n+#define __builtin_ia32_xabort (N) __builtin_ia32_xabort (1)"}, {"sha": "a798487226c8278e8c9e48474d7a5a6cad18e80f", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n \n #include <mm_malloc.h>\n \n@@ -19,6 +19,10 @@\n \n #define _CONCAT(x,y) x ## y\n \n+#define test_0(func, type, imm)\t\t\t\t\t\t\\\n+  type _CONCAT(_,func) (int const I)\t\t\t\t\t\\\n+  { return func (imm); }\n+\n #define test_1(func, type, op1_type, imm)\t\t\t\t\\\n   type _CONCAT(_,func) (op1_type A, int const I)\t\t\t\\\n   { return func (A, imm); }\n@@ -95,6 +99,7 @@ test_1 (_mm256_round_ps, __m256, __m256, 1)\n test_1 (_cvtss_sh, unsigned short, float, 1)\n test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)\n+test_0 (_xabort, void, 1)\n \n /* wmmintrin.h */\n test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)"}, {"sha": "50b4cc3202fed613be4698f85afcf0a6159812d8", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -18,6 +18,10 @@\n \n #define _CONCAT(x,y) x ## y\n \n+#define test_0(func, type, imm)\t\t\t\t\t\t\\\n+  type _CONCAT(_,func) (int const I)\t\t\t\t\t\\\n+  { return func (imm); }\n+\n #define test_1(func, type, op1_type, imm)\t\t\t\t\\\n   type _CONCAT(_,func) (op1_type A, int const I)\t\t\t\\\n   { return func (A, imm); }\n@@ -46,7 +50,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -159,9 +163,9 @@ test_4 (_mm_cmpestro, int, __m128i, int, __m128i, int, 1)\n test_4 (_mm_cmpestrs, int, __m128i, int, __m128i, int, 1)\n test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n-/* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C) */\n+/* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)\n@@ -241,6 +245,9 @@ test_2 ( _mm256_i32gather_epi32, __m256i, int const *, __m256i, 1)\n test_2 ( _mm_i64gather_epi32, __m128i, int const *, __m128i, 1)\n test_2 ( _mm256_i64gather_epi32, __m128i, int const *, __m256i, 1)\n \n+/* rtmintrin.h */\n+test_0 ( _xabort, void, 1)\n+\n /* wmmintrin.h (AES/PCLMUL).  */\n #ifdef DIFFERENT_PRAGMAS\n #pragma GCC target (\"aes,pclmul\")"}, {"sha": "c160d7155f6ba64f5ee4d0b348f9711d7465f442", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf2eaa3f2de7adf678876909b33bf0f7c2eb2170/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=bf2eaa3f2de7adf678876909b33bf0f7c2eb2170", "patch": "@@ -180,7 +180,10 @@\n #define __builtin_ia32_gatherdiv4si(X, Y, Z, K, M) __builtin_ia32_gatherdiv4si(X, Y, Z, K, 1)\n #define __builtin_ia32_gatherdiv4si256(X, Y, Z, K, M) __builtin_ia32_gatherdiv4si256(X, Y, Z, K, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma\")\n+/* rtmintrin.h */\n+#define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n+\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}