{"sha": "dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzNGMwODdmZmU3YTc5ODgzNWZiOTVjN2ViM2RkNjhhZmQwOGYwOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-11-11T19:56:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-11-11T19:56:13Z"}, "message": "re PR tree-optimization/51058 (ICE: gimple check: expected gimple_assign(error_mark), have gimple_call() in gimple_assign_rhs_code, at gimple.h:1992)\n\n\tPR tree-optimization/51058\n\t* tree-vect-slp.c (vect_remove_slp_scalar_calls): New function.\n\t(vect_schedule_slp): Call it.\n\t* tree-vect-stmts.c (vectorizable_call): If slp_node != NULL,\n\tdon't replace scalar calls with setting of their lhs to zero here.\n\n\t* gcc.dg/vect/fast-math-vect-call-1.c: Add f4 test.\n\t* gfortran.dg/vect/pr51058-2.f90: New test.\n\nFrom-SVN: r181298", "tree": {"sha": "5623ea3cf39f67f9686820193e301a63187ff956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5623ea3cf39f67f9686820193e301a63187ff956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22d8712ac4f4f04786d4a2428cde756b065b9f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d8712ac4f4f04786d4a2428cde756b065b9f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d8712ac4f4f04786d4a2428cde756b065b9f97"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "60d97d15c8f97b2592bf84763388e19346ae8dc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "patch": "@@ -1,5 +1,11 @@\n 2011-11-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/51058\n+\t* tree-vect-slp.c (vect_remove_slp_scalar_calls): New function.\n+\t(vect_schedule_slp): Call it.\n+\t* tree-vect-stmts.c (vectorizable_call): If slp_node != NULL,\n+\tdon't replace scalar calls with setting of their lhs to zero here.\n+\n \tPR tree-optimization/51074\n \t* fold-const.c (vec_cst_ctor_to_array, fold_vec_perm): New functions.\n \t(fold_binary_loc): Handle VEC_EXTRACT_EVEN_EXPR,"}, {"sha": "c96c5406b04b9d96265866f1a1d1f582f49321b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "patch": "@@ -1,3 +1,9 @@\n+2011-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51058\n+\t* gcc.dg/vect/fast-math-vect-call-1.c: Add f4 test.\n+\t* gfortran.dg/vect/pr51058-2.f90: New test.\n+\n 2011-11-10  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/linkage1.C: New."}, {"sha": "db6df7e75111ee6fb410a8671e2e77dc7a63e5cd", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-vect-call-1.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-call-1.c?ref=dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "patch": "@@ -38,6 +38,18 @@ f3 (void)\n     a[i] = copysignf (b[i], c[i]) + 1.0f + sqrtf (d[i]);\n }\n \n+__attribute__((noinline, noclone)) void\n+f4 (int n)\n+{\n+  int i;\n+  for (i = 0; i < 2 * n; i++)\n+    {\n+      a[3 * i + 0] = copysignf (b[3 * i + 0], c[3 * i + 0]) + 1.0f + sqrtf (d[3 * i + 0]);\n+      a[3 * i + 1] = copysignf (b[3 * i + 1], c[3 * i + 1]) + 2.0f + sqrtf (d[3 * i + 1]);\n+      a[3 * i + 2] = copysignf (b[3 * i + 2], c[3 * i + 2]) + 3.0f + sqrtf (d[3 * i + 2]);\n+    }\n+}\n+\n __attribute__((noinline, noclone)) int\n main1 ()\n {\n@@ -66,6 +78,12 @@ main1 ()\n   for (i = 0; i < 64; i++)\n     if (fabsf (((i & 2) ? -4 * i : 4 * i) + 1 + i - a[i]) >= 0.0001f)\n       abort ();\n+    else\n+      a[i] = 131.25;\n+  f4 (10);\n+  for (i = 0; i < 60; i++)\n+    if (fabsf (((i & 2) ? -4 * i : 4 * i) + 1 + (i % 3) + i - a[i]) >= 0.0001f)\n+      abort ();\n   return 0;\n }\n \n@@ -76,6 +94,6 @@ main ()\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" { target { vect_call_copysignf && vect_call_sqrtf } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_call_copysignf && vect_call_sqrtf } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" { target { vect_call_copysignf && vect_call_sqrtf } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { target { vect_call_copysignf && vect_call_sqrtf } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f647e6cdb4fca6662aa412ab1d37eec1be75eed6", "filename": "gcc/testsuite/gfortran.dg/vect/pr51058-2.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51058-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51058-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51058-2.f90?ref=dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "patch": "@@ -0,0 +1,20 @@\n+! PR tree-optimization/51058\n+! { dg-do compile }\n+subroutine pr51058(n, u, v, w, z)\n+  double precision :: x(3,-2:16384), y(3,-2:16384), b, u, v, w, z\n+  integer :: i, n\n+  common /c/ x, y\n+  do i = 1, n\n+    b = u * int(x(1,i)) + sign(z,x(1,i))\n+    x(1,i) = x(1,i) - b\n+    y(1,i) = y(1,i) - b\n+    b = v * int(x(2,i)) + sign(z,x(2,i))\n+    x(2,i) = x(2,i) - b\n+    y(2,i) = y(2,i) - b\n+    b = w * int(x(3,i)) + sign(z,x(3,i))\n+    x(3,i) = x(3,i) - b\n+    y(3,i) = y(3,i) - b\n+  end do\n+end subroutine\n+\n+! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "23330b2882f8deb7c1eb50dbe4e5b2df5c1916f7", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "patch": "@@ -2902,6 +2902,46 @@ vect_schedule_slp_instance (slp_tree node, slp_instance instance,\n   return is_store;\n }\n \n+/* Replace scalar calls from SLP node NODE with setting of their lhs to zero.\n+   For loop vectorization this is done in vectorizable_call, but for SLP\n+   it needs to be deferred until end of vect_schedule_slp, because multiple\n+   SLP instances may refer to the same scalar stmt.  */\n+\n+static void\n+vect_remove_slp_scalar_calls (slp_tree node)\n+{\n+  gimple stmt, new_stmt;\n+  gimple_stmt_iterator gsi;\n+  int i;\n+  slp_void_p child;\n+  tree lhs;\n+  stmt_vec_info stmt_info;\n+\n+  if (!node)\n+    return;\n+\n+  FOR_EACH_VEC_ELT (slp_void_p, SLP_TREE_CHILDREN (node), i, child)\n+    vect_remove_slp_scalar_calls ((slp_tree) child);\n+\n+  FOR_EACH_VEC_ELT (gimple, SLP_TREE_SCALAR_STMTS (node), i, stmt)\n+    {\n+      if (!is_gimple_call (stmt) || gimple_bb (stmt) == NULL)\n+\tcontinue;\n+      stmt_info = vinfo_for_stmt (stmt);\n+      if (stmt_info == NULL\n+\t  || is_pattern_stmt_p (stmt_info)\n+\t  || !PURE_SLP_STMT (stmt_info))\n+\tcontinue;\n+      lhs = gimple_call_lhs (stmt);\n+      new_stmt = gimple_build_assign (lhs, build_zero_cst (TREE_TYPE (lhs)));\n+      set_vinfo_for_stmt (new_stmt, stmt_info);\n+      set_vinfo_for_stmt (stmt, NULL);\n+      STMT_VINFO_STMT (stmt_info) = new_stmt;\n+      gsi = gsi_for_stmt (stmt);\n+      gsi_replace (&gsi, new_stmt, false);\n+      SSA_NAME_DEF_STMT (gimple_assign_lhs (new_stmt)) = new_stmt;\n+    }\n+}\n \n /* Generate vector code for all SLP instances in the loop/basic block.  */\n \n@@ -2941,6 +2981,8 @@ vect_schedule_slp (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n       unsigned int j;\n       gimple_stmt_iterator gsi;\n \n+      vect_remove_slp_scalar_calls (root);\n+\n       for (j = 0; VEC_iterate (gimple, SLP_TREE_SCALAR_STMTS (root), j, store)\n                   && j < SLP_INSTANCE_GROUP_SIZE (instance); j++)\n         {"}, {"sha": "93e8198678bb4c63aab0dfeee1a4a3c4b2bf89e4", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd34c087ffe7a798835fb95c7eb3dd68afd08f08/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=dd34c087ffe7a798835fb95c7eb3dd68afd08f08", "patch": "@@ -1886,15 +1886,17 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n      it defines is mapped to the new definition.  So just replace\n      rhs of the statement with something harmless.  */\n \n+  if (slp_node)\n+    return true;\n+\n   type = TREE_TYPE (scalar_dest);\n   if (is_pattern_stmt_p (stmt_info))\n     lhs = gimple_call_lhs (STMT_VINFO_RELATED_STMT (stmt_info));\n   else\n     lhs = gimple_call_lhs (stmt);\n   new_stmt = gimple_build_assign (lhs, build_zero_cst (type));\n   set_vinfo_for_stmt (new_stmt, stmt_info);\n-  if (!slp_node)\n-    set_vinfo_for_stmt (stmt, NULL);\n+  set_vinfo_for_stmt (stmt, NULL);\n   STMT_VINFO_STMT (stmt_info) = new_stmt;\n   gsi_replace (gsi, new_stmt, false);\n   SSA_NAME_DEF_STMT (gimple_assign_lhs (new_stmt)) = new_stmt;"}]}