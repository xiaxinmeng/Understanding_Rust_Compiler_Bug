{"sha": "f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "node_id": "C_kwDOANBUbNoAKGY5N2UwY2E2ZTRlNWVmYjMzYTQ3ZjhhMWYwYTQ5Mzc1ZmQxMTk3Zjk", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-09-24T19:46:11Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-09-30T21:53:26Z"}, "message": "rust: Reintroduce TARGET_RUST_CPU_INFO hook\n\ngcc/ChangeLog:\n\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in: Add @node for Rust language and ABI, and document\n\tTARGET_RUST_CPU_INFO.\n\ngcc/rust/ChangeLog:\n\n\t* rust/rust-lang.cc (rust_add_target_info): Remove sorry.\n\t* rust/rust-session-manager.cc: Replace include of target.h with\n\tinclude of tm.h and rust-target.h.\n\t(Session::init): Call targetrustm.rust_cpu_info.\n\t* rust/rust-target.def (rust_cpu_info): New hook.\n\t* rust/rust-target.h (rust_add_target_info): Declare.", "tree": {"sha": "4f15c1f543841c76ab96eeebf17d25799ecdde36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f15c1f543841c76ab96eeebf17d25799ecdde36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "066b6b8df960796362dbdcff62851ebea201b8e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066b6b8df960796362dbdcff62851ebea201b8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/066b6b8df960796362dbdcff62851ebea201b8e9"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "638296d6fb9724ec503c29484a285b98522e3e11", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "patch": "@@ -53,6 +53,7 @@ through the macros defined in the @file{.h} file.\n * PCH Target::          Validity checking for precompiled headers.\n * C++ ABI::             Controlling C++ ABI changes.\n * D Language and ABI::  Controlling D ABI changes.\n+* Rust Language and ABI:: Controlling Rust ABI changes.\n * Named Address Spaces:: Adding support for named address spaces\n * Misc::                Everything else.\n @end menu\n@@ -10882,6 +10883,18 @@ if they have external linkage.  If this flag is false, then instantiated\n decls will be emitted as weak symbols.  The default is @code{false}.\n @end deftypevr\n \n+@node Rust Language and ABI\n+@section Rust ABI parameters\n+@cindex parameters, rust abi\n+\n+@deftypefn {Rust Target Hook} void TARGET_RUST_CPU_INFO (void)\n+Declare all environmental CPU info and features relating to the target CPU\n+using the function @code{rust_add_target_info}, which takes a string\n+representing the feature key and a string representing the feature value.\n+Configuration pairs predefined by this hook apply to all files that are being\n+compiled.\n+@end deftypefn\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "911d5dca4e607b36f3c15dd134879ed9c516888b", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "patch": "@@ -53,6 +53,7 @@ through the macros defined in the @file{.h} file.\n * PCH Target::          Validity checking for precompiled headers.\n * C++ ABI::             Controlling C++ ABI changes.\n * D Language and ABI::  Controlling D ABI changes.\n+* Rust Language and ABI:: Controlling Rust ABI changes.\n * Named Address Spaces:: Adding support for named address spaces\n * Misc::                Everything else.\n @end menu\n@@ -7127,6 +7128,12 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_TEMPLATES_ALWAYS_COMDAT\n \n+@node Rust Language and ABI\n+@section Rust ABI parameters\n+@cindex parameters, rust abi\n+\n+@hook TARGET_RUST_CPU_INFO\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "ed822cc4f139fdac00d4e32d233a35c253f3f933", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "patch": "@@ -104,8 +104,6 @@ struct GTY (()) language_function\n void\n rust_add_target_info (const char *key, const char *value)\n {\n-  sorry (\"TODO\");\n-\n   Rust::Session::get_instance ().options.target_data.insert_key_value_pair (\n     key, value);\n }"}, {"sha": "0947c18152c709d517ecca3ee30b363d75a741d9", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "patch": "@@ -42,7 +42,8 @@\n #include \"diagnostic.h\"\n #include \"input.h\"\n #include \"selftest.h\"\n-#include \"target.h\"\n+#include \"tm.h\"\n+#include \"rust-target.h\"\n \n extern bool\n saw_errors (void);\n@@ -135,6 +136,10 @@ validate_crate_name (const std::string &crate_name, Error &error)\n void\n Session::init ()\n {\n+  // initialize target hooks\n+  targetrustm.rust_cpu_info ();\n+\n+  // target-independent values that should exist in all targets\n   options.target_data.insert_key_value_pair (\"target_pointer_width\",\n \t\t\t\t\t     std::to_string (POINTER_SIZE));\n   options.target_data.insert_key_value_pair (\"target_endian\", BYTES_BIG_ENDIAN"}, {"sha": "285b7503528b4b413883a140211b9dea1d61c1c1", "filename": "gcc/rust/rust-target.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Frust%2Frust-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Frust%2Frust-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.def?ref=f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "patch": "@@ -28,5 +28,17 @@ HOOK_VECTOR (TARGETRUSTM_INITIALIZER, gcc_targetrustm)\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\"\n \n+/* Environmental CPU info and features (e.g. endianness, pointer size) relating\n+   to the target CPU.  */\n+DEFHOOK\n+(rust_cpu_info,\n+ \"Declare all environmental CPU info and features relating to the target CPU\\n\\\n+using the function @code{rust_add_target_info}, which takes a string\\n\\\n+representing the feature key and a string representing the feature value.\\n\\\n+Configuration pairs predefined by this hook apply to all files that are being\\n\\\n+compiled.\",\n+ void, (void),\n+ hook_void_void)\n+\n /* Close the 'struct gcc_targetrustm' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "7fcdfc99b81e23be06f514d5045ddbf8e20a3ad0", "filename": "gcc/rust/rust-target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Frust%2Frust-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9/gcc%2Frust%2Frust-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.h?ref=f97e0ca6e4e5efb33a47f8a1f0a49375fd1197f9", "patch": "@@ -25,6 +25,10 @@\n \n #include \"rust-target.def\"\n \n+/* Used by target to add target-related info.  */\n+extern void\n+rust_add_target_info (const char *, const char *);\n+\n /* Each target can provide their own.  */\n extern struct gcc_targetrustm targetrustm;\n "}]}