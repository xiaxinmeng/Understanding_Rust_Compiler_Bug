{"sha": "18546941ae4c56cd9240d2dc2ca2806e01eb6fb7", "node_id": "C_kwDOANBUbNoAKDE4NTQ2OTQxYWU0YzU2Y2Q5MjQwZDJkYzJjYTI4MDZlMDFlYjZmYjc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-08T11:13:33Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-08T15:08:09Z"}, "message": "path solver: Avoid recalculating ranges already in the cache.\n\nThe problem here is an ordering issue with a path that starts\nwith 19->3:\n\n <bb 3> [local count: 916928331]:\n  # value_20 = PHI <value_17(19), value_7(D)(17)>\n  # n_27 = PHI <n_16(19), 1(17)>\n  n_16 = n_27 + 4;\n  value_17 = value_20 / 10000;\n  if (value_20 > 42949672959999)\n    goto <bb 19>; [89.00%]\n  else\n    goto <bb 4>; [11.00%]\n\nThe problem here is that both value_17 and value_20 are in the set of\nimports we must pre-calculate.  The value_17 name occurs first in the\nbitmap, so we try to resolve it first, which causes us to recursively\nsolve the value_20 range.  We do so correctly and put them both in the\ncache.  However, when we try to solve value_20 from the bitmap, we\nignore that it already has a cached entry and try to resolve the PHI\nwith the wrong value of value_17:\n\n  # value_20 = PHI <value_17(19), value_7(D)(17)>\n\nThe right thing to do is to avoid recalculating definitions already\nsolved.\n\nRegstrapped and checked for # threads before and after on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103120\n\t* gimple-range-path.cc (path_range_query::range_defined_in_block):\n\tBail if there's a cache entry.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr103120.c: New test.", "tree": {"sha": "a9ec988e8935f31a537c1fbf194dc0d36fe73067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9ec988e8935f31a537c1fbf194dc0d36fe73067"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a354b4255b679de45bd3d4d8874a26c89f6c74fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a354b4255b679de45bd3d4d8874a26c89f6c74fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a354b4255b679de45bd3d4d8874a26c89f6c74fc"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "9d3fe89185ec1dda1c055e4a3782d9819ec26a25", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=18546941ae4c56cd9240d2dc2ca2806e01eb6fb7", "patch": "@@ -300,6 +300,9 @@ path_range_query::range_defined_in_block (irange &r, tree name, basic_block bb)\n   if (def_bb != bb)\n     return false;\n \n+  if (get_cache (r, name))\n+    return true;\n+\n   if (gimple_code (def_stmt) == GIMPLE_PHI)\n     ssa_range_in_phi (r, as_a<gphi *> (def_stmt));\n   else"}, {"sha": "b680a6c0fb0a23f50a1dc25f4996a46adfff272f", "filename": "gcc/testsuite/gcc.dg/pr103120.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103120.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18546941ae4c56cd9240d2dc2ca2806e01eb6fb7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103120.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103120.c?ref=18546941ae4c56cd9240d2dc2ca2806e01eb6fb7", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+#define radix 10\n+__INT32_TYPE__ numDigits(__UINT64_TYPE__ value)\n+{\n+     __INT32_TYPE__ n = 1;\n+     while (value > __UINT32_MAX__)\n+     {\n+        n += 4;\n+        value /= radix * radix * radix * radix;\n+     }\n+     __UINT32_TYPE__ v = (__UINT32_TYPE__)value;\n+     while (1)\n+     {\n+         if (v < radix)\n+             return n;\n+         if (v < radix * radix)\n+             return n + 1;\n+         if (v < radix * radix * radix)\n+             return n + 2;\n+         if (v < radix * radix * radix * radix)\n+             return n + 3;\n+         n += 4;\n+         v /= radix * radix * radix * radix;\n+     }\n+}\n+\n+int main()\n+{\n+    if (numDigits(__UINT64_MAX__) != 20)\n+        __builtin_abort();\n+}"}]}