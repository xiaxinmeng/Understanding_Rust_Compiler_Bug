{"sha": "bf425849f1dfa11f509e9ec251056d1e769b1ac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0MjU4NDlmMWRmYTExZjUwOWU5ZWMyNTEwNTZkMWU3NjliMWFjMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-19T12:43:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-19T12:47:00Z"}, "message": "preprocessor: main-file cleanup\n\nIn preparing module patch 7 I realized there was a cleanup I could\nmake to simplify it.  This is that cleanup.  Also, when doing the\ncleanup I noticed some macros had been turned into inline functions,\nbut not renamed to the preprocessors internal namespace\n(_cpp_$INTERNAL rather than cpp_$USER).  Thus, this renames those\nfunctions, deletes an internal field of the file structure, and\ndetermines whether we're in the main file by comparing to\npfile->main_file, the _cpp_file of the main file.\n\n\tlibcpp/\n\t* internal.h (cpp_in_system_header): Rename to ...\n\t(_cpp_in_system_header): ... here.\n\t(cpp_in_primary_file): Rename to ...\n\t(_cpp_in_main_source_file): ... here.  Compare main_file equality\n\tand check main_search value.\n\t* lex.c (maybe_va_opt_error, _cpp_lex_direct): Adjust for rename.\n\t* macro.c (_cpp_builtin_macro_text): Likewise.\n\t(replace_args): Likewise.\n\t* directives.c (do_include_next): Likewise.\n\t(do_pragma_once, do_pragma_system_header): Likewise.\n\t* files.c (struct _cpp_file): Delete main_file field.\n\t(pch_open): Check pfile->main_file equality.\n\t(make_cpp_file): Drop cpp_reader parm, don't set main_file.\n\t(_cpp_find_file): Adjust.\n\t(_cpp_stack_file): Check pfile->main_file equality.\n\t(struct report_missing_guard_data): Add cpp_reader field.\n\t(report_missing_guard): Check pfile->main_file equality.\n\t(_cpp_report_missing_guards): Adjust.", "tree": {"sha": "d73bb29cb66ee8d64169758fd9f46c9abfe72b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d73bb29cb66ee8d64169758fd9f46c9abfe72b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf425849f1dfa11f509e9ec251056d1e769b1ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf425849f1dfa11f509e9ec251056d1e769b1ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf425849f1dfa11f509e9ec251056d1e769b1ac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf425849f1dfa11f509e9ec251056d1e769b1ac2/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84ba819fe2f8bf49eddb7a3f42299a49d0206ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84ba819fe2f8bf49eddb7a3f42299a49d0206ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84ba819fe2f8bf49eddb7a3f42299a49d0206ea"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "bffdc913adb92e0dc50d22a2691c511145677690", "filename": "libcpp/directives.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=bf425849f1dfa11f509e9ec251056d1e769b1ac2", "patch": "@@ -877,7 +877,7 @@ do_include_next (cpp_reader *pfile)\n \n   /* If this is the primary source file, warn and use the normal\n      search logic.  */\n-  if (cpp_in_primary_file (pfile))\n+  if (_cpp_in_main_source_file (pfile))\n     {\n       cpp_error (pfile, CPP_DL_WARNING,\n \t\t \"#include_next in primary source file\");\n@@ -1546,7 +1546,7 @@ do_pragma (cpp_reader *pfile)\n static void\n do_pragma_once (cpp_reader *pfile)\n {\n-  if (cpp_in_primary_file (pfile))\n+  if (_cpp_in_main_source_file (pfile))\n     cpp_error (pfile, CPP_DL_WARNING, \"#pragma once in main file\");\n \n   check_eol (pfile, false);\n@@ -1708,7 +1708,7 @@ do_pragma_poison (cpp_reader *pfile)\n static void\n do_pragma_system_header (cpp_reader *pfile)\n {\n-  if (cpp_in_primary_file (pfile))\n+  if (_cpp_in_main_source_file (pfile))\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"#pragma system_header ignored outside include file\");\n   else"}, {"sha": "ba52d2bf3cf1c17e603e1179e5fbf8a9b27777eb", "filename": "libcpp/files.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=bf425849f1dfa11f509e9ec251056d1e769b1ac2", "patch": "@@ -103,9 +103,6 @@ struct _cpp_file\n   /* If read() failed before.  */\n   bool dont_read : 1;\n \n-  /* If this file is the main file.  */\n-  bool main_file : 1;\n-\n   /* If BUFFER above contains the true contents of the file.  */\n   bool buffer_valid : 1;\n \n@@ -186,7 +183,7 @@ static void open_file_failed (cpp_reader *pfile, _cpp_file *file, int,\n \t\t\t      location_t);\n static struct cpp_file_hash_entry *search_cache (struct cpp_file_hash_entry *head,\n \t\t\t\t\t     const cpp_dir *start_dir);\n-static _cpp_file *make_cpp_file (cpp_reader *, cpp_dir *, const char *fname);\n+static _cpp_file *make_cpp_file (cpp_dir *, const char *fname);\n static void destroy_cpp_file (_cpp_file *);\n static cpp_dir *make_cpp_dir (cpp_reader *, const char *dir_name, int sysp);\n static void allocate_file_hash_entries (cpp_reader *pfile);\n@@ -299,7 +296,7 @@ pch_open_file (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n   for (_cpp_file *f = pfile->all_files; f; f = f->next_file)\n     if (f->implicit_preinclude)\n       continue;\n-    else if (f->main_file)\n+    else if (pfile->main_file == f)\n       break;\n     else\n       return false;\n@@ -528,7 +525,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n   if (entry)\n     return entry->u.file;\n \n-  _cpp_file *file = make_cpp_file (pfile, start_dir, fname);\n+  _cpp_file *file = make_cpp_file (start_dir, fname);\n   file->implicit_preinclude\n     = (kind == _cpp_FFK_PRE_INCLUDE\n        || (pfile->buffer && pfile->buffer->file->implicit_preinclude));\n@@ -865,7 +862,7 @@ has_unique_contents (cpp_reader *pfile, _cpp_file *file, bool import,\n \t    {\n \t      /* We already have a buffer but it is not valid, because\n \t\t the file is still stacked.  Make a new one.  */\n-\t      ref_file = make_cpp_file (pfile, f->dir, f->name);\n+\t      ref_file = make_cpp_file (f->dir, f->name);\n \t      ref_file->path = f->path;\n \t    }\n \t  else\n@@ -951,7 +948,8 @@ _cpp_stack_file (cpp_reader *pfile, _cpp_file *file, include_type type,\n       if (CPP_OPTION (pfile, deps.style) > (sysp != 0)\n \t  && !file->stack_count\n \t  && file->path[0]\n-\t  && !(file->main_file && CPP_OPTION (pfile, deps.ignore_main_file)))\n+\t  && !(pfile->main_file == file\n+\t       && CPP_OPTION (pfile, deps.ignore_main_file)))\n \tdeps_add_dep (pfile->deps, file->path);\n \n       /* Clear buffer_valid since _cpp_clean_line messes it up.  */\n@@ -1187,12 +1185,9 @@ search_cache (struct cpp_file_hash_entry *head, const cpp_dir *start_dir)\n \n /* Allocate a new _cpp_file structure.  */\n static _cpp_file *\n-make_cpp_file (cpp_reader *pfile, cpp_dir *dir, const char *fname)\n+make_cpp_file (cpp_dir *dir, const char *fname)\n {\n-  _cpp_file *file;\n-\n-  file = XCNEW (_cpp_file);\n-  file->main_file = !pfile->buffer;\n+  _cpp_file *file = XCNEW (_cpp_file);\n   file->fd = -1;\n   file->dir = dir;\n   file->name = xstrdup (fname);\n@@ -1452,6 +1447,7 @@ cpp_change_file (cpp_reader *pfile, enum lc_reason reason,\n \n struct report_missing_guard_data\n {\n+  cpp_reader *pfile;\n   const char **paths;\n   size_t count;\n };\n@@ -1470,8 +1466,10 @@ report_missing_guard (void **slot, void *d)\n       _cpp_file *file = entry->u.file;\n \n       /* We don't want MI guard advice for the main file.  */\n-      if (!file->once_only && file->cmacro == NULL\n-\t  && file->stack_count == 1 && !file->main_file)\n+      if (!file->once_only\n+\t  && file->cmacro == NULL\n+\t  && file->stack_count == 1\n+\t  && data->pfile->main_file != file)\n \t{\n \t  if (data->paths == NULL)\n \t    {\n@@ -1501,6 +1499,7 @@ _cpp_report_missing_guards (cpp_reader *pfile)\n {\n   struct report_missing_guard_data data;\n \n+  data.pfile = pfile;\n   data.paths = NULL;\n   data.count = htab_elements (pfile->file_hash);\n   htab_traverse (pfile->file_hash, report_missing_guard, &data);"}, {"sha": "e629cbca26ae12e4bef5ca6f946e6fb1b167b5a2", "filename": "libcpp/internal.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=bf425849f1dfa11f509e9ec251056d1e769b1ac2", "patch": "@@ -628,22 +628,22 @@ typedef unsigned char uchar;\n \n #define UC (const uchar *)  /* Intended use: UC\"string\" */\n \n-/* Macros.  */\n+/* Accessors.  */\n \n-static inline int cpp_in_system_header (cpp_reader *);\n-static inline int\n-cpp_in_system_header (cpp_reader *pfile)\n+inline int\n+_cpp_in_system_header (cpp_reader *pfile)\n {\n   return pfile->buffer ? pfile->buffer->sysp : 0;\n }\n #define CPP_PEDANTIC(PF) CPP_OPTION (PF, cpp_pedantic)\n #define CPP_WTRADITIONAL(PF) CPP_OPTION (PF, cpp_warn_traditional)\n \n-static inline int cpp_in_primary_file (cpp_reader *);\n-static inline int\n-cpp_in_primary_file (cpp_reader *pfile)\n+/* Return true if we're in the main file (unless it's considered to be\n+   an include file in its own right.  */\n+inline int\n+_cpp_in_main_source_file (cpp_reader *pfile)\n {\n-  return pfile->line_table->depth == 1;\n+  return pfile->buffer->file == pfile->main_file;\n }\n \n /* True if NODE is a macro for the purposes of ifdef, defined etc.  */"}, {"sha": "0f18daf67642eb892e12f09bb1a09ae0d1f0bb9a", "filename": "libcpp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=bf425849f1dfa11f509e9ec251056d1e769b1ac2", "patch": "@@ -1370,7 +1370,7 @@ maybe_va_opt_error (cpp_reader *pfile)\n     {\n       /* __VA_OPT__ should not be accepted at all, but allow it in\n \t system headers.  */\n-      if (!cpp_in_system_header (pfile))\n+      if (!_cpp_in_system_header (pfile))\n \tcpp_error (pfile, CPP_DL_PEDWARN,\n \t\t   \"__VA_OPT__ is not available until C++20\");\n     }\n@@ -3093,7 +3093,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n       else if (c == '/' && ! CPP_OPTION (pfile, traditional))\n \t{\n \t  /* Don't warn for system headers.  */\n-\t  if (cpp_in_system_header (pfile))\n+\t  if (_cpp_in_system_header (pfile))\n \t    ;\n \t  /* Warn about comments if pedantically GNUC89, and not\n \t     in system headers.  */"}, {"sha": "35a5e70851971aabd5ba94ee49d28e5b455b360a", "filename": "libcpp/macro.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf425849f1dfa11f509e9ec251056d1e769b1ac2/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=bf425849f1dfa11f509e9ec251056d1e769b1ac2", "patch": "@@ -588,7 +588,7 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n \t (c) we are not in strictly conforming mode, then it has the\n \t value 0.  (b) and (c) are already checked in cpp_init_builtins.  */\n     case BT_STDC:\n-      if (cpp_in_system_header (pfile))\n+      if (_cpp_in_system_header (pfile))\n \tnumber = 0;\n       else\n \tnumber = 1;\n@@ -2217,7 +2217,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t      = (const cpp_token **) tokens_buff_last_token_ptr (buff);\n \t}\n       else if (CPP_PEDANTIC (pfile) && ! CPP_OPTION (pfile, c99)\n-\t       && ! macro->syshdr && ! cpp_in_system_header (pfile))\n+\t       && ! macro->syshdr && ! _cpp_in_system_header (pfile))\n \t{\n \t  if (CPP_OPTION (pfile, cplusplus))\n \t    cpp_pedwarning (pfile, CPP_W_PEDANTIC,\n@@ -2236,7 +2236,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t}\n       else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat) > 0\n \t       && ! CPP_OPTION (pfile, cplusplus)\n-\t       && ! macro->syshdr && ! cpp_in_system_header (pfile))\n+\t       && ! macro->syshdr && ! _cpp_in_system_header (pfile))\n \tcpp_warning (pfile, CPP_W_C90_C99_COMPAT,\n \t\t     \"invoking macro %s argument %d: \"\n \t\t     \"empty macro arguments are undefined\""}]}