{"sha": "0bb9276c88e58a10a6711a49b974bb5e71eb37e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiOTI3NmM4OGU1OGExMGE2NzExYTQ5Yjk3NGJiNWU3MWViMzdlNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T14:30:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T14:30:34Z"}, "message": "[multiple changes]\n\n2011-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_rm.texi: Document limitation of Pragma No_Strict_Aliasing.\n\n2011-08-01  Tristan Gingold  <gingold@adacore.com>\n\n\t* seh_init.c: Fix SEH handler installation on win64.\n\n2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Access_Subprogram_Declaration): in Asis mode, prevent\n\tdouble analysis of an anonymous access to subprogram, because it can\n\tlead to improper sharing of profiles and a back-end crash.\n\nFrom-SVN: r177037", "tree": {"sha": "4dd72eda6c0336868945cbdd3efd64412ecd91c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dd72eda6c0336868945cbdd3efd64412ecd91c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bb9276c88e58a10a6711a49b974bb5e71eb37e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb9276c88e58a10a6711a49b974bb5e71eb37e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb9276c88e58a10a6711a49b974bb5e71eb37e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/comments", "author": null, "committer": null, "parents": [{"sha": "ee222ce05cf5321a72c7f70e75a5e839c3e0bdaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee222ce05cf5321a72c7f70e75a5e839c3e0bdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee222ce05cf5321a72c7f70e75a5e839c3e0bdaf"}], "stats": {"total": 105, "additions": 53, "deletions": 52}, "files": [{"sha": "88e6a37f9110df8c1c1e06c6def9e49ed57a8bd9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0bb9276c88e58a10a6711a49b974bb5e71eb37e7", "patch": "@@ -1,3 +1,17 @@\n+2011-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_rm.texi: Document limitation of Pragma No_Strict_Aliasing.\n+\n+2011-08-01  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* seh_init.c: Fix SEH handler installation on win64.\n+\n+2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Subprogram_Declaration): in Asis mode, prevent\n+\tdouble analysis of an anonymous access to subprogram, because it can\n+\tlead to improper sharing of profiles and a back-end crash.\n+\n 2011-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* make.adb, sem_ch4.adb: Minor reformatting."}, {"sha": "acccd37665ef36ae164f29b9ada26212f1ca2b47", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0bb9276c88e58a10a6711a49b974bb5e71eb37e7", "patch": "@@ -3489,6 +3489,8 @@ description of the strict aliasing optimization, and the situations\n in which it must be suppressed, see @ref{Optimization and Strict\n Aliasing,,, gnat_ugn, @value{EDITION} User's Guide}.\n \n+This pragma currently has no effects on access to unconstrained array types.\n+\n @node Pragma Normalize_Scalars\n @unnumberedsec Pragma Normalize_Scalars\n @findex Normalize_Scalars"}, {"sha": "610df54d6abafb3eb4abd407eb43db70cd0a1138", "filename": "gcc/ada/seh_init.c", "status": "modified", "additions": 21, "deletions": 52, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/gcc%2Fada%2Fseh_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/gcc%2Fada%2Fseh_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fseh_init.c?ref=0bb9276c88e58a10a6711a49b974bb5e71eb37e7", "patch": "@@ -212,68 +212,37 @@ __gnat_SEH_error_handler (struct _EXCEPTION_RECORD* ExceptionRecord,\n     unwinding is handled by the runtime using either the GNAT SJLJ mechanism\n     or the ZCX GCC mechanism.\n \n-    The current implementation is using the RtlAddFunctionTable. Here is for\n-    information purposes the equivalent using a static .pdata section:\n-\n-         .section .rdata,\"dr\"\n-         .align 4\n-      Lunwind_info:\n-         .byte 9,0,0,0\n-         .rva ___gnat_SEH_error_handler\n-         .section .pdata,\"dr\"\n-         .align 4\n-         .long 0\n-         .rva etext\n-         .rva Lunwind_info\n-\n     Solutions based on SetUnhandledExceptionFilter have been discarded as this\n     function is mostly disabled on last Windows versions.\n     Using AddVectoredExceptionHandler should also be discarded as it overrides\n     all SEH exception handlers that might be present in the program itself and\n     the loaded DLL (for example it results in unexpected behaviors in the\n     Win32 subsystem.  */\n \n-typedef struct _UNWIND_INFO {\n-  BYTE VersionAndFlags;\n-  BYTE PrologSize;\n-  BYTE CountOfUnwindCodes;\n-  BYTE FrameRegisterAndOffset;\n-  ULONG AddressOfExceptionHandler;\n-} UNWIND_INFO,*PUNWIND_INFO;\n-\n-static RUNTIME_FUNCTION Table[1];\n-static UNWIND_INFO unwind_info[1];\n-\n-#define UNW_VERSION 0x01\n-#define UNW_FLAG_EHANDLER 0x08\n+asm\n+(\n+ \" .section .rdata, \\\"dr\\\"\\n\"\n+ \" .align 4\\n\"\n+ \"unwind_info:\\n\"\n+ \" .byte 9\\n\" /* UNW_FLAG_EHANDLER | UNW_VERSION */\n+ \" .byte 0\\n\" /* Prologue size.  */\n+ \" .byte 0\\n\" /* Count of unwind code.  */\n+ \" .byte 0\\n\" /* Frame register and offset.  */\n+ \" .rva __gnat_SEH_error_handler\\n\"\n+ \"\\n\"\n+ \" .section .pdata, \\\"dr\\\"\\n\"\n+ \" .align 4\\n\"\n+ \" .long 0\\n\" /* ImageBase */\n+ \" .rva etext\\n\"\n+ \" .rva unwind_info\\n\"\n+ \"\\n\"\n+ \" .text\\n\"\n+);\n \n void __gnat_install_SEH_handler (void *eh ATTRIBUTE_UNUSED)\n {\n-  /* Get the end of the text section.  */\n-  extern char etext[] asm(\"etext\");\n-  /* Get the base of the module.  */\n-  extern char __ImageBase[];\n-\n-  /* Current version is always 1 and we are registering an\n-     exception handler.  */\n-  unwind_info[0].VersionAndFlags = UNW_FLAG_EHANDLER | UNW_VERSION;\n-\n-  /* We don't use the unwinding info so fill the structure with 0 values.  */\n-  unwind_info[0].PrologSize = 0;\n-  unwind_info[0].CountOfUnwindCodes = 0;\n-  unwind_info[0].FrameRegisterAndOffset = 0;\n-\n-  /* Add the exception handler.  */\n-  unwind_info[0].AddressOfExceptionHandler =\n-    (DWORD)((char *)__gnat_SEH_error_handler - __ImageBase);\n-\n-  /* Set its scope to the entire program.  */\n-  Table[0].BeginAddress = 0;\n-  Table[0].EndAddress = (DWORD)(etext - __ImageBase);\n-  Table[0].UnwindData = (DWORD)((char *)unwind_info - __ImageBase);\n-\n-  /* Register the unwind information.  */\n-  RtlAddFunctionTable (Table, 1, (DWORD64)__ImageBase);\n+  /* Nothing to do, the handler is statically installed by the asm statement\n+     just above.  */\n }\n \n #else /* defined (_WIN64) */"}, {"sha": "c44b4e7316dd6fabd580ce3087864312f6392998", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb9276c88e58a10a6711a49b974bb5e71eb37e7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0bb9276c88e58a10a6711a49b974bb5e71eb37e7", "patch": "@@ -1172,6 +1172,22 @@ package body Sem_Ch3 is\n \n          begin\n             F := First (Formals);\n+\n+            --  In ASIS mode, the access_to_subprogram may be analyzed twice,\n+            --  when it is part of an unconstrained type and subtype expansion\n+            --  is disabled.  To avoid back-end problems with shared profiles,\n+            --  use previous subprogram type as the designated type.\n+\n+            if ASIS_Mode\n+              and then Present (Scope (Defining_Identifier (F)))\n+            then\n+               Set_Etype                    (T_Name, T_Name);\n+               Init_Size_Align              (T_Name);\n+               Set_Directly_Designated_Type (T_Name,\n+                 Scope (Defining_Identifier (F)));\n+               return;\n+            end if;\n+\n             while Present (F) loop\n                if No (Parent (Defining_Identifier (F))) then\n                   Set_Parent (Defining_Identifier (F), F);"}]}