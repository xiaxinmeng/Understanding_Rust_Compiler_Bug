{"sha": "317525b03ebd1db7e04a900d7a735d7a079b3821", "node_id": "C_kwDOANBUbNoAKDMxNzUyNWIwM2ViZDFkYjdlMDRhOTAwZDdhNzM1ZDdhMDc5YjM4MjE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-01T00:18:50Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-01T00:18:50Z"}, "message": "Daily bump.", "tree": {"sha": "cc539f46a7096c9c8e378c276b3c21bce39b40c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc539f46a7096c9c8e378c276b3c21bce39b40c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/317525b03ebd1db7e04a900d7a735d7a079b3821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317525b03ebd1db7e04a900d7a735d7a079b3821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317525b03ebd1db7e04a900d7a735d7a079b3821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317525b03ebd1db7e04a900d7a735d7a079b3821/comments", "author": null, "committer": null, "parents": [{"sha": "b533084d756a2696a3eb6521810e0a0b2182a8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b533084d756a2696a3eb6521810e0a0b2182a8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b533084d756a2696a3eb6521810e0a0b2182a8e8"}], "stats": {"total": 2129, "additions": 2128, "deletions": 1}, "files": [{"sha": "692efe134e008333726452b0113b51c4b72dcd6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,123 @@\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/constraints.md (vj): New.\n+\t(vk): Ditto\n+\t* config/riscv/iterators.md: Add more opcode.\n+\t* config/riscv/predicates.md (vector_arith_operand): New.\n+\t(vector_neg_arith_operand): New.\n+\t(vector_shift_operand): New.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class binop): New.\n+\t* config/riscv/riscv-vector-builtins-bases.h: (vadd): New.\n+\t(vsub): Ditto.\n+\t(vand): Ditto.\n+\t(vor): Ditto.\n+\t(vxor): Ditto.\n+\t(vsll): Ditto.\n+\t(vsra): Ditto.\n+\t(vsrl): Ditto.\n+\t(vmin): Ditto.\n+\t(vmax): Ditto.\n+\t(vminu): Ditto.\n+\t(vmaxu): Ditto.\n+\t(vmul): Ditto.\n+\t(vdiv): Ditto.\n+\t(vrem): Ditto.\n+\t(vdivu): Ditto.\n+\t(vremu): Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vadd): New.\n+\t(vsub): Ditto.\n+\t(vand): Ditto.\n+\t(vor): Ditto.\n+\t(vxor): Ditto.\n+\t(vsll): Ditto.\n+\t(vsra): Ditto.\n+\t(vsrl): Ditto.\n+\t(vmin): Ditto.\n+\t(vmax): Ditto.\n+\t(vminu): Ditto.\n+\t(vmaxu): Ditto.\n+\t(vmul): Ditto.\n+\t(vdiv): Ditto.\n+\t(vrem): Ditto.\n+\t(vdivu): Ditto.\n+\t(vremu): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct binop_def): New.\n+\t* config/riscv/riscv-vector-builtins-shapes.h (binop): New.\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_I_OPS): New.\n+\t(DEF_RVV_U_OPS): New.\n+\t(rvv_arg_type_info::get_base_vector_type): Handle\n+\tRVV_BASE_shift_vector.\n+\t(rvv_arg_type_info::get_tree_type): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Add\n+\tRVV_BASE_shift_vector.\n+\t* config/riscv/riscv.cc (riscv_print_operand): Handle 'V'.\n+\t* config/riscv/vector-iterators.md: Handle more opcode.\n+\t* config/riscv/vector.md (@pred_<optab><mode>): New.\n+\n+2023-01-31  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\tPR target/108589\n+\t* config/aarch64/aarch64.cc (aarch_macro_fusion_pair_p): Check\n+\tREG_P on SET_DEST.\n+\n+2023-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/108608\n+\t* tree-vect-loop.cc (vect_transform_reduction): Handle single\n+\tdef-use cycles that involve function calls rather than tree codes.\n+\n+2023-01-31  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108385\n+\t* gimple-range-gori.cc (gori_compute::compute_operand_range):\n+\tAllow VARYING computations to continue if there is a relation.\n+\t* range-op.cc (pointer_plus_operator::op2_range): New.\n+\n+2023-01-31  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108359\n+\t* range-op.cc (range_operator::wi_fold_in_parts_equiv): New.\n+\t(range_operator::fold_range): If op1 is equivalent to op2 then\n+\tinvoke new fold_in_parts_equiv to operate on sub-components.\n+\t* range-op.h (wi_fold_in_parts_equiv): New prototype.\n+\n+2023-01-31  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (gori_compute::compute_operand_range): Do\n+\tnot abort calculations if there is a valid relation available.\n+\t(gori_compute::refine_using_relation): Pass correct relation trio.\n+\t(gori_compute::compute_operand1_range): Create trio and use it.\n+\t(gori_compute::compute_operand2_range): Ditto.\n+\t* range-op.cc (operator_plus::op1_range): Use correct trio member.\n+\t(operator_minus::op1_range): Use correct trio member.\n+\t* value-relation.cc (value_relation::create_trio): New.\n+\t* value-relation.h (value_relation::create_trio): New prototype.\n+\n+2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108599\n+\t* config/i386/i386-expand.cc\n+\t(ix86_convert_const_wide_int_to_broadcast): Return nullptr if\n+\tCONST_WIDE_INT_NUNITS (op) times HOST_BITS_PER_WIDE_INT isn't\n+\tequal to bitsize of mode.\n+\n+2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/108596\n+\t* bb-reorder.cc (fix_up_fall_thru_edges): Handle the case where cur_bb\n+\tends with asm goto and has a crossing fallthrough edge to the same bb\n+\tthat contains at least one of its labels by restoring EDGE_CROSSING\n+\tflag even on possible edge from cur_bb to new_bb successor.\n+\n+2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105593\n+\t* config/i386/avx512erintrin.h (_mm512_exp2a23_round_pd,\n+\t_mm512_exp2a23_round_ps, _mm512_rcp28_round_pd, _mm512_rcp28_round_ps,\n+\t_mm512_rsqrt28_round_pd, _mm512_rsqrt28_round_ps): Use\n+\t_mm512_undefined_pd () or _mm512_undefined_ps () instead of using\n+\tuninitialized automatic variable __W.\n+\n 2023-01-31  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/include/fdl.texi: Change fsf.org to www.fsf.org."}, {"sha": "f295cfe77a7623e9db1f8e577b7b886037e0b6b4", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1 +1 @@\n-20230131\n+20230201"}, {"sha": "ba60297ef82c9f9d9309121b29bef4eab5f574de", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,11 @@\n+2023-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107593\n+\tPR c++/108597\n+\t* c-common.h (instantiation_dependent_expression_p): Declare.\n+\t* c-warn.cc (warn_duplicated_cond_add_or_warn): If the condition\n+\tis dependent, invalidate the chain.\n+\n 2023-01-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/105300"}, {"sha": "ca7e9b3c006db4c6ab10f3cdf54524c26f98597f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,9 @@\n+2023-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107593\n+\tPR c++/108597\n+\t* c-objc-common.cc (instantiation_dependent_expression_p): New.\n+\n 2023-01-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.cc (c_parser_declaration_or_fndef): Do not allow braces"}, {"sha": "4e97c19834d90cec9092bd9a2316e9c2d1ea3ed7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,16 @@\n+2023-01-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108559\n+\t* cp-gimplify.cc (any_non_eliding_target_exprs): New.\n+\t(cp_genericize_init): Check it.\n+\n+2023-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107593\n+\tPR c++/108597\n+\t* cp-tree.h (instantiation_dependent_expression_p): Don't\n+\tdeclare here.\n+\n 2023-01-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/105300"}, {"sha": "b476c4fa13a2944c46de8ade184bd9d46a20d86c", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,110 @@\n+2023-01-31  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* Make-lang.in (gm2-libs.texi-check): Rename\n+\tm2/gm2-libs-pim\tto m2/gm2-libs-log.\n+\t* gm2-libs-pim/BitBlockOps.def: Moved to...\n+\t* gm2-libs-log/BitBlockOps.def: ...here.\n+\t* gm2-libs-pim/BitBlockOps.mod: Moved to...\n+\t* gm2-libs-log/BitBlockOps.mod: ...here.\n+\t* gm2-libs-pim/BitByteOps.def: Moved to...\n+\t* gm2-libs-log/BitByteOps.def: ...here.\n+\t* gm2-libs-pim/BitByteOps.mod: Moved to...\n+\t* gm2-libs-log/BitByteOps.mod: ...here.\n+\t* gm2-libs-pim/BitWordOps.def: Moved to...\n+\t* gm2-libs-log/BitWordOps.def: ...here.\n+\t* gm2-libs-pim/BitWordOps.mod: Moved to...\n+\t* gm2-libs-log/BitWordOps.mod: ...here.\n+\t* gm2-libs-pim/BlockOps.def: Moved to...\n+\t* gm2-libs-log/BlockOps.def: ...here.\n+\t* gm2-libs-pim/BlockOps.mod: Moved to...\n+\t* gm2-libs-log/BlockOps.mod: ...here.\n+\t* gm2-libs-pim/Break.c: Moved to...\n+\t* gm2-libs-log/Break.c: ...here.\n+\t* gm2-libs-pim/Break.def: Moved to...\n+\t* gm2-libs-log/Break.def: ...here.\n+\t* gm2-libs-pim/CardinalIO.def: Moved to...\n+\t* gm2-libs-log/CardinalIO.def: ...here.\n+\t* gm2-libs-pim/CardinalIO.mod: Moved to...\n+\t* gm2-libs-log/CardinalIO.mod: ...here.\n+\t* gm2-libs-pim/Conversions.def: Moved to...\n+\t* gm2-libs-log/Conversions.def: ...here.\n+\t* gm2-libs-pim/Conversions.mod: Moved to...\n+\t* gm2-libs-log/Conversions.mod: ...here.\n+\t* gm2-libs-pim/DebugPMD.def: Moved to...\n+\t* gm2-libs-log/DebugPMD.def: ...here.\n+\t* gm2-libs-pim/DebugPMD.mod: Moved to...\n+\t* gm2-libs-log/DebugPMD.mod: ...here.\n+\t* gm2-libs-pim/DebugTrace.def: Moved to...\n+\t* gm2-libs-log/DebugTrace.def: ...here.\n+\t* gm2-libs-pim/DebugTrace.mod: Moved to...\n+\t* gm2-libs-log/DebugTrace.mod: ...here.\n+\t* gm2-libs-pim/Delay.def: Moved to...\n+\t* gm2-libs-log/Delay.def: ...here.\n+\t* gm2-libs-pim/Delay.mod: Moved to...\n+\t* gm2-libs-log/Delay.mod: ...here.\n+\t* gm2-libs-pim/Display.def: Moved to...\n+\t* gm2-libs-log/Display.def: ...here.\n+\t* gm2-libs-pim/Display.mod: Moved to...\n+\t* gm2-libs-log/Display.mod: ...here.\n+\t* gm2-libs-pim/ErrorCode.def: Moved to...\n+\t* gm2-libs-log/ErrorCode.def: ...here.\n+\t* gm2-libs-pim/ErrorCode.mod: Moved to...\n+\t* gm2-libs-log/ErrorCode.mod: ...here.\n+\t* gm2-libs-pim/FileSystem.def: Moved to...\n+\t* gm2-libs-log/FileSystem.def: ...here.\n+\t* gm2-libs-pim/FileSystem.mod: Moved to...\n+\t* gm2-libs-log/FileSystem.mod: ...here.\n+\t* gm2-libs-pim/FloatingUtilities.def: Moved to...\n+\t* gm2-libs-log/FloatingUtilities.def: ...here.\n+\t* gm2-libs-pim/FloatingUtilities.mod: Moved to...\n+\t* gm2-libs-log/FloatingUtilities.mod: ...here.\n+\t* gm2-libs-pim/InOut.def: Moved to...\n+\t* gm2-libs-log/InOut.def: ...here.\n+\t* gm2-libs-pim/InOut.mod: Moved to...\n+\t* gm2-libs-log/InOut.mod: ...here.\n+\t* gm2-libs-pim/Keyboard.def: Moved to...\n+\t* gm2-libs-log/Keyboard.def: ...here.\n+\t* gm2-libs-pim/Keyboard.mod: Moved to...\n+\t* gm2-libs-log/Keyboard.mod: ...here.\n+\t* gm2-libs-pim/LongIO.def: Moved to...\n+\t* gm2-libs-log/LongIO.def: ...here.\n+\t* gm2-libs-pim/LongIO.mod: Moved to...\n+\t* gm2-libs-log/LongIO.mod: ...here.\n+\t* gm2-libs-pim/NumberConversion.def: Moved to...\n+\t* gm2-libs-log/NumberConversion.def: ...here.\n+\t* gm2-libs-pim/NumberConversion.mod: Moved to...\n+\t* gm2-libs-log/NumberConversion.mod: ...here.\n+\t* gm2-libs-pim/README.texi: Moved to...\n+\t* gm2-libs-log/README.texi: ...here.\n+\t* gm2-libs-pim/Random.def: Moved to...\n+\t* gm2-libs-log/Random.def: ...here.\n+\t* gm2-libs-pim/Random.mod: Moved to...\n+\t* gm2-libs-log/Random.mod: ...here.\n+\t* gm2-libs-pim/RealConversions.def: Moved to...\n+\t* gm2-libs-log/RealConversions.def: ...here.\n+\t* gm2-libs-pim/RealConversions.mod: Moved to...\n+\t* gm2-libs-log/RealConversions.mod: ...here.\n+\t* gm2-libs-pim/RealInOut.def: Moved to...\n+\t* gm2-libs-log/RealInOut.def: ...here.\n+\t* gm2-libs-pim/RealInOut.mod: Moved to...\n+\t* gm2-libs-log/RealInOut.mod: ...here.\n+\t* gm2-libs-pim/Strings.def: Moved to...\n+\t* gm2-libs-log/Strings.def: ...here.\n+\t* gm2-libs-pim/Strings.mod: Moved to...\n+\t* gm2-libs-log/Strings.mod: ...here.\n+\t* gm2-libs-pim/Termbase.def: Moved to...\n+\t* gm2-libs-log/Termbase.def: ...here.\n+\t* gm2-libs-pim/Termbase.mod: Moved to...\n+\t* gm2-libs-log/Termbase.mod: ...here.\n+\t* gm2-libs-pim/Terminal.def: Moved to...\n+\t* gm2-libs-log/Terminal.def: ...here.\n+\t* gm2-libs-pim/Terminal.mod: Moved to...\n+\t* gm2-libs-log/Terminal.mod: ...here.\n+\t* gm2-libs-pim/TimeDate.def: Moved to...\n+\t* gm2-libs-log/TimeDate.def: ...here.\n+\t* gm2-libs-pim/TimeDate.mod: Moved to...\n+\t* gm2-libs-log/TimeDate.mod: ...here.\n+\n 2023-01-28  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* lang.opt: Claim Wreturn-type."}, {"sha": "033b0ff7c0b079dfaf6f59b6080bde3fd10aaa17", "filename": "gcc/rust/ChangeLog", "status": "modified", "additions": 1014, "deletions": 0, "changes": 1014, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Frust%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Frust%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,1017 @@\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* Make-lang.in: Remove `rust-hir-typecheck-toplevel` object and add\n+\t`rust-hir-path-probe` one.\n+\t* typecheck/rust-hir-dot-operator.cc (MethodResolver::MethodResolver):\n+\tRemove no longer used `context` and `mapping` fields, and use new\n+\t`query_type` API.\n+\t(MethodResolver::MethodResolver): Likewise.\n+\t(MethodResolver::select): Use new `query_type` API.\n+\t* typecheck/rust-hir-path-probe.h: New header.\n+\t* typecheck/rust-hir-path-probe.cc: New file.\n+\t* typecheck/rust-hir-dot-operator.h (class MethodResolver): Remove no\n+\tlonger used `context` and `mapping` fields, and use new `query_type` API.\n+\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::query_type): New function.\n+\t* typecheck/rust-hir-type-check-base.h: Declare `query_type` function.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Add debug print.\n+\t* typecheck/rust-hir-type-check-implitem.cc (TypeCheckTopLevelExternItem::Resolve):\n+\tRefactor and make use of new query system.\n+\t(TypeCheckTopLevelExternItem::Resolve): Likewise.\n+\t(TypeCheckTopLevelExternItem::visit): Likewise.\n+\t(TypeCheckTopLevelImplItem::visit): Likewise.\n+\t(TypeCheckImplItem::visit): Likewise.\n+\t(TypeCheckImplItem::TypeCheckImplItem): Likewise.\n+\t(TypeCheckImplItem::Resolve): Likewise.\n+\t(TypeCheckImplItemWithTrait::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-implitem.h (class TypeCheckTopLevelImplItem): Likewise.\n+\t(class TypeCheckImplItemWithTrait): Likewise.\n+\t* typecheck/rust-hir-type-check-item.cc (TypeCheckItem::TypeCheckItem): Likewise.\n+\t(TypeCheckItem::Resolve): Likewise.\n+\t(TypeCheckItem::ResolveImplItem): Likewise.\n+\t(TypeCheckItem::ResolveImplBlockSelf): Likewise.\n+\t(TypeCheckItem::visit): Likewise.\n+\t(TypeCheckItem::resolve_impl_item): Likewise.\n+\t(TypeCheckItem::resolve_impl_block_substitutions): Likewise.\n+\t(TypeCheckItem::resolve_impl_block_self): Likewise.\n+\t* typecheck/rust-hir-type-check-item.h: Likewise.\n+\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_root_path): Likewise.\n+\t(TypeCheckExpr::resolve_segments): Likewise.\n+\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-stmt.h: Likewise.\n+\t* typecheck/rust-hir-type-check-type.cc (TypeCheckType::Resolve): Likewise.\n+\t(TypeCheckType::visit): Likewise.\n+\t(TypeCheckType::resolve_root_path): Likewise.\n+\t* typecheck/rust-hir-type-check.cc (TypeResolution::Resolve): Likewise.\n+\t* typecheck/rust-hir-type-check.h: Likewise.\n+\t* typecheck/rust-substitution-mapper.h: Likewise.\n+\t* typecheck/rust-tyty-bounds.cc (TypeBoundsProbe::scan): Likewise.\n+\t(TypeCheckBase::get_predicate_from_bound): Likewise.\n+\t(TypeBoundsMappings::add_bound): Likewise.\n+\t* typecheck/rust-tyty-cmp.h: Likewise.\n+\t* typecheck/rust-tyty.h: Likewise.\n+\t* typecheck/rust-tyty.cc (SubstitutionRef::infer_substitions): Likewise.\n+\t(ParamType::resolve): Do not infinite loop anymore.\n+\t* util/rust-hir-map.h: Add new `hirImplBlockTypeMappings` and\n+\tdeclare `lookup_impl_block_type`.\n+\t* util/rust-hir-map.cc (Mappings::insert_hir_impl_block): Use new\n+\t`hirImplBlockTypeMappings`\n+\t(Mappings::lookup_impl_block_type): New function.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile-context.h: Add new optional `asm_name` string\n+\targument to `lookup_function_decl`.\n+\t* backend/rust-compile-item.cc (CompileItem::visit): Compute assembly\n+\tname and pass it to `lookup_function_decl` when calling it.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-constexpr.cc (eval_store_expression): Remove invalid\n+\tassertion on constexpr constructors.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile-expr.h: Formatting.\n+\n+2023-01-31  liushuyu  <liushuyu011@gmail.com>\n+\n+\t* ast/rust-ast.h (class MacroInvocData): Store expander as\n+\tmember of the class.\n+\t(class Expr): Add `is_literal` virtual method\n+\t* ast/rust-expr.h: Override `is_literal` for `LiteralExpr`s.\n+\t* expand/rust-macro-builtins.cc (try_expand_macro_expression): New function.\n+\t(try_extract_string_literal_from_fragment): Likewise.\n+\t(try_expand_single_string_literal): Likewise.\n+\t(try_expand_many_expr): Likewise.\n+\t(parse_single_string_literal): Add macro expander as argument.\n+\t(MacroBuiltin::include_bytes): Pass expander as argument to\n+\t`parse_single_string_literal`.\n+\t(MacroBuiltin::include_str): Likewise.\n+\t(MacroBuiltin::compile_error): Likewise.\n+\t(MacroBuiltin::include): Likewise.\n+\t(MacroBuiltin::concat): Likewise and add better error handling.\n+\t(MacroBuiltin::env): Likewise.\n+\t* expand/rust-macro-expand.cc (MacroExpander::expand_invoc): Expand\n+\tinvocations recursively.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* lang.opt: Add new ``-frust-compile-until` option.\n+\t* rust-session-manager.cc (Session::compile_crate): Add stops around\n+\tvarious compilation steps in the pipeline.\n+\t* rust-session-manager.h (struct CompileOptions): Add `CompileStep` enum\n+\tand field.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-tree.cc (rs_type_quals): Comment out bad assertion\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-type-check-toplevel.cc (TypeCheckTopLevel::visit):\n+\tMake static items behave more similarly to const items.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile-item.cc (CompileItem::visit): Const evaluate\n+\tstatic item expressions.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* hir/rust-ast-lower-item.cc (ASTLoweringItem::visit): Do not lower\n+\tnull items within modules.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* util/rust-attributes.cc: Add `macro_use` to list of builtin\n+\tattributes.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* checks/errors/rust-const-checker.cc (ConstChecker::ctx_to_str): Allow\n+\tgetting an error string from a specific constant context.\n+\t(ConstChecker::ctx_allows_default): New function, check if a context\n+\tallows default values for Const generics.\n+\t(ConstChecker::visit): Call into `ctx_allows_default`.\n+\t* checks/errors/rust-const-checker.h: Declare `ctx_allows_default`.\n+\n+2023-01-31  liushuyu  <liushuyu011@gmail.com>\n+\n+\t* backend/rust-compile-expr.cc (CompileExpr::visit): Properly formulate\n+\texit condition when compiling while loops.\n+\n+2023-01-31  Faisal Abbas  <90.abbasfaisal@gmail.com>\n+\n+\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): Turn\n+\tconstant item typechecking into a coercion site instead of a unify\n+\tsite.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-tyty.h: Fix `is_concrete` for unit types with\n+\tsubstitutions.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-tyty-bounds.cc (TypeBoundPredicate::contains_associated_types):\n+\tCheck if a type bound predicate contains assocated types.\n+\t* typecheck/rust-tyty.h: Declare the above mentioned function.\n+\t* typecheck/rust-hir-trait-resolve.cc: Use `contains_associated_types`\n+\tfunction.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Add\n+\tmore calls to `rust_debug` for development.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile-base.cc: Improve compilation pipeline and simplify\n+\tfunction.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-tree.cc (comptypes): Remove some C++ specific checks in\n+\tRust const folder for now.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::unify_site): Add\n+\tbetter unification function with debug calls.\n+\t* typecheck/rust-autoderef.cc (AutoderefCycle::cycle): Add more debug\n+\tcalls and use new unify API.\n+\t* typecheck/rust-coercion.cc (TypeCoercionRules::do_coercion): Likewise.\n+\t(TypeCoercionRules::coerce_borrowed_pointer): Likewise.\n+\t(TypeCoercionRules::select): Likewise.\n+\t* typecheck/rust-hir-dot-operator.cc (MethodResolver::select): Likewise.\n+\t* typecheck/rust-hir-trait-resolve.cc (TraitItemReference::resolve_item): Likewise.\n+\t(TypeCheckBase::coercion_site): Likewise.\n+\t(TypeCheckBase::cast_site): Likewise.\n+\t* typecheck/rust-hir-type-check-base.h: Likewise.\n+\t* typecheck/rust-hir-type-check-enumitem.cc (TypeCheckEnumItem::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-implitem.cc (TypeCheckTopLevelImplItem::visit): Likewise.\n+\t(TypeCheckImplItem::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-item.cc (TypeCheckItem::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_segments): Likewise.\n+\t* typecheck/rust-hir-type-check-pattern.cc (TypeCheckPattern::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-struct.cc (TypeCheckStructExpr::resolve): Likewise.\n+\t* typecheck/rust-hir-type-check-toplevel.cc (TypeCheckTopLevel::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-type.cc (TypeCheckType::visit): Likewise.\n+\t* typecheck/rust-hir-type-check.cc (TypeResolution::Resolve): Likewise.\n+\t* typecheck/rust-tyctx.cc (TypeCheckContext::peek_return_type): Likewise.\n+\t* typecheck/rust-tyty-call.cc (TypeCheckMethodCallExpr::visit): Likewise.\n+\t* typecheck/rust-tyty-cmp.h: Likewise.\n+\t* typecheck/rust-tyty-rules.h: Likewise.\n+\t* typecheck/rust-tyty.cc (BaseType::mappings_str): Likewise.\n+\t(BaseType::debug): Print type name more clearly.\n+\t(BaseType::debug_str): Add new function to print type pointer and name.\n+\t(TupleType::get_name): Improve type name fetching function.\n+\t(ReferenceType::get_name): Likewise.\n+\t(PointerType::get_name): Likewise.\n+\t* typecheck/rust-tyty.h: Refactor definitions outside of the header.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::TypeCheckBase):\n+\tRemove constructor.\n+\t(TypeCheckBase::coercion_site): Add `Location` argument to function.\n+\t* typecheck/rust-hir-type-check-base.h: Use `TypeCheckBase::coercion_site`\n+\tfunction with location argument.\n+\t* typecheck/rust-hir-type-check-enumitem.cc (TypeCheckEnumItem::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-expr.h (class TypeCheckExpr): Likewise.\n+\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-struct.cc (TypeCheckStructExpr::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-toplevel.cc (TypeCheckTopLevel::visit): Likewise.\n+\t* typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit): Likewise.\n+\t(TypeCheckMethodCallExpr::visit): Likewise.\n+\t* typecheck/rust-tyty.h: Add missing locus field.\n+\t* typecheck/rust-tyty.cc (StructFieldType::clone): Use locus field.\n+\t(StructFieldType::monomorphized_clone): Likewise.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-tyctx.cc (TypeCheckContext::pop_return_type): Add\n+\tguards around `std::vector<T>.pop_back()`.\n+\t(TypeCheckContext::peek_context): Likewise for `std::vector<T>.back()`.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\t    philberty  <philip.herron@embecosm.com>\n+\n+\t* ast/rust-ast.h: Improve assertions within ASTFragment API.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast.h: Add assertions and accessors for fragment nodes.\n+\t* expand/rust-attribute-visitor.cc (AttrVisitor::visit): Fix expansion\n+\tcontext typo when visiting `InherentImpl` items.\n+\t(AttrVisitor::maybe_expand_expr): Use new Fragment accessor to fetch\n+\tproperly typed node.\n+\t(AttrVisitor::maybe_expand_type): Likewise.\n+\t* expand/rust-macro-expand.cc (transcribe_type): Emit parse errors\n+\twhen trying to parse a type.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-dump.h: Add shorthand `AST::Dump::debug` function to\n+\tdump an AST node on `stderr`.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\t    philberty  <philip.herron@embecosm.com>\n+\n+\t* expand/rust-macro-expand.cc (parse_many): Return early from parsing\n+\tloop if we encounter an error, and emit that error in the meantime.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* expand/rust-macro-expand.cc (MacroExpander::match_matcher): Handle\n+\tfragments differently based on whether or not we are currently trying\n+\tto match a matcher in a repetition context.\n+\t(MacroExpander::match_n_matches): Use new `in_repetition` argument\n+\tproperly when calling `match_matcher`.\n+\t* expand/rust-macro-expand.h (MacroExpander::match_matcher): Allow\n+\tpassing extra `in_repetition` bool argument\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse-impl.h: Allow parsing full range expressions without\n+\terroring out.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* checks/lints/rust-lint-scan-deadcode.h: Do not report public items\n+\tas dead code.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* util/rust-attributes.cc: Add `rustc_inherit_overflow_checks` to list\n+\tof builtin attributes.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-compile-expr.cc (CompileExpr::visit): Insert overflow\n+\tchecks logic.\n+\t(CompileExpr::array_copied_expr): Insert overflow checks logic.\n+\t* backend/rust-compile-item.cc (CompileItem::visit): Insert overflow\n+\tchecks logic.\n+\t* backend/rust-compile-type.cc (TyTyResolveCompile::visit): Insert\n+\toverflow checks logic.\n+\t* rust-gcc.cc (Gcc_backend::arithmetic_or_logical_expression): Differentiate\n+\texisting function from `arithmetic_or_logical_expression_checked`.\n+\tThis function does insert perform overflow checks.\n+\t(Gcc_backend::arithmetic_or_logical_expression_checked): New\n+\tfunction.\n+\t(is_overflowing_expr): New function. Check if an expression is an\n+\toverflowing one (ADD, SUB, MUL).\n+\t(fetch_overflow_builtins): New function.\n+\t* rust-backend.h: Declare `arithmetic_or_logical_expression_checked` in\n+\tabstract `Backend` class.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-builtins.h: Refactor builtin context class and add\n+\toverflow builtins.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust-gcc.cc (class Bvariable): Move class to `rust-gcc.h` header.\n+\t* rust-gcc.h: New file.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* hir/rust-ast-lower-expr.h: Lower double borrow expressions to two\n+\t`HIR::BorrowExpr`s.\n+\t* hir/tree/rust-hir-expr.h: Remove `is_double_borrow` field from\n+\t`HIR::BorrowExpr`.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Remove\n+\tcall to `gcc_unreachable` on double borrow expressions.\n+\n+2023-01-31  Faisal Abbas  <90.abbasfaisal@gmail.com>\n+\n+\t* backend/rust-tree.cc : Add new includes.\n+\t(scope_chain): New.\n+\t(maybe_add_global): New.\n+\t(init_modules): New (copied from cp)\n+\t(var_in_constexpr_fn): Likewise.\n+\t(member_vec_linear_search): Likewise.\n+\t(member_vec_binary_search): Likewise.\n+\t(is_overloaded_fn): Likewise.\n+\t(ovl_make): Likewise.\n+\t(lookup_add): Likewise.\n+\t(type_memfn_quals): Likewise.\n+\t(struct find_parameter_pack_data): Likewise.\n+\t(struct conv_type_hasher): Likewise.\n+\t(make_conv_op_name): Likewise.\n+\t(builtin_pack_fn_p): Likewise.\n+\t(builtin_pack_call_p): Likewise.\n+\t(has_extra_args_mechanism_p): Likewise.\n+\t(find_parameter_packs_r): Likewise.\n+\t(WALK_SUBTREE): Likewise.\n+\t(type_memfn_rqual): Likewise.\n+\t(maybe_add_lang_type_raw): Likewise.\n+\t(struct c_fileinfo): Likewise.\n+\t(get_fileinfo): Likewise.\n+\t(cxx_make_type): Likewise.\n+\t(build_min_array_type): Likewise.\n+\t(fields_linear_search): Likewise.\n+\t(nothrow_spec_p): Likewise.\n+\t(maybe_get_fns): Likewise.\n+\t(get_fns): Likewise.\n+\t(get_first_fn): Likewise.\n+\t(dependent_name): Likewise.\n+\t(called_fns_equal): Likewise.\n+\t(canonical_eh_spec): Likewise.\n+\t(rs_tree_code_length): Likewise.\n+\t(rs_tree_operand_length): Likewise.\n+\t(rs_tree_equal): Likewise.\n+\t(publicly_uniquely_derived_p): Likewise.\n+\t(comp_except_types): Likewise.\n+\t(comp_except_specs): Likewise.\n+\t(compparms): Likewise.\n+\t(set_array_type_canon): Likewise.\n+\t(struct cplus_array_info): Likewise.\n+\t(struct cplus_array_hasher): Likewise.\n+\t(cplus_array_hasher::hash): Likewise.\n+\t(cplus_array_hasher::equal): Likewise.\n+\t(is_byte_access_type): Likewise.\n+\t(build_cplus_array_type): Likewise.\n+\t(rs_build_qualified_type_real): Likewise.\n+\t(vector_targets_convertible_p): Likewise.\n+\t(comp_array_types): Likewise.\n+\t(same_type_ignoring_top_level_qualifiers_p): Likewise.\n+\t(comp_ptr_ttypes_const): Likewise.\n+\t(similar_type_p): Likewise.\n+\t(structural_comptypes): Likewise.\n+\t(comptypes): Likewise.\n+\t(next_initializable_field): Likewise.\n+\t(sufficient_parms_p): Likewise.\n+\t(default_ctor_p): Likewise.\n+\t(user_provided_p): Likewise.\n+\t(type_has_non_user_provided_default_constructor): Likewise.\n+\t(default_init_uninitialized_part): Likewise.\n+\t(extract_conversion_operator): Likewise.\n+\t(get_class_binding_direct): Likewise.\n+\t(lang_check_failed): Likewise.\n+\t(skip_artificial_parms_for): Likewise.\n+\t(in_class_defaulted_default_constructor): Likewise.\n+\t(is_instantiation_of_constexpr): Likewise.\n+\t(check_for_uninitialized_const_var): Likewise.\n+\t(cv_unqualified): Likewise.\n+\t(make_tree_vector): Likewise.\n+\t(release_tree_vector): Likewise.\n+\t(instantiation_dependent_expression_p): Likewise.\n+\t(cp_get_callee): Likewise.\n+\t(build_nop): Likewise.\n+\t(scalarish_type_p): Likewise.\n+\t(type_has_nontrivial_copy_init): Likewise.\n+\t(build_local_temp): Likewise.\n+\t(is_normal_capture_proxy): Likewise.\n+\t(reject_gcc_builtin): Likewise.\n+\t(is_bitfield_expr_with_lowered_type): Likewise.\n+\t(maybe_undo_parenthesized_ref): Likewise.\n+\t(fold_offsetof): Likewise.\n+\t(char_type_p): Likewise.\n+\t(resolve_nondeduced_context): Likewise.\n+\t(instantiate_non_dependent_or_null): Likewise.\n+\t(resolve_nondeduced_context_or_error): Likewise.\n+\t(really_overloaded_fn): Likewise.\n+\t(invalid_nonstatic_memfn_p): Likewise.\n+\t(strip_top_quals): Likewise.\n+\t(cxx_incomplete_type_inform): Likewise.\n+\t(cxx_incomplete_type_diagnostic): Likewise.\n+\t(decl_constant_var_p): Likewise.\n+\t(undeduced_auto_decl): Likewise.\n+\t(require_deduced_type): Likewise.\n+\t* backend/rust-tree.h (enum c_tree_index): Likewise.\n+\t(GTY): Likewise.\n+\t(enum cp_tree_index): Likewise.\n+\t(wchar_decl_node): Likewise.\n+\t(vtable_entry_type): Likewise.\n+\t(delta_type_node): Likewise.\n+\t(vtable_index_type): Likewise.\n+\t(class_type_node): Likewise.\n+\t(unknown_type_node): Likewise.\n+\t(init_list_type_node): Likewise.\n+\t(explicit_void_list_node): Likewise.\n+\t(vtbl_type_node): Likewise.\n+\t(vtbl_ptr_type_node): Likewise.\n+\t(std_node): Likewise.\n+\t(abi_node): Likewise.\n+\t(global_namespace): Likewise.\n+\t(const_type_info_type_node): Likewise.\n+\t(conv_op_marker): Likewise.\n+\t(abort_fndecl): Likewise.\n+\t(current_aggr): Likewise.\n+\t(nullptr_node): Likewise.\n+\t(nullptr_type_node): Likewise.\n+\t(align_type_node): Likewise.\n+\t(char8_type_node): Likewise.\n+\t(char16_type_node): Likewise.\n+\t(char32_type_node): Likewise.\n+\t(wchar_type_node): Likewise.\n+\t(underlying_wchar_type_node): Likewise.\n+\t(wint_type_node): Likewise.\n+\t(signed_size_type_node): Likewise.\n+\t(unsigned_ptrdiff_type_node): Likewise.\n+\t(intmax_type_node): Likewise.\n+\t(uintmax_type_node): Likewise.\n+\t(widest_integer_literal_type_node): Likewise.\n+\t(widest_unsigned_literal_type_node): Likewise.\n+\t(sig_atomic_type_node): Likewise.\n+\t(int8_type_node): Likewise.\n+\t(int16_type_node): Likewise.\n+\t(int32_type_node): Likewise.\n+\t(int64_type_node): Likewise.\n+\t(uint8_type_node): Likewise.\n+\t(c_uint16_type_node): Likewise.\n+\t(c_uint32_type_node): Likewise.\n+\t(c_uint64_type_node): Likewise.\n+\t(int_least8_type_node): Likewise.\n+\t(int_least16_type_node): Likewise.\n+\t(int_least32_type_node): Likewise.\n+\t(int_least64_type_node): Likewise.\n+\t(uint_least8_type_node): Likewise.\n+\t(uint_least16_type_node): Likewise.\n+\t(uint_least32_type_node): Likewise.\n+\t(uint_least64_type_node): Likewise.\n+\t(int_fast8_type_node): Likewise.\n+\t(int_fast16_type_node): Likewise.\n+\t(int_fast32_type_node): Likewise.\n+\t(int_fast64_type_node): Likewise.\n+\t(uint_fast8_type_node): Likewise.\n+\t(uint_fast16_type_node): Likewise.\n+\t(uint_fast32_type_node): Likewise.\n+\t(uint_fast64_type_node): Likewise.\n+\t(intptr_type_node): Likewise.\n+\t(uintptr_type_node): Likewise.\n+\t(truthvalue_type_node): Likewise.\n+\t(truthvalue_true_node): Likewise.\n+\t(truthvalue_false_node): Likewise.\n+\t(char_array_type_node): Likewise.\n+\t(char8_array_type_node): Likewise.\n+\t(char16_array_type_node): Likewise.\n+\t(char32_array_type_node): Likewise.\n+\t(wchar_array_type_node): Likewise.\n+\t(string_type_node): Likewise.\n+\t(const_string_type_node): Likewise.\n+\t(default_function_type): Likewise.\n+\t(function_name_decl_node): Likewise.\n+\t(pretty_function_name_decl_node): Likewise.\n+\t(c99_function_name_decl_node): Likewise.\n+\t(saved_function_name_decls): Likewise.\n+\t(null_node): Likewise.\n+\t(ctor_identifier): Likewise.\n+\t(complete_ctor_identifier): Likewise.\n+\t(base_ctor_identifier): Likewise.\n+\t(dtor_identifier): Likewise.\n+\t(complete_dtor_identifier): Likewise.\n+\t(base_dtor_identifier): Likewise.\n+\t(deleting_dtor_identifier): Likewise.\n+\t(conv_op_identifier): Likewise.\n+\t(delta_identifier): Likewise.\n+\t(in_charge_identifier): Likewise.\n+\t(vtt_parm_identifier): Likewise.\n+\t(as_base_identifier): Likewise.\n+\t(this_identifier): Likewise.\n+\t(pfn_identifier): Likewise.\n+\t(vptr_identifier): Likewise.\n+\t(global_identifier): Likewise.\n+\t(anon_identifier): Likewise.\n+\t(auto_identifier): Likewise.\n+\t(decltype_auto_identifier): Likewise.\n+\t(init_list_identifier): Likewise.\n+\t(for_range__identifier): Likewise.\n+\t(for_begin__identifier): Likewise.\n+\t(for_end__identifier): Likewise.\n+\t(for_range_identifier): Likewise.\n+\t(for_begin_identifier): Likewise.\n+\t(for_end_identifier): Likewise.\n+\t(abi_tag_identifier): Likewise.\n+\t(aligned_identifier): Likewise.\n+\t(begin_identifier): Likewise.\n+\t(end_identifier): Likewise.\n+\t(get__identifier): Likewise.\n+\t(gnu_identifier): Likewise.\n+\t(tuple_element_identifier): Likewise.\n+\t(tuple_size_identifier): Likewise.\n+\t(type_identifier): Likewise.\n+\t(value_identifier): Likewise.\n+\t(fun_identifier): Likewise.\n+\t(closure_identifier): Likewise.\n+\t(heap_uninit_identifier): Likewise.\n+\t(heap_identifier): Likewise.\n+\t(heap_deleted_identifier): Likewise.\n+\t(heap_vec_uninit_identifier): Likewise.\n+\t(heap_vec_identifier): Likewise.\n+\t(omp_identifier): Likewise.\n+\t(lang_name_c): Likewise.\n+\t(lang_name_cplusplus): Likewise.\n+\t(empty_except_spec): Likewise.\n+\t(noexcept_true_spec): Likewise.\n+\t(noexcept_false_spec): Likewise.\n+\t(noexcept_deferred_spec): Likewise.\n+\t(terminate_fn): Likewise.\n+\t(call_unexpected_fn): Likewise.\n+\t(get_exception_ptr_fn): Likewise.\n+\t(begin_catch_fn): Likewise.\n+\t(end_catch_fn): Likewise.\n+\t(allocate_exception_fn): Likewise.\n+\t(free_exception_fn): Likewise.\n+\t(throw_fn): Likewise.\n+\t(rethrow_fn): Likewise.\n+\t(atexit_fn_ptr_type_node): Likewise.\n+\t(atexit_node): Likewise.\n+\t(dso_handle_node): Likewise.\n+\t(dynamic_cast_node): Likewise.\n+\t(cleanup_type): Likewise.\n+\t(vtt_parm_type): Likewise.\n+\t(any_targ_node): Likewise.\n+\t(source_location_impl): Likewise.\n+\t(OVL_FUNCTION): Likewise.\n+\t(OVL_CHAIN): Likewise.\n+\t(OVL_DEDUP_P): Likewise.\n+\t(OVL_USING_P): Likewise.\n+\t(OVL_HIDDEN_P): Likewise.\n+\t(OVL_NESTED_P): Likewise.\n+\t(OVL_LOOKUP_P): Likewise.\n+\t(OVL_EXPORT_P): Likewise.\n+\t(OVL_FIRST): Likewise.\n+\t(OVL_NAME): Likewise.\n+\t(OVL_P): Likewise.\n+\t(OVL_SINGLE_P): Likewise.\n+\t(TYPE_HAS_DEFAULT_CONSTRUCTOR): Likewise.\n+\t(CLASSTYPE_LAZY_DEFAULT_CTOR): Likewise.\n+\t(CLASSTYPE_CONSTRUCTORS): Likewise.\n+\t(ATTR_IS_DEPENDENT): Likewise.\n+\t(ABI_TAG_IMPLICIT): Likewise.\n+\t(PARENTHESIZED_LIST_P): Likewise.\n+\t(DECL_DEPENDENT_P): Likewise.\n+\t(USING_DECL_SCOPE): Likewise.\n+\t(USING_DECL_DECLS): Likewise.\n+\t(USING_DECL_TYPENAME_P): Likewise.\n+\t(USING_DECL_UNRELATED_P): Likewise.\n+\t(DECL_DECLARES_FUNCTION_P): Likewise.\n+\t(DECL_DECLARES_TYPE_P): Likewise.\n+\t(IDENTIFIER_KIND_BIT_0): Likewise.\n+\t(IDENTIFIER_KIND_BIT_1): Likewise.\n+\t(IDENTIFIER_KIND_BIT_2): Likewise.\n+\t(IDENTIFIER_MARKED): Likewise.\n+\t(IDENTIFIER_VIRTUAL_P): Likewise.\n+\t(IDENTIFIER_KEYWORD_P): Likewise.\n+\t(IDENTIFIER_CDTOR_P): Likewise.\n+\t(IDENTIFIER_CTOR_P): Likewise.\n+\t(IDENTIFIER_DTOR_P): Likewise.\n+\t(IDENTIFIER_ANY_OP_P): Likewise.\n+\t(IDENTIFIER_OVL_OP_P): Likewise.\n+\t(IDENTIFIER_ASSIGN_OP_P): Likewise.\n+\t(IDENTIFIER_CONV_OP_P): Likewise.\n+\t(IDENTIFIER_NEWDEL_OP_P): Likewise.\n+\t(IDENTIFIER_NEW_OP_P): Likewise.\n+\t(CLASSTYPE_DIAMOND_SHAPED_P): Likewise.\n+\t(CLASSTYPE_REPEATED_BASE_P): Likewise.\n+\t(CLASSTYPE_KEY_METHOD): Likewise.\n+\t(CLASSTYPE_MEMBER_VEC): Likewise.\n+\t(CLASSTYPE_DECL_LIST): Likewise.\n+\t(CLASSTYPE_DESTRUCTOR): Likewise.\n+\t(CLASSTYPE_HAS_PRIMARY_BASE_P): Likewise.\n+\t(CLASSTYPE_PRIMARY_BINFO): Likewise.\n+\t(CLASSTYPE_VBASECLASSES): Likewise.\n+\t(CLASSTYPE_AS_BASE): Likewise.\n+\t(DECL_CONV_FN_P): Likewise.\n+\t(DECL_CONV_FN_TYPE): Likewise.\n+\t(same_type_p): Likewise.\n+\t(WILDCARD_TYPE_P): Likewise.\n+\t(MAYBE_CLASS_TYPE_P): Likewise.\n+\t(FUNCTION_REF_QUALIFIED): Likewise.\n+\t(FUNCTION_RVALUE_QUALIFIED): Likewise.\n+\t(TYPE_PTRMEMFUNC_FN_TYPE): Likewise.\n+\t(TYPE_PTRMEMFUNC_FN_TYPE_RAW): Likewise.\n+\t(TYPE_DEPENDENT_P): Likewise.\n+\t(TYPE_DEPENDENT_P_VALID): Likewise.\n+\t(TYPE_HAS_NONTRIVIAL_DESTRUCTOR): Likewise.\n+\t(TYPE_RAISES_EXCEPTIONS): Likewise.\n+\t(IDENTIFIER_BINDING): Likewise.\n+\t(LANG_IDENTIFIER_CAST): Likewise.\n+\t(IF_COND): Likewise.\n+\t(THEN_CLAUSE): Likewise.\n+\t(ELSE_CLAUSE): Likewise.\n+\t(IF_SCOPE): Likewise.\n+\t(IF_STMT_CONSTEXPR_P): Likewise.\n+\t(IF_STMT_CONSTEVAL_P): Likewise.\n+\t(DECLTYPE_TYPE_EXPR): Likewise.\n+\t(SET_CLASSTYPE_INTERFACE_UNKNOWN_X): Likewise.\n+\t(CLASSTYPE_INTERFACE_ONLY): Likewise.\n+\t(TYPE_NAME_STRING): Likewise.\n+\t(TYPE_NAME_LENGTH): Likewise.\n+\t(CONSTRAINT_VAR_P): Likewise.\n+\t(KOENIG_LOOKUP_P): Likewise.\n+\t(DECL_PARM_INDEX): Likewise.\n+\t(DECL_PARM_LEVEL): Likewise.\n+\t(CONV_IMPLICIT): Likewise.\n+\t(CONV_STATIC): Likewise.\n+\t(CONV_CONST): Likewise.\n+\t(CONV_REINTERPRET): Likewise.\n+\t(CONV_PRIVATE): Likewise.\n+\t(CONV_FORCE_TEMP): Likewise.\n+\t(CONV_FOLD): Likewise.\n+\t(CONV_OLD_CONVERT): Likewise.\n+\t(CONV_C_CAST): Likewise.\n+\t(CONV_BACKEND_CONVERT): Likewise.\n+\t(WANT_INT): Likewise.\n+\t(WANT_FLOAT): Likewise.\n+\t(WANT_ENUM): Likewise.\n+\t(WANT_POINTER): Likewise.\n+\t(WANT_NULL): Likewise.\n+\t(WANT_VECTOR_OR_COMPLEX): Likewise.\n+\t(WANT_ARITH): Likewise.\n+\t(COMPARE_STRICT): Likewise.\n+\t(COMPARE_BASE): Likewise.\n+\t(COMPARE_DERIVED): Likewise.\n+\t(COMPARE_REDECLARATION): Likewise.\n+\t(COMPARE_STRUCTURAL): Likewise.\n+\t(SF_DEFAULT): Likewise.\n+\t(SF_PRE_PARSED): Likewise.\n+\t(SF_INCLASS_INLINE): Likewise.\n+\t(SD_UNINITIALIZED): Likewise.\n+\t(SD_INITIALIZED): Likewise.\n+\t(SD_DECOMPOSITION): Likewise.\n+\t(SD_DEFAULTED): Likewise.\n+\t(SD_DELETED): Likewise.\n+\t(TYPE_PTRDATAMEM_P): Likewise.\n+\t(RS_TYPE_CONST_P): Likewise.\n+\t(TYPE_MAIN_DECL): Likewise.\n+\t(DECL_NONTRIVIALLY_INITIALIZED_P): Likewise.\n+\t(DECL_DEFAULTED_FN): Likewise.\n+\t(TYPE_HAS_USER_CONSTRUCTOR): Likewise.\n+\t(DECL_INITIALIZED_IN_CLASS_P): Likewise.\n+\t(DECL_DEFAULTED_IN_CLASS_P): Likewise.\n+\t(DECL_NONSTATIC_MEMBER_FUNCTION_P): Likewise.\n+\t(DECL_HAS_IN_CHARGE_PARM_P): Likewise.\n+\t(DECL_HAS_VTT_PARM_P): Likewise.\n+\t(FUNCTION_FIRST_USER_PARMTYPE): Likewise.\n+\t(FUNCTION_FIRST_USER_PARM): Likewise.\n+\t(DECL_CONSTRUCTOR_P): Likewise.\n+\t(DECL_DELETED_FN): Likewise.\n+\t(BRACE_ENCLOSED_INITIALIZER_P): Likewise.\n+\t(DECL_IMMEDIATE_FUNCTION_P): Likewise.\n+\t(SET_DECL_IMMEDIATE_FUNCTION_P): Likewise.\n+\t(CONSTRUCTOR_MUTABLE_POISON): Likewise.\n+\t(PTRMEM_CST_MEMBER): Likewise.\n+\t(REF_PARENTHESIZED_P): Likewise.\n+\t(TYPE_PTRMEM_P): Likewise.\n+\t(TYPE_PTR_OR_PTRMEM_P): Likewise.\n+\t(DECL_DECOMPOSITION_P): Likewise.\n+\t(DECL_DECOMP_BASE): Likewise.\n+\t(DECL_MAYBE_IN_CHARGE_CDTOR_P): Likewise.\n+\t(DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P): Likewise.\n+\t(DECL_CLONED_FUNCTION_P): Likewise.\n+\t(DECL_CLONED_FUNCTION): Likewise.\n+\t(DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P): Likewise.\n+\t(cp_function_chain): Likewise.\n+\t(cdtor_label): Likewise.\n+\t(current_class_ptr): Likewise.\n+\t(current_class_ref): Likewise.\n+\t(current_eh_spec_block): Likewise.\n+\t(current_in_charge_parm): Likewise.\n+\t(current_vtt_parm): Likewise.\n+\t(current_retval_sentinel): Likewise.\n+\t(current_function_returns_value): Likewise.\n+\t(current_function_returns_null): Likewise.\n+\t(current_function_returns_abnormally): Likewise.\n+\t(current_function_infinite_loop): Likewise.\n+\t(in_base_initializer): Likewise.\n+\t(in_function_try_handler): Likewise.\n+\t(current_function_return_value): Likewise.\n+\t(current_class_type): Likewise.\n+\t(TYPE_BEING_DEFINED): Likewise.\n+\t(DECL_STATIC_FUNCTION_P): Likewise.\n+\t(DECL_FUNCTION_MEMBER_P): Likewise.\n+\t(LANG_DECL_MIN_CHECK): Likewise.\n+\t(LANG_DECL_FN_CHECK): Likewise.\n+\t(LANG_DECL_NS_CHECK): Likewise.\n+\t(LANG_DECL_PARM_CHECK): Likewise.\n+\t(LANG_DECL_DECOMP_CHECK): Likewise.\n+\t(RS_INTEGRAL_TYPE_P): Likewise.\n+\t(STAT_HACK_P): Likewise.\n+\t(STAT_TYPE_VISIBLE_P): Likewise.\n+\t(STAT_TYPE): Likewise.\n+\t(STAT_DECL): Likewise.\n+\t(STAT_VISIBLE): Likewise.\n+\t(MAYBE_STAT_DECL): Likewise.\n+\t(MAYBE_STAT_TYPE): Likewise.\n+\t(STAT_TYPE_HIDDEN_P): Likewise.\n+\t(STAT_DECL_HIDDEN_P): Likewise.\n+\t(class warning_sentinel): Likewise.\n+\t(struct uid_sensitive_constexpr_evaluation_checker): Likewise.\n+\t(class iloc_sentinel): Likewise.\n+\t(struct GTY): Likewise.\n+\t(struct named_decl_hash): Likewise.\n+\t(enum lang_decl_selector): Likewise.\n+\t(LANG_DECL_HAS_MIN): Likewise.\n+\t(struct named_label_entry): Likewise.\n+\t(struct named_label_hash): Likewise.\n+\t(enum ref_operator): Likewise.\n+\t(struct c_fileinfo): Likewise.\n+\t(class ovl_iterator): Likewise.\n+\t(class lkp_iterator): Likewise.\n+\t(enum rs_ref_qualifier): Likewise.\n+\t(enum tsubst_flags): Likewise.\n+\t(enum cp_identifier_kind): Likewise.\n+\t(enum tag_types): Likewise.\n+\t(enum compare_bounds_t): Likewise.\n+\t(mark_rvalue_use): Likewise.\n+\t(type_unknown_p): Likewise.\n+\t(init_modules): Likewise.\n+\t(var_in_constexpr_fn): Likewise.\n+\t(ovl_first): Likewise.\n+\t(lookup_add): Likewise.\n+\t(ovl_make): Likewise.\n+\t(is_overloaded_fn): Likewise.\n+\t(maybe_add_lang_type_raw): Likewise.\n+\t(type_memfn_rqual): Likewise.\n+\t(builtin_pack_fn_p): Likewise.\n+\t(make_conv_op_name): Likewise.\n+\t(type_memfn_quals): Likewise.\n+\t(get_fileinfo): Likewise.\n+\t(cxx_make_type): Likewise.\n+\t(build_cplus_array_type): Likewise.\n+\t(is_byte_access_type): Likewise.\n+\t(comptypes): Likewise.\n+\t(canonical_eh_spec): Likewise.\n+\t(cp_tree_operand_length): Likewise.\n+\t(rs_tree_equal): Likewise.\n+\t(compparms): Likewise.\n+\t(rs_build_qualified_type_real): Likewise.\n+\t(rs_build_qualified_type): Likewise.\n+\t(cv_qualified_p): Likewise.\n+\t(similar_type_p): Likewise.\n+\t(vector_targets_convertible_p): Likewise.\n+\t(same_type_ignoring_top_level_qualifiers_p): Likewise.\n+\t(comp_ptr_ttypes_const): Likewise.\n+\t(get_class_binding_direct): Likewise.\n+\t(skip_artificial_parms_for): Likewise.\n+\t(lang_check_failed): Likewise.\n+\t(default_init_uninitialized_part): Likewise.\n+\t(type_has_non_user_provided_default_constructor): Likewise.\n+\t(default_ctor_p): Likewise.\n+\t(user_provided_p): Likewise.\n+\t(sufficient_parms_p): Likewise.\n+\t(next_initializable_field): Likewise.\n+\t(in_class_defaulted_default_constructor): Likewise.\n+\t(is_instantiation_of_constexpr): Likewise.\n+\t(check_for_uninitialized_const_var): Likewise.\n+\t(reduced_constant_expression_p): Likewise.\n+\t(cv_unqualified): Likewise.\n+\t(cp_get_callee): Likewise.\n+\t(cp_get_callee_fndecl_nofold): Likewise.\n+\t(is_nondependent_static_init_expression): Likewise.\n+\t(maybe_constant_init): Likewise.\n+\t(build_nop): Likewise.\n+\t(scalarish_type_p): Likewise.\n+\t(is_bitfield_expr_with_lowered_type): Likewise.\n+\t(convert_bitfield_to_declared_type): Likewise.\n+\t(cp_fold_maybe_rvalue): Likewise.\n+\t(maybe_undo_parenthesized_ref): Likewise.\n+\t(fold_offsetof): Likewise.\n+\t(cp_truthvalue_conversion): Likewise.\n+\t(fold_non_dependent_expr): Likewise.\n+\t(char_type_p): Likewise.\n+\t(instantiation_dependent_expression_p): Likewise.\n+\t(type_has_nontrivial_copy_init): Likewise.\n+\t(build_local_temp): Likewise.\n+\t(is_normal_capture_proxy): Likewise.\n+\t(reject_gcc_builtin): Likewise.\n+\t(resolve_nondeduced_context): Likewise.\n+\t(cxx_incomplete_type_diagnostic): Likewise.\n+\t(cxx_incomplete_type_error): Likewise.\n+\t(invalid_nonstatic_memfn_p): Likewise.\n+\t(really_overloaded_fn): Likewise.\n+\t(resolve_nondeduced_context_or_error): Likewise.\n+\t(instantiate_non_dependent_or_null): Likewise.\n+\t(cxx_incomplete_type_inform): Likewise.\n+\t(strip_top_quals): Likewise.\n+\t(undeduced_auto_decl): Likewise.\n+\t(require_deduced_type): Likewise.\n+\t(decl_constant_var_p): Likewise.\n+\t(type_of_this_parm): Likewise.\n+\t(class_of_this_parm): Likewise.\n+\t(identifier_p): Likewise.\n+\t(gnu_vector_type_p): Likewise.\n+\t(make_tree_vector): Likewise.\n+\t(release_tree_vector): Likewise.\n+\t(class releasing_vec): Likewise.\n+\t(vec_safe_push): Likewise.\n+\t(null_node_p): Likewise.\n+\t* backend/rust-compile-base.cc (HIRCompileBase::setup_fndecl): Correctly\n+\tset fndecl as constexpr from qualifiers.\n+\t(HIRCompileBase::compile_function): Test if fndecl is constexpr.\n+\t(HIRCompileBase::compile_constant_item): Set fndecl as constexpr.\n+\t* backend/rust-compile-intrinsic.cc : Update include.\n+\t(finalize_intrinsic_block): Set fndecl as constexpr.\n+\t* backend/rust-constexpr.cc : Update include.\n+\t(VERIFY_CONSTANT): New.\n+\t(is_instantiation_of_constexpr): New.\n+\t(literal_type_p): New.\n+\t(verify_constant): New.\n+\t(find_array_ctor_elt): New.\n+\t(array_index_cmp): New.\n+\t(potential_constant_expression_1): New.\n+\t(get_nth_callarg): New.\n+\t(unshare_constructor): New.\n+\t(maybe_save_constexpr_fundef): New.\n+\t(returns): New.\n+\t(breaks): New.\n+\t(continues): New.\n+\t(switches): New.\n+\t(struct constexpr_global_ctx): Add new fields.\n+\t(constexpr_fundef): New.\n+\t(struct constexpr_call): New.\n+\t(constexpr_call_hasher : ggc_ptr_hash<constexpr_call>): New.\n+\t(enum constexpr_switch_state): New.\n+\t(struct constexpr_ctx): Add new fields.\n+\t(struct constexpr_fundef_hasher): New.\n+\t(constexpr_fundef_table): New.\n+\t(constexpr_fundef_hasher::equal): New.\n+\t(constexpr_fundef_hasher::hash): New.\n+\t(retrieve_constexpr_fundef): New.\n+\t(uid_sensitive_constexpr_evaluation_value): New.\n+\t(uid_sensitive_constexpr_evaluation_true_counter): New.\n+\t(uid_sensitive_constexpr_evaluation_p): New.\n+\t(class temp_override): New.\n+\t(struct uid_sensitive_constexpr_evaluation_sentinel): New.\n+\t(struct uid_sensitive_constexpr_evaluation_checker): New.\n+\t(::uid_sensitive_constexpr_evaluation_sentinel): New.\n+\t(::uid_sensitive_constexpr_evaluation_checker): New.\n+\t(uid_sensitive_constexpr_evaluation_checker::evaluation_restricted_p): New.\n+\t(constexpr_call_table): New.\n+\t(constexpr_call_hasher::hash): New.\n+\t(constexpr_call_hasher::equal): New.\n+\t(maybe_initialize_constexpr_call_table): New.\n+\t(fundef_copies_table): New.\n+\t(get_fundef_copy): New.\n+\t(save_fundef_copy): New.\n+\t(constexpr_expression): Refactor in ...\n+\t(eval_constant_expression): ...this.\n+\t(eval_store_expression): Add 3 bool params.\n+\t(eval_call_expression): Likewise.\n+\t(eval_binary_expression): Likewise.\n+\t(eval_statement_list): New.\n+\t(extract_string_elt): New.\n+\t(eval_conditional_expression): New.\n+\t(eval_bit_field_ref): New.\n+\t(eval_loop_expr): New.\n+\t(eval_switch_expr): New.\n+\t(eval_unary_expression): New.\n+\t(call_stack): New.\n+\t(call_stack_tick): New.\n+\t(last_cx_error_tick): New.\n+\t(push_cx_call_context): New.\n+\t(pop_cx_call_context): New.\n+\t(cx_error_context): New.\n+\t(fold_expr): Adjust call to eval_constant_expression.\n+\t(same_type_ignoring_tlq_and_bounds_p): New.\n+\t(union_active_member): Port more for cxx constexpr.\n+\t(fold_indirect_ref_1): New.\n+\t(rs_fold_indirect_ref): Likewise.\n+\t(rs_eval_indirect_ref): New (from corresponding cxx FE file).\n+\t(eval_logical_expression): Adjust parameter list.\n+\t(lookup_placeholder): New (from corresponding cxx FE file).\n+\t(constant_value_1): Remove.\n+\t(inline_asm_in_constexpr_error): New (from corresponding cxx FE file).\n+\t(verify_ctor_sanity): New.\n+\t(get_callee): Remove.\n+\t(initialized_type): New.\n+\t(maybe_constexpr_fn): Remove.\n+\t(init_subob_ctx): New.\n+\t(base_field_constructor_elt): New.\n+\t(get_or_insert_ctor_field): New.\n+\t(eval_vector_conditional_expression): New (from correponding cxx FE file).\n+\t(eval_bare_aggregate): New.\n+\t(cxx_eval_trinary_expression): New.\n+\t(reduced_constant_expression_p): New.\n+\t(adjust_temp_type): New.\n+\t(free_constructor): New.\n+\t(eval_and_check_array_index): New.\n+\t(eval_array_reference): New.\n+\t(eval_component_reference): New.\n+\t(label_matches): New.\n+\t(eval_constant_expression): New.\n+\t(modifying_const_object_error): New.\n+\t(is_empty_field): New.\n+\t(eval_store_expression): New.\n+\t(eval_binary_expression): New.\n+\t(addr_of_non_const_var): New.\n+\t(rs_bind_parameters_in_call): New.\n+\t(eval_builtin_function_call): New.\n+\t(eval_call_expression): New.\n+\t(build_anon_member_initialization): New.\n+\t(build_data_member_initialization): New.\n+\t(constexpr_fn_retval): New.\n+\t(constant_value_1): New.\n+\t(decl_constant_value): New.\n+\t(non_const_var_error): New.\n+\t(get_callee): New.\n+\t(get_function_named_in_call): New.\n+\t(maybe_constexpr_fn): New.\n+\t(get_nth_callarg): New.\n+\t(var_in_maybe_constexpr_fn): New.\n+\t(instantiate_cx_fn_r): New.\n+\t(instantiate_constexpr_fns): New.\n+\t(array_index_cmp): New.\n+\t(unshare_constructor): New.\n+\t(find_array_ctor_elt): New.\n+\t(verify_constant): New.\n+\t(find_heap_var_refs): New.\n+\t(find_immediate_fndecl): New.\n+\t(diag_array_subscript): New.\n+\t(get_array_or_vector_nelts): New.\n+\t(eval_and_check_array_index): New.\n+\t(extract_string_elt): New.\n+\t(is_valid_constexpr_fn): New.\n+\t(explain_invalid_constexpr_fn): New.\n+\t(register_constexpr_fundef): New.\n+\t(maybe_save_constexpr_fundef): New.\n+\t(eval_statement_list): New.\n+\t(eval_conditional_expression): New.\n+\t(eval_bit_field_ref): New.\n+\t(returns): New.\n+\t(breaks): New.\n+\t(continues): New.\n+\t(switches): New.\n+\t(eval_loop_expr): New.\n+\t(eval_switch_expr): New.\n+\t(eval_unary_expression): New.\n+\t(cxx_eval_outermost_constant_expr): New.\n+\t(is_static_init_expression): New.\n+\t(is_constant_expression): New.\n+\t(is_nondependent_static_init_expression): New.\n+\t(maybe_constant_init_1): New.\n+\t(maybe_constant_init): New.\n+\t(is_nondependent_constant_expression): New.\n+\t(cv_cache): New.\n+\t(maybe_constant_value): New.\n+\t(potential_constant_expression): New.\n+\t(struct check_for_return_continue_data): New.\n+\t(check_for_return_continue): New.\n+\t(decl_namespace_context): New.\n+\t(decl_in_std_namespace_p): New.\n+\t(is_std_construct_at): New.\n+\t(cxx_dynamic_cast_fn_p): New.\n+\t(is_std_allocator_allocate): New.\n+\t(is_std_allocator_allocate): New.\n+\t(potential_constant_expression_1): New.\n+\t(potential_constant_expression_1): New.\n+\t(fold_non_dependent_init): New.\n+\t* backend/rust-constexpr.h (maybe_save_constexpr_fundef): New.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust-session-manager.cc (Session::compile_crate): Allow the dump of prettified AST\n+\t(Session::dump_ast_pretty): New\n+\t* rust-session-manager.h: Add new output file for pretty AST dump\n+\n 2023-01-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* resolve/rust-ast-resolve-item.cc (selftest::rust_flatten_list):"}, {"sha": "30eb68a94fccf7be6039aa8188eeb1458fcb2aa5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 816, "deletions": 0, "changes": 816, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,819 @@\n+2023-01-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108559\n+\t* g++.dg/cpp1z/aggr-base13.C: New test.\n+\n+2023-01-31  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lib/gm2.exp (gm2_link_flags) [$gccpath != \"\"]: Also consider\n+\t'gcc-set-multilib-library-path' for 'ld_library_path'.\n+\n+2023-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/102870\n+\t* g++.dg/cpp0x/variadic184.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vdiv_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdiv_vv_tumu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vdivu_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vmax_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmax_vv_tumu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmaxu_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vmin_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vmin_vv_tumu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vminu_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vor_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vor_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vrem_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vrem_vv_tumu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vremu_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vsll_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vsra_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vsrl_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vand_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vand_vv_tumu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsub_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vxor_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vxor_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vadd_vv-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vadd_vv_tumu-3.C: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/binop_vv_constraint-1.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vadd_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vadd_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vand_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vand_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vdiv_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdiv_vv_tumu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vdivu_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vmax_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmax_vv_tumu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmaxu_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vmin_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vmin_vv_tumu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vminu_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vor_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vor_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vrem_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vrem_vv_tumu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vremu_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsll_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsra_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsrl_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsub_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsub_vv_tumu-3.c: New test.\n+\n+2023-01-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vxor_vv-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vxor_vv_tumu-3.c: New test.\n+\n+2023-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107593\n+\tPR c++/108597\n+\t* g++.dg/warn/Wduplicated-cond3.C: New test.\n+\t* g++.dg/warn/Wduplicated-cond4.C: New test.\n+\t* g++.dg/warn/Wduplicated-cond5.C: New test.\n+\n+2023-01-31  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\tPR target/108589\n+\t* gcc.target/aarch64/pr108589.c: New test.\n+\n+2023-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/108608\n+\t* gcc.dg/vect/pr108608.c: New test.\n+\t* gcc.target/aarch64/sve/pr108608-1.c: Likewise.\n+\n+2023-01-31  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108385\n+\t* gcc.dg/pr108385.c: New.\n+\n+2023-01-31  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108359\n+\t* gcc.dg/pr108359.c: New.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/issue-1073.rs: New test.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/issue-1006.rs: New test.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/const_generics_5.rs: Fix assertions.\n+\t* rust/compile/unconstrained_type_param.rs: Add more assertions.\n+\n+2023-01-31  liushuyu  <liushuyu011@gmail.com>\n+\n+\t* rust/compile/builtin_macro_recurse.rs: New test.\n+\n+2023-01-31  liushuyu  <liushuyu011@gmail.com>\n+\n+\t* rust/compile/builtin_macro_concat.rs: Fix test error messages.\n+\t* rust/compile/builtin_macro_env.rs: Likewise.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/frust-compile-until.rs: New test.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/rust-const-blog-issue.rs: New test.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/macro44.rs: New test.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/macro_export_1.rs: New test.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/const_generics_8.rs: New test.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/const_generics_7.rs: New test.\n+\n+2023-01-31  liushuyu  <liushuyu011@gmail.com>\n+\n+\t* rust/execute/torture/loop-condition-eval.rs: New test.\n+\n+2023-01-31  Faisal Abbas  <90.abbasfaisal@gmail.com>\n+\n+\t* rust/compile/const8.rs: New test.\n+\n+2023-01-31  Faisal Abbas  <90.abbasfaisal@gmail.com>\n+\n+\t* rust/compile/const7.rs: New test.\n+\n+2023-01-31  Faisal Abbas  <90.abbasfaisal@gmail.com>\n+\n+\t* rust/compile/const6.rs: New test.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/issue-1152.rs: Fix dejagnu assertion.\n+\t* rust/compile/tuple1.rs: Likewise.\n+\t* rust/compile/type-alias1.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_9.rs: Likewise.\n+\t* rust/execute/torture/slice1.rs: Rework test to use new parsing\n+\tcapability and stick to the original implementation.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/macro43.rs: New test.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/parse_range.rs: New test.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/issue-1031.rs: Remove extraneous dead code warnings.\n+\t* rust/compile/issue-1289.rs: Likewise.\n+\t* rust/compile/test_mod.rs: Likewise.\n+\t* rust/compile/torture/raw_identifiers.rs: Likewise.\n+\t* rust/compile/torture/raw_identifiers_keywords.rs: Likewise.\n+\t* rust/compile/privacy7.rs: New test.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/rustc_attr1.rs: New test.\n+\n+2023-01-31  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/debug/win64-abi.rs: Fix assertion to take into account\n+\toverflow builtins\n+\t* rust/compile/torture/macro-issue1426.rs: Moved to...\n+\t* rust/execute/torture/macro-issue1426.rs: ...here.\n+\t* rust/execute/torture/overflow1.rs: New test.\n+\n+2023-01-31  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/torture/issue-1506.rs: New test.\n+\n+2023-01-31  Faisal Abbas  <90.abbasfaisal@gmail.com>\n+\n+\t* rust/compile/const4.rs: New.\n+\t* rust/compile/const5.rs: New.\n+\n+2023-01-31  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* lib/gm2.exp (gm2_init_pimx): Replace gm2-libs-pim with\n+\tgm2-libs-log.\n+\t(gm2_init_iso): Replace gm2-libs-pim with gm2-libs-log.\n+\t(gm2_init_ulm): Replace gm2-libs-pim with gm2-libs-log.\n+\t(gm2_init_log): Replace gm2-libs-pim with gm2-libs-log.\n+\t(gm2_init_cor): Replace gm2-libs-pim with gm2-libs-log.\n+\n+2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108599\n+\t* gcc.target/i386/avx2-pr108599.c: New test.\n+\n+2023-01-31  Xianmiao Qu  <cooper.qu@linux.alibaba.com>\n+\n+\tPR testsuite/108604\n+\t* gcc.dg/torture/pr108574-3.c (b, f): Change type from char to\n+\tsigned char.\n+\n+2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/108596\n+\t* gcc.c-torture/compile/pr108596.c: New test.\n+\n+2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105593\n+\t* gcc.target/i386/sse-23.c: Add -Wuninitialized to dg-options.\n+\n+2023-01-31  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-10.c: Refine the scan\n+\tcondition.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-11.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-12.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-13.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-14.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-15.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-16.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-17.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-18.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-19.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-20.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-21.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-22.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-23.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-24.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-25.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-26.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-27.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-28.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-1.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-2.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-3.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-4.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-5.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-6.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-7.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-8.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-9.c: Ditto.\n+\n 2023-01-30  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n \n \t* g++.target/riscv/rvv/base/vloxei64-1.C: New test."}, {"sha": "5d2535f4f88e6ff81e8fa06174fac38dfd06dada", "filename": "libgm2/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/libgm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/libgm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,28 @@\n+2023-01-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR modula2/108462\n+\t* libm2cor/Makefile.am: Remove static lib install from\n+\tinstall-data-local.\n+\t* libm2iso/Makefile.am: Likewise.\n+\t* libm2log/Makefile.am: Likewise.\n+\t* libm2min/Makefile.am: Likewise.\n+\t* libm2pim/Makefile.am: Likewise.\n+\t* libm2cor/Makefile.in: Regenerate.\n+\t* libm2iso/Makefile.in: Likewise.\n+\t* libm2log/Makefile.in: Likewise.\n+\t* libm2min/Makefile.in: Likewise.\n+\t* libm2pim/Makefile.in: Likewise.\n+\n+2023-01-31  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* libm2log/Makefile.am (VPATH): Replace gm2-libs-pim\n+\twith gm2-libs-log.\n+\t(libm2log_la_M2FLAGS): Replace gm2-libs-pim with\n+\tgm2-libs-log.\n+\t(install-data-local): Replace gm2-libs-pim with\n+\tgm2-libs-log.\n+\t* libm2log/Makefile.in: Rebuilt.\n+\n 2023-01-26  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* configure.ac (AM_INIT_AUTOMAKE): Specify 1.15.1."}, {"sha": "8a9e51fb1bcc12e48b7cd31e0f3b5f9d2d4848c3", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317525b03ebd1db7e04a900d7a735d7a079b3821/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317525b03ebd1db7e04a900d7a735d7a079b3821/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=317525b03ebd1db7e04a900d7a735d7a079b3821", "patch": "@@ -1,3 +1,21 @@\n+2023-01-31  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR sanitizer/108106\n+\t* hwasan/hwasan_setjmp_x86_64.S (__interceptor_setjmp): Jump\n+\tto .Linterceptor_sigsetjmp instead of __interceptor_sigsetjmp.\n+\t(__interceptor_sigsetjmp): Add a local alias,\n+\t.Linterceptor_sigsetjmp.\n+\n+2023-01-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n+2023-01-31  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\t* configure.ac: set -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\n+\talways for mips*.\n+\t* configure: Regenerate.\n+\n 2023-01-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* sanitizer_common/sanitizer_platform_interceptors.h: Cherry-pick"}]}