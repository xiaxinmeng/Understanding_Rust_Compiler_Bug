{"sha": "38047d904b3662577d9ac6b3527ef587deeaad2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwNDdkOTA0YjM2NjI1NzdkOWFjNmIzNTI3ZWY1ODdkZWVhYWQyYw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-24T15:18:38Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-24T15:18:38Z"}, "message": "[AArch64] Fix vld1<q>_* asm constraints in arm_neon.h\n\ngcc/\n\t* config/aarch64/arm_neon.h (vld1<q>_lane*): Fix constraints.\n\t(vld1<q>_dup_<sufp><8, 16, 32, 64>): Likewise.\n\t(vld1<q>_<sufp><8, 16, 32, 64>): Likewise.\n\nFrom-SVN: r198250", "tree": {"sha": "7bdbb5889b2e5f2a91b5fafe55f033e783a640c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bdbb5889b2e5f2a91b5fafe55f033e783a640c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38047d904b3662577d9ac6b3527ef587deeaad2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38047d904b3662577d9ac6b3527ef587deeaad2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38047d904b3662577d9ac6b3527ef587deeaad2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38047d904b3662577d9ac6b3527ef587deeaad2c/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13f39b2e4136c520e8d5b99f435dd568c4b10b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f39b2e4136c520e8d5b99f435dd568c4b10b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f39b2e4136c520e8d5b99f435dd568c4b10b64"}], "stats": {"total": 486, "additions": 246, "deletions": 240}, "files": [{"sha": "7408e11b057cf21b3291d65630a2be08978c6f9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38047d904b3662577d9ac6b3527ef587deeaad2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38047d904b3662577d9ac6b3527ef587deeaad2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38047d904b3662577d9ac6b3527ef587deeaad2c", "patch": "@@ -1,3 +1,9 @@\n+2013-04-24  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vld1<q>_lane*): Fix constraints.\n+\t(vld1<q>_dup_<sufp><8, 16, 32, 64>): Likewise.\n+\t(vld1<q>_<sufp><8, 16, 32, 64>): Likewise.\n+\n 2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* doc/cpp.texi: Document __GXX_EXPERIMENTAL_CXX1Y__."}, {"sha": "58343a7a7419c0e3944f0f32d09849fab94b66f8", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 240, "deletions": 240, "changes": 480, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38047d904b3662577d9ac6b3527ef587deeaad2c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38047d904b3662577d9ac6b3527ef587deeaad2c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=38047d904b3662577d9ac6b3527ef587deeaad2c", "patch": "@@ -8390,153 +8390,153 @@ __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vld1_dup_f32 (const float32_t * a)\n {\n   float32x2_t result;\n-  __asm__ (\"ld1r {%0.2s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.2s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n vld1_dup_f64 (const float64_t * a)\n {\n   float64x1_t result;\n-  __asm__ (\"ld1 {%0.1d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.1d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vld1_dup_p8 (const poly8_t * a)\n {\n   poly8x8_t result;\n-  __asm__ (\"ld1r {%0.8b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.8b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n vld1_dup_p16 (const poly16_t * a)\n {\n   poly16x4_t result;\n-  __asm__ (\"ld1r {%0.4h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.4h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vld1_dup_s8 (const int8_t * a)\n {\n   int8x8_t result;\n-  __asm__ (\"ld1r {%0.8b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.8b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vld1_dup_s16 (const int16_t * a)\n {\n   int16x4_t result;\n-  __asm__ (\"ld1r {%0.4h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.4h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vld1_dup_s32 (const int32_t * a)\n {\n   int32x2_t result;\n-  __asm__ (\"ld1r {%0.2s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.2s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vld1_dup_s64 (const int64_t * a)\n {\n   int64x1_t result;\n-  __asm__ (\"ld1 {%0.1d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.1d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vld1_dup_u8 (const uint8_t * a)\n {\n   uint8x8_t result;\n-  __asm__ (\"ld1r {%0.8b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.8b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vld1_dup_u16 (const uint16_t * a)\n {\n   uint16x4_t result;\n-  __asm__ (\"ld1r {%0.4h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.4h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vld1_dup_u32 (const uint32_t * a)\n {\n   uint32x2_t result;\n-  __asm__ (\"ld1r {%0.2s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.2s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vld1_dup_u64 (const uint64_t * a)\n {\n   uint64x1_t result;\n-  __asm__ (\"ld1 {%0.1d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.1d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vld1_f32 (const float32_t * a)\n {\n   float32x2_t result;\n-  __asm__ (\"ld1 {%0.2s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.2s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const float32x2_t *_a = (float32x2_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n vld1_f64 (const float64_t * a)\n {\n   float64x1_t result;\n-  __asm__ (\"ld1 {%0.1d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.1d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n@@ -8546,9 +8546,9 @@ vld1_f64 (const float64_t * a)\n        float32x2_t b_ = (b);                                            \\\n        const float32_t * a_ = (a);                                      \\\n        float32x2_t result;                                              \\\n-       __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.s}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8559,9 +8559,9 @@ vld1_f64 (const float64_t * a)\n        float64x1_t b_ = (b);                                            \\\n        const float64_t * a_ = (a);                                      \\\n        float64x1_t result;                                              \\\n-       __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.d}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8572,9 +8572,9 @@ vld1_f64 (const float64_t * a)\n        poly8x8_t b_ = (b);                                              \\\n        const poly8_t * a_ = (a);                                        \\\n        poly8x8_t result;                                                \\\n-       __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.b}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8585,9 +8585,9 @@ vld1_f64 (const float64_t * a)\n        poly16x4_t b_ = (b);                                             \\\n        const poly16_t * a_ = (a);                                       \\\n        poly16x4_t result;                                               \\\n-       __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.h}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8598,9 +8598,9 @@ vld1_f64 (const float64_t * a)\n        int8x8_t b_ = (b);                                               \\\n        const int8_t * a_ = (a);                                         \\\n        int8x8_t result;                                                 \\\n-       __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.b}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8611,9 +8611,9 @@ vld1_f64 (const float64_t * a)\n        int16x4_t b_ = (b);                                              \\\n        const int16_t * a_ = (a);                                        \\\n        int16x4_t result;                                                \\\n-       __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.h}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8624,9 +8624,9 @@ vld1_f64 (const float64_t * a)\n        int32x2_t b_ = (b);                                              \\\n        const int32_t * a_ = (a);                                        \\\n        int32x2_t result;                                                \\\n-       __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.s}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8637,9 +8637,9 @@ vld1_f64 (const float64_t * a)\n        int64x1_t b_ = (b);                                              \\\n        const int64_t * a_ = (a);                                        \\\n        int64x1_t result;                                                \\\n-       __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.d}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8650,9 +8650,9 @@ vld1_f64 (const float64_t * a)\n        uint8x8_t b_ = (b);                                              \\\n        const uint8_t * a_ = (a);                                        \\\n        uint8x8_t result;                                                \\\n-       __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.b}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8663,9 +8663,9 @@ vld1_f64 (const float64_t * a)\n        uint16x4_t b_ = (b);                                             \\\n        const uint16_t * a_ = (a);                                       \\\n        uint16x4_t result;                                               \\\n-       __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.h}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8676,9 +8676,9 @@ vld1_f64 (const float64_t * a)\n        uint32x2_t b_ = (b);                                             \\\n        const uint32_t * a_ = (a);                                       \\\n        uint32x2_t result;                                               \\\n-       __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.s}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8689,9 +8689,9 @@ vld1_f64 (const float64_t * a)\n        uint64x1_t b_ = (b);                                             \\\n        const uint64_t * a_ = (a);                                       \\\n        uint64x1_t result;                                               \\\n-       __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.d}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\" (c), \"Utv\"(*a_), \"0\"(b_)                          \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8700,263 +8700,263 @@ __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vld1_p8 (const poly8_t * a)\n {\n   poly8x8_t result;\n-  __asm__ (\"ld1 {%0.8b}, [%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : /* No clobbers */);\n+  __asm__ (\"ld1 {%0.8b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const poly8x8_t *_a = (poly8x8_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n vld1_p16 (const poly16_t * a)\n {\n   poly16x4_t result;\n-  __asm__ (\"ld1 {%0.4h}, [%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : /* No clobbers */);\n+  __asm__ (\"ld1 {%0.4h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const poly16x4_t *_a = (poly16x4_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vld1_s8 (const int8_t * a)\n {\n   int8x8_t result;\n-  __asm__ (\"ld1 {%0.8b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.8b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const int8x8_t *_a = (int8x8_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vld1_s16 (const int16_t * a)\n {\n   int16x4_t result;\n-  __asm__ (\"ld1 {%0.4h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.4h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const int16x4_t *_a = (int16x4_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vld1_s32 (const int32_t * a)\n {\n   int32x2_t result;\n-  __asm__ (\"ld1 {%0.2s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.2s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const int32x2_t *_a = (int32x2_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vld1_s64 (const int64_t * a)\n {\n   int64x1_t result;\n-  __asm__ (\"ld1 {%0.1d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.1d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vld1_u8 (const uint8_t * a)\n {\n   uint8x8_t result;\n-  __asm__ (\"ld1 {%0.8b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.8b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const uint8x8_t *_a = (uint8x8_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vld1_u16 (const uint16_t * a)\n {\n   uint16x4_t result;\n-  __asm__ (\"ld1 {%0.4h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.4h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const uint16x4_t *_a = (uint16x4_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vld1_u32 (const uint32_t * a)\n {\n   uint32x2_t result;\n-  __asm__ (\"ld1 {%0.2s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.2s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const uint32x2_t *_a = (uint32x2_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vld1_u64 (const uint64_t * a)\n {\n   uint64x1_t result;\n-  __asm__ (\"ld1 {%0.1d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.1d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vld1q_dup_f32 (const float32_t * a)\n {\n   float32x4_t result;\n-  __asm__ (\"ld1r {%0.4s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.4s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n vld1q_dup_f64 (const float64_t * a)\n {\n   float64x2_t result;\n-  __asm__ (\"ld1r {%0.2d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.2d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n vld1q_dup_p8 (const poly8_t * a)\n {\n   poly8x16_t result;\n-  __asm__ (\"ld1r {%0.16b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.16b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n vld1q_dup_p16 (const poly16_t * a)\n {\n   poly16x8_t result;\n-  __asm__ (\"ld1r {%0.8h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.8h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vld1q_dup_s8 (const int8_t * a)\n {\n   int8x16_t result;\n-  __asm__ (\"ld1r {%0.16b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.16b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vld1q_dup_s16 (const int16_t * a)\n {\n   int16x8_t result;\n-  __asm__ (\"ld1r {%0.8h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.8h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vld1q_dup_s32 (const int32_t * a)\n {\n   int32x4_t result;\n-  __asm__ (\"ld1r {%0.4s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.4s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vld1q_dup_s64 (const int64_t * a)\n {\n   int64x2_t result;\n-  __asm__ (\"ld1r {%0.2d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.2d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vld1q_dup_u8 (const uint8_t * a)\n {\n   uint8x16_t result;\n-  __asm__ (\"ld1r {%0.16b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.16b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vld1q_dup_u16 (const uint16_t * a)\n {\n   uint16x8_t result;\n-  __asm__ (\"ld1r {%0.8h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.8h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vld1q_dup_u32 (const uint32_t * a)\n {\n   uint32x4_t result;\n-  __asm__ (\"ld1r {%0.4s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.4s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vld1q_dup_u64 (const uint64_t * a)\n {\n   uint64x2_t result;\n-  __asm__ (\"ld1r {%0.2d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1r {%0.2d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(*a)\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vld1q_f32 (const float32_t * a)\n {\n   float32x4_t result;\n-  __asm__ (\"ld1 {%0.4s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.4s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const float32x4_t *_a = (float32x4_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n vld1q_f64 (const float64_t * a)\n {\n   float64x2_t result;\n-  __asm__ (\"ld1 {%0.2d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.2d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const float64x2_t *_a = (float64x2_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n@@ -8966,9 +8966,9 @@ vld1q_f64 (const float64_t * a)\n        float32x4_t b_ = (b);                                            \\\n        const float32_t * a_ = (a);                                      \\\n        float32x4_t result;                                              \\\n-       __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.s}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8979,9 +8979,9 @@ vld1q_f64 (const float64_t * a)\n        float64x2_t b_ = (b);                                            \\\n        const float64_t * a_ = (a);                                      \\\n        float64x2_t result;                                              \\\n-       __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.d}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8992,9 +8992,9 @@ vld1q_f64 (const float64_t * a)\n        poly8x16_t b_ = (b);                                             \\\n        const poly8_t * a_ = (a);                                        \\\n        poly8x16_t result;                                               \\\n-       __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.b}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9005,9 +9005,9 @@ vld1q_f64 (const float64_t * a)\n        poly16x8_t b_ = (b);                                             \\\n        const poly16_t * a_ = (a);                                       \\\n        poly16x8_t result;                                               \\\n-       __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.h}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9018,9 +9018,9 @@ vld1q_f64 (const float64_t * a)\n        int8x16_t b_ = (b);                                              \\\n        const int8_t * a_ = (a);                                         \\\n        int8x16_t result;                                                \\\n-       __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.b}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9031,9 +9031,9 @@ vld1q_f64 (const float64_t * a)\n        int16x8_t b_ = (b);                                              \\\n        const int16_t * a_ = (a);                                        \\\n        int16x8_t result;                                                \\\n-       __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.h}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9044,9 +9044,9 @@ vld1q_f64 (const float64_t * a)\n        int32x4_t b_ = (b);                                              \\\n        const int32_t * a_ = (a);                                        \\\n        int32x4_t result;                                                \\\n-       __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.s}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9057,9 +9057,9 @@ vld1q_f64 (const float64_t * a)\n        int64x2_t b_ = (b);                                              \\\n        const int64_t * a_ = (a);                                        \\\n        int64x2_t result;                                                \\\n-       __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.d}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9070,9 +9070,9 @@ vld1q_f64 (const float64_t * a)\n        uint8x16_t b_ = (b);                                             \\\n        const uint8_t * a_ = (a);                                        \\\n        uint8x16_t result;                                               \\\n-       __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.b}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9083,9 +9083,9 @@ vld1q_f64 (const float64_t * a)\n        uint16x8_t b_ = (b);                                             \\\n        const uint16_t * a_ = (a);                                       \\\n        uint16x8_t result;                                               \\\n-       __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.h}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9096,9 +9096,9 @@ vld1q_f64 (const float64_t * a)\n        uint32x4_t b_ = (b);                                             \\\n        const uint32_t * a_ = (a);                                       \\\n        uint32x4_t result;                                               \\\n-       __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.s}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9109,9 +9109,9 @@ vld1q_f64 (const float64_t * a)\n        uint64x2_t b_ = (b);                                             \\\n        const uint64_t * a_ = (a);                                       \\\n        uint64x2_t result;                                               \\\n-       __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n+       __asm__ (\"ld1 {%0.d}[%1], %2\"                                    \\\n                 : \"=w\"(result)                                          \\\n-                : \"r\"(a_), \"0\"(b_), \"i\"(c)                              \\\n+                : \"i\"(c), \"Utv\"(*a_), \"0\"(b_)                           \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9120,109 +9120,109 @@ __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n vld1q_p8 (const poly8_t * a)\n {\n   poly8x16_t result;\n-  __asm__ (\"ld1 {%0.16b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.16b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const poly8x16_t *_a = (poly8x16_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n vld1q_p16 (const poly16_t * a)\n {\n   poly16x8_t result;\n-  __asm__ (\"ld1 {%0.8h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.16b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const poly16x8_t *_a = (poly16x8_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vld1q_s8 (const int8_t * a)\n {\n   int8x16_t result;\n-  __asm__ (\"ld1 {%0.16b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.16b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const int8x16_t *_a = (int8x16_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vld1q_s16 (const int16_t * a)\n {\n   int16x8_t result;\n-  __asm__ (\"ld1 {%0.8h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.8h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const int16x8_t *_a = (int16x8_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vld1q_s32 (const int32_t * a)\n {\n   int32x4_t result;\n-  __asm__ (\"ld1 {%0.4s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.4s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const int32x4_t *_a = (int32x4_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vld1q_s64 (const int64_t * a)\n {\n   int64x2_t result;\n-  __asm__ (\"ld1 {%0.2d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.2d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const int64x2_t *_a = (int64x2_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vld1q_u8 (const uint8_t * a)\n {\n   uint8x16_t result;\n-  __asm__ (\"ld1 {%0.16b},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.16b}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const uint8x16_t *_a = (uint8x16_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vld1q_u16 (const uint16_t * a)\n {\n   uint16x8_t result;\n-  __asm__ (\"ld1 {%0.8h},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.8h}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const uint16x8_t *_a = (uint16x8_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vld1q_u32 (const uint32_t * a)\n {\n   uint32x4_t result;\n-  __asm__ (\"ld1 {%0.4s},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.4s}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const uint32x4_t *_a = (uint32x4_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n \n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vld1q_u64 (const uint64_t * a)\n {\n   uint64x2_t result;\n-  __asm__ (\"ld1 {%0.2d},[%1]\"\n-           : \"=w\"(result)\n-           : \"r\"(a)\n-           : \"memory\");\n+  __asm__ (\"ld1 {%0.2d}, %1\"\n+\t   : \"=w\"(result)\n+\t   : \"Utv\"(({const uint64x2_t *_a = (uint64x2_t *) a; *_a;}))\n+\t   : /* No clobbers */);\n   return result;\n }\n "}]}