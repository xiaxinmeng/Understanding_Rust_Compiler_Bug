{"sha": "cb260b11817187e933bba141210f3af571f6b351", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyNjBiMTE4MTcxODdlOTMzYmJhMTQxMjEwZjNhZjU3MWY2YjM1MQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2002-03-29T21:56:12Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2002-03-29T21:56:12Z"}, "message": "dg.exp: Ignore tests in new directories bprob and gcov.\n\n\t* g++.dg/dg.exp: Ignore tests in new directories bprob and gcov.\n\t* g++.dg/bprob/bprob.exp: New driver for profile-directed branch\n\tordering tests.\n\t* g++.dg/bprob/bprob-1.C: New test.\n\t* g++.dg/gcov/gcov.exp: New driver for gcov tests.\n\t* g++.dg/gcov/gcov-1.C: New test.\n\t* g++.dg/gcov/gcov-1.x: New file.\n\t* g++.dg/gcov/gcov-2.C: New test.\n\t* g++.dg/gcov/gcov-3.C: New test.\n\t* g++.dg/gcov/gcov-3.h: New file.\n\nFrom-SVN: r51572", "tree": {"sha": "a820c83a1ffc2e6ee7b35658e9e5f28d6d9bf6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a820c83a1ffc2e6ee7b35658e9e5f28d6d9bf6fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb260b11817187e933bba141210f3af571f6b351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb260b11817187e933bba141210f3af571f6b351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb260b11817187e933bba141210f3af571f6b351", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb260b11817187e933bba141210f3af571f6b351/comments", "author": null, "committer": null, "parents": [{"sha": "b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb"}], "stats": {"total": 753, "additions": 750, "deletions": 3}, "files": [{"sha": "974ec990de5082c2d945941d4adc94783d685f71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -1,3 +1,16 @@\n+2002-03-29  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* g++.dg/dg.exp: Ignore tests in new directories bprob and gcov.\n+\t* g++.dg/bprob/bprob.exp: New driver for profile-directed branch\n+\tordering tests.\n+\t* g++.dg/bprob/bprob-1.C: New test.\n+\t* g++.dg/gcov/gcov.exp: New driver for gcov tests.\n+\t* g++.dg/gcov/gcov-1.C: New test.\n+\t* g++.dg/gcov/gcov-1.x: New file.\n+\t* g++.dg/gcov/gcov-2.C: New test.\n+\t* g++.dg/gcov/gcov-3.C: New test.\n+\t* g++.dg/gcov/gcov-3.h: New file.\n+\n 2002-03-28  Roger Sayle  <roger@eyesopen.com>\n \n \t* g++.old-deja/g++.other/builtins5.C: New test."}, {"sha": "b1a1de77e98ec77c6402bb7458c02a199ae6ca17", "filename": "gcc/testsuite/g++.dg/bprob/bprob-1.C", "status": "added", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob-1.C?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -0,0 +1,234 @@\n+/* Check that various C constructs (in C++) don't cause problems for\n+ * profile-directed block ordering.\n+\n+   Most of this test is the same as bprob-1.c and gcov-4.c in\n+   gcc.misc-tests.  The \"count\" comments are left in to make comparisons\n+   easier; they are ignored for this test. */\n+\n+extern \"C\" void abort (void);\n+\n+/* Check for loops. */\n+\n+int for_val1;\n+int for_val2;\n+int for_temp;\n+\n+int\n+test_for1 (int n)\n+{\n+  int i;\n+  for_temp = 1;\t\t\t\t/* count(3) */\n+  for (i = 0; i < n; i++)\n+    for_temp++;\t\t\t\t/* count(9) */\n+  return for_temp;\t\t\t/* count(3) */\n+}\n+\n+int\n+test_for2 (int m, int n, int o)\n+{\n+  int i, j, k;\n+  for_temp = 1;\t\t\t\t/* count(6) */\n+  for (i = 0; i < n; i++)\n+    for (j = 0; j < m; j++)\n+      for (k = 0; k < o; k++)\n+\tfor_temp++;\t\t\t/* count(81) */\n+  return for_temp;\t\t\t/* count(6) */\n+}\n+\n+int\n+call_for ()\n+{\n+  for_val1 += test_for1 (0);\n+  for_val1 += test_for1 (2);\n+  for_val1 += test_for1 (7);\n+\n+  for_val2 += test_for2 (0, 0, 0);\n+  for_val2 += test_for2 (1, 0, 0);\n+  for_val2 += test_for2 (1, 3, 0);\n+  for_val2 += test_for2 (1, 3, 1);\n+  for_val2 += test_for2 (3, 1, 5);\n+  for_val2 += test_for2 (3, 7, 3);\n+}\n+\n+/* Check the use of goto. */\n+\n+int goto_val;\n+\n+int\n+test_goto1 (int f)\n+{\n+  if (f)\t\t\t\t/* count(2) */\n+    goto lab1;\t\t\t\t/* count(1) */\n+  return 1;\t\t\t\t/* count(1) */\n+lab1:\n+  return 2;\t\t\t\t/* count(1) */\n+}\n+\n+int\n+test_goto2 (int f)\n+{\n+  int i;\n+  for (i = 0; i < 10; i++)\t\t/* count(15) */\n+    if (i == f) goto lab2;\t\t/* count(14) */\n+  return 4;\t\t\t\t/* count(1) */\n+lab2:\n+  return 8;\t\t\t\t/* count(1) */\n+}\n+\n+void\n+call_goto ()\n+{\n+  goto_val += test_goto1 (0);\n+  goto_val += test_goto1 (1);\n+  goto_val += test_goto2 (3);\n+  goto_val += test_goto2 (30);\n+}\n+\n+/* Check nested if-then-else statements. */\n+\n+int ifelse_val1;\n+int ifelse_val2;\n+int ifelse_val3;\n+\n+int\n+test_ifelse1 (int i, int j)\n+{\n+  int result = 0;\n+  if (i)\t\t\t\t/* count(5) */\n+    if (j)\t\t\t\t/* count(3) */\n+      result = 4;\t\t\t/* count(3) */\n+    else\n+      result = 1024;\n+  else\n+    if (j)\t\t\t\t/* count(2) */\n+      result = 1;\t\t\t/* count(1) */\n+    else\n+      result = 2;\t\t\t/* count(1) */\n+  if (i > j)\t\t\t\t/* count(5) */\n+    result *= 2;\t\t\t/* count(1) */\n+  if (i > 10)\t\t\t\t/* count(5) */\n+    if (j > 10)\t\t\t\t/* count(1) */\n+      result *= 4;\t\t\t/* count(1) */\n+  return result;\t\t\t/* count(5) */\n+}\n+\n+int\n+test_ifelse2 (int i)\n+{\n+  int result = 0;\n+  if (!i)\t\t\t\t/* count(6) */\n+    result = 1;\t\t\t\t/* count(1) */\n+  if (i == 1)\t\t\t\t/* count(6) */\n+    result = 1024;\n+  if (i == 2)\t\t\t\t/* count(6) */\n+    result = 2;\t\t\t\t/* count(3) */\n+  if (i == 3)\t\t\t\t/* count(6) */\n+    return 8;\t\t\t\t/* count(2) */\n+  if (i == 4)\t\t\t\t/* count(4) */\n+    return 2048;\n+  return result;\t\t\t/* count(4) */\n+}\n+\n+int\n+test_ifelse3 (int i, int j)\n+{\n+  int result = 1;\n+  if (i > 10 && j > i && j < 20)\t/* count(11) */\n+    result = 16;\t\t\t/* count(1) */\n+  if (i > 20)\t\t\t\t/* count(11) */\n+    if (j > i)\t\t\t\t/* count(5) */\n+      if (j < 30)\t\t\t/* count(2) */\n+\tresult = 32;\t\t\t/* count(1) */\n+  if (i == 3 || j == 47 || i == j)\t/* count(11) */\n+    result = 64;\t\t\t/* count(3) */\n+  return result;\t\t\t/* count(11) */\n+}\n+\n+void\n+call_ifelse ()\n+{\n+  ifelse_val1 += test_ifelse1 (0, 2);\n+  ifelse_val1 += test_ifelse1 (0, 0);\n+  ifelse_val1 += test_ifelse1 (1, 2);\n+  ifelse_val1 += test_ifelse1 (10, 2);\n+  ifelse_val1 += test_ifelse1 (11, 11);\n+\n+  ifelse_val2 += test_ifelse2 (0);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (3);\n+  ifelse_val2 += test_ifelse2 (3);\n+\n+  ifelse_val3 += test_ifelse3 (11, 19);\n+  ifelse_val3 += test_ifelse3 (25, 27);\n+  ifelse_val3 += test_ifelse3 (11, 22);\n+  ifelse_val3 += test_ifelse3 (11, 10);\n+  ifelse_val3 += test_ifelse3 (21, 32);\n+  ifelse_val3 += test_ifelse3 (21, 20);\n+  ifelse_val3 += test_ifelse3 (1, 2);\n+  ifelse_val3 += test_ifelse3 (32, 31);\n+  ifelse_val3 += test_ifelse3 (3, 0);\n+  ifelse_val3 += test_ifelse3 (0, 47);\t/* count(1) */\n+  ifelse_val3 += test_ifelse3 (65, 65);\t/* count(1) */\n+}\n+\n+/* Check switch statements. */\n+\n+int switch_val, switch_m;\n+\n+int\n+test_switch (int i, int j)\n+{\n+  int result = 0;\t\t\t/* count(5) */\n+\n+  switch (i)\t\t\t\t/* count(5) */\n+    {\n+      case 1:\n+        result = 2;\t\t\t/* count(1) */\n+        break;\n+      case 2:\n+        result = 1024;\n+        break;\n+      case 3:\n+      case 4:\n+        if (j == 2)\t\t\t/* count(3) */\n+          return 4;\t\t\t/* count(1) */\n+        result = 8;\t\t\t/* count(2) */\n+        break;\n+      default:\n+\tresult = 32;\t\t\t/* count(1) */\n+\tswitch_m++;\t\t\t/* count(1) */\n+        break;\n+    }\n+  return result;\t\t\t/* count(4) */\n+}\n+\n+void\n+call_switch ()\n+{\n+  switch_val += test_switch (1, 0);\n+  switch_val += test_switch (3, 0);\n+  switch_val += test_switch (3, 2);\n+  switch_val += test_switch (4, 0);\n+  switch_val += test_switch (16, 0);\t\n+  switch_val += switch_m;\n+}\n+\n+int\n+main()\n+{\n+  call_for ();\n+  call_goto ();\n+  call_ifelse ();\n+  call_switch ();\n+  if ((for_val1 != 12)\n+      || (for_val2 != 87)\n+      || (goto_val != 15)\n+      || (ifelse_val1 != 31)\n+      || (ifelse_val2 != 23)\n+      || (ifelse_val3 != 246)\n+      || (switch_val != 55))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "357ed295f00fcbb8e3eae7305f8f07193eb9398a", "filename": "gcc/testsuite/g++.dg/bprob/bprob.exp", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -0,0 +1,58 @@\n+#   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+#\n+# Test the functionality of programs compiled with profile-directed block\n+# ordering using -fprofile-arcs followed by -fbranch-probabilities.\n+\n+# The procedures in profopt.exp need these parameters.\n+set tool g++\n+set profile_option -fprofile-arcs\n+set feedback_option -fbranch-probabilities\n+set prof_ext da\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# Override the list defined in profopt.exp.\n+set PROFOPT_OPTIONS [list \\\n+\t{ -g } \\\n+\t{ -O0 } \\\n+\t{ -O1 } \\\n+\t{ -O2 } \\\n+\t{ -O3 } \\\n+\t{ -O3 -g } \\\n+\t{ -Os } ]\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# Load support procs.\n+load_lib profopt.exp\n+\n+# Clean up existing .da files.\n+profopt-cleanup da\n+\n+# Main loop.\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+\tcontinue\n+    }\n+\n+    profopt-execute $src\n+}"}, {"sha": "b59d302b3ae0f448cf7d7c44d53375bc7ab06ef5", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -28,10 +28,13 @@ if ![info exists DEFAULT_CXXFLAGS] then {\n # Initialize `dg'.\n dg-init\n \n-# Gather a list of all tests, excluding those in special/; those are handled\n-# well, specially.\n+# Gather a list of all tests, with the exception of those in directories\n+# that are handled specially.\n set all [lsort [find $srcdir/$subdir *.C]]\n-set tests [prune [prune $all $srcdir/$subdir/special/*] $srcdir/$subdir/debug/*]\n+set tests [prune [prune [prune [prune $all $srcdir/$subdir/special/*] \\\n+                               $srcdir/$subdir/debug/*] \\\n+                        $srcdir/$subdir/gcov/*] \\\n+                 $srcdir/$subdir/bprob/*]\n \n # Main loop.\n dg-runtest $tests \"\" $DEFAULT_CXXFLAGS"}, {"sha": "617994401f68439ea359ffe0f176ff1682123560", "filename": "gcc/testsuite/g++.dg/gcov/gcov-1.C", "status": "added", "additions": 313, "deletions": 0, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.C?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -0,0 +1,313 @@\n+/* Check that execution counts and branch probabilities for various C\n+   constructs are reported correctly by gcov. */\n+\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+extern \"C\" void abort (void);\n+\n+int do_something (int i)\n+{\n+  return i;\n+}\n+\n+/* Check static inline functions. */\n+\n+int unref_val;\n+\n+static inline int\n+unreferenced (int i, int j)\n+{\n+  return i - j;\n+}\n+\n+static inline int\n+uncalled (int i, int j)\n+{\n+  return i * j;\n+}\n+\n+static inline int\n+called (int i, int j)\n+{\n+    return i + j;\t\t\t/* count(1) */\n+}\n+\n+void\n+call_unref ()\n+{\n+  if (unref_val)\t\t\t/* count(1) */\n+    unref_val = uncalled (1, 2);\n+  unref_val = called (unref_val, 4);\t/* count(1) */\n+}\n+\n+\n+/* Check for loops. */\n+\n+int for_val1;\n+int for_val2;\n+int for_temp;\n+\n+int\n+test_for1 (int n)\n+{\n+  int i;\n+  for_temp = 1;\t\t\t\t/* count(3) */\n+  for (i = 0; i < n; i++)\t\t/* branch(25) */\n+\t\t\t\t\t/* branch(end) */\n+    for_temp++;\t\t\t\t/* count(9) */\n+  return for_temp;\t\t\t/* count(3) */\n+}\n+\n+int\n+test_for2 (int m, int n, int o)\n+{\n+  int i, j, k;\n+  for_temp = 1;\t\t\t\t/* count(6) */\n+  for (i = 0; i < n; i++)\t\t/* branch(30) */\n+\t\t\t\t\t/* branch(end) */\n+    for (j = 0; j < m; j++)\t\t/* branch(32) */\n+\t\t\t\t\t/* branch(end) */\n+      for (k = 0; k < o; k++)\t\t/* branch(27) */\n+\t\t\t\t\t/* branch(end) */\n+\tfor_temp++;\t\t\t/* count(81) */\n+  return for_temp;\t\t\t/* count(6) */\n+}\n+\n+int\n+call_for ()\n+{\n+  for_val1 += test_for1 (0);\n+  for_val1 += test_for1 (2);\n+  for_val1 += test_for1 (7);\n+\n+  for_val2 += test_for2 (0, 0, 0);\n+  for_val2 += test_for2 (1, 0, 0);\n+  for_val2 += test_for2 (1, 3, 0);\n+  for_val2 += test_for2 (1, 3, 1);\n+  for_val2 += test_for2 (3, 1, 5);\n+  for_val2 += test_for2 (3, 7, 3);\n+}\n+\n+/* Check the use of goto. */\n+\n+int goto_val;\n+\n+int\n+test_goto1 (int f)\n+{\n+\t\t\t\t\t/* branch(50) */\n+  if (f)\t\t\t\t/* count(2) */\n+\t\t\t\t\t/* branch(end) */\n+    goto lab1;\t\t\t\t/* count(1) */\n+  return 1;\t\t\t\t/* count(1) */\n+lab1:\n+  return 2;\t\t\t\t/* count(1) */\n+}\n+\n+int\n+test_goto2 (int f)\n+{\n+  int i;\n+\t\t\t\t\t/* branch(7) */\n+  for (i = 0; i < 10; i++)\t\t/* count(15) */\n+\t\t\t\t\t/* branch(end) */\n+    if (i == f) goto lab2;\t\t/* count(14) */\n+  return 4;\t\t\t\t/* count(1) */\n+lab2:\n+  return 8;\t\t\t\t/* count(1) */\n+}\n+\n+void\n+call_goto ()\n+{\n+  goto_val += test_goto1 (0);\n+  goto_val += test_goto1 (1);\n+  goto_val += test_goto2 (3);\n+  goto_val += test_goto2 (30);\n+}\n+\n+/* Check nested if-then-else statements. */\n+\n+int ifelse_val1;\n+int ifelse_val2;\n+int ifelse_val3;\n+\n+int\n+test_ifelse1 (int i, int j)\n+{\n+  int result = 0;\n+\t\t\t\t\t/* branch(40) */\n+  if (i)\t\t\t\t/* count(5) */\n+\t\t\t\t\t/* branch(0) */\n+    if (j)\t\t\t\t/* count(3) */\n+\t\t\t\t\t/* branch(end) */\n+      result = do_something (4);\t/* count(3) */\n+    else\n+      result = do_something (1024);\n+  else\n+\t\t\t\t\t/* branch(50) */\n+    if (j)\t\t\t\t/* count(2) */\n+\t\t\t\t\t/* branch(end) */\n+      result = do_something (1);\t/* count(1) */\n+    else\n+      result = do_something (2);\t/* count(1) */\n+\t\t\t\t\t/* branch(80) */\n+  if (i > j)\t\t\t\t/* count(5) */\n+\t\t\t\t\t/* branch(end) */\n+    result = do_something (result*2);\t/* count(1) */\n+\t\t\t\t\t/* branch(80) */\n+  if (i > 10)\t\t\t\t/* count(5) */\n+\t\t\t\t\t/* branch(100) */\n+    if (j > 10)\t\t\t\t/* count(1) */\n+\t\t\t\t\t/* branch(end) */\n+      result = do_something (result*4);\t/* count(1) */\n+  return result;\t\t\t/* count(5) */\n+}\n+\n+int\n+test_ifelse2 (int i)\n+{\n+  int result = 0;\n+\t\t\t\t\t/* branch(83) */\n+  if (!i)\t\t\t\t/* count(6) */\n+\t\t\t\t\t/* branch(end) */\n+    result = do_something (1);\t\t/* count(1) */\n+\t\t\t\t\t/* branch(100) */\n+  if (i == 1)\t\t\t\t/* count(6) */\n+\t\t\t\t\t/* branch(end) */\n+    result = do_something (1024);\n+\t\t\t\t\t/* branch(50) */\n+  if (i == 2)\t\t\t\t/* count(6) */\n+\t\t\t\t\t/* branch(end) */\n+    result = do_something (2);\t\t/* count(3) */\n+\t\t\t\t\t/* branch(67) */\n+  if (i == 3)\t\t\t\t/* count(6) */\n+\t\t\t\t\t/* branch(end) */\n+    return do_something (8);\t\t/* count(2) */\n+\t\t\t\t\t/* branch(100) */\n+  if (i == 4)\t\t\t\t/* count(4) */\n+\t\t\t\t\t/* branch(end) */\n+    return do_something (2048);\n+  return result;\t\t\t/* count(4) */\n+}\n+\n+int\n+test_ifelse3 (int i, int j)\n+{\n+  int result = 1;\n+\t\t\t\t\t/* branch(27 50 75) */\n+  if (i > 10 && j > i && j < 20)\t/* count(11) */\n+\t\t\t\t\t/* branch(end) */\n+    result = do_something (16);\t\t/* count(1) */\n+\t\t\t\t\t/* branch(55) */\n+  if (i > 20)\t\t\t\t/* count(11) */\n+\t\t\t\t\t/* branch(60) */\n+    if (j > i)\t\t\t\t/* count(5) */\n+\t\t\t\t\t/* branch(50) */\n+      if (j < 30)\t\t\t/* count(2) */\n+\t\t\t\t\t/* branch(end) */\n+\tresult = do_something (32);\t/* count(1) */\n+\t\t\t\t\t/* branch(9 10 89) */\n+  if (i == 3 || j == 47 || i == j)\t/* count(11) */\n+\t\t\t\t\t/* branch(end) */\n+    result = do_something (64);\t\t/* count(3) */\n+  return result;\t\t\t/* count(11) */\n+}\n+\n+void\n+call_ifelse ()\n+{\n+  ifelse_val1 += test_ifelse1 (0, 2);\n+  ifelse_val1 += test_ifelse1 (0, 0);\n+  ifelse_val1 += test_ifelse1 (1, 2);\n+  ifelse_val1 += test_ifelse1 (10, 2);\n+  ifelse_val1 += test_ifelse1 (11, 11);\n+\n+  ifelse_val2 += test_ifelse2 (0);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (3);\n+  ifelse_val2 += test_ifelse2 (3);\n+\n+  ifelse_val3 += test_ifelse3 (11, 19);\n+  ifelse_val3 += test_ifelse3 (25, 27);\n+  ifelse_val3 += test_ifelse3 (11, 22);\n+  ifelse_val3 += test_ifelse3 (11, 10);\n+  ifelse_val3 += test_ifelse3 (21, 32);\n+  ifelse_val3 += test_ifelse3 (21, 20);\n+  ifelse_val3 += test_ifelse3 (1, 2);\n+  ifelse_val3 += test_ifelse3 (32, 31);\n+  ifelse_val3 += test_ifelse3 (3, 0);\n+  ifelse_val3 += test_ifelse3 (0, 47);\n+  ifelse_val3 += test_ifelse3 (65, 65);\n+}\n+\n+/* Check switch statements. */\n+\n+int switch_val, switch_m;\n+\n+int\n+test_switch (int i, int j)\n+{\n+  int result = 0;\t\t\t/* count(5) */\n+\n+\t\t\t\t\t/* branch(80 25) */\n+  switch (i)\t\t\t\t/* count(5) */\n+\t\t\t\t\t/* branch(end) */\n+    {\n+      case 1:\n+        result = do_something (2);\t/* count(1) */\n+        break;\n+      case 2:\n+        result = do_something (1024);\n+        break;\n+      case 3:\n+      case 4:\n+\t\t\t\t\t/* branch(67) */\n+        if (j == 2)\t\t\t/* count(3) */\n+\t\t\t\t\t/* branch(end) */\n+          return do_something (4);\t/* count(1) */\n+        result = do_something (8);\t/* count(2) */\n+        break;\n+      default:\n+\tresult = do_something (32);\t/* count(1) */\n+\tswitch_m++;\t\t\t/* count(1) */\n+        break;\n+    }\n+  return result;\t\t\t/* count(4) */\n+}\n+\n+void\n+call_switch ()\n+{\n+  switch_val += test_switch (1, 0);\n+  switch_val += test_switch (3, 0);\n+  switch_val += test_switch (3, 2);\n+  switch_val += test_switch (4, 0);\n+  switch_val += test_switch (16, 0);\t\n+  switch_val += switch_m;\n+}\n+\n+int\n+main()\n+{\n+  call_for ();\n+  call_goto ();\n+  call_ifelse ();\n+  call_switch ();\n+  call_unref ();\n+  if ((for_val1 != 12)\n+      || (for_val2 != 87)\n+      || (goto_val != 15)\n+      || (ifelse_val1 != 31)\n+      || (ifelse_val2 != 23)\n+      || (ifelse_val3 != 246)\n+      || (switch_val != 55)\n+      || (unref_val != 4))\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { run-gcov -b gcov-1.C } } */"}, {"sha": "b01ef42b9d772316f3c99c588e2042897a94c63e", "filename": "gcc/testsuite/g++.dg/gcov/gcov-1.x", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.x?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -0,0 +1,2 @@\n+set gcov_verify_branches 1\n+return 0"}, {"sha": "66d8af39bce402032b6e5d60929e5980d34a272e", "filename": "gcc/testsuite/g++.dg/gcov/gcov-2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -0,0 +1,32 @@\n+/* Verify line coverage counts for simple member functions. */\n+\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+class C {\n+public:\n+  C()\n+  {\n+    i = 0;\t\t\t\t/* count(1) */\n+  }\n+  ~C() {}\n+  void seti (int j)\n+  {\n+    i = j;\t\t\t\t/* count(1) */\n+  }\n+private:\n+  int i;\n+};\n+\n+void foo()\n+{\n+  C c;\t\t\t\t\t/* count(1) */\n+  c.seti (1);\t\t\t\t/* count(1) */\n+}\n+\n+int main()\n+{\n+  foo();\t\t\t\t/* count(1) */\n+}\n+\n+/* { dg-final { run-gcov gcov-2.C } } */"}, {"sha": "aff063a4b90f4ba631828f9afb965f7688779027", "filename": "gcc/testsuite/g++.dg/gcov/gcov-3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-3.C?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -0,0 +1,17 @@\n+/* Check that gcov doesn't abort when a static object is defined\n+   within a header file.  */\n+\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+#include \"gcov-3.h\"\n+\n+extern int foo();\n+\n+int\n+main ()\n+{\n+  return foo();                                /* count(1) */\n+}\n+\n+/* { dg-final { run-gcov gcov-3.C } } */"}, {"sha": "1c7ca00dd612598af660d31ebe4e584d49ef488a", "filename": "gcc/testsuite/g++.dg/gcov/gcov-3.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-3.h?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -0,0 +1,31 @@\n+/* Leave unused lines for at least the length of the including source file. */\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+struct T {\n+  int i;\n+  T() { i = 0; }\n+};\n+\n+T t;\n+\n+int foo()\n+{\n+  return t.i;                          /* count(1) */\n+}"}, {"sha": "9c06d26434a5d9229d27d10908780fb065a24ed5", "filename": "gcc/testsuite/g++.dg/gcov/gcov.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb260b11817187e933bba141210f3af571f6b351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp?ref=cb260b11817187e933bba141210f3af571f6b351", "patch": "@@ -0,0 +1,44 @@\n+#   Copyright (C) 1997, 2001, 2002 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Gcov test driver.\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+load_lib gcov.exp\n+\n+global GXX_UNDER_TEST\n+\n+# Find gcov in the same directory as $GXX_UNDER_TEST.\n+if { ![is_remote host] && [string match \"*/*\" [lindex $GXX_UNDER_TEST 0]] } {\n+    set GCOV [file dirname [lindex $GXX_UNDER_TEST 0]]/gcov\n+} else {\n+    set GCOV gcov\n+}\n+\n+# Initialize harness.\n+dg-init\n+\n+# Delete old .da files.\n+set files [glob -nocomplain gcov-*.da];\n+if { $files != \"\" } {\n+    eval \"remote_file build delete $files\";\n+}\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" \"\"\n+\n+dg-finish"}]}