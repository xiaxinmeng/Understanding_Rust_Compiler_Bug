{"sha": "3ab0f29005da8dbc7a51fd8a995559e1b40f88e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiMGYyOTAwNWRhOGRiYzdhNTFmZDhhOTk1NTU5ZTFiNDBmODhlNw==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@debian.org", "date": "2004-09-13T23:25:12Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-09-13T23:25:12Z"}, "message": "expmed.c (synth_mult): Initialize latency.\n\n\t* expmed.c (synth_mult): Initialize latency.  Check cost before\n\tchecking ops count.\n\nFrom-SVN: r87456", "tree": {"sha": "5241e18372b0806679b1ea09b8e21501d956f9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5241e18372b0806679b1ea09b8e21501d956f9b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ab0f29005da8dbc7a51fd8a995559e1b40f88e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab0f29005da8dbc7a51fd8a995559e1b40f88e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab0f29005da8dbc7a51fd8a995559e1b40f88e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab0f29005da8dbc7a51fd8a995559e1b40f88e7/comments", "author": null, "committer": null, "parents": [{"sha": "6674a6ce49dc1cba7ca46cdd9cf4a62ede556568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6674a6ce49dc1cba7ca46cdd9cf4a62ede556568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6674a6ce49dc1cba7ca46cdd9cf4a62ede556568"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "419c409633cb5f00830d3b7672574fa333794ead", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab0f29005da8dbc7a51fd8a995559e1b40f88e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab0f29005da8dbc7a51fd8a995559e1b40f88e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ab0f29005da8dbc7a51fd8a995559e1b40f88e7", "patch": "@@ -1,3 +1,8 @@\n+2004-09-13  Daniel Jacobowitz  <dan@debian.org>\n+\n+\t* expmed.c (synth_mult): Initialize latency.  Check cost before\n+\tchecking ops count.\n+\n 2004-09-26  Kenneth Zadeck  <Kenneth.Zadeck@NaturalBridge.com>\n \n "}, {"sha": "232381f2c5ab2210f8ab685d89430a50ff8f2be7", "filename": "gcc/expmed.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab0f29005da8dbc7a51fd8a995559e1b40f88e7/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab0f29005da8dbc7a51fd8a995559e1b40f88e7/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3ab0f29005da8dbc7a51fd8a995559e1b40f88e7", "patch": "@@ -2247,6 +2247,7 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n   /* Indicate that no algorithm is yet found.  If no algorithm\n      is found, this value will be returned and indicate failure.  */\n   alg_out->cost.cost = cost_limit->cost + 1;\n+  alg_out->cost.latency = cost_limit->latency + 1;\n \n   if (cost_limit->cost < 0\n       || (cost_limit->cost == 0 && cost_limit->latency <= 0))\n@@ -2516,15 +2517,15 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t}\n     }\n \n+  /* If best_cost has not decreased, we have not found any algorithm.  */\n+  if (!CHEAPER_MULT_COST (&best_cost, cost_limit))\n+    return;\n+\n   /* If we are getting a too long sequence for `struct algorithm'\n      to record, make this search fail.  */\n   if (best_alg->ops == MAX_BITS_PER_WORD)\n     return;\n \n-  /* If best_cost has not decreased, we have not found any algorithm.  */\n-  if (!CHEAPER_MULT_COST (&best_cost, cost_limit))\n-    return;\n-\n   /* Copy the algorithm from temporary space to the space at alg_out.\n      We avoid using structure assignment because the majority of\n      best_alg is normally undefined, and this is a critical function.  */"}]}