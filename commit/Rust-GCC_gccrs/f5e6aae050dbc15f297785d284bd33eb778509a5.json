{"sha": "f5e6aae050dbc15f297785d284bd33eb778509a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlNmFhZTA1MGRiYzE1ZjI5Nzc4NWQyODRiZDMzZWI3Nzg1MDlhNQ==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-06-20T13:51:19Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-06-20T13:51:19Z"}, "message": "objc-act.c (hash_init): Assume xmalloc always succeeds, also use memset to clear the hash tables.\n\n\t* objc/objc-act.c (hash_init): Assume xmalloc always succeeds,\n\talso use memset to clear the hash tables.\n\t(hash_enter): Assume xmalloc always succeeds.\n\t(hash_add_attr): Ditto.\n\t(continue_class): Ditto.\n\nFrom-SVN: r43472", "tree": {"sha": "c93d49af5ccb64d9f895232329b7f25a53eb5038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93d49af5ccb64d9f895232329b7f25a53eb5038"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e6aae050dbc15f297785d284bd33eb778509a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e6aae050dbc15f297785d284bd33eb778509a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e6aae050dbc15f297785d284bd33eb778509a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e6aae050dbc15f297785d284bd33eb778509a5/comments", "author": null, "committer": null, "parents": [{"sha": "5f2d6cfa81853503bd97f87c35fba49bac9ba699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2d6cfa81853503bd97f87c35fba49bac9ba699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2d6cfa81853503bd97f87c35fba49bac9ba699"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "92e5867c406a5cf8fb2678122bbbc782ee112626", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e6aae050dbc15f297785d284bd33eb778509a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e6aae050dbc15f297785d284bd33eb778509a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5e6aae050dbc15f297785d284bd33eb778509a5", "patch": "@@ -1,3 +1,11 @@\n+2001-06-20  Stan Shebs  <shebs@apple.com>\n+\n+\t* objc/objc-act.c (hash_init): Assume xmalloc always succeeds,\n+\talso use memset to clear the hash tables.\n+\t(hash_enter): Assume xmalloc always succeeds.\n+\t(hash_add_attr): Ditto.\n+\t(continue_class): Ditto.\n+\n 2001-06-20  Michael Meissner  <meissner@redhat.com>\n \n \t* builtins.c (predict.h): Include."}, {"sha": "076637e588f96101c14479d617afa135d9476063", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e6aae050dbc15f297785d284bd33eb778509a5/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e6aae050dbc15f297785d284bd33eb778509a5/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f5e6aae050dbc15f297785d284bd33eb778509a5", "patch": "@@ -5447,21 +5447,11 @@ build_ivar_reference (id)\n static void\n hash_init ()\n {\n-  nst_method_hash_list = (hash *)xmalloc (SIZEHASHTABLE * sizeof (hash));\n-  cls_method_hash_list = (hash *)xmalloc (SIZEHASHTABLE * sizeof (hash));\n+  nst_method_hash_list = (hash *) xmalloc (SIZEHASHTABLE * sizeof (hash));\n+  cls_method_hash_list = (hash *) xmalloc (SIZEHASHTABLE * sizeof (hash));\n \n-  if (!nst_method_hash_list || !cls_method_hash_list)\n-    perror (\"unable to allocate space in objc-act.c\");\n-  else\n-    {\n-      int i;\n-\n-      for (i = 0; i < SIZEHASHTABLE; i++)\n-\t{\n-\t  nst_method_hash_list[i] = 0;\n-\t  cls_method_hash_list[i] = 0;\n-\t}\n-    }\n+  memset (nst_method_hash_list, 0, SIZEHASHTABLE * sizeof (hash));\n+  memset (cls_method_hash_list, 0, SIZEHASHTABLE * sizeof (hash));\n }\n \n /* WARNING!!!!  hash_enter is called with a method, and will peek\n@@ -5484,8 +5474,6 @@ hash_enter (hashlist, method)\n       hash_alloc_index = 0;\n       hash_alloc_list = (hash) xmalloc (sizeof (struct hashed_entry)\n \t\t\t\t\t* HASH_ALLOC_LIST_SIZE);\n-      if (! hash_alloc_list)\n-\tperror (\"unable to allocate in objc-act.c\");\n     }\n   obj = &hash_alloc_list[hash_alloc_index++];\n   obj->list = 0;\n@@ -5528,8 +5516,6 @@ hash_add_attr (entry, value)\n       attr_alloc_index = 0;\n       attr_alloc_list = (attr) xmalloc (sizeof (struct hashed_attribute)\n \t\t\t\t\t* ATTR_ALLOC_LIST_SIZE);\n-      if (! attr_alloc_list)\n-\tperror (\"unable to allocate in objc-act.c\");\n     }\n   obj = &attr_alloc_list[attr_alloc_index++];\n   obj->next = entry->list;\n@@ -6309,9 +6295,7 @@ continue_class (class)\n       if (!objc_class_template)\n \tbuild_class_template ();\n \n-      if (!(imp_entry\n-\t    = (struct imp_entry *) xmalloc (sizeof (struct imp_entry))))\n-\tperror (\"unable to allocate in objc-act.c\");\n+      imp_entry = (struct imp_entry *) xmalloc (sizeof (struct imp_entry));\n \n       imp_entry->next = imp_list;\n       imp_entry->imp_context = class;"}]}