{"sha": "ac62a60e1ff8375219584e263fb97853e5f90b8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2MmE2MGUxZmY4Mzc1MjE5NTg0ZTI2M2ZiOTc4NTNlNWY5MGI4Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-04-05T17:04:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-04-05T17:04:29Z"}, "message": "i386.md (movdi_1_rex64): Allow SSE->SSE reg move.\n\n\t* i386.md (movdi_1_rex64): Allow SSE->SSE reg move.\n\t(lea_0): Rename to lea_1.\n\t(lea_1_zext, lea_1_rex64, lea_2_rex64): New patterns.\n\t(lea_general_?): Allow SImodes on TARGET_64BIT\n\t(lea_general_?_zext): New patterns.\n\t(call_1, call_1_rex64): Fix.\n\nFrom-SVN: r41122", "tree": {"sha": "3e8d7def5ddc0fa249f1d800501341486693a1de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e8d7def5ddc0fa249f1d800501341486693a1de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac62a60e1ff8375219584e263fb97853e5f90b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac62a60e1ff8375219584e263fb97853e5f90b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac62a60e1ff8375219584e263fb97853e5f90b8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac62a60e1ff8375219584e263fb97853e5f90b8c/comments", "author": null, "committer": null, "parents": [{"sha": "b47b4f214f446de3d8e15c6fe0a31d9dac998777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47b4f214f446de3d8e15c6fe0a31d9dac998777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47b4f214f446de3d8e15c6fe0a31d9dac998777"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "1584195ca88cdaa454abdf6181e3e50f0831b0f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac62a60e1ff8375219584e263fb97853e5f90b8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac62a60e1ff8375219584e263fb97853e5f90b8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac62a60e1ff8375219584e263fb97853e5f90b8c", "patch": "@@ -1,3 +1,12 @@\n+Thu Apr  5 19:02:15 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (movdi_1_rex64): Allow SSE->SSE reg move.\n+\t(lea_0): Rename to lea_1.\n+\t(lea_1_zext, lea_1_rex64, lea_2_rex64): New patterns.\n+\t(lea_general_?): Allow SImodes on TARGET_64BIT\n+\t(lea_general_?_zext): New patterns.\n+\t(call_1, call_1_rex64): Fix.\n+\n Thu Apr  5 19:00:15 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_split_long_move): Use PUT_MODE instead of change_address."}, {"sha": "5aa3e493ea4e2574216c2572145b7f1acf2026d5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac62a60e1ff8375219584e263fb97853e5f90b8c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac62a60e1ff8375219584e263fb97853e5f90b8c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ac62a60e1ff8375219584e263fb97853e5f90b8c", "patch": "@@ -2473,7 +2473,7 @@\n   \"ix86_split_long_move (operands); DONE;\")\n \n (define_insn \"*movdi_1_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,mr,!mr,!m*y,!*y,*m,*Y\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,mr,!mr,!m*y,!*y,m*Y,*Y\")\n \t(match_operand:DI 1 \"general_operand\" \"Z,rem,i,re,n,*y,m,*Y,*m\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && TARGET_64BIT\"\n@@ -5250,14 +5250,38 @@\n   \"\"\n   \"ix86_expand_binary_operator (PLUS, SImode, operands); DONE;\")\n \n-(define_insn \"*lea_0\"\n+(define_insn \"*lea_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"address_operand\" \"p\"))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"lea{l}\\\\t{%a1, %0|%0, %a1}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*lea_1_rex64\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(subreg:SI (match_operand:DI 1 \"address_operand\" \"p\") 0))]\n+  \"TARGET_64BIT\"\n+  \"lea{l}\\\\t{%a1, %0|%0, %a1}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*lea_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (subreg:SI (match_operand:DI 1 \"address_operand\" \"p\") 0)))]\n+  \"TARGET_64BIT && TARGET_64BIT\"\n+  \"lea{l}\\\\t{%a1, %k0|%k0, %a1}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*lea_2_rex64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(match_operand:DI 1 \"address_operand\" \"p\"))]\n+  \"TARGET_64BIT\"\n+  \"lea{q}\\\\t{%a1, %0|%0, %a1}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"DI\")])\n+\n ;; The lea patterns for non-Pmodes needs to be matched by several\n ;; insns converted to real lea by splitters.\n \n@@ -5266,7 +5290,8 @@\n \t(plus (plus (match_operand 1 \"register_operand\" \"r\")\n \t\t    (match_operand 2 \"register_operand\" \"r\"))\n \t      (match_operand 3 \"immediate_operand\" \"i\")))]\n-  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n+  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode\n+    || (TARGET_64BIT && GET_MODE (operands[0]) == SImode))\n    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\n    && GET_MODE (operands[0]) == GET_MODE (operands[2])\n@@ -5292,12 +5317,35 @@\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn_and_split \"*lea_general_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (plus:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t   (match_operand:SI 3 \"immediate_operand\" \"i\"))))]\n+  \"TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (subreg:SI (plus:DI (plus:DI (match_dup 1)\n+\t\t\t\t\t\t     (match_dup 2))\n+\t\t\t\t\t    (match_dup 3)) 0)))]\n+  \"\n+{\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[2] = gen_lowpart (Pmode, operands[2]);\n+  operands[3] = gen_lowpart (Pmode, operands[3]);\n+}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn_and_split \"*lea_general_2\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(plus (mult (match_operand 1 \"register_operand\" \"r\")\n \t\t    (match_operand 2 \"const248_operand\" \"i\"))\n \t      (match_operand 3 \"nonmemory_operand\" \"ri\")))]\n-  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n+  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode\n+    || (TARGET_64BIT && GET_MODE (operands[0]) == SImode))\n    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\n    && (GET_MODE (operands[0]) == GET_MODE (operands[3])\n@@ -5321,13 +5369,35 @@\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn_and_split \"*lea_general_2_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:SI 2 \"const248_operand\" \"n\"))\n+\t\t   (match_operand:SI 3 \"nonmemory_operand\" \"ri\"))))]\n+  \"TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (subreg:SI (plus:DI (mult:DI (match_dup 1)\n+\t\t\t\t\t\t     (match_dup 2))\n+\t\t\t\t\t    (match_dup 3)) 0)))]\n+  \"\n+{\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[3] = gen_lowpart (Pmode, operands[3]);\n+}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn_and_split \"*lea_general_3\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(plus (plus (mult (match_operand 1 \"register_operand\" \"r\")\n \t\t\t  (match_operand 2 \"const248_operand\" \"i\"))\n \t\t    (match_operand 3 \"register_operand\" \"r\"))\n \t      (match_operand 4 \"immediate_operand\" \"i\")))]\n-  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n+  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode\n+    || (TARGET_64BIT && GET_MODE (operands[0]) == SImode))\n    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\n    && GET_MODE (operands[0]) == GET_MODE (operands[3])\"\n@@ -5354,6 +5424,30 @@\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn_and_split \"*lea_general_3_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t     (match_operand:SI 2 \"const248_operand\" \"n\"))\n+\t\t\t    (match_operand:SI 3 \"register_operand\" \"r\"))\n+\t\t   (match_operand:SI 4 \"immediate_operand\" \"i\"))))]\n+  \"TARGET_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (subreg:SI (plus:DI (plus:DI (mult:DI (match_dup 1)\n+\t\t\t\t\t\t\t      (match_dup 2))\n+\t\t\t\t\t\t     (match_dup 3))\n+\t\t\t\t\t    (match_dup 4)) 0)))]\n+  \"\n+{\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[3] = gen_lowpart (Pmode, operands[3]);\n+  operands[4] = gen_lowpart (Pmode, operands[4]);\n+}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*adddi_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n \t(plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,r\")\n@@ -12835,7 +12929,7 @@\n (define_insn \"*call_1\"\n   [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"rsm\"))\n \t (match_operand 1 \"\" \"\"))]\n-  \"TARGET_64BIT\"\n+  \"!TARGET_64BIT\"\n   \"*\n {\n   if (constant_call_address_operand (operands[0], QImode))\n@@ -12855,7 +12949,7 @@\n (define_insn \"*call_1_rex64\"\n   [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rsm\"))\n \t (match_operand 1 \"\" \"\"))]\n-  \"!TARGET_64BIT\"\n+  \"TARGET_64BIT\"\n   \"*\n {\n   if (constant_call_address_operand (operands[0], QImode))"}]}