{"sha": "e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "node_id": "C_kwDOANBUbNoAKGUyNGZlMTI4M2NhMWM0ZDIyZGMzY2YyOWMyNmQ3YjcwNWZiMGE1Njg", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-02T21:30:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-02T21:30:52Z"}, "message": "analyzer: introduce struct event_loc_info\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.h (struct event_loc_info): New forward decl.\n\t* bounds-checking.cc: Use event_loc_info throughout to bundle the\n\tloc, fndecl, depth triples.\n\t* call-info.cc: Likewise.\n\t* checker-event.cc: Likewise.\n\t* checker-event.h (struct event_loc_info): New decl.  Use it\n\tthroughout to bundle the loc, fndecl, depth triples.\n\t* checker-path.cc: Likewise.\n\t* checker-path.h: Likewise.\n\t* diagnostic-manager.cc: Likewise.\n\t* engine.cc: Likewise.\n\t* infinite-recursion.cc: Likewise.\n\t* pending-diagnostic.cc: Likewise.\n\t* pending-diagnostic.h: Likewise.\n\t* region-model.cc: Likewise.\n\t* sm-signal.cc: Likewise.\n\t* varargs.cc: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "4203e14037ebd059e5033a0f5eaf1592eea4ddc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4203e14037ebd059e5033a0f5eaf1592eea4ddc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5758fe5b430ef3447fbab947fcea32a1d995f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5758fe5b430ef3447fbab947fcea32a1d995f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5758fe5b430ef3447fbab947fcea32a1d995f36"}], "stats": {"total": 408, "additions": 211, "deletions": 197}, "files": [{"sha": "a2d363f12493e6b7be04cc247a5cb69fcaa73fb5", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -92,6 +92,7 @@ class bounded_ranges_manager;\n \n class pending_diagnostic;\n class pending_note;\n+struct event_loc_info;\n class state_change_event;\n class checker_path;\n class extrinsic_state;"}, {"sha": "4b43c43acf5ed36d27d8c9561425cd1140ebbb21", "filename": "gcc/analyzer/bounds-checking.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fbounds-checking.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fbounds-checking.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fbounds-checking.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -68,16 +68,14 @@ class out_of_bounds : public pending_diagnostic\n \n   void add_region_creation_events (const region *,\n \t\t\t\t   tree capacity,\n-\t\t\t\t   location_t loc,\n-\t\t\t\t   tree fndecl, int depth,\n+\t\t\t\t   const event_loc_info &loc_info,\n \t\t\t\t   checker_path &emission_path) override\n   {\n     /* The memory space is described in the diagnostic message itself,\n        so we don't need an event for that.  */\n     if (capacity)\n       emission_path.add_event\n-\t(make_unique<region_creation_event_capacity> (capacity,\n-\t\t\t\t\t\t      loc, fndecl, depth));\n+\t(make_unique<region_creation_event_capacity> (capacity, loc_info));\n   }\n \n protected:\n@@ -165,14 +163,12 @@ class concrete_past_the_end : public concrete_out_of_bounds\n \n   void add_region_creation_events (const region *,\n \t\t\t\t   tree,\n-\t\t\t\t   location_t loc,\n-\t\t\t\t   tree fndecl, int depth,\n+\t\t\t\t   const event_loc_info &loc_info,\n \t\t\t\t   checker_path &emission_path) final override\n   {\n     if (m_byte_bound && TREE_CODE (m_byte_bound) == INTEGER_CST)\n       emission_path.add_event\n-\t(make_unique<region_creation_event_capacity> (m_byte_bound,\n-\t\t\t\t\t\t      loc, fndecl, depth));\n+\t(make_unique<region_creation_event_capacity> (m_byte_bound, loc_info));\n   }\n \n protected:"}, {"sha": "44a66be075ada89734c7c71874cf0ee4d2e1efba", "filename": "gcc/analyzer/call-info.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fcall-info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fcall-info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-info.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -94,10 +94,10 @@ call_info::add_events_to_path (checker_path *emission_path,\n   class call_event : public custom_event\n   {\n   public:\n-    call_event (location_t loc, tree fndecl, int depth,\n+    call_event (const event_loc_info &loc_info,\n \t\tconst call_info *call_info)\n-      : custom_event (loc, fndecl, depth),\n-\tm_call_info (call_info)\n+    : custom_event (loc_info),\n+      m_call_info (call_info)\n     {}\n \n     label_text get_desc (bool can_colorize) const final override\n@@ -114,10 +114,11 @@ call_info::add_events_to_path (checker_path *emission_path,\n   tree caller_fndecl = src_point.get_fndecl ();\n   const int stack_depth = src_point.get_stack_depth ();\n \n-  emission_path->add_event (make_unique<call_event> (get_call_stmt ()->location,\n-\t\t\t\t\t\t     caller_fndecl,\n-\t\t\t\t\t\t     stack_depth,\n-\t\t\t\t\t\t     this));\n+  emission_path->add_event\n+    (make_unique<call_event> (event_loc_info (get_call_stmt ()->location,\n+\t\t\t\t\t      caller_fndecl,\n+\t\t\t\t\t      stack_depth),\n+\t\t\t      this));\n }\n \n /* Recreate a call_details instance from this call_info.  */"}, {"sha": "4985f632f20682be66c74e746dd12edd5e8fd9af", "filename": "gcc/analyzer/checker-event.cc", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fchecker-event.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fchecker-event.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-event.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -151,17 +151,19 @@ class inlining_info\n /* checker_event's ctor.  */\n \n checker_event::checker_event (enum event_kind kind,\n-\t\t\t      location_t loc, tree fndecl, int depth)\n-: m_kind (kind), m_loc (loc),\n-  m_original_fndecl (fndecl), m_effective_fndecl (fndecl),\n-  m_original_depth (depth), m_effective_depth (depth),\n+\t\t\t      const event_loc_info &loc_info)\n+: m_kind (kind), m_loc (loc_info.m_loc),\n+  m_original_fndecl (loc_info.m_fndecl),\n+  m_effective_fndecl (loc_info.m_fndecl),\n+  m_original_depth (loc_info.m_depth),\n+  m_effective_depth (loc_info.m_depth),\n   m_pending_diagnostic (NULL), m_emission_id (),\n-  m_logical_loc (fndecl)\n+  m_logical_loc (loc_info.m_fndecl)\n {\n   /* Update effective fndecl and depth if inlining has been recorded.  */\n   if (flag_analyzer_undo_inlining)\n     {\n-      inlining_info info (loc);\n+      inlining_info info (m_loc);\n       if (info.get_inner_fndecl ())\n \t{\n \t  m_effective_fndecl = info.get_inner_fndecl ();\n@@ -272,7 +274,8 @@ precanned_custom_event::get_desc (bool) const\n \n statement_event::statement_event (const gimple *stmt, tree fndecl, int depth,\n \t\t\t\t  const program_state &dst_state)\n-: checker_event (EK_STMT, gimple_location (stmt), fndecl, depth),\n+: checker_event (EK_STMT,\n+\t\t event_loc_info (gimple_location (stmt), fndecl, depth)),\n   m_stmt (stmt),\n   m_dst_state (dst_state)\n {\n@@ -293,10 +296,8 @@ statement_event::get_desc (bool) const\n \n /* class region_creation_event : public checker_event.  */\n \n-region_creation_event::region_creation_event (location_t loc,\n-\t\t\t\t\t      tree fndecl,\n-\t\t\t\t\t      int depth)\n-: checker_event (EK_REGION_CREATION, loc, fndecl, depth)\n+region_creation_event::region_creation_event (const event_loc_info &loc_info)\n+: checker_event (EK_REGION_CREATION, loc_info)\n {\n }\n \n@@ -370,9 +371,10 @@ region_creation_event_debug::get_desc (bool) const\n \n function_entry_event::function_entry_event (const program_point &dst_point)\n : checker_event (EK_FUNCTION_ENTRY,\n-\t\t dst_point.get_supernode ()->get_start_location (),\n-\t\t dst_point.get_fndecl (),\n-\t\t dst_point.get_stack_depth ())\n+\t\t event_loc_info (dst_point.get_supernode\n+\t\t\t\t   ()->get_start_location (),\n+\t\t\t\t dst_point.get_fndecl (),\n+\t\t\t\t dst_point.get_stack_depth ()))\n {\n }\n \n@@ -410,8 +412,9 @@ state_change_event::state_change_event (const supernode *node,\n \t\t\t\t\tconst svalue *origin,\n \t\t\t\t\tconst program_state &dst_state)\n : checker_event (EK_STATE_CHANGE,\n-\t\t stmt->location, node->m_fun->decl,\n-\t\t stack_depth),\n+\t\t event_loc_info (stmt->location,\n+\t\t\t\t node->m_fun->decl,\n+\t\t\t\t stack_depth)),\n   m_node (node), m_stmt (stmt), m_sm (sm),\n   m_sval (sval), m_from (from), m_to (to),\n   m_origin (origin),\n@@ -578,8 +581,8 @@ superedge_event::should_filter_p (int verbosity) const\n \n superedge_event::superedge_event (enum event_kind kind,\n \t\t\t\t  const exploded_edge &eedge,\n-\t\t\t\t  location_t loc, tree fndecl, int depth)\n-: checker_event (kind, loc, fndecl, depth),\n+\t\t\t\t  const event_loc_info &loc_info)\n+: checker_event (kind, loc_info),\n   m_eedge (eedge), m_sedge (eedge.m_sedge),\n   m_var (NULL_TREE), m_critical_state (0)\n {\n@@ -599,8 +602,8 @@ cfg_edge_event::get_cfg_superedge () const\n \n cfg_edge_event::cfg_edge_event (enum event_kind kind,\n \t\t\t\tconst exploded_edge &eedge,\n-\t\t\t\tlocation_t loc, tree fndecl, int depth)\n-: superedge_event (kind, eedge, loc, fndecl, depth)\n+\t\t\t\tconst event_loc_info &loc_info)\n+: superedge_event (kind, eedge, loc_info)\n {\n   gcc_assert (eedge.m_sedge->m_kind == SUPEREDGE_CFG_EDGE);\n }\n@@ -815,8 +818,8 @@ start_cfg_edge_event::should_print_expr_p (tree expr)\n /* call_event's ctor.  */\n \n call_event::call_event (const exploded_edge &eedge,\n-\t\t\tlocation_t loc, tree fndecl, int depth)\n-: superedge_event (EK_CALL_EDGE, eedge, loc, fndecl, depth)\n+\t\t\tconst event_loc_info &loc_info)\n+: superedge_event (EK_CALL_EDGE, eedge, loc_info)\n {\n   if (eedge.m_sedge)\n     gcc_assert (eedge.m_sedge->m_kind == SUPEREDGE_CALL);\n@@ -894,8 +897,8 @@ call_event::get_callee_fndecl () const\n /* return_event's ctor.  */\n \n return_event::return_event (const exploded_edge &eedge,\n-\t\t\t    location_t loc, tree fndecl, int depth)\n-: superedge_event (EK_RETURN_EDGE, eedge, loc, fndecl, depth)\n+\t\t\t    const event_loc_info &loc_info)\n+: superedge_event (EK_RETURN_EDGE, eedge, loc_info)\n {\n   if (eedge.m_sedge)\n     gcc_assert (eedge.m_sedge->m_kind == SUPEREDGE_RETURN);\n@@ -1045,9 +1048,9 @@ rewind_event::get_setjmp_caller () const\n \n rewind_event::rewind_event (const exploded_edge *eedge,\n \t\t\t    enum event_kind kind,\n-\t\t\t    location_t loc, tree fndecl, int depth,\n+\t\t\t    const event_loc_info &loc_info,\n \t\t\t    const rewind_info_t *rewind_info)\n-: checker_event (kind, loc, fndecl, depth),\n+: checker_event (kind, loc_info),\n   m_rewind_info (rewind_info),\n   m_eedge (eedge)\n {"}, {"sha": "6dac647b8722695f1ef290fe346ead6234db5fbc", "filename": "gcc/analyzer/checker-event.h", "status": "modified", "additions": 60, "deletions": 44, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fchecker-event.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fchecker-event.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-event.h?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -26,6 +26,19 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace ana {\n \n+/* A bundle of location information for a checker_event.  */\n+\n+struct event_loc_info\n+{\n+  event_loc_info (location_t loc, tree fndecl, int depth)\n+  : m_loc (loc), m_fndecl (fndecl), m_depth (depth)\n+  {}\n+\n+  location_t m_loc;\n+  tree m_fndecl;\n+  int m_depth;\n+};\n+\n /* An enum for discriminating between the concrete subclasses of\n    checker_event.  */\n \n@@ -125,7 +138,7 @@ class checker_event : public diagnostic_event\n \n protected:\n   checker_event (enum event_kind kind,\n-\t\t location_t loc, tree fndecl, int depth);\n+\t\t const event_loc_info &loc_info);\n \n  public:\n   const enum event_kind m_kind;\n@@ -146,9 +159,10 @@ class checker_event : public diagnostic_event\n class debug_event : public checker_event\n {\n public:\n-  debug_event (location_t loc, tree fndecl, int depth,\n-\t      const char *desc)\n-  : checker_event (EK_DEBUG, loc, fndecl, depth),\n+\n+  debug_event (const event_loc_info &loc_info,\n+\t       const char *desc)\n+  : checker_event (EK_DEBUG, loc_info),\n     m_desc (xstrdup (desc))\n   {\n   }\n@@ -169,8 +183,8 @@ class debug_event : public checker_event\n class custom_event : public checker_event\n {\n protected:\n-  custom_event (location_t loc, tree fndecl, int depth)\n-  : checker_event (EK_CUSTOM, loc, fndecl, depth)\n+  custom_event (const event_loc_info &loc_info)\n+  : checker_event (EK_CUSTOM, loc_info)\n   {\n   }\n };\n@@ -180,9 +194,9 @@ class custom_event : public checker_event\n class precanned_custom_event : public custom_event\n {\n public:\n-  precanned_custom_event (location_t loc, tree fndecl, int depth,\n+  precanned_custom_event (const event_loc_info &loc_info,\n \t\t\t  const char *desc)\n-  : custom_event (loc, fndecl, depth),\n+  : custom_event (loc_info),\n     m_desc (xstrdup (desc))\n   {\n   }\n@@ -230,7 +244,7 @@ class statement_event : public checker_event\n class region_creation_event : public checker_event\n {\n protected:\n-  region_creation_event (location_t loc, tree fndecl, int depth);\n+  region_creation_event (const event_loc_info &loc_info);\n };\n \n /* Concrete subclass of region_creation_event.\n@@ -241,8 +255,8 @@ class region_creation_event_memory_space : public region_creation_event\n {\n public:\n   region_creation_event_memory_space (enum memory_space mem_space,\n-\t\t\t\t      location_t loc, tree fndecl, int depth)\n-  : region_creation_event (loc, fndecl, depth),\n+\t\t\t\t      const event_loc_info &loc_info)\n+  : region_creation_event (loc_info),\n     m_mem_space (mem_space)\n   {\n   }\n@@ -261,8 +275,8 @@ class region_creation_event_capacity : public region_creation_event\n {\n public:\n   region_creation_event_capacity (tree capacity,\n-\t\t\t\t  location_t loc, tree fndecl, int depth)\n-  : region_creation_event (loc, fndecl, depth),\n+\t\t\t\t  const event_loc_info &loc_info)\n+  : region_creation_event (loc_info),\n     m_capacity (capacity)\n   {\n     gcc_assert (m_capacity);\n@@ -282,8 +296,8 @@ class region_creation_event_allocation_size : public region_creation_event\n {\n public:\n   region_creation_event_allocation_size (tree capacity,\n-\t\t\t\t\t location_t loc, tree fndecl, int depth)\n-  : region_creation_event (loc, fndecl, depth),\n+\t\t\t\t\t const event_loc_info &loc_info)\n+  : region_creation_event (loc_info),\n     m_capacity (capacity)\n   {}\n \n@@ -300,8 +314,8 @@ class region_creation_event_debug : public region_creation_event\n {\n public:\n   region_creation_event_debug (const region *reg, tree capacity,\n-\t\t\t       location_t loc, tree fndecl, int depth)\n-  : region_creation_event (loc, fndecl, depth),\n+\t\t\t       const event_loc_info &loc_info)\n+  : region_creation_event (loc_info),\n     m_reg (reg), m_capacity (capacity)\n   {\n   }\n@@ -318,8 +332,8 @@ class region_creation_event_debug : public region_creation_event\n class function_entry_event : public checker_event\n {\n public:\n-  function_entry_event (location_t loc, tree fndecl, int depth)\n-  : checker_event (EK_FUNCTION_ENTRY, loc, fndecl, depth)\n+  function_entry_event (const event_loc_info &loc_info)\n+  : checker_event (EK_FUNCTION_ENTRY, loc_info)\n   {\n   }\n \n@@ -385,7 +399,7 @@ class superedge_event : public checker_event\n \n  protected:\n   superedge_event (enum event_kind kind, const exploded_edge &eedge,\n-\t\t   location_t loc, tree fndecl, int depth);\n+\t\t   const event_loc_info &loc_info);\n \n  public:\n   const exploded_edge &m_eedge;\n@@ -407,7 +421,7 @@ class cfg_edge_event : public superedge_event\n \n  protected:\n   cfg_edge_event (enum event_kind kind, const exploded_edge &eedge,\n-\t\t  location_t loc, tree fndecl, int depth);\n+\t\t  const event_loc_info &loc_info);\n };\n \n /* A concrete event subclass for the start of a CFG edge\n@@ -417,8 +431,8 @@ class start_cfg_edge_event : public cfg_edge_event\n {\n public:\n   start_cfg_edge_event (const exploded_edge &eedge,\n-\t\t\tlocation_t loc, tree fndecl, int depth)\n-  : cfg_edge_event (EK_START_CFG_EDGE, eedge, loc, fndecl, depth)\n+\t\t\tconst event_loc_info &loc_info)\n+  : cfg_edge_event (EK_START_CFG_EDGE, eedge, loc_info)\n   {\n   }\n \n@@ -441,8 +455,8 @@ class end_cfg_edge_event : public cfg_edge_event\n {\n public:\n   end_cfg_edge_event (const exploded_edge &eedge,\n-\t\t      location_t loc, tree fndecl, int depth)\n-  : cfg_edge_event (EK_END_CFG_EDGE, eedge, loc, fndecl, depth)\n+\t\t      const event_loc_info &loc_info)\n+  : cfg_edge_event (EK_END_CFG_EDGE, eedge, loc_info)\n   {\n   }\n \n@@ -458,7 +472,7 @@ class call_event : public superedge_event\n {\n public:\n   call_event (const exploded_edge &eedge,\n-\t      location_t loc, tree fndecl, int depth);\n+\t      const event_loc_info &loc_info);\n \n   label_text get_desc (bool can_colorize) const override;\n   meaning get_meaning () const override;\n@@ -479,7 +493,7 @@ class return_event : public superedge_event\n {\n public:\n   return_event (const exploded_edge &eedge,\n-\t\tlocation_t loc, tree fndecl, int depth);\n+\t\tconst event_loc_info &loc_info);\n \n   label_text get_desc (bool can_colorize) const final override;\n   meaning get_meaning () const override;\n@@ -496,9 +510,9 @@ class return_event : public superedge_event\n class start_consolidated_cfg_edges_event : public checker_event\n {\n public:\n-  start_consolidated_cfg_edges_event (location_t loc, tree fndecl, int depth,\n+  start_consolidated_cfg_edges_event (const event_loc_info &loc_info,\n \t\t\t\t      bool edge_sense)\n-  : checker_event (EK_START_CONSOLIDATED_CFG_EDGES, loc, fndecl, depth),\n+  : checker_event (EK_START_CONSOLIDATED_CFG_EDGES, loc_info),\n     m_edge_sense (edge_sense)\n   {\n   }\n@@ -516,8 +530,8 @@ class start_consolidated_cfg_edges_event : public checker_event\n class end_consolidated_cfg_edges_event : public checker_event\n {\n public:\n-  end_consolidated_cfg_edges_event (location_t loc, tree fndecl, int depth)\n-  : checker_event (EK_END_CONSOLIDATED_CFG_EDGES, loc, fndecl, depth)\n+  end_consolidated_cfg_edges_event (const event_loc_info &loc_info)\n+  : checker_event (EK_END_CONSOLIDATED_CFG_EDGES, loc_info)\n   {\n   }\n \n@@ -538,9 +552,10 @@ class inlined_call_event : public checker_event\n \t\t      tree apparent_caller_fndecl,\n \t\t      int actual_depth,\n \t\t      int stack_depth_adjustment)\n-  : checker_event (EK_INLINED_CALL, loc,\n-\t\t   apparent_caller_fndecl,\n-\t\t   actual_depth + stack_depth_adjustment),\n+  : checker_event (EK_INLINED_CALL,\n+\t\t   event_loc_info (loc,\n+\t\t\t\t   apparent_caller_fndecl,\n+\t\t\t\t   actual_depth + stack_depth_adjustment)),\n     m_apparent_callee_fndecl (apparent_callee_fndecl),\n     m_apparent_caller_fndecl (apparent_caller_fndecl)\n   {\n@@ -560,9 +575,10 @@ class inlined_call_event : public checker_event\n class setjmp_event : public checker_event\n {\n public:\n-  setjmp_event (location_t loc, const exploded_node *enode,\n-\t\ttree fndecl, int depth, const gcall *setjmp_call)\n-  : checker_event (EK_SETJMP, loc, fndecl, depth),\n+  setjmp_event (const event_loc_info &loc_info,\n+\t\tconst exploded_node *enode,\n+\t\tconst gcall *setjmp_call)\n+  : checker_event (EK_SETJMP, loc_info),\n     m_enode (enode), m_setjmp_call (setjmp_call)\n   {\n   }\n@@ -594,7 +610,7 @@ class rewind_event : public checker_event\n  protected:\n   rewind_event (const exploded_edge *eedge,\n \t\tenum event_kind kind,\n-\t\tlocation_t loc, tree fndecl, int depth,\n+\t\tconst event_loc_info &loc_info,\n \t\tconst rewind_info_t *rewind_info);\n   const rewind_info_t *m_rewind_info;\n \n@@ -609,9 +625,9 @@ class rewind_from_longjmp_event : public rewind_event\n {\n public:\n   rewind_from_longjmp_event (const exploded_edge *eedge,\n-\t\t\t     location_t loc, tree fndecl, int depth,\n+\t\t\t     const event_loc_info &loc_info,\n \t\t\t     const rewind_info_t *rewind_info)\n-  : rewind_event (eedge, EK_REWIND_FROM_LONGJMP, loc, fndecl, depth,\n+  : rewind_event (eedge, EK_REWIND_FROM_LONGJMP, loc_info,\n \t\t  rewind_info)\n   {\n   }\n@@ -626,9 +642,9 @@ class rewind_to_setjmp_event : public rewind_event\n {\n public:\n   rewind_to_setjmp_event (const exploded_edge *eedge,\n-\t\t\t  location_t loc, tree fndecl, int depth,\n+\t\t\t  const event_loc_info &loc_info,\n \t\t\t  const rewind_info_t *rewind_info)\n-  : rewind_event (eedge, EK_REWIND_TO_SETJMP, loc, fndecl, depth,\n+  : rewind_event (eedge, EK_REWIND_TO_SETJMP, loc_info,\n \t\t  rewind_info)\n   {\n   }\n@@ -651,10 +667,10 @@ class rewind_to_setjmp_event : public rewind_event\n class warning_event : public checker_event\n {\n public:\n-  warning_event (location_t loc, tree fndecl, int depth,\n+  warning_event (const event_loc_info &loc_info,\n \t\t const state_machine *sm,\n \t\t tree var, state_machine::state_t state)\n-  : checker_event (EK_WARNING, loc, fndecl, depth),\n+  : checker_event (EK_WARNING, loc_info),\n     m_sm (sm), m_var (var), m_state (state)\n   {\n   }"}, {"sha": "c229e4675e0b0adc7db1698515f382bad38487c8", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -144,20 +144,19 @@ void\n checker_path::add_region_creation_events (pending_diagnostic *pd,\n \t\t\t\t\t  const region *reg,\n \t\t\t\t\t  const region_model *model,\n-\t\t\t\t\t  location_t loc,\n-\t\t\t\t\t  tree fndecl, int depth,\n+\t\t\t\t\t  const event_loc_info &loc_info,\n \t\t\t\t\t  bool debug)\n {\n   tree capacity = NULL_TREE;\n   if (model)\n     if (const svalue *capacity_sval = model->get_capacity (reg))\n       capacity = model->get_representative_tree (capacity_sval);\n \n-  pd->add_region_creation_events (reg, capacity, loc, fndecl, depth, *this);\n+  pd->add_region_creation_events (reg, capacity, loc_info, *this);\n \n   if (debug)\n     add_event (make_unique<region_creation_event_debug> (reg, capacity,\n-\t\t\t\t\t\t\t loc, fndecl, depth));\n+\t\t\t\t\t\t\t loc_info));\n }\n \n void"}, {"sha": "de1f6203b03044bb48ca0170d4f7adb1d23fbc06", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -79,8 +79,7 @@ class checker_path : public diagnostic_path\n   void add_region_creation_events (pending_diagnostic *pd,\n \t\t\t\t   const region *reg,\n \t\t\t\t   const region_model *model,\n-\t\t\t\t   location_t loc,\n-\t\t\t\t   tree fndecl, int depth,\n+\t\t\t\t   const event_loc_info &loc_info,\n \t\t\t\t   bool debug);\n \n   /* After all event-pruning, a hook for notifying each event what"}, {"sha": "9cc02da4691065452e7072922682d546b2ba825b", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 42, "deletions": 43, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -1449,9 +1449,9 @@ diagnostic_manager::build_emission_path (const path_builder &pb,\n \t\t  emission_path->add_region_creation_events\n \t\t    (pb.get_pending_diagnostic (),\n \t\t     reg, NULL,\n-\t\t     DECL_SOURCE_LOCATION (decl),\n-\t\t     NULL_TREE,\n-\t\t     0,\n+\t\t     event_loc_info (DECL_SOURCE_LOCATION (decl),\n+\t\t\t\t     NULL_TREE,\n+\t\t\t\t     0),\n \t\t     m_verbosity > 3);\n \t\t}\n \t  }\n@@ -1518,9 +1518,9 @@ diagnostic_manager::add_event_on_final_node (const path_builder &pb,\n \t\t    (pb.get_pending_diagnostic (),\n \t\t     reg,\n \t\t     dst_model,\n-\t\t     src_point.get_location (),\n-\t\t     src_point.get_fndecl (),\n-\t\t     src_stack_depth,\n+\t\t     event_loc_info (src_point.get_location (),\n+\t\t\t\t     src_point.get_fndecl (),\n+\t\t\t\t     src_stack_depth),\n \t\t     false);\n \t\t  emitted = true;\n \t\t  break;\n@@ -1946,9 +1946,9 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t\t\t    emission_path->add_region_creation_events\n \t\t\t      (pb.get_pending_diagnostic (),\n \t\t\t       reg, dst_state.m_region_model,\n-\t\t\t       DECL_SOURCE_LOCATION (decl),\n-\t\t\t       dst_point.get_fndecl (),\n-\t\t\t       dst_stack_depth,\n+\t\t\t       event_loc_info (DECL_SOURCE_LOCATION (decl),\n+\t\t\t\t\t       dst_point.get_fndecl (),\n+\t\t\t\t\t       dst_stack_depth),\n \t\t\t       m_verbosity > 3);\n \t\t\t  }\n \t\t    }\n@@ -1961,10 +1961,10 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \tconst gcall *call = dyn_cast <const gcall *> (stmt);\n \tif (call && is_setjmp_call_p (call))\n \t  emission_path->add_event\n-\t    (make_unique<setjmp_event> (stmt->location,\n+\t    (make_unique<setjmp_event> (event_loc_info (stmt->location,\n+\t\t\t\t\t\t\tdst_point.get_fndecl (),\n+\t\t\t\t\t\t\tdst_stack_depth),\n \t\t\t\t\tdst_node,\n-\t\t\t\t\tdst_point.get_fndecl (),\n-\t\t\t\t\tdst_stack_depth,\n \t\t\t\t\tcall));\n \telse\n \t  emission_path->add_event\n@@ -2043,9 +2043,9 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t\t    emission_path->add_region_creation_events\n \t\t      (pb.get_pending_diagnostic (),\n \t\t       reg, dst_model,\n-\t\t       src_point.get_location (),\n-\t\t       src_point.get_fndecl (),\n-\t\t       src_stack_depth,\n+\t\t       event_loc_info (src_point.get_location (),\n+\t\t\t\t       src_point.get_fndecl (),\n+\t\t\t\t       src_stack_depth),\n \t\t       m_verbosity > 3);\n \t\t    break;\n \t\t  }\n@@ -2064,9 +2064,9 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n       pb.get_feasibility_problem ()->dump_to_pp (&pp);\n       emission_path->add_event\n \t(make_unique<precanned_custom_event>\n-\t (dst_point.get_location (),\n-\t  dst_point.get_fndecl (),\n-\t  dst_stack_depth,\n+\t (event_loc_info (dst_point.get_location (),\n+\t\t\t  dst_point.get_fndecl (),\n+\t\t\t  dst_stack_depth),\n \t  pp_formatted_text (&pp)));\n     }\n }\n@@ -2178,18 +2178,17 @@ diagnostic_manager::add_events_for_superedge (const path_builder &pb,\n     case SUPEREDGE_CFG_EDGE:\n       {\n \temission_path->add_event\n-\t  (make_unique<start_cfg_edge_event> (eedge,\n-\t\t\t\t\t      (last_stmt\n-\t\t\t\t\t       ? last_stmt->location\n-\t\t\t\t\t       : UNKNOWN_LOCATION),\n-\t\t\t\t\t      src_point.get_fndecl (),\n-\t\t\t\t\t      src_stack_depth));\n+\t  (make_unique<start_cfg_edge_event>\n+\t   (eedge,\n+\t    event_loc_info (last_stmt ? last_stmt->location : UNKNOWN_LOCATION,\n+\t\t\t    src_point.get_fndecl (),\n+\t\t\t    src_stack_depth)));\n \temission_path->add_event\n \t  (make_unique<end_cfg_edge_event>\n \t    (eedge,\n-\t     dst_point.get_supernode ()->get_start_location (),\n-\t     dst_point.get_fndecl (),\n-\t     dst_stack_depth));\n+\t     event_loc_info (dst_point.get_supernode ()->get_start_location (),\n+\t\t\t     dst_point.get_fndecl (),\n+\t\t\t     dst_stack_depth)));\n       }\n       break;\n \n@@ -2202,11 +2201,11 @@ diagnostic_manager::add_events_for_superedge (const path_builder &pb,\n \t/* TODO: add a subclass for this, or generate events for the\n \t   summary.  */\n \temission_path->add_event\n-\t  (make_unique<debug_event> ((last_stmt\n-\t\t\t\t      ? last_stmt->location\n-\t\t\t\t      : UNKNOWN_LOCATION),\n-\t\t\t\t     src_point.get_fndecl (),\n-\t\t\t\t     src_stack_depth,\n+\t  (make_unique<debug_event> (event_loc_info (last_stmt\n+\t\t\t\t\t\t     ? last_stmt->location\n+\t\t\t\t\t\t     : UNKNOWN_LOCATION,\n+\t\t\t\t\t\t     src_point.get_fndecl (),\n+\t\t\t\t\t\t     src_stack_depth),\n \t\t\t\t     \"call summary\"));\n       }\n       break;\n@@ -2219,11 +2218,11 @@ diagnostic_manager::add_events_for_superedge (const path_builder &pb,\n \tconst gcall *call_stmt = return_edge->get_call_stmt ();\n \temission_path->add_event\n \t  (make_unique<return_event> (eedge,\n-\t\t\t\t      (call_stmt\n-\t\t\t\t       ? call_stmt->location\n-\t\t\t\t       : UNKNOWN_LOCATION),\n-\t\t\t\t      dst_point.get_fndecl (),\n-\t\t\t\t      dst_stack_depth));\n+\t\t\t\t      event_loc_info (call_stmt\n+\t\t\t\t\t\t      ? call_stmt->location\n+\t\t\t\t\t\t      : UNKNOWN_LOCATION,\n+\t\t\t\t\t\t      dst_point.get_fndecl (),\n+\t\t\t\t\t\t      dst_stack_depth)));\n       }\n       break;\n     }\n@@ -2765,15 +2764,15 @@ diagnostic_manager::consolidate_conditions (checker_path *path) const\n \t\t   start_idx, next_idx - 1, start_idx, start_idx +1);\n \t      start_consolidated_cfg_edges_event *new_start_ev\n \t\t= new start_consolidated_cfg_edges_event\n-\t\t(old_start_ev->get_location (),\n-\t\t old_start_ev->get_fndecl (),\n-\t\t old_start_ev->get_stack_depth (),\n+\t\t(event_loc_info (old_start_ev->get_location (),\n+\t\t\t\t old_start_ev->get_fndecl (),\n+\t\t\t\t old_start_ev->get_stack_depth ()),\n \t\t edge_sense);\n \t      checker_event *new_end_ev\n \t\t= new end_consolidated_cfg_edges_event\n-\t\t(old_end_ev->get_location (),\n-\t\t old_end_ev->get_fndecl (),\n-\t\t old_end_ev->get_stack_depth ());\n+\t\t(event_loc_info (old_end_ev->get_location (),\n+\t\t\t\t old_end_ev->get_fndecl (),\n+\t\t\t\t old_end_ev->get_stack_depth ()));\n \t      path->replace_event (start_idx, new_start_ev);\n \t      path->replace_event (start_idx + 1, new_end_ev);\n \t      path->delete_events (start_idx + 2, next_idx - (start_idx + 2));"}, {"sha": "b3b81cca8565d3e53393a417658bf995cada5d5b", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -1789,9 +1789,9 @@ class stale_jmp_buf : public pending_diagnostic_subclass<stale_jmp_buf>\n \t/* Compare with diagnostic_manager::add_events_for_superedge.  */\n \tconst int src_stack_depth = src_point.get_stack_depth ();\n \tm_stack_pop_event = new precanned_custom_event\n-\t  (src_point.get_location (),\n-\t   src_point.get_fndecl (),\n-\t   src_stack_depth,\n+\t  (event_loc_info (src_point.get_location (),\n+\t\t\t   src_point.get_fndecl (),\n+\t\t\t   src_stack_depth),\n \t   \"stack frame is popped here, invalidating saved environment\");\n \temission_path->add_event\n \t  (std::unique_ptr<custom_event> (m_stack_pop_event));\n@@ -2045,19 +2045,19 @@ dynamic_call_info_t::add_events_to_path (checker_path *emission_path,\n   if (m_is_returning_call)\n     emission_path->add_event\n       (make_unique<return_event> (eedge,\n-\t\t\t\t  (m_dynamic_call\n-\t\t\t\t   ? m_dynamic_call->location\n-\t\t\t\t   : UNKNOWN_LOCATION),\n-\t\t\t\t  dest_point.get_fndecl (),\n-\t\t\t\t  dest_stack_depth));\n+\t\t\t\t  event_loc_info (m_dynamic_call\n+\t\t\t\t\t\t  ? m_dynamic_call->location\n+\t\t\t\t\t\t  : UNKNOWN_LOCATION,\n+\t\t\t\t\t\t  dest_point.get_fndecl (),\n+\t\t\t\t\t\t  dest_stack_depth)));\n   else\n     emission_path->add_event\n       (make_unique<call_event> (eedge,\n-\t\t\t\t(m_dynamic_call\n-\t\t\t\t ? m_dynamic_call->location\n-\t\t\t\t : UNKNOWN_LOCATION),\n-\t\t\t\tsrc_point.get_fndecl (),\n-\t\t\t\tsrc_stack_depth));\n+\t\t\t\tevent_loc_info (m_dynamic_call\n+\t\t\t\t\t\t? m_dynamic_call->location\n+\t\t\t\t\t\t: UNKNOWN_LOCATION,\n+\t\t\t\t\t\tsrc_point.get_fndecl (),\n+\t\t\t\t\t\tsrc_stack_depth)));\n }\n \n /* class rewind_info_t : public custom_edge_info.  */\n@@ -2103,14 +2103,18 @@ rewind_info_t::add_events_to_path (checker_path *emission_path,\n \n   emission_path->add_event\n     (make_unique<rewind_from_longjmp_event>\n-     (&eedge, get_longjmp_call ()->location,\n-      src_point.get_fndecl (),\n-      src_stack_depth, this));\n+     (&eedge,\n+      event_loc_info (get_longjmp_call ()->location,\n+\t\t      src_point.get_fndecl (),\n+\t\t      src_stack_depth),\n+      this));\n   emission_path->add_event\n     (make_unique<rewind_to_setjmp_event>\n-     (&eedge, get_setjmp_call ()->location,\n-      dst_point.get_fndecl (),\n-      dst_stack_depth, this));\n+     (&eedge,\n+      event_loc_info (get_setjmp_call ()->location,\n+\t\t      dst_point.get_fndecl (),\n+\t\t      dst_stack_depth),\n+      this));\n }\n \n /* class exploded_edge : public dedge<eg_traits>.  */\n@@ -2651,9 +2655,9 @@ mark_params_as_tainted (program_state *state, tree fndecl,\n class tainted_args_function_custom_event : public custom_event\n {\n public:\n-  tainted_args_function_custom_event (location_t loc, tree fndecl, int depth)\n-  : custom_event (loc, fndecl, depth),\n-    m_fndecl (fndecl)\n+  tainted_args_function_custom_event (const event_loc_info &loc_info)\n+  : custom_event (loc_info),\n+    m_fndecl (loc_info.m_fndecl)\n   {\n   }\n \n@@ -2697,7 +2701,7 @@ class tainted_args_function_info : public custom_edge_info\n   {\n     emission_path->add_event\n       (make_unique<tainted_args_function_custom_event>\n-       (DECL_SOURCE_LOCATION (m_fndecl), m_fndecl, 0));\n+       (event_loc_info (DECL_SOURCE_LOCATION (m_fndecl), m_fndecl, 0)));\n   }\n \n private:\n@@ -3069,7 +3073,7 @@ class tainted_args_field_custom_event : public custom_event\n {\n public:\n   tainted_args_field_custom_event (tree field)\n-  : custom_event (DECL_SOURCE_LOCATION (field), NULL_TREE, 0),\n+  : custom_event (event_loc_info (DECL_SOURCE_LOCATION (field), NULL_TREE, 0)),\n     m_field (field)\n   {\n   }\n@@ -3093,9 +3097,9 @@ class tainted_args_field_custom_event : public custom_event\n class tainted_args_callback_custom_event : public custom_event\n {\n public:\n-  tainted_args_callback_custom_event (location_t loc, tree fndecl, int depth,\n-\t\t\t\t tree field)\n-  : custom_event (loc, fndecl, depth),\n+  tainted_args_callback_custom_event (const event_loc_info &loc_info,\n+\t\t\t\t      tree field)\n+  : custom_event (loc_info),\n     m_field (field)\n   {\n   }\n@@ -3148,8 +3152,9 @@ class tainted_args_call_info : public custom_edge_info\n        \"(2) function 'gadget_dev_desc_UDC_store' used as initializer\n        for field 'store' marked with '__attribute__((tainted_args))'\".  */\n     emission_path->add_event\n-      (make_unique<tainted_args_callback_custom_event> (m_loc, m_fndecl,\n-\t\t\t\t\t\t\t0, m_field));\n+      (make_unique<tainted_args_callback_custom_event>\n+       (event_loc_info (m_loc, m_fndecl, 0),\n+\tm_field));\n   }\n \n private:"}, {"sha": "1a17d31fa7b33620d84f450f1d0bf6cab0928828", "filename": "gcc/analyzer/infinite-recursion.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Finfinite-recursion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Finfinite-recursion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Finfinite-recursion.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -191,9 +191,10 @@ class infinite_recursion_diagnostic\n     gcc_assert (m_new_entry_enode);\n     emission_path->add_event\n       (make_unique<warning_event>\n-       (m_new_entry_enode->get_supernode ()->get_start_location (),\n-\tm_callee_fndecl,\n-\tm_new_entry_enode->get_stack_depth (),\n+       (event_loc_info (m_new_entry_enode->get_supernode\n+\t\t\t  ()->get_start_location (),\n+\t\t\tm_callee_fndecl,\n+\t\t\tm_new_entry_enode->get_stack_depth ()),\n \tNULL, NULL, NULL));\n   }\n "}, {"sha": "5ff32c09511dceeea03c1bc79fb572f4d06c7f61", "filename": "gcc/analyzer/pending-diagnostic.cc", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -192,11 +192,11 @@ pending_diagnostic::add_call_event (const exploded_edge &eedge,\n   const gimple *last_stmt = src_point.get_supernode ()->get_last_stmt ();\n   emission_path->add_event\n     (make_unique<call_event> (eedge,\n-\t\t\t      (last_stmt\n-\t\t\t       ? last_stmt->location\n-\t\t\t       : UNKNOWN_LOCATION),\n-\t\t\t      src_point.get_fndecl (),\n-\t\t\t      src_stack_depth));\n+\t\t\t      event_loc_info (last_stmt\n+\t\t\t\t\t      ? last_stmt->location\n+\t\t\t\t\t      : UNKNOWN_LOCATION,\n+\t\t\t\t\t      src_point.get_fndecl (),\n+\t\t\t\t\t      src_stack_depth)));\n }\n \n /* Base implementation of pending_diagnostic::add_region_creation_events.\n@@ -205,18 +205,16 @@ pending_diagnostic::add_call_event (const exploded_edge &eedge,\n void\n pending_diagnostic::add_region_creation_events (const region *reg,\n \t\t\t\t\t\ttree capacity,\n-\t\t\t\t\t\tlocation_t loc,\n-\t\t\t\t\t\ttree fndecl, int depth,\n+\t\t\t\t\t\tconst event_loc_info &loc_info,\n \t\t\t\t\t\tchecker_path &emission_path)\n {\n   emission_path.add_event\n     (make_unique<region_creation_event_memory_space> (reg->get_memory_space (),\n-\t\t\t\t\t\t      loc, fndecl, depth));\n+\t\t\t\t\t\t      loc_info));\n \n   if (capacity)\n     emission_path.add_event\n-      (make_unique<region_creation_event_capacity> (capacity,\n-\t\t\t\t\t\t    loc, fndecl, depth));\n+      (make_unique<region_creation_event_capacity> (capacity, loc_info));\n }\n \n /* Base implementation of pending_diagnostic::add_final_event.\n@@ -230,11 +228,11 @@ pending_diagnostic::add_final_event (const state_machine *sm,\n \t\t\t\t     checker_path *emission_path)\n {\n   emission_path->add_event\n-    (make_unique<warning_event> (get_stmt_location (stmt,\n-\t\t\t\t\t\t    enode->get_function ()),\n-\t\t\t\t enode->get_function ()->decl,\n-\t\t\t\t enode->get_stack_depth (),\n-\t\t\t\t sm, var, state));\n+    (make_unique<warning_event>\n+     (event_loc_info (get_stmt_location (stmt, enode->get_function ()),\n+\t\t      enode->get_function ()->decl,\n+\t\t      enode->get_stack_depth ()),\n+      sm, var, state));\n }\n \n } // namespace ana"}, {"sha": "be446a4ac0296ba3a92d801c55c281e3caa9d4b3", "filename": "gcc/analyzer/pending-diagnostic.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fpending-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fpending-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.h?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -315,8 +315,7 @@ class pending_diagnostic\n      See the comment for class region_creation_event.  */\n   virtual void add_region_creation_events (const region *reg,\n \t\t\t\t\t   tree capacity,\n-\t\t\t\t\t   location_t loc,\n-\t\t\t\t\t   tree fndecl, int depth,\n+\t\t\t\t\t   const event_loc_info &loc_info,\n \t\t\t\t\t   checker_path &emission_path);\n \n   /* Vfunc for adding the final warning_event to a checker_path, so that e.g."}, {"sha": "d00f15f468f4165f5458259f894e6d096d0a8bee", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -2849,13 +2849,11 @@ class dubious_allocation_size\n   void\n   add_region_creation_events (const region *,\n \t\t\t      tree capacity,\n-\t\t\t      location_t loc,\n-\t\t\t      tree fndecl, int depth,\n+\t\t\t      const event_loc_info &loc_info,\n \t\t\t      checker_path &emission_path) final override\n   {\n     emission_path.add_event\n-      (make_unique<region_creation_event_allocation_size> (capacity,\n-\t\t\t\t\t\t\t   loc, fndecl, depth));\n+      (make_unique<region_creation_event_allocation_size> (capacity, loc_info));\n \n     m_has_allocation_event = true;\n   }"}, {"sha": "38db6c0228aafa813f3da62e3dcca2a3b9f96ff9", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -235,7 +235,7 @@ class signal_delivery_edge_info_t : public custom_edge_info\n   {\n     emission_path->add_event\n       (make_unique<precanned_custom_event>\n-       (UNKNOWN_LOCATION, NULL_TREE, 0,\n+       (event_loc_info (UNKNOWN_LOCATION, NULL_TREE, 0),\n \t\"later on,\"\n \t\" when the signal is delivered to the process\"));\n   }"}, {"sha": "519b32d693a1540ea9bccce2422812366d1569bd", "filename": "gcc/analyzer/varargs.cc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fvarargs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568/gcc%2Fanalyzer%2Fvarargs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fvarargs.cc?ref=e24fe1283ca1c4d22dc3cf29c26d7b705fb0a568", "patch": "@@ -777,9 +777,9 @@ class va_arg_diagnostic : public pending_diagnostic\n     {\n     public:\n       va_arg_call_event (const exploded_edge &eedge,\n-\t\t\t location_t loc, tree fndecl, int depth,\n+\t\t\t const event_loc_info &loc_info,\n \t\t\t int num_variadic_arguments)\n-      : call_event (eedge, loc, fndecl, depth),\n+      : call_event (eedge, loc_info),\n \tm_num_variadic_arguments (num_variadic_arguments)\n       {\n       }\n@@ -812,13 +812,12 @@ class va_arg_diagnostic : public pending_diagnostic\n \t  = get_num_variadic_arguments (dst_node->get_function ()->decl,\n \t\t\t\t\tcall_stmt);\n \temission_path->add_event\n-\t  (make_unique<va_arg_call_event> (eedge,\n-\t\t\t\t\t   (last_stmt\n-\t\t\t\t\t    ? last_stmt->location\n-\t\t\t\t\t    : UNKNOWN_LOCATION),\n-\t\t\t\t\t   src_point.get_fndecl (),\n-\t\t\t\t\t   src_stack_depth,\n-\t\t\t\t\t   num_variadic_arguments));\n+\t  (make_unique<va_arg_call_event>\n+\t   (eedge,\n+\t    event_loc_info (last_stmt ? last_stmt->location : UNKNOWN_LOCATION,\n+\t\t\t    src_point.get_fndecl (),\n+\t\t\t    src_stack_depth),\n+\t    num_variadic_arguments));\n       }\n     else\n       pending_diagnostic::add_call_event (eedge, emission_path);"}]}