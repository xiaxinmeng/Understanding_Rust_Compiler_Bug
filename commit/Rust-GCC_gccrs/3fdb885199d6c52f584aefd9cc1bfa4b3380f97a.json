{"sha": "3fdb885199d6c52f584aefd9cc1bfa4b3380f97a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkYjg4NTE5OWQ2YzUyZjU4NGFlZmQ5Y2MxYmZhNGIzMzgwZjk3YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-09-24T15:13:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-09-24T15:13:19Z"}, "message": "decl.c (compute_array_index_type): Remember type dependence of array bound.\n\n\t* decl.c (compute_array_index_type): Remember type dependence of\n\tarray bound.\n\t* pt.c (dependent_type_p_r): Don't recompute it here.\n\nFrom-SVN: r164598", "tree": {"sha": "2dc41e4ee8c7c9d6492e47eca15c1e8531b3a9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dc41e4ee8c7c9d6492e47eca15c1e8531b3a9f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75d980abcc4dbd2bcb3d06c3f12ef9312ccac856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d980abcc4dbd2bcb3d06c3f12ef9312ccac856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d980abcc4dbd2bcb3d06c3f12ef9312ccac856"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "0e2d2fb2326f0b62f5b4f3b09fe62f2a36dae158", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3fdb885199d6c52f584aefd9cc1bfa4b3380f97a", "patch": "@@ -1,5 +1,9 @@\n 2010-09-24  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (compute_array_index_type): Remember type dependence of\n+\tarray bound.\n+\t* pt.c (dependent_type_p_r): Don't recompute it here.\n+\n \t* error.c (dump_expr) [CASE_CONVERT]: Print conversion between\n \treference and pointer to the same type as \"*\" or \"&\".\n "}, {"sha": "6a444822c167503d026565b8c70a74d8de5ea7b6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3fdb885199d6c52f584aefd9cc1bfa4b3380f97a", "patch": "@@ -7402,11 +7402,15 @@ compute_array_index_type (tree name, tree size)\n       type = TREE_TYPE (size);\n     }\n \n+  /* A type is dependent if it is...an array type constructed from any\n+     dependent type or whose size is specified by a constant expression\n+     that is value-dependent.  */\n   /* We can only call value_dependent_expression_p on integral constant\n      expressions; the parser adds a dummy NOP_EXPR with TREE_SIDE_EFFECTS\n      set if this isn't one.  */\n   if (processing_template_decl\n-      && (TREE_SIDE_EFFECTS (size) || value_dependent_expression_p (size)))\n+      && (dependent_type_p (type)\n+\t  || TREE_SIDE_EFFECTS (size) || value_dependent_expression_p (size)))\n     {\n       /* We cannot do any checking for a SIZE that isn't known to be\n \t constant. Just build the index type and mark that it requires\n@@ -7532,10 +7536,16 @@ compute_array_index_type (tree name, tree size)\n     {\n       tree t = build_index_type (itype);\n       TYPE_CANONICAL (abi_1_itype) = TYPE_CANONICAL (t);\n-      return abi_1_itype;\n+      itype = abi_1_itype;\n     }\n   else\n-    return build_index_type (itype);\n+    itype = build_index_type (itype);\n+\n+  /* If the index type were dependent, we would have returned early, so\n+     remember that it isn't.  */\n+  TYPE_DEPENDENT_P (itype) = 0;\n+  TYPE_DEPENDENT_P_VALID (itype) = 1;\n+  return itype;\n }\n \n /* Returns the scope (if any) in which the entity declared by"}, {"sha": "f5e09ee175720148366c2bde8c55f8d639da75cf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fdb885199d6c52f584aefd9cc1bfa4b3380f97a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3fdb885199d6c52f584aefd9cc1bfa4b3380f97a", "patch": "@@ -17479,22 +17479,17 @@ dependent_type_p_r (tree type)\n     }\n   /* -- an array type constructed from any dependent type or whose\n \tsize is specified by a constant expression that is\n-\tvalue-dependent.  */\n+\tvalue-dependent.\n+\n+        We checked for type- and value-dependence of the bounds in\n+        compute_array_index_type, so TYPE_DEPENDENT_P is already set.  */\n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n       if (TYPE_DOMAIN (type)\n \t  && dependent_type_p (TYPE_DOMAIN (type)))\n \treturn true;\n       return dependent_type_p (TREE_TYPE (type));\n     }\n-  else if (TREE_CODE (type) == INTEGER_TYPE\n-\t   && !TREE_CONSTANT (TYPE_MAX_VALUE (type)))\n-    {\n-      /* If this is the TYPE_DOMAIN of an array type, consider it\n-\t dependent.  We already checked for value-dependence in\n-\t compute_array_index_type.  */\n-      return type_dependent_expression_p (TYPE_MAX_VALUE (type));\n-    }\n \n   /* -- a template-id in which either the template name is a template\n      parameter ...  */"}]}