{"sha": "8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjNTQ0OGYzOWNjZDI2YjZmMDZjZDcxMjBmMDljMjI1NGJhYzNiZQ==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-09-20T23:29:05Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-09-20T23:29:05Z"}, "message": "Add IPA VRP\n\ngcc/lto/ChangeLog:\n2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* lto-partition.c: Include tree-vrp.h.\n\t* lto.c: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* g++.dg/ipa/pure-const-3.C: Add -fno-ipa-vrp. Else constant arguments\n\twill be optimized away.\n\t* gcc.dg/ipa/vrp1.c: New test.\n\t* gcc.dg/ipa/vrp2.c: New test.\n\t* gcc.dg/ipa/vrp3.c: New test.\n\ngcc/ChangeLog:\n\n2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* common.opt: New option -fipa-vrp.\n\t* ipa-cp.c (ipa_get_vr_lat): New.\n\t(ipcp_vr_lattice::print): Likewise.\n\t(print_all_lattices): Call ipcp_vr_lattice::print.\n\t(ipcp_vr_lattice::meet_with): New.\n\t(ipcp_vr_lattice::meet_with_1): Likewise.\n\t(ipcp_vr_lattice::top_p): Likewise.\n\t(ipcp_vr_lattice::bottom_p): Likewsie.\n\t(ipcp_vr_lattice::set_to_bottom): Likewise.\n\t(set_all_contains_variable): Call VR set_to_bottom.\n\t(initialize_node_lattices): Init VR lattices.\n\t(propagate_vr_accross_jump_function): New.\n\t(propagate_constants_accross_call): Call\n\tpropagate_vr_accross_jump_function.\n\t(ipcp_store_vr_results): New.\n\t(ipcp_driver): Handle VR.\n\t* ipa-prop.c (ipa_print_node_jump_functions_for_edge): Handle VR.\n\t(ipa_set_jf_unknown): Likewise.\n\t(ipa_compute_jump_functions_for_edge): Likewise.\n\t(ipa_node_params_t::duplicate): Likewise.\n\t(ipa_write_jump_function): Likewise.\n\t(ipa_read_jump_function): Likewise.\n\t(write_ipcp_transformation_info): Likewise.\n\t(read_ipcp_transformation_info): Likewise.\n\t(ipcp_update_vr): New.\n\t(ipcp_transform_function): Handle VR.\n\t* ipa-prop.h (struct ipa_vr): New.\n\t* cgraph.c: Include tree-vrp.h.\n\t* cgraphunit.c: Likewise.\n\t* ipa-utils.c: Likewise.\n\t* ipa.c: Likewise.\n\nFrom-SVN: r240292", "tree": {"sha": "71da5cb07e19989dcd3b452b5350042041af16d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71da5cb07e19989dcd3b452b5350042041af16d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/comments", "author": null, "committer": null, "parents": [{"sha": "973625a04b3d9351f2485e37f7d3382af2aed87e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973625a04b3d9351f2485e37f7d3382af2aed87e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973625a04b3d9351f2485e37f7d3382af2aed87e"}], "stats": {"total": 606, "additions": 599, "deletions": 7}, "files": [{"sha": "a3118fc504291a1594cd9f147f8511b2b92afa13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -1,3 +1,43 @@\n+2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* common.opt: New option -fipa-vrp.\n+\t* ipa-cp.c (ipa_get_vr_lat): New.\n+\t(ipcp_vr_lattice::print): Likewise.\n+\t(print_all_lattices): Call ipcp_vr_lattice::print.\n+\t(ipcp_vr_lattice::meet_with): New.\n+\t(ipcp_vr_lattice::meet_with_1): Likewise.\n+\t(ipcp_vr_lattice::top_p): Likewise.\n+\t(ipcp_vr_lattice::bottom_p): Likewsie.\n+\t(ipcp_vr_lattice::set_to_bottom): Likewise.\n+\t(set_all_contains_variable): Call VR set_to_bottom.\n+\t(initialize_node_lattices): Init VR lattices.\n+\t(propagate_vr_accross_jump_function): New.\n+\t(propagate_constants_accross_call): Call\n+\tpropagate_vr_accross_jump_function.\n+\t(ipcp_store_vr_results): New.\n+\t(ipcp_driver): Handle VR.\n+\t* ipa-prop.c (ipa_print_node_jump_functions_for_edge): Handle VR.\n+\t(ipa_set_jf_unknown): Likewise.\n+\t(ipa_compute_jump_functions_for_edge): Likewise.\n+\t(ipa_node_params_t::duplicate): Likewise.\n+\t(ipa_write_jump_function): Likewise.\n+\t(ipa_read_jump_function): Likewise.\n+\t(write_ipcp_transformation_info): Likewise.\n+\t(read_ipcp_transformation_info): Likewise.\n+\t(ipcp_update_vr): New.\n+\t(ipcp_transform_function): Handle VR.\n+\t* ipa-prop.h (struct ipa_vr): New.\n+\t* cgraph.c: Include tree-vrp.h.\n+\t* cgraphunit.c: Likewise.\n+\t* ipa-utils.c: Likewise.\n+\t* ipa.c: Likewise.\n+\t* opts.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* ipa-devirt.c: Likewise.\n+\t* ipa-inline-transform.c: Likewise.\n+\t* ipa-inline.c: Likewise.\n+\t* ipa-profile.c: Likewise.\n+\n 2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* doc/invoke.texi: Document -fdump-tree-evrp."}, {"sha": "b702a7cd5eaa7b3e761b93eab314154679c9b679", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"ipa-utils.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"cfgloop.h\""}, {"sha": "4141badd2f539cdc3acce8d49228ca89145fd899", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -190,6 +190,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"debug.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"gimple-pretty-print.h\"\n #include \"plugin.h\""}, {"sha": "8c0885c57f76683afb4bd7ccaae43e4e98657922", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -1605,6 +1605,10 @@ fipa-struct-reorg\n Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n+fipa-vrp\n+Common Report Var(flag_ipa_vrp) Optimization\n+Perform IPA Value Range Propagation.\n+\n fira-algorithm=\n Common Joined RejectNegative Enum(ira_algorithm) Var(flag_ira_algorithm) Init(IRA_ALGORITHM_CB) Optimization\n -fira-algorithm=[CB|priority] Set the used IRA algorithm."}, {"sha": "cb60f1e36f6079391d213cd3d4cc4ac2504543d1", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -114,6 +114,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"fold-const.h\"\n #include \"gimple-fold.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"tree-pretty-print.h\"\n #include \"tree-inline.h\"\n@@ -321,6 +322,25 @@ class ipcp_bits_lattice\n   void get_value_and_mask (tree, widest_int *, widest_int *);\n }; \n \n+/* Lattice of value ranges.  */\n+\n+class ipcp_vr_lattice\n+{\n+public:\n+  value_range m_vr;\n+\n+  inline bool bottom_p () const;\n+  inline bool top_p () const;\n+  inline bool set_to_bottom ();\n+  bool meet_with (const value_range *p_vr);\n+  bool meet_with (const ipcp_vr_lattice &other);\n+  void init () { m_vr.type = VR_UNDEFINED; }\n+  void print (FILE * f);\n+\n+private:\n+  bool meet_with_1 (const value_range *other_vr);\n+};\n+\n /* Structure containing lattices for a parameter itself and for pieces of\n    aggregates that are passed in the parameter or by a reference in a parameter\n    plus some other useful flags.  */\n@@ -338,6 +358,8 @@ class ipcp_param_lattices\n   ipcp_alignment_lattice alignment;\n   /* Lattice describing known bits.  */\n   ipcp_bits_lattice bits_lattice;\n+  /* Lattice describing value range.  */\n+  ipcp_vr_lattice m_value_range;\n   /* Number of aggregate lattices */\n   int aggs_count;\n   /* True if aggregate data were passed by reference (as opposed to by\n@@ -405,6 +427,16 @@ ipa_get_poly_ctx_lat (struct ipa_node_params *info, int i)\n   return &plats->ctxlat;\n }\n \n+/* Return the lattice corresponding to the value range of the Ith formal\n+   parameter of the function described by INFO.  */\n+\n+static inline ipcp_vr_lattice *\n+ipa_get_vr_lat (struct ipa_node_params *info, int i)\n+{\n+  struct ipcp_param_lattices *plats = ipa_get_parm_lattices (info, i);\n+  return &plats->m_value_range;\n+}\n+\n /* Return whether LAT is a lattice with a single constant and without an\n    undefined value.  */\n \n@@ -530,6 +562,14 @@ ipcp_bits_lattice::print (FILE *f)\n     }\n }\n \n+/* Print value range lattice to F.  */\n+\n+void\n+ipcp_vr_lattice::print (FILE * f)\n+{\n+  dump_value_range (f, &m_vr);\n+}\n+\n /* Print all ipcp_lattices of all functions to F.  */\n \n static void\n@@ -557,6 +597,9 @@ print_all_lattices (FILE * f, bool dump_sources, bool dump_benefits)\n \t  plats->ctxlat.print (f, dump_sources, dump_benefits);\n \t  plats->alignment.print (f);\n \t  plats->bits_lattice.print (f);\n+\t  fprintf (f, \"         \");\n+\t  plats->m_value_range.print (f);\n+\t  fprintf (f, \"\\n\");\n \t  if (plats->virt_call)\n \t    fprintf (f, \"        virt_call flag set\\n\");\n \n@@ -908,6 +951,77 @@ ipcp_alignment_lattice::set_to_bottom ()\n   return true;\n }\n \n+/* Meet the current value of the lattice with described by OTHER\n+   lattice.  */\n+\n+bool\n+ipcp_vr_lattice::meet_with (const ipcp_vr_lattice &other)\n+{\n+  return meet_with_1 (&other.m_vr);\n+}\n+\n+/* Meet the current value of the lattice with value ranfge described by VR\n+   lattice.  */\n+\n+bool\n+ipcp_vr_lattice::meet_with (const value_range *p_vr)\n+{\n+  return meet_with_1 (p_vr);\n+}\n+\n+/* Meet the current value of the lattice with value ranfge described by\n+   OTHER_VR lattice.  */\n+\n+bool\n+ipcp_vr_lattice::meet_with_1 (const value_range *other_vr)\n+{\n+  tree min = m_vr.min, max = m_vr.max;\n+  value_range_type type = m_vr.type;\n+\n+  if (bottom_p ())\n+    return false;\n+\n+  if (other_vr->type == VR_VARYING)\n+    return set_to_bottom ();\n+\n+  vrp_meet (&m_vr, other_vr);\n+  if (type != m_vr.type\n+      || min != m_vr.min\n+      || max != m_vr.max)\n+    return true;\n+  else\n+    return false;\n+}\n+\n+/* Return true if value range information in the lattice is yet unknown.  */\n+\n+bool\n+ipcp_vr_lattice::top_p () const\n+{\n+  return m_vr.type == VR_UNDEFINED;\n+}\n+\n+/* Return true if value range information in the lattice is known to be\n+   unusable.  */\n+\n+bool\n+ipcp_vr_lattice::bottom_p () const\n+{\n+  return m_vr.type == VR_VARYING;\n+}\n+\n+/* Set value range information in the lattice to bottom.  Return true if it\n+   previously was in a different state.  */\n+\n+bool\n+ipcp_vr_lattice::set_to_bottom ()\n+{\n+  if (m_vr.type == VR_VARYING)\n+    return false;\n+  m_vr.type = VR_VARYING;\n+  return true;\n+}\n+\n /* Meet the current value of the lattice with alignment described by NEW_ALIGN\n    and NEW_MISALIGN, assuming that we know the current value is neither TOP nor\n    BOTTOM.  Return true if the value of lattice has changed.  */\n@@ -1141,6 +1255,7 @@ set_all_contains_variable (struct ipcp_param_lattices *plats)\n   ret |= set_agg_lats_contain_variable (plats);\n   ret |= plats->alignment.set_to_bottom ();\n   ret |= plats->bits_lattice.set_to_bottom ();\n+  ret |= plats->m_value_range.set_to_bottom ();\n   return ret;\n }\n \n@@ -1211,6 +1326,12 @@ initialize_node_lattices (struct cgraph_node *node)\n \tdisable = true;\n     }\n \n+  for (i = 0; i < ipa_get_param_count (info) ; i++)\n+    {\n+      struct ipcp_param_lattices *plats = ipa_get_parm_lattices (info, i);\n+      plats->m_value_range.init ();\n+    }\n+\n   if (disable || variable)\n     {\n       for (i = 0; i < ipa_get_param_count (info) ; i++)\n@@ -1223,6 +1344,7 @@ initialize_node_lattices (struct cgraph_node *node)\n \t      set_agg_lats_to_bottom (plats);\n \t      plats->alignment.set_to_bottom ();\n \t      plats->bits_lattice.set_to_bottom ();\n+\t      plats->m_value_range.set_to_bottom ();\n \t    }\n \t  else\n \t    set_all_contains_variable (plats);\n@@ -1913,6 +2035,50 @@ propagate_bits_accross_jump_function (cgraph_edge *cs, int idx, ipa_jump_func *j\n     return dest_lattice->set_to_bottom ();\n }\n \n+/* Propagate value range across jump function JFUNC that is associated with\n+   edge CS and update DEST_PLATS accordingly.  */\n+\n+static bool\n+propagate_vr_accross_jump_function (cgraph_edge *cs,\n+\t\t\t\t    ipa_jump_func *jfunc,\n+\t\t\t\t    struct ipcp_param_lattices *dest_plats)\n+{\n+  struct ipcp_param_lattices *src_lats;\n+  ipcp_vr_lattice *dest_lat = &dest_plats->m_value_range;\n+\n+  if (dest_lat->bottom_p ())\n+    return false;\n+\n+  if (jfunc->type == IPA_JF_PASS_THROUGH)\n+    {\n+      struct ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n+      if (dest_lat->bottom_p ())\n+\treturn false;\n+      int src_idx = ipa_get_jf_pass_through_formal_id (jfunc);\n+      src_lats = ipa_get_parm_lattices (caller_info, src_idx);\n+\n+      if (ipa_get_jf_pass_through_operation (jfunc) == NOP_EXPR)\n+\treturn dest_lat->meet_with (src_lats->m_value_range);\n+    }\n+  else if (jfunc->type == IPA_JF_CONST)\n+    {\n+      tree val = ipa_get_jf_constant (jfunc);\n+      if (TREE_CODE (val) == INTEGER_CST)\n+\t{\n+\t  jfunc->vr_known = true;\n+\t  jfunc->m_vr.type = VR_RANGE;\n+\t  jfunc->m_vr.min = val;\n+\t  jfunc->m_vr.max = val;\n+\t  return dest_lat->meet_with (&jfunc->m_vr);\n+\t}\n+    }\n+\n+  if (jfunc->vr_known)\n+    return dest_lat->meet_with (&jfunc->m_vr);\n+  else\n+    return dest_lat->set_to_bottom ();\n+}\n+\n /* If DEST_PLATS already has aggregate items, check that aggs_by_ref matches\n    NEW_AGGS_BY_REF and if not, mark all aggs as bottoms and return true (in all\n    other cases, return false).  If there are no aggregate items, set\n@@ -2264,6 +2430,11 @@ propagate_constants_accross_call (struct cgraph_edge *cs)\n \t\t\t\t\t\t       &dest_plats->bits_lattice);\n \t  ret |= propagate_aggs_accross_jump_function (cs, jump_func,\n \t\t\t\t\t\t       dest_plats);\n+\t  if (opt_for_fn (callee->decl, flag_ipa_vrp))\n+\t    ret |= propagate_vr_accross_jump_function (cs,\n+\t\t\t\t\t\t       jump_func, dest_plats);\n+\t  else\n+\t    ret |= dest_plats->m_value_range.set_to_bottom ();\n \t}\n     }\n   for (; i < parms_count; i++)\n@@ -4974,6 +5145,76 @@ ipcp_store_bits_results (void)\n       }\n     }\n }\n+\n+/* Look up all VR information that we have discovered and copy it over\n+   to the transformation summary.  */\n+\n+static void\n+ipcp_store_vr_results (void)\n+{\n+  cgraph_node *node;\n+\n+  FOR_EACH_FUNCTION_WITH_GIMPLE_BODY (node)\n+  {\n+    ipa_node_params *info = IPA_NODE_REF (node);\n+    bool found_useful_result = false;\n+\n+    if (!opt_for_fn (node->decl, flag_ipa_vrp))\n+      {\n+\tif (dump_file)\n+\t  fprintf (dump_file, \"Not considering %s for VR discovery \"\n+\t\t   \"and propagate; -fipa-ipa-vrp: disabled.\\n\",\n+\t\t   node->name ());\n+\tcontinue;\n+      }\n+\n+   if (info->ipcp_orig_node)\n+      info = IPA_NODE_REF (info->ipcp_orig_node);\n+\n+   unsigned count = ipa_get_param_count (info);\n+   for (unsigned i = 0; i < count ; i++)\n+     {\n+       ipcp_param_lattices *plats = ipa_get_parm_lattices (info, i);\n+       if (!plats->m_value_range.bottom_p ()\n+\t   && !plats->m_value_range.top_p ())\n+\t {\n+\t   found_useful_result = true;\n+\t   break;\n+\t }\n+     }\n+   if (!found_useful_result)\n+     continue;\n+\n+   ipcp_grow_transformations_if_necessary ();\n+   ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+   vec_safe_reserve_exact (ts->m_vr, count);\n+\n+   for (unsigned i = 0; i < count ; i++)\n+     {\n+       ipcp_param_lattices *plats = ipa_get_parm_lattices (info, i);\n+       ipa_vr vr;\n+\n+       if (!plats->m_value_range.bottom_p ()\n+\t   && !plats->m_value_range.top_p ())\n+\t {\n+\t   vr.known = true;\n+\t   vr.type = plats->m_value_range.m_vr.type;\n+\t   vr.min = plats->m_value_range.m_vr.min;\n+\t   vr.max = plats->m_value_range.m_vr.max;\n+\t }\n+       else\n+\t {\n+\t   static wide_int zero = integer_zero_node;\n+\t   vr.known = false;\n+\t   vr.type = VR_VARYING;\n+\t   vr.min = zero;\n+\t   vr.max = zero;\n+\t }\n+       ts->m_vr->quick_push (vr);\n+     }\n+  }\n+}\n+\n /* The IPCP driver.  */\n \n static unsigned int\n@@ -5009,6 +5250,8 @@ ipcp_driver (void)\n   ipcp_store_alignment_results ();\n   /* Store results of bits propagation.  */\n   ipcp_store_bits_results ();\n+  /* Store results of value range propagation.  */\n+  ipcp_store_vr_results ();\n \n   /* Free all IPCP structures.  */\n   free_toporder_info (&topo);"}, {"sha": "48abbeb5d61a369d1bb5160b2e9908ff117e968d", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -122,6 +122,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"gimple-fold.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"demangle.h\""}, {"sha": "efe7421f31d69a909cb96fa5e9f5eff996eb3eac", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-cfg.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\""}, {"sha": "82bb94fa1aa230c69c210d5c5f3c24fcdbad020d", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -108,6 +108,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"profile.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"ipa-utils.h\""}, {"sha": "e87615a3e8c033607d7d35a737b92873527715da", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"tree-inline.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n "}, {"sha": "feecd232afcafcbe47379733ad37a055ec71134a", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 173, "deletions": 6, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -311,6 +311,19 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n \t}\n       else\n \tfprintf (f, \"         Unknown bits\\n\");\n+\n+      if (jump_func->vr_known)\n+\t{\n+\t  fprintf (f, \"         VR  \");\n+\t  fprintf (f, \"%s[\",\n+\t\t   (jump_func->m_vr.type == VR_ANTI_RANGE) ? \"~\" : \"\");\n+\t  print_decs (jump_func->m_vr.min, f);\n+\t  fprintf (f, \", \");\n+\t  print_decs (jump_func->m_vr.max, f);\n+\t  fprintf (f, \"]\\n\");\n+\t}\n+      else\n+\tfprintf (f, \"         Unknown VR\\n\");\n     }\n }\n \n@@ -391,6 +404,7 @@ ipa_set_jf_unknown (struct ipa_jump_func *jfunc)\n   jfunc->type = IPA_JF_UNKNOWN;\n   jfunc->alignment.known = false;\n   jfunc->bits.known = false;\n+  jfunc->vr_known = false;\n }\n \n /* Set JFUNC to be a copy of another jmp (to be used by jump function\n@@ -1680,9 +1694,27 @@ ipa_compute_jump_functions_for_edge (struct ipa_func_body_info *fbi,\n \t    }\n \t  else\n \t    gcc_assert (!jfunc->alignment.known);\n+\t  gcc_assert (!jfunc->vr_known);\n \t}\n       else\n-\tgcc_assert (!jfunc->alignment.known);\n+\t{\n+\t  wide_int min, max;\n+\t  value_range_type type;\n+\t  if (TREE_CODE (arg) == SSA_NAME\n+\t      && param_type\n+\t      && (type = get_range_info (arg, &min, &max))\n+\t      && (type == VR_RANGE || type == VR_ANTI_RANGE)\n+\t      && (min.get_precision () <= TYPE_PRECISION (param_type)))\n+\t    {\n+\t      jfunc->vr_known = true;\n+\t      jfunc->m_vr.type = type;\n+\t      jfunc->m_vr.min = wide_int_to_tree (param_type, min);\n+\t      jfunc->m_vr.max = wide_int_to_tree (param_type, max);\n+\t    }\n+\t  else\n+\t    gcc_assert (!jfunc->vr_known);\n+\t  gcc_assert (!jfunc->alignment.known);\n+\t}\n \n       if (INTEGRAL_TYPE_P (TREE_TYPE (arg))\n \t  && (TREE_CODE (arg) == SSA_NAME || TREE_CODE (arg) == INTEGER_CST))\n@@ -3709,16 +3741,28 @@ ipa_node_params_t::duplicate(cgraph_node *src, cgraph_node *dst,\n \n   ipcp_transformation_summary *src_trans = ipcp_get_transformation_summary (src);\n \n-  if (src_trans && vec_safe_length (src_trans->alignments) > 0)\n+  if (src_trans)\n     {\n       ipcp_grow_transformations_if_necessary ();\n       src_trans = ipcp_get_transformation_summary (src);\n       const vec<ipa_alignment, va_gc> *src_alignments = src_trans->alignments;\n+      const vec<ipa_vr, va_gc> *src_vr = src_trans->m_vr;\n       vec<ipa_alignment, va_gc> *&dst_alignments\n \t= ipcp_get_transformation_summary (dst)->alignments;\n-      vec_safe_reserve_exact (dst_alignments, src_alignments->length ());\n-      for (unsigned i = 0; i < src_alignments->length (); ++i)\n-\tdst_alignments->quick_push ((*src_alignments)[i]);\n+      vec<ipa_vr, va_gc> *&dst_vr\n+\t= ipcp_get_transformation_summary (dst)->m_vr;\n+      if (vec_safe_length (src_trans->alignments) > 0)\n+\t{\n+\t  vec_safe_reserve_exact (dst_alignments, src_alignments->length ());\n+\t  for (unsigned i = 0; i < src_alignments->length (); ++i)\n+\t    dst_alignments->quick_push ((*src_alignments)[i]);\n+\t}\n+      if (vec_safe_length (src_trans->m_vr) > 0)\n+\t{\n+\t  vec_safe_reserve_exact (dst_vr, src_vr->length ());\n+\t  for (unsigned i = 0; i < src_vr->length (); ++i)\n+\t    dst_vr->quick_push ((*src_vr)[i]);\n+\t}\n     }\n \n   if (src_trans && vec_safe_length (src_trans->bits) > 0)\n@@ -4660,6 +4704,15 @@ ipa_write_jump_function (struct output_block *ob,\n       streamer_write_widest_int (ob, jump_func->bits.value);\n       streamer_write_widest_int (ob, jump_func->bits.mask);\n     }   \n+  bp_pack_value (&bp, jump_func->vr_known, 1);\n+  streamer_write_bitpack (&bp);\n+  if (jump_func->vr_known)\n+    {\n+      streamer_write_enum (ob->main_stream, value_rang_type,\n+\t\t\t   VR_LAST, jump_func->m_vr.type);\n+      stream_write_tree (ob, jump_func->m_vr.min, true);\n+      stream_write_tree (ob, jump_func->m_vr.max, true);\n+    }\n }\n \n /* Read in jump function JUMP_FUNC from IB.  */\n@@ -4747,6 +4800,20 @@ ipa_read_jump_function (struct lto_input_block *ib,\n     }\n   else\n     jump_func->bits.known = false;\n+\n+  struct bitpack_d vr_bp = streamer_read_bitpack (ib);\n+  bool vr_known = bp_unpack_value (&vr_bp, 1);\n+  if (vr_known)\n+    {\n+      jump_func->vr_known = true;\n+      jump_func->m_vr.type = streamer_read_enum (ib,\n+\t\t\t\t\t\t value_range_type,\n+\t\t\t\t\t\t VR_LAST);\n+      jump_func->m_vr.min = stream_read_tree (ib, data_in);\n+      jump_func->m_vr.max = stream_read_tree (ib, data_in);\n+    }\n+  else\n+    jump_func->vr_known = false;\n }\n \n /* Stream out parts of cgraph_indirect_call_info corresponding to CS that are\n@@ -5113,7 +5180,29 @@ write_ipcp_transformation_info (output_block *ob, cgraph_node *node)\n   else\n     streamer_write_uhwi (ob, 0);\n \n-  ts = ipcp_get_transformation_summary (node);\n+  if (ts && vec_safe_length (ts->m_vr) > 0)\n+    {\n+      count = ts->m_vr->length ();\n+      streamer_write_uhwi (ob, count);\n+      for (unsigned i = 0; i < count; ++i)\n+\t{\n+\t  struct bitpack_d bp;\n+\t  ipa_vr *parm_vr = &(*ts->m_vr)[i];\n+\t  bp = bitpack_create (ob->main_stream);\n+\t  bp_pack_value (&bp, parm_vr->known, 1);\n+\t  streamer_write_bitpack (&bp);\n+\t  if (parm_vr->known)\n+\t    {\n+\t      streamer_write_enum (ob->main_stream, value_rang_type,\n+\t\t\t\t   VR_LAST, parm_vr->type);\n+\t      streamer_write_wide_int (ob, parm_vr->min);\n+\t      streamer_write_wide_int (ob, parm_vr->max);\n+\t    }\n+\t}\n+    }\n+  else\n+    streamer_write_uhwi (ob, 0);\n+\n   if (ts && vec_safe_length (ts->bits) > 0)\n     {\n       count = ts->bits->length ();\n@@ -5191,6 +5280,30 @@ read_ipcp_transformation_info (lto_input_block *ib, cgraph_node *node,\n   if (count > 0)\n     {\n       ipcp_grow_transformations_if_necessary ();\n+\n+      ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+      vec_safe_grow_cleared (ts->m_vr, count);\n+      for (i = 0; i < count; i++)\n+\t{\n+\t  ipa_vr *parm_vr;\n+\t  parm_vr = &(*ts->m_vr)[i];\n+\t  struct bitpack_d bp;\n+\t  bp = streamer_read_bitpack (ib);\n+\t  parm_vr->known = bp_unpack_value (&bp, 1);\n+\t  if (parm_vr->known)\n+\t    {\n+\t      parm_vr->type = streamer_read_enum (ib, value_range_type,\n+\t\t\t\t\t\t  VR_LAST);\n+\t      parm_vr->min = streamer_read_wide_int (ib);\n+\t      parm_vr->max = streamer_read_wide_int (ib);\n+\t    }\n+\t}\n+    }\n+  count = streamer_read_uhwi (ib);\n+  if (count > 0)\n+    {\n+      ipcp_grow_transformations_if_necessary ();\n+\n       ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n       vec_safe_grow_cleared (ts->bits, count);\n \n@@ -5558,6 +5671,59 @@ ipcp_update_bits (struct cgraph_node *node)\n     }\n }\n \n+/* Update value range of formal parameters as described in\n+   ipcp_transformation_summary.  */\n+\n+static void\n+ipcp_update_vr (struct cgraph_node *node)\n+{\n+  tree fndecl = node->decl;\n+  tree parm = DECL_ARGUMENTS (fndecl);\n+  tree next_parm = parm;\n+  ipcp_transformation_summary *ts = ipcp_get_transformation_summary (node);\n+  if (!ts || vec_safe_length (ts->m_vr) == 0)\n+    return;\n+  const vec<ipa_vr, va_gc> &vr = *ts->m_vr;\n+  unsigned count = vr.length ();\n+\n+  for (unsigned i = 0; i < count; ++i, parm = next_parm)\n+    {\n+      if (node->clone.combined_args_to_skip\n+\t  && bitmap_bit_p (node->clone.combined_args_to_skip, i))\n+\tcontinue;\n+      gcc_checking_assert (parm);\n+      next_parm = DECL_CHAIN (parm);\n+      tree ddef = ssa_default_def (DECL_STRUCT_FUNCTION (node->decl), parm);\n+\n+      if (!ddef || !is_gimple_reg (parm))\n+\tcontinue;\n+\n+      if (vr[i].known\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (ddef))\n+\t  && !POINTER_TYPE_P (TREE_TYPE (ddef))\n+\t  && (vr[i].type == VR_RANGE || vr[i].type == VR_ANTI_RANGE))\n+\t{\n+\t  tree type = TREE_TYPE (ddef);\n+\t  unsigned prec = TYPE_PRECISION (type);\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"Setting value range of param %u \", i);\n+\t      fprintf (dump_file, \"%s[\",\n+\t\t       (vr[i].type == VR_ANTI_RANGE) ? \"~\" : \"\");\n+\t      print_decs (vr[i].min, dump_file);\n+\t      fprintf (dump_file, \", \");\n+\t      print_decs (vr[i].max, dump_file);\n+\t      fprintf (dump_file, \"]\\n\");\n+\t    }\n+\t  set_range_info (ddef, vr[i].type,\n+\t\t\t  wide_int_storage::from (vr[i].min, prec,\n+\t\t\t\t\t\t  TYPE_SIGN (type)),\n+\t\t\t  wide_int_storage::from (vr[i].max, prec,\n+\t\t\t\t\t\t  TYPE_SIGN (type)));\n+\t}\n+    }\n+}\n+\n /* IPCP transformation phase doing propagation of aggregate values.  */\n \n unsigned int\n@@ -5578,6 +5744,7 @@ ipcp_transform_function (struct cgraph_node *node)\n \n   ipcp_update_alignments (node);\n   ipcp_update_bits (node);\n+  ipcp_update_vr (node);\n   aggval = ipa_get_agg_replacements_for_node (node);\n   if (!aggval)\n       return 0;"}, {"sha": "a123978d239fce879d9f14f59a624551b85c3fbb", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -167,6 +167,16 @@ struct GTY(()) ipa_bits\n   bool known;\n };\n \n+/* Info about value ranges.  */\n+struct GTY(()) ipa_vr\n+{\n+  /* The data fields below are valid only if known is true.  */\n+  bool known;\n+  enum value_range_type type;\n+  wide_int min;\n+  wide_int max;\n+};\n+\n /* A jump function for a callsite represents the values passed as actual\n    arguments of the callsite. See enum jump_func_type for the various\n    types of jump functions supported.  */\n@@ -182,6 +192,10 @@ struct GTY (()) ipa_jump_func\n   /* Information about zero/non-zero bits.  */\n   struct ipa_bits bits;\n \n+  /* Information about value range.  */\n+  bool vr_known;\n+  value_range m_vr;\n+\n   enum jump_func_type type;\n   /* Represents a value of a jump function.  pass_through is used only in jump\n      function context.  constant represents the actual constant in constant jump\n@@ -521,6 +535,8 @@ struct GTY(()) ipcp_transformation_summary\n   vec<ipa_alignment, va_gc> *alignments;\n   /* Known bits information.  */\n   vec<ipa_bits, va_gc> *bits;\n+  /* Value range information.  */\n+  vec<ipa_vr, va_gc> *m_vr;\n };\n \n void ipa_set_node_agg_value_chain (struct cgraph_node *node,"}, {"sha": "61d8dd159f9c1a4b0a7b3e71e8f9d735dbe2a53f", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"ipa-utils.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n "}, {"sha": "b26dad5e2b4c3f35699972304b328e5058fb0714", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"ipa-utils.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"dbgcnt.h\""}, {"sha": "4ce7ac76358be06a55844ffb5fb4be6d14842346", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -1,3 +1,8 @@\n+2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* lto-partition.c: Include tree-vrp.h.\n+\t* lto.c: Likewise.\n+\n 2016-09-20  Richard Biener  <rguenther@suse.de>\n \n \t* lto.c (lto_main): Call early_finish with \"<artificial>\" as"}, {"sha": "b52d175704f39595dab215e5884fe1dafa1c991d", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-streamer.h\"\n #include \"params.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"lto-partition.h\""}, {"sha": "7256ff9547baf0d27c8cc616b46ba4bcd325d6af", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"stor-layout.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"common.h\"\n #include \"debug.h\""}, {"sha": "f6259731263e26473fb6e3185d5a5de861be797e", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -506,6 +506,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_2_PLUS, OPT_fipa_cp, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fipa_cp_alignment, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fipa_bit_cp, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fipa_vrp, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize_speculatively, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fipa_sra, NULL, 1 },"}, {"sha": "936c48c21c4149c5fb59fd99764bd90c262f5ccc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -1,3 +1,11 @@\n+2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* g++.dg/ipa/pure-const-3.C: Add -fno-ipa-vrp. Else constant arguments\n+\twill be optimized away.\n+\t* gcc.dg/ipa/vrp1.c: New test.\n+\t* gcc.dg/ipa/vrp2.c: New test.\n+\t* gcc.dg/ipa/vrp3.c: New test.\n+\n 2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* g++.dg/tree-ssa/pr31146-2.C: Run with -fno-tree-evrp as evrp also"}, {"sha": "ff7fe53f335f2418425ec689a65dce9a415ad68f", "filename": "gcc/testsuite/g++.dg/ipa/pure-const-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-3.C?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-optimized\"  } */\n+/* { dg-options \"-O2 -fno-ipa-vrp -fdump-tree-optimized\"  } */\n int *ptr;\n static int barvar;\n static int b(int a);"}, {"sha": "72a3139851cf29b7472b61f6b52b67463b690fa0", "filename": "gcc/testsuite/gcc.dg/ipa/vrp1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp1.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-cp-details\" } */\n+\n+static __attribute__((noinline, noclone))\n+int foo (int i)\n+{\n+  if (i < 5)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+static __attribute__((noinline, noclone))\n+int bar (int j)\n+{\n+  if (j > 8)\n+    return foo (j + 2);\n+  else if (j > 2)\n+    return foo (j + 3);\n+\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  for (unsigned int i =0; i < 1000; ++i)\n+    bar (i);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Setting value range of param 0 \\\\\\[6,\" \"cp\" } } */\n+/* { dg-final { scan-ipa-dump \"Setting value range of param 0 \\\\\\[0, 999\\\\\\]\" \"cp\" } } */"}, {"sha": "c720e5ce8d4ccee0afb39fd47d350e02eec5191b", "filename": "gcc/testsuite/gcc.dg/ipa/vrp2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp2.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-cp-details\" } */\n+\n+static __attribute__((noinline, noclone))\n+int foo (int i)\n+{\n+  if (i < 4)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+static __attribute__((noinline, noclone))\n+int bar (int j)\n+{\n+  if (j > 8)\n+    return foo (j + 2);\n+  else if (j > 2)\n+    return foo (j + 3);\n+\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  foo (100);\n+  for (unsigned int i = 0; i < 12; ++i)\n+    {\n+      bar (i);\n+    }\n+  foo (4);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Setting value range of param 0 \\\\\\[4,\" \"cp\" } } */\n+/* { dg-final { scan-ipa-dump \"Setting value range of param 0 \\\\\\[0, 11\\\\\\]\" \"cp\" } } */"}, {"sha": "fb5d54aca82acd00b8bebb58f5dfcb27a6d379c5", "filename": "gcc/testsuite/gcc.dg/ipa/vrp3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fvrp3.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-cp-details\" } */\n+\n+volatile int cond;\n+\n+static __attribute__((noinline, noclone))\n+int foo (int i)\n+{\n+  if (i < 5)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+static __attribute__((noinline, noclone))\n+int bar (int j)\n+{\n+  if (cond)\n+    foo (j);\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  for (unsigned int i = 0; i < 10; ++i)\n+    bar (i);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"Setting value range of param 0 \\\\\\[0, 9\\\\\\]\" 2 \"cp\" } } */"}, {"sha": "5f8076326808ed6ba444188be741275b93537ca7", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc5448f39ccd26b6f06cd7120f09c2254bac3be/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=8bc5448f39ccd26b6f06cd7120f09c2254bac3be", "patch": "@@ -71,6 +71,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dwarf2out.h\"\n #include \"ipa-reference.h\"\n #include \"symbol-summary.h\"\n+#include \"tree-vrp.h\"\n #include \"ipa-prop.h\"\n #include \"gcse.h\"\n #include \"tree-chkp.h\""}]}