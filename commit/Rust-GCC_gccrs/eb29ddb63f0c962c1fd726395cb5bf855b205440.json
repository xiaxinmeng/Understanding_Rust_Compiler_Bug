{"sha": "eb29ddb63f0c962c1fd726395cb5bf855b205440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyOWRkYjYzZjBjOTYyYzFmZDcyNjM5NWNiNWJmODU1YjIwNTQ0MA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-15T10:11:16Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-15T10:11:16Z"}, "message": "sparc.c (sparc_emit_float_lib_cmp): Call emit_library_call with LCT_NORMAL.\n\n2002-04-15  David S. Miller  <davem@redhat.com>\n\n\t* config/sparc/sparc.c (sparc_emit_float_lib_cmp):\n\tCall emit_library_call with LCT_NORMAL.\n\t(sparc_initialize_trampoline): Use LCT_foo instead of\n\tmagic constant in emit_library_call invocations.\n\t(sparc64_initialize_trampoline): Likewise.\n\t(sparc_profile_hook): Likewise.\n\t* config/sparc/sparc.md: Likewise.\n\n\t* config/sparc/sparc.c (sparc_extra_constraint_check):\n\tFix type of argument 'c'.\n\t* config/sparc/sparc-protos.h (sparc_extra_constraint_check):\n\tLikewise.\n\nFrom-SVN: r52321", "tree": {"sha": "bdfe305fb77f857c18299cff49fe22b92b30ffb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdfe305fb77f857c18299cff49fe22b92b30ffb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb29ddb63f0c962c1fd726395cb5bf855b205440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb29ddb63f0c962c1fd726395cb5bf855b205440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb29ddb63f0c962c1fd726395cb5bf855b205440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb29ddb63f0c962c1fd726395cb5bf855b205440/comments", "author": null, "committer": null, "parents": [{"sha": "10aa83c7dfd66aa96357c0951572b1c3c1192fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10aa83c7dfd66aa96357c0951572b1c3c1192fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10aa83c7dfd66aa96357c0951572b1c3c1192fa4"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "299fff47b0ad1f2d13ac04defbf6f2a886969aae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb29ddb63f0c962c1fd726395cb5bf855b205440/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb29ddb63f0c962c1fd726395cb5bf855b205440/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb29ddb63f0c962c1fd726395cb5bf855b205440", "patch": "@@ -1,3 +1,18 @@\n+2002-04-15  David S. Miller  <davem@redhat.com>\n+\n+\t* config/sparc/sparc.c (sparc_emit_float_lib_cmp):\n+\tCall emit_library_call with LCT_NORMAL.\n+\t(sparc_initialize_trampoline): Use LCT_foo instead of\n+\tmagic constant in emit_library_call invocations.\n+\t(sparc64_initialize_trampoline): Likewise.\n+\t(sparc_profile_hook): Likewise.\n+\t* config/sparc/sparc.md: Likewise.\n+\n+\t* config/sparc/sparc.c (sparc_extra_constraint_check):\n+\tFix type of argument 'c'.\n+\t* config/sparc/sparc-protos.h (sparc_extra_constraint_check):\n+\tLikewise.\n+\n 2002-04-15  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* diagnostic.h (output_buffer_state): Redefine."}, {"sha": "17f22f463e1707a04d50acf413ce42def6569e37", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb29ddb63f0c962c1fd726395cb5bf855b205440/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb29ddb63f0c962c1fd726395cb5bf855b205440/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=eb29ddb63f0c962c1fd726395cb5bf855b205440", "patch": "@@ -117,7 +117,7 @@ extern char *sparc_v8plus_shift PARAMS ((rtx *, rtx, const char *));\n    32 bits of REG are 0 before INSN.  */   \n extern int sparc_check_64 PARAMS ((rtx, rtx));\n extern rtx gen_df_reg PARAMS ((rtx, int));\n-extern int sparc_extra_constraint_check PARAMS ((rtx, char, int));\n+extern int sparc_extra_constraint_check PARAMS ((rtx, int, int));\n #endif /* RTX_CODE */\n \n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "ccfbc902f0bd35a027a55b57a01c743b1d5f6e3d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb29ddb63f0c962c1fd726395cb5bf855b205440/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb29ddb63f0c962c1fd726395cb5bf855b205440/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=eb29ddb63f0c962c1fd726395cb5bf855b205440", "patch": "@@ -5374,7 +5374,7 @@ sparc_emit_float_lib_cmp (x, y, comparison)\n       else\n \tslot1 = y;\n \n-      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, qpfunc), 1,\n+      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, qpfunc), LCT_NORMAL,\n \t\t\t DImode, 2,\n \t\t\t XEXP (slot0, 0), Pmode,\n \t\t\t XEXP (slot1, 0), Pmode);\n@@ -5383,7 +5383,7 @@ sparc_emit_float_lib_cmp (x, y, comparison)\n     }\n   else\n     {\n-      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, qpfunc), 1,\n+      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, qpfunc), LCT_NORMAL,\n \t\t\t SImode, 2,\n \t\t\t x, TFmode, y, TFmode);\n \n@@ -6391,7 +6391,7 @@ sparc_initialize_trampoline (tramp, fnaddr, cxt)\n    */\n #ifdef TRANSFER_FROM_TRAMPOLINE\n   emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n-                     0, VOIDmode, 1, tramp, Pmode);\n+                     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n #endif\n \n   emit_move_insn\n@@ -6442,7 +6442,7 @@ sparc64_initialize_trampoline (tramp, fnaddr, cxt)\n {\n #ifdef TRANSFER_FROM_TRAMPOLINE\n   emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n-                     0, VOIDmode, 1, tramp, Pmode);\n+                     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n #endif\n \n   /*\n@@ -8547,7 +8547,7 @@ sparc_profile_hook (labelno)\n   lab = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n   fun = gen_rtx_SYMBOL_REF (Pmode, MCOUNT_FUNCTION);\n \n-  emit_library_call (fun, 0, VOIDmode, 1, lab, Pmode);\n+  emit_library_call (fun, LCT_NORMAL, VOIDmode, 1, lab, Pmode);\n }\n \f\n /* Mark ARG, which is really a struct ultrasparc_pipline_state *, for\n@@ -8613,7 +8613,7 @@ sparc_elf_asm_named_section (name, flags)\n int\n sparc_extra_constraint_check (op, c, strict)\n      rtx op;\n-     char c;\n+     int c;\n      int strict;\n {\n   int reload_ok_mem;"}, {"sha": "cc362dcb44fe933040fac1bc6ea0e336591c1cc6", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb29ddb63f0c962c1fd726395cb5bf855b205440/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb29ddb63f0c962c1fd726395cb5bf855b205440/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=eb29ddb63f0c962c1fd726395cb5bf855b205440", "patch": "@@ -5031,7 +5031,7 @@\n       else\n \tslot0 = operands[0];\n \n-      emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_stoq\\\"), 0,\n+      emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_stoq\\\"), LCT_NORMAL,\n \t\t\t VOIDmode, 2,\n \t\t\t XEXP (slot0, 0), Pmode,\n \t\t\t operands[1], SFmode);\n@@ -5066,7 +5066,7 @@\n       else\n \tslot0 = operands[0];\n \n-      emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_dtoq\\\"), 0,\n+      emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_dtoq\\\"), LCT_NORMAL,\n \t\t\t VOIDmode, 2,\n \t\t\t XEXP (slot0, 0), Pmode,\n \t\t\t operands[1], DFmode);\n@@ -5114,7 +5114,7 @@\n \tslot0 = operands[1];\n \n       emit_library_call_value (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_qtos\\\"),\n-\t\t\t       operands[0], 0, SFmode, 1,\n+\t\t\t       operands[0], LCT_NORMAL, SFmode, 1,\n \t\t\t       XEXP (slot0, 0), Pmode);\n       DONE;\n     }\n@@ -5148,7 +5148,7 @@\n \tslot0 = operands[1];\n \n       emit_library_call_value (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_qtod\\\"),\n-\t\t\t       operands[0], 0, DFmode, 1,\n+\t\t\t       operands[0], LCT_NORMAL, DFmode, 1,\n \t\t\t       XEXP (slot0, 0), Pmode);\n       DONE;\n     }\n@@ -5360,7 +5360,7 @@\n \tslot0 = operands[1];\n \n       emit_library_call_value (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_qtoi\\\"),\n-\t\t\t       operands[0], 0, SImode, 1,\n+\t\t\t       operands[0], LCT_NORMAL, SImode, 1,\n \t\t\t       XEXP (slot0, 0), Pmode);\n       DONE;\n     }\n@@ -5390,7 +5390,7 @@\n     slot0 = operands[1];\n \n   emit_library_call_value (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_qtoui\\\"),\n-\t\t\t   operands[0], 0, SImode, 1,\n+\t\t\t   operands[0], LCT_NORMAL, SImode, 1,\n \t\t\t   XEXP (slot0, 0), Pmode);\n   DONE;\n }\")\n@@ -5432,7 +5432,7 @@\n \tslot0 = operands[1];\n \n       emit_library_call_value (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_qtox\\\"),\n-\t\t\t       operands[0], 0, DImode, 1,\n+\t\t\t       operands[0], LCT_NORMAL, DImode, 1,\n \t\t\t       XEXP (slot0, 0), Pmode);\n       DONE;\n     }\n@@ -5462,7 +5462,7 @@\n     slot0 = operands[1];\n \n   emit_library_call_value (gen_rtx (SYMBOL_REF, Pmode, \\\"_Qp_qtoux\\\"),\n-\t\t\t   operands[0], 0, DImode, 1,\n+\t\t\t   operands[0], LCT_NORMAL, DImode, 1,\n \t\t\t   XEXP (slot0, 0), Pmode);\n   DONE;\n }\")"}]}