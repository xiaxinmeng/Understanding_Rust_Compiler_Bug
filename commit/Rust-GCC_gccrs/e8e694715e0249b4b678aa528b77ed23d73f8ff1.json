{"sha": "e8e694715e0249b4b678aa528b77ed23d73f8ff1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThlNjk0NzE1ZTAyNDliNGI2NzhhYTUyOGI3N2VkMjNkNzNmOGZmMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-06-19T06:38:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-06-19T06:38:16Z"}, "message": "fpu-387.h: Use __asm__ and __volatile__ consistently.\n\n\t* config/fpu-387.h: Use __asm__ and __volatile__ consistently.\n\t(get_fpu_except_flags): Initialize result.\n\nFrom-SVN: r200187", "tree": {"sha": "3940cd146ec0b28544034fc074a229b3267eb864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3940cd146ec0b28544034fc074a229b3267eb864"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8e694715e0249b4b678aa528b77ed23d73f8ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e694715e0249b4b678aa528b77ed23d73f8ff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e694715e0249b4b678aa528b77ed23d73f8ff1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e694715e0249b4b678aa528b77ed23d73f8ff1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fceae711a6c3ada338c74371cb9699ec9cd121f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fceae711a6c3ada338c74371cb9699ec9cd121f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fceae711a6c3ada338c74371cb9699ec9cd121f"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "d5ffcd2f03e36bffd7d51ade0b765e98f6756292", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e694715e0249b4b678aa528b77ed23d73f8ff1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e694715e0249b4b678aa528b77ed23d73f8ff1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e8e694715e0249b4b678aa528b77ed23d73f8ff1", "patch": "@@ -1,3 +1,8 @@\n+2012-06-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/fpu-387.h: Use __asm__ and __volatile__ consistently.\n+\t(get_fpu_except_flags): Initialize result.\n+\n 2013-06-17  Tobias Burnus  <burnus@net-b.de>\n \n \t* libgfortran.h (compile_options_t) Add fpe_summary."}, {"sha": "6c42ab845248c7cc4e175b6359c777d588a16b27", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e694715e0249b4b678aa528b77ed23d73f8ff1/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e694715e0249b4b678aa528b77ed23d73f8ff1/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=e8e694715e0249b4b678aa528b77ed23d73f8ff1", "patch": "@@ -73,7 +73,7 @@ has_sse (void)\n \n       /* We need a single SSE instruction here so the handler can safely skip\n \t over it.  */\n-      __asm__ volatile (\"movaps %xmm0,%xmm0\");\n+      __asm__ __volatile__ (\"movaps\\t%xmm0,%xmm0\");\n \n       sigaction (SIGILL, &oact, NULL);\n \n@@ -100,7 +100,7 @@ void set_fpu (void)\n {\n   unsigned short cw;\n \n-  asm volatile (\"fnstcw %0\" : \"=m\" (cw));\n+  __asm__ __volatile__ (\"fnstcw\\t%0\" : \"=m\" (cw));\n \n   cw |= (_FPU_MASK_IM | _FPU_MASK_DM | _FPU_MASK_ZM | _FPU_MASK_OM\n \t | _FPU_MASK_UM | _FPU_MASK_PM);\n@@ -112,13 +112,13 @@ void set_fpu (void)\n   if (options.fpe & GFC_FPE_UNDERFLOW) cw &= ~_FPU_MASK_UM;\n   if (options.fpe & GFC_FPE_INEXACT) cw &= ~_FPU_MASK_PM;\n \n-  asm volatile (\"fldcw %0\" : : \"m\" (cw));\n+  __asm__ __volatile__ (\"fldcw\\t%0\" : : \"m\" (cw));\n \n   if (has_sse())\n     {\n       unsigned int cw_sse;\n \n-      asm volatile (\"%vstmxcsr %0\" : \"=m\" (cw_sse));\n+      __asm__ __volatile__ (\"%vstmxcsr\\t%0\" : \"=m\" (cw_sse));\n \n       cw_sse &= 0xffff0000;\n       cw_sse |= (_FPU_MASK_IM | _FPU_MASK_DM | _FPU_MASK_ZM | _FPU_MASK_OM\n@@ -131,43 +131,34 @@ void set_fpu (void)\n       if (options.fpe & GFC_FPE_UNDERFLOW) cw_sse &= ~(_FPU_MASK_UM << 7);\n       if (options.fpe & GFC_FPE_INEXACT) cw_sse &= ~(_FPU_MASK_PM << 7);\n \n-      asm volatile (\"%vldmxcsr %0\" : : \"m\" (cw_sse));\n+      __asm__ __volatile__ (\"%vldmxcsr\\t%0\" : : \"m\" (cw_sse));\n     }\n }\n \n \n int\n get_fpu_except_flags (void)\n {\n-  int result;\n+  int result = 0;\n   unsigned short cw;\n \n   __asm__ __volatile__ (\"fnstsw\\t%0\" : \"=a\" (cw));\n \n   if (has_sse())\n     {\n       unsigned int cw_sse;\n+\n       __asm__ __volatile__ (\"%vstmxcsr\\t%0\" : \"=m\" (cw_sse));\n+\n       cw |= cw_sse;\n     }\n \n-  if (cw & _FPU_MASK_IM)\n-    result |= GFC_FPE_INVALID;\n-\n-  if (cw & _FPU_MASK_ZM)\n-    result |= GFC_FPE_ZERO;\n-\n-  if (cw & _FPU_MASK_OM)\n-    result |= GFC_FPE_OVERFLOW;\n-\n-  if (cw & _FPU_MASK_UM)\n-    result |= GFC_FPE_UNDERFLOW;\n-\n-  if (cw & _FPU_MASK_DM)\n-    result |= GFC_FPE_DENORMAL;\n-\n-  if (cw & _FPU_MASK_PM)\n-    result |= GFC_FPE_INEXACT;\n+  if (cw & _FPU_MASK_IM) result |= GFC_FPE_INVALID;\n+  if (cw & _FPU_MASK_DM) result |= GFC_FPE_DENORMAL;\n+  if (cw & _FPU_MASK_ZM) result |= GFC_FPE_ZERO;\n+  if (cw & _FPU_MASK_OM) result |= GFC_FPE_OVERFLOW;\n+  if (cw & _FPU_MASK_UM) result |= GFC_FPE_UNDERFLOW;\n+  if (cw & _FPU_MASK_PM) result |= GFC_FPE_INEXACT;\n \n   return result;\n }"}]}