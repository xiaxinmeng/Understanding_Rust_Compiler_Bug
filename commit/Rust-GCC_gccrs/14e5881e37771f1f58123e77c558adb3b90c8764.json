{"sha": "14e5881e37771f1f58123e77c558adb3b90c8764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRlNTg4MWUzNzc3MWYxZjU4MTIzZTc3YzU1OGFkYjNiOTBjODc2NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-24T21:47:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-24T21:47:23Z"}, "message": "simplify-rtx: Punt for modes with precision above MAX_BITSIZE_MODE_ANY_INT [PR93376]\n\nThe following patch makes sure we punt in the 3 spots if precision is above\nMAX_BITSIZE_MODE_ANY_INT.\n\n2020-01-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93376\n\t* simplify-rtx.c (simplify_const_unary_operation,\n\tsimplify_const_binary_operation): Punt for mode precision above\n\tMAX_BITSIZE_MODE_ANY_INT.", "tree": {"sha": "6e799dae9aee8bc5a0a25cfff0a51afa6a9011ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e799dae9aee8bc5a0a25cfff0a51afa6a9011ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14e5881e37771f1f58123e77c558adb3b90c8764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e5881e37771f1f58123e77c558adb3b90c8764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e5881e37771f1f58123e77c558adb3b90c8764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e5881e37771f1f58123e77c558adb3b90c8764/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ccc19bd4d12379a0d9fce486ceba3207749424a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccc19bd4d12379a0d9fce486ceba3207749424a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ccc19bd4d12379a0d9fce486ceba3207749424a"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "4061bd0b998b475def5538b61cfe086921007059", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e5881e37771f1f58123e77c558adb3b90c8764/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e5881e37771f1f58123e77c558adb3b90c8764/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14e5881e37771f1f58123e77c558adb3b90c8764", "patch": "@@ -1,3 +1,10 @@\n+2020-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93376\n+\t* simplify-rtx.c (simplify_const_unary_operation,\n+\tsimplify_const_binary_operation): Punt for mode precision above\n+\tMAX_BITSIZE_MODE_ANY_INT.\n+\n 2020-01-24  Andrew Pinski  <apinski@marvell.com>\n \n \t* config/arm/aarch-cost-tables.h (cortexa57_extra_costs): Change"}, {"sha": "eff1d07a2533c7bda5f0529cd318f08e6d5209d6", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e5881e37771f1f58123e77c558adb3b90c8764/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e5881e37771f1f58123e77c558adb3b90c8764/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=14e5881e37771f1f58123e77c558adb3b90c8764", "patch": "@@ -1824,6 +1824,9 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n   if (CONST_SCALAR_INT_P (op) && is_a <scalar_int_mode> (mode, &result_mode))\n     {\n       unsigned int width = GET_MODE_PRECISION (result_mode);\n+      if (width > MAX_BITSIZE_MODE_ANY_INT)\n+\treturn 0;\n+\n       wide_int result;\n       scalar_int_mode imode = (op_mode == VOIDmode\n \t\t\t       ? result_mode\n@@ -1968,6 +1971,9 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \t   && is_int_mode (mode, &result_mode))\n     {\n       unsigned int width = GET_MODE_PRECISION (result_mode);\n+      if (width > MAX_BITSIZE_MODE_ANY_INT)\n+\treturn 0;\n+\n       /* Although the overflow semantics of RTL's FIX and UNSIGNED_FIX\n \t operators are intentionally left unspecified (to ease implementation\n \t by target backends), for consistency, this routine implements the\n@@ -4422,7 +4428,8 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n   scalar_int_mode int_mode;\n   if (is_a <scalar_int_mode> (mode, &int_mode)\n       && CONST_SCALAR_INT_P (op0)\n-      && CONST_SCALAR_INT_P (op1))\n+      && CONST_SCALAR_INT_P (op1)\n+      && GET_MODE_PRECISION (int_mode) <= MAX_BITSIZE_MODE_ANY_INT)\n     {\n       wide_int result;\n       wi::overflow_type overflow;"}]}