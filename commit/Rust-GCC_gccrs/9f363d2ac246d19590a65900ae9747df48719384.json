{"sha": "9f363d2ac246d19590a65900ae9747df48719384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzNjNkMmFjMjQ2ZDE5NTkwYTY1OTAwYWU5NzQ3ZGY0ODcxOTM4NA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-03-27T23:38:05Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-03-27T23:38:05Z"}, "message": "func-vararg-alternate.h: New file.\n\n\t* gcc.dg/dfp/func-vararg-alternate.h: New file.\n\t* gcc.dg/dfp/func-vararg-alternate-d32.c: New test.\n\t* gcc.dg/dfp/func-vararg-alternate-d64.c: New test.\n\t* gcc.dg/dfp/func-vararg-alternate-d128.c: New test.\n\nFrom-SVN: r123282", "tree": {"sha": "a407ef4f0bf4918c9f4481346968a1cc452417b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a407ef4f0bf4918c9f4481346968a1cc452417b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f363d2ac246d19590a65900ae9747df48719384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f363d2ac246d19590a65900ae9747df48719384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f363d2ac246d19590a65900ae9747df48719384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f363d2ac246d19590a65900ae9747df48719384/comments", "author": null, "committer": null, "parents": [{"sha": "acad4ce2393f3755b173b1ff4a07dae605256576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acad4ce2393f3755b173b1ff4a07dae605256576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acad4ce2393f3755b173b1ff4a07dae605256576"}], "stats": {"total": 215, "additions": 215, "deletions": 0}, "files": [{"sha": "5457dfebfe835bce9e672cdfe815941919ffb99e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f363d2ac246d19590a65900ae9747df48719384", "patch": "@@ -1,5 +1,10 @@\n 2007-03-27  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* gcc.dg/dfp/func-vararg-alternate.h: New file.\n+\t* gcc.dg/dfp/func-vararg-alternate-d32.c: New test.\n+\t* gcc.dg/dfp/func-vararg-alternate-d64.c: New test.\n+\t* gcc.dg/dfp/func-vararg-alternate-d128.c: New test.\n+\n \t* gcc.dg/dfp/func-vararg-mixed.c: Add optional debugging output.\n \t* gcc.dg/dfp/func-vararg-dfp.c: Ditto.\n "}, {"sha": "e8fc0271dcbf72a61237139dc96b8864475f6547", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate-d128.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128.c?ref=9f363d2ac246d19590a65900ae9747df48719384", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Simple test of vararg passing for problematic types with and without\n+   double values passed between them.  */\n+\n+#define DTYPE _Decimal128\n+#define ONE 1.0dl\n+#define THREE 3.0dl\n+#define SEVEN 7.0dl\n+#define ELEVEN 11.0dl\n+#define INTS 4\n+\n+#include \"func-vararg-alternate.h\"\n+\n+int\n+main ()\n+{\n+  doit ();\n+  return 0;\n+}"}, {"sha": "cd6853cc985af8298e28ede4f10385a61c7b7363", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate-d32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d32.c?ref=9f363d2ac246d19590a65900ae9747df48719384", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Simple test of vararg passing for problematic types with and without\n+   double values passed between them.  */\n+\n+#define DTYPE _Decimal32\n+#define ONE 1.0df\n+#define THREE 3.0df\n+#define SEVEN 7.0df\n+#define ELEVEN 11.0df\n+#define INTS 1\n+\n+#include \"func-vararg-alternate.h\"\n+\n+int\n+main ()\n+{\n+  doit ();\n+  return 0;\n+}"}, {"sha": "39470013ecdb34e21dc1c8f28dea34eccae1864d", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate-d64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d64.c?ref=9f363d2ac246d19590a65900ae9747df48719384", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Simple test of vararg passing for problematic types with and without\n+   double values passed between them.  */\n+\n+#define DTYPE _Decimal64\n+#define ONE 1.0dd\n+#define THREE 3.0dd\n+#define SEVEN 7.0dd\n+#define ELEVEN 11.0dd\n+#define INTS 2\n+\n+#include \"func-vararg-alternate.h\"\n+\n+int\n+main ()\n+{\n+  doit ();\n+  return 0;\n+}"}, {"sha": "393111b33bc4af7dc6fb9aceb20767ed7e9cf988", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate.h", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f363d2ac246d19590a65900ae9747df48719384/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate.h?ref=9f363d2ac246d19590a65900ae9747df48719384", "patch": "@@ -0,0 +1,150 @@\n+/* Simple test of vararg passing for problematic types with and without\n+   double values passed between them.  */\n+\n+#include <stdarg.h>\n+#ifdef DBG\n+#include <stdio.h>\n+#endif\n+\n+extern void abort (void);\n+\n+int failcnt;\n+DTYPE a[10];\n+double b[10];\n+\n+union U {\n+  DTYPE d;\n+  unsigned int i[INTS];\n+};\n+\n+void\n+compare (double r, double s, int *p, int *q, int n, int line)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    if (r != s || p[i] != q[i])\n+#ifdef DBG\n+      {\n+\tint j;\n+\n+\tprintf (\"line %-3d\", line);\n+\tfor (j = 0; j < n; j++)\n+\t  printf (\"  %08x\", p[j]);\n+\tprintf (\"    %10.2g\\n        \", r);\n+\tfor (j = 0; j < n; j++)\n+\t  printf (\"  %08x\", q[j]);\n+\tprintf (\"    %10.2g\\n\\n\", s);\n+\t    \n+\treturn;\n+      }\n+#else\n+      abort ();\n+#endif\n+}\n+\n+void\n+bar0 (int n, ...)\n+{\n+  union U u;\n+  int j;\n+  va_list ap;\n+\n+  va_start (ap, n);\n+  for (j = 0; j < n; j++)\n+    a[j] = va_arg (ap, DTYPE);\n+  va_end (ap);\n+}\n+\n+void\n+bar1 (int n, ...)\n+{\n+  union U u;\n+  int j;\n+  va_list ap;\n+\n+  va_start (ap, n);\n+  for (j = 0; j < n; j++)\n+    {\n+      a[j] = va_arg (ap, DTYPE);\n+      b[j] = va_arg (ap, double);\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+bar2 (int n, ...)\n+{\n+  union U u;\n+  int j;\n+  va_list ap;\n+\n+  va_start (ap, n);\n+  for (j = 0; j < n; j++)\n+    {\n+      b[j] = va_arg (ap, double);\n+      a[j] = va_arg (ap, DTYPE);\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+doit ()\n+{\n+  DTYPE x, y, z;\n+  union U u1, u2;\n+\n+  /* Sanity check that test setup is right, especially for long double\n+     which can be changed by command line option.  */\n+  if (INTS * 4 != sizeof (DTYPE))\n+    {\n+#ifdef DBG\n+      printf (\"test error: INTS = %d, sizeof (DTYPE) =  %d\\n\",\n+\t      INTS, sizeof (DTYPE));\n+#endif\n+      abort ();\n+    }\n+\n+  x = ONE / THREE;\n+  y = ONE / SEVEN;\n+  z = ONE / ELEVEN;\n+\n+  bar0 (1, x);\n+  u1.d = x; u2.d = a[0]; compare (0.0, 0.0, u1.i, u2.i, INTS, __LINE__);\n+\n+  bar0 (2, x, y);\n+  u1.d = x; u2.d = a[0]; compare (0.0, 0.0, u1.i, u2.i, INTS, __LINE__);\n+  u1.d = y; u2.d = a[1]; compare (0.0, 0.0, u1.i, u2.i, INTS, __LINE__);\n+\n+  bar0 (3, x, y, z);\n+  u1.d = x; u2.d = a[0]; compare (0.0, 0.0, u1.i, u2.i, INTS, __LINE__);\n+  u1.d = y; u2.d = a[1]; compare (0.0, 0.0, u1.i, u2.i, INTS, __LINE__);\n+  u1.d = z; u2.d = a[2]; compare (0.0, 0.0, u1.i, u2.i, INTS, __LINE__);\n+\n+  bar1 (1, x, 1.5);\n+  u1.d = x; u2.d = a[0]; compare (1.5, b[0], u1.i, u2.i, INTS, __LINE__);\n+\n+  bar1 (2, x, 1.5, y, 2.5);\n+  u1.d = x; u2.d = a[0]; compare (1.5, b[0], u1.i, u2.i, INTS, __LINE__);\n+  u1.d = y; u2.d = a[1]; compare (2.5, b[1], u1.i, u2.i, INTS, __LINE__);\n+\n+  bar1 (3, x, 1.5, y, 2.5, z, 3.5);\n+  u1.d = x; u2.d = a[0]; compare (1.5, b[0], u1.i, u2.i, INTS, __LINE__);\n+  u1.d = y; u2.d = a[1]; compare (2.5, b[1], u1.i, u2.i, INTS, __LINE__);\n+  u1.d = z; u2.d = a[2]; compare (3.5, b[2], u1.i, u2.i, INTS, __LINE__);\n+\n+  bar2 (1, 1.5, x);\n+  u1.d = x; u2.d = a[0]; compare (1.5, b[0], u1.i, u2.i, INTS, __LINE__);\n+\n+  bar2 (2, 1.5, x, 2.5, y);\n+  u1.d = x; u2.d = a[0]; compare (1.5, b[0], u1.i, u2.i, INTS, __LINE__);\n+  u1.d = y; u2.d = a[1]; compare (2.5, b[1], u1.i, u2.i, INTS, __LINE__);\n+\n+  bar2 (3, 1.5, x, 2.5, y, 3.5, z);\n+  u1.d = x; u2.d = a[0]; compare (1.5, b[0], u1.i, u2.i, INTS, __LINE__);\n+  u1.d = y; u2.d = a[1]; compare (2.5, b[1], u1.i, u2.i, INTS, __LINE__);\n+  u1.d = z; u2.d = a[2]; compare (3.5, b[2], u1.i, u2.i, INTS, __LINE__);\n+\n+  if (failcnt != 0)\n+    abort ();\n+}"}]}