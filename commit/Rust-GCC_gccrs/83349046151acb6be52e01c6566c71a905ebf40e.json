{"sha": "83349046151acb6be52e01c6566c71a905ebf40e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzNDkwNDYxNTFhY2I2YmU1MmUwMWM2NTY2YzcxYTkwNWViZjQwZQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-05-24T19:35:49Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-05-24T19:35:49Z"}, "message": "Split off powerpcspe from rs6000 port\n\n\n\t* config/powerpcspe: New port.  Files are copied from the rs6000\n\tport, with \"rs6000\" in filenames replaced by \"powerpcspe\".\n\n\t* config.gcc (powerpc*-*-*spe*): New.\n\t(powerpc-*-eabispe*): Use ${cpu_type} instead of hardcoded pathnames.\n\t(powerpc-*-rtems*spe*): New.\n\t(powerpc*-*-linux*spe*): New.\n\t(powerpc-wrs-vxworksspe): New.\n\t(powerpc*-*-*, rs6000-*-*): Use ${cpu_type}.\n\t(misc flags) [powerpc*-*-*, rs6000-*-*): Use ${cpu_type}.\n\t* config.host (powerpc*-*-*spe*): New.\n\nFrom-SVN: r248429", "tree": {"sha": "aacd91d7a2c16d4c04d309e34603ec4685f24fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aacd91d7a2c16d4c04d309e34603ec4685f24fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83349046151acb6be52e01c6566c71a905ebf40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83349046151acb6be52e01c6566c71a905ebf40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83349046151acb6be52e01c6566c71a905ebf40e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83349046151acb6be52e01c6566c71a905ebf40e/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6784361760fc9d456b6deb8dcf8715b573bcb9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6784361760fc9d456b6deb8dcf8715b573bcb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6784361760fc9d456b6deb8dcf8715b573bcb9e"}], "stats": {"total": 112818, "additions": 112810, "deletions": 8}, "files": [{"sha": "e1ab7c8e667567fc277ef440642b96aa00c9dd61", "filename": "ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -1,3 +1,14 @@\n+2017-05-24  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config.gcc (powerpc*-*-*spe*): New.\n+\t(powerpc-*-eabispe*): Use ${cpu_type} instead of hardcoded pathnames.\n+\t(powerpc-*-rtems*spe*): New.\n+\t(powerpc*-*-linux*spe*): New.\n+\t(powerpc-wrs-vxworksspe): New.\n+\t(powerpc*-*-*, rs6000-*-*): Use ${cpu_type}.\n+\t(misc flags) [powerpc*-*-*, rs6000-*-*): Use ${cpu_type}.\n+\t* config.host (powerpc*-*-*spe*): New.\n+\n 2017-05-19  Martin Liska  <mliska@suse.cz>\n \n \t* configure.ac: Add --enable-werror-always just for"}, {"sha": "0de25314406040edd0c43db5db2f1d76aef125b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -1,3 +1,8 @@\n+2017-05-24  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/powerpcspe: New port.  Files are copied from the rs6000\n+\tport, with \"rs6000\" in filenames replaced by \"powerpcspe\".\n+\n 2017-05-24  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR rtl-optimization/80754"}, {"sha": "3c0106ae555d80ded696a735d7213ef1e8588f4b", "filename": "gcc/common/config/powerpcspe/powerpcspe-common.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-common.c?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,333 @@\n+/* Common hooks for IBM RS/6000.\n+   Copyright (C) 1991-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+#include \"params.h\"\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options rs6000_option_optimization_table[] =\n+  {\n+    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    /* Enable -fsched-pressure for first pass instruction scheduling.  */\n+    { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n+static void\n+rs6000_option_init_struct (struct gcc_options *opts)\n+{\n+  if (DEFAULT_ABI == ABI_DARWIN)\n+    /* The Darwin libraries never set errno, so we might as well\n+       avoid calling them when that's the only reason we would.  */\n+    opts->x_flag_errno_math = 0;\n+\n+  /* Enable section anchors by default.  */\n+  if (!TARGET_MACHO)\n+    opts->x_flag_section_anchors = 1;\n+}\n+\n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+\n+static void\n+rs6000_option_default_params (void)\n+{\n+  /* Double growth factor to counter reduced min jump length.  */\n+  set_default_param_value (PARAM_MAX_GROW_COPY_BB_INSNS, 16);\n+}\n+\n+/* If not otherwise specified by a target, make 'long double' equivalent to\n+   'double'.  */\n+\n+#ifndef RS6000_DEFAULT_LONG_DOUBLE_SIZE\n+#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 64\n+#endif\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t      const struct cl_decoded_option *decoded,\n+\t\t      location_t loc)\n+{\n+  enum fpu_type_t fpu_type = FPU_NONE;\n+  char *p, *q;\n+  size_t code = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  int value = decoded->value;\n+\n+  switch (code)\n+    {\n+    case OPT_mfull_toc:\n+      opts->x_rs6000_isa_flags &= ~OPTION_MASK_MINIMAL_TOC;\n+      opts->x_TARGET_NO_FP_IN_TOC = 0;\n+      opts->x_TARGET_NO_SUM_IN_TOC = 0;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+#ifdef TARGET_USES_SYSV4_OPT\n+      /* Note, V.4 no longer uses a normal TOC, so make -mfull-toc, be\n+\t just the same as -mminimal-toc.  */\n+      opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+#endif\n+      break;\n+\n+#ifdef TARGET_USES_SYSV4_OPT\n+    case OPT_mtoc:\n+      /* Make -mtoc behave like -mminimal-toc.  */\n+      opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+      break;\n+#endif\n+\n+#ifdef TARGET_USES_AIX64_OPT\n+    case OPT_maix64:\n+#else\n+    case OPT_m64:\n+#endif\n+      opts->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n+      opts->x_rs6000_isa_flags |= (~opts_set->x_rs6000_isa_flags\n+\t\t\t\t   & OPTION_MASK_PPC_GFXOPT);\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n+      break;\n+\n+#ifdef TARGET_USES_AIX64_OPT\n+    case OPT_maix32:\n+#else\n+    case OPT_m32:\n+#endif\n+      opts->x_rs6000_isa_flags &= ~OPTION_MASK_POWERPC64;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n+      break;\n+\n+    case OPT_mminimal_toc:\n+      if (value == 1)\n+\t{\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 0;\n+\t  opts->x_TARGET_NO_SUM_IN_TOC = 0;\n+\t}\n+      break;\n+\n+    case OPT_mpowerpc_gpopt:\n+    case OPT_mpowerpc_gfxopt:\n+      break;\n+\n+    case OPT_mdebug_:\n+      p = ASTRDUP (arg);\n+      opts->x_rs6000_debug = 0;\n+\n+      while ((q = strtok (p, \",\")) != NULL)\n+\t{\n+\t  unsigned mask = 0;\n+\t  bool invert;\n+\n+\t  p = NULL;\n+\t  if (*q == '!')\n+\t    {\n+\t      invert = true;\n+\t      q++;\n+\t    }\n+\t  else\n+\t    invert = false;\n+\n+\t  if (! strcmp (q, \"all\"))\n+\t    mask = MASK_DEBUG_ALL;\n+\t  else if (! strcmp (q, \"stack\"))\n+\t    mask = MASK_DEBUG_STACK;\n+\t  else if (! strcmp (q, \"arg\"))\n+\t    mask = MASK_DEBUG_ARG;\n+\t  else if (! strcmp (q, \"reg\"))\n+\t    mask = MASK_DEBUG_REG;\n+\t  else if (! strcmp (q, \"addr\"))\n+\t    mask = MASK_DEBUG_ADDR;\n+\t  else if (! strcmp (q, \"cost\"))\n+\t    mask = MASK_DEBUG_COST;\n+\t  else if (! strcmp (q, \"target\"))\n+\t    mask = MASK_DEBUG_TARGET;\n+\t  else if (! strcmp (q, \"builtin\"))\n+\t    mask = MASK_DEBUG_BUILTIN;\n+\t  else\n+\t    error_at (loc, \"unknown -mdebug-%s switch\", q);\n+\n+\t  if (invert)\n+\t    opts->x_rs6000_debug &= ~mask;\n+\t  else\t\n+\t    opts->x_rs6000_debug |= mask;\n+\t}\n+      break;\n+\n+#ifdef TARGET_USES_SYSV4_OPT\n+    case OPT_mrelocatable:\n+      if (value == 1)\n+\t{\n+\t  opts->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_MINIMAL_TOC;\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n+\t}\n+      break;\n+\n+    case OPT_mrelocatable_lib:\n+      if (value == 1)\n+\t{\n+\t  opts->x_rs6000_isa_flags |= (OPTION_MASK_RELOCATABLE\n+\t\t\t\t       | OPTION_MASK_MINIMAL_TOC);\n+\t  opts_set->x_rs6000_isa_flags |= (OPTION_MASK_RELOCATABLE\n+\t\t\t\t\t   | OPTION_MASK_MINIMAL_TOC);\n+\t  opts->x_TARGET_NO_FP_IN_TOC = 1;\n+\t}\n+      else\n+\t{\n+\t  opts->x_rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\n+\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_RELOCATABLE;\n+\t}\n+      break;\n+#endif\n+\n+    case OPT_mabi_altivec:\n+      /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n+      opts->x_rs6000_spe_abi = 0;\n+      break;\n+\n+    case OPT_mabi_spe:\n+      opts->x_rs6000_altivec_abi = 0;\n+      break;\n+\n+    case OPT_mlong_double_:\n+      if (value != 64 && value != 128)\n+\t{\n+\t  error_at (loc, \"unknown switch -mlong-double-%s\", arg);\n+\t  opts->x_rs6000_long_double_type_size\n+\t    = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n+\t  return false;\n+\t}\n+      break;\n+\n+    case OPT_msingle_float:\n+      if (!TARGET_SINGLE_FPU) \n+\twarning_at (loc, 0,\n+\t\t    \"-msingle-float option equivalent to -mhard-float\");\n+      /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n+      opts->x_rs6000_double_float = 0;\n+      opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n+      break;\n+\n+    case OPT_mdouble_float:\n+      /* -mdouble-float implies -msingle-float and TARGET_HARD_FLOAT. */\n+      opts->x_rs6000_single_float = 1;\n+      opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n+      opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n+      break;\n+\n+    case OPT_msimple_fpu:\n+      if (!TARGET_SINGLE_FPU) \n+\twarning_at (loc, 0, \"-msimple-fpu option ignored\");\n+      break;\n+\n+    case OPT_mhard_float:\n+      /* -mhard_float implies -msingle-float and -mdouble-float. */\n+      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n+      break;\n+\n+    case OPT_msoft_float:\n+      /* -msoft_float implies -mnosingle-float and -mnodouble-float. */\n+      opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n+      break;\n+\n+    case OPT_mfpu_:\n+      fpu_type = (enum fpu_type_t) value;\n+      if (fpu_type != FPU_NONE)\n+\t{\n+\t  /* If -mfpu is not none, then turn off SOFT_FLOAT, turn on\n+\t     HARD_FLOAT. */\n+\t  opts->x_rs6000_isa_flags &= ~OPTION_MASK_SOFT_FLOAT;\n+\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n+\t  opts->x_rs6000_xilinx_fpu = 1;\n+\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_SF_FULL) \n+\t    opts->x_rs6000_single_float = 1;\n+\t  if (fpu_type == FPU_DF_LITE || fpu_type == FPU_DF_FULL) \n+\t    opts->x_rs6000_single_float = opts->x_rs6000_double_float = 1;\n+\t  if (fpu_type == FPU_SF_LITE || fpu_type == FPU_DF_LITE) \n+\t    opts->x_rs6000_simple_fpu = 1;\n+\t}\n+      else\n+\t{\n+\t  /* -mfpu=none is equivalent to -msoft-float.  */\n+\t  opts->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n+\t  opts_set->x_rs6000_isa_flags |= OPTION_MASK_SOFT_FLOAT;\n+\t  opts->x_rs6000_single_float = opts->x_rs6000_double_float = 0;\n+\t}\n+      break;\n+\n+    case OPT_mrecip:\n+      opts->x_rs6000_recip_name = (value) ? \"default\" : \"none\";\n+      break;\n+    }\n+  return true;\n+}\n+\n+/* -fsplit-stack uses a field in the TCB, available with glibc-2.19.\n+   We also allow 2.18 because alignment padding guarantees that the\n+   space is available there too.  */\n+\n+static bool\n+rs6000_supports_split_stack (bool report,\n+\t\t\t     struct gcc_options *opts ATTRIBUTE_UNUSED)\n+{\n+#ifndef TARGET_GLIBC_MAJOR\n+#define TARGET_GLIBC_MAJOR 0\n+#endif\n+#ifndef TARGET_GLIBC_MINOR\n+#define TARGET_GLIBC_MINOR 0\n+#endif\n+  /* Note: Can't test DEFAULT_ABI here, it isn't set until later.  */\n+  if (TARGET_GLIBC_MAJOR * 1000 + TARGET_GLIBC_MINOR >= 2018\n+      && TARGET_64BIT\n+      && TARGET_ELF)\n+    return true;\n+\n+  if (report)\n+    error (\"%<-fsplit-stack%> currently only supported on PowerPC64 GNU/Linux with glibc-2.18 or later\");\n+  return false;\n+}\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION rs6000_handle_option\n+\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT rs6000_option_init_struct\n+\n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE rs6000_option_optimization_table\n+\n+#undef TARGET_SUPPORTS_SPLIT_STACK\n+#define TARGET_SUPPORTS_SPLIT_STACK rs6000_supports_split_stack\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "f55dcaa335bc2d7e326af80a250cf72e8b0cf351", "filename": "gcc/config.gcc", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -442,6 +442,16 @@ nios2-*-*)\n nvptx-*-*)\n \tcpu_type=nvptx\n \t;;\n+powerpc*-*-*spe*)\n+\tcpu_type=powerpcspe\n+\textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h paired.h spu2vmx.h vec_types.h si2vmx.h htmintrin.h htmxlintrin.h\"\n+\tcase x$with_cpu in\n+\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456789]|xpower6x|xrs64a|xcell|xa2|xe500mc64|xe5500|xe6500)\n+\t\tcpu_is_64bit=yes\n+\t\t;;\n+\tesac\n+\textra_options=\"${extra_options} g.opt fused-madd.opt powerpcspe/powerpcspe-tables.opt\"\n+\t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n \textra_headers=\"ppc-asm.h altivec.h htmintrin.h htmxlintrin.h\"\n@@ -2372,9 +2382,9 @@ powerpc-*-netbsd*)\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \t;;\n powerpc-*-eabispe*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabispe.h\"\n-\textra_options=\"${extra_options} rs6000/sysv4.opt\"\n-\ttmake_file=\"rs6000/t-spe rs6000/t-ppccomm\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h ${cpu_type}/sysv4.h ${cpu_type}/eabi.h ${cpu_type}/e500.h ${cpu_type}/eabispe.h\"\n+\textra_options=\"${extra_options} ${cpu_type}/sysv4.opt\"\n+\ttmake_file=\"${cpu_type}/t-spe ${cpu_type}/t-ppccomm\"\n \tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-eabisimaltivec*)\n@@ -2412,11 +2422,27 @@ powerpc-*-eabi*)\n \ttmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm\"\n \tuse_gcc_stdint=wrap\n \t;;\n+powerpc-*-rtems*spe*)\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h powerpcspe/sysv4.h powerpcspe/eabi.h powerpcspe/e500.h powerpcspe/rtems.h rtems.h\"\n+\textra_options=\"${extra_options} powerpcspe/sysv4.opt\"\n+\ttmake_file=\"${tmake_file} powerpcspe/t-fprules powerpcspe/t-rtems powerpcspe/t-ppccomm\"\n+\t;;\n powerpc-*-rtems*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/rtems.h rtems.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"${tmake_file} rs6000/t-fprules rs6000/t-rtems rs6000/t-ppccomm\"\n \t;;\n+powerpc*-*-linux*spe*)\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h gnu-user.h freebsd-spec.h powerpcspe/sysv4.h\"\n+\textra_options=\"${extra_options} powerpcspe/sysv4.opt\"\n+\ttmake_file=\"${tmake_file} powerpcspe/t-fprules powerpcspe/t-ppccomm\"\n+\textra_objs=\"$extra_objs powerpcspe-linux.o\"\n+\tmaybe_biarch=\n+\ttm_file=\"${tm_file} powerpcspe/linux.h glibc-stdint.h\"\n+\ttmake_file=\"${tmake_file} powerpcspe/t-ppcos powerpcspe/t-linux\"\n+\ttm_file=\"${tm_file} powerpcspe/linuxspe.h powerpcspe/e500.h\"\n+\tdefault_gnu_indirect_function=yes\n+\t;;\n powerpc*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h gnu-user.h freebsd-spec.h rs6000/sysv4.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n@@ -2504,6 +2530,13 @@ powerpc*-*-linux*)\n \t\t    ;;\n \tesac\n \t;;\n+powerpc-wrs-vxworksspe)\n+\ttm_file=\"${tm_file} elfos.h freebsd-spec.h powerpcspe/sysv4.h\"\n+\ttmake_file=\"${tmake_file} powerpcspe/t-fprules powerpcspe/t-ppccomm powerpcspe/t-vxworks\"\n+\textra_options=\"${extra_options} powerpcspe/sysv4.opt\"\n+\textra_headers=ppc-asm.h\n+\ttm_file=\"${tm_file} vx-common.h vxworks.h powerpcspe/vxworks.h powerpcspe/e500.h\"\n+\t;;\n powerpc-wrs-vxworks|powerpc-wrs-vxworksae|powerpc-wrs-vxworksmils)\n \ttm_file=\"${tm_file} elfos.h freebsd-spec.h rs6000/sysv4.h\"\n \ttmake_file=\"${tmake_file} rs6000/t-fprules rs6000/t-ppccomm rs6000/t-vxworks\"\n@@ -3060,7 +3093,7 @@ i[34567]86-*-* | x86_64-*-*)\n \ttmake_file=\"${tmake_file} i386/t-gmm_malloc i386/t-i386\"\n \t;;\n powerpc*-*-* | rs6000-*-*)\n-\ttm_file=\"${tm_file} rs6000/option-defaults.h\"\n+\ttm_file=\"${tm_file} ${cpu_type}/option-defaults.h\"\n esac\n \n # Build mkoffload tool\n@@ -4554,10 +4587,10 @@ case ${target} in\n \t\tthen\n \t\t\ttarget_cpu_default2=\"\\\\\\\"$with_cpu\\\\\\\"\"\n \t\tfi\n-\t\tout_file=rs6000/rs6000.c\n-\t\tc_target_objs=\"${c_target_objs} rs6000-c.o\"\n-\t\tcxx_target_objs=\"${cxx_target_objs} rs6000-c.o\"\n-\t\ttmake_file=\"rs6000/t-rs6000 ${tmake_file}\"\n+\t\tout_file=\"${cpu_type}/${cpu_type}.c\"\n+\t\tc_target_objs=\"${c_target_objs} ${cpu_type}-c.o\"\n+\t\tcxx_target_objs=\"${cxx_target_objs} ${cpu_type}-c.o\"\n+\t\ttmake_file=\"${cpu_type}/t-${cpu_type} ${tmake_file}\"\n \t\t;;\n \n \tsh[123456ble]*-*-* | sh-*-*)"}, {"sha": "48120ae1c89cef31ae2c4af7cfe87b376642374b", "filename": "gcc/config.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -144,6 +144,10 @@ case ${host} in\n   rs6000-*-* \\\n   | powerpc*-*-* )\n     case ${target} in\n+      powerpc*-*-*spe*)\n+        host_extra_gcc_objs=\"driver-powerpcspe.o\"\n+        host_xmake_file=\"${host_xmake_file} powerpcspe/x-powerpcspe\"\n+        ;;\n       rs6000-*-* \\\n       | powerpc*-*-* )\n         host_extra_gcc_objs=\"driver-rs6000.o\""}, {"sha": "d832a90c40988086e3c63a2d02b5178f5868d30c", "filename": "gcc/config/powerpcspe/40x.md", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F40x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F40x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F40x.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,124 @@\n+;; Scheduling description for IBM PowerPC 403 and PowerPC 405  processors.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppc40x,ppc40xiu\")\n+(define_cpu_unit \"bpu_40x,fpu_405\" \"ppc40x\")\n+(define_cpu_unit \"iu_40x\" \"ppc40xiu\")\n+\n+;; PPC401 / PPC403 / PPC405 32-bit integer only  IU BPU\n+;; Embedded PowerPC controller\n+;; In-order execution\n+;; Max issue two insns/cycle (includes one branch)\n+(define_insn_reservation \"ppc403-load\" 2\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-store\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x,iu_40x\")\n+\n+(define_insn_reservation \"ppc403-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x,iu_40x,iu_40x\")\n+\n+(define_insn_reservation \"ppc403-compare\" 3\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x,nothing,bpu_40x\")\n+\n+(define_insn_reservation \"ppc403-imul\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"cpu\" \"ppc403\"))\n+  \"iu_40x*4\")\n+\n+(define_insn_reservation \"ppc405-imul\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"iu_40x*4\")\n+\n+(define_insn_reservation \"ppc405-imul2\" 3\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"16\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"iu_40x*2\")\n+\n+(define_insn_reservation \"ppc405-imul3\" 2\n+  (and (ior (eq_attr \"type\" \"halfmul\")\n+\t    (and (eq_attr \"type\" \"mul\")\n+\t\t (eq_attr \"size\" \"8\")))\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-idiv\" 33\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x*33\")\n+\n+(define_insn_reservation \"ppc403-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"iu_40x\")\n+\n+(define_insn_reservation \"ppc403-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"bpu_40x\")\n+\n+(define_insn_reservation \"ppc403-cr\" 2\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc403,ppc405\"))\n+  \"bpu_40x\")\n+\n+(define_insn_reservation \"ppc405-float\" 11\n+  (and (eq_attr \"type\" \"fpload,fpstore,fpcompare,fp,fpsimple,dmul,sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"fpu_405*10\")"}, {"sha": "80964e8bbac01fdd4fb8f6a8425f782b376b065c", "filename": "gcc/config/powerpcspe/440.md", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F440.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F440.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F440.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,138 @@\n+;; Scheduling description for IBM PowerPC 440 processor.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; PPC440 Embedded PowerPC controller\n+;; dual issue\n+;; i_pipe - complex integer / compare / branch\n+;; j_pipe - simple integer arithmetic\n+;; l_pipe - load-store\n+;; f_pipe - floating point arithmetic\n+\n+(define_automaton \"ppc440_core,ppc440_apu\")\n+(define_cpu_unit \"ppc440_i_pipe,ppc440_j_pipe,ppc440_l_pipe\" \"ppc440_core\")\n+(define_cpu_unit \"ppc440_f_pipe\" \"ppc440_apu\")\n+(define_cpu_unit \"ppc440_issue_0,ppc440_issue_1\" \"ppc440_core\")\n+\n+(define_reservation \"ppc440_issue\" \"ppc440_issue_0|ppc440_issue_1\")\n+\n+\n+(define_insn_reservation \"ppc440-load\" 3\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_l_pipe\")\n+\n+(define_insn_reservation \"ppc440-store\" 3\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_l_pipe\")\n+\n+(define_insn_reservation \"ppc440-fpload\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_l_pipe\")\n+\n+(define_insn_reservation \"ppc440-fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_l_pipe\")\n+\n+(define_insn_reservation \"ppc440-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe|ppc440_j_pipe\")\n+\n+(define_insn_reservation \"ppc440-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue_0+ppc440_issue_1,\\\n+   ppc440_i_pipe|ppc440_j_pipe,ppc440_i_pipe|ppc440_j_pipe\")\n+\n+(define_insn_reservation \"ppc440-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue_0+ppc440_issue_1,ppc440_i_pipe|ppc440_j_pipe,\\\n+   ppc440_i_pipe|ppc440_j_pipe,ppc440_i_pipe|ppc440_j_pipe\")\n+\n+(define_insn_reservation \"ppc440-imul\" 3\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-imul2\" 2\n+  (and (ior (eq_attr \"type\" \"halfmul\")\n+\t    (and (eq_attr \"type\" \"mul\")\n+\t\t (eq_attr \"size\" \"8,16\")))\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-idiv\" 34\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe*33\")\n+\n+(define_insn_reservation \"ppc440-branch\" 1\n+  (and (eq_attr \"type\" \"branch,jmpreg,isync\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-compare\" 2\n+  (and (ior (eq_attr \"type\" \"cmp,cr_logical,delayed_cr,mfcr\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-fpcompare\" 3 ; 2\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_f_pipe+ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-fp\" 5\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_f_pipe\")\n+\n+(define_insn_reservation \"ppc440-sdiv\" 19\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_f_pipe*15\")\n+\n+(define_insn_reservation \"ppc440-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_f_pipe*29\")\n+\n+(define_insn_reservation \"ppc440-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+\n+(define_insn_reservation \"ppc440-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc440\"))\n+  \"ppc440_issue,ppc440_i_pipe\")\n+"}, {"sha": "f22e399b6c5fe3ba683f53e30bb2c987bb38c93d", "filename": "gcc/config/powerpcspe/476.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F476.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F476.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F476.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,32 @@\n+/* Enable IBM PowerPC 476 support.\n+   Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+   Contributed by Peter Bergner (bergner@vnet.ibm.com)\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef TARGET_LINK_STACK\n+#define TARGET_LINK_STACK (rs6000_link_stack)\n+\n+#undef SET_TARGET_LINK_STACK\n+#define SET_TARGET_LINK_STACK(X) do { TARGET_LINK_STACK = (X); } while (0)\n+\n+#undef TARGET_ASM_CODE_END\n+#define TARGET_ASM_CODE_END rs6000_code_end"}, {"sha": "aefead25adaca725139ce0b41de3cee5762776f4", "filename": "gcc/config/powerpcspe/476.md", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F476.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F476.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F476.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,143 @@\n+;; Scheduling description for IBM PowerPC 476 processor.\n+;; Copyright (C) 2009-2017 Free Software Foundation, Inc.\n+;; Contributed by Peter Bergner (bergner@vnet.ibm.com).\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; PPC476 Embedded PowerPC controller\n+;; 3 issue (476) / 4 issue (476fp)\n+;;\n+;; i_pipe  - complex integer / compare\n+;; lj_pipe - load-store / simple integer arithmetic\n+;; b_pipe  - branch pipe\n+;; f_pipe  - floating point arithmetic\n+\n+(define_automaton \"ppc476_core,ppc476_apu\")\n+\n+(define_cpu_unit \"ppc476_i_pipe,ppc476_lj_pipe,ppc476_b_pipe\" \"ppc476_core\")\n+(define_cpu_unit \"ppc476_issue_fp,ppc476_f_pipe\" \"ppc476_apu\")\n+(define_cpu_unit \"ppc476_issue_0,ppc476_issue_1,ppc476_issue_2\" \"ppc476_core\")\n+\n+(define_reservation \"ppc476_issue\" \"ppc476_issue_0|ppc476_issue_1|ppc476_issue_2\")\n+(define_reservation \"ppc476_issue2\" \"ppc476_issue_0+ppc476_issue_1\\\n+\t\t\t\t    |ppc476_issue_0+ppc476_issue_2\\\n+\t\t\t\t    |ppc476_issue_1+ppc476_issue_2\")\n+(define_reservation \"ppc476_issue3\" \"ppc476_issue_0+ppc476_issue_1+ppc476_issue_2\")\n+\n+(define_insn_reservation \"ppc476-load\" 4\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_lj_pipe\")\n+\n+(define_insn_reservation \"ppc476-store\" 4\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_lj_pipe\")\n+\n+(define_insn_reservation \"ppc476-fpload\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_lj_pipe\")\n+\n+(define_insn_reservation \"ppc476-fpstore\" 4\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_lj_pipe\")\n+\n+(define_insn_reservation \"ppc476-simple-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_i_pipe|ppc476_lj_pipe\")\n+\n+(define_insn_reservation \"ppc476-complex-integer\" 1\n+  (and (eq_attr \"type\" \"cmp,cr_logical,delayed_cr,cntlz,isel,isync,sync,trap,popcnt\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_i_pipe\")\n+\n+(define_insn_reservation \"ppc476-compare\" 4\n+  (and (ior (eq_attr \"type\" \"mfcr,mfcrf,mtcr,mfjmpr,mtjmpr\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_i_pipe\")\n+\n+(define_insn_reservation \"ppc476-imul\" 4\n+  (and (eq_attr \"type\" \"mul,halfmul\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_i_pipe\")\n+\n+(define_insn_reservation \"ppc476-idiv\" 11\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_i_pipe*11\")\n+\n+(define_insn_reservation \"ppc476-branch\" 1\n+  (and (eq_attr \"type\" \"branch,jmpreg\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue,\\\n+   ppc476_b_pipe\")\n+\n+(define_insn_reservation \"ppc476-two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue2,\\\n+   ppc476_i_pipe|ppc476_lj_pipe,\\\n+   ppc476_i_pipe|ppc476_lj_pipe\")\n+\n+(define_insn_reservation \"ppc476-three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue3,\\\n+   ppc476_i_pipe|ppc476_lj_pipe,\\\n+   ppc476_i_pipe|ppc476_lj_pipe,\\\n+   ppc476_i_pipe|ppc476_lj_pipe\")\n+\n+(define_insn_reservation \"ppc476-fpcompare\" 6\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue+ppc476_issue_fp,\\\n+   ppc476_f_pipe+ppc476_i_pipe\")\n+\n+(define_insn_reservation \"ppc476-fp\" 6\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue_fp,\\\n+   ppc476_f_pipe\")\n+\n+(define_insn_reservation \"ppc476-sdiv\" 19\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue_fp,\n+   ppc476_f_pipe*19\")\n+\n+(define_insn_reservation \"ppc476-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc476\"))\n+  \"ppc476_issue_fp,\\\n+   ppc476_f_pipe*33\")\n+"}, {"sha": "c681d2c03a5252b4cf8724a61077aae09d9836c6", "filename": "gcc/config/powerpcspe/476.opt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F476.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F476.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F476.opt?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,24 @@\n+; IBM PowerPC 476 options.\n+;\n+; Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+; Contributed by Peter Bergner (bergner@vnet.ibm.com)\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+mpreserve-link-stack\n+Target Var(rs6000_link_stack) Init(-1) Save\n+Preserve the PowerPC 476's link stack by matching up a blr with the bcl/bl insns used for GOT accesses."}, {"sha": "792212602298dcf5584be44621574217111e5931", "filename": "gcc/config/powerpcspe/601.md", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F601.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F601.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F601.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,137 @@\n+;; Scheduling description for PowerPC 601 processor.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppc601,ppc601fp\")\n+(define_cpu_unit \"iu_ppc601\" \"ppc601\")\n+(define_cpu_unit \"fpu_ppc601\" \"ppc601fp\")\n+(define_cpu_unit \"bpu_ppc601\" \"ppc601\")\n+\n+;; PPC601  32-bit IU, FPU, BPU\n+\n+(define_insn_reservation \"ppc601-load\" 2\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-store\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-fpload\" 3\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601+fpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,add,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601,iu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601,iu_ppc601,iu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-imul\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601*5\")\n+\n+(define_insn_reservation \"ppc601-idiv\" 36\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601*36\")\n+\n+; compare executes on integer unit, but feeds insns which\n+; execute on the branch unit.\n+(define_insn_reservation \"ppc601-compare\" 3\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601,nothing,bpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"(fpu_ppc601+iu_ppc601*2),nothing*2,bpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-fp\" 4\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"fpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-dmul\" 5\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"fpu_ppc601*2\")\n+\n+(define_insn_reservation \"ppc601-sdiv\" 17\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"fpu_ppc601*17\")\n+\n+(define_insn_reservation \"ppc601-ddiv\" 31\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"fpu_ppc601*31\")\n+\n+(define_insn_reservation \"ppc601-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601,bpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-mtcr\" 4\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601,bpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-crlogical\" 4\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"bpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601,bpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"iu_ppc601,bpu_ppc601\")\n+\n+(define_insn_reservation \"ppc601-branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppc601\"))\n+  \"bpu_ppc601\")\n+"}, {"sha": "853746eb9125620e0c34a6c29c0e52f1a38f6d53", "filename": "gcc/config/powerpcspe/603.md", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F603.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,147 @@\n+;; Scheduling description for PowerPC 603 processor.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppc603,ppc603fp\")\n+(define_cpu_unit \"iu_603\" \"ppc603\")\n+(define_cpu_unit \"fpu_603\" \"ppc603fp\")\n+(define_cpu_unit \"lsu_603,bpu_603,sru_603\" \"ppc603\")\n+\n+;; PPC603/PPC603e 32-bit IU, LSU, FPU, BPU, SRU\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+\n+;; Branches go straight to the BPU.  All other insns are handled\n+;; by a dispatch unit which can issue a max of 2 insns per cycle.\n+\n+;; The PPC603e user's manual recommends that to reduce branch mispredictions,\n+;; the insn that sets CR bits should be separated from the branch insn\n+;; that evaluates them; separation by more than 9 insns ensures that the CR\n+;; bits will be immediately available for execution.\n+;; This could be artificially achieved by exaggerating the latency of\n+;; compare insns but at the expense of a poorer schedule.\n+\n+;; CR insns get executed in the SRU.  Not modelled.\n+\n+(define_insn_reservation \"ppc603-load\" 2\n+  (and (eq_attr \"type\" \"load,load_l\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"lsu_603\")\n+\n+(define_insn_reservation \"ppc603-store\" 2\n+  (and (eq_attr \"type\" \"store,fpstore\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"lsu_603*2\")\n+\n+(define_insn_reservation \"ppc603-fpload\" 2\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"lsu_603\")\n+\n+(define_insn_reservation \"ppc603-storec\" 8\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"lsu_603\")\n+\n+(define_insn_reservation \"ppc603-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603\")\n+\n+(define_insn_reservation \"ppc603-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603,iu_603\")\n+\n+(define_insn_reservation \"ppc603-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603,iu_603,iu_603\")\n+\n+; This takes 2 or 3 cycles\n+(define_insn_reservation \"ppc603-imul\" 3\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603*2\")\n+\n+(define_insn_reservation \"ppc603-imul2\" 2\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8,16\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603*2\")\n+\n+(define_insn_reservation \"ppc603-idiv\" 37\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603*37\")\n+\n+(define_insn_reservation \"ppc603-compare\" 3\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"iu_603,nothing,bpu_603\")\n+\n+(define_insn_reservation \"ppc603-fpcompare\" 3\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"(fpu_603+iu_603*2),bpu_603\")\n+\n+(define_insn_reservation \"ppc603-fp\" 3\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"fpu_603\")\n+\n+(define_insn_reservation \"ppc603-dmul\" 4\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"fpu_603*2\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppc603-sdiv\" 18\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"fpu_603*18\")\n+\n+(define_insn_reservation \"ppc603-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"fpu_603*33\")\n+\n+(define_insn_reservation \"ppc603-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr,mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"sru_603\")\n+\n+(define_insn_reservation \"ppc603-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"sru_603\")\n+\n+(define_insn_reservation \"ppc603-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr,isync,sync\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"sru_603\")\n+\n+(define_insn_reservation \"ppc603-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"ppc603\"))\n+  \"bpu_603\")\n+"}, {"sha": "64e5ebb7d6f2f0871262947edab50fedd4a089c7", "filename": "gcc/config/powerpcspe/6xx.md", "status": "added", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F6xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F6xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F6xx.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,284 @@\n+;; Scheduling description for PowerPC 604, PowerPC 604e, PowerPC 620,\n+;; and PowerPC 630 processors.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppc6xx,ppc6xxfp,ppc6xxfp2\")\n+(define_cpu_unit \"iu1_6xx,iu2_6xx,mciu_6xx\" \"ppc6xx\")\n+(define_cpu_unit \"fpu_6xx\" \"ppc6xxfp\")\n+(define_cpu_unit \"fpu1_6xx,fpu2_6xx\" \"ppc6xxfp2\")\n+(define_cpu_unit \"lsu_6xx,bpu_6xx,cru_6xx\" \"ppc6xx\")\n+\n+;; PPC604  32-bit 2xSCIU, MCIU, LSU, FPU, BPU\n+;; PPC604e  32-bit 2xSCIU, MCIU, LSU, FPU, BPU, CRU\n+;; MCIU used for imul/idiv and moves from/to spr\n+;; LSU 2 stage pipelined\n+;; FPU 3 stage pipelined\n+;; Max issue 4 insns/clock cycle\n+\n+;; PPC604e is PPC604 with larger caches and a CRU.  In the 604\n+;; the CR logical operations are handled in the BPU.\n+;; In the 604e, the CRU shares bus with BPU so only one condition\n+;; register or branch insn can be issued per clock.  Not modelled.\n+\n+;; PPC620  64-bit 2xSCIU, MCIU, LSU, FPU, BPU, CRU\n+;; PPC630 64-bit 2xSCIU, MCIU, LSU, 2xFPU, BPU, CRU\n+;; Max issue 4 insns/clock cycle\n+;; Out-of-order execution, in-order completion\n+\n+;; No following instruction can dispatch in the same cycle as a branch\n+;; instruction.  Not modelled.  This is no problem if RCSP is not\n+;; enabled since the scheduler stops a schedule when it gets to a branch.\n+\n+;; Four insns can be dispatched per cycle.\n+\n+(define_insn_reservation \"ppc604-load\" 2\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+\n+(define_insn_reservation \"ppc604-fpload\" 3\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+\n+(define_insn_reservation \"ppc604-store\" 3\n+  (and (eq_attr \"type\" \"store,fpstore\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+\n+(define_insn_reservation \"ppc604-llsc\" 3\n+  (and (eq_attr \"type\" \"load_l,store_c\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n+  \"lsu_6xx\")\n+  \n+(define_insn_reservation \"ppc630-llsc\" 4\n+  (and (eq_attr \"type\" \"load_l,store_c\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+  \n+(define_insn_reservation \"ppc604-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"iu1_6xx|iu2_6xx\")\n+\n+(define_insn_reservation \"ppc604-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"iu1_6xx|iu2_6xx,iu1_6xx|iu2_6xx\")\n+\n+(define_insn_reservation \"ppc604-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"iu1_6xx|iu2_6xx,iu1_6xx|iu2_6xx,iu1_6xx|iu2_6xx\")\n+\n+(define_insn_reservation \"ppc604-imul\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"cpu\" \"ppc604\"))\n+  \"mciu_6xx*2\")\n+\n+(define_insn_reservation \"ppc604e-imul\" 2\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"cpu\" \"ppc604e\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc620-imul\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*3\")\n+\n+(define_insn_reservation \"ppc620-imul2\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"16\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*3\")\n+\n+(define_insn_reservation \"ppc620-imul3\" 3\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*3\")\n+\n+(define_insn_reservation \"ppc620-lmul\" 7\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*5\")\n+\n+(define_insn_reservation \"ppc604-idiv\" 20\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n+  \"mciu_6xx*19\")\n+\n+(define_insn_reservation \"ppc620-idiv\" 37\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppc620\"))\n+  \"mciu_6xx*36\")\n+\n+(define_insn_reservation \"ppc630-idiv\" 21\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"mciu_6xx*20\")\n+\n+(define_insn_reservation \"ppc620-ldiv\" 37\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"mciu_6xx*36\")\n+\n+(define_insn_reservation \"ppc604-compare\" 3\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"(iu1_6xx|iu2_6xx)\")\n+\n+; FPU PPC604{,e},PPC620\n+(define_insn_reservation \"ppc604-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx\")\n+\n+(define_insn_reservation \"ppc604-fp\" 3\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx\")\n+\n+(define_insn_reservation \"ppc604-dmul\" 3\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppc604-sdiv\" 18\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx*18\")\n+\n+(define_insn_reservation \"ppc604-ddiv\" 32\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"fpu_6xx*32\")\n+\n+(define_insn_reservation \"ppc620-ssqrt\" 31\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppc620\"))\n+  \"fpu_6xx*31\")\n+\n+(define_insn_reservation \"ppc620-dsqrt\" 31\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppc620\"))\n+  \"fpu_6xx*31\")\n+\n+\n+; 2xFPU PPC630\n+(define_insn_reservation \"ppc630-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx|fpu2_6xx\")\n+\n+(define_insn_reservation \"ppc630-fp\" 3\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx|fpu2_6xx\")\n+\n+(define_insn_reservation \"ppc630-sdiv\" 17\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx*17|fpu2_6xx*17\")\n+\n+(define_insn_reservation \"ppc630-ddiv\" 21\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx*21|fpu2_6xx*21\")\n+\n+(define_insn_reservation \"ppc630-ssqrt\" 18\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx*18|fpu2_6xx*18\")\n+\n+(define_insn_reservation \"ppc630-dsqrt\" 25\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"fpu1_6xx*25|fpu2_6xx*25\")\n+\n+(define_insn_reservation \"ppc604-mfcr\" 3\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc604-mtcr\" 2\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"iu1_6xx|iu2_6xx\")\n+\n+(define_insn_reservation \"ppc604-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc604\"))\n+  \"bpu_6xx\")\n+\n+(define_insn_reservation \"ppc604e-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc604e,ppc620,ppc630\"))\n+  \"cru_6xx\")\n+\n+(define_insn_reservation \"ppc604-mtjmpr\" 2\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc604-mfjmpr\" 3\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc630-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  \"mciu_6xx\")\n+\n+(define_insn_reservation \"ppc604-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n+  \"bpu_6xx\")\n+\n+(define_insn_reservation \"ppc604-isync\" 0\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n+  \"bpu_6xx\")\n+  \n+(define_insn_reservation \"ppc630-isync\" 6\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"bpu_6xx\")\n+  \n+(define_insn_reservation \"ppc604-sync\" 35\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n+  \"lsu_6xx\")\n+  \n+(define_insn_reservation \"ppc630-sync\" 26\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  \"lsu_6xx\")\n+  "}, {"sha": "8617708fd8bd5a882452033a012e6adf0931b24c", "filename": "gcc/config/powerpcspe/7450.md", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F7450.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F7450.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F7450.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,188 @@\n+;; Scheduling description for Motorola PowerPC 7450 processor.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppc7450,ppc7450mciu,ppc7450fp,ppc7450vec\")\n+(define_cpu_unit \"iu1_7450,iu2_7450,iu3_7450\" \"ppc7450\")\n+(define_cpu_unit \"mciu_7450\" \"ppc7450mciu\")\n+(define_cpu_unit \"fpu_7450\" \"ppc7450fp\")\n+(define_cpu_unit \"lsu_7450,bpu_7450\" \"ppc7450\")\n+(define_cpu_unit \"du1_7450,du2_7450,du3_7450\" \"ppc7450\")\n+(define_cpu_unit \"vecsmpl_7450,veccmplx_7450,vecflt_7450,vecperm_7450\" \"ppc7450vec\")\n+(define_cpu_unit \"vdu1_7450,vdu2_7450\" \"ppc7450vec\")\n+\n+\n+;; PPC7450  32-bit 3xIU, MCIU, LSU, SRU, FPU, BPU, 4xVEC\n+;; IU1,IU2,IU3 can perform all integer operations\n+;; MCIU performs imul and idiv, cr logical, SPR moves\n+;; LSU 2 stage pipelined\n+;; FPU 3 stage pipelined\n+;; It also has 4 vector units, one for each type of vector instruction.\n+;; However, we can only dispatch 2 instructions per cycle. \n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+;; In-order execution\n+\n+;; Branches go straight to the BPU.  All other insns are handled\n+;; by a dispatch unit which can issue a max of 3 insns per cycle.\n+(define_reservation \"ppc7450_du\" \"du1_7450|du2_7450|du3_7450\")\n+(define_reservation \"ppc7450_vec_du\" \"vdu1_7450|vdu2_7450\")\n+\n+(define_insn_reservation \"ppc7450-load\" 3\n+  (and (eq_attr \"type\" \"load,vecload\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-store\" 3\n+  (and (eq_attr \"type\" \"store,vecstore\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-fpload\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450*3\")\n+\n+(define_insn_reservation \"ppc7450-llsc\" 3\n+  (and (eq_attr \"type\" \"load_l,store_c\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-sync\" 35\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,lsu_7450\")\n+\n+(define_insn_reservation \"ppc7450-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,iu1_7450|iu2_7450|iu3_7450\")\n+\n+(define_insn_reservation \"ppc7450-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,iu1_7450|iu2_7450|iu3_7450,iu1_7450|iu2_7450|iu3_7450\")\n+\n+(define_insn_reservation \"ppc7450-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,iu1_7450|iu2_7450|iu3_7450,\\\n+   iu1_7450|iu2_7450|iu3_7450,iu1_7450|iu2_7450|iu3_7450\")\n+\n+(define_insn_reservation \"ppc7450-imul\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450*2\")\n+\n+(define_insn_reservation \"ppc7450-imul2\" 3\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8,16\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450\")\n+\n+(define_insn_reservation \"ppc7450-idiv\" 23\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450*23\")\n+\n+(define_insn_reservation \"ppc7450-compare\" 2\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,(iu1_7450|iu2_7450|iu3_7450)\")\n+\n+(define_insn_reservation \"ppc7450-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,fpu_7450\")\n+\n+(define_insn_reservation \"ppc7450-fp\" 5\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,fpu_7450\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppc7450-sdiv\" 21\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,fpu_7450*21\")\n+\n+(define_insn_reservation \"ppc7450-ddiv\" 35\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,fpu_7450*35\")\n+\n+(define_insn_reservation \"ppc7450-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450\")\n+\n+(define_insn_reservation \"ppc7450-crlogical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,mciu_7450\")\n+\n+(define_insn_reservation \"ppc7450-mtjmpr\" 2\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"nothing,mciu_7450*2\")\n+\n+(define_insn_reservation \"ppc7450-mfjmpr\" 3\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"nothing,mciu_7450*2\")\n+\n+(define_insn_reservation \"ppc7450-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"nothing,bpu_7450\")\n+\n+;; Altivec\n+(define_insn_reservation \"ppc7450-vecsimple\" 1\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,vecsmpl_7450\")\n+\n+(define_insn_reservation \"ppc7450-veccomplex\" 4\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,veccmplx_7450\")\n+\n+(define_insn_reservation \"ppc7450-veccmp\" 2\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,veccmplx_7450\")\n+\n+(define_insn_reservation \"ppc7450-vecfloat\" 4\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,vecflt_7450\")\n+\n+(define_insn_reservation \"ppc7450-vecperm\" 2\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  \"ppc7450_du,ppc7450_vec_du,vecperm_7450\")\n+"}, {"sha": "b31f05fafd1068d24a06c8687ad658f81013a678", "filename": "gcc/config/powerpcspe/750cl.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F750cl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F750cl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F750cl.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,30 @@\n+/* Enable 750cl paired single support.\n+   Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+   Contributed by Revital Eres (eres@il.ibm.com)\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef TARGET_PAIRED_FLOAT\n+#define TARGET_PAIRED_FLOAT rs6000_paired_float\n+\n+#undef ASM_CPU_SPEC \n+#define ASM_CPU_SPEC \"-m750cl\"\n+"}, {"sha": "4001bf9405d1f1b4afbc1c427f93760694039788", "filename": "gcc/config/powerpcspe/7xx.md", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F7xx.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,186 @@\n+;; Scheduling description for Motorola PowerPC 750 and PowerPC 7400 processors.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppc7xx,ppc7xxfp\")\n+(define_cpu_unit \"iu1_7xx,iu2_7xx\" \"ppc7xx\")\n+(define_cpu_unit \"fpu_7xx\" \"ppc7xxfp\")\n+(define_cpu_unit \"lsu_7xx,bpu_7xx,sru_7xx\" \"ppc7xx\")\n+(define_cpu_unit \"du1_7xx,du2_7xx\" \"ppc7xx\")\n+(define_cpu_unit \"veccmplx_7xx,vecperm_7xx,vdu_7xx\" \"ppc7xx\")\n+\n+;; PPC740/PPC750/PPC7400  32-bit 2xIU, LSU, SRU, FPU, BPU\n+;; IU1 can perform all integer operations\n+;; IU2 can perform all integer operations except imul and idiv\n+;; LSU 2 stage pipelined\n+;; FPU 3 stage pipelined\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+;; In-order execution\n+\n+\n+;; The PPC750 user's manual recommends that to reduce branch mispredictions,\n+;; the insn that sets CR bits should be separated from the branch insn\n+;; that evaluates them.  There is no advantage have more than 10 cycles\n+;; of separation.\n+;; This could be artificially achieved by exaggerating the latency of\n+;; compare insns but at the expense of a poorer schedule.\n+\n+;; Branches go straight to the BPU.  All other insns are handled\n+;; by a dispatch unit which can issue a max of 2 insns per cycle.\n+(define_reservation \"ppc750_du\" \"du1_7xx|du2_7xx\")\n+(define_reservation \"ppc7400_vec_du\" \"vdu_7xx\")\n+\n+(define_insn_reservation \"ppc750-load\" 2\n+  (and (eq_attr \"type\" \"load,fpload,vecload,load_l\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,lsu_7xx\")\n+\n+(define_insn_reservation \"ppc750-store\" 2\n+  (and (eq_attr \"type\" \"store,fpstore,vecstore\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,lsu_7xx\")\n+\n+(define_insn_reservation \"ppc750-storec\" 8\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,lsu_7xx\")\n+\n+(define_insn_reservation \"ppc750-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx|iu2_7xx\")\n+\n+(define_insn_reservation \"ppc750-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx|iu2_7xx,iu1_7xx|iu2_7xx\")\n+\n+(define_insn_reservation \"ppc750-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx|iu2_7xx,iu1_7xx|iu2_7xx,iu1_7xx|iu2_7xx\")\n+\n+(define_insn_reservation \"ppc750-imul\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx*4\")\n+\n+(define_insn_reservation \"ppc750-imul2\" 3\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"16\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx*2\")\n+\n+(define_insn_reservation \"ppc750-imul3\" 2\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx\")\n+\n+(define_insn_reservation \"ppc750-idiv\" 19\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx*19\")\n+\n+(define_insn_reservation \"ppc750-compare\" 2\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,(iu1_7xx|iu2_7xx)\")\n+\n+(define_insn_reservation \"ppc750-fpcompare\" 2\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,fpu_7xx\")\n+\n+(define_insn_reservation \"ppc750-fp\" 3\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,fpu_7xx\")\n+\n+(define_insn_reservation \"ppc750-dmul\" 4\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc750\"))\n+  \"ppc750_du,fpu_7xx*2\")\n+\n+(define_insn_reservation \"ppc7400-dmul\" 3\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,fpu_7xx\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppc750-sdiv\" 17\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,fpu_7xx*17\")\n+\n+(define_insn_reservation \"ppc750-ddiv\" 31\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,fpu_7xx*31\")\n+\n+(define_insn_reservation \"ppc750-mfcr\" 2\n+  (and (eq_attr \"type\" \"mfcr,mtcr\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"ppc750_du,iu1_7xx\")\n+\n+(define_insn_reservation \"ppc750-crlogical\" 3\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"nothing,sru_7xx*2\")\n+\n+(define_insn_reservation \"ppc750-mtjmpr\" 2\n+  (and (eq_attr \"type\" \"mtjmpr,isync,sync\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"nothing,sru_7xx*2\")\n+\n+(define_insn_reservation \"ppc750-mfjmpr\" 3\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"nothing,sru_7xx*2\")\n+\n+(define_insn_reservation \"ppc750-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  \"nothing,bpu_7xx\")\n+\n+;; Altivec\n+(define_insn_reservation \"ppc7400-vecsimple\" 1\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove,veccmp,veccmpfx\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,ppc7400_vec_du,veccmplx_7xx\")\n+\n+(define_insn_reservation \"ppc7400-veccomplex\" 4\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,ppc7400_vec_du,veccmplx_7xx\")\n+\n+(define_insn_reservation \"ppc7400-vecfloat\" 4\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,ppc7400_vec_du,veccmplx_7xx\")\n+\n+(define_insn_reservation \"ppc7400-vecperm\" 2\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"ppc7400\"))\n+  \"ppc750_du,ppc7400_vec_du,vecperm_7xx\")\n+"}, {"sha": "fae369de0c3456339f98250ee398259617cfd40b", "filename": "gcc/config/powerpcspe/8540.md", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F8540.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2F8540.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2F8540.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,248 @@\n+;; Pipeline description for Motorola PowerPC 8540 processor.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppc8540_most,ppc8540_long,ppc8540_retire\")\n+(define_cpu_unit \"ppc8540_decode_0,ppc8540_decode_1\" \"ppc8540_most\")\n+\n+;; We don't simulate general issue queue (GIC).  If we have SU insn\n+;; and then SU1 insn, they cannot be issued on the same cycle\n+;; (although SU1 insn and then SU insn can be issued) because the SU\n+;; insn will go to SU1 from GIC0 entry.  Fortunately, the first cycle\n+;; multipass insn scheduling will find the situation and issue the SU1\n+;; insn and then the SU insn.\n+(define_cpu_unit \"ppc8540_issue_0,ppc8540_issue_1\"   \"ppc8540_most\")\n+\n+;; We could describe completion buffers slots in combination with the\n+;; retirement units and the order of completion but the result\n+;; automaton would behave in the same way because we cannot describe\n+;; real latency time with taking in order completion into account.\n+;; Actually we could define the real latency time by querying reserved\n+;; automaton units but the current scheduler uses latency time before\n+;; issuing insns and making any reservations.\n+;;\n+;; So our description is aimed to achieve a insn schedule in which the\n+;; insns would not wait in the completion buffer.\n+(define_cpu_unit \"ppc8540_retire_0,ppc8540_retire_1\" \"ppc8540_retire\")\n+\n+;; Branch unit:\n+(define_cpu_unit \"ppc8540_bu\" \"ppc8540_most\")\n+\n+;; SU:\n+(define_cpu_unit \"ppc8540_su0_stage0,ppc8540_su1_stage0\" \"ppc8540_most\")\n+\n+;; We could describe here MU subunits for float multiply, float add\n+;; etc.  But the result automaton would behave the same way as the\n+;; described one pipeline below because MU can start only one insn\n+;; per cycle.  Actually we could simplify the automaton more not\n+;; describing stages 1-3, the result automata would be the same.\n+(define_cpu_unit \"ppc8540_mu_stage0,ppc8540_mu_stage1\" \"ppc8540_most\")\n+(define_cpu_unit \"ppc8540_mu_stage2,ppc8540_mu_stage3\" \"ppc8540_most\")\n+\n+;; The following unit is used to describe non-pipelined division.\n+(define_cpu_unit \"ppc8540_mu_div\" \"ppc8540_long\")\n+\n+;; Here we simplified LSU unit description not describing the stages.\n+(define_cpu_unit \"ppc8540_lsu\" \"ppc8540_most\")\n+\n+;; The following units are used to make automata deterministic\n+(define_cpu_unit \"present_ppc8540_decode_0\" \"ppc8540_most\")\n+(define_cpu_unit \"present_ppc8540_issue_0\" \"ppc8540_most\")\n+(define_cpu_unit \"present_ppc8540_retire_0\" \"ppc8540_retire\")\n+(define_cpu_unit \"present_ppc8540_su0_stage0\" \"ppc8540_most\")\n+\n+;; The following sets to make automata deterministic when option ndfa is used.\n+(presence_set \"present_ppc8540_decode_0\" \"ppc8540_decode_0\")\n+(presence_set \"present_ppc8540_issue_0\" \"ppc8540_issue_0\")\n+(presence_set \"present_ppc8540_retire_0\" \"ppc8540_retire_0\")\n+(presence_set \"present_ppc8540_su0_stage0\" \"ppc8540_su0_stage0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"ppc8540_decode\"\n+    \"ppc8540_decode_0|ppc8540_decode_1+present_ppc8540_decode_0\")\n+(define_reservation \"ppc8540_issue\"\n+    \"ppc8540_issue_0|ppc8540_issue_1+present_ppc8540_issue_0\")\n+(define_reservation \"ppc8540_retire\"\n+   \"ppc8540_retire_0|ppc8540_retire_1+present_ppc8540_retire_0\")\n+(define_reservation \"ppc8540_su_stage0\"\n+   \"ppc8540_su0_stage0|ppc8540_su1_stage0+present_ppc8540_su0_stage0\")\n+\n+;; Simple SU insns\n+(define_insn_reservation \"ppc8540_su\" 1\n+  (and (eq_attr \"type\" \"integer,add,logical,insert,cmp,\\\n+                        shift,trap,cntlz,exts,isel\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n+\n+(define_insn_reservation \"ppc8540_two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire,\\\n+   ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n+\n+(define_insn_reservation \"ppc8540_three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire,\\\n+   ppc8540_issue+ppc8540_su_stage0+ppc8540_retire,\\\n+   ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n+\n+;; Branch.  Actually this latency time is not used by the scheduler.\n+(define_insn_reservation \"ppc8540_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_bu,ppc8540_retire\")\n+\n+;; Multiply\n+(define_insn_reservation \"ppc8540_multiply\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0,ppc8540_mu_stage1,\\\n+   ppc8540_mu_stage2,ppc8540_mu_stage3+ppc8540_retire\")\n+\n+;; Divide.  We use the average latency time here.  We omit reserving a\n+;; retire unit because of the result automata will be huge.  We ignore\n+;; reservation of miu_stage3 here because we use the average latency\n+;; time.\n+(define_insn_reservation \"ppc8540_divide\" 14\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0+ppc8540_mu_div,\\\n+   ppc8540_mu_div*13\")\n+\n+;; CR logical\n+(define_insn_reservation \"ppc8540_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_bu,ppc8540_retire\")\n+\n+;; Mfcr\n+(define_insn_reservation \"ppc8540_mfcr\" 1\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n+\n+;; Mtcrf\n+(define_insn_reservation \"ppc8540_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n+\n+;; Mtjmpr\n+(define_insn_reservation \"ppc8540_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n+\n+;; Loads\n+(define_insn_reservation \"ppc8540_load\" 3\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n+\n+;; Stores.\n+(define_insn_reservation \"ppc8540_store\" 3\n+  (and (eq_attr \"type\" \"store,store_c\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n+\n+;; Simple FP\n+(define_insn_reservation \"ppc8540_simple_float\" 1\n+  (and (eq_attr \"type\" \"fpsimple\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n+\n+;; FP\n+(define_insn_reservation \"ppc8540_float\" 4\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0,ppc8540_mu_stage1,\\\n+   ppc8540_mu_stage2,ppc8540_mu_stage3+ppc8540_retire\")\n+\n+;; float divides.  We omit reserving a retire unit and miu_stage3\n+;; because of the result automata will be huge.\n+(define_insn_reservation \"ppc8540_float_vector_divide\" 29\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0+ppc8540_mu_div,\\\n+   ppc8540_mu_div*28\")\n+\n+;; Brinc\n+(define_insn_reservation \"ppc8540_brinc\" 1\n+  (and (eq_attr \"type\" \"brinc\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n+\n+;; Simple vector\n+(define_insn_reservation \"ppc8540_simple_vector\" 1\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n+\n+;; Simple vector compare\n+(define_insn_reservation \"ppc8540_simple_vector_compare\" 1\n+  (and (eq_attr \"type\" \"veccmpsimple\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n+\n+;; Vector compare\n+(define_insn_reservation \"ppc8540_vector_compare\" 1\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n+\n+;; evsplatfi evsplati\n+(define_insn_reservation \"ppc8540_vector_perm\" 1\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n+\n+;; Vector float\n+(define_insn_reservation \"ppc8540_float_vector\" 4\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0,ppc8540_mu_stage1,\\\n+   ppc8540_mu_stage2,ppc8540_mu_stage3+ppc8540_retire\")\n+\n+;; Vector divides: Use the average.  We omit reserving a retire unit\n+;; because of the result automata will be huge.  We ignore reservation\n+;; of miu_stage3 here because we use the average latency time.\n+(define_insn_reservation \"ppc8540_vector_divide\" 14\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0+ppc8540_mu_div,\\\n+   ppc8540_mu_div*13\")\n+\n+;; Complex vector.\n+(define_insn_reservation \"ppc8540_complex_vector\" 4\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0,ppc8540_mu_stage1,\\\n+   ppc8540_mu_stage2,ppc8540_mu_stage3+ppc8540_retire\")\n+\n+;; Vector load\n+(define_insn_reservation \"ppc8540_vector_load\" 3\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n+\n+;; Vector store\n+(define_insn_reservation \"ppc8540_vector_store\" 3\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n+  \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")"}, {"sha": "d8dd3268f71db38fca408bb8c4702f5d3b0749d7", "filename": "gcc/config/powerpcspe/a2.md", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fa2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fa2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fa2.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,138 @@\n+;; Scheduling description for PowerPC A2 processors.\n+;; Copyright (C) 2009-2017 Free Software Foundation, Inc.\n+;; Contributed by Ben Elliston (bje@au.ibm.com)\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppca2\")\n+\n+;; CPU units\n+\n+;; The multiplier pipeline.\n+(define_cpu_unit \"mult\" \"ppca2\")\n+\n+;; The auxiliary processor unit (FP/vector unit).\n+(define_cpu_unit \"axu\" \"ppca2\")\n+\n+;; D.4.6\n+;; Some peculiarities for certain SPRs\n+\n+(define_insn_reservation \"ppca2-mfcr\" 1\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"nothing\")\n+\n+(define_insn_reservation \"ppca2-mfjmpr\" 5\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+(define_insn_reservation \"ppca2-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; D.4.8\n+(define_insn_reservation \"ppca2-imul\" 1\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8,16,32\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; FIXME: latency and multiplier reservation for 64-bit multiply?\n+(define_insn_reservation \"ppca2-lmul\" 6\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*3\")\n+\n+;; D.4.9\n+(define_insn_reservation \"ppca2-idiv\" 32\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*32\")\n+\n+(define_insn_reservation \"ppca2-ldiv\" 65\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"mult*65\")\n+\n+;; D.4.13\n+(define_insn_reservation \"ppca2-load\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"nothing\")\n+\n+;; D.8.1\n+(define_insn_reservation \"ppca2-fp\" 6\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.4\n+(define_insn_reservation \"ppca2-fp-load\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.5\n+(define_insn_reservation \"ppca2-fp-store\" 2\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+;; D.8.6\n+(define_insn_reservation \"ppca2-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+ \"axu\")\n+\n+;; D.8.7\n+;;\n+;; Instructions from the same thread succeeding the floating-point\n+;; divide cannot be executed until the floating-point divide has\n+;; completed.  Since there is nothing else we can do, this thread will\n+;; just have to stall.\n+\n+(define_insn_reservation \"ppca2-ddiv\" 72\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"axu\")\n+\n+(define_insn_reservation \"ppca2-sdiv\" 59\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+   \"axu\")\n+\n+;; D.8.8\n+;; \n+;; Instructions from the same thread succeeding the floating-point\n+;; divide cannot be executed until the floating-point divide has\n+;; completed.  Since there is nothing else we can do, this thread will\n+;; just have to stall.\n+\n+(define_insn_reservation \"ppca2-dsqrt\" 69\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")\n+\n+(define_insn_reservation \"ppca2-ssqrt\" 65\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppca2\"))\n+  \"axu\")"}, {"sha": "77cc699daaf884e0dfc3dd8b7c1b3d83abac46cf", "filename": "gcc/config/powerpcspe/aix-stdint.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix-stdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix-stdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix-stdint.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,51 @@\n+/* Definitions for <stdint.h> types on systems using AIX.\n+   Copyright (C) 2009-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define SIG_ATOMIC_TYPE \"int\"\n+\n+#define INT8_TYPE \"signed char\"\n+#define INT16_TYPE \"short int\"\n+#define INT32_TYPE \"int\"\n+#define INT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT8_TYPE \"unsigned char\"\n+#define UINT16_TYPE \"short unsigned int\"\n+#define UINT32_TYPE \"unsigned int\"\n+#define UINT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INT_LEAST8_TYPE \"signed char\"\n+#define INT_LEAST16_TYPE \"short int\"\n+#define INT_LEAST32_TYPE \"int\"\n+#define INT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT_LEAST8_TYPE \"unsigned char\"\n+#define UINT_LEAST16_TYPE \"short unsigned int\"\n+#define UINT_LEAST32_TYPE \"unsigned int\"\n+#define UINT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INT_FAST8_TYPE \"signed char\"\n+#define INT_FAST16_TYPE \"short int\"\n+#define INT_FAST32_TYPE \"int\"\n+#define INT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT_FAST8_TYPE \"unsigned char\"\n+#define UINT_FAST16_TYPE \"short unsigned int\"\n+#define UINT_FAST32_TYPE \"unsigned int\"\n+#define UINT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INTPTR_TYPE \"long int\"\n+#define UINTPTR_TYPE \"long unsigned int\"\n+"}, {"sha": "b90e2b065195a0ec0ade7c14ffae4709cec1e5bd", "filename": "gcc/config/powerpcspe/aix.h", "status": "added", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,278 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX.\n+   Copyright (C) 2000-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Yes!  We are AIX!  */\n+#define DEFAULT_ABI ABI_AIX\n+#undef  TARGET_AIX\n+#define TARGET_AIX 1\n+\n+/* Linux64.h wants to redefine TARGET_AIX based on -m64, but it can't be used\n+   in the #if conditional in options-default.h, so provide another macro.  */\n+#undef  TARGET_AIX_OS\n+#define TARGET_AIX_OS 1\n+\n+/* AIX always has a TOC.  */\n+#define TARGET_NO_TOC 0\n+#define TARGET_TOC 1\n+#define FIXED_R2 1\n+\n+/* AIX allows r13 to be used in 32-bit mode.  */\n+#define FIXED_R13 0\n+\n+/* 32-bit and 64-bit AIX stack boundary is 128.  */\n+#undef  STACK_BOUNDARY\n+#define STACK_BOUNDARY 128\n+\n+/* Offset within stack frame to start allocating local variables at.\n+   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n+   first local allocated.  Otherwise, it is the offset to the BEGINNING\n+   of the first local allocated.\n+\n+   On the RS/6000, the frame pointer is the same as the stack pointer,\n+   except for dynamic allocations.  So we start after the fixed area and\n+   outgoing parameter area.\n+\n+   If the function uses dynamic stack space (CALLS_ALLOCA is set), that\n+   space needs to be aligned to STACK_BOUNDARY, i.e. the sum of the\n+   sizes of the fixed area and the parameter area must be a multiple of\n+   STACK_BOUNDARY.  */\n+\n+#undef STARTING_FRAME_OFFSET\n+#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n+  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n+   ? 0\t\t\t\t\t\t\t\t\t\\\n+   : (cfun->calls_alloca\t\t\t\t\t\t\\\n+      ? RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA, 16)\t\\\n+      : (RS6000_ALIGN (crtl->outgoing_args_size, 16) + RS6000_SAVE_AREA)))\n+\n+/* Offset from the stack pointer register to an item dynamically\n+   allocated on the stack, e.g., by `alloca'.\n+\n+   The default value for this macro is `STACK_POINTER_OFFSET' plus the\n+   length of the outgoing arguments.  The default is correct for most\n+   machines.  See `function.c' for details.\n+\n+   This value must be a multiple of STACK_BOUNDARY (hard coded in\n+   `emit-rtl.c').  */\n+#undef STACK_DYNAMIC_OFFSET\n+#define STACK_DYNAMIC_OFFSET(FUNDECL)\t\t\t\t\t\\\n+   RS6000_ALIGN (crtl->outgoing_args_size + STACK_POINTER_OFFSET, 16)\n+\n+#undef  TARGET_IEEEQUAD\n+#define TARGET_IEEEQUAD 0\n+\n+/* The AIX linker will discard static constructors in object files before\n+   collect has a chance to see them, so scan the object files directly.  */\n+#define COLLECT_EXPORT_LIST\n+\n+/* On AIX, initialisers specified with -binitfini are called in breadth-first\n+   order.\n+   e.g. if a.out depends on lib1.so, the init function for a.out is called before\n+   the init function for lib1.so.\n+\n+   To ensure global C++ constructors in linked libraries are run before global\n+   C++ constructors from the current module, there is additional symbol scanning\n+   logic in collect2.\n+\n+   The global initialiser/finaliser functions are named __GLOBAL_AIXI_{libname}\n+   and __GLOBAL_AIXD_{libname} and are exported from each shared library.\n+\n+   collect2 will detect these symbols when they exist in shared libraries that\n+   the current program is being linked against.  All such initiliser functions\n+   will be called prior to the constructors of the current program, and\n+   finaliser functions called after destructors.\n+\n+   Reference counting generated by collect2 will ensure that constructors are\n+   only invoked once in the case of multiple dependencies on a library.\n+\n+   -binitfini is still used in parallel to this solution.\n+   This handles the case where a library is loaded through dlopen(), and also\n+   handles the option -blazy.\n+*/\n+#define COLLECT_SHARED_INIT_FUNC(STREAM, FUNC) \\\n+\t  fprintf ((STREAM), \"void %s() {\\n\\t%s();\\n}\\n\", aix_shared_initname, (FUNC))\n+#define COLLECT_SHARED_FINI_FUNC(STREAM, FUNC) \\\n+\t  fprintf ((STREAM), \"void %s() {\\n\\t%s();\\n}\\n\", aix_shared_fininame, (FUNC))\n+\n+#if HAVE_AS_REF\n+/* Issue assembly directives that create a reference to the given DWARF table\n+   identifier label from the current function section.  This is defined to\n+   ensure we drag frame tables associated with needed function bodies in\n+   a link with garbage collection activated.  */\n+#define ASM_OUTPUT_DWARF_TABLE_REF rs6000_aix_asm_output_dwarf_table_ref\n+#endif\n+\n+/* This is the only version of nm that collect2 can work with.  */\n+#define REAL_NM_FILE_NAME \"/usr/ucb/nm\"\n+\n+#define USER_LABEL_PREFIX  \"\"\n+\n+/* Don't turn -B into -L if the argument specifies a relative file name.  */\n+#define RELATIVE_PREFIX_NOT_LINKDIR\n+\n+/* Because of the above, we must have gcc search itself to find libgcc.a.  */\n+#define LINK_LIBGCC_SPECIAL_1\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+#define TARGET_OS_AIX_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define (\"_IBMR2\");\t\t\\\n+      builtin_define (\"_POWER\");\t\t\\\n+      builtin_define (\"__unix__\");              \\\n+      builtin_define (\"_AIX\");\t\t\t\\\n+      builtin_define (\"_AIX32\");\t\t\\\n+      builtin_define (\"_AIX41\");\t\t\\\n+      builtin_define (\"_LONG_LONG\");\t\t\\\n+      if (TARGET_LONG_DOUBLE_128)\t\t\\\n+        builtin_define (\"__LONGDOUBLE128\");\t\\\n+      builtin_assert (\"system=unix\");\t\t\\\n+      builtin_assert (\"system=aix\");\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__PPC__\");\t\t\\\n+\t  builtin_define (\"__PPC64__\");\t\t\\\n+\t  builtin_define (\"__powerpc__\");\t\\\n+\t  builtin_define (\"__powerpc64__\");\t\\\n+\t  builtin_assert (\"cpu=powerpc64\");\t\\\n+\t  builtin_assert (\"machine=powerpc64\");\t\\\n+\t}\t\t\t\t\t\\\n+      else\t\t\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__PPC__\");\t\t\\\n+\t  builtin_define (\"__powerpc__\");\t\\\n+\t  builtin_assert (\"cpu=powerpc\");\t\\\n+\t  builtin_assert (\"machine=powerpc\");\t\\\n+\t}\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Define appropriate architecture macros for preprocessor depending on\n+   target switches.  */\n+\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n+   %{ansi: -D_ANSI_C_SOURCE}\"\n+\n+#define CC1_SPEC \"%(cc1_cpu)\"\n+\n+#undef ASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"\"\n+\n+/* Tell the assembler to assume that all undefined names are external.\n+\n+   Don't do this until the fixed IBM assembler is more generally available.\n+   When this becomes permanently defined, the ASM_OUTPUT_EXTERNAL,\n+   ASM_OUTPUT_EXTERNAL_LIBCALL, and RS6000_OUTPUT_BASENAME macros will no\n+   longer be needed.  Also, the extern declaration of mcount in \n+   rs6000_xcoff_file_start will no longer be needed.  */\n+\n+/* #define ASM_SPEC \"-u %(asm_cpu)\" */\n+\n+/* Default location of syscalls.exp under AIX */\n+#define LINK_SYSCALLS_SPEC \"-bI:%R/lib/syscalls.exp\"\n+\n+/* Default location of libg.exp under AIX */\n+#define LINK_LIBG_SPEC \"-bexport:%R/usr/lib/libg.exp\"\n+\n+/* Define the options for the binder: Start text at 512, align all segments\n+   to 512 bytes, and warn if there is text relocation.\n+\n+   The -bhalt:4 option supposedly changes the level at which ld will abort,\n+   but it also suppresses warnings about multiply defined symbols and is\n+   used by the AIX cc command.  So we use it here.\n+\n+   -bnodelcsect undoes a poor choice of default relating to multiply-defined\n+   csects.  See AIX documentation for more information about this.\n+\n+   -bM:SRE tells the linker that the output file is Shared REusable.  Note\n+   that to actually build a shared library you will also need to specify an\n+   export list with the -Wl,-bE option.  */\n+\n+#define LINK_SPEC \"-T512 -H512 %{!r:-btextro} -bhalt:4 -bnodelcsect\\\n+%{static:-bnso %(link_syscalls) } \\\n+%{!shared:%{g*: %(link_libg) }} %{shared:-bM:SRE}\"\n+\n+/* Profiled library versions are used by linking with special directories.  */\n+#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+%{p:-L%R/lib/profiled -L%R/usr/lib/profiled} %{!shared:%{g*:-lg}} -lc\"\n+\n+/* Static linking with shared libstdc++ requires libsupc++ as well.  */\n+#define LIBSTDCXX_STATIC \"supc++\"\n+\n+/* This now supports a natural alignment mode.  */\n+/* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n+  ((TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\t\\\n+    && TYPE_MODE (strip_array_types (TYPE)) == DFmode)\t\t\t\\\n+   ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n+   : (COMPUTED))\n+\n+/* AIX increases natural record alignment to doubleword if the first\n+   field is an FP double while the FP fields remain word aligned.  */\n+#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\t\\\n+  ((TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\t\t\\\n+    || TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\t\t\\\n+    || TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\t\t\\\n+   && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\t\\\n+   ? rs6000_special_round_type_align (STRUCT, COMPUTED, SPECIFIED)\t\\\n+   : MAX ((COMPUTED), (SPECIFIED)))\n+\n+/* The AIX ABI isn't explicit on whether aggregates smaller than a\n+   word/doubleword should be padded upward or downward.  One could\n+   reasonably assume that they follow the normal rules for structure\n+   layout treating the parameter area as any other block of memory,\n+   then map the reg param area to registers, i.e., pad upward, which\n+   is the way IBM Compilers for AIX behave.\n+   Setting both of the following defines results in this behavior.  */\n+#define AGGREGATE_PADDING_FIXED 1\n+#define AGGREGATES_PAD_UPWARD_ALWAYS 1\n+\n+/* Specify padding for the last element of a block move between\n+   registers and memory.  FIRST is nonzero if this is the only\n+   element.  */\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))\n+\n+/* Indicate that jump tables go in the text section.  */\n+\n+#define JUMP_TABLES_IN_TEXT_SECTION 1\n+\n+/* Define any extra SPECS that the compiler needs to generate.  */\n+#undef  SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\\n+  { \"link_syscalls\",            LINK_SYSCALLS_SPEC },\t\t\t\\\n+  { \"link_libg\",                LINK_LIBG_SPEC }\n+\n+#define PROFILE_HOOK(LABEL)   output_profile_hook (LABEL)\n+\n+/* No version of AIX fully supports AltiVec or 64-bit instructions in\n+   32-bit mode.  */\n+#define OS_MISSING_POWERPC64 1\n+#define OS_MISSING_ALTIVEC 1\n+\n+/* WINT_TYPE */\n+#define WINT_TYPE \"int\"\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+"}, {"sha": "d61956d3b287bcb49065fe695ea6ea671953bff5", "filename": "gcc/config/powerpcspe/aix43.h", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix43.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,167 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX version 4.3.\n+   Copyright (C) 1998-2017 Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_long_double_type_size = 64;\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0);\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %{maix64:-a64 %{!mcpu*:-mppc64}} %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amongst the various targets\n+   for handling -mcpu=xxx switches.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: %{!maix64: \\\n+  %{!mpowerpc64: %(asm_default)} \\\n+  %{mpowerpc64: -mppc64}}} \\\n+%{mcpu=power3: -m620} \\\n+%{mcpu=power4: -m620} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rs64a: -mppc} \\\n+%{mcpu=601: -m601} \\\n+%{mcpu=602: -mppc} \\\n+%{mcpu=603: -m603} \\\n+%{mcpu=603e: -m603} \\\n+%{mcpu=604: -m604} \\\n+%{mcpu=604e: -m604} \\\n+%{mcpu=620: -m620} \\\n+%{mcpu=630: -m620}\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()     \\\n+  do                                 \\\n+    {                                \\\n+      builtin_define (\"_AIX43\");     \\\n+      TARGET_OS_AIX_CPP_BUILTINS (); \\\n+    }                                \\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n+   %{ansi: -D_ANSI_C_SOURCE}\\\n+   %{maix64: -D__64BIT__}\\\n+   %{mpe: -I%R/usr/lpp/ppe.poe/include}\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be \n+   defined.  */\n+#undef CPLUSPLUS_CPP_SPEC\t\t\t\n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_ALL_SOURCE\t\t\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT 0\n+\n+#undef PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_PPC604e\n+\n+/* AIX does not support Altivec.  */\n+#undef  TARGET_ALTIVEC\n+#define TARGET_ALTIVEC 0\n+#undef  TARGET_ALTIVEC_ABI\n+#define TARGET_ALTIVEC_ABI 0\n+#undef  TARGET_EXTRA_BUILTINS\n+#define TARGET_EXTRA_BUILTINS 0\n+\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+#define\tMULTILIB_DEFAULTS { \"mcpu=common\" }\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{pthread:-L%R/usr/lib/threads -lpthreads -lc_r %R/usr/lib/libc.a}\\\n+   %{!pthread:-lc}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro} -bnodelcsect\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n+   %{mpe:-binitfini:poe_remote_main}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+   %{!maix64:\\\n+     %{pthread:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n+     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\"\n+\n+/* AIX 4.3 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+\n+/* The IBM AIX 4.x assembler doesn't support forward references in\n+   .set directives.  We handle this by deferring the output of .set\n+   directives to the end of the compilation unit.  */\n+#define TARGET_DEFERRED_OUTPUT_DEFS(DECL,TARGET) true\n+\n+/* This target uses the aix64.opt file.  */\n+#define TARGET_USES_AIX64_OPT 1\n+\n+#define TARGET_AIX_VERSION 43\n+\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "af7e38e1775e1386e763c4d8393817d01e9852f4", "filename": "gcc/config/powerpcspe/aix51.h", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix51.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,169 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX V5.\n+   Copyright (C) 2001-2017 Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0);\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %{maix64:-a64 %{!mcpu*:-mppc64}} %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amongst the various targets\n+   for handling -mcpu=xxx switches.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: %{!maix64: \\\n+  %{!mpowerpc64: %(asm_default)} \\\n+  %{mpowerpc64: -mppc64}}} \\\n+%{mcpu=power3: -m620} \\\n+%{mcpu=power4: -m620} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rs64a: -mppc} \\\n+%{mcpu=601: -m601} \\\n+%{mcpu=602: -mppc} \\\n+%{mcpu=603: -m603} \\\n+%{mcpu=603e: -m603} \\\n+%{mcpu=604: -m604} \\\n+%{mcpu=604e: -m604} \\\n+%{mcpu=620: -m620} \\\n+%{mcpu=630: -m620} \\\n+%{mcpu=970: -m620} \\\n+%{mcpu=G5: -m620}\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()     \\\n+  do                                 \\\n+    {                                \\\n+      builtin_define (\"_AIX43\");     \\\n+      builtin_define (\"_AIX51\");     \\\n+      TARGET_OS_AIX_CPP_BUILTINS (); \\\n+    }                                \\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{maix64: -D__64BIT__}\t\t\t\\\n+  %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+  %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be \n+   defined.  */\n+#undef CPLUSPLUS_CPP_SPEC                       \n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_ALL_SOURCE\t\t\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT 0\n+\n+#undef PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_PPC604e\n+\n+/* AIX does not support Altivec.  */\n+#undef  TARGET_ALTIVEC\n+#define TARGET_ALTIVEC 0\n+#undef  TARGET_ALTIVEC_ABI\n+#define TARGET_ALTIVEC_ABI 0\n+#undef  TARGET_EXTRA_BUILTINS\n+#define TARGET_EXTRA_BUILTINS 0\n+\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+#define\tMULTILIB_DEFAULTS { \"mcpu=common\" }\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{pthread:-lpthreads} -lc\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n+   %{mpe:-binitfini:poe_remote_main}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+   %{!maix64:\\\n+     %{pthread:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n+     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\"\n+\n+/* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")\n+\n+/* Width of wchar_t in bits.  */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+\n+/* This target uses the aix64.opt file.  */\n+#define TARGET_USES_AIX64_OPT 1\n+\n+/* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n+   but does not have crtbegin/end.  */\n+\n+#define TARGET_AIX_VERSION 51\n+\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "35d2286e5b3d5bc5e433fd3ef310bc1d743f9cf0", "filename": "gcc/config/powerpcspe/aix52.h", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix52.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,179 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX V5.2.\n+   Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_long_double_type_size = 64;\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0);\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %{maix64:-a64 %{!mcpu*:-mppc64}} %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amongst the various targets\n+   for handling -mcpu=xxx switches.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: %{!maix64: \\\n+  %{mpowerpc64: -mppc64} \\\n+  %{!mpowerpc64: %(asm_default)}}} \\\n+%{mcpu=power3: -m620} \\\n+%{mcpu=power4: -m620} \\\n+%{mcpu=power5: -m620} \\\n+%{mcpu=power5+: -m620} \\\n+%{mcpu=power6: -m620} \\\n+%{mcpu=power6x: -m620} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rs64a: -mppc} \\\n+%{mcpu=603: -m603} \\\n+%{mcpu=603e: -m603} \\\n+%{mcpu=604: -m604} \\\n+%{mcpu=604e: -m604} \\\n+%{mcpu=620: -m620} \\\n+%{mcpu=630: -m620} \\\n+%{mcpu=970: -m620} \\\n+%{mcpu=G5: -m620}\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()     \\\n+  do                                 \\\n+    {                                \\\n+      builtin_define (\"_AIX43\");     \\\n+      builtin_define (\"_AIX51\");     \\\n+      builtin_define (\"_AIX52\");     \\\n+      TARGET_OS_AIX_CPP_BUILTINS (); \\\n+    }                                \\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{maix64: -D__64BIT__}\t\t\t\\\n+  %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+  %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be \n+   defined.  Synchronize with libstdc++ os_defines.h.  */\n+#undef CPLUSPLUS_CPP_SPEC                       \n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_ALL_SOURCE\t\t\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT 0\n+\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER4\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER4\n+\n+/* AIX does not support Altivec.  */\n+#undef  TARGET_ALTIVEC\n+#define TARGET_ALTIVEC 0\n+#undef  TARGET_ALTIVEC_ABI\n+#define TARGET_ALTIVEC_ABI 0\n+#undef  TARGET_EXTRA_BUILTINS\n+#define TARGET_EXTRA_BUILTINS 0\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{pthread:-lpthreads} -lc\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n+   %{mpe:-binitfini:poe_remote_main}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+   %{!maix64:\\\n+     %{pthread:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n+     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\"\n+\n+/* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")\n+\n+/* Width of wchar_t in bits.  */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+\n+#ifndef _AIX52\n+extern long long int    atoll(const char *);  \n+#endif\n+\n+/* This target uses the aix64.opt file.  */\n+#define TARGET_USES_AIX64_OPT 1\n+\n+/* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n+   but does not have crtbegin/end.  */\n+\n+#define TARGET_AIX_VERSION 52"}, {"sha": "a1fbd834d4792ecd71910faf5606d15ec7cd6665", "filename": "gcc/config/powerpcspe/aix53.h", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix53.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,180 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX V5.3.\n+   Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_long_double_type_size = 64;\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0);\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %{maix64:-a64 %{!mcpu*:-mppc64}} %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amongst the various targets for\n+   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n+   provide the default assembler options if the user uses -mcpu=native, so if\n+   you make changes here, make them there also.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: %{!maix64: \\\n+  %{mpowerpc64: -mppc64} \\\n+  %{maltivec: -m970} \\\n+  %{!maltivec: %{!mpowerpc64: %(asm_default)}}}} \\\n+%{mcpu=native: %(asm_cpu_native)} \\\n+%{mcpu=power3: -m620} \\\n+%{mcpu=power4: -mpwr4} \\\n+%{mcpu=power5: -mpwr5} \\\n+%{mcpu=power5+: -mpwr5x} \\\n+%{mcpu=power6: -mpwr6} \\\n+%{mcpu=power6x: -mpwr6} \\\n+%{mcpu=power7: -mpwr7} \\\n+%{mcpu=power8: -mpwr8} \\\n+%{mcpu=power9: -mpwr9} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rs64a: -mppc} \\\n+%{mcpu=603: -m603} \\\n+%{mcpu=603e: -m603} \\\n+%{mcpu=604: -m604} \\\n+%{mcpu=604e: -m604} \\\n+%{mcpu=620: -m620} \\\n+%{mcpu=630: -m620} \\\n+%{mcpu=970: -m970} \\\n+%{mcpu=G5: -m970}\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()     \\\n+  do                                 \\\n+    {                                \\\n+      builtin_define (\"_AIX43\");     \\\n+      builtin_define (\"_AIX51\");     \\\n+      builtin_define (\"_AIX52\");     \\\n+      builtin_define (\"_AIX53\");     \\\n+      TARGET_OS_AIX_CPP_BUILTINS (); \\\n+    }                                \\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{maix64: -D__64BIT__}\t\t\t\\\n+  %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+  %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be \n+   defined.  Synchronize with libstdc++ os_defines.h.  */\n+#undef CPLUSPLUS_CPP_SPEC                       \n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_ALL_SOURCE\t\t\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT 0\n+\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER5\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER5\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{fprofile-arcs|fprofile-generate*|coverage:-lpthreads}\\\n+   %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{pthread:-lpthreads} -lc\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n+   %{mpe:-binitfini:poe_remote_main}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+   %{!maix64:\\\n+     %{pthread:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n+     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\"\n+\n+/* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")\n+\n+/* Width of wchar_t in bits.  */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+\n+#ifndef _AIX52\n+extern long long int    atoll(const char *);  \n+#endif\n+\n+/* This target uses the aix64.opt file.  */\n+#define TARGET_USES_AIX64_OPT 1\n+\n+/* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n+   but does not have crtbegin/end.  */\n+\n+#define TARGET_AIX_VERSION 53"}, {"sha": "0b61505708765fd6dd2172f6502cc179b282ff5b", "filename": "gcc/config/powerpcspe/aix61.h", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix61.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,213 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX V6.1.\n+   Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_long_double_type_size = 64;\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n+       & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n+\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n+\terror (\"-mcmodel incompatible with other toc options\"); \t\\\n+      SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TARGET_NO_FP_IN_TOC = 0;\t\t\t\t\t\t\\\n+      TARGET_NO_SUM_IN_TOC = 0;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (rs6000_current_cmodel == CMODEL_MEDIUM)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_current_cmodel = CMODEL_LARGE;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0);\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %{maix64:-a64 %{!mcpu*:-mppc64}} %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amongst the various targets for\n+   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n+   provide the default assembler options if the user uses -mcpu=native, so if\n+   you make changes here, make them there also.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: %{!maix64: \\\n+  %{mpowerpc64: -mppc64} \\\n+  %{maltivec: -m970} \\\n+  %{!maltivec: %{!mpowerpc64: %(asm_default)}}}} \\\n+%{mcpu=native: %(asm_cpu_native)} \\\n+%{mcpu=power3: -m620} \\\n+%{mcpu=power4: -mpwr4} \\\n+%{mcpu=power5: -mpwr5} \\\n+%{mcpu=power5+: -mpwr5x} \\\n+%{mcpu=power6: -mpwr6} \\\n+%{mcpu=power6x: -mpwr6} \\\n+%{mcpu=power7: -mpwr7} \\\n+%{mcpu=power8: -mpwr8} \\\n+%{mcpu=power9: -mpwr9} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rs64a: -mppc} \\\n+%{mcpu=603: -m603} \\\n+%{mcpu=603e: -m603} \\\n+%{mcpu=604: -m604} \\\n+%{mcpu=604e: -m604} \\\n+%{mcpu=620: -m620} \\\n+%{mcpu=630: -m620} \\\n+%{mcpu=970: -m970} \\\n+%{mcpu=G5: -m970} \\\n+%{mvsx: %{!mcpu*: -mpwr6}} \\\n+-many\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mpwr4\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()     \\\n+  do                                 \\\n+    {                                \\\n+      builtin_define (\"_AIX43\");     \\\n+      builtin_define (\"_AIX51\");     \\\n+      builtin_define (\"_AIX52\");     \\\n+      builtin_define (\"_AIX53\");     \\\n+      builtin_define (\"_AIX61\");     \\\n+      TARGET_OS_AIX_CPP_BUILTINS (); \\\n+    }                                \\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{maix64: -D__64BIT__}\t\t\t\\\n+  %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+  %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be \n+   defined.  Synchronize with libstdc++ os_defines.h.  */\n+#undef CPLUSPLUS_CPP_SPEC                       \n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_ALL_SOURCE -D__COMPATMATH__\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_PPC_GPOPT | MASK_PPC_GFXOPT | MASK_MFCRF)\n+\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER7\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER7\n+\n+/* AIX 6.1 kernel and assembler have necessary support for Altivec and VSX.  */\n+#undef OS_MISSING_ALTIVEC\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{fprofile-arcs|fprofile-generate*|coverage:-lpthreads}\\\n+   %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{pthread:-lpthreads} -lc\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n+   %{mpe:-binitfini:poe_remote_main}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+   %{!maix64:\\\n+     %{pthread:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n+     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\\\n+   %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s\"\n+\n+/* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")\n+\n+/* Width of wchar_t in bits.  */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+\n+#ifndef _AIX52\n+extern long long int    atoll(const char *);  \n+#endif\n+\n+/* This target uses the aix64.opt file.  */\n+#define TARGET_USES_AIX64_OPT 1\n+\n+/* Large TOC Support */\n+#ifdef HAVE_LD_LARGE_TOC\n+#undef TARGET_CMODEL\n+#define TARGET_CMODEL rs6000_current_cmodel\n+#define SET_CMODEL(opt) rs6000_current_cmodel = opt\n+#else\n+#define SET_CMODEL(opt) do {} while (0)\n+#endif\n+\n+/* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n+   but does not have crtbegin/end.  */\n+\n+#define TARGET_AIX_VERSION 61"}, {"sha": "ca8d1da6b0e263d09f8bc19dcd5b2f29c1c1d1cf", "filename": "gcc/config/powerpcspe/aix64.opt", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix64.opt?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,55 @@\n+; Options for the 64-bit flavor of AIX.\n+;\n+; Copyright (C) 2005-2017 Free Software Foundation, Inc.\n+; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+maix64\n+Target Report RejectNegative Negative(maix32) Mask(64BIT) Var(rs6000_isa_flags)\n+Compile for 64-bit pointers.\n+\n+maix32\n+Target Report RejectNegative Negative(maix64) InverseMask(64BIT) Var(rs6000_isa_flags)\n+Compile for 32-bit pointers.\n+\n+mcmodel=\n+Target RejectNegative Joined Enum(rs6000_cmodel) Var(rs6000_current_cmodel)\n+Select code model.\n+\n+Enum\n+Name(rs6000_cmodel) Type(enum rs6000_cmodel)\n+Known code models (for use with the -mcmodel= option):\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(small) Value(CMODEL_SMALL)\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(medium) Value(CMODEL_MEDIUM)\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(large) Value(CMODEL_LARGE)\n+\n+mpe\n+Target Report RejectNegative Var(internal_nothing_1) Save\n+Support message passing with the Parallel Environment.\n+\n+posix\n+Driver\n+\n+pthread\n+Driver"}, {"sha": "4b986d6a818ddd673ed1460311a801d96ae8f91d", "filename": "gcc/config/powerpcspe/aix71.h", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix71.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faix71.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix71.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,230 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX V7.1.\n+   Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_long_double_type_size = 64;\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n+       & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n+\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n+\terror (\"-mcmodel incompatible with other toc options\"); \t\\\n+      SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TARGET_NO_FP_IN_TOC = 0;\t\t\t\t\t\t\\\n+      TARGET_NO_SUM_IN_TOC = 0;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (rs6000_current_cmodel == CMODEL_MEDIUM)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_current_cmodel = CMODEL_LARGE;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0);\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %{maix64:-a64 %{!mcpu*:-mppc64}} %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amongst the various targets for\n+   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n+   provide the default assembler options if the user uses -mcpu=native, so if\n+   you make changes here, make them there also.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: %{!maix64: \\\n+  %{mpowerpc64: -mppc64} \\\n+  %{maltivec: -m970} \\\n+  %{!maltivec: %{!mpowerpc64: %(asm_default)}}}} \\\n+%{mcpu=native: %(asm_cpu_native)} \\\n+%{mcpu=power3: -m620} \\\n+%{mcpu=power4: -mpwr4} \\\n+%{mcpu=power5: -mpwr5} \\\n+%{mcpu=power5+: -mpwr5x} \\\n+%{mcpu=power6: -mpwr6} \\\n+%{mcpu=power6x: -mpwr6} \\\n+%{mcpu=power7: -mpwr7} \\\n+%{mcpu=power8: -mpwr8} \\\n+%{mcpu=power9: -mpwr9} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rs64a: -mppc} \\\n+%{mcpu=603: -m603} \\\n+%{mcpu=603e: -m603} \\\n+%{mcpu=604: -m604} \\\n+%{mcpu=604e: -m604} \\\n+%{mcpu=620: -m620} \\\n+%{mcpu=630: -m620} \\\n+%{mcpu=970: -m970} \\\n+%{mcpu=G5: -m970} \\\n+%{mvsx: %{!mcpu*: -mpwr6}} \\\n+-many\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mpwr4\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()     \\\n+  do                                 \\\n+    {                                \\\n+      builtin_define (\"_AIX43\");     \\\n+      builtin_define (\"_AIX51\");     \\\n+      builtin_define (\"_AIX52\");     \\\n+      builtin_define (\"_AIX53\");     \\\n+      builtin_define (\"_AIX61\");     \\\n+      builtin_define (\"_AIX71\");     \\\n+      TARGET_OS_AIX_CPP_BUILTINS (); \\\n+    }                                \\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{maix64: -D__64BIT__}\t\t\t\\\n+  %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+  %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be \n+   defined.  Synchronize with libstdc++ os_defines.h.  */\n+#undef CPLUSPLUS_CPP_SPEC                       \n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_ALL_SOURCE -D__COMPATMATH__\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_PPC_GPOPT | MASK_PPC_GFXOPT | MASK_MFCRF)\n+\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER7\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER7\n+\n+/* AIX 7.1 kernel and assembler have necessary support for Altivec and VSX.  */\n+#undef OS_MISSING_ALTIVEC\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{fprofile-arcs|fprofile-generate*|coverage:-lpthreads}\\\n+   %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{pthread:-lpthreads} -lc\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n+   %{mpe:-binitfini:poe_remote_main}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s;:%{p:mcrt0_64%O%s;:crt0_64%O%s}};:\\\n+     %{pthread:%{pg:gcrt0_r%O%s;:%{p:mcrt0_r%O%s;:crt0_r%O%s}};:\\\n+       %{pg:gcrt0%O%s;:%{p:mcrt0%O%s;:crt0%O%s}}}}}\\\n+   %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s\"\n+\n+/* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")\n+\n+/* Width of wchar_t in bits.  */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+\n+#ifndef _AIX52\n+extern long long int    atoll(const char *);  \n+#endif\n+\n+/* This target uses the aix64.opt file.  */\n+#define TARGET_USES_AIX64_OPT 1\n+\n+/* Large TOC Support */\n+#ifdef HAVE_LD_LARGE_TOC\n+#undef TARGET_CMODEL\n+#define TARGET_CMODEL rs6000_current_cmodel\n+#define SET_CMODEL(opt) rs6000_current_cmodel = opt\n+#else\n+#define SET_CMODEL(opt) do {} while (0)\n+#endif\n+\n+/* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n+   but does not have crtbegin/end.  */\n+\n+#define TARGET_AIX_VERSION 71\n+\n+/* AIX 7.1 supports DWARF3 debugging, but XCOFF remains the default.  */\n+#define DWARF2_DEBUGGING_INFO 1\n+#define PREFERRED_DEBUGGING_TYPE XCOFF_DEBUG\n+#define DEBUG_INFO_SECTION\t\"0x10000\"\n+#define DEBUG_LINE_SECTION\t\"0x20000\"\n+#define DEBUG_PUBNAMES_SECTION\t\"0x30000\"\n+#define DEBUG_PUBTYPES_SECTION\t\"0x40000\"\n+#define DEBUG_ARANGES_SECTION\t\"0x50000\"\n+#define DEBUG_ABBREV_SECTION\t\"0x60000\"\n+#define DEBUG_STR_SECTION\t\"0x70000\"\n+#define DEBUG_RANGES_SECTION\t\"0x80000\"\n+#define DEBUG_LOC_SECTION\t\"0x90000\"\n+#define DEBUG_FRAME_SECTION\t\"0xA0000\"\n+#define DEBUG_MACINFO_SECTION\t\"0xB0000\"\n+#define DEBUG_MACRO_SECTION\t\"0xB0000\"\n+"}, {"sha": "c92bccef150a4045a44b94698e4bca1358b1df5c", "filename": "gcc/config/powerpcspe/altivec.h", "status": "added", "additions": 648, "deletions": 0, "changes": 648, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faltivec.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,648 @@\n+/* PowerPC AltiVec include file.\n+   Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez (aldyh@redhat.com).\n+   Rewritten by Paolo Bonzini (bonzini@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Implemented to conform to the specification included in the AltiVec\n+   Technology Programming Interface Manual (ALTIVECPIM/D 6/1999 Rev 0).  */\n+\n+#ifndef _ALTIVEC_H\n+#define _ALTIVEC_H 1\n+\n+#if !defined(__VEC__) || !defined(__ALTIVEC__)\n+#error Use the \"-maltivec\" flag to enable PowerPC AltiVec support\n+#endif\n+\n+/* If __APPLE_ALTIVEC__ is defined, the compiler supports 'vector',\n+   'pixel' and 'bool' as context-sensitive AltiVec keywords (in \n+   non-AltiVec contexts, they revert to their original meanings,\n+   if any), so we do not need to define them as macros.  */\n+\n+#if !defined(__APPLE_ALTIVEC__)\n+/* You are allowed to undef these for C++ compatibility.  */\n+#define vector __vector\n+#define pixel __pixel\n+#define bool __bool\n+#endif\n+\n+/* Condition register codes for AltiVec predicates. */\n+\n+#define __CR6_EQ\t\t0\n+#define __CR6_EQ_REV\t\t1\n+#define __CR6_LT\t\t2\n+#define __CR6_LT_REV\t\t3\n+\n+/* Synonyms.  */\n+#define vec_vaddcuw vec_addc\n+#define vec_vand vec_and\n+#define vec_vandc vec_andc\n+#define vec_vrfip vec_ceil\n+#define vec_vcmpbfp vec_cmpb\n+#define vec_vcmpgefp vec_cmpge\n+#define vec_vctsxs vec_cts\n+#define vec_vctuxs vec_ctu\n+#define vec_vexptefp vec_expte\n+#define vec_vrfim vec_floor\n+#define vec_lvx vec_ld\n+#define vec_lvxl vec_ldl\n+#define vec_vlogefp vec_loge\n+#define vec_vmaddfp vec_madd\n+#define vec_vmhaddshs vec_madds\n+#define vec_vmladduhm vec_mladd\n+#define vec_vmhraddshs vec_mradds\n+#define vec_vnmsubfp vec_nmsub\n+#define vec_vnor vec_nor\n+#define vec_vor vec_or\n+#define vec_vpkpx vec_packpx\n+#define vec_vperm vec_perm\n+#define vec_vrefp vec_re\n+#define vec_vrfin vec_round\n+#define vec_vrsqrtefp vec_rsqrte\n+#define vec_vsel vec_sel\n+#define vec_vsldoi vec_sld\n+#define vec_vsl vec_sll\n+#define vec_vslo vec_slo\n+#define vec_vspltisb vec_splat_s8\n+#define vec_vspltish vec_splat_s16\n+#define vec_vspltisw vec_splat_s32\n+#define vec_vsr vec_srl\n+#define vec_vsro vec_sro\n+#define vec_stvx vec_st\n+#define vec_stvxl vec_stl\n+#define vec_vsubcuw vec_subc\n+#define vec_vsum2sws vec_sum2s\n+#define vec_vsumsws vec_sums\n+#define vec_vrfiz vec_trunc\n+#define vec_vxor vec_xor\n+\n+/* Functions that are resolved by the backend to one of the\n+   typed builtins.  */\n+#define vec_vaddfp __builtin_vec_vaddfp\n+#define vec_addc __builtin_vec_addc\n+#define vec_adde __builtin_vec_adde\n+#define vec_addec __builtin_vec_addec\n+#define vec_vaddsws __builtin_vec_vaddsws\n+#define vec_vaddshs __builtin_vec_vaddshs\n+#define vec_vaddsbs __builtin_vec_vaddsbs\n+#define vec_vavgsw __builtin_vec_vavgsw\n+#define vec_vavguw __builtin_vec_vavguw\n+#define vec_vavgsh __builtin_vec_vavgsh\n+#define vec_vavguh __builtin_vec_vavguh\n+#define vec_vavgsb __builtin_vec_vavgsb\n+#define vec_vavgub __builtin_vec_vavgub\n+#define vec_ceil __builtin_vec_ceil\n+#define vec_cmpb __builtin_vec_cmpb\n+#define vec_vcmpeqfp __builtin_vec_vcmpeqfp\n+#define vec_cmpge __builtin_vec_cmpge\n+#define vec_vcmpgtfp __builtin_vec_vcmpgtfp\n+#define vec_vcmpgtsw __builtin_vec_vcmpgtsw\n+#define vec_vcmpgtuw __builtin_vec_vcmpgtuw\n+#define vec_vcmpgtsh __builtin_vec_vcmpgtsh\n+#define vec_vcmpgtuh __builtin_vec_vcmpgtuh\n+#define vec_vcmpgtsb __builtin_vec_vcmpgtsb\n+#define vec_vcmpgtub __builtin_vec_vcmpgtub\n+#define vec_vcfsx __builtin_vec_vcfsx\n+#define vec_vcfux __builtin_vec_vcfux\n+#define vec_cts __builtin_vec_cts\n+#define vec_ctu __builtin_vec_ctu\n+#define vec_cpsgn __builtin_vec_copysign\n+#define vec_double __builtin_vec_double\n+#define vec_expte __builtin_vec_expte\n+#define vec_floor __builtin_vec_floor\n+#define vec_loge __builtin_vec_loge\n+#define vec_madd __builtin_vec_madd\n+#define vec_madds __builtin_vec_madds\n+#define vec_mtvscr __builtin_vec_mtvscr\n+#define vec_vmaxfp __builtin_vec_vmaxfp\n+#define vec_vmaxsw __builtin_vec_vmaxsw\n+#define vec_vmaxsh __builtin_vec_vmaxsh\n+#define vec_vmaxsb __builtin_vec_vmaxsb\n+#define vec_vminfp __builtin_vec_vminfp\n+#define vec_vminsw __builtin_vec_vminsw\n+#define vec_vminsh __builtin_vec_vminsh\n+#define vec_vminsb __builtin_vec_vminsb\n+#define vec_mradds __builtin_vec_mradds\n+#define vec_vmsumshm __builtin_vec_vmsumshm\n+#define vec_vmsumuhm __builtin_vec_vmsumuhm\n+#define vec_vmsummbm __builtin_vec_vmsummbm\n+#define vec_vmsumubm __builtin_vec_vmsumubm\n+#define vec_vmsumshs __builtin_vec_vmsumshs\n+#define vec_vmsumuhs __builtin_vec_vmsumuhs\n+#define vec_vmulesb __builtin_vec_vmulesb\n+#define vec_vmulesh __builtin_vec_vmulesh\n+#define vec_vmuleuh __builtin_vec_vmuleuh\n+#define vec_vmuleub __builtin_vec_vmuleub\n+#define vec_vmulosh __builtin_vec_vmulosh\n+#define vec_vmulouh __builtin_vec_vmulouh\n+#define vec_vmulosb __builtin_vec_vmulosb\n+#define vec_vmuloub __builtin_vec_vmuloub\n+#define vec_nmsub __builtin_vec_nmsub\n+#define vec_packpx __builtin_vec_packpx\n+#define vec_vpkswss __builtin_vec_vpkswss\n+#define vec_vpkuwus __builtin_vec_vpkuwus\n+#define vec_vpkshss __builtin_vec_vpkshss\n+#define vec_vpkuhus __builtin_vec_vpkuhus\n+#define vec_vpkswus __builtin_vec_vpkswus\n+#define vec_vpkshus __builtin_vec_vpkshus\n+#define vec_re __builtin_vec_re\n+#define vec_round __builtin_vec_round\n+#define vec_recipdiv __builtin_vec_recipdiv\n+#define vec_rlmi __builtin_vec_rlmi\n+#define vec_vrlnm __builtin_vec_rlnm\n+#define vec_rlnm(a,b,c) (__builtin_vec_rlnm((a),((b)<<8)|(c)))\n+#define vec_rsqrt __builtin_vec_rsqrt\n+#define vec_rsqrte __builtin_vec_rsqrte\n+#define vec_vsubfp __builtin_vec_vsubfp\n+#define vec_subc __builtin_vec_subc\n+#define vec_vsubsws __builtin_vec_vsubsws\n+#define vec_vsubshs __builtin_vec_vsubshs\n+#define vec_vsubsbs __builtin_vec_vsubsbs\n+#define vec_sum4s __builtin_vec_sum4s\n+#define vec_vsum4shs __builtin_vec_vsum4shs\n+#define vec_vsum4sbs __builtin_vec_vsum4sbs\n+#define vec_vsum4ubs __builtin_vec_vsum4ubs\n+#define vec_sum2s __builtin_vec_sum2s\n+#define vec_sums __builtin_vec_sums\n+#define vec_trunc __builtin_vec_trunc\n+#define vec_vupkhpx __builtin_vec_vupkhpx\n+#define vec_vupkhsh __builtin_vec_vupkhsh\n+#define vec_vupkhsb __builtin_vec_vupkhsb\n+#define vec_vupklpx __builtin_vec_vupklpx\n+#define vec_vupklsh __builtin_vec_vupklsh\n+#define vec_vupklsb __builtin_vec_vupklsb\n+#define vec_abs __builtin_vec_abs\n+#define vec_nabs __builtin_vec_nabs\n+#define vec_abss __builtin_vec_abss\n+#define vec_add __builtin_vec_add\n+#define vec_adds __builtin_vec_adds\n+#define vec_and __builtin_vec_and\n+#define vec_andc __builtin_vec_andc\n+#define vec_avg __builtin_vec_avg\n+#define vec_cmpeq __builtin_vec_cmpeq\n+#define vec_cmpne __builtin_vec_cmpne\n+#define vec_cmpgt __builtin_vec_cmpgt\n+#define vec_ctf __builtin_vec_ctf\n+#define vec_dst __builtin_vec_dst\n+#define vec_dstst __builtin_vec_dstst\n+#define vec_dststt __builtin_vec_dststt\n+#define vec_dstt __builtin_vec_dstt\n+#define vec_ld __builtin_vec_ld\n+#define vec_lde __builtin_vec_lde\n+#define vec_ldl __builtin_vec_ldl\n+#define vec_lvebx __builtin_vec_lvebx\n+#define vec_lvehx __builtin_vec_lvehx\n+#define vec_lvewx __builtin_vec_lvewx\n+#define vec_neg __builtin_vec_neg\n+#define vec_pmsum_be __builtin_vec_vpmsum\n+#define vec_shasigma_be __builtin_crypto_vshasigma\n+/* Cell only intrinsics.  */\n+#ifdef __PPU__\n+#define vec_lvlx __builtin_vec_lvlx\n+#define vec_lvlxl __builtin_vec_lvlxl\n+#define vec_lvrx __builtin_vec_lvrx\n+#define vec_lvrxl __builtin_vec_lvrxl\n+#endif\n+#define vec_lvsl __builtin_vec_lvsl\n+#define vec_lvsr __builtin_vec_lvsr\n+#define vec_max __builtin_vec_max\n+#define vec_mergee __builtin_vec_vmrgew\n+#define vec_mergeh __builtin_vec_mergeh\n+#define vec_mergel __builtin_vec_mergel\n+#define vec_mergeo __builtin_vec_vmrgow\n+#define vec_min __builtin_vec_min\n+#define vec_mladd __builtin_vec_mladd\n+#define vec_msum __builtin_vec_msum\n+#define vec_msums __builtin_vec_msums\n+#define vec_mul __builtin_vec_mul\n+#define vec_mule __builtin_vec_mule\n+#define vec_mulo __builtin_vec_mulo\n+#define vec_nor __builtin_vec_nor\n+#define vec_or __builtin_vec_or\n+#define vec_pack __builtin_vec_pack\n+#define vec_packs __builtin_vec_packs\n+#define vec_packsu __builtin_vec_packsu\n+#define vec_perm __builtin_vec_perm\n+#define vec_rl __builtin_vec_rl\n+#define vec_sel __builtin_vec_sel\n+#define vec_sl __builtin_vec_sl\n+#define vec_sld __builtin_vec_sld\n+#define vec_sldw __builtin_vsx_xxsldwi\n+#define vec_sll __builtin_vec_sll\n+#define vec_slo __builtin_vec_slo\n+#define vec_splat __builtin_vec_splat\n+#define vec_sr __builtin_vec_sr\n+#define vec_sra __builtin_vec_sra\n+#define vec_srl __builtin_vec_srl\n+#define vec_sro __builtin_vec_sro\n+#define vec_st __builtin_vec_st\n+#define vec_ste __builtin_vec_ste\n+#define vec_stl __builtin_vec_stl\n+#define vec_stvebx __builtin_vec_stvebx\n+#define vec_stvehx __builtin_vec_stvehx\n+#define vec_stvewx __builtin_vec_stvewx\n+/* Cell only intrinsics.  */\n+#ifdef __PPU__\n+#define vec_stvlx __builtin_vec_stvlx\n+#define vec_stvlxl __builtin_vec_stvlxl\n+#define vec_stvrx __builtin_vec_stvrx\n+#define vec_stvrxl __builtin_vec_stvrxl\n+#endif\n+#define vec_sub __builtin_vec_sub\n+#define vec_subs __builtin_vec_subs\n+#define vec_sum __builtin_vec_sum\n+#define vec_unpackh __builtin_vec_unpackh\n+#define vec_unpackl __builtin_vec_unpackl\n+#define vec_vaddubm __builtin_vec_vaddubm\n+#define vec_vaddubs __builtin_vec_vaddubs\n+#define vec_vadduhm __builtin_vec_vadduhm\n+#define vec_vadduhs __builtin_vec_vadduhs\n+#define vec_vadduwm __builtin_vec_vadduwm\n+#define vec_vadduws __builtin_vec_vadduws\n+#define vec_vcmpequb __builtin_vec_vcmpequb\n+#define vec_vcmpequh __builtin_vec_vcmpequh\n+#define vec_vcmpequw __builtin_vec_vcmpequw\n+#define vec_vmaxub __builtin_vec_vmaxub\n+#define vec_vmaxuh __builtin_vec_vmaxuh\n+#define vec_vmaxuw __builtin_vec_vmaxuw\n+#define vec_vminub __builtin_vec_vminub\n+#define vec_vminuh __builtin_vec_vminuh\n+#define vec_vminuw __builtin_vec_vminuw\n+#define vec_vmrghb __builtin_vec_vmrghb\n+#define vec_vmrghh __builtin_vec_vmrghh\n+#define vec_vmrghw __builtin_vec_vmrghw\n+#define vec_vmrglb __builtin_vec_vmrglb\n+#define vec_vmrglh __builtin_vec_vmrglh\n+#define vec_vmrglw __builtin_vec_vmrglw\n+#define vec_vpkuhum __builtin_vec_vpkuhum\n+#define vec_vpkuwum __builtin_vec_vpkuwum\n+#define vec_vrlb __builtin_vec_vrlb\n+#define vec_vrlh __builtin_vec_vrlh\n+#define vec_vrlw __builtin_vec_vrlw\n+#define vec_vslb __builtin_vec_vslb\n+#define vec_vslh __builtin_vec_vslh\n+#define vec_vslw __builtin_vec_vslw\n+#define vec_vspltb __builtin_vec_vspltb\n+#define vec_vsplth __builtin_vec_vsplth\n+#define vec_vspltw __builtin_vec_vspltw\n+#define vec_vsrab __builtin_vec_vsrab\n+#define vec_vsrah __builtin_vec_vsrah\n+#define vec_vsraw __builtin_vec_vsraw\n+#define vec_vsrb __builtin_vec_vsrb\n+#define vec_vsrh __builtin_vec_vsrh\n+#define vec_vsrw __builtin_vec_vsrw\n+#define vec_vsububs __builtin_vec_vsububs\n+#define vec_vsububm __builtin_vec_vsububm\n+#define vec_vsubuhm __builtin_vec_vsubuhm\n+#define vec_vsubuhs __builtin_vec_vsubuhs\n+#define vec_vsubuwm __builtin_vec_vsubuwm\n+#define vec_vsubuws __builtin_vec_vsubuws\n+#define vec_xor __builtin_vec_xor\n+\n+#define vec_extract __builtin_vec_extract\n+#define vec_insert __builtin_vec_insert\n+#define vec_splats __builtin_vec_splats\n+#define vec_promote __builtin_vec_promote\n+\n+#ifdef __VSX__\n+/* VSX additions */\n+#define vec_div __builtin_vec_div\n+#define vec_mul __builtin_vec_mul\n+#define vec_msub __builtin_vec_msub\n+#define vec_nmadd __builtin_vec_nmadd\n+#define vec_nearbyint __builtin_vec_nearbyint\n+#define vec_rint __builtin_vec_rint\n+#define vec_sqrt __builtin_vec_sqrt\n+#define vec_vsx_ld __builtin_vec_vsx_ld\n+#define vec_vsx_st __builtin_vec_vsx_st\n+#define vec_xl __builtin_vec_vsx_ld\n+#define vec_xst __builtin_vec_vsx_st\n+\n+/* Note, xxsldi and xxpermdi were added as __builtin_vsx_<xxx> functions\n+   instead of __builtin_vec_<xxx>  */\n+#define vec_xxsldwi __builtin_vsx_xxsldwi\n+#define vec_xxpermdi __builtin_vsx_xxpermdi\n+#endif\n+\n+#ifdef _ARCH_PWR8\n+/* Vector additions added in ISA 2.07.  */\n+#define vec_eqv __builtin_vec_eqv\n+#define vec_nand __builtin_vec_nand\n+#define vec_orc __builtin_vec_orc\n+#define vec_vaddcuq __builtin_vec_vaddcuq\n+#define vec_vaddudm __builtin_vec_vaddudm\n+#define vec_vadduqm __builtin_vec_vadduqm\n+#define vec_vbpermq __builtin_vec_vbpermq\n+#define vec_bperm __builtin_vec_vbperm_api\n+#define vec_vclz __builtin_vec_vclz\n+#define vec_cntlz __builtin_vec_vclz\n+#define vec_vclzb __builtin_vec_vclzb\n+#define vec_vclzd __builtin_vec_vclzd\n+#define vec_vclzh __builtin_vec_vclzh\n+#define vec_vclzw __builtin_vec_vclzw\n+#define vec_vaddecuq __builtin_vec_vaddecuq\n+#define vec_vaddeuqm __builtin_vec_vaddeuqm\n+#define vec_vsubecuq __builtin_vec_vsubecuq\n+#define vec_vsubeuqm __builtin_vec_vsubeuqm\n+#define vec_vgbbd __builtin_vec_vgbbd\n+#define vec_gb __builtin_vec_vgbbd\n+#define vec_vmaxsd __builtin_vec_vmaxsd\n+#define vec_vmaxud __builtin_vec_vmaxud\n+#define vec_vminsd __builtin_vec_vminsd\n+#define vec_vminud __builtin_vec_vminud\n+#define vec_vmrgew __builtin_vec_vmrgew\n+#define vec_vmrgow __builtin_vec_vmrgow\n+#define vec_vpksdss __builtin_vec_vpksdss\n+#define vec_vpksdus __builtin_vec_vpksdus\n+#define vec_vpkudum __builtin_vec_vpkudum\n+#define vec_vpkudus __builtin_vec_vpkudus\n+#define vec_vpopcnt __builtin_vec_vpopcnt\n+#define vec_vpopcntb __builtin_vec_vpopcntb\n+#define vec_vpopcntd __builtin_vec_vpopcntd\n+#define vec_vpopcnth __builtin_vec_vpopcnth\n+#define vec_vpopcntw __builtin_vec_vpopcntw\n+#define vec_popcnt __builtin_vec_vpopcntu\n+#define vec_popcntb __builtin_vec_vpopcntub\n+#define vec_popcnth __builtin_vec_vpopcntuh\n+#define vec_popcntw __builtin_vec_vpopcntuw\n+#define vec_popcntd __builtin_vec_vpopcntud\n+#define vec_vrld __builtin_vec_vrld\n+#define vec_vsld __builtin_vec_vsld\n+#define vec_vsrad __builtin_vec_vsrad\n+#define vec_vsrd __builtin_vec_vsrd\n+#define vec_vsubcuq __builtin_vec_vsubcuq\n+#define vec_vsubudm __builtin_vec_vsubudm\n+#define vec_vsubuqm __builtin_vec_vsubuqm\n+#define vec_vupkhsw __builtin_vec_vupkhsw\n+#define vec_vupklsw __builtin_vec_vupklsw\n+#endif\n+\n+#ifdef __POWER9_VECTOR__\n+/* Vector additions added in ISA 3.0.  */\n+#define vec_vctz __builtin_vec_vctz\n+#define vec_cnttz __builtin_vec_vctz\n+#define vec_vctzb __builtin_vec_vctzb\n+#define vec_vctzd __builtin_vec_vctzd\n+#define vec_vctzh __builtin_vec_vctzh\n+#define vec_vctzw __builtin_vec_vctzw\n+#define vec_vextract4b __builtin_vec_vextract4b\n+#define vec_vinsert4b __builtin_vec_vinsert4b\n+#define vec_vprtyb __builtin_vec_vprtyb\n+#define vec_vprtybd __builtin_vec_vprtybd\n+#define vec_vprtybw __builtin_vec_vprtybw\n+\n+#ifdef _ARCH_PPC64\n+#define vec_vprtybq __builtin_vec_vprtybq\n+#endif\n+\n+#define vec_absd __builtin_vec_vadu\n+#define vec_absdb __builtin_vec_vadub\n+#define vec_absdh __builtin_vec_vaduh\n+#define vec_absdw __builtin_vec_vaduw\n+\n+#define vec_slv __builtin_vec_vslv\n+#define vec_srv __builtin_vec_vsrv\n+\n+#define vec_extract_exp __builtin_vec_extract_exp\n+#define vec_extract_sig __builtin_vec_extract_sig\n+#define vec_insert_exp __builtin_vec_insert_exp\n+#define vec_test_data_class __builtin_vec_test_data_class\n+\n+#define scalar_extract_exp __builtin_vec_scalar_extract_exp\n+#define scalar_extract_sig __builtin_vec_scalar_extract_sig\n+#define scalar_insert_exp __builtin_vec_scalar_insert_exp\n+#define scalar_test_data_class __builtin_vec_scalar_test_data_class\n+#define scalar_test_neg __builtin_vec_scalar_test_neg\n+\n+#define scalar_cmp_exp_gt __builtin_vec_scalar_cmp_exp_gt\n+#define scalar_cmp_exp_lt __builtin_vec_scalar_cmp_exp_lt\n+#define scalar_cmp_exp_eq __builtin_vec_scalar_cmp_exp_eq\n+#define scalar_cmp_exp_unordered __builtin_vec_scalar_cmp_exp_unordered\n+\n+#ifdef _ARCH_PPC64\n+#define vec_xl_len __builtin_vec_lxvl\n+#define vec_xst_len __builtin_vec_stxvl\n+#endif\n+\n+#define vec_cmpnez __builtin_vec_vcmpnez\n+\n+#define vec_cntlz_lsbb __builtin_vec_vclzlsbb\n+#define vec_cnttz_lsbb __builtin_vec_vctzlsbb\n+\n+#define vec_xlx __builtin_vec_vextulx\n+#define vec_xrx __builtin_vec_vexturx\n+\n+#define vec_revb __builtin_vec_revb\n+#endif\n+\n+/* Predicates.\n+   For C++, we use templates in order to allow non-parenthesized arguments.\n+   For C, instead, we use macros since non-parenthesized arguments were\n+   not allowed even in older GCC implementation of AltiVec.\n+\n+   In the future, we may add more magic to the back-end, so that no\n+   one- or two-argument macros are used.  */\n+\n+#ifdef __cplusplus__\n+#define __altivec_unary_pred(NAME, CALL) \\\n+template <class T> int NAME (T a1) { return CALL; }\n+\n+#define __altivec_scalar_pred(NAME, CALL) \\\n+template <class T, class U> int NAME (T a1, U a2) { return CALL; }\n+\n+/* Given the vec_step of a type, return the corresponding bool type.  */\n+template <int STEP> class __altivec_bool_ret { };\n+template <> class __altivec_bool_ret <4> {\n+  typedef __vector __bool int __ret;\n+};\n+template <> class __altivec_bool_ret <8> {\n+  typedef __vector __bool short __ret;\n+};\n+template <> class __altivec_bool_ret <16> {\n+  typedef __vector __bool char __ret;\n+};\n+\n+/* Be very liberal in the pairs we accept.  Mistakes such as passing\n+   a `vector char' and `vector short' will be caught by the middle-end,\n+   while any attempt to detect them here would produce hard to understand\n+   error messages involving the implementation details of AltiVec.  */\n+#define __altivec_binary_pred(NAME, CALL) \\\n+template <class T, class U> \\\n+typename __altivec_bool_ret <vec_step (T)>::__ret \\\n+NAME (T a1, U a2) \\\n+{ \\\n+  return CALL; \\\n+}\n+\n+__altivec_binary_pred(vec_cmplt,\n+  __builtin_vec_cmpgt (a2, a1))\n+__altivec_binary_pred(vec_cmple,\n+  __builtin_vec_cmpge (a2, a1))\n+\n+__altivec_scalar_pred(vec_all_in,\n+  __builtin_altivec_vcmpbfp_p (__CR6_EQ, a1, a2))\n+__altivec_scalar_pred(vec_any_out,\n+  __builtin_altivec_vcmpbfp_p (__CR6_EQ_REV, a1, a2))\n+\n+__altivec_unary_pred(vec_all_nan,\n+  __builtin_altivec_vcmpeq_p (__CR6_EQ, a1, a1))\n+__altivec_unary_pred(vec_any_nan,\n+  __builtin_altivec_vcmpeq_p (__CR6_LT_REV, a1, a1))\n+\n+__altivec_unary_pred(vec_all_numeric,\n+  __builtin_altivec_vcmpeq_p (__CR6_LT, a1, a1))\n+__altivec_unary_pred(vec_any_numeric,\n+  __builtin_altivec_vcmpeq_p (__CR6_EQ_REV, a1, a1))\n+\n+__altivec_scalar_pred(vec_all_eq,\n+  __builtin_vec_vcmpeq_p (__CR6_LT, a1, a2))\n+\n+#ifndef __POWER9_VECTOR__\n+__altivec_scalar_pred(vec_all_ne,\n+  __builtin_vec_vcmpeq_p (__CR6_EQ, a1, a2))\n+__altivec_scalar_pred(vec_any_eq,\n+  __builtin_vec_vcmpeq_p (__CR6_EQ_REV, a1, a2))\n+#else\n+__altivec_scalar_pred(vec_all_nez,\n+  __builtin_vec_vcmpnez_p (__CR6_LT, a1, a2))\n+__altivec_scalar_pred(vec_any_eqz,\n+  __builtin_vec_vcmpnez_p (__CR6_LT_REV, a1, a2))\n+__altivec_scalar_pred(vec_all_ne,\n+  __builtin_vec_vcmpne_p (a1, a2))\n+__altivec_scalar_pred(vec_any_eq,\n+  __builtin_vec_vcmpae_p (a1, a2))\n+#endif\n+\n+__altivec_scalar_pred(vec_any_ne,\n+  __builtin_vec_vcmpeq_p (__CR6_LT_REV, a1, a2))\n+\n+__altivec_scalar_pred(vec_all_gt,\n+  __builtin_vec_vcmpgt_p (__CR6_LT, a1, a2))\n+__altivec_scalar_pred(vec_all_lt,\n+  __builtin_vec_vcmpgt_p (__CR6_LT, a2, a1))\n+__altivec_scalar_pred(vec_any_gt,\n+  __builtin_vec_vcmpgt_p (__CR6_EQ_REV, a1, a2))\n+__altivec_scalar_pred(vec_any_lt,\n+  __builtin_vec_vcmpgt_p (__CR6_EQ_REV, a2, a1))\n+\n+__altivec_scalar_pred(vec_all_ngt,\n+  __builtin_altivec_vcmpgt_p (__CR6_EQ, a1, a2))\n+__altivec_scalar_pred(vec_all_nlt,\n+  __builtin_altivec_vcmpgt_p (__CR6_EQ, a2, a1))\n+__altivec_scalar_pred(vec_any_ngt,\n+  __builtin_altivec_vcmpgt_p (__CR6_LT_REV, a1, a2))\n+__altivec_scalar_pred(vec_any_nlt,\n+  __builtin_altivec_vcmpgt_p (__CR6_LT_REV, a2, a1))\n+\n+/* __builtin_vec_vcmpge_p is vcmpgefp for floating-point vector types,\n+   while for integer types it is converted to __builtin_vec_vcmpgt_p,\n+   with inverted args and condition code.  */\n+__altivec_scalar_pred(vec_all_le,\n+  __builtin_vec_vcmpge_p (__CR6_LT, a2, a1))\n+__altivec_scalar_pred(vec_all_ge,\n+  __builtin_vec_vcmpge_p (__CR6_LT, a1, a2))\n+__altivec_scalar_pred(vec_any_le,\n+  __builtin_vec_vcmpge_p (__CR6_EQ_REV, a2, a1))\n+__altivec_scalar_pred(vec_any_ge,\n+  __builtin_vec_vcmpge_p (__CR6_EQ_REV, a1, a2))\n+\n+__altivec_scalar_pred(vec_all_nge,\n+  __builtin_altivec_vcmpge_p (__CR6_EQ, a1, a2))\n+__altivec_scalar_pred(vec_all_nle,\n+  __builtin_altivec_vcmpge_p (__CR6_EQ, a2, a1))\n+__altivec_scalar_pred(vec_any_nge,\n+  __builtin_altivec_vcmpge_p (__CR6_LT_REV, a1, a2))\n+__altivec_scalar_pred(vec_any_nle,\n+  __builtin_altivec_vcmpge_p (__CR6_LT_REV, a2, a1))\n+\n+#undef __altivec_scalar_pred\n+#undef __altivec_unary_pred\n+#undef __altivec_binary_pred\n+#else\n+#define vec_cmplt(a1, a2) __builtin_vec_cmpgt ((a2), (a1))\n+#define vec_cmple(a1, a2) __builtin_vec_cmpge ((a2), (a1))\n+\n+#define vec_all_in(a1, a2) __builtin_altivec_vcmpbfp_p (__CR6_EQ, (a1), (a2))\n+#define vec_any_out(a1, a2) __builtin_altivec_vcmpbfp_p (__CR6_EQ_REV, (a1), (a2))\n+\n+#define vec_all_nan(a1) __builtin_vec_vcmpeq_p (__CR6_EQ, (a1), (a1))\n+#define vec_any_nan(a1) __builtin_vec_vcmpeq_p (__CR6_LT_REV, (a1), (a1))\n+\n+#define vec_all_numeric(a1) __builtin_vec_vcmpeq_p (__CR6_LT, (a1), (a1))\n+#define vec_any_numeric(a1) __builtin_vec_vcmpeq_p (__CR6_EQ_REV, (a1), (a1))\n+\n+#define vec_all_eq(a1, a2) __builtin_vec_vcmpeq_p (__CR6_LT, (a1), (a2))\n+\n+#ifdef __POWER9_VECTOR__\n+#define vec_all_nez(a1, a2) __builtin_vec_vcmpnez_p (__CR6_LT, (a1), (a2))\n+#define vec_any_eqz(a1, a2) __builtin_vec_vcmpnez_p (__CR6_LT_REV, (a1), (a2))\n+#define vec_all_ne(a1, a2) __builtin_vec_vcmpne_p ((a1), (a2))\n+#define vec_any_eq(a1, a2) __builtin_vec_vcmpae_p ((a1), (a2))\n+#else\n+#define vec_all_ne(a1, a2) __builtin_vec_vcmpeq_p (__CR6_EQ, (a1), (a2))\n+#define vec_any_eq(a1, a2) __builtin_vec_vcmpeq_p (__CR6_EQ_REV, (a1), (a2))\n+#endif\n+\n+#define vec_any_ne(a1, a2) __builtin_vec_vcmpeq_p (__CR6_LT_REV, (a1), (a2))\n+\n+#define vec_all_gt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_LT, (a1), (a2))\n+#define vec_all_lt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_LT, (a2), (a1))\n+#define vec_any_gt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_EQ_REV, (a1), (a2))\n+#define vec_any_lt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_EQ_REV, (a2), (a1))\n+\n+#define vec_all_ngt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_EQ, (a1), (a2))\n+#define vec_all_nlt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_EQ, (a2), (a1))\n+#define vec_any_ngt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_LT_REV, (a1), (a2))\n+#define vec_any_nlt(a1, a2) __builtin_vec_vcmpgt_p (__CR6_LT_REV, (a2), (a1))\n+\n+/* __builtin_vec_vcmpge_p is vcmpgefp for floating-point vector types,\n+   while for integer types it is converted to __builtin_vec_vcmpgt_p,\n+   with inverted args and condition code.  */\n+#define vec_all_le(a1, a2) __builtin_vec_vcmpge_p (__CR6_LT, (a2), (a1))\n+#define vec_all_ge(a1, a2) __builtin_vec_vcmpge_p (__CR6_LT, (a1), (a2))\n+#define vec_any_le(a1, a2) __builtin_vec_vcmpge_p (__CR6_EQ_REV, (a2), (a1))\n+#define vec_any_ge(a1, a2) __builtin_vec_vcmpge_p (__CR6_EQ_REV, (a1), (a2))\n+\n+#define vec_all_nge(a1, a2) __builtin_vec_vcmpge_p (__CR6_EQ, (a1), (a2))\n+#define vec_all_nle(a1, a2) __builtin_vec_vcmpge_p (__CR6_EQ, (a2), (a1))\n+#define vec_any_nge(a1, a2) __builtin_vec_vcmpge_p (__CR6_LT_REV, (a1), (a2))\n+#define vec_any_nle(a1, a2) __builtin_vec_vcmpge_p (__CR6_LT_REV, (a2), (a1))\n+#endif\n+\n+/* These do not accept vectors, so they do not have a __builtin_vec_*\n+   counterpart.  */\n+#define vec_dss(x) __builtin_altivec_dss((x))\n+#define vec_dssall() __builtin_altivec_dssall ()\n+#define vec_mfvscr() ((__vector unsigned short) __builtin_altivec_mfvscr ())\n+#define vec_splat_s8(x) __builtin_altivec_vspltisb ((x))\n+#define vec_splat_s16(x) __builtin_altivec_vspltish ((x))\n+#define vec_splat_s32(x) __builtin_altivec_vspltisw ((x))\n+#define vec_splat_u8(x) ((__vector unsigned char) vec_splat_s8 ((x)))\n+#define vec_splat_u16(x) ((__vector unsigned short) vec_splat_s16 ((x)))\n+#define vec_splat_u32(x) ((__vector unsigned int) vec_splat_s32 ((x)))\n+\n+/* This also accepts a type for its parameter, so it is not enough\n+   to #define vec_step to __builtin_vec_step.  */\n+#define vec_step(x) __builtin_vec_step (* (__typeof__ (x) *) 0)\n+\n+#endif /* _ALTIVEC_H */"}, {"sha": "649f1810d1685a669c3ad3f710e9ee7080d5734a", "filename": "gcc/config/powerpcspe/altivec.md", "status": "added", "additions": 4028, "deletions": 0, "changes": 4028, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faltivec.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "8a11ca8e17d3c407c8f8a2c2b86b385ea5ca2a2f", "filename": "gcc/config/powerpcspe/biarch64.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fbiarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fbiarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fbiarch64.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,26 @@\n+/* Definitions of target machine for GNU compiler, for 32/64 bit powerpc.\n+   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n+#define RS6000_BI_ARCH 1"}, {"sha": "fc634c1ed607f7f267304c88d79f3744ad3b5b91", "filename": "gcc/config/powerpcspe/bmi2intrin.h", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fbmi2intrin.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,169 @@\n+/* Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This header is distributed to simplify porting x86_64 code that\n+   makes explicit use of Intel intrinsics to powerpc64le.\n+   It is the user's responsibility to determine if the results are\n+   acceptable and make additional changes as necessary.\n+   Note that much code that uses Intel intrinsics can be rewritten in\n+   standard C or GNU C extensions, which are more portable and better\n+   optimized across multiple targets.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <bmi2intrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _BMI2INTRIN_H_INCLUDED\n+#define _BMI2INTRIN_H_INCLUDED\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bzhi_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return ((__X << (32 - __Y)) >> (32 - __Y));\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mulx_u32 (unsigned int __X, unsigned int __Y, unsigned int *__P)\n+{\n+  unsigned long long __res = (unsigned long long) __X * __Y;\n+  *__P = (unsigned int) (__res >> 32);\n+  return (unsigned int) __res;\n+}\n+\n+#ifdef  __PPC64__\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bzhi_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  return ((__X << (64 - __Y)) >> (64 - __Y));\n+}\n+\n+/* __int128 requires base 64-bit.  */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mulx_u64 (unsigned long long __X, unsigned long long __Y,\n+\t   unsigned long long *__P)\n+{\n+  unsigned __int128 __res = (unsigned __int128) __X * __Y;\n+  *__P = (unsigned long long) (__res >> 64);\n+  return (unsigned long long) __res;\n+}\n+\n+#ifdef  _ARCH_PWR7\n+/* popcount and bpermd require power7 minimum.  */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pdep_u64 (unsigned long long __X, unsigned long long __M)\n+{\n+  unsigned long result = 0x0UL;\n+  const unsigned long mask = 0x8000000000000000UL;\n+  unsigned long m = __M;\n+  unsigned long c, t;\n+  unsigned long p;\n+\n+  /* The pop-count of the mask gives the number of the bits from\n+   source to process.  This is also needed to shift bits from the\n+   source into the correct position for the result.  */\n+  p = 64 - __builtin_popcountl (__M);\n+\n+  /* The loop is for the number of '1' bits in the mask and clearing\n+   each mask bit as it is processed.  */\n+  while (m != 0)\n+    {\n+      c = __builtin_clzl (m);\n+      t = __X << (p - c);\n+      m ^= (mask >> c);\n+      result |= (t & (mask >> c));\n+      p++;\n+    }\n+  return (result);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pext_u64 (unsigned long long __X, unsigned long long __M)\n+{\n+  unsigned long p = 0x4040404040404040UL; // initial bit permute control\n+  const unsigned long mask = 0x8000000000000000UL;\n+  unsigned long m = __M;\n+  unsigned long c;\n+  unsigned long result;\n+\n+  /* if the mask is constant and selects 8 bits or less we can use\n+   the Power8 Bit permute instruction.  */\n+  if (__builtin_constant_p (__M) && (__builtin_popcountl (__M) <= 8))\n+    {\n+      /* Also if the pext mask is constant, then the popcount is\n+       constant, we can evaluate the following loop at compile\n+       time and use a constant bit permute vector.  */\n+      for (long i = 0; i < __builtin_popcountl (__M); i++)\n+\t{\n+\t  c = __builtin_clzl (m);\n+\t  p = (p << 8) | c;\n+\t  m ^= (mask >> c);\n+\t}\n+      result = __builtin_bpermd (p, __X);\n+    }\n+  else\n+    {\n+      p = 64 - __builtin_popcountl (__M);\n+      result = 0;\n+      /* We could a use a for loop here, but that combined with\n+       -funroll-loops can expand to a lot of code.  The while\n+       loop avoids unrolling and the compiler commons the xor\n+       from clearing the mask bit with the (m != 0) test.  The\n+       result is a more compact loop setup and body.  */\n+      while (m != 0)\n+\t{\n+\t  unsigned long t;\n+\t  c = __builtin_clzl (m);\n+\t  t = (__X & (mask >> c)) >> (p - c);\n+\t  m ^= (mask >> c);\n+\t  result |= (t);\n+\t  p++;\n+\t}\n+    }\n+  return (result);\n+}\n+\n+/* these 32-bit implementations depend on 64-bit pdep/pext\n+   which depend on _ARCH_PWR7.  */\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pdep_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return _pdep_u64 (__X, __Y);\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pext_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return _pext_u64 (__X, __Y);\n+}\n+#endif /* _ARCH_PWR7  */\n+#endif /* __PPC64__  */\n+\n+#endif /* _BMI2INTRIN_H_INCLUDED */"}, {"sha": "28671ca0d3275ddeef8502a88b3250ffdb95fa22", "filename": "gcc/config/powerpcspe/bmiintrin.h", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fbmiintrin.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,187 @@\n+/* Copyright (C) 2010-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This header is distributed to simplify porting x86_64 code that\n+   makes explicit use of Intel intrinsics to powerpc64le.\n+   It is the user's responsibility to determine if the results are\n+   acceptable and make additional changes as necessary.\n+   Note that much code that uses Intel intrinsics can be rewritten in\n+   standard C or GNU C extensions, which are more portable and better\n+   optimized across multiple targets.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <bmiintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _BMIINTRIN_H_INCLUDED\n+#define _BMIINTRIN_H_INCLUDED\n+\n+extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u16 (unsigned short __X)\n+{\n+  return __builtin_ctz (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__andn_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return (~__X & __Y);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bextr_u32 (unsigned int __X, unsigned int __P, unsigned int __L)\n+{\n+  return ((__X << (32 - (__L + __P))) >> (32 - __L));\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bextr_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  unsigned int __P, __L;\n+  __P = __Y & 0xFF;\n+  __L = (__Y >> 8) & 0xFF;\n+  return (_bextr_u32 (__X, __P, __L));\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsi_u32 (unsigned int __X)\n+{\n+  return (__X & -__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsi_u32 (unsigned int __X)\n+{\n+  return __blsi_u32 (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsmsk_u32 (unsigned int __X)\n+{\n+  return (__X ^ (__X - 1));\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsmsk_u32 (unsigned int __X)\n+{\n+  return __blsmsk_u32 (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsr_u32 (unsigned int __X)\n+{\n+  return (__X & (__X - 1));\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsr_u32 (unsigned int __X)\n+{\n+  return __blsr_u32 (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u32 (unsigned int __X)\n+{\n+  return __builtin_ctz (__X);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tzcnt_u32 (unsigned int __X)\n+{\n+  return __builtin_ctz (__X);\n+}\n+\n+/* use the 64-bit shift, rotate, and count leading zeros instructions\n+   for long long.  */\n+#ifdef  __PPC64__\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__andn_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  return (~__X & __Y);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bextr_u64 (unsigned long long __X, unsigned int __P, unsigned int __L)\n+{\n+  return ((__X << (64 - (__L + __P))) >> (64 - __L));\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bextr_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  unsigned int __P, __L;\n+  __P = __Y & 0xFF;\n+  __L = (__Y & 0xFF00) >> 8;\n+  return (_bextr_u64 (__X, __P, __L));\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsi_u64 (unsigned long long __X)\n+{\n+  return __X & -__X;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsi_u64 (unsigned long long __X)\n+{\n+  return __blsi_u64 (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsmsk_u64 (unsigned long long __X)\n+{\n+  return (__X ^ (__X - 1));\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsmsk_u64 (unsigned long long __X)\n+{\n+  return __blsmsk_u64 (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsr_u64 (unsigned long long __X)\n+{\n+  return (__X & (__X - 1));\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsr_u64 (unsigned long long __X)\n+{\n+  return __blsr_u64 (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u64 (unsigned long long __X)\n+{\n+  return __builtin_ctzll (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tzcnt_u64 (unsigned long long __X)\n+{\n+  return __builtin_ctzll (__X);\n+}\n+#endif /* __PPC64__  */\n+\n+#endif /* _BMIINTRIN_H_INCLUDED */"}, {"sha": "a92e82acecf9f25d61e6abb879a1c0cb37b4c942", "filename": "gcc/config/powerpcspe/cell.md", "status": "added", "additions": 423, "deletions": 0, "changes": 423, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fcell.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fcell.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fcell.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,423 @@\n+;; Scheduling description for cell processor.\n+;; Copyright (C) 2001-2017 Free Software Foundation, Inc.\n+;; Contributed by Sony Computer Entertainment, Inc.,\n+\n+\n+;; This file is free software; you can redistribute it and/or modify it under\n+;; the terms of the GNU General Public License as published by the Free\n+;; Software Foundation; either version 3 of the License, or (at your option) \n+;; any later version.\n+\n+;; This file is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+;; for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Sources: BE BOOK4 (/sfs/enc/doc/PPU_BookIV_DD3.0_latest.pdf)\n+\n+;; BE Architecture *DD3.0 and DD3.1*\n+;; This file simulate PPU processor unit backend of pipeline, maualP24. \n+;; manual P27, stall and flush points\n+;; IU, XU, VSU, dispatcher decodes and dispatch 2 insns per cycle in program\n+;;  order, the grouped address are aligned by 8\n+;; This file only simulate one thread situation\n+;; XU executes all fixed point insns(3 units, a simple alu, a complex unit,\n+;;   and load/store unit)\n+;; VSU executes all scalar floating points insn(a float unit),\n+;;   VMX insns(VMX unit, 4 sub units, simple, permute, complex, floating point)\n+\n+;; Dual issue combination\n+\n+;;\tFXU\tLSU\tBR \t        VMX\t               VMX\n+;;                             (sx,cx,vsu_fp,fp_arith)    (perm,vsu_ls,fp_ls)\n+;;FXU\tX\n+;;LSU\t\tX               \tX               \tX\t\n+;;BR\t\t\tX\n+;;VMX(sx,cx,vsu_fp,fp_arth)\t\tX\n+;;VMX(perm,vsu_ls, fp_ls)\t\t\t\t\tX\n+;;    X are illegal combination.\n+\n+;; Dual issue exceptions:\n+;;(1) nop-pipelined FXU instr in slot 0 \n+;;(2) non-pipelined FPU inst in slot 0\n+;; CSI instr(contex-synchronizing insn)\n+;; Microcode insn\n+\n+;; BRU unit: bru(none register stall), bru_cr(cr register stall)\n+;; VSU unit: vus(vmx simple), vup(vmx permute), vuc(vmx complex),\n+;;  vuf(vmx float), fpu(floats). fpu_div is hypothetical, it is for\n+;;  nonpipelined simulation\n+;; micr insns will stall at least 7 cycles to get the first instr from ROM,\n+;;  micro instructions are not dual issued. \n+\n+;; slot0 is older than slot1\n+;; non-pipelined insn need to be in slot1 to avoid 1cycle stall\n+\n+;; There different stall point\n+;; IB2, only stall one thread if stall here, so try to stall here as much as\n+;; we can \n+;; condition(1) insert nop, OR and ORI instruction form \n+;; condition(2) flush happens, in case of: RAW, WAW, D-ERAT miss, or\n+;;   CR0-access while stdcx, or stwcx\n+;; IS2 stall ;; Page91 for details\n+;; VQ8 stall\n+;; IS2 stall can be activated by VQ8 stall and trying to issue a vsu instr to\n+;;  the vsu issue queue\n+\n+;;(define_automaton \"cellxu\")\n+\n+;;(define_cpu_unit \"fxu_cell,lsu_cell,bru_cell,vsu1_cell,vsu2_cell\" \"cellxu\")\n+\n+;; ndfa\n+(define_automaton \"cellxu,cellvsu,cellbru,cell_mis\")\n+\n+(define_cpu_unit \"fxu_cell,lsu_cell\" \"cellxu\")\n+(define_cpu_unit \"bru_cell\" \"cellbru\")\n+(define_cpu_unit \"vsu1_cell,vsu2_cell\" \"cellvsu\")\n+\n+(define_cpu_unit \"slot0,slot1\" \"cell_mis\")\n+\n+(absence_set \"slot0\" \"slot1\")\n+\n+(define_reservation \"nonpipeline\" \"fxu_cell+lsu_cell+vsu1_cell+vsu2_cell\")\n+(define_reservation \"slot01\" \"slot0|slot1\")\n+\n+\n+;; Load/store\n+;; lmw, lswi, lswx are only generated for optimize for space, MC,\n+;;   these instr are not simulated\n+(define_insn_reservation \"cell-load\" 2\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,lsu_cell\")\n+\n+;; ldux, ldu, lbzux, lbzu, hardware breaks it down to two instrs,\n+;;  if with 32bytes alignment, CMC\n+(define_insn_reservation \"cell-load-ux\" 2\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,fxu_cell+lsu_cell\")\n+\n+;; lha, lhax, lhau, lhaux, lwa, lwax, lwaux, MC, latency unknown\n+;;   11/7, 11/8, 11/12\n+(define_insn_reservation \"cell-load-ext\" 2\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,fxu_cell+lsu_cell\")\n+\n+;;lfs,lfsx,lfd,lfdx, 1 cycle\n+(define_insn_reservation \"cell-fpload\" 1\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"vsu2_cell+lsu_cell+slot01\")\n+\n+;; lfsu,lfsux,lfdu,lfdux 1cycle(fpr) 2 cycle(gpr)\n+(define_insn_reservation \"cell-fpload-update\" 1\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"fxu_cell+vsu2_cell+lsu_cell+slot01\")\n+\n+(define_insn_reservation \"cell-vecload\" 2\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,vsu2_cell+lsu_cell\")\n+\n+;;st? stw(MC)\n+(define_insn_reservation \"cell-store\" 1\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"lsu_cell+slot01\")\n+\n+;;stdux, stdu, (hardware breaks into store and add) 2 for update reg\n+(define_insn_reservation \"cell-store-update\" 1\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"fxu_cell+lsu_cell+slot01\")\n+\n+(define_insn_reservation \"cell-fpstore\" 1\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"vsu2_cell+lsu_cell+slot01\")\n+\n+(define_insn_reservation \"cell-fpstore-update\" 1\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"vsu2_cell+fxu_cell+lsu_cell+slot01\")\n+\n+(define_insn_reservation \"cell-vecstore\" 1\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"vsu2_cell+lsu_cell+slot01\")\n+\n+;; Integer latency is 2 cycles\n+(define_insn_reservation \"cell-integer\" 2\n+  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\"))\n+\t    (and (eq_attr \"type\" \"insert\")\n+\t\t (eq_attr \"size\" \"64\")))\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,fxu_cell\")\n+\n+;; Two integer latency is 4 cycles\n+(define_insn_reservation \"cell-two\" 4\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,fxu_cell,fxu_cell*2\")\n+\n+;; Three integer latency is 6 cycles\n+(define_insn_reservation \"cell-three\" 6\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,fxu_cell,fxu_cell*4\")\n+\n+;; rlwimi, alter cr0  \n+(define_insn_reservation \"cell-insert\" 2\n+  (and (eq_attr \"type\" \"insert\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"cell\"))\n+ \"slot01,fxu_cell\")\n+\n+;; cmpi, cmpli, cmpla, add, addo, sub, subo, alter cr0 \n+(define_insn_reservation \"cell-cmp\" 1\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"fxu_cell+slot01\")\n+\n+;; add, addo, sub, subo, alter cr0, rldcli, rlwinm \n+(define_insn_reservation \"cell-fast-cmp\" 2\n+  (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"cell\")\n+       (eq_attr \"cell_micro\" \"not\"))\n+  \"slot01,fxu_cell\")\n+\n+(define_insn_reservation \"cell-cmp-microcoded\" 9\n+  (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"cell\")\n+       (eq_attr \"cell_micro\" \"always\"))\n+  \"slot0+slot1,fxu_cell,fxu_cell*7\")\n+\n+;; mulld\n+(define_insn_reservation \"cell-lmul\" 15\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot1,nonpipeline,nonpipeline*13\")\n+\n+;; mulld. is microcoded\n+(define_insn_reservation \"cell-lmul-cmp\" 22\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot0+slot1,nonpipeline,nonpipeline*20\")\n+\n+;; mulli, 6 cycles\n+(define_insn_reservation \"cell-imul23\" 6\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8,16\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot1,nonpipeline,nonpipeline*4\")\n+\n+;; mullw, 9\n+(define_insn_reservation \"cell-imul\" 9\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot1,nonpipeline,nonpipeline*7\")\n+ \n+;; divide\n+(define_insn_reservation \"cell-idiv\" 32\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot1,nonpipeline,nonpipeline*30\")\n+\n+(define_insn_reservation \"cell-ldiv\" 64\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot1,nonpipeline,nonpipeline*62\")\n+\n+;;mflr and mfctr are pipelined\n+(define_insn_reservation \"cell-mfjmpr\" 1\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01+bru_cell\")\n+\n+;;mtlr and mtctr,\n+;;mtspr fully pipelined \n+(define_insn_reservation \"cell-mtjmpr\" 1\n+ (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"bru_cell+slot01\")\n+\n+;; Branches\n+;; b, ba, bl, bla, unconditional branch always predicts correctly n/a latency\n+;; bcctr, bcctrl, latency 2, actually adjust by be to 4\n+(define_insn_reservation \"cell-branch\" 1\n+  (and (eq_attr \"type\" \"branch\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"bru_cell+slot1\")\n+\n+(define_insn_reservation \"cell-branchreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"bru_cell+slot1\")\n+\n+;; cr hazard\n+;; page 90, special cases for CR hazard, only one instr can access cr per cycle\n+;; if insn reads CR following a stwcx, pipeline stall till stwcx finish\n+(define_insn_reservation \"cell-crlogical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"bru_cell+slot01\")\n+\n+;; mfcrf and mfcr is about 34 cycles and nonpipelined\n+(define_insn_reservation \"cell-mfcr\" 34\n+  (and (eq_attr \"type\" \"mfcrf,mfcr\")\n+       (eq_attr \"cpu\" \"cell\"))\n+   \"slot1,nonpipeline,nonpipeline*32\")\n+\n+;; mtcrf (1 field)\n+(define_insn_reservation \"cell-mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"fxu_cell+slot01\")\n+\n+; Basic FP latency is 10 cycles, thoughput is 1/cycle\n+(define_insn_reservation \"cell-fp\" 10\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,vsu1_cell,vsu1_cell*8\")\n+\n+(define_insn_reservation \"cell-fpcompare\" 1\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"vsu1_cell+slot01\")\n+\n+;; sdiv thoughput 1/74, not pipelined but only in the FPU\n+(define_insn_reservation \"cell-sdiv\" 74\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot1,nonpipeline,nonpipeline*72\")\n+\n+;; fsqrt thoughput 1/84, not pipelined but only in the FPU\n+(define_insn_reservation \"cell-sqrt\" 84\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot1,nonpipeline,nonpipeline*82\")\n+\n+; VMX\n+(define_insn_reservation \"cell-vecsimple\" 4\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,vsu1_cell,vsu1_cell*2\")\n+\n+;; mult, div, madd\n+(define_insn_reservation \"cell-veccomplex\" 10\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,vsu1_cell,vsu1_cell*8\")\n+\n+;; TODO: add support for recording instructions\n+(define_insn_reservation \"cell-veccmp\" 4\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,vsu1_cell,vsu1_cell*2\")\n+\n+(define_insn_reservation \"cell-vecfloat\" 12\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,vsu1_cell,vsu1_cell*10\")\n+\n+(define_insn_reservation \"cell-vecperm\" 4\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,vsu2_cell,vsu2_cell*2\")\n+\n+;; New for 4.2, syncs\n+\n+(define_insn_reservation \"cell-sync\" 11\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,lsu_cell,lsu_cell*9\")\n+\n+(define_insn_reservation \"cell-isync\" 11\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,lsu_cell,lsu_cell*9\")\n+\n+(define_insn_reservation \"cell-load_l\" 11\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,lsu_cell,lsu_cell*9\")\n+\n+(define_insn_reservation \"cell-store_c\" 11\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"cell\"))\n+  \"slot01,lsu_cell,lsu_cell*9\")\n+\n+;; RAW register dependency\n+\n+;; addi r3, r3, 1\n+;; lw r4,offset(r3)\n+;; there are 5 cycle deplay for r3 bypassing\n+;; there are 5 cycle delay for a dependent load after a load\n+(define_bypass 5 \"cell-integer\" \"cell-load\")\n+(define_bypass 5 \"cell-integer\" \"cell-load-ext\")\n+(define_bypass 5 \"cell-load,cell-load-ext\" \"cell-load,cell-load-ext\")\n+\n+;; there is a 6 cycle delay after a fp compare until you can use the cr.\n+(define_bypass 6 \"cell-fpcompare\" \"cell-branch,cell-branchreg,cell-mfcr,cell-crlogical\")\n+\n+;; VXU float RAW\n+(define_bypass 11 \"cell-vecfloat\" \"cell-vecfloat\")\n+\n+;; VXU and FPU\n+(define_bypass 6 \"cell-veccomplex\" \"cell-vecsimple\")\n+;;(define_bypass 6 \"cell-veccompare\" \"cell-branch,cell-branchreg\")\n+(define_bypass 3 \"cell-vecfloat\" \"cell-veccomplex\")\n+; this is not correct, \n+;;  this is a stall in general and not dependent on result\n+(define_bypass 13 \"cell-vecstore\" \"cell-fpstore\")\n+; this is not correct, this can never be true, not dependent on result\n+(define_bypass 7 \"cell-fp\" \"cell-fpload\")\n+;; vsu1 should avoid writing to the same target register as vsu2 insn\n+;;   within 12 cycles. \n+\n+;; WAW hazard\n+\n+;; the target of VSU estimate should not be reused within 10 dispatch groups\n+;; the target of VSU float should not be reused within 8 dispatch groups\n+;; the target of VSU complex should not be reused within 5 dispatch groups\n+;; FP LOAD should not reuse an FPU Arithmetic target with 6 dispatch gropus\n+\n+;; mtctr-bcctr/bcctrl, branch target ctr register shadow update at\n+;;  ex4 stage(10 cycles)\n+(define_bypass 10 \"cell-mtjmpr\" \"cell-branchreg\")\n+\n+;;Things are not simulated:\n+;; update instruction, update address gpr are not simulated\n+;; vrefp, vrsqrtefp have latency(14), currently simulated as 12 cycle float\n+;;  insns\n+"}, {"sha": "44f45d8b676123788c2688f124c035471ba7d709", "filename": "gcc/config/powerpcspe/constraints.md", "status": "added", "additions": 323, "deletions": 0, "changes": 323, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fconstraints.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,323 @@\n+;; Constraint definitions for RS6000\n+;; Copyright (C) 2006-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Available constraint letters: e k q t u A B C D S T\n+\n+;; Register constraints\n+\n+(define_register_constraint \"f\" \"rs6000_constraints[RS6000_CONSTRAINT_f]\"\n+  \"@internal\")\n+\n+(define_register_constraint \"d\" \"rs6000_constraints[RS6000_CONSTRAINT_d]\"\n+  \"@internal\")\n+\n+(define_register_constraint \"b\" \"BASE_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"h\" \"SPECIAL_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"c\" \"CTR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"l\" \"LINK_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"v\" \"ALTIVEC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"x\" \"CR0_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"y\" \"CR_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"z\" \"CA_REGS\"\n+  \"@internal\")\n+\n+;; Use w as a prefix to add VSX modes\n+;; any VSX register\n+(define_register_constraint \"wa\" \"rs6000_constraints[RS6000_CONSTRAINT_wa]\"\n+  \"Any VSX register if the -mvsx option was used or NO_REGS.\")\n+\n+(define_register_constraint \"wb\" \"rs6000_constraints[RS6000_CONSTRAINT_wb]\"\n+  \"Altivec register if the -mpower9-dform option was used or NO_REGS.\")\n+\n+;; NOTE: For compatibility, \"wc\" is reserved to represent individual CR bits.\n+;; It is currently used for that purpose in LLVM.\n+\n+(define_register_constraint \"wd\" \"rs6000_constraints[RS6000_CONSTRAINT_wd]\"\n+  \"VSX vector register to hold vector double data or NO_REGS.\")\n+\n+(define_register_constraint \"we\" \"rs6000_constraints[RS6000_CONSTRAINT_we]\"\n+  \"VSX register if the -mpower9-vector -m64 options were used or NO_REGS.\")\n+\n+(define_register_constraint \"wf\" \"rs6000_constraints[RS6000_CONSTRAINT_wf]\"\n+  \"VSX vector register to hold vector float data or NO_REGS.\")\n+\n+(define_register_constraint \"wg\" \"rs6000_constraints[RS6000_CONSTRAINT_wg]\"\n+  \"If -mmfpgpr was used, a floating point register or NO_REGS.\")\n+\n+(define_register_constraint \"wh\" \"rs6000_constraints[RS6000_CONSTRAINT_wh]\"\n+  \"Floating point register if direct moves are available, or NO_REGS.\")\n+\n+(define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wi]\"\n+  \"FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\")\n+\n+(define_register_constraint \"wj\" \"rs6000_constraints[RS6000_CONSTRAINT_wj]\"\n+  \"FP or VSX register to hold 64-bit integers for direct moves or NO_REGS.\")\n+\n+(define_register_constraint \"wk\" \"rs6000_constraints[RS6000_CONSTRAINT_wk]\"\n+  \"FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS.\")\n+\n+(define_register_constraint \"wl\" \"rs6000_constraints[RS6000_CONSTRAINT_wl]\"\n+  \"Floating point register if the LFIWAX instruction is enabled or NO_REGS.\")\n+\n+(define_register_constraint \"wm\" \"rs6000_constraints[RS6000_CONSTRAINT_wm]\"\n+  \"VSX register if direct move instructions are enabled, or NO_REGS.\")\n+\n+;; NO_REGs register constraint, used to merge mov{sd,sf}, since movsd can use\n+;; direct move directly, and movsf can't to move between the register sets.\n+;; There is a mode_attr that resolves to wm for SDmode and wn for SFmode\n+(define_register_constraint \"wn\" \"NO_REGS\" \"No register (NO_REGS).\")\n+\n+(define_register_constraint \"wo\" \"rs6000_constraints[RS6000_CONSTRAINT_wo]\"\n+  \"VSX register if the -mpower9-vector option was used or NO_REGS.\")\n+\n+(define_register_constraint \"wp\" \"rs6000_constraints[RS6000_CONSTRAINT_wp]\"\n+  \"VSX register to use for IEEE 128-bit fp TFmode, or NO_REGS.\")\n+\n+(define_register_constraint \"wq\" \"rs6000_constraints[RS6000_CONSTRAINT_wq]\"\n+  \"VSX register to use for IEEE 128-bit fp KFmode, or NO_REGS.\")\n+\n+(define_register_constraint \"wr\" \"rs6000_constraints[RS6000_CONSTRAINT_wr]\"\n+  \"General purpose register if 64-bit instructions are enabled or NO_REGS.\")\n+\n+(define_register_constraint \"ws\" \"rs6000_constraints[RS6000_CONSTRAINT_ws]\"\n+  \"VSX vector register to hold scalar double values or NO_REGS.\")\n+\n+(define_register_constraint \"wt\" \"rs6000_constraints[RS6000_CONSTRAINT_wt]\"\n+  \"VSX vector register to hold 128 bit integer or NO_REGS.\")\n+\n+(define_register_constraint \"wu\" \"rs6000_constraints[RS6000_CONSTRAINT_wu]\"\n+  \"Altivec register to use for float/32-bit int loads/stores  or NO_REGS.\")\n+\n+(define_register_constraint \"wv\" \"rs6000_constraints[RS6000_CONSTRAINT_wv]\"\n+  \"Altivec register to use for double loads/stores  or NO_REGS.\")\n+\n+(define_register_constraint \"ww\" \"rs6000_constraints[RS6000_CONSTRAINT_ww]\"\n+  \"FP or VSX register to perform float operations under -mvsx or NO_REGS.\")\n+\n+(define_register_constraint \"wx\" \"rs6000_constraints[RS6000_CONSTRAINT_wx]\"\n+  \"Floating point register if the STFIWX instruction is enabled or NO_REGS.\")\n+\n+(define_register_constraint \"wy\" \"rs6000_constraints[RS6000_CONSTRAINT_wy]\"\n+  \"FP or VSX register to perform ISA 2.07 float ops or NO_REGS.\")\n+\n+(define_register_constraint \"wz\" \"rs6000_constraints[RS6000_CONSTRAINT_wz]\"\n+  \"Floating point register if the LFIWZX instruction is enabled or NO_REGS.\")\n+\n+(define_register_constraint \"wA\" \"rs6000_constraints[RS6000_CONSTRAINT_wA]\"\n+  \"BASE_REGS if 64-bit instructions are enabled or NO_REGS.\")\n+\n+;; wB needs ISA 2.07 VUPKHSW\n+(define_constraint \"wB\"\n+  \"Signed 5-bit constant integer that can be loaded into an altivec register.\"\n+  (and (match_code \"const_int\")\n+       (and (match_test \"TARGET_P8_VECTOR\")\n+\t    (match_operand 0 \"s5bit_cint_operand\"))))\n+\n+(define_constraint \"wD\"\n+  \"Int constant that is the element number of the 64-bit scalar in a vector.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_VSX && (ival == VECTOR_ELEMENT_SCALAR_64BIT)\")))\n+\n+(define_constraint \"wE\"\n+  \"Vector constant that can be loaded with the XXSPLTIB instruction.\"\n+  (match_test \"xxspltib_constant_nosplit (op, mode)\"))\n+\n+;; Extended fusion store\n+(define_memory_constraint \"wF\"\n+  \"Memory operand suitable for power9 fusion load/stores\"\n+  (match_operand 0 \"fusion_addis_mem_combo_load\"))\n+\n+;; Fusion gpr load.\n+(define_memory_constraint \"wG\"\n+  \"Memory operand suitable for TOC fusion memory references\"\n+  (match_operand 0 \"toc_fusion_mem_wrapped\"))\n+\n+(define_register_constraint \"wH\" \"rs6000_constraints[RS6000_CONSTRAINT_wH]\"\n+  \"Altivec register to hold 32-bit integers or NO_REGS.\")\n+\n+(define_register_constraint \"wI\" \"rs6000_constraints[RS6000_CONSTRAINT_wI]\"\n+  \"FPR register to hold 32-bit integers or NO_REGS.\")\n+\n+(define_register_constraint \"wJ\" \"rs6000_constraints[RS6000_CONSTRAINT_wJ]\"\n+  \"FPR register to hold 8/16-bit integers or NO_REGS.\")\n+\n+(define_register_constraint \"wK\" \"rs6000_constraints[RS6000_CONSTRAINT_wK]\"\n+  \"Altivec register to hold 8/16-bit integers or NO_REGS.\")\n+\n+(define_constraint \"wL\"\n+  \"Int constant that is the element number mfvsrld accesses in a vector.\"\n+  (and (match_code \"const_int\")\n+       (and (match_test \"TARGET_DIRECT_MOVE_128\")\n+\t    (match_test \"(ival == VECTOR_ELEMENT_MFVSRLD_64BIT)\"))))\n+\n+;; Generate the XXORC instruction to set a register to all 1's\n+(define_constraint \"wM\"\n+  \"Match vector constant with all 1's if the XXLORC instruction is available\"\n+  (and (match_test \"TARGET_P8_VECTOR\")\n+       (match_operand 0 \"all_ones_constant\")))\n+\n+;; ISA 3.0 vector d-form addresses\n+(define_memory_constraint \"wO\"\n+  \"Memory operand suitable for the ISA 3.0 vector d-form instructions.\"\n+  (match_operand 0 \"vsx_quad_dform_memory_operand\"))\n+\n+;; Lq/stq validates the address for load/store quad\n+(define_memory_constraint \"wQ\"\n+  \"Memory operand suitable for the load/store quad instructions\"\n+  (match_operand 0 \"quad_memory_operand\"))\n+\n+(define_constraint \"wS\"\n+  \"Vector constant that can be loaded with XXSPLTIB & sign extension.\"\n+  (match_test \"xxspltib_constant_split (op, mode)\"))\n+\n+;; ISA 3.0 DS-form instruction that has the bottom 2 bits 0 and no update form.\n+;; Used by LXSD/STXSD/LXSSP/STXSSP.  In contrast to \"Y\", the multiple-of-four\n+;; offset is enforced for 32-bit too.\n+(define_memory_constraint \"wY\"\n+  \"Offsettable memory operand, with bottom 2 bits 0\"\n+  (and (match_code \"mem\")\n+       (not (match_test \"update_address_mem (op, mode)\"))\n+       (match_test \"mem_operand_ds_form (op, mode)\")))\n+\n+;; Altivec style load/store that ignores the bottom bits of the address\n+(define_memory_constraint \"wZ\"\n+  \"Indexed or indirect memory operand, ignoring the bottom 4 bits\"\n+  (match_operand 0 \"altivec_indexed_or_indirect_operand\"))\n+\n+;; Integer constraints\n+\n+(define_constraint \"I\"\n+  \"A signed 16-bit constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"((unsigned HOST_WIDE_INT) ival + 0x8000) < 0x10000\")))\n+\n+(define_constraint \"J\"\n+  \"high-order 16 bits nonzero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival & (~ (unsigned HOST_WIDE_INT) 0xffff0000)) == 0\")))\n+\n+(define_constraint \"K\"\n+  \"low-order 16 bits nonzero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival & (~ (HOST_WIDE_INT) 0xffff)) == 0\")))\n+\n+(define_constraint \"L\"\n+  \"signed 16-bit constant shifted left 16 bits\"\n+  (and (match_code \"const_int\")\n+       (match_test \"((ival & 0xffff) == 0\n+\t\t      && (ival >> 31 == -1 || ival >> 31 == 0))\")))\n+\n+(define_constraint \"M\"\n+  \"constant greater than 31\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival > 31\")))\n+\n+(define_constraint \"N\"\n+  \"positive constant that is an exact power of two\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival > 0 && exact_log2 (ival) >= 0\")))\n+\n+(define_constraint \"O\"\n+  \"constant zero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"P\"\n+  \"constant whose negation is signed 16-bit constant\"\n+  (and (match_code \"const_int\")\n+       (match_test \"((- (unsigned HOST_WIDE_INT) ival) + 0x8000) < 0x10000\")))\n+\n+;; Floating-point constraints\n+\n+(define_constraint \"G\"\n+  \"Constant that can be copied into GPR with two insns for DF/DI\n+   and one for SF.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"num_insns_constant (op, mode)\n+\t\t    == (mode == SFmode ? 1 : 2)\")))\n+\n+(define_constraint \"H\"\n+  \"DF/DI constant that takes three insns.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"num_insns_constant (op, mode) == 3\")))\n+\n+;; Memory constraints\n+\n+(define_memory_constraint \"es\"\n+  \"A ``stable'' memory operand; that is, one which does not include any\n+automodification of the base register.  Unlike @samp{m}, this constraint\n+can be used in @code{asm} statements that might access the operand\n+several times, or that might not access it at all.\"\n+  (and (match_code \"mem\")\n+       (match_test \"GET_RTX_CLASS (GET_CODE (XEXP (op, 0))) != RTX_AUTOINC\")))\n+\n+(define_memory_constraint \"Q\"\n+  \"Memory operand that is an offset from a register (it is usually better\n+to use @samp{m} or @samp{es} in @code{asm} statements)\"\n+  (and (match_code \"mem\")\n+       (match_test \"GET_CODE (XEXP (op, 0)) == REG\")))\n+\n+(define_memory_constraint \"Y\"\n+  \"memory operand for 8 byte and 16 byte gpr load/store\"\n+  (and (match_code \"mem\")\n+       (match_test \"mem_operand_gpr (op, mode)\")))\n+\n+(define_memory_constraint \"Z\"\n+  \"Memory operand that is an indexed or indirect from a register (it is\n+usually better to use @samp{m} or @samp{es} in @code{asm} statements)\"\n+  (match_operand 0 \"indexed_or_indirect_operand\"))\n+\n+;; Address constraints\n+\n+(define_address_constraint \"a\"\n+  \"Indexed or indirect address operand\"\n+  (match_operand 0 \"indexed_or_indirect_address\"))\n+\n+(define_constraint \"R\"\n+  \"AIX TOC entry\"\n+  (match_test \"legitimate_constant_pool_address_p (op, QImode, false)\"))\n+\n+;; General constraints\n+\n+(define_constraint \"U\"\n+  \"V.4 small data reference\"\n+  (and (match_test \"DEFAULT_ABI == ABI_V4\")\n+       (match_test \"small_data_operand (op, mode)\")))\n+\n+(define_constraint \"W\"\n+  \"vector constant that does not require memory\"\n+  (match_operand 0 \"easy_vector_constant\"))\n+\n+(define_constraint \"j\"\n+  \"Zero vector constant\"\n+  (match_test \"op == const0_rtx || op == CONST0_RTX (mode)\"))"}, {"sha": "5892f8918f2c071d09bec12a5394aefe668c9add", "filename": "gcc/config/powerpcspe/crypto.md", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fcrypto.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fcrypto.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fcrypto.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,110 @@\n+;; Cryptographic instructions added in ISA 2.07\n+;; Copyright (C) 2012-2017 Free Software Foundation, Inc.\n+;; Contributed by Michael Meissner (meissner@linux.vnet.ibm.com)\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; NOTE: Although this file contains all the instructions from\n+;; section 5.11 of ISA 2.07, only those in sections 5.11.1 and\n+;; 5.11.2 are in Category:Vector.Crypto.  Those are the only\n+;; ones controlled by -m[no-]crypto.\n+\n+;; FIXME: The builtin names for the instructions in this file\n+;; are likely to be deprecated in favor of other names to be\n+;; agreed upon with the XL compilers and LLVM.\n+\n+(define_c_enum \"unspec\"\n+  [UNSPEC_VCIPHER\n+   UNSPEC_VNCIPHER\n+   UNSPEC_VCIPHERLAST\n+   UNSPEC_VNCIPHERLAST\n+   UNSPEC_VSBOX\n+   UNSPEC_VSHASIGMA\n+   UNSPEC_VPERMXOR\n+   UNSPEC_VPMSUM])\n+\n+;; Iterator for VPMSUM/VPERMXOR\n+(define_mode_iterator CR_mode [V16QI V8HI V4SI V2DI])\n+\n+(define_mode_attr CR_char [(V16QI \"b\")\n+\t\t\t   (V8HI  \"h\")\n+\t\t\t   (V4SI  \"w\")\n+\t\t\t   (V2DI  \"d\")])\n+\n+;; Iterator for VSHASIGMAD/VSHASIGMAW\n+(define_mode_iterator CR_hash [V4SI V2DI])\n+\n+;; Iterator for the other crypto functions\n+(define_int_iterator CR_code   [UNSPEC_VCIPHER\n+\t\t\t\tUNSPEC_VNCIPHER\n+\t\t\t\tUNSPEC_VCIPHERLAST\n+\t\t\t\tUNSPEC_VNCIPHERLAST])\n+\n+(define_int_attr CR_insn [(UNSPEC_VCIPHER      \"vcipher\")\n+\t\t\t  (UNSPEC_VNCIPHER     \"vncipher\")\n+\t\t\t  (UNSPEC_VCIPHERLAST  \"vcipherlast\")\n+\t\t\t  (UNSPEC_VNCIPHERLAST \"vncipherlast\")])\n+\n+;; 2 operand crypto instructions\n+(define_insn \"crypto_<CR_insn>\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"register_operand\" \"v\")]\n+\t\t     CR_code))]\n+  \"TARGET_CRYPTO\"\n+  \"<CR_insn> %0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"crypto_vpmsum<CR_char>\"\n+  [(set (match_operand:CR_mode 0 \"register_operand\" \"=v\")\n+\t(unspec:CR_mode [(match_operand:CR_mode 1 \"register_operand\" \"v\")\n+\t\t\t (match_operand:CR_mode 2 \"register_operand\" \"v\")]\n+\t\t\tUNSPEC_VPMSUM))]\n+  \"TARGET_P8_VECTOR\"\n+  \"vpmsum<CR_char> %0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+;; 3 operand crypto instructions\n+(define_insn \"crypto_vpermxor_<mode>\"\n+  [(set (match_operand:CR_mode 0 \"register_operand\" \"=v\")\n+\t(unspec:CR_mode [(match_operand:CR_mode 1 \"register_operand\" \"v\")\n+\t\t\t (match_operand:CR_mode 2 \"register_operand\" \"v\")\n+\t\t\t (match_operand:CR_mode 3 \"register_operand\" \"v\")]\n+\t\t\tUNSPEC_VPERMXOR))]\n+  \"TARGET_P8_VECTOR\"\n+  \"vpermxor %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+;; 1 operand crypto instruction\n+(define_insn \"crypto_vsbox\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"v\")]\n+\t\t     UNSPEC_VSBOX))]\n+  \"TARGET_CRYPTO\"\n+  \"vsbox %0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+;; Hash crypto instructions\n+(define_insn \"crypto_vshasigma<CR_char>\"\n+  [(set (match_operand:CR_hash 0 \"register_operand\" \"=v\")\n+\t(unspec:CR_hash [(match_operand:CR_hash 1 \"register_operand\" \"v\")\n+\t\t\t (match_operand:SI 2 \"const_0_to_1_operand\" \"n\")\n+\t\t\t (match_operand:SI 3 \"const_0_to_15_operand\" \"n\")]\n+\t\t\tUNSPEC_VSHASIGMA))]\n+  \"TARGET_CRYPTO\"\n+  \"vshasigma<CR_char> %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")])"}, {"sha": "61e5e836de0044e3ac55d514ade59f681060f931", "filename": "gcc/config/powerpcspe/darwin.h", "status": "added", "additions": 422, "deletions": 0, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,422 @@\n+/* Target definitions for PowerPC running Darwin (Mac OS X).\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+   Contributed by Apple Computer Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef DARWIN_PPC\n+#define DARWIN_PPC 1\n+\n+/* The \"Darwin ABI\" is mostly like AIX, but with some key differences.  */\n+\n+#define DEFAULT_ABI ABI_DARWIN\n+\n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __powerpc64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n+/* The object file format is Mach-O.  */\n+\n+#define TARGET_OBJECT_FORMAT OBJECT_MACHO\n+\n+/* Size of the Obj-C jump buffer.  */\n+#define OBJC_JBLEN ((TARGET_64BIT) ? (26*2 + 18*2 + 129 + 1) : (26 + 18*2 + 129 + 1))\n+\n+/* We're not ever going to do TOCs.  */\n+\n+#define TARGET_TOC 0\n+#define TARGET_NO_TOC 1\n+\n+/* Override the default rs6000 definition.  */\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (!TARGET_64BIT) builtin_define (\"__ppc__\");\t\\\n+      if (TARGET_64BIT) builtin_define (\"__ppc64__\");\t\\\n+      builtin_define (\"__POWERPC__\");\t\t\t\\\n+      builtin_define (\"__NATURAL_ALIGNMENT__\");\t\t\\\n+      darwin_cpp_builtins (pfile);\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Generate branch islands stubs if this is true.  */\n+extern int darwin_emit_branch_islands;\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS darwin_rs6000_override_options ()\n+\n+#define C_COMMON_OVERRIDE_OPTIONS do {\t\t\t\t\t\\\n+  /* On powerpc, __cxa_get_exception_ptr is available starting in the\t\\\n+     10.4.6 libstdc++.dylib.  */\t\t\t\t\t\\\n+  if (strverscmp (darwin_macosx_version_min, \"10.4.6\") < 0\t\t\\\n+      && flag_use_cxa_get_exception_ptr == 2)\t\t\t\t\\\n+    flag_use_cxa_get_exception_ptr = 0;\t\t\t\t\t\\\n+  if (flag_mkernel)\t\t\t\t\t\t\t\\\n+    flag_no_builtin = 1;\t\t\t\t\t\t\\\n+  SUBTARGET_C_COMMON_OVERRIDE_OPTIONS;\t\t\t\t\t\\\n+} while (0)\n+\n+/* Darwin has 128-bit long double support in libc in 10.4 and later.\n+   Default to 128-bit long doubles even on earlier platforms for ABI\n+   consistency; arithmetic will work even if libc and libm support is\n+   not available.  */\n+\n+#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 128\n+\n+\n+/* We want -fPIC by default, unless we're using -static to compile for\n+   the kernel or some such.  The \"-faltivec\" option should have been\n+   called \"-maltivec\" all along.  */\n+\n+#define CC1_SPEC \"\\\n+  %(cc1_cpu) \\\n+  %{g: %{!fno-eliminate-unused-debug-symbols: -feliminate-unused-debug-symbols }} \\\n+  %{static: %{Zdynamic: %e conflicting code gen style switches are used}}\\\n+  %{!mkernel:%{!static:%{!mdynamic-no-pic:-fPIC}}} \\\n+  %{faltivec:-maltivec -include altivec.h} %{fno-altivec:-mno-altivec} \\\n+  %<faltivec %<fno-altivec \" \\\n+  DARWIN_CC1_SPEC\n+\n+#define DARWIN_ARCH_SPEC \"%{m64:ppc64;:ppc}\"\n+\n+#define DARWIN_SUBARCH_SPEC \"\t\t\t\\\n+ %{m64: ppc64}\t\t\t\t\t\\\n+ %{!m64:\t\t\t\t\t\\\n+ %{mcpu=601:ppc601;\t\t\t\t\\\n+   mcpu=603:ppc603;\t\t\t\t\\\n+   mcpu=603e:ppc603;\t\t\t\t\\\n+   mcpu=604:ppc604;\t\t\t\t\\\n+   mcpu=604e:ppc604e;\t\t\t\t\\\n+   mcpu=740:ppc750;\t\t\t\t\\\n+   mcpu=750:ppc750;\t\t\t\t\\\n+   mcpu=G3:ppc750;\t\t\t\t\\\n+   mcpu=7400:ppc7400;\t\t\t\t\\\n+   mcpu=G4:ppc7400;\t\t\t\t\\\n+   mcpu=7450:ppc7450;\t\t\t\t\\\n+   mcpu=970:ppc970;\t\t\t\t\\\n+   mcpu=power4:ppc970;\t\t\t\t\\\n+   mcpu=G5:ppc970;\t\t\t\t\\\n+   :ppc}}\"\n+\n+/* crt2.o is at least partially required for 10.3.x and earlier.  */\n+#define DARWIN_CRT2_SPEC \\\n+  \"%{!m64:%:version-compare(!> 10.4 mmacosx-version-min= crt2.o%s)}\"\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\\\n+  DARWIN_EXTRA_SPECS                            \\\n+  { \"darwin_arch\", DARWIN_ARCH_SPEC },\t\t\\\n+  { \"darwin_crt2\", DARWIN_CRT2_SPEC },\t\t\\\n+  { \"darwin_subarch\", DARWIN_SUBARCH_SPEC },\n+\n+/* Output a .machine directive.  */\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START rs6000_darwin_file_start\n+\n+/* Make both r2 and r13 available for allocation.  */\n+#define FIXED_R2 0\n+#define FIXED_R13 0\n+\n+/* Base register for access to local variables of the function.  */\n+\n+#undef  HARD_FRAME_POINTER_REGNUM\n+#define HARD_FRAME_POINTER_REGNUM 30\n+\n+#undef  RS6000_PIC_OFFSET_TABLE_REGNUM\n+#define RS6000_PIC_OFFSET_TABLE_REGNUM 31\n+\n+/* Pad the outgoing args area to 16 bytes instead of the usual 8.  */\n+\n+#undef STARTING_FRAME_OFFSET\n+#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n+  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n+   ? 0\t\t\t\t\t\t\t\t\t\\\n+   : (RS6000_ALIGN (crtl->outgoing_args_size, 16)\t\t\\\n+      + RS6000_SAVE_AREA))\n+\n+#undef STACK_DYNAMIC_OFFSET\n+#define STACK_DYNAMIC_OFFSET(FUNDECL)\t\t\t\t\t\\\n+  (RS6000_ALIGN (crtl->outgoing_args_size, 16)\t\t\\\n+   + (STACK_POINTER_OFFSET))\n+\n+/* Darwin uses a function call if everything needs to be saved/restored.  */\n+\n+#undef WORLD_SAVE_P\n+#define WORLD_SAVE_P(INFO) ((INFO)->world_save_p)\n+\n+/* We don't use these on Darwin, they are just place-holders.  */\n+#define SAVE_FP_PREFIX \"\"\n+#define SAVE_FP_SUFFIX \"\"\n+#define RESTORE_FP_PREFIX \"\"\n+#define RESTORE_FP_SUFFIX \"\"\n+\n+/* The assembler wants the alternate register names, but without\n+   leading percent sign.  */\n+#undef REGISTER_NAMES\n+#define REGISTER_NAMES\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+     \"r0\",  \"r1\",  \"r2\",  \"r3\",  \"r4\",  \"r5\",  \"r6\",  \"r7\",\t\t\\\n+     \"r8\",  \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\t\t\\\n+    \"r16\", \"r17\", \"r18\", \"r19\", \"r20\", \"r21\", \"r22\", \"r23\",\t\t\\\n+    \"r24\", \"r25\", \"r26\", \"r27\", \"r28\", \"r29\", \"r30\", \"r31\",\t\t\\\n+     \"f0\",  \"f1\",  \"f2\",  \"f3\",  \"f4\",  \"f5\",  \"f6\",  \"f7\",\t\t\\\n+     \"f8\",  \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\",\t\t\\\n+    \"f16\", \"f17\", \"f18\", \"f19\", \"f20\", \"f21\", \"f22\", \"f23\",\t\t\\\n+    \"f24\", \"f25\", \"f26\", \"f27\", \"f28\", \"f29\", \"f30\", \"f31\",\t\t\\\n+     \"mq\",  \"lr\", \"ctr\",  \"ap\",\t\t\t\t\t\t\\\n+    \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\",\t\t\\\n+    \"xer\",\t\t\t\t\t\t\t\t\\\n+     \"v0\",  \"v1\",  \"v2\",  \"v3\",  \"v4\",  \"v5\",  \"v6\",  \"v7\",             \\\n+     \"v8\",  \"v9\", \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\",             \\\n+    \"v16\", \"v17\", \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\",             \\\n+    \"v24\", \"v25\", \"v26\", \"v27\", \"v28\", \"v29\", \"v30\", \"v31\",             \\\n+    \"vrsave\", \"vscr\",\t\t\t\t\t\t\t\\\n+    \"spe_acc\", \"spefscr\",                                               \\\n+    \"sfp\",\t\t\t\t\t\t\t\t\\\n+    \"tfhar\", \"tfiar\", \"texasr\",\t\t\t\t\t\t\\\n+    \"rh0\",  \"rh1\",  \"rh2\",  \"rh3\",  \"rh4\",  \"rh5\",  \"rh6\",  \"rh7\",\t\\\n+    \"rh8\",  \"rh9\",  \"rh10\", \"rh11\", \"rh12\", \"rh13\", \"rh14\", \"rh15\",\t\\\n+    \"rh16\", \"rh17\", \"rh18\", \"rh19\", \"rh20\", \"rh21\", \"rh22\", \"rh23\",\t\\\n+    \"rh24\", \"rh25\", \"rh26\", \"rh27\", \"rh28\", \"rh29\", \"rh30\", \"rh31\"\t\\\n+}\n+\n+/* This outputs NAME to FILE.  */\n+\n+#undef  RS6000_OUTPUT_BASENAME\n+#define RS6000_OUTPUT_BASENAME(FILE, NAME)\t\\\n+    assemble_name (FILE, NAME)\n+\n+/* Globalizing directive for a label.  */\n+#undef GLOBAL_ASM_OP\n+#define GLOBAL_ASM_OP \"\\t.globl \"\n+#undef TARGET_ASM_GLOBALIZE_LABEL\n+\n+/* This is how to output an internal label prefix.  rs6000.c uses this\n+   when generating traceback tables.  */\n+/* Not really used for Darwin?  */\n+\n+#undef ASM_OUTPUT_INTERNAL_LABEL_PREFIX\n+#define ASM_OUTPUT_INTERNAL_LABEL_PREFIX(FILE,PREFIX)\t\\\n+  fprintf (FILE, \"%s\", PREFIX)\n+\n+/* Override the standard rs6000 definition.  */\n+\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \";\"\n+\n+/* This is how to output an assembler line that says to advance\n+   the location counter to a multiple of 2**LOG bytes using the\n+   \"nop\" instruction as padding.  */\n+\n+#define ASM_OUTPUT_ALIGN_WITH_NOP(FILE,LOG)                   \\\n+  do                                                          \\\n+    {                                                         \\\n+      if ((LOG) < 3)                                          \\\n+        {                                                     \\\n+          ASM_OUTPUT_ALIGN (FILE,LOG);                        \\\n+        }                                                     \\\n+      else /* nop == ori r0,r0,0 */                           \\\n+        fprintf (FILE, \"\\t.align32 %d,0x60000000\\n\", (LOG));  \\\n+    } while (0)\n+\n+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n+/* This is supported in cctools 465 and later.  The macro test\n+   above prevents using it in earlier build environments.  */\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP)          \\\n+  if ((LOG) != 0)                                             \\\n+    {                                                         \\\n+      if ((MAX_SKIP) == 0)                                    \\\n+        fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));           \\\n+      else                                                    \\\n+        fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP)); \\\n+    }\n+#endif\n+\n+/* Generate insns to call the profiler.  */\n+\n+#define PROFILE_HOOK(LABEL)   output_profile_hook (LABEL)\n+\n+/* Function name to call to do profiling.  */\n+\n+#define RS6000_MCOUNT \"*mcount\"\n+\n+/* Default processor: G4, and G5 for 64-bit.  */\n+\n+#undef PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT  PROCESSOR_PPC7400\n+#undef PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64  PROCESSOR_POWER4\n+\n+/* Default target flag settings.  Despite the fact that STMW/LMW\n+   serializes, it's still a big code size win to use them.  Use FSEL by\n+   default as well.  */\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_MULTIPLE | MASK_PPC_GFXOPT)\n+\n+/* Darwin always uses IBM long double, never IEEE long double.  */\n+#undef  TARGET_IEEEQUAD\n+#define TARGET_IEEEQUAD 0\n+\n+/* Since Darwin doesn't do TOCs, stub this out.  */\n+\n+#define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)  ((void)X, (void)MODE, 0)\n+\n+/* Unlike most other PowerPC targets, chars are signed, for\n+   consistency with other Darwin architectures.  */\n+\n+#undef DEFAULT_SIGNED_CHAR\n+#define DEFAULT_SIGNED_CHAR (1)\n+\n+/* Given an rtx X being reloaded into a reg required to be\n+   in class CLASS, return the class of reg to actually use.\n+   In general this is just CLASS; but on some machines\n+   in some cases it is preferable to use a more restrictive class.\n+\n+   On the RS/6000, we have to return NO_REGS when we want to reload a\n+   floating-point CONST_DOUBLE to force it to be copied to memory.\n+\n+   Don't allow R0 when loading the address of, or otherwise furtling with,\n+   a SYMBOL_REF.  */\n+\n+#undef PREFERRED_RELOAD_CLASS\n+#define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\t\\\n+  ((CONSTANT_P (X)\t\t\t\t\t\t\\\n+    && reg_classes_intersect_p ((CLASS), FLOAT_REGS))\t\t\\\n+   ? NO_REGS\t\t\t\t\t\t\t\\\n+   : ((GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == HIGH)\t\\\n+      && reg_class_subset_p (BASE_REGS, (CLASS)))\t\t\\\n+   ? BASE_REGS\t\t\t\t\t\t\t\\\n+   : (GET_MODE_CLASS (GET_MODE (X)) == MODE_INT\t\t\t\\\n+      && (CLASS) == NON_SPECIAL_REGS)\t\t\t\t\\\n+   ? GENERAL_REGS\t\t\t\t\t\t\\\n+   : (CLASS))\n+\n+/* Compute field alignment.\n+   This implements the 'power' alignment rule by pegging the alignment of\n+   items (beyond the first aggregate field) to 32 bits.  The pegging is\n+   suppressed for vector and long double items (both 128 in size).\n+   There is a dummy use of the FIELD argument to avoid an unused variable\n+   warning (see PR59496).  */\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED)\t\t\\\n+  ((void) (FIELD),\t\t\t\t\t\t\\\n+    (TARGET_ALIGN_NATURAL\t\t\t\t\t\\\n+     ? (COMPUTED)\t\t\t\t\t\t\\\n+     : (COMPUTED) == 128\t\t\t\t\t\\\n+\t? 128\t\t\t\t\t\t\t\\\n+\t: MIN ((COMPUTED), 32)))\n+\n+/* Darwin increases natural record alignment to doubleword if the first\n+   field is an FP double while the FP fields remain word aligned.  */\n+#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\t  \\\n+  ((TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\t\t  \\\n+    || TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\t\t  \\\n+    || TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\t\t  \\\n+   && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\t  \\\n+   ? darwin_rs6000_special_round_type_align (STRUCT, COMPUTED, SPECIFIED) \\\n+   : (TREE_CODE (STRUCT) == VECTOR_TYPE\t\t\t\t\t  \\\n+      && ALTIVEC_VECTOR_MODE (TYPE_MODE (STRUCT)))\t\t\t  \\\n+   ? MAX (MAX ((COMPUTED), (SPECIFIED)), 128)\t\t\t\t  \\\n+   : MAX ((COMPUTED), (SPECIFIED)))\n+\n+/* Specify padding for the last element of a block move between\n+   registers and memory.  FIRST is nonzero if this is the only\n+   element.  */\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))\n+\n+#define DOUBLE_INT_ASM_OP \"\\t.quad\\t\"\n+\n+/* For binary compatibility with 2.95; Darwin C APIs use bool from\n+   stdbool.h, which was an int-sized enum in 2.95.  Users can explicitly\n+   choose to have sizeof(bool)==1 with the -mone-byte-bool switch. */\n+#define BOOL_TYPE_SIZE (darwin_one_byte_bool ? CHAR_TYPE_SIZE : INT_TYPE_SIZE)\n+\n+#undef REGISTER_TARGET_PRAGMAS\n+#define REGISTER_TARGET_PRAGMAS() \\\n+  do \\\n+    { \\\n+      DARWIN_REGISTER_TARGET_PRAGMAS(); \\\n+      targetm.resolve_overloaded_builtin = altivec_resolve_overloaded_builtin; \\\n+    } \\\n+  while (0)\n+\n+#ifdef IN_LIBGCC2\n+#include <stdbool.h>\n+#endif\n+\n+/* True, iff we're generating fast turn around debugging code.  When\n+   true, we arrange for function prologues to start with 5 nops so\n+   that gdb may insert code to redirect them, and for data to be\n+   accessed indirectly.  The runtime uses this indirection to forward\n+   references for data to the original instance of that data.  */\n+\n+#define TARGET_FIX_AND_CONTINUE (darwin_fix_and_continue)\n+\n+/* This is the reserved direct dispatch address for Objective-C.  */\n+#define OFFS_MSGSEND_FAST\t\t0xFFFEFF00\n+\n+/* This is the reserved ivar address Objective-C.  */\n+#define OFFS_ASSIGNIVAR_FAST\t\t0xFFFEFEC0\n+\n+/* Old versions of Mac OS/Darwin don't have C99 functions available.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION darwin_libc_has_function\n+\n+/* When generating kernel code or kexts, we don't use Altivec by\n+   default, as kernel code doesn't save/restore those registers.  */\n+#define OS_MISSING_ALTIVEC (flag_mkernel || flag_apple_kext)\n+\n+/* Darwin has support for section anchors on powerpc*.  \n+   It is disabled for any section containing a \"zero-sized item\" (because these\n+   are re-written as size=1 to be compatible with the OSX ld64).\n+   The re-writing would interfere with the computation of anchor offsets.\n+   Therefore, we place zero-sized items in their own sections and make such\n+   sections unavailable to section anchoring.  */\n+\n+#undef TARGET_ASM_OUTPUT_ANCHOR \n+#define TARGET_ASM_OUTPUT_ANCHOR darwin_asm_output_anchor\n+\n+#undef TARGET_USE_ANCHORS_FOR_SYMBOL_P\n+#define TARGET_USE_ANCHORS_FOR_SYMBOL_P darwin_use_anchors_for_symbol_p\n+\n+#undef DARWIN_SECTION_ANCHORS\n+#define DARWIN_SECTION_ANCHORS 1\n+\n+/* PPC Darwin has to rename some of the long double builtins.  */\n+#undef  SUBTARGET_INIT_BUILTINS\n+#define SUBTARGET_INIT_BUILTINS\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  darwin_patch_builtins ();\t\t\t\t\t\t\\\n+  rs6000_builtin_decls[(unsigned) (RS6000_BUILTIN_CFSTRING)]\t\t\\\n+    = darwin_init_cfstring_builtins ((unsigned) (RS6000_BUILTIN_CFSTRING)); \\\n+} while(0)\n+\n+/* So far, there is no rs6000_fold_builtin, if one is introduced, then\n+   this will need to be modified similar to the x86 case.  */\n+#define TARGET_FOLD_BUILTIN SUBTARGET_FOLD_BUILTIN\n+\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+"}, {"sha": "fde67fd268dcde2b501e436f5b2a70dfdd639201", "filename": "gcc/config/powerpcspe/darwin.md", "status": "added", "additions": 480, "deletions": 0, "changes": 480, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,480 @@\n+/* Machine description patterns for PowerPC running Darwin (Mac OS X).\n+   Copyright (C) 2004-2017 Free Software Foundation, Inc.\n+   Contributed by Apple Computer Inc.\n+\n+This file is part of GCC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+(define_insn \"adddi3_high\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n+        (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+                 (high:DI (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"addis %0,%1,ha16(%2)\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn \"movdf_low_si\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && !TARGET_64BIT\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:\n+\treturn \\\"lfd %0,lo16(%2)(%1)\\\";\n+      case 1:\n+\t{\n+\t  if (TARGET_POWERPC64 && TARGET_32BIT)\n+\t    /* Note, old assemblers didn't support relocation here.  */\n+\t    return \\\"ld %0,lo16(%2)(%1)\\\";\n+\t  else\n+\t    {\n+\t      output_asm_insn (\\\"la %0,lo16(%2)(%1)\\\", operands);\n+\t      output_asm_insn (\\\"lwz %L0,4(%0)\\\", operands);\n+\t      return (\\\"lwz %0,0(%0)\\\");\n+\t    }\n+\t}\n+      default:\n+\tgcc_unreachable ();\n+    }\n+}\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4,12\")])\n+\n+\n+(define_insn \"movdf_low_di\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:DF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:\n+\treturn \\\"lfd %0,lo16(%2)(%1)\\\";\n+      case 1:\n+\treturn \\\"ld %0,lo16(%2)(%1)\\\";\n+      default:\n+\tgcc_unreachable ();\n+    }\n+}\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4,4\")])\n+\n+(define_insn \"movdf_low_st_si\"\n+  [(set (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:DF 0 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n+  \"stfd %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movdf_low_st_di\"\n+  [(set (mem:DF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:DF 0 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n+  \"stfd %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsf_low_si\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:SF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n+  \"@\n+   lfs %0,lo16(%2)(%1)\n+   lwz %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsf_low_di\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:SF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n+  \"@\n+   lfs %0,lo16(%2)(%1)\n+   lwz %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsf_low_st_si\"\n+  [(set (mem:SF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:SF 0 \"gpc_reg_operand\" \"f,!r\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n+  \"@\n+   stfs %0,lo16(%2)(%1)\n+   stw %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsf_low_st_di\"\n+  [(set (mem:SF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:SF 0 \"gpc_reg_operand\" \"f,!r\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n+  \"@\n+   stfs %0,lo16(%2)(%1)\n+   stw %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+;; 64-bit MachO load/store support\n+(define_insn \"movdi_low\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,*!d\")\n+        (mem:DI (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"@\n+   ld %0,lo16(%2)(%1)\n+   lfd %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsi_low_st\"\n+  [(set (mem:SI (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:SI 0 \"gpc_reg_operand\" \"r\"))]\n+  \"TARGET_MACHO && ! TARGET_64BIT\"\n+  \"stw %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movdi_low_st\"\n+  [(set (mem:DI (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:DI 0 \"gpc_reg_operand\" \"r,*!d\"))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"@\n+   std %0,lo16(%2)(%1)\n+   stfd %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+;; Mach-O PIC trickery.\n+(define_expand \"macho_high\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(high (match_operand 1 \"\" \"\")))]\n+  \"TARGET_MACHO\"\n+{\n+  if (TARGET_64BIT)\n+    emit_insn (gen_macho_high_di (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_macho_high_si (operands[0], operands[1]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"macho_high_si\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b*r\")\n+\t(high:SI (match_operand 1 \"\" \"\")))]\n+  \"TARGET_MACHO && ! TARGET_64BIT\"\n+  \"lis %0,ha16(%1)\")\n+  \n+\n+(define_insn \"macho_high_di\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b*r\")\n+\t(high:DI (match_operand 1 \"\" \"\")))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  \"lis %0,ha16(%1)\")\n+\n+(define_expand \"macho_low\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(lo_sum (match_operand 1 \"\" \"\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+   \"TARGET_MACHO\"\n+{\n+  if (TARGET_64BIT)\n+    emit_insn (gen_macho_low_di (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_macho_low_si (operands[0], operands[1], operands[2]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"macho_low_si\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+   \"TARGET_MACHO && ! TARGET_64BIT\"\n+   \"la %0,lo16(%2)(%1)\")\n+\n+(define_insn \"macho_low_di\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+   \"TARGET_MACHO && TARGET_64BIT\"\n+   \"la %0,lo16(%2)(%1)\")\n+\n+(define_split\n+  [(set (mem:V4SI (plus:DI (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t\t\t (match_operand:DI 1 \"short_cint_operand\" \"\")))\n+\t(match_operand:V4SI 2 \"register_operand\" \"\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_MACHO && TARGET_64BIT\"\n+  [(set (match_dup 3) (plus:DI (match_dup 0) (match_dup 1)))\n+   (set (mem:V4SI (match_dup 3))\n+\t(match_dup 2))]\n+  \"\")\n+\n+(define_expand \"load_macho_picbase\"\n+  [(set (reg:SI LR_REGNO)\n+        (unspec [(match_operand 0 \"\" \"\")]\n+                   UNSPEC_LD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+{\n+  if (TARGET_32BIT)\n+    emit_insn (gen_load_macho_picbase_si (operands[0]));\n+  else\n+    emit_insn (gen_load_macho_picbase_di (operands[0]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"load_macho_picbase_si\"\n+  [(set (reg:SI LR_REGNO)\n+\t(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n+\t\t    (pc)] UNSPEC_LD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+{\n+#if TARGET_MACHO\n+  machopic_should_output_picbase_label (); /* Update for new func.  */\n+#else\n+  gcc_unreachable ();\n+#endif\n+  return \"bcl 20,31,%0\\\\n%0:\";\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"cannot_copy\" \"yes\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"load_macho_picbase_di\"\n+  [(set (reg:DI LR_REGNO)\n+\t(unspec:DI [(match_operand:DI 0 \"immediate_operand\" \"s\")\n+\t\t    (pc)] UNSPEC_LD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n+{\n+#if TARGET_MACHO\n+  machopic_should_output_picbase_label (); /* Update for new func.  */\n+#else\n+  gcc_unreachable ();\n+#endif\n+  return \"bcl 20,31,%0\\\\n%0:\";\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"cannot_copy\" \"yes\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"macho_correct_pic\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(plus (match_operand 1 \"\" \"\")\n+\t\t (unspec [(match_operand 2 \"\" \"\")\n+\t\t\t     (match_operand 3 \"\" \"\")]\n+\t\t\t    UNSPEC_MPIC_CORRECT)))]\n+  \"DEFAULT_ABI == ABI_DARWIN\"\n+{\n+  if (TARGET_32BIT)\n+    emit_insn (gen_macho_correct_pic_si (operands[0], operands[1], operands[2],\n+\t       operands[3]));\n+  else\n+    emit_insn (gen_macho_correct_pic_di (operands[0], operands[1], operands[2],\n+\t       operands[3]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"macho_correct_pic_si\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"s\")\n+\t\t\t     (match_operand:SI 3 \"immediate_operand\" \"s\")]\n+\t\t\t    UNSPEC_MPIC_CORRECT)))]\n+  \"DEFAULT_ABI == ABI_DARWIN\"\n+  \"addis %0,%1,ha16(%2-%3)\\n\\taddi %0,%0,lo16(%2-%3)\"\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_insn \"macho_correct_pic_di\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"s\")\n+\t\t\t     (match_operand:DI 3 \"immediate_operand\" \"s\")]\n+\t\t\t    16)))]\n+  \"DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT\"\n+  \"addis %0,%1,ha16(%2-%3)\\n\\taddi %0,%0,lo16(%2-%3)\"\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_insn \"*call_indirect_nonlocal_darwin64\"\n+  [(call (mem:SI (match_operand:DI 0 \"register_operand\" \"c,*l,c,*l\"))\n+\t (match_operand 1 \"\" \"g,g,g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,O,n,n\"))\n+   (clobber (reg:SI LR_REGNO))]\n+  \"DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT\"\n+{\n+  return \"b%T0l\";\n+}\n+  [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n+\n+(define_insn \"*call_nonlocal_darwin64\"\n+  [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s,s\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n+   (clobber (reg:SI LR_REGNO))]\n+  \"(DEFAULT_ABI == ABI_DARWIN)\n+   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+{\n+#if TARGET_MACHO\n+  return output_call(insn, operands, 0, 2);\n+#else\n+  gcc_unreachable ();\n+#endif\n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*call_value_indirect_nonlocal_darwin64\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"register_operand\" \"c,*l,c,*l\"))\n+\t      (match_operand 2 \"\" \"g,g,g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,O,n,n\"))\n+   (clobber (reg:SI LR_REGNO))]\n+  \"DEFAULT_ABI == ABI_DARWIN\"\n+{\n+  return \"b%T1l\";\n+}\n+  [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n+   (set_attr \"length\" \"4,4,8,8\")])\n+\n+(define_insn \"*call_value_nonlocal_darwin64\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s,s\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (clobber (reg:SI LR_REGNO))]\n+  \"(DEFAULT_ABI == ABI_DARWIN)\n+   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+{\n+#if TARGET_MACHO\n+  return output_call(insn, operands, 1, 3);\n+#else\n+  gcc_unreachable ();\n+#endif\n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_expand \"reload_macho_picbase\"\n+  [(set (reg:SI LR_REGNO)\n+        (unspec [(match_operand 0 \"\" \"\")]\n+                   UNSPEC_RELD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+{\n+  if (TARGET_32BIT)\n+    emit_insn (gen_reload_macho_picbase_si (operands[0]));\n+  else\n+    emit_insn (gen_reload_macho_picbase_di (operands[0]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"reload_macho_picbase_si\"\n+  [(set (reg:SI LR_REGNO)\n+        (unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n+\t\t    (pc)] UNSPEC_RELD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+{\n+#if TARGET_MACHO\n+  if (machopic_should_output_picbase_label ())\n+    {\n+      static char tmp[64];\n+      const char *cnam = machopic_get_function_picbase ();\n+      snprintf (tmp, 64, \"bcl 20,31,%s\\\\n%s:\\\\n%%0:\", cnam, cnam);\n+      return tmp;\n+    }\n+  else\n+#else\n+  gcc_unreachable ();\n+#endif\n+    return \"bcl 20,31,%0\\\\n%0:\";\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"cannot_copy\" \"yes\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"reload_macho_picbase_di\"\n+  [(set (reg:DI LR_REGNO)\n+\t(unspec:DI [(match_operand:DI 0 \"immediate_operand\" \"s\")\n+\t\t    (pc)] UNSPEC_RELD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n+{\n+#if TARGET_MACHO\n+  if (machopic_should_output_picbase_label ())\n+    {\n+      static char tmp[64];\n+      const char *cnam = machopic_get_function_picbase ();\n+      snprintf (tmp, 64, \"bcl 20,31,%s\\\\n%s:\\\\n%%0:\", cnam, cnam);\n+      return tmp;\n+    }\n+  else\n+#else\n+  gcc_unreachable ();\n+#endif\n+    return \"bcl 20,31,%0\\\\n%0:\";\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"cannot_copy\" \"yes\")\n+   (set_attr \"length\" \"4\")])\n+\n+;; We need to restore the PIC register, at the site of nonlocal label.\n+\n+(define_insn_and_split \"nonlocal_goto_receiver\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_NLGR)]\n+  \"TARGET_MACHO && flag_pic\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+#if TARGET_MACHO\n+  if (crtl->uses_pic_offset_table)\n+    {\n+      static unsigned n = 0;\n+      rtx picrtx = gen_rtx_SYMBOL_REF (Pmode, MACHOPIC_FUNCTION_BASE_NAME);\n+      rtx picreg = gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n+      rtx tmplrtx;\n+      char tmplab[20];\n+\n+      ASM_GENERATE_INTERNAL_LABEL(tmplab, \"Lnlgr\", ++n);\n+      tmplrtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (tmplab));\n+\n+      emit_insn (gen_reload_macho_picbase (tmplrtx));\n+      emit_move_insn (picreg, gen_rtx_REG (Pmode, LR_REGNO));\n+      emit_insn (gen_macho_correct_pic (picreg, picreg, picrtx, tmplrtx));\n+    }\n+  else\n+    /* Not using PIC reg, no reload needed.  */\n+    emit_note (NOTE_INSN_DELETED);\n+#else\n+  gcc_unreachable ();\n+#endif\n+  DONE;\n+})"}, {"sha": "aca1c3ee67d177cb484697545d5c89593ab87b66", "filename": "gcc/config/powerpcspe/darwin.opt", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.opt?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,42 @@\n+; Darwin options for PPC port.\n+;\n+; Copyright (C) 2005-2017 Free Software Foundation, Inc.\n+; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Waltivec-long-deprecated\n+Driver Alias(mwarn-altivec-long)\n+\n+faltivec\n+Driver\n+\n+; -ffix-and-continue and -findirect-data are for compatibility for old\n+; compilers.\n+ffix-and-continue\n+Driver RejectNegative Alias(mfix-and-continue)\n+\n+findirect-data\n+Driver RejectNegative Alias(mfix-and-continue)\n+\n+m64\n+Target RejectNegative Negative(m32) Mask(64BIT) Var(rs6000_isa_flags)\n+Generate 64-bit code.\n+\n+m32\n+Target RejectNegative Negative(m64) InverseMask(64BIT) Var(rs6000_isa_flags)\n+Generate 32-bit code."}, {"sha": "79d780cd71b1f284fe6c795a4ba614f469032d54", "filename": "gcc/config/powerpcspe/darwin64.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin64.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,32 @@\n+/* Target definitions for PowerPC running Darwin (Mac OS X).\n+   Copyright (C) 2006-2017 Free Software Foundation, Inc.\n+   Contributed by Apple Computer Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_POWERPC64 | MASK_64BIT \\\n+\t\t\t| MASK_MULTIPLE | MASK_PPC_GFXOPT)\n+\n+#undef DARWIN_ARCH_SPEC\n+#define DARWIN_ARCH_SPEC \"%{m32:ppc;:ppc64}\"\n+\n+#undef DARWIN_SUBARCH_SPEC\n+#define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n+\n+#undef DARWIN_CRT2_SPEC\n+#define DARWIN_CRT2_SPEC \"\""}, {"sha": "f5e9f8930308c139a87e666dfde0b3a2bb37cc11", "filename": "gcc/config/powerpcspe/darwin7.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin7.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,32 @@\n+/* Target definitions for Darwin 7.x (Mac OS X) systems.\n+   Copyright (C) 2004-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Machine dependent libraries.  Include libmx when compiling for\n+   Darwin 7.0 and above, but before libSystem, since the functions are\n+   actually in libSystem but for 7.x compatibility we want them to be\n+   looked for in libmx first.  Include libmx by default because otherwise\n+   libstdc++ isn't usable.  */\n+\n+#undef\tLIB_SPEC\n+#define LIB_SPEC \"%{!static:\\\n+  %:version-compare(!< 10.3 mmacosx-version-min= -lmx)\\\n+  -lSystem}\"\n+\n+#undef DEF_MIN_OSX_VERSION\n+#define DEF_MIN_OSX_VERSION \"10.3.9\""}, {"sha": "bccf998de7cea2ae9bc8a767c77596307f48c136", "filename": "gcc/config/powerpcspe/darwin8.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin8.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,31 @@\n+/* Target definitions for Darwin 8.0 and above (Mac OS X) systems.\n+   Copyright (C) 2004-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Machine dependent libraries.  Include libmx when compiling on\n+   Darwin 7.0 and above, but before libSystem, since the functions are\n+   actually in libSystem but for 7.x compatibility we want them to be\n+   looked for in libmx first---but only do this if 7.x compatibility\n+   is a concern, which it's not in 64-bit mode.  Include\n+   libSystemStubs when compiling on (not necessarily for) 8.0 and\n+   above and not 64-bit long double.  */\n+\n+#undef\tLIB_SPEC\n+#define LIB_SPEC \"%{!static:\\\n+  %{!mlong-double-64:%{pg:-lSystemStubs_profile;:-lSystemStubs}} \\\n+  %{!m64:%:version-compare(>< 10.3 10.4 mmacosx-version-min= -lmx)} -lSystem}\""}, {"sha": "ebce9f25aae3c33d9315699a19e493660ed60787", "filename": "gcc/config/powerpcspe/default64.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdefault64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdefault64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdefault64.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,31 @@\n+/* Definitions of target machine for GNU compiler,\n+   for 64 bit powerpc linux defaulting to -m64.\n+   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define RS6000_CPU(NAME, CPU, FLAGS)\n+#include \"rs6000-cpus.def\"\n+#undef RS6000_CPU\n+\n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (ISA_2_7_MASKS_SERVER | MASK_POWERPC64 | MASK_64BIT | MASK_LITTLE_ENDIAN)\n+#else\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_PPC_GFXOPT | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64 | MASK_64BIT)\n+#endif"}, {"sha": "790f2e43d495fbc6b6539b1b81105f91f3fd6527", "filename": "gcc/config/powerpcspe/dfp.md", "status": "added", "additions": 419, "deletions": 0, "changes": 419, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdfp.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,419 @@\n+;; Decimal Floating Point (DFP) patterns.\n+;; Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+;; Contributed by Ben Elliston (bje@au.ibm.com) and Peter Bergner\n+;; (bergner@vnet.ibm.com).\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;;\n+;; UNSPEC usage\n+;;\n+\n+(define_c_enum \"unspec\"\n+  [UNSPEC_MOVSD_LOAD\n+   UNSPEC_MOVSD_STORE\n+  ])\n+\n+\n+(define_insn \"movsd_store\"\n+  [(set (match_operand:DD 0 \"nonimmediate_operand\" \"=m\")\n+\t(unspec:DD [(match_operand:SD 1 \"input_operand\" \"d\")]\n+\t\t   UNSPEC_MOVSD_STORE))]\n+  \"(gpc_reg_operand (operands[0], DDmode)\n+   || gpc_reg_operand (operands[1], SDmode))\n+   && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"stfd%U0%X0 %1,%0\"\n+  [(set_attr \"type\" \"fpstore\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsd_load\"\n+  [(set (match_operand:SD 0 \"nonimmediate_operand\" \"=f\")\n+\t(unspec:SD [(match_operand:DD 1 \"input_operand\" \"m\")]\n+\t\t   UNSPEC_MOVSD_LOAD))]\n+  \"(gpc_reg_operand (operands[0], SDmode)\n+   || gpc_reg_operand (operands[1], DDmode))\n+   && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"lfd%U1%X1 %0,%1\"\n+  [(set_attr \"type\" \"fpload\")\n+   (set_attr \"length\" \"4\")])\n+\n+;; Hardware support for decimal floating point operations.\n+\n+(define_insn \"extendsddd2\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(float_extend:DD (match_operand:SD 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_DFP\"\n+  \"dctdp %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_expand \"extendsdtd2\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(float_extend:TD (match_operand:SD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+{\n+  rtx tmp = gen_reg_rtx (DDmode);\n+  emit_insn (gen_extendsddd2 (tmp, operands[1]));\n+  emit_insn (gen_extendddtd2 (operands[0], tmp));\n+  DONE;\n+})\n+\n+(define_insn \"truncddsd2\"\n+  [(set (match_operand:SD 0 \"gpc_reg_operand\" \"=f\")\n+\t(float_truncate:SD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"drsp %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_expand \"negdd2\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"\")\n+\t(neg:DD (match_operand:DD 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"\")\n+\n+(define_insn \"*negdd2_fpr\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(neg:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"fneg %0,%1\"\n+  [(set_attr \"type\" \"fpsimple\")])\n+\n+(define_expand \"absdd2\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"\")\n+\t(abs:DD (match_operand:DD 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"\")\n+\n+(define_insn \"*absdd2_fpr\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(abs:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"fabs %0,%1\"\n+  [(set_attr \"type\" \"fpsimple\")])\n+\n+(define_insn \"*nabsdd2_fpr\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(neg:DD (abs:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\"))))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"fnabs %0,%1\"\n+  [(set_attr \"type\" \"fpsimple\")])\n+\n+(define_expand \"negtd2\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"\")\n+\t(neg:TD (match_operand:TD 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"\")\n+\n+(define_insn \"*negtd2_fpr\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d,d\")\n+\t(neg:TD (match_operand:TD 1 \"gpc_reg_operand\" \"0,d\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"@\n+   fneg %0,%1\n+   fneg %0,%1\\;fmr %L0,%L1\"\n+  [(set_attr \"type\" \"fpsimple\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_expand \"abstd2\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"\")\n+\t(abs:TD (match_operand:TD 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"\")\n+\n+(define_insn \"*abstd2_fpr\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d,d\")\n+\t(abs:TD (match_operand:TD 1 \"gpc_reg_operand\" \"0,d\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"@\n+   fabs %0,%1\n+   fabs %0,%1\\;fmr %L0,%L1\"\n+  [(set_attr \"type\" \"fpsimple\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*nabstd2_fpr\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d,d\")\n+\t(neg:TD (abs:TD (match_operand:TD 1 \"gpc_reg_operand\" \"0,d\"))))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"@\n+   fnabs %0,%1\n+   fnabs %0,%1\\;fmr %L0,%L1\"\n+  [(set_attr \"type\" \"fpsimple\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+;; Hardware support for decimal floating point operations.\n+\n+(define_insn \"extendddtd2\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(float_extend:TD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dctqpq %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+;; The result of drdpq is an even/odd register pair with the converted\n+;; value in the even register and zero in the odd register.\n+;; FIXME: Avoid the register move by using a reload constraint to ensure\n+;; that the result is the first of the pair receiving the result of drdpq.\n+\n+(define_insn \"trunctddd2\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(float_truncate:DD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")))\n+   (clobber (match_scratch:TD 2 \"=d\"))]\n+  \"TARGET_DFP\"\n+  \"drdpq %2,%1\\;fmr %0,%2\"\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"adddd3\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(plus:DD (match_operand:DD 1 \"gpc_reg_operand\" \"%d\")\n+\t\t (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dadd %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"addtd3\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(plus:TD (match_operand:TD 1 \"gpc_reg_operand\" \"%d\")\n+\t\t (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"daddq %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"subdd3\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(minus:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n+\t\t  (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dsub %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"subtd3\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(minus:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n+\t\t  (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dsubq %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"muldd3\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(mult:DD (match_operand:DD 1 \"gpc_reg_operand\" \"%d\")\n+\t\t (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dmul %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"multd3\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(mult:TD (match_operand:TD 1 \"gpc_reg_operand\" \"%d\")\n+\t\t (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dmulq %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"divdd3\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(div:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n+\t\t(match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"ddiv %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"divtd3\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(div:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n+\t\t(match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"ddivq %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"*cmpdd_internal1\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n+\t\t      (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dcmpu %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"*cmptd_internal1\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n+\t\t      (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dcmpuq %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"floatdidd2\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(float:DD (match_operand:DI 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP && TARGET_POPCNTD\"\n+  \"dcffix %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"floatditd2\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(float:TD (match_operand:DI 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dcffixq %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+;; Convert a decimal64 to a decimal64 whose value is an integer.\n+;; This is the first stage of converting it to an integer type.\n+\n+(define_insn \"ftruncdd2\"\n+  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n+\t(fix:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"drintn. 0,%0,%1,1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+;; Convert a decimal64 whose value is an integer to an actual integer.\n+;; This is the second stage of converting decimal float to integer type.\n+\n+(define_insn \"fixdddi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n+\t(fix:DI (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dctfix %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+;; Convert a decimal128 to a decimal128 whose value is an integer.\n+;; This is the first stage of converting it to an integer type.\n+\n+(define_insn \"ftrunctd2\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(fix:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"drintnq. 0,%0,%1,1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+;; Convert a decimal128 whose value is an integer to an actual integer.\n+;; This is the second stage of converting decimal float to integer type.\n+\n+(define_insn \"fixtddi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n+\t(fix:DI (match_operand:TD 1 \"gpc_reg_operand\" \"d\")))]\n+  \"TARGET_DFP\"\n+  \"dctfixq %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+\f\n+;; Decimal builtin support\n+\n+(define_c_enum \"unspec\"\n+  [UNSPEC_DDEDPD\n+   UNSPEC_DENBCD\n+   UNSPEC_DXEX\n+   UNSPEC_DIEX\n+   UNSPEC_DSCLI\n+   UNSPEC_DTSTSFI\n+   UNSPEC_DSCRI])\n+\n+(define_code_iterator DFP_TEST [eq lt gt unordered])\n+\n+(define_mode_iterator D64_D128 [DD TD])\n+\n+(define_mode_attr dfp_suffix [(DD \"\")\n+\t\t\t      (TD \"q\")])\n+\n+(define_insn \"dfp_ddedpd_<mode>\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:D64_D128 [(match_operand:QI 1 \"const_0_to_3_operand\" \"i\")\n+\t\t\t  (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")]\n+\t\t\t UNSPEC_DDEDPD))]\n+  \"TARGET_DFP\"\n+  \"ddedpd<dfp_suffix> %1,%0,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"dfp_denbcd_<mode>\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:D64_D128 [(match_operand:QI 1 \"const_0_to_1_operand\" \"i\")\n+\t\t\t  (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")]\n+\t\t\t UNSPEC_DENBCD))]\n+  \"TARGET_DFP\"\n+  \"denbcd<dfp_suffix> %1,%0,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"dfp_dxex_<mode>\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:DI [(match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")]\n+\t\t   UNSPEC_DXEX))]\n+  \"TARGET_DFP\"\n+  \"dxex<dfp_suffix> %0,%1\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"dfp_diex_<mode>\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:D64_D128 [(match_operand:DI 1 \"gpc_reg_operand\" \"d\")\n+\t\t\t  (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")]\n+\t\t\t UNSPEC_DXEX))]\n+  \"TARGET_DFP\"\n+  \"diex<dfp_suffix> %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_expand \"dfptstsfi_<code>_<mode>\"\n+  [(set (match_dup 3)\n+\t(compare:CCFP\n+         (unspec:D64_D128\n+\t  [(match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t   (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")]\n+\t  UNSPEC_DTSTSFI)\n+\t (match_dup 4)))\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n+   \t(DFP_TEST:SI (match_dup 3)\n+\t\t     (const_int 0)))\n+  ]\n+  \"TARGET_P9_MISC\"\n+{\n+  operands[3] = gen_reg_rtx (CCFPmode);\n+  operands[4] = const0_rtx;\n+})\n+\n+(define_insn \"*dfp_sgnfcnc_<mode>\"\n+  [(set (match_operand:CCFP 0 \"\" \"=y\")\n+        (compare:CCFP\n+\t (unspec:D64_D128 [(match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t \t           (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")]\n+          UNSPEC_DTSTSFI)\n+\t (match_operand:SI 3 \"zero_constant\" \"j\")))]\n+  \"TARGET_P9_MISC\"\n+{\n+  /* If immediate operand is greater than 63, it will behave as if\n+     the value had been 63.  The code generator does not support\n+     immediate operand values greater than 63.  */\n+  if (!(IN_RANGE (INTVAL (operands[1]), 0, 63)))\n+    operands[1] = GEN_INT (63);\n+  return \"dtstsfi<dfp_suffix> %0,%1,%2\";\n+}\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"dfp_dscli_<mode>\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:D64_D128 [(match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")\n+\t\t\t  (match_operand:QI 2 \"immediate_operand\" \"i\")]\n+\t\t\t UNSPEC_DSCLI))]\n+  \"TARGET_DFP\"\n+  \"dscli<dfp_suffix> %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_insn \"dfp_dscri_<mode>\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:D64_D128 [(match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")\n+\t\t\t  (match_operand:QI 2 \"immediate_operand\" \"i\")]\n+\t\t\t UNSPEC_DSCRI))]\n+  \"TARGET_DFP\"\n+  \"dscri<dfp_suffix> %0,%1,%2\"\n+  [(set_attr \"type\" \"dfp\")])"}, {"sha": "8215abbd625826f1cb662982b6710d21eb56680a", "filename": "gcc/config/powerpcspe/driver-powerpcspe.c", "status": "added", "additions": 539, "deletions": 0, "changes": 539, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdriver-powerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fdriver-powerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdriver-powerpcspe.c?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,539 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include <stdlib.h>\n+\n+#ifdef _AIX\n+# include <sys/systemcfg.h>\n+#endif\n+\n+#ifdef __linux__\n+# include <link.h>\n+#endif\n+\n+#if defined (__APPLE__) || (__FreeBSD__)\n+# include <sys/types.h>\n+# include <sys/sysctl.h>\n+#endif\n+\n+const char *host_detect_local_cpu (int argc, const char **argv);\n+\n+#if GCC_VERSION >= 0\n+\n+/* Returns parameters that describe L1_ASSOC associative cache of size\n+   L1_SIZEKB with lines of size L1_LINE, and L2_SIZEKB.  */\n+\n+static char *\n+describe_cache (unsigned l1_sizekb, unsigned l1_line,\n+\t\tunsigned l1_assoc ATTRIBUTE_UNUSED, unsigned l2_sizekb)\n+{\n+  char l1size[1000], line[1000], l2size[1000];\n+\n+  /* At the moment, gcc middle-end does not use the information about the\n+     associativity of the cache.  */\n+\n+  sprintf (l1size, \"--param l1-cache-size=%u\", l1_sizekb);\n+  sprintf (line, \"--param l1-cache-line-size=%u\", l1_line);\n+  sprintf (l2size, \"--param l2-cache-size=%u\", l2_sizekb);\n+\n+  return concat (l1size, \" \", line, \" \", l2size, \" \", NULL);\n+}\n+\n+#ifdef __APPLE__\n+\n+/* Returns the description of caches on Darwin.  */\n+\n+static char *\n+detect_caches_darwin (void)\n+{\n+  unsigned l1_sizekb, l1_line, l1_assoc, l2_sizekb;\n+  size_t len = 4;\n+  static int l1_size_name[2] = { CTL_HW, HW_L1DCACHESIZE };\n+  static int l1_line_name[2] = { CTL_HW, HW_CACHELINE };\n+  static int l2_size_name[2] = { CTL_HW, HW_L2CACHESIZE };\n+\n+  sysctl (l1_size_name, 2, &l1_sizekb, &len, NULL, 0);\n+  sysctl (l1_line_name, 2, &l1_line, &len, NULL, 0);\n+  sysctl (l2_size_name, 2, &l2_sizekb, &len, NULL, 0);\n+  l1_assoc = 0;\n+\n+  return describe_cache (l1_sizekb / 1024, l1_line, l1_assoc,\n+\t\t\t l2_sizekb / 1024);\n+}\n+\n+static const char *\n+detect_processor_darwin (void)\n+{\n+  unsigned int proc;\n+  size_t len = 4;\n+\n+  sysctlbyname (\"hw.cpusubtype\", &proc, &len, NULL, 0);\n+\n+  if (len > 0)\n+    switch (proc)\n+      {\n+      case 1:\n+\treturn \"601\";\n+      case 2:\n+\treturn \"602\";\n+      case 3:\n+\treturn \"603\";\n+      case 4:\n+      case 5:\n+\treturn \"603e\";\n+      case 6:\n+\treturn \"604\";\n+      case 7:\n+\treturn \"604e\";\n+      case 8:\n+\treturn \"620\";\n+      case 9:\n+\treturn \"750\";\n+      case 10:\n+\treturn \"7400\";\n+      case 11:\n+\treturn \"7450\";\n+      case 100:\n+\treturn \"970\";\n+      default:\n+\treturn \"powerpc\";\n+      }\n+\n+  return \"powerpc\";\n+}\n+\n+#endif /* __APPLE__ */\n+\n+#ifdef __FreeBSD__\n+\n+/* Returns the description of caches on FreeBSD PPC.  */\n+\n+static char *\n+detect_caches_freebsd (void)\n+{\n+  unsigned l1_sizekb, l1_line, l1_assoc, l2_sizekb;\n+  size_t len = 4;\n+\n+  /* Currently, as of FreeBSD-7.0, there is only the cacheline_size\n+     available via sysctl.  */\n+  sysctlbyname (\"machdep.cacheline_size\", &l1_line, &len, NULL, 0);\n+\n+  l1_sizekb = 32;\n+  l1_assoc = 0;\n+  l2_sizekb = 512;\n+\n+  return describe_cache (l1_sizekb, l1_line, l1_assoc, l2_sizekb);\n+}\n+\n+/* Currently returns default powerpc.  */\n+static const char *\n+detect_processor_freebsd (void)\n+{\n+  return \"powerpc\";\n+}\n+\n+#endif /* __FreeBSD__  */\n+\n+#ifdef __linux__\n+\n+/* Returns AT_PLATFORM if present, otherwise generic PowerPC.  */\n+\n+static const char *\n+elf_platform (void)\n+{\n+  int fd;\n+\n+  fd = open (\"/proc/self/auxv\", O_RDONLY);\n+\n+  if (fd != -1)\n+    {\n+      char buf[1024];\n+      ElfW(auxv_t) *av;\n+      ssize_t n;\n+\n+      n = read (fd, buf, sizeof (buf));\n+      close (fd);\n+\n+      if (n > 0)\n+\t{\n+\t  for (av = (ElfW(auxv_t) *) buf; av->a_type != AT_NULL; ++av)\n+\t    switch (av->a_type)\n+\t      {\n+\t      case AT_PLATFORM:\n+\t\treturn (const char *) av->a_un.a_val;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t}\n+    }\n+  return NULL;\n+}\n+\n+/* Returns AT_DCACHEBSIZE if present, otherwise generic 32.  */\n+\n+static int\n+elf_dcachebsize (void)\n+{\n+  int fd;\n+\n+  fd = open (\"/proc/self/auxv\", O_RDONLY);\n+\n+  if (fd != -1)\n+    {\n+      char buf[1024];\n+      ElfW(auxv_t) *av;\n+      ssize_t n;\n+\n+      n = read (fd, buf, sizeof (buf));\n+      close (fd);\n+\n+      if (n > 0)\n+\t{\n+\t  for (av = (ElfW(auxv_t) *) buf; av->a_type != AT_NULL; ++av)\n+\t    switch (av->a_type)\n+\t      {\n+\t      case AT_DCACHEBSIZE:\n+\t\treturn av->a_un.a_val;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t}\n+    }\n+  return 32;\n+}\n+\n+/* Returns the description of caches on Linux.  */\n+\n+static char *\n+detect_caches_linux (void)\n+{\n+  unsigned l1_sizekb, l1_line, l1_assoc, l2_sizekb;\n+  const char *platform;\n+\n+  platform = elf_platform ();\n+\n+  if (platform != NULL)\n+    {\n+      l1_line = 128;\n+\n+      if (platform[5] == '6')\n+\t/* POWER6 and POWER6x */\n+\tl1_sizekb = 64;\n+      else\n+\tl1_sizekb = 32;\n+    }\n+  else\n+    {\n+      l1_line = elf_dcachebsize ();\n+      l1_sizekb = 32;\n+    }\n+\n+  l1_assoc = 0;\n+  l2_sizekb = 512;\n+\n+  return describe_cache (l1_sizekb, l1_line, l1_assoc, l2_sizekb);\n+}\n+\n+static const char *\n+detect_processor_linux (void)\n+{\n+  const char *platform;\n+\n+  platform = elf_platform ();\n+\n+  if (platform != NULL)\n+    return platform;\n+  else\n+    return \"powerpc\";\n+}\n+\n+#endif /* __linux__ */\n+\n+#ifdef _AIX\n+/* Returns the description of caches on AIX.  */\n+\n+static char *\n+detect_caches_aix (void)\n+{\n+  unsigned l1_sizekb, l1_line, l1_assoc, l2_sizekb;\n+\n+  l1_sizekb = _system_configuration.dcache_size / 1024;\n+  l1_line = _system_configuration.dcache_line;\n+  l1_assoc = _system_configuration.dcache_asc;\n+  l2_sizekb = _system_configuration.L2_cache_size / 1024;\n+\n+  return describe_cache (l1_sizekb, l1_line, l1_assoc, l2_sizekb);\n+}\n+\n+\n+/* Returns the processor implementation on AIX.  */\n+\n+static const char *\n+detect_processor_aix (void)\n+{\n+  switch (_system_configuration.implementation)\n+    {\n+    case 0x0008:\n+      return \"601\";\n+\n+    case 0x0020:\n+      return \"603\";\n+\n+    case 0x0010:\n+      return \"604\";\n+\n+    case 0x0040:\n+      return \"620\";\n+\n+    case 0x0080:\n+      return \"630\";\n+\n+    case 0x0100:\n+    case 0x0200:\n+    case 0x0400:\n+      return \"rs64\";\n+\n+    case 0x0800:\n+      return \"power4\";\n+\n+    case 0x2000:\n+      if (_system_configuration.version == 0x0F0000)\n+\treturn \"power5\";\n+      else\n+\treturn \"power5+\";\n+\n+    case 0x4000:\n+      return \"power6\";\n+\n+    case 0x8000:\n+      return \"power7\";\n+\n+    case 0x10000:\n+      return \"power8\";\n+\n+    case 0x20000:\n+      return \"power9\";\n+\n+    default:\n+      return \"powerpc\";\n+    }\n+}\n+#endif /* _AIX */\n+\n+\n+/*\n+ * Array to map -mcpu=native names to the switches passed to the assembler.\n+ * This list mirrors the specs in ASM_CPU_SPEC, and any changes made here\n+ * should be made there as well.\n+ */\n+\n+struct asm_name {\n+  const char *cpu;\n+  const char *asm_sw;\n+};\n+\n+static const struct asm_name asm_names[] = {\n+#if defined (_AIX)\n+  { \"power3\",\t\"-m620\" },\n+  { \"power4\",\t\"-mpwr4\" },\n+  { \"power5\",\t\"-mpwr5\" },\n+  { \"power5+\",\t\"-mpwr5x\" },\n+  { \"power6\",\t\"-mpwr6\" },\n+  { \"power6x\",\t\"-mpwr6\" },\n+  { \"power7\",\t\"-mpwr7\" },\n+  { \"power8\",\t\"-mpwr8\" },\n+  { \"power9\",\t\"-mpwr9\" },\n+  { \"powerpc\",\t\"-mppc\" },\n+  { \"rs64a\",\t\"-mppc\" },\n+  { \"603\",\t\"-m603\" },\n+  { \"603e\",\t\"-m603\" },\n+  { \"604\",\t\"-m604\" },\n+  { \"604e\",\t\"-m604\" },\n+  { \"620\",\t\"-m620\" },\n+  { \"630\",\t\"-m620\" },\n+  { \"970\",\t\"-m970\" },\n+  { \"G5\",\t\"-m970\" },\n+  { NULL,\t\"\\\n+%{!maix64: \\\n+%{mpowerpc64: -mppc64} \\\n+%{maltivec: -m970} \\\n+%{!maltivec: %{!mpowerpc64: %(asm_default)}}}\" },\n+\n+#else\n+  { \"cell\",\t\"-mcell\" },\n+  { \"power3\",\t\"-mppc64\" },\n+  { \"power4\",\t\"-mpower4\" },\n+  { \"power5\",\t\"%(asm_cpu_power5)\" },\n+  { \"power5+\",\t\"%(asm_cpu_power5)\" },\n+  { \"power6\",\t\"%(asm_cpu_power6) -maltivec\" },\n+  { \"power6x\",\t\"%(asm_cpu_power6) -maltivec\" },\n+  { \"power7\",\t\"%(asm_cpu_power7)\" },\n+  { \"power8\",\t\"%(asm_cpu_power8)\" },\n+  { \"power9\",\t\"%(asm_cpu_power9)\" },\n+  { \"powerpc\",\t\"-mppc\" },\n+  { \"rs64a\",\t\"-mppc64\" },\n+  { \"401\",\t\"-mppc\" },\n+  { \"403\",\t\"-m403\" },\n+  { \"405\",\t\"-m405\" },\n+  { \"405fp\",\t\"-m405\" },\n+  { \"440\",\t\"-m440\" },\n+  { \"440fp\",\t\"-m440\" },\n+  { \"464\",\t\"-m440\" },\n+  { \"464fp\",\t\"-m440\" },\n+  { \"505\",\t\"-mppc\" },\n+  { \"601\",\t\"-m601\" },\n+  { \"602\",\t\"-mppc\" },\n+  { \"603\",\t\"-mppc\" },\n+  { \"603e\",\t\"-mppc\" },\n+  { \"ec603e\",\t\"-mppc\" },\n+  { \"604\",\t\"-mppc\" },\n+  { \"604e\",\t\"-mppc\" },\n+  { \"620\",\t\"-mppc64\" },\n+  { \"630\",\t\"-mppc64\" },\n+  { \"740\",\t\"-mppc\" },\n+  { \"750\",\t\"-mppc\" },\n+  { \"G3\",\t\"-mppc\" },\n+  { \"7400\",\t\"-mppc -maltivec\" },\n+  { \"7450\",\t\"-mppc -maltivec\" },\n+  { \"G4\",\t\"-mppc -maltivec\" },\n+  { \"801\",\t\"-mppc\" },\n+  { \"821\",\t\"-mppc\" },\n+  { \"823\",\t\"-mppc\" },\n+  { \"860\",\t\"-mppc\" },\n+  { \"970\",\t\"-mpower4 -maltivec\" },\n+  { \"G5\",\t\"-mpower4 -maltivec\" },\n+  { \"8540\",\t\"-me500\" },\n+  { \"8548\",\t\"-me500\" },\n+  { \"e300c2\",\t\"-me300\" },\n+  { \"e300c3\",\t\"-me300\" },\n+  { \"e500mc\",\t\"-me500mc\" },\n+  { NULL,\t\"\\\n+%{mpowerpc64*: -mppc64} \\\n+%{!mpowerpc64*: %(asm_default)}\" },\n+#endif\n+};\n+\n+/* This will be called by the spec parser in gcc.c when it sees\n+   a %:local_cpu_detect(args) construct.  Currently it will be called\n+   with either \"arch\" or \"tune\" as argument depending on if -march=native\n+   or -mtune=native is to be substituted.\n+\n+   Additionally it will be called with \"asm\" to select the appropriate flags\n+   for the assembler.\n+\n+   It returns a string containing new command line parameters to be\n+   put at the place of the above two options, depending on what CPU\n+   this is executed.\n+\n+   ARGC and ARGV are set depending on the actual arguments given\n+   in the spec.  */\n+const char *\n+host_detect_local_cpu (int argc, const char **argv)\n+{\n+  const char *cpu = NULL;\n+  const char *cache = \"\";\n+  const char *options = \"\";\n+  bool arch;\n+  bool assembler;\n+  size_t i;\n+\n+  if (argc < 1)\n+    return NULL;\n+\n+  arch = strcmp (argv[0], \"cpu\") == 0;\n+  assembler = (!arch && strcmp (argv[0], \"asm\") == 0);\n+  if (!arch && !assembler && strcmp (argv[0], \"tune\"))\n+    return NULL;\n+\n+  if (! assembler)\n+    {\n+#if defined (_AIX)\n+      cache = detect_caches_aix ();\n+#elif defined (__APPLE__)\n+      cache = detect_caches_darwin ();\n+#elif defined (__FreeBSD__)\n+      cache = detect_caches_freebsd ();\n+      /* FreeBSD PPC does not provide any cache information yet.  */\n+      cache = \"\";\n+#elif defined (__linux__)\n+      cache = detect_caches_linux ();\n+      /* PPC Linux does not provide any cache information yet.  */\n+      cache = \"\";\n+#else\n+      cache = \"\";\n+#endif\n+    }\n+\n+#if defined (_AIX)\n+  cpu = detect_processor_aix ();\n+#elif defined (__APPLE__)\n+  cpu = detect_processor_darwin ();\n+#elif defined (__FreeBSD__)\n+  cpu = detect_processor_freebsd ();\n+#elif defined (__linux__)\n+  cpu = detect_processor_linux ();\n+#else\n+  cpu = \"powerpc\";\n+#endif\n+\n+  if (assembler)\n+    {\n+      for (i = 0; i < sizeof (asm_names) / sizeof (asm_names[0]); i++)\n+\t{\n+\t  if (!asm_names[i].cpu || !strcmp (asm_names[i].cpu, cpu))\n+\t    return asm_names[i].asm_sw;\n+\t}\n+\n+      return NULL;\n+    }\n+\n+  return concat (cache, \"-m\", argv[0], \"=\", cpu, \" \", options, NULL);\n+}\n+\n+#else /* GCC_VERSION */\n+\n+/* If we aren't compiling with GCC we just provide a minimal\n+   default value.  */\n+const char *\n+host_detect_local_cpu (int argc, const char **argv)\n+{\n+  const char *cpu;\n+  bool arch;\n+\n+  if (argc < 1)\n+    return NULL;\n+\n+  arch = strcmp (argv[0], \"cpu\") == 0;\n+  if (!arch && strcmp (argv[0], \"tune\"))\n+    return NULL;\n+  \n+  if (arch)\n+    cpu = \"powerpc\";\n+\n+  return concat (\"-m\", argv[0], \"=\", cpu, NULL);\n+}\n+\n+#endif /* GCC_VERSION */\n+"}, {"sha": "f014f817d8a11b58aff67eb2c4c5a87fa3ffec57", "filename": "gcc/config/powerpcspe/e300c2c3.md", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe300c2c3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe300c2c3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fe300c2c3.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,193 @@\n+;; Pipeline description for Motorola PowerPC e300c3 core.\n+;;   Copyright (C) 2008-2017 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"ppce300c3_most,ppce300c3_long,ppce300c3_retire\")\n+(define_cpu_unit \"ppce300c3_decode_0,ppce300c3_decode_1\" \"ppce300c3_most\")\n+\n+;; We don't simulate general issue queue (GIC).  If we have SU insn\n+;; and then SU1 insn, they can not be issued on the same cycle\n+;; (although SU1 insn and then SU insn can be issued) because the SU\n+;; insn will go to SU1 from GIC0 entry.  Fortunately, the first cycle\n+;; multipass insn scheduling will find the situation and issue the SU1\n+;; insn and then the SU insn.\n+(define_cpu_unit \"ppce300c3_issue_0,ppce300c3_issue_1\"   \"ppce300c3_most\")\n+\n+;; We could describe completion buffers slots in combination with the\n+;; retirement units and the order of completion but the result\n+;; automaton would behave in the same way because we can not describe\n+;; real latency time with taking in order completion into account.\n+;; Actually we could define the real latency time by querying reserved\n+;; automaton units but the current scheduler uses latency time before\n+;; issuing insns and making any reservations.\n+;;\n+;; So our description is aimed to achieve a insn schedule in which the\n+;; insns would not wait in the completion buffer.\n+(define_cpu_unit \"ppce300c3_retire_0,ppce300c3_retire_1\" \"ppce300c3_retire\")\n+\n+;; Branch unit:\n+(define_cpu_unit \"ppce300c3_bu\" \"ppce300c3_most\")\n+\n+;; IU:\n+(define_cpu_unit \"ppce300c3_iu0_stage0,ppce300c3_iu1_stage0\" \"ppce300c3_most\")\n+\n+;; IU: This used to describe non-pipelined division.\n+(define_cpu_unit \"ppce300c3_mu_div\" \"ppce300c3_long\")\n+\n+;; SRU:\n+(define_cpu_unit \"ppce300c3_sru_stage0\" \"ppce300c3_most\")\n+\n+;; Here we simplified LSU unit description not describing the stages.\n+(define_cpu_unit \"ppce300c3_lsu\" \"ppce300c3_most\")\n+\n+;; FPU:\n+(define_cpu_unit \"ppce300c3_fpu\" \"ppce300c3_most\")\n+\n+;; The following units are used to make automata deterministic\n+(define_cpu_unit \"present_ppce300c3_decode_0\" \"ppce300c3_most\")\n+(define_cpu_unit \"present_ppce300c3_issue_0\" \"ppce300c3_most\")\n+(define_cpu_unit \"present_ppce300c3_retire_0\" \"ppce300c3_retire\")\n+(define_cpu_unit \"present_ppce300c3_iu0_stage0\" \"ppce300c3_most\")\n+\n+;; The following sets to make automata deterministic when option ndfa is used.\n+(presence_set \"present_ppce300c3_decode_0\" \"ppce300c3_decode_0\")\n+(presence_set \"present_ppce300c3_issue_0\" \"ppce300c3_issue_0\")\n+(presence_set \"present_ppce300c3_retire_0\" \"ppce300c3_retire_0\")\n+(presence_set \"present_ppce300c3_iu0_stage0\" \"ppce300c3_iu0_stage0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"ppce300c3_decode\"\n+    \"ppce300c3_decode_0|ppce300c3_decode_1+present_ppce300c3_decode_0\")\n+(define_reservation \"ppce300c3_issue\"\n+    \"ppce300c3_issue_0|ppce300c3_issue_1+present_ppce300c3_issue_0\")\n+(define_reservation \"ppce300c3_retire\"\n+   \"ppce300c3_retire_0|ppce300c3_retire_1+present_ppce300c3_retire_0\")\n+(define_reservation \"ppce300c3_iu_stage0\"\n+   \"ppce300c3_iu0_stage0|ppce300c3_iu1_stage0+present_ppce300c3_iu0_stage0\")\n+\n+;; Compares can be executed either one of the IU or SRU\n+(define_insn_reservation \"ppce300c3_cmp\" 1\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+(ppce300c3_iu_stage0|ppce300c3_sru_stage0) \\\n+        +ppce300c3_retire\")\n+\n+;; Other one cycle IU insns\n+(define_insn_reservation \"ppce300c3_iu\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_iu_stage0+ppce300c3_retire\")\n+\n+;; Branch.  Actually this latency time is not used by the scheduler.\n+(define_insn_reservation \"ppce300c3_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_bu,ppce300c3_retire\")\n+\n+;; Multiply is non-pipelined but can be executed in any IU\n+(define_insn_reservation \"ppce300c3_multiply\" 2\n+  (and (eq_attr \"type\" \"mul\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_iu_stage0, \\\n+   ppce300c3_iu_stage0+ppce300c3_retire\")\n+\n+;; Divide.  We use the average latency time here.  We omit reserving a\n+;; retire unit because of the result automata will be huge.\n+(define_insn_reservation \"ppce300c3_divide\" 20\n+  (and (eq_attr \"type\" \"div\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_iu_stage0+ppce300c3_mu_div,\\\n+   ppce300c3_mu_div*19\")\n+\n+;; CR logical\n+(define_insn_reservation \"ppce300c3_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_sru_stage0+ppce300c3_retire\")\n+\n+;; Mfcr\n+(define_insn_reservation \"ppce300c3_mfcr\" 1\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_sru_stage0+ppce300c3_retire\")\n+\n+;; Mtcrf\n+(define_insn_reservation \"ppce300c3_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_sru_stage0+ppce300c3_retire\")\n+\n+;; Mtjmpr\n+(define_insn_reservation \"ppce300c3_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_sru_stage0+ppce300c3_retire\")\n+\n+;; Float point instructions\n+(define_insn_reservation \"ppce300c3_fpcompare\" 3\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,nothing,ppce300c3_retire\")\n+\n+(define_insn_reservation \"ppce300c3_fp\" 3\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,nothing,ppce300c3_retire\")\n+\n+(define_insn_reservation \"ppce300c3_dmul\" 4\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,ppce300c3_fpu,nothing,ppce300c3_retire\")\n+\n+; Divides are not pipelined\n+(define_insn_reservation \"ppce300c3_sdiv\" 18\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,ppce300c3_fpu*17\")\n+\n+(define_insn_reservation \"ppce300c3_ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,ppce300c3_fpu*32\")\n+\n+;; Loads\n+(define_insn_reservation \"ppce300c3_load\" 2\n+  (and (eq_attr \"type\" \"load\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n+\n+(define_insn_reservation \"ppce300c3_fpload\" 2\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n+\n+;; Stores.\n+(define_insn_reservation \"ppce300c3_store\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")\n+\n+(define_insn_reservation \"ppce300c3_fpstore\" 2\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppce300c3\"))\n+  \"ppce300c3_decode,ppce300c3_issue+ppce300c3_lsu,ppce300c3_retire\")"}, {"sha": "3da9a6ecff23369fab8703556b8498dab69a9508", "filename": "gcc/config/powerpcspe/e500.h", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe500.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe500.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fe500.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,45 @@\n+/* Enable E500 support.\n+   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef TARGET_SPE_ABI\n+#undef TARGET_SPE\n+#undef TARGET_FPRS\n+#undef TARGET_E500_SINGLE\n+#undef TARGET_E500_DOUBLE\n+#undef CHECK_E500_OPTIONS\n+\n+#define TARGET_SPE_ABI rs6000_spe_abi\n+#define TARGET_SPE rs6000_spe\n+#define TARGET_FPRS (rs6000_float_gprs == 0)\n+#define TARGET_E500_SINGLE (TARGET_HARD_FLOAT && rs6000_float_gprs == 1)\n+#define TARGET_E500_DOUBLE (TARGET_HARD_FLOAT && rs6000_float_gprs == 2)\n+#define CHECK_E500_OPTIONS\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_SPE || TARGET_SPE_ABI\t\t\t\t\t\\\n+\t|| TARGET_E500_SINGLE || TARGET_E500_DOUBLE)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tif (TARGET_ALTIVEC)\t\t\t\t\t\t\\\n+\t  error (\"AltiVec and SPE instructions cannot coexist\");\t\\\n+\tif (TARGET_VSX)\t\t\t\t\t\t\t\\\n+\t  error (\"VSX and SPE instructions cannot coexist\");\t\t\\\n+\tif (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t  error (\"64-bit SPE not supported\");\t\t\t\t\\\n+\tif (TARGET_HARD_FLOAT && TARGET_FPRS)\t\t\t\t\\\n+\t  error (\"E500 and FPRs not supported\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)"}, {"sha": "9878aaacba891e18722192a29a9d14bd1dc51319", "filename": "gcc/config/powerpcspe/e500mc.md", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe500mc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe500mc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fe500mc.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,198 @@\n+;; Pipeline description for Motorola PowerPC e500mc core.\n+;;   Copyright (C) 2008-2017 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; e500mc 32-bit SU(2), LSU, FPU, BPU\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+;; FP is half clocked, timings of other instructions are as in the e500v2.\n+\n+(define_automaton \"e500mc_most,e500mc_long,e500mc_retire\")\n+(define_cpu_unit \"e500mc_decode_0,e500mc_decode_1\" \"e500mc_most\")\n+(define_cpu_unit \"e500mc_issue_0,e500mc_issue_1\"   \"e500mc_most\")\n+(define_cpu_unit \"e500mc_retire_0,e500mc_retire_1\" \"e500mc_retire\")\n+\n+;; SU.\n+(define_cpu_unit \"e500mc_su0_stage0,e500mc_su1_stage0\" \"e500mc_most\")\n+\n+;; MU.\n+(define_cpu_unit \"e500mc_mu_stage0,e500mc_mu_stage1\" \"e500mc_most\")\n+(define_cpu_unit \"e500mc_mu_stage2,e500mc_mu_stage3\" \"e500mc_most\")\n+\n+;; Non-pipelined division.\n+(define_cpu_unit \"e500mc_mu_div\" \"e500mc_long\")\n+\n+;; LSU.\n+(define_cpu_unit \"e500mc_lsu\" \"e500mc_most\")\n+\n+;; FPU.\n+(define_cpu_unit \"e500mc_fpu\" \"e500mc_most\")\n+\n+;; Branch unit.\n+(define_cpu_unit \"e500mc_bu\" \"e500mc_most\")\n+\n+;; The following units are used to make the automata deterministic.\n+(define_cpu_unit \"present_e500mc_decode_0\" \"e500mc_most\")\n+(define_cpu_unit \"present_e500mc_issue_0\" \"e500mc_most\")\n+(define_cpu_unit \"present_e500mc_retire_0\" \"e500mc_retire\")\n+(define_cpu_unit \"present_e500mc_su0_stage0\" \"e500mc_most\")\n+\n+;; The following sets to make automata deterministic when option ndfa is used.\n+(presence_set \"present_e500mc_decode_0\" \"e500mc_decode_0\")\n+(presence_set \"present_e500mc_issue_0\" \"e500mc_issue_0\")\n+(presence_set \"present_e500mc_retire_0\" \"e500mc_retire_0\")\n+(presence_set \"present_e500mc_su0_stage0\" \"e500mc_su0_stage0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"e500mc_decode\"\n+    \"e500mc_decode_0|e500mc_decode_1+present_e500mc_decode_0\")\n+(define_reservation \"e500mc_issue\"\n+    \"e500mc_issue_0|e500mc_issue_1+present_e500mc_issue_0\")\n+(define_reservation \"e500mc_retire\"\n+   \"e500mc_retire_0|e500mc_retire_1+present_e500mc_retire_0\")\n+(define_reservation \"e500mc_su_stage0\"\n+   \"e500mc_su0_stage0|e500mc_su1_stage0+present_e500mc_su0_stage0\")\n+\n+;; Simple SU insns.\n+(define_insn_reservation \"e500mc_su\" 1\n+  (and (eq_attr \"type\" \"integer,add,logical,insert,cmp,\\\n+                        shift,trap,cntlz,exts,isel\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire,\\\n+   e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire,\\\n+   e500mc_issue+e500mc_su_stage0+e500mc_retire,\\\n+   e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+;; Multiply.\n+(define_insn_reservation \"e500mc_multiply\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_mu_stage0,e500mc_mu_stage1,\\\n+   e500mc_mu_stage2,e500mc_mu_stage3+e500mc_retire\")\n+\n+;; Divide. We use the average latency time here.\n+(define_insn_reservation \"e500mc_divide\" 14\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_mu_stage0+e500mc_mu_div,\\\n+   e500mc_mu_div*13\")\n+\n+;; Branch.\n+(define_insn_reservation \"e500mc_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_bu,e500mc_retire\")\n+\n+;; CR logical.\n+(define_insn_reservation \"e500mc_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_bu,e500mc_retire\")\n+\n+;; Mfcr.\n+(define_insn_reservation \"e500mc_mfcr\" 1\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su1_stage0+e500mc_retire\")\n+\n+;; Mtcrf.\n+(define_insn_reservation \"e500mc_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su1_stage0+e500mc_retire\")\n+\n+;; Mtjmpr.\n+(define_insn_reservation \"e500mc_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+;; Brinc.\n+(define_insn_reservation \"e500mc_brinc\" 1\n+  (and (eq_attr \"type\" \"brinc\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+;; Loads.\n+(define_insn_reservation \"e500mc_load\" 3\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_fpload\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing*2,e500mc_retire\")\n+\n+;; Stores.\n+(define_insn_reservation \"e500mc_store\" 3\n+  (and (eq_attr \"type\" \"store,store_c\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n+\n+;; The following ignores the retire unit to avoid a large automata.\n+\n+;; Simple FP.\n+(define_insn_reservation \"e500mc_simple_float\" 8\n+  (and (eq_attr \"type\" \"fpsimple\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu\")\n+; \"e500mc_decode,e500mc_issue+e500mc_fpu,nothing*6,e500mc_retire\")\n+\n+;; FP.\n+(define_insn_reservation \"e500mc_float\" 8\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu\")\n+; \"e500mc_decode,e500mc_issue+e500mc_fpu,nothing*6,e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_fpcompare\" 8\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu\")\n+\n+(define_insn_reservation \"e500mc_dmul\" 10\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu\")\n+\n+;; FP divides are not pipelined.\n+(define_insn_reservation \"e500mc_sdiv\" 36\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu,e500mc_fpu*35\")\n+\n+(define_insn_reservation \"e500mc_ddiv\" 66\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu,e500mc_fpu*65\")"}, {"sha": "366b4c49791847867b91fcf39ea47a5150f39924", "filename": "gcc/config/powerpcspe/e500mc64.md", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe500mc64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe500mc64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fe500mc64.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,200 @@\n+;; Pipeline description for Freescale PowerPC e500mc64 core.\n+;;   Copyright (C) 2009-2017 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; e500mc64 64-bit SU(2), LSU, FPU, BPU\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+\n+(define_automaton \"e500mc64_most,e500mc64_long,e500mc64_retire\")\n+(define_cpu_unit \"e500mc64_decode_0,e500mc64_decode_1\" \"e500mc64_most\")\n+(define_cpu_unit \"e500mc64_issue_0,e500mc64_issue_1\"   \"e500mc64_most\")\n+(define_cpu_unit \"e500mc64_retire_0,e500mc64_retire_1\" \"e500mc64_retire\")\n+\n+;; SU.\n+(define_cpu_unit \"e500mc64_su0_stage0,e500mc64_su1_stage0\" \"e500mc64_most\")\n+\n+;; MU.\n+(define_cpu_unit \"e500mc64_mu_stage0,e500mc64_mu_stage1\" \"e500mc64_most\")\n+(define_cpu_unit \"e500mc64_mu_stage2,e500mc64_mu_stage3\" \"e500mc64_most\")\n+\n+;; Non-pipelined division.\n+(define_cpu_unit \"e500mc64_mu_div\" \"e500mc64_long\")\n+\n+;; LSU.\n+(define_cpu_unit \"e500mc64_lsu\" \"e500mc64_most\")\n+\n+;; FPU.\n+(define_cpu_unit \"e500mc64_fpu\" \"e500mc64_most\")\n+\n+;; Branch unit.\n+(define_cpu_unit \"e500mc64_bu\" \"e500mc64_most\")\n+\n+;; The following units are used to make the automata deterministic.\n+(define_cpu_unit \"present_e500mc64_decode_0\" \"e500mc64_most\")\n+(define_cpu_unit \"present_e500mc64_issue_0\" \"e500mc64_most\")\n+(define_cpu_unit \"present_e500mc64_retire_0\" \"e500mc64_retire\")\n+(define_cpu_unit \"present_e500mc64_su0_stage0\" \"e500mc64_most\")\n+\n+;; The following sets to make automata deterministic when option ndfa is used.\n+(presence_set \"present_e500mc64_decode_0\" \"e500mc64_decode_0\")\n+(presence_set \"present_e500mc64_issue_0\" \"e500mc64_issue_0\")\n+(presence_set \"present_e500mc64_retire_0\" \"e500mc64_retire_0\")\n+(presence_set \"present_e500mc64_su0_stage0\" \"e500mc64_su0_stage0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"e500mc64_decode\"\n+    \"e500mc64_decode_0|e500mc64_decode_1+present_e500mc64_decode_0\")\n+(define_reservation \"e500mc64_issue\"\n+    \"e500mc64_issue_0|e500mc64_issue_1+present_e500mc64_issue_0\")\n+(define_reservation \"e500mc64_retire\"\n+   \"e500mc64_retire_0|e500mc64_retire_1+present_e500mc64_retire_0\")\n+(define_reservation \"e500mc64_su_stage0\"\n+   \"e500mc64_su0_stage0|e500mc64_su1_stage0+present_e500mc64_su0_stage0\")\n+\n+;; Simple SU insns.\n+(define_insn_reservation \"e500mc64_su\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,cntlz\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n+\t\t (eq_attr \"dot\" \"no\"))\n+\t    (and (eq_attr \"type\" \"shift\")\n+\t\t (eq_attr \"dot\" \"no\")\n+\t\t (eq_attr \"var_shift\" \"no\")))\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su_stage0+e500mc64_retire\")\n+\n+(define_insn_reservation \"e500mc64_su2\" 2\n+  (and (ior (eq_attr \"type\" \"cmp,trap\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n+\t\t (eq_attr \"dot\" \"yes\"))\n+\t    (and (eq_attr \"type\" \"shift\")\n+\t\t (eq_attr \"dot\" \"yes\")\n+\t\t (eq_attr \"var_shift\" \"no\")))\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su_stage0,e500mc64_retire\")\n+\n+(define_insn_reservation \"e500mc64_delayed\" 2\n+  (and (eq_attr \"type\" \"shift\")\n+       (eq_attr \"var_shift\" \"yes\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su_stage0,e500mc64_retire\")\n+\n+(define_insn_reservation \"e500mc64_two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su_stage0+e500mc64_retire,\\\n+   e500mc64_issue+e500mc64_su_stage0+e500mc64_retire\")\n+\n+(define_insn_reservation \"e500mc64_three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su_stage0+e500mc64_retire,\\\n+   e500mc64_issue+e500mc64_su_stage0+e500mc64_retire,\\\n+   e500mc64_issue+e500mc64_su_stage0+e500mc64_retire\")\n+\n+;; Multiply.\n+(define_insn_reservation \"e500mc64_multiply\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_mu_stage0,e500mc64_mu_stage1,\\\n+   e500mc64_mu_stage2,e500mc64_mu_stage3+e500mc64_retire\")\n+\n+;; Divide. We use the average latency time here.\n+(define_insn_reservation \"e500mc64_divide\" 14\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_mu_stage0+e500mc64_mu_div,\\\n+   e500mc64_mu_div*13\")\n+\n+;; Branch.\n+(define_insn_reservation \"e500mc64_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_bu,e500mc64_retire\")\n+\n+;; CR logical.\n+(define_insn_reservation \"e500mc64_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_bu,e500mc64_retire\")\n+\n+;; Mfcr.\n+(define_insn_reservation \"e500mc64_mfcr\" 4\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su1_stage0,e500mc64_su1_stage0*3+e500mc64_retire\")\n+\n+;; Mtcrf.\n+(define_insn_reservation \"e500mc64_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su1_stage0+e500mc64_retire\")\n+\n+;; Mtjmpr.\n+(define_insn_reservation \"e500mc64_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su_stage0+e500mc64_retire\")\n+\n+;; Brinc.\n+(define_insn_reservation \"e500mc64_brinc\" 1\n+  (and (eq_attr \"type\" \"brinc\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_su_stage0+e500mc64_retire\")\n+\n+;; Loads.\n+(define_insn_reservation \"e500mc64_load\" 3\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_lsu,nothing,e500mc64_retire\")\n+\n+(define_insn_reservation \"e500mc64_fpload\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_lsu,nothing*2,e500mc64_retire\")\n+\n+;; Stores.\n+(define_insn_reservation \"e500mc64_store\" 3\n+  (and (eq_attr \"type\" \"store,store_c\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_lsu,nothing,e500mc64_retire\")\n+\n+(define_insn_reservation \"e500mc64_fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_lsu,nothing,e500mc64_retire\")\n+\n+;; The following ignores the retire unit to avoid a large automata.\n+\n+;; FP.\n+(define_insn_reservation \"e500mc64_float\" 7\n+  (and (eq_attr \"type\" \"fpsimple,fp,fpcompare,dmul\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_fpu\")\n+; \"e500mc64_decode,e500mc64_issue+e500mc64_fpu,nothing*5,e500mc64_retire\")\n+\n+;; FP divides are not pipelined.\n+(define_insn_reservation \"e500mc64_sdiv\" 20\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_fpu,e500mc64_fpu*19\")\n+\n+(define_insn_reservation \"e500mc64_ddiv\" 35\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce500mc64\"))\n+  \"e500mc64_decode,e500mc64_issue+e500mc64_fpu,e500mc64_fpu*34\")"}, {"sha": "d66f8a5842121681d6c38fe6ebbefe4a0faf1fc5", "filename": "gcc/config/powerpcspe/e5500.md", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fe5500.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,190 @@\n+;; Pipeline description for Freescale PowerPC e5500 core.\n+;;   Copyright (C) 2012-2017 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; e5500 64-bit SFX(2), CFX, LSU, FPU, BU\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+\n+(define_automaton \"e5500_most,e5500_long\")\n+(define_cpu_unit \"e5500_decode_0,e5500_decode_1\" \"e5500_most\")\n+\n+;; SFX.\n+(define_cpu_unit \"e5500_sfx_0,e5500_sfx_1\" \"e5500_most\")\n+\n+;; CFX.\n+(define_cpu_unit \"e5500_cfx_stage0,e5500_cfx_stage1\" \"e5500_most\")\n+\n+;; Non-pipelined division.\n+(define_cpu_unit \"e5500_cfx_div\" \"e5500_long\")\n+\n+;; LSU.\n+(define_cpu_unit \"e5500_lsu\" \"e5500_most\")\n+\n+;; FPU.\n+(define_cpu_unit \"e5500_fpu\" \"e5500_long\")\n+\n+;; BU.\n+(define_cpu_unit \"e5500_bu\" \"e5500_most\")\n+\n+;; The following units are used to make the automata deterministic.\n+(define_cpu_unit \"present_e5500_decode_0\" \"e5500_most\")\n+(define_cpu_unit \"present_e5500_sfx_0\" \"e5500_most\")\n+(presence_set \"present_e5500_decode_0\" \"e5500_decode_0\")\n+(presence_set \"present_e5500_sfx_0\" \"e5500_sfx_0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"e5500_decode\"\n+    \"e5500_decode_0|e5500_decode_1+present_e5500_decode_0\")\n+(define_reservation \"e5500_sfx\"\n+   \"e5500_sfx_0|e5500_sfx_1+present_e5500_sfx_0\")\n+\n+;; SFX.\n+(define_insn_reservation \"e5500_sfx\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,cntlz\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n+\t\t (eq_attr \"dot\" \"no\"))\n+\t    (and (eq_attr \"type\" \"shift\")\n+\t\t (eq_attr \"var_shift\" \"no\")))\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx\")\n+\n+(define_insn_reservation \"e5500_sfx2\" 2\n+  (and (ior (eq_attr \"type\" \"cmp,trap\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n+\t\t (eq_attr \"dot\"  \"yes\"))\n+\t    (and (eq_attr \"type\" \"shift\")\n+\t\t (eq_attr \"dot\"  \"yes\")\n+\t\t (eq_attr \"var_shift\" \"no\")))\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx\")\n+\n+(define_insn_reservation \"e5500_delayed\" 2\n+  (and (eq_attr \"type\" \"shift\")\n+       (eq_attr \"var_shift\" \"yes\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx*2\")\n+\n+(define_insn_reservation \"e5500_two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_decode+e5500_sfx,e5500_sfx\")\n+\n+(define_insn_reservation \"e5500_three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,(e5500_decode+e5500_sfx)*2,e5500_sfx\")\n+\n+;; SFX - Mfcr.\n+(define_insn_reservation \"e5500_mfcr\" 4\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx_0*4\")\n+\n+;; SFX - Mtcrf.\n+(define_insn_reservation \"e5500_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx_0\")\n+\n+;; SFX - Mtjmpr.\n+(define_insn_reservation \"e5500_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx\")\n+\n+;; CFX - Multiply.\n+(define_insn_reservation \"e5500_multiply\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_cfx_stage0,e5500_cfx_stage1\")\n+\n+(define_insn_reservation \"e5500_multiply_i\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (ior (eq_attr \"dot\" \"yes\")\n+\t    (eq_attr \"size\" \"8,16\"))\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_cfx_stage0,\\\n+   e5500_cfx_stage0+e5500_cfx_stage1,e5500_cfx_stage1\")\n+\n+;; CFX - Divide.\n+(define_insn_reservation \"e5500_divide\" 16\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_cfx_stage0+e5500_cfx_div,\\\n+   e5500_cfx_div*15\")\n+\n+(define_insn_reservation \"e5500_divide_d\" 26\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_cfx_stage0+e5500_cfx_div,\\\n+   e5500_cfx_div*25\")\n+\n+;; LSU - Loads.\n+(define_insn_reservation \"e5500_load\" 3\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_lsu\")\n+\n+(define_insn_reservation \"e5500_fpload\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_lsu\")\n+\n+;; LSU - Stores.\n+(define_insn_reservation \"e5500_store\" 3\n+  (and (eq_attr \"type\" \"store,store_c\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_lsu\")\n+\n+(define_insn_reservation \"e5500_fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_lsu\")\n+\n+;; FP.\n+(define_insn_reservation \"e5500_float\" 7\n+  (and (eq_attr \"type\" \"fpsimple,fp,fpcompare,dmul\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_fpu\")\n+\n+(define_insn_reservation \"e5500_sdiv\" 20\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_fpu*20\")\n+\n+(define_insn_reservation \"e5500_ddiv\" 35\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_fpu*35\")\n+\n+;; BU.\n+(define_insn_reservation \"e5500_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_bu\")\n+\n+;; BU - CR logical.\n+(define_insn_reservation \"e5500_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_bu\")"}, {"sha": "779aa4f8c45a53f63dfd415f115366a2a5535cd8", "filename": "gcc/config/powerpcspe/e6500.md", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe6500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fe6500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fe6500.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,228 @@\n+;; Pipeline description for Freescale PowerPC e6500 core.\n+;;   Copyright (C) 2012-2017 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; e6500 64-bit SFX(2), CFX, LSU, FPU, BU, VSFX, VCFX, VFPU, VPERM\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+\n+(define_automaton \"e6500_most,e6500_long,e6500_vec\")\n+(define_cpu_unit \"e6500_decode_0,e6500_decode_1\" \"e6500_most\")\n+\n+;; SFX.\n+(define_cpu_unit \"e6500_sfx_0,e6500_sfx_1\" \"e6500_most\")\n+\n+;; CFX.\n+(define_cpu_unit \"e6500_cfx_stage0,e6500_cfx_stage1\" \"e6500_most\")\n+\n+;; Non-pipelined division.\n+(define_cpu_unit \"e6500_cfx_div\" \"e6500_long\")\n+\n+;; LSU.\n+(define_cpu_unit \"e6500_lsu\" \"e6500_most\")\n+\n+;; FPU.\n+(define_cpu_unit \"e6500_fpu\" \"e6500_long\")\n+\n+;; BU.\n+(define_cpu_unit \"e6500_bu\" \"e6500_most\")\n+\n+;; Altivec unit\n+(define_cpu_unit \"e6500_vec,e6500_vecperm\" \"e6500_vec\")\n+\n+;; The following units are used to make the automata deterministic.\n+(define_cpu_unit \"present_e6500_decode_0\" \"e6500_most\")\n+(define_cpu_unit \"present_e6500_sfx_0\" \"e6500_most\")\n+(presence_set \"present_e6500_decode_0\" \"e6500_decode_0\")\n+(presence_set \"present_e6500_sfx_0\" \"e6500_sfx_0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"e6500_decode\"\n+    \"e6500_decode_0|e6500_decode_1+present_e6500_decode_0\")\n+(define_reservation \"e6500_sfx\"\n+   \"e6500_sfx_0|e6500_sfx_1+present_e6500_sfx_0\")\n+\n+;; SFX.\n+(define_insn_reservation \"e6500_sfx\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,cntlz\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n+\t\t (eq_attr \"dot\"  \"no\"))\n+\t    (and (eq_attr \"type\" \"shift\")\n+\t\t (eq_attr \"dot\"  \"no\")\n+\t\t (eq_attr \"var_shift\" \"no\")))\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx\")\n+\n+(define_insn_reservation \"e6500_sfx2\" 2\n+  (and (ior (eq_attr \"type\" \"cmp,trap\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n+\t\t (eq_attr \"dot\"  \"yes\"))\n+\t    (and (eq_attr \"type\" \"shift\")\n+\t\t (eq_attr \"dot\"  \"yes\")\n+\t\t (eq_attr \"var_shift\" \"no\")))\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx\")\n+\n+(define_insn_reservation \"e6500_delayed\" 2\n+  (and (eq_attr \"type\" \"shift\")\n+       (eq_attr \"var_shift\" \"yes\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx*2\")\n+\n+(define_insn_reservation \"e6500_two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_decode+e6500_sfx,e6500_sfx\")\n+\n+(define_insn_reservation \"e6500_three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,(e6500_decode+e6500_sfx)*2,e6500_sfx\")\n+\n+;; SFX - Mfcr.\n+(define_insn_reservation \"e6500_mfcr\" 4\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx_0*4\")\n+\n+;; SFX - Mtcrf.\n+(define_insn_reservation \"e6500_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx_0\")\n+\n+;; SFX - Mtjmpr.\n+(define_insn_reservation \"e6500_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx\")\n+\n+;; CFX - Multiply.\n+(define_insn_reservation \"e6500_multiply\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_cfx_stage0,e6500_cfx_stage1\")\n+\n+(define_insn_reservation \"e6500_multiply_i\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (ior (eq_attr \"dot\" \"yes\")\n+\t    (eq_attr \"size\" \"8,16\"))\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_cfx_stage0,\\\n+   e6500_cfx_stage0+e6500_cfx_stage1,e6500_cfx_stage1\")\n+\n+;; CFX - Divide.\n+(define_insn_reservation \"e6500_divide\" 16\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_cfx_stage0+e6500_cfx_div,\\\n+   e6500_cfx_div*15\")\n+\n+(define_insn_reservation \"e6500_divide_d\" 26\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_cfx_stage0+e6500_cfx_div,\\\n+   e6500_cfx_div*25\")\n+\n+;; LSU - Loads.\n+(define_insn_reservation \"e6500_load\" 3\n+  (and (eq_attr \"type\" \"load,load_l,sync\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+(define_insn_reservation \"e6500_fpload\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+(define_insn_reservation \"e6500_vecload\" 4\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+;; LSU - Stores.\n+(define_insn_reservation \"e6500_store\" 3\n+  (and (eq_attr \"type\" \"store,store_c\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+(define_insn_reservation \"e6500_fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+(define_insn_reservation \"e6500_vecstore\" 4\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+;; FP.\n+(define_insn_reservation \"e6500_float\" 7\n+  (and (eq_attr \"type\" \"fpsimple,fp,fpcompare,dmul\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_fpu\")\n+\n+(define_insn_reservation \"e6500_sdiv\" 20\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_fpu*20\")\n+\n+(define_insn_reservation \"e6500_ddiv\" 35\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_fpu*35\")\n+\n+;; BU.\n+(define_insn_reservation \"e6500_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_bu\")\n+\n+;; BU - CR logical.\n+(define_insn_reservation \"e6500_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_bu\")\n+\n+;; VSFX.\n+(define_insn_reservation \"e6500_vecsimple\" 1\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove,veccmp,veccmpfx\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_vec\")\n+\n+;; VCFX.\n+(define_insn_reservation \"e6500_veccomplex\" 4\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_vec\")\n+\n+;; VFPU.\n+(define_insn_reservation \"e6500_vecfloat\" 6\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_vec\")\n+\n+;; VPERM.\n+(define_insn_reservation \"e6500_vecperm\" 2\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_vecperm\")"}, {"sha": "ae1a73c03d9c12853c308a8f4335b41bc55a5322", "filename": "gcc/config/powerpcspe/eabi.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Feabi.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,41 @@\n+/* Core target definitions for GNU compiler\n+   for IBM RS/6000 PowerPC targeted to embedded ELF systems.\n+   Copyright (C) 1995-2017 Free Software Foundation, Inc.\n+   Contributed by Cygnus Support.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Add -meabi to target flags.  */\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT MASK_EABI\n+\n+/* Invoke an initializer function to set up the GOT.  */\n+#define NAME__MAIN \"__eabi\"\n+#define INVOKE__main\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()          \\\n+  do                                      \\\n+    {                                     \\\n+      builtin_define_std (\"PPC\");         \\\n+      builtin_define (\"__embedded__\");    \\\n+      builtin_assert (\"system=embedded\"); \\\n+      builtin_assert (\"cpu=powerpc\");     \\\n+      builtin_assert (\"machine=powerpc\"); \\\n+      TARGET_OS_SYSV_CPP_BUILTINS ();     \\\n+    }                                     \\\n+  while (0)"}, {"sha": "a8fc9f0a8252f947d5e7a5485197d36b0c0e7288", "filename": "gcc/config/powerpcspe/eabialtivec.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Feabialtivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Feabialtivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Feabialtivec.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,27 @@\n+/* Core target definitions for GNU compiler\n+   for PowerPC targeted systems with AltiVec support.\n+   Copyright (C) 2001-2017 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez (aldyh@redhat.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Add -meabi and -maltivec to target flags.  */\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_EABI | MASK_ALTIVEC)\n+\n+#undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n+#define SUBSUBTARGET_OVERRIDE_OPTIONS\trs6000_altivec_abi = 1"}, {"sha": "fda50ba14088347775629bb7fc8a9918b2dc7180", "filename": "gcc/config/powerpcspe/eabisim.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Feabisim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Feabisim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Feabisim.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,51 @@\n+/* Support for GCC on simulated PowerPC systems targeted to embedded ELF\n+   systems.\n+   Copyright (C) 1995-2017 Free Software Foundation, Inc.\n+   Contributed by Cygnus Support.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef  TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()           \\\n+  do                                       \\\n+    {                                      \\\n+      builtin_define_std (\"PPC\");          \\\n+      builtin_define (\"__embedded__\");     \\\n+      builtin_define (\"__simulator__\");    \\\n+      builtin_assert (\"system=embedded\");  \\\n+      builtin_assert (\"system=simulator\"); \\\n+      builtin_assert (\"cpu=powerpc\");      \\\n+      builtin_assert (\"machine=powerpc\");  \\\n+      TARGET_OS_SYSV_CPP_BUILTINS ();      \\\n+    }                                      \\\n+  while (0)\n+\n+/* Make the simulator the default */\n+#undef\tLIB_DEFAULT_SPEC\n+#define LIB_DEFAULT_SPEC \"%(lib_sim)\"\n+\n+#undef\tSTARTFILE_DEFAULT_SPEC\n+#define STARTFILE_DEFAULT_SPEC \"%(startfile_sim)\"\n+\n+#undef\tENDFILE_DEFAULT_SPEC\n+#define ENDFILE_DEFAULT_SPEC \"%(endfile_sim)\"\n+\n+#undef\tLINK_START_DEFAULT_SPEC\n+#define LINK_START_DEFAULT_SPEC \"%(link_start_sim)\"\n+\n+#undef\tLINK_OS_DEFAULT_SPEC\n+#define LINK_OS_DEFAULT_SPEC \"%(link_os_sim)\""}, {"sha": "db8030a791b841461a867923808d7cadba394e15", "filename": "gcc/config/powerpcspe/eabispe.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Feabispe.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,26 @@\n+/* Core target definitions for GNU compiler\n+   for PowerPC embedded targeted systems with SPE support.\n+   Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez (aldyh@redhat.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_STRICT_ALIGN | MASK_EABI)\n+\n+#undef  ASM_DEFAULT_SPEC\n+#define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "5201dd791b5d575e00f1633749995e2d77135630", "filename": "gcc/config/powerpcspe/freebsd.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ffreebsd.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,79 @@\n+/* Definitions for PowerPC running FreeBSD using the ELF format\n+   Copyright (C) 2001-2017 Free Software Foundation, Inc.\n+   Contributed by David E. O'Brien <obrien@FreeBSD.org> and BSDi.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Override the defaults, which exist to force the proper definition.  */\n+\n+#undef\tCPP_OS_DEFAULT_SPEC\n+#define CPP_OS_DEFAULT_SPEC \"%(cpp_os_freebsd)\"\n+\n+#undef\tSTARTFILE_DEFAULT_SPEC\n+#define STARTFILE_DEFAULT_SPEC \"%(startfile_freebsd)\"\n+\n+#undef\tENDFILE_DEFAULT_SPEC\n+#define ENDFILE_DEFAULT_SPEC \"%(endfile_freebsd)\"\n+\n+#undef\tLIB_DEFAULT_SPEC\n+#define LIB_DEFAULT_SPEC \"%(lib_freebsd)\"\n+\n+#undef\tLINK_START_DEFAULT_SPEC\n+#define LINK_START_DEFAULT_SPEC \"%(link_start_freebsd)\"\n+\n+#undef\tLINK_OS_DEFAULT_SPEC\n+#define\tLINK_OS_DEFAULT_SPEC \"%(link_os_freebsd)\"\n+\n+/* XXX: This is wrong for many platforms in sysv4.h.\n+   We should work on getting that definition fixed.  */\n+#undef  LINK_SHLIB_SPEC\n+#define LINK_SHLIB_SPEC \"%{shared:-shared} %{!shared: %{static:-static}}\"\n+\n+\n+/************************[  Target stuff  ]***********************************/\n+\n+/* Define the actual types of some ANSI-mandated types.  \n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n+   c-common.c, and config/<arch>/<arch>.h.  */\n+\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+/* rs6000.h gets this wrong for FreeBSD.  We use the GCC defaults instead.  */\n+#undef WCHAR_TYPE\n+\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+/* Override rs6000.h definition.  */\n+#undef  ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+/* Override rs6000.h definition.  */\n+#undef  ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* We don't need to generate entries in .fixup, except when\n+   -mrelocatable or -mrelocatable-lib is given.  */\n+#undef RELOCATABLE_NEEDS_FIXUP\n+#define RELOCATABLE_NEEDS_FIXUP \\\n+  (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n+\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+\n+#define POWERPC_FREEBSD"}, {"sha": "d75ac2b9a5d65be751b19fbf069e33b8cd2c3ff3", "filename": "gcc/config/powerpcspe/freebsd64.h", "status": "added", "additions": 433, "deletions": 0, "changes": 433, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ffreebsd64.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,433 @@\n+/* Definitions for 64-bit PowerPC running FreeBSD using the ELF format\n+   Copyright (C) 2012-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Override the defaults, which exist to force the proper definition.  */\n+\n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __powerpc64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n+#undef\tTARGET_AIX\n+#define\tTARGET_AIX TARGET_64BIT\n+\n+#ifdef HAVE_LD_NO_DOT_SYMS\n+/* New ABI uses a local sym for the function entry point.  */\n+extern int dot_symbols;\n+#undef DOT_SYMBOLS\n+#define DOT_SYMBOLS dot_symbols\n+#endif\n+\n+#define TARGET_USES_LINUX64_OPT 1\n+#ifdef HAVE_LD_LARGE_TOC\n+#undef TARGET_CMODEL\n+#define TARGET_CMODEL rs6000_current_cmodel\n+#define SET_CMODEL(opt) rs6000_current_cmodel = opt\n+#else\n+#define SET_CMODEL(opt) do {} while (0)\n+#endif\n+\n+/* Until now the 970 is the only Processor where FreeBSD 64-bit runs on.  */\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER4\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER4\n+\n+/* We don't need to generate entries in .fixup, except when\n+   -mrelocatable or -mrelocatable-lib is given.  */\n+#undef RELOCATABLE_NEEDS_FIXUP\n+#define RELOCATABLE_NEEDS_FIXUP \\\n+  (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n+\n+#undef  RS6000_ABI_NAME\n+#define RS6000_ABI_NAME \"freebsd\"\n+\n+#define INVALID_64BIT \"-m%s not supported in this configuration\"\n+#define INVALID_32BIT INVALID_64BIT\n+\n+/* Use LINUX64 instead of FREEBSD64 for compat with e.g. sysv4le.h */\n+#ifdef LINUX64_DEFAULT_ABI_ELFv2\n+#define ELFv2_ABI_CHECK (rs6000_elf_abi != 1)\n+#else\n+#define ELFv2_ABI_CHECK (rs6000_elf_abi == 2)\n+#endif\n+\n+#undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n+#define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!global_options_set.x_rs6000_alignment_flags)\t\t\\\n+\trs6000_alignment_flags = MASK_ALIGN_NATURAL;\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_current_abi = ABI_AIX;\t\t\t\\\n+\t      error (INVALID_64BIT, \"call\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\\\n+\t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (ELFv2_ABI_CHECK)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_current_abi = ABI_ELFv2;\t\t\t\\\n+\t      if (dot_symbols)\t\t\t\t\t\\\n+\t\terror (\"-mcall-aixdesc incompatible with -mabi=elfv2\"); \\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_EABI)\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_EABI;\t\t\\\n+\t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_prototype = 0;\t\t\t\t\\\n+\t      error (INVALID_64BIT, \"prototype\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n+\t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t   if ((rs6000_isa_flags_explicit\t\t\t\\\n+\t\t& OPTION_MASK_MINIMAL_TOC) != 0)\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      if (global_options_set.x_rs6000_current_cmodel\t\\\n+\t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n+\t\terror (\"-mcmodel incompatible with other toc options\"); \\\n+\t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      if (!global_options_set.x_rs6000_current_cmodel)\t\\\n+\t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n+\t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n+\t\t{\t\t\t\t\t\t\\\n+\t\t  TARGET_NO_FP_IN_TOC = 0;\t\t\t\\\n+\t\t  TARGET_NO_SUM_IN_TOC = 0;\t\t\t\\\n+\t\t}\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef\tASM_DEFAULT_SPEC\n+#undef\tASM_SPEC\n+#undef\tLINK_OS_FREEBSD_SPEC\n+\n+#define\tASM_DEFAULT_SPEC \"-mppc%{!m32:64}\"\n+#define\tASM_SPEC\t \"%{m32:%(asm_spec32)}%{!m32:%(asm_spec64)} %(asm_spec_common)\"\n+#define\tLINK_OS_FREEBSD_SPEC \"%{m32:%(link_os_freebsd_spec32)}%{!m32:%(link_os_freebsd_spec64)}\"\n+\n+#define ASM_SPEC32 \"-a32 \\\n+%{mrelocatable} %{mrelocatable-lib} %{\" FPIE_OR_FPIC_SPEC \":-K PIC} \\\n+%{memb} %{!memb: %{msdata=eabi: -memb}} \\\n+%{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n+    %{mcall-freebsd: -mbig} \\\n+    %{mcall-i960-old: -mlittle} \\\n+    %{mcall-linux: -mbig} \\\n+    %{mcall-gnu: -mbig} \\\n+    %{mcall-netbsd: -mbig} \\\n+}}}}\"\n+\n+#define ASM_SPEC64 \"-a64\"\n+\n+#define ASM_SPEC_COMMON \"%(asm_cpu) \\\n+%{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}} \\\n+%{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian}\"\n+\n+#undef\tSUBSUBTARGET_EXTRA_SPECS\n+#define SUBSUBTARGET_EXTRA_SPECS\t\t\t\t\t\\\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\t\\\n+  { \"link_os_freebsd_spec32\",\tLINK_OS_FREEBSD_SPEC32 },     \t\t\\\n+  { \"link_os_freebsd_spec64\",\tLINK_OS_FREEBSD_SPEC64 },\n+\n+#define LINK_OS_FREEBSD_SPEC_DEF \"\\\n+  %{p:%nconsider using `-pg' instead of `-p' with gprof(1)} \\\n+  %{v:-V} \\\n+  %{assert*} %{R*} %{rpath*} %{defsym*} \\\n+  %{shared:-Bshareable %{h*} %{soname*}} \\\n+  %{!shared: \\\n+    %{!static: \\\n+      %{rdynamic: -export-dynamic} \\\n+      %{!dynamic-linker:-dynamic-linker \" FBSD_DYNAMIC_LINKER \"}} \\\n+    %{static:-Bstatic}} \\\n+  %{symbolic:-Bsymbolic}\"\n+\n+#define LINK_OS_FREEBSD_SPEC32 \"-melf32ppc_fbsd \" LINK_OS_FREEBSD_SPEC_DEF\n+  \n+#define LINK_OS_FREEBSD_SPEC64 \"-melf64ppc_fbsd \" LINK_OS_FREEBSD_SPEC_DEF\n+\n+#undef\tMULTILIB_DEFAULTS\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+\n+/* PowerPC-64 FreeBSD increases natural record alignment to doubleword if\n+   the first field is an FP double, only if in power alignment mode.  */\n+#undef  ROUND_TYPE_ALIGN\n+#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\t\\\n+  ((TARGET_64BIT\t\t\t\t\t\t\t\\\n+    && (TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\t\\\n+    && TARGET_ALIGN_NATURAL == 0)\t\t\t\t\t\\\n+   ? rs6000_special_round_type_align (STRUCT, COMPUTED, SPECIFIED)\t\\\n+   : MAX ((COMPUTED), (SPECIFIED)))\n+\n+/* Use the default for compiling target libs.  */\n+#ifdef IN_TARGET_LIBS\n+#undef TARGET_ALIGN_NATURAL\n+#define TARGET_ALIGN_NATURAL 1\n+#endif\n+\n+/* Indicate that jump tables go in the text section.  */\n+#undef  JUMP_TABLES_IN_TEXT_SECTION\n+#define JUMP_TABLES_IN_TEXT_SECTION TARGET_64BIT\n+\n+/* The linux ppc64 ABI isn't explicit on whether aggregates smaller\n+   than a doubleword should be padded upward or downward.  You could\n+   reasonably assume that they follow the normal rules for structure\n+   layout treating the parameter area as any other block of memory,\n+   then map the reg param area to registers.  i.e. pad upward.\n+   Setting both of the following defines results in this behavior.\n+   Setting just the first one will result in aggregates that fit in a\n+   doubleword being padded downward, and others being padded upward.\n+   Not a bad idea as this results in struct { int x; } being passed\n+   the same way as an int.  */\n+#define AGGREGATE_PADDING_FIXED TARGET_64BIT\n+#define AGGREGATES_PAD_UPWARD_ALWAYS 0\n+\n+/* Specify padding for the last element of a block move between\n+   registers and memory.  FIRST is nonzero if this is the only\n+   element.  */\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))\n+\n+/* FreeBSD doesn't support saving and restoring 64-bit regs with a 32-bit\n+   kernel. This is supported when running on a 64-bit kernel with\n+   COMPAT_FREEBSD32, but tell GCC it isn't so that our 32-bit binaries\n+   are compatible. */\n+#define OS_MISSING_POWERPC64 !TARGET_64BIT\n+\n+#undef  FBSD_TARGET_CPU_CPP_BUILTINS\n+#define FBSD_TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      builtin_define (\"__PPC__\");\t\t\t\\\n+      builtin_define (\"__ppc__\");\t\t\t\\\n+      builtin_define (\"__powerpc__\");\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define (\"__arch64__\");\t\t\\\n+\t  builtin_define (\"__LP64__\");\t\t\t\\\n+\t  builtin_define (\"__PPC64__\");\t\t\t\\\n+\t  builtin_define (\"__powerpc64__\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc64\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc64\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"PPC\");\t\t\t\\\n+\t  builtin_define_std (\"powerpc\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc\");\t\t\\\n+\t  TARGET_OS_SYSV_CPP_BUILTINS ();\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef\tCPP_OS_DEFAULT_SPEC\n+#define CPP_OS_DEFAULT_SPEC \"%(cpp_os_freebsd)\"\n+\n+#undef CPP_OS_FREEBSD_SPEC\n+#define CPP_OS_FREEBSD_SPEC \"\"\n+\n+#undef\tSTARTFILE_DEFAULT_SPEC\n+#define STARTFILE_DEFAULT_SPEC \"%(startfile_freebsd)\"\n+\n+#undef\tENDFILE_DEFAULT_SPEC\n+#define ENDFILE_DEFAULT_SPEC \"%(endfile_freebsd)\"\n+\n+#undef\tLIB_DEFAULT_SPEC\n+#define LIB_DEFAULT_SPEC \"%(lib_freebsd)\"\n+\n+#undef\tLINK_START_DEFAULT_SPEC\n+#define LINK_START_DEFAULT_SPEC \"%(link_start_freebsd)\"\n+\n+#undef\tLINK_OS_DEFAULT_SPEC\n+#define\tLINK_OS_DEFAULT_SPEC \"%(link_os_freebsd)\"\n+\n+/* XXX: This is wrong for many platforms in sysv4.h.\n+   We should work on getting that definition fixed.  */\n+#undef  LINK_SHLIB_SPEC\n+#define LINK_SHLIB_SPEC \"%{shared:-shared} %{!shared: %{static:-static}}\"\n+\n+\n+/************************[  Target stuff  ]***********************************/\n+\n+/* Define the actual types of some ANSI-mandated types.  \n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n+   c-common.c, and config/<arch>/<arch>.h.  */\n+\n+\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")\n+\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE\t(TARGET_64BIT ? \"long int\" : \"int\")\n+\n+/* rs6000.h gets this wrong for FreeBSD.  We use the GCC defaults instead.  */\n+#undef WCHAR_TYPE\n+\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+\n+/* Override rs6000.h definition.  */\n+#undef  ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+/* Override rs6000.h definition.  */\n+#undef  ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* Function profiling bits */\n+#undef  RS6000_MCOUNT\n+#define RS6000_MCOUNT \"_mcount\"\n+\n+#define PROFILE_HOOK(LABEL) \\\n+  do { if (TARGET_64BIT) output_profile_hook (LABEL); } while (0)\n+\n+/* _init and _fini functions are built from bits spread across many\n+   object files, each potentially with a different TOC pointer.  For\n+   that reason, place a nop after the call so that the linker can\n+   restore the TOC pointer if a TOC adjusting call stub is needed.  */\n+#ifdef __powerpc64__\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+  asm (SECTION_OP \"\\n\"\t\t\t\t\t\\\n+\"\tbl \" #FUNC \"\\n\"\t\t\t\t\t\\\n+\"\tnop\\n\"\t\t\t\t\t\t\\\n+\"\t.previous\");\n+#endif\n+\n+/* FP save and restore routines.  */\n+#undef  SAVE_FP_PREFIX\n+#define SAVE_FP_PREFIX (TARGET_64BIT ? \"._savef\" : \"_savefpr_\")\n+#undef  SAVE_FP_SUFFIX\n+#define SAVE_FP_SUFFIX \"\"\n+#undef  RESTORE_FP_PREFIX\n+#define RESTORE_FP_PREFIX (TARGET_64BIT ? \"._restf\" : \"_restfpr_\")\n+#undef  RESTORE_FP_SUFFIX\n+#define RESTORE_FP_SUFFIX \"\"\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.  */\n+#undef\tASM_PREFERRED_EH_DATA_FORMAT\n+#define\tASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n+  (TARGET_64BIT || flag_pic\t\t\t\t\t\t\\\n+   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel\t\t\\\n+      | (TARGET_64BIT ? DW_EH_PE_udata8 : DW_EH_PE_sdata4))\t\t\\\n+   : DW_EH_PE_absptr)\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* The default value isn't sufficient in 64-bit mode.  */\n+#define STACK_CHECK_PROTECT (TARGET_64BIT ? 16 * 1024 : 12 * 1024)\n+\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+\n+/* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n+#undef  ADJUST_FIELD_ALIGN\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n+  (rs6000_special_adjust_field_align_p ((TYPE), (COMPUTED))\t\t\\\n+   ? 128                                                                \\\n+   : (TARGET_64BIT                                                      \\\n+      && TARGET_ALIGN_NATURAL == 0                                      \\\n+      && TYPE_MODE (strip_array_types (TYPE)) == DFmode)   \t\t\\\n+   ? MIN ((COMPUTED), 32)                                               \\\n+   : (COMPUTED))\n+\n+#undef  TOC_SECTION_ASM_OP\n+#define TOC_SECTION_ASM_OP \\\n+  (TARGET_64BIT                                         \\\n+   ? \"\\t.section\\t\\\".toc\\\",\\\"aw\\\"\"                      \\\n+   : \"\\t.section\\t\\\".got\\\",\\\"aw\\\"\")\n+\n+#undef  MINIMAL_TOC_SECTION_ASM_OP\n+#define MINIMAL_TOC_SECTION_ASM_OP \\\n+  (TARGET_64BIT                                         \\\n+   ? \"\\t.section\\t\\\".toc1\\\",\\\"aw\\\"\"                     \\\n+   : (flag_pic\t\t\t\t\t\t\\\n+      ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\"                  \\\n+      : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\"))\n+\n+/* This is how to declare the size of a function.  */\n+#undef  ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)                    \\\n+  do                                                                    \\\n+    {                                                                   \\\n+      if (!flag_inhibit_size_directive)                                 \\\n+        {                                                               \\\n+          fputs (\"\\t.size\\t\", (FILE));                                  \\\n+          if (TARGET_64BIT && DOT_SYMBOLS)                              \\\n+            putc ('.', (FILE));                                         \\\n+          assemble_name ((FILE), (FNAME));                              \\\n+          fputs (\",.-\", (FILE));                                        \\\n+          rs6000_output_function_entry (FILE, FNAME);                   \\\n+          putc ('\\n', (FILE));                                          \\\n+        }                                                               \\\n+    }                                                                   \\\n+  while (0)\n+\n+#undef  ASM_OUTPUT_SPECIAL_POOL_ENTRY_P\n+#define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)                        \\\n+  (TARGET_TOC                                                           \\\n+   && (GET_CODE (X) == SYMBOL_REF                                       \\\n+       || (GET_CODE (X) == CONST && GET_CODE (XEXP (X, 0)) == PLUS      \\\n+           && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)           \\\n+       || GET_CODE (X) == LABEL_REF                                     \\\n+       || (GET_CODE (X) == CONST_INT                                    \\\n+           && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))      \\\n+       || (GET_CODE (X) == CONST_DOUBLE                                 \\\n+           && ((TARGET_64BIT                                            \\\n+                && (TARGET_MINIMAL_TOC                                  \\\n+                    || (SCALAR_FLOAT_MODE_P (GET_MODE (X))              \\\n+                        && ! TARGET_NO_FP_IN_TOC)))                     \\\n+               || (!TARGET_64BIT                                        \\\n+                   && !TARGET_NO_FP_IN_TOC                              \\\n+                   && SCALAR_FLOAT_MODE_P (GET_MODE (X))                \\\n+                   && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n+\n+/* Use --as-needed -lgcc_s for eh support.  */\n+#ifdef HAVE_LD_AS_NEEDED\n+#define USE_LD_AS_NEEDED 1\n+#endif\n+\n+#define POWERPC_FREEBSD"}, {"sha": "f04c00127c19ec8e2e17c8d7ef1e4526cf05b08f", "filename": "gcc/config/powerpcspe/genopt.sh", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fgenopt.sh?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,64 @@\n+#!/bin/sh\n+# Generate powerpcspe-tables.opt from the list of CPUs in powerpcspe-cpus.def.\n+# Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cat <<EOF\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from powerpcspe-cpus.def.\n+\n+; Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(rs6000_cpu_opt_value) Type(int)\n+Known CPUs (for use with the -mcpu= and -mtune= options):\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(native) Value(RS6000_CPU_OPTION_NATIVE) DriverOnly\n+\n+EOF\n+\n+awk -F'[(, \t]+' '\n+BEGIN {\n+    value = 0\n+}\n+\n+/^RS6000_CPU/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(rs6000_cpu_opt_value) String(\" name \") Value(\" value \")\"\n+    print \"\"\n+    value++\n+}' $1/powerpcspe-cpus.def"}, {"sha": "da90e2f645226043cabefe5c71813e272f154c9c", "filename": "gcc/config/powerpcspe/host-darwin.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhost-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhost-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fhost-darwin.c?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,153 @@\n+/* Darwin/powerpc host-specific hook definitions.\n+   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic.h\"\n+#include <sys/ucontext.h>\n+#include \"hosthooks.h\"\n+#include \"hosthooks-def.h\"\n+#include \"config/host-darwin.h\"\n+\n+static void segv_crash_handler (int);\n+static void segv_handler (int, siginfo_t *, void *);\n+static void darwin_rs6000_extra_signals (void);\n+\n+#ifndef HAVE_DECL_SIGALTSTACK\n+/* This doesn't have a prototype in signal.h in 10.2.x and earlier,\n+   fixed in later releases.  */\n+extern int sigaltstack(const struct sigaltstack *, struct sigaltstack *);\n+#endif\n+\n+/* The fields of the mcontext_t type have acquired underscores in later\n+   OS versions.  */\n+#ifdef HAS_MCONTEXT_T_UNDERSCORES\n+#define MC_FLD(x) __ ## x\n+#else\n+#define MC_FLD(x) x\n+#endif\n+\n+#undef HOST_HOOKS_EXTRA_SIGNALS\n+#define HOST_HOOKS_EXTRA_SIGNALS darwin_rs6000_extra_signals\n+\n+/* On Darwin/powerpc, hitting the stack limit turns into a SIGSEGV.\n+   This code detects the difference between hitting the stack limit and\n+   a true wild pointer dereference by looking at the instruction that\n+   faulted; only a few kinds of instruction are used to access below\n+   the previous bottom of the stack.  */\n+\n+static void\n+segv_crash_handler (int sig ATTRIBUTE_UNUSED)\n+{\n+  internal_error (\"Segmentation Fault (code)\");\n+}\n+\n+static void\n+segv_handler (int sig ATTRIBUTE_UNUSED,\n+\t      siginfo_t *sip ATTRIBUTE_UNUSED,\n+\t      void *scp)\n+{\n+  ucontext_t *uc = (ucontext_t *)scp;\n+  sigset_t sigset;\n+  unsigned faulting_insn;\n+\n+  /* The fault might have happened when trying to run some instruction, in\n+     which case the next line will segfault _again_.  Handle this case.  */\n+  signal (SIGSEGV, segv_crash_handler);\n+  sigemptyset (&sigset);\n+  sigaddset (&sigset, SIGSEGV);\n+  sigprocmask (SIG_UNBLOCK, &sigset, NULL);\n+\n+  faulting_insn = *(unsigned *)uc->uc_mcontext->MC_FLD(ss).MC_FLD(srr0);\n+\n+  /* Note that this only has to work for GCC, so we don't have to deal\n+     with all the possible cases (GCC has no AltiVec code, for\n+     instance).  It's complicated because Darwin allows stores to\n+     below the stack pointer, and the prologue code takes advantage of\n+     this.  */\n+\n+  if ((faulting_insn & 0xFFFF8000) == 0x94218000  /* stwu %r1, -xxx(%r1) */\n+      || (faulting_insn & 0xFC1F03FF) == 0x7C01016E /* stwux xxx, %r1, xxx */\n+      || (faulting_insn & 0xFC1F8000) == 0x90018000 /* stw xxx, -yyy(%r1) */\n+      || (faulting_insn & 0xFC1F8000) == 0xD8018000 /* stfd xxx, -yyy(%r1) */\n+      || (faulting_insn & 0xFC1F8000) == 0xBC018000 /* stmw xxx, -yyy(%r1) */)\n+    {\n+      char *shell_name;\n+      \n+      fnotice (stderr, \"Out of stack space.\\n\");\n+      shell_name = getenv (\"SHELL\");\n+      if (shell_name != NULL)\n+\tshell_name = strrchr (shell_name, '/');\n+      if (shell_name != NULL)\n+\t{\n+\t  static const char * shell_commands[][2] = {\n+\t    { \"sh\", \"ulimit -S -s unlimited\" },\n+\t    { \"bash\", \"ulimit -S -s unlimited\" },\n+\t    { \"tcsh\", \"limit stacksize unlimited\" },\n+\t    { \"csh\", \"limit stacksize unlimited\" },\n+\t    /* zsh doesn't have \"unlimited\", this will work under the\n+\t       default configuration.  */\n+\t    { \"zsh\", \"limit stacksize 32m\" }\n+\t  };\n+\t  size_t i;\n+\t  \n+\t  for (i = 0; i < ARRAY_SIZE (shell_commands); i++)\n+\t    if (strcmp (shell_commands[i][0], shell_name + 1) == 0)\n+\t      {\n+\t\tfnotice (stderr, \n+\t\t\t \"Try running '%s' in the shell to raise its limit.\\n\",\n+\t\t\t shell_commands[i][1]);\n+\t      }\n+\t}\n+      \n+      if (global_dc->abort_on_error)\n+\tfancy_abort (__FILE__, __LINE__, __FUNCTION__);\n+\n+      exit (FATAL_EXIT_CODE);\n+    }\n+\n+  fprintf (stderr, \"[address=%08lx pc=%08x]\\n\", \n+\t   uc->uc_mcontext->MC_FLD(es).MC_FLD(dar),\n+\t   uc->uc_mcontext->MC_FLD(ss).MC_FLD(srr0));\n+  internal_error (\"Segmentation Fault\");\n+  exit (FATAL_EXIT_CODE);\n+}\n+\n+static void\n+darwin_rs6000_extra_signals (void)\n+{\n+  struct sigaction sact;\n+  stack_t sigstk;\n+\n+  sigstk.ss_sp = (char*)xmalloc (SIGSTKSZ);\n+  sigstk.ss_size = SIGSTKSZ;\n+  sigstk.ss_flags = 0;\n+  if (sigaltstack (&sigstk, NULL) < 0)\n+    fatal_error (input_location, \"While setting up signal stack: %m\");\n+\n+  sigemptyset(&sact.sa_mask);\n+  sact.sa_flags = SA_ONSTACK | SA_SIGINFO;\n+  sact.sa_sigaction = segv_handler;\n+  if (sigaction (SIGSEGV, &sact, 0) < 0) \n+    fatal_error (input_location, \"While setting up signal handler: %m\");\n+}\n+\f\n+\n+const struct host_hooks host_hooks = HOST_HOOKS_INITIALIZER;"}, {"sha": "381fe1673ae5113c8c9f5565e1ef7f576fb15406", "filename": "gcc/config/powerpcspe/host-ppc64-darwin.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhost-ppc64-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhost-ppc64-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fhost-ppc64-darwin.c?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,30 @@\n+/* ppc64-darwin host-specific hook definitions.\n+   Copyright (C) 2006-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"hosthooks.h\"\n+#include \"hosthooks-def.h\"\n+#include \"config/host-darwin.h\"\n+\n+/* Darwin doesn't do anything special for ppc64 hosts; this file exists just\n+   to include config/host-darwin.h.  */\n+\n+const struct host_hooks host_hooks = HOST_HOOKS_INITIALIZER;"}, {"sha": "de769f7db3c765c5bed5e0d67a6681e9e32e99f8", "filename": "gcc/config/powerpcspe/htm.md", "status": "added", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhtm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhtm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fhtm.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,296 @@\n+;; Hardware Transactional Memory (HTM) patterns.\n+;; Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+;; Contributed by Peter Bergner <bergner@vnet.ibm.com>.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_constants\n+  [(TFHAR_SPR\t\t128)\n+   (TFIAR_SPR\t\t129)\n+   (TEXASR_SPR\t\t130)\n+   (TEXASRU_SPR\t\t131)\n+   (MAX_HTM_OPERANDS\t4)\n+  ])\n+\n+;;\n+;; UNSPEC usage\n+;;\n+\n+(define_c_enum \"unspec\"\n+  [UNSPEC_HTM_FENCE\n+  ])\n+\n+;;\n+;; UNSPEC_VOLATILE usage\n+;;\n+\n+(define_c_enum \"unspecv\"\n+  [UNSPECV_HTM_TABORT\n+   UNSPECV_HTM_TABORTXC\n+   UNSPECV_HTM_TABORTXCI\n+   UNSPECV_HTM_TBEGIN\n+   UNSPECV_HTM_TCHECK\n+   UNSPECV_HTM_TEND\n+   UNSPECV_HTM_TRECHKPT\n+   UNSPECV_HTM_TRECLAIM\n+   UNSPECV_HTM_TSR\n+   UNSPECV_HTM_TTEST\n+   UNSPECV_HTM_MFSPR\n+   UNSPECV_HTM_MTSPR\n+  ])\n+\n+(define_expand \"tabort\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand:SI 0 \"base_reg_operand\" \"b\")]\n+\t\t\t       UNSPECV_HTM_TABORT))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*tabort\"\n+  [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(match_operand:SI 0 \"base_reg_operand\" \"b\")]\n+\t\t\t    UNSPECV_HTM_TABORT))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"tabort. %0\"\n+  [(set_attr \"type\" \"htmsimple\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"tabort<wd>c\"\n+  [(parallel\n+     [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n+\t\t\t\t(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t\t(match_operand:GPR 2 \"gpc_reg_operand\" \"r\")]\n+\t\t\t       UNSPECV_HTM_TABORTXC))\n+      (set (match_dup 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[4] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[4]) = 1;\n+})\n+\n+(define_insn \"*tabort<wd>c\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n+\t\t\t     (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t     (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")]\n+\t\t\t    UNSPECV_HTM_TABORTXC))\n+   (set (match_operand:BLK 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"tabort<wd>c. %0,%1,%2\"\n+  [(set_attr \"type\" \"htmsimple\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"tabort<wd>ci\"\n+  [(parallel\n+     [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n+\t\t\t\t(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t\t(match_operand 2 \"s5bit_cint_operand\" \"n\")]\n+\t\t\t       UNSPECV_HTM_TABORTXCI))\n+      (set (match_dup 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[4] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[4]) = 1;\n+})\n+\n+(define_insn \"*tabort<wd>ci\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n+\t\t\t     (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t     (match_operand 2 \"s5bit_cint_operand\" \"n\")]\n+\t\t\t    UNSPECV_HTM_TABORTXCI))\n+   (set (match_operand:BLK 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"tabort<wd>ci. %0,%1,%2\"\n+  [(set_attr \"type\" \"htmsimple\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"tbegin\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t       UNSPECV_HTM_TBEGIN))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*tbegin\"\n+  [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t    UNSPECV_HTM_TBEGIN))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"tbegin. %0\"\n+  [(set_attr \"type\" \"htm\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"tcheck\"\n+  [(parallel\n+     [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+\t   (unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TCHECK))\n+      (set (match_dup 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[1] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[1]) = 1;\n+})\n+\n+(define_insn \"*tcheck\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+\t(unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TCHECK))\n+   (set (match_operand:BLK 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"tcheck %0\"\n+  [(set_attr \"type\" \"htm\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"tend\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t       UNSPECV_HTM_TEND))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*tend\"\n+  [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t    UNSPECV_HTM_TEND))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"tend. %0\"\n+  [(set_attr \"type\" \"htm\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"trechkpt\"\n+  [(parallel\n+     [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TRECHKPT))\n+      (set (match_dup 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[1] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[1]) = 1;\n+})\n+\n+(define_insn \"*trechkpt\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TRECHKPT))\n+   (set (match_operand:BLK 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"trechkpt.\"\n+  [(set_attr \"type\" \"htmsimple\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"treclaim\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand:SI 0 \"gpc_reg_operand\" \"r\")]\n+\t\t\t       UNSPECV_HTM_TRECLAIM))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*treclaim\"\n+  [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(match_operand:SI 0 \"gpc_reg_operand\" \"r\")]\n+\t\t\t    UNSPECV_HTM_TRECLAIM))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"treclaim. %0\"\n+  [(set_attr \"type\" \"htmsimple\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"tsr\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t       UNSPECV_HTM_TSR))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*tsr\"\n+  [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t    UNSPECV_HTM_TSR))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"tsr. %0\"\n+  [(set_attr \"type\" \"htmsimple\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"ttest\"\n+  [(parallel\n+     [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TTEST))\n+      (set (match_dup 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[1] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[1]) = 1;\n+})\n+\n+(define_insn \"*ttest\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TTEST))\n+   (set (match_operand:BLK 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))]\n+  \"TARGET_HTM\"\n+  \"tabortwci. 0,1,0\"\n+  [(set_attr \"type\" \"htmsimple\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"htm_mfspr_<mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec_volatile:GPR [(match_operand 1 \"u10bit_cint_operand\" \"n\")\n+\t\t\t      (match_operand:GPR 2 \"htm_spr_reg_operand\" \"\")]\n+\t\t\t     UNSPECV_HTM_MFSPR))]\n+  \"TARGET_HTM\"\n+  \"mfspr %0,%1\";\n+  [(set_attr \"type\" \"htm\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"htm_mtspr_<mode>\"\n+  [(set (match_operand:GPR 2 \"htm_spr_reg_operand\" \"\")\n+        (unspec_volatile:GPR [(match_operand:GPR 0 \"gpc_reg_operand\" \"r\")\n+\t\t\t      (match_operand 1 \"u10bit_cint_operand\" \"n\")]\n+\t\t\t     UNSPECV_HTM_MTSPR))]\n+  \"TARGET_HTM\"\n+  \"mtspr %1,%0\";\n+  [(set_attr \"type\" \"htm\")\n+   (set_attr \"length\" \"4\")])"}, {"sha": "55d5a661811f5019ffa33f3e2f81aee200581058", "filename": "gcc/config/powerpcspe/htmintrin.h", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhtmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhtmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fhtmintrin.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,131 @@\n+/* Hardware Transactional Memory (HTM) intrinsics.\n+   Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+   Contributed by Peter Bergner <bergner@vnet.ibm.com>.\n+\n+   This file is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3 of the License, or (at your option)\n+   any later version.\n+\n+   This file is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __HTM__\n+# error \"HTM instruction set not enabled\"\n+#endif /* __HTM__ */\n+\n+#ifndef _HTMINTRIN_H\n+#define _HTMINTRIN_H\n+\n+#include <stdint.h>\n+\n+typedef uint64_t texasr_t;\n+typedef uint32_t texasru_t;\n+typedef uint32_t texasrl_t;\n+typedef uintptr_t tfiar_t;\n+typedef uintptr_t tfhar_t;\n+\n+#define _HTM_STATE(CR0) ((CR0 >> 1) & 0x3)\n+#define _HTM_NONTRANSACTIONAL 0x0\n+#define _HTM_SUSPENDED        0x1\n+#define _HTM_TRANSACTIONAL    0x2\n+\n+/* The following macros use the IBM bit numbering for BITNUM\n+   as used in the ISA documentation.  */\n+\n+#define _TEXASR_EXTRACT_BITS(TEXASR,BITNUM,SIZE) \\\n+  (((TEXASR) >> (63-(BITNUM))) & ((1<<(SIZE))-1))\n+#define _TEXASRU_EXTRACT_BITS(TEXASR,BITNUM,SIZE) \\\n+  (((TEXASR) >> (31-(BITNUM))) & ((1<<(SIZE))-1))\n+\n+#define _TEXASR_FAILURE_CODE(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 7, 8)\n+#define _TEXASRU_FAILURE_CODE(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 7, 8)\n+\n+#define _TEXASR_FAILURE_PERSISTENT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 7, 1)\n+#define _TEXASRU_FAILURE_PERSISTENT(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 7, 1)\n+\n+#define _TEXASR_DISALLOWED(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 8, 1)\n+#define _TEXASRU_DISALLOWED(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 8, 1)\n+\n+#define _TEXASR_NESTING_OVERFLOW(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 9, 1)\n+#define _TEXASRU_NESTING_OVERFLOW(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 9, 1)\n+\n+#define _TEXASR_FOOTPRINT_OVERFLOW(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 10, 1)\n+#define _TEXASRU_FOOTPRINT_OVERFLOW(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 10, 1)\n+\n+#define _TEXASR_SELF_INDUCED_CONFLICT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 11, 1)\n+#define _TEXASRU_SELF_INDUCED_CONFLICT(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 11, 1)\n+\n+#define _TEXASR_NON_TRANSACTIONAL_CONFLICT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 12, 1)\n+#define _TEXASRU_NON_TRANSACTIONAL_CONFLICT(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 12, 1)\n+\n+#define _TEXASR_TRANSACTION_CONFLICT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 13, 1)\n+#define _TEXASRU_TRANSACTION_CONFLICT(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 13, 1)\n+\n+#define _TEXASR_TRANSLATION_INVALIDATION_CONFLICT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 14, 1)\n+#define _TEXASRU_TRANSLATION_INVALIDATION_CONFLICT(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 14, 1)\n+\n+#define _TEXASR_IMPLEMENTAION_SPECIFIC(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 15, 1)\n+#define _TEXASRU_IMPLEMENTAION_SPECIFIC(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 15, 1)\n+\n+#define _TEXASR_INSTRUCTION_FETCH_CONFLICT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 16, 1)\n+#define _TEXASRU_INSTRUCTION_FETCH_CONFLICT(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 16, 1)\n+\n+#define _TEXASR_ABORT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 31, 1)\n+#define _TEXASRU_ABORT(TEXASRU) \\\n+  _TEXASRU_EXTRACT_BITS(TEXASRU, 31, 1)\n+\n+\n+#define _TEXASR_SUSPENDED(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 32, 1)\n+\n+#define _TEXASR_PRIVILEGE(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 35, 2)\n+\n+#define _TEXASR_FAILURE_SUMMARY(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 36, 1)\n+\n+#define _TEXASR_TFIAR_EXACT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 37, 1)\n+\n+#define _TEXASR_ROT(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 38, 1)\n+\n+#define _TEXASR_TRANSACTION_LEVEL(TEXASR) \\\n+  _TEXASR_EXTRACT_BITS(TEXASR, 63, 12)\n+\n+#endif /* _HTMINTRIN_H */"}, {"sha": "d6fc583b4829c74aa34f18c5ed7b53983d720bba", "filename": "gcc/config/powerpcspe/htmxlintrin.h", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhtmxlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fhtmxlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fhtmxlintrin.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,214 @@\n+/* XL compiler Hardware Transactional Memory (HTM) execution intrinsics.\n+   Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+   Contributed by Peter Bergner <bergner@vnet.ibm.com>.\n+\n+   This file is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3 of the License, or (at your option)\n+   any later version.\n+\n+   This file is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __HTM__\n+# error \"HTM instruction set not enabled\"\n+#endif /* __HTM__ */\n+\n+#ifndef _HTMXLINTRIN_H\n+#define _HTMXLINTRIN_H\n+\n+#include <stdint.h>\n+#include <htmintrin.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#define _TEXASR_PTR(TM_BUF) \\\n+  ((texasr_t *)((TM_BUF)+0))\n+#define _TEXASRU_PTR(TM_BUF) \\\n+  ((texasru_t *)((TM_BUF)+0))\n+#define _TEXASRL_PTR(TM_BUF) \\\n+  ((texasrl_t *)((TM_BUF)+4))\n+#define _TFIAR_PTR(TM_BUF) \\\n+  ((tfiar_t *)((TM_BUF)+8))\n+\n+typedef char TM_buff_type[16];\n+\n+/* Compatibility macro with s390.  This macro can be used to determine\n+   whether a transaction was successfully started from the __TM_begin()\n+   and __TM_simple_begin() intrinsic functions below.  */\n+#define _HTM_TBEGIN_STARTED     1\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_simple_begin (void)\n+{\n+  if (__builtin_expect (__builtin_tbegin (0), 1))\n+    return _HTM_TBEGIN_STARTED;\n+  return 0;\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_begin (void* const TM_buff)\n+{\n+  *_TEXASRL_PTR (TM_buff) = 0;\n+  if (__builtin_expect (__builtin_tbegin (0), 1))\n+    return _HTM_TBEGIN_STARTED;\n+#ifdef __powerpc64__\n+  *_TEXASR_PTR (TM_buff) = __builtin_get_texasr ();\n+#else\n+  *_TEXASRU_PTR (TM_buff) = __builtin_get_texasru ();\n+  *_TEXASRL_PTR (TM_buff) = __builtin_get_texasr ();\n+#endif\n+  *_TFIAR_PTR (TM_buff) = __builtin_get_tfiar ();\n+  return 0;\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_end (void)\n+{\n+  unsigned char status = _HTM_STATE (__builtin_tend (0));\n+  if (__builtin_expect (status, _HTM_TRANSACTIONAL))\n+    return 1;\n+  return 0;\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_abort (void)\n+{\n+  __builtin_tabort (0);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_named_abort (unsigned char const code)\n+{\n+  __builtin_tabort (code);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_resume (void)\n+{\n+  __builtin_tresume ();\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_suspend (void)\n+{\n+  __builtin_tsuspend ();\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_is_user_abort (void* const TM_buff)\n+{\n+  texasru_t texasru = *_TEXASRU_PTR (TM_buff);\n+  return _TEXASRU_ABORT (texasru);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_is_named_user_abort (void* const TM_buff, unsigned char *code)\n+{\n+  texasru_t texasru = *_TEXASRU_PTR (TM_buff);\n+\n+  *code = _TEXASRU_FAILURE_CODE (texasru);\n+  return _TEXASRU_ABORT (texasru);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_is_illegal (void* const TM_buff)\n+{\n+  texasru_t texasru = *_TEXASRU_PTR (TM_buff);\n+  return _TEXASRU_DISALLOWED (texasru);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_is_footprint_exceeded (void* const TM_buff)\n+{\n+  texasru_t texasru = *_TEXASRU_PTR (TM_buff);\n+  return _TEXASRU_FOOTPRINT_OVERFLOW (texasru);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_nesting_depth (void* const TM_buff)\n+{\n+  texasrl_t texasrl;\n+\n+  if (_HTM_STATE (__builtin_ttest ()) == _HTM_NONTRANSACTIONAL)\n+    {\n+      texasrl = *_TEXASRL_PTR (TM_buff);\n+      if (!_TEXASR_FAILURE_SUMMARY (texasrl))\n+        texasrl = 0;\n+    }\n+  else\n+    texasrl = (texasrl_t) __builtin_get_texasr ();\n+\n+  return _TEXASR_TRANSACTION_LEVEL (texasrl);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_is_nested_too_deep(void* const TM_buff)\n+{\n+  texasru_t texasru = *_TEXASRU_PTR (TM_buff);\n+  return _TEXASRU_NESTING_OVERFLOW (texasru);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_is_conflict(void* const TM_buff)\n+{\n+  texasru_t texasru = *_TEXASRU_PTR (TM_buff);\n+  /* Return TEXASR bits 11 (Self-Induced Conflict) through\n+     14 (Translation Invalidation Conflict).  */\n+  return (_TEXASRU_EXTRACT_BITS (texasru, 14, 4)) ? 1 : 0;\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_is_failure_persistent(void* const TM_buff)\n+{\n+  texasru_t texasru = *_TEXASRU_PTR (TM_buff);\n+  return _TEXASRU_FAILURE_PERSISTENT (texasru);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_failure_address(void* const TM_buff)\n+{\n+  return *_TFIAR_PTR (TM_buff);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__TM_failure_code(void* const TM_buff)\n+{\n+  return *_TEXASR_PTR (TM_buff);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* _HTMXLINTRIN_H */"}, {"sha": "684afd6c1901fb06c8631e70848eff4cf587739f", "filename": "gcc/config/powerpcspe/linux.h", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Flinux.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,140 @@\n+/* Definitions of target machine for GNU compiler,\n+   for PowerPC machines running Linux.\n+   Copyright (C) 1996-2017 Free Software Foundation, Inc.\n+   Contributed by Michael Meissner (meissner@cygnus.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Linux doesn't support saving and restoring 64-bit regs in a 32-bit\n+   process.  */\n+#define OS_MISSING_POWERPC64 1\n+\n+/* We use glibc _mcount for profiling.  */\n+#define NO_PROFILE_COUNTERS 1\n+\n+#ifdef SINGLE_LIBC\n+#define OPTION_GLIBC  (DEFAULT_LIBC == LIBC_GLIBC)\n+#define OPTION_UCLIBC (DEFAULT_LIBC == LIBC_UCLIBC)\n+#define OPTION_BIONIC (DEFAULT_LIBC == LIBC_BIONIC)\n+#undef OPTION_MUSL\n+#define OPTION_MUSL   (DEFAULT_LIBC == LIBC_MUSL)\n+#else\n+#define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n+#define OPTION_UCLIBC (linux_libc == LIBC_UCLIBC)\n+#define OPTION_BIONIC (linux_libc == LIBC_BIONIC)\n+#undef OPTION_MUSL\n+#define OPTION_MUSL   (linux_libc == LIBC_MUSL)\n+#endif\n+\n+/* Determine what functions are present at the runtime;\n+   this includes full c99 runtime and sincos.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION linux_libc_has_function\n+\n+#undef  TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define_std (\"PPC\");\t\t\\\n+      builtin_define_std (\"powerpc\");\t\t\\\n+      builtin_assert (\"cpu=powerpc\");\t\t\\\n+      builtin_assert (\"machine=powerpc\");\t\\\n+      TARGET_OS_SYSV_CPP_BUILTINS ();\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef\tCPP_OS_DEFAULT_SPEC\n+#define CPP_OS_DEFAULT_SPEC \"%(cpp_os_linux)\"\n+\n+#undef  LINK_SHLIB_SPEC\n+#define LINK_SHLIB_SPEC \"%{shared:-shared} %{!shared: %{static:-static}}\"\n+\n+#undef\tLIB_DEFAULT_SPEC\n+#define LIB_DEFAULT_SPEC \"%(lib_linux)\"\n+\n+#undef\tSTARTFILE_DEFAULT_SPEC\n+#define STARTFILE_DEFAULT_SPEC \"%(startfile_linux)\"\n+\n+#undef\tENDFILE_DEFAULT_SPEC\n+#define ENDFILE_DEFAULT_SPEC \"%(endfile_linux)\"\n+\n+#undef\tLINK_START_DEFAULT_SPEC\n+#define LINK_START_DEFAULT_SPEC \"%(link_start_linux)\"\n+\n+#undef\tLINK_OS_DEFAULT_SPEC\n+#define LINK_OS_DEFAULT_SPEC \"%(link_os_linux)\"\n+\n+#undef  DEFAULT_ASM_ENDIAN\n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#define DEFAULT_ASM_ENDIAN \" -mlittle\"\n+#define LINK_OS_LINUX_EMUL ENDIAN_SELECT(\" -m elf32ppclinux\",\t\\\n+\t\t\t\t\t \" -m elf32lppclinux\",\t\\\n+\t\t\t\t\t \" -m elf32lppclinux\")\n+#else\n+#define DEFAULT_ASM_ENDIAN \" -mbig\"\n+#define LINK_OS_LINUX_EMUL ENDIAN_SELECT(\" -m elf32ppclinux\",\t\\\n+\t\t\t\t\t \" -m elf32lppclinux\",\t\\\n+\t\t\t\t\t \" -m elf32ppclinux\")\n+#endif\n+\n+#undef LINK_OS_LINUX_SPEC\n+#define LINK_OS_LINUX_SPEC LINK_OS_LINUX_EMUL \" %{!shared: %{!static: \\\n+  %{rdynamic:-export-dynamic} \\\n+  -dynamic-linker \" GNU_USER_DYNAMIC_LINKER \"}}\"\n+\n+/* For backward compatibility, we must continue to use the AIX\n+   structure return convention.  */\n+#undef  DRAFT_V4_STRUCT_RET\n+#define DRAFT_V4_STRUCT_RET 1\n+\n+/* We are 32-bit all the time, so optimize a little.  */\n+#undef TARGET_64BIT\n+#define TARGET_64BIT 0\n+ \n+/* We don't need to generate entries in .fixup, except when\n+   -mrelocatable or -mrelocatable-lib is given.  */\n+#undef RELOCATABLE_NEEDS_FIXUP\n+#define RELOCATABLE_NEEDS_FIXUP \\\n+  (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n+\n+#ifdef TARGET_LIBC_PROVIDES_SSP\n+/* ppc32 glibc provides __stack_chk_guard in -0x7008(2).  */\n+#define TARGET_THREAD_SSP_OFFSET\t-0x7008\n+#endif\n+\n+#define POWERPC_LINUX\n+\n+/* ppc linux has 128-bit long double support in glibc 2.4 and later.  */\n+#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n+#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 128\n+#endif\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* Software floating point support for exceptions and rounding modes\n+   depends on the C library in use.  */\n+#undef TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P\n+#define TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P \\\n+  rs6000_linux_float_exceptions_rounding_supported_p\n+\n+/* Support for TARGET_ATOMIC_ASSIGN_EXPAND_FENV without FPRs depends\n+   on glibc 2.19 or greater.  */\n+#if TARGET_GLIBC_MAJOR > 2 \\\n+  || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)\n+#define RS6000_GLIBC_ATOMIC_FENV 1\n+#endif"}, {"sha": "71e35b709adf85456217229dc8d2d7433df9f038", "filename": "gcc/config/powerpcspe/linux64.h", "status": "added", "additions": 642, "deletions": 0, "changes": 642, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Flinux64.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,642 @@\n+/* Definitions of target machine for GNU compiler,\n+   for 64 bit PowerPC linux.\n+   Copyright (C) 2000-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef RS6000_BI_ARCH\n+\n+#undef\tTARGET_64BIT\n+#define\tTARGET_64BIT 1\n+\n+#define\tDEFAULT_ARCH64_P 1\n+#define\tRS6000_BI_ARCH_P 0\n+\n+#else\n+\n+#define\tDEFAULT_ARCH64_P (TARGET_DEFAULT & MASK_64BIT)\n+#define\tRS6000_BI_ARCH_P 1\n+\n+#endif\n+\n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __powerpc64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n+#undef\tTARGET_AIX\n+#define\tTARGET_AIX TARGET_64BIT\n+\n+#ifdef HAVE_LD_NO_DOT_SYMS\n+/* New ABI uses a local sym for the function entry point.  */\n+extern int dot_symbols;\n+#undef DOT_SYMBOLS\n+#define DOT_SYMBOLS dot_symbols\n+#endif\n+\n+#define TARGET_PROFILE_KERNEL profile_kernel\n+\n+#undef TARGET_KEEP_LEAF_WHEN_PROFILED\n+#define TARGET_KEEP_LEAF_WHEN_PROFILED rs6000_keep_leaf_when_profiled\n+\n+#define TARGET_USES_LINUX64_OPT 1\n+#ifdef HAVE_LD_LARGE_TOC\n+#undef TARGET_CMODEL\n+#define TARGET_CMODEL rs6000_current_cmodel\n+#define SET_CMODEL(opt) rs6000_current_cmodel = opt\n+#else\n+#define SET_CMODEL(opt) do {} while (0)\n+#endif\n+\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER7\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER8\n+\n+/* We don't need to generate entries in .fixup, except when\n+   -mrelocatable or -mrelocatable-lib is given.  */\n+#undef RELOCATABLE_NEEDS_FIXUP\n+#define RELOCATABLE_NEEDS_FIXUP \\\n+  (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n+\n+#undef\tRS6000_ABI_NAME\n+#define\tRS6000_ABI_NAME \"linux\"\n+\n+#define INVALID_64BIT \"-m%s not supported in this configuration\"\n+#define INVALID_32BIT INVALID_64BIT\n+\n+#ifdef LINUX64_DEFAULT_ABI_ELFv2\n+#define ELFv2_ABI_CHECK (rs6000_elf_abi != 1)\n+#else\n+#define ELFv2_ABI_CHECK (rs6000_elf_abi == 2)\n+#endif\n+\n+#undef\tSUBSUBTARGET_OVERRIDE_OPTIONS\n+#define\tSUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!global_options_set.x_rs6000_alignment_flags)\t\t\\\n+\trs6000_alignment_flags = MASK_ALIGN_NATURAL;\t\t\\\n+      if (rs6000_isa_flags & OPTION_MASK_64BIT)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_current_abi = ABI_AIX;\t\t\t\\\n+\t      error (INVALID_64BIT, \"call\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\t\\\n+\t  if (ELFv2_ABI_CHECK)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_current_abi = ABI_ELFv2;\t\t\t\\\n+\t      if (dot_symbols)\t\t\t\t\t\\\n+\t\terror (\"-mcall-aixdesc incompatible with -mabi=elfv2\"); \\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\\\n+\t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_EABI)\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_EABI;\t\t\\\n+\t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_prototype = 0;\t\t\t\t\\\n+\t      error (INVALID_64BIT, \"prototype\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n+\t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if ((rs6000_isa_flags_explicit\t\t\t\\\n+\t       & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      if (global_options_set.x_rs6000_current_cmodel\t\\\n+\t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n+\t\terror (\"-mcmodel incompatible with other toc options\"); \\\n+\t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      if (!global_options_set.x_rs6000_current_cmodel)\t\\\n+\t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n+\t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n+\t\t{\t\t\t\t\t\t\\\n+\t\t  if (!global_options_set.x_TARGET_NO_FP_IN_TOC) \\\n+\t\t    TARGET_NO_FP_IN_TOC\t\t\t\t\\\n+\t\t      = rs6000_current_cmodel == CMODEL_MEDIUM;\t\\\n+\t\t  if (!global_options_set.x_TARGET_NO_SUM_IN_TOC) \\\n+\t\t    TARGET_NO_SUM_IN_TOC = 0;\t\t\t\\\n+\t\t}\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (!RS6000_BI_ARCH_P)\t\t\t\t\\\n+\t    error (INVALID_32BIT, \"32\");\t\t\t\\\n+\t  if (TARGET_PROFILE_KERNEL)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      TARGET_PROFILE_KERNEL = 0;\t\t\t\\\n+\t      error (INVALID_32BIT, \"profile-kernel\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (global_options_set.x_rs6000_current_cmodel)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n+\t      error (INVALID_32BIT, \"cmodel\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef\tASM_DEFAULT_SPEC\n+#undef\tASM_SPEC\n+#undef\tLINK_OS_LINUX_SPEC\n+#undef\tLINK_SECURE_PLT_SPEC\n+\n+#ifndef\tRS6000_BI_ARCH\n+#define\tASM_DEFAULT_SPEC \"-mppc64\"\n+#define\tASM_SPEC\t \"%(asm_spec64) %(asm_spec_common)\"\n+#define\tLINK_OS_LINUX_SPEC \"%(link_os_linux_spec64)\"\n+#define\tLINK_SECURE_PLT_SPEC \"\"\n+#else\n+#if DEFAULT_ARCH64_P\n+#define\tASM_DEFAULT_SPEC \"-mppc%{!m32:64}\"\n+#define\tASM_SPEC\t \"%{m32:%(asm_spec32)}%{!m32:%(asm_spec64)} %(asm_spec_common)\"\n+#define\tLINK_OS_LINUX_SPEC \"%{m32:%(link_os_linux_spec32)}%{!m32:%(link_os_linux_spec64)}\"\n+#define\tLINK_SECURE_PLT_SPEC \"%{m32: \" LINK_SECURE_PLT_DEFAULT_SPEC \"}\"\n+#else\n+#define\tASM_DEFAULT_SPEC \"-mppc%{m64:64}\"\n+#define\tASM_SPEC\t \"%{!m64:%(asm_spec32)}%{m64:%(asm_spec64)} %(asm_spec_common)\"\n+#define\tLINK_OS_LINUX_SPEC \"%{!m64:%(link_os_linux_spec32)}%{m64:%(link_os_linux_spec64)}\"\n+#define\tLINK_SECURE_PLT_SPEC \"%{!m64: \" LINK_SECURE_PLT_DEFAULT_SPEC \"}\"\n+#endif\n+#endif\n+\n+#define ASM_SPEC32 \"-a32 \\\n+%{mrelocatable} %{mrelocatable-lib} %{\" FPIE_OR_FPIC_SPEC \":-K PIC} \\\n+%{memb|msdata=eabi: -memb}\"\n+\n+#define ASM_SPEC64 \"-a64\"\n+\n+#define ASM_SPEC_COMMON \"%(asm_cpu) \\\n+%{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}}\" \\\n+  ENDIAN_SELECT(\" -mbig\", \" -mlittle\", DEFAULT_ASM_ENDIAN)\n+\n+#undef\tSUBSUBTARGET_EXTRA_SPECS\n+#define SUBSUBTARGET_EXTRA_SPECS \\\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\t\\\n+  { \"link_os_linux_spec32\",\tLINK_OS_LINUX_SPEC32 },\t\t\t\\\n+  { \"link_os_linux_spec64\",\tLINK_OS_LINUX_SPEC64 },\t\t\t\\\n+  { \"link_os_extra_spec32\",\tLINK_OS_EXTRA_SPEC32 },\t\t\t\\\n+  { \"link_os_extra_spec64\",\tLINK_OS_EXTRA_SPEC64 },\t\t\t\\\n+  { \"link_os_new_dtags\",\tLINK_OS_NEW_DTAGS_SPEC },\t\t\\\n+  { \"include_extra\",\t\tINCLUDE_EXTRA_SPEC },\t\t\t\\\n+  { \"dynamic_linker_prefix\",\tDYNAMIC_LINKER_PREFIX },\n+\n+/* Optional specs used for overriding the system include directory, default\n+   -rpath links, and prefix for the dynamic linker.  Normally, there are not\n+   defined, but if the user configure with the --with-advance-toolchain=<xxx>\n+   option, the advance-toolchain.h file will override these.  */\n+#ifndef INCLUDE_EXTRA_SPEC\n+#define INCLUDE_EXTRA_SPEC\t\"\"\n+#endif\n+\n+#ifndef LINK_OS_EXTRA_SPEC32\n+#define LINK_OS_EXTRA_SPEC32\t\"\"\n+#endif\n+\n+#ifndef LINK_OS_EXTRA_SPEC64\n+#define LINK_OS_EXTRA_SPEC64\t\"\"\n+#endif\n+\n+#ifndef LINK_OS_NEW_DTAGS_SPEC\n+#define LINK_OS_NEW_DTAGS_SPEC\t\"\"\n+#endif\n+\n+#ifndef DYNAMIC_LINKER_PREFIX\n+#define DYNAMIC_LINKER_PREFIX\t\"\"\n+#endif\n+\n+#undef\tMULTILIB_DEFAULTS\n+#if DEFAULT_ARCH64_P\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+#else\n+#define MULTILIB_DEFAULTS { \"m32\" }\n+#endif\n+\n+/* Split stack is only supported for 64 bit, and requires glibc >= 2.18.  */\n+#if TARGET_GLIBC_MAJOR * 1000 + TARGET_GLIBC_MINOR >= 2018\n+# ifndef RS6000_BI_ARCH\n+#  define TARGET_CAN_SPLIT_STACK\n+# else\n+#  if DEFAULT_ARCH64_P\n+/* Supported, and the default is -m64  */\n+#   define TARGET_CAN_SPLIT_STACK_64BIT 1\n+#  else\n+/* Supported, and the default is -m32  */\n+#   define TARGET_CAN_SPLIT_STACK_64BIT 0\n+#  endif\n+# endif\n+#endif\n+\n+#ifndef RS6000_BI_ARCH\n+\n+/* 64-bit PowerPC Linux always has a TOC.  */\n+#undef  TARGET_TOC\n+#define\tTARGET_TOC\t\t1\n+\n+/* Some things from sysv4.h we don't do when 64 bit.  */\n+#undef\tOPTION_RELOCATABLE\n+#define\tOPTION_RELOCATABLE\t0\n+#undef\tOPTION_EABI\n+#define\tOPTION_EABI\t\t0\n+#undef\tOPTION_PROTOTYPE\n+#define\tOPTION_PROTOTYPE\t0\n+#undef RELOCATABLE_NEEDS_FIXUP\n+#define RELOCATABLE_NEEDS_FIXUP 0\n+\n+#endif\n+\n+/* We use glibc _mcount for profiling.  */\n+#define NO_PROFILE_COUNTERS 1\n+#define PROFILE_HOOK(LABEL) \\\n+  do { if (TARGET_64BIT) output_profile_hook (LABEL); } while (0)\n+\n+/* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n+#undef  ADJUST_FIELD_ALIGN\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n+  (rs6000_special_adjust_field_align_p ((TYPE), (COMPUTED))\t\t\\\n+   ? 128\t\t\t\t\t\t\t\t\\\n+   : (TARGET_64BIT\t\t\t\t\t\t\t\\\n+      && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\\\n+      && TYPE_MODE (strip_array_types (TYPE)) == DFmode)\t\t\\\n+   ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n+   : (COMPUTED))\n+\n+/* PowerPC64 Linux increases natural record alignment to doubleword if\n+   the first field is an FP double, only if in power alignment mode.  */\n+#undef  ROUND_TYPE_ALIGN\n+#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\t\\\n+  ((TARGET_64BIT\t\t\t\t\t\t\t\\\n+    && (TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\t\\\n+    && TARGET_ALIGN_NATURAL == 0)\t\t\t\t\t\\\n+   ? rs6000_special_round_type_align (STRUCT, COMPUTED, SPECIFIED)\t\\\n+   : MAX ((COMPUTED), (SPECIFIED)))\n+\n+/* Use the default for compiling target libs.  */\n+#ifdef IN_TARGET_LIBS\n+#undef TARGET_ALIGN_NATURAL\n+#define TARGET_ALIGN_NATURAL 1\n+#endif\n+\n+/* Indicate that jump tables go in the text section.  */\n+#undef  JUMP_TABLES_IN_TEXT_SECTION\n+#define JUMP_TABLES_IN_TEXT_SECTION TARGET_64BIT\n+\n+/* The linux ppc64 ABI isn't explicit on whether aggregates smaller\n+   than a doubleword should be padded upward or downward.  You could\n+   reasonably assume that they follow the normal rules for structure\n+   layout treating the parameter area as any other block of memory,\n+   then map the reg param area to registers.  i.e. pad upward.\n+   Setting both of the following defines results in this behavior.\n+   Setting just the first one will result in aggregates that fit in a\n+   doubleword being padded downward, and others being padded upward.\n+   Not a bad idea as this results in struct { int x; } being passed\n+   the same way as an int.  */\n+#define AGGREGATE_PADDING_FIXED TARGET_64BIT\n+#define AGGREGATES_PAD_UPWARD_ALWAYS 0\n+\n+/* Specify padding for the last element of a block move between\n+   registers and memory.  FIRST is nonzero if this is the only\n+   element.  */\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))\n+\n+/* Linux doesn't support saving and restoring 64-bit regs in a 32-bit\n+   process.  */\n+#define OS_MISSING_POWERPC64 !TARGET_64BIT\n+\n+#ifdef SINGLE_LIBC\n+#define OPTION_GLIBC  (DEFAULT_LIBC == LIBC_GLIBC)\n+#define OPTION_UCLIBC (DEFAULT_LIBC == LIBC_UCLIBC)\n+#define OPTION_BIONIC (DEFAULT_LIBC == LIBC_BIONIC)\n+#undef OPTION_MUSL\n+#define OPTION_MUSL   (DEFAULT_LIBC == LIBC_MUSL)\n+#else\n+#define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n+#define OPTION_UCLIBC (linux_libc == LIBC_UCLIBC)\n+#define OPTION_BIONIC (linux_libc == LIBC_BIONIC)\n+#undef OPTION_MUSL\n+#define OPTION_MUSL   (linux_libc == LIBC_MUSL)\n+#endif\n+\n+/* Determine what functions are present at the runtime;\n+   this includes full c99 runtime and sincos.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION linux_libc_has_function\n+\n+#undef  TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define (\"__PPC__\");\t\t\t\\\n+\t  builtin_define (\"__PPC64__\");\t\t\t\\\n+\t  builtin_define (\"__powerpc__\");\t\t\\\n+\t  builtin_define (\"__powerpc64__\");\t\t\\\n+\t  if (!DOT_SYMBOLS)\t\t\t\t\\\n+\t    builtin_define (\"_CALL_LINUX\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc64\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc64\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"PPC\");\t\t\t\\\n+\t  builtin_define_std (\"powerpc\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc\");\t\t\\\n+\t  TARGET_OS_SYSV_CPP_BUILTINS ();\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef  CPP_OS_DEFAULT_SPEC\n+#define CPP_OS_DEFAULT_SPEC \"%(cpp_os_linux) %(include_extra)\"\n+\n+#undef  LINK_SHLIB_SPEC\n+#define LINK_SHLIB_SPEC \"%{shared:-shared} %{!shared: %{static:-static}}\"\n+\n+#undef  LIB_DEFAULT_SPEC\n+#define LIB_DEFAULT_SPEC \"%(lib_linux)\"\n+\n+#undef  STARTFILE_DEFAULT_SPEC\n+#define STARTFILE_DEFAULT_SPEC \"%(startfile_linux)\"\n+\n+#undef\tENDFILE_DEFAULT_SPEC\n+#define ENDFILE_DEFAULT_SPEC \"%(endfile_linux)\"\n+\n+#undef\tLINK_START_DEFAULT_SPEC\n+#define LINK_START_DEFAULT_SPEC \"%(link_start_linux)\"\n+\n+#undef\tLINK_OS_DEFAULT_SPEC\n+#define LINK_OS_DEFAULT_SPEC \"%(link_os_linux)\"\n+\n+#define GLIBC_DYNAMIC_LINKER32 \"%(dynamic_linker_prefix)/lib/ld.so.1\"\n+\n+#ifdef LINUX64_DEFAULT_ABI_ELFv2\n+#define GLIBC_DYNAMIC_LINKER64 \\\n+\"%{mabi=elfv1:%(dynamic_linker_prefix)/lib64/ld64.so.1;\" \\\n+\":%(dynamic_linker_prefix)/lib64/ld64.so.2}\"\n+#else\n+#define GLIBC_DYNAMIC_LINKER64 \\\n+\"%{mabi=elfv2:%(dynamic_linker_prefix)/lib64/ld64.so.2;\" \\\n+\":%(dynamic_linker_prefix)/lib64/ld64.so.1}\"\n+#endif\n+\n+#define MUSL_DYNAMIC_LINKER32 \\\n+  \"/lib/ld-musl-powerpc\" MUSL_DYNAMIC_LINKER_E \"%{msoft-float:-sf}.so.1\"\n+#define MUSL_DYNAMIC_LINKER64 \\\n+  \"/lib/ld-musl-powerpc64\" MUSL_DYNAMIC_LINKER_E \"%{msoft-float:-sf}.so.1\"\n+\n+#define UCLIBC_DYNAMIC_LINKER32 \"/lib/ld-uClibc.so.0\"\n+#define UCLIBC_DYNAMIC_LINKER64 \"/lib/ld64-uClibc.so.0\"\n+#if DEFAULT_LIBC == LIBC_UCLIBC\n+#define CHOOSE_DYNAMIC_LINKER(G, U, M) \\\n+  \"%{mglibc:\" G \";:%{mmusl:\" M \";:\" U \"}}\"\n+#elif DEFAULT_LIBC == LIBC_GLIBC\n+#define CHOOSE_DYNAMIC_LINKER(G, U, M) \\\n+  \"%{muclibc:\" U \";:%{mmusl:\" M \";:\" G \"}}\"\n+#elif DEFAULT_LIBC == LIBC_MUSL\n+#define CHOOSE_DYNAMIC_LINKER(G, U, M) \\\n+  \"%{mglibc:\" G \";:%{muclibc:\" U \";:\" M \"}}\"\n+#else\n+#error \"Unsupported DEFAULT_LIBC\"\n+#endif\n+#define GNU_USER_DYNAMIC_LINKER32 \\\n+  CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER32, UCLIBC_DYNAMIC_LINKER32, \\\n+\t\t\t MUSL_DYNAMIC_LINKER32)\n+#define GNU_USER_DYNAMIC_LINKER64 \\\n+  CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER64, UCLIBC_DYNAMIC_LINKER64, \\\n+\t\t\t MUSL_DYNAMIC_LINKER64)\n+\n+#undef  DEFAULT_ASM_ENDIAN\n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#define DEFAULT_ASM_ENDIAN \" -mlittle\"\n+#define LINK_OS_LINUX_EMUL32 ENDIAN_SELECT(\" -m elf32ppclinux\",\t\t\\\n+\t\t\t\t\t   \" -m elf32lppclinux\",\t\\\n+\t\t\t\t\t   \" -m elf32lppclinux\")\n+#define LINK_OS_LINUX_EMUL64 ENDIAN_SELECT(\" -m elf64ppc\",\t\t\\\n+\t\t\t\t\t   \" -m elf64lppc\",\t\t\\\n+\t\t\t\t\t   \" -m elf64lppc\")\n+#else\n+#define DEFAULT_ASM_ENDIAN \" -mbig\"\n+#define LINK_OS_LINUX_EMUL32 ENDIAN_SELECT(\" -m elf32ppclinux\",\t\t\\\n+\t\t\t\t\t   \" -m elf32lppclinux\",\t\\\n+\t\t\t\t\t   \" -m elf32ppclinux\")\n+#define LINK_OS_LINUX_EMUL64 ENDIAN_SELECT(\" -m elf64ppc\",\t\t\\\n+\t\t\t\t\t   \" -m elf64lppc\",\t\t\\\n+\t\t\t\t\t   \" -m elf64ppc\")\n+#endif\n+\n+#define LINK_OS_LINUX_SPEC32 LINK_OS_LINUX_EMUL32 \" %{!shared: %{!static: \\\n+  %{rdynamic:-export-dynamic} \\\n+  -dynamic-linker \" GNU_USER_DYNAMIC_LINKER32 \"}} \\\n+  %(link_os_extra_spec32)\"\n+\n+#define LINK_OS_LINUX_SPEC64 LINK_OS_LINUX_EMUL64 \" %{!shared: %{!static: \\\n+  %{rdynamic:-export-dynamic} \\\n+  -dynamic-linker \" GNU_USER_DYNAMIC_LINKER64 \"}} \\\n+  %(link_os_extra_spec64)\"\n+\n+#undef  TOC_SECTION_ASM_OP\n+#define TOC_SECTION_ASM_OP \\\n+  (TARGET_64BIT\t\t\t\t\t\t\\\n+   ? \"\\t.section\\t\\\".toc\\\",\\\"aw\\\"\"\t\t\t\\\n+   : \"\\t.section\\t\\\".got\\\",\\\"aw\\\"\")\n+\n+#undef  MINIMAL_TOC_SECTION_ASM_OP\n+#define MINIMAL_TOC_SECTION_ASM_OP \\\n+  (TARGET_64BIT\t\t\t\t\t\t\\\n+   ? \"\\t.section\\t\\\".toc1\\\",\\\"aw\\\"\"\t\t\t\\\n+   : (flag_pic\t\t\t\t\t\t\\\n+      ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\"\t\t\t\\\n+      : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\"))\n+\n+/* Must be at least as big as our pointer type.  */\n+#undef\tSIZE_TYPE\n+#define\tSIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")\n+\n+#undef\tPTRDIFF_TYPE\n+#define\tPTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n+\n+#undef\tWCHAR_TYPE\n+#define\tWCHAR_TYPE (TARGET_64BIT ? \"int\" : \"long int\")\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#undef  RS6000_MCOUNT\n+#define RS6000_MCOUNT \"_mcount\"\n+\n+#ifdef __powerpc64__\n+/* _init and _fini functions are built from bits spread across many\n+   object files, each potentially with a different TOC pointer.  For\n+   that reason, place a nop after the call so that the linker can\n+   restore the TOC pointer if a TOC adjusting call stub is needed.  */\n+#if DOT_SYMBOLS\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+  asm (SECTION_OP \"\\n\"\t\t\t\t\t\\\n+\"\tbl .\" #FUNC \"\\n\"\t\t\t\t\\\n+\"\tnop\\n\"\t\t\t\t\t\t\\\n+\"\t.previous\");\n+#else\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+  asm (SECTION_OP \"\\n\"\t\t\t\t\t\\\n+\"\tbl \" #FUNC \"\\n\"\t\t\t\t\t\\\n+\"\tnop\\n\"\t\t\t\t\t\t\\\n+\"\t.previous\");\n+#endif\n+#endif\n+\n+/* FP save and restore routines.  */\n+#undef  SAVE_FP_PREFIX\n+#define SAVE_FP_PREFIX (TARGET_64BIT ? \"._savef\" : \"_savefpr_\")\n+#undef  SAVE_FP_SUFFIX\n+#define SAVE_FP_SUFFIX \"\"\n+#undef  RESTORE_FP_PREFIX\n+#define RESTORE_FP_PREFIX (TARGET_64BIT ? \"._restf\" : \"_restfpr_\")\n+#undef  RESTORE_FP_SUFFIX\n+#define RESTORE_FP_SUFFIX \"\"\n+\n+/* Dwarf2 debugging.  */\n+#undef  PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+\n+/* This is how to declare the size of a function.  */\n+#undef\tASM_DECLARE_FUNCTION_SIZE\n+#define\tASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  fputs (\"\\t.size\\t\", (FILE));\t\t\t\t\t\\\n+\t  if (TARGET_64BIT && DOT_SYMBOLS)\t\t\t\t\\\n+\t    putc ('.', (FILE));\t\t\t\t\t\t\\\n+\t  assemble_name ((FILE), (FNAME));\t\t\t\t\\\n+\t  fputs (\",.-\", (FILE));\t\t\t\t\t\\\n+\t  rs6000_output_function_entry (FILE, FNAME);\t\t\t\\\n+\t  putc ('\\n', (FILE));\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Return nonzero if this entry is to be written into the constant\n+   pool in a special way.  We do so if this is a SYMBOL_REF, LABEL_REF\n+   or a CONST containing one of them.  If -mfp-in-toc (the default),\n+   we also do this for floating-point constants.  We actually can only\n+   do this if the FP formats of the target and host machines are the\n+   same, but we can't check that since not every file that uses\n+   the macros includes real.h.  We also do this when we can write the\n+   entry into the TOC and the entry is not larger than a TOC entry.  */\n+\n+#undef  ASM_OUTPUT_SPECIAL_POOL_ENTRY_P\n+#define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)\t\t\t\\\n+  (TARGET_TOC\t\t\t\t\t\t\t\t\\\n+   && (GET_CODE (X) == SYMBOL_REF\t\t\t\t\t\\\n+       || (GET_CODE (X) == CONST && GET_CODE (XEXP (X, 0)) == PLUS\t\\\n+\t   && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)\t\t\\\n+       || GET_CODE (X) == LABEL_REF\t\t\t\t\t\\\n+       || (GET_CODE (X) == CONST_INT \t\t\t\t\t\\\n+\t   && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))\t\\\n+       || (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n+\t   && ((TARGET_64BIT\t\t\t\t\t\t\\\n+\t\t&& (TARGET_MINIMAL_TOC\t\t\t\t\t\\\n+\t\t    || (SCALAR_FLOAT_MODE_P (GET_MODE (X))\t\t\\\n+\t\t\t&& ! TARGET_NO_FP_IN_TOC)))\t\t\t\\\n+\t       || (!TARGET_64BIT\t\t\t\t\t\\\n+\t\t   && !TARGET_NO_FP_IN_TOC\t\t\t\t\\\n+\t\t   && SCALAR_FLOAT_MODE_P (GET_MODE (X))\t\t\\\n+\t\t   && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.  */\n+#undef\tASM_PREFERRED_EH_DATA_FORMAT\n+#define\tASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n+  (TARGET_64BIT || flag_pic\t\t\t\t\t\t\\\n+   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel\t\t\\\n+      | (TARGET_64BIT ? DW_EH_PE_udata8 : DW_EH_PE_sdata4))\t\t\\\n+   : DW_EH_PE_absptr)\n+\n+/* For backward compatibility, we must continue to use the AIX\n+   structure return convention.  */\n+#undef DRAFT_V4_STRUCT_RET\n+#define DRAFT_V4_STRUCT_RET (!TARGET_64BIT)\n+\n+#ifdef TARGET_LIBC_PROVIDES_SSP\n+/* ppc32 glibc provides __stack_chk_guard in -0x7008(2),\n+   ppc64 glibc provides it at -0x7010(13).  */\n+#define TARGET_THREAD_SSP_OFFSET\t(TARGET_64BIT ? -0x7010 : -0x7008)\n+#endif\n+\n+#define POWERPC_LINUX\n+\n+/* ppc{32,64} linux has 128-bit long double support in glibc 2.4 and later.  */\n+#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n+#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 128\n+#endif\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* The default value isn't sufficient in 64-bit mode.  */\n+#define STACK_CHECK_PROTECT (TARGET_64BIT ? 16 * 1024 : 12 * 1024)\n+\n+/* Software floating point support for exceptions and rounding modes\n+   depends on the C library in use.  */\n+#undef TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P\n+#define TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P \\\n+  rs6000_linux_float_exceptions_rounding_supported_p\n+\n+/* Support for TARGET_ATOMIC_ASSIGN_EXPAND_FENV without FPRs depends\n+   on glibc 2.19 or greater.  */\n+#if TARGET_GLIBC_MAJOR > 2 \\\n+  || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 19)\n+#define RS6000_GLIBC_ATOMIC_FENV 1\n+#endif\n+\n+/* The IEEE 128-bit emulator is only built on Linux systems.  Flag that we\n+   should enable the type handling for KFmode on VSX systems even if we are not\n+   enabling the __float128 keyword.  */\n+#undef\tTARGET_FLOAT128_ENABLE_TYPE\n+#define TARGET_FLOAT128_ENABLE_TYPE 1"}, {"sha": "b0ca976fe1843cd171b56c2922cefb6fdd3907e1", "filename": "gcc/config/powerpcspe/linux64.opt", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinux64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinux64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Flinux64.opt?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,42 @@\n+; Options for 64-bit PowerPC Linux.\n+;\n+; Copyright (C) 2005-2017 Free Software Foundation, Inc.\n+; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+mprofile-kernel\n+Target Report Var(profile_kernel) Save\n+Call mcount for profiling before a function prologue.\n+\n+mcmodel=\n+Target RejectNegative Joined Enum(rs6000_cmodel) Var(rs6000_current_cmodel)\n+Select code model.\n+\n+Enum\n+Name(rs6000_cmodel) Type(enum rs6000_cmodel)\n+Known code models (for use with the -mcmodel= option):\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(small) Value(CMODEL_SMALL)\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(medium) Value(CMODEL_MEDIUM)\n+\n+EnumValue\n+Enum(rs6000_cmodel) String(large) Value(CMODEL_LARGE)\n+"}, {"sha": "fddb18d8e229d2d14be9e4eac298985258d5578e", "filename": "gcc/config/powerpcspe/linuxaltivec.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinuxaltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinuxaltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Flinuxaltivec.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,32 @@\n+/* Definitions of target machine for GNU compiler,\n+   for AltiVec enhanced PowerPC machines running GNU/Linux.\n+   Copyright (C) 2001-2017 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez (aldyh@redhat.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Override rs6000.h and sysv4.h definition.  */\n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#undef\tTARGET_DEFAULT\n+#define\tTARGET_DEFAULT (MASK_ALTIVEC | MASK_LITTLE_ENDIAN)\n+#else\n+#undef\tTARGET_DEFAULT\n+#define\tTARGET_DEFAULT MASK_ALTIVEC\n+#endif\n+\n+#undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n+#define SUBSUBTARGET_OVERRIDE_OPTIONS rs6000_altivec_abi = 1"}, {"sha": "92efabfe664af65e54bc02915eb2b71e6f2eca24", "filename": "gcc/config/powerpcspe/linuxspe.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinuxspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flinuxspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Flinuxspe.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,32 @@\n+/* Definitions of target machine for GNU compiler,\n+   for PowerPC e500 machines running GNU/Linux.\n+   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez (aldy@quesejoda.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Override rs6000.h and sysv4.h definition.  */\n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#undef\tTARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_STRICT_ALIGN | MASK_LITTLE_ENDIAN)\n+#else\n+#undef\tTARGET_DEFAULT\n+#define TARGET_DEFAULT MASK_STRICT_ALIGN\n+#endif\n+\n+#undef  ASM_DEFAULT_SPEC\n+#define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "2f9356f969d26be3efd1db3fb4a7a548c460a3fb", "filename": "gcc/config/powerpcspe/lynx.h", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Flynx.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,120 @@\n+/* Definitions for Rs6000 running LynxOS.\n+   Copyright (C) 1995-2017 Free Software Foundation, Inc.\n+   Contributed by David Henkel-Wallace, Cygnus Support (gumby@cygnus.com)\n+   Rewritten by Adam Nemet, LynuxWorks Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Undefine the definition to enable the LynxOS default from the\n+   top-level lynx.h.  */\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+\n+/* Get rid off the spec definitions from rs6000/sysv4.h.  */\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \\\n+\"%{msoft-float: -D_SOFT_FLOAT} \\\n+ %(cpp_cpu) \\\n+ %(cpp_os_lynx)\"\n+\n+/* LynxOS only supports big-endian on PPC so we override the\n+   definition from sysv4.h.  Since the LynxOS 4.0 compiler was set to\n+   return every structure in memory regardless of their size we have\n+   to emulate the same behavior here with disabling the SVR4 structure\n+   returning.  */\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \\\n+\"%{G*} %{mno-sdata:-msdata=none} \\\n+ %{maltivec:-mabi=altivec} \\\n+ -maix-struct-return\"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+\"%(asm_cpu) \\\n+ %{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}}\"\n+\n+#undef STARTFILE_SPEC\n+#undef ENDFILE_SPEC\n+#undef LIB_SPEC\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+\"%{!msdata=none:%{G*}} %{msdata=none:-G0} \\\n+ %(link_os_lynx)\"\n+\n+/* Override the definition from sysv4.h.  */\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define (\"__BIG_ENDIAN__\");\t\\\n+      builtin_define (\"__powerpc__\");\t\t\\\n+      builtin_assert (\"cpu=powerpc\");\t\t\\\n+      builtin_assert (\"machine=powerpc\");\t\\\n+      builtin_define (\"__PPC__\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Override the rs6000.h definition.  */\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+/* Override the rs6000.h definition.  */\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* LynxOS does not do anything with .fixup plus let's not create\n+   writable section for linkonce.r and linkonce.t.  */\n+\n+#undef RELOCATABLE_NEEDS_FIXUP\n+\n+/* Override these from rs6000.h with the generic definition.  */\n+\n+#undef SIZE_TYPE\n+#undef ASM_OUTPUT_ALIGN\n+#undef PREFERRED_DEBUGGING_TYPE\n+\n+/* The file rs6000.c defines TARGET_HAVE_TLS unconditionally to the\n+   value of HAVE_AS_TLS.  HAVE_AS_TLS is true as gas support for TLS\n+   is detected by configure.  Override the definition to false.  */\n+\n+#undef HAVE_AS_TLS\n+#define HAVE_AS_TLS 0\n+\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+\n+#ifdef CRT_BEGIN\n+/* This function is part of crtbegin*.o which is at the beginning of\n+   the link and is called from .fini which is usually toward the end\n+   of the executable.  Make it longcall so that we don't limit the\n+   text size of the executables to 32M.  */\n+\n+static void __do_global_dtors_aux (void) __attribute__ ((longcall));\n+#endif\t/* CRT_BEGIN */\n+\n+#ifdef CRT_END\n+/* Similarly here.  This function resides in crtend*.o which is toward\n+   to end of the link and is called from .init which is at the\n+   beginning.  */\n+\n+static void __do_global_ctors_aux (void) __attribute__ ((longcall));\n+#endif\t/* CRT_END */"}, {"sha": "ea3a2b757fe3c47941116cdd745579a9f4b53b7f", "filename": "gcc/config/powerpcspe/milli.exp", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fmilli.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fmilli.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fmilli.exp?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,7 @@\n+#!\n+__mulh          0x3100\n+__mull          0x3180\n+__divss         0x3200\n+__divus         0x3280\n+__quoss         0x3300\n+__quous         0x3380"}, {"sha": "d302b73a0ea8bdc7df7b9030be8e20633941fcf4", "filename": "gcc/config/powerpcspe/mpc.md", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fmpc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fmpc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fmpc.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,112 @@\n+;; Scheduling description for Motorola PowerPC processor cores.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"mpc,mpcfp\")\n+(define_cpu_unit \"iu_mpc,mciu_mpc\" \"mpc\")\n+(define_cpu_unit \"fpu_mpc\" \"mpcfp\")\n+(define_cpu_unit \"lsu_mpc,bpu_mpc\" \"mpc\")\n+\n+;; MPCCORE 32-bit SCIU, MCIU, LSU, FPU, BPU\n+;; 505/801/821/823\n+\n+(define_insn_reservation \"mpccore-load\" 2\n+  (and (eq_attr \"type\" \"load,load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"lsu_mpc\")\n+\n+(define_insn_reservation \"mpccore-store\" 2\n+  (and (eq_attr \"type\" \"store,fpstore\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"lsu_mpc\")\n+\n+(define_insn_reservation \"mpccore-fpload\" 2\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"lsu_mpc\")\n+\n+(define_insn_reservation \"mpccore-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"iu_mpc\")\n+\n+(define_insn_reservation \"mpccore-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"iu_mpc,iu_mpc\")\n+\n+(define_insn_reservation \"mpccore-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"iu_mpc,iu_mpc,iu_mpc\")\n+\n+(define_insn_reservation \"mpccore-imul\" 2\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"mciu_mpc\")\n+\n+; Divide latency varies greatly from 2-11, use 6 as average\n+(define_insn_reservation \"mpccore-idiv\" 6\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"mciu_mpc*6\")\n+\n+(define_insn_reservation \"mpccore-compare\" 3\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"iu_mpc,nothing,bpu_mpc\")\n+\n+(define_insn_reservation \"mpccore-fpcompare\" 2\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc,bpu_mpc\")\n+\n+(define_insn_reservation \"mpccore-fp\" 4\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc*2\")\n+\n+(define_insn_reservation \"mpccore-dmul\" 5\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc*5\")\n+\n+(define_insn_reservation \"mpccore-sdiv\" 10\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc*10\")\n+\n+(define_insn_reservation \"mpccore-ddiv\" 17\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"fpu_mpc*17\")\n+\n+(define_insn_reservation \"mpccore-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"bpu_mpc\")\n+\n+(define_insn_reservation \"mpccore-jmpreg\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,cr_logical,delayed_cr,mfcr,mtcr,isync\")\n+       (eq_attr \"cpu\" \"mpccore\"))\n+  \"bpu_mpc\")\n+"}, {"sha": "3eb8baa5ffdf59da396bb2cac9857aaffdbd16d2", "filename": "gcc/config/powerpcspe/netbsd.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fnetbsd.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,92 @@\n+/* Definitions of target machine for GNU compiler,\n+   for PowerPC NetBSD systems.\n+   Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+   Contributed by Wasabi Systems, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef  TARGET_OS_CPP_BUILTINS\t/* FIXME: sysv4.h should not define this! */\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      NETBSD_OS_CPP_BUILTINS_ELF();\t\t\\\n+      builtin_define (\"__powerpc__\");\t\t\\\n+      builtin_assert (\"cpu=powerpc\");\t\t\\\n+      builtin_assert (\"machine=powerpc\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Override the default from rs6000.h to avoid conflicts with macros\n+   defined in NetBSD header files.  */\n+\n+#undef  RS6000_CPU_CPP_ENDIAN_BUILTINS\n+#define RS6000_CPU_CPP_ENDIAN_BUILTINS()\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (BYTES_BIG_ENDIAN)\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__BIG_ENDIAN__\");\t\\\n+\t  builtin_assert (\"machine=bigendian\");\t\\\n+\t}\t\t\t\t\t\\\n+      else\t\t\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__LITTLE_ENDIAN__\");\t\\\n+\t  builtin_assert (\"machine=littleendian\"); \\\n+\t}\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Make GCC agree with <machine/ansi.h>.  */\n+\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+/* Undo the spec mess from sysv4.h, and just define the specs\n+   the way NetBSD systems actually expect.  */\n+\n+#undef  CPP_SPEC\n+#define CPP_SPEC NETBSD_CPP_SPEC\n+\n+#undef  LINK_SPEC\n+#define LINK_SPEC \\\n+  \"%{!msdata=none:%{G*}} %{msdata=none:-G0} \\\n+   %(netbsd_link_spec)\"\n+\n+#define NETBSD_ENTRY_POINT \"_start\"\n+\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC NETBSD_STARTFILE_SPEC\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%(netbsd_endfile_spec)\"\n+\n+#undef  LIB_SPEC\n+#define LIB_SPEC NETBSD_LIB_SPEC\n+\n+#undef  SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\\\n+  { \"netbsd_link_spec\",\t\tNETBSD_LINK_SPEC_ELF },\t\t\\\n+  { \"netbsd_entry_point\",\tNETBSD_ENTRY_POINT },\t\t\\\n+  { \"netbsd_endfile_spec\",\tNETBSD_ENDFILE_SPEC },\n+\n+\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+"}, {"sha": "09ddc36a16d03308dfc5018259f7b21d6f293088", "filename": "gcc/config/powerpcspe/option-defaults.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Foption-defaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Foption-defaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Foption-defaults.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,64 @@\n+/* Definitions of default options for config/rs6000 configurations.\n+   Copyright (C) 1992-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This header needs to be included after any other headers affecting\n+   TARGET_DEFAULT.  */\n+\n+#if TARGET_AIX_OS\n+#define OPT_64 \"maix64\"\n+#define OPT_32 \"maix32\"\n+#else\n+#define OPT_64 \"m64\"\n+#define OPT_32 \"m32\"\n+#endif\n+\n+#ifndef OPTION_MASK_64BIT\n+#define OPTION_MASK_64BIT 0\n+#define MASK_64BIT 0\n+#endif\n+\n+#if TARGET_DEFAULT & OPTION_MASK_64BIT\n+#define OPT_ARCH64 \"!\" OPT_32\n+#define OPT_ARCH32 OPT_32\n+#else\n+#define OPT_ARCH64 OPT_64\n+#define OPT_ARCH32 \"!\" OPT_64\n+#endif\n+\n+/* Support for a compile-time default CPU, et cetera.  The rules are:\n+   --with-cpu is ignored if -mcpu is specified; likewise --with-cpu-32\n+     and --with-cpu-64.\n+   --with-tune is ignored if -mtune or -mcpu is specified; likewise\n+     --with-tune-32 and --with-tune-64.\n+   --with-float is ignored if -mhard-float or -msoft-float are\n+     specified.  */\n+#define OPTION_DEFAULT_SPECS \\\n+  {\"abi\", \"%{!mabi=elfv*:-mabi=%(VALUE)}\" }, \\\n+  {\"tune\", \"%{!mtune=*:%{!mcpu=*:-mtune=%(VALUE)}}\" }, \\\n+  {\"tune_32\", \"%{\" OPT_ARCH32 \":%{!mtune=*:%{!mcpu=*:-mtune=%(VALUE)}}}\" }, \\\n+  {\"tune_64\", \"%{\" OPT_ARCH64 \":%{!mtune=*:%{!mcpu=*:-mtune=%(VALUE)}}}\" }, \\\n+  {\"cpu\", \"%{!mcpu=*:-mcpu=%(VALUE)}\" }, \\\n+  {\"cpu_32\", \"%{\" OPT_ARCH32 \":%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n+  {\"cpu_64\", \"%{\" OPT_ARCH64 \":%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n+  {\"float\", \"%{!msoft-float:%{!mhard-float:-m%(VALUE)-float}}\" }"}, {"sha": "e51162bf8e209e36666a83aee68de8d0a74f4064", "filename": "gcc/config/powerpcspe/paired.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpaired.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpaired.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpaired.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,75 @@\n+/* PowerPC 750CL user include file.\n+   Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+   Contributed by Revital Eres (eres@il.ibm.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _PAIRED_H\n+#define _PAIRED_H\n+\n+#define vector __attribute__((vector_size(8)))\n+\n+#define paired_msub __builtin_paired_msub\n+#define paired_madd __builtin_paired_madd\n+#define paired_nmsub __builtin_paired_nmsub\n+#define paired_nmadd __builtin_paired_nmadd\n+#define paired_sum0 __builtin_paired_sum0\n+#define paired_sum1 __builtin_paired_sum1\n+#define paired_div __builtin_paired_divv2sf3\n+#define paired_add __builtin_paired_addv2sf3\n+#define paired_sub __builtin_paired_subv2sf3\n+#define paired_mul __builtin_paired_mulv2sf3\n+#define paired_muls0 __builtin_paired_muls0\n+#define paired_muls1 __builtin_paired_muls1\n+#define paired_madds0 __builtin_paired_madds0\n+#define paired_madds1 __builtin_paired_madds1\n+#define paired_merge00 __builtin_paired_merge00\n+#define paired_merge01 __builtin_paired_merge01\n+#define paired_merge10 __builtin_paired_merge10\n+#define paired_merge11 __builtin_paired_merge11\n+#define paired_abs __builtin_paired_absv2sf2\n+#define paired_nabs __builtin_paired_nabsv2sf2\n+#define paired_neg __builtin_paired_negv2sf2\n+#define paired_sqrt __builtin_paired_sqrtv2sf2\n+#define paired_res __builtin_paired_resv2sf2\n+#define paired_stx __builtin_paired_stx\n+#define paired_lx __builtin_paired_lx\n+#define paired_cmpu0 __builtin_paired_cmpu0\n+#define paired_cmpu1 __builtin_paired_cmpu1\n+#define paired_sel __builtin_paired_selv2sf4\n+\n+/* Condition register codes for Paired predicates. */\n+#define LT            0\n+#define GT            1\n+#define EQ            2\n+#define UN            3\n+\n+#define paired_cmpu0_un(a,b) __builtin_paired_cmpu0 (UN, (a), (b))\n+#define paired_cmpu0_eq(a,b) __builtin_paired_cmpu0 (EQ, (a), (b))\n+#define paired_cmpu0_lt(a,b) __builtin_paired_cmpu0 (LT, (a), (b))\n+#define paired_cmpu0_gt(a,b) __builtin_paired_cmpu0 (GT, (a), (b))\n+#define paired_cmpu1_un(a,b) __builtin_paired_cmpu1 (UN, (a), (b))\n+#define paired_cmpu1_eq(a,b) __builtin_paired_cmpu1 (EQ, (a), (b))\n+#define paired_cmpu1_lt(a,b) __builtin_paired_cmpu1 (LT, (a), (b))\n+#define paired_cmpu1_gt(a,b) __builtin_paired_cmpu1 (GT, (a), (b))\n+\n+#endif /* _PAIRED_H */"}, {"sha": "09123eec8871ab44c738f86f5e5eee209b98f549", "filename": "gcc/config/powerpcspe/paired.md", "status": "added", "additions": 505, "deletions": 0, "changes": 505, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpaired.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,505 @@\n+;; PowerPC paired single and double hummer description\n+;; Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+;; Contributed by David Edelsohn <edelsohn@gnu.org> and Revital Eres\n+;; <eres@il.ibm.com>\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;; \n+;; You should have received a copy of the GNU General Public License\n+;; along with this program; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_c_enum \"unspec\"\n+  [UNSPEC_INTERHI_V2SF\n+   UNSPEC_INTERLO_V2SF\n+   UNSPEC_EXTEVEN_V2SF\n+   UNSPEC_EXTODD_V2SF\n+  ])\n+\n+(define_insn \"paired_negv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(neg:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_neg %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"sqrtv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(sqrt:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_rsqrte %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_absv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(abs:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_abs %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"nabsv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(neg:V2SF (abs:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_nabs %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_addv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(plus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_add %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_subv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (minus:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+                    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_sub %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_mulv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_mul %0,%1,%2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"resv2sf2\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n+  \"TARGET_PAIRED_FLOAT && flag_finite_math_only\"\n+  \"ps_res %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_divv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(div:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_div %0,%1,%2\"\n+  [(set_attr \"type\" \"sdiv\")])\n+\n+(define_insn \"paired_madds0\"\n+ [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+       (vec_concat:V2SF\n+\t (fma:SF\n+           (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 0)]))\n+\t   (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 0)]))\n+\t   (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 0)])))\n+\t (fma:SF\n+\t   (vec_select:SF (match_dup 1)\n+                          (parallel [(const_int 1)]))\n+\t   (vec_select:SF (match_dup 2)\n+                          (parallel [(const_int 0)]))\n+\t   (vec_select:SF (match_dup 3)\n+                          (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_madds0 %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_madds1\"\n+ [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+       (vec_concat:V2SF\n+         (fma:SF\n+\t   (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 0)]))\n+           (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 1)]))\n+           (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 0)])))\n+\t (fma:SF\n+\t   (vec_select:SF (match_dup 1)\n+                          (parallel [(const_int 1)]))\n+           (vec_select:SF (match_dup 2)\n+                          (parallel [(const_int 1)]))\n+           (vec_select:SF (match_dup 3)\n+                          (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_madds1 %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*paired_madd\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(fma:V2SF\n+\t  (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t  (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_madd %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")]) \n+\n+(define_insn \"*paired_msub\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(fma:V2SF\n+\t  (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t  (neg:V2SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_msub %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*paired_nmadd\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(neg:V2SF\n+\t  (fma:V2SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_nmadd %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*paired_nmsub\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(neg:V2SF\n+\t  (fma:V2SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t    (neg:V2SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_nmsub %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"dmul\")])\n+\n+(define_insn \"selv2sf4\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF\n+\t (if_then_else:SF (ge (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t\t     (parallel [(const_int 0)]))\n+\t\t\t      (match_operand:SF 4 \"zero_fp_constant\" \"F\"))\n+\t\t\t  (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t\t (parallel [(const_int 0)]))\n+\t\t\t  (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t\t (parallel [(const_int 0)])))\n+\t (if_then_else:SF (ge (vec_select:SF (match_dup 1)\n+\t\t\t\t\t     (parallel [(const_int 1)]))\n+\t\t\t      (match_dup 4))\n+\t\t\t  (vec_select:SF (match_dup 2)\n+\t\t\t\t\t (parallel [(const_int 1)]))\n+\t\t\t  (vec_select:SF (match_dup 3)\n+\t\t\t\t\t (parallel [(const_int 1)])))))]\n+\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_sel %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*movv2sf_paired\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=Z,f,f,Y,r,r,f\")\n+\t\t (match_operand:V2SF 1 \"input_operand\" \"f,Z,f,r,Y,r,W\"))]\n+  \"TARGET_PAIRED_FLOAT\n+   && (register_operand (operands[0], V2SFmode) \n+       || register_operand (operands[1], V2SFmode))\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0: return \"psq_stx %1,%y0,0,0\";\n+    case 1: return \"psq_lx %0,%y1,0,0\";\n+    case 2: return \"ps_mr %0,%1\";\n+    case 3: return \"#\";\n+    case 4: return \"#\";\n+    case 5: return \"#\";\n+    case 6: return \"#\"; \n+    default: gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"fpstore,fpload,fp,*,*,*,*\")])\n+\n+(define_insn \"paired_stx\"\n+  [(set (match_operand:V2SF 0 \"memory_operand\" \"=Z\")\n+        (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"psq_stx %1,%y0,0,0\"\n+  [(set_attr \"type\" \"fpstore\")])\n+\n+(define_insn \"paired_lx\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (match_operand:V2SF 1 \"memory_operand\" \"Z\"))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"psq_lx %0,%y1,0,0\"\n+  [(set_attr \"type\" \"fpload\")])\n+\n+\n+(define_split\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:V2SF 1 \"input_operand\" \"\"))]\n+  \"TARGET_PAIRED_FLOAT && reload_completed\n+   && gpr_or_gpr_p (operands[0], operands[1])\"\n+  [(pc)]\n+  {\n+  rs6000_split_multireg_move (operands[0], operands[1]); DONE;\n+  })\n+\n+(define_insn \"paired_cmpu0\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP (vec_select:SF\n+\t\t       (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t       (parallel [(const_int 0)]))\n+\t\t      (vec_select:SF\n+\t\t       (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t       (parallel [(const_int 0)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_cmpu0 %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"paired_cmpu1\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP (vec_select:SF\n+\t\t       (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t       (parallel [(const_int 1)]))\n+\t\t      (vec_select:SF\n+\t\t       (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t       (parallel [(const_int 1)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_cmpu1 %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n+(define_insn \"paired_merge00\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t  (parallel [(const_int 0) (const_int 2)])))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge00 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_merge01\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t  (parallel [(const_int 0) (const_int 3)])))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge01 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_merge10\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t  (parallel [(const_int 1) (const_int 2)])))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge10 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_merge11\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_select:V2SF\n+\t  (vec_concat:V4SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n+\t  (parallel [(const_int 1) (const_int 3)])))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge11 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_expand \"vec_perm_constv2sf\"\n+  [(match_operand:V2SF 0 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SF 1 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SF 2 \"gpc_reg_operand\" \"\")\n+   (match_operand:V2SI 3 \"\" \"\")]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  if (rs6000_expand_vec_perm_const (operands))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n+(define_insn \"paired_sum0\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF (plus:SF (vec_select:SF\n+\t\t\t\t   (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 0)]))\n+\t\t\t\t  (vec_select:SF\n+\t\t\t\t   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 1)])))\n+\t\t\t (vec_select:SF\n+\t\t\t  (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 1)]))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_sum0 %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_sum1\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF (vec_select:SF\n+\t\t\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 1)]))\n+\t\t\t (plus:SF (vec_select:SF\n+\t\t\t\t   (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 0)]))\n+\t\t\t\t  (vec_select:SF\n+\t\t\t\t   (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_sum1 %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"paired_muls0\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(mult:V2SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t   (vec_duplicate:V2SF\n+\t\t    (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 0)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_muls0 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+\n+(define_insn \"paired_muls1\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(mult:V2SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t   (vec_duplicate:V2SF\n+\t\t    (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t\t   (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_muls1 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_expand \"vec_initv2sf\"\n+  [(match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+   (match_operand 1 \"\" \"\")]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  paired_expand_vector_init (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_insn \"*vconcatsf\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (vec_concat:V2SF\n+         (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n+         (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge00 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_expand \"sminv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (smin:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+                   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+\n+  emit_insn (gen_subv2sf3 (tmp, operands[1], operands[2]));\n+  emit_insn (gen_selv2sf4 (operands[0], tmp, operands[2], operands[1], CONST0_RTX (SFmode)));\n+  DONE;\n+})\n+\n+(define_expand \"smaxv2sf3\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (smax:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+                   (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+\n+  emit_insn (gen_subv2sf3 (tmp, operands[1], operands[2]));\n+  emit_insn (gen_selv2sf4 (operands[0], tmp, operands[1], operands[2], CONST0_RTX (SFmode)));\n+  DONE;\n+})\n+\n+(define_expand \"reduc_smax_scal_v2sf\"\n+  [(match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+   (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  rtx tmp_swap = gen_reg_rtx (V2SFmode);\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  rtx vec_res = gen_reg_rtx (V2SFmode);\n+  rtx di_res = gen_reg_rtx (DImode);\n+\n+  emit_insn (gen_paired_merge10 (tmp_swap, operands[1], operands[1]));\n+  emit_insn (gen_subv2sf3 (tmp, operands[1], tmp_swap));\n+  emit_insn (gen_selv2sf4 (vec_res, tmp, operands[1], tmp_swap,\n+\t\t\t   CONST0_RTX (SFmode)));\n+  emit_move_insn (di_res, simplify_gen_subreg (DImode, vec_res, V2SFmode, 0));\n+  emit_move_insn (operands[0], simplify_gen_subreg (SFmode, di_res, DImode,\n+\t\t\t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0));\n+\n+  DONE;\n+})\n+\n+(define_expand \"reduc_smin_scal_v2sf\"\n+  [(match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+   (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  rtx tmp_swap = gen_reg_rtx (V2SFmode);\n+  rtx tmp = gen_reg_rtx (V2SFmode);\n+  rtx vec_res = gen_reg_rtx (V2SFmode);\n+  rtx di_res = gen_reg_rtx (DImode);\n+\n+  emit_insn (gen_paired_merge10 (tmp_swap, operands[1], operands[1]));\n+  emit_insn (gen_subv2sf3 (tmp, operands[1], tmp_swap));\n+  emit_insn (gen_selv2sf4 (vec_res, tmp, tmp_swap, operands[1],\n+\t\t\t   CONST0_RTX (SFmode)));\n+  emit_move_insn (di_res, simplify_gen_subreg (DImode, vec_res, V2SFmode, 0));\n+  emit_move_insn (operands[0], simplify_gen_subreg (SFmode, di_res, DImode,\n+\t\t\t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0));\n+\n+  DONE;\n+})\n+\n+(define_expand \"reduc_plus_scal_v2sf\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+        (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  rtx vec_res = gen_reg_rtx (V2SFmode);\n+  rtx di_res = gen_reg_rtx (DImode);\n+\n+  emit_insn (gen_paired_sum1 (vec_res, operands[1], operands[1], operands[1]));\n+  emit_move_insn (di_res, simplify_gen_subreg (DImode, vec_res, V2SFmode, 0));\n+  emit_move_insn (operands[0], simplify_gen_subreg (SFmode, di_res, DImode,\n+\t\t\t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0));\n+  DONE;\n+})\n+\n+(define_expand \"movmisalignv2sf\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:V2SF 1 \"any_operand\" \"\"))]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  paired_expand_vector_move (operands);\n+  DONE;\n+})\n+\n+(define_expand \"vcondv2sfv2sf\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (if_then_else:V2SF\n+         (match_operator 3 \"gpc_reg_operand\"\n+                         [(match_operand:V2SF 4 \"gpc_reg_operand\" \"f\")\n+                          (match_operand:V2SF 5 \"gpc_reg_operand\" \"f\")])\n+         (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+         (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT && flag_unsafe_math_optimizations\"\n+{\n+  if (paired_emit_vector_cond_expr (operands[0], operands[1], operands[2],\n+                                    operands[3], operands[4], operands[5]))\n+    DONE;\n+  else\n+    FAIL;\n+})"}, {"sha": "962e1699376d83eaa8d2a8ca5d0fbc0b3376c0f7", "filename": "gcc/config/powerpcspe/power4.md", "status": "added", "additions": 451, "deletions": 0, "changes": 451, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpower4.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,451 @@\n+;; Scheduling description for IBM Power4 and PowerPC 970 processors.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Sources: IBM Red Book and White Paper on POWER4\n+\n+;; The POWER4 has 2 iu, 2 fpu, 2 lsu per engine (2 engines per chip).\n+;; Instructions that update more than one register get broken into two\n+;; (split) or more internal ops.  The chip can issue up to 5\n+;; internal ops per cycle.\n+\n+(define_automaton \"power4iu,power4fpu,power4vec,power4misc\")\n+\n+(define_cpu_unit \"iu1_power4,iu2_power4\" \"power4iu\")\n+(define_cpu_unit \"lsu1_power4,lsu2_power4\" \"power4misc\")\n+(define_cpu_unit \"fpu1_power4,fpu2_power4\" \"power4fpu\")\n+(define_cpu_unit \"bpu_power4,cru_power4\" \"power4misc\")\n+(define_cpu_unit \"vec_power4,vecperm_power4\" \"power4vec\")\n+(define_cpu_unit \"du1_power4,du2_power4,du3_power4,du4_power4,du5_power4\"\n+\t\t \"power4misc\")\n+\n+(define_reservation \"lsq_power4\"\n+\t\t    \"(du1_power4,lsu1_power4)\\\n+\t\t    |(du2_power4,lsu2_power4)\\\n+\t\t    |(du3_power4,lsu2_power4)\\\n+\t\t    |(du4_power4,lsu1_power4)\")\n+\n+(define_reservation \"lsuq_power4\"\n+\t\t    \"((du1_power4+du2_power4,lsu1_power4)\\\n+\t\t      |(du2_power4+du3_power4,lsu2_power4)\\\n+\t\t      |(du3_power4+du4_power4,lsu2_power4))\\\n+                     +(nothing,iu2_power4|nothing,iu1_power4)\")\n+\n+(define_reservation \"iq_power4\"\n+\t\t    \"(du1_power4|du2_power4|du3_power4|du4_power4),\\\n+                     (iu1_power4|iu2_power4)\")\n+\n+(define_reservation \"fpq_power4\"\n+\t\t    \"(du1_power4|du2_power4|du3_power4|du4_power4),\\\n+                     (fpu1_power4|fpu2_power4)\")\n+\n+(define_reservation \"vq_power4\"\n+\t\t    \"(du1_power4,vec_power4)\\\n+\t\t    |(du2_power4,vec_power4)\\\n+\t\t    |(du3_power4,vec_power4)\\\n+\t\t    |(du4_power4,vec_power4)\")\n+\n+(define_reservation \"vpq_power4\"\n+\t\t    \"(du1_power4,vecperm_power4)\\\n+\t\t    |(du2_power4,vecperm_power4)\\\n+\t\t    |(du3_power4,vecperm_power4)\\\n+\t\t    |(du4_power4,vecperm_power4)\")\n+\n+\n+; Dispatch slots are allocated in order conforming to program order.\n+(absence_set \"du1_power4\" \"du2_power4,du3_power4,du4_power4,du5_power4\")\n+(absence_set \"du2_power4\" \"du3_power4,du4_power4,du5_power4\")\n+(absence_set \"du3_power4\" \"du4_power4,du5_power4\")\n+(absence_set \"du4_power4\" \"du5_power4\")\n+\n+\n+; Load/store\n+(define_insn_reservation \"power4-load\" 4 ; 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsq_power4\")\n+\n+(define_insn_reservation \"power4-load-ext\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4,lsu1_power4\\\n+    |du2_power4+du3_power4,lsu2_power4\\\n+    |du3_power4+du4_power4,lsu2_power4),\\\n+   nothing,nothing,\\\n+   (iu2_power4|iu1_power4)\")\n+\n+(define_insn_reservation \"power4-load-ext-update\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+   lsu1_power4+iu2_power4,nothing,nothing,iu2_power4\")\n+\n+(define_insn_reservation \"power4-load-ext-update-indexed\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+   iu1_power4,lsu2_power4+iu1_power4,nothing,nothing,iu2_power4\")\n+\n+(define_insn_reservation \"power4-load-update-indexed\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+   iu1_power4,lsu2_power4+iu2_power4\")\n+\n+(define_insn_reservation \"power4-load-update\" 4 ; 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsuq_power4\")\n+\n+(define_insn_reservation \"power4-fpload\" 6 ; 5\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsq_power4\")\n+\n+(define_insn_reservation \"power4-fpload-update\" 6 ; 5\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsuq_power4\")\n+\n+(define_insn_reservation \"power4-vecload\" 6 ; 5\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"lsq_power4\")\n+\n+(define_insn_reservation \"power4-store\" 12\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"((du1_power4,lsu1_power4)\\\n+    |(du2_power4,lsu2_power4)\\\n+    |(du3_power4,lsu2_power4)\\\n+    |(du4_power4,lsu1_power4)),\\\n+   (iu1_power4|iu2_power4)\")\n+\n+(define_insn_reservation \"power4-store-update\" 12\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"((du1_power4+du2_power4,lsu1_power4)\\\n+    |(du2_power4+du3_power4,lsu2_power4)\\\n+    |(du3_power4+du4_power4,lsu2_power4))+\\\n+   ((nothing,iu1_power4,iu2_power4)\\\n+    |(nothing,iu2_power4,iu2_power4)\\\n+    |(nothing,iu2_power4,iu1_power4))\")\n+\n+(define_insn_reservation \"power4-store-update-indexed\" 12\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power4\"))\n+   \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+    iu1_power4,lsu2_power4+iu2_power4,iu2_power4\")\n+\n+(define_insn_reservation \"power4-fpstore\" 12\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"((du1_power4,lsu1_power4)\\\n+    |(du2_power4,lsu2_power4)\\\n+    |(du3_power4,lsu2_power4)\\\n+    |(du4_power4,lsu1_power4)),\\\n+   (fpu1_power4|fpu2_power4)\")\n+\n+(define_insn_reservation \"power4-fpstore-update\" 12\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"((du1_power4+du2_power4,lsu1_power4)\\\n+    |(du2_power4+du3_power4,lsu2_power4)\\\n+    |(du3_power4+du4_power4,lsu2_power4))\\\n+   +(nothing,(iu1_power4|iu2_power4),(fpu1_power4|fpu2_power4))\")\n+\n+(define_insn_reservation \"power4-vecstore\" 12\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4,lsu1_power4,vec_power4)\\\n+  |(du2_power4,lsu2_power4,vec_power4)\\\n+  |(du3_power4,lsu2_power4,vec_power4)\\\n+  |(du4_power4,lsu1_power4,vec_power4)\")\n+\n+(define_insn_reservation \"power4-llsc\" 11\n+  (and (eq_attr \"type\" \"load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,lsu1_power4\")\n+\n+\n+; Integer latency is 2 cycles\n+(define_insn_reservation \"power4-integer\" 2\n+  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\"))\n+\t    (and (eq_attr \"type\" \"insert\")\n+\t\t (eq_attr \"size\" \"64\")))\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"iq_power4\")\n+\n+(define_insn_reservation \"power4-two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"((du1_power4+du2_power4)\\\n+    |(du2_power4+du3_power4)\\\n+    |(du3_power4+du4_power4)\\\n+    |(du4_power4+du1_power4)),\\\n+    ((iu1_power4,nothing,iu2_power4)\\\n+     |(iu2_power4,nothing,iu2_power4)\\\n+     |(iu2_power4,nothing,iu1_power4)\\\n+     |(iu1_power4,nothing,iu1_power4))\")\n+\n+(define_insn_reservation \"power4-three\" 2\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4+du3_power4|du2_power4+du3_power4+du4_power4\\\n+    |du3_power4+du4_power4+du1_power4|du4_power4+du1_power4+du2_power4),\\\n+   ((iu1_power4,nothing,iu2_power4,nothing,iu2_power4)\\\n+    |(iu2_power4,nothing,iu2_power4,nothing,iu1_power4)\\\n+    |(iu2_power4,nothing,iu1_power4,nothing,iu1_power4)\\\n+    |(iu1_power4,nothing,iu1_power4,nothing,iu2_power4))\")\n+\n+(define_insn_reservation \"power4-insert\" 4\n+  (and (eq_attr \"type\" \"insert\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4|du2_power4+du3_power4|du3_power4+du4_power4),\\\n+   ((iu1_power4,nothing,iu2_power4)\\\n+    |(iu2_power4,nothing,iu2_power4)\\\n+    |(iu2_power4,nothing,iu1_power4))\")\n+\n+(define_insn_reservation \"power4-cmp\" 3\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"iq_power4\")\n+\n+(define_insn_reservation \"power4-compare\" 2\n+  (and (eq_attr \"type\" \"shift,exts\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4|du2_power4+du3_power4|du3_power4+du4_power4),\\\n+   ((iu1_power4,iu2_power4)\\\n+    |(iu2_power4,iu2_power4)\\\n+    |(iu2_power4,iu1_power4))\")\n+\n+(define_bypass 4 \"power4-compare\" \"power4-branch,power4-crlogical,power4-delayedcr,power4-mfcr,power4-mfcrf\")\n+\n+(define_insn_reservation \"power4-lmul-cmp\" 7\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4|du2_power4+du3_power4|du3_power4+du4_power4),\\\n+   ((iu1_power4*6,iu2_power4)\\\n+    |(iu2_power4*6,iu2_power4)\\\n+    |(iu2_power4*6,iu1_power4))\")\n+\n+(define_bypass 10 \"power4-lmul-cmp\" \"power4-branch,power4-crlogical,power4-delayedcr,power4-mfcr,power4-mfcrf\")\n+\n+(define_insn_reservation \"power4-imul-cmp\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4+du2_power4|du2_power4+du3_power4|du3_power4+du4_power4),\\\n+   ((iu1_power4*4,iu2_power4)\\\n+    |(iu2_power4*4,iu2_power4)\\\n+    |(iu2_power4*4,iu1_power4))\")\n+\n+(define_bypass 8 \"power4-imul-cmp\" \"power4-branch,power4-crlogical,power4-delayedcr,power4-mfcr,power4-mfcrf\")\n+\n+(define_insn_reservation \"power4-lmul\" 7\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4|du2_power4|du3_power4|du4_power4),\\\n+   (iu1_power4*6|iu2_power4*6)\")\n+\n+(define_insn_reservation \"power4-imul\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4|du2_power4|du3_power4|du4_power4),\\\n+   (iu1_power4*4|iu2_power4*4)\")\n+\n+(define_insn_reservation \"power4-imul3\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8,16\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4|du2_power4|du3_power4|du4_power4),\\\n+   (iu1_power4*3|iu2_power4*3)\")\n+\n+\n+; SPR move only executes in first IU.\n+; Integer division only executes in second IU.\n+(define_insn_reservation \"power4-idiv\" 36\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4,iu2_power4*35\")\n+\n+(define_insn_reservation \"power4-ldiv\" 68\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4,iu2_power4*67\")\n+\n+\n+(define_insn_reservation \"power4-mtjmpr\" 3\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4,bpu_power4\")\n+\n+\n+; Branches take dispatch Slot 4.  The presence_sets prevent other insn from\n+; grabbing previous dispatch slots once this is assigned.\n+(define_insn_reservation \"power4-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du5_power4\\\n+   |du4_power4+du5_power4\\\n+   |du3_power4+du4_power4+du5_power4\\\n+   |du2_power4+du3_power4+du4_power4+du5_power4\\\n+   |du1_power4+du2_power4+du3_power4+du4_power4+du5_power4),bpu_power4\")\n+\n+\n+; Condition Register logical ops are split if non-destructive (RT != RB)\n+(define_insn_reservation \"power4-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4,cru_power4\")\n+\n+(define_insn_reservation \"power4-delayedcr\" 4\n+  (and (eq_attr \"type\" \"delayed_cr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4,cru_power4,cru_power4\")\n+\n+; 4 mfcrf (each 3 cyc, 1/cyc) + 3 fxu\n+(define_insn_reservation \"power4-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,\\\n+   du1_power4+du2_power4+du3_power4+du4_power4+cru_power4,\\\n+   cru_power4,cru_power4,cru_power4\")\n+\n+; mfcrf (1 field)\n+(define_insn_reservation \"power4-mfcrf\" 3\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4,cru_power4\")\n+\n+; mtcrf (1 field)\n+(define_insn_reservation \"power4-mtcr\" 4\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4,iu1_power4\")\n+\n+; Basic FP latency is 6 cycles\n+(define_insn_reservation \"power4-fp\" 6\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"fpq_power4\")\n+\n+(define_insn_reservation \"power4-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"fpq_power4\")\n+\n+(define_insn_reservation \"power4-sdiv\" 33\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4|du2_power4|du3_power4|du4_power4),\\\n+   (fpu1_power4*28|fpu2_power4*28)\")\n+\n+(define_insn_reservation \"power4-sqrt\" 40\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"(du1_power4|du2_power4|du3_power4|du4_power4),\\\n+   (fpu1_power4*35|fpu2_power4*35)\")\n+\n+(define_insn_reservation \"power4-isync\" 2\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"du1_power4+du2_power4+du3_power4+du4_power4,lsu1_power4\")\n+\n+\n+; VMX\n+(define_insn_reservation \"power4-vecsimple\" 2\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vq_power4\")\n+\n+(define_insn_reservation \"power4-veccomplex\" 5\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vq_power4\")\n+\n+; vecfp compare\n+(define_insn_reservation \"power4-veccmp\" 8\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vq_power4\")\n+\n+(define_insn_reservation \"power4-vecfloat\" 8\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vq_power4\")\n+\n+(define_insn_reservation \"power4-vecperm\" 2\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  \"vpq_power4\")\n+\n+(define_bypass 4 \"power4-vecload\" \"power4-vecperm\")\n+\n+(define_bypass 3 \"power4-vecsimple\" \"power4-vecperm\")\n+(define_bypass 6 \"power4-veccomplex\" \"power4-vecperm\")\n+(define_bypass 3 \"power4-vecperm\"\n+\t\t \"power4-vecsimple,power4-veccomplex,power4-vecfloat\")\n+(define_bypass 9 \"power4-vecfloat\" \"power4-vecperm\")\n+\n+(define_bypass 5 \"power4-vecsimple,power4-veccomplex\"\n+\t\t \"power4-branch,power4-crlogical,power4-delayedcr,power4-mfcr,power4-mfcrf\")\n+\n+(define_bypass 4 \"power4-vecsimple,power4-vecperm\" \"power4-vecstore\")\n+(define_bypass 7 \"power4-veccomplex\" \"power4-vecstore\")\n+(define_bypass 10 \"power4-vecfloat\" \"power4-vecstore\")"}, {"sha": "6c3ed7fe58145d6ccbba87081ec8e81eb5af18e7", "filename": "gcc/config/powerpcspe/power5.md", "status": "added", "additions": 351, "deletions": 0, "changes": 351, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpower5.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,351 @@\n+;; Scheduling description for IBM POWER5 processor.\n+;;   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Sources: IBM Red Book and White Paper on POWER5\n+\n+;; The POWER5 has 2 iu, 2 fpu, 2 lsu per engine (2 engines per chip).\n+;; Instructions that update more than one register get broken into two\n+;; (split) or more internal ops.  The chip can issue up to 5\n+;; internal ops per cycle.\n+\n+(define_automaton \"power5iu,power5fpu,power5misc\")\n+\n+(define_cpu_unit \"iu1_power5,iu2_power5\" \"power5iu\")\n+(define_cpu_unit \"lsu1_power5,lsu2_power5\" \"power5misc\")\n+(define_cpu_unit \"fpu1_power5,fpu2_power5\" \"power5fpu\")\n+(define_cpu_unit \"bpu_power5,cru_power5\" \"power5misc\")\n+(define_cpu_unit \"du1_power5,du2_power5,du3_power5,du4_power5,du5_power5\"\n+\t\t \"power5misc\")\n+\n+(define_reservation \"lsq_power5\"\n+\t\t    \"(du1_power5,lsu1_power5)\\\n+\t\t    |(du2_power5,lsu2_power5)\\\n+\t\t    |(du3_power5,lsu2_power5)\\\n+\t\t    |(du4_power5,lsu1_power5)\")\n+\n+(define_reservation \"iq_power5\"\n+\t\t    \"(du1_power5|du2_power5|du3_power5|du4_power5),\\\n+                     (iu1_power5|iu2_power5)\")\n+\n+(define_reservation \"fpq_power5\"\n+\t\t    \"(du1_power5|du2_power5|du3_power5|du4_power5),\\\n+                     (fpu1_power5|fpu2_power5)\")\n+\n+; Dispatch slots are allocated in order conforming to program order.\n+(absence_set \"du1_power5\" \"du2_power5,du3_power5,du4_power5,du5_power5\")\n+(absence_set \"du2_power5\" \"du3_power5,du4_power5,du5_power5\")\n+(absence_set \"du3_power5\" \"du4_power5,du5_power5\")\n+(absence_set \"du4_power5\" \"du5_power5\")\n+\n+\n+; Load/store\n+(define_insn_reservation \"power5-load\" 4 ; 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"lsq_power5\")\n+\n+(define_insn_reservation \"power5-load-ext\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5,nothing,nothing,iu2_power5\")\n+\n+(define_insn_reservation \"power5-load-ext-update\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+   lsu1_power5+iu2_power5,nothing,nothing,iu2_power5\")\n+\n+(define_insn_reservation \"power5-load-ext-update-indexed\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+   iu1_power5,lsu2_power5+iu1_power5,nothing,nothing,iu2_power5\")\n+\n+(define_insn_reservation \"power5-load-update-indexed\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+   iu1_power5,lsu2_power5+iu2_power5\")\n+\n+(define_insn_reservation \"power5-load-update\" 4 ; 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5+iu2_power5\")\n+\n+(define_insn_reservation \"power5-fpload\" 6 ; 5\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"lsq_power5\")\n+\n+(define_insn_reservation \"power5-fpload-update\" 6 ; 5\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5+iu2_power5\")\n+\n+(define_insn_reservation \"power5-store\" 12\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"((du1_power5,lsu1_power5)\\\n+    |(du2_power5,lsu2_power5)\\\n+    |(du3_power5,lsu2_power5)\\\n+    |(du4_power5,lsu1_power5)),\\\n+    (iu1_power5|iu2_power5)\")\n+\n+(define_insn_reservation \"power5-store-update\" 12\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5+iu2_power5,iu1_power5\")\n+\n+(define_insn_reservation \"power5-store-update-indexed\" 12\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power5\"))\n+   \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+    iu1_power5,lsu2_power5+iu2_power5,iu2_power5\")\n+\n+(define_insn_reservation \"power5-fpstore\" 12\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"((du1_power5,lsu1_power5)\\\n+    |(du2_power5,lsu2_power5)\\\n+    |(du3_power5,lsu2_power5)\\\n+    |(du4_power5,lsu1_power5)),\\\n+    (fpu1_power5|fpu2_power5)\")\n+\n+(define_insn_reservation \"power5-fpstore-update\" 12\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5+iu2_power5,fpu1_power5\")\n+\n+(define_insn_reservation \"power5-llsc\" 11\n+  (and (eq_attr \"type\" \"load_l,store_c,sync\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+  lsu1_power5\")\n+\n+\n+; Integer latency is 2 cycles\n+(define_insn_reservation \"power5-integer\" 2\n+  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,isel,popcnt\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\"))\n+\t    (and (eq_attr \"type\" \"insert\")\n+\t\t (eq_attr \"size\" \"64\")))\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"iq_power5\")\n+\n+(define_insn_reservation \"power5-two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"((du1_power5+du2_power5)\\\n+    |(du2_power5+du3_power5)\\\n+    |(du3_power5+du4_power5)\\\n+    |(du4_power5+du1_power5)),\\\n+    ((iu1_power5,nothing,iu2_power5)\\\n+     |(iu2_power5,nothing,iu2_power5)\\\n+     |(iu2_power5,nothing,iu1_power5)\\\n+     |(iu1_power5,nothing,iu1_power5))\")\n+\n+(define_insn_reservation \"power5-three\" 2\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5+du2_power5+du3_power5|du2_power5+du3_power5+du4_power5\\\n+    |du3_power5+du4_power5+du1_power5|du4_power5+du1_power5+du2_power5),\\\n+   ((iu1_power5,nothing,iu2_power5,nothing,iu2_power5)\\\n+    |(iu2_power5,nothing,iu2_power5,nothing,iu1_power5)\\\n+    |(iu2_power5,nothing,iu1_power5,nothing,iu1_power5)\\\n+    |(iu1_power5,nothing,iu2_power5,nothing,iu2_power5))\")\n+\n+(define_insn_reservation \"power5-insert\" 4\n+  (and (eq_attr \"type\" \"insert\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu1_power5,nothing,iu2_power5\")\n+\n+(define_insn_reservation \"power5-cmp\" 3\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"iq_power5\")\n+\n+(define_insn_reservation \"power5-compare\" 2\n+  (and (eq_attr \"type\" \"shift,exts\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu1_power5,iu2_power5\")\n+\n+(define_bypass 4 \"power5-compare\" \"power5-branch,power5-crlogical,power5-delayedcr,power5-mfcr,power5-mfcrf\")\n+\n+(define_insn_reservation \"power5-lmul-cmp\" 7\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu1_power5*6,iu2_power5\")\n+\n+(define_bypass 10 \"power5-lmul-cmp\" \"power5-branch,power5-crlogical,power5-delayedcr,power5-mfcr,power5-mfcrf\")\n+\n+(define_insn_reservation \"power5-imul-cmp\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu1_power5*4,iu2_power5\")\n+\n+(define_bypass 8 \"power5-imul-cmp\" \"power5-branch,power5-crlogical,power5-delayedcr,power5-mfcr,power5-mfcrf\")\n+\n+(define_insn_reservation \"power5-lmul\" 7\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5|du2_power5|du3_power5|du4_power5),(iu1_power5*6|iu2_power5*6)\")\n+\n+(define_insn_reservation \"power5-imul\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5|du2_power5|du3_power5|du4_power5),(iu1_power5*4|iu2_power5*4)\")\n+\n+(define_insn_reservation \"power5-imul3\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8,16\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5|du2_power5|du3_power5|du4_power5),(iu1_power5*3|iu2_power5*3)\")\n+\n+\n+; SPR move only executes in first IU.\n+; Integer division only executes in second IU.\n+(define_insn_reservation \"power5-idiv\" 36\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu2_power5*35\")\n+\n+(define_insn_reservation \"power5-ldiv\" 68\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu2_power5*67\")\n+\n+\n+(define_insn_reservation \"power5-mtjmpr\" 3\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5,bpu_power5\")\n+\n+\n+; Branches take dispatch Slot 4.  The presence_sets prevent other insn from\n+; grabbing previous dispatch slots once this is assigned.\n+(define_insn_reservation \"power5-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du5_power5\\\n+   |du4_power5+du5_power5\\\n+   |du3_power5+du4_power5+du5_power5\\\n+   |du2_power5+du3_power5+du4_power5+du5_power5\\\n+   |du1_power5+du2_power5+du3_power5+du4_power5+du5_power5),bpu_power5\")\n+\n+\n+; Condition Register logical ops are split if non-destructive (RT != RB)\n+(define_insn_reservation \"power5-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5,cru_power5\")\n+\n+(define_insn_reservation \"power5-delayedcr\" 4\n+  (and (eq_attr \"type\" \"delayed_cr\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,cru_power5,cru_power5\")\n+\n+; 4 mfcrf (each 3 cyc, 1/cyc) + 3 fxu\n+(define_insn_reservation \"power5-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+   du1_power5+du2_power5+du3_power5+du4_power5+cru_power5,\\\n+   cru_power5,cru_power5,cru_power5\")\n+\n+; mfcrf (1 field)\n+(define_insn_reservation \"power5-mfcrf\" 3\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5,cru_power5\")\n+\n+; mtcrf (1 field)\n+(define_insn_reservation \"power5-mtcr\" 4\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5,iu1_power5\")\n+\n+; Basic FP latency is 6 cycles\n+(define_insn_reservation \"power5-fp\" 6\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"fpq_power5\")\n+\n+(define_insn_reservation \"power5-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"fpq_power5\")\n+\n+(define_insn_reservation \"power5-sdiv\" 33\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5|du2_power5|du3_power5|du4_power5),\\\n+   (fpu1_power5*28|fpu2_power5*28)\")\n+\n+(define_insn_reservation \"power5-sqrt\" 40\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5|du2_power5|du3_power5|du4_power5),\\\n+   (fpu1_power5*35|fpu2_power5*35)\")\n+\n+(define_insn_reservation \"power5-isync\" 2 \n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+  lsu1_power5\")\n+"}, {"sha": "0d81cdebda525a4c4c93900ad92eee94866996ad", "filename": "gcc/config/powerpcspe/power6.md", "status": "added", "additions": 629, "deletions": 0, "changes": 629, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpower6.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,629 @@\n+;; Scheduling description for IBM POWER6 processor.\n+;;   Copyright (C) 2006-2017 Free Software Foundation, Inc.\n+;;   Contributed by Peter Steinmetz (steinmtz@us.ibm.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Sources:\n+\n+;; The POWER6 has 2 iu, 2 fpu, 2 lsu, and 1 bu/cru unit per engine \n+;; (2 engines per chip).  The chip can issue up to 5 internal ops \n+;; per cycle.\n+\n+(define_automaton \"power6iu,power6lsu,power6fpu,power6bu\")\n+\n+(define_cpu_unit \"iu1_power6,iu2_power6\" \"power6iu\")\n+(define_cpu_unit \"lsu1_power6,lsu2_power6\" \"power6lsu\")\n+(define_cpu_unit \"bpu_power6\" \"power6bu\")\n+(define_cpu_unit \"fpu1_power6,fpu2_power6\" \"power6fpu\")\n+\n+(define_reservation \"LS2_power6\"\n+                    \"lsu1_power6+lsu2_power6\")\n+\n+(define_reservation \"FPU_power6\"\n+                    \"fpu1_power6|fpu2_power6\")\n+\n+(define_reservation \"BRU_power6\"\n+                    \"bpu_power6\")\n+\n+(define_reservation \"LSU_power6\"\n+                    \"lsu1_power6|lsu2_power6\")\n+\n+(define_reservation \"LSF_power6\"\n+                    \"(lsu1_power6+fpu1_power6)\\\n+                    |(lsu1_power6+fpu2_power6)\\\n+                    |(lsu2_power6+fpu1_power6)\\\n+                    |(lsu2_power6+fpu2_power6)\")\n+\n+(define_reservation \"LX2_power6\"\n+                    \"(iu1_power6+iu2_power6+lsu1_power6)\\\n+                    |(iu1_power6+iu2_power6+lsu2_power6)\")\n+\n+(define_reservation \"FX2_power6\"\n+                    \"iu1_power6+iu2_power6\")\n+\n+(define_reservation \"X2F_power6\"\n+                    \"(iu1_power6+iu2_power6+fpu1_power6)\\\n+                    |(iu1_power6+iu2_power6+fpu2_power6)\")\n+\n+(define_reservation \"BX2_power6\"\n+                    \"iu1_power6+iu2_power6+bpu_power6\")\n+\n+(define_reservation \"LSX_power6\"\n+                    \"(iu1_power6+lsu1_power6)\\\n+                    |(iu1_power6+lsu2_power6)\\\n+                    |(iu2_power6+lsu1_power6)\\\n+                    |(iu2_power6+lsu2_power6)\")\n+\n+(define_reservation \"FXU_power6\"\n+                    \"iu1_power6|iu2_power6\")\n+\n+(define_reservation \"XLF_power6\"\n+                    \"(iu1_power6+lsu1_power6+fpu1_power6)\\\n+                    |(iu1_power6+lsu1_power6+fpu2_power6)\\\n+                    |(iu1_power6+lsu2_power6+fpu1_power6)\\\n+                    |(iu1_power6+lsu2_power6+fpu2_power6)\\\n+                    |(iu2_power6+lsu1_power6+fpu1_power6)\\\n+                    |(iu2_power6+lsu1_power6+fpu2_power6)\\\n+                    |(iu2_power6+lsu2_power6+fpu1_power6)\\\n+                    |(iu2_power6+lsu2_power6+fpu2_power6)\")\n+\n+(define_reservation \"BRX_power6\"\n+                    \"(bpu_power6+iu1_power6)\\\n+                    |(bpu_power6+iu2_power6)\")\n+\n+; Load/store\n+\n+; The default for a value written by a fixed point load\n+; that is read/written by a subsequent fixed point op.\n+(define_insn_reservation \"power6-load\" 2 ; fx\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+; define the bypass for the case where the value written\n+; by a fixed point load is used as the source value on\n+; a store.\n+(define_bypass 1 \"power6-load,\\\n+                  power6-load-update,\\\n+                  power6-load-update-indexed\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-load-ext\" 4 ; fx\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+; define the bypass for the case where the value written\n+; by a fixed point load ext is used as the source value on\n+; a store.\n+(define_bypass 1 \"power6-load-ext,\\\n+                  power6-load-ext-update,\\\n+\t          power6-load-ext-update-indexed\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-load-update\" 2 ; fx\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-load-update-indexed\" 2 ; fx\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-load-ext-update\" 4 ; fx\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-load-ext-update-indexed\" 4 ; fx\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-fpload\" 1\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+(define_insn_reservation \"power6-fpload-update\" 1\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-store\" 14\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+(define_insn_reservation \"power6-store-update\" 14\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-store-update-indexed\" 14\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LX2_power6\")\n+\n+(define_insn_reservation \"power6-fpstore\" 14\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSF_power6\")\n+\n+(define_insn_reservation \"power6-fpstore-update\" 14\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"XLF_power6\")\n+\n+(define_insn_reservation \"power6-larx\" 3\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LS2_power6\")\n+\n+(define_insn_reservation \"power6-stcx\" 10 ; best case\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSX_power6\")\n+\n+(define_insn_reservation \"power6-sync\" 11 ; N/A\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+(define_insn_reservation \"power6-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer\")\n+\t    (and (eq_attr \"type\" \"add,logical\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-isel\" 1\n+  (and (eq_attr \"type\" \"isel\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-exts\" 1\n+  (and (eq_attr \"type\" \"exts\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-shift\" 1\n+  (and (eq_attr \"type\" \"shift\")\n+       (eq_attr \"var_shift\" \"no\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-popcnt\" 1\n+  (and (eq_attr \"type\" \"popcnt\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-insert\" 1\n+  (and (eq_attr \"type\" \"insert\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FX2_power6\")\n+\n+(define_insn_reservation \"power6-insert-dword\" 1\n+  (and (eq_attr \"type\" \"insert\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FX2_power6\")\n+\n+; define the bypass for the case where the value written\n+; by a fixed point op is used as the source value on a\n+; store.\n+(define_bypass 1 \"power6-integer,\\\n+                  power6-exts,\\\n+                  power6-shift,\\\n+                  power6-insert,\\\n+                  power6-insert-dword\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-cntlz\" 2\n+  (and (eq_attr \"type\" \"cntlz\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_bypass 1 \"power6-cntlz\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-var-rotate\" 4\n+  (and (eq_attr \"type\" \"shift\")\n+       (eq_attr \"var_shift\" \"yes\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-trap\" 1 ; N/A\n+  (and (eq_attr \"type\" \"trap\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BRX_power6\")\n+\n+(define_insn_reservation \"power6-two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6,iu1_power6)\\\n+  |(iu1_power6+iu2_power6,nothing)\\\n+  |(iu1_power6,iu2_power6)\\\n+  |(iu2_power6,iu1_power6)\\\n+  |(iu2_power6,iu2_power6)\")\n+\n+(define_insn_reservation \"power6-three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6,iu1_power6,iu1_power6)\\\n+  |(iu1_power6,iu1_power6,iu2_power6)\\\n+  |(iu1_power6,iu2_power6,iu1_power6)\\\n+  |(iu1_power6,iu2_power6,iu2_power6)\\\n+  |(iu2_power6,iu1_power6,iu1_power6)\\\n+  |(iu2_power6,iu1_power6,iu2_power6)\\\n+  |(iu2_power6,iu2_power6,iu1_power6)\\\n+  |(iu2_power6,iu2_power6,iu2_power6)\\\n+  |(iu1_power6+iu2_power6,iu1_power6)\\\n+  |(iu1_power6+iu2_power6,iu2_power6)\\\n+  |(iu1_power6,iu1_power6+iu2_power6)\\\n+  |(iu2_power6,iu1_power6+iu2_power6)\")\n+\n+(define_insn_reservation \"power6-cmp\" 1\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-compare\" 1\n+  (and (eq_attr \"type\" \"exts\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-fast-compare\" 1\n+  (and (eq_attr \"type\" \"add,logical\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+; define the bypass for the case where the value written\n+; by a fixed point rec form op is used as the source value\n+; on a store.\n+(define_bypass 1 \"power6-compare,\\\n+                  power6-fast-compare\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-delayed-compare\" 2 ; N/A\n+  (and (eq_attr \"type\" \"shift\")\n+       (eq_attr \"var_shift\" \"no\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-var-delayed-compare\" 4\n+  (and (eq_attr \"type\" \"shift\")\n+       (eq_attr \"var_shift\" \"yes\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-lmul-cmp\" 16\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_insn_reservation \"power6-imul-cmp\" 16\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_insn_reservation \"power6-lmul\" 16\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_insn_reservation \"power6-imul\" 16\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_insn_reservation \"power6-imul3\" 16\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"size\" \"8,16\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*16+iu2_power6*16+fpu1_power6*16)\\\n+  |(iu1_power6*16+iu2_power6*16+fpu2_power6*16)\");\n+\n+(define_bypass 9 \"power6-imul,\\\n+                  power6-lmul,\\\n+                  power6-imul-cmp,\\\n+                  power6-lmul-cmp,\\\n+                  power6-imul3\"\n+                 \"power6-store,\\\n+                  power6-store-update,\\\n+                  power6-store-update-indexed,\\\n+                  power6-fpstore,\\\n+                  power6-fpstore-update\"\n+  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-idiv\" 44\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*44+iu2_power6*44+fpu1_power6*44)\\\n+  |(iu1_power6*44+iu2_power6*44+fpu2_power6*44)\");\n+\n+; The latency for this bypass is yet to be defined\n+;(define_bypass ? \"power6-idiv\"\n+;                 \"power6-store,\\\n+;                  power6-store-update,\\\n+;                  power6-store-update-indexed,\\\n+;                  power6-fpstore,\\\n+;                  power6-fpstore-update\"\n+;  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-ldiv\" 56\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"(iu1_power6*56+iu2_power6*56+fpu1_power6*56)\\\n+  |(iu1_power6*56+iu2_power6*56+fpu2_power6*56)\");\n+\n+; The latency for this bypass is yet to be defined\n+;(define_bypass ? \"power6-ldiv\"\n+;                 \"power6-store,\\\n+;                  power6-store-update,\\\n+;                  power6-store-update-indexed,\\\n+;                  power6-fpstore,\\\n+;                  power6-fpstore-update\"\n+;  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-mtjmpr\" 2\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BX2_power6\")\n+\n+(define_bypass 5 \"power6-mtjmpr\" \"power6-branch\")\n+\n+(define_insn_reservation \"power6-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BRU_power6\")\n+\n+(define_bypass 5 \"power6-branch\" \"power6-mtjmpr\")\n+\n+(define_insn_reservation \"power6-crlogical\" 3\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BRU_power6\")\n+\n+(define_bypass 3 \"power6-crlogical\" \"power6-branch\")\n+\n+(define_insn_reservation \"power6-delayedcr\" 3\n+  (and (eq_attr \"type\" \"delayed_cr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BRU_power6\")\n+\n+(define_insn_reservation \"power6-mfcr\" 6 ; N/A\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BX2_power6\")\n+\n+; mfcrf (1 field)\n+(define_insn_reservation \"power6-mfcrf\" 3 ; N/A\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BX2_power6\") ;\n+\n+; mtcrf (1 field)\n+(define_insn_reservation \"power6-mtcr\" 4 ; N/A\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"BX2_power6\")\n+\n+(define_bypass 9 \"power6-mtcr\" \"power6-branch\")\n+\n+(define_insn_reservation \"power6-fp\" 6\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul,dfp\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+; Any fp instruction that updates a CR has a latency\n+; of 6 to a dependent branch\n+(define_bypass 6 \"power6-fp\" \"power6-branch\")\n+\n+(define_bypass 1 \"power6-fp\"\n+                 \"power6-fpstore,power6-fpstore-update\"\n+  \"rs6000_store_data_bypass_p\")\n+\n+(define_insn_reservation \"power6-fpcompare\" 8\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 12 \"power6-fpcompare\"\n+                  \"power6-branch,power6-crlogical\")\n+\n+(define_insn_reservation \"power6-sdiv\" 26\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_insn_reservation \"power6-ddiv\" 32\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_insn_reservation \"power6-sqrt\" 30\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_insn_reservation \"power6-dsqrt\" 42\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_insn_reservation \"power6-isync\" 2 ; N/A \n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FXU_power6\")\n+\n+(define_insn_reservation \"power6-vecload\" 1\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSU_power6\")\n+\n+(define_insn_reservation \"power6-vecstore\" 1\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LSF_power6\")\n+\n+(define_insn_reservation \"power6-vecsimple\" 3\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 6 \"power6-vecsimple\" \"power6-veccomplex,\\\n+                                     power6-vecperm\")\n+\n+(define_bypass 5 \"power6-vecsimple\" \"power6-vecfloat\")\n+\n+(define_bypass 4 \"power6-vecsimple\" \"power6-vecstore\" )\n+\n+(define_insn_reservation \"power6-veccmp\" 1\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 10 \"power6-veccmp\" \"power6-branch\")\n+\n+(define_insn_reservation \"power6-vecfloat\" 7\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 10 \"power6-vecfloat\" \"power6-vecsimple\")\n+\n+(define_bypass 11 \"power6-vecfloat\" \"power6-veccomplex,\\\n+                                     power6-vecperm\")\n+\n+(define_bypass 9 \"power6-vecfloat\" \"power6-vecstore\" )\n+\n+(define_insn_reservation \"power6-veccomplex\" 7\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 10 \"power6-veccomplex\" \"power6-vecsimple,\\\n+                                       power6-vecfloat\" )\n+\n+(define_bypass 9 \"power6-veccomplex\" \"power6-vecperm\" )\n+\n+(define_bypass 8 \"power6-veccomplex\" \"power6-vecstore\" )\n+\n+(define_insn_reservation \"power6-vecperm\" 4\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"FPU_power6\")\n+\n+(define_bypass 7 \"power6-vecperm\" \"power6-vecsimple,\\\n+                                   power6-vecfloat\" )\n+\n+(define_bypass 6 \"power6-vecperm\" \"power6-veccomplex\" )\n+\n+(define_bypass 5 \"power6-vecperm\" \"power6-vecstore\" )\n+\n+(define_insn_reservation \"power6-mftgpr\" 8\n+  (and (eq_attr \"type\" \"mftgpr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"X2F_power6\")\n+\n+(define_insn_reservation \"power6-mffgpr\" 14\n+  (and (eq_attr \"type\" \"mffgpr\")\n+       (eq_attr \"cpu\" \"power6\"))\n+  \"LX2_power6\")\n+\n+(define_bypass 4 \"power6-mftgpr\" \"power6-imul,\\\n+                                  power6-lmul,\\\n+                                  power6-imul-cmp,\\\n+                                  power6-lmul-cmp,\\\n+                                  power6-imul3,\\\n+                                  power6-idiv,\\\n+                                  power6-ldiv\" )"}, {"sha": "723a7950bb35a979016dcd0302bff57d0c60c958", "filename": "gcc/config/powerpcspe/power7.md", "status": "added", "additions": 366, "deletions": 0, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpower7.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,366 @@\n+;; Scheduling description for IBM POWER7 processor.\n+;; Copyright (C) 2009-2017 Free Software Foundation, Inc.\n+;;\n+;; Contributed by Pat Haugen (pthaugen@us.ibm.com).\n+\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"power7iu,power7lsu,power7vsu,power7misc\")\n+\n+(define_cpu_unit \"iu1_power7,iu2_power7\" \"power7iu\")\n+(define_cpu_unit \"lsu1_power7,lsu2_power7\" \"power7lsu\")\n+(define_cpu_unit \"vsu1_power7,vsu2_power7\" \"power7vsu\")\n+(define_cpu_unit \"bpu_power7,cru_power7\" \"power7misc\")\n+(define_cpu_unit \"du1_power7,du2_power7,du3_power7,du4_power7,du5_power7\"\n+                 \"power7misc\")\n+\n+\n+(define_reservation \"DU_power7\"\n+\t\t    \"du1_power7|du2_power7|du3_power7|du4_power7\")\n+\n+(define_reservation \"DU2F_power7\"\n+\t\t    \"du1_power7+du2_power7\")\n+\n+(define_reservation \"DU4_power7\"\n+\t\t    \"du1_power7+du2_power7+du3_power7+du4_power7\")\n+\n+(define_reservation \"FXU_power7\"\n+                    \"iu1_power7|iu2_power7\")\n+\n+(define_reservation \"VSU_power7\"\n+                    \"vsu1_power7|vsu2_power7\")\n+\n+(define_reservation \"LSU_power7\"\n+                    \"lsu1_power7|lsu2_power7\")\n+\n+\n+; Dispatch slots are allocated in order conforming to program order.\n+(absence_set \"du1_power7\" \"du2_power7,du3_power7,du4_power7,du5_power7\")\n+(absence_set \"du2_power7\" \"du3_power7,du4_power7,du5_power7\")\n+(absence_set \"du3_power7\" \"du4_power7,du5_power7\")\n+(absence_set \"du4_power7\" \"du5_power7\")\n+\n+\n+; LS Unit\n+(define_insn_reservation \"power7-load\" 2\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,LSU_power7\")\n+\n+(define_insn_reservation \"power7-load-ext\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,LSU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-load-update\" 2\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,LSU_power7+FXU_power7\")\n+\n+(define_insn_reservation \"power7-load-update-indexed\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU4_power7,FXU_power7,LSU_power7+FXU_power7\")\n+\n+(define_insn_reservation \"power7-load-ext-update\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,LSU_power7+FXU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-load-ext-update-indexed\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU4_power7,FXU_power7,LSU_power7+FXU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-fpload\" 3\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,LSU_power7\")\n+\n+(define_insn_reservation \"power7-fpload-update\" 3\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,LSU_power7+FXU_power7\")\n+\n+(define_insn_reservation \"power7-store\" 6 ; store-forwarding latency\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,LSU_power7+FXU_power7\")\n+\n+(define_insn_reservation \"power7-store-update\" 6\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,LSU_power7+FXU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-store-update-indexed\" 6\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU4_power7,LSU_power7+FXU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-fpstore\" 6\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,LSU_power7+VSU_power7\")\n+\n+(define_insn_reservation \"power7-fpstore-update\" 6\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,LSU_power7+VSU_power7+FXU_power7\")\n+\n+(define_insn_reservation \"power7-larx\" 3\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU4_power7,LSU_power7\")\n+\n+(define_insn_reservation \"power7-stcx\" 10\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU4_power7,LSU_power7\")\n+\n+(define_insn_reservation \"power7-vecload\" 3\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,LSU_power7\")\n+\n+(define_insn_reservation \"power7-vecstore\" 6\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,LSU_power7+vsu2_power7\")\n+\n+(define_insn_reservation \"power7-sync\" 11\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU4_power7,LSU_power7\")\n+\n+\n+; FX Unit\n+(define_insn_reservation \"power7-integer\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,isel,popcnt\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-cntlz\" 2\n+  (and (eq_attr \"type\" \"cntlz\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7+DU_power7,FXU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7+DU_power7+DU_power7,FXU_power7,FXU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-cmp\" 1\n+  (and (ior (eq_attr \"type\" \"cmp\")\n+\t    (and (eq_attr \"type\" \"add,logical\")\n+\t\t (eq_attr \"dot\" \"yes\")))\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-compare\" 2\n+  (and (eq_attr \"type\" \"shift,exts\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,FXU_power7,FXU_power7\")\n+\n+(define_bypass 3 \"power7-cmp,power7-compare\" \"power7-crlogical,power7-delayedcr\")\n+\n+(define_insn_reservation \"power7-mul\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-mul-compare\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,FXU_power7,nothing*3,FXU_power7\")\n+\n+(define_insn_reservation \"power7-idiv\" 36\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,iu1_power7*36|iu2_power7*36\")\n+\n+(define_insn_reservation \"power7-ldiv\" 68\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU2F_power7,iu1_power7*68|iu2_power7*68\")\n+\n+(define_insn_reservation \"power7-isync\" 1 ;\n+  (and (eq_attr \"type\" \"isync\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU4_power7,FXU_power7\")\n+\n+\n+; CR Unit\n+(define_insn_reservation \"power7-mtjmpr\" 4\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"du1_power7,FXU_power7\")\n+\n+(define_insn_reservation \"power7-mfjmpr\" 5\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"du1_power7,cru_power7+FXU_power7\")\n+\n+(define_insn_reservation \"power7-crlogical\" 3\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"du1_power7,cru_power7\")\n+\n+(define_insn_reservation \"power7-delayedcr\" 3\n+  (and (eq_attr \"type\" \"delayed_cr\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"du1_power7,cru_power7\")\n+\n+(define_insn_reservation \"power7-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"du1_power7,cru_power7\")\n+\n+(define_insn_reservation \"power7-mfcrf\" 3\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"du1_power7,cru_power7\")\n+\n+(define_insn_reservation \"power7-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU4_power7,cru_power7+FXU_power7\")\n+\n+\n+; BR Unit\n+; Branches take dispatch Slot 4.  The presence_sets prevent other insn from\n+; grabbing previous dispatch slots once this is assigned.\n+(define_insn_reservation \"power7-branch\" 3\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"(du5_power7\\\n+   |du4_power7+du5_power7\\\n+   |du3_power7+du4_power7+du5_power7\\\n+   |du2_power7+du3_power7+du4_power7+du5_power7\\\n+   |du1_power7+du2_power7+du3_power7+du4_power7+du5_power7),bpu_power7\")\n+\n+\n+; VS Unit (includes FP/VSX/VMX/DFP)\n+(define_insn_reservation \"power7-fp\" 6\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul,dfp\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_bypass 8 \"power7-fp\" \"power7-branch\")\n+\n+(define_insn_reservation \"power7-fpcompare\" 8\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_insn_reservation \"power7-sdiv\" 27\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_insn_reservation \"power7-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_insn_reservation \"power7-sqrt\" 32\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_insn_reservation \"power7-dsqrt\" 44\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_insn_reservation \"power7-vecsimple\" 2\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove,veccmp,veccmpfx\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,vsu1_power7\")\n+\n+(define_insn_reservation \"power7-vecfloat\" 6\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,vsu1_power7\")\n+\n+(define_bypass 7 \"power7-vecfloat\" \"power7-vecsimple,power7-veccomplex,\\\n+\t\t\t\t    power7-vecperm\")\n+\n+(define_insn_reservation \"power7-veccomplex\" 7\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,vsu1_power7\")\n+\n+(define_insn_reservation \"power7-vecperm\" 3\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,vsu2_power7\")\n+\n+(define_insn_reservation \"power7-vecdouble\" 6\n+  (and (eq_attr \"type\" \"vecdouble\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_bypass 7 \"power7-vecdouble\" \"power7-vecsimple,power7-veccomplex,\\\n+\t\t\t\t    power7-vecperm\")\n+\n+(define_insn_reservation \"power7-vecfdiv\" 26\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+\n+(define_insn_reservation \"power7-vecdiv\" 32\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"cpu\" \"power7\"))\n+  \"DU_power7,VSU_power7\")\n+"}, {"sha": "21ebab45d746f57f4460947ad6f3b090479d2f0b", "filename": "gcc/config/powerpcspe/power8.md", "status": "added", "additions": 396, "deletions": 0, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpower8.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,396 @@\n+;; Scheduling description for IBM POWER8 processor.\n+;; Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+;;\n+;; Contributed by Pat Haugen (pthaugen@us.ibm.com).\n+\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"power8fxu,power8lsu,power8vsu,power8misc\")\n+\n+(define_cpu_unit \"fxu0_power8,fxu1_power8\" \"power8fxu\")\n+(define_cpu_unit \"lu0_power8,lu1_power8\" \"power8lsu\")\n+(define_cpu_unit \"lsu0_power8,lsu1_power8\" \"power8lsu\")\n+(define_cpu_unit \"vsu0_power8,vsu1_power8\" \"power8vsu\")\n+(define_cpu_unit \"bpu_power8,cru_power8\" \"power8misc\")\n+(define_cpu_unit \"du0_power8,du1_power8,du2_power8,du3_power8,du4_power8,\\\n+\t\t  du5_power8,du6_power8\"  \"power8misc\")\n+\n+\n+; Dispatch group reservations\n+(define_reservation \"DU_any_power8\"\n+\t\t    \"du0_power8|du1_power8|du2_power8|du3_power8|du4_power8|\\\n+\t\t     du5_power8\")\n+\n+; 2-way Cracked instructions go in slots 0-1\n+;   (can also have a second in slots 3-4 if insns are adjacent)\n+(define_reservation \"DU_cracked_power8\"\n+\t\t    \"du0_power8+du1_power8\")\n+\n+; Insns that are first in group\n+(define_reservation \"DU_first_power8\"\n+\t\t    \"du0_power8\")\n+\n+; Insns that are first and last in group\n+(define_reservation \"DU_both_power8\"\n+\t\t    \"du0_power8+du1_power8+du2_power8+du3_power8+du4_power8+\\\n+\t\t     du5_power8+du6_power8\")\n+\n+; Dispatch slots are allocated in order conforming to program order.\n+(absence_set \"du0_power8\" \"du1_power8,du2_power8,du3_power8,du4_power8,\\\n+\t      du5_power8,du6_power8\")\n+(absence_set \"du1_power8\" \"du2_power8,du3_power8,du4_power8,du5_power8,\\\n+\t      du6_power8\")\n+(absence_set \"du2_power8\" \"du3_power8,du4_power8,du5_power8,du6_power8\")\n+(absence_set \"du3_power8\" \"du4_power8,du5_power8,du6_power8\")\n+(absence_set \"du4_power8\" \"du5_power8,du6_power8\")\n+(absence_set \"du5_power8\" \"du6_power8\")\n+\n+\n+; Execution unit reservations\n+(define_reservation \"FXU_power8\"\n+                    \"fxu0_power8|fxu1_power8\")\n+\n+(define_reservation \"LU_power8\"\n+                    \"lu0_power8|lu1_power8\")\n+\n+(define_reservation \"LSU_power8\"\n+                    \"lsu0_power8|lsu1_power8\")\n+\n+(define_reservation \"LU_or_LSU_power8\"\n+                    \"lu0_power8|lu1_power8|lsu0_power8|lsu1_power8\")\n+\n+(define_reservation \"VSU_power8\"\n+                    \"vsu0_power8|vsu1_power8\")\n+\n+\n+; LS Unit\n+(define_insn_reservation \"power8-load\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LU_or_LSU_power8\")\n+\n+(define_insn_reservation \"power8-load-update\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LU_or_LSU_power8+FXU_power8\")\n+\n+(define_insn_reservation \"power8-load-ext\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LU_or_LSU_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-load-ext-update\" 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,LU_or_LSU_power8+FXU_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-fpload\" 5\n+  (and (ior (eq_attr \"type\" \"vecload\")\n+\t    (and (eq_attr \"type\" \"fpload\")\n+\t\t (eq_attr \"update\" \"no\")))\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LU_power8\")\n+\n+(define_insn_reservation \"power8-fpload-update\" 5\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LU_power8+FXU_power8\")\n+\n+(define_insn_reservation \"power8-store\" 5 ; store-forwarding latency\n+  (and (eq_attr \"type\" \"store\")\n+       (not (and (eq_attr \"update\" \"yes\")\n+\t\t (eq_attr \"indexed\" \"yes\")))\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LSU_power8+LU_power8\")\n+\n+(define_insn_reservation \"power8-store-update-indexed\" 5\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LSU_power8+LU_power8\")\n+\n+(define_insn_reservation \"power8-fpstore\" 5\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LSU_power8+VSU_power8\")\n+\n+(define_insn_reservation \"power8-fpstore-update\" 5\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,LSU_power8+VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecstore\" 5\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,LSU_power8+VSU_power8\")\n+\n+(define_insn_reservation \"power8-larx\" 3\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,LU_or_LSU_power8\")\n+\n+(define_insn_reservation \"power8-stcx\" 10\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,LSU_power8+LU_power8\")\n+\n+(define_insn_reservation \"power8-sync\" 1\n+  (and (eq_attr \"type\" \"sync,isync\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,LSU_power8\")\n+\n+\n+; FX Unit\n+(define_insn_reservation \"power8-1cyc\" 1\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+; Extra cycle to LU/LSU\n+(define_bypass 2 \"power8-1cyc\"\n+\t\t \"power8-load*,power8-fpload*,power8-store*,power8-fpstore*,\\\n+\t\t  power8-vecstore,power8-larx,power8-stcx\")\n+;\t\t \"power8-load,power8-load-update,power8-load-ext,\\\n+;\t\t  power8-load-ext-update,power8-fpload,power8-fpload-update,\\\n+;\t\t  power8-store,power8-store-update,power8-store-update-indexed,\\\n+;\t\t  power8-fpstore,power8-fpstore-update,power8-vecstore,\\\n+;\t\t  power8-larx,power8-stcx\")\n+\n+(define_insn_reservation \"power8-2cyc\" 2\n+  (and (eq_attr \"type\" \"cntlz,popcnt\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8+DU_any_power8,FXU_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8+DU_any_power8+DU_any_power8,FXU_power8,FXU_power8,FXU_power8\")\n+\n+; cmp - Normal compare insns\n+(define_insn_reservation \"power8-cmp\" 2\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+; add/logical with dot : add./and./nor./etc\n+(define_insn_reservation \"power8-fast-compare\" 2\n+  (and (eq_attr \"type\" \"add,logical\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+; exts/shift with dot : rldicl./exts./rlwinm./slwi./rlwnm./slw./etc\n+(define_insn_reservation \"power8-compare\" 2\n+  (and (eq_attr \"type\" \"shift,exts\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,FXU_power8,FXU_power8\")\n+\n+; Extra cycle to LU/LSU\n+(define_bypass 3 \"power8-fast-compare,power8-compare\"\n+\t\t \"power8-load*,power8-fpload*,power8-store*,power8-fpstore*,\\\n+\t\t  power8-vecstore,power8-larx,power8-stcx\")\n+\n+; 5 cycle CR latency \n+(define_bypass 5 \"power8-fast-compare,power8-compare\"\n+\t\t \"power8-crlogical,power8-mfcr,power8-mfcrf,power8-branch\")\n+\n+(define_insn_reservation \"power8-mul\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,FXU_power8\")\n+\n+(define_insn_reservation \"power8-mul-compare\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_cracked_power8,FXU_power8\")\n+\n+; Extra cycle to LU/LSU\n+(define_bypass 5 \"power8-mul,power8-mul-compare\"\n+\t\t \"power8-load*,power8-fpload*,power8-store*,power8-fpstore*,\\\n+\t\t  power8-vecstore,power8-larx,power8-stcx\")\n+\n+; 7 cycle CR latency \n+(define_bypass 7 \"power8-mul,power8-mul-compare\"\n+\t\t \"power8-crlogical,power8-mfcr,power8-mfcrf,power8-branch\")\n+\n+; FXU divides are not pipelined\n+(define_insn_reservation \"power8-idiv\" 37\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,fxu0_power8*37|fxu1_power8*37\")\n+\n+(define_insn_reservation \"power8-ldiv\" 68\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,fxu0_power8*68|fxu1_power8*68\")\n+\n+(define_insn_reservation \"power8-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_first_power8,FXU_power8\")\n+\n+; Should differentiate between 1 cr field and > 1 since mtocrf is not microcode\n+(define_insn_reservation \"power8-mtcr\" 3\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,FXU_power8\")\n+\n+\n+; CR Unit\n+(define_insn_reservation \"power8-mfjmpr\" 5\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_first_power8,cru_power8+FXU_power8\")\n+\n+(define_insn_reservation \"power8-crlogical\" 3\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_first_power8,cru_power8\")\n+\n+(define_insn_reservation \"power8-mfcr\" 5\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_both_power8,cru_power8\")\n+\n+(define_insn_reservation \"power8-mfcrf\" 3\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_first_power8,cru_power8\")\n+\n+\n+; BR Unit\n+; Branches take dispatch slot 7, but reserve any remaining prior slots to\n+; prevent other insns from grabbing them once this is assigned.\n+(define_insn_reservation \"power8-branch\" 3\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"(du6_power8\\\n+   |du5_power8+du6_power8\\\n+   |du4_power8+du5_power8+du6_power8\\\n+   |du3_power8+du4_power8+du5_power8+du6_power8\\\n+   |du2_power8+du3_power8+du4_power8+du5_power8+du6_power8\\\n+   |du1_power8+du2_power8+du3_power8+du4_power8+du5_power8+du6_power8\\\n+   |du0_power8+du1_power8+du2_power8+du3_power8+du4_power8+du5_power8+\\\n+    du6_power8),bpu_power8\")\n+\n+; Branch updating LR/CTR feeding mf[lr|ctr]\n+(define_bypass 4 \"power8-branch\" \"power8-mfjmpr\")\n+\n+\n+; VS Unit (includes FP/VSX/VMX/DFP/Crypto)\n+(define_insn_reservation \"power8-fp\" 6\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul,dfp\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+; Additional 3 cycles for any CR result\n+(define_bypass 9 \"power8-fp\" \"power8-crlogical,power8-mfcr*,power8-branch\")\n+\n+(define_insn_reservation \"power8-fpcompare\" 8\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-sdiv\" 27\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-sqrt\" 32\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-dsqrt\" 44\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecsimple\" 2\n+  (and (eq_attr \"type\" \"vecperm,vecsimple,veclogical,vecmove,veccmp,\n+\t\t\tveccmpfx\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecnormal\" 6\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_bypass 7 \"power8-vecnormal\"\n+\t\t \"power8-vecsimple,power8-veccomplex,power8-fpstore*,\\\n+\t\t  power8-vecstore\")\n+\n+(define_insn_reservation \"power8-veccomplex\" 7\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecfdiv\" 25\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-vecdiv\" 31\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-mffgpr\" 5\n+  (and (eq_attr \"type\" \"mffgpr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-mftgpr\" 6\n+  (and (eq_attr \"type\" \"mftgpr\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+\n+(define_insn_reservation \"power8-crypto\" 7\n+  (and (eq_attr \"type\" \"crypto\")\n+       (eq_attr \"cpu\" \"power8\"))\n+  \"DU_any_power8,VSU_power8\")\n+"}, {"sha": "217864faaed6f51ee91c904835580a3d5b584e07", "filename": "gcc/config/powerpcspe/power9.md", "status": "added", "additions": 489, "deletions": 0, "changes": 489, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpower9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpower9.md?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,489 @@\n+;; Scheduling description for IBM POWER9 processor.\n+;; Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+;;\n+;; Contributed by Pat Haugen (pthaugen@us.ibm.com).\n+\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"power9dsp,power9lsu,power9vsu,power9misc\")\n+\n+(define_cpu_unit \"lsu0_power9,lsu1_power9,lsu2_power9,lsu3_power9\" \"power9lsu\")\n+(define_cpu_unit \"vsu0_power9,vsu1_power9,vsu2_power9,vsu3_power9\" \"power9vsu\")\n+; Two vector permute units, part of vsu\n+(define_cpu_unit \"prm0_power9,prm1_power9\" \"power9vsu\")\n+; Two fixed point divide units, not pipelined\n+(define_cpu_unit \"fx_div0_power9,fx_div1_power9\" \"power9misc\")\n+(define_cpu_unit \"bru_power9,cryptu_power9,dfu_power9\" \"power9misc\")\n+\n+(define_cpu_unit \"x0_power9,x1_power9,xa0_power9,xa1_power9,\n+\t\t  x2_power9,x3_power9,xb0_power9,xb1_power9,\n+\t\t  br0_power9,br1_power9\" \"power9dsp\")\n+\n+\n+; Dispatch port reservations\n+;\n+; Power9 can dispatch a maximum of 6 iops per cycle with the following\n+; general restrictions (other restrictions also apply):\n+;   1) At most 2 iops per execution slice\n+;   2) At most 2 iops to the branch unit\n+; Note that insn position in a dispatch group of 6 insns does not infer which\n+; execution slice the insn is routed to.  The units are used to infer the\n+; conflicts that exist (i.e. an 'even' requirement will preclude dispatch\n+; with 2 insns with 'superslice' requirement).\n+\n+; The xa0/xa1 units really represent the 3rd dispatch port for a superslice but\n+; are listed as separate units to allow those insns that preclude its use to\n+; still be scheduled two to a superslice while reserving the 3rd slot.  The\n+; same applies for xb0/xb1.\n+(define_reservation \"DU_xa_power9\" \"xa0_power9+xa1_power9\")\n+(define_reservation \"DU_xb_power9\" \"xb0_power9+xb1_power9\")\n+\n+; Any execution slice dispatch\n+(define_reservation \"DU_any_power9\"\n+\t\t    \"x0_power9|x1_power9|DU_xa_power9|x2_power9|x3_power9|\n+\t\t     DU_xb_power9\")\n+\n+; Even slice, actually takes even/odd slots\n+(define_reservation \"DU_even_power9\" \"x0_power9+x1_power9|x2_power9+x3_power9\")\n+\n+; Slice plus 3rd slot\n+(define_reservation \"DU_slice_3_power9\"\n+\t\t    \"x0_power9+xa0_power9|x1_power9+xa1_power9|\n+\t\t     x2_power9+xb0_power9|x3_power9+xb1_power9\")\n+\n+; Superslice\n+(define_reservation \"DU_super_power9\"\n+\t\t    \"x0_power9+x1_power9|x2_power9+x3_power9\")\n+\n+; 2-way cracked\n+(define_reservation \"DU_C2_power9\" \"x0_power9+x1_power9|\n+\t\t\t\t    x1_power9+DU_xa_power9|\n+\t\t\t\t    x1_power9+x2_power9|\n+\t\t\t\t    DU_xa_power9+x2_power9|\n+\t\t\t\t    x2_power9+x3_power9|\n+\t\t\t\t    x3_power9+DU_xb_power9\")\n+\n+; 2-way cracked plus 3rd slot\n+(define_reservation \"DU_C2_3_power9\" \"x0_power9+x1_power9+xa0_power9|\n+\t\t\t\t      x1_power9+x2_power9+xa0_power9|\n+\t\t\t\t      x1_power9+x2_power9+xb0_power9|\n+\t\t\t\t      x2_power9+x3_power9+xb0_power9\")\n+\n+; 3-way cracked (consumes whole decode/dispatch cycle)\n+(define_reservation \"DU_C3_power9\"\n+\t\t    \"x0_power9+x1_power9+xa0_power9+xa1_power9+x2_power9+\n+\t\t     x3_power9+xb0_power9+xb1_power9+br0_power9+br1_power9\")\n+\n+; Branch ports\n+(define_reservation \"DU_branch_power9\" \"br0_power9|br1_power9\")\n+\n+\n+; Execution unit reservations\n+(define_reservation \"LSU_power9\"\n+\t\t    \"lsu0_power9|lsu1_power9|lsu2_power9|lsu3_power9\")\n+\n+(define_reservation \"LSU_pair_power9\"\n+\t\t    \"lsu0_power9+lsu1_power9|lsu1_power9+lsu2_power9|\n+\t\t     lsu2_power9+lsu3_power9|lsu3_power9+lsu0_power9\")\n+\n+(define_reservation \"VSU_power9\"\n+\t\t    \"vsu0_power9|vsu1_power9|vsu2_power9|vsu3_power9\")\n+\n+(define_reservation \"VSU_super_power9\"\n+\t\t    \"vsu0_power9+vsu1_power9|vsu2_power9+vsu3_power9\")\n+\n+(define_reservation \"VSU_PRM_power9\" \"prm0_power9|prm1_power9\")\n+\n+\n+; LS Unit\n+(define_insn_reservation \"power9-load\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-load-update\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-load-ext\" 6\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-load-ext-update\" 6\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-fpload-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-fpload-update-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+; SFmode loads are cracked and have additional 2 cycles over DFmode\n+(define_insn_reservation \"power9-fpload-single\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-fpload-update-single\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-vecload\" 5\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,LSU_pair_power9\")\n+\n+; Store data can issue 2 cycles after AGEN issue, 3 cycles for vector store\n+(define_insn_reservation \"power9-store\" 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-store-indexed\" 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,LSU_power9\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power9-store-update\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power9-store-update-indexed\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-fpstore\" 0\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,LSU_power9\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power9-fpstore-update\" 2\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-vecstore\" 0\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,LSU_pair_power9\")\n+\n+(define_insn_reservation \"power9-larx\" 4\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-stcx\" 2\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-sync\" 4\n+  (and (eq_attr \"type\" \"sync,isync\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,LSU_power9\")\n+\n+\n+; VSU Execution Unit\n+\n+; Fixed point ops\n+\n+; Most ALU insns are simple 2 cycle, including record form\n+(define_insn_reservation \"power9-alu\" 2\n+  (and (ior (eq_attr \"type\" \"add,exts,integer,logical,isel\")\n+\t    (and (eq_attr \"type\" \"insert,shift\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+; 5 cycle CR latency\n+(define_bypass 5 \"power9-alu\"\n+\t\t \"power9-crlogical,power9-mfcr,power9-mfcrf\")\n+\n+; Record form rotate/shift are cracked\n+(define_insn_reservation \"power9-cracked-alu\" 2\n+  (and (eq_attr \"type\" \"insert,shift\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,VSU_power9\")\n+; 7 cycle CR latency\n+(define_bypass 7 \"power9-cracked-alu\"\n+\t\t \"power9-crlogical,power9-mfcr,power9-mfcrf\")\n+\n+(define_insn_reservation \"power9-alu2\" 3\n+  (and (eq_attr \"type\" \"cntlz,popcnt,trap\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+; 6 cycle CR latency\n+(define_bypass 6 \"power9-alu2\"\n+\t\t \"power9-crlogical,power9-mfcr,power9-mfcrf\")\n+\n+(define_insn_reservation \"power9-cmp\" 2\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+\n+; Treat 'two' and 'three' types as 2 or 3 way cracked\n+(define_insn_reservation \"power9-two\" 4\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-three\" 6\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mul\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mul-compare\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,VSU_power9\")\n+; 10 cycle CR latency\n+(define_bypass 10 \"power9-mul-compare\"\n+\t\t \"power9-crlogical,power9-mfcr,power9-mfcrf\")\n+\n+; Fixed point divides reserve the divide units for a minimum of 8 cycles\n+(define_insn_reservation \"power9-idiv\" 16\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_even_power9,fx_div0_power9*8|fx_div1_power9*8\")\n+\n+(define_insn_reservation \"power9-ldiv\" 24\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_even_power9,fx_div0_power9*8|fx_div1_power9*8\")\n+\n+(define_insn_reservation \"power9-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mfcrf\" 2\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C3_power9,VSU_power9\")\n+\n+; Should differentiate between 1 cr field and > 1 since target of > 1 cr\n+; is cracked\n+(define_insn_reservation \"power9-mtcr\" 2\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+; Move to LR/CTR are executed in VSU\n+(define_insn_reservation \"power9-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+; Floating point/Vector ops\n+(define_insn_reservation \"power9-fpsimple\" 2\n+  (and (eq_attr \"type\" \"fpsimple\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-fp\" 7\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-fpcompare\" 3\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+; FP div/sqrt are executed in the VSU slices.  They are not pipelined wrt other\n+; divide insns, but for the most part do not block pipelined ops.\n+(define_insn_reservation \"power9-sdiv\" 22\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-sqrt\" 26\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-dsqrt\" 36\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-vec-2cyc\" 2\n+  (and (eq_attr \"type\" \"vecmove,veclogical,vecexts,veccmpfx\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-veccmp\" 3\n+  (and (eq_attr \"type\" \"veccmp\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-vecsimple\" 3\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-vecnormal\" 7\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+; Quad-precision FP ops, execute in DFU\n+(define_insn_reservation \"power9-qp\" 12\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,dfu_power9\")\n+\n+(define_insn_reservation \"power9-vecperm\" 3\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_PRM_power9\")\n+\n+(define_insn_reservation \"power9-veccomplex\" 7\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-vecfdiv\" 28\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-vecdiv\" 32\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-qpdiv\" 56\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,dfu_power9\")\n+\n+(define_insn_reservation \"power9-mffgpr\" 2\n+  (and (eq_attr \"type\" \"mffgpr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mftgpr\" 2\n+  (and (eq_attr \"type\" \"mftgpr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+\n+; Branch Unit\n+; Move from LR/CTR are executed in BRU but consume a writeback port from an\n+; execution slice.\n+(define_insn_reservation \"power9-mfjmpr\" 6\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_branch_power9,bru_power9+VSU_power9\")\n+\n+; Branch is 2 cycles\n+(define_insn_reservation \"power9-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_branch_power9,bru_power9\")\n+\n+\n+; Crypto Unit\n+(define_insn_reservation \"power9-crypto\" 6\n+  (and (eq_attr \"type\" \"crypto\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,cryptu_power9\")\n+\n+\n+; HTM Unit\n+(define_insn_reservation \"power9-htm\" 4\n+  (and (eq_attr \"type\" \"htm\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-htm-simple\" 2\n+  (and (eq_attr \"type\" \"htmsimple\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+\n+; DFP Unit\n+(define_insn_reservation \"power9-dfp\" 12\n+  (and (eq_attr \"type\" \"dfp\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_even_power9,dfu_power9\")\n+"}, {"sha": "ebe005afb20a6f1cb22fe1376d78d8fe3242c830", "filename": "gcc/config/powerpcspe/powerpcspe-builtin.def", "status": "added", "additions": 2674, "deletions": 0, "changes": 2674, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-builtin.def?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "8039814b48eaa85d857ed18d1ce5e7f89adf18f0", "filename": "gcc/config/powerpcspe/powerpcspe-c.c", "status": "added", "additions": 6581, "deletions": 0, "changes": 6581, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-c.c?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "cd5c70688d85b68002e8d977ba2b188ca050b38e", "filename": "gcc/config/powerpcspe/powerpcspe-cpus.def", "status": "added", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-cpus.def?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,264 @@\n+/* IBM RS/6000 CPU names..\n+   Copyright (C) 1991-2017 Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* ISA masks.  */\n+#ifndef ISA_2_1_MASKS\n+#define ISA_2_1_MASKS\t\tOPTION_MASK_MFCRF\n+#define ISA_2_2_MASKS\t\t(ISA_2_1_MASKS | OPTION_MASK_POPCNTB)\n+#define ISA_2_4_MASKS\t\t(ISA_2_2_MASKS | OPTION_MASK_FPRND)\n+\n+  /* For ISA 2.05, do not add MFPGPR, since it isn't in ISA 2.06, and don't add\n+     ALTIVEC, since in general it isn't a win on power6.  In ISA 2.04, fsel,\n+     fre, fsqrt, etc. were no longer documented as optional.  Group masks by\n+     server and embedded. */\n+#define ISA_2_5_MASKS_EMBEDDED\t(ISA_2_4_MASKS\t\t\t\t\\\n+\t\t\t\t | OPTION_MASK_CMPB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_RECIP_PRECISION\t\t\\\n+\t\t\t\t | OPTION_MASK_PPC_GFXOPT\t\t\\\n+\t\t\t\t | OPTION_MASK_PPC_GPOPT)\n+\n+#define ISA_2_5_MASKS_SERVER\t(ISA_2_5_MASKS_EMBEDDED | OPTION_MASK_DFP)\n+\n+  /* For ISA 2.06, don't add ISEL, since in general it isn't a win, but\n+     altivec is a win so enable it.  */\n+  /* OPTION_MASK_VSX_TIMODE should be set, but disable it for now until\n+     PR 58587 is fixed.  */\n+#define ISA_2_6_MASKS_EMBEDDED\t(ISA_2_5_MASKS_EMBEDDED | OPTION_MASK_POPCNTD)\n+#define ISA_2_6_MASKS_SERVER\t(ISA_2_5_MASKS_SERVER\t\t\t\\\n+\t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n+\t\t\t\t | OPTION_MASK_ALTIVEC\t\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX\t\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DF)\n+\n+/* For now, don't provide an embedded version of ISA 2.07.  */\n+#define ISA_2_7_MASKS_SERVER\t(ISA_2_6_MASKS_SERVER\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P8_FUSION\t\t\\\n+\t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_CRYPTO\t\t\t\\\n+\t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n+\t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n+\t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n+\t\t\t\t | OPTION_MASK_QUAD_MEMORY\t\t\\\n+  \t\t\t\t | OPTION_MASK_QUAD_MEMORY_ATOMIC\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_SF\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER)\n+\n+/* Add ISEL back into ISA 3.0, since it is supposed to be a win.  Do not add\n+   FLOAT128_HW here until we are ready to make -mfloat128 on by default.  */\n+#define ISA_3_0_MASKS_SERVER\t(ISA_2_7_MASKS_SERVER\t\t\t\\\n+\t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MODULO\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM_SCALAR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MINMAX\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MISC\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_VECTOR)\n+\n+/* Support for the IEEE 128-bit floating point hardware requires a lot of the\n+   VSX instructions that are part of ISA 3.0.  */\n+#define ISA_3_0_MASKS_IEEE\t(OPTION_MASK_VSX\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_SF\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER)\n+\n+/* Flags that need to be turned off if -mno-power9-vector.  */\n+#define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM_SCALAR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MINMAX)\n+\n+/* Flags that need to be turned off if -mno-power8-vector.  */\n+#define OTHER_P8_VECTOR_MASKS\t(OTHER_P9_VECTOR_MASKS\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n+\t\t\t\t | OPTION_MASK_CRYPTO\t\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_SF)\t\t\\\n+\n+/* Flags that need to be turned off if -mno-vsx.  */\n+#define OTHER_VSX_VECTOR_MASKS\t(OTHER_P8_VECTOR_MASKS\t\t\t\\\n+\t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n+\t\t\t\t | OPTION_MASK_FLOAT128_KEYWORD\t\t\\\n+\t\t\t\t | OPTION_MASK_FLOAT128_TYPE\t\t\\\n+\t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER\t\\\n+\t\t\t\t | OPTION_MASK_VSX_TIMODE)\n+\n+#define POWERPC_7400_MASK\t(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_ALTIVEC)\n+\n+/* Deal with ports that do not have -mstrict-align.  */\n+#ifdef OPTION_MASK_STRICT_ALIGN\n+#define OPTION_MASK_STRICT_ALIGN_OPTIONAL OPTION_MASK_STRICT_ALIGN\n+#else\n+#define OPTION_MASK_STRICT_ALIGN 0\n+#define OPTION_MASK_STRICT_ALIGN_OPTIONAL 0\n+#ifndef MASK_STRICT_ALIGN\n+#define MASK_STRICT_ALIGN 0\n+#endif\n+#endif\n+\n+/* Mask of all options to set the default isa flags based on -mcpu=<xxx>.  */\n+#define POWERPC_MASKS\t\t(OPTION_MASK_ALTIVEC\t\t\t\\\n+\t\t\t\t | OPTION_MASK_CMPB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_CRYPTO\t\t\t\\\n+\t\t\t\t | OPTION_MASK_DFP\t\t\t\\\n+\t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n+\t\t\t\t | OPTION_MASK_DLMZB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n+\t\t\t\t | OPTION_MASK_FLOAT128_HW\t\t\\\n+\t\t\t\t | OPTION_MASK_FLOAT128_KEYWORD\t\t\\\n+\t\t\t\t | OPTION_MASK_FLOAT128_TYPE\t\t\\\n+\t\t\t\t | OPTION_MASK_FPRND\t\t\t\\\n+\t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n+\t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n+\t\t\t\t | OPTION_MASK_LRA\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MFCRF\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MFPGPR\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MODULO\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MULHW\t\t\t\\\n+\t\t\t\t | OPTION_MASK_NO_UPDATE\t\t\\\n+\t\t\t\t | OPTION_MASK_P8_FUSION\t\t\\\n+\t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM_SCALAR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MINMAX\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MISC\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_POPCNTB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n+\t\t\t\t | OPTION_MASK_POWERPC64\t\t\\\n+\t\t\t\t | OPTION_MASK_PPC_GFXOPT\t\t\\\n+\t\t\t\t | OPTION_MASK_PPC_GPOPT\t\t\\\n+\t\t\t\t | OPTION_MASK_QUAD_MEMORY\t\t\\\n+\t\t\t\t | OPTION_MASK_QUAD_MEMORY_ATOMIC\t\\\n+\t\t\t\t | OPTION_MASK_RECIP_PRECISION\t\t\\\n+\t\t\t\t | OPTION_MASK_SOFT_FLOAT\t\t\\\n+\t\t\t\t | OPTION_MASK_STRICT_ALIGN_OPTIONAL\t\\\n+\t\t\t\t | OPTION_MASK_TOC_FUSION\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_SF\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX\t\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER\t\\\n+\t\t\t\t | OPTION_MASK_VSX_TIMODE)\n+\n+#endif\n+\n+/* This table occasionally claims that a processor does not support a\n+   particular feature even though it does, but the feature is slower than the\n+   alternative.  Thus, it shouldn't be relied on as a complete description of\n+   the processor's support.\n+\n+   Please keep this list in order, and don't forget to update the documentation\n+   in invoke.texi when adding a new processor or flag.\n+\n+   Before including this file, define a macro:\n+\n+   RS6000_CPU (NAME, CPU, FLAGS)\n+\n+   where the arguments are the fields of struct rs6000_ptt.  */\n+\n+RS6000_CPU (\"401\", PROCESSOR_PPC403, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"403\", PROCESSOR_PPC403, MASK_SOFT_FLOAT | MASK_STRICT_ALIGN)\n+RS6000_CPU (\"405\", PROCESSOR_PPC405, MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"405fp\", PROCESSOR_PPC405, MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"440\", PROCESSOR_PPC440, MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"440fp\", PROCESSOR_PPC440, MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"464\", PROCESSOR_PPC440, MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"464fp\", PROCESSOR_PPC440, MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"476\", PROCESSOR_PPC476,\n+\t    MASK_SOFT_FLOAT | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB\n+\t    | MASK_FPRND | MASK_CMPB | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"476fp\", PROCESSOR_PPC476,\n+\t    MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n+\t    | MASK_CMPB | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"505\", PROCESSOR_MPCCORE, 0)\n+RS6000_CPU (\"601\", PROCESSOR_PPC601, MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"602\", PROCESSOR_PPC603, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"603\", PROCESSOR_PPC603, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"603e\", PROCESSOR_PPC603, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"604\", PROCESSOR_PPC604, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"604e\", PROCESSOR_PPC604e, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"620\", PROCESSOR_PPC620, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"630\", PROCESSOR_PPC630, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"740\", PROCESSOR_PPC750, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"7400\", PROCESSOR_PPC7400, POWERPC_7400_MASK)\n+RS6000_CPU (\"7450\", PROCESSOR_PPC7450, POWERPC_7400_MASK)\n+RS6000_CPU (\"750\", PROCESSOR_PPC750, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"801\", PROCESSOR_MPCCORE, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"821\", PROCESSOR_MPCCORE, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"823\", PROCESSOR_MPCCORE, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"8540\", PROCESSOR_PPC8540, MASK_STRICT_ALIGN | MASK_ISEL)\n+RS6000_CPU (\"8548\", PROCESSOR_PPC8548, MASK_STRICT_ALIGN | MASK_ISEL)\n+RS6000_CPU (\"a2\", PROCESSOR_PPCA2,\n+\t    MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_POPCNTB | MASK_CMPB\n+\t    | MASK_NO_UPDATE)\n+RS6000_CPU (\"e300c2\", PROCESSOR_PPCE300C2, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"e300c3\", PROCESSOR_PPCE300C3, 0)\n+RS6000_CPU (\"e500mc\", PROCESSOR_PPCE500MC, MASK_PPC_GFXOPT | MASK_ISEL)\n+RS6000_CPU (\"e500mc64\", PROCESSOR_PPCE500MC64,\n+\t    MASK_POWERPC64 | MASK_PPC_GFXOPT | MASK_ISEL)\n+RS6000_CPU (\"e5500\", PROCESSOR_PPCE5500,\n+\t    MASK_POWERPC64 | MASK_PPC_GFXOPT | MASK_ISEL)\n+RS6000_CPU (\"e6500\", PROCESSOR_PPCE6500, POWERPC_7400_MASK | MASK_POWERPC64\n+\t    | MASK_MFCRF | MASK_ISEL)\n+RS6000_CPU (\"860\", PROCESSOR_MPCCORE, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"970\", PROCESSOR_POWER4,\n+\t    POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n+RS6000_CPU (\"cell\", PROCESSOR_CELL,\n+\t    POWERPC_7400_MASK  | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n+RS6000_CPU (\"ec603e\", PROCESSOR_PPC603, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"G3\", PROCESSOR_PPC750, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"G4\",  PROCESSOR_PPC7450, POWERPC_7400_MASK)\n+RS6000_CPU (\"G5\", PROCESSOR_POWER4,\n+\t    POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n+RS6000_CPU (\"titan\", PROCESSOR_TITAN, MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"power3\", PROCESSOR_PPC630, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"power4\", PROCESSOR_POWER4, MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF)\n+RS6000_CPU (\"power5\", PROCESSOR_POWER5, MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB)\n+RS6000_CPU (\"power5+\", PROCESSOR_POWER5, MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND)\n+RS6000_CPU (\"power6\", PROCESSOR_POWER6, MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n+\t    | MASK_CMPB | MASK_DFP | MASK_RECIP_PRECISION)\n+RS6000_CPU (\"power6x\", PROCESSOR_POWER6, MASK_POWERPC64 | MASK_PPC_GPOPT\n+\t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n+\t    | MASK_CMPB | MASK_DFP | MASK_MFPGPR | MASK_RECIP_PRECISION)\n+RS6000_CPU (\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n+\t    POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n+\t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_POPCNTD\n+\t    | MASK_VSX | MASK_RECIP_PRECISION | OPTION_MASK_UPPER_REGS_DF\n+\t    | OPTION_MASK_UPPER_REGS_DI)\n+RS6000_CPU (\"power8\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n+RS6000_CPU (\"power9\", PROCESSOR_POWER9, MASK_POWERPC64 | ISA_3_0_MASKS_SERVER)\n+RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)\n+RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"powerpc64le\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n+RS6000_CPU (\"rs64\", PROCESSOR_RS64A, MASK_PPC_GFXOPT | MASK_POWERPC64)"}, {"sha": "4a8d9fad6ea2421e080a5133d1be7fde5f1e45f8", "filename": "gcc/config/powerpcspe/powerpcspe-linux.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-linux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-linux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-linux.c?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,36 @@\n+/* Functions for Linux on PowerPC.\n+   Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+\n+/* Implement TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P.  */\n+\n+bool\n+rs6000_linux_float_exceptions_rounding_supported_p (void)\n+{\n+  /* glibc has support for exceptions and rounding modes for software\n+     floating point.  */\n+  if (OPTION_GLIBC)\n+    return true;\n+  else\n+    return TARGET_DF_INSN;\n+}"}, {"sha": "fc66fca7300d3525c9a674a0a165fb3f35890cb0", "filename": "gcc/config/powerpcspe/powerpcspe-modes.def", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-modes.def?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,56 @@\n+/* Definitions of target machine for GNU compiler, for IBM RS/6000.\n+   Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* IBM 128-bit floating point.  IFmode and KFmode use the fractional float\n+   support in order to declare 3 128-bit floating point types.  */\n+FRACTIONAL_FLOAT_MODE (IF, 106, 16, ibm_extended_format);\n+\n+/* Explicit IEEE 128-bit floating point.  */\n+FRACTIONAL_FLOAT_MODE (KF, 113, 16, ieee_quad_format);\n+\n+/* 128-bit floating point.  ABI_V4 uses IEEE quad, AIX/Darwin\n+   adjust this in rs6000_option_override_internal.  */\n+FLOAT_MODE (TF, 16, ieee_quad_format);\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   For the RS/6000, we need separate modes when unsigned (logical) comparisons\n+   are being done and we need a separate mode for floating-point.  We also\n+   use a mode for the case when we are comparing the results of two\n+   comparisons, as then only the EQ bit is valid in the register.  */\n+\n+CC_MODE (CCUNS);\n+CC_MODE (CCFP);\n+CC_MODE (CCEQ);\n+\n+/* Vector modes.  */\n+VECTOR_MODES (INT, 8);        /*       V8QI  V4HI V2SI */\n+VECTOR_MODES (INT, 16);       /* V16QI V8HI  V4SI V2DI */\n+VECTOR_MODES (INT, 32);       /* V32QI V16HI V8SI V4DI */\n+VECTOR_MODE (INT, DI, 1);\n+VECTOR_MODE (INT, TI, 1);\n+VECTOR_MODES (FLOAT, 8);      /*             V4HF V2SF */\n+VECTOR_MODES (FLOAT, 16);     /*       V8HF  V4SF V2DF */\n+VECTOR_MODES (FLOAT, 32);     /*       V16HF V8SF V4DF */\n+\n+/* Replacement for TImode that only is allowed in GPRs.  We also use PTImode\n+   for quad memory atomic operations to force getting an even/odd register\n+   combination.  */\n+PARTIAL_INT_MODE (TI, 128, PTI);"}, {"sha": "086217a37f741086221e76e005d309ee64b085f4", "filename": "gcc/config/powerpcspe/powerpcspe-opts.h", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-opts.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,168 @@\n+/* Definitions of target machine needed for option handling for GNU compiler,\n+   for IBM RS/6000.\n+   Copyright (C) 2010-2017 Free Software Foundation, Inc.\n+   Contributed by Michael Meissner (meissner@linux.vnet.ibm.com)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef RS6000_OPTS_H\n+#define RS6000_OPTS_H\n+\n+/* Processor type.  Order must match cpu attribute in MD file.  */\n+enum processor_type\n+ {\n+   PROCESSOR_PPC601,\n+   PROCESSOR_PPC603,\n+   PROCESSOR_PPC604,\n+   PROCESSOR_PPC604e,\n+   PROCESSOR_PPC620,\n+   PROCESSOR_PPC630,\n+\n+   PROCESSOR_PPC750,\n+   PROCESSOR_PPC7400,\n+   PROCESSOR_PPC7450,\n+\n+   PROCESSOR_PPC403,\n+   PROCESSOR_PPC405,\n+   PROCESSOR_PPC440,\n+   PROCESSOR_PPC476,\n+\n+   PROCESSOR_PPC8540,\n+   PROCESSOR_PPC8548,\n+   PROCESSOR_PPCE300C2,\n+   PROCESSOR_PPCE300C3,\n+   PROCESSOR_PPCE500MC,\n+   PROCESSOR_PPCE500MC64,\n+   PROCESSOR_PPCE5500,\n+   PROCESSOR_PPCE6500,\n+\n+   PROCESSOR_POWER4,\n+   PROCESSOR_POWER5,\n+   PROCESSOR_POWER6,\n+   PROCESSOR_POWER7,\n+   PROCESSOR_POWER8,\n+   PROCESSOR_POWER9,\n+\n+   PROCESSOR_RS64A,\n+   PROCESSOR_MPCCORE,\n+   PROCESSOR_CELL,\n+   PROCESSOR_PPCA2,\n+   PROCESSOR_TITAN\n+};\n+\n+\n+/* FP processor type.  */\n+enum fpu_type_t\n+{\n+  FPU_NONE,\t\t\t/* No FPU */\n+  FPU_SF_LITE,\t\t\t/* Limited Single Precision FPU */\n+  FPU_DF_LITE,\t\t\t/* Limited Double Precision FPU */\n+  FPU_SF_FULL,\t\t\t/* Full Single Precision FPU */\n+  FPU_DF_FULL\t\t\t/* Full Double Single Precision FPU */\n+};\n+\n+\n+/* Types of costly dependences.  */\n+enum rs6000_dependence_cost\n+{\n+  max_dep_latency = 1000,\n+  no_dep_costly,\n+  all_deps_costly,\n+  true_store_to_load_dep_costly,\n+  store_to_load_dep_costly\n+};\n+\n+/* Types of nop insertion schemes in sched target hook sched_finish.  */\n+enum rs6000_nop_insertion\n+{\n+  sched_finish_regroup_exact = 1000,\n+  sched_finish_pad_groups,\n+  sched_finish_none\n+};\n+\n+/* Dispatch group termination caused by an insn.  */\n+enum group_termination\n+{\n+  current_group,\n+  previous_group\n+};\n+\n+/* Enumeration to give which calling sequence to use.  */\n+enum rs6000_abi {\n+  ABI_NONE,\n+  ABI_AIX,\t\t\t/* IBM's AIX, or Linux ELFv1 */\n+  ABI_ELFv2,\t\t\t/* Linux ELFv2 ABI */\n+  ABI_V4,\t\t\t/* System V.4/eabi */\n+  ABI_DARWIN\t\t\t/* Apple's Darwin (OS X kernel) */\n+};\n+\n+/* Small data support types.  */\n+enum rs6000_sdata_type {\n+  SDATA_NONE,\t\t\t/* No small data support.  */\n+  SDATA_DATA,\t\t\t/* Just put data in .sbss/.sdata, don't use relocs.  */\n+  SDATA_SYSV,\t\t\t/* Use r13 to point to .sdata/.sbss.  */\n+  SDATA_EABI\t\t\t/* Use r13 like above, r2 points to .sdata2/.sbss2.  */\n+};\n+\n+/* Type of traceback to use.  */\n+enum  rs6000_traceback_type {\n+  traceback_default = 0,\n+  traceback_none,\n+  traceback_part,\n+  traceback_full\n+};\n+\n+/* Code model for 64-bit linux.\n+   small: 16-bit toc offsets.\n+   medium: 32-bit toc offsets, static data and code within 2G of TOC pointer.\n+   large: 32-bit toc offsets, no limit on static data and code.  */\n+enum rs6000_cmodel {\n+  CMODEL_SMALL,\n+  CMODEL_MEDIUM,\n+  CMODEL_LARGE\n+};\n+\n+/* Describe which vector unit to use for a given machine mode.  The\n+   VECTOR_MEM_* and VECTOR_UNIT_* macros assume that Altivec, VSX, and\n+   P8_VECTOR are contiguous.  */\n+enum rs6000_vector {\n+  VECTOR_NONE,\t\t\t/* Type is not  a vector or not supported */\n+  VECTOR_ALTIVEC,\t\t/* Use altivec for vector processing */\n+  VECTOR_VSX,\t\t\t/* Use VSX for vector processing */\n+  VECTOR_P8_VECTOR,\t\t/* Use ISA 2.07 VSX for vector processing */\n+  VECTOR_PAIRED,\t\t/* Use paired floating point for vectors */\n+  VECTOR_SPE,\t\t\t/* Use SPE for vector processing */\n+  VECTOR_OTHER\t\t\t/* Some other vector unit */\n+};\n+\n+/* Where to get the canary for the stack protector.  */\n+enum stack_protector_guard {\n+  SSP_TLS,\t\t\t/* per-thread canary in TLS block */\n+  SSP_GLOBAL\t\t\t/* global canary */\n+};\n+\n+/* No enumeration is defined to index the -mcpu= values (entries in\n+   processor_target_table), with the type int being used instead, but\n+   we need to distinguish the special \"native\" value.  */\n+#define RS6000_CPU_OPTION_NATIVE -1\n+\n+#endif"}, {"sha": "4383554d00eab0906a7062cd3a8bebafbf54e102", "filename": "gcc/config/powerpcspe/powerpcspe-passes.def", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-passes.def?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,27 @@\n+/* Description of target passes for rs6000\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   Macros that can be used in this file:\n+   INSERT_PASS_AFTER (PASS, INSTANCE, TGT_PASS)\n+   INSERT_PASS_BEFORE (PASS, INSTANCE, TGT_PASS)\n+   REPLACE_PASS (PASS, INSTANCE, TGT_PASS)\n+ */\n+\n+  INSERT_PASS_BEFORE (pass_cse, 1, pass_analyze_swaps);"}, {"sha": "0344823db0a8404e68cb945a41fe5bbb79e525cc", "filename": "gcc/config/powerpcspe/powerpcspe-protos.h", "status": "added", "additions": 269, "deletions": 0, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-protos.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,269 @@\n+/* Definitions of target machine for GNU compiler, for IBM RS/6000.\n+   Copyright (C) 2000-2017 Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_RS6000_PROTOS_H\n+#define GCC_RS6000_PROTOS_H\n+\n+/* Declare functions in rs6000.c */\n+\n+#ifdef RTX_CODE\n+\n+#ifdef TREE_CODE\n+extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, int, int, int,\n+\t\t\t\t  tree, machine_mode);\n+#endif /* TREE_CODE */\n+\n+extern bool easy_altivec_constant (rtx, machine_mode);\n+extern bool xxspltib_constant_p (rtx, machine_mode, int *, int *);\n+extern int vspltis_shifted (rtx);\n+extern HOST_WIDE_INT const_vector_elt_as_int (rtx, unsigned int);\n+extern bool macho_lo_sum_memory_operand (rtx, machine_mode);\n+extern int num_insns_constant (rtx, machine_mode);\n+extern int num_insns_constant_wide (HOST_WIDE_INT);\n+extern int small_data_operand (rtx, machine_mode);\n+extern bool mem_operand_gpr (rtx, machine_mode);\n+extern bool mem_operand_ds_form (rtx, machine_mode);\n+extern bool toc_relative_expr_p (const_rtx, bool);\n+extern bool invalid_e500_subreg (rtx, machine_mode);\n+extern void validate_condition_mode (enum rtx_code, machine_mode);\n+extern bool legitimate_constant_pool_address_p (const_rtx, machine_mode,\n+\t\t\t\t\t\tbool);\n+extern bool legitimate_indirect_address_p (rtx, int);\n+extern bool legitimate_indexed_address_p (rtx, int);\n+extern bool avoiding_indexed_address_p (machine_mode);\n+\n+extern rtx rs6000_got_register (rtx);\n+extern rtx find_addr_reg (rtx);\n+extern rtx gen_easy_altivec_constant (rtx);\n+extern const char *output_vec_const_move (rtx *);\n+extern const char *rs6000_output_move_128bit (rtx *);\n+extern bool rs6000_move_128bit_ok_p (rtx []);\n+extern bool rs6000_split_128bit_ok_p (rtx []);\n+extern void rs6000_expand_float128_convert (rtx, rtx, bool);\n+extern void rs6000_expand_vector_init (rtx, rtx);\n+extern void paired_expand_vector_init (rtx, rtx);\n+extern void rs6000_expand_vector_set (rtx, rtx, int);\n+extern void rs6000_expand_vector_extract (rtx, rtx, rtx);\n+extern void rs6000_split_vec_extract_var (rtx, rtx, rtx, rtx, rtx);\n+extern rtx rs6000_adjust_vec_address (rtx, rtx, rtx, rtx, machine_mode);\n+extern void rs6000_split_v4si_init (rtx []);\n+extern bool altivec_expand_vec_perm_const (rtx op[4]);\n+extern void altivec_expand_vec_perm_le (rtx op[4]);\n+extern bool rs6000_expand_vec_perm_const (rtx op[4]);\n+extern void altivec_expand_lvx_be (rtx, rtx, machine_mode, unsigned);\n+extern void altivec_expand_stvx_be (rtx, rtx, machine_mode, unsigned);\n+extern void altivec_expand_stvex_be (rtx, rtx, machine_mode, unsigned);\n+extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n+extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n+extern void rs6000_scale_v2df (rtx, rtx, int);\n+extern int expand_block_clear (rtx[]);\n+extern int expand_block_move (rtx[]);\n+extern bool expand_block_compare (rtx[]);\n+extern bool expand_strn_compare (rtx[], int);\n+extern const char * rs6000_output_load_multiple (rtx[]);\n+extern bool rs6000_is_valid_mask (rtx, int *, int *, machine_mode);\n+extern bool rs6000_is_valid_and_mask (rtx, machine_mode);\n+extern bool rs6000_is_valid_shift_mask (rtx, rtx, machine_mode);\n+extern bool rs6000_is_valid_insert_mask (rtx, rtx, machine_mode);\n+extern const char *rs6000_insn_for_and_mask (machine_mode, rtx *, bool);\n+extern const char *rs6000_insn_for_shift_mask (machine_mode, rtx *, bool);\n+extern const char *rs6000_insn_for_insert_mask (machine_mode, rtx *, bool);\n+extern bool rs6000_is_valid_2insn_and (rtx, machine_mode);\n+extern void rs6000_emit_2insn_and (machine_mode, rtx *, bool, int);\n+extern int registers_ok_for_quad_peep (rtx, rtx);\n+extern int mems_ok_for_quad_peep (rtx, rtx);\n+extern bool gpr_or_gpr_p (rtx, rtx);\n+extern bool direct_move_p (rtx, rtx);\n+extern bool quad_address_p (rtx, machine_mode, bool);\n+extern bool quad_load_store_p (rtx, rtx);\n+extern bool fusion_gpr_load_p (rtx, rtx, rtx, rtx);\n+extern void expand_fusion_gpr_load (rtx *);\n+extern void emit_fusion_addis (rtx, rtx, const char *, const char *);\n+extern void emit_fusion_load_store (rtx, rtx, rtx, const char *);\n+extern const char *emit_fusion_gpr_load (rtx, rtx);\n+extern bool fusion_p9_p (rtx, rtx, rtx, rtx);\n+extern void expand_fusion_p9_load (rtx *);\n+extern void expand_fusion_p9_store (rtx *);\n+extern const char *emit_fusion_p9_load (rtx, rtx, rtx);\n+extern const char *emit_fusion_p9_store (rtx, rtx, rtx);\n+extern rtx fusion_wrap_memory_address (rtx);\n+extern enum reg_class (*rs6000_preferred_reload_class_ptr) (rtx,\n+\t\t\t\t\t\t\t    enum reg_class);\n+extern enum reg_class (*rs6000_secondary_reload_class_ptr) (enum reg_class,\n+\t\t\t\t\t\t\t    machine_mode,\n+\t\t\t\t\t\t\t    rtx);\n+extern bool (*rs6000_secondary_memory_needed_ptr) (enum reg_class,\n+\t\t\t\t\t\t   enum reg_class,\n+\t\t\t\t\t\t   machine_mode);\n+extern bool (*rs6000_cannot_change_mode_class_ptr) (machine_mode,\n+\t\t\t\t\t\t    machine_mode,\n+\t\t\t\t\t\t    enum reg_class);\n+extern void rs6000_secondary_reload_inner (rtx, rtx, rtx, bool);\n+extern void rs6000_secondary_reload_gpr (rtx, rtx, rtx, bool);\n+extern int paired_emit_vector_cond_expr (rtx, rtx, rtx,\n+                                         rtx, rtx, rtx);\n+extern void paired_expand_vector_move (rtx operands[]);\n+\n+\n+extern int ccr_bit (rtx, int);\n+extern void rs6000_output_function_entry (FILE *, const char *);\n+extern void print_operand (FILE *, rtx, int);\n+extern void print_operand_address (FILE *, rtx);\n+extern enum rtx_code rs6000_reverse_condition (machine_mode,\n+\t\t\t\t\t       enum rtx_code);\n+extern rtx rs6000_emit_eqne (machine_mode, rtx, rtx, rtx);\n+extern void rs6000_emit_sISEL (machine_mode, rtx[]);\n+extern void rs6000_emit_sCOND (machine_mode, rtx[]);\n+extern void rs6000_emit_cbranch (machine_mode, rtx[]);\n+extern char * output_cbranch (rtx, const char *, int, rtx_insn *);\n+extern char * output_e500_flip_gt_bit (rtx, rtx);\n+extern const char * output_probe_stack_range (rtx, rtx);\n+extern bool rs6000_emit_set_const (rtx, rtx);\n+extern int rs6000_emit_cmove (rtx, rtx, rtx, rtx);\n+extern int rs6000_emit_vector_cond_expr (rtx, rtx, rtx, rtx, rtx, rtx);\n+extern void rs6000_emit_minmax (rtx, enum rtx_code, rtx, rtx);\n+extern void rs6000_split_signbit (rtx, rtx);\n+extern void rs6000_expand_atomic_compare_and_swap (rtx op[]);\n+extern void rs6000_expand_atomic_exchange (rtx op[]);\n+extern void rs6000_expand_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n+extern void rs6000_emit_swdiv (rtx, rtx, rtx, bool);\n+extern void rs6000_emit_swsqrt (rtx, rtx, bool);\n+extern void output_toc (FILE *, rtx, int, machine_mode);\n+extern rtx rs6000_longcall_ref (rtx);\n+extern void rs6000_fatal_bad_address (rtx);\n+extern rtx create_TOC_reference (rtx, rtx);\n+extern void rs6000_split_multireg_move (rtx, rtx);\n+extern void rs6000_emit_le_vsx_move (rtx, rtx, machine_mode);\n+extern bool valid_sf_si_move (rtx, rtx, machine_mode);\n+extern void rs6000_emit_move (rtx, rtx, machine_mode);\n+extern rtx rs6000_secondary_memory_needed_rtx (machine_mode);\n+extern machine_mode rs6000_secondary_memory_needed_mode (machine_mode);\n+extern rtx (*rs6000_legitimize_reload_address_ptr) (rtx, machine_mode,\n+\t\t\t\t\t\t    int, int, int, int *);\n+extern bool rs6000_legitimate_offset_address_p (machine_mode, rtx,\n+\t\t\t\t\t\tbool, bool);\n+extern rtx rs6000_find_base_term (rtx);\n+extern rtx rs6000_return_addr (int, rtx);\n+extern void rs6000_output_symbol_ref (FILE*, rtx);\n+extern HOST_WIDE_INT rs6000_initial_elimination_offset (int, int);\n+extern void rs6000_emit_popcount (rtx, rtx);\n+extern void rs6000_emit_parity (rtx, rtx);\n+\n+extern rtx rs6000_machopic_legitimize_pic_address (rtx, machine_mode,\n+\t\t\t\t\t\t   rtx);\n+extern rtx rs6000_address_for_fpconvert (rtx);\n+extern rtx rs6000_address_for_altivec (rtx);\n+extern rtx rs6000_allocate_stack_temp (machine_mode, bool, bool);\n+extern int rs6000_loop_align (rtx);\n+extern void rs6000_split_logical (rtx [], enum rtx_code, bool, bool, bool);\n+#endif /* RTX_CODE */\n+\n+#ifdef TREE_CODE\n+extern unsigned int rs6000_data_alignment (tree, unsigned int, enum data_align);\n+extern bool rs6000_special_adjust_field_align_p (tree, unsigned int);\n+extern unsigned int rs6000_special_round_type_align (tree, unsigned int,\n+\t\t\t\t\t\t     unsigned int);\n+extern unsigned int darwin_rs6000_special_round_type_align (tree, unsigned int,\n+\t\t\t\t\t\t\t    unsigned int);\n+extern tree altivec_resolve_overloaded_builtin (location_t, tree, void *);\n+extern rtx rs6000_libcall_value (machine_mode);\n+extern rtx rs6000_va_arg (tree, tree);\n+extern int function_ok_for_sibcall (tree);\n+extern int rs6000_reg_parm_stack_space (tree, bool);\n+extern void rs6000_asm_weaken_decl (FILE *, tree, const char *, const char *);\n+extern void rs6000_xcoff_declare_function_name (FILE *, const char *, tree);\n+extern void rs6000_xcoff_declare_object_name (FILE *, const char *, tree);\n+extern void rs6000_xcoff_asm_output_aligned_decl_common (FILE *, tree,\n+\t\t\t\t\t\t\t const char *,\n+\t\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t\t unsigned HOST_WIDE_INT);\n+extern void rs6000_elf_declare_function_name (FILE *, const char *, tree);\n+extern bool rs6000_elf_in_small_data_p (const_tree);\n+#ifdef ARGS_SIZE_RTX\n+/* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n+extern enum direction function_arg_padding (machine_mode, const_tree);\n+#endif /* ARGS_SIZE_RTX */\n+\n+#endif /* TREE_CODE */\n+\n+extern int direct_return (void);\n+extern int first_reg_to_save (void);\n+extern int first_fp_reg_to_save (void);\n+extern void output_ascii (FILE *, const char *, int);\n+extern void rs6000_gen_section_name (char **, const char *, const char *);\n+extern void output_function_profiler (FILE *, int);\n+extern void output_profile_hook  (int);\n+extern int rs6000_trampoline_size (void);\n+extern alias_set_type get_TOC_alias_set (void);\n+extern void rs6000_emit_prologue (void);\n+extern void rs6000_emit_load_toc_table (int);\n+extern unsigned int rs6000_dbx_register_number (unsigned int, unsigned int);\n+extern void rs6000_emit_epilogue (int);\n+extern void rs6000_expand_split_stack_prologue (void);\n+extern void rs6000_split_stack_space_check (rtx, rtx);\n+extern void rs6000_emit_eh_reg_restore (rtx, rtx);\n+extern const char * output_isel (rtx *);\n+extern void rs6000_call_aix (rtx, rtx, rtx, rtx);\n+extern void rs6000_sibcall_aix (rtx, rtx, rtx, rtx);\n+extern void rs6000_aix_asm_output_dwarf_table_ref (char *);\n+extern void get_ppc476_thunk_name (char name[32]);\n+extern bool rs6000_overloaded_builtin_p (enum rs6000_builtins);\n+extern const char *rs6000_overloaded_builtin_name (enum rs6000_builtins);\n+extern int rs6000_store_data_bypass_p (rtx_insn *, rtx_insn *);\n+extern HOST_WIDE_INT rs6000_builtin_mask_calculate (void);\n+extern void rs6000_asm_output_dwarf_pcrel (FILE *file, int size,\n+\t\t\t\t\t   const char *label);\n+extern void rs6000_asm_output_dwarf_datarel (FILE *file, int size,\n+\t\t\t\t\t     const char *label);\n+\n+/* Declare functions in rs6000-c.c */\n+\n+extern void rs6000_pragma_longcall (struct cpp_reader *);\n+extern void rs6000_cpu_cpp_builtins (struct cpp_reader *);\n+#ifdef TREE_CODE\n+extern bool rs6000_pragma_target_parse (tree, tree);\n+#endif\n+extern void rs6000_target_modify_macros (bool, HOST_WIDE_INT, HOST_WIDE_INT);\n+extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n+\t\t\t\t\t\tHOST_WIDE_INT);\n+\n+#if TARGET_MACHO\n+char *output_call (rtx_insn *, rtx *, int, int);\n+#endif\n+\n+#ifdef NO_DOLLAR_IN_LABEL\n+const char * rs6000_xcoff_strip_dollar (const char *);\n+#endif\n+\n+void rs6000_final_prescan_insn (rtx_insn *, rtx *operand, int num_operands);\n+\n+extern bool rs6000_hard_regno_mode_ok_p[][FIRST_PSEUDO_REGISTER];\n+extern unsigned char rs6000_class_max_nregs[][LIM_REG_CLASSES];\n+extern unsigned char rs6000_hard_regno_nregs[][FIRST_PSEUDO_REGISTER];\n+\n+extern bool rs6000_linux_float_exceptions_rounding_supported_p (void);\n+\n+/* Pass management.  */\n+namespace gcc { class context; }\n+class rtl_opt_pass;\n+\n+extern rtl_opt_pass *make_pass_analyze_swaps (gcc::context *);\n+\n+#endif  /* rs6000-protos.h */"}, {"sha": "2ae74f4f4000c1fdaf80c40474beede35f72b907", "filename": "gcc/config/powerpcspe/powerpcspe-tables.opt", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-tables.opt?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,196 @@\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from powerpcspe-cpus.def.\n+\n+; Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(rs6000_cpu_opt_value) Type(int)\n+Known CPUs (for use with the -mcpu= and -mtune= options):\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(native) Value(RS6000_CPU_OPTION_NATIVE) DriverOnly\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(401) Value(0)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(403) Value(1)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(405) Value(2)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(405fp) Value(3)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(440) Value(4)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(440fp) Value(5)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(464) Value(6)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(464fp) Value(7)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(476) Value(8)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(476fp) Value(9)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(505) Value(10)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(601) Value(11)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(602) Value(12)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(603) Value(13)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(603e) Value(14)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(604) Value(15)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(604e) Value(16)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(620) Value(17)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(630) Value(18)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(740) Value(19)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(7400) Value(20)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(7450) Value(21)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(750) Value(22)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(801) Value(23)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(821) Value(24)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(823) Value(25)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(8540) Value(26)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(8548) Value(27)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(a2) Value(28)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e300c2) Value(29)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e300c3) Value(30)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e500mc) Value(31)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e500mc64) Value(32)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e5500) Value(33)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(e6500) Value(34)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(860) Value(35)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(970) Value(36)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(cell) Value(37)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(ec603e) Value(38)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(G3) Value(39)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(G4) Value(40)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(G5) Value(41)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(titan) Value(42)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power3) Value(43)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power4) Value(44)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power5) Value(45)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power5+) Value(46)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power6) Value(47)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power6x) Value(48)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power7) Value(49)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power8) Value(50)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(power9) Value(51)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(powerpc) Value(52)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(powerpc64) Value(53)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(powerpc64le) Value(54)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(rs64) Value(55)\n+"}, {"sha": "73d608fd805291eef8ba406b125bfb747d3c80f7", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "added", "additions": 43668, "deletions": 0, "changes": 43668, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "e3e417ab73e3a0d3443221d35896ad768a47e23f", "filename": "gcc/config/powerpcspe/powerpcspe.h", "status": "added", "additions": 2928, "deletions": 0, "changes": 2928, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "799d786edfedb98729add9e4e5f36257397aec66", "filename": "gcc/config/powerpcspe/powerpcspe.md", "status": "added", "additions": 14770, "deletions": 0, "changes": 14770, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "dc2fb11d17571c40156e512ffdb2b5da8d93d4e5", "filename": "gcc/config/powerpcspe/powerpcspe.opt", "status": "added", "additions": 702, "deletions": 0, "changes": 702, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.opt?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,702 @@\n+; Options for the rs6000 port of the compiler\n+;\n+; Copyright (C) 2005-2017 Free Software Foundation, Inc.\n+; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+HeaderInclude\n+config/powerpcspe/powerpcspe-opts.h\n+\n+;; ISA flag bits (on/off)\n+Variable\n+HOST_WIDE_INT rs6000_isa_flags = TARGET_DEFAULT\n+\n+TargetSave\n+HOST_WIDE_INT x_rs6000_isa_flags\n+\n+;; Miscellaneous flag bits that were set explicitly by the user\n+Variable\n+HOST_WIDE_INT rs6000_isa_flags_explicit\n+\n+TargetSave\n+HOST_WIDE_INT x_rs6000_isa_flags_explicit\n+\n+;; Current processor\n+TargetVariable\n+enum processor_type rs6000_cpu = PROCESSOR_PPC603\n+\n+;; Always emit branch hint bits.\n+TargetVariable\n+unsigned char rs6000_always_hint\n+\n+;; Schedule instructions for group formation.\n+TargetVariable\n+unsigned char rs6000_sched_groups\n+\n+;; Align branch targets.\n+TargetVariable\n+unsigned char rs6000_align_branch_targets\n+\n+;; Support for -msched-costly-dep option.\n+TargetVariable\n+enum rs6000_dependence_cost rs6000_sched_costly_dep = no_dep_costly\n+\n+;; Support for -minsert-sched-nops option.\n+TargetVariable\n+enum rs6000_nop_insertion rs6000_sched_insert_nops = sched_finish_none\n+\n+;; Non-zero to allow overriding loop alignment.\n+TargetVariable\n+unsigned char can_override_loop_align\n+\n+;; Which small data model to use (for System V targets only)\n+TargetVariable\n+enum rs6000_sdata_type rs6000_sdata = SDATA_DATA\n+\n+;; Bit size of immediate TLS offsets and string from which it is decoded.\n+TargetVariable\n+int rs6000_tls_size = 32\n+\n+;; ABI enumeration available for subtarget to use.\n+TargetVariable\n+enum rs6000_abi rs6000_current_abi = ABI_NONE\n+\n+;; Type of traceback to use.\n+TargetVariable\n+enum rs6000_traceback_type rs6000_traceback = traceback_default\n+\n+;; Control alignment for fields within structures.\n+TargetVariable\n+unsigned char rs6000_alignment_flags\n+\n+;; Code model for 64-bit linux.\n+TargetVariable\n+enum rs6000_cmodel rs6000_current_cmodel = CMODEL_SMALL\n+\n+;; What type of reciprocal estimation instructions to generate\n+TargetVariable\n+unsigned int rs6000_recip_control\n+\n+;; Mask of what builtin functions are allowed\n+TargetVariable\n+HOST_WIDE_INT rs6000_builtin_mask\n+\n+;; Debug flags\n+TargetVariable\n+unsigned int rs6000_debug\n+\n+;; This option existed in the past, but now is always on.\n+mpowerpc\n+Target RejectNegative Undocumented Ignore\n+\n+mpowerpc64\n+Target Report Mask(POWERPC64) Var(rs6000_isa_flags)\n+Use PowerPC-64 instruction set.\n+\n+mpowerpc-gpopt\n+Target Report Mask(PPC_GPOPT) Var(rs6000_isa_flags)\n+Use PowerPC General Purpose group optional instructions.\n+\n+mpowerpc-gfxopt\n+Target Report Mask(PPC_GFXOPT) Var(rs6000_isa_flags)\n+Use PowerPC Graphics group optional instructions.\n+\n+mmfcrf\n+Target Report Mask(MFCRF) Var(rs6000_isa_flags)\n+Use PowerPC V2.01 single field mfcr instruction.\n+\n+mpopcntb\n+Target Report Mask(POPCNTB) Var(rs6000_isa_flags)\n+Use PowerPC V2.02 popcntb instruction.\n+\n+mfprnd\n+Target Report Mask(FPRND) Var(rs6000_isa_flags)\n+Use PowerPC V2.02 floating point rounding instructions.\n+\n+mcmpb\n+Target Report Mask(CMPB) Var(rs6000_isa_flags)\n+Use PowerPC V2.05 compare bytes instruction.\n+\n+mmfpgpr\n+Target Report Mask(MFPGPR) Var(rs6000_isa_flags)\n+Use extended PowerPC V2.05 move floating point to/from GPR instructions.\n+\n+maltivec\n+Target Report Mask(ALTIVEC) Var(rs6000_isa_flags)\n+Use AltiVec instructions.\n+\n+maltivec=le\n+Target Report RejectNegative Var(rs6000_altivec_element_order, 1) Save\n+Generate AltiVec instructions using little-endian element order.\n+\n+maltivec=be\n+Target Report RejectNegative Var(rs6000_altivec_element_order, 2)\n+Generate AltiVec instructions using big-endian element order.\n+\n+mhard-dfp\n+Target Report Mask(DFP) Var(rs6000_isa_flags)\n+Use decimal floating point instructions.\n+\n+mmulhw\n+Target Report Mask(MULHW) Var(rs6000_isa_flags)\n+Use 4xx half-word multiply instructions.\n+\n+mdlmzb\n+Target Report Mask(DLMZB) Var(rs6000_isa_flags)\n+Use 4xx string-search dlmzb instruction.\n+\n+mmultiple\n+Target Report Mask(MULTIPLE) Var(rs6000_isa_flags)\n+Generate load/store multiple instructions.\n+\n+mstring\n+Target Report Mask(STRING) Var(rs6000_isa_flags)\n+Generate string instructions for block moves.\n+\n+msoft-float\n+Target Report RejectNegative Mask(SOFT_FLOAT) Var(rs6000_isa_flags)\n+Do not use hardware floating point.\n+\n+mhard-float\n+Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT) Var(rs6000_isa_flags)\n+Use hardware floating point.\n+\n+mpopcntd\n+Target Report Mask(POPCNTD) Var(rs6000_isa_flags)\n+Use PowerPC V2.06 popcntd instruction.\n+\n+mfriz\n+Target Report Var(TARGET_FRIZ) Init(-1) Save\n+Under -ffast-math, generate a FRIZ instruction for (double)(long long) conversions.\n+\n+mveclibabi=\n+Target RejectNegative Joined Var(rs6000_veclibabi_name)\n+Vector library ABI to use.\n+\n+mvsx\n+Target Report Mask(VSX) Var(rs6000_isa_flags)\n+Use vector/scalar (VSX) instructions.\n+\n+mvsx-scalar-float\n+Target Undocumented Report Var(TARGET_VSX_SCALAR_FLOAT) Init(1)\n+; If -mpower8-vector, use VSX arithmetic instructions for SFmode (on by default)\n+\n+mvsx-scalar-double\n+Target Undocumented Report Var(TARGET_VSX_SCALAR_DOUBLE) Init(1)\n+; If -mvsx, use VSX arithmetic instructions for DFmode (on by default)\n+\n+mvsx-scalar-memory\n+Target Undocumented Report Alias(mupper-regs-df)\n+\n+mvsx-align-128\n+Target Undocumented Report Var(TARGET_VSX_ALIGN_128) Save\n+; If -mvsx, set alignment to 128 bits instead of 32/64\n+\n+mallow-movmisalign\n+Target Undocumented Var(TARGET_ALLOW_MOVMISALIGN) Init(-1) Save\n+; Allow the movmisalign in DF/DI vectors\n+\n+mefficient-unaligned-vsx\n+Target Undocumented Report Mask(EFFICIENT_UNALIGNED_VSX) Var(rs6000_isa_flags)\n+; Consider unaligned VSX vector and fp accesses to be efficient\n+\n+mallow-df-permute\n+Target Undocumented Var(TARGET_ALLOW_DF_PERMUTE) Save\n+; Allow permutation of DF/DI vectors\n+\n+msched-groups\n+Target Undocumented Report Var(TARGET_SCHED_GROUPS) Init(-1) Save\n+; Explicitly set rs6000_sched_groups\n+\n+malways-hint\n+Target Undocumented Report Var(TARGET_ALWAYS_HINT) Init(-1) Save\n+; Explicitly set rs6000_always_hint\n+\n+malign-branch-targets\n+Target Undocumented Report Var(TARGET_ALIGN_BRANCH_TARGETS) Init(-1) Save\n+; Explicitly set rs6000_align_branch_targets\n+\n+mvectorize-builtins\n+Target Undocumented Report Var(TARGET_VECTORIZE_BUILTINS) Init(-1) Save\n+; Explicitly control whether we vectorize the builtins or not.\n+\n+mno-update\n+Target Report RejectNegative Mask(NO_UPDATE) Var(rs6000_isa_flags)\n+Do not generate load/store with update instructions.\n+\n+mupdate\n+Target Report RejectNegative InverseMask(NO_UPDATE, UPDATE) Var(rs6000_isa_flags)\n+Generate load/store with update instructions.\n+\n+msingle-pic-base\n+Target Report Var(TARGET_SINGLE_PIC_BASE) Init(0)\n+Do not load the PIC register in function prologues.\n+\n+mavoid-indexed-addresses\n+Target Report Var(TARGET_AVOID_XFORM) Init(-1) Save\n+Avoid generation of indexed load/store instructions when possible.\n+\n+mtls-markers\n+Target Report Var(tls_markers) Init(1) Save\n+Mark __tls_get_addr calls with argument info.\n+\n+msched-epilog\n+Target Undocumented Var(TARGET_SCHED_PROLOG) Init(1) Save\n+\n+msched-prolog\n+Target Report Var(TARGET_SCHED_PROLOG) Save\n+Schedule the start and end of the procedure.\n+\n+maix-struct-return\n+Target Report RejectNegative Var(aix_struct_return) Save\n+Return all structures in memory (AIX default).\n+\n+msvr4-struct-return\n+Target Report RejectNegative Var(aix_struct_return,0) Save\n+Return small structures in registers (SVR4 default).\n+\n+mxl-compat\n+Target Report Var(TARGET_XL_COMPAT) Save\n+Conform more closely to IBM XLC semantics.\n+\n+mrecip\n+Target Report\n+Generate software reciprocal divide and square root for better throughput.\n+\n+mrecip=\n+Target Report RejectNegative Joined Var(rs6000_recip_name)\n+Generate software reciprocal divide and square root for better throughput.\n+\n+mrecip-precision\n+Target Report Mask(RECIP_PRECISION) Var(rs6000_isa_flags)\n+Assume that the reciprocal estimate instructions provide more accuracy.\n+\n+mno-fp-in-toc\n+Target Report RejectNegative Var(TARGET_NO_FP_IN_TOC) Save\n+Do not place floating point constants in TOC.\n+\n+mfp-in-toc\n+Target Report RejectNegative Var(TARGET_NO_FP_IN_TOC,0) Save\n+Place floating point constants in TOC.\n+\n+mno-sum-in-toc\n+Target RejectNegative Var(TARGET_NO_SUM_IN_TOC) Save\n+Do not place symbol+offset constants in TOC.\n+\n+msum-in-toc\n+Target RejectNegative Var(TARGET_NO_SUM_IN_TOC,0) Save\n+Place symbol+offset constants in TOC.\n+\n+;  Output only one TOC entry per module.  Normally linking fails if\n+;   there are more than 16K unique variables/constants in an executable.  With\n+;   this option, linking fails only if there are more than 16K modules, or\n+;   if there are more than 16K unique variables/constant in a single module.\n+;\n+;   This is at the cost of having 2 extra loads and one extra store per\n+;   function, and one less allocable register.\n+mminimal-toc\n+Target Report Mask(MINIMAL_TOC) Var(rs6000_isa_flags)\n+Use only one TOC entry per procedure.\n+\n+mfull-toc\n+Target Report\n+Put everything in the regular TOC.\n+\n+mvrsave\n+Target Report Var(TARGET_ALTIVEC_VRSAVE) Save\n+Generate VRSAVE instructions when generating AltiVec code.\n+\n+mvrsave=no\n+Target RejectNegative Alias(mvrsave) NegativeAlias\n+Deprecated option.  Use -mno-vrsave instead.\n+\n+mvrsave=yes\n+Target RejectNegative Alias(mvrsave)\n+Deprecated option.  Use -mvrsave instead.\n+\n+mblock-move-inline-limit=\n+Target Report Var(rs6000_block_move_inline_limit) Init(0) RejectNegative Joined UInteger Save\n+Specify how many bytes should be moved inline before calling out to memcpy/memmove.\n+\n+mblock-compare-inline-limit=\n+Target Report Var(rs6000_block_compare_inline_limit) Init(5) RejectNegative Joined UInteger Save\n+Specify the maximum number pairs of load instructions that should be generated inline for the compare.  If the number needed exceeds the limit, a call to memcmp will be generated instead.\n+\n+mstring-compare-inline-limit=\n+Target Report Var(rs6000_string_compare_inline_limit) Init(8) RejectNegative Joined UInteger Save\n+Specify the maximum number pairs of load instructions that should be generated inline for the compare.  If the number needed exceeds the limit, a call to strncmp will be generated instead.\n+\n+misel\n+Target Report Mask(ISEL) Var(rs6000_isa_flags)\n+Generate isel instructions.\n+\n+misel=no\n+Target RejectNegative Alias(misel) NegativeAlias\n+Deprecated option.  Use -mno-isel instead.\n+\n+misel=yes\n+Target RejectNegative Alias(misel)\n+Deprecated option.  Use -misel instead.\n+\n+mspe\n+Target Var(rs6000_spe) Save\n+Generate SPE SIMD instructions on E500.\n+\n+mpaired\n+Target Var(rs6000_paired_float) Save\n+Generate PPC750CL paired-single instructions.\n+\n+mspe=no\n+Target RejectNegative Alias(mspe) NegativeAlias\n+Deprecated option.  Use -mno-spe instead.\n+\n+mspe=yes\n+Target RejectNegative Alias(mspe)\n+Deprecated option.  Use -mspe instead.\n+\n+mdebug=\n+Target RejectNegative Joined\n+-mdebug=\tEnable debug output.\n+\n+mabi=altivec\n+Target RejectNegative Var(rs6000_altivec_abi) Save\n+Use the AltiVec ABI extensions.\n+\n+mabi=no-altivec\n+Target RejectNegative Var(rs6000_altivec_abi, 0)\n+Do not use the AltiVec ABI extensions.\n+\n+mabi=spe\n+Target RejectNegative Var(rs6000_spe_abi) Save\n+Use the SPE ABI extensions.\n+\n+mabi=no-spe\n+Target RejectNegative Var(rs6000_spe_abi, 0)\n+Do not use the SPE ABI extensions.\n+\n+mabi=elfv1\n+Target RejectNegative Var(rs6000_elf_abi, 1) Save\n+Use the ELFv1 ABI.\n+\n+mabi=elfv2\n+Target RejectNegative Var(rs6000_elf_abi, 2)\n+Use the ELFv2 ABI.\n+\n+; These are here for testing during development only, do not document\n+; in the manual please.\n+\n+; If we want Darwin's struct-by-value-in-regs ABI.\n+mabi=d64\n+Target RejectNegative Undocumented Warn(using darwin64 ABI) Var(rs6000_darwin64_abi) Save\n+\n+mabi=d32\n+Target RejectNegative Undocumented Warn(using old darwin ABI) Var(rs6000_darwin64_abi, 0)\n+\n+mabi=ieeelongdouble\n+Target RejectNegative Undocumented Warn(using IEEE extended precision long double) Var(rs6000_ieeequad) Save\n+\n+mabi=ibmlongdouble\n+Target RejectNegative Undocumented Warn(using IBM extended precision long double) Var(rs6000_ieeequad, 0)\n+\n+mcpu=\n+Target RejectNegative Joined Var(rs6000_cpu_index) Init(-1) Enum(rs6000_cpu_opt_value) Save\n+-mcpu=\tUse features of and schedule code for given CPU.\n+\n+mtune=\n+Target RejectNegative Joined Var(rs6000_tune_index) Init(-1) Enum(rs6000_cpu_opt_value) Save\n+-mtune=\tSchedule code for given CPU.\n+\n+mtraceback=\n+Target RejectNegative Joined Enum(rs6000_traceback_type) Var(rs6000_traceback)\n+-mtraceback=\tSelect full, part, or no traceback table.\n+\n+Enum\n+Name(rs6000_traceback_type) Type(enum rs6000_traceback_type)\n+\n+EnumValue\n+Enum(rs6000_traceback_type) String(full) Value(traceback_full)\n+\n+EnumValue\n+Enum(rs6000_traceback_type) String(part) Value(traceback_part)\n+\n+EnumValue\n+Enum(rs6000_traceback_type) String(no) Value(traceback_none)\n+\n+mlongcall\n+Target Report Var(rs6000_default_long_calls) Save\n+Avoid all range limits on call instructions.\n+\n+mgen-cell-microcode\n+Target Report Var(rs6000_gen_cell_microcode) Init(-1) Save\n+Generate Cell microcode.\n+\n+mwarn-cell-microcode\n+Target Var(rs6000_warn_cell_microcode) Init(0) Warning Save\n+Warn when a Cell microcoded instruction is emitted.\n+\n+mwarn-altivec-long\n+Target Var(rs6000_warn_altivec_long) Init(1) Save\n+Warn about deprecated 'vector long ...' AltiVec type usage.\n+\n+mfloat-gprs=\n+Target RejectNegative Joined Enum(rs6000_float_gprs) Var(rs6000_float_gprs) Save\n+-mfloat-gprs=\tSelect GPR floating point method.\n+\n+Enum\n+Name(rs6000_float_gprs) Type(unsigned char)\n+Valid arguments to -mfloat-gprs=:\n+\n+EnumValue\n+Enum(rs6000_float_gprs) String(yes) Value(1)\n+\n+EnumValue\n+Enum(rs6000_float_gprs) String(single) Value(1)\n+\n+EnumValue\n+Enum(rs6000_float_gprs) String(double) Value(2)\n+\n+EnumValue\n+Enum(rs6000_float_gprs) String(no) Value(0)\n+\n+mlong-double-\n+Target RejectNegative Joined UInteger Var(rs6000_long_double_type_size) Save\n+-mlong-double-<n>\tSpecify size of long double (64 or 128 bits).\n+\n+mlra\n+Target Report Mask(LRA) Var(rs6000_isa_flags)\n+Enable Local Register Allocation.\n+\n+msched-costly-dep=\n+Target RejectNegative Joined Var(rs6000_sched_costly_dep_str)\n+Determine which dependences between insns are considered costly.\n+\n+minsert-sched-nops=\n+Target RejectNegative Joined Var(rs6000_sched_insert_nops_str)\n+Specify which post scheduling nop insertion scheme to apply.\n+\n+malign-\n+Target RejectNegative Joined Enum(rs6000_alignment_flags) Var(rs6000_alignment_flags)\n+Specify alignment of structure fields default/natural.\n+\n+Enum\n+Name(rs6000_alignment_flags) Type(unsigned char)\n+Valid arguments to -malign-:\n+\n+EnumValue\n+Enum(rs6000_alignment_flags) String(power) Value(MASK_ALIGN_POWER)\n+\n+EnumValue\n+Enum(rs6000_alignment_flags) String(natural) Value(MASK_ALIGN_NATURAL)\n+\n+mprioritize-restricted-insns=\n+Target RejectNegative Joined UInteger Var(rs6000_sched_restricted_insns_priority) Save\n+Specify scheduling priority for dispatch slot restricted insns.\n+\n+msingle-float\n+Target RejectNegative Var(rs6000_single_float) Save\n+Single-precision floating point unit.\n+\n+mdouble-float\n+Target RejectNegative Var(rs6000_double_float) Save\n+Double-precision floating point unit.\n+\n+msimple-fpu\n+Target RejectNegative Var(rs6000_simple_fpu) Save\n+Floating point unit does not support divide & sqrt.\n+\n+mfpu=\n+Target RejectNegative Joined Enum(fpu_type_t) Var(rs6000_fpu_type) Init(FPU_NONE)\n+-mfpu=\tSpecify FP (sp, dp, sp-lite, dp-lite) (implies -mxilinx-fpu).\n+\n+Enum\n+Name(fpu_type_t) Type(enum fpu_type_t)\n+\n+EnumValue\n+Enum(fpu_type_t) String(none) Value(FPU_NONE)\n+\n+EnumValue\n+Enum(fpu_type_t) String(sp_lite) Value(FPU_SF_LITE)\n+\n+EnumValue\n+Enum(fpu_type_t) String(dp_lite) Value(FPU_DF_LITE)\n+\n+EnumValue\n+Enum(fpu_type_t) String(sp_full) Value(FPU_SF_FULL)\n+\n+EnumValue\n+Enum(fpu_type_t) String(dp_full) Value(FPU_DF_FULL)\n+\n+mxilinx-fpu\n+Target Var(rs6000_xilinx_fpu) Save\n+Specify Xilinx FPU.\n+\n+mpointers-to-nested-functions\n+Target Report Var(TARGET_POINTERS_TO_NESTED_FUNCTIONS) Init(1) Save\n+Use r11 to hold the static link in calls to functions via pointers.\n+\n+msave-toc-indirect\n+Target Report Mask(SAVE_TOC_INDIRECT) Var(rs6000_isa_flags)\n+Save the TOC in the prologue for indirect calls rather than inline.\n+\n+mvsx-timode\n+Target Undocumented Mask(VSX_TIMODE) Var(rs6000_isa_flags)\n+Allow 128-bit integers in VSX registers.\n+\n+mpower8-fusion\n+Target Report Mask(P8_FUSION) Var(rs6000_isa_flags)\n+Fuse certain integer operations together for better performance on power8.\n+\n+mpower8-fusion-sign\n+Target Undocumented Mask(P8_FUSION_SIGN) Var(rs6000_isa_flags)\n+Allow sign extension in fusion operations.\n+\n+mpower8-vector\n+Target Report Mask(P8_VECTOR) Var(rs6000_isa_flags)\n+Use vector and scalar instructions added in ISA 2.07.\n+\n+mcrypto\n+Target Report Mask(CRYPTO) Var(rs6000_isa_flags)\n+Use ISA 2.07 Category:Vector.AES and Category:Vector.SHA2 instructions.\n+\n+mdirect-move\n+Target Report Mask(DIRECT_MOVE) Var(rs6000_isa_flags)\n+Use ISA 2.07 direct move between GPR & VSX register instructions.\n+\n+mhtm\n+Target Report Mask(HTM) Var(rs6000_isa_flags)\n+Use ISA 2.07 transactional memory (HTM) instructions.\n+\n+mquad-memory\n+Target Report Mask(QUAD_MEMORY) Var(rs6000_isa_flags)\n+Generate the quad word memory instructions (lq/stq).\n+\n+mquad-memory-atomic\n+Target Report Mask(QUAD_MEMORY_ATOMIC) Var(rs6000_isa_flags)\n+Generate the quad word memory atomic instructions (lqarx/stqcx).\n+\n+mcompat-align-parm\n+Target Report Var(rs6000_compat_align_parm) Init(0) Save\n+Generate aggregate parameter passing code with at most 64-bit alignment.\n+\n+mupper-regs-df\n+Target Report Mask(UPPER_REGS_DF) Var(rs6000_isa_flags)\n+Allow double variables in upper registers with -mcpu=power7 or -mvsx.\n+\n+mupper-regs-sf\n+Target Report Mask(UPPER_REGS_SF) Var(rs6000_isa_flags)\n+Allow float variables in upper registers with -mcpu=power8 or -mpower8-vector.\n+\n+mupper-regs\n+Target Report Var(TARGET_UPPER_REGS) Init(-1) Save\n+Allow float/double variables in upper registers if cpu allows it.\n+\n+mupper-regs-di\n+Target Report Mask(UPPER_REGS_DI) Var(rs6000_isa_flags)\n+Allow 64-bit integer variables in upper registers with -mcpu=power7 or -mvsx.\n+\n+moptimize-swaps\n+Target Undocumented Var(rs6000_optimize_swaps) Init(1) Save\n+Analyze and remove doubleword swaps from VSX computations.\n+\n+mpower9-fusion\n+Target Undocumented Report Mask(P9_FUSION) Var(rs6000_isa_flags)\n+Fuse certain operations together for better performance on power9.\n+\n+mpower9-misc\n+Target Undocumented Report Mask(P9_MISC) Var(rs6000_isa_flags)\n+Use certain scalar instructions added in ISA 3.0.\n+\n+mpower9-vector\n+Target Undocumented Report Mask(P9_VECTOR) Var(rs6000_isa_flags)\n+Use vector instructions added in ISA 3.0.\n+\n+mpower9-dform-scalar\n+Target Undocumented Mask(P9_DFORM_SCALAR) Var(rs6000_isa_flags)\n+Use scalar register+offset memory instructions added in ISA 3.0.\n+\n+mpower9-dform-vector\n+Target Undocumented Mask(P9_DFORM_VECTOR) Var(rs6000_isa_flags)\n+Use vector register+offset memory instructions added in ISA 3.0.\n+\n+mpower9-dform\n+Target Undocumented Report Var(TARGET_P9_DFORM_BOTH) Init(-1) Save\n+Use register+offset memory instructions added in ISA 3.0.\n+\n+mpower9-minmax\n+Target Undocumented Mask(P9_MINMAX) Var(rs6000_isa_flags)\n+Use the new min/max instructions defined in ISA 3.0.\n+\n+mtoc-fusion\n+Target Undocumented Mask(TOC_FUSION) Var(rs6000_isa_flags)\n+Fuse medium/large code model toc references with the memory instruction.\n+\n+mmodulo\n+Target Undocumented Report Mask(MODULO) Var(rs6000_isa_flags)\n+Generate the integer modulo instructions.\n+\n+; We want to enable the internal support for the IEEE 128-bit floating point\n+; type without necessarily enabling the __float128 keyword.  This is to allow\n+; Boost and other libraries that know about __float128 to work until the\n+; official library support is finished.\n+mfloat128-type\n+Target Undocumented Mask(FLOAT128_TYPE) Var(rs6000_isa_flags)\n+Allow the IEEE 128-bit types without requiring the __float128 keyword.\n+\n+mfloat128\n+Target Report Mask(FLOAT128_KEYWORD) Var(rs6000_isa_flags)\n+Enable IEEE 128-bit floating point via the __float128 keyword.\n+\n+mfloat128-hardware\n+Target Report Mask(FLOAT128_HW) Var(rs6000_isa_flags)\n+Enable using IEEE 128-bit floating point instructions.\n+\n+mfloat128-convert\n+Target Undocumented Mask(FLOAT128_CVT) Var(rs6000_isa_flags)\n+Enable default conversions between __float128 & long double.\n+\n+mvsx-small-integer\n+Target Report Mask(VSX_SMALL_INTEGER) Var(rs6000_isa_flags)\n+Enable small integers to be in VSX registers.\n+\n+mstack-protector-guard=\n+Target RejectNegative Joined Enum(stack_protector_guard) Var(rs6000_stack_protector_guard) Init(SSP_TLS)\n+Use given stack-protector guard.\n+\n+Enum\n+Name(stack_protector_guard) Type(enum stack_protector_guard)\n+Valid arguments to -mstack-protector-guard=:\n+\n+EnumValue\n+Enum(stack_protector_guard) String(tls) Value(SSP_TLS)\n+\n+EnumValue\n+Enum(stack_protector_guard) String(global) Value(SSP_GLOBAL)\n+\n+mstack-protector-guard-reg=\n+Target RejectNegative Joined Var(rs6000_stack_protector_guard_reg_str)\n+Use the given base register for addressing the stack-protector guard.\n+\n+TargetVariable\n+int rs6000_stack_protector_guard_reg = 0\n+\n+mstack-protector-guard-offset=\n+Target RejectNegative Joined Integer Var(rs6000_stack_protector_guard_offset_str)\n+Use the given offset for addressing the stack-protector guard.\n+\n+TargetVariable\n+long rs6000_stack_protector_guard_offset = 0"}, {"sha": "33925e558b034aa45b49823873f78cb9960e8c67", "filename": "gcc/config/powerpcspe/ppc-asm.h", "status": "added", "additions": 381, "deletions": 0, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fppc-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fppc-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fppc-asm.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,381 @@\n+/* PowerPC asm definitions for GNU C.\n+\n+Copyright (C) 2002-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Under winnt, 1) gas supports the following as names and 2) in particular\n+   defining \"toc\" breaks the FUNC_START macro as \".toc\" becomes \".2\" */\n+\n+#define r0\t0\n+#define sp\t1\n+#define toc\t2\n+#define r3\t3\n+#define r4\t4\n+#define r5\t5\n+#define r6\t6\n+#define r7\t7\n+#define r8\t8\n+#define r9\t9\n+#define r10\t10\n+#define r11\t11\n+#define r12\t12\n+#define r13\t13\n+#define r14\t14\n+#define r15\t15\n+#define r16\t16\n+#define r17\t17\n+#define r18\t18\n+#define r19     19\n+#define r20\t20\n+#define r21\t21\n+#define r22\t22\n+#define r23\t23\n+#define r24\t24\n+#define r25\t25\n+#define r26\t26\n+#define r27\t27\n+#define r28\t28\n+#define r29\t29\n+#define r30\t30\n+#define r31\t31\n+\n+#define cr0\t0\n+#define cr1\t1\n+#define cr2\t2\n+#define cr3\t3\n+#define cr4\t4\n+#define cr5\t5\n+#define cr6\t6\n+#define cr7\t7\n+\n+#define f0\t0\n+#define f1\t1\n+#define f2\t2\n+#define f3\t3\n+#define f4\t4\n+#define f5\t5\n+#define f6\t6\n+#define f7\t7\n+#define f8\t8\n+#define f9\t9\n+#define f10\t10\n+#define f11\t11\n+#define f12\t12\n+#define f13\t13\n+#define f14\t14\n+#define f15\t15\n+#define f16\t16\n+#define f17\t17\n+#define f18\t18\n+#define f19\t19\n+#define f20\t20\n+#define f21\t21\n+#define f22\t22\n+#define f23\t23\n+#define f24\t24\n+#define f25\t25\n+#define f26\t26\n+#define f27\t27\n+#define f28\t28\n+#define f29\t29\n+#define f30\t30\n+#define f31\t31\n+\n+#ifdef __VSX__\n+#define f32\t32\n+#define f33\t33\n+#define f34\t34\n+#define f35\t35\n+#define f36\t36\n+#define f37\t37\n+#define f38\t38\n+#define f39\t39\n+#define f40\t40\n+#define f41\t41\n+#define f42\t42\n+#define f43\t43\n+#define f44\t44\n+#define f45\t45\n+#define f46\t46\n+#define f47\t47\n+#define f48\t48\n+#define f49\t49\n+#define f50\t30\n+#define f51\t51\n+#define f52\t52\n+#define f53\t53\n+#define f54\t54\n+#define f55\t55\n+#define f56\t56\n+#define f57\t57\n+#define f58\t58\n+#define f59\t59\n+#define f60\t60\n+#define f61\t61\n+#define f62\t62\n+#define f63\t63\n+#endif\n+\n+#ifdef __ALTIVEC__\n+#define v0\t0\n+#define v1\t1\n+#define v2\t2\n+#define v3\t3\n+#define v4\t4\n+#define v5\t5\n+#define v6\t6\n+#define v7\t7\n+#define v8\t8\n+#define v9\t9\n+#define v10\t10\n+#define v11\t11\n+#define v12\t12\n+#define v13\t13\n+#define v14\t14\n+#define v15\t15\n+#define v16\t16\n+#define v17\t17\n+#define v18\t18\n+#define v19\t19\n+#define v20\t20\n+#define v21\t21\n+#define v22\t22\n+#define v23\t23\n+#define v24\t24\n+#define v25\t25\n+#define v26\t26\n+#define v27\t27\n+#define v28\t28\n+#define v29\t29\n+#define v30\t30\n+#define v31\t31\n+#endif\n+\n+#ifdef __VSX__\n+#define vs0\t0\n+#define vs1\t1\n+#define vs2\t2\n+#define vs3\t3\n+#define vs4\t4\n+#define vs5\t5\n+#define vs6\t6\n+#define vs7\t7\n+#define vs8\t8\n+#define vs9\t9\n+#define vs10\t10\n+#define vs11\t11\n+#define vs12\t12\n+#define vs13\t13\n+#define vs14\t14\n+#define vs15\t15\n+#define vs16\t16\n+#define vs17\t17\n+#define vs18\t18\n+#define vs19\t19\n+#define vs20\t20\n+#define vs21\t21\n+#define vs22\t22\n+#define vs23\t23\n+#define vs24\t24\n+#define vs25\t25\n+#define vs26\t26\n+#define vs27\t27\n+#define vs28\t28\n+#define vs29\t29\n+#define vs30\t30\n+#define vs31\t31\n+#define vs32\t32\n+#define vs33\t33\n+#define vs34\t34\n+#define vs35\t35\n+#define vs36\t36\n+#define vs37\t37\n+#define vs38\t38\n+#define vs39\t39\n+#define vs40\t40\n+#define vs41\t41\n+#define vs42\t42\n+#define vs43\t43\n+#define vs44\t44\n+#define vs45\t45\n+#define vs46\t46\n+#define vs47\t47\n+#define vs48\t48\n+#define vs49\t49\n+#define vs50\t30\n+#define vs51\t51\n+#define vs52\t52\n+#define vs53\t53\n+#define vs54\t54\n+#define vs55\t55\n+#define vs56\t56\n+#define vs57\t57\n+#define vs58\t58\n+#define vs59\t59\n+#define vs60\t60\n+#define vs61\t61\n+#define vs62\t62\n+#define vs63\t63\n+#endif\n+\n+/*\n+ * Macros to glue together two tokens.\n+ */\n+\n+#ifdef __STDC__\n+#define XGLUE(a,b) a##b\n+#else\n+#define XGLUE(a,b) a/**/b\n+#endif\n+\n+#define GLUE(a,b) XGLUE(a,b)\n+\n+/*\n+ * Macros to begin and end a function written in assembler.  If -mcall-aixdesc\n+ * or -mcall-nt, create a function descriptor with the given name, and create\n+ * the real function with one or two leading periods respectively.\n+ */\n+\n+#if defined(__powerpc64__) && _CALL_ELF == 2\n+\n+/* Defining \"toc\" above breaks @toc in assembler code.  */\n+#undef toc\n+\n+#define FUNC_NAME(name) GLUE(__USER_LABEL_PREFIX__,name)\n+#define JUMP_TARGET(name) FUNC_NAME(name)\n+#define FUNC_START(name) \\\n+\t.type FUNC_NAME(name),@function; \\\n+\t.globl FUNC_NAME(name); \\\n+FUNC_NAME(name): \\\n+0:\taddis 2,12,(.TOC.-0b)@ha; \\\n+\taddi 2,2,(.TOC.-0b)@l; \\\n+\t.localentry FUNC_NAME(name),.-FUNC_NAME(name)\n+\n+#define HIDDEN_FUNC(name) \\\n+  FUNC_START(name) \\\n+  .hidden FUNC_NAME(name);\n+\n+#define FUNC_END(name) \\\n+\t.size FUNC_NAME(name),.-FUNC_NAME(name)\n+\n+#elif defined (__powerpc64__)\n+\n+#define FUNC_NAME(name) GLUE(.,name)\n+#define JUMP_TARGET(name) FUNC_NAME(name)\n+#define FUNC_START(name) \\\n+\t.section \".opd\",\"aw\"; \\\n+name: \\\n+\t.quad GLUE(.,name); \\\n+\t.quad .TOC.@tocbase; \\\n+\t.quad 0; \\\n+\t.previous; \\\n+\t.type GLUE(.,name),@function; \\\n+\t.globl name; \\\n+\t.globl GLUE(.,name); \\\n+GLUE(.,name):\n+\n+#define HIDDEN_FUNC(name) \\\n+  FUNC_START(name) \\\n+  .hidden name;\t\\\n+  .hidden GLUE(.,name);\n+\n+#define FUNC_END(name) \\\n+GLUE(.L,name): \\\n+\t.size GLUE(.,name),GLUE(.L,name)-GLUE(.,name)\n+\n+#elif defined(_CALL_AIXDESC)\n+\n+#ifdef _RELOCATABLE\n+#define DESC_SECTION \".got2\"\n+#else\n+#define DESC_SECTION \".got1\"\n+#endif\n+\n+#define FUNC_NAME(name) GLUE(.,name)\n+#define JUMP_TARGET(name) FUNC_NAME(name)\n+#define FUNC_START(name) \\\n+\t.section DESC_SECTION,\"aw\"; \\\n+name: \\\n+\t.long GLUE(.,name); \\\n+\t.long _GLOBAL_OFFSET_TABLE_; \\\n+\t.long 0; \\\n+\t.previous; \\\n+\t.type GLUE(.,name),@function; \\\n+\t.globl name; \\\n+\t.globl GLUE(.,name); \\\n+GLUE(.,name):\n+\n+#define HIDDEN_FUNC(name) \\\n+  FUNC_START(name) \\\n+  .hidden name; \\\n+  .hidden GLUE(.,name);\n+\n+#define FUNC_END(name) \\\n+GLUE(.L,name): \\\n+\t.size GLUE(.,name),GLUE(.L,name)-GLUE(.,name)\n+\n+#else\n+\n+#define FUNC_NAME(name) GLUE(__USER_LABEL_PREFIX__,name)\n+#if defined __PIC__ || defined __pic__\n+#define JUMP_TARGET(name) FUNC_NAME(name@plt)\n+#else\n+#define JUMP_TARGET(name) FUNC_NAME(name)\n+#endif\n+#define FUNC_START(name) \\\n+\t.type FUNC_NAME(name),@function; \\\n+\t.globl FUNC_NAME(name); \\\n+FUNC_NAME(name):\n+\n+#define HIDDEN_FUNC(name) \\\n+  FUNC_START(name) \\\n+  .hidden FUNC_NAME(name);\n+\n+#define FUNC_END(name) \\\n+GLUE(.L,name): \\\n+\t.size FUNC_NAME(name),GLUE(.L,name)-FUNC_NAME(name)\n+#endif\n+\n+#ifdef IN_GCC\n+/* For HAVE_GAS_CFI_DIRECTIVE.  */\n+#include \"auto-host.h\"\n+\n+#ifdef HAVE_GAS_CFI_DIRECTIVE\n+# define CFI_STARTPROC\t\t\t.cfi_startproc\n+# define CFI_ENDPROC\t\t\t.cfi_endproc\n+# define CFI_OFFSET(reg, off)\t\t.cfi_offset reg, off\n+# define CFI_DEF_CFA_REGISTER(reg)\t.cfi_def_cfa_register reg\n+# define CFI_RESTORE(reg)\t\t.cfi_restore reg\n+#else\n+# define CFI_STARTPROC\n+# define CFI_ENDPROC\n+# define CFI_OFFSET(reg, off)\n+# define CFI_DEF_CFA_REGISTER(reg)\n+# define CFI_RESTORE(reg)\n+#endif\n+#endif\n+\n+#if defined __linux__ && !defined __powerpc64__\n+\t.section .note.GNU-stack\n+\t.previous\n+#endif"}, {"sha": "c7e2e0bfbf2cab364492ebeefdad69726e2fe461", "filename": "gcc/config/powerpcspe/ppc-auxv.h", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fppc-auxv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fppc-auxv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fppc-auxv.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,105 @@\n+/* PowerPC support for accessing the AUXV AT_PLATFORM, AT_HWCAP and AT_HWCAP2\n+   values from the Thread Control Block (TCB).\n+\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+   Contributed by Peter Bergner <bergner@vnet.ibm.com>.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _PPC_AUXV_H\n+#define _PPC_AUXV_H\n+\n+/* The PLATFORM value stored in the TCB is offset by _DL_FIRST_PLATFORM.  */\n+#define _DL_FIRST_PLATFORM             32\n+\n+/* AT_PLATFORM bits.  These must match the values defined in GLIBC. */\n+#define PPC_PLATFORM_POWER4            0\n+#define PPC_PLATFORM_PPC970            1\n+#define PPC_PLATFORM_POWER5            2\n+#define PPC_PLATFORM_POWER5_PLUS       3\n+#define PPC_PLATFORM_POWER6            4\n+#define PPC_PLATFORM_CELL_BE           5\n+#define PPC_PLATFORM_POWER6X           6\n+#define PPC_PLATFORM_POWER7            7\n+#define PPC_PLATFORM_PPCA2             8\n+#define PPC_PLATFORM_PPC405            9\n+#define PPC_PLATFORM_PPC440            10\n+#define PPC_PLATFORM_PPC464            11\n+#define PPC_PLATFORM_PPC476            12\n+#define PPC_PLATFORM_POWER8            13\n+#define PPC_PLATFORM_POWER9            14\n+\n+/* AT_HWCAP bits.  These must match the values defined in the Linux kernel.  */\n+#define PPC_FEATURE_32              0x80000000\n+#define PPC_FEATURE_64              0x40000000\n+#define PPC_FEATURE_601_INSTR       0x20000000\n+#define PPC_FEATURE_HAS_ALTIVEC     0x10000000\n+#define PPC_FEATURE_HAS_FPU         0x08000000\n+#define PPC_FEATURE_HAS_MMU         0x04000000\n+#define PPC_FEATURE_HAS_4xxMAC      0x02000000\n+#define PPC_FEATURE_UNIFIED_CACHE   0x01000000\n+#define PPC_FEATURE_HAS_SPE         0x00800000\n+#define PPC_FEATURE_HAS_EFP_SINGLE  0x00400000\n+#define PPC_FEATURE_HAS_EFP_DOUBLE  0x00200000\n+#define PPC_FEATURE_NO_TB           0x00100000\n+#define PPC_FEATURE_POWER4          0x00080000\n+#define PPC_FEATURE_POWER5          0x00040000\n+#define PPC_FEATURE_POWER5_PLUS     0x00020000\n+#define PPC_FEATURE_CELL_BE         0x00010000\n+#define PPC_FEATURE_BOOKE           0x00008000\n+#define PPC_FEATURE_SMT             0x00004000\n+#define PPC_FEATURE_ICACHE_SNOOP    0x00002000\n+#define PPC_FEATURE_ARCH_2_05       0x00001000\n+#define PPC_FEATURE_PA6T            0x00000800\n+#define PPC_FEATURE_HAS_DFP         0x00000400\n+#define PPC_FEATURE_POWER6_EXT      0x00000200\n+#define PPC_FEATURE_ARCH_2_06       0x00000100\n+#define PPC_FEATURE_HAS_VSX         0x00000080\n+#define PPC_FEATURE_PERFMON_COMPAT  0x00000040\n+#define PPC_FEATURE_TRUE_LE         0x00000002\n+#define PPC_FEATURE_PPC_LE          0x00000001\n+\n+/* AT_HWCAP2 bits.  These must match the values defined in the Linux kernel.  */\n+#define PPC_FEATURE2_ARCH_2_07      0x80000000\n+#define PPC_FEATURE2_HAS_HTM        0x40000000\n+#define PPC_FEATURE2_HAS_DSCR       0x20000000\n+#define PPC_FEATURE2_HAS_EBB        0x10000000\n+#define PPC_FEATURE2_HAS_ISEL       0x08000000\n+#define PPC_FEATURE2_HAS_TAR        0x04000000\n+#define PPC_FEATURE2_HAS_VEC_CRYPTO 0x02000000\n+#define PPC_FEATURE2_HTM_NOSC       0x01000000\n+#define PPC_FEATURE2_ARCH_3_00      0x00800000\n+#define PPC_FEATURE2_HAS_IEEE128    0x00400000\n+\n+\n+/* Thread Control Block (TCB) offsets of the AT_PLATFORM, AT_HWCAP and\n+   AT_HWCAP2 values.  These must match the values defined in GLIBC.  */\n+#define TCB_PLATFORM_OFFSET ((TARGET_64BIT) ? -28764 : -28724)\n+#define TCB_HWCAP_BASE_OFFSET ((TARGET_64BIT) ? -28776 : -28736)\n+#define TCB_HWCAP1_OFFSET \\\n+  ((BYTES_BIG_ENDIAN) ? TCB_HWCAP_BASE_OFFSET : TCB_HWCAP_BASE_OFFSET+4)\n+#define TCB_HWCAP2_OFFSET \\\n+  ((BYTES_BIG_ENDIAN) ? TCB_HWCAP_BASE_OFFSET+4 : TCB_HWCAP_BASE_OFFSET)\n+#define TCB_HWCAP_OFFSET(ID) \\\n+  (((ID) == 0) ? TCB_HWCAP1_OFFSET : TCB_HWCAP2_OFFSET)\n+\n+#endif /* _PPC_AUXV_H */"}, {"sha": "d5ddbe6e1efa96a8a32fba2dc3c643125c37a414", "filename": "gcc/config/powerpcspe/ppu_intrinsics.h", "status": "added", "additions": 727, "deletions": 0, "changes": 727, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fppu_intrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fppu_intrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fppu_intrinsics.h?ref=83349046151acb6be52e01c6566c71a905ebf40e", "patch": "@@ -0,0 +1,727 @@\n+/* PPU intrinsics as defined by the C/C++ Language extension for Cell BEA.\n+   Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+\n+   This file is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3 of the License, or (at your option)\n+   any later version.\n+\n+   This file is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/*  TODO:\n+    misc ops (traps)\n+    supervisor/hypervisor mode ops.  */\n+\n+#ifndef  _PPU_INTRINSICS_H\n+#define _PPU_INTRINSICS_H\n+\n+#if !defined(__PPU__) && !defined(__ppc__) && !defined(__ppc64__) \\\n+    && !defined(__GNUC__)\n+  #error ppu_intrinsics.h included on wrong platform/compiler\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif \n+\n+/*\n+ * unsigned int __cntlzw(unsigned int)\n+ * unsigned int __cntlzd(unsigned long long)\n+ * int __mulhw(int, int)\n+ * unsigned int __mulhwu(unsigned int, unsigned int)\n+ * long long __mulhd(long long, long long)\n+ * unsigned long long __mulhdu(unsigned long long, unsigned long long)\n+ *\n+ * void __sync(void)\n+ * void __isync(void)\n+ * void __lwsync(void)\n+ * void __eieio(void)\n+ *\n+ * void __nop(void)\n+ * void __cctpl(void)\n+ * void __cctpm(void)\n+ * void __cctph(void)\n+ * void __db8cyc(void)\n+ * void __db10cyc(void)\n+ * void __db12cyc(void)\n+ * void __db16cyc(void)\n+ *\n+ * void __mtspr(unsigned int spr, unsigned long long value)\n+ * unsigned long long __mfspr(unsigned int spr)\n+ * unsigned long long __mftb(void)\n+ *\n+ * void __icbi(void *base)\n+ * void __dcbi(void *base)\n+ *\n+ * void __dcbf(void *base)\n+ * void __dcbz(void *base)\n+ * void __dcbst(void *base)\n+ * void __dcbtst(void *base)\n+ * void __dcbt(void *base)\n+ * void __dcbt_TH1000(void *EATRUNC, bool D, bool UG, int ID)\n+ * void __dcbt_TH1010(bool GO, int S, int UNITCNT, bool T, bool U, int ID)\n+ *\n+ * unsigned __lwarx(void *base)\n+ * unsigned long long __ldarx(void *base)\n+ * bool __stwcx(void *base, unsigned value)\n+ * bool __stdcx(void *base, unsigned long long value)\n+ *\n+ * unsigned short __lhbrx(void *base)\n+ * unsigned int __lwbrx(void *base)\n+ * unsigned long long __ldbrx(void *base)\n+ * void __sthbrx(void *base, unsigned short value)\n+ * void __stwbrx(void *base, unsigned int value)\n+ * void __stdbrx(void *base, unsigned long long value)\n+ *\n+ * double __fabs(double x)\n+ * float __fabsf(float x)\n+ * double __fnabs(double x)\n+ * float __fnabsf(float x)\n+ * double __fmadd(double x, double y, double z)\n+ * double __fmsub(double x, double y, double z)\n+ * double __fnmadd(double x, double y, double z)\n+ * double __fnmsub(double x, double y, double z)\n+ * float __fmadds(float x, float y, float z)\n+ * float __fmsubs(float x, float y, float z)\n+ * float __fnmadds(float x, float y, float z)\n+ * float __fnmsubs(float x, float y, float z)\n+ * double __fsel(double x, double y, double z)\n+ * float __fsels(float x, float y, float z)\n+ * double __frsqrte(double x)\n+ * float __fres(float x)\n+ * double __fsqrt(double x)\n+ * float __fsqrts(float x)\n+ * long long __fctid(double x)\n+ * long long __fctiw(double x)\n+ * double __fcfid(long long x)\n+ * double __mffs(void)\n+ * void __mtfsf(int mask, double value)\n+ * void __mtfsfi(int bits, int field)\n+ * void __mtfsb0(int)\n+ * void __mtfsb1(int)\n+ * double __setflm(double)\n+ *\n+ * dcbt intrinsics \n+ * void __protected_unlimited_stream_set (unsigned int direction, const void *add, unsigned int ID)\n+ * void __protected_stream_set (unsigned int direction, const void *add, unsigned int ID)\n+ * void __protected_stream_stop_all (void)\n+ * void __protected_stream_stop (unsigned int ID)\n+ * void __protected_stream_count (unsigned int unit_cnt, unsigned int ID)\n+ * void __protected_stream_go (void)\n+ */\n+\n+typedef int __V4SI __attribute__((vector_size(16)));\n+\n+#define __cntlzw(v) __builtin_clz(v)\n+#define __cntlzd(v) __builtin_clzll(v)\n+\n+#define __mulhw(a,b) __extension__ \\\n+  ({int result;\t\t\t   \\\n+  __asm__ (\"mulhw %0,%1,%2\"\t   \\\n+\t   : \"=r\" (result)\t   \\\n+\t   : \"r\" ((int) (a)),\t   \\\n+\t     \"r\" ((int) (b)));\t   \\\n+  result; })\n+\n+#define __mulhwu(a,b) __extension__\t\\\n+  ({unsigned int result;\t\t\\\n+  __asm__ (\"mulhwu %0,%1,%2\"\t\t\\\n+\t   : \"=r\" (result)\t\t\\\n+\t   : \"r\" ((unsigned int) (a)),\t\\\n+\t     \"r\" ((unsigned int) (b))); \\\n+  result; })\n+\n+#ifdef __powerpc64__\n+#define __mulhd(a,b) __extension__   \\\n+  ({ long long result;\t\t     \\\n+  __asm__ (\"mulhd %0,%1,%2\"\t     \\\n+\t   : \"=r\" (result)\t     \\\n+\t   : \"r\" ((long long) (a)),  \\\n+\t     \"r\" ((long long) (b))); \\\n+  result; })\n+\n+#define __mulhdu(a,b) __extension__\t      \\\n+  ({unsigned long long result;\t\t      \\\n+  __asm__ (\"mulhdu %0,%1,%2\"\t\t      \\\n+\t   : \"=r\" (result)\t\t      \\\n+\t   : \"r\" ((unsigned long long) (a)),  \\\n+\t     \"r\" ((unsigned long long) (b))); \\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+#define __sync() __asm__ volatile (\"sync\" : : : \"memory\")\n+#define __isync() __asm__ volatile (\"isync\" : : : \"memory\")\n+#define __lwsync() __asm__ volatile (\"lwsync\" : : : \"memory\")\n+#define __eieio() __asm__ volatile (\"eieio\" : : : \"memory\")\n+\n+#define __nop() __asm__ volatile (\"ori 0,0,0\" : : : \"memory\")\n+#define __cctpl() __asm__ volatile (\"or 1,1,1\" : : : \"memory\")\n+#define __cctpm() __asm__ volatile (\"or 2,2,2\" : : : \"memory\")\n+#define __cctph() __asm__ volatile (\"or 3,3,3\" : : : \"memory\")\n+#define __db8cyc() __asm__ volatile (\"or 28,28,28\" : : : \"memory\")\n+#define __db10cyc() __asm__ volatile (\"or 29,29,29\" : : : \"memory\")\n+#define __db12cyc() __asm__ volatile (\"or 30,30,30\" : : : \"memory\")\n+#define __db16cyc() __asm__ volatile (\"or 31,31,31\" : : : \"memory\")\n+\n+#ifdef __powerpc64__\n+#define __mtspr(spr, value) \\\n+  __asm__ volatile (\"mtspr %0,%1\" : : \"n\" (spr), \"r\" (value))\n+  \n+#define __mfspr(spr) __extension__\t\t\t\t\\\n+  ({ unsigned long long result;\t\t\t\t\t\\\n+  __asm__ volatile (\"mfspr %0,%1\" : \"=r\" (result) : \"n\" (spr)); \\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+#ifdef __powerpc64__\n+/* Work around the hardware bug in the current Cell implementation.  */\n+#define __mftb() __extension__\t\t\t\t\t\\\n+  ({ unsigned long long result;\t\t\t\t\t\\\n+  __asm__ volatile (\"1: mftb %[current_tb]\\n\"\t\t\t\\\n+      \"\\tcmpwi 7, %[current_tb], 0\\n\"\t\t\t\t\\\n+      \"\\tbeq-  7, 1b\"\t\t\t\t\t\t\\\n+      : [current_tb] \"=r\" (result):\t\t\t\t\\\n+      :\"cr7\");\t\t\t\t\t\t\t\\\n+  result; })\n+#else\n+#define __mftb() __extension__\t\t\t\\\n+  ({ unsigned long long result;\t\t\t\\\n+  unsigned long t;\t\t\t\t\\\n+  __asm__ volatile (\"1:\\n\"\t\t\t\\\n+\t\t    \"\\tmftbu %0\\n\"\t\t\\\n+\t\t    \"\\tmftb %L0\\n\"\t\t\\\n+\t\t    \"\\tmftbu %1\\n\"\t\t\\\n+\t\t    \"\\tcmpw %0,%1\\n\"\t\t\\\n+\t\t    \"\\tbne 1b\"\t\t\t\\\n+\t\t    : \"=r\" (result), \"=r\" (t));\t\\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+#define __dcbf(base) \\\n+  __asm__ volatile (\"dcbf %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+  \n+#define __dcbz(base) \\\n+  __asm__ volatile (\"dcbz %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+\n+#define __dcbst(base) \\\n+  __asm__ volatile (\"dcbst %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+\n+#define __dcbtst(base) \\\n+  __asm__ volatile (\"dcbtst %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+\n+#define __dcbt(base) \\\n+  __asm__ volatile (\"dcbt %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+\n+#define __icbi(base) \\\n+  __asm__ volatile (\"icbi %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+  \n+#define __dcbt_TH1000(EATRUNC, D, UG, ID)\t\t\t\t\\\n+  __asm__ volatile (\"dcbt %y0,8\"\t\t\t\t\t\\\n+\t   : \"=Z\" (*(__V4SI*) (__SIZE_TYPE__)((((__SIZE_TYPE__) (EATRUNC)) & ~0x7F)\t\\\n+\t   \t\t       | ((((D) & 1) << 6)\t\t\t\\\n+\t   \t\t       | (((UG) & 1) << 5)\t\t\t\\\n+\t   \t\t       | ((ID) & 0xF)))) : : \"memory\")\n+\n+#define __dcbt_TH1010(GO, S, UNITCNT, T, U, ID)\t\t\t     \\\n+  __asm__ volatile (\"dcbt %y0,10\"\t\t\t\t     \\\n+\t   : \"=Z\" (*(__V4SI*) (__SIZE_TYPE__)((((__SIZE_TYPE__) (GO) & 1) << 31) \\\n+\t   \t\t       | (((S) & 0x3) << 29)\t\t     \\\n+\t   \t\t       | (((UNITCNT) & 0x3FF) << 7)\t     \\\n+\t   \t\t       | (((T) & 1) << 6)\t\t\t     \\\n+\t   \t\t       | (((U) & 1) << 5)\t\t\t     \\\n+\t   \t\t       | ((ID) & 0xF))) : : \"memory\")\n+\n+#define __protected_unlimited_stream_set(DIRECTION, ADDR, ID)\t\\\n+\t__dcbt_TH1000 ((ADDR), (DIRECTION)>>1, 1, (ID))\n+\n+#define __protected_stream_set(DIRECTION, ADDR, ID)\t\\\n+\t__dcbt_TH1000 ((ADDR), (DIRECTION)>>1, 0, (ID))\n+\n+#define __protected_stream_stop_all()\t\t\t\\\n+\t__dcbt_TH1010 (0, 3, 0, 0, 0, 0)\n+\n+#define __protected_stream_stop(ID)\t\t\t\\\n+\t__dcbt_TH1010 (0, 2, 0, 0, 0, (ID))\n+\n+#define __protected_stream_count(COUNT, ID)\t\t\\\n+\t__dcbt_TH1010 (0, 0, (COUNT), 0, 0, (ID))\n+\n+#define __protected_stream_go()\t\t\t\t\\\n+\t__dcbt_TH1010 (1, 0, 0, 0, 0, 0)\n+\n+#define __lhbrx(base) __extension__\t\t\\\n+  ({unsigned short result;\t       \t\t\\\n+    typedef  struct {char a[2];} halfwordsize;\t\\\n+    halfwordsize *ptrp = (halfwordsize*)(void*)(base);\t\\\n+  __asm__ (\"lhbrx %0,%y1\"\t\t\t\\\n+\t   : \"=r\" (result)\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\\\n+  result; })\n+\n+#define __lwbrx(base) __extension__\t\t\\\n+  ({unsigned int result;\t       \t\t\\\n+    typedef  struct {char a[4];} wordsize;\t\\\n+    wordsize *ptrp = (wordsize*)(void*)(base);\t\t\\\n+  __asm__ (\"lwbrx %0,%y1\"\t\t\t\\\n+\t   : \"=r\" (result)\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\\\n+  result; })\n+\n+\n+#ifdef __powerpc64__\n+#define __ldbrx(base) __extension__\t\t\t\\\n+  ({unsigned long long result;\t       \t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+  __asm__ (\"ldbrx %0,%y1\"\t\t\t\t\\\n+\t   : \"=r\" (result)\t\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\t\\\n+  result; })\n+#else\n+#define __ldbrx(base) __extension__\t\t\t\\\n+  ({unsigned long long result;\t       \t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+  __asm__ (\"lwbrx %L0,%y1\\n\"\t\t\t\t\\\n+\t   \"\\tlwbrx %0,%y2\"\t\t\t\t\\\n+\t   : \"=&r\" (result)\t\t\t\t\\\n+\t   : \"Z\" (*ptrp), \"Z\" (*((char *) ptrp + 4)));\t\\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+\n+#define __sthbrx(base, value) do {\t\t\t\\\n+    typedef  struct {char a[2];} halfwordsize;\t\t\\\n+    halfwordsize *ptrp = (halfwordsize*)(void*)(base);\t\t\\\n+    __asm__ (\"sthbrx %1,%y0\"\t\t\t\t\\\n+\t   : \"=Z\" (*ptrp)\t\t\t\t\\\n+\t   : \"r\" (value));\t\t\t\t\\\n+   } while (0)\n+\n+#define __stwbrx(base, value) do {\t\t\\\n+    typedef  struct {char a[4];} wordsize;\t\\\n+    wordsize *ptrp = (wordsize*)(void*)(base);\t\t\\\n+    __asm__ (\"stwbrx %1,%y0\"\t\t\t\\\n+\t   : \"=Z\" (*ptrp)\t\t\t\\\n+\t   : \"r\" (value));\t\t\t\\\n+   } while (0)\n+\n+#ifdef __powerpc64__\n+#define __stdbrx(base, value) do {\t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+    __asm__ (\"stdbrx %1,%y0\"\t\t\t\t\\\n+\t   : \"=Z\" (*ptrp)\t\t\t\t\\\n+\t   : \"r\" (value));\t\t\t\t\\\n+   } while (0)\n+#else\n+#define __stdbrx(base, value) do {\t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+    __asm__ (\"stwbrx %L2,%y0\\n\"\t\t\t\t\\\n+\t     \"\\tstwbrx %2,%y1\"\t\t\t\t\\\n+\t   : \"=Z\" (*ptrp), \"=Z\" (*((char *) ptrp + 4))\t\\\n+\t   : \"r\" (value));\t\t\t\t\\\n+   } while (0)\n+#endif /* __powerpc64__ */\n+\n+\n+#define __lwarx(base) __extension__\t\t\\\n+  ({unsigned int result;\t       \t\t\\\n+    typedef  struct {char a[4];} wordsize;\t\\\n+    wordsize *ptrp = (wordsize*)(void*)(base);\t\\\n+  __asm__ volatile (\"lwarx %0,%y1\"\t\t\\\n+\t   : \"=r\" (result)\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\\\n+  result; })\n+\n+#ifdef __powerpc64__\n+#define __ldarx(base) __extension__\t\t\t\\\n+  ({unsigned long long result;\t       \t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+  __asm__ volatile (\"ldarx %0,%y1\"\t\t\t\\\n+\t   : \"=r\" (result)\t\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\t\\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+#define __stwcx(base, value) __extension__\t\\\n+  ({unsigned int result;\t\t\t\\\n+    typedef  struct {char a[4];} wordsize;\t\\\n+    wordsize *ptrp = (wordsize*)(void*)(base);\t\\\n+  __asm__ volatile (\"stwcx. %2,%y1\\n\"\t\t\\\n+\t   \"\\tmfocrf %0,0x80\"\t\t\t\\\n+\t   : \"=r\" (result),\t\t\t\\\n+\t     \"=Z\" (*ptrp)\t\t\t\\\n+\t   : \"r\" (value) : \"cr0\");\t\t\\\n+  ((result & 0x20000000) >> 29); })\n+\n+\n+#ifdef __powerpc64__\n+#define __stdcx(base, value) __extension__\t\t\\\n+  ({unsigned long long result;\t\t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+  __asm__ volatile (\"stdcx. %2,%y1\\n\"\t\t\t\\\n+\t   \"\\tmfocrf %0,0x80\"\t\t\t\t\\\n+\t   : \"=r\" (result),\t\t\t\t\\\n+\t     \"=Z\" (*ptrp)\t\t\t\t\\\n+\t   : \"r\" (value) : \"cr0\");\t\t\t\\\n+  ((result & 0x20000000) >> 29); })\n+#endif /* __powerpc64__ */\n+\n+#define __mffs() __extension__\t\t\t\\\n+  ({double result;\t\t\t\t\\\n+  __asm__ volatile (\"mffs %0\" : \"=d\" (result)); \\\n+  result; })\n+\n+#define __mtfsf(mask,value) \\\n+  __asm__ volatile (\"mtfsf %0,%1\" : : \"n\" (mask), \"d\" ((double) (value)))\n+  \n+#define __mtfsfi(bits,field) \\\n+  __asm__ volatile (\"mtfsfi %0,%1\" : : \"n\" (bits), \"n\" (field))\n+\n+#define __mtfsb0(bit) __asm__ volatile (\"mtfsb0 %0\" : : \"n\" (bit))\n+#define __mtfsb1(bit) __asm__ volatile (\"mtfsb1 %0\" : : \"n\" (bit))\n+\n+#define __setflm(v) __extension__\t      \\\n+  ({double result;\t\t\t      \\\n+  __asm__ volatile (\"mffs %0\\n\\tmtfsf 255,%1\" \\\n+\t\t    : \"=&d\" (result)\t      \\\n+\t\t    : \"d\" ((double) (v)));    \\\n+  result; })\n+\n+/* __builtin_fabs may perform unnecessary rounding.  */\n+\n+/* Rename __fabs and __fabsf to work around internal prototypes defined \n+   in bits/mathcalls.h with some glibc versions.  */ \n+#define __fabs __ppu_fabs \n+#define __fabsf __ppu_fabsf \n+\n+static __inline__ double __fabs(double x) __attribute__((always_inline));\n+static __inline__ double\n+__fabs(double x)\n+{\n+  double r;\n+  __asm__(\"fabs %0,%1\" : \"=d\"(r) : \"d\"(x));\n+  return r;\n+}\n+\n+static __inline__ float __fabsf(float x) __attribute__((always_inline));\n+static __inline__ float\n+__fabsf(float x)\n+{\n+  float r;\n+  __asm__(\"fabs %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ double __fnabs(double x) __attribute__((always_inline));\n+static __inline__ double\n+__fnabs(double x)\n+{\n+  double r;\n+  __asm__(\"fnabs %0,%1\" : \"=d\"(r) : \"d\"(x));\n+  return r;\n+}\n+\n+static __inline__ float __fnabsf(float x) __attribute__((always_inline));\n+static __inline__ float\n+__fnabsf(float x)\n+{\n+  float r;\n+  __asm__(\"fnabs %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ double __fmadd(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fmadd(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fmadd %0,%1,%2,%3\" : \"=d\"(r) : \"d\"(x),\"d\"(y),\"d\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __fmsub(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fmsub(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fmsub %0,%1,%2,%3\" : \"=d\"(r) : \"d\"(x),\"d\"(y),\"d\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __fnmadd(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fnmadd(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fnmadd %0,%1,%2,%3\" : \"=d\"(r) : \"d\"(x),\"d\"(y),\"d\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __fnmsub(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fnmsub(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fnmsub %0,%1,%2,%3\" : \"=d\"(r) : \"d\"(x),\"d\"(y),\"d\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fmadds(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fmadds(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fmadds %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fmsubs(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fmsubs(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fmsubs %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fnmadds(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fnmadds(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fnmadds %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fnmsubs(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fnmsubs(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fnmsubs %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __fsel(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fsel(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fsel %0,%1,%2,%3\" : \"=d\"(r) : \"d\"(x),\"d\"(y),\"d\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fsels(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fsels(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fsel %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __frsqrte(double x) __attribute__((always_inline));\n+static __inline__ double\n+__frsqrte(double x)\n+{\n+  double r;\n+  __asm__(\"frsqrte %0,%1\" : \"=d\" (r) : \"d\" (x));\n+  return r;\n+}\n+\n+static __inline__ float __fres(float x) __attribute__((always_inline));\n+static __inline__ float\n+__fres(float x)\n+{\n+  float r;\n+  __asm__(\"fres %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ double __fsqrt(double x) __attribute__((always_inline));\n+static __inline__ double\n+__fsqrt(double x)\n+{\n+  double r;\n+  __asm__(\"fsqrt %0,%1\" : \"=d\"(r) : \"d\"(x));\n+  return r;\n+}\n+\n+static __inline__ float __fsqrts(float x) __attribute__((always_inline));\n+static __inline__ float\n+__fsqrts(float x)\n+{\n+  float r;\n+  __asm__(\"fsqrts %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ double __fmul (double a, double b) __attribute__ ((always_inline));\n+static __inline__ double\n+__fmul(double a, double b)\n+{\n+  double d;\n+  __asm__ (\"fmul %0,%1,%2\" : \"=d\" (d) : \"d\" (a), \"d\" (b));\n+  return d;\n+}\n+\n+static __inline__ float __fmuls (float a, float b) __attribute__ ((always_inline));\n+static __inline__ float\n+__fmuls (float a, float b)\n+{\n+  float d;\n+  __asm__ (\"fmuls %0,%1,%2\" : \"=d\" (d) : \"f\" (a), \"f\" (b));\n+  return d;\n+}\n+\n+static __inline__ float __frsp (float a) __attribute__ ((always_inline));\n+static __inline__ float\n+__frsp (float a)\n+{\n+  float d;\n+  __asm__ (\"frsp %0,%1\" : \"=d\" (d) : \"f\" (a));\n+  return d;\n+}\n+\n+static __inline__ double __fcfid (long long a) __attribute__((always_inline));\n+static __inline__ double\n+__fcfid (long long a)\n+{\n+  double d;\n+  __asm__ (\"fcfid %0,%1\" : \"=d\" (d) : \"d\" (a));\n+  return d;\n+}\n+\n+static __inline__ long long __fctid (double a) __attribute__ ((always_inline));\n+static __inline__ long long\n+__fctid (double a)\n+{\n+  long long d;\n+  __asm__ (\"fctid %0,%1\" : \"=d\" (d) : \"d\" (a));\n+  return d;\n+}\n+\n+static __inline__ long long __fctidz (double a) __attribute__ ((always_inline));\n+static __inline__ long long\n+__fctidz (double a)\n+{\n+  long long d;\n+  __asm__ (\"fctidz %0,%1\" : \"=d\" (d) : \"d\" (a));\n+  return d;\n+}\n+\n+static __inline__ int __fctiw (double a) __attribute__ ((always_inline));\n+static __inline__ int\n+__fctiw (double a)\n+{\n+  unsigned long long d;\n+  __asm__ (\"fctiw %0,%1\" : \"=d\" (d) : \"d\" (a));\n+  return (int) d;\n+}\n+\n+static __inline__ int __fctiwz (double a) __attribute__ ((always_inline));\n+static __inline__ int\n+__fctiwz (double a)\n+{\n+  long long d;\n+  __asm__ (\"fctiwz %0,%1\" : \"=d\" (d) : \"d\" (a));\n+  return (int) d;\n+}\n+\n+#ifdef __powerpc64__\n+#define __rldcl(a,b,mb) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldcl %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"r\" (b), \"i\" (mb)); \\\n+    d; \\\n+  })\n+\n+#define __rldcr(a,b,me) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldcr %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"r\" (b), \"i\" (me)); \\\n+    d; \\\n+  })\n+\n+#define __rldic(a,sh,mb) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldic %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"i\" (sh), \"i\" (mb)); \\\n+    d; \\\n+  })\n+\n+#define __rldicl(a,sh,mb) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldicl %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"i\" (sh), \"i\" (mb)); \\\n+    d; \\\n+  })\n+\n+#define __rldicr(a,sh,me) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldicr %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"i\" (sh), \"i\" (me)); \\\n+    d; \\\n+  })\n+\n+#define __rldimi(a,b,sh,mb) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldimi %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (b), \"i\" (sh), \"i\" (mb), \"0\" (a)); \\\n+    d; \\\n+  })\n+#endif /* __powerpc64__ */\n+\n+#define __rlwimi(a,b,sh,mb,me) __extension__ \\\n+  ({ \\\n+    unsigned int d; \\\n+    __asm__ (\"rlwimi %0,%1,%2,%3,%4\" : \"=r\" (d) : \"r\" (b), \"i\" (sh), \"i\" (mb), \"i\" (me), \"0\" (a)); \\\n+    d; \\\n+  })\n+\n+#define __rlwinm(a,sh,mb,me) __extension__ \\\n+  ({ \\\n+    unsigned int d; \\\n+    __asm__ (\"rlwinm %0,%1,%2,%3,%4\" : \"=r\" (d) : \"r\" (a), \"i\" (sh), \"i\" (mb), \"i\" (me)); \\\n+    d; \\\n+  })\n+\n+#define __rlwnm(a,b,mb,me) __extension__ \\\n+  ({ \\\n+    unsigned int d; \\\n+    __asm__ (\"rlwnm %0,%1,%2,%3,%4\" : \"=r\" (d) : \"r\" (a), \"r\" (b), \"i\" (mb), \"i\" (me)); \\\n+    d; \\\n+  })\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* _PPU_INTRINSICS_H */"}, {"sha": "0d816e5e6d976ac8fb3d6eac5e2177237d7e39ae", "filename": "gcc/config/powerpcspe/predicates.md", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpredicates.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "cdbcab1ddf7d60813aafd127fd10b558fc2a82e6", "filename": "gcc/config/powerpcspe/rs64.md", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Frs64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Frs64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Frs64.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "54a36de6eb457aa19ce8393b675e94a5e6b1ba93", "filename": "gcc/config/powerpcspe/rtems.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Frtems.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "2d9d3dfcf57913c6fae2092ce6ad7f3394a44081", "filename": "gcc/config/powerpcspe/secureplt.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsecureplt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsecureplt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsecureplt.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "6b8cca783c74998b5403ef169783e77d422a206a", "filename": "gcc/config/powerpcspe/si2vmx.h", "status": "added", "additions": 2048, "deletions": 0, "changes": 2048, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsi2vmx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsi2vmx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsi2vmx.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "3a5f87ba0fdbfd98cc352413d99e8e21dff4fdff", "filename": "gcc/config/powerpcspe/singlefp.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsinglefp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsinglefp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsinglefp.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "3d556c08ad887e7b3581c8bfc9d41b8300e1a764", "filename": "gcc/config/powerpcspe/spe.h", "status": "added", "additions": 1107, "deletions": 0, "changes": 1107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fspe.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "2351152dc24903f6cf5ce5863aa419435d76ed93", "filename": "gcc/config/powerpcspe/spe.md", "status": "added", "additions": 3512, "deletions": 0, "changes": 3512, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fspe.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "1f4b4ed91bed4c0695c9c889afb3392ad88edee5", "filename": "gcc/config/powerpcspe/spu2vmx.h", "status": "added", "additions": 2415, "deletions": 0, "changes": 2415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fspu2vmx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fspu2vmx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fspu2vmx.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "2a1828e3e7ae9053a974461670f3a0f449d1e305", "filename": "gcc/config/powerpcspe/sync.md", "status": "added", "additions": 484, "deletions": 0, "changes": 484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsync.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "de386291a5100d1803eb32364125c9ff9c3c1cac", "filename": "gcc/config/powerpcspe/sysv4.h", "status": "added", "additions": 1048, "deletions": 0, "changes": 1048, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "423300b8148f888308241e8378ec3bb3fdb03570", "filename": "gcc/config/powerpcspe/sysv4.opt", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4.opt?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "6aa32fcf019f1473637f426585308ca87a36f3ce", "filename": "gcc/config/powerpcspe/sysv4le.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4le.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4le.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fsysv4le.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "043928064782a4eafe12d69c7376a8df3400f327", "filename": "gcc/config/powerpcspe/t-aix43", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-aix43?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "b01ea0193300ca37a7e9ff70e9950f16235be7e0", "filename": "gcc/config/powerpcspe/t-aix52", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-aix52", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-aix52", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-aix52?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "b0a04c7d89d9381898a43b630edc94cab98917ce", "filename": "gcc/config/powerpcspe/t-darwin64", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-darwin64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-darwin64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-darwin64?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "2f3bb32f821afb99655a034f0c1af4e85a9a64d3", "filename": "gcc/config/powerpcspe/t-darwin8", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-darwin8", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-darwin8", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-darwin8?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "6c0ba5f4f6f78448405241717fda6c7a52518812", "filename": "gcc/config/powerpcspe/t-fprules", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-fprules", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-fprules", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-fprules?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "604b300efde0f5969a6a07d0c8e2c0992a9d099e", "filename": "gcc/config/powerpcspe/t-freebsd64", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-freebsd64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-freebsd64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-freebsd64?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "1906338ea0b9ded15799e2ecc37cc997dc1b8029", "filename": "gcc/config/powerpcspe/t-linux", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "466e9931e945d56db1532a467b048d3dd487b2c4", "filename": "gcc/config/powerpcspe/t-linux64", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "97c1ee6fb4d7717b35cfcb6f20c9f108f604f3d8", "filename": "gcc/config/powerpcspe/t-linux64bele", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64bele", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64bele", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64bele?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "0cf38e1523a332efe86b1f41f61783aee6625da1", "filename": "gcc/config/powerpcspe/t-linux64le", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64le", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64le", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64le?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "2e63bdb9fc9571e7ca9e5a36094ba4fd7981c696", "filename": "gcc/config/powerpcspe/t-linux64lebe", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64lebe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64lebe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-linux64lebe?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "aac08f5aa24a6fdc11a0b39e22a474fc7cad96cc", "filename": "gcc/config/powerpcspe/t-lynx", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-lynx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-lynx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-lynx?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "a3e941d22dc511e560b11298d65422c68d67d72c", "filename": "gcc/config/powerpcspe/t-netbsd", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-netbsd?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "fba99508757b7f13742572341e93d543463df8f6", "filename": "gcc/config/powerpcspe/t-powerpcspe", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-powerpcspe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-powerpcspe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-powerpcspe?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "fa87d0f3a9caefa48f4f5e41be58d6da9e394d2a", "filename": "gcc/config/powerpcspe/t-ppccomm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppccomm?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "3c1daf36503373b6b32fe20ce8f4014ec71a053d", "filename": "gcc/config/powerpcspe/t-ppcendian", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcendian", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcendian", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcendian?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "6b00fc7e3d3360e5a0fb7c58dff8b177e120e5b2", "filename": "gcc/config/powerpcspe/t-ppcgas", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcgas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcgas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcgas?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "819863bead4f8921a2975f07cf0b2dd3e15a2144", "filename": "gcc/config/powerpcspe/t-ppcos", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-ppcos?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "7c7637d017fdc5985dd0201c9e8c3543e42461e8", "filename": "gcc/config/powerpcspe/t-rtems", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-rtems", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-rtems", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-rtems?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "fe5de534be2862bb158230c92d0172d6eb12dd4d", "filename": "gcc/config/powerpcspe/t-spe", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-spe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-spe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-spe?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "fe2549f93e8ebd53640799a35415b69ef0952325", "filename": "gcc/config/powerpcspe/t-vxworks", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworks?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "5f682627ebc62ed3b6f7b2b42774dae0a67be8fc", "filename": "gcc/config/powerpcspe/t-vxworksae", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworksae", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworksae", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworksae?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "788069ed6dde66db1af6059358679d23f39530b9", "filename": "gcc/config/powerpcspe/t-vxworksmils", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworksmils", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworksmils", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-vxworksmils?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "1bc31a82cb0e2018f587e683023518cee6b69674", "filename": "gcc/config/powerpcspe/t-xilinx", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-xilinx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ft-xilinx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ft-xilinx?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "5f725ee9fd1afb7a06778df356e7d863fcaa41eb", "filename": "gcc/config/powerpcspe/titan.md", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ftitan.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Ftitan.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Ftitan.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "abf38ad309f46100fc39d8cbaae5dc5c9f3bd936", "filename": "gcc/config/powerpcspe/vec_types.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvec_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvec_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fvec_types.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "e6489a861cdd4ba51290bfc720df79e1f930a0cd", "filename": "gcc/config/powerpcspe/vector.md", "status": "added", "additions": 1407, "deletions": 0, "changes": 1407, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fvector.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "b669764ce8f32f827ab891c3649f99db6e378fad", "filename": "gcc/config/powerpcspe/vsx.md", "status": "added", "additions": 4128, "deletions": 0, "changes": 4128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fvsx.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "ccf6a666752e2e476227f94f31ef50223832838c", "filename": "gcc/config/powerpcspe/vxworks.h", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fvxworks.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "27bf470828b723be5e0bedaabf1db4902d6a383b", "filename": "gcc/config/powerpcspe/vxworksae.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvxworksae.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvxworksae.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fvxworksae.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "7b1e2cc4e4cd05afa91e12695849c477e9cf5348", "filename": "gcc/config/powerpcspe/vxworksmils.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvxworksmils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fvxworksmils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fvxworksmils.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "029b21e41425eb92ee46c1a1446698ad9c9b017e", "filename": "gcc/config/powerpcspe/x-aix", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fx-aix?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "984fc5fa9d5b883101e2ef87f18713e10fa1aeba", "filename": "gcc/config/powerpcspe/x-darwin", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fx-darwin?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "8a91231642f69028146ced3713f846eb5c8c231f", "filename": "gcc/config/powerpcspe/x-darwin64", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-darwin64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-darwin64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fx-darwin64?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "2743a94e43d1be012ef5806c787be17e398e5e94", "filename": "gcc/config/powerpcspe/x-linux-relax", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-linux-relax", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-linux-relax", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fx-linux-relax?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "57d5f70aa2c8268123de2e0d31f1f99e5d460151", "filename": "gcc/config/powerpcspe/x-powerpcspe", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-powerpcspe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx-powerpcspe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fx-powerpcspe?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "4aa33fdbbf5979b29db461ecbe76b991c31c292e", "filename": "gcc/config/powerpcspe/x86intrin.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fx86intrin.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "36f40f4b11ea057c5efe0d109d2d54c983712c8a", "filename": "gcc/config/powerpcspe/xcoff.h", "status": "added", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fxcoff.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "5cecdeddbd6e074c2c7413ef3e37dc8cd3e677e2", "filename": "gcc/config/powerpcspe/xfpu.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxfpu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxfpu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fxfpu.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "c31c7697b2df8b368ff838fc3187a1ef12f19f1d", "filename": "gcc/config/powerpcspe/xfpu.md", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxfpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxfpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fxfpu.md?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "3f1c71d175bdd6a591cd3af4f685b4a0f5c2e165", "filename": "gcc/config/powerpcspe/xilinx.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxilinx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxilinx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fxilinx.h?ref=83349046151acb6be52e01c6566c71a905ebf40e"}, {"sha": "29aaf51f81eafa2fe751a2536d257684993c2c75", "filename": "gcc/config/powerpcspe/xilinx.opt", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxilinx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83349046151acb6be52e01c6566c71a905ebf40e/gcc%2Fconfig%2Fpowerpcspe%2Fxilinx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fxilinx.opt?ref=83349046151acb6be52e01c6566c71a905ebf40e"}]}