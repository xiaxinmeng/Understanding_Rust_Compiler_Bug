{"sha": "5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmZWQ5YTkxZjAzNmQ4YzE2OGFmZWJmZDhlOWRkMzRlMjkxOWM5YQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-09-26T13:46:29Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-09-26T13:46:29Z"}, "message": "re PR middle-end/54635 (Add addr_space_t argument to TARGET_MODE_DEPENDENT_ADDRESS_P)\n\n\tPR middle-end/54635\n\t* doc/tm.texi.in (TARGET_MODE_DEPENDENT_ADDRESS_P): Document new\n\tparameter addrspace.\n\t* doc/tm.texi: Regenerate.\n\t* target.def (mode_dependent_address_p): Add addr_space_t parameter.\n\t* targhooks.h (default_mode_dependent_address_p): Ditto.\n\t* targhooks.c (default_mode_dependent_address_p): Ditto.\n\t* expr.c (convert_move): Pass address space to mode_dependent_address_p.\n\t* combine.c (combine_simplify_rtx): Ditto.\n\t(make_extraction): Ditto.\n\t(simplify_shift_const_1): Ditto.\n\t(gen_lowpart_for_combine): Ditto.\n\t* lower-subreg.c (simple_move_operand): Ditto.\n\t* recog.c (simplify_while_replacing): Ditto.\n\t(offsettable_address_addr_space_p): Ditto.\n\t(mode_dependent_address_p): Ditto.\n\t* simplify-rtx.c (simplify_unary_operation_1): Ditto.\n\t(simplify_subreg): Ditto.\n\t* config/m68k/m68k.md: Ditto.\n\t* config/vax/vax.md: Ditto.\n\t* config/vax/constraints.md (Q): Ditto.\n\t* config/vax/predicates.md (indexed_memory_operand): Ditto.\n\t* config/alpha/alpha.c (alpha_mode_dependent_address_p): Add\n\tunused addr_space_t parameter.\n\t* config/avr/avr.c (avr_mode_dependent_address_p): Ditto.\n\t* config/h8300/h8300.c (h8300_mode_dependent_address_p): Ditto.\n\t* config/m32r/m32r.c (m32r_mode_dependent_address_p): Ditto.\n\t* config/rs6000/rs6000.c (rs6000_mode_dependent_address_p): Ditto.\n\t* config/rx/rx.c (rx_mode_dependent_address_p): Ditto.\n\t* config/sparc/sparc.c (sparc_mode_dependent_address_p): Ditto.\n\t* config/stormy16/stormy16.c (xstormy16_mode_dependent_address_p):\n\tDitto.\n\t* config/vax/vax.c (vax_mode_dependent_address_p): Ditto.\n\t* config/xtensa/xtensa.c (xtensa_mode_dependent_address_p): Ditto.\n\nFrom-SVN: r191761", "tree": {"sha": "91a9229d2e7d90865629ad03c4b391936c79877e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91a9229d2e7d90865629ad03c4b391936c79877e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1df855ce3547caa8bd375e53e5f2effac5472b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df855ce3547caa8bd375e53e5f2effac5472b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df855ce3547caa8bd375e53e5f2effac5472b43"}], "stats": {"total": 174, "additions": 121, "deletions": 53}, "files": [{"sha": "c2c072db98558916c91bc8e2392cc9cf1949ea5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -1,3 +1,40 @@\n+2012-09-26  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR middle-end/54635\n+\t* doc/tm.texi.in (TARGET_MODE_DEPENDENT_ADDRESS_P): Document new\n+\tparameter addrspace.\n+\t* doc/tm.texi: Regenerate.\n+\t* target.def (mode_dependent_address_p): Add addr_space_t parameter.\n+\t* targhooks.h (default_mode_dependent_address_p): Ditto.\n+\t* targhooks.c (default_mode_dependent_address_p): Ditto.\n+\t* expr.c (convert_move): Pass address space to mode_dependent_address_p.\n+\t* combine.c (combine_simplify_rtx): Ditto.\n+\t(make_extraction): Ditto.\n+\t(simplify_shift_const_1): Ditto.\n+\t(gen_lowpart_for_combine): Ditto.\n+\t* lower-subreg.c (simple_move_operand): Ditto.\n+\t* recog.c (simplify_while_replacing): Ditto.\n+\t(offsettable_address_addr_space_p): Ditto.\n+\t(mode_dependent_address_p): Ditto.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Ditto.\n+\t(simplify_subreg): Ditto.\n+\t* config/m68k/m68k.md: Ditto.\n+\t* config/vax/vax.md: Ditto.\n+\t* config/vax/constraints.md (Q): Ditto.\n+\t* config/vax/predicates.md (indexed_memory_operand): Ditto.\n+\t* config/alpha/alpha.c (alpha_mode_dependent_address_p): Add\n+\tunused addr_space_t parameter.\n+\t* config/avr/avr.c (avr_mode_dependent_address_p): Ditto.\n+\t* config/h8300/h8300.c (h8300_mode_dependent_address_p): Ditto.\n+\t* config/m32r/m32r.c (m32r_mode_dependent_address_p): Ditto.\n+\t* config/rs6000/rs6000.c (rs6000_mode_dependent_address_p): Ditto.\n+\t* config/rx/rx.c (rx_mode_dependent_address_p): Ditto.\n+\t* config/sparc/sparc.c (sparc_mode_dependent_address_p): Ditto.\n+\t* config/stormy16/stormy16.c (xstormy16_mode_dependent_address_p):\n+\tDitto.\n+\t* config/vax/vax.c (vax_mode_dependent_address_p): Ditto.\n+\t* config/xtensa/xtensa.c (xtensa_mode_dependent_address_p): Ditto.\n+\n 2012-09-26  Christophe Lyon <christophe.lyon@linaro.org>\n \n \t* tree-ssa-math-opts.c (bswap_stats): Add found_16bit field."}, {"sha": "4e0a57963dc4b6f6e0b34da1aa4c4ba56af5a3c0", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -5424,7 +5424,8 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int in_dest,\n \t of the address.  */\n       if (MEM_P (SUBREG_REG (x))\n \t  && (MEM_VOLATILE_P (SUBREG_REG (x))\n-\t      || mode_dependent_address_p (XEXP (SUBREG_REG (x), 0))))\n+\t      || mode_dependent_address_p (XEXP (SUBREG_REG (x), 0),\n+\t\t\t\t\t   MEM_ADDR_SPACE (SUBREG_REG (x)))))\n \treturn gen_rtx_CLOBBER (mode, const0_rtx);\n \n       /* Note that we cannot do any narrowing for non-constants since\n@@ -7054,7 +7055,8 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n \t\t may not be aligned, for one thing).  */\n \t      && GET_MODE_PRECISION (inner_mode) >= GET_MODE_PRECISION (tmode)\n \t      && (inner_mode == tmode\n-\t\t  || (! mode_dependent_address_p (XEXP (inner, 0))\n+\t\t  || (! mode_dependent_address_p (XEXP (inner, 0),\n+\t\t\t\t\t\t  MEM_ADDR_SPACE (inner))\n \t\t      && ! MEM_VOLATILE_P (inner))))))\n     {\n       /* If INNER is a MEM, make a new MEM that encompasses just the desired\n@@ -7233,7 +7235,7 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       /* If we have to change the mode of memory and cannot, the desired mode\n \t is EXTRACTION_MODE.  */\n       if (inner_mode != wanted_inner_mode\n-\t  && (mode_dependent_address_p (XEXP (inner, 0))\n+\t  && (mode_dependent_address_p (XEXP (inner, 0), MEM_ADDR_SPACE (inner))\n \t      || MEM_VOLATILE_P (inner)\n \t      || pos_rtx))\n \twanted_inner_mode = extraction_mode;\n@@ -7271,7 +7273,7 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       && ! pos_rtx\n       && GET_MODE_SIZE (wanted_inner_mode) < GET_MODE_SIZE (is_mode)\n       && MEM_P (inner)\n-      && ! mode_dependent_address_p (XEXP (inner, 0))\n+      && ! mode_dependent_address_p (XEXP (inner, 0), MEM_ADDR_SPACE (inner))\n       && ! MEM_VOLATILE_P (inner))\n     {\n       int offset = 0;\n@@ -9883,7 +9885,8 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n \t     minus the width of a smaller mode, we can do this with a\n \t     SIGN_EXTEND or ZERO_EXTEND from the narrower memory location.  */\n \t  if ((code == ASHIFTRT || code == LSHIFTRT)\n-\t      && ! mode_dependent_address_p (XEXP (varop, 0))\n+\t      && ! mode_dependent_address_p (XEXP (varop, 0),\n+\t\t\t\t\t     MEM_ADDR_SPACE (varop))\n \t      && ! MEM_VOLATILE_P (varop)\n \t      && (tmode = mode_for_size (GET_MODE_BITSIZE (mode) - count,\n \t\t\t\t\t MODE_INT, 1)) != BLKmode)\n@@ -10702,7 +10705,8 @@ gen_lowpart_for_combine (enum machine_mode omode, rtx x)\n \n       /* Refuse to work on a volatile memory ref or one with a mode-dependent\n \t address.  */\n-      if (MEM_VOLATILE_P (x) || mode_dependent_address_p (XEXP (x, 0)))\n+      if (MEM_VOLATILE_P (x)\n+\t  || mode_dependent_address_p (XEXP (x, 0), MEM_ADDR_SPACE (x)))\n \tgoto fail;\n \n       /* If we want to refer to something bigger than the original memref,"}, {"sha": "d726b5acca79236686fef85b642fccc17abffb7a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -1043,7 +1043,8 @@ alpha_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n    We can simplify the test since we know that the address must be valid.  */\n \n static bool\n-alpha_mode_dependent_address_p (const_rtx addr)\n+alpha_mode_dependent_address_p (const_rtx addr,\n+\t\t\t\taddr_space_t as ATTRIBUTE_UNUSED)\n {\n   return GET_CODE (addr) == AND;\n }"}, {"sha": "87ff5312300684e81b7437bf226c57b5371331f1", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -1633,7 +1633,7 @@ avr_cannot_modify_jumps_p (void)\n       with mov<mode> expanders in avr.md.  */\n \n static bool\n-avr_mode_dependent_address_p (const_rtx addr)\n+avr_mode_dependent_address_p (const_rtx addr, addr_space_t as ATTRIBUTE_UNUSED)\n {\n   return GET_MODE (addr) != Pmode;\n }"}, {"sha": "b86f9b639df49253837a44a6ffa11bcead5abb90", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -1183,7 +1183,7 @@\n ;; \"*addhq3\" \"*adduhq3\"\n ;; \"*addha3\" \"*adduha3\"\n (define_insn \"*add<mode>3\"\n-  [(set (match_operand:ALL2 0 \"register_operand\"                     \"=r,d,!w    ,d\")\n+  [(set (match_operand:ALL2 0 \"register_operand\"                    \"=?r,d,!w    ,d\")\n         (plus:ALL2 (match_operand:ALL2 1 \"register_operand\"          \"%0,0,0     ,0\")\n                    (match_operand:ALL2 2 \"nonmemory_or_const_operand\" \"r,s,IJ YIJ,n Ynn\")))]\n   \"\""}, {"sha": "38a922898e2aa23f628d463d19af044a314821ef", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -2166,7 +2166,8 @@ h8300_get_index (rtx x, enum machine_mode mode, int *size)\n    (the amount of decrement or increment being the length of the operand).  */\n \n static bool\n-h8300_mode_dependent_address_p (const_rtx addr)\n+h8300_mode_dependent_address_p (const_rtx addr,\n+\t\t\t\taddr_space_t as ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (addr) == PLUS\n       && h8300_get_index (XEXP (addr, 0), VOIDmode, 0) != XEXP (addr, 0))"}, {"sha": "03360b6a5b02892d1a4ccb82a07f6c92aa42102f", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -62,7 +62,7 @@ static void  block_move_call (rtx, rtx, rtx);\n static int   m32r_is_insn (rtx);\n static bool  m32r_legitimate_address_p (enum machine_mode, rtx, bool);\n static rtx   m32r_legitimize_address (rtx, rtx, enum machine_mode);\n-static bool  m32r_mode_dependent_address_p (const_rtx);\n+static bool  m32r_mode_dependent_address_p (const_rtx, addr_space_t);\n static tree  m32r_handle_model_attribute (tree *, tree, tree, int, bool *);\n static void  m32r_print_operand (FILE *, rtx, int);\n static void  m32r_print_operand_address (FILE *, rtx);\n@@ -2011,7 +2011,7 @@ m32r_legitimize_address (rtx x, rtx orig_x ATTRIBUTE_UNUSED,\n /* Worker function for TARGET_MODE_DEPENDENT_ADDRESS_P.  */\n \n static bool\n-m32r_mode_dependent_address_p (const_rtx addr)\n+m32r_mode_dependent_address_p (const_rtx addr, addr_space_t as ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (addr) == LO_SUM)\n     return true;"}, {"sha": "82807d8da6ff8b4d4d122190c07fe9fd802fd8eb", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -5610,7 +5610,8 @@\n \t(match_operand:SI 2 \"general_src_operand\" \"rmSi\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\n    && (INTVAL (operands[1]) % 8) == 0\n-   && ! mode_dependent_address_p (XEXP (operands[0], 0))\"\n+   && ! mode_dependent_address_p (XEXP (operands[0], 0),\n+                                  MEM_ADDR_SPACE (operands[0]))\"\n {\n   operands[0]\n     = adjust_address (operands[0], SImode, INTVAL (operands[1]) / 8);\n@@ -5627,7 +5628,8 @@\n    && (INTVAL (operands[1]) == 8 || INTVAL (operands[1]) == 16)\n    && INTVAL (operands[2]) % INTVAL (operands[1]) == 0\n    && (GET_CODE (operands[0]) == REG\n-       || ! mode_dependent_address_p (XEXP (operands[0], 0)))\"\n+       || ! mode_dependent_address_p (XEXP (operands[0], 0),\n+                                      MEM_ADDR_SPACE (operands[0])))\"\n {\n   if (REG_P (operands[0]))\n     {\n@@ -5664,7 +5666,8 @@\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n    && (INTVAL (operands[2]) % 8) == 0\n-   && ! mode_dependent_address_p (XEXP (operands[1], 0))\"\n+   && ! mode_dependent_address_p (XEXP (operands[1], 0),\n+                                  MEM_ADDR_SPACE (operands[1]))\"\n {\n   operands[1]\n     = adjust_address (operands[1], SImode, INTVAL (operands[2]) / 8);\n@@ -5681,7 +5684,8 @@\n    && (INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n    && INTVAL (operands[3]) % INTVAL (operands[2]) == 0\n    && (GET_CODE (operands[1]) == REG\n-       || ! mode_dependent_address_p (XEXP (operands[1], 0)))\"\n+       || ! mode_dependent_address_p (XEXP (operands[1], 0),\n+                                      MEM_ADDR_SPACE (operands[1])))\"\n {\n   cc_status.flags |= CC_NOT_NEGATIVE;\n   if (REG_P (operands[1]))\n@@ -5718,7 +5722,8 @@\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n    && (INTVAL (operands[2]) % 8) == 0\n-   && ! mode_dependent_address_p (XEXP (operands[1], 0))\"\n+   && ! mode_dependent_address_p (XEXP (operands[1], 0),\n+                                  MEM_ADDR_SPACE (operands[1]))\"\n {\n   operands[1]\n     = adjust_address (operands[1], SImode, INTVAL (operands[2]) / 8);\n@@ -5735,7 +5740,8 @@\n    && (INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n    && INTVAL (operands[3]) % INTVAL (operands[2]) == 0\n    && (GET_CODE (operands[1]) == REG\n-       || ! mode_dependent_address_p (XEXP (operands[1], 0)))\"\n+       || ! mode_dependent_address_p (XEXP (operands[1], 0),\n+                                      MEM_ADDR_SPACE (operands[1])))\"\n {\n   if (REG_P (operands[1]))\n     {"}, {"sha": "96026bdc50515b17f1bc1789b4c5e28ad673d80b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -6463,7 +6463,8 @@ rs6000_debug_legitimate_address_p (enum machine_mode mode, rtx x,\n /* Implement TARGET_MODE_DEPENDENT_ADDRESS_P.  */\n \n static bool\n-rs6000_mode_dependent_address_p (const_rtx addr)\n+rs6000_mode_dependent_address_p (const_rtx addr,\n+\t\t\t\t addr_space_t as ATTRIBUTE_UNUSED)\n {\n   return rs6000_mode_dependent_address_ptr (addr);\n }"}, {"sha": "43676d1251cd1d2175586dfc57c98262a22752e5", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -318,7 +318,7 @@ rx_is_restricted_memory_address (rtx mem, enum machine_mode mode)\n /* Implement TARGET_MODE_DEPENDENT_ADDRESS_P.  */\n \n static bool\n-rx_mode_dependent_address_p (const_rtx addr)\n+rx_mode_dependent_address_p (const_rtx addr, addr_space_t as ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (addr) == CONST)\n     addr = XEXP (addr, 0);"}, {"sha": "32ac9f3b5b66f859d427f508efccc19c00b8ce3e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -567,7 +567,7 @@ static rtx sparc_legitimize_tls_address (rtx);\n static rtx sparc_legitimize_pic_address (rtx, rtx);\n static rtx sparc_legitimize_address (rtx, rtx, enum machine_mode);\n static rtx sparc_delegitimize_address (rtx);\n-static bool sparc_mode_dependent_address_p (const_rtx);\n+static bool sparc_mode_dependent_address_p (const_rtx, addr_space_t);\n static bool sparc_pass_by_reference (cumulative_args_t,\n \t\t\t\t     enum machine_mode, const_tree, bool);\n static void sparc_function_arg_advance (cumulative_args_t,\n@@ -4045,7 +4045,8 @@ sparc_legitimize_reload_address (rtx x, enum machine_mode mode,\n \n \n static bool\n-sparc_mode_dependent_address_p (const_rtx addr)\n+sparc_mode_dependent_address_p (const_rtx addr,\n+\t\t\t\taddr_space_t as ATTRIBUTE_UNUSED)\n {\n   if (flag_pic && GET_CODE (addr) == PLUS)\n     {"}, {"sha": "782217c9bb8d86bfdf9a4ef08ec515b465f3df57", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -671,7 +671,8 @@ xstormy16_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n    or pre-decrement address.  */\n \n static bool\n-xstormy16_mode_dependent_address_p (const_rtx x)\n+xstormy16_mode_dependent_address_p (const_rtx x,\n+\t\t\t\t    addr_space_t as ATTRIBUTE_UNUSED)\n {\n   if (LEGITIMATE_ADDRESS_CONST_INT_P (x, 0)\n       && ! LEGITIMATE_ADDRESS_CONST_INT_P (x, 6))"}, {"sha": "6c0256b455346e6c0700451ca277ad2ba2b3c686", "filename": "gcc/config/vax/constraints.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fvax%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fvax%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fconstraints.md?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -99,7 +99,8 @@\n (define_memory_constraint \"Q\"\n    \"operand is a MEM that does not have a mode-dependent address.\"\n    (and (match_code \"mem\")\n-\t(match_test \"!mode_dependent_address_p (XEXP (op, 0))\")))\n+\t(match_test \"!mode_dependent_address_p (XEXP (op, 0),\n+\t\t\t\t\t        MEM_ADDR_SPACE (op))\")))\n \n (define_memory_constraint \"B\"\n     \"\""}, {"sha": "b15c281386ff9a1580939530928ccf07d78747ed", "filename": "gcc/config/vax/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fvax%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fvax%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fpredicates.md?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -79,9 +79,9 @@\n (define_predicate \"indexed_memory_operand\"\n    (match_code \"mem\")\n {\n-  op = XEXP (op, 0);\n-  return GET_CODE (op) != PRE_DEC && GET_CODE (op) != POST_INC\n-\t && mode_dependent_address_p (op);\n+  rtx addr = XEXP (op, 0);\n+  return GET_CODE (addr) != PRE_DEC && GET_CODE (addr) != POST_INC\n+\t && mode_dependent_address_p (addr, MEM_ADDR_SPACE (op));\n })\n \n (define_predicate \"illegal_blk_memory_operand\""}, {"sha": "e13ad8e7048fc404029a417d83850e0f1c57d3bc", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -64,7 +64,7 @@ static rtx vax_builtin_setjmp_frame_value (void);\n static void vax_asm_trampoline_template (FILE *);\n static void vax_trampoline_init (rtx, tree, rtx);\n static int vax_return_pops_args (tree, tree, int);\n-static bool vax_mode_dependent_address_p (const_rtx);\n+static bool vax_mode_dependent_address_p (const_rtx, addr_space_t);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -1839,7 +1839,7 @@ vax_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n    thus (because the index scale factor is the length of the operand).  */\n \n static bool\n-vax_mode_dependent_address_p (const_rtx x)\n+vax_mode_dependent_address_p (const_rtx x, addr_space_t as ATTRIBUTE_UNUSED)\n {\n   rtx xfoo0, xfoo1;\n "}, {"sha": "342c0e19dccfe8851d24dd8264b2f78a2574c1f7", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -782,7 +782,8 @@\n    \"(INTVAL (operands[1]) == 8 || INTVAL (operands[1]) == 16)\n    && INTVAL (operands[2]) % INTVAL (operands[1]) == 0\n    && (REG_P (operands[0])\n-       || ! mode_dependent_address_p (XEXP (operands[0], 0)))\"\n+       || ! mode_dependent_address_p (XEXP (operands[0], 0),\n+\t\t\t\t       MEM_ADDR_SPACE (operands[0])))\"\n   \"*\n {\n   if (REG_P (operands[0]))\n@@ -810,7 +811,8 @@\n   \"(INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n    && INTVAL (operands[3]) % INTVAL (operands[2]) == 0\n    && (REG_P (operands[1])\n-       || ! mode_dependent_address_p (XEXP (operands[1], 0)))\"\n+       || ! mode_dependent_address_p (XEXP (operands[1], 0),\n+\t\t\t\t      MEM_ADDR_SPACE (operands[1])))\"\n   \"*\n {\n   if (REG_P (operands[1]))\n@@ -837,7 +839,8 @@\n   \"(INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n    && INTVAL (operands[3]) % INTVAL (operands[2]) == 0\n    && (REG_P (operands[1])\n-       || ! mode_dependent_address_p (XEXP (operands[1], 0)))\"\n+       || ! mode_dependent_address_p (XEXP (operands[1], 0),\n+\t\t\t\t      MEM_ADDR_SPACE (operands[1])))\"\n   \"*\n {\n   if (REG_P (operands[1]))\n@@ -960,7 +963,8 @@\n       || INTVAL (operands[2]) + INTVAL (operands[3]) > 32\n       || side_effects_p (operands[1])\n       || (MEM_P (operands[1])\n-\t  && mode_dependent_address_p (XEXP (operands[1], 0))))\n+\t  && mode_dependent_address_p (XEXP (operands[1], 0),\n+\t\t\t\t       MEM_ADDR_SPACE (operands[1]))))\n     return \\\"extv %3,%2,%1,%0\\\";\n   if (INTVAL (operands[2]) == 8)\n     return \\\"rotl %R3,%1,%0\\;cvtbl %0,%0\\\";\n@@ -988,7 +992,8 @@\n       || INTVAL (operands[2]) + INTVAL (operands[3]) > 32\n       || side_effects_p (operands[1])\n       || (MEM_P (operands[1])\n-\t  && mode_dependent_address_p (XEXP (operands[1], 0))))\n+\t  && mode_dependent_address_p (XEXP (operands[1], 0),\n+\t\t\t\t       MEM_ADDR_SPACE (operands[1]))))\n     return \\\"extzv %3,%2,%1,%0\\\";\n   if (INTVAL (operands[2]) == 8)\n     return \\\"rotl %R3,%1,%0\\;movzbl %0,%0\\\";"}, {"sha": "83eab4b9e7a1ab85bcb86b1c650a678782d5eb17", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -126,7 +126,7 @@ static rtx fixup_subreg_mem (rtx);\n static struct machine_function * xtensa_init_machine_status (void);\n static rtx xtensa_legitimize_tls_address (rtx);\n static rtx xtensa_legitimize_address (rtx, rtx, enum machine_mode);\n-static bool xtensa_mode_dependent_address_p (const_rtx);\n+static bool xtensa_mode_dependent_address_p (const_rtx, addr_space_t);\n static bool xtensa_return_in_msb (const_tree);\n static void printx (FILE *, signed int);\n static void xtensa_function_epilogue (FILE *, HOST_WIDE_INT);\n@@ -1961,7 +1961,8 @@ xtensa_legitimize_address (rtx x,\n    by default.  */\n \n static bool\n-xtensa_mode_dependent_address_p (const_rtx addr)\n+xtensa_mode_dependent_address_p (const_rtx addr,\n+\t\t\t\t addr_space_t as ATTRIBUTE_UNUSED)\n {\n   return constantpool_address_p (addr);\n }"}, {"sha": "a14a4fc9a8859726bf0a974b04284b6a7949abc9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -5611,8 +5611,9 @@ It is not necessary for this macro to come up with a legitimate\n address;  but often a machine-dependent strategy can generate better code.\n @end defmac\n \n-@deftypefn {Target Hook} bool TARGET_MODE_DEPENDENT_ADDRESS_P (const_rtx @var{addr})\n-This hook returns @code{true} if memory address @var{addr} can have\n+@deftypefn {Target Hook} bool TARGET_MODE_DEPENDENT_ADDRESS_P (const_rtx @var{addr}, addr_space_t @var{addrspace})\n+This hook returns @code{true} if memory address @var{addr} in address\n+space @var{addrspace} can have\n different meanings depending on the machine mode of the memory\n reference it is used for or if the address is valid for some modes\n but not others."}, {"sha": "a85fee1b4a140d98ad80a0356464ed6f61a5404e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -5536,7 +5536,8 @@ address;  but often a machine-dependent strategy can generate better code.\n @end defmac\n \n @hook TARGET_MODE_DEPENDENT_ADDRESS_P\n-This hook returns @code{true} if memory address @var{addr} can have\n+This hook returns @code{true} if memory address @var{addr} in address\n+space @var{addrspace} can have\n different meanings depending on the machine mode of the memory\n reference it is used for or if the address is valid for some modes\n but not others."}, {"sha": "c180e8d5edcbc3c66e38875406698b955867db3b", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -573,7 +573,8 @@ convert_move (rtx to, rtx from, int unsignedp)\n       if (!((MEM_P (from)\n \t     && ! MEM_VOLATILE_P (from)\n \t     && direct_load[(int) to_mode]\n-\t     && ! mode_dependent_address_p (XEXP (from, 0)))\n+\t     && ! mode_dependent_address_p (XEXP (from, 0),\n+\t\t\t\t\t    MEM_ADDR_SPACE (from)))\n \t    || REG_P (from)\n \t    || GET_CODE (from) == SUBREG))\n \tfrom = force_reg (from_mode, from);\n@@ -591,7 +592,8 @@ convert_move (rtx to, rtx from, int unsignedp)\n       if (!((MEM_P (from)\n \t     && ! MEM_VOLATILE_P (from)\n \t     && direct_load[(int) to_mode]\n-\t     && ! mode_dependent_address_p (XEXP (from, 0)))\n+\t     && ! mode_dependent_address_p (XEXP (from, 0),\n+\t\t\t\t\t    MEM_ADDR_SPACE (from)))\n \t    || REG_P (from)\n \t    || GET_CODE (from) == SUBREG))\n \tfrom = force_reg (from_mode, from);"}, {"sha": "4aaaa7754c5ca91858be2a7b594625693e5ed3b2", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -299,7 +299,7 @@ simple_move_operand (rtx x)\n \n   if (MEM_P (x)\n       && (MEM_VOLATILE_P (x)\n-\t  || mode_dependent_address_p (XEXP (x, 0))))\n+\t  || mode_dependent_address_p (XEXP (x, 0), MEM_ADDR_SPACE (x))))\n     return false;\n \n   return true;"}, {"sha": "f28b0219d95db8f03b07c2bed95cb85437692866", "filename": "gcc/recog.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -629,7 +629,8 @@ simplify_while_replacing (rtx *loc, rtx to, rtx object,\n       if (MEM_P (XEXP (x, 0))\n \t  && CONST_INT_P (XEXP (x, 1))\n \t  && CONST_INT_P (XEXP (x, 2))\n-\t  && !mode_dependent_address_p (XEXP (XEXP (x, 0), 0))\n+\t  && !mode_dependent_address_p (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t\tMEM_ADDR_SPACE (XEXP (x, 0)))\n \t  && !MEM_VOLATILE_P (XEXP (x, 0)))\n \t{\n \t  enum machine_mode wanted_mode = VOIDmode;\n@@ -1945,7 +1946,7 @@ offsettable_address_addr_space_p (int strictp, enum machine_mode mode, rtx y,\n   /* Adjusting an offsettable address involves changing to a narrower mode.\n      Make sure that's OK.  */\n \n-  if (mode_dependent_address_p (y))\n+  if (mode_dependent_address_p (y, as))\n     return 0;\n \n   /* ??? How much offset does an offsettable BLKmode reference need?\n@@ -1998,11 +1999,13 @@ offsettable_address_addr_space_p (int strictp, enum machine_mode mode, rtx y,\n /* Return 1 if ADDR is an address-expression whose effect depends\n    on the mode of the memory reference it is used in.\n \n+   ADDRSPACE is the address space associated with the address.\n+\n    Autoincrement addressing is a typical example of mode-dependence\n    because the amount of the increment depends on the mode.  */\n \n bool\n-mode_dependent_address_p (rtx addr)\n+mode_dependent_address_p (rtx addr, addr_space_t addrspace)\n {\n   /* Auto-increment addressing with anything other than post_modify\n      or pre_modify always introduces a mode dependency.  Catch such\n@@ -2013,7 +2016,7 @@ mode_dependent_address_p (rtx addr)\n       || GET_CODE (addr) == POST_DEC)\n     return true;\n \n-  return targetm.mode_dependent_address_p (addr);\n+  return targetm.mode_dependent_address_p (addr, addrspace);\n }\n \f\n /* Like extract_insn, but save insn extracted and don't extract again, when"}, {"sha": "0e7d5373aa3f94b38da75b2cf7c520e0890a4267", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -114,7 +114,7 @@ extern int offsettable_address_addr_space_p (int, enum machine_mode, rtx,\n #define offsettable_address_p(strict,mode,addr) \\\n \toffsettable_address_addr_space_p ((strict), (mode), (addr), \\\n \t\t\t\t\t  ADDR_SPACE_GENERIC)\n-extern bool mode_dependent_address_p (rtx);\n+extern bool mode_dependent_address_p (rtx, addr_space_t);\n \n extern int recog (rtx, rtx, int *);\n #ifndef GENERATOR_FILE"}, {"sha": "6b4b9f05d6550cd96e1413397ff6c6e5a2812508", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -874,7 +874,7 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t if we are not changing the meaning of the address. */\n       if (GET_CODE (op) == MEM\n \t  && !MEM_VOLATILE_P (op)\n-\t  && !mode_dependent_address_p (XEXP (op, 0)))\n+\t  && !mode_dependent_address_p (XEXP (op, 0), MEM_ADDR_SPACE (op)))\n \treturn rtl_hooks.gen_lowpart_no_emit (mode, op);\n \n       break;\n@@ -5615,7 +5615,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n      or if we would be widening it.  */\n \n   if (MEM_P (op)\n-      && ! mode_dependent_address_p (XEXP (op, 0))\n+      && ! mode_dependent_address_p (XEXP (op, 0), MEM_ADDR_SPACE (op))\n       /* Allow splitting of volatile memory references in case we don't\n          have instruction to move the whole thing.  */\n       && (! MEM_VOLATILE_P (op)\n@@ -5773,7 +5773,8 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n       && (INTVAL (XEXP (op, 1)) % GET_MODE_BITSIZE (outermode)) == 0\n       && INTVAL (XEXP (op, 1)) > 0\n       && INTVAL (XEXP (op, 1)) < GET_MODE_BITSIZE (innermode)\n-      && ! mode_dependent_address_p (XEXP (XEXP (op, 0), 0))\n+      && ! mode_dependent_address_p (XEXP (XEXP (op, 0), 0),\n+\t\t\t\t     MEM_ADDR_SPACE (XEXP (op, 0)))\n       && ! MEM_VOLATILE_P (XEXP (op, 0))\n       && byte == subreg_lowpart_offset (outermode, innermode)\n       && (GET_MODE_SIZE (outermode) >= UNITS_PER_WORD"}, {"sha": "8922c783e04bf07d2a5263c34b7cb672c3a331d2", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -1413,7 +1413,7 @@ DEFHOOK\n DEFHOOK\n (mode_dependent_address_p,\n  \"\",\n- bool, (const_rtx addr),\n+ bool, (const_rtx addr, addr_space_t addrspace),\n  default_mode_dependent_address_p)\n \n /* Given an invalid address X for a given machine mode, try machine-specific"}, {"sha": "265fc9840d1eea0e86f9e1176718c55d5e93d126", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -1202,7 +1202,8 @@ default_hard_regno_scratch_ok (unsigned int regno ATTRIBUTE_UNUSED)\n /* The default implementation of TARGET_MODE_DEPENDENT_ADDRESS_P.  */\n \n bool\n-default_mode_dependent_address_p (const_rtx addr ATTRIBUTE_UNUSED)\n+default_mode_dependent_address_p (const_rtx addr ATTRIBUTE_UNUSED,\n+\t\t\t\t  addr_space_t addrspace ATTRIBUTE_UNUSED)\n {\n   return false;\n }"}, {"sha": "e89f096bcfb5e5a2309657f09fa7613db4cfc3b9", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfed9a91f036d8c168afebfd8e9dd34e2919c9a/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=5bfed9a91f036d8c168afebfd8e9dd34e2919c9a", "patch": "@@ -142,7 +142,7 @@ extern tree default_mangle_decl_assembler_name (tree, tree);\n extern tree default_emutls_var_fields (tree, tree *);\n extern tree default_emutls_var_init (tree, tree, tree);\n extern bool default_hard_regno_scratch_ok (unsigned int);\n-extern bool default_mode_dependent_address_p (const_rtx addr);\n+extern bool default_mode_dependent_address_p (const_rtx, addr_space_t);\n extern bool default_target_option_valid_attribute_p (tree, tree, tree, int);\n extern bool default_target_option_pragma_parse (tree, tree);\n extern bool default_target_can_inline_p (tree, tree);"}]}