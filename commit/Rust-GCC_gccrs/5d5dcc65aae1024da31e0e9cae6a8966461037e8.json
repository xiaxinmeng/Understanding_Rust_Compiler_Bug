{"sha": "5d5dcc65aae1024da31e0e9cae6a8966461037e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1ZGNjNjVhYWUxMDI0ZGEzMWUwZTljYWU2YTg5NjY0NjEwMzdlOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-19T22:46:40Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-07T18:15:37Z"}, "message": "c++: Detect long double -> double narrowing [PR94590]\n\nThis PR points out that we don't detect long double -> double narrowing\nwhen long double happens to have the same precision as double; on x86_64\nthis can be achieved by -mlong-double-64.\n\n[dcl.init.list]#7.2 specifically says \"from long double to double or float,\nor from double to float\", but check_narrowing only checks\n\n  TYPE_PRECISION (type) < TYPE_PRECISION (ftype)\n\nso we need to handle the other cases too, e.g. by same_type_p as in\nthe following patch.\n\n\tPR c++/94590 - Detect long double -> double narrowing.\n\t* typeck2.c (check_narrowing): Detect long double -> double\n\tnarrowing even when double and long double have the same\n\tprecision.  Make it handle conversions to float too.\n\n\t* g++.dg/cpp0x/Wnarrowing18.C: New test.", "tree": {"sha": "fb7af4ad2866a940fc07338d26f5e1ff224325d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb7af4ad2866a940fc07338d26f5e1ff224325d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5dcc65aae1024da31e0e9cae6a8966461037e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5dcc65aae1024da31e0e9cae6a8966461037e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5dcc65aae1024da31e0e9cae6a8966461037e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5dcc65aae1024da31e0e9cae6a8966461037e8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21968d4ae067e3fa1c1728c8db26478e8ac8ad0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21968d4ae067e3fa1c1728c8db26478e8ac8ad0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21968d4ae067e3fa1c1728c8db26478e8ac8ad0b"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "031741e2264d3df1903ee585a6032c933c76f9fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5dcc65aae1024da31e0e9cae6a8966461037e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5dcc65aae1024da31e0e9cae6a8966461037e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d5dcc65aae1024da31e0e9cae6a8966461037e8", "patch": "@@ -1,3 +1,10 @@\n+2020-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94590 - Detect long double -> double narrowing.\n+\t* typeck2.c (check_narrowing): Detect long double -> double\n+\tnarrowing even when double and long double have the same\n+\tprecision.  Make it handle conversions to float too.\n+\n 2020-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94255"}, {"sha": "d407e4cbfa4895a7dafa28103750c234faca6698", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5dcc65aae1024da31e0e9cae6a8966461037e8/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5dcc65aae1024da31e0e9cae6a8966461037e8/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=5d5dcc65aae1024da31e0e9cae6a8966461037e8", "patch": "@@ -1008,10 +1008,17 @@ check_narrowing (tree type, tree init, tsubst_flags_t complain,\n \t      || !int_fits_type_p (init, type)))\n \tok = false;\n     }\n+  /* [dcl.init.list]#7.2: \"from long double to double or float, or from\n+      double to float\".  */\n   else if (TREE_CODE (ftype) == REAL_TYPE\n \t   && TREE_CODE (type) == REAL_TYPE)\n     {\n-      if (TYPE_PRECISION (type) < TYPE_PRECISION (ftype))\n+      if ((same_type_p (ftype, long_double_type_node)\n+\t   && (same_type_p (type, double_type_node)\n+\t       || same_type_p (type, float_type_node)))\n+\t  || (same_type_p (ftype, double_type_node)\n+\t      && same_type_p (type, float_type_node))\n+\t  || (TYPE_PRECISION (type) < TYPE_PRECISION (ftype)))\n \t{\n \t  if (TREE_CODE (init) == REAL_CST)\n \t    {"}, {"sha": "6712c1dfbb27af23dadb10e3cc3457b294a4a068", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5dcc65aae1024da31e0e9cae6a8966461037e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5dcc65aae1024da31e0e9cae6a8966461037e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d5dcc65aae1024da31e0e9cae6a8966461037e8", "patch": "@@ -1,3 +1,8 @@\n+2020-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94590 - Detect long double -> double narrowing.\n+\t* g++.dg/cpp0x/Wnarrowing18.C: New test.\n+\n 2020-05-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94255"}, {"sha": "0dc7075cd62014b59aaddc087c75ae06aace4e6c", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing18.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5dcc65aae1024da31e0e9cae6a8966461037e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5dcc65aae1024da31e0e9cae6a8966461037e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing18.C?ref=5d5dcc65aae1024da31e0e9cae6a8966461037e8", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/94590 - Detect long double -> double narrowing.\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-mlong-double-64\" { target x86_64-*-* i?86-*-* } }\n+\n+int\n+main ()\n+{\n+  using T = long double;\n+  extern long double ld;\n+  extern T ld2;\n+  extern const T ld3;\n+  double d{ld}; // { dg-error \"narrowing conversion\" }\n+  double d2{ld2}; // { dg-error \"narrowing conversion\" }\n+  double d3{ld3}; // { dg-error \"narrowing conversion\" }\n+}"}]}