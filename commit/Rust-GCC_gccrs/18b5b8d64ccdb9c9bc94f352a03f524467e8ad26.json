{"sha": "18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThiNWI4ZDY0Y2NkYjljOWJjOTRmMzUyYTAzZjUyNDQ2N2U4YWQyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-11-15T17:55:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-11-15T17:55:28Z"}, "message": "dwarf2out.c (dwarf2out_finish): Don't abort because of orphan DIEs if there were errors in the source.\n\n        * dwarf2out.c (dwarf2out_finish): Don't abort because of orphan\n        DIEs if there were errors in the source.\n\n        * config/alpha/alpha-interix.h, config/alpha/elf.h,\n        config/arm/coff.h, config/i386/djgpp.h, config/i386/i386.c,\n        config/i386/i386.h, config/i386/sco5.h, config/i960/i960-coff.h,\n        config/m68k/coff.h, config/m88k/m88k.h, config/m88k/m88k.c,\n        config/pa/pa64-hpux.h, config/sh/sh.h, config/sparc/litecoff.h,\n        config/elfos.h, config/lynx.h, config/netware.h,\n        config/m68hc11/m68hc11.h, config/mcore/mcore-pe.h,\n        config/s390/linux64.h: Remove definitions of INT_ASM_OP, change\n        uses to use ASM_LONG.\n\nFrom-SVN: r47066", "tree": {"sha": "fc8971b2f6582b621fcb6b1e7168fbaec3123d96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc8971b2f6582b621fcb6b1e7168fbaec3123d96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6b08fe890f8f037e1e18e36af092ca95e1dd82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b08fe890f8f037e1e18e36af092ca95e1dd82b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b08fe890f8f037e1e18e36af092ca95e1dd82b"}], "stats": {"total": 179, "additions": 109, "deletions": 70}, "files": [{"sha": "3a97d8938e02146ca140e5f991e1a17eea69aaf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -1,3 +1,18 @@\n+2001-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* dwarf2out.c (dwarf2out_finish): Don't abort because of orphan\n+\tDIEs if there were errors in the source.\n+\n+\t* config/alpha/alpha-interix.h, config/alpha/elf.h,\n+\tconfig/arm/coff.h, config/i386/djgpp.h, config/i386/i386.c,\n+\tconfig/i386/i386.h, config/i386/sco5.h, config/i960/i960-coff.h,\n+\tconfig/m68k/coff.h, config/m88k/m88k.h, config/m88k/m88k.c,\n+\tconfig/pa/pa64-hpux.h, config/sh/sh.h, config/sparc/litecoff.h,\n+\tconfig/elfos.h, config/lynx.h, config/netware.h,\n+\tconfig/m68hc11/m68hc11.h, config/mcore/mcore-pe.h,\n+\tconfig/s390/linux64.h: Remove definitions of INT_ASM_OP, change\n+\tuses to use ASM_LONG.\n+\n 2001-11-15  Alan Matsuoka  <alanm@redhat.com>\n \n \t* gensupport.c\tprocess_include : Change call to alloca to"}, {"sha": "4dc21868dd45f5de86d4488071187e9175fcdba2", "filename": "gcc/config/alpha/alpha-interix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-interix.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -126,8 +126,6 @@ const_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define INT_ASM_OP\t\t\"\\t.long\\t\"\n-\n /* The linker will take care of this, and having them causes problems with\n    ld -r (specifically -rU).  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY 1"}, {"sha": "7c8822916724ce5caa405f523f23479511bfdb08", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -165,12 +165,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_SKIP((FILE), (SIZE));\t\t\t\t\t\\\n } while (0)\n \n-/* This is the pseudo-op used to generate a 64-bit word of data with a\n-   specific value in some section.  */\n-\n-#undef  INT_ASM_OP\n-#define INT_ASM_OP\t\t\"\\t.quad\\t\"\n-\n /* Biggest alignment supported by the object file format of this\n    machine.  Use this macro to limit the alignment which can be\n    specified using the `__attribute__ ((aligned (N)))' construct.  If"}, {"sha": "84ab1ed7f45d4195f47574575bcbfdca73dfde4c", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -115,8 +115,6 @@ rdata_section ()\t\t\t\t\t\t\\\n \f\n /* Support the ctors/dtors sections for g++.  */\n \n-#define INT_ASM_OP \"\\t.word\\t\"\n-\n /* __CTOR_LIST__ and __DTOR_LIST__ must be defined by the linker script.  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY\n "}, {"sha": "e6b36a703d00bc96d4821d178d5e1812c36a964b", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -224,17 +224,6 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* This is the pseudo-op used to generate a reference to a specific\n-   symbol in some section.  It is only used in machine-specific\n-   configuration files.  This is the same for all known svr4\n-   assemblers, except those in targets that don't use 32-bit pointers.\n-   Those should override INT_ASM_OP.  Yes, the name of the macro is\n-   misleading.  */\n-\n-#ifndef INT_ASM_OP\n-#define INT_ASM_OP\t\t\"\\t.long\\t\"\n-#endif\n-\n /* This is the pseudo-op used to generate a contiguous sequence of byte\n    values from a double-quoted string WITHOUT HAVING A TERMINATING NUL\n    AUTOMATICALLY APPENDED.  This is the same for most svr4 assemblers.  */"}, {"sha": "edd0fc2bc7dce78a3b3d0c04c11b0a56b144e527", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -53,10 +53,6 @@ Boston, MA 02111-1307, USA.  */\n #undef IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n-/* Define the name of the .int op.  */\n-#undef INT_ASM_OP\n-#define INT_ASM_OP \"\\t.long\\t\"\n-\n /* Enable alias attribute support.  */\n #ifndef SET_ASM_OP\n #define SET_ASM_OP \"\\t.set\\t\""}, {"sha": "fd60fd8e201ba23c65f918d7c0c99302c7d7261a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -5212,11 +5212,11 @@ i386_dwarf_output_addr_const (file, x)\n      rtx x;\n {\n #ifdef ASM_QUAD\n-  fprintf (file, \"%s\", TARGET_64BIT ? ASM_QUAD : INT_ASM_OP);\n+  fprintf (file, \"%s\", TARGET_64BIT ? ASM_QUAD : ASM_LONG);\n #else\n   if (TARGET_64BIT)\n     abort ();\n-  fprintf (file, \"%s\", INT_ASM_OP);\n+  fprintf (file, \"%s\", ASM_LONG);\n #endif\n   if (flag_pic)\n     output_pic_addr_const (file, x, '\\0');"}, {"sha": "3b2ce410336a70cac032d164b971a30486026acc", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -2969,7 +2969,6 @@ do { long l;\t\t\t\t\t\t\\\n    degenerate to the macros used above.  */\n #define UNALIGNED_SHORT_ASM_OP\t\tASM_SHORT\n #define UNALIGNED_INT_ASM_OP\t\tASM_LONG\n-#define INT_ASM_OP\t\t\tASM_LONG\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n "}, {"sha": "6bd6934b7749ad8422403cc7a050a080838e34a3", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -50,9 +50,6 @@ Boston, MA 02111-1307, USA.  */\n #undef LOCAL_ASM_OP\n #define LOCAL_ASM_OP\t\t\t\"\\t.local\\t\"\n \n-#undef INT_ASM_OP\n-#define INT_ASM_OP\t\t\t\"\\t.long\\t\"\n-\n #undef ASM_SHORT\n #define ASM_SHORT\t\t\t\"\\t.value\\t\"\n "}, {"sha": "7da93053256f753448a706763d4927f9e08eef2d", "filename": "gcc/config/i386/scodbx.h", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fscodbx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi386%2Fscodbx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fscodbx.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -0,0 +1,84 @@\n+/* Definitions for Intel 386 running SCO Unix System V,\n+   using dbx-in-coff encapsulation.\n+   Copyright (C) 1992, 1995, 1996, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"i386/svr3dbx.h\"\n+\n+/* Overridden defines for SCO systems from sco.h. */\n+\n+/* By default, target has a 80387, uses IEEE compatible arithmetic,\n+   and returns float values in the 387, ie,\n+   (TARGET_80387 | TARGET_FLOAT_RETURNS_IN_80387)\n+\n+   SCO's software emulation of a 387 fails to handle the `fucomp'\n+   opcode.  fucomp is only used when generating IEEE compliant code.\n+   So don't make TARGET_IEEE_FP default for SCO. */\n+\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n+\n+/* Use crt1.o as a startup file and crtn.o as a closing file.  */\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!r:%{!z:svr3.ifile%s}%{z:svr3z.ifile%s}}\\\n+   %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}\"\n+\n+/* Library spec, including SCO international language support. */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \\\n+ \"%{p:-L/usr/lib/libp}%{pg:-L/usr/lib/libp} %{scointl:libintl.a%s} -lc\"\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -DM_UNIX -DM_I386 -DM_COFF -DM_WORDSWAP -Asystem=svr3\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%(cpp_cpu) %{scointl:-DM_INTERNAT}\"\n+\n+/* This spec is used for telling cpp whether char is signed or not.  */\n+\n+#undef SIGNED_CHAR_SPEC\n+#if DEFAULT_SIGNED_CHAR\n+#define SIGNED_CHAR_SPEC \\\n+ \"%{funsigned-char:-D__CHAR_UNSIGNED__ -D_CHAR_UNSIGNED}\"\n+#else\n+#define SIGNED_CHAR_SPEC \\\n+ \"%{!fsigned-char:-D__CHAR_UNSIGNED__ -D_CHAR_UNSIGNED}\"\n+#endif\n+\n+/* caller has to pop the extra argument passed to functions that return\n+   structures. */\n+\n+#undef RETURN_POPS_ARGS\n+#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)   \\\n+  ((FUNDECL) && TREE_CODE (FUNDECL) == IDENTIFIER_NODE ? 0\t\\\n+   : (TARGET_RTD\t\t\t\t\t\t\\\n+      && (TYPE_ARG_TYPES (FUNTYPE) == 0\t\t\t\t\\\n+\t  || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (FUNTYPE)))\t\\\n+\t      == void_type_node))) ? (SIZE)\t\t\t\\\n+   : 0)\n+/* On other 386 systems, the last line looks like this:\n+   : (aggregate_value_p (TREE_TYPE (FUNTYPE))) ? GET_MODE_SIZE (Pmode) : 0)  */\n+\n+/* Handle #pragma pack. */\n+#define HANDLE_SYSV_PRAGMA"}, {"sha": "47bcc8d71226c186739e06ff077ca832c2046835", "filename": "gcc/config/i960/i960-coff.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-coff.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -41,6 +41,4 @@ Boston, MA 02111-1307, USA.  */\n #define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n #define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n \n-#define INT_ASM_OP \"\\t.word\\t\"\n-\n /* end of i960-coff.h */"}, {"sha": "012a701bc64dd716fefb74a7c6f01af5262f0d85", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -140,8 +140,6 @@ do {\t\t\t\t\t\t\t\t\\\n #undef DTORS_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors\"\n \n-#define INT_ASM_OP\t\t\"\\t.long\\t\"\n-\n #undef DO_GLOBAL_CTORS_BODY\n #undef DO_GLOBAL_DTORS_BODY\n "}, {"sha": "941763ceabb02b789a000cf6afdb1aa8700feaf7", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -1570,15 +1570,6 @@ do {                                                                    \\\n /* Output before uninitialized data.  */\n #define BSS_SECTION_ASM_OP \t(\"\\t.sect\\t.bss\")\n \n-/* This is the pseudo-op used to generate a reference to a specific\n-   symbol in some section.  It is only used in machine-specific\n-   configuration files.  This is the same for all known svr4\n-   assemblers, except those in targets that don't use 32-bit pointers.\n-   Those should override INT_ASM_OP.  Yes, the name of the macro is\n-   misleading.  */\n-#undef INT_ASM_OP\n-#define INT_ASM_OP\t\t\"\\t.word\\t\"\n-\n /* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n \n    Same as config/elfos.h but don't mark these section SHF_WRITE since"}, {"sha": "9c677f0fada04195ed4e299b3e10c239188648b7", "filename": "gcc/config/m68k/coff.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fm68k%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fm68k%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcoff.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -104,8 +104,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  m68k_coff_asm_named_section\n \n-#define INT_ASM_OP \"\\t.long\\t\"\n-\n /* Don't assume anything about startfiles.  */\n \n #undef STARTFILE_SPEC"}, {"sha": "f4eb8dda532a11b9af96a4753170059c4f8d3ba3", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -2367,7 +2367,7 @@ output_tdesc (file, offset)\n \n   tdesc_section ();\n \n-  fprintf (file, \"%s%d,%d\", INT_ASM_OP, /* 8:0,22:(20 or 16),2:2 */\n+  fprintf (file, \"%s%d,%d\", ASM_LONG, /* 8:0,22:(20 or 16),2:2 */\n \t   (((xmask != 0) ? 20 : 16) << 2) | 2,\n \t   flag_pic ? 2 : 1);\n "}, {"sha": "b9ddd72bec681fb3cb951080ea956e8f0bd4f181", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -1651,7 +1651,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #define ASM_COMMENT_START \";\"\n \n /* Allow pseudo-ops to be overridden.  Override these in svr[34].h.  */\n-#undef\tINT_ASM_OP\n #undef\tASCII_DATA_ASM_OP\n #undef\tCONST_SECTION_ASM_OP\n #undef\tCTORS_SECTION_ASM_OP\n@@ -1697,8 +1696,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #define BSS_ASM_OP\t\t\"\\tbss\\t\"\n #define FLOAT_ASM_OP\t\t\"\\tfloat\\t\"\n #define DOUBLE_ASM_OP\t\t\"\\tdouble\\t\"\n-#define INT_ASM_OP\t\t\"\\tword\\t\"\n-#define ASM_LONG\t\tINT_ASM_OP\n+#define ASM_LONG\t\t\"\\tword\\t\"\n #define SHORT_ASM_OP\t\t\"\\thalf\\t\"\n #define CHAR_ASM_OP\t\t\"\\tbyte\\t\"\n #define ASCII_DATA_ASM_OP\t\"\\tstring\\t\"\n@@ -2049,7 +2047,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     union { REAL_VALUE_TYPE d; long l[2]; } x;\t\t\t\t\\\n     x.d = (VALUE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s0x%.8lx, 0x%.8lx\\n\", INT_ASM_OP,\t\t\t\\\n+    fprintf (FILE, \"%s0x%.8lx, 0x%.8lx\\n\", ASM_LONG,\t\t\t\\\n \t     (long) x.l[0], (long) x.l[1]);\t\t\t\t\\\n   } while (0)\n \n@@ -2058,12 +2056,12 @@ do {\t\t\t\t\t\t\t\t\t \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     int i;\t\t\t\t\t\t\t\t\\\n     FLOAT_TO_INT_INTERNAL (VALUE, i);\t\t\t\t\t\\\n-    fprintf (FILE, \"%s0x%.8x\\n\", INT_ASM_OP, i);\t\t\t\\\n+    fprintf (FILE, \"%s0x%.8x\\n\", ASM_LONG, i);\t\t\t\\\n   } while (0)\n \n /* Likewise for `int', `short', and `char' constants.  */\n #define ASM_OUTPUT_INT(FILE,VALUE)\t\t\t\t\t\\\n-( fprintf (FILE, \"%s\", INT_ASM_OP),\t\t\t\t\t\\\n+( fprintf (FILE, \"%s\", ASM_LONG),\t\t\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n "}, {"sha": "067706c3f09d65757790c72fd8d8f9d12e54b596", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -183,8 +183,6 @@ rdata_section ()\t\t\t\t\t\t\\\n #define STARTFILE_SPEC \"crt0.o%s\"\n #define ENDFILE_SPEC  \"%{!mno-lsim:-lsim}\"\n \n-#define INT_ASM_OP \"\\t.long\\t\"\n-\n /* __CTOR_LIST__ and __DTOR_LIST__ must be defined by the linker script.  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY\n "}, {"sha": "129fa3921796c8284512896c6bf10d106c35124b", "filename": "gcc/config/netware.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetware.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -100,6 +100,3 @@ const_section ()                                                        \\\n       in_section = in_const;                                            \\\n     }                                                                   \\\n }\n-\n-#undef\tINT_ASM_OP\n-#define INT_ASM_OP \".long\""}, {"sha": "6445c9aa27ea18ac2d0a783531895f8b5e917d83", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -180,8 +180,6 @@ do {\t\t\t\t\t\t\t\t\\\n   DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n } while (0)\n \n-#define INT_ASM_OP \"\\t.dword\\t\"\n-\n /* Define the strings used for the special svr4 .type and .size directives.\n    These strings generally do not vary from one system running svr4 to\n    another, but if a given system (e.g. m88k running svr) needs to use"}, {"sha": "0fdd173cc3a79962dc3623af4a83b6f8812cebbd", "filename": "gcc/config/s390/linux64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fs390%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fs390%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux64.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -59,9 +59,6 @@ Boston, MA 02111-1307, USA.  */\n \t%{static:-static}}}\"\n #endif\n \n-#undef INT_ASM_OP\n-#define INT_ASM_OP \"\\t.quad\\t\"\n-\n #undef PROMOTE_PROTOTYPES \n #undef MASK_RETURN_ADDR \n #undef SELECT_SECTION"}, {"sha": "cdb25c89ec2fa3fcfc355510b4e811ce9823997b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -1929,11 +1929,6 @@ while (0)\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  sh_asm_named_section\n \n-/* This is the pseudo-op used to generate a reference to a specific\n-   symbol in some section.  */\n-\n-#define INT_ASM_OP\t\"\\t.long\\t\"\n-     \n #undef DO_GLOBAL_CTORS_BODY\n #define DO_GLOBAL_CTORS_BODY\t\t\t\\\n {\t\t\t\t\t\t\\"}, {"sha": "dede792e69bb068e00de7e49499210075f37a841", "filename": "gcc/config/sparc/litecoff.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flitecoff.h?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -44,8 +44,6 @@ Boston, MA 02111-1307, USA.  */\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\n \n-#define INT_ASM_OP \"\\t.long\\t\"\n-\n #undef DO_GLOBAL_CTORS_BODY\n #undef DO_GLOBAL_DTORS_BODY\n "}, {"sha": "886b15bf806bae2f0cb590339061e0e635fcdba2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b5b8d64ccdb9c9bc94f352a03f524467e8ad26/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=18b5b8d64ccdb9c9bc94f352a03f524467e8ad26", "patch": "@@ -11853,6 +11853,9 @@ dwarf2out_finish (input_filename)\n \t    add_child_die (origin->die_parent, die);\n \t  else if (die == comp_unit_die)\n \t    ;\n+\t  else if (errorcount > 0 || sorrycount > 0)\n+\t    /* It's OK to be confused by errors in the input.  */\n+\t    add_child_die (comp_unit_die, die);\n \t  else\n \t    abort ();\n \t}"}]}