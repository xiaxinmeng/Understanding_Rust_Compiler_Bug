{"sha": "ac10986fadc255c27db122daa244f8f71c5462f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxMDk4NmZhZGMyNTVjMjdkYjEyMmRhYTI0NGY4ZjcxYzU0NjJmMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-06-18T08:30:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-18T08:30:47Z"}, "message": "re PR tree-optimization/32383 (ICE with reciprocals and -ffast-math)\n\n\tPR tree-optimization/32383\n\t* targhooks.c (default_builtin_reciprocal): Add new bool argument.\n\t* targhooks.h (default_builtin_reciprocal): Update prototype.\n\t* target.h (struct gcc_target): Update builtin_reciprocal.\n\t* doc/tm.texi (TARGET_BUILTIN_RECIPROCAL): Update description.\n\t* tree-ssa-math-opts (execute_cse_reciprocals): Skip statements\n\twhere arg1 is not SSA_NAME.  Pass true to targetm.builtin_reciprocal\n\twhen fndecl is in BUILT_IN_MD class.\n\t(execute_convert_to_rsqrt): Ditto.\n\n\t* config/i386/i386.c (ix86_builtin_reciprocal): Update for new bool\n\targument.  Convert IX86_BUILTIN_SQRTPS code only when md_fn is true.\n\tConvert BUILT_IN_SQRTF code only  when md_fn is false.\n\ntestsuite/ChangeLog:\n\n\tPR tree-optimization/32383\n\t* testsuite/g++.dg/opt/pr32383.C: New test.\n\nFrom-SVN: r125790", "tree": {"sha": "a70a489abddc4e7f99e532e8ae5b8057df6f9b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a70a489abddc4e7f99e532e8ae5b8057df6f9b21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac10986fadc255c27db122daa244f8f71c5462f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac10986fadc255c27db122daa244f8f71c5462f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac10986fadc255c27db122daa244f8f71c5462f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac10986fadc255c27db122daa244f8f71c5462f2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8d8890adb3be434ee6eec4f104f322e6c247c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d8890adb3be434ee6eec4f104f322e6c247c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d8890adb3be434ee6eec4f104f322e6c247c5a"}], "stats": {"total": 114, "additions": 91, "deletions": 23}, "files": [{"sha": "490bf2ebb39a1c9b0549af898b6ca14ce8c07233", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -1,3 +1,19 @@\n+2007-06-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/32383\n+\t* targhooks.c (default_builtin_reciprocal): Add new bool argument.\n+\t* targhooks.h (default_builtin_reciprocal): Update prototype.\n+\t* target.h (struct gcc_target): Update builtin_reciprocal.\n+\t* doc/tm.texi (TARGET_BUILTIN_RECIPROCAL): Update description.\n+\t* tree-ssa-math-opts (execute_cse_reciprocals): Skip statements\n+\twhere arg1 is not SSA_NAME.  Pass true to targetm.builtin_reciprocal\n+\twhen fndecl is in BUILT_IN_MD class.\n+\t(execute_convert_to_rsqrt): Ditto.\n+\n+\t* config/i386/i386.c (ix86_builtin_reciprocal): Update for new bool\n+\targument.  Convert IX86_BUILTIN_SQRTPS code only when md_fn is true.\n+\tConvert BUILT_IN_SQRTF code only  when md_fn is false.\n+\n 2007-06-18  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* bt-load.c (move_btr_def): Fix the order of arguments"}, {"sha": "ef3d7b3b5aa20985a537fc614aff8ad81140b584", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -19911,26 +19911,36 @@ ix86_vectorize_builtin_conversion (unsigned int code, tree type)\n    reciprocal of the function, or NULL_TREE if not available.  */\n \n static tree\n-ix86_builtin_reciprocal (unsigned int code, bool sqrt ATTRIBUTE_UNUSED)\n+ix86_builtin_reciprocal (unsigned int fn, bool md_fn,\n+\t\t\t bool sqrt ATTRIBUTE_UNUSED)\n {\n   if (! (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n \t && flag_finite_math_only && !flag_trapping_math\n \t && flag_unsafe_math_optimizations))\n     return NULL_TREE;\n \n-  switch (code)\n-    {\n-    /* Sqrt to rsqrt conversion.  */\n-    case BUILT_IN_SQRTF:\n-      return ix86_builtins[IX86_BUILTIN_RSQRTF];\n+  if (md_fn)\n+    /* Machine dependent builtins.  */\n+    switch (fn)\n+      {\n+\t/* Vectorized version of sqrt to rsqrt conversion.  */\n+      case IX86_BUILTIN_SQRTPS:\n+\treturn ix86_builtins[IX86_BUILTIN_RSQRTPS];\n \n-    /* Vectorized version of sqrt to rsqrt conversion.  */\n-    case IX86_BUILTIN_SQRTPS:\n-      return ix86_builtins[IX86_BUILTIN_RSQRTPS];\n+      default:\n+\treturn NULL_TREE;\n+      }\n+  else\n+    /* Normal builtins.  */\n+    switch (fn)\n+      {\n+\t/* Sqrt to rsqrt conversion.  */\n+      case BUILT_IN_SQRTF:\n+\treturn ix86_builtins[IX86_BUILTIN_RSQRTF];\n \n-    default:\n-      return NULL_TREE;\n-    }\n+      default:\n+\treturn NULL_TREE;\n+      }\n }\n \n /* Store OPERAND to the memory after reload is completed.  This means"}, {"sha": "6e10dd28f2a34e98b0c0352a1d622a881a692abd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -5345,13 +5345,14 @@ of @var{x}.\n The default version returns false for all constants.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_BUILTIN_RECIPROCAL (enum tree_code @var{code}, bool @var{sqrt})\n+@deftypefn {Target Hook} tree TARGET_BUILTIN_RECIPROCAL (enum tree_code @var{fn}, bool @var{tm_fn}, bool @var{sqrt})\n This hook should return the DECL of a function that implements reciprocal of\n-the builtin function with builtin function code @var{code}, or\n-@code{NULL_TREE} if such a function is not available.  When @var{sqrt} is\n-true, additional optimizations that apply only to the reciprocal of a square\n-root function are performed, and only reciprocals of @code{sqrt} function\n-are valid.\n+the builtin function with builtin function code @var{fn}, or\n+@code{NULL_TREE} if such a function is not available.  @var{tm_fn} is true\n+when @var{fn} is a code of a machine-dependent builtin function.  When\n+@var{sqrt} is true, additional optimizations that apply only to the reciprocal\n+of a square root function are performed, and only reciprocals of @code{sqrt}\n+function are valid.\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD (void)"}, {"sha": "7e144dec19a6ea6601495a58a7079e37a9d87ab2", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -485,7 +485,7 @@ struct gcc_target\n \n   /* Returns a code for a target-specific builtin that implements\n      reciprocal of the function, or NULL_TREE if not available.  */\n-  tree (* builtin_reciprocal) (unsigned, bool);\n+  tree (* builtin_reciprocal) (unsigned, bool, bool);\n \n   /* For a vendor-specific fundamental TYPE, return a pointer to\n      a statically-allocated string containing the C++ mangling for"}, {"sha": "862cd6f31b8944552d636b4450f8e04c4eb9af4f", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -342,6 +342,7 @@ default_builtin_vectorized_conversion (enum tree_code code ATTRIBUTE_UNUSED,\n \n tree\n default_builtin_reciprocal (enum built_in_function fn ATTRIBUTE_UNUSED,\n+\t\t\t    bool md_fn ATTRIBUTE_UNUSED,\n \t\t\t    bool sqrt ATTRIBUTE_UNUSED)\n {\n   return NULL_TREE;"}, {"sha": "412bf5de8040dd1887309c7c936094904410863d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -60,7 +60,7 @@ extern tree default_builtin_vectorized_function\n \n extern tree default_builtin_vectorized_conversion (enum tree_code, tree);\n \n-extern tree default_builtin_reciprocal (enum built_in_function, bool);\n+extern tree default_builtin_reciprocal (enum built_in_function, bool, bool);\n \n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */"}, {"sha": "845cd6b5a3e4dc7076ec7ae20027fff737e406a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -1,3 +1,8 @@\n+2007-06-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/32383\n+\t* testsuite/g++.dg/opt/pr32383.C: New test.\n+\n 2007-06-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/32366"}, {"sha": "af4161888ece17ca322f116bd2790ca2a2a57298", "filename": "gcc/testsuite/g++.dg/opt/pr32383.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr32383.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr32383.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr32383.C?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -0,0 +1,20 @@\n+// Testcase by Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+// { dg-do compile }\n+// { dg-options \"-O -ffast-math\" }\n+\n+struct A\n+{\n+  ~A();\n+};\n+\n+double& foo();\n+\n+inline void bar (double d) { foo() /= d; }\n+\n+void baz()\n+{\n+  A a;\n+  bar(2);\n+}\n+"}, {"sha": "0320ac1f4d4adfba838651f6083a1d9286b91d39", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac10986fadc255c27db122daa244f8f71c5462f2/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=ac10986fadc255c27db122daa244f8f71c5462f2", "patch": "@@ -507,7 +507,12 @@ execute_cse_reciprocals (void)\n \t      && TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == RDIV_EXPR)\n \t    {\n \t      tree arg1 = TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt, 1), 1);\n-\t      tree stmt1 = SSA_NAME_DEF_STMT (arg1);\n+\t      tree stmt1;\n+\n+\t      if (TREE_CODE (arg1) != SSA_NAME)\n+\t\tcontinue;\n+\n+\t      stmt1 = SSA_NAME_DEF_STMT (arg1);\n \n \t      if (TREE_CODE (stmt1) == GIMPLE_MODIFY_STMT\n \t\t  && TREE_CODE (GIMPLE_STMT_OPERAND (stmt1, 1)) == CALL_EXPR\n@@ -517,11 +522,14 @@ execute_cse_reciprocals (void)\n \t\t      || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD))\n \t\t{\n \t\t  enum built_in_function code;\n+\t\t  bool md_code;\n \t\t  tree arg10;\n \t\t  tree tmp;\n \n \t\t  code = DECL_FUNCTION_CODE (fndecl);\n-\t\t  fndecl = targetm.builtin_reciprocal (code, false);\n+\t\t  md_code = DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD;\n+\n+\t\t  fndecl = targetm.builtin_reciprocal (code, md_code, false);\n \t\t  if (!fndecl)\n \t\t    continue;\n \n@@ -791,15 +799,22 @@ execute_convert_to_rsqrt (void)\n \t\t  || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD))\n \t    {\n \t      enum built_in_function code;\n+\t      bool md_code;\n \t      tree arg1;\n \t      tree stmt1;\n \n \t      code = DECL_FUNCTION_CODE (fndecl);\n-\t      fndecl = targetm.builtin_reciprocal (code, true);\n+\t      md_code = DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD;\n+\n+\t      fndecl = targetm.builtin_reciprocal (code, md_code, true);\n \t      if (!fndecl)\n \t\tcontinue;\n \n \t      arg1 = CALL_EXPR_ARG (GIMPLE_STMT_OPERAND (stmt, 1), 0);\n+\n+\t      if (TREE_CODE (arg1) != SSA_NAME)\n+\t\tcontinue;\n+\n \t      stmt1 = SSA_NAME_DEF_STMT (arg1);\n \n \t      if (TREE_CODE (stmt1) == GIMPLE_MODIFY_STMT"}]}