{"sha": "1554ed7ea429be444e74d5306be6692f517acf02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU1NGVkN2VhNDI5YmU0NDRlNzRkNTMwNmJlNjY5MmY1MTdhY2YwMg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-16T10:23:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-16T10:23:12Z"}, "message": "[multiple changes]\n\n2017-11-16  Yannick Moy  <moy@adacore.com>\n\n\t* sem_elab.adb (Include): Fix mode of parameter Curr to out.\n\n2017-11-16  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Is_CCT_Instance): Allow calls where\n\tContext_Id denotes a record type.\n\n2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch8.adb (Check_SPARK_Primitive_Operation): Enable the check in\n\tinstantiations.\n\n2017-11-16  Doug Rupp  <rupp@adacore.com>\n\n\tInitial gnat port to aarch64-wrs-vxworks7\n\t* libgnarl/s-vxwork__aarch64.ads,\n\tlibgnat/system-vxworks7-aarch64-rtp-smp.ads,\n\tlibgnat/system-vxworks7-aarch64.ads: New files\n\t* sigtramp-vxworks-target.inc (aarch64): New section.\n\t* tracebak.c (USE_ARM_UNWINDING): Disable for ARMARCH8A.\n\nFrom-SVN: r254805", "tree": {"sha": "ebc30ef6ba542cf2b6199364d5666d5dfb121900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebc30ef6ba542cf2b6199364d5666d5dfb121900"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1554ed7ea429be444e74d5306be6692f517acf02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1554ed7ea429be444e74d5306be6692f517acf02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1554ed7ea429be444e74d5306be6692f517acf02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1554ed7ea429be444e74d5306be6692f517acf02/comments", "author": null, "committer": null, "parents": [{"sha": "19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c6e49cf41cd483601dca9c1e69e1bfb486dd2e"}], "stats": {"total": 533, "additions": 511, "deletions": 22}, "files": [{"sha": "3f1e51f4acf3fd408fae2536ccf8180975aa040e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -1,3 +1,26 @@\n+2017-11-16  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_elab.adb (Include): Fix mode of parameter Curr to out.\n+\n+2017-11-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_CCT_Instance): Allow calls where\n+\tContext_Id denotes a record type.\n+\n+2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch8.adb (Check_SPARK_Primitive_Operation): Enable the check in\n+\tinstantiations.\n+\n+2017-11-16  Doug Rupp  <rupp@adacore.com>\n+\n+\tInitial gnat port to aarch64-wrs-vxworks7\n+\t* libgnarl/s-vxwork__aarch64.ads,\n+\tlibgnat/system-vxworks7-aarch64-rtp-smp.ads,\n+\tlibgnat/system-vxworks7-aarch64.ads: New files\n+\t* sigtramp-vxworks-target.inc (aarch64): New section.\n+\t* tracebak.c (USE_ARM_UNWINDING): Disable for ARMARCH8A.\n+\n 2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_elab.adb (Include): Including a node which is also a compilation"}, {"sha": "3edfe16e7a1ac311363644cd44a5a917b204bdd0", "filename": "gcc/ada/libgnarl/s-vxwork__aarch64.ads", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Flibgnarl%2Fs-vxwork__aarch64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Flibgnarl%2Fs-vxwork__aarch64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwork__aarch64.ads?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -0,0 +1,61 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                        S Y S T E M . V X W O R K S                       --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--          Copyright (C) 1998-2017, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software;  you can redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the AARCH64 VxWorks version of this package\n+\n+with Interfaces.C;\n+\n+package System.VxWorks is\n+   pragma Preelaborate (System.VxWorks);\n+\n+   package IC renames Interfaces.C;\n+\n+   --  Floating point context record. ARM version\n+\n+   type ulong128 is array (0 .. 1) of IC.unsigned_long;\n+   FP_SGPR_NUM_REGS : constant := 32;\n+   type Fpr_Sgpr_Array is array (1 .. FP_SGPR_NUM_REGS) of ulong128;\n+\n+   --  The record definition below matches what arch/arm/fppArmLib.h says\n+\n+   type FP_CONTEXT is record\n+      fpcr     : IC.unsigned_long;  --  Floating-point Control Register\n+      fpsr     : IC.unsigned_long;  --  Floating-point Status Register\n+      vfp_gpr  : Fpr_Sgpr_Array;\n+   end record;\n+\n+   for FP_CONTEXT'Alignment use 16;  --  128 bits\n+   pragma Convention (C, FP_CONTEXT);\n+\n+   Num_HW_Interrupts : constant := 256;\n+   --  Number of entries in hardware interrupt vector table\n+\n+end System.VxWorks;"}, {"sha": "6122af745d8a9a06fff7918e55f3762f7fb9fe51", "filename": "gcc/ada/libgnat/system-vxworks7-aarch64-rtp-smp.ads", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64-rtp-smp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64-rtp-smp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64-rtp-smp.ads?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                        (VxWorks 7.x AARCH64 RTP)                         --\n+--                                                                          --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the VxWorks 7.x version of this package for AARCH64 RTP\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   pragma No_Elaboration_Code_All;\n+   --  Allow the use of that restriction in units that WITH this unit\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 1.0 / 60.0;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 64;\n+   Memory_Size  : constant := 2 ** 64;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  Ada priorities are mapped to VxWorks priorities using the following\n+   --  transformation: 255 - Ada Priority\n+\n+   --  Ada priorities are used as follows:\n+\n+   --  256        is reserved for the VxWorks kernel\n+   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n+   --  247        is a catchall default \"interrupt\" priority for signals,\n+   --             allowing higher priority than normal tasks, but lower than\n+   --             hardware priority levels.  Protected Object ceilings can\n+   --             override these values.\n+   --  246        is used by the Interrupt_Manager task\n+\n+   Max_Priority           : constant Positive := 245;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 245;\n+   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n+\n+   Default_Priority : constant Priority := 122;\n+\n+private\n+\n+   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n+\n+   pragma Linker_Options (\"--specs=vxworks7-rtp-base-link.spec\");\n+   --  Define the symbol wrs_rtp_base\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   Frontend_Exceptions       : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+\n+   Executable_Extension : constant String := \".vxe\";\n+\n+end System;"}, {"sha": "6e985b36ceed589a7155b78430904040b8f4feb5", "filename": "gcc/ada/libgnat/system-vxworks7-aarch64.ads", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-aarch64.ads?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -0,0 +1,168 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                      (VxWorks 7.x AARCH64 Kernel)                        --\n+--                                                                          --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the VxWorks 7.x version of this package for AARCH64 Kernel\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   pragma No_Elaboration_Code_All;\n+   --  Allow the use of that restriction in units that WITH this unit\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 1.0 / 60.0;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 64;\n+   Memory_Size  : constant := 2 ** 64;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  Ada priorities are mapped to VxWorks priorities using the following\n+   --  transformation: 255 - Ada Priority\n+\n+   --  Ada priorities are used as follows:\n+\n+   --  256        is reserved for the VxWorks kernel\n+   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n+   --  247        is a catchall default \"interrupt\" priority for signals,\n+   --             allowing higher priority than normal tasks, but lower than\n+   --             hardware priority levels.  Protected Object ceilings can\n+   --             override these values.\n+   --  246        is used by the Interrupt_Manager task\n+\n+   Max_Priority           : constant Positive := 245;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 245;\n+   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n+\n+   Default_Priority : constant Priority := 122;\n+\n+private\n+\n+   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n+   Command_Line_Args         : constant Boolean := False;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := True;\n+   Frontend_Exceptions       : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+\n+   Executable_Extension : constant String := \".out\";\n+\n+end System;"}, {"sha": "045b8580c8d8c1aafb6106dff3f33eb7091d6940", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -2533,16 +2533,11 @@ package body Sem_Ch8 is\n          Typ  : Entity_Id;\n \n       begin\n-         --  Nothing to do when the subprogram appears within an instance\n-\n-         if In_Instance then\n-            return;\n-\n          --  Nothing to do when the subprogram is not subject to SPARK_Mode On\n          --  because this check applies to SPARK code only.\n \n-         elsif not (Present (Prag)\n-                     and then Get_SPARK_Mode_From_Annotation (Prag) = On)\n+         if not (Present (Prag)\n+                  and then Get_SPARK_Mode_From_Annotation (Prag) = On)\n          then\n             return;\n "}, {"sha": "1f854945bd4b81e0a12b857620f27ea572a51de9", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -4242,7 +4242,7 @@ package body Sem_Elab is\n       --  Determine whether list List contains at least one suitable construct\n       --  for inclusion into an early call region.\n \n-      procedure Include (N : Node_Id; Curr : in out Node_Id);\n+      procedure Include (N : Node_Id; Curr : out Node_Id);\n       pragma Inline (Include);\n       --  Update the Curr and Start pointers to include arbitrary construct N\n       --  in the early call region. This routine raises ECR_Found.\n@@ -4556,7 +4556,7 @@ package body Sem_Elab is\n       -- Include --\n       -------------\n \n-      procedure Include (N : Node_Id; Curr : in out Node_Id) is\n+      procedure Include (N : Node_Id; Curr : out Node_Id) is\n       begin\n          Start := N;\n "}, {"sha": "136505f23d583de132084e0e0372a39140b9809c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -12890,8 +12890,9 @@ package body Sem_Util is\n                                               E_Package,\n                                               E_Procedure,\n                                               E_Protected_Type,\n-                                              E_Task_Type));\n-\n+                                              E_Task_Type)\n+                          or else\n+                        Is_Record_Type (Context_Id));\n          return Scope_Within_Or_Same (Context_Id, Ref_Id);\n       end if;\n    end Is_CCT_Instance;"}, {"sha": "a12b260850380a2f0d09c016bb945b8a115d01af", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -1536,9 +1536,10 @@ package Sem_Util is\n      (Ref_Id     : Entity_Id;\n       Context_Id : Entity_Id) return Boolean;\n    --  Subsidiary to the analysis of pragmas [Refined_]Depends and [Refined_]\n-   --  Global. Determine whether entity Ref_Id (which must represent either\n-   --  a protected type or a task type) denotes the current instance of a\n-   --  concurrent type. Context_Id denotes the associated context where the\n+   --  Global; also used when analyzing default expressions of protected and\n+   --  record components. Determine whether entity Ref_Id (which must represent\n+   --  either a protected type or a task type) denotes the current instance of\n+   --  a concurrent type. Context_Id denotes the associated context where the\n    --  pragma appears.\n \n    function Is_Child_Or_Sibling"}, {"sha": "a49a48f8bb3fc319043961599d633808cb6ae961", "filename": "gcc/ada/sigtramp-vxworks-target.inc", "status": "modified", "additions": 76, "deletions": 7, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsigtramp-vxworks-target.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Fsigtramp-vxworks-target.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-vxworks-target.inc?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                     Asm Implementation Include File                      *\n  *                                                                          *\n- *         Copyright (C) 2011-2015, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 2011-2017, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -93,13 +93,26 @@\n \n #define FUNCTION \"@function\"\n \n-#elif defined (__ARMEL__)\n+#elif defined (ARMEL)\n \n #define REGNO_G_REG_OFFSET(N) (N)\n \n+#define FUNCTION \"%function\"\n+\n+#ifdef __aarch64__\n+#define REGNO_PC_OFFSET  31  /* PC_REGNUM  */\n+#else\n #define REGNO_PC_OFFSET  15  /* PC_REGNUM  */\n+#endif\n \n-#define FUNCTION \"%function\"\n+/* Mapping of CFI Column, Gcc Regno, Signal context offset for _LP64\n+\n+   Name\t   CFI\t   GCC\t   SCTX\n+   G0-G30  0-30    0-30\n+   PC      31      31\n+   V0-V31  64-95   32-63\n+\n+*/\n \n #elif defined (i386)\n \n@@ -190,11 +203,14 @@ Not_implemented;\n \n #define CFA_REG 15\n \n-#elif defined (__ARMEL__)\n+#elif defined (ARMEL)\n \n+#ifdef __aarch64__\n+#define CFA_REG 19\n+#else\n /* Use r8 for ARM.  Any of r4-r8 should work.  */\n-\n #define CFA_REG 8\n+#endif\n \n #elif defined (i386)\n \n@@ -332,11 +348,12 @@ TCR(\"mtlr %r0\")\t\t\\\n TCR(\"blr\")\n #endif\n \n-#elif defined (__ARMEL__)\n+#elif defined (ARMEL)\n \n #define COMMON_CFI(REG) \\\n   \".cfi_offset \" S(REGNO_##REG) \",\" S(REG_SET_##REG)\n \n+#ifdef __aarch64__\n #define CFI_COMMON_REGS \\\n CR(\"# CFI for common registers\\n\") \\\n TCR(COMMON_CFI(G_REG_OFFSET(0)))  \\\n@@ -354,12 +371,63 @@ TCR(COMMON_CFI(G_REG_OFFSET(11)))  \\\n TCR(COMMON_CFI(G_REG_OFFSET(12)))  \\\n TCR(COMMON_CFI(G_REG_OFFSET(13)))  \\\n TCR(COMMON_CFI(G_REG_OFFSET(14))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(15))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(16))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(17))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(18))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(19))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(20))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(21))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(22))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(23))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(24))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(25))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(26))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(27))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(28))) \\\n+TCR(COMMON_CFI(G_REG_OFFSET(29))) \\\n TCR(COMMON_CFI(PC_OFFSET)) \\\n TCR(\".cfi_return_column \" S(REGNO_PC_OFFSET))\n+#else\n+#define CFI_COMMON_REGS \\\n+CR(\"# CFI for common registers\\n\") \\\n+TCR(COMMON_CFI(G_REG_OFFSET(0)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(1)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(2)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(3)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(4)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(5)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(6)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(7)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(8)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(9)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(10)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(11)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(12)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(13)))  \\\n+TCR(COMMON_CFI(G_REG_OFFSET(14))) \\\n+TCR(COMMON_CFI(PC_OFFSET)) \\\n+TCR(\".cfi_return_column \" S(REGNO_PC_OFFSET))\n+#endif\n \n /* Trampoline body block\n    ---------------------  */\n-\n+#ifdef __aarch64__\n+#define SIGTRAMP_BODY \\\n+CR(\"\") \\\n+TCR(\"# Push FP and LR on stack\") \\\n+TCR(\"stp x29, x30, [sp, #-16]!\") \\\n+TCR(\"# Push register used to hold the CFA on stack\") \\\n+TCR(\"str x\" S(CFA_REG) \", [sp, #-8]!\")  \\\n+TCR(\"# Set the CFA: x2 value\") \\\n+TCR(\"mov x\" S(CFA_REG) \", x2\") \\\n+TCR(\"# Call the handler\") \\\n+TCR(\"blr x3\") \\\n+TCR(\"# Release our frame and return (should never get here!).\") \\\n+TCR(\"ldr x\" S(CFA_REG) \" , [sp], 8\") \\\n+TCR(\"ldp x29, x30, [sp], 16\") \\\n+TCR(\"ret\")\n+#else\n #define SIGTRAMP_BODY \\\n CR(\"\") \\\n TCR(\"# Allocate frame and save the non-volatile\") \\\n@@ -375,6 +443,7 @@ TCR(\"sub\tfp, ip, #4\") \\\n TCR(\"blx\tr3\") \\\n TCR(\"# Restore our callee-saved items, release our frame and return\") \\\n TCR(\"ldmfd\tsp, {r\"S(CFA_REG)\", fp, sp, pc}\")\n+#endif\n \n #elif defined (i386)\n "}, {"sha": "3c43d1a5569aabcafaaffd17863bdfd1d9bd139a", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1554ed7ea429be444e74d5306be6692f517acf02/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=1554ed7ea429be444e74d5306be6692f517acf02", "patch": "@@ -309,7 +309,7 @@ __gnat_backtrace (void **array,\n #define USE_GCC_UNWINDER\n #define PC_ADJUST -2\n \n-#if (_WRS_VXWORKS_MAJOR >= 7)\n+#if ((_WRS_VXWORKS_MAJOR >= 7) && (_VX_CPU != ARMARCH8A))\n #define USING_ARM_UNWINDING 1\n #endif\n "}]}