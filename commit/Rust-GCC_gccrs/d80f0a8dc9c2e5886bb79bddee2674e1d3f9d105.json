{"sha": "d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwZjBhOGRjOWMyZTU4ODZiYjc5YmRkZWUyNjc0ZTFkM2Y5ZDEwNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-22T11:28:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-22T11:28:16Z"}, "message": "aarch64: Fix aarch64_expand_subvti constant handling [PR93335]\n\nThe two patterns that call aarch64_expand_subvti ensure that {low,high}_in1\nis a register, while {low,high}_in2 can be a register or immediate.\nsubdi3_compare1_imm uses the aarch64_plus_immediate predicate for its last\ntwo operands (the value and negated value), but aarch64_expand_subvti calls\nit whenever low_in2 is a CONST_INT, which leads to ICEs during vregs pass,\nas the emitted insn is not recognized as valid subdi3_compare1_imm.\nThe following patch fixes that by only using subdi3_compare1_imm if it is ok\nto do so, and otherwise force the constant into register and use the\nnon-immediate version - subdi3_compare1.\nFurthermore, previously the code was calling force_reg on high_in2 only if\nlow_in2 is CONST_INT, on the (reasonable) assumption is that only if low_in2\nis a CONST_INT, high_in2 can be non-REG, but with the above changes even in\nthe else we might have CONST_INT and force_reg doesn't do anything if the\noperand is already a REG, so this patch calls it unconditionally.\n\n2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93335\n\t* config/aarch64/aarch64.c (aarch64_expand_subvti): Only use\n\tgen_subdi3_compare1_imm if low_in2 satisfies aarch64_plus_immediate\n\tpredicate, not whenever it is CONST_INT.  Otherwise, force_reg it.\n\tCall force_reg on high_in2 unconditionally.\n\n\t* gcc.c-torture/compile/pr93335.c: New test.", "tree": {"sha": "6c92349efce6f092682bb5d93bc5b8d08841171d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c92349efce6f092682bb5d93bc5b8d08841171d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f32f9cf13f99f6295591927950aaf98aa8dba91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f32f9cf13f99f6295591927950aaf98aa8dba91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f32f9cf13f99f6295591927950aaf98aa8dba91"}], "stats": {"total": 122, "additions": 116, "deletions": 6}, "files": [{"sha": "e2111a00ce4c40849d62082ca9cb35360fc5c448", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "patch": "@@ -1,3 +1,11 @@\n+2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93335\n+\t* config/aarch64/aarch64.c (aarch64_expand_subvti): Only use\n+\tgen_subdi3_compare1_imm if low_in2 satisfies aarch64_plus_immediate\n+\tpredicate, not whenever it is CONST_INT.  Otherwise, force_reg it.\n+\tCall force_reg on high_in2 unconditionally.\n+\n 2020-01-22  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/92924"}, {"sha": "3437fff6811a3c68c3f30454ee00953ea702b68a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "patch": "@@ -20202,14 +20202,15 @@ aarch64_expand_subvti (rtx op0, rtx low_dest, rtx low_in1,\n     }\n   else\n     {\n-      if (CONST_INT_P (low_in2))\n+      if (aarch64_plus_immediate (low_in2, DImode))\n+\temit_insn (gen_subdi3_compare1_imm (low_dest, low_in1, low_in2,\n+\t\t\t\t\t    GEN_INT (-INTVAL (low_in2))));\n+      else\n \t{\n-\t  high_in2 = force_reg (DImode, high_in2);\n-\t  emit_insn (gen_subdi3_compare1_imm (low_dest, low_in1, low_in2,\n-\t\t\t\t\t      GEN_INT (-INTVAL (low_in2))));\n+\t  low_in2 = force_reg (DImode, low_in2);\n+\t  emit_insn (gen_subdi3_compare1 (low_dest, low_in1, low_in2));\n \t}\n-      else\n-\temit_insn (gen_subdi3_compare1 (low_dest, low_in1, low_in2));\n+      high_in2 = force_reg (DImode, high_in2);\n \n       if (unsigned_p)\n \temit_insn (gen_usubdi3_carryinC (high_dest, high_in1, high_in2));"}, {"sha": "a2d70f5829aa6e29015acb8721a6f6e600245b85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "patch": "@@ -1,5 +1,8 @@\n 2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93335\n+\t* gcc.c-torture/compile/pr93335.c: New test.\n+\n \tPR target/91298\n \t* gcc.target/i386/pr91298-1.c: New test.\n \t* gcc.target/i386/pr91298-2.c: New test."}, {"sha": "c6e984cc6febee2ff8574e73b39051e94de780c3", "filename": "gcc/testsuite/gcc.c-torture/compile/pr93335.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr93335.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr93335.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr93335.c?ref=d80f0a8dc9c2e5886bb79bddee2674e1d3f9d105", "patch": "@@ -0,0 +1,98 @@\n+/* PR target/93335 */\n+/* { dg-do compile { target int128 } } */\n+\n+int\n+f1 (unsigned int x)\n+{\n+  return __builtin_sub_overflow_p (x, 4096, (unsigned __int128) 0);\n+}\n+\n+int\n+f2 (unsigned int x)\n+{\n+  return __builtin_sub_overflow_p (x, 4097, (unsigned __int128) 0);\n+}\n+\n+int\n+f3 (int x)\n+{\n+  return __builtin_sub_overflow_p (x, 4096, (__int128) 0);\n+}\n+\n+int\n+f4 (int x)\n+{\n+  return __builtin_sub_overflow_p (x, 4097, (__int128) 0);\n+}\n+\n+int\n+f5 (unsigned int x)\n+{\n+  return __builtin_sub_overflow_p (x, -4096, (unsigned __int128) 0);\n+}\n+\n+int\n+f6 (unsigned int x)\n+{\n+  return __builtin_sub_overflow_p (x, -4097, (unsigned __int128) 0);\n+}\n+\n+int\n+f7 (int x)\n+{\n+  return __builtin_sub_overflow_p (x, -4096, (__int128) 0);\n+}\n+\n+int\n+f8 (int x)\n+{\n+  return __builtin_sub_overflow_p (x, -4097, (__int128) 0);\n+}\n+\n+int\n+f9 (unsigned int x)\n+{\n+  return __builtin_add_overflow_p (x, 4096, (unsigned __int128) 0);\n+}\n+\n+int\n+f10 (unsigned int x)\n+{\n+  return __builtin_add_overflow_p (x, 4097, (unsigned __int128) 0);\n+}\n+\n+int\n+f11 (int x)\n+{\n+  return __builtin_add_overflow_p (x, 4096, (__int128) 0);\n+}\n+\n+int\n+f12 (int x)\n+{\n+  return __builtin_add_overflow_p (x, 4097, (__int128) 0);\n+}\n+\n+int\n+f13 (unsigned int x)\n+{\n+  return __builtin_add_overflow_p (x, -4096, (unsigned __int128) 0);\n+}\n+\n+int\n+f14 (unsigned int x)\n+{\n+  return __builtin_add_overflow_p (x, -4097, (unsigned __int128) 0);\n+}\n+\n+int\n+f15 (int x)\n+{\n+  return __builtin_add_overflow_p (x, -4096, (__int128) 0);\n+}\n+\n+int\n+f16 (int x)\n+{\n+  return __builtin_add_overflow_p (x, -4097, (__int128) 0);\n+}"}]}