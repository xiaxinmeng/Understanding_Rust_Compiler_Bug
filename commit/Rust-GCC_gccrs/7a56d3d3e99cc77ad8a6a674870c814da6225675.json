{"sha": "7a56d3d3e99cc77ad8a6a674870c814da6225675", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E1NmQzZDNlOTljYzc3YWQ4YTZhNjc0ODcwYzgxNGRhNjIyNTY3NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-08T10:52:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-08T13:09:18Z"}, "message": "tree-optimization/100923 - fix alias-ref construction wrt availability\n\nThis PR shows that building an ao_ref from value-numbers is prone to\nexpose bogus contextual alias info to the oracle.  The following makes\nsure to construct ao_refs from SSA names available at the program point\nonly.\n\nOn the way it modifies the awkward valueize_refs[_1] API.\n\n2021-06-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100923\n\t* tree-ssa-sccvn.c (valueize_refs_1): Take a pointer to\n\tthe operand vector to be valueized.\n\t(valueize_refs): Likewise.\n\t(valueize_shared_reference_ops_from_ref): Adjust.\n\t(valueize_shared_reference_ops_from_call): Likewise.\n\t(vn_reference_lookup_3): Likewise.\n\t(vn_reference_lookup_pieces): Likewise.  Re-valueize\n\twith honoring availability when we are about to create\n\tthe ao_ref and valueized before.\n\t(vn_reference_lookup): Likewise.\n\t(vn_reference_insert_pieces): Adjust.\n\n\t* gcc.dg/torture/pr100923.c: New testcase.", "tree": {"sha": "c152bfdd65cfe5dcb2b61a5d5b46cefaffc3e95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c152bfdd65cfe5dcb2b61a5d5b46cefaffc3e95d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a56d3d3e99cc77ad8a6a674870c814da6225675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a56d3d3e99cc77ad8a6a674870c814da6225675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a56d3d3e99cc77ad8a6a674870c814da6225675", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a56d3d3e99cc77ad8a6a674870c814da6225675/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd2cdb74e26f68a4e9d51e74ace60326c9950d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd2cdb74e26f68a4e9d51e74ace60326c9950d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd2cdb74e26f68a4e9d51e74ace60326c9950d1"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "05a6341fea333b5842bf5bbcee65ba8b0cbca6fb", "filename": "gcc/testsuite/gcc.dg/torture/pr100923.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a56d3d3e99cc77ad8a6a674870c814da6225675/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100923.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a56d3d3e99cc77ad8a6a674870c814da6225675/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100923.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100923.c?ref=7a56d3d3e99cc77ad8a6a674870c814da6225675", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+\n+int a = 1, b, c, *d = &a, *e = &a, f;\n+void g(int h) {}\n+void k(int *l)\n+{\n+  int ***j;\n+  if (c)\n+    {\n+      *j = &l;\n+      ***j;\n+    }\n+  g(*l);\n+  *e = f;\n+  if (*l)\n+    {\n+      int i = b / a;\n+      a = i;\n+    }\n+}\n+int main()\n+{\n+  k(d);\n+  return 0;\n+}"}, {"sha": "64e3a707f5cfa7d3ae5cf45f2321f8a61e9c2413", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a56d3d3e99cc77ad8a6a674870c814da6225675/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a56d3d3e99cc77ad8a6a674870c814da6225675/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=7a56d3d3e99cc77ad8a6a674870c814da6225675", "patch": "@@ -553,7 +553,7 @@ vuse_ssa_val (tree x)\n   return x;\n }\n \n-/* Similar to the above but used as callback for walk_non_aliases_vuses\n+/* Similar to the above but used as callback for walk_non_aliased_vuses\n    and thus should stop at unvisited VUSE to not walk across region\n    boundaries.  */\n \n@@ -1579,16 +1579,16 @@ contains_storage_order_barrier_p (vec<vn_reference_op_s> ops)\n    the vector passed in is returned.  *VALUEIZED_ANYTHING will specify\n    whether any operands were valueized.  */\n \n-static vec<vn_reference_op_s> \n-valueize_refs_1 (vec<vn_reference_op_s> orig, bool *valueized_anything,\n+static void\n+valueize_refs_1 (vec<vn_reference_op_s> *orig, bool *valueized_anything,\n \t\t bool with_avail = false)\n {\n   vn_reference_op_t vro;\n   unsigned int i;\n \n   *valueized_anything = false;\n \n-  FOR_EACH_VEC_ELT (orig, i, vro)\n+  FOR_EACH_VEC_ELT (*orig, i, vro)\n     {\n       if (vro->opcode == SSA_NAME\n \t  || (vro->op0 && TREE_CODE (vro->op0) == SSA_NAME))\n@@ -1627,16 +1627,16 @@ valueize_refs_1 (vec<vn_reference_op_s> orig, bool *valueized_anything,\n       if (i > 0\n \t  && vro->op0\n \t  && TREE_CODE (vro->op0) == ADDR_EXPR\n-\t  && orig[i - 1].opcode == MEM_REF)\n+\t  && (*orig)[i - 1].opcode == MEM_REF)\n \t{\n-\t  if (vn_reference_fold_indirect (&orig, &i))\n+\t  if (vn_reference_fold_indirect (orig, &i))\n \t    *valueized_anything = true;\n \t}\n       else if (i > 0\n \t       && vro->opcode == SSA_NAME\n-\t       && orig[i - 1].opcode == MEM_REF)\n+\t       && (*orig)[i - 1].opcode == MEM_REF)\n \t{\n-\t  if (vn_reference_maybe_forwprop_address (&orig, &i))\n+\t  if (vn_reference_maybe_forwprop_address (orig, &i))\n \t    *valueized_anything = true;\n \t}\n       /* If it transforms a non-constant ARRAY_REF into a constant\n@@ -1654,15 +1654,13 @@ valueize_refs_1 (vec<vn_reference_op_s> orig, bool *valueized_anything,\n \t  off.to_shwi (&vro->off);\n \t}\n     }\n-\n-  return orig;\n }\n \n-static vec<vn_reference_op_s> \n-valueize_refs (vec<vn_reference_op_s> orig)\n+static void\n+valueize_refs (vec<vn_reference_op_s> *orig)\n {\n   bool tem;\n-  return valueize_refs_1 (orig, &tem);\n+  valueize_refs_1 (orig, &tem);\n }\n \n static vec<vn_reference_op_s> shared_lookup_references;\n@@ -1679,8 +1677,7 @@ valueize_shared_reference_ops_from_ref (tree ref, bool *valueized_anything)\n     return vNULL;\n   shared_lookup_references.truncate (0);\n   copy_reference_ops_from_ref (ref, &shared_lookup_references);\n-  shared_lookup_references = valueize_refs_1 (shared_lookup_references,\n-\t\t\t\t\t      valueized_anything);\n+  valueize_refs_1 (&shared_lookup_references, valueized_anything);\n   return shared_lookup_references;\n }\n \n@@ -1695,7 +1692,7 @@ valueize_shared_reference_ops_from_call (gcall *call)\n     return vNULL;\n   shared_lookup_references.truncate (0);\n   copy_reference_ops_from_call (call, &shared_lookup_references);\n-  shared_lookup_references = valueize_refs (shared_lookup_references);\n+  valueize_refs (&shared_lookup_references);\n   return shared_lookup_references;\n }\n \n@@ -2546,7 +2543,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       if (*disambiguate_only <= TR_VALUEIZE_AND_DISAMBIGUATE)\n \t{\n \t  copy_reference_ops_from_ref (lhs, &lhs_ops);\n-\t  lhs_ops = valueize_refs_1 (lhs_ops, &valueized_anything, true);\n+\t  valueize_refs_1 (&lhs_ops, &valueized_anything, true);\n \t}\n       vn_context_bb = saved_rpo_bb;\n       ao_ref_init (&lhs_ref, lhs);\n@@ -3225,7 +3222,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \tvr->operands.truncate (i + 1 + rhs.length ());\n       FOR_EACH_VEC_ELT (rhs, j, vro)\n \tvr->operands[i + 1 + j] = *vro;\n-      vr->operands = valueize_refs (vr->operands);\n+      valueize_refs (&vr->operands);\n       if (old == shared_lookup_references)\n \tshared_lookup_references = vr->operands;\n       vr->hashcode = vn_reference_compute_hash (vr);\n@@ -3526,8 +3523,9 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set,\n \t  operands.address (),\n \t  sizeof (vn_reference_op_s)\n \t  * operands.length ());\n-  vr1.operands = operands = shared_lookup_references\n-    = valueize_refs (shared_lookup_references);\n+  bool valueized_p;\n+  valueize_refs_1 (&shared_lookup_references, &valueized_p);\n+  vr1.operands = shared_lookup_references;\n   vr1.type = type;\n   vr1.set = set;\n   vr1.base_set = base_set;\n@@ -3543,13 +3541,31 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set,\n       ao_ref r;\n       unsigned limit = param_sccvn_max_alias_queries_per_access;\n       vn_walk_cb_data data (&vr1, NULL_TREE, NULL, kind, true, NULL_TREE);\n+      vec<vn_reference_op_s> ops_for_ref;\n+      if (!valueized_p)\n+\tops_for_ref = vr1.operands;\n+      else\n+\t{\n+\t  /* For ao_ref_from_mem we have to ensure only available SSA names\n+\t     end up in base and the only convenient way to make this work\n+\t     for PRE is to re-valueize with that in mind.  */\n+\t  ops_for_ref.create (operands.length ());\n+\t  ops_for_ref.quick_grow (operands.length ());\n+\t  memcpy (ops_for_ref.address (),\n+\t\t  operands.address (),\n+\t\t  sizeof (vn_reference_op_s)\n+\t\t  * operands.length ());\n+\t  valueize_refs_1 (&ops_for_ref, &valueized_p, true);\n+\t}\n       if (ao_ref_init_from_vn_reference (&r, set, base_set, type,\n-\t\t\t\t\t vr1.operands))\n+\t\t\t\t\t ops_for_ref))\n \t*vnresult\n \t  = ((vn_reference_t)\n \t     walk_non_aliased_vuses (&r, vr1.vuse, true, vn_reference_lookup_2,\n \t\t\t\t     vn_reference_lookup_3, vuse_valueize,\n \t\t\t\t     limit, &data));\n+      if (ops_for_ref != shared_lookup_references)\n+\tops_for_ref.release ();\n       gcc_checking_assert (vr1.operands == shared_lookup_references);\n     }\n \n@@ -3578,14 +3594,14 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n {\n   vec<vn_reference_op_s> operands;\n   struct vn_reference_s vr1;\n-  bool valuezied_anything;\n+  bool valueized_anything;\n \n   if (vnresult)\n     *vnresult = NULL;\n \n   vr1.vuse = vuse_ssa_val (vuse);\n   vr1.operands = operands\n-    = valueize_shared_reference_ops_from_ref (op, &valuezied_anything);\n+    = valueize_shared_reference_ops_from_ref (op, &valueized_anything);\n   vr1.type = TREE_TYPE (op);\n   ao_ref op_ref;\n   ao_ref_init (&op_ref, op);\n@@ -3601,11 +3617,18 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n       vn_reference_t wvnresult;\n       ao_ref r;\n       unsigned limit = param_sccvn_max_alias_queries_per_access;\n+      auto_vec<vn_reference_op_s> ops_for_ref;\n+      if (valueized_anything)\n+\t{\n+\t  copy_reference_ops_from_ref (op, &ops_for_ref);\n+\t  bool tem;\n+\t  valueize_refs_1 (&ops_for_ref, &tem, true);\n+\t}\n       /* Make sure to use a valueized reference if we valueized anything.\n          Otherwise preserve the full reference for advanced TBAA.  */\n-      if (!valuezied_anything\n+      if (!valueized_anything\n \t  || !ao_ref_init_from_vn_reference (&r, vr1.set, vr1.base_set,\n-\t\t\t\t\t     vr1.type, vr1.operands))\n+\t\t\t\t\t     vr1.type, ops_for_ref))\n \tao_ref_init (&r, op);\n       vn_walk_cb_data data (&vr1, r.ref ? NULL_TREE : op,\n \t\t\t    last_vuse_ptr, kind, tbaa_p, mask);\n@@ -3733,7 +3756,8 @@ vn_reference_insert_pieces (tree vuse, alias_set_type set,\n   vr1 = XOBNEW (&vn_tables_obstack, vn_reference_s);\n   vr1->value_id = value_id;\n   vr1->vuse = vuse_ssa_val (vuse);\n-  vr1->operands = valueize_refs (operands);\n+  vr1->operands = operands;\n+  valueize_refs (&vr1->operands);\n   vr1->type = type;\n   vr1->punned = false;\n   vr1->set = set;"}]}