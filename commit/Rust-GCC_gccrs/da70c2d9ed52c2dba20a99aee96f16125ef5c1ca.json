{"sha": "da70c2d9ed52c2dba20a99aee96f16125ef5c1ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3MGMyZDllZDUyYzJkYmEyMGE5OWFlZTk2ZjE2MTI1ZWY1YzFjYQ==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-05-07T20:45:21Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-05-07T20:45:21Z"}, "message": "Jdwp.java (notify): Rewrite to call new array-based method.\n\n        * gnu/classpath/jdwp/Jdwp.java (notify): Rewrite to call\n        new array-based method.\n        (notify): New function.\n        (sendEvent): Rewrite to use sendEvents.\n        (sendEvents): New method.\n        * gnu/classpath/jdwp/event/Event.java (toPacket): Make static.\n        Change parameters to use arrays for events and requests.\n        Add suspendPolicy parameter.\n        Move per-event data transformation to...\n        (_toData): ... here.\n        * gnu/classpath/jdwp/transport/JdwpConnection.java\n        (sendEvent): Renamed to ...\n        (sendEvents): ... this.\n        Change parameters to use arrays for events and requests.\n        Add suspendPolicy parameter.\n\nFrom-SVN: r124514", "tree": {"sha": "f52cae977a7fcf03eb025e767d05500d7b199303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f52cae977a7fcf03eb025e767d05500d7b199303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3cdfb88d7aa97ab1959451d886c034255011ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3cdfb88d7aa97ab1959451d886c034255011ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3cdfb88d7aa97ab1959451d886c034255011ceb"}], "stats": {"total": 154, "additions": 132, "deletions": 22}, "files": [{"sha": "526b254ca2a8281e4a5ac18052f5efb402aa53c4", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=da70c2d9ed52c2dba20a99aee96f16125ef5c1ca", "patch": "@@ -1,3 +1,21 @@\n+2007-05-07 Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/Jdwp.java (notify): Rewrite to call\n+\tnew array-based method.\n+\t(notify): New function.\n+\t(sendEvent): Rewrite to use sendEvents.\n+\t(sendEvents): New method.\n+\t* gnu/classpath/jdwp/event/Event.java (toPacket): Make static.\n+\tChange parameters to use arrays for events and requests.\n+\tAdd suspendPolicy parameter.\n+\tMove per-event data transformation to...\n+\t(_toData): ... here.\n+\t* gnu/classpath/jdwp/transport/JdwpConnection.java\n+\t(sendEvent): Renamed to ...\n+\t(sendEvents): ... this.\n+\tChange parameters to use arrays for events and requests.\n+\tAdd suspendPolicy parameter.\n+\n 2007-05-03  Andrew Haley  <aph@redhat.com>\n \n \t* gnu/javax/management/Server.java (Server): Record the delegate."}, {"sha": "1d2329255cb318728b1870cb688aef52d28daf5d", "filename": "libjava/classpath/gnu/classpath/jdwp/Jdwp.java", "status": "modified", "additions": 77, "deletions": 4, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwp.java?ref=da70c2d9ed52c2dba20a99aee96f16125ef5c1ca", "patch": "@@ -51,6 +51,7 @@\n \n import java.io.IOException;\n import java.security.AccessController;\n+import java.util.ArrayList;\n import java.util.HashMap;\n \n /**\n@@ -207,7 +208,6 @@ public void shutdown ()\n    * The event is filtered through the event manager before being\n    * sent.\n    *\n-   * FIXME: Probably need logic to send multiple (different) events\n    * @param event the event to report\n    */\n   public static void notify(Event event)\n@@ -234,6 +234,62 @@ public static void notify(Event event)\n       }\n   }\n   \n+  /**\n+   * Notify the debugger of \"co-located\" events. This method should\n+   * not be called if debugging is not active (but it would not\n+   * cause any harm). Places where event notifications occur\n+   * should check isDebugging before doing anything.\n+   *\n+   * The events are filtered through the event manager before being\n+   * sent.\n+   *\n+   * @param events the events to report\n+   */\n+  public static void notify(Event[] events)\n+  {\n+    Jdwp jdwp = getDefault();\n+    \n+    if (jdwp != null)\n+      {\n+\tbyte suspendPolicy = JdwpConstants.SuspendPolicy.NONE;\n+\tEventManager em = EventManager.getDefault();\n+\tArrayList allEvents = new ArrayList ();\n+\tArrayList allRequests = new ArrayList ();\n+\tfor (int i = 0; i < events.length; ++i)\n+\t  {\n+\t    EventRequest[] r = em.getEventRequests(events[i]);\n+\t    for (int j = 0; j < r.length; ++j)\n+\t      {\n+\t\t/* This is hacky, but it's not clear whether this\n+\t\t   can really happen, and if it does, what should\n+\t\t   occur. */\n+\t\tallEvents.add (events[i]);\n+\t\tallRequests.add (r[j]);\n+\n+\t\t// Perhaps this is overkill?\n+\t\tif (r[j].getSuspendPolicy() > suspendPolicy)\n+\t\t  suspendPolicy = r[j].getSuspendPolicy();\n+\t      }\n+\t  }\n+\n+\ttry\n+\t  {\n+\t    Event[] e = new Event[allEvents.size()];\n+\t    allEvents.toArray(e);\n+\t    EventRequest[] r = new EventRequest[allRequests.size()];\n+\t    allRequests.toArray(r);\n+\t    sendEvents(r, e, suspendPolicy);\n+\t    jdwp._enforceSuspendPolicy(suspendPolicy);\n+\t  }\n+\tcatch (Exception e)\n+\t  {\n+\t    /* Really not much we can do. For now, just print out\n+\t       a warning to the user. */\n+\t    System.out.println (\"Jdwp.notify: caught exception: \" + e);\n+\t  }\n+      }\n+  }\n+\n   /**\n    * Sends the event to the debugger.\n    *\n@@ -246,13 +302,30 @@ public static void notify(Event event)\n   public static void sendEvent (EventRequest request, Event event)\n       throws IOException\n   {\n-    Jdwp jdwp = getDefault ();\n+    sendEvents (new EventRequest[] { request }, new Event[] { event },\n+\t\trequest.getSuspendPolicy());\n+  }\n+\n+  /**\n+   * Sends the events to the debugger.\n+   *\n+   * This method bypasses the event manager's filtering.\n+   *\n+   * @param  requests  list of debugger requests for the events\n+   * @param  events    the events to send\n+   * @param  suspendPolicy the suspendPolicy enforced by the VM\n+   * @throws IOException if a communications failure occurs\n+   */\n+  public static void sendEvents (EventRequest[] requests, Event[] events,\n+\t\t\t\t byte suspendPolicy)\n+    throws IOException\n+  {\n+    Jdwp jdwp = getDefault();\n     if (jdwp != null)\n       {\n-\t// !! May need to implement send queue?\n \tsynchronized (jdwp._connection)\n \t  {\n-\t    jdwp._connection.sendEvent (request, event);\n+\t    jdwp._connection.sendEvents (requests, events, suspendPolicy);\n \t  }\n       }\n   }"}, {"sha": "c89b25cb93b3700f699615d2dff123d5cccdc23d", "filename": "libjava/classpath/gnu/classpath/jdwp/event/Event.java", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEvent.java?ref=da70c2d9ed52c2dba20a99aee96f16125ef5c1ca", "patch": "@@ -1,5 +1,5 @@\n /* Event.java -- a base class for all event types\n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -135,25 +135,30 @@ protected abstract void _writeData (DataOutputStream outStream)\n   public abstract Object getParameter (int type);\n \n   /**\n-   * Converts this event into to a JDWP packet\n+   * Converts the events into to a single JDWP Event.COMPOSITE packet\n    *\n    * @param dos     the stream to which to write data\n-   * @param request the request the wanted this notification\n+   * @param events  the events to package into the packet\n+   * @param requests the corresponding event requests\n+   * @param suspendPolicy the suspend policy enforced by the VM\n    * @returns a <code>JdwpPacket</code> of the events\n    */\n-  public JdwpPacket toPacket (DataOutputStream dos, EventRequest request)\n+  public static JdwpPacket toPacket (DataOutputStream dos,\n+\t\t\t\t     Event[] events,\n+\t\t\t\t     EventRequest[] requests,\n+\t\t\t\t     byte suspendPolicy)\n   {\n     JdwpPacket pkt;\n     try\n       {\n-\tdos.writeByte (request.getSuspendPolicy ());\n-\tdos.writeInt (1);\n-\tdos.writeByte (_eventKind);\n-\tdos.writeInt (request.getId ());\n-\t_writeData (dos);\n-\n-\tpkt = new JdwpCommandPacket (JdwpConstants.CommandSet.Event.CS_VALUE,\n-\t\t\t\t     JdwpConstants.CommandSet.Event.COMPOSITE);\n+\tdos.writeByte (suspendPolicy);\n+\tdos.writeInt (events.length);\n+\tfor (int i = 0; i < events.length; ++i)\n+\t  _toData (dos, events[i], requests[i]);\n+\n+\tpkt\n+\t  = new JdwpCommandPacket (JdwpConstants.CommandSet.Event.CS_VALUE,\n+\t\t\t\t   JdwpConstants.CommandSet.Event.COMPOSITE);\n       }\n     catch (IOException ioe)\n       {\n@@ -162,4 +167,14 @@ public JdwpPacket toPacket (DataOutputStream dos, EventRequest request)\n \n     return pkt;\n   }\n+\n+  // Helper function for toPacket\n+  private static void _toData (DataOutputStream dos, Event event,\n+\t\t\t       EventRequest request)\n+    throws IOException\n+  {\n+    dos.writeByte (event._eventKind);\n+    dos.writeInt (request.getId ());\n+    event._writeData (dos);\n+  }\n }"}, {"sha": "44158aa26ecbfdcf0460c0c2370426b9a8e62c29", "filename": "libjava/classpath/gnu/classpath/jdwp/transport/JdwpConnection.java", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da70c2d9ed52c2dba20a99aee96f16125ef5c1ca/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpConnection.java?ref=da70c2d9ed52c2dba20a99aee96f16125ef5c1ca", "patch": "@@ -1,5 +1,5 @@\n /* JdwpConnection.java -- A JDWP-speaking connection\n-   Copyright (C) 2005, 2006 Free Software Foundation\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -267,21 +267,25 @@ public void sendPacket (JdwpPacket pkt)\n   }\n \n   /**\n-   * Send an event notification to the debugger\n+   * Send an event notification to the debugger. Note that this\n+   * method will only send out one notification: all the events\n+   * are passed in a single Event.COMPOSITE packet.\n    *\n-   * @param request  the debugger request that wanted this event\n-   * @param event    the event\n+   * @param requests  debugger requests for events\n+   * @param events    the events to send\n+   * @param suspendPolicy  the suspend policy enforced by the VM\n    * @throws IOException\n    */\n-  public void sendEvent (EventRequest request, Event event)\n+  public void sendEvents(EventRequest[] requests, Event[] events,\n+\t\t\t byte suspendPolicy)\n     throws IOException\n   {\n     JdwpPacket pkt;\n \n     synchronized (_bytes)\n       {\n \t_bytes.reset ();\n-\tpkt = event.toPacket (_doStream, request);\n+\tpkt = Event.toPacket (_doStream, events, requests, suspendPolicy);\n \tpkt.setData (_bytes.toByteArray ());\n       }\n "}]}