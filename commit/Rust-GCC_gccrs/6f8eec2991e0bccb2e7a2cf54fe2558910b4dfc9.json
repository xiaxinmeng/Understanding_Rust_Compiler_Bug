{"sha": "6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4ZWVjMjk5MWUwYmNjYjJlN2EyY2Y1NGZlMjU1ODkxMGI0ZGZjOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@arc.com", "date": "2007-02-06T23:12:35Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-02-06T23:12:35Z"}, "message": "re PR target/29746 (gcc fails to bootstrap on sh4-*-linux-gnu)\n\n\tPR target/29746\n\t* config/sh/sh.c (expand_cbranchdi4): Use scratch register\n\tproperly.\n\t(sh_initialize_trampoline): Add parentheses to avoid a warning.\n\n\nCo-Authored-By: Kaz Kojima <kkojima@gcc.gnu.org>\n\nFrom-SVN: r121671", "tree": {"sha": "755e9a9ac2a7c627c1c4dbc20736b6328b108362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/755e9a9ac2a7c627c1c4dbc20736b6328b108362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9/comments", "author": null, "committer": null, "parents": [{"sha": "89f8f30f3565328a2805adafd22e05219b56d562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f8f30f3565328a2805adafd22e05219b56d562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f8f30f3565328a2805adafd22e05219b56d562"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "b5cc0a365e2fa72a64a227155176706aa21b5676", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9", "patch": "@@ -1,3 +1,11 @@\n+2007-02-06  J\"orn Rennecke  <joern.rennecke@arc.com>\n+\t    Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/29746\n+\t* config/sh/sh.c (expand_cbranchdi4): Use scratch register\n+\tproperly.\n+\t(sh_initialize_trampoline): Add parentheses to avoid a warning.\n+\n 2007-02-06  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* doc/loop.texi: Document possibility not to perform disambiguation"}, {"sha": "3e71e1151082e9f1f5c5ed7c9c2ea0e72b5ba73a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6f8eec2991e0bccb2e7a2cf54fe2558910b4dfc9", "patch": "@@ -1488,6 +1488,7 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n   int num_branches;\n   int prob, rev_prob;\n   int msw_taken_prob = -1, msw_skip_prob = -1, lsw_taken_prob = -1;\n+  rtx scratch = operands[4];\n \n   comparison = prepare_cbranch_operands (operands, DImode, comparison);\n   op1h = gen_highpart_mode (SImode, DImode, operands[1]);\n@@ -1539,7 +1540,7 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n \t  return true;\n \t}\n       msw_taken = NE;\n-      lsw_taken_prob = prob;\n+      msw_taken_prob = prob;\n       lsw_taken = NE;\n       lsw_taken_prob = 0;\n       break;\n@@ -1611,6 +1612,13 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n   operands[1] = op1h;\n   operands[2] = op2h;\n   operands[4] = NULL_RTX;\n+  if (reload_completed\n+      && ! arith_reg_or_0_operand (op2h, SImode) && true_regnum (op1h)\n+      && (msw_taken != CODE_FOR_nothing || msw_skip != CODE_FOR_nothing))\n+    {\n+      emit_move_insn (scratch, operands[2]);\n+      operands[2] = scratch;\n+    }\n   if (msw_taken != CODE_FOR_nothing)\n     expand_cbranchsi4 (operands, msw_taken, msw_taken_prob);\n   if (msw_skip != CODE_FOR_nothing)\n@@ -1624,7 +1632,12 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n   operands[1] = op1l;\n   operands[2] = op2l;\n   if (lsw_taken != CODE_FOR_nothing)\n-    expand_cbranchsi4 (operands, lsw_taken, lsw_taken_prob);\n+    {\n+      if (reload_completed\n+\t  && ! arith_reg_or_0_operand (op2l, SImode) && true_regnum (op1l))\n+\toperands[4] = scratch;\n+      expand_cbranchsi4 (operands, lsw_taken, lsw_taken_prob);\n+    }\n   if (msw_skip != CODE_FOR_nothing)\n     emit_label (skip_label);\n   return true;\n@@ -9600,7 +9613,7 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n   if (TARGET_HARVARD)\n     {\n       if (!TARGET_INLINE_IC_INVALIDATE\n-\t  || !(TARGET_SH4A_ARCH || TARGET_SH4_300) && TARGET_USERMODE)\n+\t  || (!(TARGET_SH4A_ARCH || TARGET_SH4_300) && TARGET_USERMODE))\n \temit_library_call (function_symbol (NULL, \"__ic_invalidate\",\n \t\t\t\t\t    FUNCTION_ORDINARY),\n \t\t\t   0, VOIDmode, 1, tramp, SImode);"}]}