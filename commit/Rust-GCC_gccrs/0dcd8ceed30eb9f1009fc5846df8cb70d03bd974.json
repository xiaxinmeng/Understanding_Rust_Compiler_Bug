{"sha": "0dcd8ceed30eb9f1009fc5846df8cb70d03bd974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRjZDhjZWVkMzBlYjlmMTAwOWZjNTg0NmRmOGNiNzBkMDNiZDk3NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T21:22:25Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T21:22:25Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r786", "tree": {"sha": "ca93e2d2db112a5f3f4c6dab11ca1484e44f9847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca93e2d2db112a5f3f4c6dab11ca1484e44f9847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dcd8ceed30eb9f1009fc5846df8cb70d03bd974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dcd8ceed30eb9f1009fc5846df8cb70d03bd974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dcd8ceed30eb9f1009fc5846df8cb70d03bd974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dcd8ceed30eb9f1009fc5846df8cb70d03bd974/comments", "author": null, "committer": null, "parents": [{"sha": "6c94ce6718dda7c33126da4b11b9800d8399714e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c94ce6718dda7c33126da4b11b9800d8399714e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c94ce6718dda7c33126da4b11b9800d8399714e"}], "stats": {"total": 65, "additions": 16, "deletions": 49}, "files": [{"sha": "e8759bc9edd0809806ce284d81cca162cb9fac96", "filename": "gcc/c-lex.c", "status": "modified", "additions": 16, "deletions": 49, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcd8ceed30eb9f1009fc5846df8cb70d03bd974/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcd8ceed30eb9f1009fc5846df8cb70d03bd974/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=0dcd8ceed30eb9f1009fc5846df8cb70d03bd974", "patch": "@@ -353,57 +353,15 @@ static int\n skip_white_space (c)\n      register int c;\n {\n-#if 0\n-  register int inside;\n-#endif\n+  static int newline_warning = 0;\n \n   for (;;)\n     {\n       switch (c)\n \t{\n-\t  /* Don't recognize comments in cc1: all comments are removed by cpp,\n-\t     and cpp output can include / and * consecutively as operators.  */\n-#if 0\n-\tcase '/':\n-\t  c = getc (finput);\n-\t  if (c != '*')\n-\t    {\n-\t      ungetc (c, finput);\n-\t      return '/';\n-\t    }\n-\n-\t  c = getc (finput);\n-\n-\t  inside = 1;\n-\t  while (inside)\n-\t    {\n-\t      if (c == '*')\n-\t\t{\n-\t\t  while (c == '*')\n-\t\t    c = getc (finput);\n-\n-\t\t  if (c == '/')\n-\t\t    {\n-\t\t      inside = 0;\n-\t\t      c = getc (finput);\n-\t\t    }\n-\t\t}\n-\t      else if (c == '\\n')\n-\t\t{\n-\t\t  lineno++;\n-\t\t  c = getc (finput);\n-\t\t}\n-\t      else if (c == EOF)\n-\t\t{\n-\t\t  error (\"unterminated comment\");\n-\t\t  break;\n-\t\t}\n-\t      else\n-\t\tc = getc (finput);\n-\t    }\n-\n-\t  break;\n-#endif\n+\t  /* We don't recognize comments here, because\n+\t     cpp output can include / and * consecutively as operators.\n+\t     Also, there's no need, since cpp removes all comments.  */\n \n \tcase '\\n':\n \t  c = check_newline ();\n@@ -412,14 +370,23 @@ skip_white_space (c)\n \tcase ' ':\n \tcase '\\t':\n \tcase '\\f':\n-#if 0  /* ANSI says no.  */\n-\tcase '\\r':\n-#endif\n \tcase '\\v':\n \tcase '\\b':\n \t  c = getc (finput);\n \t  break;\n \n+\tcase '\\r':\n+\t  /* ANSI C says the effects of a carriage return in a source file\n+\t     are undefined.  */\n+\t  if (pedantic && !newline_warning)\n+\t    {\n+\t      warning (\"carriage return in source file\");\n+\t      warning (\"(we only warn about the first carriage return)\");\n+\t      newline_warning = 1;\n+\t    }\n+\t  c = getc (finput);\n+\t  break;\n+\n \tcase '\\\\':\n \t  c = getc (finput);\n \t  if (c == '\\n')"}]}