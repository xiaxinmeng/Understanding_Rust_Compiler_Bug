{"sha": "ed38f5d5d8fdaf1c37e4242b203bb0c94191427c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzOGY1ZDVkOGZkYWYxYzM3ZTQyNDJiMjAzYmIwYzk0MTkxNDI3Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@bitmover.com", "date": "1999-10-23T15:56:52Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-10-23T15:56:52Z"}, "message": "hashtab.c (find_hash_table_entry): When returning a DELETED_ENTRY slot, change it to EMPTY_ENTRY first.\n\n1999-10-23 08:51 -0700  Zack Weinberg  <zack@bitmover.com>\n\n\t* hashtab.c (find_hash_table_entry): When returning a\n\tDELETED_ENTRY slot, change it to EMPTY_ENTRY first.\n\t(clear_hash_table_slot): New function which deletes an entry\n\tby its position in the table, not its value.\n\t(traverse_hash_table): New function which calls a hook\n\tfunction for every live entry in the table.\n\n\t* hashtab.h: Give hash_table_t a struct tag.  Add prototypes\n\tfor clear_hash_table_slot and traverse_hash_table.  Correct\n\tprototype of all_hash_table_collisions.\n\nFrom-SVN: r30138", "tree": {"sha": "3ad8d02ae08a5e2403f87cba3849031590ae8f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ad8d02ae08a5e2403f87cba3849031590ae8f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/comments", "author": null, "committer": null, "parents": [{"sha": "5e481b31ee1b68793b8c9b57ed1b946115584241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e481b31ee1b68793b8c9b57ed1b946115584241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e481b31ee1b68793b8c9b57ed1b946115584241"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "545574f9f27ee6dc6fd6e6b7280f2336b021767a", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=ed38f5d5d8fdaf1c37e4242b203bb0c94191427c", "patch": "@@ -1,3 +1,9 @@\n+1999-10-23 08:51 -0700  Zack Weinberg  <zack@bitmover.com>\n+\n+\t* hashtab.h: Give hash_table_t a struct tag.  Add prototypes\n+\tfor clear_hash_table_slot and traverse_hash_table.  Correct\n+\tprototype of all_hash_table_collisions.\n+\n Fri Oct 15 01:47:51 1999  Vladimir Makarov  <vmakarov@loony.cygnus.com>\n \n \t* hashtab.h: New file."}, {"sha": "3990c14cbcaaad318c1a74d8dfea696ed5995b6b", "filename": "include/hashtab.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/include%2Fhashtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/include%2Fhashtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fhashtab.h?ref=ed38f5d5d8fdaf1c37e4242b203bb0c94191427c", "patch": "@@ -47,7 +47,7 @@ typedef const void *hash_table_entry_t;\n    tables.  All work with hash table should be executed only through\n    functions mentioned below. */\n \n-typedef struct\n+typedef struct hash_table\n {\n   /* Current size (in entries) of the hash table */\n   size_t size;\n@@ -88,13 +88,19 @@ extern hash_table_entry_t *find_hash_table_entry\n extern void remove_element_from_hash_table_entry PARAMS ((hash_table_t,\n \t\t\t\t\t\t\t  hash_table_entry_t));\n \n+extern void clear_hash_table_slot PARAMS ((hash_table_t, hash_table_entry_t *));\n+\n+extern void traverse_hash_table PARAMS ((hash_table_t,\n+\t\t\t\t\t int (*) (hash_table_entry_t, void *),\n+\t\t\t\t\t void *));\n+    \n extern size_t hash_table_size PARAMS ((hash_table_t));\n \n extern size_t hash_table_elements_number PARAMS ((hash_table_t));\n \n extern int hash_table_collisions PARAMS ((hash_table_t));\n \n-extern int all_hash_table_collisions ();\n+extern int all_hash_table_collisions PARAMS ((void));\n \n #ifdef __cplusplus\n }"}, {"sha": "829b70ed19f57e9e1296ee3b8276d6ed44c67c17", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ed38f5d5d8fdaf1c37e4242b203bb0c94191427c", "patch": "@@ -1,3 +1,12 @@\n+1999-10-23 08:51 -0700  Zack Weinberg  <zack@bitmover.com>\n+\n+\t* hashtab.c (find_hash_table_entry): When returning a\n+\tDELETED_ENTRY slot, change it to EMPTY_ENTRY first.\n+\t(clear_hash_table_slot): New function which deletes an entry\n+\tby its position in the table, not its value.\n+\t(traverse_hash_table): New function which calls a hook\n+\tfunction for every live entry in the table.\n+\n 1999-10-19  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cplus-dem.c (INTBUF_SIZE): New macro."}, {"sha": "9fce8ccc1254f2f243a07e246b6c7572957ec658", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed38f5d5d8fdaf1c37e4242b203bb0c94191427c/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=ed38f5d5d8fdaf1c37e4242b203bb0c94191427c", "patch": "@@ -206,7 +206,7 @@ find_hash_table_entry (htab, element, reserve)\n \t      if (first_deleted_entry_ptr != NULL)\n \t\t{\n \t\t  entry_ptr = first_deleted_entry_ptr;\n-\t\t  *entry_ptr = DELETED_ENTRY;\n+\t\t  *entry_ptr = EMPTY_ENTRY;\n \t\t}\n \t    }\n           break;\n@@ -242,6 +242,41 @@ remove_element_from_hash_table_entry (htab, element)\n   htab->number_of_deleted_elements++;\n }\n \n+/* This function clears a specified slot in a hash table.\n+   It is useful when you've already done the lookup and don't want to\n+   do it again.  */\n+\n+void\n+clear_hash_table_slot (htab, slot)\n+     hash_table_t htab;\n+     hash_table_entry_t *slot;\n+{\n+  if (slot < htab->entries || slot >= htab->entries + htab->size\n+      || *slot == EMPTY_ENTRY || *slot == DELETED_ENTRY)\n+    abort ();\n+  *slot = DELETED_ENTRY;\n+  htab->number_of_deleted_elements++;\n+}\n+\n+/* This function scans over the entire hash table calling\n+   CALLBACK for each live entry.  If CALLBACK returns false,\n+   the iteration stops.  INFO is passed as CALLBACK's second\n+   argument.  */\n+\n+void\n+traverse_hash_table (htab, callback, info)\n+     hash_table_t htab;\n+     int (*callback) (hash_table_entry_t, void *);\n+     void *info;\n+{\n+  hash_table_entry_t *entry_ptr;\n+  for (entry_ptr = htab->entries; entry_ptr < htab->entries + htab->size;\n+       entry_ptr++)\n+    if (*entry_ptr != EMPTY_ENTRY && *entry_ptr != DELETED_ENTRY)\n+      if (!callback (*entry_ptr, info))\n+\tbreak;\n+}\n+\n /* The following function returns current size of given hash table. */\n \n size_t"}]}