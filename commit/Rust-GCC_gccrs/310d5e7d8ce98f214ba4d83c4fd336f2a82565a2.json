{"sha": "310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEwZDVlN2Q4Y2U5OGYyMTRiYTRkODNjNGZkMzM2ZjJhODI1NjVhMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-13T09:39:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-13T09:39:50Z"}, "message": "re PR tree-optimization/67191 (ICE: in before_dom_children, at tree-ssa-sccvn.c:4372)\n\n2015-08-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/67191\n\t* tree-ssa-sccvn.c (sccvn_dom_walker::before_dom_children): Remove\n\tassert we value-numbered last stmts operand because it can validly\n\ttrigger for unreachable code.\n\n\t* gcc.dg/torture/pr67191.c: New testcase.\n\t* g++.dg/torture/pr67191.C: Likewise.\n\nFrom-SVN: r226854", "tree": {"sha": "8944fccac960f218c34750d0637b8cf35ca65c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8944fccac960f218c34750d0637b8cf35ca65c95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d27555bfeeb3f58037d5d399df5ae22c7c90d3fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa"}], "stats": {"total": 155, "additions": 147, "deletions": 8}, "files": [{"sha": "e06330d384aef0ee51a1007722c2c4fc13017a63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "patch": "@@ -1,3 +1,10 @@\n+2015-08-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67191\n+\t* tree-ssa-sccvn.c (sccvn_dom_walker::before_dom_children): Remove\n+\tassert we value-numbered last stmts operand because it can validly\n+\ttrigger for unreachable code.\n+\n 2015-08-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/67103"}, {"sha": "c3a9ff104ee3130b115e4915362d13ad1caf818b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "patch": "@@ -1,3 +1,9 @@\n+2015-08-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67191\n+\t* gcc.dg/torture/pr67191.c: New testcase.\n+\t* g++.dg/torture/pr67191.C: Likewise.\n+\n 2015-08-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66502"}, {"sha": "79ee988ce7a086118c2b9e8025b97beaa0cddfc9", "filename": "gcc/testsuite/g++.dg/torture/pr67191.C", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr67191.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr67191.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr67191.C?ref=310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "patch": "@@ -0,0 +1,117 @@\n+// { dg-do compile }\n+\n+template <typename> class A;\n+template <typename _Tp> using __allocator_base = _Tp;\n+template <class T, class = T, class = int, class = __allocator_base<int>>\n+class B;\n+template <class T, class H, class P, class A>\n+bool operator==(B<T, H, P, A> const &, B<T, H, P, A> const &);\n+template <class T, class H, class P, class A>\n+bool operator!=(B<T, H, P, A> const &, B<T, H, P, A> const &);\n+typedef B<int> int_multiset;\n+int a;\n+template <typename> struct C {\n+    C(int) {}\n+};\n+template <typename> struct D;\n+template <typename> struct K;\n+struct L : C<A<D<int>>>, C<A<K<int>>> {\n+    template <typename First, typename Second>\n+\tL(First, Second)\n+\t: C<A<D<int>>>(0), C<A<K<int>>>(0) {}\n+};\n+template <typename Node> struct F {\n+    typedef typename Node::node_pointer node_pointer;\n+    node_pointer node_;\n+    F();\n+    F(typename Node::link_pointer p1) : node_(static_cast<node_pointer>(p1)) {}\n+    void operator++() { node_ = 0; }\n+    int operator!=(F p1) { return node_ != p1.node_; }\n+};\n+struct G {\n+    typedef G *link_pointer;\n+};\n+struct H {\n+    static int new_bucket_count(int) {\n+\tint b;\n+\tint *c = 0;\n+\tif (a)\n+\t  b = *c;\n+\treturn b;\n+    }\n+};\n+class functions {\n+public:\n+    functions(int, int) {}\n+    ~functions();\n+};\n+template <typename Types> struct table : functions {\n+    typedef typename Types::policy policy;\n+    typedef Types node_allocator;\n+    typedef F<typename Types::node> iterator;\n+    L allocators_;\n+    int bucket_count_;\n+    int size_;\n+    typename Types::link_pointer get_previous_start() const;\n+    iterator begin() const { return size_ ? get_previous_start() : 0; }\n+    table(int, typename Types::hasher, typename Types::key_equal, node_allocator)\n+\t: functions(0, 0), allocators_(0, 0),\n+\tbucket_count_(policy::new_bucket_count(0)), size_() {}\n+};\n+template <typename> struct K : G { typedef K *node_pointer; };\n+struct I {\n+    typedef G *link_pointer;\n+};\n+struct J {\n+    typedef I::link_pointer link_pointer;\n+};\n+template <typename> struct D {\n+    typedef int hasher;\n+    typedef int key_equal;\n+    typedef K<int> node;\n+    typedef J::link_pointer link_pointer;\n+    typedef H policy;\n+};\n+struct M : table<D<int>> {\n+    node_allocator grouped_table_impl_a;\n+    M(int, int) : table(0, 0, 0, grouped_table_impl_a) {}\n+    void equals(M const &) const {\n+\tfor (iterator d = begin(); d.node_;) {\n+\t    iterator e;\n+\t    group_equals(e);\n+\t}\n+    }\n+    static int group_equals(iterator p1) {\n+\tint f;\n+\titerator g;\n+\tfor (; g != p1; ++g)\n+\t  if (find())\n+\t    if (f)\n+\t      return 0;\n+    }\n+    static int find();\n+};\n+template <class, class, class, class> class B {\n+    M table_;\n+\n+public:\n+    B(unsigned long = 0);\n+    friend bool operator==<>(B const &, B const &);\n+    friend bool operator!=<>(B const &, B const &);\n+};\n+template <class T, class H, class P, class A>\n+B<T, H, P, A>::B(unsigned long)\n+     : table_(0, 0) {}\n+     template <class T, class H, class P, class A>\n+     bool operator==(B<T, H, P, A> const &p1, B<T, H, P, A> const &p2) {\n+\t p1.table_.equals(p2.table_);\n+     }\n+template <class T, class H, class P, class A>\n+bool operator!=(B<T, H, P, A> const &p1, B<T, H, P, A> const &p2) {\n+    p1.table_.equals(p2.table_);\n+}\n+void use_multiset_fwd_declared_function_typerun() {\n+    int_multiset x, y;\n+    x == y;\n+    x != y;\n+}"}, {"sha": "b8623ef2b2a82667b666e120a25b414659e8db50", "filename": "gcc/testsuite/gcc.dg/torture/pr67191.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67191.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67191.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67191.c?ref=310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+int a;\n+void f(void)\n+{\n+  int b;\n+  for(a=1; a;);\n+  for(; b; b++)\n+    lbl:\n+\tb || a;\n+  if(a)\n+    goto lbl;\n+}"}, {"sha": "d4c2b46316c863bd414993f838cee0deb13a413c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310d5e7d8ce98f214ba4d83c4fd336f2a82565a2/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=310d5e7d8ce98f214ba4d83c4fd336f2a82565a2", "patch": "@@ -4429,6 +4429,9 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n       return;\n     }\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"Visiting BB %d\\n\", bb->index);\n+\n   /* If we have a single predecessor record the equivalence from a\n      possible condition on the predecessor edge.  */\n   if (single_pred_p (bb))\n@@ -4502,17 +4505,10 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      fprintf (dump_file, \"Visiting stmt ending BB %d: \", bb->index);\n+      fprintf (dump_file, \"Visiting control stmt ending BB %d: \", bb->index);\n       print_gimple_stmt (dump_file, stmt, 0, 0);\n     }\n \n-  /* Value-number the last stmts SSA uses.  */\n-  ssa_op_iter i;\n-  tree op;\n-  FOR_EACH_SSA_TREE_OPERAND (op, stmt, i, SSA_OP_USE)\n-    gcc_assert (VN_INFO (op)->visited\n-\t\t|| SSA_NAME_IS_DEFAULT_DEF (op));\n-\n   /* ???  We can even handle stmts with outgoing EH or ABNORMAL edges\n      if value-numbering can prove they are not reachable.  Handling\n      computed gotos is also possible.  */"}]}