{"sha": "ec4d88f90749c254a914f05aebe27b70b6a677b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0ZDg4ZjkwNzQ5YzI1NGE5MTRmMDVhZWJlMjdiNzBiNmE2NzdiNw==", "commit": {"author": {"name": "Steev Wilcox", "email": "steev@paradigmds.com", "date": "2002-07-04T00:28:03Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-07-04T00:28:03Z"}, "message": "re PR libstdc++/7057 (Operator== on hashtables doesn't appear to work correctly (patch included))\n\n\n2002-07-03  Steev Wilcox  <steev@paradigmds.com>\n\n\tPR libstdc++/7057\n\t* include/ext/stl_hashtable.h: Fix.\n\t* testsuite/ext/hash_map.cc: New.\n\nFrom-SVN: r55229", "tree": {"sha": "f5846847b44a05b46131d81ccf3ee8d652475c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5846847b44a05b46131d81ccf3ee8d652475c5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec4d88f90749c254a914f05aebe27b70b6a677b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4d88f90749c254a914f05aebe27b70b6a677b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4d88f90749c254a914f05aebe27b70b6a677b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4d88f90749c254a914f05aebe27b70b6a677b7/comments", "author": null, "committer": null, "parents": [{"sha": "a6a5beb19c33101c2688866274719f729e6bc0b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a5beb19c33101c2688866274719f729e6bc0b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6a5beb19c33101c2688866274719f729e6bc0b8"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "d54ffa1fb41afa34baec536ad19ea90e5d332d17", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4d88f90749c254a914f05aebe27b70b6a677b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4d88f90749c254a914f05aebe27b70b6a677b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec4d88f90749c254a914f05aebe27b70b6a677b7", "patch": "@@ -1,3 +1,9 @@\n+2002-07-03  Steev Wilcox  <steev@paradigmds.com>\n+\t \n+\tPR libstdc++/7057\n+\t* include/ext/stl_hashtable.h: Fix.\n+\t* testsuite/ext/hash_map.cc: New.\n+\t\n 2002-07-03  Jack Reeves  <jackw_reeves@hotmail.com>\n             Kenny Simpson  <theonetruekenny@yahoo.com>\n             Phil Edwards  <pme@gcc.gnu.org>"}, {"sha": "b41c821f6035436551ba12c511bafd2cbce8a134", "filename": "libstdc++-v3/include/ext/stl_hashtable.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4d88f90749c254a914f05aebe27b70b6a677b7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4d88f90749c254a914f05aebe27b70b6a677b7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h?ref=ec4d88f90749c254a914f05aebe27b70b6a677b7", "patch": "@@ -607,11 +607,28 @@ bool operator==(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,\n   for (size_t __n = 0; __n < __ht1._M_buckets.size(); ++__n) {\n     _Node* __cur1 = __ht1._M_buckets[__n];\n     _Node* __cur2 = __ht2._M_buckets[__n];\n-    for ( ; __cur1 && __cur2 && __cur1->_M_val == __cur2->_M_val;\n+    // Check same length of lists\n+    for ( ; __cur1 && __cur2;\n           __cur1 = __cur1->_M_next, __cur2 = __cur2->_M_next)\n       {}\n     if (__cur1 || __cur2)\n       return false;\n+    // Now check one's elements are in the other\n+    for (__cur1 = __ht1._M_buckets[__n] ; __cur1; __cur1 = __cur1->_M_next)\n+    {\n+      bool _found__cur1 = false;\n+      for (_Node* __cur2 = __ht2._M_buckets[__n];\n+           __cur2; __cur2 = __cur2->_M_next)\n+      {\n+        if (__cur1->_M_val == __cur2->_M_val)\n+        {\n+          _found__cur1 = true;\n+          break;\n+        }\n+      }\n+      if (!_found__cur1)\n+        return false;\n+    }\n   }\n   return true;\n }  "}, {"sha": "55b740f3ee8e0aa46ab04cb056334d3743a9ee2b", "filename": "libstdc++-v3/testsuite/ext/hash_map.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4d88f90749c254a914f05aebe27b70b6a677b7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fhash_map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4d88f90749c254a914f05aebe27b70b6a677b7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fhash_map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fhash_map.cc?ref=ec4d88f90749c254a914f05aebe27b70b6a677b7", "patch": "@@ -0,0 +1,102 @@\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// hash_map (SGI extension)\n+\n+#include <cstdlib>\n+#include <string>\n+#include <ext/hash_map>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+using namespace __gnu_cxx;\n+\n+namespace __gnu_cxx \n+{\n+  inline size_t hash_string(const char* s)\n+  {\n+    unsigned long h; \n+    for (h=0; *s; ++s) {\n+      h = 5*h + *s;\n+    }\n+    return size_t(h);\n+  }\n+\n+  template<class T> struct hash<T *>\n+  {\n+    size_t operator()(const T *const & s) const\n+      { return reinterpret_cast<size_t>(s); }\n+  };    \n+  \n+  template<> struct hash<string>\n+  {\n+    size_t operator()(const string &s) const { return hash_string(s.c_str()); }\n+  };\n+\n+  template<> struct hash<const string>\n+  {\n+    size_t operator()(const string &s) const { return hash_string(s.c_str()); }\n+  };\n+\n+  template<class T1, class T2> struct hash<pair<T1,T2> >\n+  {\n+    hash<T1> __fh;\n+    hash<T2> __sh;\n+    size_t operator()(const pair<T1,T2> &p) const { \n+      return __fh(p.first) ^ __sh(p.second);\n+    }\n+  };\n+}\n+\n+\n+const int Size = 5;\n+\n+void test01()\n+{\n+  bool test = true;\n+\n+  for (int i = 0; i < 10; i++)\n+  {\n+    hash_map<string,int> a;\n+    hash_map<string,int> b;\n+    \n+    vector<pair<string,int> > contents (Size);\n+    for (int j = 0; j < Size; j++)\n+    {\n+      string s;\n+      for (int k = 0; k < 10; k++)\n+      {\n+        s += 'a' + (rand() % 26);\n+      }\n+      contents[j] = make_pair(s,j);\n+    }\n+    for (int j = 0; j < Size; j++)\n+    {\n+      a[contents[j].first] = contents[j].second;\n+      int k = Size - 1 - j;\n+      b[contents[k].first] = contents[k].second;\n+    }\n+    VERIFY( a == b );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}