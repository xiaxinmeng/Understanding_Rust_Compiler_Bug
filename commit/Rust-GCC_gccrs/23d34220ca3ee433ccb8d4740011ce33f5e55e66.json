{"sha": "23d34220ca3ee433ccb8d4740011ce33f5e55e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkMzQyMjBjYTNlZTQzM2NjYjhkNDc0MDAxMWNlMzNmNWU1NWU2Ng==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2004-08-21T08:02:03Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2004-08-21T08:02:03Z"}, "message": "PR  c++/16030\n\t* config/i386/winnt/c (gen_stdcall_suffix, gen_fastcall_suffix):\n\tRemove, merging into ...\n\t(gen_stdcall_or_fastcall_suffix): New function, returning tree\n\trather than const char*, and accepting additional parameter.\n\tDon't add suffix to '*'-prefixed symbols or variadic functions.\n\t(i386_pe_encode_section_info): Adjust for call to new function.\n\tCall change_decl_assembler_name.\n\nFrom-SVN: r86357", "tree": {"sha": "484693e3fa202f69c7fa4a4a3400eb83b31ec6a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/484693e3fa202f69c7fa4a4a3400eb83b31ec6a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23d34220ca3ee433ccb8d4740011ce33f5e55e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d34220ca3ee433ccb8d4740011ce33f5e55e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d34220ca3ee433ccb8d4740011ce33f5e55e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d34220ca3ee433ccb8d4740011ce33f5e55e66/comments", "author": null, "committer": null, "parents": [{"sha": "8f63f56bd1784f27d4869118c9e28045c66229b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f63f56bd1784f27d4869118c9e28045c66229b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f63f56bd1784f27d4869118c9e28045c66229b5"}], "stats": {"total": 138, "additions": 66, "deletions": 72}, "files": [{"sha": "ba4bc6b4b4c60d91c937ebb1af80f380acb29673", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d34220ca3ee433ccb8d4740011ce33f5e55e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d34220ca3ee433ccb8d4740011ce33f5e55e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23d34220ca3ee433ccb8d4740011ce33f5e55e66", "patch": "@@ -1,3 +1,14 @@\n+2004-08-18  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\tPR  c++/16030\n+\t* config/i386/winnt/c (gen_stdcall_suffix, gen_fastcall_suffix):\n+\tRemove, merging into ...\n+\t(gen_stdcall_or_fastcall_suffix): New function, returning tree\n+\trather than const char*, and accepting additional parameter.\n+\tDon't add suffix to '*'-prefixed symbols or variadic functions.\n+\t(i386_pe_encode_section_info): Adjust for call to new function.\n+\tCall change_decl_assembler_name.\n+\n 2004-08-20  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin.c (machopic_indirect_data_reference): Mark"}, {"sha": "7e32ca94257eee549edfff02a1894f110a7d6568", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 55, "deletions": 72, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d34220ca3ee433ccb8d4740011ce33f5e55e66/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d34220ca3ee433ccb8d4740011ce33f5e55e66/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=23d34220ca3ee433ccb8d4740011ce33f5e55e66", "patch": "@@ -47,8 +47,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n */\n \n static tree associated_type (tree);\n-static const char * gen_stdcall_suffix (tree);\n-static const char * gen_fastcall_suffix (tree);\n+static tree gen_stdcall_or_fastcall_suffix (tree, bool);\n static int i386_pe_dllexport_p (tree);\n static int i386_pe_dllimport_p (tree);\n static void i386_pe_mark_dllexport (tree);\n@@ -332,84 +331,57 @@ i386_pe_mark_dllimport (tree decl)\n   DECL_NON_ADDR_CONST_P (decl) = 1;\n }\n \n-/* Return string which is the former assembler name modified with a\n-   prefix consisting of FASTCALL_PREFIX and a suffix consisting of an\n-   atsign (@) followed by the number of bytes of arguments.  */\n-\n-static const char *\n-gen_fastcall_suffix (tree decl)\n-{\n-  int total = 0;\n-  const char *asmname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  char *newsym;\n-\n-  if (TYPE_ARG_TYPES (TREE_TYPE (decl)))\n-    if (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (decl))))\n-        == void_type_node)\n-      {\n-\ttree formal_type = TYPE_ARG_TYPES (TREE_TYPE (decl));\n-\n-\t/* Quit if we hit an incomplete type.  Error is reported\n-\t   by convert_arguments in c-typeck.c or cp/typeck.c.  */\n-\twhile (TREE_VALUE (formal_type) != void_type_node\n-\t       && COMPLETE_TYPE_P (TREE_VALUE (formal_type)))\t\n-\t  {\n-\t    int parm_size\n-\t      = TREE_INT_CST_LOW (TYPE_SIZE (TREE_VALUE (formal_type)));\n-\t    /* Must round up to include padding.  This is done the same\n-\t       way as in store_one_arg.  */\n-\t    parm_size = ((parm_size + PARM_BOUNDARY - 1)\n-\t\t\t / PARM_BOUNDARY * PARM_BOUNDARY);\n-\t    total += parm_size;\n-\t    formal_type = TREE_CHAIN (formal_type);\n-\t  }\n-      }\n-\n-  /* Assume max of 8 base 10 digits in the suffix.  */\n-  newsym = xmalloc (1 + strlen (asmname) + 1 + 8 + 1);\n-  sprintf (newsym, \"%c%s@%d\", FASTCALL_PREFIX, asmname, total/BITS_PER_UNIT);\n-  return IDENTIFIER_POINTER (get_identifier (newsym));\n-}\n-\n /* Return string which is the former assembler name modified with a\n    suffix consisting of an atsign (@) followed by the number of bytes of\n-   arguments */\n+   arguments.  If FASTCALL is true, also add the FASTCALL_PREFIX.  */\n \n-static const char *\n-gen_stdcall_suffix (tree decl)\n+static tree\n+gen_stdcall_or_fastcall_suffix (tree decl, bool fastcall)\n {\n   int total = 0;\n   /* ??? This probably should use XSTR (XEXP (DECL_RTL (decl), 0), 0) instead\n      of DECL_ASSEMBLER_NAME.  */\n-  const char *asmname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+   const char *asmname =  IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   char *newsym;\n+  char *p;\n+  tree formal_type;\n \n-  if (TYPE_ARG_TYPES (TREE_TYPE (decl)))\n-    if (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (decl))))\n-        == void_type_node)\n-      {\n-\ttree formal_type = TYPE_ARG_TYPES (TREE_TYPE (decl));\n-\n-\t/* Quit if we hit an incomplete type.  Error is reported\n-\t   by convert_arguments in c-typeck.c or cp/typeck.c.  */\n-\twhile (TREE_VALUE (formal_type) != void_type_node\n-\t       && COMPLETE_TYPE_P (TREE_VALUE (formal_type)))\t\n-\t  {\n-\t    int parm_size\n-\t      = TREE_INT_CST_LOW (TYPE_SIZE (TREE_VALUE (formal_type)));\n+  /* Do not change the identifier if a verbatim asmspec or already done. */\n+  if (*asmname == '*' || strchr (asmname, '@'))\n+    return DECL_ASSEMBLER_NAME (decl);\n+\n+  formal_type = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+  if (formal_type != NULL_TREE)\n+    {\n+      /* These attributes are ignored for variadic functions in\n+\t i386.c:ix86_return_pops_args. For compatibility with MS\n+         compiler do not add @0 suffix here.  */ \n+      if (TREE_VALUE (tree_last (formal_type)) != void_type_node)\n+        return DECL_ASSEMBLER_NAME (decl);\n+\n+      /* Quit if we hit an incomplete type.  Error is reported\n+         by convert_arguments in c-typeck.c or cp/typeck.c.  */\n+      while (TREE_VALUE (formal_type) != void_type_node\n+\t     && COMPLETE_TYPE_P (TREE_VALUE (formal_type)))\t\n+\t{\n+\t  int parm_size\n+\t    = TREE_INT_CST_LOW (TYPE_SIZE (TREE_VALUE (formal_type)));\n \t    /* Must round up to include padding.  This is done the same\n \t       way as in store_one_arg.  */\n-\t    parm_size = ((parm_size + PARM_BOUNDARY - 1)\n-\t\t\t / PARM_BOUNDARY * PARM_BOUNDARY);\n-\t    total += parm_size;\n-\t    formal_type = TREE_CHAIN (formal_type);\n-\t  }\n-      }\n+\t  parm_size = ((parm_size + PARM_BOUNDARY - 1)\n+\t\t       / PARM_BOUNDARY * PARM_BOUNDARY);\n+\t  total += parm_size;\n+\t  formal_type = TREE_CHAIN (formal_type);\\\n+\t}\n+     }\n \n   /* Assume max of 8 base 10 digits in the suffix.  */\n-  newsym = xmalloc (strlen (asmname) + 1 + 8 + 1);\n-  sprintf (newsym, \"%s@%d\", asmname, total/BITS_PER_UNIT);\n-  return IDENTIFIER_POINTER (get_identifier (newsym));\n+  newsym = alloca (1 + strlen (asmname) + 1 + 8 + 1);\n+  p = newsym;\n+  if (fastcall)\n+    *p++ = FASTCALL_PREFIX;\n+  sprintf (p, \"%s@%d\", asmname, total/BITS_PER_UNIT);\n+  return get_identifier (newsym);\n }\n \n void\n@@ -420,13 +392,24 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n   if (first && TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       tree type_attributes = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n-      rtx rtlname = XEXP (rtl, 0);\n-      if (GET_CODE (rtlname) == MEM)\n-\trtlname = XEXP (rtlname, 0);\n+      tree newid = NULL_TREE;\n+\n       if (lookup_attribute (\"stdcall\", type_attributes))\n-\tXSTR (rtlname, 0) = gen_stdcall_suffix (decl);\n+\tnewid = gen_stdcall_or_fastcall_suffix (decl, false);\n       else if (lookup_attribute (\"fastcall\", type_attributes))\n-\tXSTR (rtlname, 0) = gen_fastcall_suffix (decl);\n+\tnewid = gen_stdcall_or_fastcall_suffix (decl, true);\n+      if (newid != NULL_TREE) \t\n+\t{\n+\t  rtx rtlname = XEXP (rtl, 0);\n+\t  if (GET_CODE (rtlname) == MEM)\n+\t    rtlname = XEXP (rtlname, 0);\n+\t  XSTR (rtlname, 0) = IDENTIFIER_POINTER (newid);\n+\t  /* These attributes must be present on first declaration,\n+\t     change_decl_assembler_name will warn if they are added\n+\t     later and the decl has been referenced, but duplicate_decls\n+\t     should catch the mismatch before this is called.  */ \n+\t  change_decl_assembler_name (decl, newid);\n+\t}\n     }\n \n   /* Mark the decl so we can tell from the rtl whether the object is"}]}