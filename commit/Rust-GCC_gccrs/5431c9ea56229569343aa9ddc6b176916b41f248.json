{"sha": "5431c9ea56229569343aa9ddc6b176916b41f248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzMWM5ZWE1NjIyOTU2OTM0M2FhOWRkYzZiMTc2OTE2YjQxZjI0OA==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2016-01-21T02:13:14Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2016-01-21T02:13:14Z"}, "message": "record loops in execution order\n\n\t* graphite-scop-detection.c (record_loop_in_sese): New.\n\t(gather_bbs::before_dom_children): Call record_loop_in_sese.\n\t(build_scops): Remove call to build_sese_loop_nests.\n\t* sese.c (sese_record_loop): Remove.\n\t(build_sese_loop_nests): Remove.\n\t(new_sese_info): Remove region->loops.\n\t(free_sese_info): Same.\n\t* sese.h (sese_contains_loop): Same.\n\t(build_sese_loop_nests): Remove.\n\t(sese_contains_loop): Remove.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r232654", "tree": {"sha": "234fcd82f7d5202fe9ee93e08fcfad10ffa19491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/234fcd82f7d5202fe9ee93e08fcfad10ffa19491"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5431c9ea56229569343aa9ddc6b176916b41f248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5431c9ea56229569343aa9ddc6b176916b41f248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5431c9ea56229569343aa9ddc6b176916b41f248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5431c9ea56229569343aa9ddc6b176916b41f248/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7eff5b2843c5113220b825704600408558f4236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7eff5b2843c5113220b825704600408558f4236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7eff5b2843c5113220b825704600408558f4236"}], "stats": {"total": 107, "additions": 40, "deletions": 67}, "files": [{"sha": "ca0bb510d9989403797a59a6a8711981c09f5936", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5431c9ea56229569343aa9ddc6b176916b41f248/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5431c9ea56229569343aa9ddc6b176916b41f248/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5431c9ea56229569343aa9ddc6b176916b41f248", "patch": "@@ -1,3 +1,17 @@\n+2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-scop-detection.c (record_loop_in_sese): New.\n+\t(gather_bbs::before_dom_children): Call record_loop_in_sese.\n+\t(build_scops): Remove call to build_sese_loop_nests.\n+\t* sese.c (sese_record_loop): Remove.\n+\t(build_sese_loop_nests): Remove.\n+\t(new_sese_info): Remove region->loops.\n+\t(free_sese_info): Same.\n+\t* sese.h (sese_contains_loop): Same.\n+\t(build_sese_loop_nests): Remove.\n+\t(sese_contains_loop): Remove.\n+\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "68b9f4df863f0764780226317386df3d0b15e1ad", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5431c9ea56229569343aa9ddc6b176916b41f248/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5431c9ea56229569343aa9ddc6b176916b41f248/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=5431c9ea56229569343aa9ddc6b176916b41f248", "patch": "@@ -1874,15 +1874,40 @@ gather_bbs::gather_bbs (cdi_direction direction, scop_p scop)\n {\n }\n \n+/* Record in execution order the loops fully contained in the region.  */\n+\n+static void\n+record_loop_in_sese (basic_block bb, sese_info_p region)\n+{\n+  loop_p father = bb->loop_father;\n+  if (loop_in_sese_p (father, region->region))\n+    {\n+      bool found = false;\n+      loop_p loop0;\n+      int j;\n+      FOR_EACH_VEC_ELT (region->loop_nest, j, loop0)\n+\tif (father == loop0)\n+\t  {\n+\t    found = true;\n+\t    break;\n+\t  }\n+      if (!found)\n+\tregion->loop_nest.safe_push (father);\n+    }\n+}\n+\n /* Call-back for dom_walk executed before visiting the dominated\n    blocks.  */\n \n edge\n gather_bbs::before_dom_children (basic_block bb)\n {\n-  if (!bb_in_sese_p (bb, scop->scop_info->region))\n+  sese_info_p region = scop->scop_info;\n+  if (!bb_in_sese_p (bb, region->region))\n     return NULL;\n \n+  record_loop_in_sese (bb, region);\n+\n   gcond *stmt = single_pred_cond_non_loop_exit (bb);\n \n   if (stmt)\n@@ -1991,8 +2016,6 @@ build_scops (vec<scop_p> *scops)\n \t  continue;\n \t}\n \n-      build_sese_loop_nests (scop->scop_info);\n-\n       find_scop_parameters (scop);\n       graphite_dim_t max_dim = PARAM_VALUE (PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS);\n "}, {"sha": "9cd2d52aa173c6789814b5ef4fcc8c630671d845", "filename": "gcc/sese.c", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5431c9ea56229569343aa9ddc6b176916b41f248/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5431c9ea56229569343aa9ddc6b176916b41f248/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=5431c9ea56229569343aa9ddc6b176916b41f248", "patch": "@@ -43,56 +43,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sese.h\"\n #include \"tree-ssa-propagate.h\"\n \n-/* Record LOOP as occurring in REGION.  */\n-\n-static void\n-sese_record_loop (sese_info_p region, loop_p loop)\n-{\n-  if (sese_contains_loop (region, loop))\n-    return;\n-\n-  bitmap_set_bit (region->loops, loop->num);\n-  region->loop_nest.safe_push (loop);\n-}\n-\n-/* Build the loop nests contained in REGION.  Returns true when the\n-   operation was successful.  */\n-\n-void\n-build_sese_loop_nests (sese_info_p region)\n-{\n-  unsigned i;\n-  basic_block bb;\n-  struct loop *loop0, *loop1;\n-\n-  FOR_EACH_BB_FN (bb, cfun)\n-    if (bb_in_sese_p (bb, region->region))\n-      {\n-\tstruct loop *loop = bb->loop_father;\n-\n-\t/* Only add loops if they are completely contained in the SCoP.  */\n-\tif (loop->header == bb\n-\t    && bb_in_sese_p (loop->latch, region->region))\n-\t  sese_record_loop (region, loop);\n-      }\n-\n-  /* Make sure that the loops in the SESE_LOOP_NEST are ordered.  It\n-     can be the case that an inner loop is inserted before an outer\n-     loop.  To avoid this, semi-sort once.  */\n-  FOR_EACH_VEC_ELT (region->loop_nest, i, loop0)\n-    {\n-      if (region->loop_nest.length () == i + 1)\n-\tbreak;\n-\n-      loop1 = region->loop_nest[i + 1];\n-      if (loop0->num > loop1->num)\n-\t{\n-\t  region->loop_nest[i] = loop1;\n-\t  region->loop_nest[i + 1] = loop0;\n-\t}\n-    }\n-}\n-\n /* For a USE in BB, if BB is outside REGION, mark the USE in the\n    LIVEOUTS set.  */\n \n@@ -228,7 +178,6 @@ new_sese_info (edge entry, edge exit)\n \n   region->region.entry = entry;\n   region->region.exit = exit;\n-  region->loops = BITMAP_ALLOC (NULL);\n   region->loop_nest.create (3);\n   region->params.create (3);\n   region->rename_map = new rename_map_t;\n@@ -244,9 +193,6 @@ new_sese_info (edge entry, edge exit)\n void\n free_sese_info (sese_info_p region)\n {\n-  if (region->loops)\n-    region->loops = BITMAP_ALLOC (NULL);\n-\n   region->params.release ();\n   region->loop_nest.release ();\n "}, {"sha": "fa57335c61072cf0efd622554419e3533143c4bc", "filename": "gcc/sese.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5431c9ea56229569343aa9ddc6b176916b41f248/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5431c9ea56229569343aa9ddc6b176916b41f248/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=5431c9ea56229569343aa9ddc6b176916b41f248", "patch": "@@ -86,7 +86,6 @@ typedef struct sese_info_t\n   rename_map_t *rename_map;\n \n   /* Loops completely contained in this SESE.  */\n-  bitmap loops;\n   vec<loop_p> loop_nest;\n \n   /* Basic blocks contained in this SESE.  */\n@@ -107,20 +106,11 @@ typedef struct sese_info_t\n extern sese_info_p new_sese_info (edge, edge);\n extern void free_sese_info (sese_info_p);\n extern void sese_insert_phis_for_liveouts (sese_info_p, basic_block, edge, edge);\n-extern void build_sese_loop_nests (sese_info_p);\n extern struct loop *outermost_loop_in_sese (sese_l &, basic_block);\n extern tree scalar_evolution_in_region (const sese_l &, loop_p, tree);\n extern bool scev_analyzable_p (tree, sese_l &);\n extern bool invariant_in_sese_p_rec (tree, const sese_l &, bool *);\n \n-/* Check that SESE contains LOOP.  */\n-\n-static inline bool\n-sese_contains_loop (sese_info_p sese, struct loop *loop)\n-{\n-  return bitmap_bit_p (sese->loops, loop->num);\n-}\n-\n /* The number of parameters in REGION. */\n \n static inline unsigned"}]}