{"sha": "6512c0f187d84dd046380aa53673dc5ae20795e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxMmMwZjE4N2Q4NGRkMDQ2MzgwYWE1MzY3M2RjNWFlMjA3OTVlMw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-08-25T00:25:57Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-08-25T00:25:57Z"}, "message": "PR middle-end/81908 - FAIL: gfortran.dg/alloc_comp_auto_array_2.f90 -O3 -g -m32\n\ngcc/ChangeLog:\n\n\tPR middle-end/81908\n\t* gimple-fold.c (size_must_be_zero_p): New function.\n\t(gimple_fold_builtin_memory_op): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/81908\n\t* gcc.dg/tree-ssa/builtins-folding-gimple-2.c: New test.\n\t* gcc.dg/tree-ssa/builtins-folding-gimple-3.c: New test.\n\t* gcc.dg/tree-ssa/pr81908.c: New test.\n\nFrom-SVN: r251347", "tree": {"sha": "e3ef97482f1a8fea582b082f55375e0e11f7481e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ef97482f1a8fea582b082f55375e0e11f7481e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6512c0f187d84dd046380aa53673dc5ae20795e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6512c0f187d84dd046380aa53673dc5ae20795e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6512c0f187d84dd046380aa53673dc5ae20795e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6512c0f187d84dd046380aa53673dc5ae20795e3/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9dd01fabf16c866ac582141b03194cadb0f10f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9dd01fabf16c866ac582141b03194cadb0f10f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9dd01fabf16c866ac582141b03194cadb0f10f0"}], "stats": {"total": 181, "additions": 179, "deletions": 2}, "files": [{"sha": "4f2350a2cc60aaeaf784fe72d0c064f2a4717a5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6512c0f187d84dd046380aa53673dc5ae20795e3", "patch": "@@ -1,3 +1,9 @@\n+2017-08-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/81908\n+\t* gimple-fold.c (size_must_be_zero_p): New function.\n+\t(gimple_fold_builtin_memory_op): Call it.\n+\n 2017-08-24  Steven Munroe  <munroesj@gcc.gnu.org>\n \n \t* config/rs6000/mm_malloc.h: New file."}, {"sha": "bf39f283ad93c2cd836a1fc4b82c5c171d2f0979", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=6512c0f187d84dd046380aa53673dc5ae20795e3", "patch": "@@ -628,6 +628,36 @@ var_decl_component_p (tree var)\n   return SSA_VAR_P (inner);\n }\n \n+/* If the SIZE argument representing the size of an object is in a range\n+   of values of which exactly one is valid (and that is zero), return\n+   true, otherwise false.  */\n+\n+static bool\n+size_must_be_zero_p (tree size)\n+{\n+  if (integer_zerop (size))\n+    return true;\n+\n+  if (TREE_CODE (size) != SSA_NAME)\n+    return false;\n+\n+  wide_int min, max;\n+  enum value_range_type rtype = get_range_info (size, &min, &max);\n+  if (rtype != VR_ANTI_RANGE)\n+    return false;\n+\n+  tree type = TREE_TYPE (size);\n+  int prec = TYPE_PRECISION (type);\n+\n+  wide_int wone = wi::one (prec);\n+\n+  /* Compute the value of SSIZE_MAX, the largest positive value that\n+     can be stored in ssize_t, the signed counterpart of size_t.  */\n+  wide_int ssize_max = wi::lshift (wi::one (prec), prec - 1) - 1;\n+\n+  return wi::eq_p (min, wone) && wi::geu_p (max, ssize_max);\n+}\n+\n /* Fold function call to builtin mem{{,p}cpy,move}.  Return\n    false if no simplification can be made.\n    If ENDP is 0, return DEST (like memcpy).\n@@ -646,8 +676,9 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n   tree destvar, srcvar;\n   location_t loc = gimple_location (stmt);\n \n-  /* If the LEN parameter is zero, return DEST.  */\n-  if (integer_zerop (len))\n+  /* If the LEN parameter is a constant zero or in range where\n+     the only valid value is zero, return DEST.  */\n+  if (size_must_be_zero_p (len))\n     {\n       gimple *repl;\n       if (gimple_call_lhs (stmt))"}, {"sha": "5fb7094419f9472117a9a36f0278389847fbd1c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6512c0f187d84dd046380aa53673dc5ae20795e3", "patch": "@@ -1,3 +1,10 @@\n+2017-08-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/81908\n+\t* gcc.dg/tree-ssa/builtins-folding-gimple-2.c: New test.\n+\t* gcc.dg/tree-ssa/builtins-folding-gimple-3.c: New test.\n+\t* gcc.dg/tree-ssa/pr81908.c: New test.\n+\n 2017-08-24  Steven Munroe  <munroesj@gcc.gnu.org>\n \n \t* gcc.target/powerpc/mmx-packuswb-1.c [NO_WARN_X86_INTRINSICS]:"}, {"sha": "5bdb342e85b1d9cba9342a5c248f9044fdf183af", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtins-folding-gimple-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-2.c?ref=6512c0f187d84dd046380aa53673dc5ae20795e3", "patch": "@@ -0,0 +1,44 @@\n+/* PR 81908 - FAIL: gfortran.dg/alloc_comp_auto_array_2.f90 -O3 -g -m32\n+   Test to verify that calls to memcpy et al. where the size is in a range\n+   with just one valid value -- zero -- are eliminated.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+#define INT_MAX    __INT_MAX__\n+#define SHRT_MAX   __SHRT_MAX__\n+#define SIZE_MAX   __SIZE_MAX__\n+#define SSIZE_MAX  (SIZE_MAX / 2)\n+\n+typedef __PTRDIFF_TYPE__ ssize_t;\n+typedef __SIZE_TYPE__    size_t;\n+\n+#define UNIQUE_FUNCNAME(func, line) test_ ## func ## _ ## line\n+#define FUNCNAME(func, line)        UNIQUE_FUNCNAME (func, line)\n+\n+#define AR(func, type, min, max, val)\t\t\t\t\t\\\n+  void __attribute__ ((noclone, noinline))\t\t\t\t\\\n+  FUNCNAME (func, __LINE__) (char *d, const char *s, type n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    if ((type)min <= n && n <= (type)max)\t\t\t\t\\\n+      n = val;\t\t\t\t\t\t\t\t\\\n+    __builtin_ ## func (d, s, n);\t\t\t\t\t\\\n+  } typedef void DummyType\n+\n+AR (memcpy, short, 1, SHRT_MAX, 0);\n+AR (memcpy, int,   1, INT_MAX, 0);\n+AR (memcpy, size_t,  1, SSIZE_MAX, 0);\n+AR (memcpy, ssize_t, 1, SSIZE_MAX, 0);\n+\n+AR (memmove, short, 1, SHRT_MAX, 0);\n+AR (memmove, int,   1, INT_MAX, 0);\n+AR (memmove, ssize_t, 1, SSIZE_MAX, 0);\n+AR (memmove, ssize_t, 1, SSIZE_MAX, 0);\n+\n+AR (mempcpy, short, 1, SHRT_MAX, 0);\n+AR (mempcpy, int,   1, INT_MAX, 0);\n+AR (mempcpy, size_t,  1, SSIZE_MAX, 0);\n+AR (mempcpy, ssize_t, 1, SSIZE_MAX, 0);\n+\n+/* { dg-final { scan-tree-dump-not \"builtin_memcpy\" \"optimized\" } }\n+   { dg-final { scan-tree-dump-not \"builtin_memmove\" \"optimized\" } }\n+   { dg-final { scan-tree-dump-not \"builtin_mempcpy\" \"optimized\" } }  */"}, {"sha": "716be5b8094eb4012e606b9384b52411f49e5053", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtins-folding-gimple-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-3.c?ref=6512c0f187d84dd046380aa53673dc5ae20795e3", "patch": "@@ -0,0 +1,43 @@\n+/* PR 81908 - FAIL: gfortran.dg/alloc_comp_auto_array_2.f90 -O3 -g -m32\n+   Test to verify that calls to memcpy et al. where the size is in a range\n+   with more than one valid value are not eliminated (this test complements\n+   builtins-folding-gimple-2.c).\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+#define SHRT_MAX   __SHRT_MAX__\n+#define SHRT_MIN   (-SHRT_MAX - 1)\n+#define INT_MAX    __INT_MAX__\n+#define INT_MIN    (-INT_MAX - 1)\n+\n+#define UNIQUE_FUNCNAME(func, line) test_ ## func ## _ ## line\n+#define FUNCNAME(func, line)        UNIQUE_FUNCNAME (func, line)\n+\n+#define AR(func, type, min, max, val)\t\t\t\t\t\\\n+  void __attribute__ ((noclone, noinline))\t\t\t\t\\\n+  FUNCNAME (func, __LINE__) (char *d, const char *s, type n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    if ((type)min <= n && n <= (type)max)\t\t\t\t\\\n+      n = val;\t\t\t\t\t\t\t\t\\\n+    __builtin_ ## func (d, s, n);\t\t\t\t\t\\\n+  } typedef void DummyType\n+\n+AR (memcpy, short, SHRT_MIN, 0, 1);\n+AR (memcpy, short, SHRT_MIN, 1, 2);\n+AR (memcpy, short, 2, SHRT_MAX, 1);\n+\n+AR (memcpy, int, INT_MIN, 0, 1);\n+AR (memcpy, int, INT_MIN, 1, 2);\n+AR (memcpy, int, INT_MIN, 2, 3);\n+AR (memcpy, int, 2, INT_MAX, 1);\n+AR (memcpy, int, 2, INT_MAX, 1);\n+\n+AR (memmove, short, 2, SHRT_MAX, 1);\n+AR (memmove, int,   2, INT_MAX, 1);\n+\n+AR (mempcpy, short, 2, SHRT_MAX, 1);\n+AR (mempcpy, int,   2, INT_MAX, 1);\n+\n+/* { dg-final { scan-tree-dump-times \"builtin_memcpy\" 8 \"optimized\" } }\n+   { dg-final { scan-tree-dump-times \"builtin_memmove\" 2 \"optimized\" } }\n+   { dg-final { scan-tree-dump-times \"builtin_mempcpy\" 2 \"optimized\" } }  */"}, {"sha": "b1e316a527c3eea3f88c5ed06064b2b8eab863ac", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr81908.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512c0f187d84dd046380aa53673dc5ae20795e3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81908.c?ref=6512c0f187d84dd046380aa53673dc5ae20795e3", "patch": "@@ -0,0 +1,46 @@\n+/* PR 81908 - FAIL: gfortran.dg/alloc_comp_auto_array_2.f90 -O3 -g -m32\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#define SIZE_MAX __SIZE_MAX__\n+typedef __SIZE_TYPE__ size_t;\n+\n+void f0 (char *d, const char *s, size_t n)\n+{\n+  if (n > 0 && n <= SIZE_MAX / 2 - 1)\n+    n = 0;\n+\n+  __builtin_memcpy (d, s, n);\n+}\n+\n+void f1 (char *d, const char *s, size_t n)\n+{\n+  if (n > 0 && n <= SIZE_MAX / 2)\n+    n = 0;\n+\n+  __builtin_memcpy (d, s, n);   /* { dg-bogus \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void f2 (char *d, const char *s, size_t n)\n+{\n+  if (n > 0 && n <= SIZE_MAX / 2 + 1)\n+    n = 0;\n+\n+  __builtin_memcpy (d, s, n);\n+}\n+\n+void f3 (char *d, const char *s, size_t n)\n+{\n+  if (n > 0 && n <= SIZE_MAX - 1)\n+    n = 0;\n+\n+  __builtin_memcpy (d, s, n);   /* { dg-bogus \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void f4 (char *d, const char *s, size_t n)\n+{\n+  if (n > 0 && n <= SIZE_MAX)\n+    n = 0;\n+\n+  __builtin_memcpy (d, s, n);\n+}"}]}