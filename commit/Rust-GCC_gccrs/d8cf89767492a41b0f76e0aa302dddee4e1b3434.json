{"sha": "d8cf89767492a41b0f76e0aa302dddee4e1b3434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhjZjg5NzY3NDkyYTQxYjBmNzZlMGFhMzAyZGRkZWU0ZTFiMzQzNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-19T09:16:11Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-19T12:08:29Z"}, "message": "Fix operand_equal_p hash and copare of ODR_TYPE_REF\n\n\t* fold-const.c (operand_compare::operand_equal_p): More OBJ_TYPE_REF\n\tmatching to correct place; drop OEP_ADDRESS_OF for TOKEN, OBJECT and\n\tclass.\n\t(operand_compare::hash_operand): Hash ODR type for OBJ_TYPE_REF.", "tree": {"sha": "89170ad025fdac02e5267f0138e530a915d8c08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89170ad025fdac02e5267f0138e530a915d8c08f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8cf89767492a41b0f76e0aa302dddee4e1b3434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cf89767492a41b0f76e0aa302dddee4e1b3434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8cf89767492a41b0f76e0aa302dddee4e1b3434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cf89767492a41b0f76e0aa302dddee4e1b3434/comments", "author": null, "committer": null, "parents": [{"sha": "27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "397805d777946c7469d2af2832c685197a576d44", "filename": "gcc/fold-const.c", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8cf89767492a41b0f76e0aa302dddee4e1b3434/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8cf89767492a41b0f76e0aa302dddee4e1b3434/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d8cf89767492a41b0f76e0aa302dddee4e1b3434", "patch": "@@ -3346,24 +3346,6 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \t  flags &= ~OEP_ADDRESS_OF;\n \t  return OP_SAME (1) && OP_SAME (2);\n \n-\t/* Virtual table call.  */\n-\tcase OBJ_TYPE_REF:\n-\t  {\n-\t    if (!operand_equal_p (OBJ_TYPE_REF_EXPR (arg0),\n-\t\t\t\t  OBJ_TYPE_REF_EXPR (arg1), flags))\n-\t      return false;\n-\t    if (tree_to_uhwi (OBJ_TYPE_REF_TOKEN (arg0))\n-\t\t!= tree_to_uhwi (OBJ_TYPE_REF_TOKEN (arg1)))\n-\t      return false;\n-\t    if (!operand_equal_p (OBJ_TYPE_REF_OBJECT (arg0),\n-\t\t\t\t  OBJ_TYPE_REF_OBJECT (arg1), flags))\n-\t      return false;\n-\t    if (!types_same_for_odr (obj_type_ref_class (arg0),\n-\t\t\t\t     obj_type_ref_class (arg1)))\n-\t      return false;\n-\t    return true;\n-\t  }\n-\n \tdefault:\n \t  return false;\n \t}\n@@ -3442,6 +3424,23 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \t    return OP_SAME (0);\n \t  return false;\n \n+\tcase OBJ_TYPE_REF:\n+\t/* Virtual table reference.  */\n+\tif (!operand_equal_p (OBJ_TYPE_REF_EXPR (arg0),\n+\t\t\t      OBJ_TYPE_REF_EXPR (arg1), flags))\n+\t  return false;\n+\tflags &= ~OEP_ADDRESS_OF;\n+\tif (tree_to_uhwi (OBJ_TYPE_REF_TOKEN (arg0))\n+\t    != tree_to_uhwi (OBJ_TYPE_REF_TOKEN (arg1)))\n+\t  return false;\n+\tif (!operand_equal_p (OBJ_TYPE_REF_OBJECT (arg0),\n+\t\t\t      OBJ_TYPE_REF_OBJECT (arg1), flags))\n+\t  return false;\n+\tif (!types_same_for_odr (obj_type_ref_class (arg0),\n+\t\t\t\t obj_type_ref_class (arg1)))\n+\t  return false;\n+\treturn true;\n+\n \tdefault:\n \t  return false;\n \t}\n@@ -3861,11 +3860,23 @@ operand_compare::hash_operand (const_tree t, inchash::hash &hstate,\n \t      hash_operand (TARGET_EXPR_SLOT (t), hstate, flags);\n \t      return;\n \n-\t    /* Virtual table call.  */\n \t    case OBJ_TYPE_REF:\n+\t    /* Virtual table reference.  */\n \t      inchash::add_expr (OBJ_TYPE_REF_EXPR (t), hstate, flags);\n+\t      flags &= ~OEP_ADDRESS_OF;\n \t      inchash::add_expr (OBJ_TYPE_REF_TOKEN (t), hstate, flags);\n \t      inchash::add_expr (OBJ_TYPE_REF_OBJECT (t), hstate, flags);\n+\t      if (tree c = obj_type_ref_class (t))\n+\t\t{\n+\t\t  c = TYPE_NAME (TYPE_MAIN_VARIANT (c));\n+\t\t  /* We compute mangled names only when free_lang_data is run.\n+\t\t     In that case we can hash precisely.  */\n+\t\t  if (TREE_CODE (c) == TYPE_NAME\n+\t\t      && DECL_ASSEMBLER_NAME_SET_P (c))\n+\t\t    hstate.add_object\n+\t\t\t   (IDENTIFIER_HASH_VALUE\n+\t\t\t\t   (DECL_ASSEMBLER_NAME (c)));\n+\t\t}\n \t      return;\n \t    default:\n \t      break;"}]}