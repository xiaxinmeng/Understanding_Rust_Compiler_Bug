{"sha": "8bd37a2ec9774884a4609a7832b2293f62936962", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJkMzdhMmVjOTc3NDg4NGE0NjA5YTc4MzJiMjI5M2Y2MjkzNjk2Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-11-10T12:27:33Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-11-10T12:27:33Z"}, "message": "Enhance pool allocator\n\n\t* alloc-pool.h (allocate_raw): New function.\n\t(operator new (size_t, object_allocator<T> &a)): Use the\n\tfunction instead of object_allocator::allocate).\n\nFrom-SVN: r230105", "tree": {"sha": "e3f101b43dd441f9e25403f1f28c3ccfca3bc5cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3f101b43dd441f9e25403f1f28c3ccfca3bc5cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bd37a2ec9774884a4609a7832b2293f62936962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd37a2ec9774884a4609a7832b2293f62936962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd37a2ec9774884a4609a7832b2293f62936962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd37a2ec9774884a4609a7832b2293f62936962/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "103b87283f069b0e32af03b43bb11c4adba01365", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd37a2ec9774884a4609a7832b2293f62936962/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd37a2ec9774884a4609a7832b2293f62936962/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bd37a2ec9774884a4609a7832b2293f62936962", "patch": "@@ -1,3 +1,9 @@\n+2015-11-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* alloc-pool.h (allocate_raw): New function.\n+\t(operator new (size_t, object_allocator<T> &a)): Use the\n+\tfunction instead of object_allocator::allocate).\n+\n 2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* config/i386/sse.md (HALFMASKMODE): New attribute."}, {"sha": "38aff2849970829097c62a0f33420cc4049a8d21", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd37a2ec9774884a4609a7832b2293f62936962/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd37a2ec9774884a4609a7832b2293f62936962/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=8bd37a2ec9774884a4609a7832b2293f62936962", "patch": "@@ -477,12 +477,25 @@ class object_allocator\n     m_allocator.release_if_empty ();\n   }\n \n+\n+  /* Allocate memory for instance of type T and call a default constructor.  */\n+\n   inline T *\n   allocate () ATTRIBUTE_MALLOC\n   {\n     return ::new (m_allocator.allocate ()) T;\n   }\n \n+  /* Allocate memory for instance of type T and return void * that\n+     could be used in situations where a default constructor is not provided\n+     by the class T.  */\n+\n+  inline void *\n+  allocate_raw () ATTRIBUTE_MALLOC\n+  {\n+    return m_allocator.allocate ();\n+  }\n+\n   inline void\n   remove (T *object)\n   {\n@@ -528,7 +541,7 @@ template <typename T>\n inline void *\n operator new (size_t, object_allocator<T> &a)\n {\n-  return a.allocate ();\n+  return a.allocate_raw ();\n }\n \n /* Hashtable mapping alloc_pool names to descriptors.  */"}]}