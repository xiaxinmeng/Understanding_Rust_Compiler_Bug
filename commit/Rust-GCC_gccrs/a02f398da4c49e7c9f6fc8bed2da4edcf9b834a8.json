{"sha": "a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyZjM5OGRhNGM0OWU3YzlmNmZjOGJlZDJkYTRlZGNmOWI4MzRhOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-25T17:05:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-25T17:05:34Z"}, "message": "i386.md (isa): Add sse2, sse2_noavx, sse3, sse4 and sse4_noavx.\n\n\t* config/i386/i386.md (isa): Add sse2, sse2_noavx, sse3,\n\tsse4 and sse4_noavx.\n\t(enabled): Handle sse2, sse2_noavx, sse3, sse4 and sse4_noavx.\n\t(*pushdf_rex64): Change Y2 register constraint to x.\n\t(*movdf_internal_rex64): Ditto.\n\t(*zero_extendsidi2_rex64): Ditto.\n\t(*movdi_internal): Change Y2 register constraint to x\n\tand update \"isa\" attribute.\n\t(*pushdf): Ditto.\n\t(*movdf internal): Ditto.\n\t(zero_extendsidi2_1): Ditto.\n\t(*truncdfdf_mixed): Ditto.\n\t(*truncxfdf2_mixed): Ditto.\n\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Change Y2\n\tregister constraint to x.\n\t(*movv2sf_internal_rex64): Ditto.\n\t(*mov<mode>_internal): Change Y2 register constraint to x\n\tand add \"isa\" attribute.\n\t(*movv2sf_internal): Ditto.\n\t(*vec_extractv2si_1): Ditto.\n\t* config/i386/sse.md (\"vec_set<mode>_0): Change Y2 and Y4 register\n\tconstraints to x and update \"isa\" attribute.\n\t(*vec_interleave_highv2df): Change Y3 registerconstraint\n\tto x and update \"isa\" attribute.\n\t(*vec_interleave_lowv2df): Ditto.\n\t(*vec_concatv2df): Change Y2 register constraint to x and\n\tupdate \"isa\" attribute.\n\t(sse2_loadld): Ditto.\n\t(*vec_extractv2di_1): Ditto.\n\t(*vec_dupv4si): Ditto.\n\t(*vec_dupv2di): Ditto.\n\t(*vec_concatv4si): Ditto.\n\t(vec_concatv2di): Ditto.\n\t* config/i386/constraints.md (Y2): Remove.\n\t(Y3): Ditto.\n\t(Y4): Ditto.\n\nFrom-SVN: r178073", "tree": {"sha": "2c867549710477ec586e5824aef0b170a9471c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c867549710477ec586e5824aef0b170a9471c25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/comments", "author": null, "committer": null, "parents": [{"sha": "aa13dc3c9342c5857bdf3d2f6ce6c3af6d4fae9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa13dc3c9342c5857bdf3d2f6ce6c3af6d4fae9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa13dc3c9342c5857bdf3d2f6ce6c3af6d4fae9c"}], "stats": {"total": 269, "additions": 164, "deletions": 105}, "files": [{"sha": "1da50b432218585996321e01559a20b97056a293", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "patch": "@@ -1,3 +1,42 @@\n+2011-08-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (isa): Add sse2, sse2_noavx, sse3,\n+\tsse4 and sse4_noavx.\n+\t(enabled): Handle sse2, sse2_noavx, sse3, sse4 and sse4_noavx.\n+\t(*pushdf_rex64): Change Y2 register constraint to x.\n+\t(*movdf_internal_rex64): Ditto.\n+\t(*zero_extendsidi2_rex64): Ditto.\n+\t(*movdi_internal): Change Y2 register constraint to x\n+\tand update \"isa\" attribute.\n+\t(*pushdf): Ditto.\n+\t(*movdf internal): Ditto.\n+\t(zero_extendsidi2_1): Ditto.\n+\t(*truncdfdf_mixed): Ditto.\n+\t(*truncxfdf2_mixed): Ditto.\n+\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Change Y2\n+\tregister constraint to x.\n+\t(*movv2sf_internal_rex64): Ditto.\n+\t(*mov<mode>_internal): Change Y2 register constraint to x\n+\tand add \"isa\" attribute.\n+\t(*movv2sf_internal): Ditto.\n+\t(*vec_extractv2si_1): Ditto.\n+\t* config/i386/sse.md (\"vec_set<mode>_0): Change Y2 and Y4 register\n+\tconstraints to x and update \"isa\" attribute.\n+\t(*vec_interleave_highv2df): Change Y3 registerconstraint\n+\tto x and update \"isa\" attribute.\n+\t(*vec_interleave_lowv2df): Ditto.\n+\t(*vec_concatv2df): Change Y2 register constraint to x and\n+\tupdate \"isa\" attribute.\n+\t(sse2_loadld): Ditto.\n+\t(*vec_extractv2di_1): Ditto.\n+\t(*vec_dupv4si): Ditto.\n+\t(*vec_dupv2di): Ditto.\n+\t(*vec_concatv4si): Ditto.\n+\t(vec_concatv2di): Ditto.\n+\t* config/i386/constraints.md (Y2): Remove.\n+\t(Y3): Ditto.\n+\t(Y4): Ditto.\n+\n 2011-08-25  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* regrename.c (scan_rtx_reg, scan_rtx_address, build_def_use,\n@@ -18,7 +57,7 @@\n \n \t* config/avr/avr.c (reg_class_tab): Make local to\n \tavr_regno_reg_class.  Return smallest register class available.\n-\t\n+\n 2011-08-25  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (STR_PREFIX_P): New Define.\n@@ -36,13 +75,11 @@\n \t(gen_automata_option): Check for COLLAPSE_OPTION.\n \t(collapse_ndfa_insn_decl): New static variable.\n \t(add_collapse_ndfa_insn_decl, special_decl_p): New functions.\n-\t(find_arc): If insn is the collapse-ndfa insn, accept any arc we\n-\tfind.\n+\t(find_arc): If insn is the collapse-ndfa insn, accept any arc we find.\n \t(transform_insn_regexps): Call add_collapse_ndfa_insn_decl if\n \tnecessary.  Use normal_decls_num rather than decls_num, remove\n \ttest for special decls.\n-\t(create_alt_states, form_ainsn_with_same_reservs): Use\n-\tspecial_decl_p.\n+\t(create_alt_states, form_ainsn_with_same_reservs): Use special_decl_p.\n \t(make_automaton); Likewise.  Use the new advance_cycle_insn member\n \tof struct automaton.\n \t(create_composed_state): Disallow advance-cycle arcs if collapse_flag\n@@ -90,8 +127,7 @@\n 2011-08-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/50172\n-\t* config/i386/i386.c (ix86_expand_builtin): Convert to Pmode if\n-\tneeded.\n+\t* config/i386/i386.c (ix86_expand_builtin): Convert to Pmode if needed.\n \n 2011-08-24  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "e0b28622d17315829085b0eb490d0087d9122fe2", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "patch": "@@ -87,9 +87,6 @@\n \n ;; We use the Y prefix to denote any number of conditional register sets:\n ;;  z\tFirst SSE register.\n-;;  2\tSSE2 enabled\n-;;  3\tSSE3 enabled\n-;;  4\tSSE4_1 enabled\n ;;  i\tSSE2 inter-unit moves enabled\n ;;  m\tMMX inter-unit moves enabled\n ;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n@@ -99,15 +96,6 @@\n (define_register_constraint \"Yz\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n  \"First SSE register (@code{%xmm0}).\")\n \n-(define_register_constraint \"Y2\" \"TARGET_SSE2 ? SSE_REGS : NO_REGS\"\n- \"@internal Any SSE register, when SSE2 is enabled.\")\n-\n-(define_register_constraint \"Y3\" \"TARGET_SSE3 ? SSE_REGS : NO_REGS\"\n- \"@internal Any SSE register, when SSE3 is enabled.\")\n-\n-(define_register_constraint \"Y4\" \"TARGET_SSE4_1 ? SSE_REGS : NO_REGS\"\n- \"@internal Any SSE register, when SSE4_1 is enabled.\")\n-\n (define_register_constraint \"Yi\"\n  \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES ? SSE_REGS : NO_REGS\"\n  \"@internal Any SSE register, when SSE2 and inter-unit moves are enabled.\")"}, {"sha": "c5759e1c5d98a5b1f127ab5fd518c8d46a50f37c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 52, "deletions": 30, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "patch": "@@ -711,12 +711,19 @@\n (define_attr \"movu\" \"0,1\" (const_string \"0\"))\n \n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n-(define_attr \"isa\" \"base,noavx,avx,bmi2\"\n+(define_attr \"isa\" \"base,sse2,sse2_noavx,sse3,sse4,sse4_noavx,noavx,avx,bmi2\"\n   (const_string \"base\"))\n \n (define_attr \"enabled\" \"\"\n-  (cond [(eq_attr \"isa\" \"noavx\") (symbol_ref \"!TARGET_AVX\")\n+  (cond [(eq_attr \"isa\" \"sse2\") (symbol_ref \"TARGET_SSE2\")\n+\t (eq_attr \"isa\" \"sse2_noavx\")\n+\t   (symbol_ref \"TARGET_SSE2 && !TARGET_AVX\")\n+\t (eq_attr \"isa\" \"sse3\") (symbol_ref \"TARGET_SSE3\")\n+\t (eq_attr \"isa\" \"sse4\") (symbol_ref \"TARGET_SSE4_1\")\n+\t (eq_attr \"isa\" \"sse4_noavx\")\n+\t   (symbol_ref \"TARGET_SSE4_1 && !TARGET_AVX\")\n \t (eq_attr \"isa\" \"avx\") (symbol_ref \"TARGET_AVX\")\n+\t (eq_attr \"isa\" \"noavx\") (symbol_ref \"!TARGET_AVX\")\n \t (eq_attr \"isa\" \"bmi2\") (symbol_ref \"TARGET_BMI2\")\n \t]\n \t(const_int 1)))\n@@ -2153,9 +2160,9 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t  \"=r  ,o  ,*y,m*y,*y,*Y2,m  ,*Y2,*Y2,*x,m ,*x,*x,?*Y2,?*Ym\")\n+\t  \"=r  ,o  ,*y,m*y,*y,*x,m ,*x,*x,*x,m ,*x,*x,?*x,?*Ym\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t  \"riFo,riF,C ,*y ,m ,C  ,*Y2,*Y2,m  ,C ,*x,*x,m ,*Ym ,*Y2\"))]\n+\t  \"riFo,riF,C ,*y ,m ,C ,*x,*x,m ,C ,*x,*x,m ,*Ym,*x\"))]\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2198,9 +2205,12 @@\n     }\n }\n   [(set (attr \"isa\")\n-     (if_then_else (eq_attr \"alternative\" \"9,10,11,12\")\n-       (const_string \"noavx\")\n-       (const_string \"*\")))\n+     (cond [(eq_attr \"alternative\" \"5,6,7,8,13,14\")\n+\t      (const_string \"sse2\")\n+\t    (eq_attr \"alternative\" \"9,10,11,12\")\n+\t      (const_string \"noavx\")\n+\t   ]\n+           (const_string \"*\")))\n    (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"0,1\")\n \t      (const_string \"multi\")\n@@ -2770,7 +2780,7 @@\n \n (define_insn \"*pushdf_rex64\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<\")\n-\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Yd*rFm,Y2\"))]\n+\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Yd*rFm,x\"))]\n   \"TARGET_64BIT\"\n {\n   /* This insn should be already split before reg-stack.  */\n@@ -2786,13 +2796,14 @@\n \n (define_insn \"*pushdf\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<\")\n-\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Yd*rFo,Y2\"))]\n+\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Yd*rFo,x\"))]\n   \"!TARGET_64BIT\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n }\n-  [(set_attr \"type\" \"multi\")\n+  [(set_attr \"isa\" \"*,*,sse2\")\n+   (set_attr \"type\" \"multi\")\n    (set_attr \"unit\" \"i387,*,*\")\n    (set_attr \"mode\" \"DF,DI,DF\")])\n \n@@ -2976,9 +2987,9 @@\n \n (define_insn \"*movdf_internal_rex64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,?r,?m,?r,!o,Y2*x,Y2*x,Y2*x,m   ,Yi,r \")\n+\t\t\"=f,m,f,?r,?m,?r,!o,x,x,x,m,Yi,r \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm,f,G,rm,r ,F ,F ,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n+\t\t\"fm,f,G,rm,r ,F ,F ,C,x,m,x,r ,Yi\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3112,9 +3123,9 @@\n ;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,?Yd*r ,!o   ,Y2*x,Y2*x,Y2*x,m  \")\n+\t\t\"=f,m,f,?Yd*r ,!o   ,x,x,x,m,*x,*x,*x,m\")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm,f,G,Yd*roF,FYd*r,C   ,Y2*x,m   ,Y2*x\"))]\n+\t\t\"fm,f,G,Yd*roF,FYd*r,C,x,m,x,C ,*x,m ,*x\"))]\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3142,11 +3153,15 @@\n       return \"#\";\n \n     case 5:\n+    case 9:\n       return standard_sse_constant_opcode (insn, operands[1]);\n \n     case 6:\n     case 7:\n     case 8:\n+    case 10:\n+    case 11:\n+    case 12:\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_V2DF:\n@@ -3173,7 +3188,11 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi,sselog1,ssemov,ssemov,ssemov\")\n+  [(set (attr \"isa\")\n+     (if_then_else (eq_attr \"alternative\" \"5,6,7,8\")\n+       (const_string \"sse2\")\n+       (const_string \"*\")))\n+   (set_attr \"type\" \"fmov,fmov,fmov,multi,multi,sselog1,ssemov,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4\")\n        (const_string \"orig\")\n@@ -3191,12 +3210,12 @@\n \t       /* For SSE1, we have many fewer alternatives.  */\n \t       (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n \t\t (if_then_else\n-\t\t   (eq_attr \"alternative\" \"5,6\")\n+\t\t   (eq_attr \"alternative\" \"5,6,9,10\")\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"V2SF\"))\n \n \t       /* xorps is one byte shorter.  */\n-\t       (eq_attr \"alternative\" \"5\")\n+\t       (eq_attr \"alternative\" \"5,9\")\n \t\t (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t    (const_int 0))\n \t\t\t  (const_string \"V4SF\")\n@@ -3211,7 +3230,7 @@\n \t\t  chains, otherwise use short move to avoid extra work.\n \n \t\t  movaps encodes one byte shorter.  */\n-\t       (eq_attr \"alternative\" \"6\")\n+\t       (eq_attr \"alternative\" \"6,10\")\n \t\t (cond\n \t\t   [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t        (const_int 0))\n@@ -3224,7 +3243,7 @@\n \t       /* For architectures resolving dependencies on register\n \t\t  parts we may avoid extra work to zero out upper part\n \t\t  of register.  */\n-\t       (eq_attr \"alternative\" \"7\")\n+\t       (eq_attr \"alternative\" \"7,11\")\n \t\t (if_then_else\n \t\t   (ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n \t\t       (const_int 0))\n@@ -3445,7 +3464,7 @@\n })\n \n (define_insn \"*zero_extendsidi2_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"  \"=r,o,?*Ym,?*y,?*Yi,*Y2\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"  \"=r,o,?*Ym,?*y,?*Yi,*x\")\n \t(zero_extend:DI\n \t (match_operand:SI 1 \"nonimmediate_operand\" \"rm,0,r   ,m  ,r   ,m\")))]\n   \"TARGET_64BIT\"\n@@ -3470,7 +3489,7 @@\n \n ;; %%% Kill me once multi-word ops are sane.\n (define_insn \"zero_extendsidi2_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?o,?*Ym,?*y,?*Yi,*Y2\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?o,?*Ym,?*y,?*Yi,*x\")\n \t(zero_extend:DI\n \t (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm,r ,r   ,m  ,r   ,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -3483,7 +3502,8 @@\n    movd\\t{%1, %0|%0, %1}\n    %vmovd\\t{%1, %0|%0, %1}\n    %vmovd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"multi,multi,multi,mmxmov,mmxmov,ssemov,ssemov\")\n+  [(set_attr \"isa\" \"*,*,*,*,*,*,sse2\")\n+   (set_attr \"type\" \"multi,multi,multi,mmxmov,mmxmov,ssemov,ssemov\")\n    (set_attr \"prefix\" \"*,*,*,orig,orig,maybe_vex,maybe_vex\")\n    (set_attr \"mode\" \"SI,SI,SI,DI,DI,TI,TI\")])\n \n@@ -4115,10 +4135,10 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncdfsf_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,Y2 ,?f,?x,?*r\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,x ,?f,?x,?*r\")\n \t(float_truncate:SF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,Y2m,f ,f ,f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\"     \"=X,X  ,m ,m ,m\"))]\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,xm,f ,f ,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\"     \"=X,X ,m ,m ,m\"))]\n   \"TARGET_MIX_SSE_I387\"\n {\n   switch (which_alternative)\n@@ -4132,7 +4152,8 @@\n       return \"#\";\n     }\n }\n-  [(set_attr \"type\" \"fmov,ssecvt,multi,multi,multi\")\n+  [(set_attr \"isa\" \"*,sse2,*,*,*\")\n+   (set_attr \"type\" \"fmov,ssecvt,multi,multi,multi\")\n    (set_attr \"unit\" \"*,*,i387,i387,i387\")\n    (set_attr \"prefix\" \"orig,maybe_vex,orig,orig,orig\")\n    (set_attr \"mode\" \"SF\")])\n@@ -4219,7 +4240,7 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncxfdf2_mixed\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f,?Y2,?*r\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f,?x,?*r\")\n \t(float_truncate:DF\n \t  (match_operand:XF 1 \"register_operand\"   \"f ,f ,f  ,f\")))\n    (clobber (match_operand:DF 2 \"memory_operand\"   \"=X,m ,m  ,m\"))]\n@@ -4228,7 +4249,8 @@\n   gcc_assert (!which_alternative);\n   return output_387_reg_move (insn, operands);\n }\n-  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n+  [(set_attr \"isa\" \"*,*,sse2,*\")\n+   (set_attr \"type\" \"fmov,multi,multi,multi\")\n    (set_attr \"unit\" \"*,i387,i387,i387\")\n    (set_attr \"mode\" \"DF\")])\n \n@@ -4453,10 +4475,10 @@\n \n ;; Avoid vector decoded forms of the instruction.\n (define_peephole2\n-  [(match_scratch:DF 2 \"Y2\")\n+  [(match_scratch:DF 2 \"x\")\n    (set (match_operand:SWI48x 0 \"register_operand\" \"\")\n \t(fix:SWI48x (match_operand:DF 1 \"memory_operand\" \"\")))]\n-  \"TARGET_AVOID_VECTOR_DECODE && optimize_insn_for_speed_p ()\"\n+  \"TARGET_SSE2 && TARGET_AVOID_VECTOR_DECODE && optimize_insn_for_speed_p ()\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (fix:SWI48x (match_dup 2)))])\n "}, {"sha": "5e1864b3fda4e357b803abf672a754b6383ef217", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "patch": "@@ -66,9 +66,9 @@\n ;; movd instead of movq is required to handle broken assemblers.\n (define_insn \"*mov<mode>_internal_rex64\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t \"=rm,r,!?y,!y,!?y,m  ,!y ,*Y2,x,x ,m,r ,Yi\")\n+\t \"=rm,r,!?y,!y,!?y,m  ,!y ,*x,x,x ,m,r ,Yi\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t \"Cr ,m,C  ,!y,m  ,!?y,*Y2,!y ,C,xm,x,Yi,r\"))]\n+\t \"Cr ,m,C  ,!y,m  ,!?y,*x,!y ,C,xm,x,Yi,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -113,9 +113,9 @@\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t \"=!?y,!y,!?y,m  ,!y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,r  ,m\")\n+\t \"=!?y,!y,!?y,m  ,!y,*x,*x,*x ,m ,*x,*x,*x,m ,r  ,m\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t \"C   ,!y,m  ,!?y,*Y2,!y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n+\t \"C   ,!y,m  ,!?y,*x,!y,C ,*xm,*x,C ,*x,m ,*x,irm,r\"))]\n   \"!TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -135,9 +135,12 @@\n     #\n     #\"\n   [(set (attr \"isa\")\n-     (if_then_else (eq_attr \"alternative\" \"9,10,11,12\")\n-       (const_string \"noavx\")\n-       (const_string \"*\")))\n+     (cond [(eq_attr \"alternative\" \"4,5,6,7,8\")\n+\t      (const_string \"sse2\")\n+\t    (eq_attr \"alternative\" \"9,10,11,12\")\n+\t      (const_string \"noavx\")\n+\t   ]\n+           (const_string \"*\")))\n    (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"0\")\n \t      (const_string \"mmx\")\n@@ -183,9 +186,9 @@\n ;; movd instead of movq is required to handle broken assemblers.\n (define_insn \"*movv2sf_internal_rex64\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t \"=rm,r,!?y,!y,!?y,m  ,!y ,*Y2,x,x,x,m,r ,Yi\")\n+\t \"=rm,r,!?y,!y,!?y,m  ,!y,*x,x,x,x,m,r ,Yi\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t \"Cr ,m,C  ,!y,m  ,!?y,*Y2,!y ,C,x,m,x,Yi,r\"))]\n+\t \"Cr ,m,C  ,!y,m  ,!?y,*x,!y,C,x,m,x,Yi,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -232,9 +235,9 @@\n \n (define_insn \"*movv2sf_internal\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t \"=!?y,!y,!?y,m  ,!y ,*Y2,*x,*x,*x,m ,r  ,m\")\n+\t \"=!?y,!y,!?y,m  ,!y,*x,*x,*x,*x,m ,r  ,m\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t \"C   ,!y,m  ,!?y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n+\t \"C   ,!y,m  ,!?y,*x,!y,C ,*x,m ,*x,irm,r\"))]\n   \"!TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -250,7 +253,11 @@\n     %vmovlps\\t{%1, %0|%0, %1}\n     #\n     #\"\n-  [(set (attr \"type\")\n+  [(set (attr \"isa\")\n+     (if_then_else (eq_attr \"alternative\" \"4,5\")\n+       (const_string \"sse2\")\n+       (const_string \"*\")))\n+   (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"0\")\n \t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"1,2,3\")\n@@ -1388,9 +1395,9 @@\n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"*vec_extractv2si_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,Y2,Y2,x,y,x,r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,x,x,x,y,x,r\")\n \t(vec_select:SI\n-\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,0 ,Y2,0,o,o,o\")\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,0,x,0,o,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -1401,7 +1408,11 @@\n    #\n    #\n    #\"\n-  [(set_attr \"type\" \"mmxcvt,sselog1,sselog1,sselog1,mmxmov,ssemov,imov\")\n+  [(set (attr \"isa\")\n+     (if_then_else (eq_attr \"alternative\" \"1,2\")\n+       (const_string \"sse2\")\n+       (const_string \"*\")))\n+   (set_attr \"type\" \"mmxcvt,sselog1,sselog1,sselog1,mmxmov,ssemov,imov\")\n    (set_attr \"length_immediate\" \"*,*,1,*,*,*,*\")\n    (set_attr \"mode\" \"DI,TI,TI,V4SF,SI,SI,SI\")])\n "}, {"sha": "566845bb6b3e5e67b591491580f076b6197523d2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a02f398da4c49e7c9f6fc8bed2da4edcf9b834a8", "patch": "@@ -3534,13 +3534,13 @@\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"vec_set<mode>_0\"\n   [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n-\t  \"=Y4,Y2,Y2,x,x,x,Y4 ,x  ,m,m ,m\")\n+\t  \"=x,x,x ,x,x,x,x  ,x  ,m,m ,m\")\n \t(vec_merge:VI4F_128\n \t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n-\t  \" Y4,m ,*r,m,x,x,*rm,*rm,x,fF,*r\"))\n+\t  \" x,m,*r,m,x,x,*rm,*rm,x,fF,*r\"))\n \t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n-\t  \" C ,C ,C ,C,0,x,0  ,x  ,0,0 ,0\")\n+\t  \" C,C,C ,C,0,x,0  ,x  ,0,0 ,0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n@@ -3555,7 +3555,7 @@\n    #\n    #\n    #\"\n-  [(set_attr \"isa\" \"*,*,*,noavx,noavx,avx,noavx,avx,*,*,*\")\n+  [(set_attr \"isa\" \"sse4,sse2,sse2,noavx,noavx,avx,sse4_noavx,avx,*,*,*\")\n    (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"0,6,7\")\n \t      (const_string \"sselog\")\n@@ -3969,11 +3969,11 @@\n })\n \n (define_insn \"*vec_interleave_highv2df\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,Y3,x,x,m\")\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,x,x,x,m\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,x,o ,o,o,x\")\n-\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,x,1 ,0,x,0\"))\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,x,o,o,o,x\")\n+\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,x,1,0,x,0\"))\n \t  (parallel [(const_int 1)\n \t\t     (const_int 3)])))]\n   \"TARGET_SSE2 && ix86_vec_interleave_v2df_operator_ok (operands, 1)\"\n@@ -3984,7 +3984,7 @@\n    movlpd\\t{%H1, %0|%0, %H1}\n    vmovlpd\\t{%H1, %2, %0|%0, %2, %H1}\n    %vmovhpd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"isa\" \"noavx,avx,*,noavx,avx,*\")\n+  [(set_attr \"isa\" \"noavx,avx,sse3,noavx,avx,*\")\n   (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"prefix_data16\" \"*,*,*,1,*,1\")\n    (set_attr \"prefix\" \"orig,vex,maybe_vex,orig,vex,maybe_vex\")\n@@ -4071,11 +4071,11 @@\n })\n \n (define_insn \"*vec_interleave_lowv2df\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,Y3,x,x,o\")\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,x,x,x,o\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,x,m ,0,x,0\")\n-\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,x,1 ,m,m,x\"))\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,x,m,0,x,0\")\n+\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,x,1,m,m,x\"))\n \t  (parallel [(const_int 0)\n \t\t     (const_int 2)])))]\n   \"TARGET_SSE2 && ix86_vec_interleave_v2df_operator_ok (operands, 0)\"\n@@ -4086,7 +4086,7 @@\n    movhpd\\t{%2, %0|%0, %2}\n    vmovhpd\\t{%2, %1, %0|%0, %1, %2}\n    %vmovlpd\\t{%2, %H0|%H0, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,*,noavx,avx,*\")\n+  [(set_attr \"isa\" \"noavx,avx,sse3,noavx,avx,*\")\n    (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"prefix_data16\" \"*,*,*,1,*,1\")\n    (set_attr \"prefix\" \"orig,vex,maybe_vex,orig,vex,maybe_vex\")\n@@ -4606,10 +4606,10 @@\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*vec_concatv2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"     \"=Y2,x,Y2,x,Y2,x,x\")\n+  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,x,x,x,x,x,x\")\n \t(vec_concat:V2DF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0 ,x,0 ,x,m ,0,0\")\n-\t  (match_operand:DF 2 \"vector_move_operand\"  \" Y2,x,m ,m,C ,x,m\")))]\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,x,0,x,m,0,0\")\n+\t  (match_operand:DF 2 \"vector_move_operand\"  \" x,x,m,m,C,x,m\")))]\n   \"TARGET_SSE\"\n   \"@\n    unpcklpd\\t{%2, %0|%0, %2}\n@@ -4619,7 +4619,7 @@\n    %vmovsd\\t{%1, %0|%0, %1}\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,noavx,avx,*,noavx,noavx\")\n+  [(set_attr \"isa\" \"sse2_noavx,avx,sse2_noavx,avx,sse2,noavx,noavx\")\n    (set (attr \"type\")\n      (if_then_else\n        (eq_attr \"alternative\" \"0,1\")\n@@ -7123,11 +7123,11 @@\n   \"operands[2] = CONST0_RTX (V4SImode);\")\n \n (define_insn \"sse2_loadld\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=Y2,Yi,x,x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\"       \"=x,Yi,x,x,x\")\n \t(vec_merge:V4SI\n \t  (vec_duplicate:V4SI\n-\t    (match_operand:SI 2 \"nonimmediate_operand\" \"m  ,r ,m,x,x\"))\n-\t  (match_operand:V4SI 1 \"reg_or_0_operand\"     \"C  ,C ,C,0,x\")\n+\t    (match_operand:SI 2 \"nonimmediate_operand\" \"m ,r ,m,x,x\"))\n+\t  (match_operand:V4SI 1 \"reg_or_0_operand\"     \"C ,C ,C,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n@@ -7136,7 +7136,7 @@\n    movss\\t{%2, %0|%0, %2}\n    movss\\t{%2, %0|%0, %2}\n    vmovss\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,*,noavx,noavx,avx\")\n+  [(set_attr \"isa\" \"sse2,*,noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex,maybe_vex,orig,orig,vex\")\n    (set_attr \"mode\" \"TI,TI,V4SF,SF,SF\")])\n@@ -7232,9 +7232,9 @@\n    (set_attr \"mode\" \"V2SF,TI,TI,TI,DI\")])\n \n (define_insn \"*vec_extractv2di_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,Y2,Y2,Y2,x,x\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x,x,x,x\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0 ,Y2,o ,x,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0,x,o,x,o\")\n \t  (parallel [(const_int 1)])))]\n   \"!TARGET_64BIT && TARGET_SSE\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -7245,7 +7245,7 @@\n    %vmovq\\t{%H1, %0|%0, %H1}\n    movhlps\\t{%1, %0|%0, %1}\n    movlps\\t{%H1, %0|%0, %H1}\"\n-  [(set_attr \"isa\" \"*,noavx,avx,*,noavx,noavx\")\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx,sse2,noavx,noavx\")\n    (set_attr \"type\" \"ssemov,sseishft1,sseishft1,ssemov,ssemov,ssemov\")\n    (set_attr \"length_immediate\" \"*,1,1,*,*,*\")\n    (set_attr \"memory\" \"*,none,none,*,*,*\")\n@@ -7267,14 +7267,15 @@\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n (define_insn \"*vec_dupv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=Y2,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(vec_duplicate:V4SI\n-\t  (match_operand:SI 1 \"register_operand\" \" Y2,0\")))]\n+\t  (match_operand:SI 1 \"register_operand\" \" x,0\")))]\n   \"TARGET_SSE\"\n   \"@\n    pshufd\\t{$0, %1, %0|%0, %1, 0}\n    shufps\\t{$0, %0, %0|%0, %0, 0}\"\n-  [(set_attr \"type\" \"sselog1\")\n+  [(set_attr \"isa\" \"sse2,*\")\n+   (set_attr \"type\" \"sselog1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n@@ -7293,14 +7294,15 @@\n    (set_attr \"mode\" \"TI,TI,DF\")])\n \n (define_insn \"*vec_dupv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=Y2,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(vec_duplicate:V2DI\n-\t  (match_operand:DI 1 \"register_operand\" \" 0 ,0\")))]\n+\t  (match_operand:DI 1 \"register_operand\" \" 0,0\")))]\n   \"TARGET_SSE\"\n   \"@\n    punpcklqdq\\t%0, %0\n    movlhps\\t%0, %0\"\n-  [(set_attr \"type\" \"sselog1,ssemov\")\n+  [(set_attr \"isa\" \"sse2,*\")\n+   (set_attr \"type\" \"sselog1,ssemov\")\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n (define_insn \"*vec_concatv2si_sse4_1\"\n@@ -7356,31 +7358,31 @@\n    (set_attr \"mode\" \"V4SF,V4SF,DI,DI\")])\n \n (define_insn \"*vec_concatv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=Y2,x,x,x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\"       \"=x,x,x,x,x\")\n \t(vec_concat:V4SI\n-\t  (match_operand:V2SI 1 \"register_operand\"     \" 0 ,x,0,0,x\")\n-\t  (match_operand:V2SI 2 \"nonimmediate_operand\" \" Y2,x,x,m,m\")))]\n+\t  (match_operand:V2SI 1 \"register_operand\"     \" 0,x,0,0,x\")\n+\t  (match_operand:V2SI 2 \"nonimmediate_operand\" \" x,x,x,m,m\")))]\n   \"TARGET_SSE\"\n   \"@\n    punpcklqdq\\t{%2, %0|%0, %2}\n    vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\n    vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,noavx,noavx,avx\")\n+  [(set_attr \"isa\" \"sse2_noavx,avx,noavx,noavx,avx\")\n    (set_attr \"type\" \"sselog,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"prefix\" \"orig,vex,orig,orig,vex\")\n    (set_attr \"mode\" \"TI,TI,V4SF,V2SF,V2SF\")])\n \n ;; movd instead of movq is required to handle broken assemblers.\n (define_insn \"*vec_concatv2di_rex64\"\n   [(set (match_operand:V2DI 0 \"register_operand\"\n-\t  \"=Y4,x ,x ,Yi,!x,x,x,x,x\")\n+\t  \"=x,x ,x ,Yi,!x,x,x,x,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n-\t  \" 0 ,x ,xm,r ,*y,0,x,0,x\")\n+\t  \" 0,x ,xm,r ,*y,0,x,0,x\")\n \t  (match_operand:DI 2 \"vector_move_operand\"\n-\t  \" rm,rm,C ,C ,C ,x,x,m,m\")))]\n+\t  \"rm,rm,C ,C ,C ,x,x,m,m\")))]\n   \"TARGET_64BIT\"\n   \"@\n    pinsrq\\t{$1, %2, %0|%0, %2, 1}\n@@ -7392,7 +7394,7 @@\n    vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n    movhps\\t{%2, %0|%0, %2}\n    vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,*,*,*,noavx,avx,noavx,avx\")\n+  [(set_attr \"isa\" \"sse4_noavx,avx,*,*,*,noavx,avx,noavx,avx\")\n    (set (attr \"type\")\n      (if_then_else\n        (eq_attr \"alternative\" \"0,1,5,6\")\n@@ -7410,10 +7412,10 @@\n    (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,V2SF,V2SF\")])\n \n (define_insn \"vec_concatv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,?Y2,Y2,x,x,x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,?x,x,x,x,x,x\")\n \t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \"Y2m,*y , 0,x,0,0,x\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \" C , C ,Y2,x,x,m,m\")))]\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \"xm,*y,0,x,0,0,x\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \" C, C,x,x,x,m,m\")))]\n   \"!TARGET_64BIT && TARGET_SSE\"\n   \"@\n    %vmovq\\t{%1, %0|%0, %1}\n@@ -7423,7 +7425,7 @@\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\n    vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,*,noavx,avx,noavx,noavx,avx\")\n+  [(set_attr \"isa\" \"sse2,sse2,sse2_noavx,avx,noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov,ssemov,sselog,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex,orig,orig,vex,orig,orig,vex\")\n    (set_attr \"mode\" \"TI,TI,TI,TI,V4SF,V2SF,V2SF\")])"}]}