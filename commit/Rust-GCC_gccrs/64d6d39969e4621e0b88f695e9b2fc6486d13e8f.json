{"sha": "64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRkNmQzOTk2OWU0NjIxZTBiODhmNjk1ZTliMmZjNjQ4NmQxM2U4Zg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-08-05T18:27:46Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-08-05T18:27:46Z"}, "message": "constexpr.c (cxx_eval_store_expression): Remove hyphen from the spelling of \"constant-expression\" in diagnostic messages...\n\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_store_expression): Remove hyphen from\n\tthe spelling of \"constant-expression\" in diagnostic messages\n\tfor consistency.\n\t(cxx_eval_constant_expression): Same.\n\t(cxx_eval_outermost_constant_expr): Same.\n\t(potential_constant_expression_1): Same.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-cast.C: Avoid assuming (void*)1 is spelled\n\t1ul in diagnostics.  Remove hyphen from \"constant-expression.\"\n\t* g++.dg/cpp0x/constexpr-50060.C: Adjust.\n\t* g++.dg/cpp0x/static_assert3.C: Same.\n\t* g++.dg/cpp1y/constexpr-throw.C: Same.\n\t* g++.dg/template/nontype3.C: Same.\n\t* g++.dg/warn/overflow-warn-1.C: Same.\n\t* g++.dg/warn/overflow-warn-3.C: Same.\n\t* g++.dg/warn/overflow-warn-4.C: Same.\n\nFrom-SVN: r239176", "tree": {"sha": "eb59498ed44a484aa178719a4e9d7b4b484791ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb59498ed44a484aa178719a4e9d7b4b484791ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88fa5555a309e5d6c6171b957daaf2f800920869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fa5555a309e5d6c6171b957daaf2f800920869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88fa5555a309e5d6c6171b957daaf2f800920869"}], "stats": {"total": 71, "additions": 46, "deletions": 25}, "files": [{"sha": "b2307e928f33d948eddd1079a26f31ef624ae767", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -1,3 +1,12 @@\n+2016-08-05 Martin Sebor  <msebor@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_store_expression): Remove hyphen from\n+\tthe spelling of \"constant-expression\" in diagnostic messages\n+\tfor consistency.\n+\t(cxx_eval_constant_expression): Same.\n+\t(cxx_eval_outermost_constant_expr): Same.\n+\t(potential_constant_expression_1): Same.\n+\n 2016-08-05  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/68724"}, {"sha": "e7b08c8a9bec0d286f2046fb7fc3c534b32b1f4b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -3171,7 +3171,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       /* A constant-expression cannot modify objects from outside the\n \t constant-expression.  */\n       if (!ctx->quiet)\n-\terror (\"modification of %qE is not a constant-expression\", object);\n+\terror (\"modification of %qE is not a constant expression\", object);\n       *non_constant_p = true;\n       return t;\n     }\n@@ -4098,7 +4098,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t      {\n \t\tif (!ctx->quiet)\n \t\t  error_at (EXPR_LOC_OR_LOC (t, input_location),\n-\t\t\t    \"a reinterpret_cast is not a constant-expression\");\n+\t\t\t    \"a reinterpret_cast is not a constant expression\");\n \t\t*non_constant_p = true;\n \t\treturn t;\n \t      }\n@@ -4140,7 +4140,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\tif (!ctx->quiet)\n \t\t  error_at (EXPR_LOC_OR_LOC (t, input_location),\n \t\t\t    \"%<reinterpret_cast<%T>(%E)%> is not \"\n-\t\t\t    \"a constant-expression\",\n+\t\t\t    \"a constant expression\",\n \t\t\t    type, op);\n \t\t*non_constant_p = true;\n \t\treturn t;\n@@ -4202,7 +4202,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n     case OFFSET_REF:\n       if (!ctx->quiet)\n         error_at (EXPR_LOC_OR_LOC (t, input_location),\n-\t\t  \"expression %qE is not a constant-expression\", t);\n+\t\t  \"expression %qE is not a constant expression\", t);\n       *non_constant_p = true;\n       break;\n \n@@ -4283,7 +4283,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t     so for now just fail.  */\n \t  if (!ctx->quiet)\n \t    error_at (EXPR_LOCATION (t),\n-\t\t      \"statement is not a constant-expression\");\n+\t\t      \"statement is not a constant expression\");\n \t}\n       else\n \tinternal_error (\"unexpected expression %qE of kind %s\", t,\n@@ -4370,7 +4370,7 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n     {\n       if (!allow_non_constant)\n \terror (\"conversion from pointer type %qT \"\n-\t       \"to arithmetic type %qT in a constant-expression\",\n+\t       \"to arithmetic type %qT in a constant expression\",\n \t       TREE_TYPE (TREE_OPERAND (r, 0)), TREE_TYPE (r));\n       non_constant_p = true;\n     }\n@@ -5068,7 +5068,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     case AT_ENCODE_EXPR:\n     fail:\n       if (flags & tf_error)\n-        error (\"expression %qE is not a constant-expression\", t);\n+\terror (\"expression %qE is not a constant expression\", t);\n       return false;\n \n     case TYPEID_EXPR:\n@@ -5229,7 +5229,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \tif (integer_zerop (denom))\n \t  {\n \t    if (flags & tf_error)\n-\t      error (\"division by zero is not a constant-expression\");\n+\t      error (\"division by zero is not a constant expression\");\n \t    return false;\n \t  }\n \telse\n@@ -5334,7 +5334,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t{\n \t  if (flags & tf_error)\n \t    error_at (location_of (t),\n-\t\t      \"%<delete[]%> is not a constant-expression\");\n+\t\t      \"%<delete[]%> is not a constant expression\");\n \t  return false;\n \t}\n       /* Fall through.  */\n@@ -5357,7 +5357,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t\t\t\t\t     want_rval, strict, tf_none))\n \t  return true;\n       if (flags & tf_error)\n-        error (\"expression %qE is not a constant-expression\", t);\n+\terror (\"expression %qE is not a constant expression\", t);\n       return false;\n \n     case VEC_INIT_EXPR:\n@@ -5385,7 +5385,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \tif (breaks (target) || continues (target))\n \t  return true;\n \tif (flags & tf_error)\n-\t  error (\"%<goto%> is not a constant-expression\");\n+\t  error (\"%<goto%> is not a constant expression\");\n \treturn false;\n       }\n "}, {"sha": "3c1fbf012cdbd4cc89ce95ea71a8d2ac826035b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -1,3 +1,15 @@\n+2016-08-05 Martin Sebor  <msebor@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-cast.C: Avoid assuming (void*)1 is spelled\n+\t1ul in diagnostics.  Remove hyphen from \"constant-expression.\"\n+\t* g++.dg/cpp0x/constexpr-50060.C: Adjust.\n+\t* g++.dg/cpp0x/static_assert3.C: Same.\n+\t* g++.dg/cpp1y/constexpr-throw.C: Same.\n+\t* g++.dg/template/nontype3.C: Same.\n+\t* g++.dg/warn/overflow-warn-1.C: Same.\n+\t* g++.dg/warn/overflow-warn-3.C: Same.\n+\t* g++.dg/warn/overflow-warn-4.C: Same.\n+\n 2016-08-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/plugin/diagnostic-test-string-literals-1.c: New file."}, {"sha": "d2df08e7ca935e4419929e4e3cba2db6c0adf8ce", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-50060.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -12,7 +12,7 @@ struct S\n \n struct T\n {\n-  constexpr T (double a) : y {}, x ((y = 1, 0.8125)) {}\t// { dg-error \"is not a constant-expression\" \"T\" { target { ! c++14 } } }\n+  constexpr T (double a) : y {}, x ((y = 1, 0.8125)) {}\t// { dg-error \"is not a constant expression\" \"T\" { target { ! c++14 } } }\n   double x;\n   int y;\n };"}, {"sha": "bab6ec3ee45690ec752852a8afba778f3741110f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-cast.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -8,7 +8,7 @@ int i;\n constexpr void *q = reinterpret_cast<void*>(&i);    // { dg-error \"\" \"bug c++/49171\" { xfail *-*-*-* } }\n \n constexpr void *r0 = reinterpret_cast<void*>(1);    // { dg-error \"not a constant expression\" }\n-constexpr void *r1 = reinterpret_cast<void*>(sizeof 'x');  // { dg-error \".reinterpret_cast<void\\\\*>\\\\(1ul\\\\). is not a constant-expression\" }\n+constexpr void *r1 = reinterpret_cast<void*>(sizeof 'x');  // { dg-error \".reinterpret_cast<void\\\\*>\\\\(1\\[ul\\]\\*\\\\). is not a constant expression\" }\n \n template <class T>\n constexpr bool f ()"}, {"sha": "91ed9ca990bcf18a0b5136eb245d5683ff64b55c", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert3.C?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -1,4 +1,4 @@\n // { dg-do compile { target c++11 } }\n static_assert(7 / 0, \"X\"); // { dg-error \"non-constant condition\" \"non-constant\" }\n // { dg-warning \"division by zero\" \"zero\" { target *-*-* } 2 }\n-// { dg-error \"division by zero is not a constant-expression\" \"not a constant\" { target *-*-* } 2 }\n+// { dg-error \"division by zero is not a constant expression\" \"not a constant\" { target *-*-* } 2 }"}, {"sha": "eed07205efb0dc63f707868ea18d12df48f38ab2", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-throw.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -8,25 +8,25 @@ constexpr void f1() {\n constexpr void f2() {\n   if (true)\n     throw;\n-} // { dg-error \"not a constant-expression\" }\n+} // { dg-error \"not a constant expression\" }\n \n constexpr void f3() {\n   if (false)\n     ;\n   else\n     throw;\n-}// { dg-error \"not a constant-expression\" }\n+}// { dg-error \"not a constant expression\" }\n \n constexpr void f4() {\n   throw;\n-}// { dg-error \"not a constant-expression\" }\n+}// { dg-error \"not a constant expression\" }\n \n constexpr int fun(int n) {\n   switch (n) {\n   case 0:\n     return 1;\n   default:\n-    throw; // { dg-error \"not a constant-expression\" }\n+    throw; // { dg-error \"not a constant expression\" }\n   }\n }\n "}, {"sha": "1899ed05cb561be71a4dc1dcca0c332b526d23fd", "filename": "gcc/testsuite/g++.dg/template/nontype3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -31,8 +31,8 @@ template <int PI[1]>\n void dep10(foo< PI[0] > *); // { dg-error \"\" \"integral or enumeration\" }\n \n template <int I>\n-void dep11(foo< *&I > *); // { dg-error \"\" \"constant-expression\" }\n+void dep11(foo< *&I > *); // { dg-error \"\" \"constant expression\" }\n \n template <int I>\n-void dep12(foo< (&I)[4] > *); // { dg-error \"\" \"constant-expression\" }\n+void dep12(foo< (&I)[4] > *); // { dg-error \"\" \"constant expression\" }\n "}, {"sha": "995e7dfd65db010d66f572f4eba0a3ade9b76dfe", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -130,7 +130,7 @@ h2i (int x)\n /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 32 } */\n /* { dg-warning \"invalid conversion from\" \"convert\" { target *-*-* } 56 } */\n /* { dg-warning \"invalid conversion from\" \"convert\" { target c++11 } 58 } */\n+/* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } 65 } */\n /* { dg-error \"is not a constant expression\" \"const\" { target *-*-* } 65 } */\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 65 } */\n /* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } 32 } */\n /* { dg-error \"is not a constant expression\" \"division\" { target c++ } 32 } */"}, {"sha": "62879590d04ef4aa38edb3a0f88240dca2017b14", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -65,7 +65,7 @@ g (int i)\n   switch (i)\n     {\n     case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n-      ;  /* { dg-error \"is not a constant expression\" \"const\" { target *-*-* } 67 }  */\n+      ;  /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } 67 }  */\n     case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n       /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 69 } */\n       ;\n@@ -131,6 +131,6 @@ h2i (int x)\n /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 19 } */\n /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 32 } */\n /* { dg-warning \"invalid conversion from\" \"convert\" { target c++11 } 60 } */\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 67 } */\n+/* { dg-error \"not a constant expression\" \"constant\" { target *-*-*-* } 67 } */\n /* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } 32 } */\n /* { dg-error \"is not a constant expression\" \"division\" { target c++ } 32 } */"}, {"sha": "35f20b84b998bb99e3d75d6442755478ecc1db15", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d6d39969e4621e0b88f695e9b2fc6486d13e8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C?ref=64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "patch": "@@ -68,7 +68,7 @@ g (int i)\n   switch (i)\n     {\n     case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n-      ;  /* { dg-error \"is not a constant expression\" \"const\" { target *-*-* } 70 } */\n+      ;  /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } 70 } */\n     case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n       /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 72 } */\n       ;\n@@ -134,6 +134,6 @@ h2i (int x)\n /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 19 } */\n /* { dg-error \"invalid conversion from\" \"convert\" { target c++11 } 63 } */\n /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 34 } */\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 70 } */\n+/* { dg-error \"is not a constant expression\" \"const\" { target *-*-*-* } 70 } */\n /* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } 34 } */\n /* { dg-error \"is not a constant expression\" \"division\" { target c++ } 34 } */"}]}