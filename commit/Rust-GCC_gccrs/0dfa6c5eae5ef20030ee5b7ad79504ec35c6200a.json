{"sha": "0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmYTZjNWVhZTVlZjIwMDMwZWU1YjdhZDc5NTA0ZWMzNWM2MjAwYQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-10-07T20:44:28Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-10-07T20:44:28Z"}, "message": "s390-protos.h (s390_narrow_logical_operator): Add.\n\n\t* config/s390/s390-protos.h (s390_narrow_logical_operator): Add.\n\t* config/s390/s390.c (s390_narrow_logical_operator): New function.\n\t(s390_extra_constraint_str): Add 'A' constraints.\n\t(s390_const_ok_for_constraint_p): Add 'Nx' constraints.\n\t* config/s390/s390.h (EXTRA_MEMORY_CONSTRAINT): Add 'A' constraint.\n\t(CONSTRAINT_LEN): Likewise.\n\t* config/s390/s390.md (\"*anddi3\"): Add NI alternative and splitter.\n\t(\"*andsi3_zarch\", \"*andsi3_esa\"): Likewise.\n\t(\"*andhi3_zarch\", \"*andhi3_esa\"): Likewise.\n\t(\"*iordi3\"): Add OI alternative and splitter.\n\t(\"*iorsi3_zarch\", \"*iorsi3_esa\"): Likewise.\n\t(\"*iorhi3_zarch\", \"*iorhi3_esa\"): Likewise.\n\t(\"*xordi3\"): Add XI alternative and splitter.\n\t(\"*xorsi3\", \"*xorhi3\"): Likewise.\n\nFrom-SVN: r88705", "tree": {"sha": "834b4abb8626781a6fd346b0a95289716ac8df5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/834b4abb8626781a6fd346b0a95289716ac8df5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/comments", "author": null, "committer": null, "parents": [{"sha": "82e79986482a13c271c28512a4196aadfddcd8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e79986482a13c271c28512a4196aadfddcd8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e79986482a13c271c28512a4196aadfddcd8f6"}], "stats": {"total": 300, "additions": 235, "deletions": 65}, "files": [{"sha": "274b882d3711d2a16863c0996cdc79aab4d45460", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "patch": "@@ -1,3 +1,20 @@\n+2004-10-07  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_narrow_logical_operator): Add.\n+\t* config/s390/s390.c (s390_narrow_logical_operator): New function.\n+\t(s390_extra_constraint_str): Add 'A' constraints.\n+\t(s390_const_ok_for_constraint_p): Add 'Nx' constraints.\n+\t* config/s390/s390.h (EXTRA_MEMORY_CONSTRAINT): Add 'A' constraint.\n+\t(CONSTRAINT_LEN): Likewise.\n+\t* config/s390/s390.md (\"*anddi3\"): Add NI alternative and splitter.\n+\t(\"*andsi3_zarch\", \"*andsi3_esa\"): Likewise.\n+\t(\"*andhi3_zarch\", \"*andhi3_esa\"): Likewise.\n+\t(\"*iordi3\"): Add OI alternative and splitter.\n+\t(\"*iorsi3_zarch\", \"*iorsi3_esa\"): Likewise.\n+\t(\"*iorhi3_zarch\", \"*iorhi3_esa\"): Likewise.\n+\t(\"*xordi3\"): Add XI alternative and splitter.\n+\t(\"*xorsi3\", \"*xorhi3\"): Likewise.\n+\n 2004-10-07  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_function_rodata_section): New function."}, {"sha": "4e88c1d012379346be001ddc22ea3b43732accd7", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "patch": "@@ -87,6 +87,7 @@ extern rtx s390_emit_call (rtx, rtx, rtx, rtx);\n extern void s390_expand_logical_operator (enum rtx_code,\n \t\t\t\t\t  enum machine_mode, rtx *);\n extern bool s390_logical_operator_ok_p (rtx *);\n+extern void s390_narrow_logical_operator (enum rtx_code, rtx *, rtx *);\n extern bool s390_pool_operand (rtx);\n \n extern bool s390_output_addr_const_extra (FILE*, rtx);"}, {"sha": "08363c8577664a7ac0c56327533ceb5fdcaf772f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "patch": "@@ -1166,6 +1166,27 @@ s390_logical_operator_ok_p (rtx *operands)\n   return true;\n }\n \n+/* Narrow logical operation CODE of memory operand MEMOP with immediate\n+   operand IMMOP to switch from SS to SI type instructions.  */\n+\n+void\n+s390_narrow_logical_operator (enum rtx_code code, rtx *memop, rtx *immop)\n+{\n+  int def = code == AND ? -1 : 0;\n+  HOST_WIDE_INT mask;\n+  int part;\n+\n+  gcc_assert (GET_CODE (*memop) == MEM);\n+  gcc_assert (!MEM_VOLATILE_P (*memop));\n+\n+  mask = s390_extract_part (*immop, QImode, def);\n+  part = s390_single_part (*immop, GET_MODE (*memop), QImode, def);\n+  gcc_assert (part >= 0);\n+\n+  *memop = adjust_address (*memop, QImode, part);\n+  *immop = gen_int_mode (mask, QImode);\n+}\n+\n \n /* Change optimizations to be performed, depending on the\n    optimization level.\n@@ -1564,6 +1585,21 @@ s390_extra_constraint_str (rtx op, int c, const char * str)\n   if (c != str[0])\n     abort ();\n \n+  /* Check for offsettable variants of memory constraints.  */\n+  if (c == 'A')\n+    {\n+      /* Only accept non-volatile MEMs.  */\n+      if (!MEM_P (op) || MEM_VOLATILE_P (op))\n+\treturn 0;\n+\n+      if ((reload_completed || reload_in_progress)\n+\t  ? !offsettable_memref_p (op)\n+\t  : !offsettable_nonstrict_memref_p (op))\n+\treturn 0;\n+\n+      c = str[1];\n+    }\n+\n   switch (c)\n     {\n     case 'Q':\n@@ -1658,7 +1694,7 @@ s390_const_ok_for_constraint_p (HOST_WIDE_INT value,\n {\n   enum machine_mode mode, part_mode;\n   int def;\n-  unsigned char part;\n+  int part, part_goal;\n \n   if (c != str[0])\n     abort ();\n@@ -1682,7 +1718,10 @@ s390_const_ok_for_constraint_p (HOST_WIDE_INT value,\n       return value == 2147483647;\n \n     case 'N':\n-      part = str[1] - '0';\n+      if (str[1] == 'x')\n+\tpart_goal = -1;\n+      else\n+\tpart_goal = str[1] - '0';\n \n       switch (str[2])\n \t{\n@@ -1709,7 +1748,10 @@ s390_const_ok_for_constraint_p (HOST_WIDE_INT value,\n       if (GET_MODE_SIZE (mode) <= GET_MODE_SIZE (part_mode))\n \treturn 0;\n \n-      if (s390_single_part (GEN_INT (value), mode, part_mode, def) != part)\n+      part = s390_single_part (GEN_INT (value), mode, part_mode, def);\n+      if (part < 0)\n+\treturn 0;\n+      if (part_goal != -1 && part_goal != part)\n \treturn 0;\n \n       break;"}, {"sha": "cbb28e8fc7d756c8ff3211947d13c4a343beaf8c", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "patch": "@@ -542,13 +542,14 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n \n #define EXTRA_CONSTRAINT_STR(OP, C, STR)                               \t\\\n   s390_extra_constraint_str ((OP), (C), (STR))\n-#define EXTRA_MEMORY_CONSTRAINT(C, STR)\t\t\t\t\\\n-  ((C) == 'Q' || (C) == 'R' || (C) == 'S' || (C) == 'T')\n-#define EXTRA_ADDRESS_CONSTRAINT(C, STR)\t\t\t\\\n+#define EXTRA_MEMORY_CONSTRAINT(C, STR)\t\t\t\t\t\\\n+  ((C) == 'Q' || (C) == 'R' || (C) == 'S' || (C) == 'T' || (C) == 'A')\n+#define EXTRA_ADDRESS_CONSTRAINT(C, STR)\t\t\t\t\\\n   ((C) == 'U' || (C) == 'W' || (C) == 'Y')\n \n-#define CONSTRAINT_LEN(C, STR)                                   \\\n-  ((C) == 'N' ? 5 : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n+#define CONSTRAINT_LEN(C, STR)                                  \t\\\n+  ((C) == 'N' ? 5 : \t\t\t\t\t\t\t\\\n+   (C) == 'A' ? 2 : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n \n /* Stack layout and calling conventions.  */\n "}, {"sha": "7d59f0c0f7ec2eb7804a6d9d8b0ef2a050e5288c", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 166, "deletions": 57, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=0dfa6c5eae5ef20030ee5b7ad79504ec35c6200a", "patch": "@@ -34,17 +34,21 @@\n ;;         (-524288..524287) for long displacement\n ;;    M -- Constant integer with a value of 0x7fffffff.\n ;;    N -- Multiple letter constraint followed by 4 parameter letters.\n-;;         0..9:  number of the part counting from most to least significant\n-;;         H,Q:   mode of the part\n-;;         D,S,H: mode of the containing operand\n-;;         0,F:   value of the other parts (F - all bits set)\n+;;         0..9,x:  number of the part counting from most to least significant\n+;;         H,Q:     mode of the part\n+;;         D,S,H:   mode of the containing operand\n+;;         0,F:     value of the other parts (F - all bits set)\n ;;\n ;;         The constraint matches if the specified part of a constant\n-;;         has a value different from its other parts.\n+;;         has a value different from its other parts.  If the letter x\n+;;         is specified instead of a part number, the constraint matches\n+;;         if there is any single part with non-default value.\n ;;    Q -- Memory reference without index register and with short displacement.\n ;;    R -- Memory reference with index register and short displacement.\n ;;    S -- Memory reference without index register but with long displacement.\n ;;    T -- Memory reference with index register and long displacement.\n+;;    A -- Multiple letter constraint followed by Q, R, S, or T:\n+;;         Offsettable memory reference of type specified by second letter.\n ;;    U -- Pointer with short displacement.\n ;;    W -- Pointer with long displacement.\n ;;    Y -- Shift count operand.\n@@ -5134,11 +5138,11 @@\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n (define_insn \"*anddi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,Q\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,AQ,Q\")\n         (and:DI (match_operand:DI 1 \"nonimmediate_operand\"\n-                                    \"%d,o,0,0,0,0,0,0,0\")\n+                                    \"%d,o,0,0,0,0,0,0,0,0\")\n                 (match_operand:DI 2 \"general_operand\"\n-                                    \"M,M,N0HDF,N1HDF,N2HDF,N3HDF,d,m,Q\")))\n+                                    \"M,M,N0HDF,N1HDF,N2HDF,N3HDF,d,m,NxQDF,Q\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -5150,8 +5154,19 @@\n    nill\\t%0,%j2\n    ngr\\t%0,%2\n    ng\\t%0,%2\n+   #\n    nc\\t%O0(8,%R0),%2\"\n-  [(set_attr \"op_type\" \"RRE,RXE,RI,RI,RI,RI,RRE,RXY,SS\")])\n+  [(set_attr \"op_type\" \"RRE,RXE,RI,RI,RI,RI,RRE,RXY,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_operand\" \"\")\n+        (and:DI (match_dup 0) (match_operand:DI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (AND, &operands[0], &operands[1]);\")\n \n (define_expand \"anddi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -5195,9 +5210,11 @@\n   [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n \n (define_insn \"*andsi3_zarch\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,Q\")\n-        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%d,o,0,0,0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"M,M,N0HSF,N1HSF,d,R,T,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,AQ,Q\")\n+        (and:SI (match_operand:SI 1 \"nonimmediate_operand\"\n+                                    \"%d,o,0,0,0,0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\"\n+                                    \"M,M,N0HSF,N1HSF,d,R,T,NxQSF,Q\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -5208,20 +5225,32 @@\n    nr\\t%0,%2\n    n\\t%0,%2\n    ny\\t%0,%2\n+   #\n    nc\\t%O0(4,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RR,RX,RXY,SS\")])\n+  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RR,RX,RXY,SI,SS\")])\n \n (define_insn \"*andsi3_esa\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n-        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"d,R,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n+        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"d,R,NxQSF,Q\")))\n    (clobber (reg:CC 33))]\n   \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    nr\\t%0,%2\n    n\\t%0,%2\n+   #\n    nc\\t%O0(4,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RX,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_operand\" \"\")\n+        (and:SI (match_dup 0) (match_operand:SI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (AND, &operands[0], &operands[1]);\")\n \n (define_expand \"andsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n@@ -5236,27 +5265,39 @@\n ;\n \n (define_insn \"*andhi3_zarch\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n-        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"d,n,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n+        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,n,NxQHF,Q\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    nr\\t%0,%2\n    nill\\t%0,%x2\n+   #\n    nc\\t%O0(2,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RR,RI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RI,SI,SS\")])\n \n (define_insn \"*andhi3_esa\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,Q\")\n-        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"d,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,AQ,Q\")\n+        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,NxQHF,Q\")))\n    (clobber (reg:CC 33))]\n   \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    nr\\t%0,%2\n+   #\n    nc\\t%O0(2,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RR,SS\")])\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"s_operand\" \"\")\n+        (and:HI (match_dup 0) (match_operand:HI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (AND, &operands[0], &operands[1]);\")\n \n (define_expand \"andhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n@@ -5339,10 +5380,10 @@\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n (define_insn \"*iordi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,Q\")\n-        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0,0,0,0,0,0\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,AQ,Q\")\n+        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0,0,0,0,0,0,0\")\n                 (match_operand:DI 2 \"general_operand\"\n-                                    \"N0HD0,N1HD0,N2HD0,N3HD0,d,m,Q\")))\n+                                    \"N0HD0,N1HD0,N2HD0,N3HD0,d,m,NxQD0,Q\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -5352,8 +5393,19 @@\n    oill\\t%0,%i2\n    ogr\\t%0,%2\n    og\\t%0,%2\n+   #\n    oc\\t%O0(8,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RI,RI,RI,RI,RRE,RXY,SS\")])\n+  [(set_attr \"op_type\"  \"RI,RI,RI,RI,RRE,RXY,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_operand\" \"\")\n+        (ior:DI (match_dup 0) (match_operand:DI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (ior:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (IOR, &operands[0], &operands[1]);\")\n \n (define_expand \"iordi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -5395,9 +5447,9 @@\n   [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n \n (define_insn \"*iorsi3_zarch\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,Q\")\n-        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0,0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"N0HS0,N1HS0,d,R,T,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,AQ,Q\")\n+        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0,0,0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"N0HS0,N1HS0,d,R,T,NxQS0,Q\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -5406,20 +5458,32 @@\n    or\\t%0,%2\n    o\\t%0,%2\n    oy\\t%0,%2\n+   #\n    oc\\t%O0(4,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RI,RI,RR,RX,RXY,SS\")])\n+  [(set_attr \"op_type\"  \"RI,RI,RR,RX,RXY,SI,SS\")])\n \n (define_insn \"*iorsi3_esa\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n-        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"d,R,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n+        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"d,R,NxQS0,Q\")))\n    (clobber (reg:CC 33))]\n   \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    or\\t%0,%2\n    o\\t%0,%2\n+   #\n    oc\\t%O0(4,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RX,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_operand\" \"\")\n+        (ior:SI (match_dup 0) (match_operand:SI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (ior:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (IOR, &operands[0], &operands[1]);\")\n \n (define_expand \"iorsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n@@ -5434,27 +5498,39 @@\n ;\n \n (define_insn \"*iorhi3_zarch\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n-        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"d,n,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n+        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,n,NxQH0,Q\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    or\\t%0,%2\n    oill\\t%0,%x2\n+   #\n    oc\\t%O0(2,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RR,RI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RI,SI,SS\")])\n \n (define_insn \"*iorhi3_esa\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,Q\")\n-        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"d,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,AQ,Q\")\n+        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,NxQH0,Q\")))\n    (clobber (reg:CC 33))]\n   \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    or\\t%0,%2\n+   #\n    oc\\t%O0(2,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RR,SS\")])\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"s_operand\" \"\")\n+        (ior:HI (match_dup 0) (match_operand:HI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (ior:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (IOR, &operands[0], &operands[1]);\")\n \n (define_expand \"iorhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n@@ -5537,16 +5613,27 @@\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n (define_insn \"*xordi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n-        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                (match_operand:DI 2 \"general_operand\" \"d,m,Q\")))\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n+        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                (match_operand:DI 2 \"general_operand\" \"d,m,NxQD0,Q\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n   \"@\n    xgr\\t%0,%2\n    xg\\t%0,%2\n+   #\n    xc\\t%O0(8,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY,SS\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_operand\" \"\")\n+        (xor:DI (match_dup 0) (match_operand:DI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (xor:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (XOR, &operands[0], &operands[1]);\")\n \n (define_expand \"xordi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -5588,17 +5675,28 @@\n   [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n \n (define_insn \"*xorsi3\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,Q\")\n-        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"d,R,T,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,AQ,Q\")\n+        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"d,R,T,NxQS0,Q\")))\n    (clobber (reg:CC 33))]\n   \"s390_logical_operator_ok_p (operands)\"\n   \"@\n    xr\\t%0,%2\n    x\\t%0,%2\n    xy\\t%0,%2\n+   #\n    xc\\t%O0(4,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RX,RXY,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_operand\" \"\")\n+        (xor:SI (match_dup 0) (match_operand:SI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (xor:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (XOR, &operands[0], &operands[1]);\")\n \n (define_expand \"xorsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n@@ -5613,15 +5711,26 @@\n ;\n \n (define_insn \"*xorhi3\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,Q\")\n-        (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"d,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,AQ,Q\")\n+        (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,NxQH0,Q\")))\n    (clobber (reg:CC 33))]\n   \"s390_logical_operator_ok_p (operands)\"\n   \"@\n    xr\\t%0,%2\n+   #\n    xc\\t%O0(2,%R0),%2\"\n-  [(set_attr \"op_type\"  \"RR,SS\")])\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"s_operand\" \"\")\n+        (xor:HI (match_dup 0) (match_operand:HI 1 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0) (xor:QI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC 33))])]\n+  \"s390_narrow_logical_operator (XOR, &operands[0], &operands[1]);\")\n \n (define_expand \"xorhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")"}]}