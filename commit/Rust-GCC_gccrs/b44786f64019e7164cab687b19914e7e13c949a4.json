{"sha": "b44786f64019e7164cab687b19914e7e13c949a4", "node_id": "C_kwDOANBUbNoAKGI0NDc4NmY2NDAxOWU3MTY0Y2FiNjg3YjE5OTE0ZTdlMTNjOTQ5YTQ", "commit": {"author": {"name": "chenglulu", "email": "chenglulu@loongson.cn", "date": "2021-11-27T06:42:57Z"}, "committer": {"name": "Chenghua Xu", "email": "paul.hua.gm@gmail.com", "date": "2022-03-29T09:43:32Z"}, "message": "LoongArch Port: gcc build\n\n2022-03-29  Chenghua Xu  <xuchenghua@loongson.cn>\n\t    Lulu Cheng  <chenglulu@loongson.cn>\n\ngcc/ChangeLog:\n\n\t* common/config/loongarch/loongarch-common.cc: New file.\n\t* config/loongarch/genopts/genstr.sh: New file.\n\t* config/loongarch/genopts/loongarch-strings: New file.\n\t* config/loongarch/genopts/loongarch.opt.in: New file.\n\t* config/loongarch/loongarch-str.h: New file.\n\t* config/loongarch/gnu-user.h: New file.\n\t* config/loongarch/linux.h: New file.\n\t* config/loongarch/loongarch-cpu.cc: New file.\n\t* config/loongarch/loongarch-cpu.h: New file.\n\t* config/loongarch/loongarch-def.c: New file.\n\t* config/loongarch/loongarch-def.h: New file.\n\t* config/loongarch/loongarch-driver.cc: New file.\n\t* config/loongarch/loongarch-driver.h: New file.\n\t* config/loongarch/loongarch-opts.cc: New file.\n\t* config/loongarch/loongarch-opts.h: New file.\n\t* config/loongarch/loongarch.opt: New file.\n\t* config/loongarch/t-linux: New file.\n\t* config/loongarch/t-loongarch: New file.\n\t* config.gcc: Add LoongArch support.\n\t* configure.ac: Add LoongArch support.\n\ncontrib/ChangeLog:\n\n\t* gcc_update (files_and_dependencies): Add\n\t  config/loongarch/loongarch.opt and config/loongarch/loongarch-str.h.", "tree": {"sha": "e76d6abd59f7213457cf95d3a8cfb5ee7d945e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e76d6abd59f7213457cf95d3a8cfb5ee7d945e3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b44786f64019e7164cab687b19914e7e13c949a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44786f64019e7164cab687b19914e7e13c949a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b44786f64019e7164cab687b19914e7e13c949a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44786f64019e7164cab687b19914e7e13c949a4/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChenghuaXu", "id": 87753117, "node_id": "MDQ6VXNlcjg3NzUzMTE3", "avatar_url": "https://avatars.githubusercontent.com/u/87753117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenghuaXu", "html_url": "https://github.com/ChenghuaXu", "followers_url": "https://api.github.com/users/ChenghuaXu/followers", "following_url": "https://api.github.com/users/ChenghuaXu/following{/other_user}", "gists_url": "https://api.github.com/users/ChenghuaXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenghuaXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenghuaXu/subscriptions", "organizations_url": "https://api.github.com/users/ChenghuaXu/orgs", "repos_url": "https://api.github.com/users/ChenghuaXu/repos", "events_url": "https://api.github.com/users/ChenghuaXu/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenghuaXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c0594ef8382754f9cd8869a0cfb2aa2dcc0f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c0594ef8382754f9cd8869a0cfb2aa2dcc0f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c0594ef8382754f9cd8869a0cfb2aa2dcc0f43"}], "stats": {"total": 2841, "additions": 2836, "deletions": 5}, "files": [{"sha": "641ce164775649a4c976b6dd8dc35b2fabf5f02b", "filename": "contrib/gcc_update", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -86,6 +86,8 @@ gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-cpus.in gcc/config/arm/parsecp\n gcc/config/c6x/c6x-tables.opt: gcc/config/c6x/c6x-isas.def gcc/config/c6x/genopt.sh\n gcc/config/c6x/c6x-sched.md: gcc/config/c6x/c6x-sched.md.in gcc/config/c6x/gensched.sh\n gcc/config/c6x/c6x-mult.md: gcc/config/c6x/c6x-mult.md.in gcc/config/c6x/genmult.sh\n+gcc/config/loongarch/loongarch-str.h: gcc/config/loongarch/genopts/genstr.sh gcc/config/loongarch/genopts/loongarch-string\n+gcc/config/loongarch/loongarch.opt: gcc/config/loongarch/genopts/genstr.sh gcc/config/loongarch/genopts/loongarch.opt.in\n gcc/config/m68k/m68k-tables.opt: gcc/config/m68k/m68k-devices.def gcc/config/m68k/m68k-isas.def gcc/config/m68k/m68k-microarchs.def gcc/config/m68k/genopt.sh\n gcc/config/mips/mips-tables.opt: gcc/config/mips/mips-cpus.def gcc/config/mips/genopt.sh\n gcc/config/rs6000/rs6000-tables.opt: gcc/config/rs6000/rs6000-cpus.def gcc/config/rs6000/genopt.sh"}, {"sha": "085d3d98f1cddb9e72be61f89d45de3a0b3a74d5", "filename": "gcc/common/config/loongarch/loongarch-common.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fcommon%2Fconfig%2Floongarch%2Floongarch-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fcommon%2Fconfig%2Floongarch%2Floongarch-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Floongarch%2Floongarch-common.cc?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,43 @@\n+/* Common hooks for LoongArch.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"flags.h\"\n+#include \"diagnostic-core.h\"\n+\n+#undef\tTARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE loongarch_option_optimization_table\n+\n+/* Set default optimization options.  */\n+static const struct default_options loongarch_option_optimization_table[] =\n+{\n+  { OPT_LEVELS_ALL, OPT_fasynchronous_unwind_tables, NULL, 1 },\n+  { OPT_LEVELS_NONE, 0, NULL, 0 }\n+};\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\tMASK_CHECK_ZERO_DIV\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "7b58e1314ff0dc57701a77a7433de1a6e263c259", "filename": "gcc/config.gcc", "status": "modified", "additions": 434, "deletions": 1, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -454,6 +454,13 @@ mips*-*-*)\n \textra_objs=\"frame-header-opt.o\"\n \textra_options=\"${extra_options} g.opt fused-madd.opt mips/mips-tables.opt\"\n \t;;\n+loongarch*-*-*)\n+\tcpu_type=loongarch\n+\textra_headers=\"larchintrin.h\"\n+\textra_objs=\"loongarch-c.o loongarch-builtins.o loongarch-cpu.o loongarch-opts.o loongarch-def.o\"\n+\textra_gcc_objs=\"loongarch-driver.o loongarch-cpu.o loongarch-opts.o loongarch-def.o\"\n+\textra_options=\"${extra_options} g.opt fused-madd.opt\"\n+\t;;\n nds32*)\n \tcpu_type=nds32\n \textra_headers=\"nds32_intrinsic.h nds32_isr.h nds32_init.inc\"\n@@ -2495,6 +2502,20 @@ riscv*-*-freebsd*)\n \t# automatically detect that GAS supports it, yet we require it.\n \tgcc_cv_initfini_array=yes\n \t;;\n+\n+loongarch*-*-linux*)\n+\ttm_file=\"dbxelf.h elfos.h gnu-user.h linux.h linux-android.h glibc-stdint.h ${tm_file}\"\n+\ttm_file=\"${tm_file} loongarch/gnu-user.h loongarch/linux.h\"\n+\textra_options=\"${extra_options} linux-android.opt\"\n+\ttmake_file=\"${tmake_file} loongarch/t-linux\"\n+\tgnu_ld=yes\n+\tgas=yes\n+\n+\t# Force .init_array support.  The configure script cannot always\n+\t# automatically detect that GAS supports it, yet we require it.\n+\tgcc_cv_initfini_array=yes\n+\t;;\n+\n mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n \ttarget_cpu_default=\"MASK_ABICALLS\"\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h ${nbsd_tm_file} mips/netbsd.h\"\n@@ -3601,7 +3622,7 @@ case ${target} in\n         ;;\n *-*-linux* | *-*-gnu*)\n \tcase ${target} in\n-\taarch64*-* | arm*-* | i[34567]86-* | powerpc*-* | s390*-* | sparc*-* | x86_64-*)\n+\taarch64*-* | arm*-* | i[34567]86-* | powerpc*-* | s390*-* | sparc*-* | x86_64-* | loongarch*-*)\n \t\tdefault_gnu_indirect_function=yes\n \t\t;;\n \tesac\n@@ -4933,6 +4954,373 @@ case \"${target}\" in\n \t\tesac\n \t\t;;\n \n+\tloongarch*-*-*)\n+\t\tsupported_defaults=\"abi arch tune fpu\"\n+\n+\t\t# Local variables\n+\t\tunset \\\n+\t\t\tabi_pattern      abi_default    \\\n+\t\t\tabiext_pattern   abiext_default \\\n+\t\t\tarch_pattern     arch_default   \\\n+\t\t\tfpu_pattern      fpu_default    \\\n+\t\t\ttune_pattern     tune_default   \\\n+\t\t\ttriplet_os       triplet_abi\n+\n+\t\t# Infer ABI from the triplet.\n+\t\tcase ${target} in\n+\t\tloongarch64-*-*-*f64)\n+\t\t\tabi_pattern=\"lp64d\"\n+\t\t\ttriplet_abi=\"f64\"\n+\t\t\t;;\n+\t\tloongarch64-*-*-*f32)\n+\t\t\tabi_pattern=\"lp64f\"\n+\t\t\ttriplet_abi=\"f32\"\n+\t\t\t;;\n+\t\tloongarch64-*-*-*sf)\n+\t\t\tabi_pattern=\"lp64s\"\n+\t\t\ttriplet_abi=\"sf\"\n+\t\t\t;;\n+\t\tloongarch64-*-*-*)\n+\t\t\tabi_pattern=\"lp64[dfs]\"\n+\t\t\tabi_default=\"lp64d\"\n+\t\t\ttriplet_abi=\"\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unsupported target ${target}.\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\n+\t\tabiext_pattern=\"*\"\n+\t\tabiext_default=\"base\"\n+\n+\t\t# Get the canonical triplet (multiarch specifier).\n+\t\tcase ${target} in\n+\t\t  *-linux-gnu*)  triplet_os=\"linux-gnu\";;\n+\t\t  *-linux-musl*) triplet_os=\"linux-musl\";;\n+\t\t  *)\n+\t\t\t  echo \"Unsupported target ${target}.\" 1>&2\n+\t\t\t  exit 1\n+\t\t\t  ;;\n+\t\tesac\n+\n+\t\tla_canonical_triplet=\"loongarch64-${triplet_os}${triplet_abi}\"\n+\n+\n+\t\t# Perform initial sanity checks on --with-* options.\n+\t\tcase ${with_arch} in\n+\t\t\"\" | loongarch64 | la464) ;; # OK, append here.\n+\t\tnative)\n+\t\t\tif test x${host} != x${target}; then\n+\t\t\t\techo \"--with-arch=native is illegal for cross-compiler.\" 1>&2\n+\t\t\t\texit 1\n+\t\t\tfi\n+\t\t\t;;\n+\t\t\"\")\n+\t\t\techo \"Please set a default value for \\${with_arch}\" \\\n+\t\t\t     \"according to your target triplet \\\"${target}\\\".\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown arch in --with-arch=$with_arch\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\n+\t\tcase ${with_abi} in\n+\t\t\"\" | lp64d | lp64f | lp64s) ;; # OK, append here.\n+\t\t*)\n+\t\t\techo \"Unsupported ABI given in --with-abi=$with_abi\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\n+\t\tcase ${with_abiext} in\n+\t\t\"\" | base) ;; # OK, append here.\n+\t\t*)\n+\t\t\techo \"Unsupported ABI extention type $with_abiext\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\n+\t\tcase ${with_fpu} in\n+\t\t\"\" | none | 32 | 64) ;; # OK, append here.\n+\t\t0)\n+\t\t\t# Convert \"0\" to \"none\" for upcoming checks.\n+\t\t\twith_fpu=\"none\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown fpu type in --with-fpu=$with_fpu\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\n+\n+\t\t# Set default value for with_abi.\n+\t\tcase ${with_abi} in\n+\t\t\"\")\n+\t\t\tif test x${abi_default} != x; then\n+\t\t\t\twith_abi=${abi_default}\n+\t\t\telse\n+\t\t\t\twith_abi=${abi_pattern}\n+\t\t\tfi\n+\t\t\t;;\n+\n+\t\t*)\n+\t\t\tif echo \"${with_abi}\" | grep -E \"^${abi_pattern}$\" > /dev/null; then\n+\t\t\t\t: # OK\n+\t\t\telse\n+\t\t\t\techo \"Incompatible options:\" \\\n+\t\t\t\t\"--with-abi=${with_abi} and --target=${target}.\" 1>&2\n+\t\t\t\texit 1\n+\t\t\tfi\n+\t\t\t;;\n+\t\tesac\n+\n+\t\t# Set default value for with_abiext (internal)\n+\t\tcase ${with_abiext} in\n+\t\t\"\")\n+\t\t\tif test x${abiext_default} != x; then\n+\t\t\t\twith_abiext=${abiext_default}\n+\t\t\telse\n+\t\t\t\twith_abiext=${abiext_pattern}\n+\t\t\tfi\n+\t\t\t;;\n+\n+\t\t*)\n+\t\t\tif echo \"${with_abiext}\" | grep -E \"^${abiext_pattern}$\" > /dev/null; then\n+\t\t\t\t: # OK\n+\t\t\telse\n+\t\t\t\techo \"The ABI extension type \\\"${with_abiext}\\\"\" \\\n+\t\t\t\t\"is incompatible with --target=${target}.\" 1>&2\n+\t\t\t\texit 1\n+\t\t\tfi\n+\n+\t\t\t;;\n+\t\tesac\n+\n+\t\t# Infer ISA-related default options from the ABI: pass 1\n+\t\tcase ${with_abi}/${with_abiext} in\n+\t\tlp64*/base)\n+\t\t\t# architectures that support lp64* ABI\n+\t\t\tarch_pattern=\"native|loongarch64|la464\"\n+\t\t\t# default architecture for lp64* ABI\n+\t\t\tarch_default=\"loongarch64\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unsupported ABI type ${with_abi}/${with_abiext}.\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\n+\t\t# Infer ISA-related default options from the ABI: pass 2\n+\t\tcase ${with_abi}/${with_abiext} in\n+\t\tlp64d/base)\n+\t\t\tfpu_pattern=\"64\"\n+\t\t\t;;\n+\t\tlp64f/base)\n+\t\t\tfpu_pattern=\"32|64\"\n+\t\t\tfpu_default=\"32\"\n+\t\t\t;;\n+\t\tlp64s/base)\n+\t\t\tfpu_pattern=\"none|32|64\"\n+\t\t\tfpu_default=\"none\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unsupported ABI type ${with_abi}/${with_abiext}.\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\n+\t\t## Set default value for with_arch.\n+\t\tcase ${with_arch} in\n+\t\t\"\")\n+\t\t\tif test x${arch_default} != x; then\n+\t\t\t\twith_arch=${arch_default}\n+\t\t\telse\n+\t\t\t\twith_arch=${arch_pattern}\n+\t\t\tfi\n+\t\t\t;;\n+\n+\t\t*)\n+\t\t\tif echo \"${with_arch}\" | grep -E \"^${arch_pattern}$\" > /dev/null; then\n+\t\t\t\t: # OK\n+\t\t\telse\n+\t\t\t\techo \"${with_abi}/${with_abiext} ABI cannot be implemented with\" \\\n+\t\t\t\t\"--with-arch=${with_arch}.\" 1>&2\n+\t\t\t\texit 1\n+\t\t\tfi\n+\t\t\t;;\n+\t\tesac\n+\n+\t\t## Set default value for with_fpu.\n+\t\tcase ${with_fpu} in\n+\t\t\"\")\n+\t\t\tif test x${fpu_default} != x; then\n+\t\t\t\twith_fpu=${fpu_default}\n+\t\t\telse\n+\t\t\t\twith_fpu=${fpu_pattern}\n+\t\t\tfi\n+\t\t\t;;\n+\n+\t\t*)\n+\t\t\tif echo \"${with_fpu}\" | grep -E \"^${fpu_pattern}$\" > /dev/null; then\n+\t\t\t\t: # OK\n+\t\t\telse\n+\t\t\t\techo \"${with_abi}/${with_abiext} ABI cannot be implemented with\" \\\n+\t\t\t\t\"--with-fpu=${with_fpu}.\" 1>&2\n+\t\t\t\texit 1\n+\t\t\tfi\n+\t\t\t;;\n+\t\tesac\n+\n+\n+\t\t# Infer default with_tune from with_arch: pass 1\n+\t\tcase ${with_arch} in\n+\t\tnative)\n+\t\t\ttune_pattern=\"*\"\n+\t\t\ttune_default=\"native\"\n+\t\t\t;;\n+\t\tloongarch64)\n+\t\t\ttune_pattern=\"loongarch64|la464\"\n+\t\t\ttune_default=\"la464\"\n+\t\t\t;;\n+\t\t*)\n+\t\t\t# By default, $with_tune == $with_arch\n+\t\t\ttune_pattern=\"$with_arch\"\n+\t\t\t;;\n+\t\tesac\n+\n+\t\t## Set default value for with_tune.\n+\t\tcase ${with_tune} in\n+\t\t\"\")\n+\t\t\tif test x${tune_default} != x; then\n+\t\t\t\twith_tune=${tune_default}\n+\t\t\telse\n+\t\t\t\twith_tune=${tune_pattern}\n+\t\t\tfi\n+\t\t\t;;\n+\n+\t\t*)\n+\t\t\tif echo \"${with_tune}\" | grep -E \"^${tune_pattern}$\" > /dev/null; then\n+\t\t\t\t: # OK\n+\t\t\telse\n+\t\t\t\techo \"Incompatible options: --with-tune=${with_tune}\" \\\n+\t\t\t\t\"and --with-arch=${with_arch}.\" 1>&2\n+\t\t\t\texit 1\n+\t\t\tfi\n+\t\t\t;;\n+\t\tesac\n+\n+\t\t# Handle --with-multilib-list.\n+\t\tif test x\"${with_multilib_list}\" = x \\\n+\t\t   || test x\"${with_multilib_list}\" = xno \\\n+\t\t   || test x\"${with_multilib_list}\" = xdefault \\\n+\t\t   || test x\"${enable_multilib}\" != xyes; then\n+\n+\t\t\twith_multilib_list=\"${with_abi}/${with_abiext}\"\n+\t\tfi\n+\n+\t\t# Check if the configured default ABI combination is included in\n+\t\t# ${with_multilib_list}.\n+\t\tloongarch_multilib_list_sane=no\n+\n+\t\t# This one goes to TM_MULTILIB_CONFIG, for use in t-linux.\n+\t\tloongarch_multilib_list_make=\"\"\n+\n+\t\t# This one goes to tm_defines, for use in loongarch-driver.c.\n+\t\tloongarch_multilib_list_c=\"\"\n+\n+\t\t# ${with_multilib_list} should not contain whitespaces,\n+\t\t# consecutive commas or slashes.\n+\t\tif echo \"${with_multilib_list}\" \\\n+\t\t| grep -E -e \"[[:space:]]\" -e '[,/][,/]' -e '[,/]$' -e '^[,/]' > /dev/null; then\n+\t\t\techo \"Invalid argument to --with-multilib-list.\" 1>&2\n+\t\t\texit 1\n+\t\tfi\n+\n+\t\tunset component idx elem_abi_base elem_abi_ext elem_tmp\n+\t\tfor elem in $(echo \"${with_multilib_list}\" | tr ',' ' '); do\n+\t\t\tidx=0\n+\t\t\twhile true; do\n+\t\t\t\tidx=$((idx + 1))\n+\t\t\t\tcomponent=$(echo \"${elem}\" | awk -F'/' '{print $'\"${idx}\"'}')\n+\n+\t\t\t\tcase ${idx} in\n+\t\t\t\t1)\n+\t\t\t\t\t# Component 1: Base ABI type\n+\t\t\t\t\tcase ${component} in\n+\t\t\t\t\tlp64d) elem_tmp=\"ABI_BASE_LP64D,\";;\n+\t\t\t\t\tlp64f) elem_tmp=\"ABI_BASE_LP64F,\";;\n+\t\t\t\t\tlp64s) elem_tmp=\"ABI_BASE_LP64S,\";;\n+\t\t\t\t\t*)\n+\t\t\t\t\t\techo \"Unknown base ABI \\\"${component}\\\" in --with-multilib-list.\" 1>&2\n+\t\t\t\t\t\texit 1\n+\t\t\t\t\t\t;;\n+\t\t\t\t\tesac\n+\t\t\t\t\tloongarch_multilib_list_c=\"${loongarch_multilib_list_c}${elem_tmp}\"\n+\t\t\t\t\tloongarch_multilib_list_make=\"${loongarch_multilib_list_make}mabi=${component}\"\n+\t\t\t\t\telem_abi_base=\"${component}\"\n+\t\t\t\t\t;;\n+\n+\t\t\t\t2)\n+\t\t\t\t\t# Component 2: ABI extension type\n+\t\t\t\t\tcase ${component} in\n+\t\t\t\t\t\"\" | base)\n+\t\t\t\t\t\tcomponent=\"base\"\n+\t\t\t\t\t\telem_tmp=\"ABI_EXT_BASE,\"\n+\t\t\t\t\t\t;;\n+\t\t\t\t\t*)\n+\t\t\t\t\t\techo \"Unknown ABI extension \\\"${component}\\\" in --with-multilib-list.\" 1>&2\n+\t\t\t\t\t\texit 1\n+\t\t\t\t\t\t;;\n+\t\t\t\t\tesac\n+\t\t\t\t\tloongarch_multilib_list_c=\"${loongarch_multilib_list_c}${elem_tmp}\"\n+\t\t\t\t\tloongarch_multilib_list_make=\"${loongarch_multilib_list_make}\" # Add nothing for now.\n+\t\t\t\t\telem_abi_ext=\"${component}\"\n+\t\t\t\t\t;;\n+\n+\t\t\t\t*)\n+\t\t\t\t\t# Component 3 and on: optional stuff\n+\t\t\t\t\tcase ${component} in\n+\t\t\t\t\t\"\")\n+\t\t\t\t\t\t# End of component list.\n+\t\t\t\t\t\tbreak\n+\t\t\t\t\t\t;;\n+\t\t\t\t\t*)\n+\t\t\t\t\t\techo \"Unknown ABI \\\"${elem}\\\" in --with-multilib-list.\" 1>&2\n+\t\t\t\t\t\texit 1\n+\t\t\t\t\t\t;;\n+\t\t\t\t\tesac\n+\t\t\t\t\t;;\n+\t\t\t\tesac\n+\t\t\tdone\n+\n+\t\t\tif test x${elem_abi_base} = x${with_abi} \\\n+\t\t\t&& test x${elem_abi_ext} = x${with_abiext}; then\n+\t\t\t\tloongarch_multilib_list_sane=yes\n+\t\t\tfi\n+\t\t\tloongarch_multilib_list_make=\"${loongarch_multilib_list_make},\"\n+\t\tdone\n+\n+\t\t# Check if the default ABI combination is in the default list.\n+\t\tif test x${loongarch_multilib_list_sane} = xno; then\n+\t\t\tif test x${with_abiext} = xbase; then\n+\t\t\t\twith_abiext=\"\"\n+\t\t\telse\n+\t\t\t\twith_abiext=\"/${with_abiext}\"\n+\t\t\tfi\n+\n+\t\t\techo \"Default ABI combination (${with_abi}${with_abiext})\" \\\n+\t\t\t\"not found in --with-multilib-list.\" 1>&2\n+\t\t\texit 1\n+\t\tfi\n+\n+\t\t# Remove the excessive appending comma.\n+\t\tloongarch_multilib_list_c=${loongarch_multilib_list_c%,}\n+\t\tloongarch_multilib_list_make=${loongarch_multilib_list_make%,}\n+\t\t;;\n+\n \tnds32*-*-*)\n \t\tsupported_defaults=\"arch cpu nds32_lib float fpu_config\"\n \n@@ -5370,6 +5758,51 @@ case ${target} in\n \t\ttmake_file=\"mips/t-mips $tmake_file\"\n \t\t;;\n \n+\tloongarch*-*-*)\n+\t\t# Export canonical triplet.\n+\t\ttm_defines=\"${tm_defines} LA_MULTIARCH_TRIPLET=${la_canonical_triplet}\"\n+\n+\t\t# Define macro LA_DISABLE_MULTILIB if --disable-multilib\n+\t\ttm_defines=\"${tm_defines} TM_MULTILIB_LIST=${loongarch_multilib_list_c}\"\n+\t\tif test x$enable_multilib = xyes; then\n+\t\t\tTM_MULTILIB_CONFIG=\"${loongarch_multilib_list_make}\"\n+\t\telse\n+\t\t\ttm_defines=\"${tm_defines} LA_DISABLE_MULTILIB\"\n+\t\tfi\n+\n+\t\t# Let --with- flags initialize the enum variables from loongarch.opt.\n+\t\t# See macro definitions from loongarch-opts.h and loongarch-cpu.h.\n+\t\tcase ${with_arch} in\n+\t\tnative)\t\ttm_defines=\"${tm_defines} DEFAULT_CPU_ARCH=CPU_NATIVE\" ;;\n+\t\tla464)\t\ttm_defines=\"${tm_defines} DEFAULT_CPU_ARCH=CPU_LA464\" ;;\n+\t\tloongarch64)\ttm_defines=\"${tm_defines} DEFAULT_CPU_ARCH=CPU_LOONGARCH64\" ;;\n+\t\tesac\n+\n+\t\tcase ${with_tune} in\n+\t\tnative)\t\ttm_defines=\"${tm_defines} DEFAULT_CPU_TUNE=CPU_NATIVE\" ;;\n+\t\tla464)\t\ttm_defines=\"${tm_defines} DEFAULT_CPU_TUNE=CPU_LA464\" ;;\n+\t\tloongarch64)\ttm_defines=\"${tm_defines} DEFAULT_CPU_TUNE=CPU_LOONGARCH64\" ;;\n+\t\tesac\n+\n+\t\tcase ${with_abi} in\n+\t\tlp64d)     tm_defines=\"${tm_defines} DEFAULT_ABI_BASE=ABI_BASE_LP64D\" ;;\n+\t\tlp64f)     tm_defines=\"${tm_defines} DEFAULT_ABI_BASE=ABI_BASE_LP64F\" ;;\n+\t\tlp64s)     tm_defines=\"${tm_defines} DEFAULT_ABI_BASE=ABI_BASE_LP64S\" ;;\n+\t\tesac\n+\n+\t\tcase ${with_abiext} in\n+\t\tbase)      tm_defines=\"${tm_defines} DEFAULT_ABI_EXT=ABI_EXT_BASE\" ;;\n+\t\tesac\n+\n+\t\tcase ${with_fpu} in\n+\t\tnone)    tm_defines=\"$tm_defines DEFAULT_ISA_EXT_FPU=ISA_EXT_NOFPU\" ;;\n+\t\t32)      tm_defines=\"$tm_defines DEFAULT_ISA_EXT_FPU=ISA_EXT_FPU32\" ;;\n+\t\t64)      tm_defines=\"$tm_defines DEFAULT_ISA_EXT_FPU=ISA_EXT_FPU64\" ;;\n+\t\tesac\n+\n+\t\ttmake_file=\"loongarch/t-loongarch $tmake_file\"\n+\t\t;;\n+\n \tpowerpc*-*-* | rs6000-*-*)\n \t\t# FIXME: The PowerPC port uses the value set at compile time,\n \t\t# although it's only cosmetic."}, {"sha": "972ef125ff916171acaa1e0c22f4734c9b542420", "filename": "gcc/config/loongarch/genopts/genstr.sh", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Fgenopts%2Fgenstr.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Fgenopts%2Fgenstr.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fgenopts%2Fgenstr.sh?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,104 @@\n+#!/bin/sh\n+# A simple script that generates loongarch-str.h and loongarch.opt\n+# from genopt/loongarch-optstr.\n+#\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+# License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cd \"$(dirname \"$0\")\"\n+\n+# Generate a header containing definitions from the string table.\n+gen_defines() {\n+    cat <<EOF\n+/* Generated automatically by \"genstr\" from \"loongarch-strings\".\n+   Please do not edit this file directly.\n+\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef LOONGARCH_STR_H\n+#define LOONGARCH_STR_H\n+EOF\n+\n+    sed -e '/^$/n' -e 's@#.*$@@' -e '/^$/d' \\\n+\t-e 's@^\\([^ \\t]\\+\\)[ \\t]*\\([^ \\t]*\\)@#define \\1 \"\\2\"@' \\\n+\tloongarch-strings\n+\n+    echo\n+    echo \"#endif /* LOONGARCH_STR_H */\"\n+}\n+\n+\n+# Substitute all \"@@<KEY>@@\" to \"<VALUE>\" in loongarch.opt.in\n+# according to the key-value pairs defined in loongarch-strings.\n+\n+gen_options() {\n+\n+    sed -e '/^$/n' -e 's@#.*$@@' -e '/^$/d' \\\n+\t-e 's@^\\([^ \\t]\\+\\)[ \\t]*\\([^ \\t]*\\)@\\1=\"\\2\"@' \\\n+\tloongarch-strings | { \\\n+\n+\t# read the definitions\n+\twhile read -r line; do\n+\t    eval \"$line\"\n+\tdone\n+\n+\t# print a header\n+\tcat << EOF\n+; Generated by \"genstr\" from the template \"loongarch.opt.in\"\n+; and definitions from \"loongarch-strings\".\n+;\n+; Please do not edit this file directly.\n+; It will be automatically updated during a gcc build\n+; if you change \"loongarch.opt.in\" or \"loongarch-strings\".\n+;\n+EOF\n+\n+\t# make the substitutions\n+\tsed -e 's@\"@\\\\\"@g' -e 's/@@\\([^@]\\+\\)@@/${\\1}/g' loongarch.opt.in | \\\n+\t    while read -r line; do\n+\t\teval \"echo \\\"$line\\\"\"\n+\t    done\n+    }\n+}\n+\n+main() {\n+    case \"$1\" in\n+\theader) gen_defines;;\n+\topt) gen_options;;\n+\t*) echo \"Unknown Command: \\\"$1\\\". Available: header, opt\"; exit 1;;\n+    esac\n+}\n+\n+main \"$@\""}, {"sha": "cb88ed56b6885e5a05cfce8b7953ae5cfa4f240c", "filename": "gcc/config/loongarch/genopts/loongarch-strings", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch-strings", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch-strings", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch-strings?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,58 @@\n+# Defines the key strings for LoongArch compiler options.\n+#\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+# License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# -march= / -mtune=\n+OPTSTR_ARCH\t      arch\n+OPTSTR_TUNE\t      tune\n+\n+STR_CPU_NATIVE\t      native\n+STR_CPU_LOONGARCH64   loongarch64\n+STR_CPU_LA464\t      la464\n+\n+# Base architecture\n+STR_ISA_BASE_LA64V100 la64\n+\n+# -mfpu\n+OPTSTR_ISA_EXT_FPU    fpu\n+STR_ISA_EXT_NOFPU     none\n+STR_ISA_EXT_FPU0      0\n+STR_ISA_EXT_FPU32     32\n+STR_ISA_EXT_FPU64     64\n+\n+OPTSTR_SOFT_FLOAT     soft-float\n+OPTSTR_SINGLE_FLOAT   single-float\n+OPTSTR_DOUBLE_FLOAT   double-float\n+\n+# -mabi=\n+OPTSTR_ABI_BASE\t      abi\n+STR_ABI_BASE_LP64D    lp64d\n+STR_ABI_BASE_LP64F    lp64f\n+STR_ABI_BASE_LP64S    lp64s\n+\n+# ABI extension types\n+STR_ABI_EXT_BASE      base\n+\n+# -mcmodel=\n+OPTSTR_CMODEL\t      cmodel\n+STR_CMODEL_NORMAL     normal\n+STR_CMODEL_TINY\t      tiny\n+STR_CMODEL_TS\t      tiny-static\n+STR_CMODEL_LARGE      large\n+STR_CMODEL_EXTREME    extreme"}, {"sha": "61e7d72a0a1ec67d9f0bdc326d43016221d47c2f", "filename": "gcc/config/loongarch/genopts/loongarch.opt.in", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,179 @@\n+; Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+;\n+\n+; Variables (macros) that should be exported by loongarch.opt:\n+;   la_opt_switches,\n+;   la_opt_abi_base, la_opt_abi_ext,\n+;   la_opt_cpu_arch, la_opt_cpu_tune,\n+;   la_opt_fpu,\n+;   la_cmodel.\n+\n+HeaderInclude\n+config/loongarch/loongarch-opts.h\n+\n+HeaderInclude\n+config/loongarch/loongarch-str.h\n+\n+Variable\n+HOST_WIDE_INT la_opt_switches = 0\n+\n+; ISA related options\n+;; Base ISA\n+Enum\n+Name(isa_base) Type(int)\n+Basic ISAs of LoongArch:\n+\n+EnumValue\n+Enum(isa_base) String(@@STR_ISA_BASE_LA64V100@@) Value(ISA_BASE_LA64V100)\n+\n+\n+;; ISA extensions / adjustments\n+Enum\n+Name(isa_ext_fpu) Type(int)\n+FPU types of LoongArch:\n+\n+EnumValue\n+Enum(isa_ext_fpu) String(@@STR_ISA_EXT_NOFPU@@) Value(ISA_EXT_NOFPU)\n+\n+EnumValue\n+Enum(isa_ext_fpu) String(@@STR_ISA_EXT_FPU32@@) Value(ISA_EXT_FPU32)\n+\n+EnumValue\n+Enum(isa_ext_fpu) String(@@STR_ISA_EXT_FPU64@@) Value(ISA_EXT_FPU64)\n+\n+m@@OPTSTR_ISA_EXT_FPU@@=\n+Target RejectNegative Joined ToLower Enum(isa_ext_fpu) Var(la_opt_fpu) Init(M_OPTION_NOT_SEEN)\n+-m@@OPTSTR_ISA_EXT_FPU@@=FPU\tGenerate code for the given FPU.\n+\n+m@@OPTSTR_ISA_EXT_FPU@@=@@STR_ISA_EXT_FPU0@@\n+Target RejectNegative Alias(m@@OPTSTR_ISA_EXT_FPU@@=,@@STR_ISA_EXT_NOFPU@@)\n+\n+m@@OPTSTR_SOFT_FLOAT@@\n+Target Driver RejectNegative Var(la_opt_switches) Mask(FORCE_SOFTF) Negative(m@@OPTSTR_SINGLE_FLOAT@@)\n+Prevent the use of all hardware floating-point instructions.\n+\n+m@@OPTSTR_SINGLE_FLOAT@@\n+Target Driver RejectNegative Var(la_opt_switches) Mask(FORCE_F32) Negative(m@@OPTSTR_DOUBLE_FLOAT@@)\n+Restrict the use of hardware floating-point instructions to 32-bit operations.\n+\n+m@@OPTSTR_DOUBLE_FLOAT@@\n+Target Driver RejectNegative Var(la_opt_switches) Mask(FORCE_F64) Negative(m@@OPTSTR_SOFT_FLOAT@@)\n+Allow hardware floating-point instructions to cover both 32-bit and 64-bit operations.\n+\n+\n+;; Base target models (implies ISA & tune parameters)\n+Enum\n+Name(cpu_type) Type(int)\n+LoongArch CPU types:\n+\n+EnumValue\n+Enum(cpu_type) String(@@STR_CPU_NATIVE@@) Value(CPU_NATIVE)\n+\n+EnumValue\n+Enum(cpu_type) String(@@STR_CPU_LOONGARCH64@@) Value(CPU_LOONGARCH64)\n+\n+EnumValue\n+Enum(cpu_type) String(@@STR_CPU_LA464@@) Value(CPU_LA464)\n+\n+m@@OPTSTR_ARCH@@=\n+Target RejectNegative Joined Enum(cpu_type) Var(la_opt_cpu_arch) Init(M_OPTION_NOT_SEEN)\n+-m@@OPTSTR_ARCH@@=PROCESSOR\tGenerate code for the given PROCESSOR ISA.\n+\n+m@@OPTSTR_TUNE@@=\n+Target RejectNegative Joined Enum(cpu_type) Var(la_opt_cpu_tune) Init(M_OPTION_NOT_SEEN)\n+-m@@OPTSTR_TUNE@@=PROCESSOR\tGenerate optimized code for PROCESSOR.\n+\n+\n+; ABI related options\n+; (ISA constraints on ABI are handled dynamically)\n+\n+;; Base ABI\n+Enum\n+Name(abi_base) Type(int)\n+Base ABI types for LoongArch:\n+\n+EnumValue\n+Enum(abi_base) String(@@STR_ABI_BASE_LP64D@@) Value(ABI_BASE_LP64D)\n+\n+EnumValue\n+Enum(abi_base) String(@@STR_ABI_BASE_LP64F@@) Value(ABI_BASE_LP64F)\n+\n+EnumValue\n+Enum(abi_base) String(@@STR_ABI_BASE_LP64S@@) Value(ABI_BASE_LP64S)\n+\n+m@@OPTSTR_ABI_BASE@@=\n+Target RejectNegative Joined ToLower Enum(abi_base) Var(la_opt_abi_base) Init(M_OPTION_NOT_SEEN)\n+-m@@OPTSTR_ABI_BASE@@=BASEABI\tGenerate code that conforms to the given BASEABI.\n+\n+;; ABI Extension\n+Variable\n+int la_opt_abi_ext = M_OPTION_NOT_SEEN\n+\n+\n+mbranch-cost=\n+Target RejectNegative Joined UInteger Var(loongarch_branch_cost)\n+-mbranch-cost=COST\tSet the cost of branches to roughly COST instructions.\n+\n+mcheck-zero-division\n+Target Mask(CHECK_ZERO_DIV)\n+Trap on integer divide by zero.\n+\n+mcond-move-int\n+Target Var(TARGET_COND_MOVE_INT) Init(1)\n+Conditional moves for integral are enabled.\n+\n+mcond-move-float\n+Target Var(TARGET_COND_MOVE_FLOAT) Init(1)\n+Conditional moves for float are enabled.\n+\n+mmemcpy\n+Target Mask(MEMCPY)\n+Prevent optimizing block moves, which is also the default behavior of -Os.\n+\n+mstrict-align\n+Target Var(TARGET_STRICT_ALIGN) Init(0)\n+Do not generate unaligned memory accesses.\n+\n+mmax-inline-memcpy-size=\n+Target Joined RejectNegative UInteger Var(loongarch_max_inline_memcpy_size) Init(1024)\n+-mmax-inline-memcpy-size=SIZE\tSet the max size of memcpy to inline, default is 1024.\n+\n+; The code model option names for -mcmodel.\n+Enum\n+Name(cmodel) Type(int)\n+The code model option names for -mcmodel:\n+\n+EnumValue\n+Enum(cmodel) String(@@STR_CMODEL_NORMAL@@) Value(CMODEL_NORMAL)\n+\n+EnumValue\n+Enum(cmodel) String(@@STR_CMODEL_TINY@@) Value(CMODEL_TINY)\n+\n+EnumValue\n+Enum(cmodel) String(@@STR_CMODEL_TS@@) Value(CMODEL_TINY_STATIC)\n+\n+EnumValue\n+Enum(cmodel) String(@@STR_CMODEL_LARGE@@) Value(CMODEL_LARGE)\n+\n+EnumValue\n+Enum(cmodel) String(@@STR_CMODEL_EXTREME@@) Value(CMODEL_EXTREME)\n+\n+mcmodel=\n+Target RejectNegative Joined Enum(cmodel) Var(la_opt_cmodel) Init(CMODEL_NORMAL)\n+Specify the code model."}, {"sha": "664dc9206ad9b79e104fef00a875cf69d8017559", "filename": "gcc/config/loongarch/gnu-user.h", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fgnu-user.h?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,80 @@\n+/* Definitions for LoongArch systems using GNU (glibc-based) userspace,\n+   or other userspace with libc derived from glibc.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Define the size of the wide character type.  */\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+\n+/* GNU-specific SPEC definitions.  */\n+#define GNU_USER_LINK_EMULATION \"elf\" ABI_GRLEN_SPEC \"loongarch\"\n+\n+#undef GLIBC_DYNAMIC_LINKER\n+#define GLIBC_DYNAMIC_LINKER \\\n+  \"/lib\" ABI_GRLEN_SPEC \"/ld-linux-loongarch-\" ABI_SPEC \".so.1\"\n+\n+#undef MUSL_DYNAMIC_LINKER\n+#define MUSL_DYNAMIC_LINKER \\\n+  \"/lib\" ABI_GRLEN_SPEC \"/ld-musl-loongarch-\" ABI_SPEC \".so.1\"\n+\n+#undef GNU_USER_TARGET_LINK_SPEC\n+#define GNU_USER_TARGET_LINK_SPEC \\\n+  \"%{G*} %{shared} -m \" GNU_USER_LINK_EMULATION \\\n+  \"%{!shared: %{static} %{!static: %{rdynamic:-export-dynamic} \" \\\n+  \"-dynamic-linker \" GNU_USER_DYNAMIC_LINKER \"}}\"\n+\n+\n+/* Similar to standard Linux, but adding -ffast-math support.  */\n+#undef GNU_USER_TARGET_MATHFILE_SPEC\n+#define GNU_USER_TARGET_MATHFILE_SPEC \\\n+  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC GNU_USER_TARGET_LIB_SPEC\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC GNU_USER_TARGET_LINK_SPEC\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  GNU_USER_TARGET_MATHFILE_SPEC \" \" \\\n+  GNU_USER_TARGET_ENDFILE_SPEC\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+\n+/* A standard GNU/Linux mapping.  On most targets, it is included in\n+   CC1_SPEC itself by config/linux.h, but loongarch.h overrides CC1_SPEC\n+   and provides this hook instead.  */\n+#undef SUBTARGET_CC1_SPEC\n+#define SUBTARGET_CC1_SPEC GNU_USER_TARGET_CC1_SPEC\n+\n+#define TARGET_OS_CPP_BUILTINS() \\\n+  do \\\n+    { \\\n+      GNU_USER_TARGET_OS_CPP_BUILTINS (); \\\n+      /* The GNU C++ standard library requires this.  */ \\\n+      if (c_dialect_cxx ()) \\\n+       builtin_define (\"_GNU_SOURCE\"); \\\n+    } \\\n+  while (0)"}, {"sha": "110d0fab93d802dea24b64382719e8e710fc2e80", "filename": "gcc/config/loongarch/linux.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Flinux.h?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,50 @@\n+/* Definitions for Linux-based systems with libraries in ELF format.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Default system library search paths.\n+ * This ensures that a compiler configured with --disable-multilib\n+ * can work in a multilib environment.  */\n+\n+#if defined(LA_DISABLE_MULTILIB) && defined(LA_DISABLE_MULTIARCH)\n+\n+  #if DEFAULT_ABI_BASE == ABI_BASE_LP64D\n+    #define ABI_LIBDIR \"lib64\"\n+  #elif DEFAULT_ABI_BASE == ABI_BASE_LP64F\n+    #define ABI_LIBDIR \"lib64/f32\"\n+  #elif DEFAULT_ABI_BASE == ABI_BASE_LP64S\n+    #define ABI_LIBDIR \"lib64/sf\"\n+  #endif\n+\n+#endif\n+\n+#ifndef ABI_LIBDIR\n+#define ABI_LIBDIR \"lib\"\n+#endif\n+\n+#define STANDARD_STARTFILE_PREFIX_1 \"/\" ABI_LIBDIR \"/\"\n+#define STANDARD_STARTFILE_PREFIX_2 \"/usr/\" ABI_LIBDIR \"/\"\n+\n+\n+/* Define this to be nonzero if static stack checking is supported.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* The default value isn't sufficient in 64-bit mode.  */\n+#define STACK_CHECK_PROTECT (TARGET_64BIT ? 16 * 1024 : 12 * 1024)\n+\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack"}, {"sha": "a886dd9323b36092b54db90ad818b8302f836c19", "filename": "gcc/config/loongarch/loongarch-cpu.cc", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-cpu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-cpu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-cpu.cc?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,206 @@\n+/* Definitions for LoongArch CPU properties.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"diagnostic-core.h\"\n+\n+#include \"loongarch-opts.h\"\n+#include \"loongarch-cpu.h\"\n+#include \"loongarch-str.h\"\n+\n+/* Native CPU detection with \"cpucfg\" */\n+#define N_CPUCFG_WORDS 0x15\n+static uint32_t cpucfg_cache[N_CPUCFG_WORDS] = { 0 };\n+static const int cpucfg_useful_idx[] = {0, 1, 2, 16, 17, 18, 19};\n+\n+static uint32_t\n+read_cpucfg_word (int wordno)\n+{\n+  /* To make cross-compiler shut up.  */\n+  (void) wordno;\n+  uint32_t ret = 0;\n+\n+  #ifdef __loongarch__\n+  __asm__ __volatile__ (\"cpucfg %0,%1\\n\\t\"\n+\t\t\t:\"=r\"(ret)\n+\t\t\t:\"r\"(wordno)\n+\t\t\t:);\n+  #endif\n+\n+  return ret;\n+}\n+\n+void\n+cache_cpucfg (void)\n+{\n+  for (unsigned int i = 0; i < sizeof (cpucfg_useful_idx) / sizeof (int); i++)\n+    {\n+      cpucfg_cache[cpucfg_useful_idx[i]]\n+\t= read_cpucfg_word (cpucfg_useful_idx[i]);\n+    }\n+}\n+\n+uint32_t\n+get_native_prid (void)\n+{\n+  /* Fill loongarch_cpu_default_config[CPU_NATIVE] with cpucfg data,\n+     see \"Loongson Architecture Reference Manual\"\n+     (Volume 1, Section 2.2.10.5) */\n+  return cpucfg_cache[0];\n+}\n+\n+const char*\n+get_native_prid_str (void)\n+{\n+  static char prid_str[9];\n+  sprintf (prid_str, \"%08x\", cpucfg_cache[0]);\n+  return (const char*) prid_str;\n+}\n+\n+/* Fill property tables for CPU_NATIVE.  */\n+unsigned int\n+fill_native_cpu_config (int p_arch_native, int p_tune_native)\n+{\n+  int ret_cpu_type;\n+\n+  /* Nothing needs to be done unless \"-march/tune=native\"\n+     is given or implied.  */\n+  if (!(p_arch_native || p_tune_native))\n+    return CPU_NATIVE;\n+\n+  /* Fill cpucfg_cache with the \"cpucfg\" instruction.  */\n+  cache_cpucfg ();\n+\n+\n+  /* Fill: loongarch_cpu_default_isa[CPU_NATIVE].base\n+     With: base architecture (ARCH)\n+     At:   cpucfg_words[1][1:0] */\n+\n+  #define NATIVE_BASE_ISA (loongarch_cpu_default_isa[CPU_NATIVE].base)\n+  switch (cpucfg_cache[1] & 0x3)\n+    {\n+      case 0x02:\n+\tNATIVE_BASE_ISA = ISA_BASE_LA64V100;\n+\tbreak;\n+\n+      default:\n+\tif (p_arch_native)\n+\t  fatal_error (UNKNOWN_LOCATION,\n+\t\t       \"unknown base architecture %<0x%x%>, %qs failed\",\n+\t\t       (unsigned int) (cpucfg_cache[1] & 0x3),\n+\t\t       \"-m\" OPTSTR_ARCH \"=\" STR_CPU_NATIVE);\n+    }\n+\n+  /* Fill: loongarch_cpu_default_isa[CPU_NATIVE].fpu\n+     With: FPU type (FP, FP_SP, FP_DP)\n+     At:   cpucfg_words[2][2:0] */\n+\n+  #define NATIVE_FPU (loongarch_cpu_default_isa[CPU_NATIVE].fpu)\n+  switch (cpucfg_cache[2] & 0x7)\n+    {\n+      case 0x07:\n+\tNATIVE_FPU = ISA_EXT_FPU64;\n+\tbreak;\n+\n+      case 0x03:\n+\tNATIVE_FPU = ISA_EXT_FPU32;\n+\tbreak;\n+\n+      case 0x00:\n+\tNATIVE_FPU = ISA_EXT_NOFPU;\n+\tbreak;\n+\n+      default:\n+\tif (p_arch_native)\n+\t  fatal_error (UNKNOWN_LOCATION,\n+\t\t       \"unknown FPU type %<0x%x%>, %qs failed\",\n+\t\t       (unsigned int) (cpucfg_cache[2] & 0x7),\n+\t\t       \"-m\" OPTSTR_ARCH \"=\" STR_CPU_NATIVE);\n+    }\n+\n+  /* Fill: loongarch_cpu_cache[CPU_NATIVE]\n+     With: cache size info\n+     At:   cpucfg_words[16:20][31:0] */\n+\n+  int l1d_present = 0, l1u_present = 0;\n+  int l2d_present = 0;\n+  uint32_t l1_szword, l2_szword;\n+\n+  l1u_present |= cpucfg_cache[16] & 3;\t      /* bit[1:0]: unified l1 cache */\n+  l1d_present |= cpucfg_cache[16] & 4;\t      /* bit[2:2]: l1 dcache */\n+  l1_szword = l1d_present ? 18 : (l1u_present ? 17 : 0);\n+  l1_szword = l1_szword ? cpucfg_cache[l1_szword]: 0;\n+\n+  l2d_present |= cpucfg_cache[16] & 24;\t      /* bit[4:3]: unified l2 cache */\n+  l2d_present |= cpucfg_cache[16] & 128;      /* bit[7:7]: l2 dcache */\n+  l2_szword = l2d_present ? cpucfg_cache[19]: 0;\n+\n+  loongarch_cpu_cache[CPU_NATIVE].l1d_line_size\n+    = 1 << ((l1_szword & 0x7f000000) >> 24);  /* bit[30:24]: log2(linesize) */\n+\n+  loongarch_cpu_cache[CPU_NATIVE].l1d_size\n+    = (1 << ((l1_szword & 0x00ff0000) >> 16)) /* bit[23:16]: log2(idx) */\n+    * ((l1_szword & 0x0000ffff) + 1)\t      /* bit[15:0]:  sets - 1 */\n+    * (1 << ((l1_szword & 0x7f000000) >> 24)) /* bit[30:24]: log2(linesize) */\n+    >> 10;\t\t\t\t      /* in kilobytes */\n+\n+  loongarch_cpu_cache[CPU_NATIVE].l2d_size\n+    = (1 << ((l2_szword & 0x00ff0000) >> 16)) /* bit[23:16]: log2(idx) */\n+    * ((l2_szword & 0x0000ffff) + 1)\t      /* bit[15:0]:  sets - 1 */\n+    * (1 << ((l2_szword & 0x7f000000) >> 24)) /* bit[30:24]: log2(linesize) */\n+    >> 10;\t\t\t\t      /* in kilobytes */\n+\n+  /* Fill: ret_cpu_type\n+     With: processor ID (PRID)\n+     At:   cpucfg_words[0][31:0] */\n+\n+  switch (cpucfg_cache[0] & 0x00ffff00)\n+  {\n+    case 0x0014c000:   /* LA464 */\n+      ret_cpu_type = CPU_LA464;\n+      break;\n+\n+    default:\n+      /* Unknown PRID.  This is generally harmless as long as\n+\t the properties above can be obtained via \"cpucfg\".  */\n+      if (p_tune_native)\n+\tinform (UNKNOWN_LOCATION, \"unknown processor ID %<0x%x%>, \"\n+\t\t\"some tuning parameters will fall back to default\",\n+\t\tcpucfg_cache[0]);\n+      break;\n+  }\n+\n+  /* Properties that cannot be looked up directly using cpucfg.  */\n+  loongarch_cpu_issue_rate[CPU_NATIVE]\n+    = loongarch_cpu_issue_rate[ret_cpu_type];\n+\n+  loongarch_cpu_multipass_dfa_lookahead[CPU_NATIVE]\n+    = loongarch_cpu_multipass_dfa_lookahead[ret_cpu_type];\n+\n+  loongarch_cpu_rtx_cost_data[CPU_NATIVE]\n+    = loongarch_cpu_rtx_cost_data[ret_cpu_type];\n+\n+  return ret_cpu_type;\n+}"}, {"sha": "93d656f70f5c69932c3786b6261c8865f8e84e5e", "filename": "gcc/config/loongarch/loongarch-cpu.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-cpu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-cpu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-cpu.h?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,30 @@\n+/* Definitions for loongarch native cpu property detection routines.\n+   Copyright (C) 2020-2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef LOONGARCH_CPU_H\n+#define LOONGARCH_CPU_H\n+\n+#include \"system.h\"\n+\n+void cache_cpucfg (void);\n+unsigned int fill_native_cpu_config (int p_arch_native, int p_tune_native);\n+uint32_t get_native_prid (void);\n+const char* get_native_prid_str (void);\n+\n+#endif /* LOONGARCH_CPU_H */"}, {"sha": "c8769b7d65e596751a486bca21aef5f8c9b90044", "filename": "gcc/config/loongarch/loongarch-def.c", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-def.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-def.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-def.c?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,179 @@\n+/* LoongArch static properties.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"loongarch-def.h\"\n+#include \"loongarch-str.h\"\n+\n+/* Default RTX cost initializer.  */\n+#define COSTS_N_INSNS(N) ((N) * 4)\n+#define DEFAULT_COSTS\t\t\t\t\\\n+    .fp_add\t\t= COSTS_N_INSNS (1),\t\\\n+    .fp_mult_sf\t\t= COSTS_N_INSNS (2),\t\\\n+    .fp_mult_df\t\t= COSTS_N_INSNS (4),\t\\\n+    .fp_div_sf\t\t= COSTS_N_INSNS (6),\t\\\n+    .fp_div_df\t\t= COSTS_N_INSNS (8),\t\\\n+    .int_mult_si\t= COSTS_N_INSNS (1),\t\\\n+    .int_mult_di\t= COSTS_N_INSNS (1),\t\\\n+    .int_div_si\t\t= COSTS_N_INSNS (4),\t\\\n+    .int_div_di\t\t= COSTS_N_INSNS (6),\t\\\n+    .branch_cost\t= 2,\t\t\t\\\n+    .memory_latency\t= 4\n+\n+/* CPU property tables.  */\n+const char*\n+loongarch_cpu_strings[N_TUNE_TYPES] = {\n+  [CPU_NATIVE]\t\t  = STR_CPU_NATIVE,\n+  [CPU_LOONGARCH64]\t  = STR_CPU_LOONGARCH64,\n+  [CPU_LA464]\t\t  = STR_CPU_LA464,\n+};\n+\n+struct loongarch_isa\n+loongarch_cpu_default_isa[N_ARCH_TYPES] = {\n+  [CPU_LOONGARCH64] = {\n+      .base = ISA_BASE_LA64V100,\n+      .fpu = ISA_EXT_FPU64,\n+  },\n+  [CPU_LA464] = {\n+      .base = ISA_BASE_LA64V100,\n+      .fpu = ISA_EXT_FPU64,\n+  },\n+};\n+\n+struct loongarch_cache\n+loongarch_cpu_cache[N_TUNE_TYPES] = {\n+  [CPU_LOONGARCH64] = {\n+      .l1d_line_size = 64,\n+      .l1d_size = 64,\n+      .l2d_size = 256,\n+  },\n+  [CPU_LA464] = {\n+      .l1d_line_size = 64,\n+      .l1d_size = 64,\n+      .l2d_size = 256,\n+  },\n+};\n+\n+/* The following properties cannot be looked up directly using \"cpucfg\".\n+ So it is necessary to provide a default value for \"unknown native\"\n+ tune targets (i.e. -mtune=native while PRID does not correspond to\n+ any known \"-mtune\" type).  */\n+\n+struct loongarch_rtx_cost_data\n+loongarch_cpu_rtx_cost_data[N_TUNE_TYPES] = {\n+  [CPU_NATIVE] = {\n+      DEFAULT_COSTS\n+  },\n+  [CPU_LOONGARCH64] = {\n+      DEFAULT_COSTS\n+  },\n+  [CPU_LA464] = {\n+      DEFAULT_COSTS\n+  },\n+};\n+\n+/* RTX costs to use when optimizing for size.  */\n+extern const struct loongarch_rtx_cost_data\n+loongarch_rtx_cost_optimize_size = {\n+    .fp_add\t      = 4,\n+    .fp_mult_sf\t      = 4,\n+    .fp_mult_df\t      = 4,\n+    .fp_div_sf\t      = 4,\n+    .fp_div_df\t      = 4,\n+    .int_mult_si      = 4,\n+    .int_mult_di      = 4,\n+    .int_div_si\t      = 4,\n+    .int_div_di\t      = 4,\n+    .branch_cost      = 2,\n+    .memory_latency   = 4,\n+};\n+\n+int\n+loongarch_cpu_issue_rate[N_TUNE_TYPES] = {\n+  [CPU_NATIVE]\t      = 4,\n+  [CPU_LOONGARCH64]   = 4,\n+  [CPU_LA464]\t      = 4,\n+};\n+\n+int\n+loongarch_cpu_multipass_dfa_lookahead[N_TUNE_TYPES] = {\n+  [CPU_NATIVE]\t      = 4,\n+  [CPU_LOONGARCH64]   = 4,\n+  [CPU_LA464]\t      = 4,\n+};\n+\n+/* Wiring string definitions from loongarch-str.h to global arrays\n+   with standard index values from loongarch-opts.h, so we can\n+   print config-related messages and do ABI self-spec filtering\n+   from the driver in a self-consistent manner.  */\n+\n+const char*\n+loongarch_isa_base_strings[N_ISA_BASE_TYPES] = {\n+  [ISA_BASE_LA64V100] = STR_ISA_BASE_LA64V100,\n+};\n+\n+const char*\n+loongarch_isa_ext_strings[N_ISA_EXT_TYPES] = {\n+  [ISA_EXT_FPU64] = STR_ISA_EXT_FPU64,\n+  [ISA_EXT_FPU32] = STR_ISA_EXT_FPU32,\n+  [ISA_EXT_NOFPU] = STR_ISA_EXT_NOFPU,\n+};\n+\n+const char*\n+loongarch_abi_base_strings[N_ABI_BASE_TYPES] = {\n+  [ABI_BASE_LP64D] = STR_ABI_BASE_LP64D,\n+  [ABI_BASE_LP64F] = STR_ABI_BASE_LP64F,\n+  [ABI_BASE_LP64S] = STR_ABI_BASE_LP64S,\n+};\n+\n+const char*\n+loongarch_abi_ext_strings[N_ABI_EXT_TYPES] = {\n+  [ABI_EXT_BASE] = STR_ABI_EXT_BASE,\n+};\n+\n+const char*\n+loongarch_cmodel_strings[] = {\n+  [CMODEL_NORMAL]\t  = STR_CMODEL_NORMAL,\n+  [CMODEL_TINY]\t\t  = STR_CMODEL_TINY,\n+  [CMODEL_TINY_STATIC]\t  = STR_CMODEL_TS,\n+  [CMODEL_LARGE]\t  = STR_CMODEL_LARGE,\n+  [CMODEL_EXTREME]\t  = STR_CMODEL_EXTREME,\n+};\n+\n+const char*\n+loongarch_switch_strings[] = {\n+  [SW_SOFT_FLOAT]\t  = OPTSTR_SOFT_FLOAT,\n+  [SW_SINGLE_FLOAT]\t  = OPTSTR_SINGLE_FLOAT,\n+  [SW_DOUBLE_FLOAT]\t  = OPTSTR_DOUBLE_FLOAT,\n+};\n+\n+\n+/* ABI-related definitions.  */\n+const struct loongarch_isa\n+abi_minimal_isa[N_ABI_BASE_TYPES][N_ABI_EXT_TYPES] = {\n+  [ABI_BASE_LP64D] = {\n+      [ABI_EXT_BASE] = {.base = ISA_BASE_LA64V100, .fpu = ISA_EXT_FPU64},\n+  },\n+  [ABI_BASE_LP64F] = {\n+      [ABI_EXT_BASE] = {.base = ISA_BASE_LA64V100, .fpu = ISA_EXT_FPU32},\n+  },\n+  [ABI_BASE_LP64S] = {\n+      [ABI_EXT_BASE] = {.base = ISA_BASE_LA64V100, .fpu = ISA_EXT_NOFPU},\n+  },\n+};"}, {"sha": "c2c35b6ba5cf2f47bef94fad49b385809567f63f", "filename": "gcc/config/loongarch/loongarch-def.h", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-def.h?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,151 @@\n+/* LoongArch definitions.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Definition of standard codes for:\n+    - base architecture types\t(isa_base),\n+    - ISA extensions\t\t(isa_ext),\n+    - base ABI types\t\t(abi_base),\n+    - ABI extension types\t(abi_ext).\n+\n+    - code models\t\t      (cmodel)\n+    - other command-line switches     (switch)\n+\n+   These values are primarily used for implementing option handling\n+   logic in \"loongarch.opt\", \"loongarch-driver.c\" and \"loongarch-opt.c\".\n+\n+   As for the result of this option handling process, the following\n+   scheme is adopted to represent the final configuration:\n+\n+    - The target ABI is encoded with a tuple (abi_base, abi_ext)\n+      using the code defined below.\n+\n+    - The target ISA is encoded with a \"struct loongarch_isa\" defined\n+      in loongarch-cpu.h.\n+\n+    - The target microarchitecture is represented with a cpu model\n+      index defined in loongarch-cpu.h.\n+*/\n+\n+#ifndef LOONGARCH_DEF_H\n+#define LOONGARCH_DEF_H\n+\n+#include \"loongarch-tune.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/* enum isa_base */\n+extern const char* loongarch_isa_base_strings[];\n+#define ISA_BASE_LA64V100     0\n+#define N_ISA_BASE_TYPES      1\n+\n+/* enum isa_ext_* */\n+extern const char* loongarch_isa_ext_strings[];\n+#define ISA_EXT_NOFPU\t      0\n+#define ISA_EXT_FPU32\t      1\n+#define ISA_EXT_FPU64\t      2\n+#define N_ISA_EXT_FPU_TYPES   3\n+#define N_ISA_EXT_TYPES\t      3\n+\n+/* enum abi_base */\n+extern const char* loongarch_abi_base_strings[];\n+#define ABI_BASE_LP64D\t      0\n+#define ABI_BASE_LP64F\t      1\n+#define ABI_BASE_LP64S\t      2\n+#define N_ABI_BASE_TYPES      3\n+\n+/* enum abi_ext */\n+extern const char* loongarch_abi_ext_strings[];\n+#define ABI_EXT_BASE\t      0\n+#define N_ABI_EXT_TYPES\t      1\n+\n+/* enum cmodel */\n+extern const char* loongarch_cmodel_strings[];\n+#define CMODEL_NORMAL\t      0\n+#define CMODEL_TINY\t      1\n+#define CMODEL_TINY_STATIC    2\n+#define CMODEL_LARGE\t      3\n+#define CMODEL_EXTREME\t      4\n+#define N_CMODEL_TYPES\t      5\n+\n+/* enum switches */\n+/* The \"SW_\" codes represent command-line switches (options that\n+   accept no parameters). Definition for other switches that affects\n+   the target ISA / ABI configuration will also be appended here\n+   in the future.  */\n+\n+extern const char* loongarch_switch_strings[];\n+#define SW_SOFT_FLOAT\t      0\n+#define SW_SINGLE_FLOAT\t      1\n+#define SW_DOUBLE_FLOAT\t      2\n+#define N_SWITCH_TYPES\t      3\n+\n+/* The common default value for variables whose assignments\n+   are triggered by command-line options.  */\n+\n+#define M_OPTION_NOT_SEEN -1\n+#define M_OPT_ABSENT(opt_enum)  ((opt_enum) == M_OPTION_NOT_SEEN)\n+\n+\n+/* Internal representation of the target.  */\n+struct loongarch_isa\n+{\n+  unsigned char base;\t    /* ISA_BASE_ */\n+  unsigned char fpu;\t    /* ISA_EXT_FPU_ */\n+};\n+\n+struct loongarch_abi\n+{\n+  unsigned char base;\t    /* ABI_BASE_ */\n+  unsigned char ext;\t    /* ABI_EXT_ */\n+};\n+\n+struct loongarch_target\n+{\n+  struct loongarch_isa isa;\n+  struct loongarch_abi abi;\n+  unsigned char cpu_arch;   /* CPU_ */\n+  unsigned char cpu_tune;   /* same */\n+  unsigned char cpu_native; /* same */\n+  unsigned char cmodel;\t    /* CMODEL_ */\n+};\n+\n+/* CPU properties.  */\n+/* index */\n+#define CPU_NATIVE\t  0\n+#define CPU_LOONGARCH64\t  1\n+#define CPU_LA464\t  2\n+#define N_ARCH_TYPES\t  3\n+#define N_TUNE_TYPES\t  3\n+\n+/* parallel tables.  */\n+extern const char* loongarch_cpu_strings[];\n+extern struct loongarch_isa loongarch_cpu_default_isa[];\n+extern int loongarch_cpu_issue_rate[];\n+extern int loongarch_cpu_multipass_dfa_lookahead[];\n+\n+extern struct loongarch_cache loongarch_cpu_cache[];\n+extern struct loongarch_rtx_cost_data loongarch_cpu_rtx_cost_data[];\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+#endif /* LOONGARCH_DEF_H */"}, {"sha": "0adcc923b7d528d2e575cae4d5555ae755edb108", "filename": "gcc/config/loongarch/loongarch-driver.cc", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-driver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-driver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-driver.cc?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,187 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"obstack.h\"\n+#include \"diagnostic-core.h\"\n+\n+#include \"loongarch-opts.h\"\n+#include \"loongarch-driver.h\"\n+\n+static int\n+  opt_arch_driver = M_OPTION_NOT_SEEN,\n+  opt_tune_driver = M_OPTION_NOT_SEEN,\n+  opt_fpu_driver = M_OPTION_NOT_SEEN,\n+  opt_abi_base_driver = M_OPTION_NOT_SEEN,\n+  opt_abi_ext_driver = M_OPTION_NOT_SEEN,\n+  opt_cmodel_driver = M_OPTION_NOT_SEEN;\n+\n+int opt_switches = 0;\n+\n+/* This flag is set to 1 if we believe that the user might be avoiding\n+   linking (implicitly) against something from the startfile search paths.  */\n+static int no_link = 0;\n+\n+#define LARCH_DRIVER_SET_M_FLAG(OPTS_ARRAY, N_OPTS, FLAG, STR)\t\\\n+  for (int i = 0; i < (N_OPTS); i++)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if ((OPTS_ARRAY)[i] != 0)\t\t\t\t\t\\\n+      if (strcmp ((STR), (OPTS_ARRAY)[i]) == 0)\t\t\t\\\n+\t(FLAG) = i;\t\t\t\t\t\t\\\n+  }\n+\n+/* Use the public obstack from the gcc driver (defined in gcc.c).\n+   This is for allocating space for the returned string.  */\n+extern struct obstack opts_obstack;\n+\n+#define APPEND_LTR(S)\t\t\t\t      \\\n+  obstack_grow (&opts_obstack, (const void*) (S),     \\\n+\t\tsizeof ((S)) / sizeof (char) -1)\n+\n+#define APPEND_VAL(S) \\\n+  obstack_grow (&opts_obstack, (const void*) (S), strlen ((S)))\n+\n+\n+const char*\n+driver_set_m_flag (int argc, const char **argv)\n+{\n+  int parm_off = 0;\n+\n+  if (argc != 1)\n+    return \"%eset_m_flag requires exactly 1 argument.\";\n+\n+#undef PARM\n+#define PARM (argv[0] + parm_off)\n+\n+/* Note: sizeof (OPTSTR_##NAME) equals the length of \"<option>=\".  */\n+#undef MATCH_OPT\n+#define MATCH_OPT(NAME) \\\n+  (strncmp (argv[0], OPTSTR_##NAME \"=\", \\\n+\t    (parm_off = sizeof (OPTSTR_##NAME))) == 0)\n+\n+  if (strcmp (argv[0], \"no_link\") == 0)\n+    {\n+      no_link = 1;\n+    }\n+  else if (MATCH_OPT (ABI_BASE))\n+    {\n+      LARCH_DRIVER_SET_M_FLAG (\n+\tloongarch_abi_base_strings, N_ABI_BASE_TYPES,\n+\topt_abi_base_driver, PARM)\n+    }\n+  else if (MATCH_OPT (ISA_EXT_FPU))\n+    {\n+      LARCH_DRIVER_SET_M_FLAG (loongarch_isa_ext_strings, N_ISA_EXT_FPU_TYPES,\n+\t\t\t       opt_fpu_driver, PARM)\n+    }\n+  else if (MATCH_OPT (ARCH))\n+    {\n+      LARCH_DRIVER_SET_M_FLAG (loongarch_cpu_strings, N_ARCH_TYPES,\n+\t\t\t       opt_arch_driver, PARM)\n+    }\n+  else if (MATCH_OPT (TUNE))\n+    {\n+      LARCH_DRIVER_SET_M_FLAG (loongarch_cpu_strings, N_TUNE_TYPES,\n+\t\t\t       opt_tune_driver, PARM)\n+    }\n+  else if (MATCH_OPT (CMODEL))\n+    {\n+      LARCH_DRIVER_SET_M_FLAG (loongarch_cmodel_strings, N_CMODEL_TYPES,\n+\t\t\t       opt_cmodel_driver, PARM)\n+    }\n+  else /* switches */\n+    {\n+      int switch_idx = M_OPTION_NOT_SEEN;\n+\n+      LARCH_DRIVER_SET_M_FLAG (loongarch_switch_strings, N_SWITCH_TYPES,\n+\t\t\t       switch_idx, argv[0])\n+\n+      if (switch_idx != M_OPTION_NOT_SEEN)\n+\topt_switches |= loongarch_switch_mask[switch_idx];\n+    }\n+  return \"\";\n+}\n+\n+const char*\n+driver_get_normalized_m_opts (int argc, const char **argv)\n+{\n+  if (argc != 0)\n+    {\n+      (void) argv;  /* To make compiler shut up about unused argument.  */\n+      return \" %eget_normalized_m_opts requires no argument.\\n\";\n+    }\n+\n+  loongarch_config_target (& la_target,\n+\t\t\t   opt_switches,\n+\t\t\t   opt_arch_driver,\n+\t\t\t   opt_tune_driver,\n+\t\t\t   opt_fpu_driver,\n+\t\t\t   opt_abi_base_driver,\n+\t\t\t   opt_abi_ext_driver,\n+\t\t\t   opt_cmodel_driver,\n+\t\t\t   !no_link /* follow_multilib_list */);\n+\n+  /* Output normalized option strings.  */\n+  obstack_blank (&opts_obstack, 0);\n+\n+#undef APPEND_LTR\n+#define APPEND_LTR(S) \\\n+  obstack_grow (&opts_obstack, (const void*) (S), \\\n+\t\tsizeof ((S)) / sizeof (char) -1)\n+\n+#undef APPEND_VAL\n+#define APPEND_VAL(S) \\\n+  obstack_grow (&opts_obstack, (const void*) (S), strlen ((S)))\n+\n+#undef APPEND_OPT\n+#define APPEND_OPT(NAME) \\\n+   APPEND_LTR (\" %<m\" OPTSTR_##NAME \"=* \" \\\n+\t       \" -m\" OPTSTR_##NAME \"=\")\n+\n+  for (int i = 0; i < N_SWITCH_TYPES; i++)\n+    {\n+      APPEND_LTR (\" %<m\");\n+      APPEND_VAL (loongarch_switch_strings[i]);\n+    }\n+\n+  APPEND_OPT (ABI_BASE);\n+  APPEND_VAL (loongarch_abi_base_strings[la_target.abi.base]);\n+\n+  APPEND_OPT (ARCH);\n+  APPEND_VAL (loongarch_cpu_strings[la_target.cpu_arch]);\n+\n+  APPEND_OPT (ISA_EXT_FPU);\n+  APPEND_VAL (loongarch_isa_ext_strings[la_target.isa.fpu]);\n+\n+  APPEND_OPT (CMODEL);\n+  APPEND_VAL (loongarch_cmodel_strings[la_target.cmodel]);\n+\n+  APPEND_OPT (TUNE);\n+  APPEND_VAL (loongarch_cpu_strings[la_target.cpu_tune]);\n+\n+  obstack_1grow (&opts_obstack, '\\0');\n+\n+  return XOBFINISH (&opts_obstack, const char *);\n+}"}, {"sha": "2e4a7a9c87067ae6bf675186598060c563ff8145", "filename": "gcc/config/loongarch/loongarch-driver.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-driver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-driver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-driver.h?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,68 @@\n+/* Subroutine headers for the gcc driver.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef LOONGARCH_DRIVER_H\n+#define LOONGARCH_DRIVER_H\n+\n+#include \"loongarch-str.h\"\n+\n+extern const char*\n+driver_set_m_flag (int argc, const char **argv);\n+\n+extern const char*\n+driver_get_normalized_m_opts (int argc, const char **argv);\n+\n+#define EXTRA_SPEC_FUNCTIONS \\\n+  { \"set_m_flag\", driver_set_m_flag  }, \\\n+  { \"get_normalized_m_opts\", driver_get_normalized_m_opts  },\n+\n+/* Pre-process ABI-related options.  */\n+#define LA_SET_PARM_SPEC(NAME) \\\n+  \" %{m\" OPTSTR_##NAME  \"=*: %:set_m_flag(\" OPTSTR_##NAME \"=%*)}\" \\\n+\n+#define LA_SET_FLAG_SPEC(NAME) \\\n+  \" %{m\" OPTSTR_##NAME  \": %:set_m_flag(\" OPTSTR_##NAME \")}\" \\\n+\n+#define DRIVER_HANDLE_MACHINE_OPTIONS\t\t\t      \\\n+  \" %{c|S|E|nostdlib: %:set_m_flag(no_link)}\"\t\t      \\\n+  \" %{nostartfiles: %{nodefaultlibs: %:set_m_flag(no_link)}}\" \\\n+  LA_SET_PARM_SPEC (ABI_BASE)\t\t\t\t      \\\n+  LA_SET_PARM_SPEC (ARCH)\t\t\t\t      \\\n+  LA_SET_PARM_SPEC (TUNE)\t\t\t\t      \\\n+  LA_SET_PARM_SPEC (ISA_EXT_FPU)\t\t\t      \\\n+  LA_SET_PARM_SPEC (CMODEL)\t\t\t\t      \\\n+  LA_SET_FLAG_SPEC (SOFT_FLOAT)\t\t\t\t      \\\n+  LA_SET_FLAG_SPEC (SINGLE_FLOAT)\t\t\t      \\\n+  LA_SET_FLAG_SPEC (DOUBLE_FLOAT)\t\t\t      \\\n+  \" %:get_normalized_m_opts()\"\n+\n+#define DRIVER_SELF_SPECS \\\n+  DRIVER_HANDLE_MACHINE_OPTIONS\n+\n+/* ABI spec strings.  */\n+#define ABI_GRLEN_SPEC \\\n+  \"%{mabi=lp64*:64}\"   \\\n+\n+#define ABI_SPEC \\\n+  \"%{mabi=lp64d:lp64d}\" \\\n+  \"%{mabi=lp64f:lp64f}\" \\\n+  \"%{mabi=lp64s:lp64s}\" \\\n+\n+#endif /* LOONGARCH_DRIVER_H */"}, {"sha": "eb9c2a52f9efafe4d55937228ef4456fd1ccccc2", "filename": "gcc/config/loongarch/loongarch-opts.cc", "status": "added", "additions": 577, "deletions": 0, "changes": 577, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,577 @@\n+/* Subroutines for loongarch-specific option handling.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"obstack.h\"\n+#include \"diagnostic-core.h\"\n+#include \"loongarch-cpu.h\"\n+#include \"loongarch-opts.h\"\n+#include \"loongarch-str.h\"\n+\n+struct loongarch_target la_target;\n+\n+/* ABI-related configuration.  */\n+#define ABI_COUNT (sizeof(abi_priority_list)/sizeof(struct loongarch_abi))\n+static const struct loongarch_abi\n+abi_priority_list[] = {\n+    {ABI_BASE_LP64D, ABI_EXT_BASE},\n+    {ABI_BASE_LP64F, ABI_EXT_BASE},\n+    {ABI_BASE_LP64S, ABI_EXT_BASE},\n+};\n+\n+/* Initialize enabled_abi_types from TM_MULTILIB_LIST.  */\n+#ifdef LA_DISABLE_MULTILIB\n+#define MULTILIB_LIST_LEN 1\n+#else\n+#define MULTILIB_LIST_LEN (sizeof (tm_multilib_list) / sizeof (int) / 2)\n+static const int tm_multilib_list[] = { TM_MULTILIB_LIST };\n+#endif\n+static int enabled_abi_types[N_ABI_BASE_TYPES][N_ABI_EXT_TYPES] = { 0 };\n+\n+#define isa_required(ABI) (abi_minimal_isa[(ABI).base][(ABI).ext])\n+extern \"C\" const struct loongarch_isa\n+abi_minimal_isa[N_ABI_BASE_TYPES][N_ABI_EXT_TYPES];\n+\n+static inline int\n+is_multilib_enabled (struct loongarch_abi abi)\n+{\n+  return enabled_abi_types[abi.base][abi.ext];\n+}\n+\n+static void\n+init_enabled_abi_types ()\n+{\n+#ifdef LA_DISABLE_MULTILIB\n+  enabled_abi_types[DEFAULT_ABI_BASE][DEFAULT_ABI_EXT] = 1;\n+#else\n+  int abi_base, abi_ext;\n+  for (unsigned int i = 0; i < MULTILIB_LIST_LEN; i++)\n+    {\n+      abi_base = tm_multilib_list[i << 1];\n+      abi_ext = tm_multilib_list[(i << 1) + 1];\n+      enabled_abi_types[abi_base][abi_ext] = 1;\n+    }\n+#endif\n+}\n+\n+/* Switch masks.  */\n+#undef M\n+#define M(NAME) OPTION_MASK_##NAME\n+const int loongarch_switch_mask[N_SWITCH_TYPES] = {\n+  /* SW_SOFT_FLOAT */    M(FORCE_SOFTF),\n+  /* SW_SINGLE_FLOAT */  M(FORCE_F32),\n+  /* SW_DOUBLE_FLOAT */  M(FORCE_F64),\n+};\n+#undef M\n+\n+/* String processing.  */\n+static struct obstack msg_obstack;\n+#define APPEND_STRING(STR) obstack_grow (&msg_obstack, STR, strlen(STR));\n+#define APPEND1(CH) obstack_1grow(&msg_obstack, CH);\n+\n+static const char* abi_str (struct loongarch_abi abi);\n+static const char* isa_str (const struct loongarch_isa *isa, char separator);\n+static const char* arch_str (const struct loongarch_target *target);\n+static const char* multilib_enabled_abi_list ();\n+\n+/* Misc */\n+static struct loongarch_abi isa_default_abi (const struct loongarch_isa *isa);\n+static int isa_base_compat_p (const struct loongarch_isa *set1,\n+\t\t\t      const struct loongarch_isa *set2);\n+static int isa_fpu_compat_p (const struct loongarch_isa *set1,\n+\t\t\t     const struct loongarch_isa *set2);\n+static int abi_compat_p (const struct loongarch_isa *isa,\n+\t\t\t struct loongarch_abi abi);\n+static int abi_default_cpu_arch (struct loongarch_abi abi);\n+\n+/* Checking configure-time defaults.  */\n+#ifndef DEFAULT_ABI_BASE\n+#error missing definition of DEFAULT_ABI_BASE in ${tm_defines}.\n+#endif\n+\n+#ifndef DEFAULT_ABI_EXT\n+#error missing definition of DEFAULT_ABI_EXT in ${tm_defines}.\n+#endif\n+\n+#ifndef DEFAULT_CPU_ARCH\n+#error missing definition of DEFAULT_CPU_ARCH in ${tm_defines}.\n+#endif\n+\n+#ifndef DEFAULT_ISA_EXT_FPU\n+#error missing definition of DEFAULT_ISA_EXT_FPU in ${tm_defines}.\n+#endif\n+\n+/* Handle combinations of -m machine option values\n+   (see loongarch.opt and loongarch-opts.h).  */\n+void\n+loongarch_config_target (struct loongarch_target *target,\n+\t\t\t HOST_WIDE_INT opt_switches,\n+\t\t\t int opt_arch, int opt_tune, int opt_fpu,\n+\t\t\t int opt_abi_base, int opt_abi_ext,\n+\t\t\t int opt_cmodel, int follow_multilib_list)\n+{\n+  struct loongarch_target t;\n+\n+  if (!target)\n+    return;\n+\n+  /* Initialization */\n+  init_enabled_abi_types ();\n+  obstack_init (&msg_obstack);\n+\n+  struct {\n+    int arch, tune, fpu, abi_base, abi_ext, cmodel;\n+  } constrained = {\n+      M_OPT_ABSENT(opt_arch)     ? 0 : 1,\n+      M_OPT_ABSENT(opt_tune)     ? 0 : 1,\n+      M_OPT_ABSENT(opt_fpu)      ? 0 : 1,\n+      M_OPT_ABSENT(opt_abi_base) ? 0 : 1,\n+      M_OPT_ABSENT(opt_abi_ext)  ? 0 : 1,\n+      M_OPT_ABSENT(opt_cmodel)   ? 0 : 1,\n+  };\n+\n+#define on(NAME) ((loongarch_switch_mask[(SW_##NAME)] & opt_switches) \\\n+\t\t  && (on_switch = (SW_##NAME), 1))\n+  int on_switch;\n+\n+  /* 1.  Target ABI */\n+  t.abi.base = constrained.abi_base ? opt_abi_base : DEFAULT_ABI_BASE;\n+\n+  t.abi.ext = constrained.abi_ext ? opt_abi_ext : DEFAULT_ABI_EXT;\n+\n+  /* Extra switch handling.  */\n+  if (on (SOFT_FLOAT) || on (SINGLE_FLOAT) || on (DOUBLE_FLOAT))\n+    {\n+      switch (on_switch)\n+\t{\n+\t  case SW_SOFT_FLOAT:\n+\t    opt_fpu = ISA_EXT_NOFPU;\n+\t    break;\n+\n+\t  case SW_SINGLE_FLOAT:\n+\t    opt_fpu = ISA_EXT_FPU32;\n+\t    break;\n+\n+\t  case SW_DOUBLE_FLOAT:\n+\t    opt_fpu = ISA_EXT_FPU64;\n+\t    break;\n+\n+\t  default:\n+\t    gcc_unreachable();\n+\t}\n+      constrained.fpu = 1;\n+\n+      /* The target ISA is not ready yet, but (isa_required (t.abi)\n+\t + forced fpu) is enough for computing the forced base ABI.  */\n+      struct loongarch_isa default_isa = isa_required (t.abi);\n+      struct loongarch_isa force_isa = default_isa;\n+      struct loongarch_abi force_abi = t.abi;\n+      force_isa.fpu = opt_fpu;\n+      force_abi.base = isa_default_abi (&force_isa).base;\n+\n+      if (constrained.abi_base && (t.abi.base != force_abi.base))\n+\tinform (UNKNOWN_LOCATION,\n+\t\t\"%<-m%s%> overrides %<-m%s=%s%>, adjusting ABI to %qs\",\n+\t\tloongarch_switch_strings[on_switch],\n+\t\tOPTSTR_ABI_BASE, loongarch_abi_base_strings[t.abi.base],\n+\t\tabi_str (force_abi));\n+\n+      t.abi.base = force_abi.base;\n+    }\n+\n+#ifdef LA_DISABLE_MULTILIB\n+  if (follow_multilib_list)\n+    if (t.abi.base != DEFAULT_ABI_BASE || t.abi.ext != DEFAULT_ABI_EXT)\n+      {\n+\tstatic const struct loongarch_abi default_abi\n+\t  = {DEFAULT_ABI_BASE, DEFAULT_ABI_EXT};\n+\n+\twarning (0, \"ABI changed (%qs to %qs) while multilib is disabled\",\n+\t\t abi_str (default_abi), abi_str (t.abi));\n+      }\n+#endif\n+\n+  /* 2.  Target CPU */\n+  t.cpu_arch = constrained.arch ? opt_arch : DEFAULT_CPU_ARCH;\n+\n+  t.cpu_tune = constrained.tune ? opt_tune\n+    : (constrained.arch ? DEFAULT_CPU_ARCH : DEFAULT_CPU_TUNE);\n+\n+#ifdef __loongarch__\n+  /* For native compilers, gather local CPU information\n+     and fill the \"CPU_NATIVE\" index of arrays defined in\n+     loongarch-cpu.c.  */\n+\n+  t.cpu_native = fill_native_cpu_config (t.cpu_arch == CPU_NATIVE,\n+\t\t\t\t\t t.cpu_tune == CPU_NATIVE);\n+\n+#else\n+  if (t.cpu_arch == CPU_NATIVE)\n+    fatal_error (UNKNOWN_LOCATION,\n+\t\t \"%qs does not work on a cross compiler\",\n+\t\t \"-m\" OPTSTR_ARCH \"=\" STR_CPU_NATIVE);\n+\n+  else if (t.cpu_tune == CPU_NATIVE)\n+    fatal_error (UNKNOWN_LOCATION,\n+\t\t \"%qs does not work on a cross compiler\",\n+\t\t \"-m\" OPTSTR_TUNE \"=\" STR_CPU_NATIVE);\n+#endif\n+\n+  /* 3.  Target ISA */\n+config_target_isa:\n+\n+  /* Get default ISA from \"-march\" or its default value.  */\n+  t.isa = loongarch_cpu_default_isa[LARCH_ACTUAL_ARCH];\n+\n+  /* Apply incremental changes.  */\n+  /* \"-march=native\" overrides the default FPU type.  */\n+  t.isa.fpu = constrained.fpu ? opt_fpu :\n+    ((t.cpu_arch == CPU_NATIVE && constrained.arch) ?\n+     t.isa.fpu : DEFAULT_ISA_EXT_FPU);\n+\n+\n+  /* 4.  ABI-ISA compatibility */\n+  /* Note:\n+     - There IS a unique default -march value for each ABI type\n+       (config.gcc: triplet -> abi -> default arch).\n+\n+     - If the base ABI is incompatible with the default arch,\n+       try using the default -march it implies (and mark it\n+       as \"constrained\" this time), then re-apply step 3.  */\n+\n+  struct loongarch_abi abi_tmp;\n+  const struct loongarch_isa* isa_min;\n+\n+  abi_tmp = t.abi;\n+  isa_min = &isa_required (abi_tmp);\n+\n+  if (isa_base_compat_p (&t.isa, isa_min)); /* OK.  */\n+  else if (!constrained.arch)\n+    {\n+      /* Base architecture can only be implied by -march,\n+\t so we adjust that first if it is not constrained.  */\n+      int fallback_arch = abi_default_cpu_arch (t.abi);\n+\n+      if (t.cpu_arch == CPU_NATIVE)\n+\twarning (0, \"your native CPU architecture (%qs) \"\n+\t\t \"does not support %qs ABI, falling back to %<-m%s=%s%>\",\n+\t\t arch_str (&t), abi_str (t.abi), OPTSTR_ARCH,\n+\t\t loongarch_cpu_strings[fallback_arch]);\n+      else\n+\twarning (0, \"default CPU architecture (%qs) \"\n+\t\t \"does not support %qs ABI, falling back to %<-m%s=%s%>\",\n+\t\t arch_str (&t), abi_str (t.abi), OPTSTR_ARCH,\n+\t\t loongarch_cpu_strings[fallback_arch]);\n+\n+      t.cpu_arch = fallback_arch;\n+      constrained.arch = 1;\n+      goto config_target_isa;\n+    }\n+  else if (!constrained.abi_base)\n+    {\n+      /* If -march is given while -mabi is not,\n+\t try selecting another base ABI type.  */\n+      abi_tmp.base = isa_default_abi (&t.isa).base;\n+    }\n+  else\n+    goto fatal;\n+\n+  if (isa_fpu_compat_p (&t.isa, isa_min)); /* OK.  */\n+  else if (!constrained.fpu)\n+    t.isa.fpu = isa_min->fpu;\n+  else if (!constrained.abi_base)\n+    /* If -march is compatible with the default ABI\n+       while -mfpu is not.  */\n+    abi_tmp.base = isa_default_abi (&t.isa).base;\n+  else\n+    goto fatal;\n+\n+  if (0)\n+fatal:\n+    fatal_error (UNKNOWN_LOCATION,\n+\t\t \"unable to implement ABI %qs with instruction set %qs\",\n+\t\t abi_str (t.abi), isa_str (&t.isa, '/'));\n+\n+\n+  /* Using the fallback ABI.  */\n+  if (abi_tmp.base != t.abi.base || abi_tmp.ext != t.abi.ext)\n+    {\n+      /* This flag is only set in the GCC driver.  */\n+      if (follow_multilib_list)\n+\t{\n+\n+\t  /* Continue falling back until we find a feasible ABI type\n+\t     enabled by TM_MULTILIB_LIST.  */\n+\t  if (!is_multilib_enabled (abi_tmp))\n+\t    {\n+\t      for (unsigned int i = 0; i < ABI_COUNT; i++)\n+\t\t{\n+\t\t  if (is_multilib_enabled (abi_priority_list[i])\n+\t\t      && abi_compat_p (&t.isa, abi_priority_list[i]))\n+\t\t    {\n+\t\t      abi_tmp = abi_priority_list[i];\n+\n+\t\t      warning (0, \"ABI %qs cannot be implemented due to \"\n+\t\t\t       \"limited instruction set %qs, \"\n+\t\t\t       \"falling back to %qs\", abi_str (t.abi),\n+\t\t\t       isa_str (&t.isa, '/'), abi_str (abi_tmp));\n+\n+\t\t      goto fallback;\n+\t\t    }\n+\t\t}\n+\n+\t      /* Otherwise, keep using abi_tmp with a warning.  */\n+#ifdef LA_DISABLE_MULTILIB\n+\t      warning (0, \"instruction set %qs cannot implement \"\n+\t\t       \"default ABI %qs, falling back to %qs\",\n+\t\t       isa_str (&t.isa, '/'), abi_str (t.abi),\n+\t\t       abi_str (abi_tmp));\n+#else\n+\t      warning (0, \"no multilib-enabled ABI (%qs) can be implemented \"\n+\t\t       \"with instruction set %qs, falling back to %qs\",\n+\t\t       multilib_enabled_abi_list (),\n+\t\t       isa_str (&t.isa, '/'), abi_str (abi_tmp));\n+#endif\n+\t    }\n+\t}\n+\n+fallback:\n+      t.abi = abi_tmp;\n+    }\n+  else if (follow_multilib_list)\n+    {\n+      if (!is_multilib_enabled (t.abi))\n+\t{\n+\t  inform (UNKNOWN_LOCATION,\n+\t\t  \"ABI %qs is not enabled at configure-time, \"\n+\t\t  \"the linker might report an error\", abi_str (t.abi));\n+\n+\t  inform (UNKNOWN_LOCATION, \"ABI with startfiles: %s\",\n+\t\t  multilib_enabled_abi_list ());\n+\t}\n+    }\n+\n+\n+  /* 5.  Target code model */\n+  t.cmodel = constrained.cmodel ? opt_cmodel : CMODEL_NORMAL;\n+\n+  /* Cleanup and return.  */\n+  obstack_free (&msg_obstack, NULL);\n+  *target = t;\n+}\n+\n+/* Returns the default ABI for the given instruction set.  */\n+static inline struct loongarch_abi\n+isa_default_abi (const struct loongarch_isa *isa)\n+{\n+  struct loongarch_abi abi;\n+\n+  switch (isa->fpu)\n+    {\n+      case ISA_EXT_FPU64:\n+\tif (isa->base == ISA_BASE_LA64V100)\n+\t  abi.base = ABI_BASE_LP64D;\n+\tbreak;\n+\n+      case ISA_EXT_FPU32:\n+\tif (isa->base == ISA_BASE_LA64V100)\n+\t  abi.base = ABI_BASE_LP64F;\n+\tbreak;\n+\n+      case ISA_EXT_NOFPU:\n+\tif (isa->base == ISA_BASE_LA64V100)\n+\t  abi.base = ABI_BASE_LP64S;\n+\tbreak;\n+\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  abi.ext = ABI_EXT_BASE;\n+  return abi;\n+}\n+\n+/* Check if set2 is a subset of set1.  */\n+static inline int\n+isa_base_compat_p (const struct loongarch_isa *set1,\n+\t\t   const struct loongarch_isa *set2)\n+{\n+  switch (set2->base)\n+    {\n+      case ISA_BASE_LA64V100:\n+\treturn (set1->base == ISA_BASE_LA64V100);\n+\n+      default:\n+\tgcc_unreachable ();\n+    }\n+}\n+\n+static inline int\n+isa_fpu_compat_p (const struct loongarch_isa *set1,\n+\t\t  const struct loongarch_isa *set2)\n+{\n+  switch (set2->fpu)\n+    {\n+      case ISA_EXT_FPU64:\n+\treturn set1->fpu == ISA_EXT_FPU64;\n+\n+      case ISA_EXT_FPU32:\n+\treturn set1->fpu == ISA_EXT_FPU32 || set1->fpu == ISA_EXT_FPU64;\n+\n+      case ISA_EXT_NOFPU:\n+\treturn 1;\n+\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+}\n+\n+static inline int\n+abi_compat_p (const struct loongarch_isa *isa, struct loongarch_abi abi)\n+{\n+  int compatible = 1;\n+  const struct loongarch_isa *isa2 = &isa_required (abi);\n+\n+  /* Append conditionals for new ISA components below.  */\n+  compatible = compatible && isa_base_compat_p (isa, isa2);\n+  compatible = compatible && isa_fpu_compat_p (isa, isa2);\n+  return compatible;\n+}\n+\n+/* The behavior of this function should be consistent\n+   with config.gcc.  */\n+static inline int\n+abi_default_cpu_arch (struct loongarch_abi abi)\n+{\n+  switch (abi.base)\n+    {\n+      case ABI_BASE_LP64D:\n+      case ABI_BASE_LP64F:\n+      case ABI_BASE_LP64S:\n+\tif (abi.ext == ABI_EXT_BASE)\n+\t  return CPU_LOONGARCH64;\n+    }\n+  gcc_unreachable ();\n+}\n+\n+static const char*\n+abi_str (struct loongarch_abi abi)\n+{\n+  /* \"/base\" can be omitted.  */\n+  if (abi.ext == ABI_EXT_BASE)\n+    return (const char*)\n+      obstack_copy0 (&msg_obstack, loongarch_abi_base_strings[abi.base],\n+\t\t     strlen (loongarch_abi_base_strings[abi.base]));\n+  else\n+    {\n+      APPEND_STRING (loongarch_abi_base_strings[abi.base])\n+      APPEND1 ('/')\n+      APPEND_STRING (loongarch_abi_ext_strings[abi.ext])\n+      APPEND1 ('\\0')\n+\n+      return XOBFINISH (&msg_obstack, const char *);\n+    }\n+}\n+\n+static const char*\n+isa_str (const struct loongarch_isa *isa, char separator)\n+{\n+  APPEND_STRING (loongarch_isa_base_strings[isa->base])\n+  APPEND1 (separator)\n+\n+  if (isa->fpu == ISA_EXT_NOFPU)\n+    {\n+      APPEND_STRING (\"no\" OPTSTR_ISA_EXT_FPU)\n+    }\n+  else\n+    {\n+      APPEND_STRING (OPTSTR_ISA_EXT_FPU)\n+      APPEND_STRING (loongarch_isa_ext_strings[isa->fpu])\n+    }\n+  APPEND1 ('\\0')\n+\n+  /* Add more here.  */\n+\n+  return XOBFINISH (&msg_obstack, const char *);\n+}\n+\n+static const char*\n+arch_str (const struct loongarch_target *target)\n+{\n+  if (target->cpu_arch == CPU_NATIVE)\n+    {\n+      if (target->cpu_native == CPU_NATIVE)\n+\t{\n+\t  /* Describe a native CPU with unknown PRID.  */\n+\t  const char* isa_string = isa_str (&target->isa, ',');\n+\t  APPEND_STRING (\"PRID: 0x\")\n+\t  APPEND_STRING (get_native_prid_str ())\n+\t  APPEND_STRING (\", ISA features: \")\n+\t  APPEND_STRING (isa_string)\n+\t  APPEND1 ('\\0')\n+\t}\n+      else\n+\tAPPEND_STRING (loongarch_cpu_strings[target->cpu_native]);\n+    }\n+  else\n+    APPEND_STRING (loongarch_cpu_strings[target->cpu_arch]);\n+\n+  APPEND1 ('\\0')\n+  return XOBFINISH (&msg_obstack, const char *);\n+}\n+\n+static const char*\n+multilib_enabled_abi_list ()\n+{\n+  int enabled_abi_idx[MULTILIB_LIST_LEN] = { 0 };\n+  const char* enabled_abi_str[MULTILIB_LIST_LEN] = { NULL };\n+  unsigned int j = 0;\n+\n+  for (unsigned int i = 0; i < ABI_COUNT && j < MULTILIB_LIST_LEN; i++)\n+    {\n+      if (enabled_abi_types[abi_priority_list[i].base]\n+\t  [abi_priority_list[i].ext])\n+\t{\n+\t  enabled_abi_idx[j++] = i;\n+\t}\n+    }\n+\n+  for (unsigned int k = 0; k < j; k++)\n+    {\n+      enabled_abi_str[k] = abi_str (abi_priority_list[enabled_abi_idx[k]]);\n+    }\n+\n+  for (unsigned int k = 0; k < j - 1; k++)\n+    {\n+      APPEND_STRING (enabled_abi_str[k])\n+      APPEND1 (',')\n+      APPEND1 (' ')\n+    }\n+  APPEND_STRING (enabled_abi_str[j - 1])\n+  APPEND1 ('\\0')\n+\n+  return XOBFINISH (&msg_obstack, const char *);\n+}"}, {"sha": "eaa6fc07448290493375889fbad77a4170bb2eb5", "filename": "gcc/config/loongarch/loongarch-opts.h", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,90 @@\n+/* Definitions for loongarch-specific option handling.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef LOONGARCH_OPTS_H\n+#define LOONGARCH_OPTS_H\n+\n+\n+/* Target configuration */\n+extern struct loongarch_target la_target;\n+\n+/* Switch masks */\n+extern const int loongarch_switch_mask[];\n+\n+#include \"loongarch-def.h\"\n+\n+#if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\n+/* Handler for \"-m\" option combinations,\n+   shared by the driver and the compiler proper.  */\n+void\n+loongarch_config_target (struct loongarch_target *target,\n+\t\t\t HOST_WIDE_INT opt_switches,\n+\t\t\t int opt_arch, int opt_tune, int opt_fpu,\n+\t\t\t int opt_abi_base, int opt_abi_ext,\n+\t\t\t int opt_cmodel, int follow_multilib_list);\n+#endif\n+\n+\n+/* Macros for common conditional expressions used in loongarch.{c,h,md} */\n+#define TARGET_CMODEL_NORMAL\t    (la_target.cmodel == CMODEL_NORMAL)\n+#define TARGET_CMODEL_TINY\t    (la_target.cmodel == CMODEL_TINY)\n+#define TARGET_CMODEL_TINY_STATIC   (la_target.cmodel == CMODEL_TINY_STATIC)\n+#define TARGET_CMODEL_LARGE\t    (la_target.cmodel == CMODEL_LARGE)\n+#define TARGET_CMODEL_EXTREME\t    (la_target.cmodel == CMODEL_EXTREME)\n+\n+#define TARGET_HARD_FLOAT\t    (la_target.isa.fpu != ISA_EXT_NOFPU)\n+#define TARGET_HARD_FLOAT_ABI\t    (la_target.abi.base == ABI_BASE_LP64D \\\n+\t\t\t\t     || la_target.abi.base == ABI_BASE_LP64F)\n+\n+#define TARGET_SOFT_FLOAT\t  (la_target.isa.fpu == ISA_EXT_NOFPU)\n+#define TARGET_SOFT_FLOAT_ABI\t  (la_target.abi.base == ABI_BASE_LP64S)\n+#define TARGET_SINGLE_FLOAT\t  (la_target.isa.fpu == ISA_EXT_FPU32)\n+#define TARGET_SINGLE_FLOAT_ABI\t  (la_target.abi.base == ABI_BASE_LP64F)\n+#define TARGET_DOUBLE_FLOAT\t  (la_target.isa.fpu == ISA_EXT_FPU64)\n+#define TARGET_DOUBLE_FLOAT_ABI\t  (la_target.abi.base == ABI_BASE_LP64D)\n+\n+#define TARGET_64BIT\t\t  (la_target.isa.base == ISA_BASE_LA64V100)\n+#define TARGET_ABI_LP64\t\t  (la_target.abi.base == ABI_BASE_LP64D\t\\\n+\t\t\t\t   || la_target.abi.base == ABI_BASE_LP64F \\\n+\t\t\t\t   || la_target.abi.base == ABI_BASE_LP64S)\n+\n+#define TARGET_ARCH_NATIVE\t  (la_target.cpu_arch == CPU_NATIVE)\n+#define LARCH_ACTUAL_ARCH\t  (TARGET_ARCH_NATIVE \\\n+\t\t\t\t   ? (la_target.cpu_native < N_ARCH_TYPES \\\n+\t\t\t\t      ? (la_target.cpu_native) : (CPU_NATIVE)) \\\n+\t\t\t\t      : (la_target.cpu_arch))\n+\n+#define TARGET_TUNE_NATIVE\t(la_target.cpu_tune == CPU_NATIVE)\n+#define LARCH_ACTUAL_TUNE\t\t(TARGET_TUNE_NATIVE \\\n+\t\t\t\t ? (la_target.cpu_native < N_TUNE_TYPES \\\n+\t\t\t\t    ? (la_target.cpu_native) : (CPU_NATIVE)) \\\n+\t\t\t\t    : (la_target.cpu_tune))\n+\n+#define TARGET_ARCH_LOONGARCH64\t  (LARCH_ACTUAL_ARCH == CPU_LOONGARCH64)\n+#define TARGET_ARCH_LA464\t  (LARCH_ACTUAL_ARCH == CPU_LA464)\n+\n+#define TARGET_TUNE_LOONGARCH64\t  (LARCH_ACTUAL_TUNE == CPU_LOONGARCH64)\n+#define TARGET_TUNE_LA464\t  (LARCH_ACTUAL_TUNE == CPU_LA464)\n+\n+/* Note: optimize_size may vary across functions,\n+   while -m[no]-memcpy imposes a global constraint.  */\n+#define TARGET_DO_OPTIMIZE_BLOCK_MOVE_P  loongarch_do_optimize_block_move_p()\n+\n+#endif /* LOONGARCH_OPTS_H */"}, {"sha": "0e8889b8c9622e1519d2c560fe4b53afa81b29fb", "filename": "gcc/config/loongarch/loongarch-str.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-str.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch-str.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-str.h?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,59 @@\n+/* Generated automatically by \"genstr\" from \"loongarch-strings\".\n+   Please do not edit this file directly.\n+\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef LOONGARCH_STR_H\n+#define LOONGARCH_STR_H\n+\n+#define OPTSTR_ARCH \"arch\"\n+#define OPTSTR_TUNE \"tune\"\n+\n+#define STR_CPU_NATIVE \"native\"\n+#define STR_CPU_LOONGARCH64 \"loongarch64\"\n+#define STR_CPU_LA464 \"la464\"\n+\n+#define STR_ISA_BASE_LA64V100 \"la64\"\n+\n+#define OPTSTR_ISA_EXT_FPU \"fpu\"\n+#define STR_ISA_EXT_NOFPU \"none\"\n+#define STR_ISA_EXT_FPU0 \"0\"\n+#define STR_ISA_EXT_FPU32 \"32\"\n+#define STR_ISA_EXT_FPU64 \"64\"\n+\n+#define OPTSTR_SOFT_FLOAT \"soft-float\"\n+#define OPTSTR_SINGLE_FLOAT \"single-float\"\n+#define OPTSTR_DOUBLE_FLOAT \"double-float\"\n+\n+#define OPTSTR_ABI_BASE \"abi\"\n+#define STR_ABI_BASE_LP64D \"lp64d\"\n+#define STR_ABI_BASE_LP64F \"lp64f\"\n+#define STR_ABI_BASE_LP64S \"lp64s\"\n+\n+#define STR_ABI_EXT_BASE \"base\"\n+\n+#define OPTSTR_CMODEL \"cmodel\"\n+#define STR_CMODEL_NORMAL \"normal\"\n+#define STR_CMODEL_TINY \"tiny\"\n+#define STR_CMODEL_TS \"tiny-static\"\n+#define STR_CMODEL_LARGE \"large\"\n+#define STR_CMODEL_EXTREME \"extreme\"\n+\n+#endif /* LOONGARCH_STR_H */"}, {"sha": "3ff0d860413aa318571db2269d450187d960a15a", "filename": "gcc/config/loongarch/loongarch.opt", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Floongarch.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.opt?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,186 @@\n+; Generated by \"genstr\" from the template \"loongarch.opt.in\"\n+; and definitions from \"loongarch-strings\".\n+;\n+; Please do not edit this file directly.\n+; It will be automatically updated during a gcc build\n+; if you change \"loongarch.opt.in\" or \"loongarch-strings\".\n+;\n+; Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+;\n+\n+; Variables (macros) that should be exported by loongarch.opt:\n+;   la_opt_switches,\n+;   la_opt_abi_base, la_opt_abi_ext,\n+;   la_opt_cpu_arch, la_opt_cpu_tune,\n+;   la_opt_fpu,\n+;   la_cmodel.\n+\n+HeaderInclude\n+config/loongarch/loongarch-opts.h\n+\n+HeaderInclude\n+config/loongarch/loongarch-str.h\n+\n+Variable\n+HOST_WIDE_INT la_opt_switches = 0\n+\n+; ISA related options\n+;; Base ISA\n+Enum\n+Name(isa_base) Type(int)\n+Basic ISAs of LoongArch:\n+\n+EnumValue\n+Enum(isa_base) String(la64) Value(ISA_BASE_LA64V100)\n+\n+\n+;; ISA extensions / adjustments\n+Enum\n+Name(isa_ext_fpu) Type(int)\n+FPU types of LoongArch:\n+\n+EnumValue\n+Enum(isa_ext_fpu) String(none) Value(ISA_EXT_NOFPU)\n+\n+EnumValue\n+Enum(isa_ext_fpu) String(32) Value(ISA_EXT_FPU32)\n+\n+EnumValue\n+Enum(isa_ext_fpu) String(64) Value(ISA_EXT_FPU64)\n+\n+mfpu=\n+Target RejectNegative Joined ToLower Enum(isa_ext_fpu) Var(la_opt_fpu) Init(M_OPTION_NOT_SEEN)\n+-mfpu=FPU\tGenerate code for the given FPU.\n+\n+mfpu=0\n+Target RejectNegative Alias(mfpu=,none)\n+\n+msoft-float\n+Target Driver RejectNegative Var(la_opt_switches) Mask(FORCE_SOFTF) Negative(msingle-float)\n+Prevent the use of all hardware floating-point instructions.\n+\n+msingle-float\n+Target Driver RejectNegative Var(la_opt_switches) Mask(FORCE_F32) Negative(mdouble-float)\n+Restrict the use of hardware floating-point instructions to 32-bit operations.\n+\n+mdouble-float\n+Target Driver RejectNegative Var(la_opt_switches) Mask(FORCE_F64) Negative(msoft-float)\n+Allow hardware floating-point instructions to cover both 32-bit and 64-bit operations.\n+\n+\n+;; Base target models (implies ISA & tune parameters)\n+Enum\n+Name(cpu_type) Type(int)\n+LoongArch CPU types:\n+\n+EnumValue\n+Enum(cpu_type) String(native) Value(CPU_NATIVE)\n+\n+EnumValue\n+Enum(cpu_type) String(loongarch64) Value(CPU_LOONGARCH64)\n+\n+EnumValue\n+Enum(cpu_type) String(la464) Value(CPU_LA464)\n+\n+march=\n+Target RejectNegative Joined Enum(cpu_type) Var(la_opt_cpu_arch) Init(M_OPTION_NOT_SEEN)\n+-march=PROCESSOR\tGenerate code for the given PROCESSOR ISA.\n+\n+mtune=\n+Target RejectNegative Joined Enum(cpu_type) Var(la_opt_cpu_tune) Init(M_OPTION_NOT_SEEN)\n+-mtune=PROCESSOR\tGenerate optimized code for PROCESSOR.\n+\n+\n+; ABI related options\n+; (ISA constraints on ABI are handled dynamically)\n+\n+;; Base ABI\n+Enum\n+Name(abi_base) Type(int)\n+Base ABI types for LoongArch:\n+\n+EnumValue\n+Enum(abi_base) String(lp64d) Value(ABI_BASE_LP64D)\n+\n+EnumValue\n+Enum(abi_base) String(lp64f) Value(ABI_BASE_LP64F)\n+\n+EnumValue\n+Enum(abi_base) String(lp64s) Value(ABI_BASE_LP64S)\n+\n+mabi=\n+Target RejectNegative Joined ToLower Enum(abi_base) Var(la_opt_abi_base) Init(M_OPTION_NOT_SEEN)\n+-mabi=BASEABI\tGenerate code that conforms to the given BASEABI.\n+\n+;; ABI Extension\n+Variable\n+int la_opt_abi_ext = M_OPTION_NOT_SEEN\n+\n+\n+mbranch-cost=\n+Target RejectNegative Joined UInteger Var(loongarch_branch_cost)\n+-mbranch-cost=COST\tSet the cost of branches to roughly COST instructions.\n+\n+mcheck-zero-division\n+Target Mask(CHECK_ZERO_DIV)\n+Trap on integer divide by zero.\n+\n+mcond-move-int\n+Target Var(TARGET_COND_MOVE_INT) Init(1)\n+Conditional moves for integral are enabled.\n+\n+mcond-move-float\n+Target Var(TARGET_COND_MOVE_FLOAT) Init(1)\n+Conditional moves for float are enabled.\n+\n+mmemcpy\n+Target Mask(MEMCPY)\n+Prevent optimizing block moves, which is also the default behavior of -Os.\n+\n+mstrict-align\n+Target Var(TARGET_STRICT_ALIGN) Init(0)\n+Do not generate unaligned memory accesses.\n+\n+mmax-inline-memcpy-size=\n+Target Joined RejectNegative UInteger Var(loongarch_max_inline_memcpy_size) Init(1024)\n+-mmax-inline-memcpy-size=SIZE\tSet the max size of memcpy to inline, default is 1024.\n+\n+; The code model option names for -mcmodel.\n+Enum\n+Name(cmodel) Type(int)\n+The code model option names for -mcmodel:\n+\n+EnumValue\n+Enum(cmodel) String(normal) Value(CMODEL_NORMAL)\n+\n+EnumValue\n+Enum(cmodel) String(tiny) Value(CMODEL_TINY)\n+\n+EnumValue\n+Enum(cmodel) String(tiny-static) Value(CMODEL_TINY_STATIC)\n+\n+EnumValue\n+Enum(cmodel) String(large) Value(CMODEL_LARGE)\n+\n+EnumValue\n+Enum(cmodel) String(extreme) Value(CMODEL_EXTREME)\n+\n+mcmodel=\n+Target RejectNegative Joined Enum(cmodel) Var(la_opt_cmodel) Init(CMODEL_NORMAL)\n+Specify the code model."}, {"sha": "5b9796aea2b929471eccf75c4c44a7ec92903e1d", "filename": "gcc/config/loongarch/t-linux", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Ft-linux?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,53 @@\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Multilib\n+MULTILIB_OPTIONS = mabi=lp64d/mabi=lp64f/mabi=lp64s\n+MULTILIB_DIRNAMES = base/lp64d base/lp64f base/lp64s\n+\n+# The GCC driver always gets all abi-related options on the command line.\n+# (see loongarch-driver.c:driver_get_normalized_m_opts)\n+comma=,\n+MULTILIB_REQUIRED = $(subst $(comma), ,$(TM_MULTILIB_CONFIG))\n+\n+# Multiarch\n+ifneq ($(call if_multiarch,yes),yes)\n+    # Define LA_DISABLE_MULTIARCH if multiarch is disabled.\n+    tm_defines += LA_DISABLE_MULTIARCH\n+else\n+    # Only define MULTIARCH_DIRNAME when multiarch is enabled,\n+    # or it would always introduce ${target} into the search path.\n+    MULTIARCH_DIRNAME = $(LA_MULTIARCH_TRIPLET)\n+endif\n+\n+# Don't define MULTILIB_OSDIRNAMES if multilib is disabled.\n+ifeq ($(filter LA_DISABLE_MULTILIB,$(tm_defines)),)\n+\n+    MULTILIB_OSDIRNAMES = \\\n+      mabi.lp64d=../lib64$\\\n+      $(call if_multiarch,:loongarch64-linux-gnuf64)\n+\n+    MULTILIB_OSDIRNAMES += \\\n+      mabi.lp64f=../lib64/f32$\\\n+      $(call if_multiarch,:loongarch64-linux-gnuf32)\n+\n+    MULTILIB_OSDIRNAMES += \\\n+      mabi.lp64s=../lib64/sf$\\\n+      $(call if_multiarch,:loongarch64-linux-gnusf)\n+\n+endif"}, {"sha": "6d6e3435d5959b605d1750311106b1c9a30d8a48", "filename": "gcc/config/loongarch/t-loongarch", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Ft-loongarch", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfig%2Floongarch%2Ft-loongarch", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Ft-loongarch?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -0,0 +1,71 @@\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Canonical target triplet from config.gcc\n+LA_MULTIARCH_TRIPLET = $(patsubst LA_MULTIARCH_TRIPLET=%,%,$\\\n+$(filter LA_MULTIARCH_TRIPLET=%,$(tm_defines)))\n+\n+# String definition header\n+LA_STR_H = $(srcdir)/config/loongarch/loongarch-str.h\n+\n+# String definition header\n+$(LA_STR_H): s-loongarch-str ; @true\n+s-loongarch-str: $(srcdir)/config/loongarch/genopts/genstr.sh \\\n+\t$(srcdir)/config/loongarch/genopts/loongarch-strings\n+\t$(SHELL) $(srcdir)/config/loongarch/genopts/genstr.sh header \\\n+    $(srcdir)/config/loongarch/genopts/loongarch-strings > \\\n+    tmp-loongarch-str.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-loongarch-str.h \\\n+\t\t$(LA_STR_H)\n+\t$(STAMP) s-loongarch-str\n+\n+loongarch-c.o: $(srcdir)/config/loongarch/loongarch-c.cc $(CONFIG_H) $(SYSTEM_H) \\\n+\tcoretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H) $(TARGET_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(srcdir)/config/loongarch/loongarch-c.cc\n+\n+loongarch-builtins.o: $(srcdir)/config/loongarch/loongarch-builtins.cc $(CONFIG_H) \\\n+\t$(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) $(RECOG_H) langhooks.h \\\n+\t$(DIAGNOSTIC_CORE_H) $(OPTABS_H) $(srcdir)/config/loongarch/loongarch-ftypes.def \\\n+\t$(srcdir)/config/loongarch/loongarch-modes.def\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(srcdir)/config/loongarch/loongarch-builtins.cc\n+\n+loongarch-driver.o : $(srcdir)/config/loongarch/loongarch-driver.cc $(LA_STR_H) \\\n+\t$(CONFIG_H) $(SYSTEM_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+loongarch-opts.o: $(srcdir)/config/loongarch/loongarch-opts.cc $(LA_STR_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+loongarch-cpu.o: $(srcdir)/config/loongarch/loongarch-cpu.cc $(LA_STR_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+loongarch-def.o: $(srcdir)/config/loongarch/loongarch-def.c $(LA_STR_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(INCLUDES) $<\n+\n+$(srcdir)/config/loongarch/loongarch.opt: s-loongarch-opt ; @true\n+s-loongarch-opt: $(srcdir)/config/loongarch/genopts/genstr.sh \\\n+\t$(srcdir)/config/loongarch/genopts/loongarch.opt.in \\\n+\t$(srcdir)/config/loongarch/genopts/loongarch-strings $(LA_STR_H)\n+\t$(SHELL) $(srcdir)/config/loongarch/genopts/genstr.sh opt \\\n+    $(srcdir)/config/loongarch/genopts/loongarch.opt.in \\\n+    > tmp-loongarch.opt\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-loongarch.opt \\\n+    $(srcdir)/config/loongarch/loongarch.opt\n+\t$(STAMP) s-loongarch-opt"}, {"sha": "ea67fb622925daf930a0e71e3a4807cd11ce6285", "filename": "gcc/configure.ac", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44786f64019e7164cab687b19914e7e13c949a4/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b44786f64019e7164cab687b19914e7e13c949a4", "patch": "@@ -951,6 +951,9 @@ AC_ARG_ENABLE(fixed-point,\n     mips*-*-*)\n       enable_fixed_point=yes\n       ;;\n+    loongarch*-*-*)\n+      enable_fixed_point=yes\n+      ;;\n     *)\n       AC_MSG_WARN([fixed-point is not supported for this target, ignored])\n       enable_fixed_point=no\n@@ -3838,6 +3841,17 @@ foo:\tdata8\t25\n \tmovl\tr24 = @tprel(foo#)'\n \ttls_as_opt=--fatal-warnings\n \t;;\n+  loongarch*-*-*)\n+    conftest_s='\n+\t.section .tdata,\"awT\",@progbits\n+x:\t.word 2\n+\t.text\n+\tla.tls.gd $a0,x\n+\tbl __tls_get_addr'\n+\ttls_first_major=0\n+\ttls_first_minor=0\n+\ttls_as_opt='--fatal-warnings'\n+\t;;\n   microblaze*-*-*)\n     conftest_s='\n \t.section .tdata,\"awT\",@progbits\n@@ -5300,6 +5314,17 @@ configured with --enable-newlib-nano-formatted-io.])\n       [AC_DEFINE(HAVE_AS_MARCH_ZIFENCEI, 1,\n \t\t [Define if the assembler understands -march=rv*_zifencei.])])\n     ;;\n+  loongarch*-*-*)\n+    gcc_GAS_CHECK_FEATURE([.dtprelword support],\n+      gcc_cv_as_loongarch_dtprelword, [2,18,0],,\n+      [.section .tdata,\"awT\",@progbits\n+x:\n+\t.word 2\n+\t.text\n+\t.dtprelword x+0x8000],,\n+      [AC_DEFINE(HAVE_AS_DTPRELWORD, 1,\n+\t  [Define if your assembler supports .dtprelword.])])\n+    ;;\n     s390*-*-*)\n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],\n       gcc_cv_as_s390_gnu_attribute,,\n@@ -5333,11 +5358,11 @@ configured with --enable-newlib-nano-formatted-io.])\n     ;;\n esac\n \n-# Mips and HP-UX need the GNU assembler.\n+# Mips, LoongArch and HP-UX need the GNU assembler.\n # Linux on IA64 might be able to use the Intel assembler.\n \n case \"$target\" in\n-  mips*-*-* | *-*-hpux* )\n+  mips*-*-* | loongarch*-*-* | *-*-hpux* )\n     if test x$gas_flag = xyes \\\n        || test x\"$host\" != x\"$build\" \\\n        || test ! -x \"$gcc_cv_as\" \\\n@@ -5494,8 +5519,8 @@ esac\n # ??? Once 2.11 is released, probably need to add first known working\n # version to the per-target configury.\n case \"$cpu_type\" in\n-  aarch64 | alpha | arc | arm | avr | bfin | cris | csky | i386 | m32c | m68k \\\n-  | microblaze | mips | nds32 | nios2 | pa | riscv | rs6000 | score | sparc \\\n+  aarch64 | alpha | arc | arm | avr | bfin | cris | csky | i386 | loongarch | m32c \\\n+  | m68k | microblaze | mips | nds32 | nios2 | pa | riscv | rs6000 | score | sparc \\\n   | tilegx | tilepro | visium | xstormy16 | xtensa)\n     insn=\"nop\"\n     ;;"}]}