{"sha": "1193d05465acd39b6e3c7095274d8351a1e2cd44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5M2QwNTQ2NWFjZDM5YjZlM2M3MDk1Mjc0ZDgzNTFhMWUyY2Q0NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-25T08:36:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-25T09:28:49Z"}, "message": "tree-optimization/99253 - fix reduction path check\n\nThis fixes an ordering problem with verifying that no intermediate\ncomputations in a reduction path are used outside of the chain.  The\ncheck was disabled for value-preserving conversions at the tail\nbut whether a stmt was a conversion or not was only computed after\nthe first use.  The following fixes this by re-ordering things\naccordingly.\n\n2021-02-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99253\n\t* tree-vect-loop.c (check_reduction_path): First compute\n\tcode, then verify out-of-loop uses.\n\n\t* gcc.dg/vect/pr99253.c: New testcase.", "tree": {"sha": "0f422ff8bf1153956f0617bed7b072e384aa3dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f422ff8bf1153956f0617bed7b072e384aa3dab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1193d05465acd39b6e3c7095274d8351a1e2cd44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1193d05465acd39b6e3c7095274d8351a1e2cd44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1193d05465acd39b6e3c7095274d8351a1e2cd44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1193d05465acd39b6e3c7095274d8351a1e2cd44/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880682e7b2348d66f4089fa4af102b69eaaefbc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880682e7b2348d66f4089fa4af102b69eaaefbc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880682e7b2348d66f4089fa4af102b69eaaefbc2"}], "stats": {"total": 78, "additions": 50, "deletions": 28}, "files": [{"sha": "9e3345025babdf56aa27b203d6db2af3e7be0ab9", "filename": "gcc/testsuite/gcc.dg/vect/pr99253.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1193d05465acd39b6e3c7095274d8351a1e2cd44/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99253.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1193d05465acd39b6e3c7095274d8351a1e2cd44/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99253.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99253.c?ref=1193d05465acd39b6e3c7095274d8351a1e2cd44", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+int a = 0;\n+static int b = 0;\n+long c = 0;\n+\n+int\n+main()\n+{\n+  check_vect ();\n+  for (int d = 0; d < 8; d++)\n+    {\n+      a ^= c;\n+      b = a;\n+      a ^= 1;\n+    }\n+  if (a != 0 || b != 1)\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "3e973e774af8f9205be893e01ad9263281116885", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1193d05465acd39b6e3c7095274d8351a1e2cd44/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1193d05465acd39b6e3c7095274d8351a1e2cd44/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1193d05465acd39b6e3c7095274d8351a1e2cd44", "patch": "@@ -3432,34 +3432,6 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n \t  fail = true;\n \t  break;\n \t}\n-      /* Check there's only a single stmt the op is used on.  For the\n-\t not value-changing tail and the last stmt allow out-of-loop uses.\n-\t ???  We could relax this and handle arbitrary live stmts by\n-\t forcing a scalar epilogue for example.  */\n-      imm_use_iterator imm_iter;\n-      gimple *op_use_stmt;\n-      unsigned cnt = 0;\n-      FOR_EACH_IMM_USE_STMT (op_use_stmt, imm_iter, op)\n-\tif (!is_gimple_debug (op_use_stmt)\n-\t    && (*code != ERROR_MARK\n-\t\t|| flow_bb_inside_loop_p (loop, gimple_bb (op_use_stmt))))\n-\t  {\n-\t    /* We want to allow x + x but not x < 1 ? x : 2.  */\n-\t    if (is_gimple_assign (op_use_stmt)\n-\t\t&& gimple_assign_rhs_code (op_use_stmt) == COND_EXPR)\n-\t      {\n-\t\tuse_operand_p use_p;\n-\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n-\t\t  cnt++;\n-\t      }\n-\t    else\n-\t      cnt++;\n-\t  }\n-      if (cnt != 1)\n-\t{\n-\t  fail = true;\n-\t  break;\n-\t}\n       tree_code use_code = gimple_assign_rhs_code (use_stmt);\n       if (use_code == MINUS_EXPR)\n \t{\n@@ -3489,6 +3461,34 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n \t  fail = true;\n \t  break;\n \t}\n+      /* Check there's only a single stmt the op is used on.  For the\n+\t not value-changing tail and the last stmt allow out-of-loop uses.\n+\t ???  We could relax this and handle arbitrary live stmts by\n+\t forcing a scalar epilogue for example.  */\n+      imm_use_iterator imm_iter;\n+      gimple *op_use_stmt;\n+      unsigned cnt = 0;\n+      FOR_EACH_IMM_USE_STMT (op_use_stmt, imm_iter, op)\n+\tif (!is_gimple_debug (op_use_stmt)\n+\t    && (*code != ERROR_MARK\n+\t\t|| flow_bb_inside_loop_p (loop, gimple_bb (op_use_stmt))))\n+\t  {\n+\t    /* We want to allow x + x but not x < 1 ? x : 2.  */\n+\t    if (is_gimple_assign (op_use_stmt)\n+\t\t&& gimple_assign_rhs_code (op_use_stmt) == COND_EXPR)\n+\t      {\n+\t\tuse_operand_p use_p;\n+\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n+\t\t  cnt++;\n+\t      }\n+\t    else\n+\t      cnt++;\n+\t  }\n+      if (cnt != 1)\n+\t{\n+\t  fail = true;\n+\t  break;\n+\t}\n     }\n   return ! fail && ! neg && *code != ERROR_MARK;\n }"}]}