{"sha": "4f3f0296acbb99a0fa2867986956e53e487206a9", "node_id": "C_kwDOANBUbNoAKDRmM2YwMjk2YWNiYjk5YTBmYTI4Njc5ODY5NTZlNTNlNDg3MjA2YTk", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-10-19T08:16:24Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-10-19T11:29:00Z"}, "message": "xtensa: Prepare the transition from Reload to LRA\n\nThis patch provides the first step in the transition from Reload to LRA\nin Xtensa.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa-protos.h\n\t(xtensa_split1_finished_p, xtensa_split_DI_reg_imm): New prototypes.\n\t* config/xtensa/xtensa.cc\n\t(xtensa_split1_finished_p, xtensa_split_DI_reg_imm, xtensa_lra_p):\n\tNew functions.\n\t(TARGET_LRA_P): Replace the dummy hook with xtensa_lra_p.\n\t(xt_true_regnum): Rework.\n\t* config/xtensa/xtensa.h (CALL_REALLY_USED_REGISTERS):\n\tSwitch from CALL_USED_REGISTERS, and revise the comment.\n\t* config/xtensa/constraints.md (Y):\n\tUse !xtensa_split1_finished_p() instead of can_create_pseudo_p().\n\t* config/xtensa/predicates.md (move_operand): Ditto.\n\t* config/xtensa/xtensa.md: Add two new split patterns:\n\t  - splits DImode immediate load into two SImode ones\n\t  - puts out-of-constraint SImode constants into the constant pool\n\t* config/xtensa/xtensa.opt (-mlra): New target-specific option\n\tfor testing purpose.", "tree": {"sha": "f85733002515bd1855a03ae877f15426b815118f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f85733002515bd1855a03ae877f15426b815118f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f3f0296acbb99a0fa2867986956e53e487206a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3f0296acbb99a0fa2867986956e53e487206a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3f0296acbb99a0fa2867986956e53e487206a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3f0296acbb99a0fa2867986956e53e487206a9/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c5cffb712d90bfe36f2cf71d3a052b8068db34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c5cffb712d90bfe36f2cf71d3a052b8068db34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c5cffb712d90bfe36f2cf71d3a052b8068db34"}], "stats": {"total": 123, "additions": 99, "deletions": 24}, "files": [{"sha": "cd200d6d15a383501f37f03dc137d887b26ef2ac", "filename": "gcc/config/xtensa/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fconstraints.md?ref=4f3f0296acbb99a0fa2867986956e53e487206a9", "patch": "@@ -121,7 +121,7 @@\n  (ior (and (match_code \"const_int,const_double,const,symbol_ref,label_ref\")\n \t   (match_test \"TARGET_AUTO_LITPOOLS\"))\n       (and (match_code \"const_int\")\n-\t   (match_test \"can_create_pseudo_p ()\"))))\n+\t   (match_test \"! xtensa_split1_finished_p ()\"))))\n \n ;; Memory constraints.  Do not use define_memory_constraint here.  Doing so\n ;; causes reload to force some constants into the constant pool, but since"}, {"sha": "c11e8634dbe0bd77b57238e9a9ff1c1715104cdb", "filename": "gcc/config/xtensa/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fpredicates.md?ref=4f3f0296acbb99a0fa2867986956e53e487206a9", "patch": "@@ -149,7 +149,7 @@\n      (ior (and (match_code \"const_int\")\n \t       (match_test \"(GET_MODE_CLASS (mode) == MODE_INT\n \t\t\t     && xtensa_simm12b (INTVAL (op)))\n-\t\t\t    || can_create_pseudo_p ()\"))\n+\t\t\t    || ! xtensa_split1_finished_p ()\"))\n \t  (and (match_code \"const_int,const_double,const,symbol_ref,label_ref\")\n \t       (match_test \"(TARGET_CONST16 || TARGET_AUTO_LITPOOLS)\n \t\t\t    && CONSTANT_P (op)"}, {"sha": "bc75ad9698aed727e296ca89332d619df4cccf59", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=4f3f0296acbb99a0fa2867986956e53e487206a9", "patch": "@@ -58,6 +58,8 @@ extern char *xtensa_emit_call (int, rtx *);\n extern char *xtensa_emit_sibcall (int, rtx *);\n extern bool xtensa_tls_referenced_p (rtx);\n extern enum rtx_code xtensa_shlrd_which_direction (rtx, rtx);\n+extern bool xtensa_split1_finished_p (void);\n+extern void xtensa_split_DI_reg_imm (rtx *);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, int);"}, {"sha": "950eb5a59be2224a087371e8157a1a0b4abb1c06", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=4f3f0296acbb99a0fa2867986956e53e487206a9", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hw-doloop.h\"\n #include \"rtl-iter.h\"\n #include \"insn-attr.h\"\n+#include \"tree-pass.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -199,6 +200,7 @@ static void xtensa_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t\t\t    HOST_WIDE_INT delta,\n \t\t\t\t    HOST_WIDE_INT vcall_offset,\n \t\t\t\t    tree function);\n+static bool xtensa_lra_p (void);\n \n static rtx xtensa_delegitimize_address (rtx);\n \n@@ -295,7 +297,7 @@ static rtx xtensa_delegitimize_address (rtx);\n #define TARGET_CANNOT_FORCE_CONST_MEM xtensa_cannot_force_const_mem\n \n #undef TARGET_LRA_P\n-#define TARGET_LRA_P hook_bool_void_false\n+#define TARGET_LRA_P xtensa_lra_p\n \n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\txtensa_legitimate_address_p\n@@ -492,21 +494,30 @@ xtensa_mask_immediate (HOST_WIDE_INT v)\n int\n xt_true_regnum (rtx x)\n {\n-  if (GET_CODE (x) == REG)\n+  if (REG_P (x))\n     {\n-      if (reg_renumber\n-\t  && REGNO (x) >= FIRST_PSEUDO_REGISTER\n-\t  && reg_renumber[REGNO (x)] >= 0)\n+      if (! HARD_REGISTER_P (x)\n+\t  && reg_renumber\n+\t  && (lra_in_progress || reg_renumber[REGNO (x)] >= 0))\n \treturn reg_renumber[REGNO (x)];\n       return REGNO (x);\n     }\n-  if (GET_CODE (x) == SUBREG)\n+  if (SUBREG_P (x))\n     {\n       int base = xt_true_regnum (SUBREG_REG (x));\n-      if (base >= 0 && base < FIRST_PSEUDO_REGISTER)\n-        return base + subreg_regno_offset (REGNO (SUBREG_REG (x)),\n-                                           GET_MODE (SUBREG_REG (x)),\n-                                           SUBREG_BYTE (x), GET_MODE (x));\n+\n+      if (base >= 0\n+\t  && HARD_REGISTER_NUM_P (base))\n+\t{\n+\t  struct subreg_info info;\n+\n+\t  subreg_get_info (lra_in_progress\n+\t\t\t   ? (unsigned) base : REGNO (SUBREG_REG (x)),\n+\t\t\t   GET_MODE (SUBREG_REG (x)),\n+\t\t\t   SUBREG_BYTE (x), GET_MODE (x), &info);\n+\t  if (info.representable_p)\n+\t    return base + info.offset;\n+\t}\n     }\n   return -1;\n }\n@@ -2477,6 +2488,36 @@ xtensa_shlrd_which_direction (rtx op0, rtx op1)\n }\n \n \n+/* Return true after \"split1\" pass has been finished.  */\n+\n+bool\n+xtensa_split1_finished_p (void)\n+{\n+  return cfun && (cfun->curr_properties & PROP_rtl_split_insns);\n+}\n+\n+\n+/* Split a DImode pair of reg (operand[0]) and const_int (operand[1]) into\n+   two SImode pairs, the low-part (operands[0] and [1]) and the high-part\n+   (operands[2] and [3]).  */\n+\n+void\n+xtensa_split_DI_reg_imm (rtx *operands)\n+{\n+  rtx lowpart, highpart;\n+\n+  if (WORDS_BIG_ENDIAN)\n+    split_double (operands[1], &highpart, &lowpart);\n+  else\n+    split_double (operands[1], &lowpart, &highpart);\n+\n+  operands[3] = highpart;\n+  operands[2] = gen_highpart (SImode, operands[0]);\n+  operands[1] = lowpart;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+}\n+\n+\n /* Implement TARGET_CANNOT_FORCE_CONST_MEM.  */\n \n static bool\n@@ -5119,4 +5160,12 @@ xtensa_delegitimize_address (rtx op)\n   return op;\n }\n \n+/* Implement TARGET_LRA_P.  */\n+\n+static bool\n+xtensa_lra_p (void)\n+{\n+  return TARGET_LRA;\n+}\n+\n #include \"gt-xtensa.h\""}, {"sha": "2275fe6d426f25cc5a7d0a5b7ea18d559dd1043a", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=4f3f0296acbb99a0fa2867986956e53e487206a9", "patch": "@@ -229,7 +229,7 @@ along with GCC; see the file COPYING3.  If not see\n }\n \n /* 1 for registers not available across function calls.\n-   These must include the FIXED_REGISTERS and also any\n+   These need not include the FIXED_REGISTERS but must any\n    registers that can be used without being saved.\n    The latter must include the registers where values are returned\n    and the register where structure-value addresses are passed.\n@@ -242,10 +242,10 @@ along with GCC; see the file COPYING3.  If not see\n \n    Proper values are computed in TARGET_CONDITIONAL_REGISTER_USAGE.  */\n \n-#define CALL_USED_REGISTERS\t\t\t\t\t\t\\\n+#define CALL_REALLY_USED_REGISTERS\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  1, 1, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 2, 2, 2, 2,\t\t\t\\\n-  1, 1, 1,\t\t\t\t\t\t\t\t\\\n+  1, 0, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 2, 2, 2, 2,\t\t\t\\\n+  0, 0, 1,\t\t\t\t\t\t\t\t\\\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n   1,\t\t\t\t\t\t\t\t\t\\\n }"}, {"sha": "2e7f76ada5c1df4f18a339deee45a416d7b46d7c", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=4f3f0296acbb99a0fa2867986956e53e487206a9", "patch": "@@ -940,14 +940,9 @@\n \t because of offering further optimization opportunities.  */\n       if (register_operand (operands[0], DImode))\n \t{\n-\t  rtx lowpart, highpart;\n-\n-\t  if (TARGET_BIG_ENDIAN)\n-\t    split_double (operands[1], &highpart, &lowpart);\n-\t  else\n-\t    split_double (operands[1], &lowpart, &highpart);\n-\t  emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]), lowpart));\n-\t  emit_insn (gen_movsi (gen_highpart (SImode, operands[0]), highpart));\n+\t  xtensa_split_DI_reg_imm (operands);\n+\t  emit_move_insn (operands[0], operands[1]);\n+\t  emit_move_insn (operands[2], operands[3]);\n \t  DONE;\n \t}\n \n@@ -981,6 +976,19 @@\n     }\n })\n \n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(match_operand:DI 1 \"const_int_operand\"))]\n+  \"!TARGET_CONST16 && !TARGET_AUTO_LITPOOLS\n+   && ! xtensa_split1_finished_p ()\"\n+  [(set (match_dup 0)\n+\t(match_dup 1))\n+   (set (match_dup 2)\n+\t(match_dup 3))]\n+{\n+  xtensa_split_DI_reg_imm (operands);\n+})\n+\n ;; 32-bit Integer moves\n \n (define_expand \"movsi\"\n@@ -1017,6 +1025,18 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"2,2,2,2,2,2,3,3,3,3,6,3,3,3,3,3\")])\n \n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(match_operand:SI 1 \"const_int_operand\"))]\n+  \"!TARGET_CONST16 && !TARGET_AUTO_LITPOOLS\n+   && ! xtensa_split1_finished_p ()\n+   && ! xtensa_simm12b (INTVAL (operands[1]))\"\n+  [(set (match_dup 0)\n+\t(match_dup 1))]\n+{\n+  operands[1] = force_const_mem (SImode, operands[1]);\n+})\n+\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(match_operand:SI 1 \"constantpool_operand\"))]"}, {"sha": "00d2db4eae1f94411e1e13c4d78c387e08385621", "filename": "gcc/config/xtensa/xtensa.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3f0296acbb99a0fa2867986956e53e487206a9/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt?ref=4f3f0296acbb99a0fa2867986956e53e487206a9", "patch": "@@ -34,6 +34,10 @@ mextra-l32r-costs=\n Target RejectNegative Joined UInteger Var(xtensa_extra_l32r_costs) Init(0)\n Set extra memory access cost for L32R instruction, in clock-cycle units.\n \n+mlra\n+Target Mask(LRA)\n+Use LRA instead of reload (transitional).\n+\n mtarget-align\n Target\n Automatically align branch targets to reduce branch penalties."}]}