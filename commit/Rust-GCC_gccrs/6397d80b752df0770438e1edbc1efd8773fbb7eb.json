{"sha": "6397d80b752df0770438e1edbc1efd8773fbb7eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5N2Q4MGI3NTJkZjA3NzA0MzhlMWVkYmMxZWZkODc3M2ZiYjdlYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-04T04:59:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-04T04:59:39Z"}, "message": "re PR c++/8006 (ice in  mangle_conv_op_name_for_type boost regression)\n\n\t* doc/invoke.texi (-Wabi): Document mangling bug.\n\n\tPR c++/8006\n\t* mangle.c (CLASSTYPE_TEMPLATE_ID_P): Handle instances of template\n\ttemplate parameters.\n\t(globals): Add entity and need_abi_warning.\n\t(decl_is_template_id): Use TYPE_TEMPLATE_INFO, not\n\tCLASSTYPE_TEMPLATE_INFO.\n\t(is_std_substitution): Use CLASSTYPE_TI_TEMPLATE, not\n\tTYPE_TI_TEMPLATE.\n\t(write_prefix): Handle typename types correctly.\n\t(write_template_prefix): Handle template template parameters\n\tcorrectly.\n\t(start_mangling): Add entity parameter.\n\t(finish_mangling): Warn about names whose mangling will change.\n\t(mangle_decl_string): Adjust.\n\t(mangle_type_string): Likewise.\n\t(mangle_special_for_type): Likewise.\n\t(mangle_ctor_vtbl_for_type): Likewise.\n\t(mangle_thunk): Likewise.\n\t(mangle_guard_variable): Likewise.\n\t(mangle_ref_init_variable): Likewise.\n\n\tPR c++/8006\n\t* g++.dg/abi/mangle9.C: New test.\n\t* g++.dg/abi/mangle10.C: New test.\n\t* g++.dg/abi/mangle11.C: New test.\n\t* g++.dg/abi/mangle12.C: New test.\n\nFrom-SVN: r57799", "tree": {"sha": "2a6564ee9bc95c1a339ca2aa488debfeb614d0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a6564ee9bc95c1a339ca2aa488debfeb614d0be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6397d80b752df0770438e1edbc1efd8773fbb7eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6397d80b752df0770438e1edbc1efd8773fbb7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6397d80b752df0770438e1edbc1efd8773fbb7eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6397d80b752df0770438e1edbc1efd8773fbb7eb/comments", "author": null, "committer": null, "parents": [{"sha": "69c75916740ba75141accc68df66e17a486c11d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c75916740ba75141accc68df66e17a486c11d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c75916740ba75141accc68df66e17a486c11d1"}], "stats": {"total": 203, "additions": 168, "deletions": 35}, "files": [{"sha": "a664139beb4909c9875d7be6504de24c5f7b1f6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -1,3 +1,7 @@\n+2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* doc/invoke.texi (-Wabi): Document mangling bug.\n+\n 2002-10-04  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (rs6000_output_function_epilogue): Use a"}, {"sha": "f10a56466b923a39472b00eb0add9b0c867dec63", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -1,3 +1,26 @@\n+2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8006\n+\t* mangle.c (CLASSTYPE_TEMPLATE_ID_P): Handle instances of template\n+\ttemplate parameters.\n+\t(globals): Add entity and need_abi_warning.\n+\t(decl_is_template_id): Use TYPE_TEMPLATE_INFO, not\n+\tCLASSTYPE_TEMPLATE_INFO.\n+\t(is_std_substitution): Use CLASSTYPE_TI_TEMPLATE, not\n+\tTYPE_TI_TEMPLATE.\n+\t(write_prefix): Handle typename types correctly.\n+\t(write_template_prefix): Handle template template parameters\n+\tcorrectly.\n+\t(start_mangling): Add entity parameter.\n+\t(finish_mangling): Warn about names whose mangling will change.\n+\t(mangle_decl_string): Adjust.\n+\t(mangle_type_string): Likewise.\n+\t(mangle_special_for_type): Likewise.\n+\t(mangle_ctor_vtbl_for_type): Likewise.\n+\t(mangle_thunk): Likewise.\n+\t(mangle_guard_variable): Likewise.\n+\t(mangle_ref_init_variable): Likewise.\n+\n 2002-10-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/7188."}, {"sha": "76fd5f7e425695c2b66359b9fd907e2e139e0085", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 72, "deletions": 35, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -80,10 +80,11 @@\n    that hard to distinguish A<T> from A, where A<T> is the type as\n    instantiated outside of the template, and A is the type used\n    without parameters inside the template.  */\n-#define CLASSTYPE_TEMPLATE_ID_P(NODE)\t\t\t\t      \\\n-  (TYPE_LANG_SPECIFIC (NODE) != NULL \t\t\t\t      \\\n-   && CLASSTYPE_TEMPLATE_INFO (NODE) != NULL                          \\\n-   && (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE))))\n+#define CLASSTYPE_TEMPLATE_ID_P(NODE)\t\t\t\t\t\\\n+  (TYPE_LANG_SPECIFIC (NODE) != NULL\t\t\t\t\t\\\n+   && (TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\t\t\\\n+       || (CLASSTYPE_TEMPLATE_INFO (NODE) != NULL\t\t\t\\\n+\t   && (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE))))))\n \n /* Things we only need one of.  This module is not reentrant.  */\n static struct globals\n@@ -95,10 +96,17 @@ static struct globals\n      we've seen them.  */\n   varray_type substitutions;\n \n+  /* The entity that is being mangled.  */\n+  tree entity;\n+\n   /* We are mangling an internal symbol. It is important to keep those\n      involving template parmeters distinct by distinguishing their level\n      and, for non-type parms, their type.  */\n   bool internal_mangling_p;\n+\n+  /* True if the mangling will be different in a future version of the\n+     ABI.  */\n+  bool need_abi_warning;\n } G;\n \n /* Indices into subst_identifiers.  These are identifiers used in\n@@ -192,8 +200,8 @@ static const char *mangle_decl_string PARAMS ((tree));\n \n /* Control functions.  */\n \n-static inline void start_mangling PARAMS ((void));\n-static inline const char *finish_mangling PARAMS ((void));\n+static inline void start_mangling (tree);\n+static inline const char *finish_mangling (bool);\n static tree mangle_special_for_type PARAMS ((tree, const char *));\n \n /* Foreign language functions.  */\n@@ -250,7 +258,7 @@ decl_is_template_id (decl, template_info)\n \t  if (template_info != NULL)\n \t    /* For a templated TYPE_DECL, the template info is hanging\n \t       off the type.  */\n-\t    *template_info = CLASSTYPE_TEMPLATE_INFO (type);\n+\t    *template_info = TYPE_TEMPLATE_INFO (type);\n \t  return 1;\n \t}\n     } \n@@ -398,8 +406,8 @@ is_std_substitution (node, index)\n \n   return (DECL_NAMESPACE_STD_P (CP_DECL_CONTEXT (decl))\n \t  && TYPE_LANG_SPECIFIC (type) \n-\t  && CLASSTYPE_TEMPLATE_INFO (type)\n-\t  && (DECL_NAME (CLASSTYPE_TI_TEMPLATE (type)) \n+\t  && TYPE_TEMPLATE_INFO (type)\n+\t  && (DECL_NAME (TYPE_TI_TEMPLATE (type)) \n \t      == subst_identifiers[index]));\n }\n \n@@ -837,7 +845,8 @@ write_nested_name (decl)\n   write_char ('E');\n }\n \n-/* <prefix> ::= <prefix> <unqualified-name>>\n+/* <prefix> ::= <prefix> <unqualified-name>\n+            ::= <template-param>\n             ::= <template-prefix> <template-args>\n \t    ::= # empty\n \t    ::= <substitution>  */\n@@ -860,7 +869,6 @@ write_prefix (node)\n     return;\n \n   if (DECL_P (node))\n-    /* Node is a decl.  */\n     {\n       /* If this is a function decl, that means we've hit function\n \t scope, so this prefix must be for a local name.  In this\n@@ -874,14 +882,22 @@ write_prefix (node)\n       decl_is_template_id (decl, &template_info);\n     }\n   else\n-    /* Node is a type.  */\n     {\n+      /* Node is a type.  */\n       decl = TYPE_NAME (node);\n       if (CLASSTYPE_TEMPLATE_ID_P (node))\n-\ttemplate_info = CLASSTYPE_TEMPLATE_INFO (node);\n+\ttemplate_info = TYPE_TEMPLATE_INFO (node);\n     }\n \n-  if (template_info != NULL)\n+  /* In G++ 3.2, the name of the template parameter was used.  */\n+  if (TREE_CODE (node) == TEMPLATE_TYPE_PARM \n+      && !abi_version_at_least (2))\n+    G.need_abi_warning = true;\n+\n+  if (TREE_CODE (node) == TEMPLATE_TYPE_PARM\n+      && abi_version_at_least (2))\n+    write_template_param (node);\n+  else if (template_info != NULL)\n     /* Templated.  */\n     {\n       write_template_prefix (decl);\n@@ -898,6 +914,7 @@ write_prefix (node)\n }\n \n /* <template-prefix> ::= <prefix> <template component>\n+                     ::= <template-param>\n                      ::= <substitution>  */\n \n static void\n@@ -917,7 +934,7 @@ write_template_prefix (node)\n   if (decl_is_template_id (decl, &template_info))\n     template = TI_TEMPLATE (template_info);\n   else if (CLASSTYPE_TEMPLATE_ID_P (type))\n-    template = CLASSTYPE_TI_TEMPLATE (type);\n+    template = TYPE_TI_TEMPLATE (type);\n   else\n     /* Oops, not a template.  */\n     abort ();\n@@ -952,8 +969,19 @@ write_template_prefix (node)\n   if (find_substitution (substitution))\n     return;\n \n-  write_prefix (context);\n-  write_unqualified_name (decl);\n+  /* In G++ 3.2, the name of the template template parameter was used.  */\n+  if (TREE_CODE (TREE_TYPE (template)) == TEMPLATE_TEMPLATE_PARM\n+      && !abi_version_at_least (2))\n+    G.need_abi_warning = true;\n+\n+  if (TREE_CODE (TREE_TYPE (template)) == TEMPLATE_TEMPLATE_PARM\n+      && abi_version_at_least (2))\n+    write_template_param (TREE_TYPE (template));\n+  else\n+    {\n+      write_prefix (context);\n+      write_unqualified_name (decl);\n+    }\n \n   add_substitution (substitution);\n }\n@@ -2168,20 +2196,29 @@ write_substitution (seq_id)\n   write_char ('_');\n }\n \n-/* Start mangling a new name or type.  */\n+/* Start mangling ENTITY.  */\n \n static inline void\n-start_mangling ()\n+start_mangling (tree entity)\n {\n+  G.entity = entity;\n+  G.need_abi_warning = false;\n   VARRAY_TREE_INIT (G.substitutions, 1, \"mangling substitutions\");\n   obstack_free (&G.name_obstack, obstack_base (&G.name_obstack));\n }\n \n-/* Done with mangling.  Return the generated mangled name.  */\n+/* Done with mangling.  Return the generated mangled name.  If WARN is\n+   true, and the name of G.entity will be mangled differently in a\n+   future version of the ABI, issue a warning.  */\n \n static inline const char *\n-finish_mangling ()\n+finish_mangling (bool warn)\n {\n+  if (warn_abi && warn && G.need_abi_warning)\n+    warning (\"the mangled name of `%D' will change in a future \"\n+\t     \"version of GCC\",\n+\t     G.entity);\n+\n   /* Clear all the substitutions.  */\n   G.substitutions = 0;\n \n@@ -2216,7 +2253,7 @@ mangle_decl_string (decl)\n {\n   const char *result;\n \n-  start_mangling ();\n+  start_mangling (decl);\n \n   if (TREE_CODE (decl) == TYPE_DECL)\n     write_type (TREE_TYPE (decl));\n@@ -2243,7 +2280,7 @@ mangle_decl_string (decl)\n \twrite_string (\" *INTERNAL* \");\n     }\n \n-  result = finish_mangling ();\n+  result = finish_mangling (/*warn=*/true);\n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"mangle_decl_string = '%s'\\n\\n\", result);\n   return result;\n@@ -2268,9 +2305,9 @@ mangle_type_string (type)\n {\n   const char *result;\n \n-  start_mangling ();\n+  start_mangling (type);\n   write_type (type);\n-  result = finish_mangling ();\n+  result = finish_mangling (/*warn=*/false);\n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"mangle_type_string = '%s'\\n\\n\", result);\n   return result;\n@@ -2298,15 +2335,15 @@ mangle_special_for_type (type, code)\n \n   /* We don't have an actual decl here for the special component, so\n      we can't just process the <encoded-name>.  Instead, fake it.  */\n-  start_mangling ();\n+  start_mangling (type);\n \n   /* Start the mangling.  */\n   write_string (\"_Z\");\n   write_string (code);\n \n   /* Add the type.  */\n   write_type (type);\n-  result = finish_mangling ();\n+  result = finish_mangling (/*warn=*/false);\n \n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"mangle_special_for_type = %s\\n\\n\", result);\n@@ -2373,7 +2410,7 @@ mangle_ctor_vtbl_for_type (type, binfo)\n {\n   const char *result;\n \n-  start_mangling ();\n+  start_mangling (type);\n \n   write_string (\"_Z\");\n   write_string (\"TC\");\n@@ -2382,7 +2419,7 @@ mangle_ctor_vtbl_for_type (type, binfo)\n   write_char ('_');\n   write_type (BINFO_TYPE (binfo));\n \n-  result = finish_mangling ();\n+  result = finish_mangling (/*warn=*/false);\n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"mangle_ctor_vtbl_for_type = %s\\n\\n\", result);\n   return get_identifier (result);\n@@ -2406,7 +2443,7 @@ mangle_thunk (fn_decl, offset, vcall_offset)\n {\n   const char *result;\n   \n-  start_mangling ();\n+  start_mangling (fn_decl);\n \n   write_string (\"_Z\");\n   /* The <special-name> for virtual thunks is Tv, for non-virtual\n@@ -2432,7 +2469,7 @@ mangle_thunk (fn_decl, offset, vcall_offset)\n   /* Scoped name.  */\n   write_encoding (fn_decl);\n \n-  result = finish_mangling ();\n+  result = finish_mangling (/*warn=*/false);\n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"mangle_thunk = %s\\n\\n\", result);\n   return get_identifier (result);\n@@ -2484,15 +2521,15 @@ tree\n mangle_guard_variable (variable)\n      tree variable;\n {\n-  start_mangling ();\n+  start_mangling (variable);\n   write_string (\"_ZGV\");\n   if (strncmp (IDENTIFIER_POINTER (DECL_NAME (variable)), \"_ZGR\", 4) == 0)\n     /* The name of a guard variable for a reference temporary should refer\n        to the reference, not the temporary.  */\n     write_string (IDENTIFIER_POINTER (DECL_NAME (variable)) + 4);\n   else\n     write_name (variable, /*ignore_local_scope=*/0);\n-  return get_identifier (finish_mangling ());\n+  return get_identifier (finish_mangling (/*warn=*/false));\n }\n \n /* Return an identifier for the name of a temporary variable used to\n@@ -2503,10 +2540,10 @@ tree\n mangle_ref_init_variable (variable)\n      tree variable;\n {\n-  start_mangling ();\n+  start_mangling (variable);\n   write_string (\"_ZGR\");\n   write_name (variable, /*ignore_local_scope=*/0);\n-  return get_identifier (finish_mangling ());\n+  return get_identifier (finish_mangling (/*warn=*/false));\n }\n \f\n "}, {"sha": "65aa2a050bf7f9c71794c752ae33d27654ee87c3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -1565,6 +1565,21 @@ G++ will place the @code{A} base class of @code{C} at a non-zero offset;\n it should be placed at offset zero.  G++ mistakenly believes that the\n @code{A} data member of @code{B} is already at offset zero.\n \n+@item\n+Names of template functions whose types involve @code{typename} or\n+template template parameters can be mangled incorrectly.\n+\n+@smallexample\n+template <typename Q>\n+void f(typename Q::X) @{@}\n+\n+template <template <typename> class Q>\n+void f(typename Q<int>::X) @{@}\n+@end smallexample\n+\n+@noindent\n+Instantions of these templates may be mangled incorrectly.\n+\n @end itemize\n \n @item -Wctor-dtor-privacy @r{(C++ only)}"}, {"sha": "61622064b64d3cd9d4faef3f80220451172712b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -1,3 +1,11 @@\n+2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8006\n+\t* g++.dg/abi/mangle9.C: New test.\n+\t* g++.dg/abi/mangle10.C: New test.\n+\t* g++.dg/abi/mangle11.C: New test.\n+\t* g++.dg/abi/mangle12.C: New test.\n+\n 2002-10-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/7188."}, {"sha": "d5782ba6dfcc5d1f42828b71c7cfd34b1bf278df", "filename": "gcc/testsuite/g++.dg/abi/mangle10.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle10.C?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-fabi-version=0\" }\n+\n+template <template <typename> class Q>\n+void f (typename Q<int>::X) {}\n+\n+template <typename Q>\n+struct S {\n+  typedef int X;\n+};\n+\n+template void f<S> (int);\n+\n+// { dg-final { scan-assembler _Z1fI1SEvNT_IiE1XE } }"}, {"sha": "f7151171d30668ed8a31defd83cef234cb8d86fc", "filename": "gcc/testsuite/g++.dg/abi/mangle11.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-Wabi\" }\n+\n+template <typename Q>\n+void f (typename Q::X) {}\n+\n+struct S {\n+  typedef int X;\n+};\n+\n+template void f<S> (int); // { dg-warning \"mangle\" }"}, {"sha": "772b58b7a39e6115420ecbbb13869ffcddae04fa", "filename": "gcc/testsuite/g++.dg/abi/mangle12.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-Wabi\" }\n+\n+template <template <typename> class Q>\n+void f (typename Q<int>::X) {}\n+\n+template <typename Q>\n+struct S {\n+  typedef int X;\n+};\n+\n+template void f<S> (int); // { dg-warning \"mangle\" }"}, {"sha": "f3ededfb4d0611a496c8a5de7733ee13e683414b", "filename": "gcc/testsuite/g++.dg/abi/mangle9.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6397d80b752df0770438e1edbc1efd8773fbb7eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle9.C?ref=6397d80b752df0770438e1edbc1efd8773fbb7eb", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-fabi-version=0\" }\n+\n+template <typename Q>\n+void f (typename Q::X) {}\n+\n+struct S {\n+  typedef int X;\n+};\n+\n+template void f<S> (int);\n+\n+// { dg-final { scan-assembler _Z1fI1SEvNT_1XE } }"}]}