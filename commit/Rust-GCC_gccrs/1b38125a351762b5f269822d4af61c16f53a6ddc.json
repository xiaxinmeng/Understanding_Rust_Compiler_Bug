{"sha": "1b38125a351762b5f269822d4af61c16f53a6ddc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzODEyNWEzNTE3NjJiNWYyNjk4MjJkNGFmNjFjMTZmNTNhNmRkYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-11-04T15:08:18Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-11-04T15:08:18Z"}, "message": "PR libgcj/14358, libgcj/24552:\n\n\t* gnu/gcj/convert/IOConverter.java: Regenerate aliases.  Add\n\taliases for 'euc_jp' and 'eucjp'.\n\t* scripts/encodings.pl: Recognize 'none', not 'NONE'.  Include\n\tcanonical names in output.\n\t(%map): Added UnicodeLittle and UnicodeBig.\n\nFrom-SVN: r106490", "tree": {"sha": "7c4f49c9293c904df002c3dc133b0392c58ccd41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c4f49c9293c904df002c3dc133b0392c58ccd41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b38125a351762b5f269822d4af61c16f53a6ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b38125a351762b5f269822d4af61c16f53a6ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b38125a351762b5f269822d4af61c16f53a6ddc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b38125a351762b5f269822d4af61c16f53a6ddc/comments", "author": null, "committer": null, "parents": [{"sha": "d3585b76d63dd41df119b0118adb37dfe06867c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3585b76d63dd41df119b0118adb37dfe06867c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3585b76d63dd41df119b0118adb37dfe06867c0"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "da005155395b6b26c227a0388cf91cc29d34ea99", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b38125a351762b5f269822d4af61c16f53a6ddc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b38125a351762b5f269822d4af61c16f53a6ddc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1b38125a351762b5f269822d4af61c16f53a6ddc", "patch": "@@ -1,3 +1,12 @@\n+2005-11-04  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/14358, libgcj/24552:\n+\t* gnu/gcj/convert/IOConverter.java: Regenerate aliases.  Add\n+\taliases for 'euc_jp' and 'eucjp'.\n+\t* scripts/encodings.pl: Recognize 'none', not 'NONE'.  Include\n+\tcanonical names in output.\n+\t(%map): Added UnicodeLittle and UnicodeBig.\n+\n 2005-11-04  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* include/sh-signal.h (MAKE_THROW_FRAME): Remove trailing whitespace."}, {"sha": "a0d46677670a52506627aeb71aa88130883f27d6", "filename": "libjava/gnu/gcj/convert/IOConverter.java", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b38125a351762b5f269822d4af61c16f53a6ddc/libjava%2Fgnu%2Fgcj%2Fconvert%2FIOConverter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b38125a351762b5f269822d4af61c16f53a6ddc/libjava%2Fgnu%2Fgcj%2Fconvert%2FIOConverter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FIOConverter.java?ref=1b38125a351762b5f269822d4af61c16f53a6ddc", "patch": "@@ -28,46 +28,53 @@\n     // canonical name.\n     hash.put (\"iso-latin-1\", \"8859_1\");\n     hash.put (\"iso8859_1\", \"8859_1\");\n+    hash.put (\"utf-16le\", \"UnicodeLittle\");\n+    hash.put (\"utf-16be\", \"UnicodeBig\");\n     // At least one build script out there uses 'utf8'.\n     hash.put (\"utf8\", \"UTF8\");\n     // On Solaris the default encoding, as returned by nl_langinfo(),\n     // is `646' (aka ASCII), but the Solaris iconv_open() doesn't\n     // understand that.  We work around the problem by adding an\n     // explicit alias for Solaris users.\n     hash.put (\"646\", \"ASCII\");\n+\n+    // See PR 24552, PR 14358.\n+    hash.put (\"euc_jp\", \"EUCJIS\");\n+    hash.put (\"eucjp\", \"EUCJIS\");\n+\n     // All aliases after this point are automatically generated by the\n     // `encodings.pl' script.  Run it to make any corrections.\n     hash.put (\"ansi_x3.4-1968\", \"ASCII\");\n-    hash.put (\"iso-ir-6\", \"ASCII\");\n     hash.put (\"ansi_x3.4-1986\", \"ASCII\");\n-    hash.put (\"iso_646.irv:1991\", \"ASCII\");\n     hash.put (\"ascii\", \"ASCII\");\n-    hash.put (\"iso646-us\", \"ASCII\");\n-    hash.put (\"us-ascii\", \"ASCII\");\n-    hash.put (\"us\", \"ASCII\");\n-    hash.put (\"ibm367\", \"ASCII\");\n     hash.put (\"cp367\", \"ASCII\");\n+    hash.put (\"cp819\", \"8859_1\");\n     hash.put (\"csascii\", \"ASCII\");\n-    hash.put (\"iso_8859-1:1987\", \"8859_1\");\n+    hash.put (\"cseucpkdfmtjapanese\", \"EUCJIS\");\n+    hash.put (\"csisolatin1\", \"8859_1\");\n+    hash.put (\"csshiftjis\", \"SJIS\");\n+    hash.put (\"euc-jp\", \"EUCJIS\");\n+    hash.put (\"extended_unix_code_packed_format_for_japanese\", \"EUCJIS\");\n+    hash.put (\"ibm367\", \"ASCII\");\n+    hash.put (\"ibm819\", \"8859_1\");\n+    hash.put (\"iso-8859-1\", \"8859_1\");\n     hash.put (\"iso-ir-100\", \"8859_1\");\n+    hash.put (\"iso-ir-6\", \"ASCII\");\n+    hash.put (\"iso646-us\", \"ASCII\");\n+    hash.put (\"iso_646.irv:1991\", \"ASCII\");\n     hash.put (\"iso_8859-1\", \"8859_1\");\n-    hash.put (\"iso-8859-1\", \"8859_1\");\n-    hash.put (\"latin1\", \"8859_1\");\n+    hash.put (\"iso_8859-1:1987\", \"8859_1\");\n     hash.put (\"l1\", \"8859_1\");\n-    hash.put (\"ibm819\", \"8859_1\");\n-    hash.put (\"cp819\", \"8859_1\");\n-    hash.put (\"csisolatin1\", \"8859_1\");\n-    hash.put (\"utf-8\", \"UTF8\");\n-    hash.put (\"none\", \"UTF8\");\n-    hash.put (\"shift_jis\", \"SJIS\");\n+    hash.put (\"latin1\", \"8859_1\");\n     hash.put (\"ms_kanji\", \"SJIS\");\n-    hash.put (\"csshiftjis\", \"SJIS\");\n-    hash.put (\"extended_unix_code_packed_format_for_japanese\", \"EUCJIS\");\n-    hash.put (\"cseucpkdfmtjapanese\", \"EUCJIS\");\n-    hash.put (\"euc-jp\", \"EUCJIS\");\n-    hash.put (\"euc-jp\", \"EUCJIS\");\n-    hash.put (\"utf-16le\", \"UnicodeLittle\");\n-    hash.put (\"utf-16be\", \"UnicodeBig\");\n+    hash.put (\"shift_jis\", \"SJIS\");\n+    hash.put (\"us\", \"ASCII\");\n+    hash.put (\"us-ascii\", \"ASCII\");\n+    hash.put (\"utf-8\", \"UTF8\");\n+    hash.put (\"utf16-be\", \"UnicodeBig\");\n+    hash.put (\"utf16-le\", \"UnicodeLittle\");\n+    // End script-generated section.\n+\n     iconv_byte_swap = iconv_init ();\n   }\n "}, {"sha": "9af108769855c085e29b872d13cce227a802e992", "filename": "libjava/scripts/encodings.pl", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b38125a351762b5f269822d4af61c16f53a6ddc/libjava%2Fscripts%2Fencodings.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b38125a351762b5f269822d4af61c16f53a6ddc/libjava%2Fscripts%2Fencodings.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Fencodings.pl?ref=1b38125a351762b5f269822d4af61c16f53a6ddc", "patch": "@@ -8,7 +8,9 @@\n \t'ISO_8859-1:1987' => '8859_1',\n \t'UTF-8' => 'UTF8',\n \t'Shift_JIS' => 'SJIS',\n-\t'Extended_UNIX_Code_Packed_Format_for_Japanese' => 'EUCJIS'\n+\t'Extended_UNIX_Code_Packed_Format_for_Japanese' => 'EUCJIS',\n+\t'UTF16-LE' => 'UnicodeLittle',\n+\t'UTF16-BE' => 'UnicodeBig' \n \t);\n \n if ($ARGV[0] eq '')\n@@ -25,6 +27,12 @@\n     $file = $ARGV[0];\n }\n \n+# Include canonical names in the output.\n+foreach $key (keys %map)\n+{\n+    $output{lc ($key)} = $map{$key};\n+}\n+\n open (INPUT, \"< $file\") || die \"couldn't open $file: $!\";\n \n $body = 0;\n@@ -50,17 +58,22 @@\n \t$current = $map{$name};\n \tif ($current)\n \t{\n-\t    print \"    hash.put (\\\"$lower\\\", \\\"$current\\\");\\n\";\n+\t    $output{$lower} = $current;\n \t}\n     }\n     elsif ($type eq 'Alias:')\n     {\n \t# The IANA list has some ugliness.\n-\tif ($name ne '' && $name ne 'NONE' && $current)\n+\tif ($name ne '' && $lower ne 'none' && $current)\n \t{\n-\t    print \"    hash.put (\\\"$lower\\\", \\\"$current\\\");\\n\";\n+\t    $output{$lower} = $current;\n \t}\n     }\n }\n \n close (INPUT);\n+\n+foreach $key (sort keys %output)\n+{\n+    print \"    hash.put (\\\"$key\\\", \\\"$output{$key}\\\");\\n\";\n+}"}]}