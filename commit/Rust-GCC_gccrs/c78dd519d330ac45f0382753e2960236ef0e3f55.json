{"sha": "c78dd519d330ac45f0382753e2960236ef0e3f55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc4ZGQ1MTlkMzMwYWM0NWYwMzgyNzUzZTI5NjAyMzZlZjBlM2Y1NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-03-24T13:35:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-03-24T13:35:26Z"}, "message": "re PR target/48237 (ICE: in final_scan_insn, at final.c:2651 with -fselective-scheduling2 -mtune=core2)\n\n\tPR target/48237\n\t* config/i386/i386.md (*movdf_internal_rex64): Do not split\n\talternatives that can be handled with movq or movabsq insn.\n\t(*movdf_internal): Disable for !TARGET_64BIT.\n\t(*movdf_internal_nointeger): Ditto.\n\t* config/i386/i386.c (ix86_print_operand): Handle DFmode immediates.\n\ntestsuite/ChangeLog:\n\n\tPR target/48237\n\t* gcc.target/i386/pr48237.c: New test.\n\nFrom-SVN: r171391", "tree": {"sha": "307a0432c8f680085ed4b8b6f0423034c9a886ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/307a0432c8f680085ed4b8b6f0423034c9a886ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c78dd519d330ac45f0382753e2960236ef0e3f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c78dd519d330ac45f0382753e2960236ef0e3f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c78dd519d330ac45f0382753e2960236ef0e3f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c78dd519d330ac45f0382753e2960236ef0e3f55/comments", "author": null, "committer": null, "parents": [{"sha": "4569f85ec0f3e5ab5cb61f80ee9c133699b5f73f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4569f85ec0f3e5ab5cb61f80ee9c133699b5f73f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4569f85ec0f3e5ab5cb61f80ee9c133699b5f73f"}], "stats": {"total": 150, "additions": 100, "deletions": 50}, "files": [{"sha": "238f6f0fdeb6abb20bdaeb7df833596bffa46236", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c78dd519d330ac45f0382753e2960236ef0e3f55", "patch": "@@ -1,15 +1,22 @@\n+2011-03-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/48237\n+\t* config/i386/i386.md (*movdf_internal_rex64): Do not split\n+\talternatives that can be handled with movq or movabsq insn.\n+\t(*movdf_internal): Disable for !TARGET_64BIT.\n+\t(*movdf_internal_nointeger): Ditto.\n+\t* config/i386/i386.c (ix86_print_operand): Handle DFmode immediates.\n+\n 2011-03-24  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* system.h (FUNCTION_ARG, FUNCTION_INCOMING_ARG): Poison.\n \t(FUNCTION_ARG_ADVANCE): Likewise.\n \t* tm.texi.in: Change references to them to hook references.\n \t* tm.texi: Regenerate.\n-\t* targhooks.c (default_function_arg): Eliminate check for target\n-\tmacro.\n+\t* targhooks.c (default_function_arg): Eliminate check for target macro.\n \t(default_function_incoming_arg): Likewise.\n \t(default_function_arg_advance): Likewise.\n-\t* target.def (function_arg, function_incoming_arg): Change to\n-\tDEFHOOK.\n+\t* target.def (function_arg, function_incoming_arg): Change to DEFHOOK.\n \t(function_arg_advance): Likewise.\n \t* target-def.h: Eliminate FUNCTION_INCOMING_ARG check.\n \n@@ -22,8 +29,7 @@\n 2011-03-24  Diego Novillo  <dnovillo@google.com>\n \n \t* lto-opts.c (input_data_block): Move to lto-streamer-in.c.\n-\t* lto-streamer-in.c (input_string_internal): Add clarifying\n-\tcomments.\n+\t* lto-streamer-in.c (input_string_internal): Add clarifying comments.\n \t(lto_input_data_block): Move from lto-opts.c.  Make extern.\n \tUpdate all users.\n \t(lto_input_string): Rename from input_string.  Make extern.\n@@ -134,8 +140,7 @@\n \n 2011-03-23  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-stdarg.c (va_list_counter_bump): Handle bumps via\n-\tMEM_REF.\n+\t* tree-stdarg.c (va_list_counter_bump): Handle bumps via MEM_REF.\n \t(check_va_list_escapes): Likewise.\n \t(check_all_va_list_escapes): Likewise.\n \n@@ -332,10 +337,8 @@\n \t(v850_handle_option): Access target_flags via opts pointer.  Don't\n \tassert that global structures are in use.  Update calls to\n \tv850_handle_memory_option.\n-\t(v850_encode_data_area): Update references to small memory\n-\tsettings.\n-\t* config/v850/v850.h (struct small_memory_info, small_memory):\n-\tRemove.\n+\t(v850_encode_data_area): Update references to small memory settings.\n+\t* config/v850/v850.h (struct small_memory_info, small_memory): Remove.\n \t(enum small_memory_type): Move to v850-opts.h.\n \t* config/v850/v850.opt (config/v850/v850-opts.h): New\n \tHeaderInclude entry.\n@@ -425,8 +428,7 @@\n \t* config/iq2000/iq2000-opts.h: New.\n \t* config/iq2000/iq2000.c: Don't include opts.h.\n \t(iq2000_tune, iq2000_handle_option, TARGET_HANDLE_OPTION): Remove.\n-\t* config/iq2000/iq2000.h (enum processor_type, iq2000_tune):\n-\tRemove.\n+\t* config/iq2000/iq2000.h (enum processor_type, iq2000_tune): Remove.\n \t* config/iq2000/iq2000.opt (config/iq2000/iq2000-opts.h): New\n \tHeaderInclude entry.\n \t(iq2000_tune): New Variable entry.\n@@ -458,8 +460,7 @@\n \t(frv_cpu_type): Remove.\n \t* config/frv/frv.c: Don't include opts.h.\n \t(frv_cpu_type, frv_handle_option, TARGET_HANDLE_OPTION): Remove.\n-\t* config/frv/frv.opt (config/frv/frv-opts.h): New HeaderInclude\n-\tentry.\n+\t* config/frv/frv.opt (config/frv/frv-opts.h): New HeaderInclude entry.\n \t(frv_cpu_type): New Variable entry.\n \t(frv_cpu): New Enum and EnumValue entries.\n \n@@ -480,8 +481,7 @@\n \tnot bfin_lib_id_given.\n \t(bfin_handle_option): Don't set bfin_lib_id_given.  Access\n \tbfin_cpu_type, bfin_si_revision and bfin_workarounds via opts\n-\tpointer. Use error_at.  Don't assert that global structures are in\n-\tuse.\n+\tpointer. Use error_at.  Don't assert that global structures are in use.\n \t* config/bfin/bfin.h: Include bfin-opts.h.\n \t(enum bfin_cpu_type, bfin_cpu_t): Move to bfin-opts.h.\n \t(bfin_cpu_type, bfin_si_revision, bfin_workarounds): Remove.\n@@ -496,8 +496,7 @@\n \tor -msoft-float here.\n \t* config/arm/arm.h (CPP_SPEC): Handle -mfloat-abi=*, not\n \t-msoft-float and -mhard-float.\n-\t(OPTION_DEFAULT_SPECS): Don't handle -mhard-float and\n-\t-msoft-float.\n+\t(OPTION_DEFAULT_SPECS): Don't handle -mhard-float and -msoft-float.\n \t* config/arm/coff.h (MULTILIB_DEFAULTS): Use mfloat-abi=soft, not\n \tmsoft-float.\n \t* config/arm/elf.h (ASM_SPEC): Don't handle -mhard-float and\n@@ -557,8 +556,7 @@\n \tglobal structures are in use.\n \t(ix86_function_specific_save, ix86_function_specific_restore):\n \tUpdate ix86_isa_flags_explicit field name.\n-\t* config/i386/i386.opt (ix86_isa_flags_explicit): New Variable\n-\tentry.\n+\t* config/i386/i386.opt (ix86_isa_flags_explicit): New Variable entry.\n \t(ix86_isa_flags_explicit): Rename TargetSave entry to\n \tx_ix86_isa_flags_explicit.\n \n@@ -813,8 +811,7 @@\n \tmacro.\n \t(default_function_incoming_arg): Likewise.\n \t(default_function_arg_advance): Likewise.\n-\t* target.def (function_arg, function_incoming_arg): Change to\n-\tDEFHOOK.\n+\t* target.def (function_arg, function_incoming_arg): Change to DEFHOOK.\n \t(function_arg_advance): Likewise.\n \t* target-def.h: Eliminate FUNCTION_INCOMING_ARG check.\n \n@@ -890,7 +887,8 @@\n \t* function.c (safe_insn_predicate, assign_parm_setup_reg): Likewise.\n \t* optabs.c (can_compare_p, prepare_cmp_insn): Likewise.\n \t(emit_cmp_and_jump_insn_1, gen_add2_insn, gen_add3_insn): Likewise.\n-\t(have_add2_insn, gen_sub2_insn, gen_sub3_insn, have_sub2_insn): Likewise.\n+\t(have_add2_insn, gen_sub2_insn, gen_sub3_insn, have_sub2_insn):\n+\tLikewise.\n \t(gen_cond_trap): Likewise.\n \t(prepare_operand): Likewise.  Change icode to an insn_code.\n \t(insn_operand_matches): New function."}, {"sha": "17f097572534ca56cab16c7a464ea4bdb36ec2d6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c78dd519d330ac45f0382753e2960236ef0e3f55", "patch": "@@ -14398,17 +14398,26 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \tfprintf (file, \"0x%08x\", (unsigned int) l);\n     }\n \n-  /* These float cases don't actually occur as immediate operands.  */\n   else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == DFmode)\n     {\n-      char dstr[30];\n+      REAL_VALUE_TYPE r;\n+      long l[2];\n \n-      real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (x), sizeof (dstr), 0, 1);\n-      fputs (dstr, file);\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+      REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n+\n+      if (ASSEMBLER_DIALECT == ASM_ATT)\n+\tputc ('$', file);\n+      /* We can use %d if the number is <32 bits and positive.  */\n+      if (l[1] || l[0] < 0)\n+\tfprintf (file, \"0x%lx%08lx\",\n+\t\t (unsigned long) l[1], (unsigned long) l[0]);\n+      else\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, l[0]);\n     }\n \n-  else if (GET_CODE (x) == CONST_DOUBLE\n-\t   && GET_MODE (x) == XFmode)\n+  /* These float cases don't actually occur as immediate operands.  */\n+  else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == XFmode)\n     {\n       char dstr[30];\n "}, {"sha": "b74136368ae41fabce162c06367830df56ed431e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c78dd519d330ac45f0382753e2960236ef0e3f55", "patch": "@@ -2915,9 +2915,9 @@\n \n (define_insn \"*movdf_internal_rex64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,r  ,m ,Y2*x,Y2*x,Y2*x,m   ,Yi,r \")\n+\t\t\"=f,m,f,r ,m,!r,!m,Y2*x,Y2*x,Y2*x,m   ,Yi,r \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm,f,G,rmF,Fr,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n+\t\t\"fm,f,G,rm,r,F ,F ,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2938,9 +2938,15 @@\n \n     case 3:\n     case 4:\n-      return \"#\";\n+      return \"mov{q}\\t{%1, %0|%0, %1}\";\n \n     case 5:\n+      return \"movabs{q}\\t{%1, %0|%0, %1}\";\n+\n+    case 6:\n+      return \"#\";\n+\n+    case 7:\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_V4SF:\n@@ -2958,9 +2964,9 @@\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-    case 6:\n-    case 7:\n     case 8:\n+    case 9:\n+    case 10:\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_V4SF:\n@@ -2995,17 +3001,27 @@\n \t  gcc_unreachable ();\n \t}\n \n-    case 9:\n-    case 10:\n+    case 11:\n+    case 12:\n     return \"%vmovd\\t{%1, %0|%0, %1}\";\n \n     default:\n       gcc_unreachable();\n     }\n }\n-  [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi,sselog1,ssemov,ssemov,ssemov,ssemov,ssemov\")\n+  [(set_attr \"type\" \"fmov,fmov,fmov,imov,imov,imov,multi,sselog1,ssemov,ssemov,ssemov,ssemov,ssemov\")\n+   (set (attr \"modrm\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"5\") (eq_attr \"type\" \"imov\"))\n+\t (const_string \"0\")\n+\t (const_string \"*\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"5\") (eq_attr \"type\" \"imov\"))\n+\t (const_string \"8\")\n+\t (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4,5,6\")\n        (const_string \"orig\")\n        (const_string \"maybe_vex\")))\n    (set (attr \"prefix_data16\")\n@@ -3015,18 +3031,18 @@\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"DF\")\n-\t       (eq_attr \"alternative\" \"3,4,9,10\")\n+\t       (eq_attr \"alternative\" \"3,4,5,6,11,12\")\n \t\t (const_string \"DI\")\n \n \t       /* For SSE1, we have many fewer alternatives.  */\n \t       (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n-\t\t (cond [(eq_attr \"alternative\" \"5,6\")\n+\t\t (cond [(eq_attr \"alternative\" \"7,8\")\n \t\t\t  (const_string \"V4SF\")\n \t\t       ]\n \t\t   (const_string \"V2SF\"))\n \n \t       /* xorps is one byte shorter.  */\n-\t       (eq_attr \"alternative\" \"5\")\n+\t       (eq_attr \"alternative\" \"7\")\n \t\t (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t    (const_int 0))\n \t\t\t  (const_string \"V4SF\")\n@@ -3041,7 +3057,7 @@\n \t\t  chains, otherwise use short move to avoid extra work.\n \n \t\t  movaps encodes one byte shorter.  */\n-\t       (eq_attr \"alternative\" \"6\")\n+\t       (eq_attr \"alternative\" \"8\")\n \t\t (cond\n \t\t   [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t        (const_int 0))\n@@ -3054,7 +3070,7 @@\n \t       /* For architectures resolving dependencies on register\n \t\t  parts we may avoid extra work to zero out upper part\n \t\t  of register.  */\n-\t       (eq_attr \"alternative\" \"7\")\n+\t       (eq_attr \"alternative\" \"9\")\n \t\t (if_then_else\n \t\t   (ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n \t\t       (const_int 0))\n@@ -3068,7 +3084,7 @@\n \t\t\"=f,m,f,r  ,o ,Y2*x,Y2*x,Y2*x,m   \")\n \t(match_operand:DF 1 \"general_operand\"\n \t\t\"fm,f,G,roF,Fr,C   ,Y2*x,m   ,Y2*x\"))]\n-  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n+  \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && optimize_function_for_speed_p (cfun)\n    && TARGET_INTEGER_DFMODE_MOVES\n    && (reload_in_progress || reload_completed\n@@ -3208,9 +3224,9 @@\n \t\t\t\"=f,m,f,*r  ,o  ,Y2*x,Y2*x,Y2*x ,m  \")\n \t(match_operand:DF 1 \"general_operand\"\n \t\t\t\"fm,f,G,*roF,*Fr,C   ,Y2*x,mY2*x,Y2*x\"))]\n-  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && ((optimize_function_for_size_p (cfun)\n-       || !TARGET_INTEGER_DFMODE_MOVES) && !TARGET_64BIT)\n+  \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n+   && (optimize_function_for_size_p (cfun)\n+       || !TARGET_INTEGER_DFMODE_MOVES)\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || (!(TARGET_SSE2 && TARGET_SSE_MATH)"}, {"sha": "6b9b249d9d6712d533dfa0f80500169cfe0f44a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c78dd519d330ac45f0382753e2960236ef0e3f55", "patch": "@@ -1,3 +1,8 @@\n+2011-03-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/48237\n+\t* gcc.target/i386/pr48237.c: New test.\n+\n 2011-03-24  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/48269\n@@ -328,7 +333,7 @@\n \n 2011-03-15  Rodrigo Rivas Costa  <rodrigorivascosta@gmail.com>\n \n-       * g++.dg/cpp0x/constexpr-attribute.C: New.\n+\t* g++.dg/cpp0x/constexpr-attribute.C: New.\n \n 2011-03-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "e20446eab04d957fb050080aa4834889b2010408", "filename": "gcc/testsuite/gcc.target/i386/pr48237.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48237.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c78dd519d330ac45f0382753e2960236ef0e3f55/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48237.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48237.c?ref=c78dd519d330ac45f0382753e2960236ef0e3f55", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcaller-saves -fschedule-insns2 -fselective-scheduling2 -mtune=core2\" } */\n+\n+union double_union\n+{\n+  double d;\n+  int i[2];\n+};\n+\n+void bar (int, ...);\n+\n+void\n+foo (double d)\n+{\n+  union double_union du = { d };\n+  while (1)\n+    {\n+      du.i[1] -= 0x100000L;\n+      bar (0, du.d);\n+      du.d += d;\n+    }\n+}"}]}