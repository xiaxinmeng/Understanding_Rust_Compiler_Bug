{"sha": "3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwNjc5YzhkNGUyMmYwMDYxNGE1MmNiZDJiMzM3ODBmM2YxYTkxMQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-09-15T14:57:48Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-09-15T14:57:48Z"}, "message": "re PR fortran/91550 (ICE in do_subscript, at fortran/frontend-passes.c:2652)\n\n2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91550\n\t* frontend-passes.c (do_subscript): If step equals\n\tzero, a previuos error has been reported; do nothing\n\tin this case.\n\t* resolve.c (gfc_resolve_iterator): Move error checking\n\tafter type conversion.\n\n2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91550\n\t* gfortran.dg/do_subscript_6.f90: New test.\n\nFrom-SVN: r275729", "tree": {"sha": "8d885cf64ce2b13a250921c758286cace55da118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d885cf64ce2b13a250921c758286cace55da118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/comments", "author": null, "committer": null, "parents": [{"sha": "da903a1610ba94d9309ab3438bd8a6391a7e77fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da903a1610ba94d9309ab3438bd8a6391a7e77fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da903a1610ba94d9309ab3438bd8a6391a7e77fb"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "1006cbda2f4e72abf7e9c4a31b7b6b15193cce20", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "patch": "@@ -1,3 +1,12 @@\n+2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91550\n+\t* frontend-passes.c (do_subscript): If step equals\n+\tzero, a previuos error has been reported; do nothing\n+\tin this case.\n+\t* resolve.c (gfc_resolve_iterator): Move error checking\n+\tafter type conversion.\n+\n 2019-09-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/91557"}, {"sha": "87518b8b7d81ae5b2d3586a15afc8f0f3c4a0e5a", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "patch": "@@ -2578,6 +2578,7 @@ do_subscript (gfc_expr **e)\n \t      bool have_do_start, have_do_end;\n \t      bool error_not_proven;\n \t      int warn;\n+\t      int sgn;\n \n \t      dl = lp->c;\n \t      if (dl == NULL)\n@@ -2606,7 +2607,16 @@ do_subscript (gfc_expr **e)\n \t\t Do not warn in this case.  */\n \n \t      if (dl->ext.iterator->step->expr_type == EXPR_CONSTANT)\n-\t\tmpz_init_set (do_step, dl->ext.iterator->step->value.integer);\n+\t\t{\n+\t\t  sgn = mpz_cmp_ui (dl->ext.iterator->step->value.integer, 0);\n+\t\t  /* This can happen, but then the error has been\n+\t\t     reported previously.  */\n+\t\t  if (sgn == 0)\n+\t\t    continue;\n+\n+\t\t  mpz_init_set (do_step, dl->ext.iterator->step->value.integer);\n+\t\t}\n+\n \t      else\n \t\tcontinue;\n \n@@ -2632,9 +2642,8 @@ do_subscript (gfc_expr **e)\n \t      /* No warning inside a zero-trip loop.  */\n \t      if (have_do_start && have_do_end)\n \t\t{\n-\t\t  int sgn, cmp;\n+\t\t  int cmp;\n \n-\t\t  sgn = mpz_cmp_ui (do_step, 0);\n \t\t  cmp = mpz_cmp (do_end, do_start);\n \t\t  if ((sgn > 0 && cmp < 0) || (sgn < 0 && cmp > 0))\n \t\t    break;"}, {"sha": "ce192bbb1895499f49776702c193871a84802ffe", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "patch": "@@ -7105,19 +7105,6 @@ gfc_resolve_iterator (gfc_iterator *iter, bool real_ok, bool own_scope)\n \t\t\t\t  \"Step expression in DO loop\"))\n     return false;\n \n-  if (iter->step->expr_type == EXPR_CONSTANT)\n-    {\n-      if ((iter->step->ts.type == BT_INTEGER\n-\t   && mpz_cmp_ui (iter->step->value.integer, 0) == 0)\n-\t  || (iter->step->ts.type == BT_REAL\n-\t      && mpfr_sgn (iter->step->value.real) == 0))\n-\t{\n-\t  gfc_error (\"Step expression in DO loop at %L cannot be zero\",\n-\t\t     &iter->step->where);\n-\t  return false;\n-\t}\n-    }\n-\n   /* Convert start, end, and step to the same type as var.  */\n   if (iter->start->ts.kind != iter->var->ts.kind\n       || iter->start->ts.type != iter->var->ts.type)\n@@ -7131,6 +7118,19 @@ gfc_resolve_iterator (gfc_iterator *iter, bool real_ok, bool own_scope)\n       || iter->step->ts.type != iter->var->ts.type)\n     gfc_convert_type (iter->step, &iter->var->ts, 1);\n \n+  if (iter->step->expr_type == EXPR_CONSTANT)\n+    {\n+      if ((iter->step->ts.type == BT_INTEGER\n+\t   && mpz_cmp_ui (iter->step->value.integer, 0) == 0)\n+\t  || (iter->step->ts.type == BT_REAL\n+\t      && mpfr_sgn (iter->step->value.real) == 0))\n+\t{\n+\t  gfc_error (\"Step expression in DO loop at %L cannot be zero\",\n+\t\t     &iter->step->where);\n+\t  return false;\n+\t}\n+    }\n+\n   if (iter->start->expr_type == EXPR_CONSTANT\n       && iter->end->expr_type == EXPR_CONSTANT\n       && iter->step->expr_type == EXPR_CONSTANT)"}, {"sha": "c06029ac75c7420a9edd3c42642f2e634b2ab64a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "patch": "@@ -1,3 +1,8 @@\n+2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91550\n+\t* gfortran.dg/do_subscript_6.f90: New test.\n+\n 2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/91556"}, {"sha": "d78b9d39056cc23649785faf620466db24bb3ddb", "filename": "gcc/testsuite/gfortran.dg/do_subscript_6.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0679c8d4e22f00614a52cbd2b33780f3f1a911/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_6.f90?ref=3e0679c8d4e22f00614a52cbd2b33780f3f1a911", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=legacy\" }\n+! PR 91550 - this used to cause an ICE\n+! Test case by Gerhard Steinmetz\n+program p\n+   real :: a(3)\n+   integer :: i\n+   do i = 1, 3, .1 ! { dg-error \"cannot be zero\" }\n+      a(i) = i\n+   end do\n+end"}]}