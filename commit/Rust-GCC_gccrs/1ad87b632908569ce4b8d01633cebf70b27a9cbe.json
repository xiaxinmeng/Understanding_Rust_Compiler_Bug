{"sha": "1ad87b632908569ce4b8d01633cebf70b27a9cbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkODdiNjMyOTA4NTY5Y2U0YjhkMDE2MzNjZWJmNzBiMjdhOWNiZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-10T21:06:36Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-10T21:06:36Z"}, "message": "(expand_assignment): Don't short circuit store_expr when TO is a\nVAR_DECL since it needs special handling if promoted.\n\nFrom-SVN: r5712", "tree": {"sha": "12389da3406cefee37acb895335903a640d3953b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12389da3406cefee37acb895335903a640d3953b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad87b632908569ce4b8d01633cebf70b27a9cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad87b632908569ce4b8d01633cebf70b27a9cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad87b632908569ce4b8d01633cebf70b27a9cbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad87b632908569ce4b8d01633cebf70b27a9cbe/comments", "author": null, "committer": null, "parents": [{"sha": "abaa26e5b4a995988c18a3d22fbaf77526c7c424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abaa26e5b4a995988c18a3d22fbaf77526c7c424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abaa26e5b4a995988c18a3d22fbaf77526c7c424"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "8665f5df7837800e1abd9b015be241a917fc59c5", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad87b632908569ce4b8d01633cebf70b27a9cbe/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad87b632908569ce4b8d01633cebf70b27a9cbe/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1ad87b632908569ce4b8d01633cebf70b27a9cbe", "patch": "@@ -2399,8 +2399,14 @@ expand_assignment (to, from, want_value, suggest_reg)\n      call the function before we start to compute the lhs.\n      This is needed for correct code for cases such as\n      val = setjmp (buf) on machines where reference to val\n-     requires loading up part of an address in a separate insn.  */\n-  if (TREE_CODE (from) == CALL_EXPR && ! aggregate_value_p (from))\n+     requires loading up part of an address in a separate insn.\n+\n+     Don't do this if TO is a VAR_DECL whose DECL_RTL is REG since it might be\n+     a promoted variable where the zero- or sign- extension needs to be done.\n+     Handling this in the normal way is safe because no computation is done\n+     before the call.  */\n+  if (TREE_CODE (from) == CALL_EXPR && ! aggregate_value_p (from)\n+      && ! (TREE_CODE (to) == VAR_DECL && GET_CODE (DECL_RTL (to)) == REG))\n     {\n       rtx value;\n "}]}