{"sha": "23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmMzliMzc4ODUyZDY3OWU1ZDI0YmJjMjA0ZWM0Y2E4ZmVmYmQ4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-10T18:17:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-10T18:17:10Z"}, "message": "re PR debug/43290 (ICE in dwarf2out_frame_debug_expr)\n\n\tPR debug/43290\n\t* reg-notes.def (REG_CFA_SET_VDRAP): New note.\n\t* dwarf2out.c (dwarf2out_frame_debug_expr): Remove rule 20 - setting\n\tof fde->vdrap_reg.\n\t(dwarf2out_frame_debug): Handle REG_CFA_SET_VDRAP note.\n\t(based_loc_descr): Only express drap or vdrap regno based expressions\n\tusing DW_OP_fbreg when not optimizing.\n\t* config/i386/i386.c (ix86_get_drap_rtx): When not optimizing,\n\tmake the vDRAP = DRAP assignment RTX_FRAME_RELATED_P and add\n\tREG_CFA_SET_VDRAP note.\n\n\tPR debug/36728\n\t* gcc.dg/guality/pr36728-1.c: New test.\n\t* gcc.dg/guality/pr36728-2.c: New test.\n\nFrom-SVN: r157363", "tree": {"sha": "dacbe9fcddf5ad20226ea333141629bbab53dd47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dacbe9fcddf5ad20226ea333141629bbab53dd47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bb025f55a97aec05b9aaff2147b2df6009e90ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb025f55a97aec05b9aaff2147b2df6009e90ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb025f55a97aec05b9aaff2147b2df6009e90ad"}], "stats": {"total": 175, "additions": 142, "deletions": 33}, "files": [{"sha": "3ee158eeba62b49f1540c3a4518247002c3bf555", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "patch": "@@ -1,3 +1,16 @@\n+2010-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/43290\n+\t* reg-notes.def (REG_CFA_SET_VDRAP): New note.\n+\t* dwarf2out.c (dwarf2out_frame_debug_expr): Remove rule 20 - setting\n+\tof fde->vdrap_reg.\n+\t(dwarf2out_frame_debug): Handle REG_CFA_SET_VDRAP note.\n+\t(based_loc_descr): Only express drap or vdrap regno based expressions\n+\tusing DW_OP_fbreg when not optimizing.\n+\t* config/i386/i386.c (ix86_get_drap_rtx): When not optimizing,\n+\tmake the vDRAP = DRAP assignment RTX_FRAME_RELATED_P and add\n+\tREG_CFA_SET_VDRAP note.\n+\n 2010-03-10  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR tree-optimization/43236"}, {"sha": "5f560c47a8b335385696c4239a5b19f59f146e26", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "patch": "@@ -8382,7 +8382,7 @@ ix86_get_drap_rtx (void)\n       unsigned int regno = find_drap_reg ();\n       rtx drap_vreg;\n       rtx arg_ptr;\n-      rtx seq;\n+      rtx seq, insn;\n \n       arg_ptr = gen_rtx_REG (Pmode, regno);\n       crtl->drap_reg = arg_ptr;\n@@ -8391,8 +8391,13 @@ ix86_get_drap_rtx (void)\n       drap_vreg = copy_to_reg (arg_ptr);\n       seq = get_insns ();\n       end_sequence ();\n-\n-      emit_insn_before (seq, NEXT_INSN (entry_of_function ()));\n+      \n+      insn = emit_insn_before (seq, NEXT_INSN (entry_of_function ()));\n+      if (!optimize)\n+\t{\n+\t  add_reg_note (insn, REG_CFA_SET_VDRAP, drap_vreg);\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n       return drap_vreg;\n     }\n   else"}, {"sha": "460144477ebd6a451c1a47ab7b20da31128cf65b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "patch": "@@ -2160,15 +2160,7 @@ dwarf2out_frame_debug_cfa_restore (rtx reg, const char *label)\n                && cfa.indirect == 0\n                && cfa.reg != HARD_FRAME_POINTER_REGNUM\n   effects: Use DW_CFA_def_cfa_expression to define cfa\n-  \t   cfa.reg == fde->drap_reg\n-\n-  Rule 20:\n-  (set reg fde->drap_reg)\n-  constraints: fde->vdrap_reg == INVALID_REGNUM\n-  effects: fde->vdrap_reg = reg.\n-  (set mem fde->drap_reg)\n-  constraints: fde->drap_reg_saved == 1\n-  effects: none.  */\n+  \t   cfa.reg == fde->drap_reg  */\n \n static void\n dwarf2out_frame_debug_expr (rtx expr, const char *label)\n@@ -2239,24 +2231,6 @@ dwarf2out_frame_debug_expr (rtx expr, const char *label)\n \n   fde = current_fde ();\n \n-  if (REG_P (src)\n-      && fde\n-      && fde->drap_reg == REGNO (src)\n-      && (fde->drap_reg_saved\n-\t  || REG_P (dest)))\n-    {\n-      /* Rule 20 */\n-      /* If we are saving dynamic realign argument pointer to a\n-\t register, the destination is virtual dynamic realign\n-\t argument pointer.  It may be used to access argument.  */\n-      if (REG_P (dest))\n-\t{\n-\t  gcc_assert (fde->vdrap_reg == INVALID_REGNUM);\n-\t  fde->vdrap_reg = REGNO (dest);\n-\t}\n-      return;\n-    }\n-\n   switch (GET_CODE (dest))\n     {\n     case REG:\n@@ -2781,6 +2755,20 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n \thandled_one = true;\n \tbreak;\n \n+      case REG_CFA_SET_VDRAP:\n+\tn = XEXP (note, 0);\n+\tif (REG_P (n))\n+\t  {\n+\t    dw_fde_ref fde = current_fde ();\n+\t    gcc_assert (fde\n+\t\t\t&& fde->drap_reg != INVALID_REGNUM\n+\t\t\t&& fde->vdrap_reg == INVALID_REGNUM);\n+\t    if (REG_P (n))\n+\t      fde->vdrap_reg = REGNO (n);\n+\t  }\n+\thandled_one = true;\n+\tbreak;\n+\n       default:\n \tbreak;\n       }\n@@ -12736,13 +12724,18 @@ based_loc_descr (rtx reg, HOST_WIDE_INT offset,\n \t  return new_loc_descr (DW_OP_fbreg, offset, 0);\n \t}\n     }\n-  else if (fde\n+  else if (!optimize\n+\t   && fde\n \t   && fde->drap_reg != INVALID_REGNUM\n \t   && (fde->drap_reg == REGNO (reg)\n \t       || fde->vdrap_reg == REGNO (reg)))\n     {\n       /* Use cfa+offset to represent the location of arguments passed\n-\t on stack when drap is used to align stack.  */\n+\t on the stack when drap is used to align stack.\n+\t Only do this when not optimizing, for optimized code var-tracking\n+\t is supposed to track where the arguments live and the register\n+\t used as vdrap or drap in some spot might be used for something\n+\t else in other part of the routine.  */\n       return new_loc_descr (DW_OP_fbreg, offset, 0);\n     }\n "}, {"sha": "aa2daeac0071af85d9baf73c5bf8203a4bf52ac7", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "patch": "@@ -1,5 +1,6 @@\n /* Register note definitions.\n-   Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -153,6 +154,11 @@ REG_NOTE (CFA_REGISTER)\n    first pattern is the register to be restored.  */\n REG_NOTE (CFA_RESTORE)\n \n+/* Attached to insn that is RTX_FRAME_RELATED_P, marks insn that sets\n+   vDRAP from DRAP.  If vDRAP is a register, vdrap_reg is initalized\n+   to the argument, if it is a MEM, it is ignored.  */\n+REG_NOTE (CFA_SET_VDRAP)\n+\n /* Indicates that REG holds the exception context for the function.\n    This context is shared by inline functions, so the code to acquire\n    the real exception context is delayed until after inlining.  */"}, {"sha": "0b8ec9126980d87f48d6f2f92d74f14562ee8d95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "patch": "@@ -1,3 +1,9 @@\n+2010-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/36728\n+\t* gcc.dg/guality/pr36728-1.c: New test.\n+\t* gcc.dg/guality/pr36728-2.c: New test.\n+\n 2010-03-10  Kaushik Phatak  <kaushik.phatak@kpitcummins.com>\n \n \t* gcc.dg/h8300-div-delay-slot.c: New test."}, {"sha": "408e087bf7e9235089e73d39cb2a8dcc08ce7304", "filename": "gcc/testsuite/gcc.dg/guality/pr36728-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-1.c?ref=23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "patch": "@@ -0,0 +1,43 @@\n+/* PR debug/36728 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+int __attribute__((noinline))\n+foo (int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)\n+{\n+  char *x = __builtin_alloca (arg7);\n+  int __attribute__ ((aligned(32))) y;\n+\n+  y = 2;\n+  asm volatile (\"\" : \"=m\" (y) : \"m\" (y));\n+  x[0] = 25;\n+  asm volatile (\"\" : \"=m\" (x[0]) : \"m\" (x[0]));\n+  return y;\n+}\n+\n+/* { dg-final { gdb-test 12 \"arg1\" \"1\" } } */\n+/* { dg-final { gdb-test 12 \"arg2\" \"2\" } } */\n+/* { dg-final { gdb-test 12 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 12 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 12 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 12 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 12 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 12 \"y\" \"2\" } } */\n+/* { dg-final { gdb-test 14 \"arg1\" \"1\" } } */\n+/* { dg-final { gdb-test 14 \"arg2\" \"2\" } } */\n+/* { dg-final { gdb-test 14 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 14 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 14 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 14 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 14 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 14 \"*x\" \"(char) 25\" } } */\n+/* { dg-final { gdb-test 14 \"y\" \"2\" } } */\n+\n+int\n+main ()\n+{\n+  int l = 0;\n+  asm volatile (\"\" : \"=r\" (l) : \"0\" (l));\n+  foo (l + 1, l + 2, l + 3, l + 4, l + 5, l + 6, l + 30);\n+  return 0;\n+}"}, {"sha": "983757b987b2b6c8909b68559a334c6ed332806c", "filename": "gcc/testsuite/gcc.dg/guality/pr36728-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f39b378852d679e5d24bbc204ec4ca8fefbd8c/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr36728-2.c?ref=23f39b378852d679e5d24bbc204ec4ca8fefbd8c", "patch": "@@ -0,0 +1,43 @@\n+/* PR debug/36728 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+int __attribute__((noinline))\n+foo (int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)\n+{\n+  char x[30];\n+  int __attribute__ ((aligned(32))) y;\n+\n+  y = 2;\n+  asm volatile (\"\" : \"=m\" (y) : \"m\" (y));\n+  x[0] = 25;\n+  asm volatile (\"\" : \"=m\" (x[0]) : \"m\" (x[0]));\n+  return y;\n+}\n+\n+/* { dg-final { gdb-test 12 \"arg1\" \"1\" } } */\n+/* { dg-final { gdb-test 12 \"arg2\" \"2\" } } */\n+/* { dg-final { gdb-test 12 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 12 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 12 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 12 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 12 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 12 \"y\" \"2\" } } */\n+/* { dg-final { gdb-test 14 \"arg1\" \"1\" } } */\n+/* { dg-final { gdb-test 14 \"arg2\" \"2\" } } */\n+/* { dg-final { gdb-test 14 \"arg3\" \"3\" } } */\n+/* { dg-final { gdb-test 14 \"arg4\" \"4\" } } */\n+/* { dg-final { gdb-test 14 \"arg5\" \"5\" } } */\n+/* { dg-final { gdb-test 14 \"arg6\" \"6\" } } */\n+/* { dg-final { gdb-test 14 \"arg7\" \"30\" } } */\n+/* { dg-final { gdb-test 14 \"*x\" \"(char) 25\" } } */\n+/* { dg-final { gdb-test 14 \"y\" \"2\" } } */\n+\n+int\n+main ()\n+{\n+  int l = 0;\n+  asm volatile (\"\" : \"=r\" (l) : \"0\" (l));\n+  foo (l + 1, l + 2, l + 3, l + 4, l + 5, l + 6, l + 30);\n+  return 0;\n+}"}]}