{"sha": "cf8be00de9a9e31a2f05894d429fe38948a0c255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y4YmUwMGRlOWE5ZTMxYTJmMDU4OTRkNDI5ZmUzODk0OGEwYzI1NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-05-18T14:01:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-05-18T14:01:31Z"}, "message": "To...\n\nTo: gcc-patches@gcc.gnu.org\nSubject: PR 71020: Handle abnormal PHIs in tree-call-cdce.c\nFrom: Richard Sandiford <richard.sandiford@arm.com>\nGcc: private.sent\n--text follows this line--\nThe PR is about a case where tree-call-cdce.c causes two abnormal\nPHIs for the same variable to be live at the same time, leading to\na coalescing failure.  It seemed like getting rid of these kinds of\ninput would be generally useful, so I added a utility to tree-dfa.c.\n\nTested on x86_64-linux-gnu.\n\ngcc/\n\tPR middle-end/71020\n\t* tree-dfa.h (replace_abnormal_ssa_names): Declare.\n\t* tree-dfa.c (replace_abnormal_ssa_names): New function.\n\t* tree-call-cdce.c: Include tree-dfa.h.\n\t(can_guard_call_p): New function, extracted from...\n\t(can_use_internal_fn): ...here.\n\t(shrink_wrap_one_built_in_call_with_conds): Remove failure path\n\tand return void.\n\t(shrink_wrap_one_built_in_call): Likewise.\n\t(use_internal_fn): Likewise.\n\t(shrink_wrap_conditional_dead_built_in_calls): Update accordingly\n\tand return void.  Call replace_abnormal_ssa_names.\n\t(pass_call_cdce::execute): Check can_guard_call_p during the\n\tinitial walk.  Assume shrink_wrap_conditional_dead_built_in_calls\n\twill always change something.\n\ngcc/testsuite/\n\t* gcc.dg/torture/pr71020.c: New test.\n\nFrom-SVN: r236393", "tree": {"sha": "a8b6d0e0b1940214a97b2c5e39a0e3fd1e099cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8b6d0e0b1940214a97b2c5e39a0e3fd1e099cf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf8be00de9a9e31a2f05894d429fe38948a0c255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8be00de9a9e31a2f05894d429fe38948a0c255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf8be00de9a9e31a2f05894d429fe38948a0c255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8be00de9a9e31a2f05894d429fe38948a0c255/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29799e9db1ee2bcb8113d96adc965c7a1a284aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29799e9db1ee2bcb8113d96adc965c7a1a284aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29799e9db1ee2bcb8113d96adc965c7a1a284aaa"}], "stats": {"total": 226, "additions": 166, "deletions": 60}, "files": [{"sha": "4ceebb4789f8fac7163f8cf92d9f17d0b7df2a9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf8be00de9a9e31a2f05894d429fe38948a0c255", "patch": "@@ -1,3 +1,21 @@\n+2016-05-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/71020\n+\t* tree-dfa.h (replace_abnormal_ssa_names): Declare.\n+\t* tree-dfa.c (replace_abnormal_ssa_names): New function.\n+\t* tree-call-cdce.c: Include tree-dfa.h.\n+\t(can_guard_call_p): New function, extracted from...\n+\t(can_use_internal_fn): ...here.\n+\t(shrink_wrap_one_built_in_call_with_conds): Remove failure path\n+\tand return void.\n+\t(shrink_wrap_one_built_in_call): Likewise.\n+\t(use_internal_fn): Likewise.\n+\t(shrink_wrap_conditional_dead_built_in_calls): Update accordingly\n+\tand return void.  Call replace_abnormal_ssa_names.\n+\t(pass_call_cdce::execute): Check can_guard_call_p during the\n+\tinitial walk.  Assume shrink_wrap_conditional_dead_built_in_calls\n+\twill always change something.\n+\n 2016-05-18  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/70646"}, {"sha": "d7189e7257d3a2f567d51cf014f7e5b5c57536d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf8be00de9a9e31a2f05894d429fe38948a0c255", "patch": "@@ -1,3 +1,7 @@\n+2016-05-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/torture/pr71020.c: New test.\n+\n 2016-05-18  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/70646"}, {"sha": "9b22280b8f45453ec441c2d020fd0d0208afd03f", "filename": "gcc/testsuite/gcc.dg/torture/pr71020.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71020.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71020.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71020.c?ref=cf8be00de9a9e31a2f05894d429fe38948a0c255", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-options \"-funsafe-math-optimizations\" } */\n+\n+double random_double (void);\n+int setjmp (void *);\n+void do_something (void);\n+\n+#define TEST_UNARY(FUNC)\t\t\t\\\n+  double\t\t\t\t\t\\\n+  FUNC##_dead (void *buffer)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    double d = random_double ();\t\t\\\n+    setjmp (buffer);\t\t\t\t\\\n+    __builtin_##FUNC (d);\t\t\t\\\n+    d += 1;\t\t\t\t\t\\\n+    do_something ();\t\t\t\t\\\n+    return d;\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  double\t\t\t\t\t\\\n+  FUNC##_live (void *buffer)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    double d = random_double ();\t\t\\\n+    setjmp (buffer);\t\t\t\t\\\n+    d = __builtin_##FUNC (d);\t\t\t\\\n+    do_something ();\t\t\t\t\\\n+    return d;\t\t\t\t\t\\\n+  }\n+\n+\n+#define TEST_BINARY(FUNC)\t\t\t\\\n+  double\t\t\t\t\t\\\n+  FUNC##_dead (void *buffer)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    double d1 = random_double ();\t\t\\\n+    double d2 = random_double ();\t\t\\\n+    setjmp (buffer);\t\t\t\t\\\n+    __builtin_##FUNC (d1, d2);\t\t\t\\\n+    d1 += 1;\t\t\t\t\t\\\n+    d2 += 1;\t\t\t\t\t\\\n+    do_something ();\t\t\t\t\\\n+    return d1 + d2;\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  double\t\t\t\t\t\\\n+  FUNC##_live (void *buffer)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    double d1 = random_double ();\t\t\\\n+    double d2 = random_double ();\t\t\\\n+    setjmp (buffer);\t\t\t\t\\\n+    d1 = __builtin_##FUNC (d1, d2);\t\t\\\n+    d2 += 1;\t\t\t\t\t\\\n+    return d1 + d2;\t\t\t\t\\\n+  }\n+\n+TEST_UNARY (acos)\n+TEST_UNARY (asin)\n+TEST_UNARY (asinh)\n+TEST_UNARY (atan)\n+TEST_UNARY (atanh)\n+TEST_UNARY (cos)\n+TEST_UNARY (cosh)\n+TEST_UNARY (exp)\n+TEST_UNARY (expm1)\n+TEST_UNARY (exp2)\n+TEST_UNARY (exp10)\n+TEST_UNARY (log)\n+TEST_UNARY (log2)\n+TEST_UNARY (log10)\n+TEST_UNARY (log1p)\n+TEST_UNARY (significand)\n+TEST_UNARY (sin)\n+TEST_UNARY (sinh)\n+TEST_UNARY (sqrt)\n+\n+TEST_BINARY (fmod)\n+TEST_BINARY (remainder)"}, {"sha": "8df9b08010f885a56e860783a896bac5e60db6a5", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 44, "deletions": 60, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=cf8be00de9a9e31a2f05894d429fe38948a0c255", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-into-ssa.h\"\n #include \"builtins.h\"\n #include \"internal-fn.h\"\n+#include \"tree-dfa.h\"\n \f\n \n /* This pass serves two closely-related purposes:\n@@ -349,6 +350,15 @@ edom_only_function (gcall *call)\n       return false;\n     }\n }\n+\n+/* Return true if it is structurally possible to guard CALL.  */\n+\n+static bool\n+can_guard_call_p (gimple *call)\n+{\n+  return (!stmt_ends_bb_p (call)\n+\t  || find_fallthru_edge (gimple_bb (call)->succs));\n+}\n \f\n /* A helper function to generate gimple statements for one bound\n    comparison, so that the built-in function is called whenever\n@@ -747,11 +757,9 @@ gen_shrink_wrap_conditions (gcall *bi_call, vec<gimple *> conds,\n #define ERR_PROB 0.01\n \n /* Shrink-wrap BI_CALL so that it is only called when one of the NCONDS\n-   conditions in CONDS is false.\n+   conditions in CONDS is false.  */\n \n-   Return true on success, in which case the cfg will have been updated.  */\n-\n-static bool\n+static void\n shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n \t\t\t\t\t  unsigned int nconds)\n {\n@@ -795,11 +803,10 @@ shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n   /* Now find the join target bb -- split bi_call_bb if needed.  */\n   if (stmt_ends_bb_p (bi_call))\n     {\n-      /* If the call must be the last in the bb, don't split the block,\n-\t it could e.g. have EH edges.  */\n+      /* We checked that there was a fallthrough edge in\n+\t can_guard_call_p.  */\n       join_tgt_in_edge_from_call = find_fallthru_edge (bi_call_bb->succs);\n-      if (join_tgt_in_edge_from_call == NULL)\n-        return false;\n+      gcc_assert (join_tgt_in_edge_from_call);\n       free_dominance_info (CDI_DOMINATORS);\n     }\n   else\n@@ -898,28 +905,19 @@ shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n                \" into error conditions.\\n\",\n                LOCATION_FILE (loc), LOCATION_LINE (loc));\n     }\n-\n-  return true;\n }\n \n /* Shrink-wrap BI_CALL so that it is only called when it might set errno\n-   (but is always called if it would set errno).\n-\n-   Return true on success, in which case the cfg will have been updated.  */\n+   (but is always called if it would set errno).  */\n \n-static bool\n+static void\n shrink_wrap_one_built_in_call (gcall *bi_call)\n {\n   unsigned nconds = 0;\n   auto_vec<gimple *, 12> conds;\n   gen_shrink_wrap_conditions (bi_call, conds, &nconds);\n-  /* This can happen if the condition generator decides\n-     it is not beneficial to do the transformation.  Just\n-     return false and do not do any transformation for\n-     the call.  */\n-  if (nconds == 0)\n-    return false;\n-  return shrink_wrap_one_built_in_call_with_conds (bi_call, conds, nconds);\n+  gcc_assert (nconds != 0);\n+  shrink_wrap_one_built_in_call_with_conds (bi_call, conds, nconds);\n }\n \n /* Return true if built-in function call CALL could be implemented using\n@@ -933,11 +931,6 @@ can_use_internal_fn (gcall *call)\n   if (!gimple_vdef (call))\n     return false;\n \n-  /* Punt if we can't conditionalize the call.  */\n-  basic_block bb = gimple_bb (call);\n-  if (stmt_ends_bb_p (call) && !find_fallthru_edge (bb->succs))\n-    return false;\n-\n   /* See whether there is an internal function for this built-in.  */\n   if (replacement_internal_fn (call) == IFN_LAST)\n     return false;\n@@ -951,18 +944,25 @@ can_use_internal_fn (gcall *call)\n   return true;\n }\n \n-/* Implement built-in function call CALL using an internal function.\n-   Return true on success, in which case the cfg will have changed.  */\n+/* Implement built-in function call CALL using an internal function.  */\n \n-static bool\n+static void\n use_internal_fn (gcall *call)\n {\n+  /* We'll be inserting another call with the same arguments after the\n+     lhs has been set, so prevent any possible coalescing failure from\n+     having both values live at once.  See PR 71020.  */\n+  replace_abnormal_ssa_names (call);\n+\n   unsigned nconds = 0;\n   auto_vec<gimple *, 12> conds;\n   if (can_test_argument_range (call))\n-    gen_shrink_wrap_conditions (call, conds, &nconds);\n-  if (nconds == 0 && !edom_only_function (call))\n-    return false;\n+    {\n+      gen_shrink_wrap_conditions (call, conds, &nconds);\n+      gcc_assert (nconds != 0);\n+    }\n+  else\n+    gcc_assert (edom_only_function (call));\n \n   internal_fn ifn = replacement_internal_fn (call);\n   gcc_assert (ifn != IFN_LAST);\n@@ -1008,35 +1008,26 @@ use_internal_fn (gcall *call)\n \t}\n     }\n \n-  if (!shrink_wrap_one_built_in_call_with_conds (call, conds, nconds))\n-    /* It's too late to back out now.  */\n-    gcc_unreachable ();\n-  return true;\n+  shrink_wrap_one_built_in_call_with_conds (call, conds, nconds);\n }\n \n /* The top level function for conditional dead code shrink\n    wrapping transformation.  */\n \n-static bool\n+static void\n shrink_wrap_conditional_dead_built_in_calls (vec<gcall *> calls)\n {\n-  bool changed = false;\n   unsigned i = 0;\n \n   unsigned n = calls.length ();\n-  if (n == 0)\n-    return false;\n-\n   for (; i < n ; i++)\n     {\n       gcall *bi_call = calls[i];\n       if (gimple_call_lhs (bi_call))\n-\tchanged |= use_internal_fn (bi_call);\n+\tuse_internal_fn (bi_call);\n       else\n-\tchanged |= shrink_wrap_one_built_in_call (bi_call);\n+\tshrink_wrap_one_built_in_call (bi_call);\n     }\n-\n-  return changed;\n }\n \n namespace {\n@@ -1079,7 +1070,6 @@ pass_call_cdce::execute (function *fun)\n {\n   basic_block bb;\n   gimple_stmt_iterator i;\n-  bool something_changed = false;\n   auto_vec<gcall *> cond_dead_built_in_calls;\n   FOR_EACH_BB_FN (bb, fun)\n     {\n@@ -1096,7 +1086,8 @@ pass_call_cdce::execute (function *fun)\n \t      && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL)\n \t      && (gimple_call_lhs (stmt)\n \t\t  ? can_use_internal_fn (stmt)\n-\t\t  : can_test_argument_range (stmt)))\n+\t\t  : can_test_argument_range (stmt))\n+\t      && can_guard_call_p (stmt))\n             {\n               if (dump_file && (dump_flags & TDF_DETAILS))\n                 {\n@@ -1114,19 +1105,12 @@ pass_call_cdce::execute (function *fun)\n   if (!cond_dead_built_in_calls.exists ())\n     return 0;\n \n-  something_changed\n-    = shrink_wrap_conditional_dead_built_in_calls (cond_dead_built_in_calls);\n-\n-  if (something_changed)\n-    {\n-      free_dominance_info (CDI_POST_DOMINATORS);\n-      /* As we introduced new control-flow we need to insert PHI-nodes\n-         for the call-clobbers of the remaining call.  */\n-      mark_virtual_operands_for_renaming (fun);\n-      return TODO_update_ssa;\n-    }\n-\n-  return 0;\n+  shrink_wrap_conditional_dead_built_in_calls (cond_dead_built_in_calls);\n+  free_dominance_info (CDI_POST_DOMINATORS);\n+  /* As we introduced new control-flow we need to insert PHI-nodes\n+     for the call-clobbers of the remaining call.  */\n+  mark_virtual_operands_for_renaming (fun);\n+  return TODO_update_ssa;\n }\n \n } // anon namespace"}, {"sha": "9a3b072ae2ff28706ded4c1662cc1d4331a76df4", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=cf8be00de9a9e31a2f05894d429fe38948a0c255", "patch": "@@ -823,6 +823,29 @@ stmt_references_abnormal_ssa_name (gimple *stmt)\n   return false;\n }\n \n+/* If STMT takes any abnormal PHI values as input, replace them with\n+   local copies.  */\n+\n+void\n+replace_abnormal_ssa_names (gimple *stmt)\n+{\n+  ssa_op_iter oi;\n+  use_operand_p use_p;\n+\n+  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, oi, SSA_OP_USE)\n+    {\n+      tree op = USE_FROM_PTR (use_p);\n+      if (TREE_CODE (op) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n+\t{\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t  tree new_name = make_ssa_name (TREE_TYPE (op));\n+\t  gassign *assign = gimple_build_assign (new_name, op);\n+\t  gsi_insert_before (&gsi, assign, GSI_SAME_STMT);\n+\t  SET_USE (use_p, new_name);\n+\t}\n+    }\n+}\n+\n /* Pair of tree and a sorting index, for dump_enumerated_decls.  */\n struct GTY(()) numbered_tree\n {"}, {"sha": "08864cf470b743f2579deabbf89784b8ffff08e5", "filename": "gcc/tree-dfa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftree-dfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8be00de9a9e31a2f05894d429fe38948a0c255/gcc%2Ftree-dfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.h?ref=cf8be00de9a9e31a2f05894d429fe38948a0c255", "patch": "@@ -35,6 +35,7 @@ extern tree get_addr_base_and_unit_offset_1 (tree, HOST_WIDE_INT *,\n \t\t\t\t\t     tree (*) (tree));\n extern tree get_addr_base_and_unit_offset (tree, HOST_WIDE_INT *);\n extern bool stmt_references_abnormal_ssa_name (gimple *);\n+extern void replace_abnormal_ssa_names (gimple *);\n extern void dump_enumerated_decls (FILE *, int);\n \n "}]}