{"sha": "fb12497dfee7a3bc428724f603c0100113b211ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxMjQ5N2RmZWU3YTNiYzQyODcyNGY2MDNjMDEwMDExM2IyMTFjZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:49:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:49:45Z"}, "message": "[multiple changes]\n\n2014-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sigtramp-armvxw.c: Also restore r0.\n\n2014-02-25  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb (Error_Msg_Internal): Warning_Msg_Char set\n\tunconditionally (Set_Msg_Insertion_Warning): Warning_Msg_Char\n\tset unconditionally.\n\t* erroutc.adb (Get_Warning_Tag): Does not give a leading space\n\tany more (Output_Msg_Text): Rewritten with new convention on\n\toutput of warnings that are treated as errors.\n\t* erroutc.ads (Error_Msg_Object): Warn_Chr is always set even\n\tif Warn is False.\n\t* gnat_rm.texi: Updates to documentation on pragma\n\tWarning_As_Error.\n\t* warnsw.adb (Set_Dot_Warning_Switch): -gnatw.e should not\n\tset Warning_Doc_Switch.\n\t* lib-writ.ads: Add documentation note on ALI file generation\n\tfor C.\n\t* exp_ch6.adb (Expand_Call): Remove check for No_Abort_Statements\n\t(belongs in Sem).\n\t* sem_attr.adb (Resolve_Attribute, case Access):\n\tAbort_Task'Access violates the No_Abort_Statements restriction.\n\t* sem_res.adb (Resolve_Call): Check restriction\n\tNo_Abort_Statements for call to Abort_Task or a renaming of it.\n\nFrom-SVN: r208146", "tree": {"sha": "819b8b790bd06c024d40ea7421cd0a408dbdfcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/819b8b790bd06c024d40ea7421cd0a408dbdfcaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb12497dfee7a3bc428724f603c0100113b211ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb12497dfee7a3bc428724f603c0100113b211ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb12497dfee7a3bc428724f603c0100113b211ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb12497dfee7a3bc428724f603c0100113b211ce/comments", "author": null, "committer": null, "parents": [{"sha": "0c3985a955aa99d2970234e2eeb622a6aca2c94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3985a955aa99d2970234e2eeb622a6aca2c94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3985a955aa99d2970234e2eeb622a6aca2c94c"}], "stats": {"total": 238, "additions": 153, "deletions": 85}, "files": [{"sha": "7aef15360e2f66a2e11139395dcc56540cff6c26", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -1,3 +1,30 @@\n+2014-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sigtramp-armvxw.c: Also restore r0.\n+\n+2014-02-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb (Error_Msg_Internal): Warning_Msg_Char set\n+\tunconditionally (Set_Msg_Insertion_Warning): Warning_Msg_Char\n+\tset unconditionally.\n+\t* erroutc.adb (Get_Warning_Tag): Does not give a leading space\n+\tany more (Output_Msg_Text): Rewritten with new convention on\n+\toutput of warnings that are treated as errors.\n+\t* erroutc.ads (Error_Msg_Object): Warn_Chr is always set even\n+\tif Warn is False.\n+\t* gnat_rm.texi: Updates to documentation on pragma\n+\tWarning_As_Error.\n+\t* warnsw.adb (Set_Dot_Warning_Switch): -gnatw.e should not\n+\tset Warning_Doc_Switch.\n+\t* lib-writ.ads: Add documentation note on ALI file generation\n+\tfor C.\n+\t* exp_ch6.adb (Expand_Call): Remove check for No_Abort_Statements\n+\t(belongs in Sem).\n+\t* sem_attr.adb (Resolve_Attribute, case Access):\n+\tAbort_Task'Access violates the No_Abort_Statements restriction.\n+\t* sem_res.adb (Resolve_Call): Check restriction\n+\tNo_Abort_Statements for call to Abort_Task or a renaming of it.\n+\n 2014-02-25  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb (Array_Type_Declaration): Check for case of using"}, {"sha": "b62558917792779cf04847618c671249d73dab48", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -732,6 +732,7 @@ package body Errout is\n       Continuation_New_Line := False;\n       Suppress_Message := False;\n       Kill_Message := False;\n+      Warning_Msg_Char := ' ';\n       Set_Msg_Text (Msg, Sptr);\n \n       --  Kill continuation if parent message killed\n@@ -2756,26 +2757,20 @@ package body Errout is\n \n       procedure Set_Msg_Insertion_Warning (C : Character) is\n       begin\n-         Warning_Msg_Char := ' ';\n-\n          if P <= Text'Last and then Text (P) = C then\n-            if Warning_Doc_Switch then\n-               Warning_Msg_Char := '?';\n-            end if;\n-\n+            Warning_Msg_Char := '?';\n             P := P + 1;\n \n          elsif P + 1 <= Text'Last\n            and then (Text (P) in 'a' .. 'z'\n-                      or else\n+                       or else\n                      Text (P) in 'A' .. 'Z')\n            and then Text (P + 1) = C\n          then\n-            if Warning_Doc_Switch then\n-               Warning_Msg_Char := Text (P);\n-            end if;\n-\n+            Warning_Msg_Char := Text (P);\n             P := P + 2;\n+         else\n+            Warning_Msg_Char := ' ';\n          end if;\n       end Set_Msg_Insertion_Warning;\n "}, {"sha": "3f167026d45cc26e52a85a797ac32ec478e9c779", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -309,11 +309,11 @@ package body Erroutc is\n    begin\n       if Warn and then Warn_Chr /= ' ' then\n          if Warn_Chr = '?' then\n-            return \" [enabled by default]\";\n+            return \"[enabled by default]\";\n          elsif Warn_Chr in 'a' .. 'z' then\n-            return \" [-gnatw\" & Warn_Chr & ']';\n+            return \"[-gnatw\" & Warn_Chr & ']';\n          else pragma Assert (Warn_Chr in 'A' .. 'Z');\n-            return \" [-gnatw.\" & Fold_Lower (Warn_Chr) & ']';\n+            return \"[-gnatw.\" & Fold_Lower (Warn_Chr) & ']';\n          end if;\n       else\n          return \"\";\n@@ -554,55 +554,69 @@ package body Erroutc is\n       Start : Natural;\n \n    begin\n-      --  Set error message line length\n-\n-      if Error_Msg_Line_Length = 0 then\n-         Length := Nat'Last;\n-      else\n-         Length := Error_Msg_Line_Length;\n-      end if;\n-\n-      Max := Integer (Length - Column + 1);\n-\n       declare\n-         Txt : constant String  := Text.all & Get_Warning_Tag (E);\n-         Len : constant Natural := Txt'Length;\n+         Tag : constant String := Get_Warning_Tag (E);\n+         Txt : String_Ptr;\n+         Len : Natural;\n \n       begin\n-         --  For warning, add \"warning: \" unless msg starts with \"info: \"\n+         --  Postfix warning tag to message if needed\n+\n+         if Tag /= \"\" and then Warning_Doc_Switch then\n+            Txt := new String'(Text.all & ' ' & Tag);\n+         else\n+            Txt := Text;\n+         end if;\n+\n+         --  Deal with warning case\n \n          if Errors.Table (E).Warn then\n-            if Len < 6\n-              or else Txt (Txt'First .. Txt'First + 5) /= \"info: \"\n+\n+            --  Nothing to do with info messages, \"info \" already set\n+\n+            if Txt'Length >= 6\n+              and then Txt (Txt'First .. Txt'First + 5) = \"info: \"\n             then\n-               --  One more check, if warning is to be treated as error, then\n-               --  here is where we deal with that.\n+               null;\n \n-               if Errors.Table (E).Warn_Err then\n-                  Write_Str (\"warning(error): \");\n-                  Warnings_Treated_As_Errors := Warnings_Treated_As_Errors + 1;\n-                  Max := Max - 16;\n+            --  Warning treated as error\n \n-               --  Normal case\n+            elsif Errors.Table (E).Warn_Err then\n \n-               else\n-                  Write_Str (\"warning: \");\n-                  Max := Max - 9;\n-               end if;\n+               --  We prefix the tag error: rather than warning: and postfix\n+               --  [warning-as-error] at the end.\n+\n+               Warnings_Treated_As_Errors := Warnings_Treated_As_Errors + 1;\n+               Txt := new String'(\"error: \" & Txt.all & \" [warning-as-error]\");\n+\n+            --  Normal case, prefix\n+\n+            else\n+               Txt := new String'(\"warning: \" & Txt.all);\n             end if;\n \n             --  No prefix needed for style message, \"(style)\" is there already\n \n          elsif Errors.Table (E).Style then\n             null;\n \n-            --  All other cases, add \"error: \"\n+            --  All other cases, add \"error: \" if unique error tag set\n \n          elsif Opt.Unique_Error_Tag then\n-            Write_Str (\"error: \");\n-            Max := Max - 7;\n+            Txt := new String'(\"error: \" & Txt.all);\n          end if;\n \n+         --  Set error message line length and length of message\n+\n+         if Error_Msg_Line_Length = 0 then\n+            Length := Nat'Last;\n+         else\n+            Length := Error_Msg_Line_Length;\n+         end if;\n+\n+         Max := Integer (Length - Column + 1);\n+         Len := Txt'Length;\n+\n          --  Here we have to split the message up into multiple lines\n \n          Ptr := 1;"}, {"sha": "58611289da46a3d023e3d9a77041289176e1c10e", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -200,8 +200,8 @@ package Erroutc is\n       --  as a result of a match with a Warning_As_Error pragma.\n \n       Warn_Chr : Character;\n-      --  Warning character, valid only if Warn is True\n-      --    ' '      -- ? appeared on its own in message\n+      --  Warning character (note: set even if Warning_Doc_Switch is False)\n+      --    ' '      -- ? appeared on its own in message or no ? in message\n       --    '?'      -- ?? appeared in message\n       --    'x'      -- ?x? appeared in message\n       --    'X'      -- ?x? appeared in message (X is upper case of x)"}, {"sha": "58e945ed07aa362814cf69412c10149d67e6a951", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -3253,9 +3253,8 @@ package body Exp_Ch6 is\n                                (Return_Applies_To\n                                  (Return_Statement_Entity (Ancestor))))\n                   then\n-                     --  Pass along value that was passed in if the routine\n-                     --  we are returning from also has an\n-                     --  Accessibility_Of_Result formal.\n+                     --  Pass along value that was passed in if the returned\n+                     --  routine also has an Accessibility_Of_Result formal.\n \n                      Level :=\n                        New_Occurrence_Of\n@@ -3642,16 +3641,9 @@ package body Exp_Ch6 is\n          Subp := Parent_Subp;\n       end if;\n \n-      --  Check for violation of No_Abort_Statements\n-\n-      if Restriction_Check_Required (No_Abort_Statements)\n-        and then Is_RTE (Subp, RE_Abort_Task)\n-      then\n-         Check_Restriction (No_Abort_Statements, Call_Node);\n-\n       --  Check for violation of No_Dynamic_Attachment\n \n-      elsif Restriction_Check_Required (No_Dynamic_Attachment)\n+      if Restriction_Check_Required (No_Dynamic_Attachment)\n         and then RTU_Loaded (Ada_Interrupts)\n         and then (Is_RTE (Subp, RE_Is_Reserved)      or else\n                   Is_RTE (Subp, RE_Is_Attached)      or else"}, {"sha": "138551df327e52e3a6130881d74deaba05283a9d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -7578,60 +7578,69 @@ which treats all warnings as errors.\n \n The pattern may contain asterisks, which match zero or more characters in\n the message. For example, you can use\n-@code{pragma Warnings (Off, \"*bits of*unused\")} to suppress the warning\n-message @code{warning: 960 bits of \"a\" unused}. No other regular\n+@code{pragma Warning_As_Error (\"*bits of*unused\")} to treat the warning\n+message @code{warning: 960 bits of \"a\" unused} as an error. No other regular\n expression notations are permitted. All characters other than asterisk in\n these three specific cases are treated as literal characters in the match.\n The match is case insensitive, for example XYZ matches xyz.\n \n-Another possibility for the static_string_EXPRESSION which works if\n-error tags are enabled (@option{-gnatw.e}) is to use the tag string\n-preceded by a space,\n-as shown in the example below.\n+Another possibility for the static_string_EXPRESSION which works whether\n+or not error tags are enabled (@option{-gnatw.d}) is to use the\n+@option{-gnatw} tag string, enclosed in brackets,\n+as shown in the example below, to treat a class of warnings as errors.\n+\n+The above use of patterns to match the message applies only to warning\n+messages generated by the front end. This pragma can also be applied to\n+warnings provided by the back end and mentioned in @ref{Pragma Warnings}.\n+By using a single full @option{-Wxxx} switch in the pragma, such warnings\n+can also be treated as errors.\n \n The pragma can appear either in a global configuration pragma file\n (e.g. @file{gnat.adc}), or at the start of a file. Given a global\n configuration pragma file containing:\n \n @smallexample @c ada\n-pragma Warning_As_Error (\" [-gnatwj]\");\n+pragma Warning_As_Error (\"[-gnatwj]\");\n @end smallexample\n \n @noindent\n which will treat all obsolescent feature warnings as errors, the\n following program compiles as shown (compile options here are\n-@option{-gnatwa.e -gnatld7 -gnatj60}).\n+@option{-gnatwa.d -gnatl -gnatj55}).\n \n @smallexample @c ada\n      1. pragma Warning_As_Error (\"*never assigned*\");\n      2. function Warnerr return String is\n      3.    X : Integer;\n            |\n-        >>> warning(error): variable \"X\" is never read and\n-            never assigned [-gnatwv]\n+        >>> error: variable \"X\" is never read and\n+            never assigned [-gnatwv] [warning-as-error]\n \n      4.    Y : Integer;\n            |\n-        >>> warning: variable \"Y\" is assigned but never\n-            read [-gnatwu]\n+        >>> warning: variable \"Y\" is assigned but\n+            never read [-gnatwu]\n \n-     5.\n-     6. begin\n-     7.    Y := 0;\n-     8.    return %ABC%;\n+     5. begin\n+     6.    Y := 0;\n+     7.    return %ABC%;\n                   |\n-        >>> warning(error): use of \"%\" is an obsolescent\n-            feature (RM J.2(4)), use \"\"\" instead [-gnatwj]\n+        >>> error: use of \"%\" is an obsolescent\n+            feature (RM J.2(4)), use \"\"\" instead\n+            [-gnatwj] [warning-as-error]\n \n-     9. end;\n+     8. end;\n \n- 9 lines: No errors, 3 warnings (2 treated as errors)\n+ 8 lines: No errors, 3 warnings (2 treated as errors)\n @end smallexample\n \n @noindent\n Note that this pragma does not affect the set of warnings issued in\n any way, it merely changes the effect of a matching warning if one\n-is produced as a result of other warnings options.\n+is produced as a result of other warnings options. As shown in this\n+example, if the pragma results in a warning being treated as an error,\n+the tag is changed from \"warning:\" to \"error:\" and the string\n+\"[warning-as-error]\" is appended to the end of the message.\n \n @node Pragma Warnings\n @unnumberedsec Pragma Warnings"}, {"sha": "c68f3c68a85bc9fb7b0fd2dca99b1cbcc6ee4527", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -848,6 +848,15 @@ package Lib.Writ is\n    --  the spec of SPARK_Xrefs in file spark_xrefs.ads for full details of the\n    --  format.\n \n+   -------------------------------\n+   -- ALI File Generation for C --\n+   -------------------------------\n+\n+   --  The C compiler can also generate ALI files for use by the IDE's in\n+   --  providing navigation services in C. These ALI files are a subset of\n+   --  the specification above, lacking all Ada-specific output. Primarily\n+   --  the IDE uses the cross-reference sections of such files.\n+\n    ----------------------\n    -- Global Variables --\n    ----------------------"}, {"sha": "6a0c892bc75e756e1ad4fc7e3a8d52fdc2e73120", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -9645,7 +9645,9 @@ package body Sem_Attr is\n             | Attribute_Unchecked_Access\n             | Attribute_Unrestricted_Access =>\n \n-         Access_Attribute :\n+         Access_Attribute : declare\n+            Nam : Entity_Id;\n+\n          begin\n             if Is_Variable (P) then\n                Note_Possible_Modification (P, Sure => False);\n@@ -9684,20 +9686,32 @@ package body Sem_Attr is\n                      Get_Next_Interp (Index, It);\n                   end loop;\n \n-               --  If Prefix is a subprogram name, it is frozen by this\n-               --  reference:\n+               --  If Prefix is a subprogram name, this reference freezes:\n \n                --    If it is a type, there is nothing to resolve.\n                --    If it is an object, complete its resolution.\n \n                elsif Is_Overloadable (Entity (P)) then\n+                  Nam := Entity (P);\n \n                   --  Avoid insertion of freeze actions in spec expression mode\n \n                   if not In_Spec_Expression then\n                      Freeze_Before (N, Entity (P));\n                   end if;\n \n+                  --  Forbid access to Abort_Task if restriction active\n+\n+                  if Restriction_Check_Required (No_Abort_Statements)\n+                    and then\n+                      (Is_RTE (Nam, RE_Abort_Task)\n+                        or else\n+                         (Present (Alias (Nam))\n+                           and then Is_RTE (Alias (Nam), RE_Abort_Task)))\n+                  then\n+                     Check_Restriction (No_Abort_Statements, N);\n+                  end if;\n+\n                elsif Is_Type (Entity (P)) then\n                   null;\n                else"}, {"sha": "cbb4de9bf2c1429d50ae3ed900610a67c232dcb5", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -5408,6 +5408,17 @@ package body Sem_Res is\n          Nam := Entity (Subp);\n          Set_Entity_With_Style_Check (Subp, Nam);\n \n+         --  Check restriction No_Abort_Statements, which is triggered by a\n+         --  call to Ada.Task_Identification.Abort_Task.\n+\n+         if Restriction_Check_Required (No_Abort_Statements)\n+           and then (Is_RTE (Nam, RE_Abort_Task)\n+                      or else (Present (Alias (Nam))\n+                                and then Is_RTE (Alias (Nam), RE_Abort_Task)))\n+         then\n+            Check_Restriction (No_Abort_Statements, N);\n+         end if;\n+\n       --  Otherwise we must have the case of an overloaded call\n \n       else"}, {"sha": "176be21b89bc65c199b29f0a77d7beaff7b13f47", "filename": "gcc/ada/sigtramp-armvxw.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fsigtramp-armvxw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fsigtramp-armvxw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-armvxw.c?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -165,16 +165,14 @@ CR(\".cfi_def_cfa \" S(CFA_REG) \", 0\")\n /* Register location blocks\n    ------------------------\n    Rules to find registers of interest from the CFA. This should comprise\n-   all the non-volatile registers relevant to the interrupted context.\n-\n-   ??? Note that r0 was excluded for consistency with the PPC version of\n-   this file, not sure if that's right.  */\n+   all the non-volatile registers relevant to the interrupted context.  */\n \n #define COMMON_CFI(REG) \\\n   \".cfi_offset \" S(REGNO_##REG) \",\" S(REG_SET_##REG)\n \n #define CFI_COMMON_REGS \\\n CR(\"# CFI for common registers\\n\") \\\n+TCR(COMMON_CFI(G_REG_OFFSET(0)))  \\\n TCR(COMMON_CFI(G_REG_OFFSET(1)))  \\\n TCR(COMMON_CFI(G_REG_OFFSET(2)))  \\\n TCR(COMMON_CFI(G_REG_OFFSET(3)))  \\"}, {"sha": "f07fdf92902e8f8b38d74ad4cd43dd4c3b0a6737", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb12497dfee7a3bc428724f603c0100113b211ce/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=fb12497dfee7a3bc428724f603c0100113b211ce", "patch": "@@ -267,7 +267,6 @@ package body Warnsw is\n             Ineffective_Inline_Warnings         := True;\n             List_Body_Required_Info             := True;\n             List_Inherited_Aspects              := True;\n-            Warning_Doc_Switch                  := True;\n             Warn_On_Ada_2005_Compatibility      := True;\n             Warn_On_Ada_2012_Compatibility      := True;\n             Warn_On_All_Unread_Out_Parameters   := True;"}]}