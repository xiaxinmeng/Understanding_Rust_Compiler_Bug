{"sha": "253c7a0090928522c2bca312dc227ebf53b2dd99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzYzdhMDA5MDkyODUyMmMyYmNhMzEyZGMyMjdlYmY1M2IyZGQ5OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-06-04T07:50:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-06-04T07:50:27Z"}, "message": "i386.c (ix86_reorg): Replace the jump instead of adding nop.\n\n\t* i386.c (ix86_reorg): Replace the jump instead of adding nop.\n\t* i386.md (UNSPEC_REP): New constant.\n\t(return_internal_long): New pattern.\n\nFrom-SVN: r67432", "tree": {"sha": "ed3cdb18a97f6744254714f5f804504fd7ad402a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed3cdb18a97f6744254714f5f804504fd7ad402a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/253c7a0090928522c2bca312dc227ebf53b2dd99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253c7a0090928522c2bca312dc227ebf53b2dd99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253c7a0090928522c2bca312dc227ebf53b2dd99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253c7a0090928522c2bca312dc227ebf53b2dd99/comments", "author": null, "committer": null, "parents": [{"sha": "01d3224a48291c181104b127a4490379f54b9a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d3224a48291c181104b127a4490379f54b9a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d3224a48291c181104b127a4490379f54b9a31"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "b918c909fb36268d792599e0992fa934b3bb2ce8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253c7a0090928522c2bca312dc227ebf53b2dd99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253c7a0090928522c2bca312dc227ebf53b2dd99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=253c7a0090928522c2bca312dc227ebf53b2dd99", "patch": "@@ -1,3 +1,9 @@\n+Wed Jun  4 09:49:21 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_reorg): Replace the jump instead of adding nop.\n+\t* i386.md (UNSPEC_REP): New constant.\n+\t(return_internal_long): New pattern.\n+\n 2003-06-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR optimization/11018"}, {"sha": "7386ba55131dcbcbdeeeb7dc67ca8c7262bdbd8a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253c7a0090928522c2bca312dc227ebf53b2dd99/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253c7a0090928522c2bca312dc227ebf53b2dd99/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=253c7a0090928522c2bca312dc227ebf53b2dd99", "patch": "@@ -15543,9 +15543,10 @@ ix86_reorg ()\n     basic_block bb = e->src;\n     rtx ret = bb->end;\n     rtx prev;\n-    bool insert = false;\n+    bool replace = false;\n \n-    if (!returnjump_p (ret) || !maybe_hot_bb_p (bb))\n+    if (GET_CODE (ret) != JUMP_INSN || GET_CODE (PATTERN (ret)) != RETURN\n+\t|| !maybe_hot_bb_p (bb))\n       continue;\n     for (prev = PREV_INSN (ret); prev; prev = PREV_INSN (prev))\n       if (active_insn_p (prev) || GET_CODE (prev) == CODE_LABEL)\n@@ -15556,22 +15557,25 @@ ix86_reorg ()\n \tfor (e = bb->pred; e; e = e->pred_next)\n \t  if (EDGE_FREQUENCY (e) && e->src->index >= 0\n \t      && !(e->flags & EDGE_FALLTHRU))\n-\t    insert = 1;\n+\t    replace = true;\n       }\n-    if (!insert)\n+    if (!replace)\n       {\n \tprev = prev_active_insn (ret);\n \tif (prev\n \t    && ((GET_CODE (prev) == JUMP_INSN && any_condjump_p (prev))\n \t\t|| GET_CODE (prev) == CALL_INSN))\n-\t  insert = 1;\n+\t  replace = true;\n \t/* Empty functions get branch misspredict even when the jump destination\n \t   is not visible to us.  */\n \tif (!prev && cfun->function_frequency > FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n-\t  insert = 1;\n+\t  replace = true;\n+      }\n+    if (replace)\n+      {\n+        emit_insn_before (gen_return_internal_long (), ret);\n+\tdelete_insn (ret);\n       }\n-    if (insert)\n-      emit_insn_before (gen_nop (), ret);\n   }\n }\n "}, {"sha": "d192cc8b1cfc8cf8a3a45461d4d0c2278633e110", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253c7a0090928522c2bca312dc227ebf53b2dd99/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253c7a0090928522c2bca312dc227ebf53b2dd99/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=253c7a0090928522c2bca312dc227ebf53b2dd99", "patch": "@@ -113,6 +113,9 @@\n    ; x87 Floating point\n    (UNSPEC_FPATAN\t\t65)\n    (UNSPEC_FYL2X\t\t66)\n+\n+   ; REP instruction\n+   (UNSPEC_REP\t\t\t67)\n   ])\n \n (define_constants\n@@ -14236,6 +14239,19 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"modrm\" \"0\")])\n \n+;; Used by x86_machine_dependent_reorg to avoid penalty on single byte RET\n+;; instruction Athlon and K8 have.\n+\n+(define_insn \"return_internal_long\"\n+  [(return)\n+   (unspec [(const_int 0)] UNSPEC_REP)]\n+  \"reload_completed\"\n+  \"rep {;} ret\"\n+  [(set_attr \"length\" \"1\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"modrm\" \"0\")])\n+\n (define_insn \"return_pop_internal\"\n   [(return)\n    (use (match_operand:SI 0 \"const_int_operand\" \"\"))]"}]}