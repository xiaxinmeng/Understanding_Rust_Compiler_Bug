{"sha": "19652adf824a8ea67dab582f1da76d23c77f4814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2NTJhZGY4MjRhOGVhNjdkYWI1ODJmMWRhNzZkMjNjNzdmNDgxNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-10T16:19:22Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-10T16:19:22Z"}, "message": "calls.c, function.c: Always define PREFERRED_STACK_BOUNDARY if not already defined.\n\n\t* calls.c, function.c: Always define PREFERRED_STACK_BOUNDARY\n\tif not already defined.  Remove all #ifdefs on STACK_BOUNDARY;\n\tthis macro is now required.\n\n\t* cselib.c (cselib_process_insn), flow.c (propagate_block),\n\tloop.c (find_and_verify_loops), reload.c (reload): Check\n\tfor rtx code of CALL_INSN, not CALL, when deciding if we\n\tneed to check for REG_SETJMP note.\n\n\t* gcse.c (compute_hash_table, compute_store_table): Update\n\tthe #ifdef NON_SAVING_SETJMP code to the new REG_SETJMP\n\tlogic.\n\n\t* config/avr/avr.c: Fix typo.\n\t* config/convex/convex.c (expand_movstr): Use adjust_address.\n\t* config/dsp16xx/dsp16xx.c: Define dsp16xx_compare_gen\n\tvariable.\n\t* config/dsp16xx/dsp16xx.md: Correct calls to replace_equiv_address.\n\t* config/elxsi/elxsi.c: Include tree.h, expr.h, regs.h, and flags.h.\n\tFix typo.\n\t* config/elxsi/elxsi.h: Don't define Rmode (typo for Pmode?)\n\tDo define STACK_BOUNDARY.\n\t* config/i370/i370.c: Include expr.h.\n\t* config/i860/sysv3.h, config/i860/sysv4.h, config/m32r/m32r.h,\n\tconfig/pa/som.h, config/v850/v850.h: Take in_ctors and\n\tin_dtors out of EXTRA_SECTIONS; take CTORS_SECTION_FUNCTION\n\tand DTORS_SECTION_FUNCTION out of EXTRA_SECTION_FUNCTIONS.\n\t* config/m88k/m88k.c: Include c-tree.h after expr.h.\n\t* config/pdp11/pdp11.c: Include expr.h and toplev.h.\n\t* config/romp/romp.c: Include expr.h after tree.h.\n\tInclude toplev.h.\n\t(output_fpop): Use xmalloc, not oballoc.\n\t* config/we32k/we32k.c: Include expr.h.\n\nFrom-SVN: r44768", "tree": {"sha": "71cd924b65b522f29baed4de47af5e11b3129192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71cd924b65b522f29baed4de47af5e11b3129192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19652adf824a8ea67dab582f1da76d23c77f4814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19652adf824a8ea67dab582f1da76d23c77f4814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19652adf824a8ea67dab582f1da76d23c77f4814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19652adf824a8ea67dab582f1da76d23c77f4814/comments", "author": null, "committer": null, "parents": [{"sha": "07fe2dec7ab1851349aca50c9935865af6e1f398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fe2dec7ab1851349aca50c9935865af6e1f398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fe2dec7ab1851349aca50c9935865af6e1f398"}], "stats": {"total": 195, "additions": 93, "deletions": 102}, "files": [{"sha": "0d9367f0820bdfebc095fa416091e6cc475be758", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -1,3 +1,39 @@\n+2001-08-10  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* calls.c, function.c: Always define PREFERRED_STACK_BOUNDARY\n+\tif not already defined.  Remove all #ifdefs on STACK_BOUNDARY;\n+\tthis macro is now required.\n+\n+\t* cselib.c (cselib_process_insn), flow.c (propagate_block),\n+\tloop.c (find_and_verify_loops), reload.c (reload): Check\n+\tfor rtx code of CALL_INSN, not CALL, when deciding if we\n+\tneed to check for REG_SETJMP note.\n+\n+\t* gcse.c (compute_hash_table, compute_store_table): Update\n+\tthe #ifdef NON_SAVING_SETJMP code to the new REG_SETJMP\n+\tlogic.\n+\n+\t* config/avr/avr.c: Fix typo.\n+\t* config/convex/convex.c (expand_movstr): Use adjust_address.\n+\t* config/dsp16xx/dsp16xx.c: Define dsp16xx_compare_gen\n+\tvariable.\n+\t* config/dsp16xx/dsp16xx.md: Correct calls to replace_equiv_address.\n+\t* config/elxsi/elxsi.c: Include tree.h, expr.h, regs.h, and flags.h.\n+\tFix typo.\n+\t* config/elxsi/elxsi.h: Don't define Rmode (typo for Pmode?)\n+\tDo define STACK_BOUNDARY.\n+\t* config/i370/i370.c: Include expr.h.\n+\t* config/i860/sysv3.h, config/i860/sysv4.h, config/m32r/m32r.h,\n+\tconfig/pa/som.h, config/v850/v850.h: Take in_ctors and\n+\tin_dtors out of EXTRA_SECTIONS; take CTORS_SECTION_FUNCTION\n+\tand DTORS_SECTION_FUNCTION out of EXTRA_SECTION_FUNCTIONS.\n+\t* config/m88k/m88k.c: Include c-tree.h after expr.h.\n+\t* config/pdp11/pdp11.c: Include expr.h and toplev.h.\n+\t* config/romp/romp.c: Include expr.h after tree.h.\n+\tInclude toplev.h.\n+\t(output_fpop): Use xmalloc, not oballoc.\n+\t* config/we32k/we32k.c: Include expr.h.\n+\n 2001-08-10  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.h: Fix formatting.\n@@ -41,7 +77,7 @@\n \n 2001-08-09  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n-\t* stmt.c (expand_null_return_1): Remove code to generate simple returns \n+\t* stmt.c (expand_null_return_1): Remove code to generate simple returns\n \tand \"use_goto\" argument.\n \t(expand_null_return, expand_value_return): Update all callers.\n \t* function.c (expand_function_end): Remove code to generate simple\n@@ -161,7 +197,7 @@\n \t(ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR): Remove.\n \t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n \t* config/c4x/c4x.c: Move include of tree.h.\n-\t* config/clipper/clipper.c (clix_asm_out_constructor): New.\t\n+\t* config/clipper/clipper.c (clix_asm_out_constructor): New.\n \t(clix_asm_out_destructor): New.\n \t* config/clipper/clix.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n \t(ASM_OUTPUT_DESTRUCTOR): Remove."}, {"sha": "1f40d53e5203078c0fdb9e4e0acbec78187c9c80", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #define FUNCTION_OK_FOR_SIBCALL(DECL) 1\n #endif\n \n-#if !defined PREFERRED_STACK_BOUNDARY && defined STACK_BOUNDARY\n+#if !defined PREFERRED_STACK_BOUNDARY\n #define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n #endif\n \n@@ -988,7 +988,7 @@ restore_fixed_argument_area (save_area, argblock, high_to_save, low_to_save)\n     move_by_pieces (stack_area, validize_mem (save_area),\n \t\t    high_to_save - low_to_save + 1, PARM_BOUNDARY);\n }\n-#endif\n+#endif /* REG_PARM_STACK_SPACE */\n \n /* If any elements in ARGS refer to parameters that are to be passed in\n    registers, but not in memory, and whose alignment does not permit a\n@@ -1368,10 +1368,8 @@ compute_argument_block_size (reg_parm_stack_space, args_size,\n   /* For accumulate outgoing args mode we don't need to align, since the frame\n      will be already aligned.  Align to STACK_BOUNDARY in order to prevent\n      backends from generating missaligned frame sizes.  */\n-#ifdef STACK_BOUNDARY\n   if (ACCUMULATE_OUTGOING_ARGS && preferred_stack_boundary > STACK_BOUNDARY)\n     preferred_stack_boundary = STACK_BOUNDARY;\n-#endif\n \n   /* Compute the actual size of the argument block required.  The variable\n      and constant sizes must be combined, the size may have to be rounded,\n@@ -1382,7 +1380,6 @@ compute_argument_block_size (reg_parm_stack_space, args_size,\n       args_size->var = ARGS_SIZE_TREE (*args_size);\n       args_size->constant = 0;\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n       preferred_stack_boundary /= BITS_PER_UNIT;\n       if (preferred_stack_boundary > 1)\n \t{\n@@ -1393,7 +1390,6 @@ compute_argument_block_size (reg_parm_stack_space, args_size,\n \t    abort ();\n \t  args_size->var = round_up (args_size->var, preferred_stack_boundary);\n \t}\n-#endif\n \n       if (reg_parm_stack_space > 0)\n \t{\n@@ -1412,7 +1408,6 @@ compute_argument_block_size (reg_parm_stack_space, args_size,\n     }\n   else\n     {\n-#ifdef PREFERRED_STACK_BOUNDARY\n       preferred_stack_boundary /= BITS_PER_UNIT;\n       if (preferred_stack_boundary < 1)\n \tpreferred_stack_boundary = 1;\n@@ -1422,7 +1417,6 @@ compute_argument_block_size (reg_parm_stack_space, args_size,\n \t\t\t      / preferred_stack_boundary\n \t\t\t      * preferred_stack_boundary)\n \t\t\t     - stack_pointer_delta);\n-#endif\n \n       args_size->constant = MAX (args_size->constant,\n \t\t\t\t reg_parm_stack_space);\n@@ -2296,11 +2290,7 @@ expand_call (exp, target, ignore)\n     }\n \n   /* Figure out the amount to which the stack should be aligned.  */\n-#ifdef PREFERRED_STACK_BOUNDARY\n   preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n-#else\n-  preferred_stack_boundary = STACK_BOUNDARY;\n-#endif\n \n   /* Operand 0 is a pointer-to-function; get the type of the function.  */\n   funtype = TREE_TYPE (TREE_OPERAND (exp, 0));\n@@ -2905,7 +2895,6 @@ expand_call (exp, target, ignore)\n \n       compute_argument_addresses (args, argblock, num_actuals);\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n       /* If we push args individually in reverse order, perform stack alignment\n \t before the first push (the last arg).  */\n       if (PUSH_ARGS_REVERSED && argblock == 0\n@@ -2931,12 +2920,6 @@ expand_call (exp, target, ignore)\n       /* Now that the stack is properly aligned, pops can't safely\n \t be deferred during the evaluation of the arguments.  */\n       NO_DEFER_POP;\n-#endif\n-\n-      /* Don't try to defer pops if preallocating, not even from the first arg,\n-\t since ARGBLOCK probably refers to the SP.  */\n-      if (argblock)\n-\tNO_DEFER_POP;\n \n       funexp = rtx_for_function_call (fndecl, exp);\n \n@@ -3008,13 +2991,11 @@ expand_call (exp, target, ignore)\n \t\tsibcall_failure = 1;\n \t    }\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n       /* If we pushed args in forward order, perform stack alignment\n \t after pushing the last arg.  */\n       if (!PUSH_ARGS_REVERSED && argblock == 0)\n \tanti_adjust_stack (GEN_INT (adjusted_args_size.constant\n \t\t\t\t    - unadjusted_args_size));\n-#endif\n \n       /* If register arguments require space on the stack and stack space\n \t was not preallocated, allocate stack space here for arguments\n@@ -3074,11 +3055,9 @@ expand_call (exp, target, ignore)\n       /* All arguments and registers used for the call must be set up by\n \t now!  */\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n       /* Stack must be properly aligned now.  */\n       if (pass && stack_pointer_delta % preferred_unit_stack_boundary)\n \tabort ();\n-#endif\n \n       /* Generate the actual call instruction.  */\n       emit_call_1 (funexp, fndecl, funtype, unadjusted_args_size,\n@@ -3558,12 +3537,10 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n     }\n   fun = orgfun;\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n   /* Ensure current function's preferred stack boundary is at least\n      what we need.  */\n   if (cfun->preferred_stack_boundary < PREFERRED_STACK_BOUNDARY)\n     cfun->preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n-#endif\n \n   /* If this kind of value comes back in memory,\n      decide where in memory it should come back.  */\n@@ -3772,14 +3749,12 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n   assemble_external_libcall (fun);\n \n   original_args_size = args_size;\n-#ifdef PREFERRED_STACK_BOUNDARY\n   args_size.constant = (((args_size.constant\n \t\t\t  + stack_pointer_delta\n \t\t\t  + STACK_BYTES - 1)\n \t\t\t  / STACK_BYTES\n \t\t\t  * STACK_BYTES)\n \t\t\t - stack_pointer_delta);\n-#endif\n \n   args_size.constant = MAX (args_size.constant,\n \t\t\t    reg_parm_stack_space);\n@@ -3848,13 +3823,11 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \targblock = push_block (GEN_INT (args_size.constant), 0, 0);\n     }\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n   /* If we push args individually in reverse order, perform stack alignment\n      before the first push (the last arg).  */\n   if (argblock == 0 && PUSH_ARGS_REVERSED)\n     anti_adjust_stack (GEN_INT (args_size.constant\n \t\t\t\t- original_args_size.constant));\n-#endif\n \n   if (PUSH_ARGS_REVERSED)\n     {\n@@ -4000,13 +3973,11 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \t}\n     }\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n   /* If we pushed args in forward order, perform stack alignment\n      after pushing the last arg.  */\n   if (argblock == 0 && !PUSH_ARGS_REVERSED)\n     anti_adjust_stack (GEN_INT (args_size.constant\n \t\t\t\t- original_args_size.constant));\n-#endif\n \n   if (PUSH_ARGS_REVERSED)\n     argnum = nargs - 1;\n@@ -4064,11 +4035,9 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n   valreg = (mem_value == 0 && outmode != VOIDmode\n \t    ? hard_libcall_value (outmode) : NULL_RTX);\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n   /* Stack must be properly aligned now.  */\n   if (stack_pointer_delta & (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT - 1))\n     abort ();\n-#endif\n \n   before_call = get_last_insn ();\n "}, {"sha": "cb222b2b10f2f4451d73b4c6b464c4f0fc4a9cfd", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -815,7 +815,6 @@ avr_output_function_epilogue (file, size)\n /* Return nonzero if X (an RTX) is a legitimate memory address on the target\n    machine for a memory operand of mode MODE.  */\n \n-int\n int\n legitimate_address_p (mode, x, strict)\n      enum machine_mode mode;"}, {"sha": "dcf3669474879e4a6a79c59804ff283cbb03e2dc", "filename": "gcc/config/convex/convex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fconvex%2Fconvex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fconvex%2Fconvex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -439,8 +439,8 @@ expand_movstr (operands)\n \n       /* Advance to next piece. */\n       size = GET_MODE_SIZE (mode);\n-      src = adj_offsettable_operand (src, size);\n-      dest = adj_offsettable_operand (dest, size);\n+      src = adjust_address (src, mode, size);\n+      dest = adjust_address (dest, mode, size);\n       len -= size;\n     }\n "}, {"sha": "74de0d084e07bd624ee9fbed53a5c1cd4e1b27bd", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -58,6 +58,7 @@ const char *save_chip_name;\n \n rtx dsp16xx_compare_op0;\n rtx dsp16xx_compare_op1;\n+rtx (*dsp16xx_compare_gen) PARAMS (());\n \n static const char *fp;\n static const char *sp;"}, {"sha": "29d9acd3bef5036a94e66c56177442fdb0443268", "filename": "gcc/config/dsp16xx/dsp16xx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -1131,8 +1131,8 @@\n   operands[5] = addr0;\n   operands[6] = addr1;\n \n-  operands[0] = replace_equiv_address (operands[0], VOIDmode, addr0);\n-  operands[1] = replace_equiv_address (operands[1], VOIDmode, addr1);\n+  operands[0] = replace_equiv_address (operands[0], addr0);\n+  operands[1] = replace_equiv_address (operands[1], addr1);\n }\")\n \n (define_insn \"\""}, {"sha": "7e8a24c1205dc9429de1cdf6259e26ba6cfc7c93", "filename": "gcc/config/elxsi/elxsi.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Felxsi%2Felxsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Felxsi%2Felxsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -26,6 +26,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"function.h\"\n #include \"output.h\"\n+#include \"tree.h\"\n+#include \"expr.h\"\n+#include \"regs.h\"\n+#include \"flags.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -129,7 +133,7 @@ elxsi_output_function_epilogue (file, size)\n     {\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; ++regno)\n \tif (regs_ever_live[regno] && !call_used_regs[regno])\n-\t  fprintf (file, \"\\tld.64\\t.r%d,[.sp]%d\\n\", regno, (cnt + =8) - 12);\n+\t  fprintf (file, \"\\tld.64\\t.r%d,[.sp]%d\\n\", regno, (cnt += 8) - 12);\n \n       fprintf (file, \"\\texit\\t%d\\n\", size + cnt);\n     }"}, {"sha": "87ef3ea41cf8bdc410806d735a4820c14a7100f3", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -79,7 +79,6 @@ extern int target_flags;\n    if using 16-bit ints on a 68000, this would still be 32.\n    But on a machine with 16-bit registers, this would be 16.  */\n #define BITS_PER_WORD 64\n-#define Rmode DImode\n \n #define INT_TYPE_SIZE 32\n \n@@ -106,6 +105,9 @@ extern int target_flags;\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY 32\n \n+/* Boundary (in *bits*) on which stack pointer should be aligned.  */\n+#define STACK_BOUNDARY 32\n+\n /* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY 8\n "}, {"sha": "ca3cafb2ab017c7b242387300c3252ccce523759", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"insn-attr.h\"\n #include \"function.h\"\n+#include \"expr.h\"\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"toplev.h\""}, {"sha": "5380aa2b2b3338ae2826b4f58bd7714384347578", "filename": "gcc/config/i860/sysv3.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fi860%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fi860%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv3.h?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -149,13 +149,11 @@ extern char *current_function_original_name;\n #define TDESC_SECTION_ASM_OP    \"\\t.section\\t.tdesc\"\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_tdesc\n+#define EXTRA_SECTIONS in_const, in_tdesc\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n   TDESC_SECTION_FUNCTION\n \n #define TDESC_SECTION_FUNCTION\t\t\t\t\t\t\\"}, {"sha": "c92c2a99fbedff3db98d99af4b048d4b9b034d00", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -175,13 +175,11 @@ extern char *current_function_original_name;\n #define TDESC_SECTION_ASM_OP    \"\\t.section\\t.tdesc\"\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_tdesc\n+#define EXTRA_SECTIONS in_const, in_tdesc\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n   TDESC_SECTION_FUNCTION\n \n #define TDESC_SECTION_FUNCTION\t\t\t\t\t\t\\"}, {"sha": "692249babac4e70e1393faba6993a8fe9a4c5b32", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -1548,7 +1548,7 @@ extern int m32r_sched_odd_word_p;\n    `in_text' and `in_data'.  You need not define this macro\n    on a system with no other sections (that GCC needs to use).  */\n #undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss, in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_sdata, in_sbss, in_const\n \n /* One or more functions to be defined in \"varasm.c\".  These\n    functions should do jobs analogous to those of `text_section' and\n@@ -1557,8 +1557,6 @@ extern int m32r_sched_odd_word_p;\n #undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\\\n   CONST_SECTION_FUNCTION\t\\\n-  CTORS_SECTION_FUNCTION\t\\\n-  DTORS_SECTION_FUNCTION\t\\\n   SDATA_SECTION_FUNCTION\t\\\n   SBSS_SECTION_FUNCTION\n "}, {"sha": "b10eab003dcb05f9320d3dde78df236966c12786", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -33,8 +33,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"tree.h\"\n #include \"function.h\"\n-#include \"c-tree.h\"\n #include \"expr.h\"\n+#include \"c-tree.h\"\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"toplev.h\""}, {"sha": "0d20555e5abd2a4321c5b160eb38b540c3b1be2b", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -260,13 +260,7 @@ do {  \\\n \n /* Define the .bss section for ASM_OUTPUT_LOCAL to use. */\n \n-#ifndef CTORS_SECTION_FUNCTION\n #define EXTRA_SECTIONS in_readonly_data\n-#define CTORS_SECTION_FUNCTION\n-#define DTORS_SECTION_FUNCTION\n-#else\n-#define EXTRA_SECTIONS in_readonly_data, in_ctors, in_dtors\n-#endif\n \n /* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n    which reference data within the $TEXT$ space (for example constant\n@@ -293,9 +287,7 @@ readonly_data ()\t\t\t\t\t\t\t\\\n \tfprintf (asm_out_file, \"%s\\n\", READONLY_DATA_ASM_OP);\t\t\\\n       in_section = in_readonly_data;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-CTORS_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-DTORS_SECTION_FUNCTION\n+}\n \n /* This is how to output a command to make the user-level label named NAME\n    defined for reference from other files."}, {"sha": "03e596c5afe327d17afb4801864a729146a7cd8b", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -34,6 +34,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"tree.h\"\n+#include \"expr.h\"\n+#include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "6cdb77e80f19a13637dbb942654e1bc161749c58", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -33,10 +33,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"flags.h\"\n #include \"recog.h\"\n-#include \"expr.h\"\n #include \"obstack.h\"\n #include \"tree.h\"\n #include \"function.h\"\n+#include \"expr.h\"\n+#include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -1546,7 +1547,7 @@ output_fpop (code, op0, op1, op2, insn)\n       goto win;\n \n   /* We have never seen this operation before.  */\n-  fpop = (struct fp_op *) oballoc (sizeof (struct fp_op));\n+  fpop = (struct fp_op *) xmalloc (sizeof (struct fp_op));\n   fpop->mem_offset = data_offset;\n   fpop->opcode = code;\n   fpop->noperands = noperands;"}, {"sha": "281f2199988ea1cee9e6f5c0115cd520cf2bdefe", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -1056,8 +1056,8 @@ typedef enum\n    `in_text' and `in_data'.  You need not define this macro on a\n    system with no other sections (that GCC needs to use).  */\n #undef\tEXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_tdata, in_sdata, in_zdata, in_const, in_ctors, \\\n-in_dtors, in_rozdata, in_rosdata, in_sbss, in_zbss, in_zcommon, in_scommon\n+#define EXTRA_SECTIONS in_tdata, in_sdata, in_zdata, in_const, \\\n+ in_rozdata, in_rosdata, in_sbss, in_zbss, in_zcommon, in_scommon\n \n /* One or more functions to be defined in `varasm.c'.  These\n    functions should do jobs analogous to those of `text_section' and\n@@ -1068,8 +1068,6 @@ in_dtors, in_rozdata, in_rosdata, in_sbss, in_zbss, in_zcommon, in_scommon\n /* This could be done a lot more cleanly using ANSI C ... */\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n CONST_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-CTORS_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-DTORS_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n sdata_section ()\t\t\t\t\t\t\t\\"}, {"sha": "5ee63acfd02b1aaa31ccba1bc903dca869a91b3f", "filename": "gcc/config/we32k/we32k.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"regs.h\"\n #include \"tree.h\"\n+#include \"expr.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "619bad174c2eb50f7cfb7dc5fa380d4dbdd81af0", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -1276,7 +1276,7 @@ cselib_process_insn (insn)\n \n   /* Forget everything at a CODE_LABEL, a volatile asm, or a setjmp.  */\n   if (GET_CODE (insn) == CODE_LABEL\n-      || (GET_CODE (insn) == CALL\n+      || (GET_CODE (insn) == CALL_INSN\n \t  && find_reg_note (insn, REG_SETJMP, NULL))\n       || (GET_CODE (insn) == INSN\n \t  && GET_CODE (PATTERN (insn)) == ASM_OPERANDS"}, {"sha": "e2c1646e6c8337502fdd1a8e7de832a1281b12e6", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -5711,7 +5711,7 @@ propagate_block (bb, live, local_set, cond_local_set, flags)\n       /* If this is a call to `setjmp' et al, warn if any\n \t non-volatile datum is live.  */\n       if ((flags & PROP_REG_INFO)\n-\t  && GET_CODE (insn) == CALL\n+\t  && GET_CODE (insn) == CALL_INSN\n \t  && find_reg_note (insn, REG_SETJMP, NULL))\n \tIOR_REG_SET (regs_live_at_setjmp, pbi->reg_live);\n "}, {"sha": "a0cfa00ba51ac9ec76cd94459d96f006fb272d90", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -67,7 +67,7 @@ Boston, MA 02111-1307, USA.  */\n #define LOCAL_ALIGNMENT(TYPE, ALIGNMENT) ALIGNMENT\n #endif\n \n-#if !defined (PREFERRED_STACK_BOUNDARY) && defined (STACK_BOUNDARY)\n+#ifndef PREFERRED_STACK_BOUNDARY\n #define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n #endif\n \n@@ -5058,13 +5058,11 @@ assign_parms (fndecl)\n #endif\n #endif\n \n-#ifdef STACK_BOUNDARY\n #define STACK_BYTES (STACK_BOUNDARY / BITS_PER_UNIT)\n \n   current_function_args_size\n     = ((current_function_args_size + STACK_BYTES - 1)\n        / STACK_BYTES) * STACK_BYTES;\n-#endif\n \n #ifdef ARGS_GROW_DOWNWARD\n   current_function_arg_offset_rtx\n@@ -6140,13 +6138,8 @@ prepare_function_start ()\n   cfun->original_decl_initial = 0;\n   cfun->original_arg_vector = 0;\n \n-#ifdef STACK_BOUNDARY\n   cfun->stack_alignment_needed = STACK_BOUNDARY;\n   cfun->preferred_stack_boundary = STACK_BOUNDARY;\n-#else\n-  cfun->stack_alignment_needed = 0;\n-  cfun->preferred_stack_boundary = 0;\n-#endif\n \n   /* Set if a call to setjmp is seen.  */\n   current_function_calls_setjmp = 0;"}, {"sha": "230242e25a6e7102fc4b67d992eab6ef5d5e9979", "filename": "gcc/gcse.c", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -2495,23 +2495,21 @@ compute_hash_table (set_p)\n \t   insn && insn != NEXT_INSN (BLOCK_END (bb));\n \t   insn = NEXT_INSN (insn))\n \t{\n-#ifdef NON_SAVING_SETJMP \n-\t  if (NON_SAVING_SETJMP && GET_CODE (insn) == NOTE\n-\t      && NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)\n-\t    {\n-\t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t\trecord_last_reg_set_info (insn, regno);\n-\t      continue;\n-\t    }\n-#endif\n-\n \t  if (! INSN_P (insn))\n \t    continue;\n \n \t  if (GET_CODE (insn) == CALL_INSN)\n \t    {\n+\t      bool clobbers_all = false;\n+#ifdef NON_SAVING_SETJMP \n+\t      if (NON_SAVING_SETJMP\n+\t\t  && find_reg_note (insn, REG_SETJMP, NULL_RTX))\n+\t\tclobbers_all = true;\n+#endif\n+\n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t\tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n+\t\tif (clobbers_all\n+\t\t    || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n \t\t  record_last_reg_set_info (insn, regno);\n \n \t      mark_call (insn);\n@@ -6415,23 +6413,22 @@ compute_store_table ()\n \t   insn && insn != PREV_INSN (BLOCK_HEAD (bb));\n \t   insn = PREV_INSN (insn))\n \t{\n-#ifdef NON_SAVING_SETJMP \n-\t  if (NON_SAVING_SETJMP && GET_CODE (insn) == NOTE\n-\t      && NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)\n-\t    {\n-\t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t\tSET_BIT (reg_set_in_block[bb], regno);\n-\t      continue;\n-\t    }\n-#endif\n-\t/* Ignore anything that is not a normal insn.  */\n-\tif (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+\t  /* Ignore anything that is not a normal insn.  */\n+\t  if (! INSN_P (insn))\n \t    continue;\n \n \t  if (GET_CODE (insn) == CALL_INSN)\n \t    {\n+\t      bool clobbers_all = false;\n+#ifdef NON_SAVING_SETJMP \n+\t      if (NON_SAVING_SETJMP\n+\t\t  && find_reg_note (insn, REG_SETJMP, NULL_RTX))\n+\t\tclobbers_all = true;\n+#endif\n+\n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t\tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n+\t\tif (clobbers_all\n+\t\t    || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n \t\t  SET_BIT (reg_set_in_block[bb], regno);\n \t    }\n \t  "}, {"sha": "ca06a08007ddc6b608da540f8164fa27899c6e60", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -2532,7 +2532,7 @@ find_and_verify_loops (f, loops)\n \t    break;\n \t  }\n \n-      if (GET_CODE (insn) == CALL\n+      if (GET_CODE (insn) == CALL_INSN\n \t  && find_reg_note (insn, REG_SETJMP, NULL))\n \t{\n \t  /* In this case, we must invalidate our current loop and any"}, {"sha": "61100c990fa22efa0c0e1ca4b3537b2b0253c243", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19652adf824a8ea67dab582f1da76d23c77f4814/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=19652adf824a8ea67dab582f1da76d23c77f4814", "patch": "@@ -762,7 +762,8 @@ reload (first, global)\n     {\n       rtx set = single_set (insn);\n \n-      if (GET_CODE (insn) == CALL && find_reg_note (insn, REG_SETJMP, NULL))\n+      if (GET_CODE (insn) == CALL_INSN\n+\t  && find_reg_note (insn, REG_SETJMP, NULL))\n \tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \t  if (! call_used_regs[i])\n \t    regs_ever_live[i] = 1;"}]}