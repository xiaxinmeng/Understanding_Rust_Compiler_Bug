{"sha": "20059c8b38abf30ecdd9bc79f52945f8a2618246", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwNTljOGIzOGFiZjMwZWNkZDliYzc5ZjUyOTQ1ZjhhMjYxODI0Ng==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-09-03T09:52:19Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-09-03T09:52:19Z"}, "message": "c-objc-common.c (c_tree_printer): Tidy.\n\nc/\n\t* c-objc-common.c (c_tree_printer): Tidy.\nc-family/\n\t* c-pretty-print.h (c_pretty_printer::type_id): Now a virtual\n\tmember function.\n\t(c_pretty_printer::storage_class_specifier): Likewise.\n\t(c_pretty_printer::initializer): Likewise.\n\t(pp_declaration): Remove.\n\t(pp_declaration_specifiers): Likewise.\n\t(pp_abstract_declarator): Likewise.\n\t(pp_declarator): Likewise.\n\t(pp_type_id): Likewise.\n\t(pp_statement): Likewise.\n\t(pp_constant): Likewise.\n\t(pp_id_expression): Likewise.\n\t(pp_primary_expression): Likewise.\n\t(pp_unary_expression): Likewise.\n\t(pp_multiplicative_expression): Likewise.\n\t(pp_conditional_expression): Likewise.\n\t(pp_assignment_expression): Likewise.\n\t(pp_expression): Likewise.\n\t(pp_c_type_id): Likewise.\n\t(pp_c_storage_class_specifier): Likewise.\n\t* c-pretty-print.c (pp_c_type_cast): Tidy.\n\t(pp_c_pointer): Likewise.\n\t(pp_c_type_specifier): Likewise.\n\t(pp_c_parameter_type_list): Likewise.\n\t(pp_c_function_definition): Likewise.\n\t(pp_c_init_declarator): Likewise.\n\t(pp_c_initializer_list): Likewise.\n\t(pp_c_constructor_elts): Likewise.\n\t(c_pretty_printer::direct_abstract_declarator): Likewise.\n\t(c_pretty_printer::declaration_specifiers): Likewise.\n\t(c_pretty_printer::primary_expression): Likewise.\n\t(c_pretty_printer::postfix_expression): Likewise.\n\t(c_pretty_printer::type_id): Rename from pp_c_type_id.\n\t(c_pretty_printer::storage_class_specifier): Rename from\n\tpp_c_storage_class_specifier.\n\t(c_pretty_printer::initializer): Rename from pp_c_initializer.\n\t(c_pretty_printer::c_pretty_printer): Do not assign to type_id,\n\tstorage_class_specifier, initializer, offset_list, flags.\n\ncp/\n\t* cxx-pretty-print.h (cxx_pretty_printer::type_id): Declare as\n\toverrider.\n\t* cxx-pretty-print.c (pp_cxx_storage_class_specifier): Remove.\n\t(pp_cxx_userdef_literal): Tidy.\n\t(pp_cxx_template_argument_list): Likewise.\n\t(pp_cxx_typeid_expression): Likewise.\n\t(pp_cxx_offsetof_expression_1): Likewise.\n\t(cxx_pretty_printer::postfix_expression): Likewise.\n\t(cxx_pretty_printer::unary_expression): Likewise.\n\t(cxx_pretty_printer::statement): Likewise.\n\t(cxx_pretty_printer::type_id): Rename from pp_cxx_type_id.\n\t(c_pretty_printer::cxx_pretty_printer): Do not assign to type_id.\n\t* error.c (dump_decl): Tidy.\n\t(dump_expr): Likewise.\n\nFrom-SVN: r202203", "tree": {"sha": "6b97e5858da1ef1af92be9120750c86fe7bc2b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b97e5858da1ef1af92be9120750c86fe7bc2b0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20059c8b38abf30ecdd9bc79f52945f8a2618246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20059c8b38abf30ecdd9bc79f52945f8a2618246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20059c8b38abf30ecdd9bc79f52945f8a2618246", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20059c8b38abf30ecdd9bc79f52945f8a2618246/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa3bf4cec95977de0686a8805159aee9c29a5219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa3bf4cec95977de0686a8805159aee9c29a5219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa3bf4cec95977de0686a8805159aee9c29a5219"}], "stats": {"total": 358, "additions": 193, "deletions": 165}, "files": [{"sha": "4917acf0184610e06892fa9f1a17bdc2d83706dc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -1,3 +1,44 @@\n+2013-09-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.h (c_pretty_printer::type_id): Now a virtual\n+\tmember function.\n+\t(c_pretty_printer::storage_class_specifier): Likewise.\n+\t(c_pretty_printer::initializer): Likewise.\n+\t(pp_declaration): Remove.\n+\t(pp_declaration_specifiers): Likewise.\n+\t(pp_abstract_declarator): Likewise.\n+\t(pp_declarator): Likewise.\n+\t(pp_type_id): Likewise.\n+\t(pp_statement): Likewise.\n+\t(pp_constant): Likewise.\n+\t(pp_id_expression): Likewise.\n+\t(pp_primary_expression): Likewise.\n+\t(pp_unary_expression): Likewise.\n+\t(pp_multiplicative_expression): Likewise.\n+\t(pp_conditional_expression): Likewise.\n+\t(pp_assignment_expression): Likewise.\n+\t(pp_expression): Likewise.\n+\t(pp_c_type_id): Likewise.\n+\t(pp_c_storage_class_specifier): Likewise.\n+\t* c-pretty-print.c (pp_c_type_cast): Tidy.\n+\t(pp_c_pointer): Likewise.\n+\t(pp_c_type_specifier): Likewise.\n+\t(pp_c_parameter_type_list): Likewise.\n+\t(pp_c_function_definition): Likewise.\n+\t(pp_c_init_declarator): Likewise.\n+\t(pp_c_initializer_list): Likewise.\n+\t(pp_c_constructor_elts): Likewise.\n+\t(c_pretty_printer::direct_abstract_declarator): Likewise.\n+\t(c_pretty_printer::declaration_specifiers): Likewise.\n+\t(c_pretty_printer::primary_expression): Likewise.\n+\t(c_pretty_printer::postfix_expression): Likewise.\n+\t(c_pretty_printer::type_id): Rename from pp_c_type_id.\n+\t(c_pretty_printer::storage_class_specifier): Rename from\n+\tpp_c_storage_class_specifier.\n+\t(c_pretty_printer::initializer): Rename from pp_c_initializer.\n+\t(c_pretty_printer::c_pretty_printer): Do not assign to type_id,\n+\tstorage_class_specifier, initializer, offset_list, flags.\n+\n 2013-08-30  Marek Polacek  <polacek@redhat.com>\n \n \t* c-ubsan.c: New file."}, {"sha": "9d115a423433347398323f0d48de0cb874110582", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 66, "deletions": 70, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -208,7 +208,7 @@ static void\n pp_c_type_cast (c_pretty_printer *pp, tree t)\n {\n   pp_c_left_paren (pp);\n-  pp_type_id (pp, t);\n+  pp->type_id (t);\n   pp_c_right_paren (pp);\n }\n \n@@ -296,7 +296,7 @@ pp_c_pointer (c_pretty_printer *pp, tree t)\n       /* ??? This node is now in GENERIC and so shouldn't be here.  But\n \t we'll fix that later.  */\n     case DECL_EXPR:\n-      pp_declaration (pp, DECL_EXPR_DECL (t));\n+      pp->declaration (DECL_EXPR_DECL (t));\n       pp_needs_newline (pp) = true;\n       break;\n \n@@ -393,7 +393,7 @@ pp_c_type_specifier (c_pretty_printer *pp, tree t)\n \n     case TYPE_DECL:\n       if (DECL_NAME (t))\n-\tpp_id_expression (pp, t);\n+\tpp->id_expression (t);\n       else\n \tpp->translate_string (\"<typedef-error>\");\n       break;\n@@ -411,7 +411,7 @@ pp_c_type_specifier (c_pretty_printer *pp, tree t)\n \tpp->translate_string (\"<tag-error>\");\n \n       if (TYPE_NAME (t))\n-\tpp_id_expression (pp, TYPE_NAME (t));\n+\tpp->id_expression (TYPE_NAME (t));\n       else\n \tpp->translate_string (\"<anonymous>\");\n       break;\n@@ -431,7 +431,7 @@ pp_c_type_specifier (c_pretty_printer *pp, tree t)\n   function declarations, this routine prints not just the\n   specifier-qualifier-list of such entities or types of such entities,\n   but also the 'pointer' production part of their declarators.  The\n-  remaining part is done by pp_declarator or pp_abstract_declarator.  */\n+  remaining part is done by declarator() or abstract_declarator().  */\n \n void\n pp_c_specifier_qualifier_list (c_pretty_printer *pp, tree t)\n@@ -518,12 +518,12 @@ pp_c_parameter_type_list (c_pretty_printer *pp, tree t)\n \t  if (!first)\n \t    pp_separate_with (pp, ',');\n \t  first = false;\n-\t  pp_declaration_specifiers\n-\t    (pp, want_parm_decl ? parms : TREE_VALUE (parms));\n+\t  pp->declaration_specifiers\n+\t    (want_parm_decl ? parms : TREE_VALUE (parms));\n \t  if (want_parm_decl)\n-\t    pp_declarator (pp, parms);\n+\t    pp->declarator (parms);\n \t  else\n-\t    pp_abstract_declarator (pp, TREE_VALUE (parms));\n+\t    pp->abstract_declarator (TREE_VALUE (parms));\n \t}\n     }\n   pp_c_right_paren (pp);\n@@ -577,8 +577,8 @@ c_pretty_printer::direct_abstract_declarator (tree t)\n \t  if (host_integerp (maxval, 0))\n \t    pp_wide_integer (this, tree_low_cst (maxval, 0) + 1);\n \t  else\n-\t    pp_expression (this, fold_build2 (PLUS_EXPR, type, maxval,\n-\t\t\t\t\t    build_int_cst (type, 1)));\n+\t    expression (fold_build2 (PLUS_EXPR, type, maxval,\n+                                     build_int_cst (type, 1)));\n \t}\n       pp_c_right_bracket (this);\n       direct_abstract_declarator (TREE_TYPE (t));\n@@ -608,10 +608,10 @@ c_pretty_printer::direct_abstract_declarator (tree t)\n       specifier-qualifier-list  abstract-declarator(opt)  */\n \n void\n-pp_c_type_id (c_pretty_printer *pp, tree t)\n+c_pretty_printer::type_id (tree t)\n {\n-  pp_c_specifier_qualifier_list (pp, t);\n-  pp_abstract_declarator (pp, t);\n+  pp_c_specifier_qualifier_list (this, t);\n+  abstract_declarator (t);\n }\n \n /* storage-class-specifier:\n@@ -622,16 +622,16 @@ pp_c_type_id (c_pretty_printer *pp, tree t)\n       register  */\n \n void\n-pp_c_storage_class_specifier (c_pretty_printer *pp, tree t)\n+c_pretty_printer::storage_class_specifier (tree t)\n {\n   if (TREE_CODE (t) == TYPE_DECL)\n-    pp_c_ws_string (pp, \"typedef\");\n+    pp_c_ws_string (this, \"typedef\");\n   else if (DECL_P (t))\n     {\n       if (DECL_REGISTER (t))\n-\tpp_c_ws_string (pp, \"register\");\n+\tpp_c_ws_string (this, \"register\");\n       else if (TREE_STATIC (t) && TREE_CODE (t) == VAR_DECL)\n-\tpp_c_ws_string (pp, \"static\");\n+\tpp_c_ws_string (this, \"static\");\n     }\n }\n \n@@ -654,8 +654,8 @@ c_pretty_printer::function_specifier (tree t)\n void\n c_pretty_printer::declaration_specifiers (tree t)\n {\n-  pp_storage_class_specifier (this, t);\n-  pp_function_specifier (this, t);\n+  storage_class_specifier (t);\n+  function_specifier (t);\n   pp_c_specifier_qualifier_list (this, DECL_P (t) ?  TREE_TYPE (t) : t);\n }\n \n@@ -743,7 +743,7 @@ c_pretty_printer::declarator (tree t)\n     case FUNCTION_TYPE:\n     case FUNCTION_DECL:\n     case TYPE_DECL:\n-      pp_direct_declarator (this, t);\n+      direct_declarator (t);\n     break;\n \n \n@@ -834,8 +834,8 @@ pp_c_attributes_display (c_pretty_printer *pp, tree a)\n void\n pp_c_function_definition (c_pretty_printer *pp, tree t)\n {\n-  pp_declaration_specifiers (pp, t);\n-  pp_declarator (pp, t);\n+  pp->declaration_specifiers (t);\n+  pp->declarator (t);\n   pp_needs_newline (pp) = true;\n   pp->statement (DECL_SAVED_TREE (t));\n   pp_newline_and_flush (pp);\n@@ -997,7 +997,7 @@ pp_c_enumeration_constant (c_pretty_printer *pp, tree e)\n     ;\n \n   if (value != NULL_TREE)\n-    pp_id_expression (pp, TREE_PURPOSE (value));\n+    pp->id_expression (TREE_PURPOSE (value));\n   else\n     {\n       /* Value must have been cast.  */\n@@ -1097,7 +1097,7 @@ pp_c_complex_expr (c_pretty_printer *pp, tree e)\n \t == TREE_OPERAND (TREE_OPERAND (imagexpr, 0), 0))\n     {\n       pp_c_type_cast (pp, type);\n-      pp_expression (pp, TREE_OPERAND (TREE_OPERAND (realexpr, 0), 0));\n+      pp->expression (TREE_OPERAND (TREE_OPERAND (realexpr, 0), 0));\n       return;\n     }\n \n@@ -1108,7 +1108,7 @@ pp_c_complex_expr (c_pretty_printer *pp, tree e)\n       pp_c_type_cast (pp, type);\n       if (TREE_CODE (realexpr) == NOP_EXPR)\n \trealexpr = TREE_OPERAND (realexpr, 0);\n-      pp_expression (pp, realexpr);\n+      pp->expression (realexpr);\n       return;\n     }\n \n@@ -1248,7 +1248,7 @@ c_pretty_printer::primary_expression (tree e)\n       primary_expression (TREE_OPERAND (e, 0));\n       pp_separate_with (this, ',');\n       pp_ampersand (this);\n-      pp_initializer (this, TREE_OPERAND (e, 1));\n+      initializer (TREE_OPERAND (e, 1));\n       if (TREE_OPERAND (e, 2))\n \t{\n \t  pp_separate_with (this, ',');\n@@ -1260,7 +1260,7 @@ c_pretty_printer::primary_expression (tree e)\n     default:\n       /* FIXME:  Make sure we won't get into an infinite loop.  */\n       pp_c_left_paren (this);\n-      pp_expression (this, e);\n+      expression (e);\n       pp_c_right_paren (this);\n       break;\n     }\n@@ -1272,13 +1272,13 @@ c_pretty_printer::primary_expression (tree e)\n       { initializer-list }\n       { initializer-list , }   */\n \n-static void\n-pp_c_initializer (c_pretty_printer *pp, tree e)\n+void\n+c_pretty_printer::initializer (tree e)\n {\n   if (TREE_CODE (e) == CONSTRUCTOR)\n-    pp_c_brace_enclosed_initializer_list (pp, e);\n+    pp_c_brace_enclosed_initializer_list (this, e);\n   else\n-    pp_expression (pp, e);\n+    expression (e);\n }\n \n /* init-declarator:\n@@ -1288,7 +1288,7 @@ pp_c_initializer (c_pretty_printer *pp, tree e)\n void\n pp_c_init_declarator (c_pretty_printer *pp, tree t)\n {\n-  pp_declarator (pp, t);\n+  pp->declarator (t);\n   /* We don't want to output function definitions here.  There are handled\n      elsewhere (and the syntactic form is bogus anyway).  */\n   if (TREE_CODE (t) != FUNCTION_DECL && DECL_INITIAL (t))\n@@ -1301,15 +1301,15 @@ pp_c_init_declarator (c_pretty_printer *pp, tree t)\n       if (TREE_CODE (init) == TREE_LIST)\n \t{\n \t  pp_c_left_paren (pp);\n-\t  pp_expression (pp, TREE_VALUE (init));\n+\t  pp->expression (TREE_VALUE (init));\n \t  pp_right_paren (pp);\n \t}\n       else\n \t{\n \t  pp_space (pp);\n \t  pp_equal (pp);\n \t  pp_space (pp);\n-\t  pp_c_initializer (pp, init);\n+\t  pp->initializer (init);\n \t}\n     }\n }\n@@ -1353,19 +1353,19 @@ pp_c_initializer_list (c_pretty_printer *pp, tree e)\n \t    if (code == RECORD_TYPE || code == UNION_TYPE)\n \t      {\n \t\tpp_c_dot (pp);\n-\t\tpp_primary_expression (pp, TREE_PURPOSE (init));\n+\t\tpp->primary_expression (TREE_PURPOSE (init));\n \t      }\n \t    else\n \t      {\n \t\tpp_c_left_bracket (pp);\n \t\tif (TREE_PURPOSE (init))\n-\t\t  pp_constant (pp, TREE_PURPOSE (init));\n+\t\t  pp->constant (TREE_PURPOSE (init));\n \t\tpp_c_right_bracket (pp);\n \t      }\n \t    pp_c_whitespace (pp);\n \t    pp_equal (pp);\n \t    pp_c_whitespace (pp);\n-\t    pp_initializer (pp, TREE_VALUE (init));\n+\t    pp->initializer (TREE_VALUE (init));\n \t    if (TREE_CHAIN (init))\n \t      pp_separate_with (pp, ',');\n \t  }\n@@ -1380,7 +1380,7 @@ pp_c_initializer_list (c_pretty_printer *pp, tree e)\n \t    {\n \t      if (i > 0)\n \t\tpp_separate_with (pp, ',');\n-\t      pp_expression (pp, VECTOR_CST_ELT (e, i));\n+\t      pp->expression (VECTOR_CST_ELT (e, i));\n \t    }\n \t}\n       else\n@@ -1391,9 +1391,9 @@ pp_c_initializer_list (c_pretty_printer *pp, tree e)\n       if (TREE_CODE (e) == COMPLEX_CST || TREE_CODE (e) == COMPLEX_EXPR)\n \t{\n \t  const bool cst = TREE_CODE (e) == COMPLEX_CST;\n-\t  pp_expression (pp, cst ? TREE_REALPART (e) : TREE_OPERAND (e, 0));\n+\t  pp->expression (cst ? TREE_REALPART (e) : TREE_OPERAND (e, 0));\n \t  pp_separate_with (pp, ',');\n-\t  pp_expression (pp, cst ? TREE_IMAGPART (e) : TREE_OPERAND (e, 1));\n+\t  pp->expression (cst ? TREE_IMAGPART (e) : TREE_OPERAND (e, 1));\n \t}\n       else\n \tbreak;\n@@ -1474,18 +1474,18 @@ c_pretty_printer::postfix_expression (tree e)\n     case ARRAY_REF:\n       postfix_expression (TREE_OPERAND (e, 0));\n       pp_c_left_bracket (this);\n-      pp_expression (this, TREE_OPERAND (e, 1));\n+      expression (TREE_OPERAND (e, 1));\n       pp_c_right_bracket (this);\n       break;\n \n     case ARRAY_NOTATION_REF:\n       postfix_expression (ARRAY_NOTATION_ARRAY (e));\n       pp_c_left_bracket (this);\n-      pp_expression (this, ARRAY_NOTATION_START (e));\n+      expression (ARRAY_NOTATION_START (e));\n       pp_colon (this);\n-      pp_expression (this, ARRAY_NOTATION_LENGTH (e));\n+      expression (ARRAY_NOTATION_LENGTH (e));\n       pp_colon (this);\n-      pp_expression (this, ARRAY_NOTATION_STRIDE (e));\n+      expression (ARRAY_NOTATION_STRIDE (e));\n       pp_c_right_bracket (this);\n       break;\n       \n@@ -1497,7 +1497,7 @@ c_pretty_printer::postfix_expression (tree e)\n \tpp_c_left_paren (this);\n \tFOR_EACH_CALL_EXPR_ARG (arg, iter, e)\n \t  {\n-\t    pp_expression (this, arg);\n+\t    expression (arg);\n \t    if (more_call_expr_args_p (&iter))\n \t      pp_separate_with (this, ',');\n \t  }\n@@ -1555,16 +1555,16 @@ c_pretty_printer::postfix_expression (tree e)\n \n     two_args_fun:\n       pp_c_left_paren (this);\n-      pp_expression (this, TREE_OPERAND (e, 0));\n+      expression (TREE_OPERAND (e, 0));\n       pp_separate_with (this, ',');\n-      pp_expression (this, TREE_OPERAND (e, 1));\n+      expression (TREE_OPERAND (e, 1));\n       pp_c_right_paren (this);\n       break;\n \n     case ABS_EXPR:\n       pp_c_ws_string (this, \"__builtin_abs\");\n       pp_c_left_paren (this);\n-      pp_expression (this, TREE_OPERAND (e, 0));\n+      expression (TREE_OPERAND (e, 0));\n       pp_c_right_paren (this);\n       break;\n \n@@ -1581,7 +1581,7 @@ c_pretty_printer::postfix_expression (tree e)\n \t    postfix_expression (object);\n \t    pp_c_dot (this);\n \t  }\n-\tpp_expression (this, TREE_OPERAND (e, 1));\n+\texpression (TREE_OPERAND (e, 1));\n       }\n       break;\n \n@@ -1599,11 +1599,11 @@ c_pretty_printer::postfix_expression (tree e)\n \t      {\n \t\tpp_c_left_paren (this);\n \t\tpp_c_left_paren (this);\n-\t\tpp_type_id (this, type);\n+\t\ttype_id (type);\n \t\tpp_c_star (this);\n \t\tpp_c_right_paren (this);\n \t\tpp_c_ampersand (this);\n-\t\tpp_expression (this, TREE_OPERAND (e, 0));\n+\t\texpression (TREE_OPERAND (e, 0));\n \t\tpp_c_right_paren (this);\n \t\tpp_c_left_bracket (this);\n \t\tpp_wide_integer (this, bitpos / size);\n@@ -1632,15 +1632,15 @@ c_pretty_printer::postfix_expression (tree e)\n       e = DECL_INITIAL (COMPOUND_LITERAL_EXPR_DECL (e));\n       /* Fall through.  */\n     case CONSTRUCTOR:\n-      pp_initializer (this, e);\n+      initializer (e);\n       break;\n \n     case VA_ARG_EXPR:\n       pp_c_ws_string (this, \"__builtin_va_arg\");\n       pp_c_left_paren (this);\n       assignment_expression (TREE_OPERAND (e, 0));\n       pp_separate_with (this, ',');\n-      pp_type_id (this, TREE_TYPE (e));\n+      type_id (TREE_TYPE (e));\n       pp_c_right_paren (this);\n       break;\n \n@@ -1665,7 +1665,7 @@ pp_c_expression_list (c_pretty_printer *pp, tree e)\n {\n   for (; e != NULL_TREE; e = TREE_CHAIN (e))\n     {\n-      pp_expression (pp, TREE_VALUE (e));\n+      pp->expression (TREE_VALUE (e));\n       if (TREE_CHAIN (e))\n \tpp_separate_with (pp, ',');\n     }\n@@ -1681,7 +1681,7 @@ pp_c_constructor_elts (c_pretty_printer *pp, vec<constructor_elt, va_gc> *v)\n \n   FOR_EACH_CONSTRUCTOR_VALUE (v, ix, value)\n     {\n-      pp_expression (pp, value);\n+      pp->expression (value);\n       if (ix != vec_safe_length (v) - 1)\n \tpp_separate_with (pp, ',');\n     }\n@@ -1806,7 +1806,7 @@ pp_c_cast_expression (c_pretty_printer *pp, tree e)\n       break;\n \n     default:\n-      pp_unary_expression (pp, e);\n+      pp->unary_expression (e);\n     }\n }\n \n@@ -1864,11 +1864,11 @@ pp_c_additive_expression (c_pretty_printer *pp, tree e)\n       else\n \tpp_minus (pp);\n       pp_c_whitespace (pp);\n-      pp_multiplicative_expression (pp, TREE_OPERAND (e, 1));\n+      pp->multiplicative_expression (TREE_OPERAND (e, 1));\n       break;\n \n     default:\n-      pp_multiplicative_expression (pp, e);\n+      pp->multiplicative_expression (e);\n       break;\n     }\n }\n@@ -2075,7 +2075,7 @@ c_pretty_printer::conditional_expression (tree e)\n       pp_c_whitespace (this);\n       pp_question (this);\n       pp_c_whitespace (this);\n-      pp_expression (this, TREE_OPERAND (e, 1));\n+      expression (TREE_OPERAND (e, 1));\n       pp_c_whitespace (this);\n       pp_colon (this);\n       pp_c_whitespace (this);\n@@ -2103,7 +2103,7 @@ c_pretty_printer::assignment_expression (tree e)\n       pp_c_whitespace (this);\n       pp_equal (this);\n       pp_space (this);\n-      pp_expression (this, TREE_OPERAND (e, 1));\n+      expression (TREE_OPERAND (e, 1));\n     }\n   else\n     conditional_expression (e);\n@@ -2116,8 +2116,8 @@ c_pretty_printer::assignment_expression (tree e)\n   Implementation note:  instead of going through the usual recursion\n   chain, I take the liberty of dispatching nodes to the appropriate\n   functions.  This makes some redundancy, but it worths it. That also\n-  prevents a possible infinite recursion between pp_primary_expression ()\n-  and pp_expression ().  */\n+  prevents a possible infinite recursion between primary_expression ()\n+  and expression ().  */\n \n void\n c_pretty_printer::expression (tree e)\n@@ -2321,18 +2321,14 @@ c_pretty_printer::statement (tree stmt)\n /* Initialize the PRETTY-PRINTER for handling C codes.  */\n \n c_pretty_printer::c_pretty_printer ()\n-  : pretty_printer ()\n+  : pretty_printer (),\n+    offset_list (),\n+    flags ()\n {\n-  offset_list               = 0;\n-  flags\t\t\t= 0;\n   type_specifier_seq        = pp_c_specifier_qualifier_list;\n   ptr_operator              = pp_c_pointer;\n   parameter_list            = pp_c_parameter_type_list;\n-  type_id                   = pp_c_type_id;\n   simple_type_specifier     = pp_c_type_specifier;\n-  storage_class_specifier   = pp_c_storage_class_specifier;\n-\n-  initializer               = pp_c_initializer;\n }\n \n "}, {"sha": "21aeda6f9182c3b275073ac84a0b6bbe8b5a530d", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -64,15 +64,19 @@ struct c_pretty_printer : pretty_printer\n   virtual void assignment_expression (tree);\n   virtual void expression (tree);\n \n+  virtual void type_id (tree);\n   virtual void statement (tree);\n \n   virtual void declaration (tree);\n   virtual void declaration_specifiers (tree);\n   virtual void function_specifier (tree);\n+  virtual void storage_class_specifier (tree);\n   virtual void declarator (tree);\n   virtual void direct_declarator (tree);\n   virtual void abstract_declarator (tree);\n   virtual void direct_abstract_declarator (tree);\n+\n+  virtual void initializer (tree);\n   /* Points to the first element of an array of offset-list.\n      Not used yet.  */\n   int *offset_list;\n@@ -84,45 +88,16 @@ struct c_pretty_printer : pretty_printer\n   c_pretty_print_fn type_specifier_seq;\n   c_pretty_print_fn ptr_operator;\n   c_pretty_print_fn parameter_list;\n-  c_pretty_print_fn type_id;\n   c_pretty_print_fn simple_type_specifier;\n-  c_pretty_print_fn storage_class_specifier;\n-  c_pretty_print_fn initializer;\n-\n };\n \n #define pp_c_tree_identifier(PPI, ID)              \\\n    pp_c_identifier (PPI, IDENTIFIER_POINTER (ID))\n \n-#define pp_declaration(PP, T)           (PP)->declaration (T)\n-#define pp_declaration_specifiers(PP, D)         \\\n-   (PP)->declaration_specifiers (D)\n-#define pp_abstract_declarator(PP, D)   (PP)->abstract_declarator (D)\n #define pp_type_specifier_seq(PP, D)    (PP)->type_specifier_seq (PP, D)\n-#define pp_declarator(PP, D)            (PP)->declarator (D)\n-#define pp_direct_declarator(PP, D)     (PP)->direct_declarator (D)\n #define pp_ptr_operator(PP, D)          (PP)->ptr_operator (PP, D)\n #define pp_parameter_list(PP, T)        (PP)->parameter_list (PP, T)\n-#define pp_type_id(PP, D)               (PP)->type_id (PP, D)\n #define pp_simple_type_specifier(PP, T) (PP)->simple_type_specifier (PP, T)\n-#define pp_function_specifier(PP, D)    (PP)->function_specifier (D)\n-#define pp_storage_class_specifier(PP, D)         \\\n-  (PP)->storage_class_specifier (PP, D);\n-\n-#define pp_statement(PP, S)             (PP)->statement (PP, S)\n-\n-#define pp_constant(PP, E)              (PP)->constant (E)\n-#define pp_id_expression(PP, E)         (PP)->id_expression (E)\n-#define pp_primary_expression(PP, E)    (PP)->primary_expression (E)\n-#define pp_postfix_expression(PP, E)    (PP)->postfix_expression (E)\n-#define pp_unary_expression(PP, E)      (PP)->unary_expression (E)\n-#define pp_initializer(PP, E)           (PP)->initializer (PP, E)\n-#define pp_multiplicative_expression(PP, E)      \\\n-  (PP)->multiplicative_expression (E)\n-#define pp_conditional_expression(PP, E) (PP)->conditional_expression (E)\n-#define pp_assignment_expression(PP, E) (PP)->assignment_expression (E)\n-#define pp_expression(PP, E)            (PP)->expression (E)\n-\n \n void pp_c_whitespace (c_pretty_printer *);\n void pp_c_left_paren (c_pretty_printer *);\n@@ -149,9 +124,7 @@ void pp_c_cv_qualifiers (c_pretty_printer *pp, int qualifiers, bool func_type);\n void pp_c_type_qualifier_list (c_pretty_printer *, tree);\n void pp_c_parameter_type_list (c_pretty_printer *, tree);\n void pp_c_specifier_qualifier_list (c_pretty_printer *, tree);\n-void pp_c_type_id (c_pretty_printer *, tree);\n void pp_c_type_specifier (c_pretty_printer *, tree);\n-void pp_c_storage_class_specifier (c_pretty_printer *, tree);\n /* Expressions.  */\n void pp_c_logical_or_expression (c_pretty_printer *, tree);\n void pp_c_expression_list (c_pretty_printer *, tree);"}, {"sha": "3401228c039d4f7caf2cc55e57a5042cfea056f3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -1,3 +1,7 @@\n+2013-09-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-objc-common.c (c_tree_printer): Tidy.\n+\n 2013-08-30  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c (build_binary_op): Add division by zero and shift"}, {"sha": "e6be6ac89fd79c6653e697a8182a12e1e9ac303b", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -120,7 +120,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t  t = DECL_DEBUG_EXPR (t);\n \t  if (!DECL_P (t))\n \t    {\n-\t      pp_expression (cpp, t);\n+\t      cpp->expression (t);\n \t      return true;\n \t    }\n \t}\n@@ -143,12 +143,12 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t  if (DECL_NAME (name))\n \t    pp_identifier (cpp, lang_hooks.decl_printable_name (name, 2));\n \t  else\n-\t    pp_type_id (cpp, t);\n+\t    cpp->type_id (t);\n \t  return true;\n \t}\n       else\n \t{\n-\t  pp_type_id (cpp, t);\n+\t  cpp->type_id (t);\n \t  return true;\n \t}\n       break;\n@@ -157,7 +157,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n       if (TREE_CODE (t) == IDENTIFIER_NODE)\n \tpp_identifier (cpp, IDENTIFIER_POINTER (t));\n       else\n-\tpp_expression (cpp, t);\n+\tcpp->expression (t);\n       return true;\n \n     case 'V':"}, {"sha": "3e6bedbd0c12705baf016656b50756ab709b274e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -1,3 +1,20 @@\n+2013-09-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cxx-pretty-print.h (cxx_pretty_printer::type_id): Declare as\n+\toverrider.\n+\t* cxx-pretty-print.c (pp_cxx_storage_class_specifier): Remove.\n+\t(pp_cxx_userdef_literal): Tidy.\n+\t(pp_cxx_template_argument_list): Likewise.\n+\t(pp_cxx_typeid_expression): Likewise.\n+\t(pp_cxx_offsetof_expression_1): Likewise.\n+\t(cxx_pretty_printer::postfix_expression): Likewise.\n+\t(cxx_pretty_printer::unary_expression): Likewise.\n+\t(cxx_pretty_printer::statement): Likewise.\n+\t(cxx_pretty_printer::type_id): Rename from pp_cxx_type_id.\n+\t(c_pretty_printer::cxx_pretty_printer): Do not assign to type_id.\n+\t* error.c (dump_decl): Tidy.\n+\t(dump_expr): Likewise.\n+\n 2013-09-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/21682, implement DR 565"}, {"sha": "c769febb8562ffed35d5464dc62a6e5deba7bb76", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 51, "deletions": 55, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -33,7 +33,6 @@ static void pp_cxx_qualified_id (cxx_pretty_printer *, tree);\n static void pp_cxx_template_argument_list (cxx_pretty_printer *, tree);\n static void pp_cxx_type_specifier_seq (cxx_pretty_printer *, tree);\n static void pp_cxx_ptr_operator (cxx_pretty_printer *, tree);\n-static void pp_cxx_type_id (cxx_pretty_printer *, tree);\n static void pp_cxx_parameter_declaration_clause (cxx_pretty_printer *, tree);\n static void pp_cxx_template_parameter (cxx_pretty_printer *, tree);\n static void pp_cxx_cast_expression (cxx_pretty_printer *, tree);\n@@ -51,8 +50,6 @@ pp_cxx_nonconsecutive_character (cxx_pretty_printer *pp, int c)\n   pp->padding = pp_none;\n }\n \n-#define pp_cxx_storage_class_specifier(PP, T) \\\n-   pp_c_storage_class_specifier (PP, T)\n #define pp_cxx_expression_list(PP, T)    \\\n    pp_c_expression_list (PP, T)\n #define pp_cxx_space_for_pointer_operator(PP, T)  \\\n@@ -362,8 +359,8 @@ cxx_pretty_printer::id_expression (tree t)\n void\n pp_cxx_userdef_literal (cxx_pretty_printer *pp, tree t)\n {\n-  pp_constant (pp, USERDEF_LITERAL_VALUE (t));\n-  pp_id_expression (pp, USERDEF_LITERAL_SUFFIX_ID (t));\n+  pp->constant (USERDEF_LITERAL_VALUE (t));\n+  pp->id_expression (USERDEF_LITERAL_SUFFIX_ID (t));\n }\n \n \n@@ -601,15 +598,15 @@ cxx_pretty_printer::postfix_expression (tree t)\n       else\n \tpp_cxx_ws_string (this, \"const_cast\");\n       pp_cxx_begin_template_argument_list (this);\n-      pp_cxx_type_id (this, TREE_TYPE (t));\n+      type_id (TREE_TYPE (t));\n       pp_cxx_end_template_argument_list (this);\n       pp_left_paren (this);\n       expression (TREE_OPERAND (t, 0));\n       pp_right_paren (this);\n       break;\n \n     case EMPTY_CLASS_EXPR:\n-      pp_cxx_type_id (this, TREE_TYPE (t));\n+      type_id (TREE_TYPE (t));\n       pp_left_paren (this);\n       pp_right_paren (this);\n       break;\n@@ -684,7 +681,7 @@ pp_cxx_new_expression (cxx_pretty_printer *pp, tree t)\n \t\t\t\t\t  MINUS_EXPR, integer_type_node,\n \t\t\t\t\t  TREE_OPERAND (type, 1),\n \t\t\t\t\t  integer_one_node)));\n-      pp_cxx_type_id (pp, type);\n+      pp->type_id (type);\n       if (init)\n \t{\n \t  pp_left_paren (pp);\n@@ -693,7 +690,7 @@ pp_cxx_new_expression (cxx_pretty_printer *pp, tree t)\n \t  else if (init == void_zero_node)\n \t    ;\t\t\t/* OK, empty initializer list.  */\n \t  else\n-\t    pp_expression (pp, init);\n+\t    pp->expression (init);\n \t  pp_right_paren (pp);\n \t}\n       break;\n@@ -776,7 +773,7 @@ cxx_pretty_printer::unary_expression (tree t)\n \t  pp_cxx_whitespace (this);\n \t  pp_cxx_left_paren (this);\n \t  if (TYPE_P (TREE_OPERAND (t, 0)))\n-\t    pp_cxx_type_id (this, TREE_OPERAND (t, 0));\n+\t    type_id (TREE_OPERAND (t, 0));\n \t  else\n \t    unary_expression (TREE_OPERAND (t, 0));\n \t  pp_cxx_right_paren (this);\n@@ -790,13 +787,13 @@ cxx_pretty_printer::unary_expression (tree t)\n       if (TREE_CODE (t) == SIZEOF_EXPR && SIZEOF_EXPR_TYPE_P (t))\n \t{\n \t  pp_cxx_left_paren (this);\n-\t  pp_cxx_type_id (this, TREE_TYPE (TREE_OPERAND (t, 0)));\n+\t  type_id (TREE_TYPE (TREE_OPERAND (t, 0)));\n \t  pp_cxx_right_paren (this);\n \t}\n       else if (TYPE_P (TREE_OPERAND (t, 0)))\n \t{\n \t  pp_cxx_left_paren (this);\n-\t  pp_cxx_type_id (this, TREE_OPERAND (t, 0));\n+\t  type_id (TREE_OPERAND (t, 0));\n \t  pp_cxx_right_paren (this);\n \t}\n       else\n@@ -807,7 +804,7 @@ cxx_pretty_printer::unary_expression (tree t)\n       pp_cxx_ws_string (this, \"@encode\");\n       pp_cxx_whitespace (this);\n       pp_cxx_left_paren (this);\n-      pp_cxx_type_id (this, TREE_OPERAND (t, 0));\n+      type_id (TREE_OPERAND (t, 0));\n       pp_cxx_right_paren (this);\n       break;      \n \n@@ -841,7 +838,7 @@ pp_cxx_cast_expression (cxx_pretty_printer *pp, tree t)\n     {\n     case CAST_EXPR:\n     case IMPLICIT_CONV_EXPR:\n-      pp_cxx_type_id (pp, TREE_TYPE (t));\n+      pp->type_id (TREE_TYPE (t));\n       pp_cxx_call_argument_list (pp, TREE_OPERAND (t, 0));\n       break;\n \n@@ -1214,7 +1211,7 @@ cxx_pretty_printer::declaration_specifiers (tree t)\n     case PARM_DECL:\n     case CONST_DECL:\n     case FIELD_DECL:\n-      pp_cxx_storage_class_specifier (this, t);\n+      storage_class_specifier (t);\n       declaration_specifiers (TREE_TYPE (t));\n       break;\n \n@@ -1315,7 +1312,7 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n     case DECLTYPE_TYPE:\n       pp_cxx_ws_string (pp, \"decltype\");\n       pp_cxx_left_paren (pp);\n-      pp_expression (pp, DECLTYPE_TYPE_EXPR (t));\n+      pp->expression (DECLTYPE_TYPE_EXPR (t));\n       pp_cxx_right_paren (pp);\n       break;\n \n@@ -1406,9 +1403,9 @@ pp_cxx_parameter_declaration (cxx_pretty_printer *pp, tree t)\n {\n   pp->declaration_specifiers (t);\n   if (TYPE_P (t))\n-    pp_abstract_declarator (pp, t);\n+    pp->abstract_declarator (t);\n   else\n-    pp_declarator (pp, t);\n+    pp->declarator (t);\n }\n \n /* parameter-declaration-clause:\n@@ -1444,7 +1441,7 @@ pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n \t  pp_cxx_whitespace (pp);\n \t  pp_equal (pp);\n \t  pp_cxx_whitespace (pp);\n-\t  pp_assignment_expression (pp, TREE_PURPOSE (types));\n+\t  pp->assignment_expression (TREE_PURPOSE (types));\n \t}\n     }\n   pp_cxx_right_paren (pp);\n@@ -1473,7 +1470,7 @@ pp_cxx_exception_specification (cxx_pretty_printer *pp, tree t)\n       if (DEFERRED_NOEXCEPT_SPEC_P (ex_spec))\n \tpp_cxx_ws_string (pp, \"<uninstantiated>\");\n       else\n-\tpp_expression (pp, TREE_PURPOSE (ex_spec));\n+\tpp->expression (TREE_PURPOSE (ex_spec));\n       pp_cxx_right_paren (pp);\n       return;\n     }\n@@ -1501,7 +1498,7 @@ pp_cxx_exception_specification (cxx_pretty_printer *pp, tree t)\n \t  else\n \t    need_comma = true;\n \n-\t  pp_cxx_type_id (pp, type);\n+\t  pp->type_id (type);\n \t}\n     }\n   pp_cxx_right_paren (pp);\n@@ -1602,9 +1599,9 @@ pp_cxx_ctor_initializer (cxx_pretty_printer *pp, tree t)\n       bool is_pack = PACK_EXPANSION_P (purpose);\n \n       if (is_pack)\n-\tpp_primary_expression (pp, PACK_EXPANSION_PATTERN (purpose));\n+\tpp->primary_expression (PACK_EXPANSION_PATTERN (purpose));\n       else\n-\tpp_primary_expression (pp, purpose);\n+\tpp->primary_expression (purpose);\n       pp_cxx_call_argument_list (pp, TREE_VALUE (t));\n       if (is_pack)\n \tpp_cxx_ws_string (pp, \"...\");\n@@ -1622,7 +1619,7 @@ pp_cxx_function_definition (cxx_pretty_printer *pp, tree t)\n {\n   tree saved_scope = pp->enclosing_scope;\n   pp->declaration_specifiers (t);\n-  pp_declarator (pp, t);\n+  pp->declarator (t);\n   pp_needs_newline (pp) = true;\n   pp->enclosing_scope = DECL_CONTEXT (t);\n   if (DECL_SAVED_TREE (t))\n@@ -1700,11 +1697,11 @@ cxx_pretty_printer::direct_abstract_declarator (tree t)\n /* type-id:\n      type-specifier-seq abstract-declarator(opt) */\n \n-static void\n-pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::type_id (tree t)\n {\n-  pp_flags saved_flags = pp->flags;\n-  pp->flags |= pp_c_flag_abstract;\n+  pp_flags saved_flags = flags;\n+  flags |= pp_c_flag_abstract;\n \n   switch (TREE_CODE (t))\n     {\n@@ -1723,20 +1720,20 @@ pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n     case UNDERLYING_TYPE:\n     case DECLTYPE_TYPE:\n     case TEMPLATE_ID_EXPR:\n-      pp_cxx_type_specifier_seq (pp, t);\n+      pp_cxx_type_specifier_seq (this, t);\n       break;\n \n     case TYPE_PACK_EXPANSION:\n-      pp_cxx_type_id (pp, PACK_EXPANSION_PATTERN (t));\n-      pp_cxx_ws_string (pp, \"...\");\n+      type_id (PACK_EXPANSION_PATTERN (t));\n+      pp_cxx_ws_string (this, \"...\");\n       break;\n \n     default:\n-      pp_c_type_id (pp, t);\n+      c_pretty_printer::type_id (t);\n       break;\n     }\n \n-  pp->flags = saved_flags;\n+  flags = saved_flags;\n }\n \n /* template-argument-list:\n@@ -1780,9 +1777,9 @@ pp_cxx_template_argument_list (cxx_pretty_printer *pp, tree t)\n \n \t  if (TYPE_P (arg) || (TREE_CODE (arg) == TEMPLATE_DECL\n \t\t\t       && TYPE_P (DECL_TEMPLATE_RESULT (arg))))\n-\t    pp_cxx_type_id (pp, arg);\n+\t    pp->type_id (arg);\n \t  else\n-\t    pp_expression (pp, arg);\n+\t    pp->expression (arg);\n \t}\n     }\n }\n@@ -1794,9 +1791,9 @@ pp_cxx_exception_declaration (cxx_pretty_printer *pp, tree t)\n   t = DECL_EXPR_DECL (t);\n   pp_cxx_type_specifier_seq (pp, t);\n   if (TYPE_P (t))\n-    pp_abstract_declarator (pp, t);\n+    pp->abstract_declarator (t);\n   else\n-    pp_declarator (pp, t);\n+    pp->declarator (t);\n }\n \n /* Statements.  */\n@@ -1871,7 +1868,7 @@ cxx_pretty_printer::statement (tree t)\n       pp_cxx_ws_string (this, \"if\");\n       pp_cxx_whitespace (this);\n       pp_cxx_left_paren (this);\n-      pp_expression (this, IF_COND (t));\n+      expression (IF_COND (t));\n       pp_cxx_right_paren (this);\n       pp_newline_and_indent (this, 2);\n       statement (THEN_CLAUSE (t));\n@@ -1894,7 +1891,7 @@ cxx_pretty_printer::statement (tree t)\n       pp_cxx_ws_string (this, \"switch\");\n       pp_space (this);\n       pp_cxx_left_paren (this);\n-      pp_expression (this, SWITCH_STMT_COND (t));\n+      expression (SWITCH_STMT_COND (t));\n       pp_cxx_right_paren (this);\n       pp_indentation (this) += 3;\n       pp_needs_newline (this) = true;\n@@ -1911,7 +1908,7 @@ cxx_pretty_printer::statement (tree t)\n       pp_cxx_ws_string (this, \"while\");\n       pp_space (this);\n       pp_cxx_left_paren (this);\n-      pp_expression (this, WHILE_COND (t));\n+      expression (WHILE_COND (t));\n       pp_cxx_right_paren (this);\n       pp_newline_and_indent (this, 3);\n       statement (WHILE_BODY (t));\n@@ -1927,7 +1924,7 @@ cxx_pretty_printer::statement (tree t)\n       pp_cxx_ws_string (this, \"while\");\n       pp_space (this);\n       pp_cxx_left_paren (this);\n-      pp_expression (this, DO_COND (t));\n+      expression (DO_COND (t));\n       pp_cxx_right_paren (this);\n       pp_cxx_semicolon (this);\n       pp_needs_newline (this) = true;\n@@ -1944,12 +1941,12 @@ cxx_pretty_printer::statement (tree t)\n       pp_needs_newline (this) = false;\n       pp_cxx_whitespace (this);\n       if (FOR_COND (t))\n-\tpp_expression (this, FOR_COND (t));\n+\texpression (FOR_COND (t));\n       pp_cxx_semicolon (this);\n       pp_needs_newline (this) = false;\n       pp_cxx_whitespace (this);\n       if (FOR_EXPR (t))\n-\tpp_expression (this, FOR_EXPR (t));\n+\texpression (FOR_EXPR (t));\n       pp_cxx_right_paren (this);\n       pp_newline_and_indent (this, 3);\n       statement (FOR_BODY (t));\n@@ -1988,7 +1985,7 @@ cxx_pretty_printer::statement (tree t)\n       /* expression-statement:\n \t    expression(opt) ;  */\n     case EXPR_STMT:\n-      pp_expression (this, EXPR_STMT_EXPR (t));\n+      expression (EXPR_STMT_EXPR (t));\n       pp_cxx_semicolon (this);\n       pp_needs_newline (this) = true;\n       break;\n@@ -2271,9 +2268,9 @@ pp_cxx_typeid_expression (cxx_pretty_printer *pp, tree t)\n   pp_cxx_ws_string (pp, \"typeid\");\n   pp_cxx_left_paren (pp);\n   if (TYPE_P (t))\n-    pp_cxx_type_id (pp, t);\n+    pp->type_id (t);\n   else\n-    pp_expression (pp, t);\n+    pp->expression (t);\n   pp_cxx_right_paren (pp);\n }\n \n@@ -2282,9 +2279,9 @@ pp_cxx_va_arg_expression (cxx_pretty_printer *pp, tree t)\n {\n   pp_cxx_ws_string (pp, \"va_arg\");\n   pp_cxx_left_paren (pp);\n-  pp_assignment_expression (pp, TREE_OPERAND (t, 0));\n+  pp->assignment_expression (TREE_OPERAND (t, 0));\n   pp_cxx_separate_with (pp, ',');\n-  pp_cxx_type_id (pp, TREE_TYPE (t));\n+  pp->type_id (TREE_TYPE (t));\n   pp_cxx_right_paren (pp);\n }\n \n@@ -2297,7 +2294,7 @@ pp_cxx_offsetof_expression_1 (cxx_pretty_printer *pp, tree t)\n       if (TREE_CODE (TREE_OPERAND (t, 0)) == STATIC_CAST_EXPR\n \t  && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0))))\n \t{\n-\t  pp_cxx_type_id (pp, TREE_TYPE (TREE_TYPE (TREE_OPERAND (t, 0))));\n+\t  pp->type_id (TREE_TYPE (TREE_TYPE (TREE_OPERAND (t, 0))));\n \t  pp_cxx_separate_with (pp, ',');\n \t  return true;\n \t}\n@@ -2307,13 +2304,13 @@ pp_cxx_offsetof_expression_1 (cxx_pretty_printer *pp, tree t)\n \treturn false;\n       if (TREE_CODE (TREE_OPERAND (t, 0)) != ARROW_EXPR)\n \tpp_cxx_dot (pp);\n-      pp_expression (pp, TREE_OPERAND (t, 1));\n+      pp->expression (TREE_OPERAND (t, 1));\n       return true;\n     case ARRAY_REF:\n       if (!pp_cxx_offsetof_expression_1 (pp, TREE_OPERAND (t, 0)))\n \treturn false;\n       pp_left_bracket (pp);\n-      pp_expression (pp, TREE_OPERAND (t, 1));\n+      pp->expression (TREE_OPERAND (t, 1));\n       pp_right_bracket (pp);\n       return true;\n     default:\n@@ -2327,7 +2324,7 @@ pp_cxx_offsetof_expression (cxx_pretty_printer *pp, tree t)\n   pp_cxx_ws_string (pp, \"offsetof\");\n   pp_cxx_left_paren (pp);\n   if (!pp_cxx_offsetof_expression_1 (pp, TREE_OPERAND (t, 0)))\n-    pp_expression (pp, TREE_OPERAND (t, 0));\n+    pp->expression (TREE_OPERAND (t, 0));\n   pp_cxx_right_paren (pp);\n }\n \n@@ -2407,12 +2404,12 @@ pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n     }\n \n   pp_cxx_left_paren (pp);\n-  pp_cxx_type_id (pp, TRAIT_EXPR_TYPE1 (t));\n+  pp->type_id (TRAIT_EXPR_TYPE1 (t));\n \n   if (kind == CPTK_IS_BASE_OF || kind == CPTK_IS_CONVERTIBLE_TO)\n     {\n       pp_cxx_separate_with (pp, ',');\n-      pp_cxx_type_id (pp, TRAIT_EXPR_TYPE2 (t));\n+      pp->type_id (TRAIT_EXPR_TYPE2 (t));\n     }\n \n   pp_cxx_right_paren (pp);\n@@ -2430,6 +2427,5 @@ cxx_pretty_printer::cxx_pretty_printer ()\n \n   type_specifier_seq = (pp_fun) pp_cxx_type_specifier_seq;\n   parameter_list = (pp_fun) pp_cxx_parameter_declaration_clause;\n-  type_id = (pp_fun) pp_cxx_type_id;\n   simple_type_specifier = (pp_fun) pp_cxx_simple_type_specifier;\n }"}, {"sha": "2b48dd5fa759ee81c9771a2f0ae0a9bb4fe9803d", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -42,6 +42,7 @@ struct cxx_pretty_printer : c_pretty_printer\n   void conditional_expression (tree);\n   void assignment_expression (tree);\n   void expression (tree);\n+  void type_id (tree);\n   void statement (tree);\n   void declaration (tree);\n   void declaration_specifiers (tree);"}, {"sha": "78c74b65e67ea98399895499bd871b3f56ef2e1e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20059c8b38abf30ecdd9bc79f52945f8a2618246/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=20059c8b38abf30ecdd9bc79f52945f8a2618246", "patch": "@@ -1212,7 +1212,7 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n       if (flags & TFF_DECL_SPECIFIERS)\n \tpp->declaration (t);\n       else\n-\tpp_type_id (pp, t);\n+\tpp->type_id (t);\n       break;\n \n     case UNBOUND_CLASS_TEMPLATE:\n@@ -1908,7 +1908,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n     case REAL_CST:\n     case STRING_CST:\n     case COMPLEX_CST:\n-      pp_constant (pp, t);\n+      pp->constant (t);\n       break;\n \n     case USERDEF_LITERAL:\n@@ -2538,7 +2538,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n     case TYPENAME_TYPE:\n       /* We get here when we want to print a dependent type as an\n          id-expression, without any disambiguator decoration.  */\n-      pp_id_expression (pp, t);\n+      pp->id_expression (t);\n       break;\n \n     case TEMPLATE_TYPE_PARM:\n@@ -2588,15 +2588,15 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n     case BIT_FIELD_REF:\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n-      pp_expression (pp, t);\n+      pp->expression (t);\n       break;\n \n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n     case TRUTH_XOR_EXPR:\n       if (flags & TFF_EXPR_IN_PARENS)\n \tpp_cxx_left_paren (pp);\n-      pp_expression (pp, t);\n+      pp->expression (t);\n       if (flags & TFF_EXPR_IN_PARENS)\n \tpp_cxx_right_paren (pp);\n       break;"}]}