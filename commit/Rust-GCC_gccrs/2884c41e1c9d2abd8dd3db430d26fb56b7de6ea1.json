{"sha": "2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4NGM0MWUxYzlkMmFiZDhkZDNkYjQzMGQyNmZiNTZiN2RlNmVhMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-25T18:29:02Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-25T18:29:02Z"}, "message": "parse.h (OBSOLETE_MODIFIER_WARNING): Don't use ANSI string concatenation.\n\n\t* parse.h (OBSOLETE_MODIFIER_WARNING): Don't use ANSI string\n\tconcatenation.\n\t(OBSOLETE_MODIFIER_WARNING2): New macro allowing two args.\n\n\t* parse.y (register_fields): Don't pass a format specifier to\n\tOBSOLETE_MODIFIER_WARNING.\n\t(check_abstract_method_header): Use OBSOLETE_MODIFIER_WARNING2\n\tinstead of OBSOLETE_MODIFIER_WARNING, and don't pass a format\n\tspecifier.\n\t(check_modifiers): Change function into a macro.\n\t(check_class_interface_creation): Pass a literal format string.\n\nFrom-SVN: r31614", "tree": {"sha": "1a4a974cd0413f12b6184b71c09453d5d010ca6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4a974cd0413f12b6184b71c09453d5d010ca6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/comments", "author": null, "committer": null, "parents": [{"sha": "8c135f8458c75189290ee4e98b66e51cac737fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c135f8458c75189290ee4e98b66e51cac737fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c135f8458c75189290ee4e98b66e51cac737fb2"}], "stats": {"total": 4557, "additions": 2292, "deletions": 2265}, "files": [{"sha": "251c4be057ec743fe7322d119a6ced0b2fd9ba62", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1", "patch": "@@ -1,3 +1,17 @@\n+2000-01-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* parse.h (OBSOLETE_MODIFIER_WARNING): Don't use ANSI string\n+\tconcatenation.\n+\t(OBSOLETE_MODIFIER_WARNING2): New macro allowing two args.\n+\n+\t* parse.y (register_fields): Don't pass a format specifier to\n+\tOBSOLETE_MODIFIER_WARNING.\n+\t(check_abstract_method_header): Use OBSOLETE_MODIFIER_WARNING2\n+\tinstead of OBSOLETE_MODIFIER_WARNING, and don't pass a format\n+\tspecifier.\n+\t(check_modifiers): Change function into a macro.\n+\t(check_class_interface_creation): Pass a literal format string.\n+\n 2000-01-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* buffer.h: PROTO -> PARAMS."}, {"sha": "55b60e1556696a697b0109309d4e804461da3501", "filename": "gcc/java/parse.c", "status": "modified", "additions": 2238, "deletions": 2226, "changes": 4464, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1"}, {"sha": "41cb0e94c64677a8f317a47d36bdad46bb47ed56", "filename": "gcc/java/parse.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1", "patch": "@@ -138,13 +138,20 @@ extern tree stabilize_reference PARAMS ((tree));\n \n /* Pedantic warning on obsolete modifiers. Note: when cl is NULL,\n    flags was set artificially, such as for a interface method */\n-#define OBSOLETE_MODIFIER_WARNING(cl, flags, __modifier, format, arg)        \\\n+#define OBSOLETE_MODIFIER_WARNING(cl, flags, __modifier, arg)                \\\n   {                                                                          \\\n     if (flag_redundant && (cl) && ((flags) & (__modifier)))\t\t     \\\n       parse_warning_context (cl,                                             \\\n-     \"Discouraged redundant use of `%s' modifier in declaration of \" format, \\\n+     \"Discouraged redundant use of `%s' modifier in declaration of %s\",      \\\n \t\t\t     java_accstring_lookup (__modifier), arg);       \\\n   }\n+#define OBSOLETE_MODIFIER_WARNING2(cl, flags, __modifier, arg1, arg2)        \\\n+  {                                                                          \\\n+    if (flag_redundant && (cl) && ((flags) & (__modifier)))\t\t     \\\n+      parse_warning_context (cl,                                             \\\n+     \"Discouraged redundant use of `%s' modifier in declaration of %s `%s'\", \\\n+\t\t\t     java_accstring_lookup (__modifier), arg1, arg2);\\\n+  }\n \n /* Quickly build a temporary pointer on hypothetical type NAME. */\n #define BUILD_PTR_FROM_NAME(ptr, name)\t\t\\"}, {"sha": "c3fc4a03d2cb62c7578fe09e959f3fd645411d9d", "filename": "gcc/java/parse.y", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=2884c41e1c9d2abd8dd3db430d26fb56b7de6ea1", "patch": "@@ -70,7 +70,6 @@ definitions and other extensions.  */\n static char *java_accstring_lookup PARAMS ((int));\n static void  classitf_redefinition_error PARAMS ((const char *,tree, tree, tree));\n static void  variable_redefinition_error PARAMS ((tree, tree, tree, int));\n-static void  check_modifiers PARAMS ((const char *, int, int));\n static tree  create_class PARAMS ((int, tree, tree, tree));\n static tree  create_interface PARAMS ((int, tree, tree));\n static tree  find_field PARAMS ((tree, tree));\n@@ -325,6 +324,22 @@ static tree current_static_block = NULL_TREE;\n \n /* The list of all packages we've seen so far */\n static tree package_list = NULL_TREE;\n+ \n+/* Check modifiers. If one doesn't fit, retrieve it in its declaration\n+   line and point it out.  */\n+/* Should point out the one that don't fit. ASCII/unicode, going\n+   backward. FIXME */\n+\n+#define check_modifiers(__message, __value, __mask) do {\t\\\n+  if ((__value) & ~(__mask))\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      int i, remainder = (__value) & ~(__mask);\t\t\t\\\n+      for (i = 0; i <= 10; i++)\t\t\t\t\t\\\n+        if ((1 << i) & remainder)\t\t\t\t\\\n+\t  parse_error_context (ctxp->modifier_ctx [i], (__message), \\\n+\t\t\t       java_accstring_lookup (1 << i)); \\\n+    }\t\t\t\t\t\t\t\t\\\n+} while (0)\n \n %}\n \n@@ -2882,27 +2897,6 @@ build_unresolved_array_type (type_or_wfl)\n \t\t\t EXPR_WFL_COLNO (type_or_wfl));\n }\n \n-/* Check modifiers. If one doesn't fit, retrieve it in its declaration line\n-  and point it out.  */\n-\n-static void\n-check_modifiers (message, value, mask)\n-     const char *message;\n-     int value;\n-     int mask;\n-{\n-  /* Should point out the one that don't fit. ASCII/unicode,\n-     going backward. FIXME */\n-  if (value & ~mask)\n-    {\n-      int i, remainder = value & ~mask;\n-      for (i = 0; i <= 10; i++)\n-        if ((1 << i) & remainder)\n-\t  parse_error_context (ctxp->modifier_ctx [i], message, \n-\t\t\t       java_accstring_lookup (1 << i));\n-    }\n-}\n-\n static void\n parser_add_interface (class_decl, interface_decl, wfl)\n      tree class_decl, interface_decl, wfl;\n@@ -2967,10 +2961,12 @@ check_class_interface_creation (is_interface, flags, raw_name, qualified_name, d\n \t\t\t     IDENTIFIER_POINTER (raw_name));\n     }\n \n-  check_modifiers ((is_interface ? \n-\t\t    \"Illegal modifier `%s' for interface declaration\" :\n-\t\t    \"Illegal modifier `%s' for class declaration\"), flags,\n-\t\t   (is_interface ? INTERFACE_MODIFIERS : CLASS_MODIFIERS));\n+  if (is_interface)\n+    check_modifiers (\"Illegal modifier `%s' for interface declaration\",\n+\t\t     flags, INTERFACE_MODIFIERS);\n+  else\n+    check_modifiers (\"Illegal modifier `%s' for class declaration\",\n+\t\t     flags, CLASS_MODIFIERS);\n   return 0;\n }\n \n@@ -3239,13 +3235,11 @@ register_fields (flags, type, variable_list)\n   if (CLASS_INTERFACE (TYPE_NAME (class_type)))\n     {\n       OBSOLETE_MODIFIER_WARNING (MODIFIER_WFL (PUBLIC_TK),\n-\t\t\t\t flags, ACC_PUBLIC, \n-\t\t\t\t \"%s\", \"interface field(s)\");\n+\t\t\t\t flags, ACC_PUBLIC, \"interface field(s)\");\n       OBSOLETE_MODIFIER_WARNING (MODIFIER_WFL (STATIC_TK),\n-\t\t\t\t flags, ACC_STATIC, \n-\t\t\t\t \"%s\", \"interface field(s)\");\n+\t\t\t\t flags, ACC_STATIC, \"interface field(s)\");\n       OBSOLETE_MODIFIER_WARNING (MODIFIER_WFL (FINAL_TK),\n-\t\t\t\t flags, ACC_FINAL, \"%s\", \"interface field(s)\");\n+\t\t\t\t flags, ACC_FINAL, \"interface field(s)\");\n       check_modifiers (\"Illegal interface member modifier `%s'\", flags,\n \t\t       INTERFACE_FIELD_MODIFIERS);\n       flags |= (ACC_PUBLIC | ACC_STATIC | ACC_FINAL);\n@@ -3754,12 +3748,12 @@ check_abstract_method_header (meth)\n   /* DECL_NAME might still be a WFL node */\n   tree name = GET_METHOD_NAME (meth);\n \n-  OBSOLETE_MODIFIER_WARNING (MODIFIER_WFL (ABSTRACT_TK), flags,\n-\t\t\t     ACC_ABSTRACT, \"abstract method `%s'\",\n-\t\t\t     IDENTIFIER_POINTER (name));\n-  OBSOLETE_MODIFIER_WARNING (MODIFIER_WFL (PUBLIC_TK), flags, \n-\t\t\t     ACC_PUBLIC, \"abstract method `%s'\",\n-\t\t\t     IDENTIFIER_POINTER (name));\n+  OBSOLETE_MODIFIER_WARNING2 (MODIFIER_WFL (ABSTRACT_TK), flags,\n+\t\t\t      ACC_ABSTRACT, \"abstract method\",\n+\t\t\t      IDENTIFIER_POINTER (name));\n+  OBSOLETE_MODIFIER_WARNING2 (MODIFIER_WFL (PUBLIC_TK), flags, \n+\t\t\t      ACC_PUBLIC, \"abstract method\",\n+\t\t\t      IDENTIFIER_POINTER (name));\n \n   check_modifiers (\"Illegal modifier `%s' for interface method\",\n \t\t  flags, INTERFACE_METHOD_MODIFIERS);"}]}