{"sha": "e233ac979c0f179f858f3c86281835a4c09cece2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzM2FjOTc5YzBmMTc5Zjg1OGYzYzg2MjgxODM1YTRjMDljZWNlMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-09-27T17:31:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-09-27T17:31:34Z"}, "message": "re PR tree-optimization/33565 (spurious  warning: assuming signed overflow does not occur when assuming that (X + c) >= X is always true)\n\n./:\tPR tree-optimization/33565\n\t* tree-ssa-loop-ch.c (copy_loop_headers): Set TREE_NO_WARNING on\n\tassignments of comparisons.\n\t* tree-ssa-sccvn.c (simplify_binary_expression): Add stmt\n\tparameter.  Change caller.  Defer overflow warnings around call to\n\tfold_binary.\n\t* fold-const.c (fold_undefer_overflow_warnings): Don't warn if\n\tTREE_NO_WARNING is set on the statement.\n\t* tree-ssa-forwprop.c\n\t(tree_ssa_forward_propagate_single_use_vars): Don't test\n\tTREE_NO_WARNING when calling fold_undefer_overflow_warnings.\n\t* tree-cfg.c (fold_cond_expr_cond): Likewise.\ntestsuite/:\n\tPR tree-optimization/33565\n\t* gcc.dg/Wstrict-overflow-20.c: New test.\n\nFrom-SVN: r128840", "tree": {"sha": "e09e3c8bc4a42746c82cfe49a69a4098a8e6622b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e09e3c8bc4a42746c82cfe49a69a4098a8e6622b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e233ac979c0f179f858f3c86281835a4c09cece2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e233ac979c0f179f858f3c86281835a4c09cece2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e233ac979c0f179f858f3c86281835a4c09cece2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e233ac979c0f179f858f3c86281835a4c09cece2/comments", "author": null, "committer": null, "parents": [{"sha": "c304878307f81a770edb0ec08d88c73b5aed074a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c304878307f81a770edb0ec08d88c73b5aed074a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c304878307f81a770edb0ec08d88c73b5aed074a"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "78ef879234fd4268dfbbffe4067e7b03f398cd6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e233ac979c0f179f858f3c86281835a4c09cece2", "patch": "@@ -1,3 +1,18 @@\n+2007-09-27  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR tree-optimization/33565\n+\t* tree-ssa-loop-ch.c (copy_loop_headers): Set TREE_NO_WARNING on\n+\tassignments of comparisons.\n+\t* tree-ssa-sccvn.c (simplify_binary_expression): Add stmt\n+\tparameter.  Change caller.  Defer overflow warnings around call to\n+\tfold_binary.\n+\t* fold-const.c (fold_undefer_overflow_warnings): Don't warn if\n+\tTREE_NO_WARNING is set on the statement.\n+\t* tree-ssa-forwprop.c\n+\t(tree_ssa_forward_propagate_single_use_vars): Don't test\n+\tTREE_NO_WARNING when calling fold_undefer_overflow_warnings.\n+\t* tree-cfg.c (fold_cond_expr_cond): Likewise.\n+\n 2007-09-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/rs6000/rs6000.c (rs6000_legitimize_address): Do not"}, {"sha": "62cbfd11ee04714e5356730f6d03660ed8caf2b5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e233ac979c0f179f858f3c86281835a4c09cece2", "patch": "@@ -974,6 +974,9 @@ fold_undefer_overflow_warnings (bool issue, const_tree stmt, int code)\n   if (!issue || warnmsg == NULL)\n     return;\n \n+  if (stmt != NULL_TREE && TREE_NO_WARNING (stmt))\n+    return;\n+\n   /* Use the smallest code level when deciding to issue the\n      warning.  */\n   if (code == 0 || code > (int) fold_deferred_overflow_code)"}, {"sha": "163f80bb999f7f32d2b5339e9b4d8f7e64398323", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e233ac979c0f179f858f3c86281835a4c09cece2", "patch": "@@ -1,3 +1,8 @@\n+2007-09-27  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR tree-optimization/33565\n+\t* gcc.dg/Wstrict-overflow-20.c: New test.\n+\n 2007-09-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* gfortran.dg/openmp_stack.f90: Fix typo."}, {"sha": "207162d0e8e1303de564cd8d07133845a101f346", "filename": "gcc/testsuite/gcc.dg/Wstrict-overflow-20.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-20.c?ref=e233ac979c0f179f858f3c86281835a4c09cece2", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fstrict-overflow -O2 -Wstrict-overflow\" } */\n+\n+/* Don't warn about an overflow in a copied loop header.  We used to\n+   get a warning in value numbering.  This is PR 33565.  */\n+\n+void f (int m, int n)\n+{\n+  int j;\n+ \n+  for (j = m; j\t< m + 10 && j <\tn; j ++)\n+    do_something (j);\n+}"}, {"sha": "320bc8ef61dbc86bd1be2cf3e30092440df0a043", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e233ac979c0f179f858f3c86281835a4c09cece2", "patch": "@@ -417,8 +417,7 @@ fold_cond_expr_cond (void)\n \t  cond = fold (COND_EXPR_COND (stmt));\n \t  zerop = integer_zerop (cond);\n \t  onep = integer_onep (cond);\n-\t  fold_undefer_overflow_warnings (((zerop || onep)\n-\t\t\t\t\t   && !TREE_NO_WARNING (stmt)),\n+\t  fold_undefer_overflow_warnings (zerop || onep,\n \t\t\t\t\t  stmt,\n \t\t\t\t\t  WARN_STRICT_OVERFLOW_CONDITIONAL);\n \t  if (zerop)"}, {"sha": "60e6ffa9e62512e1442ecb05325bcd245f4b03bd", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=e233ac979c0f179f858f3c86281835a4c09cece2", "patch": "@@ -1021,8 +1021,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t      did_something = forward_propagate_into_cond (stmt, stmt);\n \t      if (did_something == 2)\n \t\tcfg_changed = true;\n-\t      fold_undefer_overflow_warnings (!TREE_NO_WARNING (stmt)\n-\t\t\t\t\t      && did_something, stmt,\n+\t      fold_undefer_overflow_warnings (did_something, stmt,\n \t\t\t\t\t      WARN_STRICT_OVERFLOW_CONDITIONAL);\n \t      bsi_next (&bsi);\n \t    }"}, {"sha": "ff62c686c2851d84189347cc11fe695690df05af", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=e233ac979c0f179f858f3c86281835a4c09cece2", "patch": "@@ -215,11 +215,22 @@ copy_loop_headers (void)\n \n \t  for (i = 0; i < n_bbs; ++i)\n \t    {\n-\t      tree last;\n-\n-\t      last = last_stmt (copied_bbs[i]);\n-\t      if (TREE_CODE (last) == COND_EXPR)\n-\t\tTREE_NO_WARNING (last) = 1;\n+\t      block_stmt_iterator bsi;\n+\n+\t      for (bsi = bsi_start (copied_bbs[i]);\n+\t\t   !bsi_end_p (bsi);\n+\t\t   bsi_next (&bsi))\n+\t\t{\n+\t\t  tree stmt = bsi_stmt (bsi);\n+\t\t  if (TREE_CODE (stmt) == COND_EXPR)\n+\t\t    TREE_NO_WARNING (stmt) = 1;\n+\t\t  else if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT)\n+\t\t    {\n+\t\t      tree rhs = GIMPLE_STMT_OPERAND (stmt, 1);\n+\t\t      if (COMPARISON_CLASS_P (rhs))\n+\t\t\tTREE_NO_WARNING (stmt) = 1;\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "b4fb014b76dd9e529a2ac72123ffe8945b1b235c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e233ac979c0f179f858f3c86281835a4c09cece2/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e233ac979c0f179f858f3c86281835a4c09cece2", "patch": "@@ -1390,7 +1390,7 @@ valueize_expr (tree expr)\n    simplified. */\n \n static tree\n-simplify_binary_expression (tree rhs)\n+simplify_binary_expression (tree stmt, tree rhs)\n {\n   tree result = NULL_TREE;\n   tree op0 = TREE_OPERAND (rhs, 0);\n@@ -1421,8 +1421,13 @@ simplify_binary_expression (tree rhs)\n       && op1 == TREE_OPERAND (rhs, 1))\n     return NULL_TREE;\n \n+  fold_defer_overflow_warnings ();\n+\n   result = fold_binary (TREE_CODE (rhs), TREE_TYPE (rhs), op0, op1);\n \n+  fold_undefer_overflow_warnings (result && valid_gimple_expression_p (result),\n+\t\t\t\t  stmt, 0);\n+\n   /* Make sure result is not a complex expression consisting\n      of operators of operators (IE (a + b) + (a + c))\n      Otherwise, we will end up with unbounded expressions if\n@@ -1522,7 +1527,7 @@ try_to_simplify (tree stmt, tree rhs)\n \t  break;\n \tcase tcc_comparison:\n \tcase tcc_binary:\n-\t  return simplify_binary_expression (rhs);\n+\t  return simplify_binary_expression (stmt, rhs);\n \t  break;\n \tdefault:\n \t  break;"}]}