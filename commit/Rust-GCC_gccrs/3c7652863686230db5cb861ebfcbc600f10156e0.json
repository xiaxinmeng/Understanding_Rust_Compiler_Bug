{"sha": "3c7652863686230db5cb861ebfcbc600f10156e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3NjUyODYzNjg2MjMwZGI1Y2I4NjFlYmZjYmM2MDBmMTAxNTZlMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-24T01:49:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-24T01:49:23Z"}, "message": "compiler: Simplify making integer expressions.\n\nInstead of always needing an mpz_t, add helper functions to\ncreate an integer functions from signed or unsigned long\nvalues.\n\nFrom-SVN: r216610", "tree": {"sha": "fefc70c1ab55551854cd9b757e03f44f69d717ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fefc70c1ab55551854cd9b757e03f44f69d717ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c7652863686230db5cb861ebfcbc600f10156e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7652863686230db5cb861ebfcbc600f10156e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7652863686230db5cb861ebfcbc600f10156e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7652863686230db5cb861ebfcbc600f10156e0/comments", "author": null, "committer": null, "parents": [{"sha": "7a149e7a51cd71abf4b6313e3d50add654e98c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a149e7a51cd71abf4b6313e3d50add654e98c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a149e7a51cd71abf4b6313e3d50add654e98c23"}], "stats": {"total": 413, "additions": 142, "deletions": 271}, "files": [{"sha": "0ec65691dd802f0f2f8498007d0243e148a7ab88", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 70, "deletions": 106, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3c7652863686230db5cb861ebfcbc600f10156e0", "patch": "@@ -157,11 +157,8 @@ Expression::convert_for_assignment(Gogo* gogo, Type* lhs_type,\n   else if (lhs_type->is_slice_type() && rhs_type->is_nil_type())\n     {\n       // Assigning nil to a slice.\n-      mpz_t zval;\n-      mpz_init_set_ui(zval, 0UL);\n-      Expression* zero = Expression::make_integer(&zval, NULL, location);\n-      mpz_clear(zval);\n       Expression* nil = Expression::make_nil(location);\n+      Expression* zero = Expression::make_integer_ul(0, NULL, location);\n       return Expression::make_slice_value(lhs_type, nil, zero, zero, location);\n     }\n   else if (rhs_type->is_nil_type())\n@@ -491,11 +488,7 @@ Expression::check_bounds(Expression* val, Location loc)\n   Expression* index_overflows = Expression::make_boolean(false, loc);\n   if (!val_is_unsigned)\n     {\n-      mpz_t zval;\n-      mpz_init_set_ui(zval, 0UL);\n-      Expression* zero = Expression::make_integer(&zval, val_type, loc);\n-      mpz_clear(zval);\n-\n+      Expression* zero = Expression::make_integer_ul(0, val_type, loc);\n       negative_index = Expression::make_binary(OPERATOR_LT, val, zero, loc);\n     }\n \n@@ -512,7 +505,7 @@ Expression::check_bounds(Expression* val, Location loc)\n       mpz_init(maxval);\n       mpz_mul_2exp(maxval, one, bound_type_size - 1);\n       mpz_sub_ui(maxval, maxval, 1);\n-      Expression* max = Expression::make_integer(&maxval, val_type, loc);\n+      Expression* max = Expression::make_integer_z(&maxval, val_type, loc);\n       mpz_clear(one);\n       mpz_clear(maxval);\n \n@@ -1824,8 +1817,8 @@ class Integer_expression : public Expression\n       return Expression::make_character(&this->val_, this->type_,\n \t\t\t\t\tthis->location());\n     else\n-      return Expression::make_integer(&this->val_, this->type_,\n-\t\t\t\t      this->location());\n+      return Expression::make_integer_z(&this->val_, this->type_,\n+\t\t\t\t\tthis->location());\n   }\n \n   void\n@@ -2047,7 +2040,7 @@ Integer_expression::do_import(Import* imp)\n       if (is_character_constant)\n \tret = Expression::make_character(&val, NULL, imp->location());\n       else\n-\tret = Expression::make_integer(&val, NULL, imp->location());\n+\tret = Expression::make_integer_z(&val, NULL, imp->location());\n       mpz_clear(val);\n       return ret;\n     }\n@@ -2077,14 +2070,38 @@ Integer_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n     ast_dump_context->ostream() << '\\'';\n }\n \n-// Build a new integer value.\n+// Build a new integer value from a multi-precision integer.\n \n Expression*\n-Expression::make_integer(const mpz_t* val, Type* type, Location location)\n+Expression::make_integer_z(const mpz_t* val, Type* type, Location location)\n {\n   return new Integer_expression(val, type, false, location);\n }\n \n+// Build a new integer value from an unsigned long.\n+\n+Expression*\n+Expression::make_integer_ul(unsigned long val, Type *type, Location location)\n+{\n+  mpz_t zval;\n+  mpz_init_set_ui(zval, val);\n+  Expression* ret = Expression::make_integer_z(&zval, type, location);\n+  mpz_clear(zval);\n+  return ret;\n+}\n+\n+// Build a new integer value from a signed long.\n+\n+Expression*\n+Expression::make_integer_sl(long val, Type *type, Location location)\n+{\n+  mpz_t zval;\n+  mpz_init_set_si(zval, val);\n+  Expression* ret = Expression::make_integer_z(&zval, type, location);\n+  mpz_clear(zval);\n+  return ret;\n+}\n+\n // Build a new character constant value.\n \n Expression*\n@@ -2593,12 +2610,7 @@ Const_expression::do_lower(Gogo* gogo, Named_object*,\n \t\t   \"iota is only defined in const declarations\");\n \t  iota_value = 0;\n \t}\n-      mpz_t val;\n-      mpz_init_set_ui(val, static_cast<unsigned long>(iota_value));\n-      Expression* ret = Expression::make_integer(&val, NULL,\n-\t\t\t\t\t\t this->location());\n-      mpz_clear(val);\n-      return ret;\n+      return Expression::make_integer_ul(iota_value, NULL, this->location());\n     }\n \n   // Make sure that the constant itself has been lowered.\n@@ -3105,13 +3117,10 @@ Type_conversion_expression::do_lower(Gogo*, Named_object*,\n \t\t       p != s.end();\n \t\t       p++)\n \t\t    {\n-\t\t      mpz_t val;\n-\t\t      mpz_init_set_ui(val, static_cast<unsigned char>(*p));\n-\t\t      Expression* v = Expression::make_integer(&val,\n-\t\t\t\t\t\t\t       element_type,\n-\t\t\t\t\t\t\t       location);\n-\t\t      vals->push_back(v);\n-\t\t      mpz_clear(val);\n+\t\t      unsigned char c = static_cast<unsigned char>(*p);\n+\t\t      vals->push_back(Expression::make_integer_ul(c,\n+\t\t\t\t\t\t\t\t  element_type,\n+\t\t\t\t\t\t\t\t  location));\n \t\t    }\n \t\t}\n \t      else\n@@ -3129,13 +3138,9 @@ Type_conversion_expression::do_lower(Gogo*, Named_object*,\n \t\t\t  adv = 1;\n \t\t\t}\n \t\t      p += adv;\n-\t\t      mpz_t val;\n-\t\t      mpz_init_set_ui(val, c);\n-\t\t      Expression* v = Expression::make_integer(&val,\n-\t\t\t\t\t\t\t       element_type,\n-\t\t\t\t\t\t\t       location);\n-\t\t      vals->push_back(v);\n-\t\t      mpz_clear(val);\n+\t\t      vals->push_back(Expression::make_integer_ul(c,\n+\t\t\t\t\t\t\t\t  element_type,\n+\t\t\t\t\t\t\t\t  location));\n \t\t    }\n \t\t}\n \n@@ -5419,12 +5424,7 @@ Binary_expression::lower_compare_to_memcmp(Gogo*, Statement_inserter* inserter)\n \t\t\t\t\t       TYPE_INFO_SIZE);\n \n   Expression* call = Runtime::make_call(Runtime::MEMCMP, loc, 3, a1, a2, len);\n-\n-  mpz_t zval;\n-  mpz_init_set_ui(zval, 0);\n-  Expression* zero = Expression::make_integer(&zval, NULL, loc);\n-  mpz_clear(zval);\n-\n+  Expression* zero = Expression::make_integer_ul(0, NULL, loc);\n   return Expression::make_binary(this->op_, call, zero, loc);\n }\n \n@@ -5883,10 +5883,9 @@ Binary_expression::do_check_types(Gogo*)\n \t\t  if (mpz_sgn(val) < 0)\n \t\t    {\n \t\t      this->report_error(_(\"negative shift count\"));\n-\t\t      mpz_set_ui(val, 0);\n \t\t      Location rloc = this->right_->location();\n-\t\t      this->right_ = Expression::make_integer(&val, right_type,\n-\t\t\t\t\t\t\t      rloc);\n+\t\t      this->right_ = Expression::make_integer_ul(0, right_type,\n+\t\t\t\t\t\t\t\t rloc);\n \t\t    }\n \t\t  mpz_clear(val);\n \t\t}\n@@ -6343,10 +6342,7 @@ Expression::comparison(Translate_context* context, Type* result_type,\n   Type* left_type = left->type();\n   Type* right_type = right->type();\n \n-  mpz_t zval;\n-  mpz_init_set_ui(zval, 0UL);\n-  Expression* zexpr = Expression::make_integer(&zval, NULL, location);\n-  mpz_clear(zval);\n+  Expression* zexpr = Expression::make_integer_ul(0, NULL, location);\n \n   if (left_type->is_string_type() && right_type->is_string_type())\n     {\n@@ -7260,11 +7256,7 @@ Builtin_call_expression::lower_make()\n \t  this->report_error(_(\"length required when allocating a slice\"));\n \t  return Expression::make_error(this->location());\n \t}\n-\n-      mpz_t zval;\n-      mpz_init_set_ui(zval, 0);\n-      len_arg = Expression::make_integer(&zval, NULL, loc);\n-      mpz_clear(zval);\n+      len_arg = Expression::make_integer_ul(0, NULL, loc);\n     }\n   else\n     {\n@@ -8543,7 +8535,7 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n         mpz_t ival;\n         nc.get_int(&ival);\n         Expression* int_cst =\n-            Expression::make_integer(&ival, uintptr_type, location);\n+            Expression::make_integer_z(&ival, uintptr_type, location);\n         mpz_clear(ival);\n         return int_cst->get_backend(context);\n       }\n@@ -8586,13 +8578,10 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n \n \tType* element_type = at->element_type();\n \tBtype* element_btype = element_type->get_backend(gogo);\n-\n-        mpz_t size;\n-        size_t element_size = gogo->backend()->type_size(element_btype);\n-        mpz_init_set_ui(size, element_size);\n-        Expression* size_expr = Expression::make_integer(&size, length->type(), location);\n-        mpz_clear(size);\n-\n+\tsize_t element_size = gogo->backend()->type_size(element_btype);\n+\tExpression* size_expr = Expression::make_integer_ul(element_size,\n+\t\t\t\t\t\t\t    length->type(),\n+\t\t\t\t\t\t\t    location);\n         Expression* bytecount =\n             Expression::make_binary(OPERATOR_MULT, size_expr, length, location);\n         Expression* copy = Runtime::make_call(Runtime::COPY, location, 3,\n@@ -8615,7 +8604,7 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n         go_assert(arg2->is_variable());\n \tExpression* arg2_val;\n \tExpression* arg2_len;\n-        mpz_t size;\n+\tunsigned long size;\n \tif (arg2->type()->is_string_type()\n \t    && element_type->integer_type() != NULL\n \t    && element_type->integer_type()->is_byte())\n@@ -8624,19 +8613,17 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n \t\t\t\t\t\t    location);\n \t    arg2_len = Expression::make_string_info(arg2, STRING_INFO_LENGTH,\n \t\t\t\t\t\t    location);\n-            mpz_init_set_ui(size, 1UL);\n+\t    size = 1;\n \t  }\n \telse\n \t  {\n \t    arg2_val = at->get_value_pointer(gogo, arg2);\n \t    arg2_len = at->get_length(gogo, arg2);\n \t    Btype* element_btype = element_type->get_backend(gogo);\n-            size_t element_size = gogo->backend()->type_size(element_btype);\n-            mpz_init_set_ui(size, element_size);\n+\t    size = gogo->backend()->type_size(element_btype);\n \t  }\n         Expression* element_size =\n-            Expression::make_integer(&size, NULL, location);\n-        mpz_clear(size);\n+\t  Expression::make_integer_ul(size, NULL, location);\n \n         Expression* append = Runtime::make_call(Runtime::APPEND, location, 4,\n                                                 arg1, arg2_val, arg2_len,\n@@ -10762,12 +10749,7 @@ String_index_expression::do_get_backend(Translate_context* context)\n \n   Expression* end = NULL;\n   if (this->end_->is_nil_expression())\n-    {\n-      mpz_t neg_one;\n-      mpz_init_set_si(neg_one, -1);\n-      end = Expression::make_integer(&neg_one, int_type, loc);\n-      mpz_clear(neg_one);\n-    }\n+    end = Expression::make_integer_sl(-1, int_type, loc);\n   else\n     {\n       Expression* bounds_check = Expression::check_bounds(this->end_, loc);\n@@ -11076,21 +11058,16 @@ Field_reference_expression::do_lower(Gogo* gogo, Named_object* function,\n   // string, it won't garbage collect the bytes.  So we use a\n   // [...]byte.\n \n-  mpz_t val;\n-  mpz_init_set_ui(val, s.length());\n-  Expression* length_expr = Expression::make_integer(&val, NULL, loc);\n-  mpz_clear(val);\n+  Expression* length_expr = Expression::make_integer_ul(s.length(), NULL, loc);\n \n   Type* byte_type = gogo->lookup_global(\"byte\")->type_value();\n   Type* array_type = Type::make_array_type(byte_type, length_expr);\n \n   Expression_list* bytes = new Expression_list();\n   for (std::string::const_iterator p = s.begin(); p != s.end(); p++)\n     {\n-      mpz_init_set_ui(val, *p);\n-      Expression* byte = Expression::make_integer(&val, NULL, loc);\n-      mpz_clear(val);\n-      bytes->push_back(byte);\n+      unsigned char c = static_cast<unsigned char>(*p);\n+      bytes->push_back(Expression::make_integer_ul(c, NULL, loc));\n     }\n \n   Expression* e = Expression::make_composite_literal(array_type, 0, false,\n@@ -12490,20 +12467,19 @@ class Slice_construction_expression : public Array_construction_expression\n   {\n     go_assert(type->is_slice_type());\n \n-    mpz_t lenval;\n+    unsigned long lenval;\n     Expression* length;\n     if (vals == NULL || vals->empty())\n-      mpz_init_set_ui(lenval, 0);\n+      lenval = 0;\n     else\n       {\n \tif (this->indexes() == NULL)\n-\t  mpz_init_set_ui(lenval, vals->size());\n+\t  lenval = vals->size();\n \telse\n-\t  mpz_init_set_ui(lenval, indexes->back() + 1);\n+\t  lenval = indexes->back() + 1;\n       }\n     Type* int_type = Type::lookup_integer_type(\"int\");\n-    length = Expression::make_integer(&lenval, int_type, location);\n-    mpz_clear(lenval);\n+    length = Expression::make_integer_ul(lenval, int_type, location);\n     Type* element_type = type->array_type()->element_type();\n     this->valtype_ = Type::make_array_type(element_type, length);\n   }\n@@ -12722,11 +12698,7 @@ Map_construction_expression::do_flatten(Gogo* gogo, Named_object*,\n                                                         key_value_pair, loc));\n         }\n \n-      mpz_t lenval;\n-      mpz_init_set_ui(lenval, i);\n-      Expression* element_count = Expression::make_integer(&lenval, NULL, loc);\n-      mpz_clear(lenval);\n-\n+      Expression* element_count = Expression::make_integer_ul(i, NULL, loc);\n       Type* ctor_type =\n           Type::make_array_type(this->element_type_, element_count);\n       Expression* constructor =\n@@ -12831,10 +12803,7 @@ Map_construction_expression::do_get_backend(Translate_context* context)\n   Expression* descriptor = Expression::make_map_descriptor(mt, loc);\n \n   Type* uintptr_t = Type::lookup_integer_type(\"uintptr\");\n-  mpz_t countval;\n-  mpz_init_set_ui(countval, i);\n-  Expression* count = Expression::make_integer(&countval, uintptr_t, loc);\n-  mpz_clear(countval);\n+  Expression* count = Expression::make_integer_ul(i, uintptr_t, loc);\n \n   Expression* entry_size =\n       Expression::make_type_info(this->element_type_, TYPE_INFO_SIZE);\n@@ -13463,10 +13432,7 @@ Composite_literal_expression::make_array(\n \t    }\n \t}\n \n-      mpz_t vlen;\n-      mpz_init_set_ui(vlen, size);\n-      Expression* elen = Expression::make_integer(&vlen, NULL, location);\n-      mpz_clear(vlen);\n+      Expression* elen = Expression::make_integer_ul(size, NULL, location);\n       at = Type::make_array_type(at->element_type(), elen);\n       type = at;\n     }\n@@ -14903,12 +14869,10 @@ Struct_field_offset_expression::do_get_backend(Translate_context* context)\n   Btype* btype = this->type_->get_backend(gogo);\n \n   size_t offset = gogo->backend()->type_field_offset(btype, i);\n-  mpz_t offsetval;\n-  mpz_init_set_ui(offsetval, offset);\n   Type* uptr_type = Type::lookup_integer_type(\"uintptr\");\n-  Expression* ret = Expression::make_integer(&offsetval, uptr_type,\n-\t\t\t\t\t     Linemap::predeclared_location());\n-  mpz_clear(offsetval);\n+  Expression* ret =\n+    Expression::make_integer_ul(offset, uptr_type,\n+\t\t\t\tLinemap::predeclared_location());\n   return ret->get_backend(context);\n }\n \n@@ -15980,7 +15944,7 @@ Numeric_constant::expression(Location loc) const\n   switch (this->classification_)\n     {\n     case NC_INT:\n-      return Expression::make_integer(&this->u_.int_val, this->type_, loc);\n+      return Expression::make_integer_z(&this->u_.int_val, this->type_, loc);\n     case NC_RUNE:\n       return Expression::make_character(&this->u_.int_val, this->type_, loc);\n     case NC_FLOAT:"}, {"sha": "7bf38d7f49fee192121dd77b65e716be40f6cfd7", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=3c7652863686230db5cb861ebfcbc600f10156e0", "patch": "@@ -214,10 +214,20 @@ class Expression\n   static Expression*\n   make_character(const mpz_t*, Type*, Location);\n \n-  // Make a constant integer expression.  TYPE should be NULL for an\n-  // abstract type.\n+  // Make a constant integer expression from a multi-precision\n+  // integer.  TYPE should be NULL for an abstract type.\n+  static Expression*\n+  make_integer_z(const mpz_t*, Type*, Location);\n+\n+  // Make a constant integer expression from an unsigned long.  TYPE\n+  // should be NULL for an abstract type.\n+  static Expression*\n+  make_integer_ul(unsigned long, Type*, Location);\n+\n+  // Make a constant integer expression from a signed long.  TYPE\n+  // should be NULL for an abstract type.\n   static Expression*\n-  make_integer(const mpz_t*, Type*, Location);\n+  make_integer_sl(long, Type*, Location);\n \n   // Make a constant float expression.  TYPE should be NULL for an\n   // abstract type."}, {"sha": "d6ba272dbd4adfd4669e161ad008d561f44a8e54", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=3c7652863686230db5cb861ebfcbc600f10156e0", "patch": "@@ -587,11 +587,7 @@ Gogo::zero_value(Type *type)\n       // We will change the type later, when we know the size.\n       Type* byte_type = this->lookup_global(\"byte\")->type_value();\n \n-      mpz_t val;\n-      mpz_init_set_ui(val, 0);\n-      Expression* zero = Expression::make_integer(&val, NULL, bloc);\n-      mpz_clear(val);\n-\n+      Expression* zero = Expression::make_integer_ul(0, NULL, bloc);\n       Type* array_type = Type::make_array_type(byte_type, zero);\n \n       Variable* var = new Variable(array_type, NULL, true, false, false, bloc);\n@@ -738,11 +734,8 @@ Gogo::register_gc_vars(const std::vector<Named_object*>& var_gc,\n                                                           \"__size\", uint_type);\n \n   Location builtin_loc = Linemap::predeclared_location();\n-  size_t count = var_gc.size();\n-  mpz_t lenval;\n-  mpz_init_set_ui(lenval, count);\n-  Expression* length = Expression::make_integer(&lenval, NULL, builtin_loc);\n-  mpz_clear(lenval);\n+  Expression* length = Expression::make_integer_ul(var_gc.size(), NULL,\n+\t\t\t\t\t\t   builtin_loc);\n \n   Array_type* root_array_type = Type::make_array_type(root_type, length);\n   Type* ptdt = Type::make_type_descriptor_ptr_type();\n@@ -783,10 +776,7 @@ Gogo::register_gc_vars(const std::vector<Named_object*>& var_gc,\n   Expression* nil = Expression::make_nil(builtin_loc);\n   null_init->push_back(nil);\n \n-  mpz_t zval;\n-  mpz_init_set_ui(zval, 0UL);\n-  Expression* zero = Expression::make_integer(&zval, NULL, builtin_loc);\n-  mpz_clear(zval);\n+  Expression *zero = Expression::make_integer_ul(0, NULL, builtin_loc);\n   null_init->push_back(zero);\n \n   Expression* null_root_ctor =\n@@ -4029,10 +4019,7 @@ Build_recover_thunks::can_recover_arg(Location location)\n   Expression* fn = Expression::make_func_reference(builtin_return_address,\n \t\t\t\t\t\t   NULL, location);\n \n-  mpz_t zval;\n-  mpz_init_set_ui(zval, 0UL);\n-  Expression* zexpr = Expression::make_integer(&zval, NULL, location);\n-  mpz_clear(zval);\n+  Expression* zexpr = Expression::make_integer_ul(0, NULL, location);\n   Expression_list *args = new Expression_list();\n   args->push_back(zexpr);\n \n@@ -4067,10 +4054,8 @@ Expression*\n Gogo::runtime_error(int code, Location location)\n {\n   Type* int32_type = Type::lookup_integer_type(\"int32\");\n-  mpz_t val;\n-  mpz_init_set_ui(val, code);\n-  Expression* code_expr = Expression::make_integer(&val, int32_type, location);\n-  mpz_clear(val);\n+  Expression* code_expr = Expression::make_integer_ul(code, int32_type,\n+\t\t\t\t\t\t      location);\n   return Runtime::make_call(Runtime::RUNTIME_ERROR, location, 1, code_expr);\n }\n "}, {"sha": "dfb3380c90b037c8516c3ac6eed7a86cf22f6abb", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=3c7652863686230db5cb861ebfcbc600f10156e0", "patch": "@@ -2510,8 +2510,8 @@ Parse::operand(bool may_be_sink, bool* is_parenthesized)\n       return ret;\n \n     case Token::TOKEN_INTEGER:\n-      ret = Expression::make_integer(token->integer_value(), NULL,\n-\t\t\t\t     token->location());\n+      ret = Expression::make_integer_z(token->integer_value(), NULL,\n+\t\t\t\t       token->location());\n       this->advance_token();\n       return ret;\n \n@@ -3129,12 +3129,7 @@ Parse::index(Expression* expr)\n   if (!this->peek_token()->is_op(OPERATOR_COLON))\n     start = this->expression(PRECEDENCE_NORMAL, false, true, NULL, NULL);\n   else\n-    {\n-      mpz_t zero;\n-      mpz_init_set_ui(zero, 0);\n-      start = Expression::make_integer(&zero, NULL, location);\n-      mpz_clear(zero);\n-    }\n+    start = Expression::make_integer_ul(0, NULL, location);\n \n   Expression* end = NULL;\n   if (this->peek_token()->is_op(OPERATOR_COLON))"}, {"sha": "de68f64b59357f2e38f3900f6a94505082c7e9a7", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=3c7652863686230db5cb861ebfcbc600f10156e0", "patch": "@@ -397,12 +397,8 @@ Type*\n Runtime::map_iteration_type()\n {\n   const unsigned long map_iteration_size = 4;\n-\n-  mpz_t ival;\n-  mpz_init_set_ui(ival, map_iteration_size);\n-  Expression* iexpr = Expression::make_integer(&ival, NULL,\n-                                               Linemap::predeclared_location());\n-  mpz_clear(ival);\n-\n+  Expression* iexpr =\n+    Expression::make_integer_ul(map_iteration_size, NULL,\n+\t\t\t\tLinemap::predeclared_location());\n   return Type::make_array_type(runtime_function_type(RFT_POINTER), iexpr);\n }"}, {"sha": "57d7f9da91c381e6608e745122240ad43a5c9112", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 13, "deletions": 42, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=3c7652863686230db5cb861ebfcbc600f10156e0", "patch": "@@ -1838,12 +1838,7 @@ Statement*\n Inc_dec_statement::do_lower(Gogo*, Named_object*, Block*, Statement_inserter*)\n {\n   Location loc = this->location();\n-\n-  mpz_t oval;\n-  mpz_init_set_ui(oval, 1UL);\n-  Expression* oexpr = Expression::make_integer(&oval, this->expr_->type(), loc);\n-  mpz_clear(oval);\n-\n+  Expression* oexpr = Expression::make_integer_ul(1, this->expr_->type(), loc);\n   Operator op = this->is_inc_ ? OPERATOR_PLUSEQ : OPERATOR_MINUSEQ;\n   return Statement::make_assignment_operation(op, this->expr_, oexpr, loc);\n }\n@@ -3441,7 +3436,7 @@ Case_clauses::Case_clause::get_backend(Translate_context* context,\n \t\t  continue;\n \t\t}\n \t      go_assert(nc.type() != NULL);\n-\t      e = Expression::make_integer(&ival, nc.type(), e->location());\n+\t      e = Expression::make_integer_z(&ival, nc.type(), e->location());\n \t      mpz_clear(ival);\n \t    }\n \n@@ -4559,10 +4554,8 @@ Select_clauses::Select_clause::lower(Gogo* gogo, Named_object* function,\n \n   Expression* selref = Expression::make_temporary_reference(sel, loc);\n \n-  mpz_t ival;\n-  mpz_init_set_ui(ival, this->index_);\n-  Expression* index_expr = Expression::make_integer(&ival, NULL, loc);\n-  mpz_clear(ival);\n+  Expression* index_expr = Expression::make_integer_ul(this->index_, NULL,\n+\t\t\t\t\t\t       loc);\n \n   if (this->is_default_)\n     {\n@@ -4907,11 +4900,8 @@ Select_clauses::get_backend(Translate_context* context,\n        ++p, ++i)\n     {\n       int index = p->index();\n-      mpz_t ival;\n-      mpz_init_set_ui(ival, index);\n-      Expression* index_expr = Expression::make_integer(&ival, int32_type,\n-\t\t\t\t\t\t\tlocation);\n-      mpz_clear(ival);\n+      Expression* index_expr = Expression::make_integer_ul(index, int32_type,\n+\t\t\t\t\t\t\t   location);\n       cases[i].push_back(index_expr->get_backend(context));\n \n       Bstatement* s = p->get_statements_backend(context);\n@@ -4993,11 +4983,8 @@ Select_statement::do_lower(Gogo* gogo, Named_object* function,\n \n   go_assert(this->sel_ == NULL);\n \n-  mpz_t ival;\n-  mpz_init_set_ui(ival, this->clauses_->size());\n-  Expression* size_expr = Expression::make_integer(&ival, NULL, loc);\n-  mpz_clear(ival);\n-\n+  Expression* size_expr = Expression::make_integer_ul(this->clauses_->size(),\n+\t\t\t\t\t\t      NULL, loc);\n   Expression* call = Runtime::make_call(Runtime::NEWSELECT, loc, 1, size_expr);\n \n   this->sel_ = Statement::make_temporary(NULL, call, loc);\n@@ -5488,10 +5475,7 @@ For_range_statement::lower_range_array(Gogo* gogo,\n \t\t\t\t\t\t\t    len_call, loc);\n   init->add_statement(len_temp);\n \n-  mpz_t zval;\n-  mpz_init_set_ui(zval, 0UL);\n-  Expression* zexpr = Expression::make_integer(&zval, NULL, loc);\n-  mpz_clear(zval);\n+  Expression* zexpr = Expression::make_integer_ul(0, NULL, loc);\n \n   Temporary_reference_expression* tref =\n     Expression::make_temporary_reference(index_temp, loc);\n@@ -5589,10 +5573,7 @@ For_range_statement::lower_range_slice(Gogo* gogo,\n \t\t\t\t\t\t\t    len_call, loc);\n   init->add_statement(len_temp);\n \n-  mpz_t zval;\n-  mpz_init_set_ui(zval, 0UL);\n-  Expression* zexpr = Expression::make_integer(&zval, NULL, loc);\n-  mpz_clear(zval);\n+  Expression* zexpr = Expression::make_integer_ul(0, NULL, loc);\n \n   Temporary_reference_expression* tref =\n     Expression::make_temporary_reference(index_temp, loc);\n@@ -5681,9 +5662,7 @@ For_range_statement::lower_range_string(Gogo*,\n     Statement::make_temporary(index_temp->type(), NULL, loc);\n   init->add_statement(next_index_temp);\n \n-  mpz_t zval;\n-  mpz_init_set_ui(zval, 0UL);\n-  Expression* zexpr = Expression::make_integer(&zval, NULL, loc);\n+  Expression* zexpr = Expression::make_integer_ul(0, NULL, loc);\n \n   Temporary_reference_expression* ref =\n     Expression::make_temporary_reference(index_temp, loc);\n@@ -5742,8 +5721,7 @@ For_range_statement::lower_range_string(Gogo*,\n   iter_init->add_statement(s);\n \n   ref = Expression::make_temporary_reference(next_index_temp, loc);\n-  zexpr = Expression::make_integer(&zval, NULL, loc);\n-  mpz_clear(zval);\n+  zexpr = Expression::make_integer_ul(0, NULL, loc);\n   Expression* equals = Expression::make_binary(OPERATOR_EQEQ, ref, zexpr, loc);\n \n   Block* then_block = new Block(iter_init, loc);\n@@ -5823,18 +5801,11 @@ For_range_statement::lower_range_map(Gogo*,\n   //   hiter[0] != nil\n \n   ref = Expression::make_temporary_reference(hiter, loc);\n-\n-  mpz_t zval;\n-  mpz_init_set_ui(zval, 0UL);\n-  Expression* zexpr = Expression::make_integer(&zval, NULL, loc);\n-  mpz_clear(zval);\n-\n+  Expression* zexpr = Expression::make_integer_ul(0, NULL, loc);\n   Expression* index = Expression::make_index(ref, zexpr, NULL, NULL, loc);\n-\n   Expression* ne = Expression::make_binary(OPERATOR_NOTEQ, index,\n \t\t\t\t\t   Expression::make_nil(loc),\n \t\t\t\t\t   loc);\n-\n   *pcond = ne;\n \n   // Set *PITER_INIT to"}, {"sha": "ba07461391969980a05dc5b3652de712a749f8b5", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 33, "deletions": 83, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7652863686230db5cb861ebfcbc600f10156e0/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=3c7652863686230db5cb861ebfcbc600f10156e0", "patch": "@@ -1956,9 +1956,8 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n     runtime_type_kind |= RUNTIME_TYPE_KIND_NO_POINTERS;\n   Struct_field_list::const_iterator p = fields->begin();\n   go_assert(p->is_field_name(\"kind\"));\n-  mpz_t iv;\n-  mpz_init_set_ui(iv, runtime_type_kind);\n-  vals->push_back(Expression::make_integer(&iv, p->type(), bloc));\n+  vals->push_back(Expression::make_integer_ul(runtime_type_kind, p->type(),\n+\t\t\t\t\t      bloc));\n \n   ++p;\n   go_assert(p->is_field_name(\"align\"));\n@@ -1982,8 +1981,7 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n     h = name->hash_for_method(gogo);\n   else\n     h = this->hash_for_method(gogo);\n-  mpz_set_ui(iv, h);\n-  vals->push_back(Expression::make_integer(&iv, p->type(), bloc));\n+  vals->push_back(Expression::make_integer_ul(h, p->type(), bloc));\n \n   ++p;\n   go_assert(p->is_field_name(\"hashfn\"));\n@@ -2048,8 +2046,6 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n   ++p;\n   go_assert(p == fields->end());\n \n-  mpz_clear(iv);\n-\n   return Expression::make_struct_composite_literal(td_type, vals, bloc);\n }\n \n@@ -2172,23 +2168,14 @@ Type::gc_symbol_constructor(Gogo* gogo)\n   vals->push_back(Expression::make_type_info(this,\n \t\t\t\t\t     Expression::TYPE_INFO_SIZE));\n \n-  mpz_t off;\n-  mpz_init_set_ui(off, 0UL);\n-  Expression* offset = Expression::make_integer(&off, uintptr_t, bloc);\n-  mpz_clear(off);\n+  Expression* offset = Expression::make_integer_ul(0, uintptr_t, bloc);\n \n   this->do_gc_symbol(gogo, &vals, &offset, 0);\n \n-  mpz_t end;\n-  mpz_init_set_ui(end, GC_END);\n-  vals->push_back(Expression::make_integer(&end, uintptr_t, bloc));\n-  mpz_clear(end);\n-\n-  mpz_t lenval;\n-  mpz_init_set_ui(lenval, vals->size() + 1);\n-  Expression* len = Expression::make_integer(&lenval, NULL, bloc);\n-  mpz_clear(lenval);\n+  vals->push_back(Expression::make_integer_ul(GC_END, uintptr_t, bloc));\n \n+  Expression* len = Expression::make_integer_ul(vals->size() + 1, NULL,\n+\t\t\t\t\t\tbloc);\n   Array_type* gc_symbol_type = Type::make_array_type(uintptr_t, len);\n   return Expression::make_array_composite_literal(gc_symbol_type, vals, bloc);\n }\n@@ -3267,10 +3254,8 @@ String_type::do_gc_symbol(Gogo*, Expression_list** vals,\n {\n   Location bloc = Linemap::predeclared_location();\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n-  mpz_t opval;\n-  mpz_init_set_ui(opval, GC_STRING);\n-  (*vals)->push_back(Expression::make_integer(&opval, uintptr_type, bloc));\n-  mpz_clear(opval);\n+  (*vals)->push_back(Expression::make_integer_ul(GC_STRING, uintptr_type,\n+\t\t\t\t\t\t bloc));\n   (*vals)->push_back(*offset);\n   this->advance_gc_offset(offset);\n }\n@@ -3942,10 +3927,7 @@ Function_type::do_gc_symbol(Gogo*, Expression_list** vals,\n \n   // We use GC_APTR here because we do not currently have a way to describe the\n   // the type of the possible function closure.  FIXME.\n-  mpz_t opval;\n-  mpz_init_set_ui(opval, GC_APTR);\n-  (*vals)->push_back(Expression::make_integer(&opval, uintptr_type, bloc));\n-  mpz_clear(opval);\n+  (*vals)->push_back(Expression::make_integer_ul(GC_APTR, uintptr_type, bloc));\n   (*vals)->push_back(*offset);\n   this->advance_gc_offset(offset);\n }\n@@ -4361,10 +4343,8 @@ Pointer_type::do_gc_symbol(Gogo*, Expression_list** vals,\n   Location loc = Linemap::predeclared_location();\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n-  mpz_t opval;\n-  mpz_init_set_ui(opval, this->to_type_->has_pointer() ? GC_PTR : GC_APTR);\n-  (*vals)->push_back(Expression::make_integer(&opval, uintptr_type, loc));\n-  mpz_clear(opval);\n+  unsigned long opval = this->to_type_->has_pointer() ? GC_PTR : GC_APTR;\n+  (*vals)->push_back(Expression::make_integer_ul(opval, uintptr_type, loc));\n   (*vals)->push_back(*offset);\n \n   if (this->to_type_->has_pointer())\n@@ -5297,10 +5277,7 @@ Struct_type::write_hash_function(Gogo* gogo, Named_type*,\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n   // Get a 0.\n-  mpz_t ival;\n-  mpz_init_set_ui(ival, 0);\n-  Expression* zero = Expression::make_integer(&ival, uintptr_type, bloc);\n-  mpz_clear(ival);\n+  Expression* zero = Expression::make_integer_ul(0, uintptr_type, bloc);\n \n   // Make a temporary to hold the return value, initialized to 0.\n   Temporary_statement* retval = Statement::make_temporary(uintptr_type, zero,\n@@ -5329,11 +5306,8 @@ Struct_type::write_hash_function(Gogo* gogo, Named_type*,\n       else\n \t{\n \t  // Multiply retval by 33.\n-\t  mpz_init_set_ui(ival, 33);\n-\t  Expression* i33 = Expression::make_integer(&ival, uintptr_type,\n-\t\t\t\t\t\t     bloc);\n-\t  mpz_clear(ival);\n-\n+\t  Expression* i33 = Expression::make_integer_ul(33, uintptr_type,\n+\t\t\t\t\t\t\tbloc);\n \t  ref = Expression::make_temporary_reference(retval, bloc);\n \t  Statement* s = Statement::make_assignment_operation(OPERATOR_MULTEQ,\n \t\t\t\t\t\t\t      ref, i33, bloc);\n@@ -5872,10 +5846,7 @@ Array_type::write_hash_function(Gogo* gogo, Named_type* name,\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n   // Get a 0.\n-  mpz_t ival;\n-  mpz_init_set_ui(ival, 0);\n-  Expression* zero = Expression::make_integer(&ival, uintptr_type, bloc);\n-  mpz_clear(ival);\n+  Expression* zero = Expression::make_integer_ul(0, uintptr_type, bloc);\n \n   // Make a temporary to hold the return value, initialized to 0.\n   Temporary_statement* retval = Statement::make_temporary(uintptr_type, zero,\n@@ -5909,9 +5880,7 @@ Array_type::write_hash_function(Gogo* gogo, Named_type* name,\n   gogo->start_block(bloc);\n \n   // Multiply retval by 33.\n-  mpz_init_set_ui(ival, 33);\n-  Expression* i33 = Expression::make_integer(&ival, uintptr_type, bloc);\n-  mpz_clear(ival);\n+  Expression* i33 = Expression::make_integer_ul(33, uintptr_type, bloc);\n \n   ref = Expression::make_temporary_reference(retval, bloc);\n   Statement* s = Statement::make_assignment_operation(OPERATOR_MULTEQ, ref,\n@@ -6431,10 +6400,8 @@ Array_type::slice_gc_symbol(Gogo* gogo, Expression_list** vals,\n   size_t element_size = gogo->backend()->type_size(ebtype);\n \n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n-  mpz_t opval;\n-  mpz_init_set_ui(opval, element_size == 0 ? GC_APTR : GC_SLICE);\n-  (*vals)->push_back(Expression::make_integer(&opval, uintptr_type, bloc));\n-  mpz_clear(opval);\n+  unsigned long opval = element_size == 0 ? GC_APTR : GC_SLICE;\n+  (*vals)->push_back(Expression::make_integer_ul(opval, uintptr_type, bloc));\n   (*vals)->push_back(*offset);\n \n   if (element_size != 0)\n@@ -6472,12 +6439,10 @@ Array_type::array_gc_symbol(Gogo* gogo, Expression_list** vals,\n     {\n       Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n-      mpz_t op;\n       if (stack_size < GC_STACK_CAPACITY)\n   \t{\n-  \t  mpz_init_set_ui(op, GC_ARRAY_START);\n-  \t  (*vals)->push_back(Expression::make_integer(&op, uintptr_type, bloc));\n-  \t  mpz_clear(op);\n+\t  (*vals)->push_back(Expression::make_integer_ul(GC_ARRAY_START,\n+\t\t\t\t\t\t\t uintptr_type, bloc));\n   \t  (*vals)->push_back(*offset);\n \t  Expression* uintptr_len =\n \t    Expression::make_cast(uintptr_type, this->length_, bloc);\n@@ -6488,28 +6453,24 @@ Array_type::array_gc_symbol(Gogo* gogo, Expression_list** vals,\n \t\t\t\t       Expression::TYPE_INFO_SIZE);\n   \t  (*vals)->push_back(width);\n \n-  \t  mpz_t zero;\n-  \t  mpz_init_set_ui(zero, 0UL);\n-  \t  Expression* offset2 =\n-  \t    Expression::make_integer(&zero, uintptr_type, bloc);\n-  \t  mpz_clear(zero);\n+\t  Expression* offset2 = Expression::make_integer_ul(0, uintptr_type,\n+\t\t\t\t\t\t\t    bloc);\n \n \t  Type::gc_symbol(gogo, element_type, vals, &offset2, stack_size + 1);\n-  \t  mpz_init_set_ui(op, GC_ARRAY_NEXT);\n-  \t  (*vals)->push_back(Expression::make_integer(&op, uintptr_type, bloc));\n+\t  (*vals)->push_back(Expression::make_integer_ul(GC_ARRAY_NEXT,\n+\t\t\t\t\t\t\t uintptr_type, bloc));\n   \t}\n       else\n   \t{\n-  \t  mpz_init_set_ui(op, GC_REGION);\n-  \t  (*vals)->push_back(Expression::make_integer(&op, uintptr_type, bloc));\n+\t  (*vals)->push_back(Expression::make_integer_ul(GC_REGION,\n+\t\t\t\t\t\t\t uintptr_type, bloc));\n \t  (*vals)->push_back(*offset);\n \n \t  Expression* width =\n \t    Expression::make_type_info(this, Expression::TYPE_INFO_SIZE);\n   \t  (*vals)->push_back(width);\n \t  (*vals)->push_back(Expression::make_gc_symbol(this));\n   \t}\n-      mpz_clear(op);\n       this->advance_gc_offset(offset);\n     }\n }\n@@ -6833,10 +6794,7 @@ Map_type::do_gc_symbol(Gogo*, Expression_list** vals,\n   Location bloc = Linemap::predeclared_location();\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n-  mpz_t opval;\n-  mpz_init_set_ui(opval, GC_APTR);\n-  (*vals)->push_back(Expression::make_integer(&opval, uintptr_type, bloc));\n-  mpz_clear(opval);\n+  (*vals)->push_back(Expression::make_integer_ul(GC_APTR, uintptr_type, bloc));\n   (*vals)->push_back(*offset);\n   this->advance_gc_offset(offset);\n }\n@@ -6989,10 +6947,7 @@ Channel_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n     val |= 1;\n   if (this->may_send_)\n     val |= 2;\n-  mpz_t iv;\n-  mpz_init_set_ui(iv, val);\n-  vals->push_back(Expression::make_integer(&iv, p->type(), bloc));\n-  mpz_clear(iv);\n+  vals->push_back(Expression::make_integer_ul(val, p->type(), bloc));\n \n   ++p;\n   go_assert(p == fields->end());\n@@ -7023,10 +6978,8 @@ Channel_type::do_gc_symbol(Gogo*, Expression_list** vals,\n   Location bloc = Linemap::predeclared_location();\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n-  mpz_t opval;\n-  mpz_init_set_ui(opval, GC_CHAN_PTR);\n-  (*vals)->push_back(Expression::make_integer(&opval, uintptr_type, bloc));\n-  mpz_clear(opval);\n+  (*vals)->push_back(Expression::make_integer_ul(GC_CHAN_PTR, uintptr_type,\n+\t\t\t\t\t\t bloc));\n   (*vals)->push_back(*offset);\n  \n   Type* unsafeptr_type = Type::make_pointer_type(Type::make_void_type());\n@@ -7935,11 +7888,8 @@ Interface_type::do_gc_symbol(Gogo*, Expression_list** vals,\n   Location bloc = Linemap::predeclared_location();\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n-  mpz_t opval;\n-  mpz_init_set_ui(opval, this->is_empty() ? GC_EFACE : GC_IFACE);\n-  (*vals)->push_back(Expression::make_integer(&opval, uintptr_type,\n-\t\t\t\t\t      bloc));\n-  mpz_clear(opval);\n+  unsigned long opval = this->is_empty() ? GC_EFACE : GC_IFACE;\n+  (*vals)->push_back(Expression::make_integer_ul(opval, uintptr_type, bloc));\n   (*vals)->push_back(*offset);\n   this->advance_gc_offset(offset);\n }"}]}