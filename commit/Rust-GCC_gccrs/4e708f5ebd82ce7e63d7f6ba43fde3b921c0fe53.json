{"sha": "4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3MDhmNWViZDgyY2U3ZTYzZDdmNmJhNDNmZGUzYjkyMWMwZmU1Mw==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-08-07T07:11:14Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-08-07T07:11:14Z"}, "message": "rs6000: support vector int type rotatert\n\ngcc/ChangeLog\n\n2019-08-07  Kewen Lin  <linkw@gcc.gnu.org>\n\n    * config/rs6000/vector.md (vrotr<mode>3): New define_expand.\n\ngcc/testsuite/ChangeLog\n\n2019-08-07  Kewen Lin  <linkw@gcc.gnu.org>\n\n    * gcc.target/powerpc/vec_rotate-1.c: New test.\n    * gcc.target/powerpc/vec_rotate-2.c: New test.\n    * gcc.target/powerpc/vec_rotate-3.c: New test.\n    * gcc.target/powerpc/vec_rotate-4.c: New test.\n\nFrom-SVN: r274158", "tree": {"sha": "c8475ab1dab59c37a113f6b6f90c5a3edc834eb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8475ab1dab59c37a113f6b6f90c5a3edc834eb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b69e0fabc2f58fe29dea74ff87f85a9b9a51bc02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69e0fabc2f58fe29dea74ff87f85a9b9a51bc02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b69e0fabc2f58fe29dea74ff87f85a9b9a51bc02"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "b85a1dba1052b89e54b1073fbfd91d9f6aee728d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "patch": "@@ -1,3 +1,7 @@\n+2019-08-07  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* config/rs6000/vector.md (vrotr<mode>3): New define_expand.\n+\n 2019-08-07  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* gcc/config/riscv/multilib-generator: (canonical_order): Add 'g'."}, {"sha": "886cbad1655f62c6680bf65ca26968c042b878cd", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "patch": "@@ -1260,6 +1260,19 @@\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n+;; Expanders for rotatert to make use of vrotl\n+(define_expand \"vrotr<mode>3\"\n+  [(set (match_operand:VEC_I 0 \"vint_operand\")\n+\t(rotatert:VEC_I (match_operand:VEC_I 1 \"vint_operand\")\n+\t\t(match_operand:VEC_I 2 \"vint_operand\")))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+{\n+  rtx rot_count = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_neg<mode>2 (rot_count, operands[2]));\n+  emit_insn (gen_vrotl<mode>3 (operands[0], operands[1], rot_count));\n+  DONE;\n+})\n+\n ;; Expanders for arithmetic shift left on each vector element\n (define_expand \"vashl<mode>3\"\n   [(set (match_operand:VEC_I 0 \"vint_operand\")"}, {"sha": "a372d7fbcf17caf4fb9727b98df103710bb8a06a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "patch": "@@ -1,3 +1,10 @@\n+2019-08-07  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec_rotate-1.c: New test.\n+\t* gcc.target/powerpc/vec_rotate-2.c: New test.\n+\t* gcc.target/powerpc/vec_rotate-3.c: New test.\n+\t* gcc.target/powerpc/vec_rotate-4.c: New test.\n+\n 2019-08-07  Alexandre Oliva <oliva@adacore.com>\n \n \t* gcc.target/i386/math_m_pi.h: New."}, {"sha": "f035a578292bc8ba0d75f988fe3af89a810f99c8", "filename": "gcc/testsuite/gcc.target/powerpc/vec_rotate-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-1.c?ref=4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options \"-O3\" } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+/* Check vectorizer can exploit vector rotation instructions on Power, mainly\n+   for the case rotation count is const number.\n+\n+   Check for instructions vrlb/vrlh/vrlw only available if altivec supported. */\n+\n+#define N 256\n+unsigned int suw[N], ruw[N];\n+unsigned short suh[N], ruh[N];\n+unsigned char sub[N], rub[N];\n+\n+void\n+testUW ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    ruw[i] = (suw[i] >> 8) | (suw[i] << (sizeof (suw[0]) * 8 - 8));\n+}\n+\n+void\n+testUH ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    ruh[i] = (unsigned short) (suh[i] >> 9)\n+\t     | (unsigned short) (suh[i] << (sizeof (suh[0]) * 8 - 9));\n+}\n+\n+void\n+testUB ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    rub[i] = (unsigned char) (sub[i] >> 5)\n+\t     | (unsigned char) (sub[i] << (sizeof (sub[0]) * 8 - 5));\n+}\n+\n+/* { dg-final { scan-assembler {\\mvrlw\\M} } } */\n+/* { dg-final { scan-assembler {\\mvrlh\\M} } } */\n+/* { dg-final { scan-assembler {\\mvrlb\\M} } } */"}, {"sha": "23598958ef2a25f6f9fad66ba28d5582031b9d2c", "filename": "gcc/testsuite/gcc.target/powerpc/vec_rotate-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-2.c?ref=4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O3 -mdejagnu-cpu=power8\" } */\n+\n+/* Check vectorizer can exploit vector rotation instructions on Power8, mainly\n+   for the case rotation count is const number.\n+\n+   Check for vrld which is available on Power8 and above.  */\n+\n+#define N 256\n+unsigned long long sud[N], rud[N];\n+\n+void\n+testULL ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    rud[i] = (sud[i] >> 8) | (sud[i] << (sizeof (sud[0]) * 8 - 8));\n+}\n+\n+/* { dg-final { scan-assembler {\\mvrld\\M} } } */"}, {"sha": "5e90ae6fd632262af2abe861330d68da5cd55d82", "filename": "gcc/testsuite/gcc.target/powerpc/vec_rotate-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-3.c?ref=4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options \"-O3\" } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+/* Check vectorizer can exploit vector rotation instructions on Power, mainly\n+   for the case rotation count isn't const number.\n+\n+   Check for instructions vrlb/vrlh/vrlw only available if altivec supported. */\n+\n+#define N 256\n+unsigned int suw[N], ruw[N];\n+unsigned short suh[N], ruh[N];\n+unsigned char sub[N], rub[N];\n+extern unsigned char rot_cnt;\n+\n+void\n+testUW ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    ruw[i] = (suw[i] >> rot_cnt) | (suw[i] << (sizeof (suw[0]) * 8 - rot_cnt));\n+}\n+\n+void\n+testUH ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    ruh[i] = (unsigned short) (suh[i] >> rot_cnt)\n+\t     | (unsigned short) (suh[i] << (sizeof (suh[0]) * 8 - rot_cnt));\n+}\n+\n+void\n+testUB ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    rub[i] = (unsigned char) (sub[i] >> rot_cnt)\n+\t     | (unsigned char) (sub[i] << (sizeof (sub[0]) * 8 - rot_cnt));\n+}\n+\n+/* { dg-final { scan-assembler {\\mvrlw\\M} } } */\n+/* { dg-final { scan-assembler {\\mvrlh\\M} } } */\n+/* { dg-final { scan-assembler {\\mvrlb\\M} } } */"}, {"sha": "75f08f07ba7fb0d305ae146cee32f6be91d1e89e", "filename": "gcc/testsuite/gcc.target/powerpc/vec_rotate-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_rotate-4.c?ref=4e708f5ebd82ce7e63d7f6ba43fde3b921c0fe53", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options \"-O3 -mdejagnu-cpu=power8\" } */\n+\n+/* Check vectorizer can exploit vector rotation instructions on Power8, mainly\n+   for the case rotation count isn't const number.\n+\n+   Check for vrld which is available on Power8 and above.  */\n+\n+#define N 256\n+unsigned long long sud[N], rud[N];\n+extern unsigned char rot_cnt;\n+\n+void\n+testULL ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    rud[i] = (sud[i] >> rot_cnt) | (sud[i] << (sizeof (sud[0]) * 8 - rot_cnt));\n+}\n+\n+/* { dg-final { scan-assembler {\\mvrld\\M} } } */"}]}