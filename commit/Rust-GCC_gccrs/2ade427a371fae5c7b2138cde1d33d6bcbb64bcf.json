{"sha": "2ade427a371fae5c7b2138cde1d33d6bcbb64bcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFkZTQyN2EzNzFmYWU1YzdiMjEzOGNkZTFkMzNkNmJjYmI2NGJjZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-12-10T13:46:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-12-10T13:46:38Z"}, "message": "gigi.h (create_var_decl): Adjust comment.\n\n\t* gcc-interface/gigi.h (create_var_decl): Adjust comment.\n\t(create_subprog_decl): Likewise.\n\t* gcc-interface/utils.c (create_var_decl): Likewise.\n\t(create_subprog_decl): Likewise.\n\nFrom-SVN: r231511", "tree": {"sha": "1534cb93d421f86108a0803fe2b6d764c1f8c8e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1534cb93d421f86108a0803fe2b6d764c1f8c8e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf/comments", "author": null, "committer": null, "parents": [{"sha": "daf9817c1c929cdc23a520c5d6d599f52a5ed99c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf9817c1c929cdc23a520c5d6d599f52a5ed99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daf9817c1c929cdc23a520c5d6d599f52a5ed99c"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "955f036ce0d3d1fd1f19ad0633952b87291d46b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2ade427a371fae5c7b2138cde1d33d6bcbb64bcf", "patch": "@@ -1,3 +1,10 @@\n+2015-12-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (create_var_decl): Adjust comment.\n+\t(create_subprog_decl): Likewise.\n+\t* gcc-interface/utils.c (create_var_decl): Likewise.\n+\t(create_subprog_decl): Likewise.\n+\n 2015-12-10  Tom de Vries  <tom@codesourcery.com>\n \n \tPR ada/65102"}, {"sha": "cef9341ccb6f973cc4aad744a342cc335aa59afa", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=2ade427a371fae5c7b2138cde1d33d6bcbb64bcf", "patch": "@@ -678,11 +678,11 @@ extern tree create_type_decl (tree name, tree type, bool artificial_p,\n    CONST_FLAG is true if this variable is constant, in which case we might\n    return a CONST_DECL node unless CONST_DECL_ALLOWED_P is false.\n \n-   PUBLIC_FLAG is true if this definition is to be made visible outside of\n-   the current compilation unit. This flag should be set when processing the\n-   variable definitions in a package specification.\n+   PUBLIC_FLAG is true if this is for a reference to a public entity or for a\n+   definition to be made visible outside of the current compilation unit, for\n+   instance variable definitions in a package specification.\n \n-   EXTERN_FLAG is nonzero when processing an external variable declaration (as\n+   EXTERN_FLAG is true when processing an external variable declaration (as\n    opposed to a definition: no storage is to be allocated for the variable).\n \n    STATIC_FLAG is only relevant when not at top level and indicates whether\n@@ -694,6 +694,8 @@ extern tree create_type_decl (tree name, tree type, bool artificial_p,\n \n    DEBUG_INFO_P is true if we need to write debug information for it.\n \n+   ATTR_LIST is the list of attributes to be attached to the variable.\n+\n    GNAT_NODE is used for the position of the decl.  */\n extern tree create_var_decl (tree name, tree asm_name, tree type, tree init,\n \t\t\t     bool const_flag, bool public_flag,\n@@ -728,13 +730,17 @@ extern tree create_label_decl (tree name, Node_Id gnat_node);\n    the list of its parameters (a list of PARM_DECL nodes chained through the\n    DECL_CHAIN field).\n \n-   INLINE_STATUS, CONST_FLAG, PUBLIC_FLAG, EXTERN_FLAG, VOLATILE_FLAG as well\n-   as ATTR_LIST are used to set the appropriate fields in the FUNCTION_DECL.\n+   INLINE_STATUS describes the inline flags to be set on the FUNCTION_DECL.\n+\n+   CONST_FLAG, PUBLIC_FLAG, EXTERN_FLAG, VOLATILE_FLAG are used to set the\n+   appropriate flags on the FUNCTION_DECL.\n \n    ARTIFICIAL_P is true if the subprogram was generated by the compiler.\n \n    DEBUG_INFO_P is true if we need to write debug information for it.\n \n+   ATTR_LIST is the list of attributes to be attached to the subprogram.\n+\n    GNAT_NODE is used for the position of the decl.  */\n extern tree create_subprog_decl (tree name, tree asm_name, tree type,\n \t\t\t\t tree param_decl_list,"}, {"sha": "23015f34733cb179488223ba8ccf0441429703a6", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ade427a371fae5c7b2138cde1d33d6bcbb64bcf/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=2ade427a371fae5c7b2138cde1d33d6bcbb64bcf", "patch": "@@ -2344,6 +2344,8 @@ create_type_decl (tree name, tree type, bool artificial_p, bool debug_info_p,\n \n    DEBUG_INFO_P is true if we need to write debug information for it.\n \n+   ATTR_LIST is the list of attributes to be attached to the variable.\n+\n    GNAT_NODE is used for the position of the decl.  */\n \n tree\n@@ -3048,13 +3050,17 @@ create_label_decl (tree name, Node_Id gnat_node)\n    the list of its parameters (a list of PARM_DECL nodes chained through the\n    DECL_CHAIN field).\n \n-   INLINE_STATUS, CONST_FLAG, PUBLIC_FLAG, EXTERN_FLAG, VOLATILE_FLAG as well\n-   as ATTR_LIST are used to set the appropriate fields in the FUNCTION_DECL.\n+   INLINE_STATUS describes the inline flags to be set on the FUNCTION_DECL.\n+\n+   CONST_FLAG, PUBLIC_FLAG, EXTERN_FLAG, VOLATILE_FLAG are used to set the\n+   appropriate flags on the FUNCTION_DECL.\n \n    ARTIFICIAL_P is true if the subprogram was generated by the compiler.\n \n    DEBUG_INFO_P is true if we need to write debug information for it.\n \n+   ATTR_LIST is the list of attributes to be attached to the subprogram.\n+\n    GNAT_NODE is used for the position of the decl.  */\n \n tree"}]}