{"sha": "43b68ce57af3cd273a2a5842c69da6d60a34e3d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiNjhjZTU3YWYzY2QyNzNhMmE1ODQyYzY5ZGE2ZDYwYTM0ZTNkMA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2003-07-01T19:07:40Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-07-01T19:07:40Z"}, "message": "rs6000.md (ctr{s,d}i_internal?): Add earlyclobber for MEM case.\n\n        * config/rs6000/rs6000.md (ctr{s,d}i_internal?): Add earlyclobber\n        for MEM case.\n\nCo-Authored-By: J\"orn Rennecke <joern.rennecke@superh.com>\n\nFrom-SVN: r68788", "tree": {"sha": "d0f84b66931a2b8e0ad2e573b5cf7a81c764b28b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0f84b66931a2b8e0ad2e573b5cf7a81c764b28b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b68ce57af3cd273a2a5842c69da6d60a34e3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b68ce57af3cd273a2a5842c69da6d60a34e3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b68ce57af3cd273a2a5842c69da6d60a34e3d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b68ce57af3cd273a2a5842c69da6d60a34e3d0/comments", "author": null, "committer": null, "parents": [{"sha": "33e9d2aa3de5ab3e8267ffed4e1fd927de469552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e9d2aa3de5ab3e8267ffed4e1fd927de469552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e9d2aa3de5ab3e8267ffed4e1fd927de469552"}], "stats": {"total": 126, "additions": 66, "deletions": 60}, "files": [{"sha": "ecba222dc4c99c8ab1dabfb26e4d10ce6a75a4ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b68ce57af3cd273a2a5842c69da6d60a34e3d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b68ce57af3cd273a2a5842c69da6d60a34e3d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43b68ce57af3cd273a2a5842c69da6d60a34e3d0", "patch": "@@ -1,3 +1,9 @@\n+2003-07-01  David Edelsohn  <edelsohn@gnu.org>\n+\t    J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* config/rs6000/rs6000.md (ctr{s,d}i_internal?): Add earlyclobber\n+\tfor MEM case.\n+\n 2003-07-01  Devang Patel  <dpatel@apple.com>\n \n \t* dbxout.c (DBXOUT_DECR_NESTING): Emit pending bincls, if required."}, {"sha": "cb50e7e8ab865a3ac4c8641728f0ce7130969c9f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b68ce57af3cd273a2a5842c69da6d60a34e3d0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b68ce57af3cd273a2a5842c69da6d60a34e3d0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=43b68ce57af3cd273a2a5842c69da6d60a34e3d0", "patch": "@@ -13989,15 +13989,15 @@\n \n (define_insn \"*ctrsi_internal1\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m,*q*c*l\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n   \"! TARGET_POWERPC64\"\n   \"*\n {\n@@ -14009,19 +14009,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrsi_internal2\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m,*q*c*l\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n   \"! TARGET_POWERPC64\"\n   \"*\n {\n@@ -14033,19 +14033,19 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrdi_internal1\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m,*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -14057,19 +14057,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrdi_internal2\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m,*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -14081,21 +14081,21 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n ;; Similar, but we can use GE since we have a REG_NONNEG.\n \n (define_insn \"*ctrsi_internal3\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m,*q*c*l\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n-   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n   \"! TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -14107,19 +14107,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrsi_internal4\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m,*q*c*l\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n-   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n   \"! TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -14131,19 +14131,19 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrdi_internal3\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m,*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n   \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -14155,19 +14155,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrdi_internal4\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m,*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n   \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -14179,21 +14179,21 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n ;; Similar but use EQ\n \n (define_insn \"*ctrsi_internal5\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m,*q*c*l\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n   \"! TARGET_POWERPC64\"\n   \"*\n {\n@@ -14205,19 +14205,19 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrsi_internal6\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:SI 2 \"register_operand\" \"=1,*r,m,*q*c*l\")\n \t(plus:SI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n   \"! TARGET_POWERPC64\"\n   \"*\n {\n@@ -14229,19 +14229,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrdi_internal5\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m,*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -14253,19 +14253,19 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n (define_insn \"*ctrdi_internal6\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r,*r\")\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m,*c*l\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -14277,7 +14277,7 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4,12,16\")])\n+   (set_attr \"length\" \"4,12,16,16\")])\n \n ;; Now the splitters if we could not allocate the CTR register\n "}]}