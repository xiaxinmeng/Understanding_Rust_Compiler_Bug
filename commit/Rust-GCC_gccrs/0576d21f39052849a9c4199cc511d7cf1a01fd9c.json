{"sha": "0576d21f39052849a9c4199cc511d7cf1a01fd9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU3NmQyMWYzOTA1Mjg0OWE5YzQxOTljYzUxMWQ3Y2YxYTAxZmQ5Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-22T23:59:18Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-22T23:59:18Z"}, "message": "common.opt (exit_after_options, [...]): New Variable entries.\n\n\t* common.opt (exit_after_options, write_symbols, debug_info_level,\n\tuse_gnu_debug_info_extensions): New Variable entries.\n\t(fprofile-dir=): Use Var.\n\t* flag-types.h (enum debug_info_level): Rename to enum\n\tdebug_info_levels.\n\t* flags.h (write_symbols, debug_info_level,\n\tuse_gnu_debug_info_extensions): Remove declarations.\n\t* opts.c (exit_after_options, write_symbols, debug_info_level):\n\tRemove.\n\t(set_struct_debug_option): Make static variables const.\n\t(use_gnu_debug_info_extensions): Remove.\n\t(set_debug_level, print_filtered_help, print_specific_help,\n\tfast_math_flags_set_p): Take gcc_options parameters and use them\n\tin place of global variables.\n\t(print_filtered_help): Make new_help non-static.\n\t(print_specific_help): Update call to print_filtered_help.\n\t(common_handle_option): Update calls to print_specific_help.  Use\n\tgcc_options structure for more settings.  Make --help table\n\tconst.  Don't handle OPT_fprofile_dir_ here.  Update calls to\n\tset_debug_level.\n\t* toplev.c (profile_data_prefix): Remove.\n\t* toplev.h (profile_data_prefix, exit_after_options): Remove\n\tdeclarations.\n\t(fast_math_flags_set_p): Update prototype.\n\t* cppbuiltin.c (define_builtin_macros_for_compilation_flags):\n\tUpdate call to fast_math_flags_set_p.\n\nobjc:\n\t* objc-act.c (write_symbols): Don't declare here.\n\nFrom-SVN: r167064", "tree": {"sha": "2bb8959996eb7c19089d471cfbfcd33670a0625f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bb8959996eb7c19089d471cfbfcd33670a0625f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0576d21f39052849a9c4199cc511d7cf1a01fd9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0576d21f39052849a9c4199cc511d7cf1a01fd9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0576d21f39052849a9c4199cc511d7cf1a01fd9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0576d21f39052849a9c4199cc511d7cf1a01fd9c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d17ae760f1060e04b211b04d4c952662fe121b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d17ae760f1060e04b211b04d4c952662fe121b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d17ae760f1060e04b211b04d4c952662fe121b"}], "stats": {"total": 220, "additions": 120, "deletions": 100}, "files": [{"sha": "0d5ee71f11510fc28f1c6ad9020af198ec471652", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -1,3 +1,32 @@\n+2010-11-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (exit_after_options, write_symbols, debug_info_level,\n+\tuse_gnu_debug_info_extensions): New Variable entries.\n+\t(fprofile-dir=): Use Var.\n+\t* flag-types.h (enum debug_info_level): Rename to enum\n+\tdebug_info_levels.\n+\t* flags.h (write_symbols, debug_info_level,\n+\tuse_gnu_debug_info_extensions): Remove declarations.\n+\t* opts.c (exit_after_options, write_symbols, debug_info_level):\n+\tRemove.\n+\t(set_struct_debug_option): Make static variables const.\n+\t(use_gnu_debug_info_extensions): Remove.\n+\t(set_debug_level, print_filtered_help, print_specific_help,\n+\tfast_math_flags_set_p): Take gcc_options parameters and use them\n+\tin place of global variables.\n+\t(print_filtered_help): Make new_help non-static.\n+\t(print_specific_help): Update call to print_filtered_help.\n+\t(common_handle_option): Update calls to print_specific_help.  Use\n+\tgcc_options structure for more settings.  Make --help table\n+\tconst.  Don't handle OPT_fprofile_dir_ here.  Update calls to\n+\tset_debug_level.\n+\t* toplev.c (profile_data_prefix): Remove.\n+\t* toplev.h (profile_data_prefix, exit_after_options): Remove\n+\tdeclarations.\n+\t(fast_math_flags_set_p): Update prototype.\n+\t* cppbuiltin.c (define_builtin_macros_for_compilation_flags):\n+\tUpdate call to fast_math_flags_set_p.\n+\n 2010-11-22  Richard Henderson  <rth@redhat.com>\n \n \tPR target/46434"}, {"sha": "255e6ab979d5895763dd47237d0a6f40c9d046b7", "filename": "gcc/common.opt", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -126,6 +126,27 @@ enum debug_struct_file debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS] = { DINFO_ST\n Variable\n enum debug_struct_file debug_struct_generic[DINFO_USAGE_NUM_ENUMS] = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY }\n \n+; True if we should exit after parsing options.\n+Variable\n+bool exit_after_options\n+\n+; Type(s) of debugging information we are producing (if any).  See\n+; flag-types.h for the definitions of the different possible types of\n+; debugging information.\n+Variable\n+enum debug_info_type write_symbols = NO_DEBUG\n+\n+; Level of debugging information we are producing.  See flag-types.h\n+; for the definitions of the different possible levels.\n+Variable\n+enum debug_info_levels debug_info_level = DINFO_LEVEL_NONE\n+\n+; Nonzero means use GNU-only extensions in the generated symbolic\n+; debugging information.  Currently, this only has an effect when\n+; write_symbols is set to DBX_DEBUG, XCOFF_DEBUG, or DWARF_DEBUG.\n+Variable\n+bool use_gnu_debug_info_extensions\n+\n ###\n Driver\n \n@@ -1351,7 +1372,7 @@ Common Report Var(profile_arc_flag)\n Insert arc-based program profiling code\n \n fprofile-dir=\n-Common Joined RejectNegative\n+Common Joined RejectNegative Var(profile_data_prefix)\n Set the top-level directory for storing the profile data.\n The default is 'pwd'.\n "}, {"sha": "ffee4c0299494541f3c11f65f19efcba42123e66", "filename": "gcc/cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fcppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fcppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.c?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -90,7 +90,7 @@ define_builtin_macros_for_compilation_flags (cpp_reader *pfile)\n   if (optimize)\n     cpp_define (pfile, \"__OPTIMIZE__\");\n \n-  if (fast_math_flags_set_p ())\n+  if (fast_math_flags_set_p (&global_options))\n     cpp_define (pfile, \"__FAST_MATH__\");\n   if (flag_signaling_nans)\n     cpp_define (pfile, \"__SUPPORT_SNAN__\");"}, {"sha": "60463555bfd7cd3935fafbf86c9eb079d5620b80", "filename": "gcc/flag-types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -34,7 +34,7 @@ enum debug_info_type\n                           and DWARF v2 debug info (using dwarf2out.c).  */\n };\n \n-enum debug_info_level\n+enum debug_info_levels\n {\n   DINFO_LEVEL_NONE,\t/* Write no debugging info.  */\n   DINFO_LEVEL_TERSE,\t/* Write minimal info to support tracebacks only.  */"}, {"sha": "cbee498e00a5c08af59a1b8fb63b7129113b8e0d", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -28,23 +28,13 @@ along with GCC; see the file COPYING3.  If not see\n \n #if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\n \n-/* Specify which kind of debugging info to generate.  */\n-extern enum debug_info_type write_symbols;\n-\n /* Names of debug_info_type, for error messages.  */\n extern const char *const debug_type_names[];\n \n-/* Specify how much debugging info to generate.  */\n-extern enum debug_info_level debug_info_level;\n-\n extern int base_of_path (const char *path, const char **base_out);\n extern void set_struct_debug_option (struct gcc_options *opts,\n \t\t\t\t     const char *value);\n \n-/* Nonzero means use GNU-only extensions in the generated symbolic\n-   debugging information.  */\n-extern bool use_gnu_debug_info_extensions;\n-\n /* Run the second compilation of -fcompare-debug.  Not defined using\n    Var in common.opt because this is used in Ada code and so must be\n    an actual variable not a macro.  */"}, {"sha": "3f953eacd0d950351de8181bedd1f39fdf805c5e", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -1,3 +1,7 @@\n+2010-11-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* objc-act.c (write_symbols): Don't declare here.\n+\n 2010-11-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/41108"}, {"sha": "45c94410d5d48384db21b17155ce786ba9155bb5", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -405,10 +405,6 @@ static int objc_collecting_ivars = 0;\n \n static char *errbuf;\t/* Buffer for error diagnostics */\n \n-/* Data imported from tree.c.  */\n-\n-extern enum debug_info_type write_symbols;\n-\n \f\n static int flag_typed_selectors;\n "}, {"sha": "9e9572dad831645159da149218d3641c747b51f2", "filename": "gcc/opts.c", "status": "modified", "additions": 62, "deletions": 76, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -41,18 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"lto-streamer.h\"\n \n-/* True if we should exit after parsing options.  */\n-bool exit_after_options;\n-\n-/* Type(s) of debugging information we are producing (if any).  See\n-   flags.h for the definitions of the different possible types of\n-   debugging information.  */\n-enum debug_info_type write_symbols = NO_DEBUG;\n-\n-/* Level of debugging information we are producing.  See flags.h for\n-   the definitions of the different possible levels.  */\n-enum debug_info_level debug_info_level = DINFO_LEVEL_NONE;\n-\n /* Run the second compilation of -fcompare-debug.  Not defined using\n    Var in common.opt because this is used in Ada code and so must be\n    an actual variable not a macro.  */\n@@ -69,10 +57,10 @@ void\n set_struct_debug_option (struct gcc_options *opts, const char *spec)\n {\n   /* various labels for comparison */\n-  static char dfn_lbl[] = \"dfn:\", dir_lbl[] = \"dir:\", ind_lbl[] = \"ind:\";\n-  static char ord_lbl[] = \"ord:\", gen_lbl[] = \"gen:\";\n-  static char none_lbl[] = \"none\", any_lbl[] = \"any\";\n-  static char base_lbl[] = \"base\", sys_lbl[] = \"sys\";\n+  static const char dfn_lbl[] = \"dfn:\", dir_lbl[] = \"dir:\", ind_lbl[] = \"ind:\";\n+  static const char ord_lbl[] = \"ord:\", gen_lbl[] = \"gen:\";\n+  static const char none_lbl[] = \"none\", any_lbl[] = \"any\";\n+  static const char base_lbl[] = \"base\", sys_lbl[] = \"sys\";\n \n   enum debug_struct_file files = DINFO_STRUCT_FILE_ANY;\n   /* Default is to apply to as much as possible. */\n@@ -174,11 +162,6 @@ base_of_path (const char *path, const char **base_out)\n   return dot - base;\n }\n \n-/* Nonzero means use GNU-only extensions in the generated symbolic\n-   debugging information.  Currently, this only has an effect when\n-   write_symbols is set to DBX_DEBUG, XCOFF_DEBUG, or DWARF_DEBUG.  */\n-bool use_gnu_debug_info_extensions;\n-\n /* Global visibility options.  */\n struct visibility_flags visibility_options;\n \n@@ -212,7 +195,8 @@ static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const struct cl_decoded_option *,\n \t\t\t\t unsigned int lang_mask);\n static void set_debug_level (enum debug_info_type type, int extended,\n-\t\t\t     const char *arg);\n+\t\t\t     const char *arg, struct gcc_options *opts,\n+\t\t\t     struct gcc_options *opts_set);\n static void set_fast_math_flags (struct gcc_options *opts, int set);\n static void set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n \t\t\t\t\t\t int set);\n@@ -1165,7 +1149,8 @@ static void\n print_filtered_help (unsigned int include_flags,\n \t\t     unsigned int exclude_flags,\n \t\t     unsigned int any_flags,\n-\t\t     unsigned int columns)\n+\t\t     unsigned int columns,\n+\t\t     struct gcc_options *opts)\n {\n   unsigned int i;\n   const char *help;\n@@ -1201,7 +1186,7 @@ print_filtered_help (unsigned int include_flags,\n \n   for (i = 0; i < cl_options_count; i++)\n     {\n-      static char new_help[128];\n+      char new_help[128];\n       const struct cl_option *option = cl_options + i;\n       unsigned int len;\n       const char *opt;\n@@ -1261,7 +1246,7 @@ print_filtered_help (unsigned int include_flags,\n \t with an option to be an indication of its current setting.  */\n       if (!quiet_flag)\n \t{\n-\t  void *flag_var = option_flag_var (i, &global_options);\n+\t  void *flag_var = option_flag_var (i, opts);\n \n \t  if (len < (LEFT_COLUMN + 2))\n \t    strcpy (new_help, \"\\t\\t\");\n@@ -1285,7 +1270,7 @@ print_filtered_help (unsigned int include_flags,\n \t\t\t     \"%#x\", * (int *) flag_var);\n \t\t}\n \t      else\n-\t\tstrcat (new_help, option_enabled (i, &global_options)\n+\t\tstrcat (new_help, option_enabled (i, opts)\n \t\t\t? _(\"[enabled]\") : _(\"[disabled]\"));\n \t    }\n \n@@ -1324,11 +1309,13 @@ print_filtered_help (unsigned int include_flags,\n /* Display help for a specified type of option.\n    The options must have ALL of the INCLUDE_FLAGS set\n    ANY of the flags in the ANY_FLAGS set\n-   and NONE of the EXCLUDE_FLAGS set.  */\n+   and NONE of the EXCLUDE_FLAGS set.  The current option state is in\n+   OPTS.  */\n static void\n print_specific_help (unsigned int include_flags,\n \t\t     unsigned int exclude_flags,\n-\t\t     unsigned int any_flags)\n+\t\t     unsigned int any_flags,\n+\t\t     struct gcc_options *opts)\n {\n   unsigned int all_langs_mask = (1U << cl_lang_count) - 1;\n   const char * description = NULL;\n@@ -1424,7 +1411,7 @@ print_specific_help (unsigned int include_flags,\n     }\n \n   printf (\"%s%s:\\n\", description, descrip_extra);\n-  print_filtered_help (include_flags, exclude_flags, any_flags, columns);\n+  print_filtered_help (include_flags, exclude_flags, any_flags, columns, opts);\n }\n \n /* Handle target- and language-independent options.  Return zero to\n@@ -1469,20 +1456,20 @@ common_handle_option (struct gcc_options *opts,\n \t/* First display any single language specific options.  */\n \tfor (i = 0; i < cl_lang_count; i++)\n \t  print_specific_help\n-\t    (1U << i, (all_langs_mask & (~ (1U << i))) | undoc_mask, 0);\n+\t    (1U << i, (all_langs_mask & (~ (1U << i))) | undoc_mask, 0, opts);\n \t/* Next display any multi language specific options.  */\n-\tprint_specific_help (0, undoc_mask, all_langs_mask);\n+\tprint_specific_help (0, undoc_mask, all_langs_mask, opts);\n \t/* Then display any remaining, non-language options.  */\n \tfor (i = CL_MIN_OPTION_CLASS; i <= CL_MAX_OPTION_CLASS; i <<= 1)\n \t  if (i != CL_DRIVER)\n-\t    print_specific_help (i, undoc_mask, 0);\n-\texit_after_options = true;\n+\t    print_specific_help (i, undoc_mask, 0, opts);\n+\topts->x_exit_after_options = true;\n \tbreak;\n       }\n \n     case OPT__target_help:\n-      print_specific_help (CL_TARGET, CL_UNDOCUMENTED, 0);\n-      exit_after_options = true;\n+      print_specific_help (CL_TARGET, CL_UNDOCUMENTED, 0, opts);\n+      opts->x_exit_after_options = true;\n \n       /* Allow the target a chance to give the user some additional information.  */\n       if (targetm.help)\n@@ -1507,7 +1494,7 @@ common_handle_option (struct gcc_options *opts,\n \t\t   params|common|<language>}  */\n \twhile (* a != 0)\n \t  {\n-\t    static struct\n+\t    static const struct\n \t    {\n \t      const char * string;\n \t      unsigned int flag;\n@@ -1602,13 +1589,13 @@ common_handle_option (struct gcc_options *opts,\n \t  }\n \n \tif (include_flags)\n-\t  print_specific_help (include_flags, exclude_flags, 0);\n-\texit_after_options = true;\n+\t  print_specific_help (include_flags, exclude_flags, 0, opts);\n+\topts->x_exit_after_options = true;\n \tbreak;\n       }\n \n     case OPT__version:\n-      exit_after_options = true;\n+      opts->x_exit_after_options = true;\n       break;\n \n     case OPT_O:\n@@ -1775,12 +1762,8 @@ common_handle_option (struct gcc_options *opts,\n       /* Deferred.  */\n       break;\n \n-    case OPT_fprofile_dir_:\n-      profile_data_prefix = xstrdup (arg);\n-      break;\n-\n     case OPT_fprofile_use_:\n-      profile_data_prefix = xstrdup (arg);\n+      opts->x_profile_data_prefix = xstrdup (arg);\n       opts->x_flag_profile_use = true;\n       value = true;\n       /* No break here - do -fprofile-use processing. */\n@@ -1813,7 +1796,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fprofile_generate_:\n-      profile_data_prefix = xstrdup (arg);\n+      opts->x_profile_data_prefix = xstrdup (arg);\n       value = true;\n       /* No break here - do -fprofile-generate processing. */\n     case OPT_fprofile_generate:\n@@ -1944,37 +1927,37 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_g:\n-      set_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg);\n+      set_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg, opts, opts_set);\n       break;\n \n     case OPT_gcoff:\n-      set_debug_level (SDB_DEBUG, false, arg);\n+      set_debug_level (SDB_DEBUG, false, arg, opts, opts_set);\n       break;\n \n     case OPT_gdwarf_:\n       if (value < 2 || value > 4)\n \terror (\"dwarf version %d is not supported\", value);\n       else\n \tdwarf_version = value;\n-      set_debug_level (DWARF2_DEBUG, false, \"\");\n+      set_debug_level (DWARF2_DEBUG, false, \"\", opts, opts_set);\n       break;\n \n     case OPT_ggdb:\n-      set_debug_level (NO_DEBUG, 2, arg);\n+      set_debug_level (NO_DEBUG, 2, arg, opts, opts_set);\n       break;\n \n     case OPT_gstabs:\n     case OPT_gstabs_:\n-      set_debug_level (DBX_DEBUG, code == OPT_gstabs_, arg);\n+      set_debug_level (DBX_DEBUG, code == OPT_gstabs_, arg, opts, opts_set);\n       break;\n \n     case OPT_gvms:\n-      set_debug_level (VMS_DEBUG, false, arg);\n+      set_debug_level (VMS_DEBUG, false, arg, opts, opts_set);\n       break;\n \n     case OPT_gxcoff:\n     case OPT_gxcoff_:\n-      set_debug_level (XCOFF_DEBUG, code == OPT_gxcoff_, arg);\n+      set_debug_level (XCOFF_DEBUG, code == OPT_gxcoff_, arg, opts, opts_set);\n       break;\n \n     case OPT_pedantic_errors:\n@@ -2080,15 +2063,15 @@ set_unsafe_math_optimizations_flags (struct gcc_options *opts, int set)\n   opts->x_flag_reciprocal_math = set;\n }\n \n-/* Return true iff flags are set as if -ffast-math.  */\n+/* Return true iff flags in OPTS are set as if -ffast-math.  */\n bool\n-fast_math_flags_set_p (void)\n+fast_math_flags_set_p (const struct gcc_options *opts)\n {\n-  return (!flag_trapping_math\n-\t  && flag_unsafe_math_optimizations\n-\t  && flag_finite_math_only\n-\t  && !flag_signed_zeros\n-\t  && !flag_errno_math);\n+  return (!opts->x_flag_trapping_math\n+\t  && opts->x_flag_unsafe_math_optimizations\n+\t  && opts->x_flag_finite_math_only\n+\t  && !opts->x_flag_signed_zeros\n+\t  && !opts->x_flag_errno_math);\n }\n \n /* Return true iff flags are set as if -ffast-math but using the flags stored\n@@ -2103,49 +2086,52 @@ fast_math_flags_struct_set_p (struct cl_optimization *opt)\n \t  && !opt->x_flag_errno_math);\n }\n \n-/* Handle a debug output -g switch.  EXTENDED is true or false to support\n-   extended output (2 is special and means \"-ggdb\" was given).  */\n+/* Handle a debug output -g switch for options OPTS\n+   (OPTS_SET->x_write_symbols storing whether a debug type was passed\n+   explicitly).  EXTENDED is true or false to support extended output\n+   (2 is special and means \"-ggdb\" was given).  */\n static void\n-set_debug_level (enum debug_info_type type, int extended, const char *arg)\n+set_debug_level (enum debug_info_type type, int extended, const char *arg,\n+\t\t struct gcc_options *opts, struct gcc_options *opts_set)\n {\n-  static bool type_explicit;\n-\n-  use_gnu_debug_info_extensions = extended;\n+  opts->x_use_gnu_debug_info_extensions = extended;\n \n   if (type == NO_DEBUG)\n     {\n-      if (write_symbols == NO_DEBUG)\n+      if (opts->x_write_symbols == NO_DEBUG)\n \t{\n-\t  write_symbols = PREFERRED_DEBUGGING_TYPE;\n+\t  opts->x_write_symbols = PREFERRED_DEBUGGING_TYPE;\n \n \t  if (extended == 2)\n \t    {\n #ifdef DWARF2_DEBUGGING_INFO\n-\t      write_symbols = DWARF2_DEBUG;\n+\t      opts->x_write_symbols = DWARF2_DEBUG;\n #elif defined DBX_DEBUGGING_INFO\n-\t      write_symbols = DBX_DEBUG;\n+\t      opts->x_write_symbols = DBX_DEBUG;\n #endif\n \t    }\n \n-\t  if (write_symbols == NO_DEBUG)\n+\t  if (opts->x_write_symbols == NO_DEBUG)\n \t    warning (0, \"target system does not support debug output\");\n \t}\n     }\n   else\n     {\n       /* Does it conflict with an already selected type?  */\n-      if (type_explicit && write_symbols != NO_DEBUG && type != write_symbols)\n+      if (opts_set->x_write_symbols != NO_DEBUG\n+\t  && opts->x_write_symbols != NO_DEBUG\n+\t  && type != opts->x_write_symbols)\n \terror (\"debug format \\\"%s\\\" conflicts with prior selection\",\n \t       debug_type_names[type]);\n-      write_symbols = type;\n-      type_explicit = true;\n+      opts->x_write_symbols = type;\n+      opts_set->x_write_symbols = type;\n     }\n \n   /* A debug flag without a level defaults to level 2.  */\n   if (*arg == '\\0')\n     {\n-      if (!debug_info_level)\n-\tdebug_info_level = DINFO_LEVEL_NORMAL;\n+      if (!opts->x_debug_info_level)\n+\topts->x_debug_info_level = DINFO_LEVEL_NORMAL;\n     }\n   else\n     {\n@@ -2155,7 +2141,7 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg)\n       else if (argval > 3)\n \terror (\"debug output level %s is too high\", arg);\n       else\n-\tdebug_info_level = (enum debug_info_level) argval;\n+\topts->x_debug_info_level = (enum debug_info_levels) argval;\n     }\n }\n "}, {"sha": "69643581eaff51cfb05f84a97302284025067a8c", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -143,9 +143,6 @@ int main_input_baselength;\n    to optimize in process_options ().  */\n #define AUTODETECT_VALUE 2\n \n-/* Prefix for profile data files */\n-const char *profile_data_prefix;\n-\n /* Debug hooks - dependent upon command line options.  */\n \n const struct gcc_debug_hooks *debug_hooks;"}, {"sha": "b7fd879916985941901af395f99854c11d3b303b", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576d21f39052849a9c4199cc511d7cf1a01fd9c/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=0576d21f39052849a9c4199cc511d7cf1a01fd9c", "patch": "@@ -76,9 +76,6 @@ extern const char *main_input_filename;\n extern const char *main_input_basename;\n extern int main_input_baselength;\n \n-extern const char *profile_data_prefix;\n-extern bool exit_after_options;\n-\n /* True if the user has tagged the function with the 'section'\n    attribute.  */\n \n@@ -99,7 +96,7 @@ extern struct ht *ident_hash;\n extern void decode_d_option\t\t(const char *);\n \n /* Return true iff flags are set as if -ffast-math.  */\n-extern bool fast_math_flags_set_p\t(void);\n+extern bool fast_math_flags_set_p\t(const struct gcc_options *);\n extern bool fast_math_flags_struct_set_p (struct cl_optimization *);\n \n /* Inline versions of the above for speed.  */"}]}