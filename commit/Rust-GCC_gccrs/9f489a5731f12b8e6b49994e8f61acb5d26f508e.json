{"sha": "9f489a5731f12b8e6b49994e8f61acb5d26f508e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY0ODlhNTczMWYxMmI4ZTZiNDk5OTRlOGY2MWFjYjVkMjZmNTA4ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-02T11:48:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-06T09:56:47Z"}, "message": "add -fmove-loop-stores option to control GIMPLE loop store-motion\n\nThis adds the -fmove-loop-stores option, mainly as a way to disable\nthe store-motion part of GIMPLE invariant motion (-ftree-loop-im)\nwhich is enabled by default.  It might be sensible to turn off\n-fmove-loop-stores at -O1 since it can result in compile-time\nas well as memory usage issues but this patch tries to preserve\nexisting behavior besides introducing the new option with the\nexception of -Og where I've disabled it.\n\nControlling store-motion has been made easy by earlier refactoring\nfor the invariant motion only use after loop interchange.\n\n2021-07-02  Richard Biener  <rguenther@suse.de>\n\n\t* doc/invoke.texi (fmove-loop-stores): Document.\n\t* common.opt (fmove-loop-stores): New option.\n\t* opts.c (default_options_table): Enable -fmove-loop-stores\n\tat -O1 but not -Og.\n\t* tree-ssa-loop-im.c (pass_lim::execute): Pass\n\tflag_move_loop_stores instead of true to\n\tloop_invariant_motion_in_fun.", "tree": {"sha": "b0ca01e2c53647b46722ca04c9676238130468a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0ca01e2c53647b46722ca04c9676238130468a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f489a5731f12b8e6b49994e8f61acb5d26f508e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f489a5731f12b8e6b49994e8f61acb5d26f508e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f489a5731f12b8e6b49994e8f61acb5d26f508e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f489a5731f12b8e6b49994e8f61acb5d26f508e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b019b28ebd65462a092c96d95e9e356c8bb39b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b019b28ebd65462a092c96d95e9e356c8bb39b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b019b28ebd65462a092c96d95e9e356c8bb39b78"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "d9da1131edaa1c76d689b90eb3bdbfe84a5eb362", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f489a5731f12b8e6b49994e8f61acb5d26f508e/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f489a5731f12b8e6b49994e8f61acb5d26f508e/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=9f489a5731f12b8e6b49994e8f61acb5d26f508e", "patch": "@@ -2084,6 +2084,10 @@ fmove-loop-invariants\n Common Var(flag_move_loop_invariants) Optimization\n Move loop invariant computations out of loops.\n \n+fmove-loop-stores\n+Common Var(flag_move_loop_stores) Optimization\n+Move stores out of loops.\n+\n fdce\n Common Var(flag_dce) Init(1) Optimization\n Use the RTL dead code elimination pass."}, {"sha": "e67d47af676db9c1c075974138541cdb140df501", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f489a5731f12b8e6b49994e8f61acb5d26f508e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f489a5731f12b8e6b49994e8f61acb5d26f508e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9f489a5731f12b8e6b49994e8f61acb5d26f508e", "patch": "@@ -528,7 +528,7 @@ Objective-C and Objective-C++ Dialects}.\n -floop-parallelize-all  -flra-remat  -flto  -flto-compression-level @gol\n -flto-partition=@var{alg}  -fmerge-all-constants @gol\n -fmerge-constants  -fmodulo-sched  -fmodulo-sched-allow-regmoves @gol\n--fmove-loop-invariants  -fno-branch-count-reg @gol\n+-fmove-loop-invariants  -fmove-loop-stores  -fno-branch-count-reg @gol\n -fno-defer-pop  -fno-fp-int-builtin-inexact  -fno-function-cse @gol\n -fno-guess-branch-probability  -fno-inline  -fno-math-errno  -fno-peephole @gol\n -fno-peephole2  -fno-printf-return-value  -fno-sched-interblock @gol\n@@ -10260,6 +10260,7 @@ compilation time.\n -fipa-reference-addressable @gol\n -fmerge-constants @gol\n -fmove-loop-invariants @gol\n+-fmove-loop-stores@gol\n -fomit-frame-pointer @gol\n -freorder-blocks @gol\n -fshrink-wrap @gol\n@@ -10403,7 +10404,7 @@ optimization flags except for those that may interfere with debugging:\n @gccoptlist{-fbranch-count-reg  -fdelayed-branch @gol\n -fdse  -fif-conversion  -fif-conversion2  @gol\n -finline-functions-called-once @gol\n--fmove-loop-invariants  -fssa-phiopt @gol\n+-fmove-loop-invariants  -fmove-loop-stores  -fssa-phiopt @gol\n -ftree-bit-ccp  -ftree-dse  -ftree-pta  -ftree-sra}\n \n @end table\n@@ -13011,6 +13012,15 @@ Enabled by @option{-O3}, @option{-fprofile-use}, and @option{-fauto-profile}.\n Enables the loop invariant motion pass in the RTL loop optimizer.  Enabled\n at level @option{-O1} and higher, except for @option{-Og}.\n \n+@item -fmove-loop-stores\n+@opindex fmove-loop-stores\n+Enables the loop store motion pass in the GIMPLE loop optimizer.  This\n+moves invariant stores to after the end of the loop in exchange for\n+carrying the stored value in a register across the iteration.\n+Note for this option to have an effect @option{-ftree-loop-im} has to\n+be enabled as well.  Enabled at level @option{-O1} and higher, except\n+for @option{-Og}.\n+\n @item -fsplit-loops\n @opindex fsplit-loops\n Split a loop into two if it contains a condition that's always true"}, {"sha": "25282f71a3b7dd87bc6c02ce7c29a3bea0f16b30", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f489a5731f12b8e6b49994e8f61acb5d26f508e/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f489a5731f12b8e6b49994e8f61acb5d26f508e/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=9f489a5731f12b8e6b49994e8f61acb5d26f508e", "patch": "@@ -575,6 +575,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_fif_conversion2, NULL, 1 },\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_finline_functions_called_once, NULL, 1 },\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_fmove_loop_invariants, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_fmove_loop_stores, NULL, 1 },\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_fssa_phiopt, NULL, 1 },\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_fipa_modref, NULL, 1 },\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_ftree_bit_ccp, NULL, 1 },"}, {"sha": "9ac390b9a4b47989839a223fe7e350e1e279f230", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f489a5731f12b8e6b49994e8f61acb5d26f508e/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f489a5731f12b8e6b49994e8f61acb5d26f508e/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=9f489a5731f12b8e6b49994e8f61acb5d26f508e", "patch": "@@ -3258,7 +3258,7 @@ pass_lim::execute (function *fun)\n \n   if (number_of_loops (fun) <= 1)\n     return 0;\n-  unsigned int todo = loop_invariant_motion_in_fun (fun, true);\n+  unsigned int todo = loop_invariant_motion_in_fun (fun, flag_move_loop_stores);\n \n   if (!in_loop_pipeline)\n     loop_optimizer_finalize ();"}]}