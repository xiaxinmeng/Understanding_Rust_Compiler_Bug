{"sha": "427ed3ae3ed40c00540af45ecc15a2d1f4058268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI3ZWQzYWUzZWQ0MGMwMDU0MGFmNDVlY2MxNWEyZDFmNDA1ODI2OA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2017-01-23T16:30:55Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2017-01-23T16:30:55Z"}, "message": "re PR rtl-optimization/71724 (ICE: Segmentation fault, deep recursion between combine_simplify_rtx and subst)\n\n\tPR rtl-optimization/71724\n\t* combine.c (if_then_else_cond): Look for situations where it is\n\tbeneficial to undo the work of one of the recursive calls.\n\nFrom-SVN: r244817", "tree": {"sha": "c331f74d4cc2a795f59daef6006982091f4a2dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c331f74d4cc2a795f59daef6006982091f4a2dba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/427ed3ae3ed40c00540af45ecc15a2d1f4058268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427ed3ae3ed40c00540af45ecc15a2d1f4058268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427ed3ae3ed40c00540af45ecc15a2d1f4058268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427ed3ae3ed40c00540af45ecc15a2d1f4058268/comments", "author": null, "committer": null, "parents": [{"sha": "e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "320298fefcc946d85377c709a5f98afa1504e3af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427ed3ae3ed40c00540af45ecc15a2d1f4058268/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427ed3ae3ed40c00540af45ecc15a2d1f4058268/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=427ed3ae3ed40c00540af45ecc15a2d1f4058268", "patch": "@@ -5,6 +5,10 @@\n \t(TARGET_MAX_NOCE_IFCVT_SEQ_COST): Define.\n \t* ifcvt.c (noce_try_cmove): Add missing cost check.\n \n+\tPR rtl-optimization/71724\n+\t* combine.c (if_then_else_cond): Look for situations where it is\n+\tbeneficial to undo the work of one of the recursive calls.\n+\n 2017-01-23  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/70754"}, {"sha": "c643a0eb28fef30ae44158e0fe43def8c95040b1", "filename": "gcc/combine.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427ed3ae3ed40c00540af45ecc15a2d1f4058268/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427ed3ae3ed40c00540af45ecc15a2d1f4058268/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=427ed3ae3ed40c00540af45ecc15a2d1f4058268", "patch": "@@ -9044,11 +9044,31 @@ if_then_else_cond (rtx x, rtx *ptrue, rtx *pfalse)\n      the same value, compute the new true and false values.  */\n   else if (BINARY_P (x))\n     {\n-      cond0 = if_then_else_cond (XEXP (x, 0), &true0, &false0);\n-      cond1 = if_then_else_cond (XEXP (x, 1), &true1, &false1);\n+      rtx op0 = XEXP (x, 0);\n+      rtx op1 = XEXP (x, 1);\n+      cond0 = if_then_else_cond (op0, &true0, &false0);\n+      cond1 = if_then_else_cond (op1, &true1, &false1);\n+\n+      if ((cond0 != 0 && cond1 != 0 && !rtx_equal_p (cond0, cond1))\n+\t  && (REG_P (op0) || REG_P (op1)))\n+\t{\n+\t  /* Try to enable a simplification by undoing work done by\n+\t     if_then_else_cond if it converted a REG into something more\n+\t     complex.  */\n+\t  if (REG_P (op0))\n+\t    {\n+\t      cond0 = 0;\n+\t      true0 = false0 = op0;\n+\t    }\n+\t  else\n+\t    {\n+\t      cond1 = 0;\n+\t      true1 = false1 = op1;\n+\t    }\n+\t}\n \n       if ((cond0 != 0 || cond1 != 0)\n-\t  && ! (cond0 != 0 && cond1 != 0 && ! rtx_equal_p (cond0, cond1)))\n+\t  && ! (cond0 != 0 && cond1 != 0 && !rtx_equal_p (cond0, cond1)))\n \t{\n \t  /* If if_then_else_cond returned zero, then true/false are the\n \t     same rtl.  We must copy one of them to prevent invalid rtl"}]}