{"sha": "b6d339832674699119d46cf5c68433be19c4e1bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkMzM5ODMyNjc0Njk5MTE5ZDQ2Y2Y1YzY4NDMzYmUxOWM0ZTFiYg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-09T21:30:32Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-09T21:30:32Z"}, "message": "sh.h (PREDICATE_CODES): Add general_extend_operand and inqhi_operand.\n\n\t* sh.h (PREDICATE_CODES): Add general_extend_operand and inqhi_operand.\n\t* sh.c (general_extend_operand, inqhi_operand): New functions.\n\t* sh.md (cmpeqdi_media, cmpgtdi_media, cmpgtudi_media): Collapse\n\talternatives using 'N' modifier.  Add type.\n\t(adddi3z_media): Likewise.  Enable generator function generation.\n\t(movdicc_false, movdicc_true, addsi3_media, subsi3_media): Use more\n\texact predicates / constraints.  Add type.\n\t(subsi3): Allow 0 for SHMEDIA.\n\t(udivsi3_i4_media): Use match_operand for input values\n\trather than hard registers.\n\t(udivsi3 - TARGET_SHMEDIA_FPU case): Don't ferry values\n\tunnecessarily through hard registers.  Keep copies of pseudo\n\tregisters outside of the libcall sequence.\n\t(mulsidi3_media, umulsidi3_media): Use more exact predicates.  Add type.\n\t(ashlsi3_media, ashrsi3_media, lshrsi3_media): Likewise.\n\t(zero_extendsidi2, zero_extendhidi2, zero_extendqidi2): Likewise.\n\t(extendhidi2, extendqidi2): Likewise.\n\t(andsi3_compact): Name.\n\t(andcdi3): Enable generator function generation.\n\t(zero_extendhisi2, zero_extendqisi2): Rename to\n\t(zero_extendhisi2_compact, zero_extendqisi2_compact).\n\t(extendhisi2, extendqisi2): Rename to\n\t(extendhisi2_compact, extendqisi2_compact).\n\t(rotldi3, rotldi3_mextr, rotrdi3, rotrdi3_mextr): New patterns.\n\t(loaddi_trunc, zero_extendhisi2, zero_extendhisi2_media): Likewise.\n\t(zero_extendhisi2_media+1, zero_extendqisi2): Likewise.\n\t(zero_extendqisi2_media, extendhisi2, extendhisi2_media): Likewise.\n\t(extendhisi2_media, extendhisi2_media+1, extendqisi2): Likewise.\n\t(extendqisi2_media, extendqisi2_media+1, truncdisi2): Likewise.\n\t(truncdihi2, truncdiqi2, reload_inqi, reload_inhi): Likewise.\n\t(shmedia32_initialize_trampoline_big): Likewise.\n\t(shmedia32_initialize_trampoline_little): Likewise.\n\t(nsb, nsbsi, nsbdi, ffsdi2, ffssi2, byterev): Likewise.\n\t(negdi2): Remove spurious T clobber.\n\t(zero_extendhidi2+1, extendhidi2+1, extendqidi2+1): Handle TRUNCATE.\n\t(movsi_media, movsi_media_nofpu): Remove spurious *k after b.\n\t(movdi_media, movdi_media_nofpu, pt, ptb): Likewise.\n\t(movsi_media_nofpu+2, movhi_media+1): Only do split after reload.\n\t(ic_invalidate_line_media): Write back data cache before invalidating\n\tinstruction cache.  Add type.\n\t(movsf_media): Sign-extend when the destination is a general\n\tpurpose register.  Add type.\n\t(bgt_media, bge_media, bgtu_media, bgeu_media, blt_media_i): Allow 0.\n\t(casesi_worker_0+1): Only increment ref count for proper label.\n\t(casesi_worker_0+2): Likewise.\n\nFrom-SVN: r55345", "tree": {"sha": "3faff620f91a8be4ea78ffd6754a0caedeb4cfba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3faff620f91a8be4ea78ffd6754a0caedeb4cfba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d339832674699119d46cf5c68433be19c4e1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d339832674699119d46cf5c68433be19c4e1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d339832674699119d46cf5c68433be19c4e1bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d339832674699119d46cf5c68433be19c4e1bb/comments", "author": null, "committer": null, "parents": [{"sha": "2c701c0144597c41dbf9bb18cf202166ab2c756d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c701c0144597c41dbf9bb18cf202166ab2c756d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c701c0144597c41dbf9bb18cf202166ab2c756d"}], "stats": {"total": 720, "additions": 598, "deletions": 122}, "files": [{"sha": "7f1d573474a49e3c567ddb8a87e15facb90f782d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d339832674699119d46cf5c68433be19c4e1bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d339832674699119d46cf5c68433be19c4e1bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6d339832674699119d46cf5c68433be19c4e1bb", "patch": "@@ -1,3 +1,51 @@\n+Tue Jul  9 21:39:50 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (PREDICATE_CODES): Add general_extend_operand and inqhi_operand.\n+\t* sh.c (general_extend_operand, inqhi_operand): New functions.\n+\t* sh.md (cmpeqdi_media, cmpgtdi_media, cmpgtudi_media): Collapse\n+\talternatives using 'N' modifier.  Add type.\n+\t(adddi3z_media): Likewise.  Enable generator function generation.\n+\t(movdicc_false, movdicc_true, addsi3_media, subsi3_media): Use more\n+\texact predicates / constraints.  Add type.\n+\t(subsi3): Allow 0 for SHMEDIA.\n+\t(udivsi3_i4_media): Use match_operand for input values\n+\trather than hard registers.\n+\t(udivsi3 - TARGET_SHMEDIA_FPU case): Don't ferry values\n+\tunnecessarily through hard registers.  Keep copies of pseudo\n+\tregisters outside of the libcall sequence.\n+\t(mulsidi3_media, umulsidi3_media): Use more exact predicates.  Add type.\n+\t(ashlsi3_media, ashrsi3_media, lshrsi3_media): Likewise.\n+\t(zero_extendsidi2, zero_extendhidi2, zero_extendqidi2): Likewise.\n+\t(extendhidi2, extendqidi2): Likewise.\n+\t(andsi3_compact): Name.\n+\t(andcdi3): Enable generator function generation.\n+\t(zero_extendhisi2, zero_extendqisi2): Rename to\n+\t(zero_extendhisi2_compact, zero_extendqisi2_compact).\n+\t(extendhisi2, extendqisi2): Rename to\n+\t(extendhisi2_compact, extendqisi2_compact).\n+\t(rotldi3, rotldi3_mextr, rotrdi3, rotrdi3_mextr): New patterns.\n+\t(loaddi_trunc, zero_extendhisi2, zero_extendhisi2_media): Likewise.\n+\t(zero_extendhisi2_media+1, zero_extendqisi2): Likewise.\n+\t(zero_extendqisi2_media, extendhisi2, extendhisi2_media): Likewise.\n+\t(extendhisi2_media, extendhisi2_media+1, extendqisi2): Likewise.\n+\t(extendqisi2_media, extendqisi2_media+1, truncdisi2): Likewise.\n+\t(truncdihi2, truncdiqi2, reload_inqi, reload_inhi): Likewise.\n+\t(shmedia32_initialize_trampoline_big): Likewise.\n+\t(shmedia32_initialize_trampoline_little): Likewise.\n+\t(nsb, nsbsi, nsbdi, ffsdi2, ffssi2, byterev): Likewise.\n+\t(negdi2): Remove spurious T clobber.\n+\t(zero_extendhidi2+1, extendhidi2+1, extendqidi2+1): Handle TRUNCATE.\n+\t(movsi_media, movsi_media_nofpu): Remove spurious *k after b.\n+\t(movdi_media, movdi_media_nofpu, pt, ptb): Likewise.\n+\t(movsi_media_nofpu+2, movhi_media+1): Only do split after reload.\n+\t(ic_invalidate_line_media): Write back data cache before invalidating\n+\tinstruction cache.  Add type.\n+\t(movsf_media): Sign-extend when the destination is a general\n+\tpurpose register.  Add type.\n+\t(bgt_media, bge_media, bgtu_media, bgeu_media, blt_media_i): Allow 0.\n+\t(casesi_worker_0+1): Only increment ref count for proper label.\n+\t(casesi_worker_0+2): Likewise.\n+\n 2002-07-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* dwarfout.c (dwarfout_init): Warn that DWARF1 is deprecated."}, {"sha": "135648f0051d312dc46fdf9a56a4b93729198701", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d339832674699119d46cf5c68433be19c4e1bb/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d339832674699119d46cf5c68433be19c4e1bb/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b6d339832674699119d46cf5c68433be19c4e1bb", "patch": "@@ -6275,6 +6275,29 @@ extend_reg_or_0_operand (op, mode)\n \t  : arith_reg_or_0_operand) (op, mode);\n }\n \n+int\n+general_extend_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return (GET_CODE (op) == TRUNCATE\n+\t  ? arith_operand\n+\t  : nonimmediate_operand) (op, mode);\n+}\n+\n+int\n+inqhi_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) != TRUNCATE || mode != GET_MODE (op))\n+    return 0;\n+  op = XEXP (op, 0);\n+  /* Can't use true_regnum here because copy_cost wants to know about\n+     SECONDARY_INPUT_RELOAD_CLASS.  */\n+  return GET_CODE (op) == REG && FP_REGISTER_P (REGNO (op));\n+}\n+\n /* Return nonzero if V is a zero vector matching MODE.  */\n int\n zero_vec_operand (v, mode)"}, {"sha": "3d65d7b054c4bccbfe065500f2a677852b618c68", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d339832674699119d46cf5c68433be19c4e1bb/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d339832674699119d46cf5c68433be19c4e1bb/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b6d339832674699119d46cf5c68433be19c4e1bb", "patch": "@@ -3240,9 +3240,11 @@ extern int rtx_equal_function_value_matters;\n   {\"fp_arith_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"fpscr_operand\", {REG}},\t\t\t\t\t\t\\\n   {\"fpul_operand\", {REG}},\t\t\t\t\t\t\\\n+  {\"general_extend_operand\", {SUBREG, REG, MEM, TRUNCATE}},\t\t\\\n   {\"general_movsrc_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE, MEM}}, \\\n   {\"general_movdst_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n   {\"greater_comparison_operator\", {GT,GE,GTU,GEU}},\t\t\t\\\n+  {\"inqhi_operand\", {TRUNCATE}},\t\t\t\t\t\\\n   {\"less_comparison_operator\", {LT,LE,LTU,LEU}},\t\t\t\\\n   {\"logical_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"mextr_bit_offset\", {CONST_INT}},\t\t\t\t\t\\"}, {"sha": "0964964c04b5940285f6f93e6d6e00ce5fe69a3b", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 525, "deletions": 122, "changes": 647, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d339832674699119d46cf5c68433be19c4e1bb/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d339832674699119d46cf5c68433be19c4e1bb/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=b6d339832674699119d46cf5c68433be19c4e1bb", "patch": "@@ -844,33 +844,29 @@\n    (set_attr \"type\" \"arith3\")])\n \n (define_insn \"cmpeqdi_media\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"%r,r\")\n-\t       (match_operand:DI 2 \"arith_reg_or_0_operand\" \"N,r\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(eq:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n+\t       (match_operand:DI 2 \"arith_reg_or_0_operand\" \"Nr\")))]\n   \"TARGET_SHMEDIA\"\n-  \"@\n-\tcmpeq\t%1, r63, %0\n-\tcmpeq\t%1, %2, %0\")\n+  \"cmpeq\t%1, %N2, %0\"\n+  [(set_attr \"type\" \"cmp_media\")])\n \n (define_insn \"cmpgtdi_media\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n-\t(gt:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"N,r,r\")\n-\t       (match_operand:DI 2 \"arith_reg_or_0_operand\" \"r,N,r\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(gt:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"Nr\")\n+\t       (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rN\")))]\n   \"TARGET_SHMEDIA\"\n-  \"@\n-\tcmpgt\tr63, %2, %0\n-\tcmpgt\t%1, r63, %0\n-\tcmpgt\t%1, %2, %0\")\n+  \"cmpgt\t%N1, %N2, %0\"\n+  [(set_attr \"type\" \"cmp_media\")])\n \n (define_insn \"cmpgtudi_media\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n-\t(gtu:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"N,r,r\")\n-\t\t(match_operand:DI 2 \"arith_reg_or_0_operand\" \"r,N,r\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(gtu:DI (match_operand:DI 1 \"arith_reg_or_0_operand\" \"Nr\")\n+\t\t(match_operand:DI 2 \"arith_reg_or_0_operand\" \"rN\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n-\tcmpgtu\tr63, %2, %0\n-\tcmpgtu\t%1, r63, %0\n-\tcmpgtu\t%1, %2, %0\")\n+\tcmpgtu\t%N1, %N2, %0\"\n+  [(set_attr \"type\" \"cmp_media\")])\n \n ;; We save the compare operands in the cmpxx patterns and use them when\n ;; we generate the branch.\n@@ -894,22 +890,24 @@\n ;; if op1 == 0, and cmvne does it if op1 != 0.\n \n (define_insn \"movdicc_false\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else:DI (eq (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(if_then_else:DI (eq (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n \t\t\t     (const_int 0))\n-\t (match_operand:DI 2 \"register_operand\" \"r\")\n-\t (match_operand:DI 3 \"register_operand\" \"0\")))]\n+\t (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rN\")\n+\t (match_operand:DI 3 \"arith_reg_operand\" \"0\")))]\n   \"TARGET_SHMEDIA\"\n-  \"cmveq\t%1, %2, %0\")\n+  \"cmveq\t%1, %N2, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n (define_insn \"movdicc_true\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else:DI (ne (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(if_then_else:DI (ne (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n \t\t\t     (const_int 0))\n-\t (match_operand:DI 2 \"register_operand\" \"r\")\n-\t (match_operand:DI 3 \"register_operand\" \"0\")))]\n+\t (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rN\")\n+\t (match_operand:DI 3 \"arith_reg_operand\" \"0\")))]\n   \"TARGET_SHMEDIA\"\n-  \"cmvne\t%1, %2, %0\")\n+  \"cmvne\t%1, %N2, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n (define_expand \"movdicc\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -1039,15 +1037,14 @@\n \tadd\t%1, %2, %0\n \taddi\t%1, %2, %0\")\n \n-(define_insn \"*adddi3z_media\"\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r,r\")\n+(define_insn \"adddi3z_media\"\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(zero_extend:DI\n-\t (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"r,r\")\n-\t\t  (match_operand:SI 2 \"arith_reg_or_0_operand\" \"r,n\"))))]\n+\t (plus:SI (match_operand:SI 1 \"extend_reg_operand\" \"r\")\n+\t\t  (match_operand:SI 2 \"extend_reg_or_0_operand\" \"rN\"))))]\n   \"TARGET_SHMEDIA\"\n-  \"@\n-\taddz.l\t%1, %2, %0\n-\taddz.l\t%1, r63, %0\")\n+  \"addz.l\t%1, %N2, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n (define_insn \"adddi3_compact\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n@@ -1116,12 +1113,13 @@\n \n (define_insn \"addsi3_media\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r\")\n+\t(plus:SI (match_operand:SI 1 \"extend_reg_operand\" \"%r,r\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"r,P\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tadd.l\t%1, %2, %0\n-\taddi.l\t%1, %2, %0\")\n+\taddi.l\t%1, %2, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n (define_insn \"*addsi3_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n@@ -1223,10 +1221,11 @@\n \n (define_insn \"*subsi3_media\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n-\t\t  (match_operand:SI 2 \"arith_reg_operand\" \"r\")))]\n+\t(minus:SI (match_operand:SI 1 \"extend_reg_or_0_operand\" \"rN\")\n+\t\t  (match_operand:SI 2 \"extend_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA\"\n-  \"sub.l\t%1, %2, %0\")\n+  \"sub.l\t%N1, %2, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n ;; Convert `constant - reg' to `neg rX; add rX, #const' since this\n ;; will sometimes save one instruction.  Otherwise we might get\n@@ -1248,9 +1247,10 @@\n     }\n   if (TARGET_SHMEDIA)\n     {\n-      if (no_new_pseudos && ! arith_reg_operand (operands[1], SImode))\n+      if (no_new_pseudos && ! arith_reg_or_0_operand (operands[1], SImode))\n \tFAIL;\n-      operands[1] = force_reg (SImode, operands[1]);\n+      if (operands[1] != const0_rtx)\n+\toperands[1] = force_reg (SImode, operands[1]);\n     }\n }\")\n \f\n@@ -1317,21 +1317,26 @@\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"udivsi3_i4_media\"\n-  [(set (match_dup 2) (zero_extend:DI (reg:SI R4_REG)))\n-   (set (match_dup 3) (zero_extend:DI (reg:SI R5_REG)))\n-   (set (match_dup 4) (float:DF (match_dup 2)))\n+  [(set (match_dup 3)\n+\t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n+   (set (match_dup 4)\n+\t(zero_extend:DI (match_operand:SI 2 \"register_operand\" \"\")))\n    (set (match_dup 5) (float:DF (match_dup 3)))\n-   (set (match_dup 6) (div:DF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 6) (float:DF (match_dup 4)))\n+   (set (match_dup 7) (div:DF (match_dup 5) (match_dup 6)))\n+   (set (match_dup 8) (fix:DI (match_dup 7)))\n    (set (subreg:DI (match_operand:SI 0 \"register_operand\" \"=r\") 0)\n-\t(fix:DI (match_dup 6)))]\n+\t(sign_extend:DI (match_dup 9)))]\n   \"TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  operands[2] = gen_reg_rtx (DImode);\n   operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_reg_rtx (DFmode);\n+  operands[4] = gen_reg_rtx (DImode);\n   operands[5] = gen_reg_rtx (DFmode);\n   operands[6] = gen_reg_rtx (DFmode);\n+  operands[7] = gen_reg_rtx (DFmode);\n+  operands[8] = gen_reg_rtx (DImode);\n+  operands[9] = gen_lowpart_common (SImode, operands[8]);\n }\")\n \n (define_insn \"udivsi3_i4\"\n@@ -1386,7 +1391,7 @@\n   \"\"\n   \"\n {\n-  rtx first, last;\n+  rtx first = 0, last;\n \n   operands[3] = gen_reg_rtx (Pmode);\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n@@ -1400,7 +1405,12 @@\n \tlast = gen_udivsi3_i4 (operands[0], operands[3]);\n     }\n   else if (TARGET_SHMEDIA_FPU)\n-    last = gen_udivsi3_i4_media (operands[0]);\n+    {\n+      operands[1] = force_reg (SImode, operands[1]);\n+      operands[2] = force_reg (SImode, operands[2]);\n+      last = gen_udivsi3_i4_media (operands[0], operands[1], operands[2]);\n+      first = last;\n+    }\n   else if (TARGET_SH5)\n     {\n       emit_move_insn (operands[3],\n@@ -1426,8 +1436,11 @@\n \t\t      gen_rtx_SYMBOL_REF (SImode, \\\"__udivsi3\\\"));\n       last = gen_udivsi3_i1 (operands[0], operands[3]);\n     }\n-  first = emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n-  emit_move_insn (gen_rtx_REG (SImode, 5), operands[2]);\n+  if (! first)\n+    {\n+      first = emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n+      emit_move_insn (gen_rtx_REG (SImode, 5), operands[2]);\n+    }\n   last = emit_insn (last);\n   /* Wrap the sequence in REG_LIBCALL / REG_RETVAL notes so that loop\n      invariant code motion can move it.  */\n@@ -1451,7 +1464,7 @@\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n ; Since shmedia-nofpu code could be linked against shcompact code, and\n-; the udivsi3 libcall has the same name, we must consider all registers\n+; the sdivsi3 libcall has the same name, we must consider all registers\n ; clobbered that are in the union of the registers clobbered by the\n ; shmedia and the shcompact implementation.  Note, if the shcompact\n ; implemenation actually used shcompact code, we'd need to clobber\n@@ -1768,10 +1781,11 @@\n \n (define_insn \"mulsidi3_media\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"%r\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"extend_reg_operand\" \"%r\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"extend_reg_operand\" \"r\"))))]\n   \"TARGET_SHMEDIA\"\n-  \"muls.l\t%1, %2, %0\")\n+  \"muls.l\t%1, %2, %0\"\n+  [(set_attr \"type\" \"dmpy_media\")])\n \n (define_insn \"mulsidi3_compact\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n@@ -1838,10 +1852,11 @@\n \n (define_insn \"umulsidi3_media\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"%r\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"extend_reg_operand\" \"%r\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"extend_reg_operand\" \"r\"))))]\n   \"TARGET_SHMEDIA\"\n-  \"mulu.l\t%1, %2, %0\")\n+  \"mulu.l\t%1, %2, %0\"\n+  [(set_attr \"type\" \"dmpy_media\")])\n \n (define_insn \"umulsidi3_compact\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n@@ -1964,7 +1979,7 @@\n ;; Logical operations\n ;; -------------------------------------------------------------------------\n \n-(define_insn \"\"\n+(define_insn \"*andsi3_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,z\")\n \t(and:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"logical_operand\" \"r,L\")))]\n@@ -2012,7 +2027,7 @@\n   DONE;\n }\")\n \n-(define_insn \"*andcdi3\"\n+(define_insn \"andcdi3\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(and:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n \t\t(not:DI (match_operand:DI 2 \"arith_reg_operand\" \"r\"))))]\n@@ -2059,6 +2074,49 @@\n ;; Shifts and rotates\n ;; -------------------------------------------------------------------------\n \n+(define_expand \"rotldi3\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(rotate:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n+\t\t   (match_operand:HI 2 \"mextr_bit_offset\" \"i\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"if (! mextr_bit_offset (operands[2], HImode)) FAIL;\")\n+\n+(define_insn \"rotldi3_mextr\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(rotate:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n+\t\t   (match_operand:HI 2 \"mextr_bit_offset\" \"i\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"*\n+{\n+  static char templ[16];\n+\n+  sprintf (templ, \\\"mextr%d\\\\t%%1,%%1,%%0\\\",\n+\t   8 - (int) (INTVAL (operands[2]) >> 3));\n+  return templ;\n+}\"\n+  [(set_attr \"type\" \"arith_media\")])\n+\n+(define_expand \"rotrdi3\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(rotatert:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n+\t\t     (match_operand:HI 2 \"mextr_bit_offset\" \"i\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"if (! mextr_bit_offset (operands[2], HImode)) FAIL;\")\n+\n+(define_insn \"rotrdi3_mextr\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(rotatert:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n+\t\t     (match_operand:HI 2 \"mextr_bit_offset\" \"i\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"*\n+{\n+  static char templ[16];\n+\n+  sprintf (templ, \\\"mextr%d\\\\t%%1,%%1,%%0\\\", (int) INTVAL (operands[2]) >> 3);\n+  return templ;\n+}\"\n+  [(set_attr \"type\" \"arith_media\")])\n+\n (define_insn \"rotlsi3_1\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(rotate:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n@@ -2241,12 +2299,13 @@\n \n (define_insn \"ashlsi3_media\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n-\t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"r,r\")\n+\t(ashift:SI (match_operand:SI 1 \"extend_reg_operand\" \"r,r\")\n \t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tshlld.l\t%1, %2, %0\n-\tshlli.l\t%1, %2, %0\")\n+\tshlli.l\t%1, %2, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n (define_expand \"ashlsi3\"\n   [(parallel [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n@@ -2398,12 +2457,13 @@\n \n (define_insn \"ashrsi3_media\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"r,r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"extend_reg_operand\" \"r,r\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tshard.l\t%1, %2, %0\n-\tshari.l\t%1, %2, %0\")\n+\tshari.l\t%1, %2, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n (define_expand \"ashrsi3\"\n   [(parallel [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n@@ -2489,12 +2549,13 @@\n \n (define_insn \"lshrsi3_media\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"r,r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"extend_reg_operand\" \"r,r\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tshlrd.l\t%1, %2, %0\n-\tshlri.l\t%1, %2, %0\")\n+\tshlri.l\t%1, %2, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n (define_expand \"lshrsi3\"\n   [(parallel [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n@@ -2886,8 +2947,7 @@\n \n (define_expand \"negdi2\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n-\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))\n-   (clobber (reg:SI T_REG))]\n+\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2937,49 +2997,118 @@\n \n (define_insn \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+\t(zero_extend:DI (match_operand:SI 1 \"extend_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA\"\n-  \"addz.l\t%1, r63, %0\")\n+  \"addz.l\t%1, r63, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n \n (define_insn \"zero_extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(zero_extend:DI (match_operand:HI 1 \"general_extend_operand\" \"r,m\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \t#\n-\tld%M1.uw\t%m1, %0\")\n+\tld%M1.uw\t%m1, %0\"\n+  [(set_attr \"type\" \"*,load_media\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"register_operand\" \"r\")))]\n+\t(zero_extend:DI (match_operand:HI 1 \"extend_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:DI (subreg:DI (match_dup 1) 0) (const_int 48)))\n-   (set (match_dup 0) (lshiftrt:DI (match_dup 0) (const_int 48)))])\n+   (set (match_dup 0) (lshiftrt:DI (match_dup 0) (const_int 48)))]\n+  \"\n+{\n+  if (GET_CODE (operands[1]) == TRUNCATE)\n+    operands[1] = XEXP (operands[1], 0);\n+}\")\n+\n+;; ??? when a truncated input to a zero_extrend is reloaded, reload will\n+;; reload the entrire truncate expression.\n+(define_insn_and_split \"*loaddi_trunc\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+\t(truncate (match_operand:DI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_SHMEDIA && reload_completed\"\n+  \"#\"\n+  \"TARGET_SHMEDIA && reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"operands[0] = gen_rtx_REG (DImode, true_regnum (operands[0]));\")\n \n (define_insn \"zero_extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(zero_extend:DI (match_operand:QI 1 \"general_extend_operand\" \"r,m\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \tandi\t%1, 255, %0\n-\tld%M1.ub\t%m1, %0\")\n+\tld%M1.ub\t%m1, %0\"\n+  [(set_attr \"type\" \"arith_media,load_media\")])\n+\n+(define_expand \"zero_extendhisi2\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t(zero_extend:SI (match_operand:HI 1 \"general_extend_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (! TARGET_SHMEDIA && ! arith_reg_operand (operands[1], HImode))\n+    operands[1] = copy_to_mode_reg (HImode, operands[1]);\n+}\")\n \n-(define_insn \"zero_extendhisi2\"\n+(define_insn \"*zero_extendhisi2_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:HI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH1\"\n   \"extu.w\t%1,%0\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"insn_class\" \"ex_group\")])\n \n-(define_insn \"zero_extendqisi2\"\n+(define_insn \"*zero_extendhisi2_media\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"general_extend_operand\" \"r,m\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\t#\n+\tld%M1.uw\t%m1, %0\"\n+  [(set_attr \"type\" \"arith_media,load_media\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"extend_reg_operand\" \"r\")))]\n+  \"TARGET_SHMEDIA && reload_completed\"\n+  [(set (match_dup 0) (ashift:SI (subreg:SI (match_dup 1) 0) (const_int 16)))\n+   (set (match_dup 0) (lshiftrt:SI (match_dup 0) (const_int 16)))]\n+  \"\n+{\n+  if (GET_CODE (operands[1]) == TRUNCATE)\n+    operands[1] = XEXP (operands[1], 0);\n+}\")\n+\n+(define_expand \"zero_extendqisi2\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t(zero_extend:SI (match_operand:QI 1 \"general_extend_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (! TARGET_SHMEDIA && ! arith_reg_operand (operands[1], QImode))\n+    operands[1] = copy_to_mode_reg (QImode, operands[1]);\n+}\")\n+\n+(define_insn \"*zero_extendqisi2_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:QI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH1\"\n   \"extu.b\t%1,%0\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"insn_class\" \"ex_group\")])\n \n+(define_insn \"*zero_extendqisi2_media\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:SI (match_operand:QI 1 \"general_extend_operand\" \"r,m\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\tandi\t%1, 255, %0\n+\tld%M1.ub\t%m1, %0\"\n+  [(set_attr \"type\" \"arith_media,load_media\")])\n+\n (define_insn \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n \t(zero_extend:HI (match_operand:QI 1 \"arith_reg_operand\" \"r\")))]\n@@ -3006,35 +3135,53 @@\n \n (define_insn \"extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(sign_extend:DI (match_operand:HI 1 \"general_extend_operand\" \"r,m\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \t#\n-\tld%M1.w\t%m1, %0\")\n+\tld%M1.w\t%m1, %0\"\n+  [(set_attr \"type\" \"*,load_media\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:HI 1 \"register_operand\" \"r\")))]\n+\t(sign_extend:DI (match_operand:HI 1 \"extend_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:DI (subreg:DI (match_dup 1) 0) (const_int 48)))\n-   (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 48)))])\n+   (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 48)))]\n+  \"\n+{\n+  if (GET_CODE (operands[1]) == TRUNCATE)\n+    operands[1] = XEXP (operands[1], 0);\n+}\")\n \n (define_insn \"extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(sign_extend:DI (match_operand:QI 1 \"general_extend_operand\" \"r,m\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n \t#\n-\tld%M1.b\t%m1, %0\")\n+\tld%M1.b\t%m1, %0\"\n+  [(set_attr \"type\" \"*,load_media\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:QI 1 \"register_operand\" \"r\")))]\n+\t(sign_extend:DI (match_operand:QI 1 \"extend_reg_operand\" \"r\")))]\n   \"TARGET_SHMEDIA && reload_completed\"\n   [(set (match_dup 0) (ashift:DI (subreg:DI (match_dup 1) 0) (const_int 56)))\n-   (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 56)))])\n+   (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 56)))]\n+  \"\n+{\n+  if (GET_CODE (operands[1]) == TRUNCATE)\n+    operands[1] = XEXP (operands[1], 0);\n+}\")\n+\n+(define_expand \"extendhisi2\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n+       (sign_extend:SI (match_operand:HI 1 \"general_extend_operand\" \"r,m\")))]\n+  \"\"\n+  \"\")\n \n-(define_insn \"extendhisi2\"\n+(define_insn \"*extendhisi2_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n \t(sign_extend:SI (match_operand:HI 1 \"general_movsrc_operand\" \"r,m\")))]\n   \"TARGET_SH1\"\n@@ -3044,7 +3191,34 @@\n   [(set_attr \"type\" \"arith,load\")\n    (set_attr \"insn_class\" \"ex_group,*\")])\n \n-(define_insn \"extendqisi2\"\n+(define_insn \"*extendhisi2_media\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"general_extend_operand\" \"r,m\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\t#\n+\tld%M1.w\t%m1, %0\"\n+  [(set_attr \"type\" \"arith_media,load_media\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"extend_reg_operand\" \"r\")))]\n+  \"TARGET_SHMEDIA && reload_completed\"\n+  [(set (match_dup 0) (ashift:SI (subreg:SI (match_dup 1) 0) (const_int 16)))\n+   (set (match_dup 0) (ashiftrt:SI (match_dup 0) (const_int 16)))]\n+  \"\n+{\n+  if (GET_CODE (operands[1]) == TRUNCATE)\n+    operands[1] = XEXP (operands[1], 0);\n+}\")\n+\n+(define_expand \"extendqisi2\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"general_extend_operand\" \"r,m\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*extendqisi2_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r,r\")\n \t(sign_extend:SI (match_operand:QI 1 \"general_movsrc_operand\" \"r,m\")))]\n   \"TARGET_SH1\"\n@@ -3054,6 +3228,27 @@\n   [(set_attr \"type\" \"arith,load\")\n    (set_attr \"insn_class\" \"ex_group,*\")])\n \n+(define_insn \"*extendqisi2_media\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"general_extend_operand\" \"r,m\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\t#\n+\tld%M1.b\t%m1, %0\"\n+  [(set_attr \"type\" \"arith_media,load_media\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"extend_reg_operand\" \"r\")))]\n+  \"TARGET_SHMEDIA && reload_completed\"\n+  [(set (match_dup 0) (ashift:SI (subreg:SI (match_dup 1) 0) (const_int 24)))\n+   (set (match_dup 0) (ashiftrt:SI (match_dup 0) (const_int 24)))]\n+   \"\n+{\n+  if (GET_CODE (operands[1]) == TRUNCATE)\n+    operands[1] = XEXP (operands[1], 0);\n+}\")\n+\n (define_insn \"extendqihi2\"\n   [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r,r\")\n \t(sign_extend:HI (match_operand:QI 1 \"general_movsrc_operand\" \"r,m\")))]\n@@ -3064,6 +3259,42 @@\n   [(set_attr \"type\" \"arith,load\")\n    (set_attr \"insn_class\" \"ex_group,*\")])\n \n+/* It would seem useful to combine the truncXi patterns into the movXi\n+   patterns, but unary operators are ignored when matching constraints,\n+   so we need separate patterns.  */\n+(define_insn \"truncdisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,m,m,f,r,f\")\n+\t(truncate:SI (match_operand:DI 1 \"register_operand\" \"r,r,f,r,f,f\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\tadd.l\t%1, r63, %0\n+\tst%M0.l\t%m0, %1\n+\tfst%M0.s\t%m0, %T1\n+\tfmov.ls\t%1, %0\n+\tfmov.sl\t%T1, %0\n+\tfmov.s\t%T1, %0\"\n+  [(set_attr \"type\"   \"arith_media,store_media,fstore_media,fload_media,fpconv_media,fmove_media\")])\n+\n+\n+(define_insn \"truncdihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=?r,m\")\n+\t(truncate:HI (match_operand:DI 1 \"register_operand\" \"r,r\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\tshlli\\\\t%1,48,%0\\;shlri\\\\t%0,48,%0\n+\tst%M0.w\t%m0, %1\"\n+  [(set_attr \"type\"   \"arith_media,store_media\")\n+   (set_attr \"length\" \"8,4\")])\n+\n+(define_insn \"truncdiqi2\"\n+  [(set (match_operand:QI 0 \"general_movdst_operand\" \"=r,m\")\n+\t(truncate:QI (match_operand:DI 1 \"register_operand\" \"r,r\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"@\n+\tandi\t%1, 255, %0\n+\tst%M0.b\t%m0, %1\"\n+  [(set_attr \"type\"   \"arith_media,store\")])\n+\n ;; -------------------------------------------------------------------------\n ;; Move instructions\n ;; -------------------------------------------------------------------------\n@@ -3228,8 +3459,8 @@\n   [(set_attr \"type\" \"pcload,move,load,move,prget,move,store,pcload\")])\n \n (define_insn \"*movsi_media\"\n-  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,m,f,m,f,r,f,*b*k,r,b*k\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,r,m,f,r,f,f,r,*b*k,T\"))]\n+  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,m,f,m,f,r,f,*b,r,b\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,r,m,f,r,f,f,r,*b,T\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -3251,8 +3482,8 @@\n    (set_attr \"length\" \"4,4,8,4,4,4,4,4,4,4,4,4,12\")])\n \n (define_insn \"*movsi_media_nofpu\"\n-  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,m,*b*k,r,b*k\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,r,r,*b*k,T\"))]\n+  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,r,r,m,*b,r,b\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"r,JS,ns,m,r,r,*b,T\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -3283,7 +3514,7 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"immediate_operand\" \"n\"))]\n-  \"TARGET_SHMEDIA\n+  \"TARGET_SHMEDIA && reload_completed\n    && ((GET_CODE (operands[1]) == CONST_INT\n \t&& ! CONST_OK_FOR_J (INTVAL (operands[1])))\n        || GET_CODE (operands[1]) == CONST_DOUBLE)\"\n@@ -3338,8 +3569,9 @@\n   [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")]\n \t\t    UNSPEC_ICACHE)]\n   \"TARGET_SHMEDIA\"\n-  \"icbi\t%0, 0\\;synci\"\n-  [(set_attr \"length\" \"8\")])\n+  \"ocbwb\t%0,0\\;synco\\;icbi\t%0, 0\\;synci\"\n+  [(set_attr \"length\" \"16\")\n+   (set_attr \"type\" \"invalidate_line_media\")])\n \n (define_insn \"ic_invalidate_line_compact\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"z\")\n@@ -3384,6 +3616,22 @@\n   \"\"\n   \"{ if (prepare_move_operands (operands, QImode)) DONE; }\")\n \n+(define_expand \"reload_inqi\"\n+  [(set (match_operand:SI 2 \"\" \"=&r\")\n+\t(match_operand:QI 1 \"inqhi_operand\" \"\"))\n+   (set (match_operand:QI 0 \"arith_reg_operand\" \"=r\")\n+\t(truncate:HI (match_dup 3)))]\n+  \"TARGET_SHMEDIA\"\n+  \"\n+{\n+  rtx inner = XEXP (operands[1], 0);\n+  int regno = REGNO (inner);\n+\n+  regno += HARD_REGNO_NREGS (regno, GET_MODE (inner)) - 1;\n+  operands[1] = gen_rtx_REG (SImode, regno);\n+  operands[3] = gen_rtx_REG (DImode, REGNO (operands[2]));\n+}\")\n+\n (define_insn \"movhi_i\"\n   [(set (match_operand:HI 0 \"general_movdst_operand\" \"=r,r,r,r,m,r,l,r\")\n \t(match_operand:HI 1 \"general_movsrc_operand\" \"Q,rI,m,t,r,l,r,i\"))]\n@@ -3417,7 +3665,8 @@\n (define_split\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(match_operand:HI 1 \"immediate_operand\" \"n\"))]\n-  \"TARGET_SHMEDIA && ! CONST_OK_FOR_J (INTVAL (operands[1]))\"\n+  \"TARGET_SHMEDIA && reload_completed\n+   && ! CONST_OK_FOR_J (INTVAL (operands[1]))\"\n   [(set (subreg:DI (match_dup 0) 0) (match_dup 1))])\n \n (define_expand \"movhi\"\n@@ -3426,6 +3675,22 @@\n   \"\"\n   \"{ if (prepare_move_operands (operands, HImode)) DONE; }\")\n \n+(define_expand \"reload_inhi\"\n+  [(set (match_operand:SI 2 \"\" \"=&r\")\n+\t(match_operand:HI 1 \"inqhi_operand\" \"\"))\n+   (set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n+\t(truncate:HI (match_dup 3)))]\n+  \"TARGET_SHMEDIA\"\n+  \"\n+{\n+  rtx inner = XEXP (operands[1], 0);\n+  int regno = REGNO (inner);\n+\n+  regno += HARD_REGNO_NREGS (regno, GET_MODE (inner)) - 1;\n+  operands[1] = gen_rtx_REG (SImode, regno);\n+  operands[3] = gen_rtx_REG (DImode, REGNO (operands[2]));\n+}\")\n+\n ;; ??? This should be a define expand.\n \n ;; x/r can be created by inlining/cse, e.g. for execute/961213-1.c\n@@ -3490,8 +3755,8 @@\n }\")\n \n (define_insn \"*movdi_media\"\n-  [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,f,m,f,r,f,*b*k,r,b*k\")\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rl,m,f,r,f,f,r,*b*k,T\"))]\n+  [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,f,m,f,r,f,*b,r,b\")\n+\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rl,m,f,r,f,f,r,*b,T\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n@@ -3513,8 +3778,8 @@\n    (set_attr \"length\" \"4,4,16,4,4,4,4,4,4,4,4,4,*\")])\n \n (define_insn \"*movdi_media_nofpu\"\n-  [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,*b*k,r,b*k\")\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rl,r,*b*k,T\"))]\n+  [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,*b,r,b\")\n+\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,JS,iF,m,rl,r,*b,T\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n@@ -4466,13 +4731,13 @@\n \tfmov.s\t%1, %0\n \tfmov.ls\t%1, %0\n \tfmov.sl\t%1, %0\n-\tadd\t%1, r63, %0\n+\tadd.l\t%1, r63, %0\n \t#\n \tfld%M1.s\t%m1, %0\n \tfst%M0.s\t%m0, %1\n \tld%M1.l\t%m1, %0\n \tst%M0.l\t%m0, %1\"\n-  [(set_attr \"type\" \"move,move,move,move,*,load,store,load,store\")])\n+  [(set_attr \"type\" \"fmove_media,fload_media,fpconv_media,arith_media,*,fload_media,fstore_media,load_media,store_media\")])\n \n (define_insn \"movsf_media_nofpu\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"=r,r,r,m\")\n@@ -4481,11 +4746,11 @@\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode))\"\n   \"@\n-\tadd\t%1, r63, %0\n+\tadd.l\t%1, r63, %0\n \t#\n \tld%M1.l\t%m1, %0\n \tst%M0.l\t%m0, %1\"\n-  [(set_attr \"type\" \"move,*,load,store\")])\n+  [(set_attr \"type\" \"arith_media,*,load_media,store_media\")])\n \n (define_split\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"\")\n@@ -4731,35 +4996,35 @@\n \n (define_expand \"bgt_media\"\n   [(set (pc)\n-\t(if_then_else (gt (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t  (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n+\t(if_then_else (gt (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r\")\n+\t\t\t  (match_operand:DI 2 \"arith_reg_or_0_operand\" \"r\"))\n \t\t      (label_ref:DI (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n (define_expand \"bge_media\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t  (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n+\t(if_then_else (ge (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r\")\n+\t\t\t  (match_operand:DI 2 \"arith_reg_or_0_operand\" \"r\"))\n \t\t      (label_ref:DI (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n (define_expand \"bgtu_media\"\n   [(set (pc)\n-\t(if_then_else (gtu (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t   (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n+\t(if_then_else (gtu (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r\")\n+\t\t\t   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"r\"))\n \t\t      (label_ref:DI (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n (define_expand \"bgeu_media\"\n   [(set (pc)\n-\t(if_then_else (geu (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t   (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n+\t(if_then_else (geu (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r\")\n+\t\t\t   (match_operand:DI 2 \"arith_reg_or_0_operand\" \"r\"))\n \t\t      (label_ref:DI (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n@@ -4777,11 +5042,11 @@\n   [(set_attr \"type\" \"cbranch_media\")])\n \n ;; These are only needed to make invert_jump() happy.\n-(define_insn \"*ble_media_i\"\n+(define_insn \"*blt_media_i\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"less_comparison_operator\"\n-\t\t\t[(match_operand:DI 1 \"arith_reg_operand\" \"rN\")\n-\t\t\t (match_operand:DI 2 \"arith_reg_operand\" \"rN\")])\n+\t\t\t[(match_operand:DI 1 \"arith_reg_or_0_operand\" \"rN\")\n+\t\t\t (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rN\")])\n \t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n@@ -6256,7 +6521,7 @@\n ;; them to do, because they can't be loaded directly into\n ;; non-branch-target registers.\n (define_insn \"*pt\"\n-  [(set (match_operand:DI 0 \"target_reg_operand\" \"=b*k\")\n+  [(set (match_operand:DI 0 \"target_reg_operand\" \"=b\")\n \t(match_operand:DI 1 \"\" \"T\"))]\n   \"TARGET_SHMEDIA && flag_pic\n    && EXTRA_CONSTRAINT_T (operands[1])\"\n@@ -6265,7 +6530,7 @@\n    (set_attr \"length\" \"*\")])\n \n (define_insn \"*ptb\"\n-  [(set (match_operand:DI 0 \"target_reg_operand\" \"=b*k\")\n+  [(set (match_operand:DI 0 \"target_reg_operand\" \"=b\")\n \t(const:DI (unspec:DI [(match_operand:DI 1 \"\" \"T\")]\n \t\t\t     UNSPEC_DATALABEL)))]\n   \"TARGET_SHMEDIA && flag_pic\n@@ -6546,7 +6811,7 @@\n \t\t       (label_ref (match_dup 2))] UNSPEC_CASESI))\n \t      (clobber (match_dup 3))])\n    (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI R0_REG)))]\n-  \"LABEL_NUSES (operands[2])++;\")\n+  \"if (GET_CODE (operands[2]) == CODE_LABEL) LABEL_NUSES (operands[2])++;\")\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -6560,7 +6825,7 @@\n \t      (unspec:SI [(reg:SI R0_REG) (match_dup 1)\n \t\t       (label_ref (match_dup 2))] UNSPEC_CASESI))\n \t      (clobber (match_dup 3))])]\n-  \"LABEL_NUSES (operands[2])++;\")\n+  \"if (GET_CODE (operands[2]) == CODE_LABEL) LABEL_NUSES (operands[2])++;\")\n \n (define_insn \"*casesi_worker\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -6774,6 +7039,62 @@\n   \"jsr @r0%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")])\n \n+;; ??? could make arg 0 an offsettable memory operand - and do likewise\n+;; for cache invalidation - to allow to save an add in the code that\n+;; calculates the address.\n+(define_insn \"shmedia32_initialize_trampoline_big\"\n+  [(set (mem:BLK (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n+\t(unspec [(match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t (match_operand:SI 2 \"arith_reg_operand\" \"r\")]\n+\t UNSPEC_INIT_TRAMP))\n+   (clobber (match_scratch:SI 3 \"=&r\"))\n+   (clobber (match_scratch:SI 4 \"=&r\"))]\n+  \"TARGET_SHMEDIA32 && ! TARGET_LITTLE_ENDIAN\"\n+  \"movi 0x433,%3\n+   shori 0x432,%3\n+   mshflo.w %1,%3,%4\n+   mextr7 %4,%4,%4\n+   shlli %4,2,%4\n+   st.q %0,0,%4\n+   mshflo.w %2,%3,%4\n+   shlli %4,10,%4\n+   addi %4,0x10,%4\n+   movi 0x6bf1,%3\n+   shori 0x0600,%3\n+   mextr4 %4,%3,%3\n+   st.q %0,8,%3\n+   shori 0x4401,%4\n+   shori 0xfff0,%4\n+   st.q %0,16,%4\"\n+  [(set_attr \"length\" \"64\")])\n+\n+(define_insn \"shmedia32_initialize_trampoline_little\"\n+  [(set (mem:BLK (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n+\t(unspec [(match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t (match_operand:SI 2 \"arith_reg_operand\" \"r\")]\n+\t UNSPEC_INIT_TRAMP))\n+   (clobber (match_scratch:SI 3 \"=&r\"))\n+   (clobber (match_scratch:SI 4 \"=&r\"))]\n+  \"TARGET_SHMEDIA32 && TARGET_LITTLE_ENDIAN\"\n+  \"movi 0x433,%3\n+   shori 0x432,%3\n+   mshflo.w %1,%3,%4\n+   mextr3 %4,%4,%4\n+   shlli %4,2,%4\n+   st.q %0,0,%4\n+   mshflo.w %2,%3,%4\n+   shlli %4,10,%4\n+   addi %4,0x10,%4\n+   movi 0x6bf1,%3\n+   shori 0x0600,%3\n+   shori 0x4401,%3\n+   shori 0xfff0,%3\n+   st.l %0,16,%r4\n+   st.l %0,20,%r3\n+   mshfhi.l %3,%4,%4\n+   st.q %0,8,%4\"\n+  [(set_attr \"length\" \"68\")])\n+\n (define_expand \"prologue\"\n   [(const_int 0)]\n   \"\"\n@@ -9831,6 +10152,88 @@\n   \"ftrv %1, %2, %0\"\n   [(set_attr \"type\" \"fparith_media\")])\n \n+(define_insn \"nsb\"\n+  [(set (match_operand:QI 0 \"arith_reg_dest\" \"=r\")\n+\t(unspec:QI [(match_operand:DI 1 \"arith_reg_operand\" \"r\")]\n+\t\t   UNSPEC_NSB))]\n+  \"TARGET_SHMEDIA\"\n+  \"nsb\t%1, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n+\n+(define_insn \"nsbsi\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(zero_extend:SI\n+\t (unspec:QI [(match_operand:DI 1 \"arith_reg_operand\" \"r\")]\n+\t\t    UNSPEC_NSB)))]\n+  \"TARGET_SHMEDIA\"\n+  \"nsb\t%1, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n+\n+(define_insn \"nsbdi\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(zero_extend:DI\n+\t (unspec:QI [(match_operand:DI 1 \"arith_reg_operand\" \"r\")]\n+\t\t    UNSPEC_NSB)))]\n+  \"TARGET_SHMEDIA\"\n+  \"nsb\t%1, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n+\n+(define_expand \"ffsdi2\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"\")\n+\t(ffs:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"\n+{\n+  rtx scratch = gen_reg_rtx (DImode);\n+  rtx last;\n+\n+  emit_insn (gen_adddi3 (scratch, operands[1], GEN_INT (-1)));\n+  emit_insn (gen_xordi3 (scratch, operands[1], scratch));\n+  emit_insn (gen_lshrdi3_media (scratch, scratch, const1_rtx));\n+  emit_insn (gen_nsbdi (scratch, scratch));\n+  emit_insn (gen_adddi3 (scratch, scratch, GEN_INT (-64)));\n+  emit_insn (gen_movdicc_false (scratch, operands[1], const0_rtx, scratch));\n+  last = emit_insn (gen_subdi3 (operands[0], const0_rtx, scratch));\n+  REG_NOTES (last)\n+    = gen_rtx_EXPR_LIST (REG_EQUAL,\n+\t\t\t gen_rtx_FFS (DImode, operands[0]), REG_NOTES (last));\n+  DONE;\n+}\")\n+\n+(define_expand \"ffssi2\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n+\t(ffs:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")))]\n+  \"TARGET_SHMEDIA\"\n+  \"\n+{\n+  rtx scratch = gen_reg_rtx (SImode);\n+  rtx discratch = gen_reg_rtx (DImode);\n+  rtx last;\n+\n+  emit_insn (gen_adddi3z_media (discratch, operands[1],\n+\t\t\t\tforce_reg (SImode, GEN_INT (-1))));\n+  emit_insn (gen_andcdi3 (discratch, discratch,\n+\t\t\t  simplify_gen_subreg (DImode, operands[1],\n+\t\t\t\t\t       SImode, 0)));\n+  emit_insn (gen_nsbsi (scratch, discratch));\n+  last = emit_insn (gen_subsi3 (operands[0],\n+\t\t\t\tforce_reg (SImode, GEN_INT (-64)), scratch));\n+  REG_NOTES (last)\n+    = gen_rtx_EXPR_LIST (REG_EQUAL,\n+\t\t\t gen_rtx_FFS (SImode, operands[0]), REG_NOTES (last));\n+  DONE;\n+}\")\n+\n+(define_insn \"byterev\"\n+  [(set (match_operand:V8QI 0 \"arith_reg_dest\" \"=r\")\n+\t(vec_select:V8QI (match_operand:V8QI 1 \"arith_reg_operand\" \"r\")\n+\t\t\t (parallel [(const_int 7) (const_int 6) (const_int 5)\n+\t\t\t\t    (const_int 4) (const_int 3) (const_int 2)\n+\t\t\t\t    (const_int 1) (const_int 0)])))]\n+  \"TARGET_SHMEDIA\"\n+  \"byterev\t%1, %0\"\n+  [(set_attr \"type\" \"arith_media\")])\n+\n ;; The following description  models the\n ;; SH4 pipeline using the DFA based scheduler. \n ;; The DFA based description is better way to model "}]}