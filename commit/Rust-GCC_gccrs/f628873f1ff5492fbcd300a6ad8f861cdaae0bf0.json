{"sha": "f628873f1ff5492fbcd300a6ad8f861cdaae0bf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyODg3M2YxZmY1NDkyZmJjZDMwMGE2YWQ4Zjg2MWNkYWFlMGJmMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-05-15T07:19:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-15T07:19:38Z"}, "message": "fold-const.c (constant_boolean_node): New function.\n\n\t* fold-const.c (constant_boolean_node): New function.\n\t(fold): Use it.\n\nFrom-SVN: r19775", "tree": {"sha": "2e00495fcce6dbb97ffa17134d5329d55dab5c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e00495fcce6dbb97ffa17134d5329d55dab5c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f628873f1ff5492fbcd300a6ad8f861cdaae0bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f628873f1ff5492fbcd300a6ad8f861cdaae0bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f628873f1ff5492fbcd300a6ad8f861cdaae0bf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f628873f1ff5492fbcd300a6ad8f861cdaae0bf0/comments", "author": null, "committer": null, "parents": [{"sha": "8ebe42f1e42893559ba7403f9d9f8001dae658cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebe42f1e42893559ba7403f9d9f8001dae658cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ebe42f1e42893559ba7403f9d9f8001dae658cc"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "3b0c921e8cbf989bbb63f4a879993496615f7302", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f628873f1ff5492fbcd300a6ad8f861cdaae0bf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f628873f1ff5492fbcd300a6ad8f861cdaae0bf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f628873f1ff5492fbcd300a6ad8f861cdaae0bf0", "patch": "@@ -1,3 +1,8 @@\n+Fri May 15 07:20:03 1998  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* fold-const.c (constant_boolean_node): New function.\n+\t(fold): Use it.\n+\n Fri May 15 11:21:16 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.c (gen_shl_and): Don't sign extend constant for kind two."}, {"sha": "c47f80a7b68251d7d17839e24071e68a26bd98a9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f628873f1ff5492fbcd300a6ad8f861cdaae0bf0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f628873f1ff5492fbcd300a6ad8f861cdaae0bf0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f628873f1ff5492fbcd300a6ad8f861cdaae0bf0", "patch": "@@ -94,6 +94,7 @@ static tree unextend\t\tPROTO((tree, int, int, tree));\n static tree fold_truthop\tPROTO((enum tree_code, tree, tree, tree));\n static tree strip_compound_expr PROTO((tree, tree));\n static int multiple_of_p\tPROTO((tree, tree, tree));\n+static tree constant_boolean_node PROTO((int, tree));\n \n #ifndef BRANCH_COST\n #define BRANCH_COST 1\n@@ -3702,6 +3703,27 @@ strip_compound_expr (t, s)\n   return t;\n }\n \f\n+/* Return a node which has the indicated constant VALUE (either 0 or\n+   1), and is of the indicated TYPE.  */\n+\n+tree\n+constant_boolean_node (value, type)\n+     int value;\n+     tree type;\n+{\n+  if (type == integer_type_node)\n+    return value ? integer_one_node : integer_zero_node;\n+  else if (TREE_CODE (type) == BOOLEAN_TYPE)\n+    return truthvalue_conversion (value ? integer_one_node :\n+\t\t\t\t  integer_zero_node); \n+  else \n+    {\n+      tree t = build_int_2 (value, 0);\n+      TREE_TYPE (t) = type;\n+      return t;\n+    }\n+}\n+\n /* Perform constant folding and related simplification of EXPR.\n    The related simplifications include x*1 => x, x*0 => 0, etc.,\n    and application of the associative law.\n@@ -5343,14 +5365,7 @@ fold (expr)\n \t    case GE_EXPR:\n \t    case LE_EXPR:\n \t      if (INTEGRAL_TYPE_P (TREE_TYPE (arg0)))\n-\t\t{\n-\t\t  if (type == integer_type_node)\n-\t\t    return integer_one_node;\n-\n-\t\t  t = build_int_2 (1, 0);\n-\t\t  TREE_TYPE (t) = type;\n-\t\t  return t;\n-\t\t}\n+\t\treturn constant_boolean_node (1, type);\n \t      code = EQ_EXPR;\n \t      TREE_SET_CODE (t, code);\n \t      break;\n@@ -5362,12 +5377,7 @@ fold (expr)\n \t      /* ... fall through ...  */\n \t    case GT_EXPR:\n \t    case LT_EXPR:\n-\t      if (type == integer_type_node)\n-\t\treturn integer_zero_node;\n-\n-\t      t = build_int_2 (0, 0);\n-\t      TREE_TYPE (t) = type;\n-\t      return t;\n+\t      return constant_boolean_node (0, type);\n \t    default:\n \t      abort ();\n \t    }"}]}