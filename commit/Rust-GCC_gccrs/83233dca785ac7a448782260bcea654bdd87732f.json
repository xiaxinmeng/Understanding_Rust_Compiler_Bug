{"sha": "83233dca785ac7a448782260bcea654bdd87732f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMyMzNkY2E3ODVhYzdhNDQ4NzgyMjYwYmNlYTY1NGJkZDg3NzMyZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-07-05T14:04:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-07-05T14:04:46Z"}, "message": "cp-tree.h (IS_AGGR_TYPE): Include instantiated template template parameters.\n\n\t* cp-tree.h (IS_AGGR_TYPE): Include instantiated template template\n\tparameters.\n\t(IMPLICIT_TYPENAME_TYPE_DECL_P): New macro.\n\t* decl.c (push_class_binding): Use it.\n\t(lookup_name_real): Likewise.\n\nFrom-SVN: r27948", "tree": {"sha": "027b22f1ae8696b21844f5e4118780cea458054a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/027b22f1ae8696b21844f5e4118780cea458054a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83233dca785ac7a448782260bcea654bdd87732f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83233dca785ac7a448782260bcea654bdd87732f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83233dca785ac7a448782260bcea654bdd87732f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83233dca785ac7a448782260bcea654bdd87732f/comments", "author": null, "committer": null, "parents": [{"sha": "c704c83cbd4edda438c056fcd2c9f27eeb2497fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c704c83cbd4edda438c056fcd2c9f27eeb2497fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c704c83cbd4edda438c056fcd2c9f27eeb2497fc"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "90011a3b9e0954907bc11de6696e4b6bc7a80d9f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83233dca785ac7a448782260bcea654bdd87732f", "patch": "@@ -1,3 +1,11 @@\n+1999-07-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (IS_AGGR_TYPE): Include instantiated template template\n+\tparameters.\n+\t(IMPLICIT_TYPENAME_TYPE_DECL_P): New macro.\n+\t* decl.c (push_class_binding): Use it.\n+\t(lookup_name_real): Likewise.\n+\n 1999-07-02  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* cp-tree.h (widest_integer_literal_type_node,"}, {"sha": "b84a6adda5fea16d28753597b880caad13ac1f87", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=83233dca785ac7a448782260bcea654bdd87732f", "patch": "@@ -587,13 +587,16 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n #define TYPE_MAIN_DECL(NODE) (TYPE_STUB_DECL (TYPE_MAIN_VARIANT (NODE)))\n \n /* Nonzero if T is a class (or struct or union) type.  Also nonzero\n-   for template type parameters and typename types.  Despite its name,\n+   for template type parameters, typename types, and instantiated\n+   template template parameters.  Despite its name,\n    this macro has nothing to do with the definition of aggregate given\n    in the standard.  Think of this macro as MAYBE_CLASS_TYPE_P.  */\n #define IS_AGGR_TYPE(t)\t\t\t\t\\\n-  (TREE_CODE (t) == TEMPLATE_TYPE_PARM \t\t\\\n-   || TREE_CODE (t) == TYPENAME_TYPE \t\t\\\n+  (TREE_CODE (t) == TEMPLATE_TYPE_PARM\t\t\\\n+   || TREE_CODE (t) == TYPENAME_TYPE\t\t\\\n    || TREE_CODE (t) == TYPEOF_TYPE\t\t\\\n+   || (TREE_CODE (t) == TEMPLATE_TEMPLATE_PARM\t\\\n+       && TYPE_TEMPLATE_INFO (t))\t\t\\\n    || TYPE_LANG_FLAG_5 (t))\n \n /* Set IS_AGGR_TYPE for T to VAL.  T must be a class, struct, or \n@@ -1517,6 +1520,13 @@ struct lang_decl\n #define IMPLICIT_TYPENAME_P(NODE) \\\n   (TREE_CODE (NODE) == TYPENAME_TYPE && TREE_TYPE (NODE))\n \n+/* Nonzero if NODE is a TYPE_DECL that should not be visible because\n+   it is from a dependent base class.  */\n+#define IMPLICIT_TYPENAME_TYPE_DECL_P(NODE) \t\\\n+  (TREE_CODE (NODE) == TYPE_DECL\t\t\\\n+   && DECL_ARTIFICIAL (NODE)\t\t\t\\\n+   && IMPLICIT_TYPENAME_P (TREE_TYPE (NODE)))\n+\n /* Nonzero in INTEGER_CST means that this int is negative by dint of\n    using a twos-complement negated operand.  */\n #define TREE_NEGATED_INT(NODE) (TREE_LANG_FLAG_0 (NODE))"}, {"sha": "cad878ae9e2be025a08687447b21f1b979b5500b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=83233dca785ac7a448782260bcea654bdd87732f", "patch": "@@ -1256,8 +1256,7 @@ push_class_binding (id, decl)\n \t context for an implicit typename declaration is always\n \t the derived class in which the lookup was done, so the checks\n \t based on the context of DECL below will not trigger.  */\n-      if (TREE_CODE (decl) == TYPE_DECL \n-\t  && IMPLICIT_TYPENAME_P (TREE_TYPE (decl)))\n+      if (IMPLICIT_TYPENAME_TYPE_DECL_P (decl))\n \tINHERITED_VALUE_BINDING_P (binding) = 1;\n       else\n \t{\n@@ -5877,15 +5876,13 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \tbinding = NULL_TREE;\n \n       if (binding\n-\t  && (!val || !(TREE_CODE (binding) == TYPE_DECL\n-\t\t\t&& IMPLICIT_TYPENAME_P (TREE_TYPE (binding)))))\n+\t  && (!val || !IMPLICIT_TYPENAME_TYPE_DECL_P (binding)))\n \t{\n \t  if (val_is_implicit_typename && !yylex)\n \t    warn_about_implicit_typename_lookup (val, binding);\n \t  val = binding;\n \t  val_is_implicit_typename \n-\t    = (TREE_CODE (val) == TYPE_DECL\n-\t       && IMPLICIT_TYPENAME_P (TREE_TYPE (val)));\n+\t    = IMPLICIT_TYPENAME_TYPE_DECL_P (val);\n \t  if (!val_is_implicit_typename)\n \t    break;\n \t}"}, {"sha": "15874f0b025c677f50fcac87ae00e6337f40063e", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/template2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate2.C?ref=83233dca785ac7a448782260bcea654bdd87732f", "patch": "@@ -11,4 +11,4 @@ template <template <typename> class C, typename T> class foo {\n };\n \n template <template <typename> class C, typename T> foo<C,T>::foo(bar)\n-{} // gets bogus error - C<T> not a class - XFAIL *-*-*\n+{} // gets bogus error - C<T> not a class"}, {"sha": "d46ec603286dde91118c034e5f737848618b7e63", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/typename1.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename1.C?ref=83233dca785ac7a448782260bcea654bdd87732f", "patch": "@@ -5,15 +5,13 @@\n // by Alexandre Oliva <oliva@dcc.unicamp.br>\n // based on bug report by Nick Rasmussen <nick@jive.org>\n \n-// crash test - XFAIL *-*-*\n-\n template <class T> struct foo;\n \n template <class T> struct bar {\n   typedef int foo;\n };\n \n template <class T> struct baz {\n-  typedef bar<T>::foo foo; // ERROR - missing typename\n+  typedef bar<T>::foo foo; // ERROR - missing typename - XFAIL *-*-*\n   void m(foo);\n };"}, {"sha": "2428206a04a277145f37ca41103326b187644e1e", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/typename2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83233dca785ac7a448782260bcea654bdd87732f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename2.C?ref=83233dca785ac7a448782260bcea654bdd87732f", "patch": "@@ -24,5 +24,5 @@ template <class T> struct bar {\n \n template <class T> struct baz {\n   typedef bar<T>::foo foo; // ERROR - implicit typename - XFAIL *-*-*\n-  void m(foo); // gets bogus error - dependent base class - XFAIL *-*-*\n+  void m(foo); \n };"}]}