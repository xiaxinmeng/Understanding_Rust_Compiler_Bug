{"sha": "bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMxODUzNWEzZTNhOWE3Zjk4Y2E0Zjg2Y2E2N2U5MzdiZGU2YTg4Mw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-10T23:28:12Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-10T23:28:12Z"}, "message": "objc.h: Updated comments.\n\n2010-10-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc/objc.h: Updated comments.\n        * objc/objc-api.h: (object_copy): Added one argument; use a\n        #define to maintain backwards-compatibility.  Moved\n        _objc_object_alloc, _objc_object_copy, _objc_object_dispose and\n        objc_get_uninstalled_dtable into\n        objc/deprecated/objc_get_uninstalled_dtable.h and\n        objc/deprecated/objc_object_alloc.h.  Include these files.\n        * objc/deprecated/objc_get_uninstalled_dtable.h: New.\n        * objc/deprecated/objc_object_alloc.h: New.\n        * objc/runtime.h (set_getName): New.\n        (sel_getType): New.\n        (sel_getUid): New.\n        (sel_registerName): New.\n        (sel_registerTypedName): New.\n        (sel_isEqual): New.\n        (class_createInstance): New.\n        (object_copy): New.\n        (object_dispose): New.\n        * objects.c: Do not include tconfig.h.  Include gc_typed.h if\n        building the garbage collection version.\n        (__objc_object_alloc): Removed.\n        (__objc_object_copy): Removed.\n        (__objc_object_dispose): Removed.\n        (class_createInstance): New from code in class_create_instance.\n        Cast second argument of GC_malloc_explicitly_typed.  Use\n        objc_calloc.  Do not call _objc_object_alloc.\n        (class_create_instance): Call class_createInstance.\n        (object_copy): Added extraBytes argument.  Do not call\n        _objc_object_copy.\n        (object_dispose): Do not call _objc_object_dispose.\n        * memory.c (objc_free): When using garbage collection, mark the\n        argument as unused.\n        * selector.c (sel_getName): New.\n        (sel_get_name): Call sel_getName.\n        (sel_getType): New.\n        (sel_get_type): Call sel_getType.\n        (sel_registerName): New.\n        (sel_register_name): Call sel_registerName.\n        (sel_registerTypedName): New.\n        (sel_register_typed_name): Call sel_registerTypedName.\n        (sel_getUid): New.\n        (sel_get_uid): Call sel_getUid.\n\nFrom-SVN: r165264", "tree": {"sha": "17394fa0ccdc53e9f5134ffd956a7fcc4ca13406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17394fa0ccdc53e9f5134ffd956a7fcc4ca13406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3735479a3544423fb067c7c6c848159953ba266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3735479a3544423fb067c7c6c848159953ba266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3735479a3544423fb067c7c6c848159953ba266"}], "stats": {"total": 299, "additions": 227, "deletions": 72}, "files": [{"sha": "a63e43adeea39f7ba0e0cade6eeff6a67acaaa46", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -1,3 +1,48 @@\n+2010-10-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/objc.h: Updated comments.\n+\t* objc/objc-api.h: (object_copy): Added one argument; use a\n+\t#define to maintain backwards-compatibility.  Moved\n+\t_objc_object_alloc, _objc_object_copy, _objc_object_dispose and\n+\tobjc_get_uninstalled_dtable into\n+\tobjc/deprecated/objc_get_uninstalled_dtable.h and\n+\tobjc/deprecated/objc_object_alloc.h.  Include these files.\n+\t* objc/deprecated/objc_get_uninstalled_dtable.h: New.\n+\t* objc/deprecated/objc_object_alloc.h: New.\n+\t* objc/runtime.h (set_getName): New.\n+\t(sel_getType): New.\n+\t(sel_getUid): New.\n+\t(sel_registerName): New.\n+\t(sel_registerTypedName): New.\n+\t(sel_isEqual): New.\n+\t(class_createInstance): New.\n+\t(object_copy): New.\n+\t(object_dispose): New.\n+\t* objects.c: Do not include tconfig.h.  Include gc_typed.h if\n+\tbuilding the garbage collection version.\n+\t(__objc_object_alloc): Removed.\n+\t(__objc_object_copy): Removed.\n+\t(__objc_object_dispose): Removed.\n+\t(class_createInstance): New from code in class_create_instance.\n+\tCast second argument of GC_malloc_explicitly_typed.  Use\n+\tobjc_calloc.  Do not call _objc_object_alloc.\n+\t(class_create_instance): Call class_createInstance.\n+\t(object_copy): Added extraBytes argument.  Do not call\n+\t_objc_object_copy.\n+\t(object_dispose): Do not call _objc_object_dispose.\n+\t* memory.c (objc_free): When using garbage collection, mark the\n+\targument as unused.\n+\t* selector.c (sel_getName): New.\n+\t(sel_get_name): Call sel_getName.\n+\t(sel_getType): New.\n+\t(sel_get_type): Call sel_getType.\n+\t(sel_registerName): New.\n+\t(sel_register_name): Call sel_registerName.\n+\t(sel_registerTypedName): New.\n+\t(sel_register_typed_name): Call sel_registerTypedName.\n+\t(sel_getUid): New.\n+\t(sel_get_uid): Call sel_getUid.\n+\t\n 2010-10-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/objc-api.h: Define Method, Method_t, Category and"}, {"sha": "a0d6e130ad90266ec1557e131e36ebb871e01fdf", "filename": "libobjc/memory.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fmemory.c?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -30,6 +30,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   so that they work properly with garbage collectors.\n */\n \n+/* TODO: Turn these into macros or inline functions.  */\n+\n #include \"objc-private/common.h\"\n #include \"objc-private/error.h\"\n \n@@ -85,7 +87,7 @@ objc_calloc (size_t nelem, size_t size)\n }\n \n void\n-objc_free (void *mem)\n+objc_free (void *mem __attribute__ ((__unused__)))\n {\n   return;\n }"}, {"sha": "48d508a15926d27fed2ac7eca8968d416c676f99", "filename": "libobjc/objc/deprecated/objc_get_uninstalled_dtable.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fdeprecated%2Fobjc_get_uninstalled_dtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fdeprecated%2Fobjc_get_uninstalled_dtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc_get_uninstalled_dtable.h?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -0,0 +1,2 @@\n+objc_EXPORT struct sarray* \n+objc_get_uninstalled_dtable(void);"}, {"sha": "f6336ca8efadf7d079c5b89a3b99d78db65926ec", "filename": "libobjc/objc/deprecated/objc_object_alloc.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fdeprecated%2Fobjc_object_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fdeprecated%2Fobjc_object_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc_object_alloc.h?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -0,0 +1,8 @@\n+/* These functions are deprecated and currently ignored.  */\n+/*\n+** Hook functions for allocating, copying and disposing of instances\n+*/\n+objc_EXPORT id (*_objc_object_alloc)(Class _class);\n+objc_EXPORT id (*_objc_object_copy)(id object);\n+objc_EXPORT id (*_objc_object_dispose)(id object);\n+"}, {"sha": "0763733756109a48a509a16cdda5c077440eb876", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -193,12 +193,7 @@ objc_EXPORT Class (*_objc_lookup_class)(const char *name);\n */\n objc_EXPORT void (*_objc_load_callback)(Class _class, Category* category);\n \n-/*\n-** Hook functions for allocating, copying and disposing of instances\n-*/\n-objc_EXPORT id (*_objc_object_alloc)(Class _class);\n-objc_EXPORT id (*_objc_object_copy)(id object);\n-objc_EXPORT id (*_objc_object_dispose)(id object);\n+#include \"deprecated/objc_object_alloc.h\"\n \n /*\n   Standard functions for memory allocation and disposal.  Users should\n@@ -326,7 +321,12 @@ objc_EXPORT IMP method_get_imp(Method_t method);\n \n objc_EXPORT IMP get_imp (Class _class, SEL sel);\n \n-objc_EXPORT id object_copy(id object);\n+/* object_copy used to take a single argument in the traditional GNU\n+   Objective-C Runtime API (the one declared here), but takes 2 in the\n+   modern API (implemented in the actual runtime).  Define the old\n+   object_copy in terms of the new one.  */\n+objc_EXPORT id object_copy (id object, size_t size);\n+#define object_copy(X) (object_copy ((X), 0))\n \n objc_EXPORT id object_dispose(id object);\n \n@@ -394,8 +394,7 @@ object_is_meta_class (id object)\n \t  &&  !object_is_class (object));\n }\n \n-objc_EXPORT struct sarray* \n-objc_get_uninstalled_dtable(void);\n+#include \"deprecated/objc_get_uninstalled_dtable.h\"\n \n #ifdef __cplusplus\n }"}, {"sha": "76812ad5f7967f49825d6759b194729158a0247d", "filename": "libobjc/objc/objc.h", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc.h?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -88,22 +88,20 @@ typedef struct objc_class *Class;\n #include \"deprecated/MetaClass.h\"\n #include \"deprecated/struct_objc_class.h\"\n \n-/* An 'id' is an object of an unknown class.  The struct objc_object\n-   is private and what you see here is only the beginning of the\n-   struct.  In theory, the fact that 'class_pointer' is public means\n-   that if you have any object 'object', you can immediately get its\n-   class by using '((id)object)->class_pointer', but this is not\n-   recommended; you should use object_get_class(object) instead.\n+/* An 'id' is an object of an unknown class.  The way the object data\n+   is stored inside the object is private and what you see here is\n+   only the beginning of the actual struct.  The first field is always\n+   a pointer to the Class that the object belongs to.  If performance\n+   is paramount, you can use this knowledge to get the class of an\n+   object by doing '((id)object)->class_pointer'.\n */\n typedef struct objc_object\n {\n   /* 'class_pointer' is the Class that the object belongs to.  In case\n-     of a Class object, this pointer points to the meta class.  */\n-  /* Note that the Apple/NeXT runtime calls this variable 'isa'.\n-     TODO: Decide if we want to call it 'isa' too.  TODO: Why not\n-     simply hide this pointer and force users to use the proper API to\n-     get it ?\n-  */\n+     of a Class object, this pointer points to the meta class.\n+\n+     Compatibility Note: The Apple/NeXT runtime calls this field\n+     'isa'.  */\n   Class class_pointer;\n } *id;\n "}, {"sha": "73c05d96e3237925e07492c88046e91a72afe11f", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -145,7 +145,67 @@ struct objc_method_description\n #define _F_ONEWAY\t0x10\n #define _F_GCINVISIBLE\t0x20\n \n-/* TODO: Add all the functions in the API.  */\n+\n+/** Internals: the following functions are in selector.c.  */\n+\n+/* Return the name of a given selector.  */\n+objc_EXPORT const char *sel_getName (SEL selector);\n+\n+/* Return the type of a given selector.\n+\n+   Compatibility Note: the Apple/NeXT runtime has untyped selectors,\n+   so it does not have this function, which is specific to the GNU\n+   Runtime.  */\n+objc_EXPORT const char *sel_getType (SEL selector);\n+\n+/* This is the same as sel_registerName ().  Please use\n+   sel_registerName () instead.  */\n+objc_EXPORT SEL sel_getUid (const char *name);\n+\n+/* Register a selector with a given name (but unspecified types).  If\n+   you know the types, it is better to call sel_registerTypedName().\n+   If a selector with this name already exists, it is returned.  */\n+objc_EXPORT SEL sel_registerName (const char *name);\n+\n+/* Register a selector with a given name and types.  If a selector\n+   with this name and types already exists, it is returned.\n+\n+   Compatibility Note: the Apple/NeXT runtime has untyped selectors,\n+   so it does not have this function, which is specific to the GNU\n+   Runtime.  */\n+objc_EXPORT SEL set_registerTypedName (const char *name, const char *type);\n+\n+/* Return YES if first_selector is the same as second_selector, and NO\n+   if not.  */\n+objc_EXPORT BOOL sel_isEqual (SEL first_selector, SEL second_selector);\n+\n+\n+/** Internals: the following functions are in objects.c.  */\n+\n+/* Create an instance of class 'class', adding extraBytes to the size\n+   of the returned object.  This method allocates the appropriate\n+   amount of memory for the instance, initializes it to zero, then\n+   calls all the C++ constructors on appropriate C++ instance\n+   variables of the instance (if any) (TODO: This is not implemented\n+   yet).  */\n+objc_EXPORT id class_createInstance (Class class, size_t extraBytes);\n+\n+/* Copy an object and return the copy.  extraBytes should be identical\n+   to the extraBytes parameter that was passed when creating the\n+   original object.  */\n+objc_EXPORT id object_copy (id object, size_t extraBytes);\n+\n+/* Dispose of an object.  This method calls the appropriate C++\n+   destructors on appropriate C++ instance variables of the instance\n+   (if any) (TODO: This is not implemented yet), then frees the memory\n+   for the instance.  */\n+objc_EXPORT id object_dispose (id object);\n+\n+\n+/* TODO: Add all the other functions in the API.  */\n+\n+\n+/** Internals: the following functions are in objc-foreach.c.  */\n \n /* 'objc_enumerationMutation()' is called when a collection is\n    mutated while being \"fast enumerated\".  That is a hard error, and\n@@ -199,6 +259,8 @@ struct __objcFastEnumerationState\n */\n \n \n+/** Internals: the following functions are implemented in encoding.c.  */\n+\n /* Traditional GNU Objective-C Runtime functions that are currently\n    used to implement method forwarding.\n */"}, {"sha": "d37a95d17b4a108161569b5148549d58e0758670", "filename": "libobjc/objects.c", "status": "modified", "additions": 45, "deletions": 37, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjects.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fobjects.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjects.c?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -23,51 +23,67 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n-#include <string.h> /* For memset */\n-#include \"tconfig.h\"         /* include defs of bzero for target */\n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\"\n #include \"objc-private/runtime.h\"\t\t/* the kitchen sink */\n \n+#include <string.h> /* For memcpy()  */\n+\n #if OBJC_WITH_GC\n # include <gc.h>\n+# include <gc_typed.h>\n #endif\n \n-id __objc_object_alloc (Class);\n-id __objc_object_dispose (id);\n-id __objc_object_copy (id);\n-\n-id (*_objc_object_alloc) (Class)   = __objc_object_alloc;   /* !T:SINGLE */ \n-id (*_objc_object_dispose) (id)    = __objc_object_dispose; /* !T:SINGLE */\n-id (*_objc_object_copy) (id)       = __objc_object_copy;    /* !T:SINGLE */\n-\n+/* FIXME: The semantics of extraBytes are not really clear.  */\n+inline\n id\n-class_create_instance (Class class)\n+class_createInstance (Class class, size_t extraBytes)\n {\n   id new = nil;\n \n #if OBJC_WITH_GC\n   if (CLS_ISCLASS (class))\n-    new = (id) GC_malloc_explicitly_typed (class->instance_size,\n-\t\t\t\t\t   class->gc_object_type);\n+    new = (id) GC_malloc_explicitly_typed (class->instance_size + extraBytes,\n+\t\t\t\t\t   (GC_descr)class->gc_object_type);\n #else\n   if (CLS_ISCLASS (class))\n-    new = (*_objc_object_alloc) (class);\n+    new = (id) objc_calloc (class->instance_size + extraBytes, 1);\n #endif\n \n   if (new != nil)\n     {\n-      memset (new, 0, class->instance_size);\n+      /* There is no need to zero the memory, since both\n+\t GC_malloc_explicitly_typed and objc_calloc return zeroed\n+\t memory.  */\n       new->class_pointer = class;\n     }\n+\n+  /* TODO: Invoke C++ constructors on all appropriate C++ instance\n+     variables of the new object.  */\n+\n   return new;\n }\n \n+/* Traditional GNU Objective-C Runtime API.  */\n+id\n+class_create_instance (Class class)\n+{\n+  return class_createInstance (class, 0);\n+}\n+\n+/* Temporary, while we are including objc-api.h instead of runtime.h.  */\n+#undef object_copy\n+\n id\n-object_copy (id object)\n+object_copy (id object, size_t extraBytes)\n {\n   if ((object != nil) && CLS_ISCLASS (object->class_pointer))\n-    return (*_objc_object_copy) (object);\n+    {\n+      /* TODO: How should it work with C++ constructors ? */\n+      id copy = class_createInstance (object->class_pointer, extraBytes);\n+      memcpy (copy, object, object->class_pointer->instance_size + extraBytes);\n+      return copy;\n+    }\n   else\n     return nil;\n }\n@@ -77,28 +93,20 @@ object_dispose (id object)\n {\n   if ((object != nil) && CLS_ISCLASS (object->class_pointer))\n     {\n-      if (_objc_object_dispose)\n-        (*_objc_object_dispose) (object);\n-      else\n-        objc_free (object);\n+      /* TODO: Invoke C++ destructors on all appropriate C++ instance\n+\t variables.  But what happens with the garbage collector ?\n+\t Would object_dispose() be ever called in that case ?  */\n+\n+      objc_free (object);\n     }\n   return nil;\n }\n \n-id __objc_object_alloc (Class class)\n-{\n-  return (id) objc_malloc (class->instance_size);\n-}\n+/*\n+  Hook functions for memory allocation and disposal.  Deprecated\n+  and currently unused.\n+*/\n \n-id __objc_object_dispose (id object) \n-{\n-  objc_free (object);\n-  return 0;\n-}\n-\n-id __objc_object_copy (id object)\n-{\n-  id copy = class_create_instance (object->class_pointer);\n-  memcpy (copy, object, object->class_pointer->instance_size);\n-  return copy;\n-}\n+id (*_objc_object_alloc) (Class)   = 0;\n+id (*_objc_object_dispose) (id)    = 0;\n+id (*_objc_object_copy) (id)       = 0;"}, {"sha": "93952fd383446522f8f99ffe7184de9913916988", "filename": "libobjc/selector.c", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc18535a3e3a9a7f98ca4f86ca67e937bde6a883/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=bc18535a3e3a9a7f98ca4f86ca67e937bde6a883", "patch": "@@ -287,16 +287,9 @@ sel_get_any_uid (const char *name)\n   return (SEL) l->head;\n }\n \n-/* return selector representing name */\n-SEL\n-sel_get_uid (const char *name)\n-{\n-  return sel_register_typed_name (name, 0);\n-}\n-\n /* Get name of selector.  If selector is unknown, the empty string \"\" \n    is returned */ \n-const char *sel_get_name (SEL selector)\n+const char *sel_getName (SEL selector)\n {\n   const char *ret;\n \n@@ -310,22 +303,33 @@ const char *sel_get_name (SEL selector)\n   return ret;\n }\n \n+/* Traditional GNU Objective-C Runtime API.  */\n+const char *sel_get_name (SEL selector)\n+{\n+  return sel_getName (selector);\n+}\n+\n BOOL\n sel_is_mapped (SEL selector)\n {\n   unsigned int idx = soffset_decode ((sidx)selector->sel_id);\n   return ((idx > 0) && (idx <= __objc_selector_max_index));\n }\n \n-\n-const char *sel_get_type (SEL selector)\n+const char *sel_getType (SEL selector)\n {\n   if (selector)\n     return selector->sel_types;\n   else\n     return 0;\n }\n \n+/* Traditional GNU Objective-C Runtime API.  */\n+const char *sel_get_type (SEL selector)\n+{\n+  return sel_getType (selector);\n+}\n+\n /* The uninstalled dispatch table */\n extern struct sarray *__objc_uninstalled_dtable;\n \n@@ -467,7 +471,7 @@ __sel_register_typed_name (const char *name, const char *types,\n }\n \n SEL\n-sel_register_name (const char *name)\n+sel_registerName (const char *name)\n {\n   SEL ret;\n     \n@@ -480,8 +484,15 @@ sel_register_name (const char *name)\n   return ret;\n }\n \n+/* Traditional GNU Objective-C Runtime API.  */\n SEL\n-sel_register_typed_name (const char *name, const char *type)\n+sel_register_name (const char *name)\n+{\n+  return sel_registerName (name);\n+}\n+\n+SEL\n+sel_registerTypedName (const char *name, const char *type)\n {\n   SEL ret;\n \n@@ -493,3 +504,23 @@ sel_register_typed_name (const char *name, const char *type)\n   \n   return ret;\n }\n+\n+SEL\n+sel_register_typed_name (const char *name, const char *type)\n+{\n+  return sel_registerTypedName (name, type);\n+}\n+\n+/* return selector representing name */\n+SEL\n+sel_getUid (const char *name)\n+{\n+  return sel_registerTypedName (name, 0);\n+}\n+\n+/* Traditional GNU Objective-C Runtime API.  */\n+SEL\n+sel_get_uid (const char *name)\n+{\n+  return sel_getUid (name);\n+}"}]}