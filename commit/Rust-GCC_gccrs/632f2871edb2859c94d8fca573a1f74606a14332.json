{"sha": "632f2871edb2859c94d8fca573a1f74606a14332", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMyZjI4NzFlZGIyODU5Yzk0ZDhmY2E1NzNhMWY3NDYwNmExNDMzMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@linux.vnet.ibm.com", "date": "2014-05-21T11:00:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-21T11:00:35Z"}, "message": "tree.def (VOID_CST): New.\n\ngcc/\n\t* tree.def (VOID_CST): New.\n\t* tree-core.h (TI_VOID): New.\n\t* tree.h (void_node): New.\n\t* tree.c (tree_node_structure_for_code, tree_code_size)\n\t(iterative_hash_expr): Handle VOID_CST.\n\t(build_common_tree_nodes): Initialize void_node.\n\ngcc/c-family/\n\t* c-common.h (CTI_VOID_ZERO, void_zero_node): Delete.\n\t* c-common.c (c_common_nodes_and_builtins): Don't initialize\n\tvoid_zero_node.\n\t* c-pretty-print.c (pp_c_void_constant): New function.\n\t(c_pretty_printer::constant, c_pretty_printer::primary_expression)\n\t(c_pretty_printer::expression): Handle VOID_CST.\n\t* cilk.c (extract_free_variables): Likewise.\n\t* c-ubsan.c (ubsan_instrument_division, ubsan_instrument_shift)\n\t(ubsan_instrument_vla): Use void_node instead of void_zero_node.\n\ngcc/c/\n\t* c-array-notation.c (expand_array_notations): Use void_node\n\tinstead of void_zero_node.\n\ngcc/cp/\n\t* cvt.c (convert_to_void): Use void_node instead of void_zero_node.\n\t* cp-array-notation.c (replace_invariant_exprs): Likewise.\n\t(expand_array_notation): Handle VOID_CST.\n\t* error.c (dump_expr): Likewise.\n\t* cxx-pretty-print.c (cxx_pretty_printer::primary_expression)\n\t(cxx_pretty_printer::expression): Likewise.\n\t(pp_cxx_new_expression): Use void_node instead of void_zero_node.\n\t* decl.c (register_dtor_fn): Likewise.\n\t* init.c (build_raw_new_expr, build_new_1, build_vec_init)\n\t(build_delete, push_base_cleanups): Likewise.\n\t* mangle.c (write_expression): Likewise.\n\t* semantics.c (finish_break_stmt, empty_expr_stmt_p): Likewise.\n\t* pt.c (tsubst_decl, tsubst_copy_and_build): Likewise.\n\t(tsubst, tsubst_copy, build_non_dependent_expr): Handle VOID_CST.\n\t* tree.c (cp_tree_equal): Likewise.\n\t(build_dummy_object, is_dummy_object, stabilize_expr): Use void_node\n\tinstead of void_zero_node.\n\t* typeck.c (check_return_expr): Likewise.\n\t* typeck2.c (build_functional_cast): Likewise.\n\nFrom-SVN: r210692", "tree": {"sha": "873a8d60202acd9cd1d79ac86b9a225532e52a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/873a8d60202acd9cd1d79ac86b9a225532e52a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/632f2871edb2859c94d8fca573a1f74606a14332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632f2871edb2859c94d8fca573a1f74606a14332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632f2871edb2859c94d8fca573a1f74606a14332", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632f2871edb2859c94d8fca573a1f74606a14332/comments", "author": null, "committer": null, "parents": [{"sha": "313822494eef43225468cae7ca35170f2ed5af09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313822494eef43225468cae7ca35170f2ed5af09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313822494eef43225468cae7ca35170f2ed5af09"}], "stats": {"total": 168, "additions": 127, "deletions": 41}, "files": [{"sha": "499200eb28498fd133ca31bd456558cedb002a58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1,3 +1,12 @@\n+2014-05-21  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n+\n+\t* tree.def (VOID_CST): New.\n+\t* tree-core.h (TI_VOID): New.\n+\t* tree.h (void_node): New.\n+\t* tree.c (tree_node_structure_for_code, tree_code_size)\n+\t(iterative_hash_expr): Handle VOID_CST.\n+\t(build_common_tree_nodes): Initialize void_node.\n+\n 2014-05-21  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* reload1.c (remove_init_insns, will_delete_init_insn_p): New static"}, {"sha": "d0bfc27394c7c92fa15cc2f5dffe21d4dc1e63dd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1,3 +1,15 @@\n+2014-05-21  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n+\n+\t* c-common.h (CTI_VOID_ZERO, void_zero_node): Delete.\n+\t* c-common.c (c_common_nodes_and_builtins): Don't initialize\n+\tvoid_zero_node.\n+\t* c-pretty-print.c (pp_c_void_constant): New function.\n+\t(c_pretty_printer::constant, c_pretty_printer::primary_expression)\n+\t(c_pretty_printer::expression): Handle VOID_CST.\n+\t* cilk.c (extract_free_variables): Likewise.\n+\t* c-ubsan.c (ubsan_instrument_division, ubsan_instrument_shift)\n+\t(ubsan_instrument_vla): Use void_node instead of void_zero_node.\n+\n 2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* c-common.h (sorted_fields_type): Remove variable_size GTY attribute."}, {"sha": "c8d9e0c535972ad7a089eb4626567e679763104a", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -5524,10 +5524,6 @@ c_common_nodes_and_builtins (void)\n     TYPE_NAME (void_type_node) = void_name;\n   }\n \n-  /* This node must not be shared.  */\n-  void_zero_node = make_int_cst (1, 1);\n-  TREE_TYPE (void_zero_node) = void_type_node;\n-\n   void_list_node = build_void_list_node ();\n \n   /* Make a type to be the domain of a few array types"}, {"sha": "edd43b687e20acb1fb609bd0e3d48c49ba1e30df", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -297,8 +297,6 @@ enum c_tree_index\n     CTI_C99_FUNCTION_NAME_DECL,\n     CTI_SAVED_FUNCTION_NAME_DECLS,\n \n-    CTI_VOID_ZERO,\n-\n     CTI_NULL,\n \n     CTI_MAX\n@@ -430,9 +428,6 @@ extern const unsigned int num_c_common_reswords;\n #define c99_function_name_decl_node\t\tc_global_trees[CTI_C99_FUNCTION_NAME_DECL]\n #define saved_function_name_decls\tc_global_trees[CTI_SAVED_FUNCTION_NAME_DECLS]\n \n-/* A node for `((void) 0)'.  */\n-#define void_zero_node                  c_global_trees[CTI_VOID_ZERO]\n-\n /* The node for C++ `__null'.  */\n #define null_node                       c_global_trees[CTI_NULL]\n "}, {"sha": "9ac8cbaa2a9a18a42275d95e64a36d2596e72015", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -906,6 +906,15 @@ pp_c_string_literal (c_pretty_printer *pp, tree s)\n   pp_doublequote (pp);\n }\n \n+/* Pretty-print a VOID_CST (void_node).  */\n+\n+static void\n+pp_c_void_constant (c_pretty_printer *pp)\n+{\n+  pp_c_type_cast (pp, void_type_node);\n+  pp_string (pp, \"0\");\n+}\n+\n /* Pretty-print an INTEGER literal.  */\n \n static void\n@@ -1136,6 +1145,10 @@ c_pretty_printer::constant (tree e)\n \n   switch (code)\n     {\n+    case VOID_CST:\n+      pp_c_void_constant (this);\n+      break;\n+\n     case INTEGER_CST:\n       {\n \ttree type = TREE_TYPE (e);\n@@ -1241,6 +1254,7 @@ c_pretty_printer::primary_expression (tree e)\n       translate_string (\"<return-value>\");\n       break;\n \n+    case VOID_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n     case FIXED_CST:\n@@ -2131,6 +2145,10 @@ c_pretty_printer::expression (tree e)\n {\n   switch (TREE_CODE (e))\n     {\n+    case VOID_CST:\n+      pp_c_void_constant (this);\n+      break;\n+\n     case INTEGER_CST:\n       pp_c_integer_constant (this, e);\n       break;"}, {"sha": "8d5b6856f8748c9b439e51a3b3e197131e185e59", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -95,7 +95,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n       tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n \t\t\t\tubsan_encode_value (op1));\n     }\n-  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_zero_node);\n+  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_node);\n \n   return t;\n }\n@@ -178,7 +178,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n \t\t\t\tubsan_encode_value (op1));\n     }\n-  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_zero_node);\n+  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_node);\n \n   return t;\n }\n@@ -207,7 +207,7 @@ ubsan_instrument_vla (location_t loc, tree size)\n       tt = builtin_decl_explicit (bcode);\n       tt = build_call_expr_loc (loc, tt, 2, data, ubsan_encode_value (size));\n     }\n-  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_zero_node);\n+  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_node);\n \n   return t;\n }"}, {"sha": "8bdcdcfaad577298ff3a70c29c886e2bc74d8d89", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -997,6 +997,7 @@ extract_free_variables (tree t, struct wrapper_data *wd,\n     {\n     case ERROR_MARK:\n     case IDENTIFIER_NODE:\n+    case VOID_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n     case FIXED_CST:"}, {"sha": "76d5c4671bd27da41d9ed64b640a10a88fab6ccc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1,3 +1,8 @@\n+2014-05-21  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n+\n+\t* c-array-notation.c (expand_array_notations): Use void_node\n+\tinstead of void_zero_node.\n+\n 2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* c-decl.c (finish_struct): Adjust."}, {"sha": "a01269742ce1c3c49600f0a8b6d47ec19fefd3f0", "filename": "gcc/c/c-array-notation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc%2Fc-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fc%2Fc-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-array-notation.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1279,7 +1279,7 @@ expand_array_notations (tree *tp, int *walk_subtrees, void *)\n \t A[x:y:z];\n \t A[x:y];\n \t Replace those with just void zero node.  */\n-      *tp = void_zero_node;\n+      *tp = void_node;\n     default:\n       break;\n     }"}, {"sha": "adde47f5569dfa75c268f3a99e9c5c7b3946dee1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1,3 +1,25 @@\n+2014-05-21  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n+\n+\t* cvt.c (convert_to_void): Use void_node instead of void_zero_node.\n+\t* cp-array-notation.c (replace_invariant_exprs): Likewise.\n+\t(expand_array_notation): Handle VOID_CST.\n+\t* error.c (dump_expr): Likewise.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::primary_expression)\n+\t(cxx_pretty_printer::expression): Likewise.\n+\t(pp_cxx_new_expression): Use void_node instead of void_zero_node.\n+\t* decl.c (register_dtor_fn): Likewise.\n+\t* init.c (build_raw_new_expr, build_new_1, build_vec_init)\n+\t(build_delete, push_base_cleanups): Likewise.\n+\t* mangle.c (write_expression): Likewise.\n+\t* semantics.c (finish_break_stmt, empty_expr_stmt_p): Likewise.\n+\t* pt.c (tsubst_decl, tsubst_copy_and_build): Likewise.\n+\t(tsubst, tsubst_copy, build_non_dependent_expr): Handle VOID_CST.\n+\t* tree.c (cp_tree_equal): Likewise.\n+\t(build_dummy_object, is_dummy_object, stabilize_expr): Use void_node\n+\tinstead of void_zero_node.\n+\t* typeck.c (check_return_expr): Likewise.\n+\t* typeck2.c (build_functional_cast): Likewise.\n+\n 2014-05-21  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR c/60189"}, {"sha": "0ff0967d36379432ffaa9770938cdec71db0e5c0", "filename": "gcc/cp/cp-array-notation.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fcp-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fcp-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-array-notation.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -181,7 +181,7 @@ replace_invariant_exprs (tree *node)\n \t  if (VOID_TYPE_P (TREE_TYPE (t)))\n \t    {\n \t      finish_expr_stmt (t);\n-\t      new_var = void_zero_node;\n+\t      new_var = void_node;\n \t    }\n \t  else \n \t    new_var = get_temp_regvar (TREE_TYPE (t), t); \n@@ -1126,6 +1126,7 @@ expand_array_notation_exprs (tree t)\n     {\n     case ERROR_MARK:\n     case IDENTIFIER_NODE:\n+    case VOID_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n     case FIXED_CST:"}, {"sha": "2a827237f2883d68e0dff6148e90872edabb2fdf", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1285,7 +1285,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \t    }\n \telse\n \t  return error_mark_node;\n-\texpr = void_zero_node;\n+\texpr = void_node;\n       }\n     else if (implicit != ICV_CAST && probe == expr && is_overloaded_fn (probe))\n       {\n@@ -1415,7 +1415,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n       expr = build1 (CONVERT_EXPR, void_type_node, expr);\n     }\n   if (! TREE_SIDE_EFFECTS (expr))\n-    expr = void_zero_node;\n+    expr = void_node;\n   return expr;\n }\n "}, {"sha": "f5f91c804c1812616833d6fa5d2d62c253a7c796", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -403,6 +403,7 @@ cxx_pretty_printer::primary_expression (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n+    case VOID_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n     case COMPLEX_CST:\n@@ -690,7 +691,7 @@ pp_cxx_new_expression (cxx_pretty_printer *pp, tree t)\n \t  pp_left_paren (pp);\n \t  if (TREE_CODE (init) == TREE_LIST)\n \t    pp_c_expression_list (pp, init);\n-\t  else if (init == void_zero_node)\n+\t  else if (init == void_node)\n \t    ;\t\t\t/* OK, empty initializer list.  */\n \t  else\n \t    pp->expression (init);\n@@ -1028,6 +1029,7 @@ cxx_pretty_printer::expression (tree t)\n   switch (TREE_CODE (t))\n     {\n     case STRING_CST:\n+    case VOID_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n     case COMPLEX_CST:"}, {"sha": "3752d17fad1a2be3e78f167af4459c60b1ccd0bc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -6830,7 +6830,7 @@ register_dtor_fn (tree decl)\n \n   type = TREE_TYPE (decl);\n   if (TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n-    return void_zero_node;\n+    return void_node;\n \n   /* If we're using \"__cxa_atexit\" (or \"__cxa_thread_atexit\" or\n      \"__aeabi_atexit\"), and DECL is a class object, we can just pass the\n@@ -7077,7 +7077,7 @@ expand_static_init (tree decl, tree init)\n \n \t  TARGET_EXPR_CLEANUP (begin)\n \t    = build3 (COND_EXPR, void_type_node, flag,\n-\t\t      void_zero_node,\n+\t\t      void_node,\n \t\t      build_call_n (abort_fn, 1, guard_addr));\n \t  CLEANUP_EH_ONLY (begin) = 1;\n \n@@ -8425,7 +8425,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t      tree comp = build2 (LT_EXPR, boolean_type_node, itype,\n \t\t\t\t  ssize_int (-1));\n \t      comp = build3 (COND_EXPR, void_type_node, comp,\n-\t\t\t     throw_bad_array_length (), void_zero_node);\n+\t\t\t     throw_bad_array_length (), void_node);\n \t      finish_expr_stmt (comp);\n \t    }\n \t  else if (flag_sanitize & SANITIZE_VLA)"}, {"sha": "b3b5bbb0971405acd7a6b287b6295f636f0b4f8e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1913,6 +1913,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n \tpp_cxx_ws_string (pp, M_(\"<unknown>\"));\n       break;\n \n+    case VOID_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n     case STRING_CST:"}, {"sha": "8edf5193750440a758ed81f315378e5c1b471622", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -2120,7 +2120,7 @@ build_raw_new_expr (vec<tree, va_gc> *placement, tree type, tree nelts,\n   if (init == NULL)\n     init_list = NULL_TREE;\n   else if (init->is_empty ())\n-    init_list = void_zero_node;\n+    init_list = void_node;\n   else\n     init_list = build_tree_list_vec (init);\n \n@@ -2935,7 +2935,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \n \t      TARGET_EXPR_CLEANUP (begin)\n \t\t= build3 (COND_EXPR, void_type_node, sentry,\n-\t\t\t  cleanup, void_zero_node);\n+\t\t\t  cleanup, void_node);\n \n \t      end = build2 (MODIFY_EXPR, TREE_TYPE (sentry),\n \t\t\t    sentry, boolean_false_node);\n@@ -3598,7 +3598,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t  else\n \t    throw_call = throw_bad_array_new_length ();\n \t  length_check = build3 (COND_EXPR, void_type_node, length_check,\n-\t\t\t\t throw_call, void_zero_node);\n+\t\t\t\t throw_call, void_node);\n \t  finish_expr_stmt (length_check);\n \t}\n \n@@ -4020,7 +4020,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t}\n \n       if (auto_delete != sfk_deleting_destructor)\n-\treturn void_zero_node;\n+\treturn void_node;\n \n       return build_op_delete_call (DELETE_EXPR, addr,\n \t\t\t\t   cxx_sizeof_nowarn (type),\n@@ -4108,8 +4108,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t}\n \n       if (ifexp != integer_one_node)\n-\texpr = build3 (COND_EXPR, void_type_node,\n-\t\t       ifexp, expr, void_zero_node);\n+\texpr = build3 (COND_EXPR, void_type_node, ifexp, expr, void_node);\n \n       return expr;\n     }\n@@ -4154,7 +4153,7 @@ push_base_cleanups (void)\n \t      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (BINFO_TYPE (base_binfo)))\n \t\t{\n \t\t  expr = build3 (COND_EXPR, void_type_node, cond,\n-\t\t\t\t expr, void_zero_node);\n+\t\t\t\t expr, void_node);\n \t\t  finish_decl_cleanup (NULL_TREE, expr);\n \t\t}\n \t    }"}, {"sha": "4205fecfc949a1995659d963f2bf131ae49f1b89", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -2812,7 +2812,7 @@ write_expression (tree expr)\n \t{\n \t  if (init)\n \t    write_string (\"pi\");\n-\t  if (init && init != void_zero_node)\n+\t  if (init && init != void_node)\n \t    for (t = init; t; t = TREE_CHAIN (t))\n \t      write_expression (TREE_VALUE (t));\n \t  write_char ('E');"}, {"sha": "2ebe0159491cb9ee68acf41e4ee99cb2732f11c9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -10911,7 +10911,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t\t/* Set up DECL_TEMPLATE_INFO so that we can get at the\n \t\t   NSDMI in perform_member_init.  Still set DECL_INITIAL\n \t\t   so that we know there is one.  */\n-\t\tDECL_INITIAL (r) = void_zero_node;\n+\t\tDECL_INITIAL (r) = void_node;\n \t\tgcc_assert (DECL_LANG_SPECIFIC (r) == NULL);\n \t\tretrofit_lang_decl (r);\n \t\tDECL_TEMPLATE_INFO (r) = build_template_info (t, args);\n@@ -12286,6 +12286,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       }\n       break;\n \n+    case VOID_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n     case STRING_CST:\n@@ -13054,6 +13055,10 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       error (\"use %<...%> to expand argument pack\");\n       return error_mark_node;\n \n+    case VOID_CST:\n+      gcc_checking_assert (t == void_node && VOID_TYPE_P (TREE_TYPE (t)));\n+      return t;\n+\n     case INTEGER_CST:\n     case REAL_CST:\n     case STRING_CST:\n@@ -14600,7 +14605,7 @@ tsubst_copy_and_build (tree t,\n \telse\n \t  {\n \t    init_vec = make_tree_vector ();\n-\t    if (init == void_zero_node)\n+\t    if (init == void_node)\n \t      gcc_assert (init_vec != NULL);\n \t    else\n \t      {\n@@ -15261,9 +15266,9 @@ tsubst_copy_and_build (tree t,\n \tcur_stmt_expr = old_stmt_expr;\n \n \t/* If the resulting list of expression statement is empty,\n-\t   fold it further into void_zero_node.  */\n+\t   fold it further into void_node.  */\n \tif (empty_expr_stmt_p (stmt_expr))\n-\t  stmt_expr = void_zero_node;\n+\t  stmt_expr = void_node;\n \n \tRETURN (stmt_expr);\n       }\n@@ -21550,9 +21555,11 @@ build_non_dependent_expr (tree expr)\n      cannot be used to initialize a \"char *\".  */\n   if (TREE_CODE (expr) == STRING_CST)\n     return expr;\n-  /* Preserve arithmetic constants, as an optimization -- there is no\n+  /* Preserve void and arithmetic constants, as an optimization -- there is no\n      reason to create a new node.  */\n-  if (TREE_CODE (expr) == INTEGER_CST || TREE_CODE (expr) == REAL_CST)\n+  if (TREE_CODE (expr) == VOID_CST\n+      || TREE_CODE (expr) == INTEGER_CST\n+      || TREE_CODE (expr) == REAL_CST)\n     return expr;\n   /* Preserve THROW_EXPRs -- all throw-expressions have type \"void\".\n      There is at least one place where we want to know that a"}, {"sha": "7e144a6734c3855ddcbee5e01030ba1de8d12412", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1083,7 +1083,7 @@ finish_break_stmt (void)\n      block_may_fallthru returns true when given something it does not\n      understand.  */\n   if (!block_may_fallthru (cur_stmt_list))\n-    return void_zero_node;\n+    return void_node;\n   return add_stmt (build_stmt (input_location, BREAK_STMT));\n }\n \n@@ -2095,7 +2095,7 @@ empty_expr_stmt_p (tree expr_stmt)\n {\n   tree body = NULL_TREE;\n \n-  if (expr_stmt == void_zero_node)\n+  if (expr_stmt == void_node)\n     return true;\n \n   if (expr_stmt)"}, {"sha": "21c9a82bbdaa4e8a7653e92388df84f019d94772", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -2620,6 +2620,11 @@ cp_tree_equal (tree t1, tree t2)\n \n   switch (code1)\n     {\n+    case VOID_CST:\n+      /* There's only a single VOID_CST node, so we should never reach\n+\t here.  */\n+      gcc_unreachable ();\n+\n     case INTEGER_CST:\n       return tree_int_cst_equal (t1, t2);\n \n@@ -2947,7 +2952,7 @@ member_p (const_tree decl)\n tree\n build_dummy_object (tree type)\n {\n-  tree decl = build1 (NOP_EXPR, build_pointer_type (type), void_zero_node);\n+  tree decl = build1 (NOP_EXPR, build_pointer_type (type), void_node);\n   return cp_build_indirect_ref (decl, RO_NULL, tf_warning_or_error);\n }\n \n@@ -2997,7 +3002,7 @@ is_dummy_object (const_tree ob)\n   if (INDIRECT_REF_P (ob))\n     ob = TREE_OPERAND (ob, 0);\n   return (TREE_CODE (ob) == NOP_EXPR\n-\t  && TREE_OPERAND (ob, 0) == void_zero_node);\n+\t  && TREE_OPERAND (ob, 0) == void_node);\n }\n \n /* Returns 1 iff type T is something we want to treat as a scalar type for\n@@ -3775,7 +3780,7 @@ stabilize_expr (tree exp, tree* initp)\n   else if (VOID_TYPE_P (TREE_TYPE (exp)))\n     {\n       init_expr = exp;\n-      exp = void_zero_node;\n+      exp = void_node;\n     }\n   /* There are no expressions with REFERENCE_TYPE, but there can be call\n      arguments with such a type; just treat it as a pointer.  */"}, {"sha": "255deafdac42e8650ee73628c346bfc099863c6c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -8424,7 +8424,7 @@ check_return_expr (tree retval, bool *no_warning)\n       else\n \t{\n \t  if (!retval)\n-\t    retval = void_zero_node;\n+\t    retval = void_node;\n \t  auto_node = type_uses_auto (current_function_auto_return_pattern);\n \t  type = do_auto_deduction (current_function_auto_return_pattern,\n \t\t\t\t    retval, auto_node);"}, {"sha": "e98942d7d2a56b77abf1eb92459c6e0ef463fbf0", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -1888,7 +1888,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n       if (parms == NULL_TREE)\n \t{\n \t  if (VOID_TYPE_P (type))\n-\t    return void_zero_node;\n+\t    return void_node;\n \t  return build_value_init (cv_unqualified (type), complain);\n \t}\n "}, {"sha": "98c3951c6911c7f023dde288fe2c25d782c5bf94", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -410,6 +410,8 @@ enum tree_index {\n   TI_UINT32_TYPE,\n   TI_UINT64_TYPE,\n \n+  TI_VOID,\n+\n   TI_INTEGER_ZERO,\n   TI_INTEGER_ONE,\n   TI_INTEGER_THREE,"}, {"sha": "22b92f3b6b264aa244a7d199a82d93a28a269514", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -383,6 +383,7 @@ tree_node_structure_for_code (enum tree_code code)\n   switch (code)\n     {\n       /* tcc_constant cases.  */\n+    case VOID_CST:\t\treturn TS_TYPED;\n     case INTEGER_CST:\t\treturn TS_INT_CST;\n     case REAL_CST:\t\treturn TS_REAL_CST;\n     case FIXED_CST:\t\treturn TS_FIXED_CST;\n@@ -652,6 +653,7 @@ tree_code_size (enum tree_code code)\n     case tcc_constant:  /* a constant */\n       switch (code)\n \t{\n+\tcase VOID_CST:\t\treturn sizeof (struct tree_typed);\n \tcase INTEGER_CST:\tgcc_unreachable ();\n \tcase REAL_CST:\t\treturn sizeof (struct tree_real_cst);\n \tcase FIXED_CST:\t\treturn sizeof (struct tree_fixed_cst);\n@@ -7360,6 +7362,8 @@ iterative_hash_expr (const_tree t, hashval_t val)\n     {\n     /* Alas, constants aren't shared, so we can't rely on pointer\n        identity.  */\n+    case VOID_CST:\n+      return iterative_hash_hashval_t (0, val);\n     case INTEGER_CST:\n       for (i = 0; i < TREE_INT_CST_NUNITS (t); i++)\n \tval = iterative_hash_host_wide_int (TREE_INT_CST_ELT (t, i), val);\n@@ -9631,6 +9635,9 @@ build_common_tree_nodes (bool signed_char, bool short_double)\n   TYPE_ALIGN (void_type_node) = BITS_PER_UNIT;\n   TYPE_USER_ALIGN (void_type_node) = 0;\n \n+  void_node = make_node (VOID_CST);\n+  TREE_TYPE (void_node) = void_type_node;\n+\n   null_pointer_node = build_int_cst (build_pointer_type (void_type_node), 0);\n   layout_type (TREE_TYPE (null_pointer_node));\n "}, {"sha": "464c8c7b09946f94c8fd9e2329100cc078e85b6d", "filename": "gcc/tree.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -257,6 +257,8 @@ DEFTREECODE (LANG_TYPE, \"lang_type\", tcc_type, 0)\n \n /* First, the constants.  */\n \n+DEFTREECODE (VOID_CST, \"void_cst\", tcc_constant, 0)\n+\n /* Contents are in an array of HOST_WIDE_INTs.\n \n    We often access these constants both in their native precision and"}, {"sha": "968b389dd11f38fe483d26bcb4e23ad40c143f2d", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632f2871edb2859c94d8fca573a1f74606a14332/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=632f2871edb2859c94d8fca573a1f74606a14332", "patch": "@@ -3246,6 +3246,8 @@ tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,\n #define uint32_type_node\t\tglobal_trees[TI_UINT32_TYPE]\n #define uint64_type_node\t\tglobal_trees[TI_UINT64_TYPE]\n \n+#define void_node\t\t\tglobal_trees[TI_VOID]\n+\n #define integer_zero_node\t\tglobal_trees[TI_INTEGER_ZERO]\n #define integer_one_node\t\tglobal_trees[TI_INTEGER_ONE]\n #define integer_three_node              global_trees[TI_INTEGER_THREE]"}]}