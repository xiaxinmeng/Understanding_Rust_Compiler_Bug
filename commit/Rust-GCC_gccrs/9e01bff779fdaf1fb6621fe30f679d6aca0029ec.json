{"sha": "9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwMWJmZjc3OWZkYWYxZmI2NjIxZmUzMGY2NzlkNmFjYTAwMjllYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-06-27T20:38:10Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-06-27T20:38:10Z"}, "message": "OutputStreamWriter.java (writeChars): Use a 'do' loop.\n\n\t* java/io/OutputStreamWriter.java (writeChars): Use a 'do' loop.\n\tSet 'out.count' earlier.\n\t(close): Call setFinished on converter.\n\t(flush): Always write work buffer.\n\t* java/io/PrintStream.java (writeChars): Do 'do' loop.\n\t(close): Call setFinished on converter.  Write a 'flush' array.\n\t* java/lang/natString.cc (getBytes): Call setFinished on\n\tconverter.\n\t* gnu/gcj/convert/CharsetToBytesAdaptor.java (hasBytes): New\n\tfield.\n\t(write): Set hasBytes.  Changed 'finished' logic.\n\t(havePendingBytes): Rewrote.\n\t(setFinished): New method.\n\t* gnu/gcj/convert/UnicodeToBytes.java (setFinished): New method.\n\t* testsuite/libjava.lang/RH194522.java: New file.\n\t* testsuite/libjava.lang/RH194522.out: New file.\n\nFrom-SVN: r115039", "tree": {"sha": "4559b8284607c63eae3517638fbdf14bec92fafd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4559b8284607c63eae3517638fbdf14bec92fafd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/comments", "author": null, "committer": null, "parents": [{"sha": "80cd0e33d9bcc374f71e86eb710d05ac12ff20ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cd0e33d9bcc374f71e86eb710d05ac12ff20ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cd0e33d9bcc374f71e86eb710d05ac12ff20ab"}], "stats": {"total": 108, "additions": 85, "deletions": 23}, "files": [{"sha": "55c07620a9b1de6f27dc4e9d05e26f3b408b3af3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "patch": "@@ -1,3 +1,22 @@\n+2006-06-27  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/OutputStreamWriter.java (writeChars): Use a 'do' loop.\n+\tSet 'out.count' earlier.\n+\t(close): Call setFinished on converter.\n+\t(flush): Always write work buffer.\n+\t* java/io/PrintStream.java (writeChars): Do 'do' loop.\n+\t(close): Call setFinished on converter.  Write a 'flush' array.\n+\t* java/lang/natString.cc (getBytes): Call setFinished on\n+\tconverter.\n+\t* gnu/gcj/convert/CharsetToBytesAdaptor.java (hasBytes): New\n+\tfield.\n+\t(write): Set hasBytes.  Changed 'finished' logic.\n+\t(havePendingBytes): Rewrote.\n+\t(setFinished): New method.\n+\t* gnu/gcj/convert/UnicodeToBytes.java (setFinished): New method.\n+\t* testsuite/libjava.lang/RH194522.java: New file.\n+\t* testsuite/libjava.lang/RH194522.out: New file.\n+\n 2006-06-27  Marco Trudel  <mtrudel@gmx.ch>\n \n \t* boehm.cc (_Jv_SuspendThread, _Jv_ResumeThread): Define"}, {"sha": "80e749cc8ef91e0309f80044f1f77e748a3e49f2", "filename": "libjava/gnu/gcj/convert/CharsetToBytesAdaptor.java", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fgnu%2Fgcj%2Fconvert%2FCharsetToBytesAdaptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fgnu%2Fgcj%2Fconvert%2FCharsetToBytesAdaptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FCharsetToBytesAdaptor.java?ref=9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "patch": "@@ -38,6 +38,11 @@ public class CharsetToBytesAdaptor extends UnicodeToBytes\n    */\n   private boolean closedEncoder;\n \n+  /**\n+   * True if there are bytes pending in the encoder.\n+   */\n+  private boolean hasBytes;\n+\n   /**\n    * True if we're finished.\n    */\n@@ -112,20 +117,16 @@ private void write(CharBuffer inBuf)\n     // Set the current position.\n     outBuf.position(count);\n \n-    // If we've already said that there is no more input available,\n-    // then we simply try to flush again.\n+    // Do the conversion.\n+    CoderResult result = encoder.encode(inBuf, outBuf, closedEncoder);\n+    hasBytes = result == CoderResult.OVERFLOW;\n     if (closedEncoder)\n       {\n-\tCoderResult result = encoder.flush(outBuf);\n+\tresult = encoder.flush(outBuf);\n \tif (result == CoderResult.UNDERFLOW)\n \t  finished = true;\n-       }\n-    else\n-      {\n-\t// Do the conversion.  If there are no characters to write,\n-\t// then we are finished.\n-\tclosedEncoder = ! inBuf.hasRemaining();\n-\tencoder.encode(inBuf, outBuf, closedEncoder);\n+\telse\n+\t  hasBytes = true;\n       }\n \n     // Mark the new end of buf.\n@@ -140,7 +141,12 @@ private void write(CharBuffer inBuf)\n    */\n   public boolean havePendingBytes()\n   {\n-    return ! finished;\n+    return hasBytes;\n+  }\n+\n+  public void setFinished()\n+  {\n+    closedEncoder = true;\n   }\n \n   // These aren't cached."}, {"sha": "51d69395a92f0a27f1c94cdb3042e98241a5f91b", "filename": "libjava/gnu/gcj/convert/UnicodeToBytes.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeToBytes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeToBytes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeToBytes.java?ref=9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999, 2000, 2001, 2003, 2005  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001, 2003, 2005, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -172,6 +172,15 @@ public boolean havePendingBytes()\n     return false;\n   }\n \n+  /**\n+   * Users should call this method when the input is coming to an\n+   * end.  This signals that the next write (which might be\n+   * zero-length) ought to flush any internal state.\n+   */\n+  public void setFinished()\n+  {\n+  }\n+\n   /** Indicate that the converter is resuable.\n    * This class keeps track of converters on a per-encoding basis.\n    * When done with an encoder you may call this method to indicate"}, {"sha": "1f1666fe11a8ef8e2ed613d7b8a28b069a565653", "filename": "libjava/java/io/OutputStreamWriter.java", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOutputStreamWriter.java?ref=9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "patch": "@@ -1,5 +1,5 @@\n /* OutputStreamWriter.java -- Writer that converts chars to bytes\n-   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2005  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2005, 2006  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -168,6 +168,7 @@ public void close () throws IOException\n       {\n \tif (out != null)\n \t  {\n+\t    converter.setFinished();\n \t    flush();\n \t    out.close();\n \t    out = null;\n@@ -200,11 +201,11 @@ public void flush () throws IOException\n \tif (out == null)\n \t  throw new IOException(\"Stream closed\");\n \n-\tif (wcount > 0)\n-\t  {\n-\t    writeChars(work, 0, wcount);\n-\t    wcount = 0;\n-\t  }\n+\t// Always write -- if we are close()ing then we want to make\n+\t// sure the converter is flushed.\n+\twriteChars(work, 0, wcount);\n+\twcount = 0;\n+\n \tout.flush();\n       }\n   }\n@@ -243,7 +244,7 @@ public void write (char[] buf, int offset, int count) throws IOException\n   private void writeChars(char[] buf, int offset, int count)\n     throws IOException\n   {\n-    while (count > 0 || converter.havePendingBytes())\n+    do\n       {\n \t// We must flush if out.count == out.buf.length.\n \t// It is probably a good idea to flush if out.buf is almost full.\n@@ -256,6 +257,9 @@ private void writeChars(char[] buf, int offset, int count)\n \t  }\n \tconverter.setOutput(out.buf, out.count);\n \tint converted = converter.write(buf, offset, count);\n+\t// Must set this before we flush the output stream, because\n+\t// flushing will reset 'out.count'.\n+\tout.count = converter.count;\n \t// Flush if we cannot make progress.\n \tif (converted == 0 && out.count == converter.count)\n \t  {\n@@ -265,8 +269,8 @@ private void writeChars(char[] buf, int offset, int count)\n \t  }\n \toffset += converted;\n \tcount -= converted;\n-\tout.count = converter.count;\n       }\n+    while (count > 0 || converter.havePendingBytes());\n   }\n \n   /**"}, {"sha": "dc26edafd9f08a81d7b1d2e4b34e70cc7e5a49af", "filename": "libjava/java/io/PrintStream.java", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fjava%2Fio%2FPrintStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fjava%2Fio%2FPrintStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintStream.java?ref=9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "patch": "@@ -1,5 +1,5 @@\n /* PrintStream.java -- OutputStream for printing output\n-   Copyright (C) 1998, 1999, 2001, 2003, 2004, 2005  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -174,6 +174,8 @@ public void close ()\n   {\n     try\n       {\n+\tconverter.setFinished();\n+\twriteChars(new char[0], 0, 0);\n \tflush();\n \tout.close();\n       }\n@@ -251,27 +253,29 @@ private synchronized void print (char[] chars, int pos, int len,\n   private void writeChars(char[] buf, int offset, int count)\n     throws IOException\n   {\n-    while (count > 0 || converter.havePendingBytes())\n+    do\n       {\n \tconverter.setOutput(work_bytes, 0);\n \tint converted = converter.write(buf, offset, count);\n \toffset += converted;\n \tcount -= converted;\n \tout.write(work_bytes, 0, converter.count);\n       }\n+    while (count > 0 || converter.havePendingBytes());\n   }\n \n   private void writeChars(String str, int offset, int count)\n     throws IOException\n   {\n-    while (count > 0 || converter.havePendingBytes())\n+    do\n       {\n \tconverter.setOutput(work_bytes, 0);\n \tint converted = converter.write(str, offset, count, work);\n \toffset += converted;\n \tcount -= converted;\n \tout.write(work_bytes, 0, converter.count);\n       }\n+    while (count > 0 || converter.havePendingBytes());\n   }\n \n   /**"}, {"sha": "1a49bf798097ed86eda3391b634320532db7730e", "filename": "libjava/java/lang/natString.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fjava%2Flang%2FnatString.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Fjava%2Flang%2FnatString.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatString.cc?ref=9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "patch": "@@ -615,6 +615,8 @@ java::lang::String::getBytes (jstring enc)\n   while (todo > 0 || converter->havePendingBytes())\n     {\n       converter->setOutput(buffer, bufpos);\n+      // We only really need to do a single write.\n+      converter->setFinished();\n       int converted = converter->write(this, offset, todo, NULL);\n       bufpos = converter->count;\n       if (converted == 0 && bufpos == converter->count)"}, {"sha": "5ea446cbd29df3e92186ff52c1f08aaf8ec4ee56", "filename": "libjava/testsuite/libjava.lang/RH194522.java", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Ftestsuite%2Flibjava.lang%2FRH194522.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Ftestsuite%2Flibjava.lang%2FRH194522.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FRH194522.java?ref=9e01bff779fdaf1fb6621fe30f679d6aca0029ec", "patch": "@@ -0,0 +1,18 @@\n+// Test case for http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=194522\n+\n+import java.io.*;\n+import java.nio.charset.Charset;\n+\n+public class RH194522\n+{\n+  public static void main(String[] args) throws Exception\n+  {\n+    Charset c = Charset.forName(\"UTF-8\");\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    PrintWriter pw = new PrintWriter(new OutputStreamWriter(baos, c));\n+    pw.println(\"hi\");\n+    pw.println(\"bob\");\n+    pw.flush();\n+    pw.close();\n+  }\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libjava/testsuite/libjava.lang/RH194522.out", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Ftestsuite%2Flibjava.lang%2FRH194522.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e01bff779fdaf1fb6621fe30f679d6aca0029ec/libjava%2Ftestsuite%2Flibjava.lang%2FRH194522.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FRH194522.out?ref=9e01bff779fdaf1fb6621fe30f679d6aca0029ec"}]}