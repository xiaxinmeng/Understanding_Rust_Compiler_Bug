{"sha": "0a762d20498044794b29662a2e2b7927710c958b", "node_id": "C_kwDOANBUbNoAKDBhNzYyZDIwNDk4MDQ0Nzk0YjI5NjYyYTJlMmI3OTI3NzEwYzk1OGI", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-10-06T18:32:17Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:32Z"}, "message": "gccrs: ast: dump structs, enums and unions\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc (Dump::visit): Fill empty functions for\n\tstructs, enums and unions.", "tree": {"sha": "c5c78a5e67bc31369bb39a1589f4718243622279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c78a5e67bc31369bb39a1589f4718243622279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a762d20498044794b29662a2e2b7927710c958b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a762d20498044794b29662a2e2b7927710c958b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a762d20498044794b29662a2e2b7927710c958b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a762d20498044794b29662a2e2b7927710c958b/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c807ef70db1d8832dc5887f4458164832619d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c807ef70db1d8832dc5887f4458164832619d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c807ef70db1d8832dc5887f4458164832619d3c"}], "stats": {"total": 135, "additions": 127, "deletions": 8}, "files": [{"sha": "7cbdfa21fcbcb73470042f506080766ce30e8afe", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 127, "deletions": 8, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a762d20498044794b29662a2e2b7927710c958b/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a762d20498044794b29662a2e2b7927710c958b/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=0a762d20498044794b29662a2e2b7927710c958b", "patch": "@@ -750,35 +750,154 @@ Dump::visit (TypeAlias &type_alias)\n \n void\n Dump::visit (StructStruct &struct_item)\n-{}\n+{\n+  stream << \"struct \" << struct_item.get_identifier ();\n+  if (struct_item.has_generics ())\n+    emit_generic_params (struct_item.get_generic_params ());\n+\n+  // FIXME: where-clause\n+\n+  stream << \" {\";\n+\n+  auto &fields = struct_item.get_fields ();\n+\n+  indentation.increment ();\n+  for (auto &field : fields)\n+    {\n+      stream << '\\n' << indentation;\n+      format_struct_field (field);\n+      stream << ',';\n+    }\n+  indentation.decrement ();\n+\n+  if (fields.size () > 0)\n+    stream << '\\n' << indentation;\n+  stream << \"}\\n\";\n+}\n \n void\n Dump::visit (TupleStruct &tuple_struct)\n-{}\n+{\n+  stream << \"struct \" << tuple_struct.get_identifier ();\n+  if (tuple_struct.has_generics ())\n+    emit_generic_params (tuple_struct.get_generic_params ());\n+\n+  // FIXME: where-clause\n+\n+  stream << '(';\n+\n+  auto &fields = tuple_struct.get_fields ();\n+  if (fields.size () >= 1)\n+    {\n+      format_tuple_field (fields[0]);\n+      for (size_t i = 1; i < fields.size (); i++)\n+\t{\n+\t  stream << \", \";\n+\t  format_tuple_field (fields[i]);\n+\t}\n+    }\n+  stream << \");\\n\";\n+}\n \n void\n Dump::visit (EnumItem &item)\n-{}\n+{\n+  stream << item.get_identifier ();\n+}\n \n void\n Dump::visit (EnumItemTuple &item)\n-{}\n+{\n+  stream << item.get_identifier () << '(';\n+  auto &fields = item.get_tuple_fields ();\n+  if (fields.size () >= 1)\n+    {\n+      format_tuple_field (fields[0]);\n+      for (size_t i = 1; i < fields.size (); i++)\n+\t{\n+\t  stream << \", \";\n+\t  format_tuple_field (fields[i]);\n+\t}\n+    }\n+  stream << ')';\n+}\n \n void\n Dump::visit (EnumItemStruct &item)\n-{}\n+{\n+  stream << item.get_identifier () << \" {\";\n+\n+  auto &fields = item.get_struct_fields ();\n+\n+  indentation.increment ();\n+  for (auto &field : fields)\n+    {\n+      stream << '\\n' << indentation;\n+      format_struct_field (field);\n+      stream << ',';\n+    }\n+  indentation.decrement ();\n+\n+  if (fields.size () > 0)\n+    stream << '\\n' << indentation;\n+  stream << '}';\n+}\n \n void\n Dump::visit (EnumItemDiscriminant &item)\n-{}\n+{\n+  stream << item.get_identifier () << \" = \";\n+  item.get_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (Enum &enum_item)\n-{}\n+{\n+  stream << \"enum \" << enum_item.get_identifier ();\n+  if (enum_item.has_generics ())\n+    emit_generic_params (enum_item.get_generic_params ());\n+\n+  // FIXME: where-clause\n+\n+  stream << \" {\";\n+  auto &variants = enum_item.get_variants ();\n+  if (variants.size () >= 1)\n+    {\n+      stream << '\\n';\n+      indentation.increment ();\n+      for (auto &var : variants)\n+\t{\n+\t  stream << indentation;\n+\t  var->accept_vis (*this);\n+\t  stream << \",\\n\";\n+\t}\n+      indentation.decrement ();\n+    }\n+\n+  stream << \"}\\n\";\n+}\n \n void\n Dump::visit (Union &union_item)\n-{}\n+{\n+  stream << \"union \" << union_item.get_identifier ();\n+  if (union_item.has_generics ())\n+    emit_generic_params (union_item.get_generic_params ());\n+\n+  // FIXME: where-clause\n+\n+  stream << \" {\";\n+  indentation.increment ();\n+  for (auto &field : union_item.get_variants ())\n+    {\n+      stream << '\\n' << indentation;\n+      format_struct_field (field);\n+      stream << ',';\n+    }\n+  indentation.decrement ();\n+\n+  stream << '\\n' << indentation << \"}\\n\";\n+}\n \n void\n Dump::visit (ConstantItem &const_item)"}]}