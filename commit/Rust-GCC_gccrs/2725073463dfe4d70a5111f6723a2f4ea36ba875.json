{"sha": "2725073463dfe4d70a5111f6723a2f4ea36ba875", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyNTA3MzQ2M2RmZTRkNzBhNTExMWY2NzIzYTJmNGVhMzZiYTg3NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-09-03T18:18:48Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-09-03T18:18:48Z"}, "message": "re PR c++/23699 (rejects static int as non constant after \"extern template\")\n\n\tPR c++/23699\n\t* decl2.c (mark_used): Always instantiate static data members\n\tinitialized by constant expressions.\n\t* pt.c (instantiate_decl): Instantiate the initializers for static\n\tdata members initialized by constant expressions.\n\n\tPR c++/21687\n\t* semantics.c (expand_or_defer_fn): Do not call ggc_collect when\n\tfinishing processing for a template function in a local class.\n\tRevert:\n\t2005-09-02  Mark Mitchell  <mark@codesourcery.com>\n\t* parser.c (cp_parser_class_specifier): Push/pop GC contexts\n\taround functions in local classes.\n\n\tPR c++/23699\n\t* g++.dg/ext/static1.C: New test.\n\nFrom-SVN: r103806", "tree": {"sha": "ce48d74b7c9e2e53dacefc8aad93e808cce4796a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce48d74b7c9e2e53dacefc8aad93e808cce4796a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2725073463dfe4d70a5111f6723a2f4ea36ba875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2725073463dfe4d70a5111f6723a2f4ea36ba875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2725073463dfe4d70a5111f6723a2f4ea36ba875", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2725073463dfe4d70a5111f6723a2f4ea36ba875/comments", "author": null, "committer": null, "parents": [{"sha": "7c95bbfbddcdadec7ca9f7662f55c74159064107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c95bbfbddcdadec7ca9f7662f55c74159064107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c95bbfbddcdadec7ca9f7662f55c74159064107"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "e9d3b2b011b60db8b2ab582eef025d91bb9588bf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2725073463dfe4d70a5111f6723a2f4ea36ba875", "patch": "@@ -1,3 +1,19 @@\n+2005-09-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23699\n+\t* decl2.c (mark_used): Always instantiate static data members\n+\tinitialized by constant expressions.\n+\t* pt.c (instantiate_decl): Instantiate the initializers for static\n+\tdata members initialized by constant expressions.\n+\n+\tPR c++/21687\n+\t* semantics.c (expand_or_defer_fn): Do not call ggc_collect when\n+\tfinishing processing for a template function in a local class.\n+\tRevert:\n+\t2005-09-02  Mark Mitchell  <mark@codesourcery.com>\n+\t* parser.c (cp_parser_class_specifier): Push/pop GC contexts\n+\taround functions in local classes.\n+\n 2005-09-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21687"}, {"sha": "75ec65f85b85a1e6e94811125a7c7e887c8deb96", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2725073463dfe4d70a5111f6723a2f4ea36ba875", "patch": "@@ -3270,7 +3270,12 @@ mark_used (tree decl)\n       && (!DECL_EXPLICIT_INSTANTIATION (decl)\n \t  || (TREE_CODE (decl) == FUNCTION_DECL\n \t      && DECL_INLINE (DECL_TEMPLATE_RESULT\n-\t\t\t      (template_for_substitution (decl))))))\n+\t\t\t      (template_for_substitution (decl))))\n+\t  /* We need to instantiate static data members so that there\n+\t     initializers are available in integral constant\n+\t     expressions.  */\n+\t  || (TREE_CODE (decl) == VAR_DECL\n+\t      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))))\n     /* We put off instantiating functions in order to improve compile\n        times.  Maintaining a stack of active functions is expensive,\n        and the inliner knows to instantiate any functions it might"}, {"sha": "6feb114436a4e328031f71d682d2d1cf7aee84c8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2725073463dfe4d70a5111f6723a2f4ea36ba875", "patch": "@@ -12673,9 +12673,6 @@ cp_parser_class_specifier (cp_parser* parser)\n       tree fn;\n       tree class_type = NULL_TREE;\n       tree pushed_scope = NULL_TREE;\n-      /* True if we have called ggc_push_context, and therefore need\n-\t to make a matching call to ggc_pop_context.  */\n-      bool need_ggc_pop_context;\n  \n       /* In a first pass, parse default arguments to the functions.\n \t Then, in a second pass, parse the bodies of the functions.\n@@ -12712,7 +12709,6 @@ cp_parser_class_specifier (cp_parser* parser)\n \t}\n       if (pushed_scope)\n \tpop_scope (pushed_scope);\n-      need_ggc_pop_context = false;\n       /* Now parse the body of the functions.  */\n       for (TREE_VALUE (parser->unparsed_functions_queues)\n \t     = nreverse (TREE_VALUE (parser->unparsed_functions_queues));\n@@ -12722,21 +12718,9 @@ cp_parser_class_specifier (cp_parser* parser)\n \t{\n \t  /* Figure out which function we need to process.  */\n \t  fn = TREE_VALUE (queue_entry);\n-\t  /* We call ggc_collect after processing a function body in\n-\t     order to clean up garbage generated.  If we're processing\n-\t     a local class, however, then we must not clean up stuff\n-\t     from the function containing the class, so we have to\n-\t     push a new garbage-collection context.  */\n-\t  if (function_depth && !need_ggc_pop_context)\n-\t    {\n-\t      need_ggc_pop_context = true;\n-\t      ggc_push_context ();\n-\t    }\n \t  /* Parse the function.  */\n \t  cp_parser_late_parsing_for_member (parser, fn);\n \t}\n-      if (need_ggc_pop_context)\n-\tggc_pop_context ();\n     }\n \n   /* Put back any saved access checks.  */"}, {"sha": "dbdf74d0a9483d15629067be17803b5ccf8086cb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2725073463dfe4d70a5111f6723a2f4ea36ba875", "patch": "@@ -3044,8 +3044,11 @@ expand_or_defer_fn (tree fn)\n       /* Normally, collection only occurs in rest_of_compilation.  So,\n \t if we don't collect here, we never collect junk generated\n \t during the processing of templates until we hit a\n-\t non-template function.  */\n-      ggc_collect ();\n+\t non-template function.  It's not safe to do this inside a\n+\t nested class, though, as the parser may have local state that\n+\t is not a GC root.  */\n+      if (!function_depth)\n+\tggc_collect ();\n       return;\n     }\n "}, {"sha": "0abc44f94f1f6d44a64dfc22e78bb067b3a3bde5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2725073463dfe4d70a5111f6723a2f4ea36ba875", "patch": "@@ -1,3 +1,8 @@\n+2005-09-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23699\n+\t* g++.dg/ext/static1.C: New test.\n+\n 2005-09-02  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c-torture/execute/frame-address.c (check_fa_mid): Avoid"}, {"sha": "9298b1d573b130558aef5c4ca8bdfbbd50f9466e", "filename": "gcc/testsuite/g++.dg/ext/static1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2725073463dfe4d70a5111f6723a2f4ea36ba875/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstatic1.C?ref=2725073463dfe4d70a5111f6723a2f4ea36ba875", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/23699\n+// { dg-options \"\" }\n+\n+template<typename _CharT > class basic_string;\n+typedef basic_string<char> string;\n+template<typename _CharT>\n+struct basic_string\n+{\n+  static const int npos = -1;\n+};\n+template<typename _CharT>\n+const int basic_string<_CharT>::npos;\n+\n+extern template class basic_string<char>;\n+struct A\n+{\n+  static const long npos = string::npos;\n+};"}]}