{"sha": "1270ccda70ca09f7d4fe76b5156dca8992bd77a6", "node_id": "C_kwDOANBUbNoAKDEyNzBjY2RhNzBjYTA5ZjdkNGZlNzZiNTE1NmRjYTg5OTJiZDc3YTY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-09T11:59:32Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-10T11:12:22Z"}, "message": "Factor out jobserver_active_p.\n\ngcc/ChangeLog:\n\n\t* gcc.cc (driver::detect_jobserver): Remove and move to\n\tjobserver.h.\n\t* lto-wrapper.cc (jobserver_active_p): Likewise.\n\t(run_gcc): Likewise.\n\t* opts-jobserver.h: New file.\n\t* opts-common.cc (jobserver_info::jobserver_info): New function.", "tree": {"sha": "5fbcd89444a2b5818dc7acd95ea421a783bd3b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fbcd89444a2b5818dc7acd95ea421a783bd3b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1270ccda70ca09f7d4fe76b5156dca8992bd77a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1270ccda70ca09f7d4fe76b5156dca8992bd77a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1270ccda70ca09f7d4fe76b5156dca8992bd77a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c16d9f78dc81664e3341157c5a6efb85c0c141f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16d9f78dc81664e3341157c5a6efb85c0c141f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16d9f78dc81664e3341157c5a6efb85c0c141f4"}], "stats": {"total": 166, "additions": 99, "deletions": 67}, "files": [{"sha": "cac11c1a117241000d0c4316e4db5e3e4f5aa155", "filename": "gcc/gcc.cc", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/gcc%2Fgcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/gcc%2Fgcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.cc?ref=1270ccda70ca09f7d4fe76b5156dca8992bd77a6", "patch": "@@ -27,6 +27,7 @@ CC recognizes how to compile each input file by suffixes in the file names.\n Once it knows which kind of compilation to perform, the procedure for\n compilation is specified by a string called a \"spec\".  */\n \n+#define INCLUDE_STRING\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -43,6 +44,7 @@ compilation is specified by a string called a \"spec\".  */\n #include \"opts.h\"\n #include \"filenames.h\"\n #include \"spellcheck.h\"\n+#include \"opts-jobserver.h\"\n \n \f\n \n@@ -9178,38 +9180,9 @@ driver::final_actions () const\n void\n driver::detect_jobserver () const\n {\n-  /* Detect jobserver and drop it if it's not working.  */\n-  const char *makeflags = env.get (\"MAKEFLAGS\");\n-  if (makeflags != NULL)\n-    {\n-      const char *needle = \"--jobserver-auth=\";\n-      const char *n = strstr (makeflags, needle);\n-      if (n != NULL)\n-\t{\n-\t  int rfd = -1;\n-\t  int wfd = -1;\n-\n-\t  bool jobserver\n-\t    = (sscanf (n + strlen (needle), \"%d,%d\", &rfd, &wfd) == 2\n-\t       && rfd > 0\n-\t       && wfd > 0\n-\t       && is_valid_fd (rfd)\n-\t       && is_valid_fd (wfd));\n-\n-\t  /* Drop the jobserver if it's not working now.  */\n-\t  if (!jobserver)\n-\t    {\n-\t      unsigned offset = n - makeflags;\n-\t      char *dup = xstrdup (makeflags);\n-\t      dup[offset] = '\\0';\n-\n-\t      const char *space = strchr (makeflags + offset, ' ');\n-\t      if (space != NULL)\n-\t\tstrcpy (dup + offset, space);\n-\t      xputenv (concat (\"MAKEFLAGS=\", dup, NULL));\n-\t    }\n-\t}\n-    }\n+  jobserver_info jinfo;\n+  if (!jinfo.is_active && !jinfo.skipped_makeflags.empty ())\n+    xputenv (jinfo.skipped_makeflags.c_str ());\n }\n \n /* Determine what the exit code of the driver should be.  */"}, {"sha": "1e8eba16dfba163dc335c3c9baffaf9649daf218", "filename": "gcc/lto-wrapper.cc", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/gcc%2Flto-wrapper.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/gcc%2Flto-wrapper.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.cc?ref=1270ccda70ca09f7d4fe76b5156dca8992bd77a6", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n    ./ccCJuXGv.lto.ltrans.o\n */\n \n+#define INCLUDE_STRING\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -49,6 +50,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-section-names.h\"\n #include \"collect-utils.h\"\n #include \"opts-diagnostic.h\"\n+#include \"opt-suggestions.h\"\n+#include \"opts-jobserver.h\"\n \n /* Environment variable, used for passing the names of offload targets from GCC\n    driver to lto-wrapper.  */\n@@ -1336,35 +1339,6 @@ init_num_threads (void)\n #endif\n }\n \n-/* Test and return reason why a jobserver cannot be detected.  */\n-\n-static const char *\n-jobserver_active_p (void)\n-{\n-  #define JS_PREFIX \"jobserver is not available: \"\n-  #define JS_NEEDLE \"--jobserver-auth=\"\n-\n-  const char *makeflags = getenv (\"MAKEFLAGS\");\n-  if (makeflags == NULL)\n-    return JS_PREFIX \"%<MAKEFLAGS%> environment variable is unset\";\n-\n-  const char *n = strstr (makeflags, JS_NEEDLE);\n-  if (n == NULL)\n-    return JS_PREFIX \"%<\" JS_NEEDLE \"%> is not present in %<MAKEFLAGS%>\";\n-\n-  int rfd = -1;\n-  int wfd = -1;\n-\n-  if (sscanf (n + strlen (JS_NEEDLE), \"%d,%d\", &rfd, &wfd) == 2\n-      && rfd > 0\n-      && wfd > 0\n-      && is_valid_fd (rfd)\n-      && is_valid_fd (wfd))\n-    return NULL;\n-  else\n-    return JS_PREFIX \"cannot access %<\" JS_NEEDLE \"%> file descriptors\";\n-}\n-\n /* Print link to -flto documentation with a hint message.  */\n \n void\n@@ -1422,7 +1396,6 @@ run_gcc (unsigned argc, char *argv[])\n   bool jobserver_requested = false;\n   int auto_parallel = 0;\n   bool no_partition = false;\n-  const char *jobserver_error = NULL;\n   bool fdecoded_options_first = true;\n   vec<cl_decoded_option> fdecoded_options;\n   fdecoded_options.create (16);\n@@ -1653,14 +1626,14 @@ run_gcc (unsigned argc, char *argv[])\n     }\n   else\n     {\n-      jobserver_error = jobserver_active_p ();\n-      if (jobserver && jobserver_error != NULL)\n+      jobserver_info jinfo;\n+      if (jobserver && !jinfo.is_active)\n \t{\n \t  /* Fall back to auto parallelism.  */\n \t  jobserver = 0;\n \t  auto_parallel = 1;\n \t}\n-      else if (!jobserver && jobserver_error == NULL)\n+      else if (!jobserver && jinfo.is_active)\n \t{\n \t  parallel = 1;\n \t  jobserver = 1;\n@@ -1971,9 +1944,10 @@ run_gcc (unsigned argc, char *argv[])\n \n       if (nr > 1)\n \t{\n-\t  if (jobserver_requested && jobserver_error != NULL)\n+\t  jobserver_info jinfo;\n+\t  if (jobserver_requested && !jinfo.is_active)\n \t    {\n-\t      warning (0, jobserver_error);\n+\t      warning (0, jinfo.error_msg.c_str ());\n \t      print_lto_docs_link ();\n \t    }\n \t  else if (parallel == 0)"}, {"sha": "4d4f424df13f386daacbec3efd42f6b8fd3de1b9", "filename": "gcc/opts-common.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/gcc%2Fopts-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/gcc%2Fopts-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.cc?ref=1270ccda70ca09f7d4fe76b5156dca8992bd77a6", "patch": "@@ -17,6 +17,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+#define INCLUDE_STRING\n #include \"config.h\"\n #include \"system.h\"\n #include \"intl.h\"\n@@ -25,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"options.h\"\n #include \"diagnostic.h\"\n #include \"spellcheck.h\"\n+#include \"opts-jobserver.h\"\n \n static void prune_options (struct cl_decoded_option **, unsigned int *);\n \n@@ -2005,3 +2007,42 @@ void prepend_xassembler_to_collect_as_options (const char *collect_as_options,\n       obstack_1grow (o, '\\'');\n     }\n }\n+\n+jobserver_info::jobserver_info ()\n+{\n+  /* Detect jobserver and drop it if it's not working.  */\n+  string js_needle = \"--jobserver-auth=\";\n+\n+  const char *envval = getenv (\"MAKEFLAGS\");\n+  if (envval != NULL)\n+    {\n+      string makeflags = envval;\n+      size_t n = makeflags.rfind (js_needle);\n+      if (n != string::npos)\n+\t{\n+\t  if (sscanf (makeflags.c_str () + n + js_needle.size (),\n+\t\t      \"%d,%d\", &rfd, &wfd) == 2\n+\t      && rfd > 0\n+\t      && wfd > 0\n+\t      && is_valid_fd (rfd)\n+\t      && is_valid_fd (wfd))\n+\t    is_active = true;\n+\t  else\n+\t    {\n+\t      string dup = makeflags.substr (0, n);\n+\t      size_t pos = makeflags.find (' ', n);\n+\t      if (pos != string::npos)\n+\t\tdup += makeflags.substr (pos);\n+\t      skipped_makeflags = \"MAKEFLAGS=\" + dup;\n+\t      error_msg\n+\t\t= \"cannot access %<\" + js_needle + \"%> file descriptors\";\n+\t    }\n+\t}\n+      error_msg = \"%<\" + js_needle + \"%> is not present in %<MAKEFLAGS%>\";\n+    }\n+  else\n+    error_msg = \"%<MAKEFLAGS%> environment variable is unset\";\n+\n+  if (!error_msg.empty ())\n+    error_msg = \"jobserver is not available: \" + error_msg;\n+}"}, {"sha": "68ce188b84a5ca3e1c4ba8088ad3ea718fe9228f", "filename": "gcc/opts-jobserver.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/gcc%2Fopts-jobserver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270ccda70ca09f7d4fe76b5156dca8992bd77a6/gcc%2Fopts-jobserver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-jobserver.h?ref=1270ccda70ca09f7d4fe76b5156dca8992bd77a6", "patch": "@@ -0,0 +1,44 @@\n+/* GNU make's jobserver related functionality.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.\n+\n+See dbgcnt.def for usage information.  */\n+\n+#ifndef GCC_JOBSERVER_H\n+#define GCC_JOBSERVER_H\n+\n+using namespace std;\n+\n+struct jobserver_info\n+{\n+  /* Default constructor.  */\n+  jobserver_info ();\n+\n+  /* Error message if there is a problem.  */\n+  string error_msg = \"\";\n+  /* Skipped MAKEFLAGS where --jobserver-auth is skipped.  */\n+  string skipped_makeflags = \"\";\n+  /* File descriptor for reading used for jobserver communication.  */\n+  int rfd = -1;\n+  /* File descriptor for writing used for jobserver communication.  */\n+  int wfd = -1;\n+  /* Return true if jobserver is active.  */\n+  bool is_active = false;\n+};\n+\n+#endif /* GCC_JOBSERVER_H */"}]}