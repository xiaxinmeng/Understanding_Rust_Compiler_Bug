{"sha": "89100826acec92dfaa6ab8f2646b8053e7dbc67c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxMDA4MjZhY2VjOTJkZmFhNmFiOGYyNjQ2YjgwNTNlN2RiYzY3Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-21T21:12:28Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-22T22:55:06Z"}, "message": "c++: ICE with noexcept in class in member function [PR96623]\n\nI discovered very strange code in inject_parm_decls:\n\n   if (args && is_this_parameter (args))\n     {\n       gcc_checking_assert (current_class_ptr == NULL_TREE);\n       current_class_ptr = NULL_TREE;\n\nWe are tripping up on the assert because when we call inject_parm_decls,\ncurrent_class_ptr is set to 'A'.  It was set by inject_this_parameter\nafter we've parsed the parameter-declaration-clause of the member\nfunction foo.  It seems correct to set ccp/ccr to A::B when we're\nlate parsing the noexcept-specifiers of bar* functions in B, so that\nthis-> does the right thing.  Since inject_parm_decls doesn't expect\nto see non-null ccp/ccr, reset it before calling inject_parm_decls.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96623\n\t* parser.c (inject_parm_decls): Remove a redundant assignment.\n\t(cp_parser_class_specifier_1): Clear current_class_{ptr,ref}\n\tbefore calling inject_parm_decls.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96623\n\t* g++.dg/cpp0x/noexcept64.C: New test.", "tree": {"sha": "940b0046b483fbaf3c292157e81e8fa3484439fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/940b0046b483fbaf3c292157e81e8fa3484439fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89100826acec92dfaa6ab8f2646b8053e7dbc67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89100826acec92dfaa6ab8f2646b8053e7dbc67c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89100826acec92dfaa6ab8f2646b8053e7dbc67c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89100826acec92dfaa6ab8f2646b8053e7dbc67c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8cde87cac09ec414c3f640fce132c0626dedc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab8cde87cac09ec414c3f640fce132c0626dedc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab8cde87cac09ec414c3f640fce132c0626dedc2"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "e0208d02bdc2c0f0a1f583b6aa771adc2cfe97ae", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89100826acec92dfaa6ab8f2646b8053e7dbc67c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89100826acec92dfaa6ab8f2646b8053e7dbc67c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=89100826acec92dfaa6ab8f2646b8053e7dbc67c", "patch": "@@ -24710,7 +24710,6 @@ inject_parm_decls (tree decl)\n   if (args && is_this_parameter (args))\n     {\n       gcc_checking_assert (current_class_ptr == NULL_TREE);\n-      current_class_ptr = NULL_TREE;\n       current_class_ref = cp_build_fold_indirect_ref (args);\n       current_class_ptr = args;\n     }\n@@ -24967,7 +24966,6 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n       tree pushed_scope = NULL_TREE;\n       unsigned ix;\n       cp_default_arg_entry *e;\n-      tree save_ccp, save_ccr;\n \n       if (!type_definition_ok_p || any_erroneous_template_args_p (type))\n \t{\n@@ -25012,6 +25010,8 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n       /* If there are noexcept-specifiers that have not yet been processed,\n \t take care of them now.  Do this before processing NSDMIs as they\n \t may depend on noexcept-specifiers already having been processed.  */\n+      tree save_ccp = current_class_ptr;\n+      tree save_ccr = current_class_ref;\n       FOR_EACH_VEC_SAFE_ELT (unparsed_noexcepts, ix, decl)\n \t{\n \t  tree ctx = DECL_CONTEXT (decl);\n@@ -25029,7 +25029,9 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t  /* Make sure that any template parameters are in scope.  */\n \t  maybe_begin_member_template_processing (decl);\n \n-\t  /* Make sure that any member-function parameters are in scope.  */\n+\t  /* Make sure that any member-function parameters are in scope.\n+\t     This function doesn't expect ccp to be set.  */\n+\t  current_class_ptr = current_class_ref = NULL_TREE;\n \t  inject_parm_decls (decl);\n \n \t  /* 'this' is not allowed in static member functions.  */\n@@ -25065,8 +25067,6 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n       vec_safe_truncate (unparsed_noexcepts, 0);\n \n       /* Now parse any NSDMIs.  */\n-      save_ccp = current_class_ptr;\n-      save_ccr = current_class_ref;\n       FOR_EACH_VEC_SAFE_ELT (unparsed_nsdmis, ix, decl)\n \t{\n \t  if (class_type != DECL_CONTEXT (decl))"}, {"sha": "8b7303cd8a1e72c62d7a8bf02cfca3166956d27f", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept64.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89100826acec92dfaa6ab8f2646b8053e7dbc67c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89100826acec92dfaa6ab8f2646b8053e7dbc67c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept64.C?ref=89100826acec92dfaa6ab8f2646b8053e7dbc67c", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/96623\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int x = 0;\n+struct A {\n+  int a1;\n+  void foo (int p) {\n+    int foovar;\n+    struct B {\n+      int b1;\n+      void bar1 () noexcept(x);\n+      void bar2 () noexcept(noexcept(this->b1));\n+      void bar3 () noexcept(noexcept(this->b2));\n+      void bar4 () noexcept(noexcept(a1));\n+      void bar5 () noexcept(noexcept(a2));\n+      void bar6 () noexcept(noexcept(b1));\n+      void bar7 () noexcept(noexcept(b2));\n+      void bar8 () noexcept(noexcept(foovar));\n+      void bar9 () noexcept(noexcept(p));\n+      int b2;\n+    };\n+  }\n+  int a2;\n+};"}]}