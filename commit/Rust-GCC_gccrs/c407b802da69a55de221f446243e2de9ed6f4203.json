{"sha": "c407b802da69a55de221f446243e2de9ed6f4203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwN2I4MDJkYTY5YTU1ZGUyMjFmNDQ2MjQzZTJkZTllZDZmNDIwMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-29T11:51:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-29T11:51:45Z"}, "message": "(simplify_binary_operation, case MULT): Don't convert to ASHIFT if\nstill generating RTL.\n\nFrom-SVN: r6340", "tree": {"sha": "77fc3143230cb78a97d971c0fa76bc121556ae32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77fc3143230cb78a97d971c0fa76bc121556ae32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c407b802da69a55de221f446243e2de9ed6f4203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c407b802da69a55de221f446243e2de9ed6f4203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c407b802da69a55de221f446243e2de9ed6f4203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c407b802da69a55de221f446243e2de9ed6f4203/comments", "author": null, "committer": null, "parents": [{"sha": "bb7c21a564da5e0fbc1ab4cc3bf3702b232dd3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7c21a564da5e0fbc1ab4cc3bf3702b232dd3e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7c21a564da5e0fbc1ab4cc3bf3702b232dd3e6"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "9ad2fa9e90baa2155a5b64235144da4f77867376", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c407b802da69a55de221f446243e2de9ed6f4203/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c407b802da69a55de221f446243e2de9ed6f4203/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c407b802da69a55de221f446243e2de9ed6f4203", "patch": "@@ -648,6 +648,8 @@ static void cse_check_loop_start PROTO((rtx, rtx));\n static void cse_set_around_loop\tPROTO((rtx, rtx, rtx));\n static rtx cse_basic_block\tPROTO((rtx, rtx, struct branch_path *, int));\n static void count_reg_usage\tPROTO((rtx, int *, rtx, int));\n+\n+extern int rtx_equal_function_value_matters;\n \f\n /* Return an estimate of the cost of computing rtx X.\n    One use is in cse, to decide which expression to keep in the hash table.\n@@ -3685,9 +3687,11 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  if (op1 == CONST1_RTX (mode))\n \t    return op0;\n \n-\t  /* Convert multiply by constant power of two into shift.  */\n+\t  /* Convert multiply by constant power of two into shift unless\n+\t     we are still generating RTL.  This test is a kludge.  */\n \t  if (GET_CODE (op1) == CONST_INT\n-\t      && (val = exact_log2 (INTVAL (op1))) >= 0)\n+\t      && (val = exact_log2 (INTVAL (op1))) >= 0\n+\t      && ! rtx_equal_function_value_matters)\n \t    return gen_rtx (ASHIFT, mode, op0, GEN_INT (val));\n \n \t  if (GET_CODE (op1) == CONST_DOUBLE"}]}