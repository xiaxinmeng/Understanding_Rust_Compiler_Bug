{"sha": "eddbb81f1254f025d6f1b6b8e7554aa9a3830302", "node_id": "C_kwDOANBUbNoAKGVkZGJiODFmMTI1NGYwMjVkNmYxYjZiOGU3NTU0YWE5YTM4MzAzMDI", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-20T05:22:28Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-21T07:47:40Z"}, "message": "Don't check can_vec_perm_const_p for nonlinear iv_init when it's constant.\n\nWhen init_expr is INTEGER_CST or REAL_CST, can_vec_perm_const_p is not\nnecessary since there's no real vec_perm needed, but\nvec_gen_perm_mask_checked will gcc_assert (can_vec_perm_const_p). So\nit's better to use vec_gen_perm_mask_any in\nvect_create_nonlinear_iv_init.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/106963\n\t* tree-vect-loop.cc (vect_create_nonlinear_iv_init): Use\n\tvec_gen_perm_mask_any instead of vec_gen_perm_mask_check.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr106963.c: New test.", "tree": {"sha": "ea3ffbd47d9f494816bfbd1d28f317216bd5f5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea3ffbd47d9f494816bfbd1d28f317216bd5f5d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eddbb81f1254f025d6f1b6b8e7554aa9a3830302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eddbb81f1254f025d6f1b6b8e7554aa9a3830302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eddbb81f1254f025d6f1b6b8e7554aa9a3830302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eddbb81f1254f025d6f1b6b8e7554aa9a3830302/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c23fe08c1fcee524503b24e15321b20df136f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c23fe08c1fcee524503b24e15321b20df136f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c23fe08c1fcee524503b24e15321b20df136f6c"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "9f2d20e2523fcdcec56a932b2f55bfc3dacfb7bb", "filename": "gcc/testsuite/gcc.target/i386/pr106963.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eddbb81f1254f025d6f1b6b8e7554aa9a3830302/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106963.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eddbb81f1254f025d6f1b6b8e7554aa9a3830302/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106963.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106963.c?ref=eddbb81f1254f025d6f1b6b8e7554aa9a3830302", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -mno-avx2\" } */\n+\n+void\n+foo_neg_const (int *a)\n+{\n+  int i, b = 1;\n+\n+  for (i = 0; i < 1000; i++)\n+    {\n+      a[i] = b;\n+      b = -b;\n+    }\n+}"}, {"sha": "aabdc6f2d81ea7b2cbb3d30cdd84c638054e21c2", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eddbb81f1254f025d6f1b6b8e7554aa9a3830302/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eddbb81f1254f025d6f1b6b8e7554aa9a3830302/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=eddbb81f1254f025d6f1b6b8e7554aa9a3830302", "patch": "@@ -8356,8 +8356,11 @@ vect_create_nonlinear_iv_init (gimple_seq* stmts, tree init_expr,\n \t    sel[2 * i + 1] = i + nunits;\n \t  }\n \tvec_perm_indices indices (sel, 2, nunits);\n+\t/* Don't use vect_gen_perm_mask_checked since can_vec_perm_const_p may\n+\t   fail when vec_init is const vector. In that situation vec_perm is not\n+\t   really needed.  */\n \ttree perm_mask_even\n-\t  = vect_gen_perm_mask_checked (vectype, indices);\n+\t  = vect_gen_perm_mask_any (vectype, indices);\n \tvec_init = gimple_build (stmts, VEC_PERM_EXPR,\n \t\t\t\t vectype,\n \t\t\t\t vec_init, vec_neg,"}]}