{"sha": "2efc721885206a44fc19814a7b1ef3d83ba3d2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmYzcyMTg4NTIwNmE0NGZjMTk4MTRhN2IxZWYzZDgzYmEzZDJhYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-12-09T16:59:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-12-09T16:59:26Z"}, "message": "re PR c++/60218 ([c++11] ICE using __bases for broken class hierarchy)\n\n/cp\n2015-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60218\n\t* semantics.c (calculate_bases_helper): Don't call dfs_walk_all\n\twhen TYPE_BINFO (type) is null.\n\t(calculate_bases): Handle gracefully a null vector->length ().\n\n/testsuite\n2015-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60218\n\t* g++.dg/ext/bases2.C: New.\n\nFrom-SVN: r231460", "tree": {"sha": "1797e8f161c9dce3cd34b2b73145e4676c4fe834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1797e8f161c9dce3cd34b2b73145e4676c4fe834"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2efc721885206a44fc19814a7b1ef3d83ba3d2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efc721885206a44fc19814a7b1ef3d83ba3d2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efc721885206a44fc19814a7b1ef3d83ba3d2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/comments", "author": null, "committer": null, "parents": [{"sha": "026d0d538b66652ab69d361abb5542821c09c9b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026d0d538b66652ab69d361abb5542821c09c9b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/026d0d538b66652ab69d361abb5542821c09c9b8"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "e8bcba51162f427cce89b989806d5ebd58f51887", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2efc721885206a44fc19814a7b1ef3d83ba3d2ab", "patch": "@@ -1,3 +1,10 @@\n+2015-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60218\n+\t* semantics.c (calculate_bases_helper): Don't call dfs_walk_all\n+\twhen TYPE_BINFO (type) is null.\n+\t(calculate_bases): Handle gracefully a null vector->length ().\n+\n 2015-12-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/68711"}, {"sha": "b8f4e8f7ce73081c52bbf6ca6236cb974bddbc74", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2efc721885206a44fc19814a7b1ef3d83ba3d2ab", "patch": "@@ -3851,8 +3851,9 @@ calculate_bases_helper (tree type)\n   vec<tree, va_gc> *vector = make_tree_vector();\n \n   /* Now add non-virtual base classes in order of construction */\n-  dfs_walk_all (TYPE_BINFO (type),\n-                dfs_calculate_bases_pre, dfs_calculate_bases_post, &vector);\n+  if (TYPE_BINFO (type))\n+    dfs_walk_all (TYPE_BINFO (type),\n+\t\t  dfs_calculate_bases_pre, dfs_calculate_bases_post, &vector);\n   return vector;\n }\n \n@@ -3886,13 +3887,18 @@ calculate_bases (tree type)\n   vec_safe_splice (vector, nonvbases);\n   release_tree_vector (nonvbases);\n \n-  /* Last element is entire class, so don't copy */\n-  bases_vec = make_tree_vec (vector->length () - 1);\n-\n-  for (i = 0; i < vector->length () - 1; ++i)\n+  /* Note that during error recovery vector->length can even be zero.  */\n+  if (vector->length () > 1)\n     {\n-      TREE_VEC_ELT (bases_vec, i) = (*vector)[i];\n+      /* Last element is entire class, so don't copy */\n+      bases_vec = make_tree_vec (vector->length() - 1);\n+\n+      for (i = 0; i < vector->length () - 1; ++i)\n+\tTREE_VEC_ELT (bases_vec, i) = (*vector)[i];\n     }\n+  else\n+    bases_vec = make_tree_vec (0);\n+\n   release_tree_vector (vector);\n   return bases_vec;\n }"}, {"sha": "20f62afa684c2252a1f841950cd9297c1bddbb85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2efc721885206a44fc19814a7b1ef3d83ba3d2ab", "patch": "@@ -1,3 +1,8 @@\n+2015-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60218\n+\t* g++.dg/ext/bases2.C: New.\n+\n 2015-12-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/sse4_1-roundps-1.c: Remove ASM_SUFFIX define."}, {"sha": "a8806dde83926b18b4512f359454a58a9709a99b", "filename": "gcc/testsuite/g++.dg/ext/bases2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efc721885206a44fc19814a7b1ef3d83ba3d2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases2.C?ref=2efc721885206a44fc19814a7b1ef3d83ba3d2ab", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/60218\n+// { dg-do compile { target c++11 } }\n+\n+template<typename...> struct A {};\n+\n+template<typename T> struct B\n+{\n+  typedef A<__bases(T)...> C;\n+};\n+\n+struct X {};\n+struct Y : X* {};  // { dg-error \"expected\" }\n+\n+B<Y> b;"}]}