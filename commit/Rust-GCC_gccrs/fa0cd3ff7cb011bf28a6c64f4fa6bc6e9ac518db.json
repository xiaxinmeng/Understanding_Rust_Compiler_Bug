{"sha": "fa0cd3ff7cb011bf28a6c64f4fa6bc6e9ac518db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwY2QzZmY3Y2IwMTFiZjI4YTZjNjRmNGZhNmJjNmU5YWM1MThkYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-02T08:30:37Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-02T08:30:37Z"}, "message": "(edit_file): Use safe_write.\n\n(safe_write): New subroutine.\n\nFrom-SVN: r5972", "tree": {"sha": "101eef46591295e8f6cf5377aa2200019e99e41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101eef46591295e8f6cf5377aa2200019e99e41c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa0cd3ff7cb011bf28a6c64f4fa6bc6e9ac518db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0cd3ff7cb011bf28a6c64f4fa6bc6e9ac518db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa0cd3ff7cb011bf28a6c64f4fa6bc6e9ac518db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0cd3ff7cb011bf28a6c64f4fa6bc6e9ac518db/comments", "author": null, "committer": null, "parents": [{"sha": "83a4b97f7d16c257beb423ea3835f8a8c9ad86c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a4b97f7d16c257beb423ea3835f8a8c9ad86c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a4b97f7d16c257beb423ea3835f8a8c9ad86c8"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "7dd0d66a2ef6d928fe901312a651bfef67d56ed5", "filename": "gcc/protoize.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa0cd3ff7cb011bf28a6c64f4fa6bc6e9ac518db/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa0cd3ff7cb011bf28a6c64f4fa6bc6e9ac518db/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=fa0cd3ff7cb011bf28a6c64f4fa6bc6e9ac518db", "patch": "@@ -4033,6 +4033,26 @@ scan_for_missed_items (file_p)\n     }\n }\n \n+/* Write LEN bytes at PTR to descriptor DESC,\n+   retrying if necessary, and treating any real error as fatal.  */\n+\n+static void\n+safe_write (desc, ptr, len, out_fname)\n+     int desc;\n+     char *ptr;\n+     int len;\n+     char *out_fname;\n+{\n+  while (len > 0) {\n+    int written = write (fileno (stdout), ptr, len);\n+    if (written < 0)\n+      fprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n+\t       pname, shortpath (NULL, out_fname), sys_errlist[errno]);\n+    ptr += written;\n+    len -= written;\n+  }\n+}\n+\n /* Do all editing operations for a single source file (either a \"base\" file\n    or an \"include\" file).  To do this we read the file into memory, keep a\n    virgin copy there, make another cleaned in-core copy of the original file\n@@ -4190,9 +4210,7 @@ edit_file (hp)\n   \n     /* Write the clean file.  */\n   \n-    if (write (clean_file, new_clean_text_base, clean_size) != clean_size)\n-      fprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n-\t       pname, shortpath (NULL, clean_filename), sys_errlist[errno]);\n+    safe_write (clean_file, new_clean_text_base, clean_size, clean_filename);\n   \n     close (clean_file);\n   }\n@@ -4326,10 +4344,7 @@ edit_file (hp)\n     {\n       unsigned int out_size = (repl_write_ptr + 1) - repl_text_base;\n   \n-      if (write (output_file, repl_text_base, out_size) != out_size)\n-        fprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n-\t\t pname, shortpath (NULL, convert_filename),\n-\t\t sys_errlist[errno]);\n+      safe_write (output_file, repl_text_base, out_size, convert_filename);\n     }\n   \n     close (output_file);"}]}