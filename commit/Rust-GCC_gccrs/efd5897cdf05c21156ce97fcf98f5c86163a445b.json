{"sha": "efd5897cdf05c21156ce97fcf98f5c86163a445b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkNTg5N2NkZjA1YzIxMTU2Y2U5N2ZjZjk4ZjVjODYxNjNhNDQ1Yg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2017-10-24T02:37:02Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2017-10-24T02:37:02Z"}, "message": "nios2.c (nios2_rtx_costs): Make costs better reflect reality.\n\n2017-10-23  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/nios2/nios2.c (nios2_rtx_costs): Make costs better\n\treflect reality.\n\t(nios2_address_cost): Define.\n\t(nios2_legitimize_address): Recognize (exp + constant) directly.\n\t(TARGET_ADDRESS_COST): Define.\n\nFrom-SVN: r254034", "tree": {"sha": "41c13aefd6f587c44fe5952c9855969ad90ab53a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41c13aefd6f587c44fe5952c9855969ad90ab53a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efd5897cdf05c21156ce97fcf98f5c86163a445b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd5897cdf05c21156ce97fcf98f5c86163a445b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd5897cdf05c21156ce97fcf98f5c86163a445b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd5897cdf05c21156ce97fcf98f5c86163a445b/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82348675ee7757f2ef28e3e1350fd2bbd9994ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82348675ee7757f2ef28e3e1350fd2bbd9994ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82348675ee7757f2ef28e3e1350fd2bbd9994ad9"}], "stats": {"total": 173, "additions": 147, "deletions": 26}, "files": [{"sha": "63f84f52f71a78e44a0828d644e695d2c46ac8f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd5897cdf05c21156ce97fcf98f5c86163a445b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd5897cdf05c21156ce97fcf98f5c86163a445b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efd5897cdf05c21156ce97fcf98f5c86163a445b", "patch": "@@ -1,3 +1,11 @@\n+2017-10-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/nios2/nios2.c (nios2_rtx_costs): Make costs better\n+\treflect reality.\n+\t(nios2_address_cost): Define.\n+\t(nios2_legitimize_address): Recognize (exp + constant) directly.\n+\t(TARGET_ADDRESS_COST): Define.\n+\n 2017-10-23  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/nios2/nios2-protos.h (nios2_large_constant_p): Declare."}, {"sha": "f5963d4d4e99f42bbb85751ae88e415790ce7c6e", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 139, "deletions": 26, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd5897cdf05c21156ce97fcf98f5c86163a445b/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd5897cdf05c21156ce97fcf98f5c86163a445b/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=efd5897cdf05c21156ce97fcf98f5c86163a445b", "patch": "@@ -62,6 +62,7 @@ static const char *nios2_unspec_reloc_name (int);\n static void nios2_register_builtin_fndecl (unsigned, tree);\n static rtx nios2_ldst_parallel (bool, bool, bool, rtx, int,\n \t\t\t\tunsigned HOST_WIDE_INT, bool);\n+static int nios2_address_cost (rtx, machine_mode, addr_space_t, bool);\n \n /* Threshold for data being put into the small data/bss area, instead\n    of the normal data area (references to the small data/bss area take\n@@ -1430,40 +1431,56 @@ nios2_simple_const_p (const_rtx cst)\n    cost has been computed, and false if subexpressions should be\n    scanned.  In either case, *TOTAL contains the cost result.  */\n static bool\n-nios2_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t int outer_code ATTRIBUTE_UNUSED,\n-\t\t int opno ATTRIBUTE_UNUSED,\n-\t\t int *total, bool speed ATTRIBUTE_UNUSED)\n+nios2_rtx_costs (rtx x, machine_mode mode,\n+\t\t int outer_code,\n+\t\t int opno,\n+\t\t int *total, bool speed)\n {\n   int code = GET_CODE (x);\n \n   switch (code)\n     {\n       case CONST_INT:\n-        if (INTVAL (x) == 0)\n+        if (INTVAL (x) == 0 || nios2_simple_const_p (x))\n           {\n             *total = COSTS_N_INSNS (0);\n             return true;\n           }\n-        else if (nios2_simple_const_p (x))\n-          {\n-            *total = COSTS_N_INSNS (2);\n-            return true;\n-          }\n         else\n           {\n-            *total = COSTS_N_INSNS (4);\n+\t    /* High + lo_sum.  */\n+            *total = COSTS_N_INSNS (1);\n             return true;\n           }\n \n       case LABEL_REF:\n       case SYMBOL_REF:\n       case CONST:\n       case CONST_DOUBLE:\n-        {\n-          *total = COSTS_N_INSNS (4);\n-          return true;\n-        }\n+\tif (gprel_constant_p (x))\n+          {\n+            *total = COSTS_N_INSNS (1);\n+            return true;\n+          }\n+\telse\n+\t  {\n+\t    /* High + lo_sum.  */\n+\t    *total = COSTS_N_INSNS (1);\n+\t    return true;\n+\t  }\n+\n+      case HIGH:\n+\t{\n+\t  /* This is essentially a constant.  */\n+\t  *total = COSTS_N_INSNS (0);\n+\t  return true;\n+\t}\n+\n+      case LO_SUM:\n+\t{\n+\t  *total = COSTS_N_INSNS (0);\n+\t  return true;\n+\t}\n \n       case AND:\n \t{\n@@ -1477,29 +1494,83 @@ nios2_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED,\n \t  return false;\n \t}\n \n+      /* For insns that have an execution latency (3 cycles), don't\n+\t penalize by the full amount since we can often schedule\n+\t to avoid it.  */\n       case MULT:\n         {\n-          *total = COSTS_N_INSNS (1);\n+\t  if (!TARGET_HAS_MUL)\n+\t    *total = COSTS_N_INSNS (5);  /* Guess?  */\n+\t  else if (speed)\n+\t    *total = COSTS_N_INSNS (2);  /* Latency adjustment.  */\n+\t  else \n+\t    *total = COSTS_N_INSNS (1);\n           return false;\n         }\n-      case SIGN_EXTEND:\n+\n+      case DIV:\n         {\n-          *total = COSTS_N_INSNS (3);\n+\t  if (!TARGET_HAS_DIV)\n+\t    *total = COSTS_N_INSNS (5);  /* Guess?  */\n+\t  else if (speed)\n+\t    *total = COSTS_N_INSNS (2);  /* Latency adjustment.  */\n+\t  else \n+\t    *total = COSTS_N_INSNS (1);\n           return false;\n         }\n-      case ZERO_EXTEND:\n+\n+      case ASHIFT:\n+      case ASHIFTRT:\n+      case LSHIFTRT:\n+      case ROTATE:\n         {\n-          *total = COSTS_N_INSNS (1);\n+\t  if (!speed)\n+\t    *total = COSTS_N_INSNS (1);\n+\t  else \n+\t    *total = COSTS_N_INSNS (2);  /* Latency adjustment.  */\n           return false;\n         }\n+\t\n+      case ZERO_EXTRACT:\n+\tif (TARGET_HAS_BMX)\n+\t  {\n+\t    *total = COSTS_N_INSNS (1);\n+\t    return true;\n+\t  }\n+\treturn false;\n \n-    case ZERO_EXTRACT:\n-      if (TARGET_HAS_BMX)\n+      case SIGN_EXTEND:\n+        {\n+\t  if (MEM_P (XEXP (x, 0)))\n+\t    *total = COSTS_N_INSNS (1);\n+\t  else\n+\t    *total = COSTS_N_INSNS (3);\n+\t  return false;\n+\t}\n+\n+      case MEM:\n \t{\n-          *total = COSTS_N_INSNS (1);\n-          return true;\n+\t  rtx addr = XEXP (x, 0);\n+\n+\t  /* Account for cost of different addressing modes.  */\n+\t  *total = nios2_address_cost (addr, mode, ADDR_SPACE_GENERIC, speed);\n+\n+\t  if (outer_code == SET && opno == 0)\n+\t    /* Stores execute in 1 cycle accounted for by\n+\t       the outer SET.  */\n+\t    ;\n+\t  else if (outer_code == SET || outer_code == SIGN_EXTEND\n+\t\t   || outer_code == ZERO_EXTEND)\n+\t    /* Latency adjustment.  */\n+\t    {\n+\t      if (speed)\n+\t\t*total += COSTS_N_INSNS (1);\n+\t    }\n+\t  else\n+\t    /* This is going to have to be split into a load.  */\n+\t    *total += COSTS_N_INSNS (speed ? 2 : 1);\n+\t  return true;\n \t}\n-      return false;\n \n       default:\n         return false;\n@@ -2090,6 +2161,37 @@ nios2_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n   return false;\n }\n \n+/* Implement TARGET_ADDRESS_COST.\n+   Experimentation has shown that we get better code by penalizing the\n+   the (plus reg symbolic_constant) and (plus reg (const ...)) forms\n+   but giving (plus reg symbol_ref) address modes the same cost as those\n+   that don't require splitting.  Also, from a theoretical point of view:\n+   - This is in line with the recommendation in the GCC internals \n+     documentation to make address forms involving multiple\n+     registers more expensive than single-register forms.  \n+   - OTOH it still encourages fwprop1 to propagate constants into \n+     address expressions more aggressively.\n+   - We should discourage splitting (symbol + offset) into hi/lo pairs\n+     to allow CSE'ing the symbol when it's used with more than one offset,\n+     but not so heavily as to avoid this addressing mode at all.  */\n+static int\n+nios2_address_cost (rtx address, \n+\t\t    machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t    addr_space_t as ATTRIBUTE_UNUSED, \n+\t\t    bool speed ATTRIBUTE_UNUSED)\n+{\n+  if (nios2_plus_symbolic_constant_p (address))\n+    return COSTS_N_INSNS (1);\n+  if (nios2_symbolic_constant_p (address))\n+    {\n+      if (GET_CODE (address) == CONST)\n+\treturn COSTS_N_INSNS (1);\n+      else\n+\treturn COSTS_N_INSNS (0);\n+    }\n+  return COSTS_N_INSNS (0);\n+}\n+\n /* Return true if X is a MEM whose address expression involves a symbolic\n    constant.  */\n bool\n@@ -2396,8 +2498,16 @@ nios2_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n   op0 = XEXP (x, 0);\n   op1 = XEXP (x, 1);\n \n+  /* Target-independent code turns (exp + constant) into plain\n+     register indirect.  Although subsequent optimization passes will\n+     eventually sort that out, ivopts uses the unoptimized form for\n+     computing its cost model, so we get better results by generating\n+     the correct form from the start.  */\n+  if (nios2_valid_addr_offset_p (op1))\n+    return gen_rtx_PLUS (Pmode, force_reg (Pmode, op0), copy_rtx (op1));\n+\n   /* We may need to split symbolic constants now.  */\n-  if (nios2_symbolic_constant_p (op1))\n+  else if (nios2_symbolic_constant_p (op1))\n     {\n       if (nios2_symbolic_constant_allowed ())\n \treturn gen_rtx_PLUS (Pmode, force_reg (Pmode, op0), copy_rtx (op1));\n@@ -5259,6 +5369,9 @@ nios2_adjust_reg_alloc_order (void)\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS nios2_rtx_costs\n \n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST nios2_address_cost\n+\n #undef TARGET_HAVE_TLS\n #define TARGET_HAVE_TLS TARGET_LINUX_ABI\n "}]}