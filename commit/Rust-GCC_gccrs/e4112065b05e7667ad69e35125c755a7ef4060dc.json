{"sha": "e4112065b05e7667ad69e35125c755a7ef4060dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxMTIwNjViMDVlNzY2N2FkNjllMzUxMjVjNzU1YTdlZjQwNjBkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-21T09:39:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-21T09:39:47Z"}, "message": "ipa-fnsummary.h (enum ipa_hints_vals): Fix comment typo, preffer -> prefer.\n\n\t* ipa-fnsummary.h (enum ipa_hints_vals): Fix comment typo,\n\tpreffer -> prefer.\n\t* ipa-inline.c (edge_badness): Likewise.\n\t* lto-streamer.h (class lto_location_cache): Likewise.\n\t* tree-ssa-sink.c (select_best_block): Likewise.  Fix comment typos,\n\tgratutious -> gratuitous.\n\nFrom-SVN: r278546", "tree": {"sha": "2f204484db7f45eece1387d639910717fee34f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f204484db7f45eece1387d639910717fee34f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4112065b05e7667ad69e35125c755a7ef4060dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4112065b05e7667ad69e35125c755a7ef4060dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4112065b05e7667ad69e35125c755a7ef4060dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4112065b05e7667ad69e35125c755a7ef4060dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a877996fa38034348c569f2fe1651e88a99df737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a877996fa38034348c569f2fe1651e88a99df737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a877996fa38034348c569f2fe1651e88a99df737"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "e705e4a2e99f37db644757b11b590f8b337abf58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4112065b05e7667ad69e35125c755a7ef4060dc", "patch": "@@ -1,3 +1,12 @@\n+2019-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ipa-fnsummary.h (enum ipa_hints_vals): Fix comment typo,\n+\tpreffer -> prefer.\n+\t* ipa-inline.c (edge_badness): Likewise.\n+\t* lto-streamer.h (class lto_location_cache): Likewise.\n+\t* tree-ssa-sink.c (select_best_block): Likewise.  Fix comment typos,\n+\tgratutious -> gratuitous.\n+\n 2019-11-21  Richard Biener  <rguenther@suse.de>\n \n \tRevert"}, {"sha": "ebd475b6d983e55d7e557755a5ef165f053b0712", "filename": "gcc/ipa-fnsummary.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2Fipa-fnsummary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2Fipa-fnsummary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.h?ref=e4112065b05e7667ad69e35125c755a7ef4060dc", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-predicate.h\"\n \n \n-/* Hints are reasons why IPA heuristics should preffer specializing given\n+/* Hints are reasons why IPA heuristics should prefer specializing given\n    function.  They are represtented as bitmap of the following values.  */\n enum ipa_hints_vals {\n   /* When specialization turns indirect call into a direct call,"}, {"sha": "3cd1779f380d2d2ac86e2c3f0b8e5d79d3302cb2", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=e4112065b05e7667ad69e35125c755a7ef4060dc", "patch": "@@ -1265,7 +1265,7 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \t}\n       if (overall_growth > 0)\n         {\n-\t  /* Strongly preffer functions with few callers that can be inlined\n+\t  /* Strongly prefer functions with few callers that can be inlined\n \t     fully.  The square root here leads to smaller binaries at average.\n \t     Watch however for extreme cases and return to linear function\n \t     when growth is large.  */"}, {"sha": "7b712808bd57ecebe7d60d81ecbc534c010f8315", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=e4112065b05e7667ad69e35125c755a7ef4060dc", "patch": "@@ -296,7 +296,7 @@ typedef void (lto_free_section_data_f) (struct lto_file_decl_data *,\n \t\t\t\t\tsize_t);\n \n /* The location cache holds expanded locations for streamed in trees.\n-   This is done to reduce memory usage of libcpp linemap that strongly preffers\n+   This is done to reduce memory usage of libcpp linemap that strongly prefers\n    locations to be inserted in the soruce order.  */\n \n class lto_location_cache"}, {"sha": "eebff65cb4656219152ae9287929db39000dee86", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4112065b05e7667ad69e35125c755a7ef4060dc/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=e4112065b05e7667ad69e35125c755a7ef4060dc", "patch": "@@ -176,7 +176,7 @@ nearest_common_dominator_of_uses (def_operand_p def_p, bool *debug_stmts)\n \n    If the resulting block is in a shallower loop nest, then use it.  Else\n    only use the resulting block if it has significantly lower execution\n-   frequency than EARLY_BB to avoid gratutious statement movement.  We\n+   frequency than EARLY_BB to avoid gratuitous statement movement.  We\n    consider statements with VOPS more desirable to move.\n \n    This pass would obviously benefit from PDO as it utilizes block\n@@ -223,9 +223,9 @@ select_best_block (basic_block early_bb,\n     }\n \n   /* If BEST_BB is at the same nesting level, then require it to have\n-     significantly lower execution frequency to avoid gratutious movement.  */\n+     significantly lower execution frequency to avoid gratuitous movement.  */\n   if (bb_loop_depth (best_bb) == bb_loop_depth (early_bb)\n-      /* If result of comparsion is unknown, preffer EARLY_BB.\n+      /* If result of comparsion is unknown, prefer EARLY_BB.\n \t Thus use !(...>=..) rather than (...<...)  */\n       && !(best_bb->count.apply_scale (100, 1)\n \t   > (early_bb->count.apply_scale (threshold, 1))))"}]}