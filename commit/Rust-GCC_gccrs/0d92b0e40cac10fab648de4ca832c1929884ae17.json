{"sha": "0d92b0e40cac10fab648de4ca832c1929884ae17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5MmIwZTQwY2FjMTBmYWI2NDhkZTRjYTgzMmMxOTI5ODg0YWUxNw==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-09-21T19:51:24Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-09-21T19:51:24Z"}, "message": "* config/vax/vax.c: Convert to ISO C90.\n\nFrom-SVN: r71631", "tree": {"sha": "b359aad0211da0fa815cd3cdb400559ce46c2a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b359aad0211da0fa815cd3cdb400559ce46c2a17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d92b0e40cac10fab648de4ca832c1929884ae17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d92b0e40cac10fab648de4ca832c1929884ae17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d92b0e40cac10fab648de4ca832c1929884ae17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d92b0e40cac10fab648de4ca832c1929884ae17/comments", "author": null, "committer": null, "parents": [{"sha": "43bb47c23689bc82b37b416d8be30d9cade3ca9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43bb47c23689bc82b37b416d8be30d9cade3ca9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43bb47c23689bc82b37b416d8be30d9cade3ca9f"}], "stats": {"total": 68, "additions": 28, "deletions": 40}, "files": [{"sha": "f389ab3deee38534692d53a8afb1cbb4ee8a6f5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d92b0e40cac10fab648de4ca832c1929884ae17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d92b0e40cac10fab648de4ca832c1929884ae17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d92b0e40cac10fab648de4ca832c1929884ae17", "patch": "@@ -1,3 +1,7 @@\n+2003-09-21  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* config/vax/vax.c: Convert to ISO C90.\n+\n 2003-09-21  Graham Stott  <grahams@btinternet.com>\n \n        PR target/12353"}, {"sha": "ad40e982fecde4331d72fd0aeb26c07f867129e5", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d92b0e40cac10fab648de4ca832c1929884ae17/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d92b0e40cac10fab648de4ca832c1929884ae17/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=0d92b0e40cac10fab648de4ca832c1929884ae17", "patch": "@@ -41,14 +41,14 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n \n-static void vax_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void vax_file_start PARAMS ((void));\n-static void vax_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n-\t\t\t\t\t HOST_WIDE_INT, tree));\n-static int vax_address_cost_1 PARAMS ((rtx));\n-static int vax_address_cost PARAMS ((rtx));\n-static int vax_rtx_costs_1 PARAMS ((rtx, enum rtx_code, enum rtx_code));\n-static bool vax_rtx_costs PARAMS ((rtx, int, int, int *));\n+static void vax_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void vax_file_start (void);\n+static void vax_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t HOST_WIDE_INT, tree);\n+static int vax_address_cost_1 (rtx);\n+static int vax_address_cost (rtx);\n+static int vax_rtx_costs_1 (rtx, enum rtx_code, enum rtx_code);\n+static bool vax_rtx_costs (rtx, int, int, int *);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -77,7 +77,7 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Set global variables as needed for the options enabled.  */\n \n void\n-override_options ()\n+override_options (void)\n {\n   /* We're VAX floating point, not IEEE floating point.  */\n   memset (real_format_for_mode, 0, sizeof real_format_for_mode);\n@@ -96,9 +96,7 @@ override_options ()\n    which registers should not be saved even if used.  */\n \n static void\n-vax_output_function_prologue (file, size)\n-     FILE * file;\n-     HOST_WIDE_INT size;\n+vax_output_function_prologue (FILE * file, HOST_WIDE_INT size)\n {\n   register int regno;\n   register int mask = 0;\n@@ -135,7 +133,7 @@ vax_output_function_prologue (file, size)\n    so that gas can distinguish between D_float and G_float prior to\n    processing the .stabs directive identifying type double.  */\n static void\n-vax_file_start ()\n+vax_file_start (void)\n {\n   default_file_start ();\n \n@@ -146,9 +144,7 @@ vax_file_start ()\n /* This is like nonimmediate_operand with a restriction on the type of MEM.  */\n \n void\n-split_quadword_operands (operands, low, n)\n-     rtx *operands, *low;\n-     int n ATTRIBUTE_UNUSED;\n+split_quadword_operands (rtx * operands, rtx * low, int n ATTRIBUTE_UNUSED)\n {\n   int i;\n   /* Split operands.  */\n@@ -178,9 +174,7 @@ split_quadword_operands (operands, low, n)\n }\n \f\n void\n-print_operand_address (file, addr)\n-     FILE *file;\n-     register rtx addr;\n+print_operand_address (FILE * file, register rtx addr)\n {\n   register rtx reg1, breg, ireg;\n   rtx offset;\n@@ -361,8 +355,7 @@ print_operand_address (file, addr)\n }\n \f\n const char *\n-rev_cond_name (op)\n-     rtx op;\n+rev_cond_name (rtx op)\n {\n   switch (GET_CODE (op))\n     {\n@@ -393,8 +386,7 @@ rev_cond_name (op)\n }\n \n int\n-vax_float_literal(c)\n-    register rtx c;\n+vax_float_literal(register rtx c)\n {\n   register enum machine_mode mode;\n   REAL_VALUE_TYPE r, s;\n@@ -440,8 +432,7 @@ vax_float_literal(c)\n \n \n static int\n-vax_address_cost_1 (addr)\n-    register rtx addr;\n+vax_address_cost_1 (register rtx addr)\n {\n   int reg = 0, indexed = 0, indir = 0, offset = 0, predec = 0;\n   rtx plus_op0 = 0, plus_op1 = 0;\n@@ -509,8 +500,7 @@ vax_address_cost_1 (addr)\n }\n \n static int\n-vax_address_cost (x)\n-     rtx x;\n+vax_address_cost (rtx x)\n {\n   return (1 + (GET_CODE (x) == REG ? 0 : vax_address_cost_1 (x)));\n }\n@@ -520,9 +510,7 @@ vax_address_cost (x)\n    other models.  */\n \n static int\n-vax_rtx_costs_1 (x, code, outer_code)\n-    register rtx x;\n-    enum rtx_code code, outer_code;\n+vax_rtx_costs_1 (register rtx x, enum rtx_code code, enum rtx_code outer_code)\n {\n   enum machine_mode mode = GET_MODE (x);\n   register int c;\n@@ -745,10 +733,7 @@ vax_rtx_costs_1 (x, code, outer_code)\n }\n \n static bool\n-vax_rtx_costs (x, code, outer_code, total)\n-    rtx x;\n-    int code, outer_code;\n-    int *total;\n+vax_rtx_costs (rtx x, int code, int outer_code, int * total)\n {\n   *total = vax_rtx_costs_1 (x, code, outer_code);\n   return true;\n@@ -762,12 +747,11 @@ vax_rtx_costs (x, code, outer_code, total)\n */\n \n static void\n-vax_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n-     FILE *file;\n-     tree thunk ATTRIBUTE_UNUSED;\n-     HOST_WIDE_INT delta;\n-     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n-     tree function;\n+vax_output_mi_thunk (FILE * file,\n+                     tree thunk ATTRIBUTE_UNUSED, \n+                     HOST_WIDE_INT delta,\n+                     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n+                     tree function)\n {\n   fprintf (file, \"\\t.word 0x0ffc\\n\\taddl2 $\" HOST_WIDE_INT_PRINT_DEC, delta);\n   asm_fprintf (file, \",4(%Rap)\\n\");"}]}