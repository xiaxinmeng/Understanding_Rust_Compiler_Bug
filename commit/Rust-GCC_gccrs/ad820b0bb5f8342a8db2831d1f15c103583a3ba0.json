{"sha": "ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "node_id": "C_kwDOANBUbNoAKGFkODIwYjBiYjVmODM0MmE4ZGIyODMxZDFmMTVjMTAzNTgzYTNiYTA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-14T12:27:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-15T17:26:53Z"}, "message": "libstdc++: Add missing constexpr to std::variant (P2231R1)\n\nThis implements the changes in P2231R1 which make std::variant fully\nconstexpr in C++20.\n\nWe need to replace placement new with std::construct_at, but that isn't\ndefined for C++17. Use std::_Construct instead, which forwards to\nstd::construct_at in C++20 mode (since the related changes to make\nstd::optional fully constexpr, in r12-4389).\n\nWe also need to replace the untyped char buffer in _Uninitialized with a\nunion, which can be accessed in constexpr functions. But the union needs\nto have a non-trivial destructor if its variant type is non-trivial,\nwhich means that the _Variadic_union also needs a non-trivial\ndestructor. This adds a constrained partial specialization of\n_Variadic_union for the C++20-only case where a non-trivial destructor\nis needed.\n\nWe can't use concepts to constrain the specialization (or the primary\ntemplate's destructor) in C++17, so retain the untyped char buffer\nsolution for C++17 mode.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/variant (__cpp_lib_variant): Update value for\n\tC++20.\n\t(__variant_cast, __variant_construct): Add constexpr for C++20.\n\t(__variant_construct_single, __construct_by_index) Likewise. Use\n\tstd::_Construct instead of placement new.\n\t(_Uninitialized<T, false>) [__cplusplus >= 202002]: Replace\n\tbuffer with a union and define a destructor.\n\t(_Variadic_union) [__cplusplus >= 202002]: Add a specialization\n\tfor non-trivial destruction.\n\t(_Variant_storage::__index_of): New helper variable template.\n\t(_Variant_storage::~_Variant_storage()): Add constexpr.\n\t(_Variant_storage::_M_reset()): Likewise.\n\t(_Copy_ctor_base, _Move_ctor_base): Likewise.\n\t(_Copy_assign_base, _Move_assign_base): Likewise.\n\t(variant, swap): Likewise.\n\t* include/std/version (__cpp_lib_variant): Update value for\n\tC++20.\n\t* testsuite/20_util/optional/version.cc: Check for exact value\n\tin C++17.\n\t* testsuite/20_util/variant/87619.cc: Increase timeout for\n\tC++20 mode.\n\t* testsuite/20_util/variant/constexpr.cc: New test.\n\t* testsuite/20_util/variant/version.cc: New test.", "tree": {"sha": "2b6913f1e66803824a67f0fd3a31fd05719030be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6913f1e66803824a67f0fd3a31fd05719030be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e27771e5dcd8cf2cb757db6177a3485acd28b88f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27771e5dcd8cf2cb757db6177a3485acd28b88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27771e5dcd8cf2cb757db6177a3485acd28b88f"}], "stats": {"total": 299, "additions": 274, "deletions": 25}, "files": [{"sha": "d18365fde22d4681a2cf04bb1ba15c7ff0d2771b", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 115, "deletions": 22, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "patch": "@@ -39,13 +39,14 @@\n #include <bits/exception_defines.h>\n #include <bits/functional_hash.h>\n #include <bits/invoke.h>\n-#include <ext/aligned_buffer.h>\n #include <bits/parse_numbers.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_construct.h>\n #include <bits/utility.h> // in_place_index_t\n-#if __cplusplus > 201703L\n+#if __cplusplus == 201703L\n+# include <ext/aligned_buffer.h>\n+#else\n # include <compare>\n #endif\n \n@@ -71,7 +72,12 @@ namespace __variant\n } // namespace __variant\n } // namespace __detail\n \n-#define __cpp_lib_variant 202102L\n+#if __cplusplus >= 202002L && __cpp_concepts\n+// P2231R1 constexpr needs constexpr unions and constrained destructors.\n+# define __cpp_lib_variant 202106L\n+#else\n+# define __cpp_lib_variant 202102L\n+#endif\n \n   template<typename... _Types> class tuple;\n   template<typename... _Types> class variant;\n@@ -146,6 +152,7 @@ namespace __variant\n     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);\n \n   template <typename... _Types, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     decltype(auto)\n     __variant_cast(_Tp&& __rhs)\n     {\n@@ -224,8 +231,12 @@ namespace __variant\n     __as(const std::variant<_Types...>&& __v) noexcept\n     { return std::move(__v); }\n \n+  // For C++17:\n   // _Uninitialized<T> is guaranteed to be a trivially destructible type,\n   // even if T is not.\n+  // For C++20:\n+  // _Uninitialized<T> is trivially destructible iff T is, so _Variant_union\n+  // needs a constrained non-trivial destructor.\n   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>\n     struct _Uninitialized;\n \n@@ -256,6 +267,37 @@ namespace __variant\n   template<typename _Type>\n     struct _Uninitialized<_Type, false>\n     {\n+#if __cpp_lib_variant >= 202106L\n+      template<typename... _Args>\n+\tconstexpr\n+\t_Uninitialized(in_place_index_t<0>, _Args&&... __args)\n+\t: _M_storage(std::forward<_Args>(__args)...)\n+\t{ }\n+\n+      constexpr ~_Uninitialized() { }\n+\n+      _Uninitialized(const _Uninitialized&) = default;\n+      _Uninitialized(_Uninitialized&&) = default;\n+      _Uninitialized& operator=(const _Uninitialized&) = default;\n+      _Uninitialized& operator=(_Uninitialized&&) = default;\n+\n+      constexpr const _Type& _M_get() const & noexcept\n+      { return _M_storage; }\n+\n+      constexpr _Type& _M_get() & noexcept\n+      { return _M_storage; }\n+\n+      constexpr const _Type&& _M_get() const && noexcept\n+      { return std::move(_M_storage); }\n+\n+      constexpr _Type&& _M_get() && noexcept\n+      { return std::move(_M_storage); }\n+\n+      union {\n+\tchar _M_nope;\n+\t_Type _M_storage;\n+      };\n+#else\n       template<typename... _Args>\n \tconstexpr\n \t_Uninitialized(in_place_index_t<0>, _Args&&... __args)\n@@ -277,6 +319,7 @@ namespace __variant\n       { return std::move(*_M_storage._M_ptr()); }\n \n       __gnu_cxx::__aligned_membuf<_Type> _M_storage;\n+#endif\n     };\n \n   template<size_t _Np, typename _Union>\n@@ -353,15 +396,31 @@ namespace __variant\n       constexpr _Variadic_union() : _M_rest() { }\n \n       template<typename... _Args>\n-\tconstexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)\n+\tconstexpr\n+\t_Variadic_union(in_place_index_t<0>, _Args&&... __args)\n \t: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)\n \t{ }\n \n       template<size_t _Np, typename... _Args>\n-\tconstexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)\n+\tconstexpr\n+\t_Variadic_union(in_place_index_t<_Np>, _Args&&... __args)\n \t: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)\n \t{ }\n \n+#if __cpp_lib_variant >= 202106L\n+      _Variadic_union(const _Variadic_union&) = default;\n+      _Variadic_union(_Variadic_union&&) = default;\n+      _Variadic_union& operator=(const _Variadic_union&) = default;\n+      _Variadic_union& operator=(_Variadic_union&&) = default;\n+\n+      ~_Variadic_union() = default;\n+\n+      constexpr ~_Variadic_union()\n+\trequires (!__has_trivial_destructor(_First))\n+\t      || (!__has_trivial_destructor(_Variadic_union<_Rest...>))\n+      { }\n+#endif\n+\n       _Uninitialized<_First> _M_first;\n       _Variadic_union<_Rest...> _M_rest;\n     };\n@@ -406,6 +465,10 @@ namespace __variant\n   template<typename... _Types>\n     struct _Variant_storage<false, _Types...>\n     {\n+      template<typename _Tp>\n+\tstatic constexpr size_t __index_of\n+\t  = __detail::__variant::__index_of_v<_Tp, _Types...>;\n+\n       constexpr\n       _Variant_storage()\n       : _M_index(static_cast<__index_type>(variant_npos))\n@@ -418,7 +481,8 @@ namespace __variant\n \t_M_index{_Np}\n \t{ }\n \n-      void _M_reset()\n+      constexpr void\n+      _M_reset()\n       {\n \tif (!_M_valid()) [[unlikely]]\n \t  return;\n@@ -431,6 +495,7 @@ namespace __variant\n \t_M_index = static_cast<__index_type>(variant_npos);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       ~_Variant_storage()\n       { _M_reset(); }\n \n@@ -450,6 +515,10 @@ namespace __variant\n   template<typename... _Types>\n     struct _Variant_storage<true, _Types...>\n     {\n+      template<typename _Tp>\n+\tstatic constexpr size_t __index_of\n+\t  = __detail::__variant::__index_of_v<_Tp, _Types...>;\n+\n       constexpr\n       _Variant_storage()\n       : _M_index(static_cast<__index_type>(variant_npos))\n@@ -462,7 +531,8 @@ namespace __variant\n \t_M_index{_Np}\n \t{ }\n \n-      void _M_reset() noexcept\n+      constexpr void\n+      _M_reset() noexcept\n       { _M_index = static_cast<__index_type>(variant_npos); }\n \n       constexpr bool\n@@ -489,17 +559,25 @@ namespace __variant\n \t_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;\n \n   template<typename _Tp, typename _Up>\n-    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)\n+    _GLIBCXX20_CONSTEXPR\n+    void\n+    __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)\n     {\n-      void* __storage = std::addressof(__lhs._M_u);\n-      using _Type = remove_reference_t<decltype(__rhs_mem)>;\n+      using _Type = __remove_cvref_t<_Up>;\n+\n       if constexpr (!is_same_v<_Type, __variant_cookie>)\n-        ::new (__storage)\n-\t  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));\n+\t{\n+\t  using _Lhs = remove_reference_t<_Tp>;\n+\t  std::_Construct(std::__addressof(__lhs._M_u),\n+\t\t\t  in_place_index<_Lhs::template __index_of<_Type>>,\n+\t\t\t  std::forward<_Up>(__rhs_mem));\n+\t}\n     }\n \n   template<typename... _Types, typename _Tp, typename _Up>\n-    void __variant_construct(_Tp&& __lhs, _Up&& __rhs)\n+    _GLIBCXX20_CONSTEXPR\n+    void\n+    __variant_construct(_Tp&& __lhs, _Up&& __rhs)\n     {\n       __lhs._M_index = __rhs._M_index;\n       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable\n@@ -518,6 +596,7 @@ namespace __variant\n       using _Base = _Variant_storage_alias<_Types...>;\n       using _Base::_Base;\n \n+      _GLIBCXX20_CONSTEXPR\n       _Copy_ctor_base(const _Copy_ctor_base& __rhs)\n \t  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)\n       {\n@@ -546,13 +625,15 @@ namespace __variant\n       using _Base = _Copy_ctor_alias<_Types...>;\n       using _Base::_Base;\n \n+      _GLIBCXX20_CONSTEXPR\n       _Move_ctor_base(_Move_ctor_base&& __rhs)\n \t  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)\n       {\n \t__variant_construct<_Types...>(*this, std::move(__rhs));\n       }\n \n       template<typename _Up>\n+\t_GLIBCXX20_CONSTEXPR\n         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)\n         {\n \t  this->_M_reset();\n@@ -561,6 +642,7 @@ namespace __variant\n \t}\n \n       template<typename _Up>\n+\t_GLIBCXX20_CONSTEXPR\n         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)\n         {\n \t  this->_M_reset();\n@@ -580,6 +662,7 @@ namespace __variant\n       using _Base::_Base;\n \n       template<typename _Up>\n+\t_GLIBCXX20_CONSTEXPR\n         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)\n         {\n \t  this->_M_reset();\n@@ -588,6 +671,7 @@ namespace __variant\n \t}\n \n       template<typename _Up>\n+\t_GLIBCXX20_CONSTEXPR\n         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)\n         {\n \t  this->_M_reset();\n@@ -606,6 +690,7 @@ namespace __variant\n       using _Base = _Move_ctor_alias<_Types...>;\n       using _Base::_Base;\n \n+      _GLIBCXX20_CONSTEXPR\n       _Copy_assign_base&\n       operator=(const _Copy_assign_base& __rhs)\n \t  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)\n@@ -664,6 +749,7 @@ namespace __variant\n       using _Base = _Copy_assign_alias<_Types...>;\n       using _Base::_Base;\n \n+      _GLIBCXX20_CONSTEXPR\n       _Move_assign_base&\n       operator=(_Move_assign_base&& __rhs)\n \t  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)\n@@ -707,8 +793,7 @@ namespace __variant\n       using _Base = _Move_assign_alias<_Types...>;\n \n       constexpr\n-      _Variant_base()\n-\t  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)\n+      _Variant_base() noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)\n       : _Variant_base(in_place_index<0>) { }\n \n       template<size_t _Np, typename... _Args>\n@@ -1095,13 +1180,12 @@ namespace __variant\n     }\n \n   template<size_t _Np, typename _Variant, typename... _Args>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     __construct_by_index(_Variant& __v, _Args&&... __args)\n     {\n-      auto&& __storage = __detail::__variant::__get<_Np>(__v);\n-      ::new ((void*)std::addressof(__storage))\n-        remove_reference_t<decltype(__storage)>\n-\t  (std::forward<_Args>(__args)...);\n+      std::_Construct(std::__addressof(__variant::__get<_Np>(__v)),\n+\t\t      std::forward<_Args>(__args)...);\n       // Construction didn't throw, so can set the new index now:\n       __v._M_index = _Np;\n     }\n@@ -1285,6 +1369,7 @@ namespace __variant\n     visit(_Visitor&&, _Variants&&...);\n \n   template<typename... _Types>\n+    _GLIBCXX20_CONSTEXPR\n     inline enable_if_t<(is_move_constructible_v<_Types> && ...)\n \t\t\t&& (is_swappable_v<_Types> && ...)>\n     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)\n@@ -1342,9 +1427,11 @@ namespace __variant\n     {\n     private:\n       template <typename... _UTypes, typename _Tp>\n-\tfriend decltype(auto) __variant_cast(_Tp&&);\n+\tfriend _GLIBCXX20_CONSTEXPR decltype(auto)\n+\t__variant_cast(_Tp&&);\n+\n       template<size_t _Np, typename _Variant, typename... _Args>\n-\tfriend void\n+\tfriend _GLIBCXX20_CONSTEXPR void\n \t__detail::__variant::__construct_by_index(_Variant& __v,\n \t\t\t\t\t\t  _Args&&... __args);\n \n@@ -1402,7 +1489,7 @@ namespace __variant\n       variant(variant&&) = default;\n       variant& operator=(const variant&) = default;\n       variant& operator=(variant&&) = default;\n-      ~variant() = default;\n+      _GLIBCXX20_CONSTEXPR ~variant() = default;\n \n       template<typename _Tp,\n \t       typename = enable_if_t<sizeof...(_Types) != 0>,\n@@ -1459,6 +1546,7 @@ namespace __variant\n \t{ }\n \n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<__exactly_once<__accepted_type<_Tp&&>>\n \t\t    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>\n \t\t    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,\n@@ -1483,6 +1571,7 @@ namespace __variant\n \t}\n \n       template<typename _Tp, typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,\n \t\t    _Tp&>\n \templace(_Args&&... __args)\n@@ -1492,6 +1581,7 @@ namespace __variant\n \t}\n \n       template<typename _Tp, typename _Up, typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>\n \t\t    && __exactly_once<_Tp>,\n \t\t    _Tp&>\n@@ -1502,6 +1592,7 @@ namespace __variant\n \t}\n \n       template<size_t _Np, typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,\n \t\t\t\t       _Args...>,\n \t\t    variant_alternative_t<_Np, variant>&>\n@@ -1548,6 +1639,7 @@ namespace __variant\n \t}\n \n       template<size_t _Np, typename _Up, typename... _Args>\n+\t_GLIBCXX20_CONSTEXPR\n \tenable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,\n \t\t\t\t       initializer_list<_Up>&, _Args...>,\n \t\t    variant_alternative_t<_Np, variant>&>\n@@ -1601,6 +1693,7 @@ namespace __variant\n \t  return size_t(__index_type(this->_M_index + 1)) - 1;\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       swap(variant& __rhs)\n       noexcept((__is_nothrow_swappable<_Types>::value && ...)"}, {"sha": "0d7ae3bf857bfd82ac622638aeca98b5d520b6c1", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "patch": "@@ -173,7 +173,9 @@\n # define __cpp_lib_to_chars 201611L\n #endif\n #define __cpp_lib_unordered_map_try_emplace 201411\n-#define __cpp_lib_variant 202102L\n+#if __cplusplus == 201703L || ! __cpp_concepts // N.B. updated value in C++20\n+# define __cpp_lib_variant 202102L\n+#endif\n #endif\n \n #if __cplusplus >= 202002L\n@@ -280,6 +282,9 @@\n # endif\n #define __cpp_lib_to_address 201711L\n #define __cpp_lib_to_array 201907L\n+#if __cpp_concepts\n+# define __cpp_lib_variant 202106L\n+#endif\n #endif\n \n #if __cplusplus > 202002L"}, {"sha": "c18ecb8d48d1b23684440e1b6da7a1a0a6a53d64", "filename": "libstdc++-v3/testsuite/20_util/optional/version.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fversion.cc?ref=ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "patch": "@@ -4,8 +4,8 @@\n \n #ifndef __cpp_lib_optional\n # error \"Feature test macro for optional is missing in <version>\"\n-#elif __cpp_lib_optional < 201606L\n-# error \"Feature test macro for optional has wrong value in <version>\"\n+#elif __cplusplus == 201703L && __cpp_lib_optional != 201606L\n+# error \"Feature test macro for optional has wrong value for C++17 in <version>\"\n #elif __cplusplus >= 202002L && __cpp_lib_optional < 202106L\n # error \"Feature test macro for optional has wrong value for C++20 in <version>\"\n #endif"}, {"sha": "c87851007f2caa00dba933983cd53cffe0c7804b", "filename": "libstdc++-v3/testsuite/20_util/variant/87619.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F87619.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F87619.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F87619.cc?ref=ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "patch": "@@ -16,6 +16,8 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile { target c++17 } }\n+// FIXME: Need increased timeout due to PR c++/102780\n+// { dg-timeout-factor 2 { target c++20 } }\n \n #include <variant>\n #include <utility>"}, {"sha": "7af3d98fe5d5d6284f64f68c5ed8398629c842b4", "filename": "libstdc++-v3/testsuite/20_util/variant/constexpr.cc", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fconstexpr.cc?ref=ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "patch": "@@ -0,0 +1,138 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <variant>\n+\n+// P2231R1 Missing constexpr in std::optional and std::variant\n+\n+#ifndef __cpp_lib_variant\n+#error \"Feature test macro for variant is missing in <variant>\"\n+#elif __cpp_lib_variant < 202106L\n+# error \"Feature test macro for variant has wrong value for C++20 in <variant>\"\n+#endif\n+\n+#include <testsuite_hooks.h>\n+\n+\n+constexpr bool\n+test_assign()\n+{\n+  std::variant<int, double> v1(1);\n+  v1 = 2.5;\n+  VERIFY( std::get<double>(v1) == 2.5 );\n+\n+  v1 = 99;\n+  VERIFY( std::get<int>(v1) == 99 );\n+  v1 = 999;\n+  VERIFY( std::get<int>(v1) == 999 );\n+\n+  struct S // non-trivial special members\n+  {\n+    constexpr S(int i) : i(i) { }\n+    constexpr ~S() { }\n+    constexpr S(const S& s) : i(s.i) { }\n+\n+    int i;\n+  };\n+\n+  std::variant<int, S> v;\n+  v = S(123);\n+  VERIFY( std::get<1>(v).i == 123 );\n+\n+  const S s(456);\n+  v = s;\n+  VERIFY( std::get<1>(v).i == 456 );\n+\n+  v = 789;\n+  VERIFY( std::get<0>(v) == 789 );\n+\n+  return true;\n+}\n+\n+static_assert( test_assign() );\n+\n+constexpr bool\n+test_emplace()\n+{\n+  struct S // non-trivial special members\n+  {\n+    constexpr S(std::initializer_list<int> l) : i(l.begin()[0]) { }\n+    constexpr S(std::initializer_list<int> l, int n) : i(l.begin()[n]) { }\n+    constexpr ~S() { }\n+    constexpr S(const S& s) : i(s.i) { }\n+\n+    int i;\n+  };\n+\n+  std::variant<int, double, S> v(1);\n+\n+  // template<class T, class... Args> constexpr T& emplace(Args&&... args);\n+  v.emplace<double>(2.0);\n+  VERIFY( std::get<1>(v) == 2.0 );\n+  v.emplace<double>(2.5);\n+  VERIFY( std::get<1>(v) == 2.5 );\n+  v.emplace<int>(2.5);\n+  VERIFY( std::get<0>(v) == 2 );\n+\n+  // template<class T, class U, class... Args>\n+  // constexpr T& emplace(initializer_list<U>, Args&&... args);\n+  v.emplace<S>({3, 2, 1});\n+  VERIFY( std::get<2>(v).i == 3 );\n+  v.emplace<S>({3, 2, 1}, 1);\n+  VERIFY( std::get<2>(v).i == 2 );\n+\n+  // template<size_t I, class... Args>\n+  // constexpr variant_alternative_t<I, ...>& emplace(Args&&... args);\n+  v.emplace<1>(3.0);\n+  VERIFY( std::get<1>(v) == 3.0 );\n+  v.emplace<1>(0.5);\n+  VERIFY( std::get<1>(v) == 0.5 );\n+  v.emplace<0>(1.5);\n+  VERIFY( std::get<0>(v) == 1 );\n+\n+  // template<size_t I, class U, class... Args>\n+  // constexpr variant_alternative_t<I, ...>&\n+  // emplace(initializer_list<U>, Args&&... args);\n+  v.emplace<2>({7, 8, 9});\n+  VERIFY( std::get<2>(v).i == 7 );\n+  v.emplace<2>({13, 12, 11}, 1);\n+  VERIFY( std::get<2>(v).i == 12 );\n+\n+  return true;\n+}\n+\n+static_assert( test_emplace() );\n+\n+constexpr bool\n+test_swap()\n+{\n+  std::variant<int, double> v1(1), v2(2.5);\n+  v1.swap(v2);\n+  VERIFY( std::get<double>(v1) == 2.5 );\n+  VERIFY( std::get<int>(v2) == 1 );\n+\n+  swap(v1, v2);\n+  VERIFY( std::get<int>(v1) == 1 );\n+  VERIFY( std::get<double>(v2) == 2.5 );\n+\n+  struct S\n+  {\n+    constexpr S(int i) : i(i) { }\n+    constexpr S(S&& s) : i(s.i) { }\n+    constexpr S& operator=(S&& s) { i = s.i; s.i = -1; return *this; }\n+\n+    int i;\n+  };\n+\n+  std::variant<int, S> v3(3), v4(S(4));\n+  v3.swap(v4);\n+  VERIFY( std::get<S>(v3).i == 4 );\n+  VERIFY( std::get<int>(v4) == 3 );\n+  v3.swap(v4);\n+  VERIFY( std::get<int>(v3) == 3 );\n+  VERIFY( std::get<S>(v4).i == 4 );\n+\n+  return true;\n+}\n+\n+static_assert( test_swap() );"}, {"sha": "de04c5eb2944f731e8c3222ba09be9cf665d054b", "filename": "libstdc++-v3/testsuite/20_util/variant/version.cc", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad820b0bb5f8342a8db2831d1f15c103583a3ba0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fversion.cc?ref=ad820b0bb5f8342a8db2831d1f15c103583a3ba0", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_variant\n+#error \"Feature test macro for variant is missing in <version>\"\n+#elif __cplusplus == 201703L && __cpp_lib_variant != 202102L\n+# error \"Feature test macro for variant has wrong value for C++17 in <version>\"\n+#elif __cplusplus >= 202002L && __cpp_lib_variant < 202106L\n+# error \"Feature test macro for variant has wrong value for C++20 in <version>\"\n+#endif"}]}