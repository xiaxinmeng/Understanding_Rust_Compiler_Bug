{"sha": "6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "node_id": "C_kwDOANBUbNoAKDZjOWU1N2VmYTU0NzRjZmU1ZDA0NDBlMTAyMmVlM2M0YTg0MDAxOTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-21T22:24:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-21T22:24:23Z"}, "message": "Merge #883\n\n883: Extract AsyncConstStatus to be a shared enum between AST and HIR r=philberty a=philberty\n\nThis allows us to reuse the same enum and fix the uninitilized warning\r\nas it has already been setup before hand in the AST.\r\n\r\nFixes #875\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "9336a5c60138f53b3d83c4e8064ab4f5897d7c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9336a5c60138f53b3d83c4e8064ab4f5897d7c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6zKXCRBK7hj4Ov3rIwAAXU8IADYxXK6MJbuRewUqtTYNAzfK\nkaggZCKSKxOxgQp2kcHKohuWO2mXy3NZt50F1jtev5MK8SnrqtOglvAJAQOOua+J\ncvVlRbEbrTCUkDQc5Z5BfBubnUJf1/ImDu3VahmIDnfBRsX/UE4en9Toimg6Ujix\nc6pR3Pwzsy3UTbj60EnOC+Y4Hm7SRHMhZAQssV8IRkZcR2aoM4kvcCDamzHCFJ7T\nmt1VKY3bMG/n0sPqxKIFO3QYaUcuV+BxRvll/k9YRafBmhkjnEfwPNmAmuuvFyCu\nO8wXMRqUj2tFyQW1pYrKPAVJM4NNsIoorVzsaGOF/89v865y2B5N12Cy4BsUjzc=\n=mRSP\n-----END PGP SIGNATURE-----\n", "payload": "tree 9336a5c60138f53b3d83c4e8064ab4f5897d7c13\nparent 8c96ccceb27e96246ff474800c3d7350445bd6e9\nparent e77f051369efce4207c965ab2b69c5d9867c5846\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1642803863 +0000\ncommitter GitHub <noreply@github.com> 1642803863 +0000\n\nMerge #883\n\n883: Extract AsyncConstStatus to be a shared enum between AST and HIR r=philberty a=philberty\n\nThis allows us to reuse the same enum and fix the uninitilized warning\r\nas it has already been setup before hand in the AST.\r\n\r\nFixes #875\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c96ccceb27e96246ff474800c3d7350445bd6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c96ccceb27e96246ff474800c3d7350445bd6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c96ccceb27e96246ff474800c3d7350445bd6e9"}, {"sha": "e77f051369efce4207c965ab2b69c5d9867c5846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e77f051369efce4207c965ab2b69c5d9867c5846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e77f051369efce4207c965ab2b69c5d9867c5846"}], "stats": {"total": 139, "additions": 44, "deletions": 95}, "files": [{"sha": "91bd6a5f2fbdf37c86e8449eac5be0a9116532ef", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -2288,10 +2288,10 @@ FunctionQualifiers::as_string () const\n     case NONE:\n       // do nothing\n       break;\n-    case CONST:\n+    case CONST_FN:\n       str += \"const \";\n       break;\n-    case ASYNC:\n+    case ASYNC_FN:\n       str += \"async \";\n       break;\n     default:"}, {"sha": "1829358d929547c557c716848d9b25d4abbed847", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 13, "deletions": 46, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-ast.h\"\n #include \"rust-path.h\"\n+#include \"rust-common.h\"\n \n namespace Rust {\n namespace AST {\n@@ -487,12 +488,6 @@ struct FunctionQualifiers\n public:\n   /* Whether the function is neither const nor async, const only, or async\n    * only. */\n-  enum AsyncConstStatus\n-  {\n-    NONE,\n-    CONST,\n-    ASYNC\n-  };\n \n private:\n   AsyncConstStatus const_status;\n@@ -705,34 +700,17 @@ struct Visibility\n // A method (function belonging to a type)\n class Method : public InherentImplItem, public TraitImplItem\n {\n-  // moved from impl items for consistency\n   std::vector<Attribute> outer_attrs;\n   Visibility vis;\n-\n   FunctionQualifiers qualifiers;\n   Identifier method_name;\n-\n-  // bool has_generics;\n-  // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam>> generic_params; // inlined\n-\n+  std::vector<std::unique_ptr<GenericParam>> generic_params;\n   SelfParam self_param;\n-\n-  // bool has_params;\n-  // FunctionParams function_params;\n-  std::vector<FunctionParam> function_params; // inlined\n-\n-  // bool has_return_type;\n-  // FunctionReturnType return_type;\n-  std::unique_ptr<Type> return_type; // inlined\n-\n-  // bool has_where_clause;\n+  std::vector<FunctionParam> function_params;\n+  std::unique_ptr<Type> return_type;\n   WhereClause where_clause;\n-\n   std::unique_ptr<BlockExpr> function_body;\n-\n   Location locus;\n-\n   NodeId node_id;\n \n public:\n@@ -746,7 +724,7 @@ class Method : public InherentImplItem, public TraitImplItem\n   // Creates an error state method.\n   static Method create_error ()\n   {\n-    return Method (\"\", FunctionQualifiers (FunctionQualifiers::NONE, true),\n+    return Method (\"\", FunctionQualifiers (NONE, true),\n \t\t   std::vector<std::unique_ptr<GenericParam>> (),\n \t\t   SelfParam::create_error (), std::vector<FunctionParam> (),\n \t\t   nullptr, WhereClause::create_empty (), nullptr,\n@@ -904,6 +882,8 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   Location get_locus () const override final { return locus; }\n \n+  FunctionQualifiers get_qualifiers () { return qualifiers; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -1439,35 +1419,18 @@ class UseDeclaration : public VisItem\n   }\n };\n \n-// Parameters used in a function - TODO inline?\n-/*struct FunctionParams {\n-    std::vector<FunctionParam> function_params;\n-};*/\n-\n class LetStmt;\n \n // Rust function declaration AST node\n class Function : public VisItem, public InherentImplItem, public TraitImplItem\n {\n   FunctionQualifiers qualifiers;\n   Identifier function_name;\n-\n-  // bool has_generics;\n-  // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam>> generic_params; // inlined\n-\n-  // bool has_function_params;\n-  // FunctionParams function_params;\n-  std::vector<FunctionParam> function_params; // inlined\n-\n-  // bool has_function_return_type;\n+  std::vector<std::unique_ptr<GenericParam>> generic_params;\n+  std::vector<FunctionParam> function_params;\n   std::unique_ptr<Type> return_type;\n-\n-  // bool has_where_clause;\n   WhereClause where_clause;\n-\n   std::unique_ptr<BlockExpr> function_body;\n-\n   Location locus;\n \n public:\n@@ -2841,6 +2804,8 @@ struct TraitFunctionDecl\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n   WhereClause &get_where_clause () { return where_clause; }\n+\n+  FunctionQualifiers get_qualifiers () { return qualifiers; }\n };\n \n // Actual trait item function declaration within traits\n@@ -3067,6 +3032,8 @@ struct TraitMethodDecl\n \n   SelfParam &get_self_param () { return self_param; }\n   const SelfParam &get_self_param () const { return self_param; }\n+\n+  FunctionQualifiers get_qualifiers () { return qualifiers; }\n };\n \n // Actual trait item method declaration within traits"}, {"sha": "9f7fb54f2aee5b55768b6c9c69a897879d1791ff", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -928,6 +928,8 @@ class BareFunctionType : public TypeNoBounds\n     return return_type;\n   }\n \n+  FunctionQualifiers get_function_qualifiers () { return function_qualifiers; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "f68b3f0b31522e060a6a156a0078b1b0bb8984cd", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -118,8 +118,8 @@ class ASTLowerImplItem : public ASTLoweringBase\n     // ignore for now and leave empty\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n+    HIR::FunctionQualifiers qualifiers\n+      = lower_qualifiers (function.get_qualifiers ());\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n@@ -202,8 +202,8 @@ class ASTLowerImplItem : public ASTLoweringBase\n     // ignore for now and leave empty\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n+    HIR::FunctionQualifiers qualifiers\n+      = lower_qualifiers (method.get_qualifiers ());\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n@@ -314,8 +314,8 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n+    HIR::FunctionQualifiers qualifiers\n+      = lower_qualifiers (func.get_trait_function_decl ().get_qualifiers ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (ref.has_generics ())\n@@ -392,8 +392,8 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n+    HIR::FunctionQualifiers qualifiers\n+      = lower_qualifiers (method.get_trait_method_decl ().get_qualifiers ());\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (ref.has_generics ())"}, {"sha": "5ce573e13cd19d0075f46cff3a23dc8bc8faecd1", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -356,8 +356,8 @@ class ASTLoweringStmt : public ASTLoweringBase\n     // ignore for now and leave empty\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n-    HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n+    HIR::FunctionQualifiers qualifiers\n+      = lower_qualifiers (function.get_qualifiers ());\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need"}, {"sha": "4042908b5cbd9a10b218136b1892ef6a3a99c863", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -135,8 +135,8 @@ class ASTLoweringType : public ASTLoweringBase\n   {\n     bool is_variadic = false;\n     std::vector<HIR::LifetimeParam> lifetime_params;\n-    HIR::FunctionQualifiers qualifiers (\n-      HIR::FunctionQualifiers::AsyncConstStatus::NONE, Unsafety::Normal);\n+    HIR::FunctionQualifiers qualifiers\n+      = lower_qualifiers (fntype.get_function_qualifiers ());\n \n     std::vector<HIR::MaybeNamedParam> named_params;\n     for (auto &param : fntype.get_function_params ())"}, {"sha": "87fc5231e155f700b6ddaaa33426406f6452e000", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -597,29 +597,15 @@ struct_field_name_exists (std::vector<HIR::StructField> &fields,\n HIR::FunctionQualifiers\n ASTLoweringBase::lower_qualifiers (const AST::FunctionQualifiers &qualifiers)\n {\n-  HIR::FunctionQualifiers::AsyncConstStatus const_status;\n-  switch (qualifiers.get_const_status ())\n-    {\n-    case AST::FunctionQualifiers::AsyncConstStatus::NONE:\n-      const_status = HIR::FunctionQualifiers::AsyncConstStatus::NONE;\n-      break;\n-    case AST::FunctionQualifiers::AsyncConstStatus::CONST:\n-      const_status = HIR::FunctionQualifiers::AsyncConstStatus::CONST;\n-      break;\n-    case AST::FunctionQualifiers::AsyncConstStatus::ASYNC:\n-      const_status = HIR::FunctionQualifiers::AsyncConstStatus::ASYNC;\n-      break;\n-    }\n-\n   Unsafety unsafety\n     = qualifiers.is_unsafe () ? Unsafety::Unsafe : Unsafety::Normal;\n   bool has_extern = qualifiers.is_extern ();\n \n   // FIXME turn this into the Rust::ABI enum\n   std::string extern_abi = qualifiers.get_extern_abi ();\n \n-  return HIR::FunctionQualifiers (const_status, unsafety, has_extern,\n-\t\t\t\t  extern_abi);\n+  return HIR::FunctionQualifiers (qualifiers.get_const_status (), unsafety,\n+\t\t\t\t  has_extern, extern_abi);\n }\n \n } // namespace HIR"}, {"sha": "5bfae46670e9a17faa3abe046ef43703e6012637", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -2040,10 +2040,10 @@ FunctionQualifiers::as_string () const\n     case NONE:\n       // do nothing\n       break;\n-    case CONST:\n+    case CONST_FN:\n       str += \"const \";\n       break;\n-    case ASYNC:\n+    case ASYNC_FN:\n       str += \"async \";\n       break;\n     default:"}, {"sha": "47c0452288ee7b1f8d1c3cd7cc7b4dce4176cf3a", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -477,25 +477,13 @@ struct SelfParam\n // Qualifiers for function, i.e. const, unsafe, extern etc.\n struct FunctionQualifiers\n {\n-public:\n-  /* Whether the function is neither const nor async, const only, or async\n-   * only. */\n-  enum AsyncConstStatus\n-  {\n-    NONE,\n-    CONST,\n-    ASYNC\n-  };\n-\n private:\n   AsyncConstStatus const_status;\n   Unsafety unsafety;\n   bool has_extern;\n   std::string extern_abi; // e.g. extern \"C\" fn() -> i32 {}\n   // TODO: maybe ensure that extern_abi only exists if extern exists?\n \n-  // should this store location info?\n-\n public:\n   FunctionQualifiers (AsyncConstStatus const_status, Unsafety unsafety,\n \t\t      bool has_extern = false,\n@@ -514,7 +502,7 @@ struct FunctionQualifiers\n \n   AsyncConstStatus get_status () const { return const_status; }\n \n-  bool is_const () const { return const_status == AsyncConstStatus::CONST; }\n+  bool is_const () const { return const_status == AsyncConstStatus::CONST_FN; }\n };\n \n // A function parameter"}, {"sha": "0e39e483a0d5a3a3e1fdb27633b54caf14ad2dc0", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -2602,8 +2602,7 @@ template <typename ManagedTokenSource>\n AST::FunctionQualifiers\n Parser<ManagedTokenSource>::parse_function_qualifiers ()\n {\n-  AST::FunctionQualifiers::AsyncConstStatus const_status\n-    = AST::FunctionQualifiers::NONE;\n+  AsyncConstStatus const_status = NONE;\n   // bool has_const = false;\n   bool has_unsafe = false;\n   bool has_extern = false;\n@@ -2615,11 +2614,11 @@ Parser<ManagedTokenSource>::parse_function_qualifiers ()\n     {\n     case CONST:\n       lexer.skip_token ();\n-      const_status = AST::FunctionQualifiers::CONST;\n+      const_status = CONST_FN;\n       break;\n     case ASYNC:\n       lexer.skip_token ();\n-      const_status = AST::FunctionQualifiers::ASYNC;\n+      const_status = ASYNC_FN;\n       break;\n     default:\n       // const status is still none"}, {"sha": "b8a2ac35ba43d1bb6bd8312d0ea443351d19d613", "filename": "gcc/rust/util/rust-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Futil%2Frust-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9e57efa5474cfe5d0440e1022ee3c4a8400199/gcc%2Frust%2Futil%2Frust-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-common.h?ref=6c9e57efa5474cfe5d0440e1022ee3c4a8400199", "patch": "@@ -41,6 +41,13 @@ enum Polarity\n   Negative\n };\n \n+enum AsyncConstStatus\n+{\n+  NONE,\n+  CONST_FN,\n+  ASYNC_FN\n+};\n+\n } // namespace Rust\n \n #endif // RUST_COMMON"}]}