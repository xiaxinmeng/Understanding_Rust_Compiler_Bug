{"sha": "3a22ad890b654fae0dc7cdd1a7c304059fb48a19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyMmFkODkwYjY1NGZhZTBkYzdjZGQxYTdjMzA0MDU5ZmI0OGExOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-02-10T17:23:40Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-02-10T17:23:40Z"}, "message": "mn10300.c (popcount): New function.\n\n\t* config/mn10300/mn10300.c (popcount): New function.\n\t(mn10300_expand_prologue): Include saved registers in stack usage\n\tcount.\n\nFrom-SVN: r207665", "tree": {"sha": "06dd8ac1dbfda4aff2b93dd83128bba0d8e2db5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06dd8ac1dbfda4aff2b93dd83128bba0d8e2db5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a22ad890b654fae0dc7cdd1a7c304059fb48a19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a22ad890b654fae0dc7cdd1a7c304059fb48a19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a22ad890b654fae0dc7cdd1a7c304059fb48a19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a22ad890b654fae0dc7cdd1a7c304059fb48a19/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a596d94005f783cb6b0f274b2e17c2454b912277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a596d94005f783cb6b0f274b2e17c2454b912277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a596d94005f783cb6b0f274b2e17c2454b912277"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "40af8d49a270fa3ffd8110e1cf38de6c5ccfd3b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a22ad890b654fae0dc7cdd1a7c304059fb48a19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a22ad890b654fae0dc7cdd1a7c304059fb48a19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a22ad890b654fae0dc7cdd1a7c304059fb48a19", "patch": "@@ -1,3 +1,9 @@\n+2014-02-10  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/mn10300/mn10300.c (popcount): New function.\n+\t(mn10300_expand_prologue): Include saved registers in stack usage\n+\tcount.\n+\n 2014-02-10  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/52306"}, {"sha": "eb0007767500676f74c52c7e389c234b140b4608", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a22ad890b654fae0dc7cdd1a7c304059fb48a19/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a22ad890b654fae0dc7cdd1a7c304059fb48a19/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=3a22ad890b654fae0dc7cdd1a7c304059fb48a19", "patch": "@@ -741,16 +741,31 @@ mn10300_gen_multiple_store (unsigned int mask)\n   F (emit_insn (x));\n }\n \n+static inline unsigned int\n+popcount (unsigned int mask)\n+{\n+  unsigned int count = 0;\n+  \n+  while (mask)\n+    {\n+      ++ count;\n+      mask &= ~ (mask & - mask);\n+    }\n+  return count;\n+}\n+\n void\n mn10300_expand_prologue (void)\n {\n   HOST_WIDE_INT size = mn10300_frame_size ();\n+  unsigned int mask;\n \n-  if (flag_stack_usage_info)\n-    current_function_static_stack_size = size;\n-\n+  mask = mn10300_get_live_callee_saved_regs (NULL);\n   /* If we use any of the callee-saved registers, save them now.  */\n-  mn10300_gen_multiple_store (mn10300_get_live_callee_saved_regs (NULL));\n+  mn10300_gen_multiple_store (mask);\n+\n+  if (flag_stack_usage_info)\n+    current_function_static_stack_size = size + popcount (mask) * 4;\n \n   if (TARGET_AM33_2 && fp_regs_to_save ())\n     {\n@@ -767,6 +782,9 @@ mn10300_expand_prologue (void)\n       unsigned int strategy_size = (unsigned)-1, this_strategy_size;\n       rtx reg;\n \n+      if (flag_stack_usage_info)\n+\tcurrent_function_static_stack_size += num_regs_to_save * 4;\n+\n       /* We have several different strategies to save FP registers.\n \t We can store them using SP offsets, which is beneficial if\n \t there are just a few registers to save, or we can use `a0' in"}]}