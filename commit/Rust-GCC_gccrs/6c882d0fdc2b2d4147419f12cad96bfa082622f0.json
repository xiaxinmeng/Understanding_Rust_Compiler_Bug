{"sha": "6c882d0fdc2b2d4147419f12cad96bfa082622f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM4ODJkMGZkYzJiMmQ0MTQ3NDE5ZjEyY2FkOTZiZmEwODI2MjJmMA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-05-09T20:04:46Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-05-09T20:04:46Z"}, "message": "safe_iterator.h (_Safe_iterator<>::_M_constant()): Rename in...\n\n2018-05-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/safe_iterator.h (_Safe_iterator<>::_M_constant()):\n\tRename in...\n\t(_Safe_iterator<>::_S_constant()): ...that.\n\t* include/debug/safe_local_iterator.h\n\t(_Safe_local_iterator<>::_M_constant()): Rename in...\n\t(_Safe_local_iterator<>::_S_constant()): ...that.\n\t* include/debug/formatter.h: Remove bits/cpp_type_traits.h include.\n\t(_Iterator_state::__rbegin): New.\n\t(_Iterator_state::__rmiddle): New.\n\t(_Iterator_state::__rend): New.\n\t(_Parameter::_Parameter(const _Safe_iterator<>&, const char*,\n\t_Is_iterator)): Use _Safe_iterator<>::_S_constant. Grab normal underlying\n\titerator type.\n\t(_Parameter::_Parameter(const _Safe_local_iterator<>&, const char*,\n\t_Is_iterator)): Likewise.\n\t(_Parameter::_S_reverse_state(_Iterator_state)): New.\n        (_Parameter(__gnu_cxx::__normal_iterator<> const&, const char*,\n\t_Is_iterator)): New.\n\t(_Parameter(std::reverse_iterator<> const&, const char*,\n\t_Is_iterator)): New.\n\t(_Parameter(std::reverse_iterator<_Safe_iterator<>> const&,\n\tconst char*, _Is_iterator)): New.\n\t(_Parameter(std::move_iterator<> const&, const char*, _Is_iterator):\n\tNew.\n\t(_Parameter(std::move_iterator<_Safe_iterator<>> const&, const char*,\n\t_Is_iterator)): New.\n\t* testsuite/24_iterators/move_iterator/debug_neg.cc: New.\n\t* testsuite/24_iterators/normal_iterator/debug_neg.cc: New.\n\t* testsuite/24_iterators/reverse_iterator/debug_neg.cc: New.\n\nFrom-SVN: r260093", "tree": {"sha": "8616d607055091143934de916e006a30776934bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8616d607055091143934de916e006a30776934bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c882d0fdc2b2d4147419f12cad96bfa082622f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c882d0fdc2b2d4147419f12cad96bfa082622f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c882d0fdc2b2d4147419f12cad96bfa082622f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c882d0fdc2b2d4147419f12cad96bfa082622f0/comments", "author": null, "committer": null, "parents": [{"sha": "bb6cb6e3e2ea0e2f8c263f933792d639af4be3d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6cb6e3e2ea0e2f8c263f933792d639af4be3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6cb6e3e2ea0e2f8c263f933792d639af4be3d5"}], "stats": {"total": 289, "additions": 260, "deletions": 29}, "files": [{"sha": "2416cdca9e57c49738c7fe823339bdbb97ed256d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c882d0fdc2b2d4147419f12cad96bfa082622f0", "patch": "@@ -1,3 +1,35 @@\n+2018-05-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/safe_iterator.h (_Safe_iterator<>::_M_constant()):\n+\tRename in...\n+\t(_Safe_iterator<>::_S_constant()): ...that.\n+\t* include/debug/safe_local_iterator.h\n+\t(_Safe_local_iterator<>::_M_constant()): Rename in...\n+\t(_Safe_local_iterator<>::_S_constant()): ...that.\n+\t* include/debug/formatter.h: Remove bits/cpp_type_traits.h include.\n+\t(_Iterator_state::__rbegin): New.\n+\t(_Iterator_state::__rmiddle): New.\n+\t(_Iterator_state::__rend): New.\n+\t(_Parameter::_Parameter(const _Safe_iterator<>&, const char*,\n+\t_Is_iterator)): Use _Safe_iterator<>::_S_constant. Grab normal underlying\n+\titerator type.\n+\t(_Parameter::_Parameter(const _Safe_local_iterator<>&, const char*,\n+\t_Is_iterator)): Likewise.\n+\t(_Parameter::_S_reverse_state(_Iterator_state)): New.\n+        (_Parameter(__gnu_cxx::__normal_iterator<> const&, const char*,\n+\t_Is_iterator)): New.\n+\t(_Parameter(std::reverse_iterator<> const&, const char*,\n+\t_Is_iterator)): New.\n+\t(_Parameter(std::reverse_iterator<_Safe_iterator<>> const&,\n+\tconst char*, _Is_iterator)): New.\n+\t(_Parameter(std::move_iterator<> const&, const char*, _Is_iterator):\n+\tNew.\n+\t(_Parameter(std::move_iterator<_Safe_iterator<>> const&, const char*,\n+\t_Is_iterator)): New.\n+\t* testsuite/24_iterators/move_iterator/debug_neg.cc: New.\n+\t* testsuite/24_iterators/normal_iterator/debug_neg.cc: New.\n+\t* testsuite/24_iterators/reverse_iterator/debug_neg.cc: New.\n+\n 2018-05-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/std_function.h (_Base_manager::_M_get_pointer):"}, {"sha": "383a3406d34ecb2affad63cbb73cca1f4a008cb3", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 101, "deletions": 9, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=6c882d0fdc2b2d4147419f12cad96bfa082622f0", "patch": "@@ -30,7 +30,6 @@\n #define _GLIBCXX_DEBUG_FORMATTER_H 1\n \n #include <bits/c++config.h>\n-#include <bits/cpp_type_traits.h>\n \n #if __cpp_rtti\n # include <typeinfo>\n@@ -43,6 +42,31 @@ namespace std\n # define _GLIBCXX_TYPEID(_Type) 0\n #endif\n \n+#if __cplusplus >= 201103L\n+namespace __gnu_cxx\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+template<typename _Iterator, typename _Container>\n+  class __normal_iterator;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+template<typename _Iterator>\n+  class reverse_iterator;\n+\n+template<typename _Iterator>\n+  class move_iterator;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+#endif\n+\n namespace __gnu_debug\n {\n   using std::type_info;\n@@ -157,6 +181,9 @@ namespace __gnu_debug\n       __middle,\t\t// dereferenceable, not at the beginning\n       __end,\t\t// past-the-end, may be at beginning if sequence empty\n       __before_begin,\t// before begin\n+      __rbegin,\t\t// dereferenceable, and at the reverse-beginning\n+      __rmiddle,\t// reverse-dereferenceable, not at the reverse-beginning\n+      __rend,\t\t// reverse-past-the-end\n       __last_state\n     };\n \n@@ -243,11 +270,9 @@ namespace __gnu_debug\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = std::__addressof(__it);\n-\t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n+\t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(_Iterator);\n \t  _M_variant._M_iterator._M_constness =\n-\t    std::__are_same<_Safe_iterator<_Iterator, _Sequence>,\n-\t\t\t    typename _Sequence::iterator>::\n-\t      __value ? __mutable_iterator : __const_iterator;\n+\t    __it._S_constant() ? __const_iterator : __mutable_iterator;\n \t  _M_variant._M_iterator._M_sequence = __it._M_get_sequence();\n \t  _M_variant._M_iterator._M_seq_type = _GLIBCXX_TYPEID(_Sequence);\n \n@@ -273,11 +298,10 @@ namespace __gnu_debug\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = std::__addressof(__it);\n-\t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n+\t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(_Iterator);\n+\t  _M_variant._M_iterator._M_constness =\n \t  _M_variant._M_iterator._M_constness =\n-\t    std::__are_same<_Safe_local_iterator<_Iterator, _Sequence>,\n-\t\t\t    typename _Sequence::local_iterator>::\n-\t      __value ? __mutable_iterator : __const_iterator;\n+\t    __it._S_constant() ? __const_iterator : __mutable_iterator;\n \t  _M_variant._M_iterator._M_sequence = __it._M_get_sequence();\n \t  _M_variant._M_iterator._M_seq_type = _GLIBCXX_TYPEID(_Sequence);\n \n@@ -334,6 +358,74 @@ namespace __gnu_debug\n \t  _M_variant._M_iterator._M_seq_type = 0;\n \t}\n \n+#if __cplusplus >= 201103L\n+      // The following constructors are only defined in C++11 to take\n+      // advantage of the constructor delegation feature.\n+      template<typename _Iterator, typename _Container>\n+        _Parameter(\n+\t  __gnu_cxx::__normal_iterator<_Iterator, _Container> const& __it,\n+\tconst char* __name, _Is_iterator)\n+\t: _Parameter(__it.base(), __name, _Is_iterator{})\n+\t{ _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it); }\n+\n+      template<typename _Iterator>\n+\t_Parameter(std::reverse_iterator<_Iterator> const& __it,\n+\t\t   const char* __name, _Is_iterator)\n+\t: _Parameter(__it.base(), __name, _Is_iterator{})\n+\t{\n+\t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n+\t  _M_variant._M_iterator._M_state\n+\t    = _S_reverse_state(_M_variant._M_iterator._M_state);\n+\t}\n+\n+      template<typename _Iterator, typename _Sequence>\n+\t_Parameter(std::reverse_iterator<_Safe_iterator<_Iterator,\n+\t\t\t\t\t\t\t_Sequence>> const& __it,\n+\t\t   const char* __name, _Is_iterator)\n+\t: _Parameter(__it.base(), __name, _Is_iterator{})\n+\t{\n+\t  _M_variant._M_iterator._M_type\n+\t    = _GLIBCXX_TYPEID(std::reverse_iterator<_Iterator>);\n+\t  _M_variant._M_iterator._M_state\n+\t    = _S_reverse_state(_M_variant._M_iterator._M_state);\n+\t}\n+\n+      template<typename _Iterator>\n+\t_Parameter(std::move_iterator<_Iterator> const& __it,\n+\t\t   const char* __name, _Is_iterator)\n+\t: _Parameter(__it.base(), __name, _Is_iterator{})\n+\t{ _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it); }\n+\n+      template<typename _Iterator, typename _Sequence>\n+\t_Parameter(std::move_iterator<_Safe_iterator<_Iterator,\n+\t\t\t\t\t\t     _Sequence>> const& __it,\n+\t\t   const char* __name, _Is_iterator)\n+\t: _Parameter(__it.base(), __name, _Is_iterator{})\n+      {\n+\t_M_variant._M_iterator._M_type\n+\t  = _GLIBCXX_TYPEID(std::move_iterator<_Iterator>);\n+      }\n+\n+    private:\n+      _Iterator_state\n+      _S_reverse_state(_Iterator_state __state)\n+      {\n+\t  switch (__state)\n+\t    {\n+\t    case __begin:\n+\t      return __rend;\n+\t    case __middle:\n+\t      return __rmiddle;\n+\t    case __end:\n+\t      return __rbegin;\n+\t    default:\n+\t      return __state;\n+\t    }\n+      }\n+\n+    public:\n+#endif\n+\n       template<typename _Sequence>\n \t_Parameter(const _Safe_sequence<_Sequence>& __seq,\n \t\t   const char* __name, _Is_sequence)"}, {"sha": "3a53ab723cdac0742dd1a457f7d25f5042940fb9", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=6c882d0fdc2b2d4147419f12cad96bfa082622f0", "patch": "@@ -91,11 +91,6 @@ namespace __gnu_debug\n       typedef _Safe_iterator_base _Safe_base;\n       typedef typename _Sequence::const_iterator _Const_iterator;\n \n-      /// Determine if this is a constant iterator.\n-      bool\n-      _M_constant() const\n-      { return std::__are_same<_Const_iterator, _Safe_iterator>::__value; }\n-\n       typedef std::iterator_traits<_Iterator> _Traits;\n \n       struct _Attach_single\n@@ -127,7 +122,7 @@ namespace __gnu_debug\n        */\n       _Safe_iterator(const _Iterator& __i, const _Safe_sequence_base* __seq)\n       _GLIBCXX_NOEXCEPT\n-      : _Iter_base(__i), _Safe_base(__seq, _M_constant())\n+      : _Iter_base(__i), _Safe_base(__seq, _S_constant())\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__msg_init_singular)\n@@ -396,6 +391,12 @@ namespace __gnu_debug\n       }\n \n       // ------ Utilities ------\n+\n+      /// Determine if this is a constant iterator.\n+      static bool\n+      _S_constant()\n+      { return std::__are_same<_Const_iterator, _Safe_iterator>::__value; }\n+\n       /**\n        * @brief Return the underlying iterator\n        */\n@@ -414,12 +415,12 @@ namespace __gnu_debug\n       /** Attach iterator to the given sequence. */\n       void\n       _M_attach(_Safe_sequence_base* __seq)\n-      { _Safe_base::_M_attach(__seq, _M_constant()); }\n+      { _Safe_base::_M_attach(__seq, _S_constant()); }\n \n       /** Likewise, but not thread-safe. */\n       void\n       _M_attach_single(_Safe_sequence_base* __seq)\n-      { _Safe_base::_M_attach_single(__seq, _M_constant()); }\n+      { _Safe_base::_M_attach_single(__seq, _S_constant()); }\n \n       /// Is the iterator dereferenceable?\n       bool"}, {"sha": "f9597a6da083429b1ea6d3f060e4548f33ec9f39", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=6c882d0fdc2b2d4147419f12cad96bfa082622f0", "patch": "@@ -54,14 +54,6 @@ namespace __gnu_debug\n       typedef typename _Sequence::const_local_iterator _Const_local_iterator;\n       typedef typename _Sequence::size_type size_type;\n \n-      /// Determine if this is a constant iterator.\n-      bool\n-      _M_constant() const\n-      {\n-\treturn std::__are_same<_Const_local_iterator,\n-\t\t\t       _Safe_local_iterator>::__value;\n-      }\n-\n       typedef std::iterator_traits<_Iterator> _Traits;\n \n       struct _Attach_single\n@@ -92,7 +84,7 @@ namespace __gnu_debug\n        */\n       _Safe_local_iterator(const _Iterator& __i,\n \t\t\t   const _Safe_sequence_base* __cont)\n-      : _Iter_base(__i), _Safe_base(__cont, _M_constant())\n+      : _Iter_base(__i), _Safe_base(__cont, _S_constant())\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__msg_init_singular)\n@@ -278,6 +270,15 @@ namespace __gnu_debug\n       }\n \n       // ------ Utilities ------\n+\n+      /// Determine if this is a constant iterator.\n+      static bool\n+      _S_constant()\n+      {\n+\treturn std::__are_same<_Const_local_iterator,\n+\t\t\t       _Safe_local_iterator>::__value;\n+      }\n+\n       /**\n        * @brief Return the underlying iterator\n        */\n@@ -302,12 +303,12 @@ namespace __gnu_debug\n       /** Attach iterator to the given sequence. */\n       void\n       _M_attach(_Safe_sequence_base* __seq)\n-      { _Safe_base::_M_attach(__seq, _M_constant()); }\n+      { _Safe_base::_M_attach(__seq, _S_constant()); }\n \n       /** Likewise, but not thread-safe. */\n       void\n       _M_attach_single(_Safe_sequence_base* __seq)\n-      { _Safe_base::_M_attach_single(__seq, _M_constant()); }\n+      { _Safe_base::_M_attach_single(__seq, _S_constant()); }\n \n       /// Is the iterator dereferenceable?\n       bool"}, {"sha": "19137022b2a426b4ed9c549cee06cbab2b2a68cb", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=6c882d0fdc2b2d4147419f12cad96bfa082622f0", "patch": "@@ -720,7 +720,10 @@ namespace\n \t\t\"dereferenceable (start-of-sequence)\",\n \t\t\"dereferenceable\",\n \t\t\"past-the-end\",\n-\t\t\"before-begin\"\n+\t\t\"before-begin\",\n+\t\t\"dereferenceable (start-of-reverse-sequence)\",\n+\t\t\"dereferenceable (reverse)\",\n+\t\t\"past-the-reverse-end\"\n \t      };\n \t    print_word(ctx, state_names[iterator._M_state]);\n \t  }"}, {"sha": "d64fe8fe7519e5aa0b9e1248c184d226c5a0620c", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/debug_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdebug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdebug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdebug_neg.cc?ref=6c882d0fdc2b2d4147419f12cad96bfa082622f0", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target c++11 xfail *-*-* } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <debug/vector>\n+#include <iterator>\n+\n+void test01()\n+{\n+  __gnu_debug::vector<int> vals { 0, 1, 2, 3 };\n+  __gnu_debug::vector<int> mval(std::make_move_iterator(vals.begin() + 1),\n+\t\t\t\tstd::make_move_iterator(vals.begin()));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4c866c63ca98259a42f61f323b3d86ade33b3263", "filename": "libstdc++-v3/testsuite/24_iterators/normal_iterator/debug_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fdebug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fdebug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fdebug_neg.cc?ref=6c882d0fdc2b2d4147419f12cad96bfa082622f0", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Requires C++11 because we check for correct output of\n+// __gnu_cxx::__normal_iterator which is improved in this mode.\n+// { dg-do run { target c++11 xfail *-*-* } }\n+\n+#include <debug/vector>\n+\n+void test01()\n+{\n+  std::vector<int> vals { 0, 1, 2, 3 };\n+  __gnu_debug::vector<int> vals2(vals.begin() + 1, vals.begin());\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6c795c77591436c7b92dfe46983f6fca35976ba7", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/debug_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdebug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c882d0fdc2b2d4147419f12cad96bfa082622f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdebug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fdebug_neg.cc?ref=6c882d0fdc2b2d4147419f12cad96bfa082622f0", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Requires C++11 because we check for correct output of\n+// std::reverse_iterator which is improved only in this mode.\n+// { dg-do run { target c++11 xfail *-*-* } }\n+\n+#include <debug/vector>\n+\n+void test01()\n+{\n+  __gnu_debug::vector<int> vals { 0, 1, 2, 3 };\n+  __gnu_debug::vector<int> vals2(vals.rend(), vals.rbegin());\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}