{"sha": "beb235f8964321e02e492c9b6856a1ca56f2e027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViMjM1Zjg5NjQzMjFlMDJlNDkyYzliNjg1NmExY2E1NmYyZTAyNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-08-22T06:45:14Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-08-22T06:45:14Z"}, "message": "c-decl.c: Fix comment formatting.\n\n\t* c-decl.c: Fix comment formatting.\n\t* cfgrtl.c: Likewise.\n\t* combine.c: Likewise.\n\t* convert.c: Likewise.\n\t* dominance.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* dwarfout.c: Likewise.\n\t* expmed.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* gcov.c: Likewise.\n\t* genattrtab.c: Likewise.\n\t* ggc-common.c: Likewise.\n\t* mips-tfile.c: Likewise.\n\t* regmove.c: Likewise.\n\nFrom-SVN: r70677", "tree": {"sha": "b240bf213337fa404942e0e2bdbb6534d89eb5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b240bf213337fa404942e0e2bdbb6534d89eb5e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb235f8964321e02e492c9b6856a1ca56f2e027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb235f8964321e02e492c9b6856a1ca56f2e027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb235f8964321e02e492c9b6856a1ca56f2e027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb235f8964321e02e492c9b6856a1ca56f2e027/comments", "author": null, "committer": null, "parents": [{"sha": "2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b72593e40e7c04cf3fe7cdb35878c307825b3a9"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "4d1d2ebe8d4568b2cb5018c4100020023f5bca5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -1,3 +1,20 @@\n+2003-08-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-decl.c: Fix comment formatting.\n+\t* cfgrtl.c: Likewise.\n+\t* combine.c: Likewise.\n+\t* convert.c: Likewise.\n+\t* dominance.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* dwarfout.c: Likewise.\n+\t* expmed.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gcov.c: Likewise.\n+\t* genattrtab.c: Likewise.\n+\t* ggc-common.c: Likewise.\n+\t* mips-tfile.c: Likewise.\n+\t* regmove.c: Likewise.\n+\n 2003-08-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtin-attrs.def: Fix comment formatting."}, {"sha": "de4b4433ba97f6e1dd58e4b015de0636b42fb845", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -572,7 +572,7 @@ poplevel (int keep, int dummy ATTRIBUTE_UNUSED, int functionbody)\n \t  goto normal;\n \n \tcase VAR_DECL:\n-\t  /* keep this in sync with stmt.c:warn_about_unused_variables.\n+\t  /* Keep this in sync with stmt.c:warn_about_unused_variables.\n \t     No warnings when the global scope is popped because the\n \t     global scope isn't popped for the last translation unit,\n \t     so the warnings are done in c_write_global_declaration.  */"}, {"sha": "7441cd9db59d28deb40c094562e4a4864ba11397", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -2552,7 +2552,7 @@ cfg_layout_delete_block (basic_block bb)\n     }\n }\n \n-/* return true when blocks A and B can be safely merged.  */\n+/* Return true when blocks A and B can be safely merged.  */\n static bool\n cfg_layout_can_merge_blocks_p (basic_block a, basic_block b)\n {"}, {"sha": "b9413f69835af66729ea5a544f789b687a195b38", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -9686,7 +9686,7 @@ simplify_shift_const (rtx x, enum rtx_code code,\n \t  break;\n \n \tcase EQ:\n-\t  /* convert (lshiftrt (eq FOO 0) C) to (xor FOO 1) if STORE_FLAG_VALUE\n+\t  /* Convert (lshiftrt (eq FOO 0) C) to (xor FOO 1) if STORE_FLAG_VALUE\n \t     says that the sign bit can be tested, FOO has mode MODE, C is\n \t     GET_MODE_BITSIZE (MODE) - 1, and FOO has only its low-order bit\n \t     that may be nonzero.  */"}, {"sha": "fe3f3ec2497affa216b8d1dc0ee2f6be4aa732c1", "filename": "gcc/convert.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -203,15 +203,15 @@ convert_to_real (tree type, tree expr)\n   if (itype != type && FLOAT_TYPE_P (type))\n     switch (TREE_CODE (expr))\n       {\n-\t/* convert (float)-x into -(float)x.  This is always safe.  */\n+\t/* Convert (float)-x into -(float)x.  This is always safe.  */\n \tcase ABS_EXPR:\n \tcase NEGATE_EXPR:\n \t  if (TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (expr)))\n \t    return build1 (TREE_CODE (expr), type,\n \t\t\t   fold (convert_to_real (type,\n \t\t\t\t\t\t  TREE_OPERAND (expr, 0))));\n \t  break;\n-\t/* convert (outertype)((innertype0)a+(innertype1)b)\n+\t/* Convert (outertype)((innertype0)a+(innertype1)b)\n \t   into ((newtype)a+(newtype)b) where newtype\n \t   is the widest mode from all of these.  */\n \tcase PLUS_EXPR:"}, {"sha": "38182ef5318fbb75f2bb809ff705e0f9fb72f45d", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -545,7 +545,7 @@ calculate_dominance_info (enum cdi_direction reverse)\n   dominance_info info;\n   basic_block b;\n \n-  /* allocate structure for dominance information.  */\n+  /* Allocate structure for dominance information.  */\n   info = xmalloc (sizeof (struct dominance_info));\n   info->forest = et_forest_create ();\n   VARRAY_GENERIC_PTR_INIT (info->varray, last_basic_block + 3, \"dominance info\");"}, {"sha": "eac43ac77d314f47da7f2d78862f8fea5d686ba3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -9686,7 +9686,7 @@ add_subscript_info (dw_die_ref type_die, tree type)\n \t  lower = TYPE_MIN_VALUE (domain);\n \t  upper = TYPE_MAX_VALUE (domain);\n \n-\t  /* define the index type.  */\n+\t  /* Define the index type.  */\n \t  if (TREE_TYPE (domain))\n \t    {\n \t      /* ??? This is probably an Ada unnamed subrange type.  Ignore the\n@@ -10784,7 +10784,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       fn_arg_types = TYPE_ARG_TYPES (TREE_TYPE (decl));\n       if (fn_arg_types != NULL)\n \t{\n-\t  /* this is the prototyped case, check for ...  */\n+\t  /* This is the prototyped case, check for....  */\n \t  if (TREE_VALUE (tree_last (fn_arg_types)) != void_type_node)\n \t    gen_unspecified_parameters_die (decl, subr_die);\n \t}"}, {"sha": "166addb9308ecd9f5c82ac636a28b2316dd13faf", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -4066,7 +4066,7 @@ output_string_type_die (void *arg)\n   sibling_attribute ();\n   equate_type_number_to_die_number (type);\n   member_attribute (TYPE_CONTEXT (type));\n-  /* this is a fixed length string */\n+  /* This is a fixed length string.  */\n   byte_size_attribute (type);\n }\n \n@@ -5226,13 +5226,13 @@ output_decl (tree decl, tree containing_scope)\n \n \t    if (fn_arg_types)\n \t      {\n-\t      /* this is the prototyped case, check for ...  */\n+\t      /* This is the prototyped case, check for....  */\n \t      if (TREE_VALUE (tree_last (fn_arg_types)) != void_type_node)\n \t        output_die (output_unspecified_parameters_die, decl);\n \t      }\n \t    else\n \t      {\n-\t\t/* this is unprototyped, check for undefined (just declaration) */\n+\t\t/* This is unprototyped, check for undefined (just declaration).  */\n \t\tif (!DECL_INITIAL (decl))\n \t\t  output_die (output_unspecified_parameters_die, decl);\n \t      }"}, {"sha": "8ccd23804f66813821160b38884aab4c163f42a2", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -2628,7 +2628,7 @@ choose_multiplier (unsigned HOST_WIDE_INT d, int n, int precision,\n     abort ();\n   if (mhigh_hi > 1 || mlow_hi > 1)\n     abort ();\n-  /* assert that mlow < mhigh.  */\n+  /* Assert that mlow < mhigh.  */\n   if (! (mlow_hi < mhigh_hi || (mlow_hi == mhigh_hi && mlow_lo < mhigh_lo)))\n     abort ();\n "}, {"sha": "27a4724cabe240f95122ae8614cb3987e814ca42", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -558,7 +558,7 @@ div_and_round_double (enum tree_code code, int uns,\n   if (hden == 0 && lden == 0)\n     overflow = 1, lden = 1;\n \n-  /* calculate quotient sign and convert operands to unsigned.  */\n+  /* Calculate quotient sign and convert operands to unsigned.  */\n   if (!uns)\n     {\n       if (hnum < 0)"}, {"sha": "4c9af4d68d7005251b61f417420d61aaadcb0098", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -1487,7 +1487,7 @@ static void\n add_line_counts (coverage_t *coverage, function_t *fn)\n {\n   unsigned ix;\n-  line_t *line = NULL; /* this is propagated from one iteration to the\n+  line_t *line = NULL; /* This is propagated from one iteration to the\n \t\t\t  next.  */\n \n   /* Scan each basic block.  */"}, {"sha": "7024c01793b8c0603b102e9bc64de684ccc2598c", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -183,8 +183,8 @@ struct attr_desc\n   unsigned unsigned_p\t: 1;\t/* Make the output function unsigned int.  */\n   unsigned is_const\t: 1;\t/* Attribute value constant for each run.  */\n   unsigned is_special\t: 1;\t/* Don't call `write_attr_set'.  */\n-  unsigned func_units_p\t: 1;\t/* this is the function_units attribute */\n-  unsigned blockage_p\t: 1;\t/* this is the blockage range function */\n+  unsigned func_units_p\t: 1;\t/* This is the function_units attribute.  */\n+  unsigned blockage_p\t: 1;\t/* This is the blockage range function.  */\n   unsigned static_p\t: 1;\t/* Make the output function static.  */\n };\n "}, {"sha": "a125b327f75baaec70056bf48cd9b70c2b01693e", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -739,7 +739,7 @@ ggc_min_heapsize_heuristic (void)\n   /* Adjust for rlimits.  */\n   min_heap_kbytes = ggc_rlimit_bound (min_heap_kbytes);\n \n-  min_heap_kbytes /= 1024; /* convert to Kbytes.  */\n+  min_heap_kbytes /= 1024; /* Convert to Kbytes.  */\n \n   /* The heuristic is RAM/8, with a lower bound of 4M and an upper\n      bound of 128M (when RAM >= 1GB).  */"}, {"sha": "314ed53fab7c859fa406f8e9495ebc59707e8d6c", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -3280,7 +3280,7 @@ parse_def (const char *name_start)\n \t\t\t\t\tvalue,\n \t\t\t\t\tindx);\n \n-      /* deal with struct, union, and enum tags.  */\n+      /* Deal with struct, union, and enum tags.  */\n       if (symbol_type == st_Block)\n         {\n \t  /* Create or update the tag information.  */"}, {"sha": "9205e1f88bdeb9e95eb33b2bffa35b1b1eeef8db", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb235f8964321e02e492c9b6856a1ca56f2e027/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=beb235f8964321e02e492c9b6856a1ca56f2e027", "patch": "@@ -2032,7 +2032,7 @@ fixup_match_1 (rtx insn, rtx set, rtx src, rtx src_subreg, rtx dst,\n }\n \n \n-/* return nonzero if X is stable and mentions no registers but for\n+/* Return nonzero if X is stable and mentions no registers but for\n    mentioning SRC or mentioning / changing DST .  If in doubt, presume\n    it is unstable.\n    The rationale is that we want to check if we can move an insn easily"}]}