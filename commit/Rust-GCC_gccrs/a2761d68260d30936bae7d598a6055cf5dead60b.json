{"sha": "a2761d68260d30936bae7d598a6055cf5dead60b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3NjFkNjgyNjBkMzA5MzZiYWU3ZDU5OGE2MDU1Y2Y1ZGVhZDYwYg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2002-04-22T16:55:39Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-04-22T16:55:39Z"}, "message": "jcf-write.c (push_long_const): lo, hi: New variables.\n\n2002-04-19  Andrew Haley  <aph@redhat.com>\n\n        * jcf-write.c (push_long_const): lo, hi: New variables.\n        Use rshift_double to extract the high part of a 64-bit long.\n        Use WORD_TO_INT to extract the low part.\n\n        * jcf-parse.c (get_constant): CONSTANT_Integer: Use an unsigned\n        HOST_WIDE_INT for num.  Use JPOOL_UINT to get it.\n        CONSTANT_Double: Use JPOOL_UINT to get both halve of a double.\n\nFrom-SVN: r52618", "tree": {"sha": "13ebed8b94cdb76ebae4e89858eb16469cce9931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ebed8b94cdb76ebae4e89858eb16469cce9931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2761d68260d30936bae7d598a6055cf5dead60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2761d68260d30936bae7d598a6055cf5dead60b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2761d68260d30936bae7d598a6055cf5dead60b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2761d68260d30936bae7d598a6055cf5dead60b/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a528c61ffcb1cc7bc7057b18268745bdd5eb37f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a528c61ffcb1cc7bc7057b18268745bdd5eb37f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a528c61ffcb1cc7bc7057b18268745bdd5eb37f"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "da51e18635dd99e5d6d07e7d1ce3f7a0351192a6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2761d68260d30936bae7d598a6055cf5dead60b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2761d68260d30936bae7d598a6055cf5dead60b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a2761d68260d30936bae7d598a6055cf5dead60b", "patch": "@@ -1,3 +1,13 @@\n+2002-04-19  Andrew Haley  <aph@redhat.com>\n+\n+        * jcf-write.c (push_long_const): lo, hi: New variables.\n+        Use rshift_double to extract the high part of a 64-bit long.\n+        Use WORD_TO_INT to extract the low part.\n+\n+        * jcf-parse.c (get_constant): CONSTANT_Integer: Use an unsigned\n+        HOST_WIDE_INT for num.  Use JPOOL_UINT to get it.\n+        CONSTANT_Double: Use JPOOL_UINT to get both halve of a double.\n+\n 2002-04-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* typeck.c (incomplete_type_error): Remove."}, {"sha": "cbf5ac9834c2856554548c5b23e46860f15176c9", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2761d68260d30936bae7d598a6055cf5dead60b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2761d68260d30936bae7d598a6055cf5dead60b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=a2761d68260d30936bae7d598a6055cf5dead60b", "patch": "@@ -292,10 +292,10 @@ get_constant (jcf, index)\n       }\n     case CONSTANT_Long:\n       {\n-\tjint num = JPOOL_INT (jcf, index);\n+\tunsigned HOST_WIDE_INT num = JPOOL_UINT (jcf, index);\n \tHOST_WIDE_INT lo, hi;\n \tlshift_double (num, 0, 32, 64, &lo, &hi, 0);\n-\tnum = JPOOL_INT (jcf, index+1) & 0xffffffff;\n+\tnum = JPOOL_UINT (jcf, index+1);\n \tadd_double (lo, hi, num, 0, &lo, &hi);\n \tvalue = build_int_2 (lo, hi);\n \tTREE_TYPE (value) = long_type_node;\n@@ -316,9 +316,9 @@ get_constant (jcf, index)\n \tHOST_WIDE_INT num[2];\n \tREAL_VALUE_TYPE d;\n \tHOST_WIDE_INT lo, hi;\n-\tnum[0] = JPOOL_INT (jcf, index);\n+\tnum[0] = JPOOL_UINT (jcf, index);\n \tlshift_double (num[0], 0, 32, 64, &lo, &hi, 0);\n-\tnum[0] = JPOOL_INT (jcf, index+1);\n+\tnum[0] = JPOOL_UINT (jcf, index+1);\n \tadd_double (lo, hi, num[0], 0, &lo, &hi);\n \n \t/* Since ereal_from_double expects an array of HOST_WIDE_INT"}, {"sha": "2988c4726b890dbc4cf5fd6210705e2c73f63b87", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2761d68260d30936bae7d598a6055cf5dead60b/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2761d68260d30936bae7d598a6055cf5dead60b/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=a2761d68260d30936bae7d598a6055cf5dead60b", "patch": "@@ -853,15 +853,20 @@ push_long_const (lo, hi, state)\n      HOST_WIDE_INT lo, hi;\n      struct jcf_partial *state;\n {\n-  if (hi == 0 && lo >= 0 && lo <= 1)\n+  HOST_WIDE_INT highpart, dummy;\n+  jint lowpart = WORD_TO_INT (lo);\n+\n+  rshift_double (lo, hi, 32, 64, &highpart, &dummy, 1);\n+\n+  if (highpart == 0 && (lowpart == 0 || lowpart == 1))\n     {\n       RESERVE(1);\n-      OP1(OPCODE_lconst_0 + lo);\n+      OP1(OPCODE_lconst_0 + lowpart);\n     }\n-  else if ((hi == 0 && (jword)(lo  & 0xFFFFFFFF) < 32768) \n-          || (hi == -1 && (lo & 0xFFFFFFFF) >= (jword)-32768))\n+  else if ((highpart == 0 && lowpart > 0 && lowpart < 32768) \n+\t   || (highpart == -1 && lowpart < 0 && lowpart >= -32768))\n       {\n-        push_int_const (lo, state);\n+        push_int_const (lowpart, state);\n         RESERVE (1);\n         OP1 (OPCODE_i2l);\n       }"}]}