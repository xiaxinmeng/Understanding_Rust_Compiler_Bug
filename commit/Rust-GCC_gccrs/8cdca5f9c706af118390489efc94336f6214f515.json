{"sha": "8cdca5f9c706af118390489efc94336f6214f515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkY2E1ZjljNzA2YWYxMTgzOTA0ODllZmM5NDMzNmY2MjE0ZjUxNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-17T11:59:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-17T14:03:00Z"}, "message": "libstdc++: Move std::hash<std::thread::id> to <bits/std_thread.h>\n\nThis makes the hash function available without including the whole of\n<thread>, which is needed for <barrier>.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/std_thread.h (hash<thread::id>): Move here,\n\tfrom ...\n\t* include/std/thread (hash<thread::id>): ... here.", "tree": {"sha": "f1c39c2a1e3ff6dffcb2054b7f83ba6cc2eddec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1c39c2a1e3ff6dffcb2054b7f83ba6cc2eddec4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cdca5f9c706af118390489efc94336f6214f515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdca5f9c706af118390489efc94336f6214f515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cdca5f9c706af118390489efc94336f6214f515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdca5f9c706af118390489efc94336f6214f515/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5feee6adc8350a292c235eb21e31a5082350d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5feee6adc8350a292c235eb21e31a5082350d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5feee6adc8350a292c235eb21e31a5082350d94"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "4810d355695f5e7f4f5e9c0267a32a1ecc4eb8fd", "filename": "libstdc++-v3/include/bits/std_thread.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdca5f9c706af118390489efc94336f6214f515/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_thread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdca5f9c706af118390489efc94336f6214f515/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_thread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_thread.h?ref=8cdca5f9c706af118390489efc94336f6214f515", "patch": "@@ -38,6 +38,7 @@\n #include <exception>\t\t// std::terminate\n #include <iosfwd>\t\t// std::basic_ostream\n #include <tuple>\t\t// std::tuple\n+#include <bits/functional_hash.h> // std::hash\n #include <bits/invoke.h>\t// std::__invoke\n #include <bits/refwrap.h>       // not required, but helpful to users\n #include <bits/unique_ptr.h>\t// std::unique_ptr\n@@ -288,6 +289,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // N.B. other comparison operators are defined in <thread>\n \n+  // DR 889.\n+  /// std::hash specialization for thread::id.\n+  template<>\n+    struct hash<thread::id>\n+    : public __hash_base<size_t, thread::id>\n+    {\n+      size_t\n+      operator()(const thread::id& __id) const noexcept\n+      { return std::_Hash_impl::hash(__id._M_thread); }\n+    };\n+\n   namespace this_thread\n   {\n     /// this_thread::get_id"}, {"sha": "10fb9e631be072814384e954c293003218bc4a66", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdca5f9c706af118390489efc94336f6214f515/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdca5f9c706af118390489efc94336f6214f515/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=8cdca5f9c706af118390489efc94336f6214f515", "patch": "@@ -43,7 +43,6 @@\n #endif\n \n #include <bits/std_thread.h> // std::thread, get_id, yield\n-#include <bits/functional_hash.h> // std::hash\n \n #ifdef _GLIBCXX_USE_NANOSLEEP\n # include <cerrno>  // errno, EINTR\n@@ -94,17 +93,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return !(__x < __y); }\n #endif // __cpp_lib_three_way_comparison\n \n-  // DR 889.\n-  /// std::hash specialization for thread::id.\n-  template<>\n-    struct hash<thread::id>\n-    : public __hash_base<size_t, thread::id>\n-    {\n-      size_t\n-      operator()(const thread::id& __id) const noexcept\n-      { return std::_Hash_impl::hash(__id._M_thread); }\n-    };\n-\n   template<class _CharT, class _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)"}]}