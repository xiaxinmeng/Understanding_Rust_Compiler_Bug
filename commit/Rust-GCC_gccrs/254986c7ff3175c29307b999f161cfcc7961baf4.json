{"sha": "254986c7ff3175c29307b999f161cfcc7961baf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU0OTg2YzdmZjMxNzVjMjkzMDdiOTk5ZjE2MWNmY2M3OTYxYmFmNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-09-05T02:55:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-09-05T02:55:28Z"}, "message": "builtin-attrs.def (ATTR_NOTHROW_SENTINEL_1): New.\n\n\t* builtin-attrs.def (ATTR_NOTHROW_SENTINEL_1): New.\n\t* builtins.def (BUILT_IN_EXECLE): Set ATTR_NOTHROW_SENTINEL_1.\n\t* c-common.c (c_common_attribute_table): Accept parameters to\n\tsentinel attribute.\n\t(check_function_sentinel, handle_sentinel_attribute): Likewise.\n\t* doc/extend.texi: Update accordingly.\n\ntestsuite:\n\t* gcc.dg/format/sentinel-1.c: Update for parameter option.\n\nFrom-SVN: r87098", "tree": {"sha": "35944d27904d831ba5d78370c59d633d19c4fe13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35944d27904d831ba5d78370c59d633d19c4fe13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/254986c7ff3175c29307b999f161cfcc7961baf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254986c7ff3175c29307b999f161cfcc7961baf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254986c7ff3175c29307b999f161cfcc7961baf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254986c7ff3175c29307b999f161cfcc7961baf4/comments", "author": null, "committer": null, "parents": [{"sha": "44269c4093f881d5321ee09d40490e1989345bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44269c4093f881d5321ee09d40490e1989345bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44269c4093f881d5321ee09d40490e1989345bae"}], "stats": {"total": 163, "additions": 136, "deletions": 27}, "files": [{"sha": "88486b14796ac64ecb80b5042189afd7e88d4266", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=254986c7ff3175c29307b999f161cfcc7961baf4", "patch": "@@ -1,3 +1,12 @@\n+2004-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtin-attrs.def (ATTR_NOTHROW_SENTINEL_1): New.\n+\t* builtins.def (BUILT_IN_EXECLE): Set ATTR_NOTHROW_SENTINEL_1.\n+\t* c-common.c (c_common_attribute_table): Accept parameters to\n+\tsentinel attribute.\n+\t(check_function_sentinel, handle_sentinel_attribute): Likewise.\n+\t* doc/extend.texi: Update accordingly.\n+\n 2004-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtin-attrs.def (ATTR_SENTINEL, ATTR_SENTINEL_NOTHROW_LIST):"}, {"sha": "f376f5571b553dace92cfc17a049eacc8f0a8a36", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=254986c7ff3175c29307b999f161cfcc7961baf4", "patch": "@@ -101,6 +101,8 @@ DEF_ATTR_TREE_LIST (ATTR_MALLOC_NOTHROW_LIST, ATTR_MALLOC,\t\\\n DEF_ATTR_TREE_LIST (ATTR_SENTINEL_NOTHROW_LIST, ATTR_SENTINEL,\t\\\n \t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n \n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_SENTINEL_1, ATTR_SENTINEL, ATTR_LIST_1, \\\n+\t\t\tATTR_NOTHROW_LIST)\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1, ATTR_NONNULL, ATTR_LIST_1, \\\n \t\t\tATTR_NOTHROW_LIST)\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_2, ATTR_NONNULL, ATTR_LIST_2, \\"}, {"sha": "1bdc8aa79ee565d30bb852fcd007b381d241c6b8", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=254986c7ff3175c29307b999f161cfcc7961baf4", "patch": "@@ -556,7 +556,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN, \"eh_return\", BT_FN_VOID_PTRMODE_PTR,\n DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN_DATA_REGNO, \"eh_return_data_regno\", BT_FN_INT_INT, ATTR_NULL)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECL, \"execl\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_SENTINEL_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECLP, \"execlp\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_SENTINEL_NOTHROW_LIST)\n-DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECLE, \"execle\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECLE, \"execle\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_SENTINEL_1)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECV, \"execv\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECVP, \"execvp\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECVE, \"execve\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)"}, {"sha": "1a105701eb08f0f781b6d7e2670876b415bdc50c", "filename": "gcc/c-common.c", "status": "modified", "additions": 67, "deletions": 17, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=254986c7ff3175c29307b999f161cfcc7961baf4", "patch": "@@ -636,7 +636,7 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_cleanup_attribute },\n   { \"warn_unused_result\",     0, 0, false, true, true,\n \t\t\t      handle_warn_unused_result_attribute },\n-  { \"sentinel\",               0, 0, false, true, true,\n+  { \"sentinel\",               0, 1, false, true, true,\n \t\t\t      handle_sentinel_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n@@ -5047,7 +5047,8 @@ check_function_nonnull (tree attrs, tree params)\n     }\n }\n \n-/* Check the last argument of a function call is (pointer)0.  */\n+/* Check that the Nth argument of a function call (counting backwards\n+   from the end) is a (pointer)0.  */\n \n static void\n check_function_sentinel (tree attrs, tree params)\n@@ -5060,11 +5061,40 @@ check_function_sentinel (tree attrs, tree params)\n \twarning (\"missing sentinel in function call\");\n       else\n         {\n-\t  /* Find the last parameter.  */\n-\t  while (TREE_CHAIN (params))\n-\t    params = TREE_CHAIN (params);\n-\t  if (!POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (params)))\n-\t      || !integer_zerop (TREE_VALUE (params)))\n+\t  tree sentinel, end;\n+\t  unsigned pos = 0;\n+\t  \n+\t  if (TREE_VALUE (attr))\n+\t    {\n+\t      tree p = TREE_VALUE (TREE_VALUE (attr));\n+\t      STRIP_NOPS (p);\n+\t      pos = TREE_INT_CST_LOW (p);\n+\t    }\n+\n+\t  sentinel = end = params;\n+\n+\t  /* Advance `end' ahead of `sentinel' by `pos' positions.  */\n+\t  while (pos > 0 && TREE_CHAIN (end))\n+\t    {\n+\t      pos--;\n+\t      end = TREE_CHAIN (end);\n+\t    }\n+\t  if (pos > 0)\n+\t    {\n+\t      warning (\"not enough arguments to fit a sentinel\");\n+\t      return;\n+\t    }\n+\n+\t  /* Now advance both until we find the last parameter.  */\n+\t  while (TREE_CHAIN (end))\n+\t    {\n+\t      end = TREE_CHAIN (end);\n+\t      sentinel = TREE_CHAIN (sentinel);\n+\t    }\n+\n+\t  /* Validate the sentinel.  */\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (sentinel)))\n+\t      || !integer_zerop (TREE_VALUE (sentinel)))\n \t    warning (\"missing sentinel in function call\");\n \t}\n     }\n@@ -5215,8 +5245,7 @@ handle_warn_unused_result_attribute (tree *node, tree name,\n /* Handle a \"sentinel\" attribute.  */\n \n static tree\n-handle_sentinel_attribute (tree *node, tree name,\n-\t\t\t   tree ARG_UNUSED (args),\n+handle_sentinel_attribute (tree *node, tree name, tree args,\n \t\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree params = TYPE_ARG_TYPES (*node);\n@@ -5226,17 +5255,38 @@ handle_sentinel_attribute (tree *node, tree name,\n       warning (\"`%s' attribute requires prototypes with named arguments\",\n                IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n-      return NULL_TREE;\n     }\n+  else\n+    {\n+      while (TREE_CHAIN (params))\n+\tparams = TREE_CHAIN (params);\n \n-  while (TREE_CHAIN (params))\n-    params = TREE_CHAIN (params);\n-\n-  if (VOID_TYPE_P (TREE_VALUE (params)))\n+      if (VOID_TYPE_P (TREE_VALUE (params)))\n+        {\n+\t  warning (\"`%s' attribute only applies to variadic functions\",\n+\t\t   IDENTIFIER_POINTER (name));\n+\t  *no_add_attrs = true;\n+\t}\n+    }\n+  \n+  if (args)\n     {\n-      warning (\"`%s' attribute only applies to variadic functions\",\n-\t       IDENTIFIER_POINTER (name));\n-      *no_add_attrs = true;\n+      tree position = TREE_VALUE (args);\n+\n+      STRIP_NOPS (position);\n+      if (TREE_CODE (position) != INTEGER_CST)\n+        {\n+\t  warning (\"requested position is not an integer constant\");\n+\t  *no_add_attrs = true;\n+\t}\n+      else\n+        {\n+\t  if (tree_int_cst_lt (position, integer_zero_node))\n+\t    {\n+\t      warning (\"requested position is less than zero\");\n+\t      *no_add_attrs = true;\n+\t    }\n+\t}\n     }\n   \n   return NULL_TREE;"}, {"sha": "bbde788ee5cd82dade7ec049f80bb9cdca63d6d0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=254986c7ff3175c29307b999f161cfcc7961baf4", "patch": "@@ -2113,15 +2113,30 @@ section, consider using the facilities of the linker instead.\n \n @item sentinel\n @cindex @code{sentinel} function attribute\n-This function attribute ensures that the last parameter in a function\n-call is an explicit @code{NULL}.  The attribute is only valid on\n-variadic functions.  For example the attribute is automatically set for\n-the built-in functions @code{execl} and @code{execlp} where @code{NULL}\n-is the marker for argument list termination.  A valid @code{NULL} in\n-this context is defined as zero with any pointer type.  If your system\n-defines the @code{NULL} macro with an integer type then you need to add\n-an explicit cast.  The warnings for missing or incorrect sentinels are\n-enabled with @option{-Wformat}.\n+This function attribute ensures that a parameter in a function call is\n+an explicit @code{NULL}.  The attribute is only valid on variadic\n+functions.  By default, the sentinel is located at position zero, the\n+last parameter of the function call.  If an optional integer position\n+argument P is supplied to the attribute, the sentinel must be located at\n+position P counting backwards from the end of the argument list.\n+\n+@smallexample\n+__attribute__ ((sentinel))\n+is equivalent to\n+__attribute__ ((sentinel(0)))\n+@end smallexample\n+\n+The attribute is automatically set with a position of 0 for the built-in\n+functions @code{execl} and @code{execlp}.  The built-in function\n+@code{execle} has the attribute set set with a position of 1.\n+\n+A valid @code{NULL} in this context is defined as zero with any pointer\n+type.  If your system defines the @code{NULL} macro with an integer type\n+then you need to add an explicit cast.  GCC replaces @code{stddef.h}\n+with a copy that redefines NULL appropriately.\n+\n+The warnings for missing or incorrect sentinels are enabled with\n+@option{-Wformat}.\n \n @item short_call\n See long_call/short_call."}, {"sha": "01e0815f4627ed65fb05f2203b8f4206dc7fb1f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=254986c7ff3175c29307b999f161cfcc7961baf4", "patch": "@@ -1,3 +1,7 @@\n+2004-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/format/sentinel-1.c: Update for parameter option.\n+\n 2004-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/format/sentinel-1.c: New test."}, {"sha": "12915b7dc5a3a8cb0524c9dae60a1ad11845e5db", "filename": "gcc/testsuite/gcc.dg/format/sentinel-1.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254986c7ff3175c29307b999f161cfcc7961baf4/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c?ref=254986c7ff3175c29307b999f161cfcc7961baf4", "patch": "@@ -7,6 +7,8 @@\n \n extern int execl (const char *, const char *, ...);\n extern int execlp (const char *, const char *, ...);\n+extern int execle (const char *, const char *, ...);\n+extern char *envp[];\n \n #define ATTR __attribute__ ((__sentinel__))\n \n@@ -16,6 +18,12 @@ extern void foo1 (const char *, ...) ATTR;\n extern void foo2 (...) ATTR; /* { dg-error \"ISO C requires|named arguments\" \"sentinel\" } */\n extern void foo3 () ATTR; /* { dg-warning \"named arguments\" \"sentinel\" } */\n extern void foo4 (const char *, int) ATTR; /* { dg-warning \"variadic functions\" \"sentinel\" } */\n+extern void foo5 (const char *, ...) __attribute__ ((__sentinel__(1)));\n+extern void foo6 (const char *, ...) __attribute__ ((__sentinel__(5)));\n+extern void foo7 (const char *, ...) __attribute__ ((__sentinel__(0)));\n+extern void foo8 (const char *, ...) __attribute__ ((__sentinel__(\"a\"))); /* { dg-warning \"not an integer constant\" \"sentinel\" } */\n+extern void foo9 (const char *, ...) __attribute__ ((__sentinel__(-1))); /* { dg-warning \"less than zero\" \"sentinel\" } */\n+extern void foo10 (const char *, ...) __attribute__ ((__sentinel__(1,3))); /* { dg-error \"wrong number of arguments\" \"sentinel\" } */\n \n extern void bar(void)\n {\n@@ -27,11 +35,32 @@ extern void bar(void)\n   foo1 (\"a\", NULL, 1); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo1 (\"a\", NULL);\n \n+  foo5 (\"a\", 1, 2, 3, NULL); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo5 (\"a\", 1, 2, NULL, 3);\n+  foo5 (\"a\", 1, NULL, 2, 3); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo5 (\"a\", NULL, 1, 2, 3); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo5 (\"a\", 0, 1, 2, 3); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+\n+  foo6 (\"a\", 1, NULL); /* { dg-warning \"not enough arguments\" \"sentinel\" } */\n+  foo6 (\"a\", 1, NULL, 2); /* { dg-warning \"not enough arguments\" \"sentinel\" } */\n+  foo6 (\"a\", 1, NULL, 2, 3); /* { dg-warning \"not enough arguments\" \"sentinel\" } */\n+  foo6 (\"a\", NULL, 1, 2, 3); /* { dg-warning \"not enough arguments\" \"sentinel\" } */\n+  foo6 (\"a\", NULL, 1, 2, 3, 4); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo6 (\"a\", NULL, 1, 2, 3, 4, 5);\n+  foo6 (\"a\", 0, 1, 2, 3, 4, 5); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo6 (\"a\", NULL, 1, 2, 3, 4, 5, 6); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+\n+  foo7 (\"a\", 1, 2, 3, NULL);\n+\n   execl (\"/bin/ls\", \"-aFC\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   execl (\"/bin/ls\", \"-aFC\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   execl (\"/bin/ls\", \"-aFC\", NULL);\n \n   execlp (\"ls\", \"-aFC\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   execlp (\"ls\", \"-aFC\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   execlp (\"ls\", \"-aFC\", NULL);\n+\n+  execle (\"ls\", \"-aFC\", \".\", envp); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execle (\"ls\", \"-aFC\", \".\", 0, envp); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execle (\"ls\", \"-aFC\", \".\", NULL, envp);\n }"}]}