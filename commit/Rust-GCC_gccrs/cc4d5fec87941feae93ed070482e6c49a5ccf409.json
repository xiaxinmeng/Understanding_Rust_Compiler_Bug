{"sha": "cc4d5fec87941feae93ed070482e6c49a5ccf409", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0ZDVmZWM4Nzk0MWZlYWU5M2VkMDcwNDgyZTZjNDlhNWNjZjQwOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-04-12T16:57:47Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-04-12T16:57:47Z"}, "message": "rs6000.c (call_operand): Allow LINK and COUNT registers.\n\n2002-04-12  Jan Hubicka  <jh@suse.cz>\n            David Edelsohn  <edelsohn@gnu.org>\n\n        * config/rs6000/rs6000.c (call_operand): Allow LINK and COUNT\n        registers.\n        (symbol_ref_operand): New.\n        * config/rs6000/rs6000.h (PREDICATE_CODES): Add symbol_ref_operand.\n        * config/rs6000/rs6000.md (call_nonlocal_aix): Use symbol_ref_operand.\n\nCo-Authored-By: David Edelsohn <edelsohn@gnu.org>\n\nFrom-SVN: r52231", "tree": {"sha": "c88fc11f8038b8b4d356b75610723a4b4e769286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c88fc11f8038b8b4d356b75610723a4b4e769286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc4d5fec87941feae93ed070482e6c49a5ccf409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4d5fec87941feae93ed070482e6c49a5ccf409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4d5fec87941feae93ed070482e6c49a5ccf409", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4d5fec87941feae93ed070482e6c49a5ccf409/comments", "author": null, "committer": null, "parents": [{"sha": "2274b9b3fe136cee7184746a64b653d8a537cb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2274b9b3fe136cee7184746a64b653d8a537cb67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2274b9b3fe136cee7184746a64b653d8a537cb67"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "e875ba84b36bd6343008cd470cd5427cb8bb8703", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4d5fec87941feae93ed070482e6c49a5ccf409/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4d5fec87941feae93ed070482e6c49a5ccf409/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc4d5fec87941feae93ed070482e6c49a5ccf409", "patch": "@@ -1,3 +1,12 @@\n+2002-04-12  Jan Hubicka  <jh@suse.cz>\n+\t    David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (call_operand): Allow LINK and COUNT\n+\tregisters.\n+\t(symbol_ref_operand): New.\n+\t* config/rs6000/rs6000.h (PREDICATE_CODES): Add symbol_ref_operand.\n+\t* config/rs6000/rs6000.md (call_nonlocal_aix): Use symbol_ref_operand.\n+\n 2002-04-12  Andreas Schwab  <schwab@suse.de>\n \n \t* config/ia64/ia64.h (ASM_SPEC): Moved from here ..."}, {"sha": "99e7af6cd3071a8be21eadd70b854ff7e550d749", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4d5fec87941feae93ed070482e6c49a5ccf409/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4d5fec87941feae93ed070482e6c49a5ccf409/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cc4d5fec87941feae93ed070482e6c49a5ccf409", "patch": "@@ -1552,9 +1552,21 @@ lwa_operand (op, mode)\n \t    || INTVAL (XEXP (XEXP (inner, 0), 1)) % 4 == 0));\n }\n \n+/* Return 1 if the operand, used inside a MEM, is a SYMBOL_REF.  */\n+\n+int\n+symbol_ref_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (mode != VOIDmode && GET_MODE (op) != mode)\n+    return 0;\n+\n+  return (GET_CODE (op) == SYMBOL_REF);\n+}\n+\n /* Return 1 if the operand, used inside a MEM, is a valid first argument\n-   to CALL.  This is a SYMBOL_REF or a pseudo-register, which will be\n-   forced to lr.  */\n+   to CALL.  This is a SYMBOL_REF, a pseudo-register, LR or CTR.  */\n \n int\n call_operand (op, mode)\n@@ -1565,7 +1577,10 @@ call_operand (op, mode)\n     return 0;\n \n   return (GET_CODE (op) == SYMBOL_REF\n-\t  || (GET_CODE (op) == REG && REGNO (op) >= FIRST_PSEUDO_REGISTER));\n+\t  || (GET_CODE (op) == REG\n+\t      && (REGNO (op) == LINK_REGISTER_REGNUM\n+\t\t  || REGNO (op) == COUNT_REGISTER_REGNUM\n+\t\t  || REGNO (op) >= FIRST_PSEUDO_REGISTER)));\n }\n \n /* Return 1 if the operand is a SYMBOL_REF for a function known to be in"}, {"sha": "95d5143cbc338ab5771b491d0d7d4a96938be6a1", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4d5fec87941feae93ed070482e6c49a5ccf409/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4d5fec87941feae93ed070482e6c49a5ccf409/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=cc4d5fec87941feae93ed070482e6c49a5ccf409", "patch": "@@ -2771,6 +2771,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   {\"mask64_operand\", {CONST_INT, CONST_DOUBLE}},\t\t\t   \\\n   {\"count_register_operand\", {REG}},\t\t\t\t\t   \\\n   {\"xer_operand\", {REG}},\t\t\t\t\t\t   \\\n+  {\"symbol_ref_operand\", {SYMBOL_REF}},\t\t\t\t\t   \\\n   {\"call_operand\", {SYMBOL_REF, REG}},\t\t\t\t\t   \\\n   {\"current_file_function_operand\", {SYMBOL_REF}},\t\t\t   \\\n   {\"input_operand\", {SUBREG, MEM, REG, CONST_INT,\t\t\t   \\"}, {"sha": "46df7938928f9a0d76efae3eb22e10bc79c5905b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4d5fec87941feae93ed070482e6c49a5ccf409/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4d5fec87941feae93ed070482e6c49a5ccf409/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cc4d5fec87941feae93ed070482e6c49a5ccf409", "patch": "@@ -9944,7 +9944,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*call_nonlocal_aix32\"\n-  [(call (mem:SI (match_operand:SI 0 \"call_operand\" \"s\"))\n+  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s\"))\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n    (clobber (match_scratch:SI 3 \"=l\"))]\n@@ -9969,7 +9969,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*call_nonlocal_aix64\"\n-  [(call (mem:SI (match_operand:DI 0 \"call_operand\" \"s\"))\n+  [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s\"))\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n    (clobber (match_scratch:SI 3 \"=l\"))]\n@@ -9996,7 +9996,7 @@\n \n (define_insn \"*call_value_nonlocal_aix32\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:SI 1 \"call_operand\" \"s\"))\n+\t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n    (clobber (match_scratch:SI 4 \"=l\"))]\n@@ -10023,7 +10023,7 @@\n \n (define_insn \"*call_value_nonlocal_aix64\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:DI 1 \"call_operand\" \"s\"))\n+\t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n    (clobber (match_scratch:SI 4 \"=l\"))]"}]}