{"sha": "82625a42e652d52fc6bbe6070f8d0589d5e0c8ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2MjVhNDJlNjUyZDUyZmM2YmJlNjA3MGY4ZDA1ODlkNWUwYzhhZA==", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2021-06-18T12:11:42Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2021-07-09T06:25:06Z"}, "message": "mips: check MSA support for vector modes [PR100760,PR100761,PR100762]\n\nCheck if the vector mode is really supported by MSA in certain cases,\ninstead of testing ISA_HAS_MSA.  Simply testing ISA_HAS_MSA can cause\nICE when MSA is enabled besides other MIPS SIMD extensions (notably,\nLoongson MMI).\n\ngcc/\n\n\tPR target/100760\n\tPR target/100761\n\tPR target/100762\n\t* config/mips/mips.c (mips_const_insns): Use MSA_SUPPORTED_MODE_P\n\tinstead of ISA_HAS_MSA.\n\t(mips_expand_vec_unpack): Likewise.\n\t(mips_expand_vector_init): Likewise.\n\ngcc/testsuite/\n\n\tPR target/100760\n\tPR target/100761\n\tPR target/100762\n\t* gcc.target/mips/pr100760.c: New test.\n\t* gcc.target/mips/pr100761.c: New test.\n\t* gcc.target/mips/pr100762.c: New test.", "tree": {"sha": "3852a5b9823e945a1a8ed62d1d112c3d36757a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3852a5b9823e945a1a8ed62d1d112c3d36757a16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEEunTLnZqV9wGnXaw2V5HFsy7NNwFAmDn7HwACgkQ2V5HFsy7\nNNy4QxAAjh3M4ufGiu3JlOYqvOXFWBQhn3Dl4VDt6wo4HfKOzVdDIDlDQFS0Puta\ngjjOU1CdmLRWrP0d0LWisFjC0r5dQeN/V1Eu+21ey3q7bl7A9XoO26vfsV1VIpwi\nPhR10NGgEV8Tb3esp+6mmtfUUyoAUm0vEnuHeo2v1VGX5YPlFtUnsQFpdFUyRAJL\n0DgxPMHN+ayyQ8Rvpzki3pbs4QmYz3QIhtpbB5sWbtdrHX5GMMxesEjfOBF4wetT\nadNwY/XvBF2S28h/Z/5T0Rk6csuujuaXkUblUHAf3EMZUBgYVqh4NXkYIaNQuyO8\nDJGKNZddtxJosFb3Ui+K1UvG+ar8PzjYjT4xDX2Vv5Ct7bBuBiqb4bmGRuEhxHdP\nsN3N8TJW68mOg7E3IccDltBl/B5JH4BWTwPA9VqNLoFF64h1qD6LSueBadZhHZi1\nDV7QgcDkXYAueTTpQVv0S7OlMExUWZZsXSJvdMXyqkdw3KN509rBjGvUxnu/+Bvi\nEIcPObh4beV/wKm23eGIo04x/25/DBYFZYUN4wTk/oAUyRZaMbMb/QbcfxDXa8H0\nwGmFdJOBnI54Q1t/dtHbYUda5XzQMw2vrJUH/32SBt72jDqJJOuGZSXE2kZtT6x2\ny7TwEHNEHFLzyKOn3IfLIc2/T45VS8iEUWWN2SD3kJtxPFFq5us=\n=vp9O\n-----END PGP SIGNATURE-----", "payload": "tree 3852a5b9823e945a1a8ed62d1d112c3d36757a16\nparent 062c762ef264dca89d01ebca2ef023ea91f31d50\nauthor Xi Ruoyao <xry111@mengyan1223.wang> 1624018302 +0800\ncommitter Xi Ruoyao <xry111@mengyan1223.wang> 1625811906 +0800\n\nmips: check MSA support for vector modes [PR100760,PR100761,PR100762]\n\nCheck if the vector mode is really supported by MSA in certain cases,\ninstead of testing ISA_HAS_MSA.  Simply testing ISA_HAS_MSA can cause\nICE when MSA is enabled besides other MIPS SIMD extensions (notably,\nLoongson MMI).\n\ngcc/\n\n\tPR target/100760\n\tPR target/100761\n\tPR target/100762\n\t* config/mips/mips.c (mips_const_insns): Use MSA_SUPPORTED_MODE_P\n\tinstead of ISA_HAS_MSA.\n\t(mips_expand_vec_unpack): Likewise.\n\t(mips_expand_vector_init): Likewise.\n\ngcc/testsuite/\n\n\tPR target/100760\n\tPR target/100761\n\tPR target/100762\n\t* gcc.target/mips/pr100760.c: New test.\n\t* gcc.target/mips/pr100761.c: New test.\n\t* gcc.target/mips/pr100762.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "062c762ef264dca89d01ebca2ef023ea91f31d50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062c762ef264dca89d01ebca2ef023ea91f31d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062c762ef264dca89d01ebca2ef023ea91f31d50"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "00a8eef96aa698e9ccb07eacb6cdc30eef8c002b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=82625a42e652d52fc6bbe6070f8d0589d5e0c8ad", "patch": "@@ -2879,7 +2879,7 @@ mips_const_insns (rtx x)\n       return mips_build_integer (codes, INTVAL (x));\n \n     case CONST_VECTOR:\n-      if (ISA_HAS_MSA\n+      if (MSA_SUPPORTED_MODE_P (GET_MODE (x))\n \t  && mips_const_vector_same_int_p (x, GET_MODE (x), -512, 511))\n \treturn 1;\n       /* Fall through.  */\n@@ -21732,7 +21732,7 @@ mips_expand_vec_unpack (rtx operands[2], bool unsigned_p, bool high_p)\n   rtx (*cmpFunc) (rtx, rtx, rtx);\n   rtx tmp, dest, zero;\n \n-  if (ISA_HAS_MSA)\n+  if (MSA_SUPPORTED_MODE_P (imode))\n     {\n       switch (imode)\n \t{\n@@ -21994,7 +21994,7 @@ mips_expand_vector_init (rtx target, rtx vals)\n \tall_same = false;\n     }\n \n-  if (ISA_HAS_MSA)\n+  if (MSA_SUPPORTED_MODE_P (vmode))\n     {\n       if (all_same)\n \t{"}, {"sha": "d715b85e7908ae0e1bbb97cf27307d50850ca5e1", "filename": "gcc/testsuite/gcc.target/mips/pr100760.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100760.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100760.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100760.c?ref=82625a42e652d52fc6bbe6070f8d0589d5e0c8ad", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/100760\n+   This was triggering an ICE with \"maximum number of generated reload\n+   insns per insn achieved (90)\" when compiled with -mmsa -mloongson-mmi. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-mmsa -mloongson-mmi\" } */\n+\n+typedef __INT32_TYPE__ int32_t;\n+typedef int32_t a __attribute__((__vector_size__(8)));\n+void b() { a x = (a){1, 1}; }"}, {"sha": "cc2598ee0238fff6dd12e4d1602b51bf974cff49", "filename": "gcc/testsuite/gcc.target/mips/pr100761.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100761.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100761.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100761.c?ref=82625a42e652d52fc6bbe6070f8d0589d5e0c8ad", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/100761\n+   This was triggering an ICE in mips_expand_vec_unpack when compiled with\n+   -mmsa -mloongson-mmi. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-mmsa -mloongson-mmi\" } */\n+\n+typedef __INT8_TYPE__ int8_t;\n+typedef __INT16_TYPE__ int16_t;\n+typedef int8_t i8x8 __attribute__((__vector_size__(8)));\n+typedef int16_t i16x8 __attribute__((__vector_size__(16)));\n+\n+i8x8 a;\n+\n+void f() {\n+  i16x8 b = __builtin_convertvector (a, i16x8);\n+}"}, {"sha": "89c1185317c47b828227ac0fe10dc0a808c417c3", "filename": "gcc/testsuite/gcc.target/mips/pr100762.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100762.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82625a42e652d52fc6bbe6070f8d0589d5e0c8ad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100762.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr100762.c?ref=82625a42e652d52fc6bbe6070f8d0589d5e0c8ad", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/100762\n+   This was triggering an ICE in mips_expand_vector_init when compiled with\n+   -mmsa -mloongson-mmi. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-mmsa -mloongson-mmi\" } */\n+\n+typedef __INT32_TYPE__ int32_t;\n+typedef int32_t i32x2 __attribute__((__vector_size__(8)));\n+\n+i32x2 cmp(i32x2 a, i32x2 b) {\n+  return a >= b;\n+}\n+\n+i32x2 shift(i32x2 a, i32x2 b) {\n+  return a >> b;\n+}\n+\n+i32x2 mul(i32x2 a, i32x2 b) {\n+  return a * b;\n+}\n+\n+i32x2 div(i32x2 a, i32x2 b) {\n+  return a / b;\n+}"}]}