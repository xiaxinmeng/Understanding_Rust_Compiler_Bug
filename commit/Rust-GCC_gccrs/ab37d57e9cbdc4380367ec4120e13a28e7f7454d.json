{"sha": "ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIzN2Q1N2U5Y2JkYzQzODAzNjdlYzQxMjBlMTNhMjhlN2Y3NDU0ZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-04-09T22:24:29Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-04-09T22:24:29Z"}, "message": "target-supports.exp (check_named_sections_available): New.\n\n\t* lib/target-supports.exp (check_named_sections_available): New.\n\t* lib/gcc-dg.exp (dg-require-named-sections): New.\n\t* lib/prune.exp (prune_gcc_output): Incorporate prunes from\n\told-deja.exp.  Also prune error-count message from HP linker.\n\t* g++.old-deja/old-deja.exp (g++-dg-prune): Delete.\n\n\t* g++.dg/init/init-ref4.C: Use dg-require-weak.\n\t* g++.old-deja/g++.pt/static3.C: Likewise.\n\t* g++.dg/parse/attr-ctor1.C: Use dg-require-named-sections.\n\nFrom-SVN: r80572", "tree": {"sha": "e6b815d2ac0341819febf107d288500965fb19f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6b815d2ac0341819febf107d288500965fb19f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/comments", "author": null, "committer": null, "parents": [{"sha": "7c3ac422e448920e98d97965161cfc1b8cb7479b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3ac422e448920e98d97965161cfc1b8cb7479b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3ac422e448920e98d97965161cfc1b8cb7479b"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "91353711df7c66d9d626adae95e35df385312a03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "patch": "@@ -1,3 +1,15 @@\n+2004-04-09  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_named_sections_available): New.\n+\t* lib/gcc-dg.exp (dg-require-named-sections): New.\n+\t* lib/prune.exp (prune_gcc_output): Incorporate prunes from\n+\told-deja.exp.  Also prune error-count message from HP linker.\n+\t* g++.old-deja/old-deja.exp (g++-dg-prune): Delete.\n+\n+\t* g++.dg/init/init-ref4.C: Use dg-require-weak.\n+\t* g++.old-deja/g++.pt/static3.C: Likewise.\n+\t* g++.dg/parse/attr-ctor1.C: Use dg-require-named-sections.\n+\n 2004-04-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.c-torture/execute/20040409-1.c: New test case.\n@@ -49,7 +61,7 @@\n \t* gcc.dg/compat/struct-by-value-5a_y.c,\n \tgcc.dg/compat/struct-by-value-5b_y.c: New, split out from\n \tgcc.dg/compat/struct-by-value-5_y.c.\n-\t\n+\n \t* gcc.dg/compat/struct-by-value-6a_main.c,\n \tgcc.dg/compat/struct-by-value-6b_main.c: New files.\n \t* gcc.dg/compat/struct-by-value-6_main.c: Delete.\n@@ -59,7 +71,7 @@\n \t* gcc.dg/compat/struct-by-value-6a_y.c,\n \tgcc.dg/compat/struct-by-value-6b_y.c: New, split out from\n \tgcc.dg/compat/struct-by-value-6_y.c.\n-\t\n+\n \t* gcc.dg/compat/struct-by-value-7a_main.c,\n \tgcc.dg/compat/struct-by-value-7b_main.c: New files.\n \t* gcc.dg/compat/struct-by-value-7_main.c: Delete.\n@@ -92,7 +104,7 @@\n \tfailure and exit(0) on success.\n \t* g++.dg/expr/anew2.C: Ditto.\n \t* g++.dg/expr/anew3.C: Ditto.\n-\t* g++.dg/expr/anew4.C: Ditto. \n+\t* g++.dg/expr/anew4.C: Ditto.\n \n 2004-04-05  Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "7cd6986ce529ccc310c1be60eef45441eb5ffd7e", "filename": "gcc/testsuite/g++.dg/init/init-ref4.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finit-ref4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finit-ref4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finit-ref4.C?ref=ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "patch": "@@ -1,9 +1,9 @@\n // Origin: dgregor@gcc.gnu.org\n // PR c++/11384\n-// foo<int>::_S_something was not being emitted.\n+// foo<int>::_S_something was not being emitted (as a weak definition).\n \n-// { dg-do run { xfail *-*-aout *-*-coff *-*-hpux* *-*-hms } }\n-// On targets that don't support weak symbols, we require an explicit\n+// { dg-do run }\n+// { dg-require-weak \"\" }\n \n template<typename T> \n   struct foo\n@@ -19,4 +19,3 @@ int main()\n   const int* p = &foo<int>::_S_something;\n   return 0;\n }\n-"}, {"sha": "23d488a20031d8d9e656597aaaf3dd3ca9d98a17", "filename": "gcc/testsuite/g++.dg/parse/attr-ctor1.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr-ctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr-ctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr-ctor1.C?ref=ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "patch": "@@ -1,10 +1,9 @@\n // PR c++/6992\n // Origin: <petr@scssoft.com>\n // { dg-do compile }\n-\n-// Requires section attribute support\n+// { dg-require-named-sections \"\" }\n \n class A\n {\n-    __attribute__((section(\"whatever\"))) A(); // { dg-bogus \"\" \"\" { xfail hppa*-*-hpux* } }\n+    __attribute__((section(\"whatever\"))) A();\n };"}, {"sha": "5a638b1f7ad263254c274e7727515c0240752dab", "filename": "gcc/testsuite/g++.old-deja/g++.pt/static3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic3.C?ref=ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "patch": "@@ -1,6 +1,7 @@\n-// { dg-do run { xfail *-*-aout *-*-coff *-*-hpux* *-*-hms } }\n+// { dg-do run }\n // On targets that don't support weak symbols, we require an explicit\n // instantiation of arr.\n+// { dg-require-weak \"\" }\n \n template<class T>\n struct A {"}, {"sha": "5e3f6b7fc34f79b3d16f7caafd632a825611db18", "filename": "gcc/testsuite/g++.old-deja/old-deja.exp", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp?ref=ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "patch": "@@ -30,17 +30,6 @@ dg-init\n # that are handled specially.\n set tests [lsort [find $srcdir/$subdir *.C]]\n \n-proc g++-dg-prune { system text } {\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: In (\\[^\\n\\]*function|method|\\[^\\n\\]*structor) \\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: In instantiation of \\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*:   instantiated from \\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $text \"\" text\n-    regsub -all \"(^|\\n)collect: re(compiling|linking)\\[^\\n\\]*\" $text \"\" text\n-    return $text\n-}\n-\n # Main loop.\n dg-runtest $tests \"\" $DEFAULT_CXXFLAGS\n "}, {"sha": "7977893cae662f0c608f84c0b85dd0c0259b21d0", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "patch": "@@ -357,6 +357,17 @@ proc dg-require-iconv { args } {\n     return\n }\n \n+# If this target does not support named sections skip this test.\n+\n+proc dg-require-named-sections { args } {\n+   upvar name name\n+\n+   if { ![ check_named_sections_available ] } {\n+       upvar dg-do-what dg-do-what\n+       set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+   }\n+}\n+\n # Prune any messages matching ARGS[1] (a regexp) from test output.\n proc dg-prune-output { args } {\n     global additional_prunes"}, {"sha": "d706eacd1c03daf87d19b1089225c50fb5c64f17", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "patch": "@@ -19,10 +19,13 @@\n proc prune_gcc_output { text } {\n     #send_user \"Before:$text\\n\"\n \n-    regsub -all \"(^|\\n)\\[^\\n\\]*: In ((static member )?function|member|method|(copy )?constructor|instantiation|program|subroutine|block-data) \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: In ((static member )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data) \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*: At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*:   instantiated from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect2: ld returned \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)collect: re(compiling|linking)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)Please submit.*instructions\\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[0-9\\]\\[0-9\\]* errors\\.\" $text \"\" text\n \n     # Ignore harmless -fpic warnings.\n     regsub -all \"(^|\\n)\\[^\\n\\]*: warning: -f(pic|PIC) ignored for target\\[^\\n\\]*\" $text \"\" text"}, {"sha": "7dfa893ced686c65fee3de4406d230c3c28f911b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab37d57e9cbdc4380367ec4120e13a28e7f7454d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ab37d57e9cbdc4380367ec4120e13a28e7f7454d", "patch": "@@ -247,3 +247,23 @@ proc check_iconv_available { test_what } {\n \n     return 0\n }\n+\n+# Return true if named sections are supported on this target.\n+# This proc does not cache results, because the answer may vary\n+# when cycling over subtarget options (e.g. irix o32/n32/n64) in\n+# the same test run.\n+proc check_named_sections_available { } {\n+    global tool\n+\n+    set f [open \"tmp.c\" \"w\"]\n+    # Compile a small test program.\n+    puts $f \"int __attribute__ ((section(\\\"whatever\\\"))) foo;\"\n+    close $f\n+    set lines [${tool}_target_compile \"tmp.c\" \"tmp.o\" object \"\"]\n+    file delete \"tmp.c\"\n+\n+    # If we got no error messages, everything is OK.\n+    set answer [string match \"\" $lines]\n+    verbose \"check_named_sections_available  returning $answer\" 2\n+    return $answer\n+}"}]}