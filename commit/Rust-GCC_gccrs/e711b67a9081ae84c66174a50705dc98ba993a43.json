{"sha": "e711b67a9081ae84c66174a50705dc98ba993a43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxMWI2N2E5MDgxYWU4NGM2NjE3NGE1MDcwNWRjOThiYTk5M2E0Mw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-01-18T08:55:32Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-01-21T05:28:59Z"}, "message": "Fix incorrect optimization by cprop_hardreg.\n\nIf SRC had been assigned a mode narrower than the copy, we can't\nalways link DEST into the chain even they have same\nhard_regno_nregs(i.e. HImode/SImode in i386 backend).\n\ni.e\n        kmovw   %k0, %edi\n        vmovd   %edi, %xmm2\n\tvpshuflw        $0, %xmm2, %xmm0\n        kmovw   %k0, %r8d\n        kmovd   %k0, %r9d\n...\n-\t movl %r9d, %r11d\n+\t vmovd %xmm2, %r11d\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/98694\n\t* regcprop.c (copy_value): If SRC had been assigned a mode\n\tnarrower than the copy, we can't link DEST into the chain even\n\tthey have same hard_regno_nregs(i.e. HImode/SImode in i386\n\tbackend).\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/98694\n\t* gcc.target/i386/pr98694.c: New test.", "tree": {"sha": "3cbe5c7f545a56672b983b3652e7c58762773300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cbe5c7f545a56672b983b3652e7c58762773300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e711b67a9081ae84c66174a50705dc98ba993a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e711b67a9081ae84c66174a50705dc98ba993a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e711b67a9081ae84c66174a50705dc98ba993a43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e711b67a9081ae84c66174a50705dc98ba993a43/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93d0e36c0a86c3d15310fe7383321ca63aeb04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93d0e36c0a86c3d15310fe7383321ca63aeb04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93d0e36c0a86c3d15310fe7383321ca63aeb04d"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "e1342f56bd12cf57ff64ed1ed5c54be2f0ce76bf", "filename": "gcc/regcprop.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711b67a9081ae84c66174a50705dc98ba993a43/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711b67a9081ae84c66174a50705dc98ba993a43/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=e711b67a9081ae84c66174a50705dc98ba993a43", "patch": "@@ -358,6 +358,35 @@ copy_value (rtx dest, rtx src, struct value_data *vd)\n   else if (sn > hard_regno_nregs (sr, vd->e[sr].mode))\n     return;\n \n+  /* It is not safe to link DEST into the chain if SRC was defined in some\n+     narrower mode M and if M is also narrower than the mode of the first\n+     register in the chain.  For example:\n+     (set (reg:DI r1) (reg:DI r0))\n+     (set (reg:HI r2) (reg:HI r1))\n+     (set (reg:SI r3) (reg:SI r2)) //Should be a new chain start at r3\n+     (set (reg:SI r4) (reg:SI r1))\n+     (set (reg:SI r5) (reg:SI r4))\n+\n+     the upper part of r3 is undefined.  If we added it to the chain,\n+     it may be used to replace r5, which has defined upper bits.\n+     See PR98694 for details.\n+\n+     [A] partial_subreg_p (vd->e[sr].mode, GET_MODE (src))\n+     [B] partial_subreg_p (vd->e[sr].mode, vd->e[vd->e[sr].oldest_regno].mode)\n+     Condition B is added to to catch optimization opportunities of\n+\n+     (set (reg:HI R1) (reg:HI R0))\n+     (set (reg:SI R2) (reg:SI R1)) // [A]\n+     (set (reg:DI R3) (reg:DI R2)) // [A]\n+     (set (reg:SI R4) (reg:SI R[0-3]))\n+     (set (reg:HI R5) (reg:HI R[0-4]))\n+\n+     in which all registers have only 16 defined bits.  */\n+  else if (partial_subreg_p (vd->e[sr].mode, GET_MODE (src))\n+\t   && partial_subreg_p (vd->e[sr].mode,\n+\t\t\t\tvd->e[vd->e[sr].oldest_regno].mode))\n+    return;\n+\n   /* Link DR at the end of the value chain used by SR.  */\n \n   vd->e[dr].oldest_regno = vd->e[sr].oldest_regno;"}, {"sha": "45889d482c1510f1cb73ec1739f8b4cf18ec3aa5", "filename": "gcc/testsuite/gcc.target/i386/pr98694.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711b67a9081ae84c66174a50705dc98ba993a43/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98694.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711b67a9081ae84c66174a50705dc98ba993a43/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98694.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98694.c?ref=e711b67a9081ae84c66174a50705dc98ba993a43", "patch": "@@ -0,0 +1,41 @@\n+/* PR rtl-optimization/98694 */\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include<immintrin.h>\n+typedef short v4hi __attribute__ ((vector_size (8)));\n+typedef int v2si __attribute__ ((vector_size (8)));\n+v4hi b;\n+\n+__attribute__ ((noipa))\n+v2si\n+foo (__m512i src1, __m512i src2)\n+{\n+  __mmask64 m = _mm512_cmpeq_epu8_mask (src1, src2);\n+  short s = (short) m;\n+  int i = (int)m;\n+  b = __extension__ (v4hi) {s, s, s, s};\n+  return __extension__ (v2si) {i, i};\n+}\n+\n+int main ()\n+{\n+  if (!__builtin_cpu_supports (\"avx512bw\"))\n+    return 0;\n+\n+  __m512i src1 = _mm512_setzero_si512 ();\n+  __m512i src2 = _mm512_set_epi8 (0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t  0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t  0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t  0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t  0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t  0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t  0, 1, 0, 1, 0, 1, 0, 1,\n+\t\t\t\t  0, 1, 0, 1, 0, 1, 0, 1);\n+  __mmask64 m = _mm512_cmpeq_epu8_mask (src1, src2);\n+  v2si a = foo (src1, src2);\n+  if (a[0] != (int)m)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}