{"sha": "296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2MDAyYzZhMTM1NGYxNTIwZjMyYjljZDFiNGM2MWM2YWIxODZlZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-07T18:02:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-07T18:02:53Z"}, "message": "Improve implementation-defined docs for libstdc++\n\n\t* doc/xml/manual/status_cxx1998.xml: Improve documentation of\n\timplementation-defined properties.\n\t* doc/xml/manual/status_cxx2011.xml: Likewise.\n\t* doc/xml/manual/status_cxx2017.xml: Likewise.\n\nFrom-SVN: r240869", "tree": {"sha": "412cd7f629a5b4b5fe108565a13c44e74c139827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/412cd7f629a5b4b5fe108565a13c44e74c139827"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed"}], "stats": {"total": 211, "additions": 198, "deletions": 13}, "files": [{"sha": "187c59e99b4840b571d9600a6c02d8a988405ac3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "patch": "@@ -1,5 +1,10 @@\n 2016-10-07  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/status_cxx1998.xml: Improve documentation of\n+\timplementation-defined properties.\n+\t* doc/xml/manual/status_cxx2011.xml: Likewise.\n+\t* doc/xml/manual/status_cxx2017.xml: Likewise.\n+\n \t* doc/xml/manual/status_cxx2017.xml: Update status.\n \t* include/std/type_traits (has_unique_object_representations): Define.\n \t* testsuite/20_util/has_unique_object_representations/value.cc: New."}, {"sha": "6afb016a45fe09595de19045141f53616d7b84a2", "filename": "libstdc++-v3/doc/xml/manual/status_cxx1998.xml", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx1998.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx1998.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx1998.xml?ref=296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "patch": "@@ -1087,19 +1087,14 @@ particular release.\n       <emphasis>[18.6.1]/8</emphasis> (exception),\n       <emphasis>[18.6.2.1]/5</emphasis> (bad_exception):  The <code>what()</code>\n       member function of class <code>std::exception</code>, and these other\n-      classes publicly derived from it, simply returns the name of the\n-      class.  But they are the <emphasis>mangled</emphasis> names; you will need to call\n-      <code>c++filt</code> and pass the names as command-line parameters to\n-      demangle them, or call a\n-      <link linkend=\"manual.ext.demangle\">runtime demangler function</link>.\n-      (The classes in <code>&lt;stdexcept&gt;</code> have constructors which\n-      require an argument to use later for <code>what()</code> calls, so the\n-      problem of <code>what()</code>'s value does not arise in most\n-      user-defined exceptions.)\n+      classes publicly derived from it, returns the name of the\n+      class, e.g. <literal>\"std::bad_alloc\"</literal>.\n    </para>\n    <para><emphasis>[18.5.1]/7</emphasis> The return value of\n-      <code>std::type_info::name()</code> is the mangled type name (see the\n-      previous entry for more).\n+      <code>std::type_info::name()</code> is the mangled type name.\n+      You will need to call <code>c++filt</code> and pass the names as\n+      command-line parameters to demangle them, or call a\n+      <link linkend=\"manual.ext.demangle\">runtime demangler function</link>.\n    </para>\n    <para><emphasis>[20.1.5]/5</emphasis> <emphasis>\"Implementors are encouraged to\n       supply libraries that can accept allocators that encapsulate more\n@@ -1114,6 +1109,7 @@ particular release.\n    </para>\n    <para><emphasis>[21.1.3.1]/3,4</emphasis>,\n       <emphasis>[21.1.3.2]/2</emphasis>,\n+      <emphasis>[21.3]/6 basic_string::iterator, basic_string::const_iterator</emphasis>,\n       <emphasis>[23.*]'s foo::iterator</emphasis>,\n       <emphasis>[27.*]'s foo::*_type</emphasis>,\n       <emphasis>others...</emphasis>"}, {"sha": "83a266f4760abfb78fcbcbe1dffe959c6bc85827", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "patch": "@@ -2571,10 +2571,42 @@ particular release.\n       is new in the 2011 standard.\n    </para>\n \n+   <para>\n+      <emphasis>17.6.5.12 [res.on.exception.handling]</emphasis>\n+      There are no implementation-defined exception classes, only standard\n+      exception classes (or classes derived from them) will be thrown.\n+   </para>\n+\n+   <para>\n+      <emphasis>17.6.5.14 [value.error.codes]</emphasis>\n+      The <classname>error_category</classname> for errors originating outside\n+      the OS, and the possible error code values for each error category,\n+      should be documented here.\n+   </para>\n+\n+   <para>\n+      <emphasis>18.6.2.2 [new.badlength]</emphasis>\n+      <function>what()</function> returns\n+      <literal>\"std::bad_array_new_length\"</literal>.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.6.9.1 [allocator.member]/5</emphasis>\n+      Over-aligned types are not supported by\n+      <classname>std::allocator</classname>.\n+   </para>\n+\n    <para>\n       <emphasis>20.7.2.2.1 [util.smartptr.shared.const]</emphasis>\n-      Only <classname>bad_alloc</classname> (or types derived from it) will\n-      be thrown.\n+      When a <classname>shared_ptr</classname> constructor fails\n+      <classname>bad_alloc</classname> (or types derived from it) will\n+      be thrown, or when an allocator is passed to the constructor then any\n+      exceptions thrown by the allocator.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.7.2.0 [util.smartptr.weakptr]</emphasis>\n+      <code>what()</code> returns <literal>\"bad_weak_ptr\"</literal>.\n    </para>\n \n    <para>\n@@ -2583,6 +2615,18 @@ particular release.\n       <literal>CopyAssignable</literal>.\n    </para>\n \n+   <para>\n+      <emphasis>20.11.7.1 [time.clock.system]/3, /4</emphasis>\n+      Time point values are truncated to <code>time_t</code> values.\n+      There is no loss of precision for conversions in the other direction.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.15.7 [meta.trans]/2</emphasis>\n+      <classname>aligned_storage</classname> does not support extended\n+      alignment.\n+   </para>\n+\n    <para>\n       <emphasis>21.2.3.2 [char.traits.specializations.char16_t]</emphasis>,\n       <emphasis>21.2.3.3 [char.traits.specializations.char32_t]</emphasis>\n@@ -2592,6 +2636,11 @@ particular release.\n       The function <function>eof</function> returns <code>int_type(-1)</code>.\n    </para>\n \n+   <para>\n+      <emphasis>22.3.1 [locale]</emphasis>\n+      There is one global locale for the whole program, not per-thread.\n+   </para>\n+\n    <para>\n       <emphasis>22.4.5.1.2 [locale.time.get.virtuals]</emphasis>,\n       <emphasis>22.4.5.3.2 [locale.time.put.virtuals]</emphasis>\n@@ -2603,6 +2652,13 @@ particular release.\n       The mapping should be documented here.\n    </para>\n \n+   <para>\n+      <emphasis>23.3.2.1 [array.overview]</emphasis>\n+      <classname>array&lt;T, N&gt;::iterator</classname> is <code>T*</code> and\n+      <classname>array&lt;T, N&gt;::const_iterator</classname> is\n+      <code>const T*</code>.\n+   </para>\n+\n    <para>\n       <emphasis>23.5.4.2 [unord.map.cnstr]</emphasis>,\n       <emphasis>23.5.5.2 [unord.multimap.cnstr]</emphasis>,\n@@ -2651,6 +2707,20 @@ particular release.\n       the C library as the function is not provided by libstdc++.\n    </para>\n \n+   <para>\n+      <emphasis>27.8.2.1 [stringbuf.cons]</emphasis>\n+      Whether the sequence pointers are copied by the\n+      <classname>basic_stringbuf</classname> move constructor should be\n+      documented here.\n+   </para>\n+\n+   <para>\n+      <emphasis>27.9.1.2 [filebuf.cons]</emphasis>\n+      Whether the sequence pointers are copied by the\n+      <classname>basic_filebuf</classname> move constructor should be\n+      documented here.\n+   </para>\n+\n    <para>\n       <emphasis>28.5.1 [re.synopt]</emphasis>,\n       <emphasis> 28.5.2 [re.matchflag] </emphasis>,\n@@ -2665,6 +2735,12 @@ particular release.\n       <code>ctype_base::blank</code> mask.\n    </para>\n \n+   <para>\n+      <emphasis>29.4 [atomics.lockfree]</emphasis>\n+      The values of the <code>ATOMIC_xxx_LOCK_FREE</code> macros depend on\n+      the target and cannot be listed here.\n+   </para>\n+\n    <para>\n       <emphasis>30.2.3 [thread.req.native]/1</emphasis>\n       <classname>native_handle_type</classname> and"}, {"sha": "c03978e5e1fcfbb89e7f983fcceafdef761ba795", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296002c6a1354f1520f32b9cd1b4c61c6ab186ef/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "patch": "@@ -876,4 +876,112 @@ Feature-testing recommendations for C++</link>.\n </tgroup>\n </table>\n \n+<section xml:id=\"iso.2017.specific\" xreflabel=\"Implementation Specific\"><info><title>Implementation Specific Behavior</title></info>\n+\n+   <para>For behaviour which is also specified by previous standards,\n+      see <link linkend=\"iso.1998.specific\">C++ 1998/2003 Implementation\n+      Specific Behavior</link> and <link linkend=\"iso.2011.specific\">C++\n+      2011 Implementation Specific Behavior</link>. This section only\n+      documents behaviour which is new in the 2017 standard.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.6.5 [optional.bad_optional_access]</emphasis>\n+      <code>what()</code> returns <literal>\"bad optional access\"</literal>.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.7.2 [variant.variant]</emphasis>\n+      Whether <classname>variant</classname> supports over-aligned types\n+      should be documented here.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.7.10 [variant.bad.access]</emphasis>\n+      <code>what()</code> returns <literal>\"Unexpected index\"</literal>.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.12.5.2 [memory.resource.pool.options]</emphasis>\n+      The limits for maximum number of blocks and largest allocation size\n+      supported by <classname>pool_options</classname> should be documented\n+      here.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.12.6.1 [memory.resource.monotonic.buffer.ctor]</emphasis>\n+      The default <code>next_buffer_size</code> and growth factor should\n+      be documented here.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.15.4.3 [meta.unary.prop]</emphasis>\n+      The predicate condition for\n+      <code>has_unique_object_representations</code> is true for all scalar\n+      types except floating point types.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.19.3 [execpol.type],\n+      25.2.3 [algorithms.parallel.exec]</emphasis>\n+      There are no implementation-defined execution policies.\n+   </para>\n+\n+   <para>\n+      <emphasis>22.4.2 [string.view.template]</emphasis>\n+      <classname>basic_string_view&lt;C, T&gt;::iterator</classname> is\n+      <code>C*</code> and\n+      <classname>basic_string_view&lt;C, T&gt;::const_iterator</classname> is\n+      <code>const C*</code>.\n+   </para>\n+\n+\n+   <para>\n+      <emphasis>25.2.3 [algorithms.parallel.exec]</emphasis>\n+      Threads of execution created by <classname>std::thread</classname>\n+      provide concurrent forward progress guarantees, so threads of execution\n+      implicitly created by the library will provide parallel forward\n+      progress guarantees.\n+   </para>\n+\n+   <para>\n+      <emphasis>26.4.1 [cfenv.syn]</emphasis>\n+      The effects of the <filename>&lt;cfenv&gt;</filename> functions\n+      depends on whether the <code>FENV_ACCESS</code> pragma is supported,\n+      and on the C library that provides the header.\n+   </para>\n+\n+   <para>\n+      <emphasis>26.6.9 [c.math.rand]</emphasis>\n+      Whether the <function>rand</function> function may introduce data\n+      races depends on the target C library that provides the function.\n+   </para>\n+\n+   <para>\n+      <emphasis>26.9.5 [sf.cmath]</emphasis>\n+      The effect of calling the mathematical special functions with large\n+      inputs should be documented here.\n+   </para>\n+\n+   <para>\n+      <emphasis>27.10.2.1 [fs.conform.9945]</emphasis>\n+      The behavior of the filesystem library implementation will depend on\n+      the target operating system. Some features will not be not supported\n+      on some targets.\n+   </para>\n+\n+   <para>\n+      <emphasis>27.10.6 [fs.filesystem.syn]</emphasis>\n+      The clock used for file times is\n+      <classname>std::chrono::system_clock</classname>.\n+   </para>\n+\n+   <para>\n+      <emphasis>27.10.8 [path.generic]</emphasis>\n+      dot-dot in the root-directory refers to the root-directory itself.\n+   </para>\n+\n+\n+</section>\n+\n </section>"}]}