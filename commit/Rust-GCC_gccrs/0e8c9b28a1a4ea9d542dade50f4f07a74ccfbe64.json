{"sha": "0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU4YzliMjhhMWE0ZWE5ZDU0MmRhZGU1MGY0ZjA3YTc0Y2NmYmU2NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-02-14T00:49:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-02-14T00:49:15Z"}, "message": "re PR c++/14122 (problem with non-type tmplt parm in member template)\n\n\tPR c++/14122\n\t* cp-tree.h (delete_sanity): Change prototype.\n\t* decl2.c (delete_sanity): Make doing_vec a bool, not an int.\n\tRemove dead code.  Adjust code to warn about deleting an array.\n\t* typekc.c (decay_conversion): Use build_address and build_nop.\n\n\tPR c++/14108\n\t* search.c (accessible_p): Do not check access in thunks.\n\n\tPR c++/14122\n\t* g++.dg/template/array4.C: New test.\n\n\tPR c++/14108\n\t* g++.dg/inherit/thunk2.C: New test.\n\nFrom-SVN: r77786", "tree": {"sha": "7b7881b71a1f399038eb2c8d1db98965fca65574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7881b71a1f399038eb2c8d1db98965fca65574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/comments", "author": null, "committer": null, "parents": [{"sha": "e8cae6592627b08a19885bd11216dfbcd7e8c90d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8cae6592627b08a19885bd11216dfbcd7e8c90d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8cae6592627b08a19885bd11216dfbcd7e8c90d"}], "stats": {"total": 93, "additions": 65, "deletions": 28}, "files": [{"sha": "572b774f7aa2345a0c50ab62c7481de2269233e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "patch": "@@ -1,5 +1,14 @@\n 2004-02-13  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/14122\n+\t* cp-tree.h (delete_sanity): Change prototype.\n+\t* decl2.c (delete_sanity): Make doing_vec a bool, not an int.\n+\tRemove dead code.  Adjust code to warn about deleting an array.\n+\t* typekc.c (decay_conversion): Use build_address and build_nop.\n+\n+\tPR c++/14108\n+\t* search.c (accessible_p): Do not check access in thunks.\n+\n \tPR c++/14083\n \t* call.c (build_conditional_expr): Call force_rvalue on the\n \tnon-void operand in the case that one result is a throw-expression"}, {"sha": "0097c42f288770a015d063510965cbd0eb43c7c1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "patch": "@@ -3709,7 +3709,7 @@ extern void maybe_retrofit_in_chrg (tree);\n extern void maybe_make_one_only\t(tree);\n extern void grokclassfn\t(tree, tree, enum overload_flags, tree);\n extern tree grok_array_decl (tree, tree);\n-extern tree delete_sanity (tree, tree, int, int);\n+extern tree delete_sanity (tree, tree, bool, int);\n extern tree check_classfn (tree, tree, bool);\n extern void check_member_template (tree);\n extern tree grokfield (tree, tree, tree, tree, tree);"}, {"sha": "d5ee526381c0bf2fc05c1e6c749a0b4e14e603c5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "patch": "@@ -432,18 +432,14 @@ grok_array_decl (tree array_expr, tree index_exp)\n /* Given the cast expression EXP, checking out its validity.   Either return\n    an error_mark_node if there was an unavoidable error, return a cast to\n    void for trying to delete a pointer w/ the value 0, or return the\n-   call to delete.  If DOING_VEC is 1, we handle things differently\n-   for doing an array delete.  If DOING_VEC is 2, they gave us the\n-   array size as an argument to delete.\n+   call to delete.  If DOING_VEC is true, we handle things differently\n+   for doing an array delete.\n    Implements ARM $5.3.4.  This is called from the parser.  */\n \n tree\n-delete_sanity (tree exp, tree size, int doing_vec, int use_global_delete)\n+delete_sanity (tree exp, tree size, bool doing_vec, int use_global_delete)\n {\n   tree t, type;\n-  /* For a regular vector delete (aka, no size argument) we will pass\n-     this down as a NULL_TREE into build_vec_delete.  */\n-  tree maxindex = NULL_TREE;\n \n   if (exp == error_mark_node)\n     return exp;\n@@ -457,6 +453,12 @@ delete_sanity (tree exp, tree size, int doing_vec, int use_global_delete)\n     }\n \n   exp = convert_from_reference (exp);\n+\n+  /* An array can't have been allocated by new, so complain.  */\n+  if (TREE_CODE (exp) == VAR_DECL\n+      && TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+    warning (\"deleting array `%#D'\", exp);\n+\n   t = build_expr_type_conversion (WANT_POINTER, exp, true);\n \n   if (t == NULL_TREE || t == error_mark_node)\n@@ -466,12 +468,6 @@ delete_sanity (tree exp, tree size, int doing_vec, int use_global_delete)\n       return error_mark_node;\n     }\n \n-  if (doing_vec == 2)\n-    {\n-      maxindex = cp_build_binary_op (MINUS_EXPR, size, integer_one_node);\n-      pedwarn (\"anachronistic use of array size in vector delete\");\n-    }\n-\n   type = TREE_TYPE (t);\n \n   /* As of Valley Forge, you can delete a pointer to const.  */\n@@ -490,18 +486,13 @@ delete_sanity (tree exp, tree size, int doing_vec, int use_global_delete)\n       doing_vec = 0;\n     }\n \n-  /* An array can't have been allocated by new, so complain.  */\n-  if (TREE_CODE (t) == ADDR_EXPR\n-      && TREE_CODE (TREE_OPERAND (t, 0)) == VAR_DECL\n-      && TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0))) == ARRAY_TYPE)\n-    warning (\"deleting array `%#D'\", TREE_OPERAND (t, 0));\n-\n   /* Deleting a pointer with the value zero is valid and has no effect.  */\n   if (integer_zerop (t))\n     return build1 (NOP_EXPR, void_type_node, t);\n \n   if (doing_vec)\n-    return build_vec_delete (t, maxindex, sfk_deleting_destructor,\n+    return build_vec_delete (t, /*maxindex=*/NULL_TREE, \n+\t\t\t     sfk_deleting_destructor,\n \t\t\t     use_global_delete);\n   else\n     return build_delete (type, t, sfk_deleting_destructor,"}, {"sha": "1b8c8c8afe46e83450111db5394821d673d9c978", "filename": "gcc/cp/search.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "patch": "@@ -905,6 +905,7 @@ accessible_p (tree type, tree decl)\n {\n   tree binfo;\n   tree t;\n+  tree scope;\n   access_kind access;\n \n   /* Nonzero if it's OK to access DECL if it has protected\n@@ -916,6 +917,11 @@ accessible_p (tree type, tree decl)\n   if (!TYPE_P (context_for_name_lookup (decl)))\n     return 1;\n \n+  /* There is no need to perform access checks inside a thunk.  */\n+  scope = current_scope ();\n+  if (scope && DECL_THUNK_P (scope))\n+    return 1;\n+\n   /* In a template declaration, we cannot be sure whether the\n      particular specialization that is instantiated will be a friend\n      or not.  Therefore, all access checks are deferred until\n@@ -958,7 +964,7 @@ accessible_p (tree type, tree decl)\n \n   /* Now, loop through the classes of which we are a friend.  */\n   if (!protected_ok)\n-    protected_ok = friend_accessible_p (current_scope (), decl, binfo);\n+    protected_ok = friend_accessible_p (scope, decl, binfo);\n \n   /* Standardize the binfo that access_in_type will use.  We don't\n      need to know what path was chosen from this point onwards.  */"}, {"sha": "919d3d75c5b0e01149784292ef41b2cde788713b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "patch": "@@ -1371,14 +1371,9 @@ decay_conversion (tree exp)\n \n       if (TREE_CODE (exp) == VAR_DECL)\n \t{\n-\t  /* ??? This is not really quite correct\n-\t     in that the type of the operand of ADDR_EXPR\n-\t     is not the target type of the type of the ADDR_EXPR itself.\n-\t     Question is, can this lossage be avoided?  */\n-\t  adr = build1 (ADDR_EXPR, ptrtype, exp);\n \t  if (!cxx_mark_addressable (exp))\n \t    return error_mark_node;\n-\t  TREE_CONSTANT (adr) = staticp (exp);\n+\t  adr = build_nop (ptrtype, build_address (exp));\n \t  TREE_SIDE_EFFECTS (adr) = 0;   /* Default would be, same as EXP.  */\n \t  return adr;\n \t}"}, {"sha": "0b1289d24122b5b0127454d418c9446019279b4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "patch": "@@ -1,5 +1,11 @@\n 2004-02-13  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/14122\n+\t* g++.dg/template/array4.C: New test.\n+\t\n+\tPR c++/14108\n+\t* g++.dg/inherit/thunk2.C: New test.\n+\n \tPR c++/14083\n \t* g++.dg/eh/cond2.C: New test.\n "}, {"sha": "094891c7a14c1e9d8553b21a5213f25a5cdd1cbc", "filename": "gcc/testsuite/g++.dg/inherit/thunk2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk2.C?ref=0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/14108\n+\n+class ClassC {\n+public:\n+  ~ClassC();\n+};\n+\n+class ClassA {\n+  virtual ClassC f();\n+};\n+\n+class ClassB : public virtual ClassA {\n+  virtual ClassC f();\n+};\n+\n+ClassC ClassB::f() {\n+  return ClassC();\n+}\n+"}, {"sha": "c72782b10ee32bf92aaeee57de870e07a621c944", "filename": "gcc/testsuite/g++.dg/template/array4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray4.C?ref=0e8c9b28a1a4ea9d542dade50f4f07a74ccfbe64", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/14122\n+\n+extern const char str[];\n+\n+template <const char* P>\n+struct A\n+{\n+  template <const char* R>  void foo();\n+};\n+\n+template class A<str>;"}]}