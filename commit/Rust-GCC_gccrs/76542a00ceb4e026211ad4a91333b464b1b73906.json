{"sha": "76542a00ceb4e026211ad4a91333b464b1b73906", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1NDJhMDBjZWI0ZTAyNjIxMWFkNGE5MTMzM2I0NjRiMWI3MzkwNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-10-13T18:09:59Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-10-13T18:09:59Z"}, "message": "(i960_output_call_insn):  Emit bx instead of b, callx instead of callj.\n\nFrom-SVN: r2430", "tree": {"sha": "dce01a4ed3a1f6a5a7ef73140b13949688a6ab71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dce01a4ed3a1f6a5a7ef73140b13949688a6ab71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76542a00ceb4e026211ad4a91333b464b1b73906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76542a00ceb4e026211ad4a91333b464b1b73906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76542a00ceb4e026211ad4a91333b464b1b73906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76542a00ceb4e026211ad4a91333b464b1b73906/comments", "author": null, "committer": null, "parents": [{"sha": "d4f55d3b0366678c4ad72aaad0cd9cd0fe157cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f55d3b0366678c4ad72aaad0cd9cd0fe157cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f55d3b0366678c4ad72aaad0cd9cd0fe157cbf"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "2880827e12575f770d5152c1e0d0c4db2b3e9a99", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76542a00ceb4e026211ad4a91333b464b1b73906/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76542a00ceb4e026211ad4a91333b464b1b73906/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=76542a00ceb4e026211ad4a91333b464b1b73906", "patch": "@@ -1193,15 +1193,16 @@ char *\n i960_output_call_insn (target, argsize_rtx, insn)\n      register rtx target, argsize_rtx, insn;\n {\n-  int non_indirect;\n   int argsize = INTVAL (argsize_rtx);\n   rtx nexti = next_real_insn (insn);\n   rtx operands[1];\n \n   operands[0] = target;\n \n-  non_indirect = ((GET_CODE (target) == MEM)\n-\t\t  && (GET_CODE (XEXP (target, 0)) == SYMBOL_REF));\n+  /* The code used to assume that calls to SYMBOL_REFs could not be more\n+     than 24 bits away (b vs bx, callj vs callx).  This is not true.  This\n+     feature is now implemented by relaxing in the GNU linker.  It can convert\n+     bx to b if in range, and callx to calls/call/balx/bal as appropriate.  */\n \n   /* Nexti could be zero if the called routine is volatile.  */\n   if (optimize && (*epilogue_string == 0) && argsize == 0 && tail_call_ok \n@@ -1210,12 +1211,11 @@ i960_output_call_insn (target, argsize_rtx, insn)\n       /* Delete following return insn.  */\n       if (nexti && no_labels_between_p (insn, nexti))\n \tdelete_insn (nexti);\n-      output_asm_insn (non_indirect ? \"b\t %0\" : \"bx\t %0\",\n-\t\t       operands);\n+      output_asm_insn (\"bx\t%0\", operands);\n       return \"# notreached\";\n     }\n \n-  output_asm_insn (non_indirect ? \"callj\t%0\" : \"callx\t%0\", operands);\n+  output_asm_insn (\"callx\t%0\", operands);\n   return \"\";\n }\n "}]}