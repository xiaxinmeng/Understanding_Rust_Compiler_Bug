{"sha": "6013fc2567c1d38ac4e1f57b3cd2483b7513aa59", "node_id": "C_kwDOANBUbNoAKDYwMTNmYzI1NjdjMWQzOGFjNGUxZjU3YjNjZDI0ODNiNzUxM2FhNTk", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-31T20:48:56Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-31T20:48:56Z"}, "message": "c++: squash cp_build_qualified_type/_real\n\nThis combines the two differently named versions of the same function\ninto a single function utilizing a default argument.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (cp_build_qualified_type_real): Rename to ...\n\t(cp_build_qualified_type): ... this.  Give its last parameter\n\ta default argument.  Remove macro of the same name.\n\t* decl.cc (grokdeclarator): Adjust accordingly.\n\t* pt.cc (tsubst_aggr_type): Likewise.\n\t(rebuild_function_or_method_type): Likewise.\n\t(tsubst): Likewise.\n\t(maybe_dependent_member_ref): Likewise.\n\t(unify): Likewise.\n\t* tree.cc (cp_build_qualified_type_real): Rename to ...\n\t(cp_build_qualified_type): ... this.  Adjust accordingly.", "tree": {"sha": "3b1c0279abb5002c10896bb93c8ca4e4fffe5f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b1c0279abb5002c10896bb93c8ca4e4fffe5f91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/comments", "author": null, "committer": null, "parents": [{"sha": "a8b5d63503b8cf49de32d241218057409f8731ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b5d63503b8cf49de32d241218057409f8731ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b5d63503b8cf49de32d241218057409f8731ac"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "cc13809f38a6871091c2fbbafdd64ee92136cea2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6013fc2567c1d38ac4e1f57b3cd2483b7513aa59", "patch": "@@ -7877,9 +7877,8 @@ extern tree make_ptrmem_cst\t\t\t(tree, tree);\n extern tree cp_build_type_attribute_variant     (tree, tree);\n extern tree cp_build_reference_type\t\t(tree, bool);\n extern tree move\t\t\t\t(tree);\n-extern tree cp_build_qualified_type_real\t(tree, int, tsubst_flags_t);\n-#define cp_build_qualified_type(TYPE, QUALS) \\\n-  cp_build_qualified_type_real ((TYPE), (QUALS), tf_warning_or_error)\n+extern tree cp_build_qualified_type\t\t(tree, int,\n+\t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error);\n extern bool cv_qualified_p\t\t\t(const_tree);\n extern tree cv_unqualified\t\t\t(tree);\n extern special_function_kind special_function_p (const_tree);"}, {"sha": "e0d397d5a0795316be18b359632066cc065b6f5c", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=6013fc2567c1d38ac4e1f57b3cd2483b7513aa59", "patch": "@@ -12375,7 +12375,7 @@ grokdeclarator (const cp_declarator *declarator,\n     type = DECL_ORIGINAL_TYPE (TYPE_NAME (type));\n \n   type_quals |= cp_type_quals (type);\n-  type = cp_build_qualified_type_real\n+  type = cp_build_qualified_type\n     (type, type_quals, ((((typedef_decl && !DECL_ARTIFICIAL (typedef_decl))\n \t\t\t  || declspecs->decltype_p)\n \t\t\t ? tf_ignore_bad_quals : 0) | tf_warning_or_error));"}, {"sha": "55ff1a191beefb4ce053eb6ea44edf254ccdbd61", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=6013fc2567c1d38ac4e1f57b3cd2483b7513aa59", "patch": "@@ -13740,7 +13740,7 @@ tsubst_aggr_type (tree t,\n \t    {\n \t      r = lookup_template_class (t, argvec, in_decl, context,\n \t\t\t\t\t entering_scope, complain);\n-\t      r = cp_build_qualified_type_real (r, cp_type_quals (t), complain);\n+\t      r = cp_build_qualified_type (r, cp_type_quals (t), complain);\n \t    }\n \n \t  return r;\n@@ -13936,7 +13936,7 @@ rebuild_function_or_method_type (tree t, tree return_type, tree arg_types,\n     {\n       tree r = TREE_TYPE (TREE_VALUE (arg_types));\n       /* Don't pick up extra function qualifiers from the basetype.  */\n-      r = cp_build_qualified_type_real (r, type_memfn_quals (t), complain);\n+      r = cp_build_qualified_type (r, type_memfn_quals (t), complain);\n       if (! MAYBE_CLASS_TYPE_P (r))\n \t{\n \t  /* [temp.deduct]\n@@ -15624,7 +15624,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       if (r)\n \t{\n \t  r = TREE_TYPE (r);\n-\t  r = cp_build_qualified_type_real\n+\t  r = cp_build_qualified_type\n \t    (r, cp_type_quals (t) | cp_type_quals (r),\n \t     complain | tf_ignore_bad_quals);\n \t  return r;\n@@ -15634,8 +15634,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  /* We don't have an instantiation yet, so drop the typedef.  */\n \t  int quals = cp_type_quals (t);\n \t  t = DECL_ORIGINAL_TYPE (decl);\n-\t  t = cp_build_qualified_type_real (t, quals,\n-\t\t\t\t\t    complain | tf_ignore_bad_quals);\n+\t  t = cp_build_qualified_type (t, quals,\n+\t\t\t\t       complain | tf_ignore_bad_quals);\n \t}\n     }\n \n@@ -15782,7 +15782,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n \t\tquals = cp_type_quals (arg) | cp_type_quals (t);\n \n-\t\treturn cp_build_qualified_type_real\n+\t\treturn cp_build_qualified_type\n \t\t  (arg, quals, complain | tf_ignore_bad_quals);\n \t      }\n \t    else if (code == BOUND_TEMPLATE_TEMPLATE_PARM)\n@@ -15847,7 +15847,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\t\t\t   DECL_CONTEXT (arg),\n \t\t\t\t\t    /*entering_scope=*/0,\n \t\t\t\t\t   complain);\n-\t\treturn cp_build_qualified_type_real\n+\t\treturn cp_build_qualified_type\n \t\t  (r, cp_type_quals (t) | cp_type_quals (r), complain);\n \t      }\n \t    else if (code == TEMPLATE_TEMPLATE_PARM)\n@@ -15882,7 +15882,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    if (cp_type_quals (t))\n \t      {\n \t\tr = tsubst (TYPE_MAIN_VARIANT (t), args, complain, in_decl);\n-\t\tr = cp_build_qualified_type_real\n+\t\tr = cp_build_qualified_type\n \t\t  (r, cp_type_quals (t),\n \t\t   complain | (code == TEMPLATE_TYPE_PARM\n \t\t\t       ? tf_ignore_bad_quals : 0));\n@@ -16052,7 +16052,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t       TYPE_REF_IS_RVALUE (t) && TYPE_REF_IS_RVALUE (type));\n \telse\n \t  r = cp_build_reference_type (type, TYPE_REF_IS_RVALUE (t));\n-\tr = cp_build_qualified_type_real (r, cp_type_quals (t), complain);\n+\tr = cp_build_qualified_type (r, cp_type_quals (t), complain);\n \n \tif (r != error_mark_node)\n \t  /* Will this ever be needed for TYPE_..._TO values?  */\n@@ -16098,13 +16098,13 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      = build_memfn_type (type, r, type_memfn_quals (type),\n \t\t\t\t  type_memfn_rqual (type));\n \t    memptr = build_ptrmemfunc_type (build_pointer_type (method_type));\n-\t    return cp_build_qualified_type_real (memptr, cp_type_quals (t),\n-\t\t\t\t\t\t complain);\n+\t    return cp_build_qualified_type (memptr, cp_type_quals (t),\n+\t\t\t\t\t    complain);\n \t  }\n \telse\n-\t  return cp_build_qualified_type_real (build_ptrmem_type (r, type),\n-\t\t\t\t\t       cp_type_quals (t),\n-\t\t\t\t\t       complain);\n+\t  return cp_build_qualified_type (build_ptrmem_type (r, type),\n+\t\t\t\t\t  cp_type_quals (t),\n+\t\t\t\t\t  complain);\n       }\n     case FUNCTION_TYPE:\n     case METHOD_TYPE:\n@@ -16255,7 +16255,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      }\n \t  }\n \n-\treturn cp_build_qualified_type_real\n+\treturn cp_build_qualified_type\n \t  (f, cp_type_quals (f) | cp_type_quals (t), complain);\n       }\n \n@@ -16289,10 +16289,10 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t--c_inhibit_evaluation_warnings;\n \n \ttype = finish_typeof (type);\n-\treturn cp_build_qualified_type_real (type,\n-\t\t\t\t\t     cp_type_quals (t)\n-\t\t\t\t\t     | cp_type_quals (type),\n-\t\t\t\t\t     complain);\n+\treturn cp_build_qualified_type (type,\n+\t\t\t\t\tcp_type_quals (t)\n+\t\t\t\t\t| cp_type_quals (type),\n+\t\t\t\t\tcomplain);\n       }\n \n     case DECLTYPE_TYPE:\n@@ -16328,10 +16328,10 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      id = false;\n \t    type = finish_decltype_type (type, id, complain);\n \t  }\n-\treturn cp_build_qualified_type_real (type,\n-\t\t\t\t\t     cp_type_quals (t)\n-\t\t\t\t\t     | cp_type_quals (type),\n-\t\t\t\t\t     complain | tf_ignore_bad_quals);\n+\treturn cp_build_qualified_type (type,\n+\t\t\t\t\tcp_type_quals (t)\n+\t\t\t\t\t| cp_type_quals (type),\n+\t\t\t\t\tcomplain | tf_ignore_bad_quals);\n       }\n \n     case UNDERLYING_TYPE:\n@@ -16831,8 +16831,8 @@ maybe_dependent_member_ref (tree t, tree args, tsubst_flags_t complain,\n \tdecl = maybe_dependent_member_ref (decl, args, complain, in_decl);\n       if (!decl)\n \treturn NULL_TREE;\n-      return cp_build_qualified_type_real (TREE_TYPE (decl), cp_type_quals (t),\n-\t\t\t\t\t   complain);\n+      return cp_build_qualified_type (TREE_TYPE (decl), cp_type_quals (t),\n+\t\t\t\t      complain);\n     }\n \n   tree name = DECL_NAME (t);\n@@ -24204,7 +24204,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \n \t  /* Consider the case where ARG is `const volatile int' and\n \t     PARM is `const T'.  Then, T should be `volatile int'.  */\n-\t  arg = cp_build_qualified_type_real\n+\t  arg = cp_build_qualified_type\n \t    (arg, cp_type_quals (arg) & ~cp_type_quals (parm), tf_none);\n \t  if (arg == error_mark_node)\n \t    return unify_invalid (explain_p);"}, {"sha": "2b9cb7e1c7b4b14e097b9d390bba7ef4867cdea1", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6013fc2567c1d38ac4e1f57b3cd2483b7513aa59/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=6013fc2567c1d38ac4e1f57b3cd2483b7513aa59", "patch": "@@ -1359,9 +1359,8 @@ c_build_qualified_type (tree type, int type_quals, tree /* orig_qual_type */,\n    in a similar manner for restricting non-pointer types.  */\n \n tree\n-cp_build_qualified_type_real (tree type,\n-\t\t\t      int type_quals,\n-\t\t\t      tsubst_flags_t complain)\n+cp_build_qualified_type (tree type, int type_quals,\n+\t\t\t tsubst_flags_t complain /* = tf_warning_or_error */)\n {\n   tree result;\n   int bad_quals = TYPE_UNQUALIFIED;\n@@ -1378,9 +1377,7 @@ cp_build_qualified_type_real (tree type,\n \t type.  Obtain the appropriately qualified element type.  */\n       tree t;\n       tree element_type\n-\t= cp_build_qualified_type_real (TREE_TYPE (type),\n-\t\t\t\t\ttype_quals,\n-\t\t\t\t\tcomplain);\n+\t= cp_build_qualified_type (TREE_TYPE (type), type_quals, complain);\n \n       if (element_type == error_mark_node)\n \treturn error_mark_node;\n@@ -1431,7 +1428,7 @@ cp_build_qualified_type_real (tree type,\n     {\n       tree t = PACK_EXPANSION_PATTERN (type);\n \n-      t = cp_build_qualified_type_real (t, type_quals, complain);\n+      t = cp_build_qualified_type (t, type_quals, complain);\n       return make_pack_expansion (t, complain);\n     }\n "}]}