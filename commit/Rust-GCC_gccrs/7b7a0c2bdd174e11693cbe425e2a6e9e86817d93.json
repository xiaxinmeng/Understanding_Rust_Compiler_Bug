{"sha": "7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I3YTBjMmJkZDE3NGUxMTY5M2NiZTQyNWUyYTZlOWU4NjgxN2Q5Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-07T16:22:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-07T16:22:28Z"}, "message": "[multiple changes]\n\n2011-11-07  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.adb (Unique_Entity): For a parameter on a subprogram\n\tbody that has a corresponding parameter on the subprogram\n\tdeclaration, define the unique entity as being the declaration\n\tone.\n\n2011-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Return_Type): In Ada 2012 mode, if the\n\treturn type of a function is the class-wide type of an incomplete\n\ttype T, T can be a Taft-amendment type and does not have to be\n\tcompleted in the current private part.\n\n2011-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* aspects.ads (Inherited_Aspect): Map that indicates type aspects\n\tthat are inherited by default, and apply to the class-wide type\n\tas well.\n\t* aspects.adb (Find_Aspect): If the entity is class-wide and the\n\taspect is inherited, use the aspect of the specific type.\n\nFrom-SVN: r181092", "tree": {"sha": "da922a9e993691859131da7d8676ce000c6209da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da922a9e993691859131da7d8676ce000c6209da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/comments", "author": null, "committer": null, "parents": [{"sha": "cc570be69335a3d3c36c14eabc99bf0049e7f9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc570be69335a3d3c36c14eabc99bf0049e7f9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc570be69335a3d3c36c14eabc99bf0049e7f9be"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "f0f5bf95394619045765027fc198bcdee247cc3c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "patch": "@@ -1,3 +1,25 @@\n+2011-11-07  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Unique_Entity): For a parameter on a subprogram\n+\tbody that has a corresponding parameter on the subprogram\n+\tdeclaration, define the unique entity as being the declaration\n+\tone.\n+\n+2011-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Return_Type): In Ada 2012 mode, if the\n+\treturn type of a function is the class-wide type of an incomplete\n+\ttype T, T can be a Taft-amendment type and does not have to be\n+\tcompleted in the current private part.\n+\n+2011-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* aspects.ads (Inherited_Aspect): Map that indicates type aspects\n+\tthat are inherited by default, and apply to the class-wide type\n+\tas well.\n+\t* aspects.adb (Find_Aspect): If the entity is class-wide and the\n+\taspect is inherited, use the aspect of the specific type.\n+\n 2011-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_alfa.adb: Remove with and use clause for"}, {"sha": "9b707734b764a5209a466165e58212f6db223490", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "patch": "@@ -127,7 +127,19 @@ package body Aspects is\n       Ritem : Node_Id;\n \n    begin\n-      Ritem := First_Rep_Item (Ent);\n+\n+      --  If the aspect is an inherited one and the entity is a class-wide\n+      --  type, use the aspect of the specific type.\n+\n+      if Is_Type (Ent)\n+        and then Is_Class_Wide_Type (Ent)\n+        and then Inherited_Aspect (A)\n+      then\n+         Ritem := First_Rep_Item (Etype (Ent));\n+      else\n+         Ritem := First_Rep_Item (Ent);\n+      end if;\n+\n       while Present (Ritem) loop\n          if Nkind (Ritem) = N_Aspect_Specification\n            and then Get_Aspect_Id (Chars (Identifier (Ritem))) = A"}, {"sha": "a281d9c69eefb2b5b498af54f4d7750117a6b4df", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "patch": "@@ -176,6 +176,18 @@ package Aspects is\n                              (Aspect_Test_Case => False,\n                               others           => True);\n \n+   --  The following array indicates type aspects that are inherited and apply\n+   --  to the class-wide type as well.\n+\n+   Inherited_Aspect : constant array (Aspect_Id) of Boolean :=\n+     (Aspect_Constant_Indexing    => True,\n+      Aspect_Default_Iterator     => True,\n+      Aspect_Implicit_Dereference => True,\n+      Aspect_Iterator_Element     => True,\n+      Aspect_Remote_Types         => True,\n+      Aspect_Variable_Indexing    => True,\n+      others                      => False);\n+\n    --  The following subtype defines aspects corresponding to library unit\n    --  pragmas, these can only validly appear as aspects for library units,\n    --  and result in a corresponding pragma being inserted immediately after"}, {"sha": "a9f84d34faa1282f43263b93c3f75577a6355a9a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "patch": "@@ -1641,10 +1641,13 @@ package body Sem_Ch6 is\n \n                   --  The type must be completed in the current package. This\n                   --  is checked at the end of the package declaraton, when\n-                  --  Taft amemdment types are identified.\n+                  --  Taft-amendment types are identified. If the return type\n+                  --  is class-wide, there is no required check, the type can\n+                  --  be a bona fide TAT.\n \n                   if Ekind (Scope (Current_Scope)) = E_Package\n                     and then In_Private_Part (Scope (Current_Scope))\n+                    and then not Is_Class_Wide_Type (Typ)\n                   then\n                      Append_Elmt (Designator, Private_Dependents (Typ));\n                   end if;"}, {"sha": "6fbe399526693e780772ee32055e29f17829f81c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7a0c2bdd174e11693cbe425e2a6e9e86817d93/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7b7a0c2bdd174e11693cbe425e2a6e9e86817d93", "patch": "@@ -12835,6 +12835,11 @@ package body Sem_Util is\n                U := Corresponding_Spec (P);\n             end if;\n \n+         when Formal_Kind =>\n+            if Present (Spec_Entity (E)) then\n+               U := Spec_Entity (E);\n+            end if;\n+\n          when others =>\n             null;\n       end case;"}]}