{"sha": "6bc31c2c7c038e328cea88f67bd93415054a3db6", "node_id": "C_kwDOANBUbNoAKDZiYzMxYzJjN2MwMzhlMzI4Y2VhODhmNjdiZDkzNDE1MDU0YTNkYjY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-04T13:48:48Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-26T19:10:16Z"}, "message": "RISC-V: Add testcases for IMM (0 ~ 31) AVL\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-9.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-9.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/imm_switch-9.c: New test.", "tree": {"sha": "eea3962052be1f86e593339d97ec748776eff567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eea3962052be1f86e593339d97ec748776eff567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc31c2c7c038e328cea88f67bd93415054a3db6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc31c2c7c038e328cea88f67bd93415054a3db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc31c2c7c038e328cea88f67bd93415054a3db6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc31c2c7c038e328cea88f67bd93415054a3db6/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f673c5ee287d73262ad9c1d59ca4d6db3809eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f673c5ee287d73262ad9c1d59ca4d6db3809eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f673c5ee287d73262ad9c1d59ca4d6db3809eef"}], "stats": {"total": 2146, "additions": 2146, "deletions": 0}, "files": [{"sha": "cd4ee7dd0d355fe4dff2b31681a1ae93596def46", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-1.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  if (n > cond) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 600, 5);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 600, 5);\n+    __riscv_vse8_v_i8mf8 (out + 600, v2, 5);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 700, 5);\n+    __riscv_vse8_v_i8mf8 (out + 700, v, 5);\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 900 + i, 5);\n+    __riscv_vse8_v_i8mf8 (out + 900 + i, v, 5);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "cdb2c8f948eaf5ecb208cdaa8e109ce3552b8080", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-10.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-10.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, \n+size_t vl, size_t m, size_t n, size_t a, size_t b) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200 + j, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v0, 4);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300 + j, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v0, 4);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < vl; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            for (size_t i_a = 0; i_a < a; i_a++){\n+              for (size_t i_b = 0; i_b < b; i_b++){\n+                vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j + i_a + i_b, 4);\n+                vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j + i_a + i_b, 4);\n+                __riscv_vse8_v_i8mf8 (out + i + 600 + j + k + i_a + i_b, v1, 4);\n+              }\n+            }\n+          }\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 700, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 800, v0, 4);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ba2d57ea5700e1e4f05892ed0e2a309e616208fe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-11.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-11.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, \n+size_t vl, size_t m, size_t n, size_t a, size_t b) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            for (size_t i_a = 0; i_a < a; i_a++){\n+              for (size_t i_b = 0; i_b < b; i_b++){\n+                vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j + i_a + i_b, 4);\n+                vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j + i_a + i_b, 4);\n+                __riscv_vse8_v_i8mf8 (out + i + 600 + j + k + i_a + i_b, v1, 4);\n+              }\n+            }\n+          }\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300 + j, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v0, 4);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < vl; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200 + j, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v0, 4);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 700, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 800, v0, 4);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ced6cb8c408fbeb5b804b85f3367342025de641f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-12.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-12.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, \n+size_t vl, size_t m, size_t n, size_t a, size_t b) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            for (size_t i_a = 0; i_a < a; i_a++){\n+              for (size_t i_b = 0; i_b < b; i_b++){\n+                vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j + i_a + i_b, 4);\n+                vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j + i_a + i_b, 4);\n+                __riscv_vse8_v_i8mf8 (out + i + 600 + j + k + i_a + i_b, v1, 4);\n+              }\n+            }\n+          }\n+        } else {\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "fd75172a89a9877d712f504cc9780f1c14eef750", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-13.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-13.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, \n+size_t vl, size_t m, size_t n, size_t a, size_t b) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            for (size_t i_a = 0; i_a < a; i_a++){\n+              for (size_t i_b = 0; i_b < b; i_b++){\n+                vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j + i_a + i_b, 4);\n+                vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j + i_a + i_b, 4);\n+                __riscv_vse8_v_i8mf8 (out + i + 600 + j + k + i_a + i_b, v1, 4);\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "76ec7ae14ec7d19f7fa8413d76d1d1191f2cd2ee", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n+{\n+  for (int i = 0 ; i < n2; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 800 + i, 9);\n+    __riscv_vse8_v_i8mf8 (out + 800 + i, v, 9);\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 900 + i, 5);\n+    __riscv_vse8_v_i8mf8 (out + 900 + i, v, 5);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*9,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "20a1cd27c43135392c171c013699641186e8d3c9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t vl, size_t m) {\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, 4);\n+      vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 100, 4);\n+      __riscv_vse8_v_i8mf8 (out + i, v1, 4);\n+    } else {\n+      vint16mf4_t v0 = __riscv_vle16_v_i16mf4(base + i, 4);\n+      vint16mf4_t v1 = __riscv_vle16_v_i16mf4_mu(mask, v0, base + i + 100, 4);\n+      __riscv_vse16_v_i16mf4 (out + i, v1, 4);\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "58aecb0a21983dbbc116d747ac3d696124096a21", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t vl, size_t m, size_t n) {\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+\n+  for (size_t i = 0; i < m; i++) {\n+    for (size_t j = 0; j < n; j++){\n+      if ((i + j) % 2 == 0) {\n+        vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j, 4);\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + j + 100, 4);\n+        __riscv_vse8_v_i8mf8 (out + i + j, v1, 4);\n+      } else {\n+        vint16mf4_t v0 = __riscv_vle16_v_i16mf4(base + i + j, 4);\n+        vint16mf4_t v1 = __riscv_vle16_v_i16mf4_mu(mask, v0, base + i + j + 100, 4);\n+        __riscv_vse16_v_i16mf4 (out + i + j, v1, 4);\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "21be9c08250ba29c62d45b9c6a3705330dfd5a27", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-5.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-5.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t vl, size_t m, size_t n) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 700, 4);\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + j + 700, 4);\n+        __riscv_vse8_v_i8mf8 (out + i + j + 700, v1, 4);\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 500, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 500, v0, 4);\n+        } else {\n+          vint16mf4_t v0 = __riscv_vle16_v_i16mf4(base + i + j + 600, 4);\n+          __riscv_vse16_v_i16mf4 (out + i + j + 600, v0, 4);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < n; j++){\n+        vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 200, 4);\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + j + 300, 4);\n+        __riscv_vse8_v_i8mf8 (out + i + j + 400, v1, 4);\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "92d830ce63850f578c34b58bf804427030acb348", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-6.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t vl, size_t m, size_t n) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 500, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 500, v0, 4);\n+        } else {\n+          vint16mf4_t v0 = __riscv_vle16_v_i16mf4(base + i + j + 600, 4);\n+          __riscv_vse16_v_i16mf4 (out + i + j + 600, v0, 4);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < n; j++){\n+        vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + j + 200, 4);\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + j + 300, 4);\n+        __riscv_vse8_v_i8mf8 (out + i + j + 400, v1, 4);\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "550c3a38eb100d0023d90a19fcb1ea7688def061", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-7.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t vl, size_t m, size_t n) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200, 4);\n+          vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 200, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v1, 4);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300, 4);\n+          vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 300, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v1, 4);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < n; j++){\n+        vint8mf8_t v1 = __riscv_vle8_v_i8mf8(base + i + j + 300, 4);\n+        __riscv_vse8_v_i8mf8 (out + i + j + 400, v1, 4);\n+      }\n+    }\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "667effa8ba51abb3db9b46b5b355083e226bd244", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-8.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-8.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t vl, size_t m, size_t n) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200 + j, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v0, 4);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300 + j, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v0, 4);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < vl; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j, 4);\n+            vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 600 + k + j, 4);\n+            __riscv_vse8_v_i8mf8 (out + i + 600, v1, 4);\n+          }\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 700, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 800, v0, 4);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3b486df4fe54a3702c4e32c7ae032d1be291c582", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-9.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-9.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(void *base, void *out, void *mask_in, size_t vl, size_t m, size_t n) {\n+\n+  for (size_t i = 0; i < m; i++) {\n+    if (i % 2 == 0) {\n+      for (size_t j = 0; j < n; j++){\n+        if (j % 2 == 0) {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 200 + j, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 200, v0, 4);\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 300 + j, 4);\n+          vint8mf8_t v1 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 300 + j, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 300, v1, 4);\n+        }\n+      }\n+    } else {\n+      for (size_t j = 0; j < vl; j++){\n+        if (j % 2 == 0) {\n+          for (size_t k = 0; k < n; k++) {\n+            vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 500 + k + j, 4);\n+            __riscv_vse8_v_i8mf8 (out + i + 600, v0, 4);\n+          }\n+        } else {\n+          vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i + 700, 4);\n+          __riscv_vse8_v_i8mf8 (out + i + 800, v0, 4);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "331ebab6e3bc9aa8b12079b1efb1c6f3708f7b67", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-1.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, size_t n, size_t cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i != cond) {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 100, 17);\n+        __riscv_vse8_v_i8mf8 (out + i + 100, v, 17);\n+      } else {\n+        vint32m1_t v = __riscv_vle32_v_i32m1 (in + i + 200, 4);\n+        __riscv_vse32_v_i32m1 (out + i + 200, v, 4);\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3ed73ea32b6340b863f478a629fd832c27531bfe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-2.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, size_t n, size_t cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i == cond) {\n+        vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 100, 17);\n+        __riscv_vse8_v_i8mf8 (out + i + 100, v, 17);\n+      } else {\n+        vint32m1_t v = __riscv_vle32_v_i32m1 (in + i + 200, 4);\n+        __riscv_vse32_v_i32m1 (out + i + 200, v, 4);\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1f7c0f036a241a59085a4bd5a5132285b43b1dec", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-3.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  if (n > cond) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 600, 5);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 600, 5);\n+    __riscv_vse8_v_i8mf8 (out + 600, v2, 5);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 700, 5);\n+    __riscv_vse8_v_i8mf8 (out + 700, v, 5);\n+  }\n+\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*) (in + 900 + i);\n+    *(vint8mf8_t*) (out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "fdfcb07a63da95fe061cb43278c3bb50b348891b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-4.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (n > cond) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 600, 5);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 600, 5);\n+    __riscv_vse8_v_i8mf8 (out + 600, v2, 5);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 700, 5);\n+    __riscv_vse8_v_i8mf8 (out + 700, v, 5);\n+  }\n+\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*) (in + 900 + i);\n+    *(vint8mf8_t*) (out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n; i++) {\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in + 1000 + i, 19);\n+    __riscv_vse32_v_i32m1 (out + 1000 + i, v, 19);\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++) {\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in + 2000 + i, 8);\n+    __riscv_vse32_v_i32m1 (out + 2000 + i, v, 8);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 5 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "3e109c0c86a52c7db2e5b42304a3f3fcc746180c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-5.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,45 @@\n+#include \"riscv_vector.h\"\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (n > cond) {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 600, 5);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + 600, 5);\n+    __riscv_vse8_v_i8mf8 (out + 600, v2, 5);\n+  } else {\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + 700, 5);\n+    __riscv_vse8_v_i8mf8 (out + 700, v, 5);\n+  }\n+\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*) (in + 900 + i);\n+    *(vint8mf8_t*) (out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n; i++) {\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in + 1000 + i, 19);\n+    __riscv_vse32_v_i32m1 (out + 1000 + i, v, 19);\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++) {\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in + 2000 + i, 8);\n+    __riscv_vse32_v_i32m1 (out + 2000 + i, v, 8);\n+  }\n+\n+  for (int i = 0 ; i < n * n * n; i++) {\n+    vint16mf2_t v = __riscv_vle16_v_i16mf2 (in + 3000 + i, 8);\n+    __riscv_vse16_v_i16mf2 (out + 3000 + i, v, 8);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 5 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "618adb78577c3a992ab48000c4a62db319d2712f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-1.c", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-1.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,195 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint8mf8_t v = __riscv_vle8_v_u8mf8 (in + i + j, 17);\n+          __riscv_vse8_v_u8mf8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f3 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf4_t v = __riscv_vle8_v_i8mf4 (in + i + j, 17);\n+          __riscv_vse8_v_i8mf4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f4 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint8mf4_t v = __riscv_vle8_v_u8mf4 (in + i + j, 17);\n+          __riscv_vse8_v_u8mf4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f5 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf2_t v = __riscv_vle8_v_i8mf2 (in + i + j, 17);\n+          __riscv_vse8_v_i8mf2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f6 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint8mf2_t v = __riscv_vle8_v_u8mf2 (in + i + j, 17);\n+          __riscv_vse8_v_u8mf2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f7 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8m1_t v = __riscv_vle8_v_i8m1 (in + i + j, 17);\n+          __riscv_vse8_v_i8m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f8 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint8m1_t v = __riscv_vle8_v_u8m1 (in + i + j, 17);\n+          __riscv_vse8_v_u8m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f9 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8m2_t v = __riscv_vle8_v_i8m2 (in + i + j, 17);\n+          __riscv_vse8_v_i8m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f10 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint8m2_t v = __riscv_vle8_v_u8m2 (in + i + j, 17);\n+          __riscv_vse8_v_u8m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f11 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8m4_t v = __riscv_vle8_v_i8m4 (in + i + j, 17);\n+          __riscv_vse8_v_i8m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f12 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint8m4_t v = __riscv_vle8_v_u8m4 (in + i + j, 17);\n+          __riscv_vse8_v_u8m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f13 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8m8_t v = __riscv_vle8_v_i8m8 (in + i + j, 17);\n+          __riscv_vse8_v_i8m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f14 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint8m8_t v = __riscv_vle8_v_u8m8 (in + i + j, 17);\n+          __riscv_vse8_v_u8m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 14 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c9d4950e7d8d9d0701a2f9ee013ee60601fe14fe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-10.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-10.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int l, int n, int m)\n+{\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, 17);\n+          vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in + i + j + 16, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 16, v2, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, void * restrict mask_in, int l, int n, int m)\n+{\n+  vbool8_t mask = *(vbool8_t*)mask_in;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m8_t v = __riscv_vle64_v_f64m8 (in + i + j, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j, v, 17);\n+          vfloat64m8_t v2 = __riscv_vle64_v_f64m8_m (mask, in + i + j + 16, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j + 16, v2, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "2e8647ed4bffff407ca009c92c872854afffe6a1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-11.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-11.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int l, int n, int m)\n+{\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, 17);\n+          vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in + i + j + 16, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 16, v2, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, void * restrict mask_in, int l, int n, int m)\n+{\n+  vbool8_t mask = *(vbool8_t*)mask_in;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m8_t v = __riscv_vle64_v_f64m8 (in + i + j, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j, v, 17);\n+          vfloat64m8_t v2 = __riscv_vle64_v_f64m8_tumu (mask, v, in + i + j + 16, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j + 16, v2, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c1af8fcf637474ec9d98aac57d09f53833bd418e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-12.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-12.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v = __riscv_vle8_v_i8mf8(in + 100, 4);\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8(in + 1, 4);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4(in + 2, 4);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2(in + 3, 4);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2(in + 4, 4);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 4);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 4);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 4);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 4);\n+  \n+  for (int i = 0; i < n; i++)\n+    {\n+      v = __riscv_vle8_v_i8mf8_tu(v, in + i + 5, 4);\n+      __riscv_vse8_v_i8mf8 (out + i + 5, v, 4);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "9abcc0f6343482ab3cf58ce9145ef676c8601877", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-13.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-13.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n+{\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8(in + 1, 4);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4(in + 2, 4);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2(in + 3, 4);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2(in + 4, 4);\n+  vint16mf4_t v = __riscv_vle16_v_i16mf4(in + 100, 4);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 4);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 4);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 4);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 4);\n+  \n+  for (int i = 0; i < n; i++)\n+    {\n+      v = __riscv_vle16_v_i16mf4_tum(mask, v, in + i + 5, 4);\n+      __riscv_vse16_v_i16mf4_m (mask, out + i + 5, v, 4);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c9171247420d1d370d37dd1158efc2bf71ab1886", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-14.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-14.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n+{\n+  vbool32_t mask = *(vbool32_t*)mask_in;\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8(in + 1, 4);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4(in + 2, 4);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2(in + 3, 4);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2(in + 4, 4);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 4);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 4);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 4);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 4);\n+\n+  vint16mf2_t v = __riscv_vle16_v_i16mf2(in + 100, 4);\n+  \n+  for (int i = 0; i < n; i++)\n+    {\n+      v = __riscv_vle16_v_i16mf2_tumu(mask, v, in + i + 5, 4);\n+      __riscv_vse16_v_i16mf2_m (mask, out + i + 5, v, 4);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "6256e2e59e6bae590783ce521fe988095ddd38a0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-15.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-15.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n+{\n+  vbool32_t mask = *(vbool32_t*)mask_in;\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8(in + 1, 4);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4(in + 2, 4);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2(in + 3, 4);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2(in + 4, 4);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 4);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 4);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 4);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 4);\n+\n+  vint16mf2_t v = __riscv_vle16_v_i16mf2(in + 100, 4);\n+  \n+  for (int i = 0; i < n; i++)\n+    {\n+      v = __riscv_vle16_v_i16mf2_mu(mask, v, in + i + 5, 4);\n+      __riscv_vse16_v_i16mf2_m (mask, out + i + 5, v, 4);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "b936d72704e2784dd19eb651d5bfb4c98caa5f06", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-16.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-16.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n+{\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8(in + 1, 4);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4(in + 2, 4);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2(in + 3, 4);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2(in + 4, 4);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 4);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 4);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 4);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 4);\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v = __riscv_vle16_v_u16mf4_m(mask, in + i + 5, 4);\n+      __riscv_vse16_v_u16mf4_m (mask, out + i + 5, v, 4);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\),\\s*v0.t} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a8c19a24fe58cee7702f245d102b21e097c96ed9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-17.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-17.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      vint8mf2_t v = __riscv_vle8_v_i8mf2 (in + i*10 + j*10, 8);\n+      __riscv_vse8_v_i8mf2 (out + i*10 + j*10, v, 8);\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*8,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "32f33948d7a1c0f9afe79a8a9418856ab65d5301", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-2.c", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-2.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,168 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f3 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint16mf4_t v = __riscv_vle16_v_i16mf4 (in + i + j, 17);\n+          __riscv_vse16_v_i16mf4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f4 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint16mf4_t v = __riscv_vle16_v_u16mf4 (in + i + j, 17);\n+          __riscv_vse16_v_u16mf4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f5 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint16mf2_t v = __riscv_vle16_v_i16mf2 (in + i + j, 17);\n+          __riscv_vse16_v_i16mf2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f6 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint16mf2_t v = __riscv_vle16_v_u16mf2 (in + i + j, 17);\n+          __riscv_vse16_v_u16mf2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f7 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint16m1_t v = __riscv_vle16_v_i16m1 (in + i + j, 17);\n+          __riscv_vse16_v_i16m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f8 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint16m1_t v = __riscv_vle16_v_u16m1 (in + i + j, 17);\n+          __riscv_vse16_v_u16m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f9 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint16m2_t v = __riscv_vle16_v_i16m2 (in + i + j, 17);\n+          __riscv_vse16_v_i16m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f10 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint16m2_t v = __riscv_vle16_v_u16m2 (in + i + j, 17);\n+          __riscv_vse16_v_u16m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f11 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint16m4_t v = __riscv_vle16_v_i16m4 (in + i + j, 17);\n+          __riscv_vse16_v_i16m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f12 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint16m4_t v = __riscv_vle16_v_u16m4 (in + i + j, 17);\n+          __riscv_vse16_v_u16m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f13 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint16m8_t v = __riscv_vle16_v_i16m8 (in + i + j, 17);\n+          __riscv_vse16_v_i16m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f14 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint16m8_t v = __riscv_vle16_v_u16m8 (in + i + j, 17);\n+          __riscv_vse16_v_u16m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 12 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "4d08475271e31f311f62afa5ba7678a2fa7ec70c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-3.c", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-3.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,141 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f5 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint32mf2_t v = __riscv_vle32_v_i32mf2 (in + i + j, 17);\n+          __riscv_vse32_v_i32mf2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f6 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint32mf2_t v = __riscv_vle32_v_u32mf2 (in + i + j, 17);\n+          __riscv_vse32_v_u32mf2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f7 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint32m1_t v = __riscv_vle32_v_i32m1 (in + i + j, 17);\n+          __riscv_vse32_v_i32m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f8 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint32m1_t v = __riscv_vle32_v_u32m1 (in + i + j, 17);\n+          __riscv_vse32_v_u32m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f9 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint32m2_t v = __riscv_vle32_v_i32m2 (in + i + j, 17);\n+          __riscv_vse32_v_i32m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f10 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint32m2_t v = __riscv_vle32_v_u32m2 (in + i + j, 17);\n+          __riscv_vse32_v_u32m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f11 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint32m4_t v = __riscv_vle32_v_i32m4 (in + i + j, 17);\n+          __riscv_vse32_v_i32m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f12 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint32m4_t v = __riscv_vle32_v_u32m4 (in + i + j, 17);\n+          __riscv_vse32_v_u32m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f13 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint32m8_t v = __riscv_vle32_v_i32m8 (in + i + j, 17);\n+          __riscv_vse32_v_i32m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f14 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint32m8_t v = __riscv_vle32_v_u32m8 (in + i + j, 17);\n+          __riscv_vse32_v_u32m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 10 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "976d38958d72946697a3b056ab031478ad3bb7b2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-4.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-4.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f5 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat32mf2_t v = __riscv_vle32_v_f32mf2 (in + i + j, 17);\n+          __riscv_vse32_v_f32mf2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f7 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat32m1_t v = __riscv_vle32_v_f32m1 (in + i + j, 17);\n+          __riscv_vse32_v_f32m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f9 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat32m2_t v = __riscv_vle32_v_f32m2 (in + i + j, 17);\n+          __riscv_vse32_v_f32m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f11 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat32m4_t v = __riscv_vle32_v_f32m4 (in + i + j, 17);\n+          __riscv_vse32_v_f32m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f13 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat32m8_t v = __riscv_vle32_v_f32m8 (in + i + j, 17);\n+          __riscv_vse32_v_f32m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "defeb86d7741f749aa6ab28906863a38847fae4d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-5.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-5.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,114 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f7 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + j, 17);\n+          __riscv_vse64_v_i64m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f8 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint64m1_t v = __riscv_vle64_v_u64m1 (in + i + j, 17);\n+          __riscv_vse64_v_u64m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f9 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint64m2_t v = __riscv_vle64_v_i64m2 (in + i + j, 17);\n+          __riscv_vse64_v_i64m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f10 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint64m2_t v = __riscv_vle64_v_u64m2 (in + i + j, 17);\n+          __riscv_vse64_v_u64m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f11 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint64m4_t v = __riscv_vle64_v_i64m4 (in + i + j, 17);\n+          __riscv_vse64_v_i64m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f12 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint64m4_t v = __riscv_vle64_v_u64m4 (in + i + j, 17);\n+          __riscv_vse64_v_u64m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f13 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint64m8_t v = __riscv_vle64_v_i64m8 (in + i + j, 17);\n+          __riscv_vse64_v_i64m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f14 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vuint64m8_t v = __riscv_vle64_v_u64m8 (in + i + j, 17);\n+          __riscv_vse64_v_u64m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 8 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1ae8a034ea740f88c81bdaf1f53d9ab85e1f451c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-6.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-6.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+\n+void f8 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m1_t v = __riscv_vle64_v_f64m1 (in + i + j, 17);\n+          __riscv_vse64_v_f64m1 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f9 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m2_t v = __riscv_vle64_v_f64m2 (in + i + j, 17);\n+          __riscv_vse64_v_f64m2 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f11 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m4_t v = __riscv_vle64_v_f64m4 (in + i + j, 17);\n+          __riscv_vse64_v_f64m4 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f13 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m8_t v = __riscv_vle64_v_f64m8 (in + i + j, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j, v, 17);\n+        }\n+    }\n+  }\n+}\n+\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 4 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ac943abeaf98396b782e6c3764e2166b2f44610f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-7.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-7.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, 17);\n+          vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + j + 16, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 16, v2, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, int l, int n, int m)\n+{\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m8_t v = __riscv_vle64_v_f64m8 (in + i + j, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j, v, 17);\n+          vfloat64m8_t v2 = __riscv_vle64_v_f64m8_tu (v, in + i + j + 16, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j + 16, v2, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "731930ef9e6ed7ec21881c7c2fe071c0b1f7cc96", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-8.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-8.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int l, int n, int m)\n+{\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, 17);\n+          vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + j + 16, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 16, v2, 17);\n+          vint8mf8_t v3 = __riscv_vle8_v_i8mf8_mu (mask, v2, in + i + j + 16, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 16, v3, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, void * restrict mask_in, int l, int n, int m)\n+{\n+  vbool8_t mask = *(vbool8_t*)mask_in;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m8_t v = __riscv_vle64_v_f64m8 (in + i + j, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j, v, 17);\n+          vfloat64m8_t v2 = __riscv_vle64_v_f64m8_tu (v, in + i + j + 16, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j + 16, v2, 17);\n+          vfloat64m8_t v3 = __riscv_vle64_v_f64m8_mu (mask, v2, in + i + j + 16, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j + 16, v3, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "2dfca074bf4d6f3c981edeedf1066bb804943b55", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_loop_invariant-9.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_loop_invariant-9.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int l, int n, int m)\n+{\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, 17);\n+          vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tum (mask, v, in + i + j + 16, 17);\n+          __riscv_vse8_v_i8mf8 (out + i + j + 16, v2, 17);\n+        }\n+    }\n+  }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, void * restrict mask_in, int l, int n, int m)\n+{\n+  vbool8_t mask = *(vbool8_t*)mask_in;\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vfloat64m8_t v = __riscv_vle64_v_f64m8 (in + i + j, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j, v, 17);\n+          vfloat64m8_t v2 = __riscv_vle64_v_f64m8_tum (mask, v, in + i + j + 16, 17);\n+          __riscv_vse64_v_f64m8 (out + i + j + 16, v2, 17);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b084eea5403487ea5d39139f3fe59b5b5f086d62", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-1.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vfloat32mf2_t v = __riscv_vle32_v_f32mf2 (in + 10000, 19);\n+  __riscv_vse32_v_f32mf2 (out + 10000, v, 19);\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v1 = __riscv_vle16_v_i16mf2 (in + i + 1, 19);\n+      __riscv_vse16_v_i16mf2 (out + i + 1, v1, 19);\n+      asm volatile (\"\":::\"memory\");\n+      vint32mf2_t v2 = __riscv_vle32_v_i32mf2 (in + i + 2, 19);\n+      __riscv_vse32_v_i32mf2 (out + i + 2, v2, 19);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*19,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "2e58f088d6b1cda64abd4aa217ffcc879e6fcf48", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-2.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int n)\n+{\n+  vfloat32mf2_t v = __riscv_vle32_v_f32mf2 (in + 10000, 19);\n+  __riscv_vse32_v_f32mf2 (out + 10000, v, 19);\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v1 = __riscv_vle16_v_i16mf2 (in + i + 1, 19);\n+      __riscv_vse16_v_i16mf2 (out + i + 1, v1, 19);\n+      vint32mf2_t v2 = __riscv_vle32_v_i32mf2 (in + i + 2, 19);\n+      __riscv_vse32_v_i32mf2 (out + i + 2, v2, 19);\n+      vbool64_t mask = *(vbool64_t*)mask_in;\n+      vint32mf2_t v3 = __riscv_vle32_v_i32mf2_tumu (mask, v2, in + i + 200, 13);\n+      *(vint32mf2_t*)(out + i + 200) = v3;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*13,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*19,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 4 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a751700b2a0efba4039e2f4f27e6a9c4fb69216e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-3.c", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-3.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,189 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-move-loop-invariants\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, void * restrict mask_in, int n)\n+{\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v_8mf8_0 = __riscv_vle8_v_i8mf8 ((int8_t *)(in + i), 0);\n+      __riscv_vse8_v_i8mf8 ((int8_t *)(out + i), v_8mf8_0, 0);\n+\n+      vint8mf8_t v_8mf8_0_tu = __riscv_vle8_v_i8mf8_tu (v_8mf8_0, (int8_t *)(in + i + 1), 0);\n+      __riscv_vse8_v_i8mf8_m (mask, (int8_t *)(out + i + 1), v_8mf8_0_tu, 0);\n+\n+      vint8mf8_t v_8mf8_0_mu = __riscv_vle8_v_i8mf8_mu (mask, v_8mf8_0, (int8_t *)(in + i + 2), 0);\n+      __riscv_vse8_v_i8mf8 ((int8_t *)(out + i + 2), v_8mf8_0_tu, 0);\n+\n+      vint8mf8_t v_8mf8_1 = __riscv_vle8_v_i8mf8 ((int8_t *)(in + i + 3), 7);\n+      __riscv_vse8_v_i8mf8 ((int8_t *)(out + i + 3), v_8mf8_1, 7);\n+      \n+      vint8mf8_t v_8mf8_2 = __riscv_vle8_v_i8mf8 ((int8_t *)(in + i + 4), 17);\n+      __riscv_vse8_v_i8mf8 ((int8_t *)(out + i + 4), v_8mf8_2, 17);\n+\n+      vint8mf8_t v_8mf8_3 = __riscv_vle8_v_i8mf8 ((int8_t *)(in + i + 5), 27);\n+      __riscv_vse8_v_i8mf8 ((int8_t *)(out + i + 5), v_8mf8_3, 27);\n+\n+      vint8mf4_t v_8mf4_1 = __riscv_vle8_v_i8mf4 ((int8_t *)(in + i + 6), 7);\n+      __riscv_vse8_v_i8mf4 ((int8_t *)(out + i + 6), v_8mf4_1, 7);\n+      \n+      vint8mf4_t v_8mf4_2 = __riscv_vle8_v_i8mf4 ((int8_t *)(in + i + 7), 17);\n+      __riscv_vse8_v_i8mf4 ((int8_t *)(out + i + 7), v_8mf4_2, 17);\n+\n+      vint8mf4_t v_8mf4_3 = __riscv_vle8_v_i8mf4 ((int8_t *)(in + i + 8), 27);\n+      __riscv_vse8_v_i8mf4 ((int8_t *)(out + i + 8), v_8mf4_3, 27);\n+\n+      vint8mf2_t v_8mf2_1 = __riscv_vle8_v_i8mf2 ((int8_t *)(in + i + 9), 7);\n+      __riscv_vse8_v_i8mf2 ((int8_t *)(out + i + 9), v_8mf2_1, 7);\n+      \n+      vint8mf2_t v_8mf2_2 = __riscv_vle8_v_i8mf2 ((int8_t *)(in + i + 10), 17);\n+      __riscv_vse8_v_i8mf2 ((int8_t *)(out + i + 10), v_8mf2_2, 17);\n+\n+      vint8mf2_t v_8mf2_3 = __riscv_vle8_v_i8mf2 ((int8_t *)(in + i + 11), 27);\n+      __riscv_vse8_v_i8mf2 ((int8_t *)(out + i + 11), v_8mf2_3, 27);\n+\n+      vint8m1_t v_8m1_1 = __riscv_vle8_v_i8m1 ((int8_t *)(in + i + 12), 7);\n+      __riscv_vse8_v_i8m1 ((int8_t *)(out + i + 12), v_8m1_1, 7);\n+      \n+      vint8m1_t v_8m1_2 = __riscv_vle8_v_i8m1 ((int8_t *)(in + i + 13), 17);\n+      __riscv_vse8_v_i8m1 ((int8_t *)(out + i + 13), v_8m1_2, 17);\n+\n+      vint8m1_t v_8m1_3 = __riscv_vle8_v_i8m1 ((int8_t *)(in + i + 14), 27);\n+      __riscv_vse8_v_i8m1 ((int8_t *)(out + i + 14), v_8m1_3, 27);\n+\n+      vint8m2_t v_8m2_1 = __riscv_vle8_v_i8m2 ((int8_t *)(in + i + 15), 7);\n+      __riscv_vse8_v_i8m2 ((int8_t *)(out + i + 15), v_8m2_1, 7);\n+      \n+      vint8m2_t v_8m2_2 = __riscv_vle8_v_i8m2 ((int8_t *)(in + i + 16), 17);\n+      __riscv_vse8_v_i8m2 ((int8_t *)(out + i + 16), v_8m2_2, 17);\n+\n+      vint8m2_t v_8m2_3 = __riscv_vle8_v_i8m2 ((int8_t *)(in + i + 17), 27);\n+      __riscv_vse8_v_i8m2 ((int8_t *)(out + i + 17), v_8m2_3, 27);\n+\n+      vint8m4_t v_8m4_1 = __riscv_vle8_v_i8m4 ((int8_t *)(in + i + 18), 7);\n+      __riscv_vse8_v_i8m4 ((int8_t *)(out + i + 18), v_8m4_1, 7);\n+      \n+      vint8m4_t v_8m4_2 = __riscv_vle8_v_i8m4 ((int8_t *)(in + i + 19), 17);\n+      __riscv_vse8_v_i8m4 ((int8_t *)(out + i + 19), v_8m4_2, 17);\n+\n+      vint8m4_t v_8m4_3 = __riscv_vle8_v_i8m4 ((int8_t *)(in + i + 20), 27);\n+      __riscv_vse8_v_i8m4 ((int8_t *)(out + i + 20), v_8m4_3, 27);\n+\n+      vint8m8_t v_8m8_1 = __riscv_vle8_v_i8m8 ((int8_t *)(in + i + 21), 7);\n+      __riscv_vse8_v_i8m8 ((int8_t *)(out + i + 21), v_8m8_1, 7);\n+      \n+      vint8m8_t v_8m8_2 = __riscv_vle8_v_i8m8 ((int8_t *)(in + i + 22), 17);\n+      __riscv_vse8_v_i8m8 ((int8_t *)(out + i + 22), v_8m8_2, 17);\n+\n+      vint8m8_t v_8m8_3 = __riscv_vle8_v_i8m8 ((int8_t *)(in + i + 23), 27);\n+      __riscv_vse8_v_i8m8 ((int8_t *)(out + i + 23), v_8m8_3, 27);\n+\n+      vuint16mf4_t v_16mf4_1 = *(vuint16mf4_t*)(in + 24 + i);\n+      *(vuint16mf4_t*)(out + 24 + i) = v_16mf4_1;\n+      \n+      vuint16mf2_t v_16mf2_1 = *(vuint16mf2_t*)(in + 25 + i);\n+      *(vuint16mf2_t*)(out + 25 + i) = v_16mf2_1;\n+\n+      vuint32mf2_t v_32mf2_t = *(vuint32mf2_t*)(in + 26 + i);\n+      *(vuint32mf2_t*)(out + 26 + i) = v_32mf2_t;\n+\n+      vuint8mf2_t v_8mf2_4 = *(vuint8mf2_t*)(in + 27 + i);\n+      *(vuint8mf2_t*)(out + 27 + i) = v_8mf2_4;\n+\n+      vuint8mf4_t v_8mf4_4 = *(vuint8mf4_t*)(in + 28 + i);\n+      *(vuint8mf4_t*)(out + 28 + i) = v_8mf4_4;\n+\n+      vint32mf2_t v_32mf2_1 = __riscv_vle32_v_i32mf2 ((int32_t *)(in + i + 49), 7);\n+      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 49), v_32mf2_1, 7);\n+      \n+      vint32mf2_t v_32mf2_2 = __riscv_vle32_v_i32mf2 ((int32_t *)(in + i + 30), 17);\n+      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 30), v_32mf2_2, 17);\n+\n+      vint32mf2_t v_32mf2_3 = __riscv_vle32_v_i32mf2 ((int32_t *)(in + i + 31), 27);\n+      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 31), v_32mf2_3, 27);\n+\n+      vint32m1_t v_32m1_1 = __riscv_vle32_v_i32m1 ((int32_t *)(in + i + 32), 7);\n+      __riscv_vse32_v_i32m1 ((int32_t *)(out + i + 32), v_32m1_1, 7);\n+      \n+      vint32m1_t v_32m1_2 = __riscv_vle32_v_i32m1 ((int32_t *)(in + i + 33), 17);\n+      __riscv_vse32_v_i32m1 ((int32_t *)(out + i + 33), v_32m1_2, 17);\n+\n+      vint32m1_t v_32m1_3 = __riscv_vle32_v_i32m1 ((int32_t *)(in + i + 34), 27);\n+      __riscv_vse32_v_i32m1 ((int32_t *)(out + i + 34), v_32m1_3, 27);\n+\n+      vint32m2_t v_32m2_1 = __riscv_vle32_v_i32m2 ((int32_t *)(in + i + 35), 7);\n+      __riscv_vse32_v_i32m2 ((int32_t *)(out + i + 35), v_32m2_1, 7);\n+      \n+      vint32m2_t v_32m2_2 = __riscv_vle32_v_i32m2 ((int32_t *)(in + i + 36), 17);\n+      __riscv_vse32_v_i32m2 ((int32_t *)(out + i + 36), v_32m2_2, 17);\n+\n+      vint32m2_t v_32m2_3 = __riscv_vle32_v_i32m2 ((int32_t *)(in + i + 37), 27);\n+      __riscv_vse32_v_i32m2 ((int32_t *)(out + i + 37), v_32m2_3, 27);\n+\n+      vint32m4_t v_32m4_1 = __riscv_vle32_v_i32m4 ((int32_t *)(in + i + 38), 7);\n+      __riscv_vse32_v_i32m4 ((int32_t *)(out + i + 38), v_32m4_1, 7);\n+      \n+      vint32m4_t v_32m4_2 = __riscv_vle32_v_i32m4 ((int32_t *)(in + i + 39), 17);\n+      __riscv_vse32_v_i32m4 ((int32_t *)(out + i + 39), v_32m4_2, 17);\n+\n+      vint32m4_t v_32m4_3 = __riscv_vle32_v_i32m4 ((int32_t *)(in + i + 40), 27);\n+      __riscv_vse32_v_i32m4 ((int32_t *)(out + i + 40), v_32m4_3, 27);\n+\n+      vint32m8_t v_32m8_1 = __riscv_vle32_v_i32m8 ((int32_t *)(in + i + 41), 7);\n+      __riscv_vse32_v_i32m8 ((int32_t *)(out + i + 41), v_32m8_1, 7);\n+      \n+      vint32m8_t v_32m8_2 = __riscv_vle32_v_i32m8 ((int32_t *)(in + i + 42), 17);\n+      __riscv_vse32_v_i32m8 ((int32_t *)(out + i + 42), v_32m8_2, 17);\n+\n+      vint32m8_t v_32m8_3 = __riscv_vle32_v_i32m8 ((int32_t *)(in + i + 43), 27);\n+      __riscv_vse32_v_i32m8 ((int32_t *)(out + i + 43), v_32m8_3, 27);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*0,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*7,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*17,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*27,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 6 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 37 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b8aac96f9bbad3291352ea0486396f6a613d2489", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-4.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-4.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8 (in + 1, 5);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4 (in + 2, 5);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2 (in + 3, 5);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2 (in + 4, 5);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 5);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 5);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 5);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 5);\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8_tu (v1, in + i + 5, 5);\n+      __riscv_vse8_v_i8mf8 (out + i + 5, v, 5);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "702326cdf8655564ac5c5a9216518e74f77cd4c9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-5.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void fn3 (void);\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8 (in + 1, 5);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4 (in + 2, 5);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2 (in + 3, 5);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2 (in + 4, 5);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 5);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 5);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 5);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 5);\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = __riscv_vle16_v_i16mf4 (in + i + 5, 7);\n+      __riscv_vse16_v_i16mf4 (out + i + 5, v, 7);\n+      fn3 ();\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*7,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "cd776dad7a91966cad83e8e5f4dfbd0106c0bab1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-6.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void fn3 (void);\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8 (in + 1, 5);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4 (in + 2, 5);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2 (in + 3, 5);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2 (in + 4, 5);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 5);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 5);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 5);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 5);\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = __riscv_vle16_v_i16mf4 (in + i + 5, 5);\n+      __riscv_vse16_v_i16mf4 (out + i + 5, v, 5);\n+      fn3 ();\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "6795a1ef4bfd5723ffe121e0bc46e57a44e8b941", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-7.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8 (in + 1, 5);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4 (in + 2, 5);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2 (in + 3, 5);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2 (in + 4, 5);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 5);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 5);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 5);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 5);\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = __riscv_vle16_v_i16mf4 (in + i + 5, 5);\n+      __riscv_vse16_v_i16mf4 (out + i + 5, v, 5);\n+      vint16mf2_t v2 = __riscv_vle16_v_i16mf2 (in + i + 6, 8);\n+      __riscv_vse16_v_i16mf2 (out + i + 6, v2, 8);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*8,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a4c8de7b0677ef2a555e82eb29b1c9ce692c6bfc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-8.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-8.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int * restrict out2, int n)\n+{\n+  vint8mf8_t v1 = __riscv_vle8_v_i8mf8 (in + 1, 5);\n+  vint16mf4_t v2 = __riscv_vle16_v_i16mf4 (in + 2, 5);\n+  vint32mf2_t v3 = __riscv_vle32_v_i32mf2 (in + 3, 5);\n+  vfloat32mf2_t v4 = __riscv_vle32_v_f32mf2 (in + 4, 5);\n+  \n+  __riscv_vse8_v_i8mf8 (out + 1, v1, 5);\n+  __riscv_vse16_v_i16mf4 (out + 2, v2, 5);\n+  __riscv_vse32_v_i32mf2 (out + 3, v3, 5);\n+  __riscv_vse32_v_f32mf2 (out + 4, v4, 5);\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out2[i] = out2[i] + out2[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out2[i] = out2[i] * out2[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out2[i] = out2[i] * out2[i];\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8_tu (v1, in + i + 5, 5);\n+      __riscv_vse8_v_i8mf8 (out + i + 5, v, 5);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "149f01b4d5f7596de1b685c9f75cfd1bc52679da", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_switch-9.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc31c2c7c038e328cea88f67bd93415054a3db6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_switch-9.c?ref=6bc31c2c7c038e328cea88f67bd93415054a3db6", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict mask_in, int n, int cond)\n+{\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  vfloat32mf2_t vf32mf2 = *(vfloat32mf2_t*)in;\n+  vint16mf4_t vf16mf4 = *(vint16mf4_t*)(in + 5);\n+  asm volatile (\"\":::\"memory\");\n+  vfloat32mf2_t v = __riscv_vle32_v_f32mf2 (in + 10000, 5);\n+  __riscv_vse32_v_f32mf2 (out + 10000, v, 5);\n+\n+  if (cond)\n+    {\n+      vfloat32mf2_t vt = __riscv_vle32_v_f32mf2_tumu (mask, vf32mf2, in + 20000, 5);\n+      __riscv_vse32_v_f32mf2 (out + 20000, vt, 5);\n+    }\n+  else\n+    {\n+      vint16mf4_t vt = __riscv_vle16_v_i16mf4_tumu (mask, vf16mf4, in + 20000, 5);\n+      __riscv_vse16_v_i16mf4 (out + 20000, vt, 5);\n+    }\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v0 = __riscv_vle32_v_f32mf2_tu (v, in + i + 100, 5);\n+      vint16mf2_t v1 = __riscv_vle16_v_i16mf2 (in + i + 200, 6);\n+      vint8mf2_t v2 = __riscv_vle8_v_i8mf2 (in + i + 300, 7);\n+      vint8mf4_t v3 = __riscv_vle8_v_i8mf4 (in + i + 400, 8);\n+      vint8mf8_t v4 = __riscv_vle8_v_i8mf8 (in + i + 500, 9);\n+      vint32mf2_t v5 = __riscv_vle32_v_i32mf2 (in + i + 600, 5);\n+      \n+      __riscv_vse32_v_f32mf2 (out + i + 100, v0, 5);\n+      __riscv_vse16_v_i16mf2 (out + i + 200, v1, 6);\n+      __riscv_vse8_v_i8mf2 (out + i + 300, v2, 7);\n+      __riscv_vse8_v_i8mf4 (out + i + 400, v3, 8);\n+      __riscv_vse8_v_i8mf8 (out + i + 500, v4, 9);\n+      __riscv_vse32_v_i32mf2 (out + i + 600, v5, 5);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}]}