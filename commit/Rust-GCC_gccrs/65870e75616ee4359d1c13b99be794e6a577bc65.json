{"sha": "65870e75616ee4359d1c13b99be794e6a577bc65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU4NzBlNzU2MTZlZTQzNTlkMWMxM2I5OWJlNzk0ZTZhNTc3YmM2NQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-24T23:29:34Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-25T01:23:43Z"}, "message": "cp: add support for per-location warning groups.\n\ngcc/cp/ChangeLog:\n\n\t* call.c (build_over_call): Replace direct uses of TREE_NO_WARNING\n\twith warning_suppressed_p, suppress_warning, and copy_no_warning, or\n\tnothing if not necessary.\n\t(set_up_extended_ref_temp): Same.\n\t* class.c (layout_class_type): Same.\n\t* constraint.cc (constraint_satisfaction_value): Same.\n\t* coroutines.cc (finish_co_await_expr): Same.\n\t(finish_co_yield_expr): Same.\n\t(finish_co_return_stmt): Same.\n\t(build_actor_fn): Same.\n\t(coro_rewrite_function_body): Same.\n\t(morph_fn_to_coro): Same.\n\t* cp-gimplify.c (genericize_eh_spec_block): Same.\n\t(gimplify_expr_stmt): Same.\n\t(cp_genericize_r): Same.\n\t(cp_fold): Same.\n\t* cp-ubsan.c (cp_ubsan_instrument_vptr): Same.\n\t* cvt.c (cp_fold_convert): Same.\n\t(convert_to_void): Same.\n\t* decl.c (wrapup_namespace_globals): Same.\n\t(grokdeclarator): Same.\n\t(finish_function): Same.\n\t(require_deduced_type): Same.\n\t* decl2.c (no_linkage_error): Same.\n\t(c_parse_final_cleanups): Same.\n\t* except.c (expand_end_catch_block): Same.\n\t* init.c (build_new_1): Same.\n\t(build_new): Same.\n\t(build_vec_delete_1): Same.\n\t(build_vec_init): Same.\n\t(build_delete): Same.\n\t* method.c (defaultable_fn_check): Same.\n\t* parser.c (cp_parser_fold_expression): Same.\n\t(cp_parser_primary_expression): Same.\n\t* pt.c (push_tinst_level_loc): Same.\n\t(tsubst_copy): Same.\n\t(tsubst_omp_udr): Same.\n\t(tsubst_copy_and_build): Same.\n\t* rtti.c (build_if_nonnull): Same.\n\t* semantics.c (maybe_convert_cond): Same.\n\t(finish_return_stmt): Same.\n\t(finish_parenthesized_expr): Same.\n\t(cp_check_omp_declare_reduction): Same.\n\t* tree.c (build_cplus_array_type): Same.\n\t* typeck.c (build_ptrmemfunc_access_expr): Same.\n\t(cp_build_indirect_ref_1): Same.\n\t(cp_build_function_call_vec): Same.\n\t(warn_for_null_address): Same.\n\t(cp_build_binary_op): Same.\n\t(unary_complex_lvalue): Same.\n\t(cp_build_modify_expr): Same.\n\t(build_x_modify_expr): Same.\n\t(convert_for_assignment): Same.", "tree": {"sha": "43087958a3c2c1a1b87e87a17557399f8f698d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43087958a3c2c1a1b87e87a17557399f8f698d9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65870e75616ee4359d1c13b99be794e6a577bc65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65870e75616ee4359d1c13b99be794e6a577bc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65870e75616ee4359d1c13b99be794e6a577bc65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65870e75616ee4359d1c13b99be794e6a577bc65/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c3f96f296b272614e0981fe3b25b0b1997db96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c3f96f296b272614e0981fe3b25b0b1997db96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c3f96f296b272614e0981fe3b25b0b1997db96"}], "stats": {"total": 191, "additions": 95, "deletions": 96}, "files": [{"sha": "e4df72ec1a377acd6000faf28f969b9eaed7ca04", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -9499,7 +9499,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t{\n \t  /* Avoid copying empty classes.  */\n \t  val = build2 (COMPOUND_EXPR, type, arg, to);\n-\t  TREE_NO_WARNING (val) = 1;\n+\t  suppress_warning (val, OPT_Wunused);\n \t}\n       else if (tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (as_base)))\n \t{\n@@ -9530,7 +9530,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t\t      build2 (MEM_REF, array_type, arg0, alias_set),\n \t\t      build2 (MEM_REF, array_type, arg, alias_set));\n \t  val = build2 (COMPOUND_EXPR, TREE_TYPE (to), t, to);\n-          TREE_NO_WARNING (val) = 1;\n+          suppress_warning (val, OPT_Wunused);\n \t}\n \n       cp_warn_deprecated_use (fn, complain);\n@@ -9604,7 +9604,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     {\n       tree c = extract_call_expr (call);\n       if (TREE_CODE (c) == CALL_EXPR)\n-\tTREE_NO_WARNING (c) = 1;\n+\tsuppress_warning (c /* Suppress all warnings.  */);\n     }\n   if (TREE_CODE (fn) == ADDR_EXPR)\n     {\n@@ -12554,11 +12554,11 @@ set_up_extended_ref_temp (tree decl, tree expr, vec<tree, va_gc> **cleanups,\n     TREE_ADDRESSABLE (var) = 1;\n \n   if (TREE_CODE (decl) == FIELD_DECL\n-      && extra_warnings && !TREE_NO_WARNING (decl))\n+      && extra_warnings && !warning_suppressed_p (decl))\n     {\n       warning (OPT_Wextra, \"a temporary bound to %qD only persists \"\n \t       \"until the constructor exits\", decl);\n-      TREE_NO_WARNING (decl) = true;\n+      suppress_warning (decl);\n     }\n \n   /* Recursively extend temps in this initializer.  */"}, {"sha": "c89ffadcef850a6ff9c727d4433bbeb10237ce0b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -6704,7 +6704,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t     laying out an Objective-C class.  The ObjC ABI differs\n \t     from the C++ ABI, and so we do not want a warning\n \t     here.  */\n-\t  && !TREE_NO_WARNING (field)\n+\t  && !warning_suppressed_p (field, OPT_Wabi)\n \t  && !last_field_was_bitfield\n \t  && !integer_zerop (size_binop (TRUNC_MOD_EXPR,\n \t\t\t\t\t DECL_FIELD_BIT_OFFSET (field),"}, {"sha": "6df3ca6ce323a53b1cd93d204b6a9ac3f021f8bb", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -3290,14 +3290,14 @@ constraint_satisfaction_value (tree t, tree args, sat_info info)\n   else\n     r = satisfy_nondeclaration_constraints (t, args, info);\n   if (r == error_mark_node && info.quiet ()\n-      && !(DECL_P (t) && TREE_NO_WARNING (t)))\n+      && !(DECL_P (t) && warning_suppressed_p (t)))\n     {\n       /* Replay the error noisily.  */\n       sat_info noisy (tf_warning_or_error, info.in_decl);\n       constraint_satisfaction_value (t, args, noisy);\n       if (DECL_P (t) && !args)\n \t/* Avoid giving these errors again.  */\n-\tTREE_NO_WARNING (t) = true;\n+\tsuppress_warning (t);\n     }\n   return r;\n }"}, {"sha": "a1b0b31f49744c26135d857071b2596ec57024ca", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -1078,7 +1078,7 @@ finish_co_await_expr (location_t kw, tree expr)\n      is declared to return non-void (most likely).  This is correct - we\n      synthesize the return for the ramp in the compiler.  So suppress any\n      extraneous warnings during substitution.  */\n-  TREE_NO_WARNING (current_function_decl) = true;\n+  suppress_warning (current_function_decl, OPT_Wreturn_type);\n \n   /* If we don't know the promise type, we can't proceed, build the\n      co_await with the expression unchanged.  */\n@@ -1154,7 +1154,7 @@ finish_co_yield_expr (location_t kw, tree expr)\n      is declared to return non-void (most likely).  This is correct - we\n      synthesize the return for the ramp in the compiler.  So suppress any\n      extraneous warnings during substitution.  */\n-  TREE_NO_WARNING (current_function_decl) = true;\n+  suppress_warning (current_function_decl, OPT_Wreturn_type);\n \n   /* If we don't know the promise type, we can't proceed, build the\n      co_await with the expression unchanged.  */\n@@ -1235,7 +1235,7 @@ finish_co_return_stmt (location_t kw, tree expr)\n      is declared to return non-void (most likely).  This is correct - we\n      synthesize the return for the ramp in the compiler.  So suppress any\n      extraneous warnings during substitution.  */\n-  TREE_NO_WARNING (current_function_decl) = true;\n+  suppress_warning (current_function_decl, OPT_Wreturn_type);\n \n   if (processing_template_decl\n       && check_for_bare_parameter_packs (expr))\n@@ -1259,7 +1259,7 @@ finish_co_return_stmt (location_t kw, tree expr)\n \n   /* Suppress -Wreturn-type for co_return, we need to check indirectly\n      whether the promise type has a suitable return_void/return_value.  */\n-  TREE_NO_WARNING (current_function_decl) = true;\n+  suppress_warning (current_function_decl, OPT_Wreturn_type);\n \n   if (!processing_template_decl && warn_sequence_point)\n     verify_sequence_points (expr);\n@@ -2458,7 +2458,7 @@ build_actor_fn (location_t loc, tree coro_frame_type, tree actor, tree fnbody,\n \n   /* done.  */\n   r = build_stmt (loc, RETURN_EXPR, NULL);\n-  TREE_NO_WARNING (r) |= 1; /* We don't want a warning about this.  */\n+  suppress_warning (r); /* We don't want a warning about this.  */\n   r = maybe_cleanup_point_expr_void (r);\n   add_stmt (r);\n \n@@ -2467,7 +2467,7 @@ build_actor_fn (location_t loc, tree coro_frame_type, tree actor, tree fnbody,\n   add_stmt (r);\n \n   r = build_stmt (loc, RETURN_EXPR, NULL);\n-  TREE_NO_WARNING (r) |= 1; /* We don't want a warning about this.  */\n+  suppress_warning (r); /* We don't want a warning about this.  */\n   r = maybe_cleanup_point_expr_void (r);\n   add_stmt (r);\n \n@@ -4142,7 +4142,7 @@ coro_rewrite_function_body (location_t fn_start, tree fnbody, tree orig,\n       finish_if_stmt_cond (not_iarc, not_iarc_if);\n       /* If the initial await resume called value is false, rethrow...  */\n       tree rethrow = build_throw (fn_start, NULL_TREE);\n-      TREE_NO_WARNING (rethrow) = true;\n+      suppress_warning (rethrow);\n       finish_expr_stmt (rethrow);\n       finish_then_clause (not_iarc_if);\n       tree iarc_scope = IF_SCOPE (not_iarc_if);\n@@ -4243,7 +4243,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n       /* For early errors, we do not want a diagnostic about the missing\n \t ramp return value, since the user cannot fix this - a 'return' is\n \t not allowed in a coroutine.  */\n-      TREE_NO_WARNING (orig) = true;\n+      suppress_warning (orig, OPT_Wreturn_type);\n       /* Discard the body, we can't process it further.  */\n       pop_stmt_list (DECL_SAVED_TREE (orig));\n       DECL_SAVED_TREE (orig) = push_stmt_list ();\n@@ -4269,7 +4269,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n       DECL_SAVED_TREE (orig) = push_stmt_list ();\n       append_to_statement_list (fnbody, &DECL_SAVED_TREE (orig));\n       /* Suppress warnings about the missing return value.  */\n-      TREE_NO_WARNING (orig) = true;\n+      suppress_warning (orig, OPT_Wreturn_type);\n       return false;\n     }\n \n@@ -4948,7 +4948,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n       BIND_EXPR_BODY (ramp_bind) = pop_stmt_list (ramp_body);\n       DECL_SAVED_TREE (orig) = newbody;\n       /* Suppress warnings about the missing return value.  */\n-      TREE_NO_WARNING (orig) = true;\n+      suppress_warning (orig, OPT_Wreturn_type);\n       return false;\n     }\n \n@@ -5159,7 +5159,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t\t\t\t\t      promise_type, fn_start);\n       finish_expr_stmt (del_coro_fr);\n       tree rethrow = build_throw (fn_start, NULL_TREE);\n-      TREE_NO_WARNING (rethrow) = true;\n+      suppress_warning (rethrow);\n       finish_expr_stmt (rethrow);\n       finish_handler (handler);\n       TRY_HANDLERS (ramp_cleanup) = pop_stmt_list (TRY_HANDLERS (ramp_cleanup));"}, {"sha": "00b7772fe0d2afbbeaf3adffa21608477a28ccc8", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -101,8 +101,8 @@ genericize_eh_spec_block (tree *stmt_p)\n   tree failure = build_call_n (call_unexpected_fn, 1, build_exc_ptr ());\n \n   *stmt_p = build_gimple_eh_filter_tree (body, allowed, failure);\n-  TREE_NO_WARNING (*stmt_p) = true;\n-  TREE_NO_WARNING (TREE_OPERAND (*stmt_p, 1)) = true;\n+  suppress_warning (*stmt_p);\n+  suppress_warning (TREE_OPERAND (*stmt_p, 1));\n }\n \n /* Return the first non-compound statement in STMT.  */\n@@ -220,7 +220,7 @@ gimplify_expr_stmt (tree *stmt_p)\n \t{\n \t  if (!IS_EMPTY_STMT (stmt)\n \t      && !VOID_TYPE_P (TREE_TYPE (stmt))\n-\t      && !TREE_NO_WARNING (stmt))\n+\t      && !warning_suppressed_p (stmt, OPT_Wunused_value))\n \t    warning (OPT_Wunused_value, \"statement with no effect\");\n \t}\n       else\n@@ -1328,7 +1328,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n     case THROW_EXPR:\n       {\n \tlocation_t loc = location_of (stmt);\n-\tif (TREE_NO_WARNING (stmt))\n+\tif (warning_suppressed_p (stmt /* What warning? */))\n \t  /* Never mind.  */;\n \telse if (wtd->try_block)\n \t  {\n@@ -2443,17 +2443,19 @@ cp_fold (tree x)\n \t    ;\n \t  else if (COMPARISON_CLASS_P (x))\n \t    {\n-\t      if (TREE_NO_WARNING (org_x) && warn_nonnull_compare)\n-\t\tTREE_NO_WARNING (x) = 1;\n+\t      if (warn_nonnull_compare\n+\t\t  && warning_suppressed_p (org_x, OPT_Wnonnull_compare))\n+\t\tsuppress_warning (x, OPT_Wnonnull_compare);\n \t    }\n \t  /* Otherwise give up on optimizing these, let GIMPLE folders\n \t     optimize those later on.  */\n \t  else if (op0 != TREE_OPERAND (org_x, 0)\n \t\t   || op1 != TREE_OPERAND (org_x, 1))\n \t    {\n \t      x = build2_loc (loc, code, TREE_TYPE (org_x), op0, op1);\n-\t      if (TREE_NO_WARNING (org_x) && warn_nonnull_compare)\n-\t\tTREE_NO_WARNING (x) = 1;\n+\t      if (warn_nonnull_compare\n+\t\t  && warning_suppressed_p (org_x, OPT_Wnonnull_compare))\n+\t\tsuppress_warning (x, OPT_Wnonnull_compare);\n \t    }\n \t  else\n \t    x = org_x;\n@@ -2713,7 +2715,7 @@ cp_fold (tree x)\n   if (EXPR_P (x) && TREE_CODE (x) == code)\n     {\n       TREE_THIS_VOLATILE (x) = TREE_THIS_VOLATILE (org_x);\n-      TREE_NO_WARNING (x) = TREE_NO_WARNING (org_x);\n+      copy_warning (x, org_x);\n     }\n \n   if (!c.evaluation_restricted_p ())"}, {"sha": "78545945d75a0b1f75b20085145eefb2ccdbe82b", "filename": "gcc/cp/cp-ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcp-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcp-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-ubsan.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -81,7 +81,7 @@ cp_ubsan_instrument_vptr (location_t loc, tree op, tree type, bool is_addr,\n \t\t\t      build_zero_cst (TREE_TYPE (op)));\n       /* This is a compiler generated comparison, don't emit\n \t e.g. -Wnonnull-compare warning for it.  */\n-      TREE_NO_WARNING (cond) = 1;\n+      suppress_warning (cond, OPT_Wnonnull_compare);\n       vptr = build3_loc (loc, COND_EXPR, uint64_type_node, cond,\n \t\t\t vptr, build_int_cst (uint64_type_node, 0));\n     }"}, {"sha": "d035e611be432e7ed0716b853c57600d5a279434", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -605,8 +605,6 @@ ignore_overflows (tree expr, tree orig)\n tree\n cp_fold_convert (tree type, tree expr)\n {\n-  bool nowarn = TREE_NO_WARNING (expr);\n-\n   tree conv;\n   if (TREE_TYPE (expr) == type)\n     conv = expr;\n@@ -630,8 +628,8 @@ cp_fold_convert (tree type, tree expr)\n       conv = ignore_overflows (conv, expr);\n     }\n \n-  if (nowarn && TREE_CODE (expr) == TREE_CODE (conv))\n-    TREE_NO_WARNING (conv) = nowarn;\n+  if (TREE_CODE (expr) == TREE_CODE (conv))\n+    copy_warning (conv, expr);\n \n   return conv;\n }\n@@ -1208,7 +1206,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \t/* The second part of a compound expr contains the value.  */\n \ttree op1 = TREE_OPERAND (expr,1);\n \ttree new_op1;\n-\tif (implicit != ICV_CAST && !TREE_NO_WARNING (expr))\n+\tif (implicit != ICV_CAST && !warning_suppressed_p (expr /* What warning? */))\n \t  new_op1 = convert_to_void (op1, ICV_RIGHT_OF_COMMA, complain);\n \telse\n \t  new_op1 = convert_to_void (op1, ICV_CAST, complain);\n@@ -1394,7 +1392,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n             if (warn_unused_value\n \t\t&& implicit != ICV_CAST\n                 && (complain & tf_warning)\n-                && !TREE_NO_WARNING (expr)\n+                && !warning_suppressed_p (expr, OPT_Wunused_value)\n                 && !is_reference)\n               warning_at (loc, OPT_Wunused_value, \"value computed is not used\");\n             expr = TREE_OPERAND (expr, 0);\n@@ -1578,7 +1576,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n     {\n       if (implicit != ICV_CAST\n \t  && warn_unused_value\n-\t  && !TREE_NO_WARNING (expr)\n+\t  && !warning_suppressed_p (expr, OPT_Wunused_value)\n \t  && !processing_template_decl\n \t  && !cp_unevaluated_operand\n \t  && (complain & tf_warning))"}, {"sha": "fa6af6fec11ddef1e55300df9d4afaba5238db14", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -850,7 +850,7 @@ wrapup_namespace_globals ()\n \t      && !TREE_PUBLIC (decl)\n \t      && !DECL_ARTIFICIAL (decl)\n \t      && !DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION (decl)\n-\t      && !TREE_NO_WARNING (decl))\n+\t      && !warning_suppressed_p (decl, OPT_Wunused_function))\n \t    warning_at (DECL_SOURCE_LOCATION (decl),\n \t\t\tOPT_Wunused_function,\n \t\t\t\"%qF declared %<static%> but never defined\", decl);\n@@ -13906,10 +13906,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\tdecl = build_decl (id_loc, FIELD_DECL, unqualified_id, type);\n \t\tDECL_NONADDRESSABLE_P (decl) = bitfield;\n \t\tif (bitfield && !unqualified_id)\n-\t\t  {\n-\t\t    TREE_NO_WARNING (decl) = 1;\n-\t\t    DECL_PADDING_P (decl) = 1;\n-\t\t  }\n+\t\t  DECL_PADDING_P (decl) = 1;\n \n \t\tif (storage_class == sc_mutable)\n \t\t  {\n@@ -17495,7 +17492,7 @@ finish_function (bool inline_p)\n       /* Don't complain if we are declared noreturn.  */\n       && !TREE_THIS_VOLATILE (fndecl)\n       && !DECL_NAME (DECL_RESULT (fndecl))\n-      && !TREE_NO_WARNING (fndecl)\n+      && !warning_suppressed_p (fndecl, OPT_Wreturn_type)\n       /* Structor return values (if any) are set by the compiler.  */\n       && !DECL_CONSTRUCTOR_P (fndecl)\n       && !DECL_DESTRUCTOR_P (fndecl)\n@@ -17523,7 +17520,7 @@ finish_function (bool inline_p)\n       else if (warning_at (&richloc, OPT_Wreturn_type,\n \t\t\t   \"no return statement in function returning \"\n \t\t\t   \"non-void\"))\n-\tTREE_NO_WARNING (fndecl) = 1;\n+\tsuppress_warning (fndecl, OPT_Wreturn_type);\n     }\n \n   /* Lambda closure members are implicitly constexpr if possible.  */\n@@ -17597,7 +17594,7 @@ finish_function (bool inline_p)\n \t    && !DECL_READ_P (decl)\n \t    && DECL_NAME (decl)\n \t    && !DECL_ARTIFICIAL (decl)\n-\t    && !TREE_NO_WARNING (decl)\n+\t    && !warning_suppressed_p (decl,OPT_Wunused_but_set_parameter)\n \t    && !DECL_IN_SYSTEM_HEADER (decl)\n \t    && TREE_TYPE (decl) != error_mark_node\n \t    && !TYPE_REF_P (TREE_TYPE (decl))\n@@ -18088,7 +18085,7 @@ require_deduced_type (tree decl, tsubst_flags_t complain)\n {\n   if (undeduced_auto_decl (decl))\n     {\n-      if (TREE_NO_WARNING (decl) && seen_error ())\n+      if (warning_suppressed_p (decl) && seen_error ())\n \t/* We probably already complained about deduction failure.  */;\n       else if (complain & tf_error)\n \terror (\"use of %qD before deduction of %<auto%>\", decl);"}, {"sha": "090a83bd6704d79ff05cc33749193f0292420777", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -4529,7 +4529,7 @@ no_linkage_error (tree decl)\n \t  || (errorcount + sorrycount > 0\n \t      && DECL_LANG_SPECIFIC (decl)\n \t      && DECL_TEMPLATE_INFO (decl)\n-\t      && TREE_NO_WARNING (decl))))\n+\t      && warning_suppressed_p (decl /* What warning? */))))\n     /* In C++11 it's ok if the decl is defined.  */\n     return;\n \n@@ -5204,7 +5204,7 @@ c_parse_final_cleanups (void)\n \t  && warning_at (DECL_SOURCE_LOCATION (decl), 0,\n \t\t\t \"inline function %qD used but never defined\", decl))\n \t/* Avoid a duplicate warning from check_global_declaration.  */\n-\tTREE_NO_WARNING (decl) = 1;\n+\tsuppress_warning (decl, OPT_Wunused);\n     }\n \n   /* So must decls that use a type with no linkage.  */"}, {"sha": "a8cea53cf91f930064eaff21dec54aa7ce9a61af", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -466,7 +466,8 @@ expand_end_catch_block (void)\n \t  || DECL_DESTRUCTOR_P (current_function_decl)))\n     {\n       tree rethrow = build_throw (input_location, NULL_TREE);\n-      TREE_NO_WARNING (rethrow) = true;\n+      /* Disable all warnings for the generated rethrow statement.  */\n+      suppress_warning (rethrow);\n       finish_expr_stmt (rethrow);\n     }\n }"}, {"sha": "88f6f90a800c23f31133790002fc1aabdb9bf3fe", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -3536,11 +3536,11 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t       the arguments to the constructor call.  */\n \t    {\n \t      /* CLEANUP is compiler-generated, so no diagnostics.  */\n-\t      TREE_NO_WARNING (cleanup) = true;\n+\t      suppress_warning (cleanup);\n \t      init_expr = build2 (TRY_CATCH_EXPR, void_type_node,\n \t\t\t\t  init_expr, cleanup);\n \t      /* Likewise, this try-catch is compiler-generated.  */\n-\t      TREE_NO_WARNING (init_expr) = true;\n+\t      suppress_warning (init_expr);\n \t    }\n \t  else\n \t    /* Ack!  First we allocate the memory.  Then we set our sentry\n@@ -3562,7 +3562,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t      sentry = TARGET_EXPR_SLOT (begin);\n \n \t      /* CLEANUP is compiler-generated, so no diagnostics.  */\n-\t      TREE_NO_WARNING (cleanup) = true;\n+\t      suppress_warning (cleanup);\n \n \t      TARGET_EXPR_CLEANUP (begin)\n \t\t= build3 (COND_EXPR, void_type_node, sentry,\n@@ -3576,7 +3576,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t\t  build2 (COMPOUND_EXPR, void_type_node, init_expr,\n \t\t\t\t  end));\n \t      /* Likewise, this is compiler-generated.  */\n-\t      TREE_NO_WARNING (init_expr) = true;\n+\t      suppress_warning (init_expr);\n \t    }\n \t}\n     }\n@@ -3823,7 +3823,7 @@ build_new (location_t loc, vec<tree, va_gc> **placement, tree type,\n \n   /* Wrap it in a NOP_EXPR so warn_if_unused_value doesn't complain.  */\n   rval = build1_loc (loc, NOP_EXPR, TREE_TYPE (rval), rval);\n-  TREE_NO_WARNING (rval) = 1;\n+  suppress_warning (rval, OPT_Wunused_value);\n \n   return rval;\n }\n@@ -3995,7 +3995,7 @@ build_vec_delete_1 (location_t loc, tree base, tree maxindex, tree type,\n \t\t\t  fold_convert (TREE_TYPE (base), nullptr_node));\n   /* This is a compiler generated comparison, don't emit\n      e.g. -Wnonnull-compare warning for it.  */\n-  TREE_NO_WARNING (cond) = 1;\n+  suppress_warning (cond, OPT_Wnonnull_compare);\n   body = build3_loc (loc, COND_EXPR, void_type_node,\n \t\t     cond, body, integer_zero_node);\n   COND_EXPR_IS_VEC_DELETE (body) = true;\n@@ -4665,7 +4665,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n       atype = build_pointer_type (atype);\n       stmt_expr = build1 (NOP_EXPR, atype, stmt_expr);\n       stmt_expr = cp_build_fold_indirect_ref (stmt_expr);\n-      TREE_NO_WARNING (stmt_expr) = 1;\n+      suppress_warning (stmt_expr /* What warning? */);\n     }\n \n   return stmt_expr;\n@@ -4935,7 +4935,7 @@ build_delete (location_t loc, tree otype, tree addr,\n   /* This is a compiler generated comparison, don't emit\n      e.g. -Wnonnull-compare warning for it.  */\n   else if (TREE_CODE (ifexp) == NE_EXPR)\n-    TREE_NO_WARNING (ifexp) = 1;\n+    suppress_warning (ifexp, OPT_Wnonnull_compare);\n \n   if (!integer_nonzerop (ifexp))\n     expr = build3 (COND_EXPR, void_type_node, ifexp, expr, void_node);"}, {"sha": "f268aab1a79d22ca1916d34212e12046b81e7db5", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -3284,7 +3284,7 @@ defaultable_fn_check (tree fn)\n       /* Avoid do_warn_unused_parameter warnings.  */\n       for (tree p = FUNCTION_FIRST_USER_PARM (fn); p; p = DECL_CHAIN (p))\n \tif (DECL_NAME (p))\n-\t  TREE_NO_WARNING (p) = 1;\n+\t  suppress_warning (p, OPT_Wunused_parameter);\n \n       if (current_class_type && TYPE_BEING_DEFINED (current_class_type))\n \t/* Defer checking.  */;"}, {"sha": "096580e7e50d088de713f6a8714bcc1addc10e63", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -1,3 +1,4 @@\n+\n /* -*- C++ -*- Parser.\n    Copyright (C) 2000-2021 Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>.\n@@ -5322,7 +5323,7 @@ cp_parser_fold_expression (cp_parser *parser, tree expr1)\n   /* The operands of a fold-expression are cast-expressions, so binary or\n      conditional expressions are not allowed.  We check this here to avoid\n      tentative parsing.  */\n-  if (EXPR_P (expr1) && TREE_NO_WARNING (expr1))\n+  if (EXPR_P (expr1) && warning_suppressed_p (expr1, OPT_Wparentheses))\n     /* OK, the expression was parenthesized.  */;\n   else if (is_binary_op (TREE_CODE (expr1)))\n     error_at (location_of (expr1),\n@@ -5604,7 +5605,10 @@ cp_parser_primary_expression (cp_parser *parser,\n \t/* Consume the `)'.  */\n \ttoken = cp_lexer_peek_token (parser->lexer);\n \tlocation_t close_paren_loc = token->location;\n+\tbool no_wparens = warning_suppressed_p (expr, OPT_Wparentheses);\n \texpr.set_range (open_paren_loc, close_paren_loc);\n+\tif (no_wparens)\n+\t  suppress_warning (expr, OPT_Wparentheses);\n \tif (!parens.require_close (parser)\n \t    && !cp_parser_uncommitted_to_tentative_parse_p (parser))\n \t  cp_parser_skip_to_end_of_statement (parser);"}, {"sha": "e5a2a2cd52554071357d1e08765cb7a464e081b0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -10954,9 +10954,9 @@ push_tinst_level_loc (tree tldcl, tree targs, location_t loc)\n      constant expressions.  */\n   if (!targs && limit_bad_template_recursion (tldcl))\n     {\n-      /* Avoid no_linkage_errors and unused function warnings for this\n-\t decl.  */\n-      TREE_NO_WARNING (tldcl) = 1;\n+      /* Avoid no_linkage_errors and unused function (and all other)\n+\t warnings for this decl.  */\n+      suppress_warning (tldcl);\n       return false;\n     }\n \n@@ -17079,7 +17079,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \ttree op1 = tsubst_copy (TREE_OPERAND (t, 1), args, complain, in_decl);\n \ttree op2 = tsubst_copy (TREE_OPERAND (t, 2), args, complain, in_decl);\n \tr = build_nt (code, op0, op1, op2);\n-\tTREE_NO_WARNING (r) = TREE_NO_WARNING (t);\n+\tcopy_warning (r, t);\n \treturn r;\n       }\n \n@@ -19172,8 +19172,7 @@ tsubst_omp_udr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       block = finish_omp_structured_block (block);\n       block = maybe_cleanup_point_expr_void (block);\n       add_decl_expr (omp_out);\n-      if (TREE_NO_WARNING (DECL_EXPR_DECL (stmts[0])))\n-\tTREE_NO_WARNING (omp_out) = 1;\n+      copy_warning (omp_out, DECL_EXPR_DECL (stmts[0]));\n       add_decl_expr (omp_in);\n       finish_expr_stmt (block);\n     }\n@@ -19854,17 +19853,17 @@ tsubst_copy_and_build (tree t,\n \ttree r = build_x_binary_op\n \t  (input_location, TREE_CODE (t),\n \t   op0,\n-\t   (TREE_NO_WARNING (TREE_OPERAND (t, 0))\n+\t   (warning_suppressed_p (TREE_OPERAND (t, 0))\n \t    ? ERROR_MARK\n \t    : TREE_CODE (TREE_OPERAND (t, 0))),\n \t   op1,\n-\t   (TREE_NO_WARNING (TREE_OPERAND (t, 1))\n+\t   (warning_suppressed_p (TREE_OPERAND (t, 1))\n \t    ? ERROR_MARK\n \t    : TREE_CODE (TREE_OPERAND (t, 1))),\n \t   /*overload=*/NULL,\n \t   complain|decltype_flag);\n-\tif (EXPR_P (r) && TREE_NO_WARNING (t))\n-\t  TREE_NO_WARNING (r) = TREE_NO_WARNING (t);\n+\tif (EXPR_P (r))\n+\t  copy_warning (r, t);\n \n \tRETURN (r);\n       }\n@@ -20000,8 +19999,8 @@ tsubst_copy_and_build (tree t,\n \t   set and must be copied.  In the latter case,\n \t   build_x_modify_expr sets it and it must not be reset\n \t   here.  */\n-\tif (TREE_NO_WARNING (t))\n-\t  TREE_NO_WARNING (r) = TREE_NO_WARNING (t);\n+\tif (warning_suppressed_p (t, OPT_Wparentheses))\n+\t  suppress_warning (r, OPT_Wparentheses);\n \n \tRETURN (r);\n       }"}, {"sha": "fcb33088a2184501f0ac2175a3582d1ca103d68c", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -536,14 +536,14 @@ build_if_nonnull (tree test, tree result, tsubst_flags_t complain)\n \n   /* This is a compiler generated comparison, don't emit\n      e.g. -Wnonnull-compare warning for it.  */\n-  TREE_NO_WARNING (cond) = 1;\n+  suppress_warning (cond, OPT_Wnonnull);\n \n   null_ptr = cp_convert (TREE_TYPE (result), nullptr_node, complain);\n   cond = build3 (COND_EXPR, TREE_TYPE (result), cond, result, null_ptr);\n \n   /* Likewise, don't emit -Wnonnull for using the result to call\n      a member function.  */\n-  TREE_NO_WARNING (cond) = 1;\n+  suppress_warning (cond, OPT_Wnonnull);\n   return cond;\n }\n "}, {"sha": "b080259083e476801d4469cddf14c091bdd90f61", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -835,12 +835,12 @@ maybe_convert_cond (tree cond)\n   cond = convert_from_reference (cond);\n \n   if (TREE_CODE (cond) == MODIFY_EXPR\n-      && !TREE_NO_WARNING (cond)\n       && warn_parentheses\n+      && !warning_suppressed_p (cond, OPT_Wparentheses)\n       && warning_at (cp_expr_loc_or_input_loc (cond),\n \t\t     OPT_Wparentheses, \"suggest parentheses around \"\n \t\t\t\t       \"assignment used as truth value\"))\n-    TREE_NO_WARNING (cond) = 1;\n+    suppress_warning (cond, OPT_Wparentheses);\n \n   return condition_conversion (cond);\n }\n@@ -1197,7 +1197,7 @@ finish_return_stmt (tree expr)\n     {\n       /* Suppress -Wreturn-type for this function.  */\n       if (warn_return_type)\n-\tTREE_NO_WARNING (current_function_decl) = true;\n+\tsuppress_warning (current_function_decl, OPT_Wreturn_type);\n       return error_mark_node;\n     }\n \n@@ -1219,7 +1219,8 @@ finish_return_stmt (tree expr)\n     }\n \n   r = build_stmt (input_location, RETURN_EXPR, expr);\n-  TREE_NO_WARNING (r) |= no_warning;\n+  if (no_warning)\n+    suppress_warning (r, OPT_Wreturn_type);\n   r = maybe_cleanup_point_expr_void (r);\n   r = add_stmt (r);\n \n@@ -2105,7 +2106,7 @@ finish_parenthesized_expr (cp_expr expr)\n {\n   if (EXPR_P (expr))\n     /* This inhibits warnings in c_common_truthvalue_conversion.  */\n-    TREE_NO_WARNING (expr) = 1;\n+    suppress_warning (expr, OPT_Wparentheses);\n \n   if (TREE_CODE (expr) == OFFSET_REF\n       || TREE_CODE (expr) == SCOPE_REF)\n@@ -5979,12 +5980,12 @@ cp_check_omp_declare_reduction (tree udr)\n     {\n       gcc_assert (TREE_CODE (data.stmts[0]) == DECL_EXPR\n \t\t  && TREE_CODE (data.stmts[1]) == DECL_EXPR);\n-      if (TREE_NO_WARNING (DECL_EXPR_DECL (data.stmts[0])))\n+      if (warning_suppressed_p (DECL_EXPR_DECL (data.stmts[0]) /* What warning? */))\n \treturn true;\n       data.combiner_p = true;\n       if (cp_walk_tree (&data.stmts[2], cp_check_omp_declare_reduction_r,\n \t\t\t&data, NULL))\n-\tTREE_NO_WARNING (DECL_EXPR_DECL (data.stmts[0])) = 1;\n+\tsuppress_warning (DECL_EXPR_DECL (data.stmts[0]) /* What warning? */);\n     }\n   if (i >= 6)\n     {\n@@ -5995,7 +5996,7 @@ cp_check_omp_declare_reduction (tree udr)\n \t\t\t&data, NULL)\n \t  || cp_walk_tree (&DECL_INITIAL (DECL_EXPR_DECL (data.stmts[3])),\n \t\t\t   cp_check_omp_declare_reduction_r, &data, NULL))\n-\tTREE_NO_WARNING (DECL_EXPR_DECL (data.stmts[0])) = 1;\n+\tsuppress_warning (DECL_EXPR_DECL (data.stmts[0])  /* Wat warning? */);\n       if (i == 7)\n \tgcc_assert (TREE_CODE (data.stmts[6]) == DECL_EXPR);\n     }"}, {"sha": "2a14fa92ddb17a138077e5d9da86c73c51504f5f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -1127,7 +1127,7 @@ build_cplus_array_type (tree elt_type, tree index_type, int dependent)\n \n   /* Avoid spurious warnings with VLAs (c++/54583).  */\n   if (TYPE_SIZE (t) && EXPR_P (TYPE_SIZE (t)))\n-    TREE_NO_WARNING (TYPE_SIZE (t)) = 1;\n+    suppress_warning (TYPE_SIZE (t), OPT_Wunused);\n \n   /* Push these needs up to the ARRAY_TYPE so that initialization takes\n      place more easily.  */"}, {"sha": "a483e1f988d49d0858544b7f0137e7393726b3f2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65870e75616ee4359d1c13b99be794e6a577bc65/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=65870e75616ee4359d1c13b99be794e6a577bc65", "patch": "@@ -3326,10 +3326,7 @@ build_ptrmemfunc_access_expr (tree ptrmem, tree member_name)\n        member = DECL_CHAIN (member))\n     if (DECL_NAME (member) == member_name)\n       break;\n-  tree res = build_simple_component_ref (ptrmem, member);\n-\n-  TREE_NO_WARNING (res) = 1;\n-  return res;\n+  return build_simple_component_ref (ptrmem, member);\n }\n \n /* Given an expression PTR for a pointer, return an expression\n@@ -3443,7 +3440,7 @@ cp_build_indirect_ref_1 (location_t loc, tree ptr, ref_operator errorstring,\n \t  if (warn_strict_aliasing > 2\n \t      && cp_strict_aliasing_warning (EXPR_LOCATION (ptr),\n \t\t\t\t\t     type, TREE_OPERAND (ptr, 0)))\n-\t    TREE_NO_WARNING (ptr) = 1;\n+\t    suppress_warning (ptr, OPT_Wstrict_aliasing);\n \t}\n \n       if (VOID_TYPE_P (t))\n@@ -4068,7 +4065,7 @@ cp_build_function_call_vec (tree function, vec<tree, va_gc> **params,\n     {\n       tree c = extract_call_expr (ret);\n       if (TREE_CODE (c) == CALL_EXPR)\n-\tTREE_NO_WARNING (c) = 1;\n+\tsuppress_warning (c, OPT_Wnonnull);\n     }\n \n   if (allocated != NULL)\n@@ -4450,14 +4447,14 @@ warn_for_null_address (location_t location, tree op, tsubst_flags_t complain)\n   if (!warn_address\n       || (complain & tf_warning) == 0\n       || c_inhibit_evaluation_warnings != 0\n-      || TREE_NO_WARNING (op))\n+      || warning_suppressed_p (op, OPT_Waddress))\n     return;\n \n   tree cop = fold_for_warn (op);\n \n   if (TREE_CODE (cop) == ADDR_EXPR\n       && decl_with_nonnull_addr_p (TREE_OPERAND (cop, 0))\n-      && !TREE_NO_WARNING (cop))\n+      && !warning_suppressed_p (cop, OPT_Waddress))\n     warning_at (location, OPT_Waddress, \"the address of %qD will never \"\n \t\t\"be NULL\", TREE_OPERAND (cop, 0));\n \n@@ -4878,7 +4875,7 @@ cp_build_binary_op (const op_location_t &location,\n \t  else if (TREE_CODE (type0) == ARRAY_TYPE\n \t\t   && !char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type0)))\n \t\t   /* Set by finish_parenthesized_expr.  */\n-\t\t   && !TREE_NO_WARNING (op1)\n+\t\t   && !warning_suppressed_p (op1, OPT_Wsizeof_array_div)\n \t\t   && (complain & tf_warning))\n \t    maybe_warn_sizeof_array_div (location, first_arg, type0,\n \t\t\t\t\t op1, non_reference (type1));\n@@ -5297,7 +5294,7 @@ cp_build_binary_op (const op_location_t &location,\n \t  pfn0 = cp_fully_fold (pfn0);\n \t  /* Avoid -Waddress warnings (c++/64877).  */\n \t  if (TREE_CODE (pfn0) == ADDR_EXPR)\n-\t    TREE_NO_WARNING (pfn0) = 1;\n+\t    suppress_warning (pfn0, OPT_Waddress);\n \t  pfn1 = pfn_from_ptrmemfunc (op1);\n \t  pfn1 = cp_fully_fold (pfn1);\n \t  delta0 = delta_from_ptrmemfunc (op0);\n@@ -7062,7 +7059,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n                                             tf_warning_or_error);\n       arg = build2 (COMPOUND_EXPR, TREE_TYPE (real_result),\n \t\t    arg, real_result);\n-      TREE_NO_WARNING (arg) = 1;\n+      suppress_warning (arg /* What warning? */);\n       return arg;\n     }\n \n@@ -8978,7 +8975,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \n   TREE_SIDE_EFFECTS (result) = 1;\n   if (!plain_assign)\n-    TREE_NO_WARNING (result) = 1;\n+    suppress_warning (result, OPT_Wparentheses);\n \n  ret:\n   if (preeval)\n@@ -9022,7 +9019,7 @@ build_x_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t{\n \t  if (rval == error_mark_node)\n \t    return rval;\n-\t  TREE_NO_WARNING (rval) = 1;\n+\t  suppress_warning (rval /* What warning? */);\n \t  if (processing_template_decl)\n \t    {\n \t      if (overload != NULL_TREE)\n@@ -9629,13 +9626,13 @@ convert_for_assignment (tree type, tree rhs,\n   if (warn_parentheses\n       && TREE_CODE (type) == BOOLEAN_TYPE\n       && TREE_CODE (rhs) == MODIFY_EXPR\n-      && !TREE_NO_WARNING (rhs)\n+      && !warning_suppressed_p (rhs, OPT_Wparentheses)\n       && TREE_CODE (TREE_TYPE (rhs)) != BOOLEAN_TYPE\n       && (complain & tf_warning)\n       && warning_at (rhs_loc, OPT_Wparentheses,\n \t\t     \"suggest parentheses around assignment used as \"\n \t\t     \"truth value\"))\n-    TREE_NO_WARNING (rhs) = 1;\n+    suppress_warning (rhs, OPT_Wparentheses);\n \n   if (complain & tf_warning)\n     warn_for_address_or_pointer_of_packed_member (type, rhs);"}]}