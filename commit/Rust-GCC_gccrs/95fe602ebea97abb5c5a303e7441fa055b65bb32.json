{"sha": "95fe602ebea97abb5c5a303e7441fa055b65bb32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmZTYwMmViZWE5N2FiYjVjNWEzMDNlNzQ0MWZhMDU1YjY1YmIzMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-04-03T10:01:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-03T10:01:47Z"}, "message": "random: Remove, empty.\n\n2009-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/tr1_impl/random: Remove, empty.\n\t* include/tr1_impl/random.tcc: Likewise.\n\n\t* include/std/random: Minor clean-ups, formatting fixes, adjust\n\tcopyright years.\n\t* include/bits/random.tcc: Likewise.\n\t* include/bits/random.h: Likewise.\n\t* include/tr1/random: Likewise.\n\t* include/tr1/random.tcc: Likewise.\n\t* include/tr1/random.h: Likewise.\n\nFrom-SVN: r145493", "tree": {"sha": "65dc3a5d247b40517b02d7c53e1b71fbc7ab3d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65dc3a5d247b40517b02d7c53e1b71fbc7ab3d12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95fe602ebea97abb5c5a303e7441fa055b65bb32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fe602ebea97abb5c5a303e7441fa055b65bb32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fe602ebea97abb5c5a303e7441fa055b65bb32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fe602ebea97abb5c5a303e7441fa055b65bb32/comments", "author": null, "committer": null, "parents": [{"sha": "01e935c1d3f52076eb033c8c3692d77a89c0f7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e935c1d3f52076eb033c8c3692d77a89c0f7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e935c1d3f52076eb033c8c3692d77a89c0f7d9"}], "stats": {"total": 141, "additions": 53, "deletions": 88}, "files": [{"sha": "f0b1da6b2e1a6a6af9236265208cae019436f634", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=95fe602ebea97abb5c5a303e7441fa055b65bb32", "patch": "@@ -1,3 +1,16 @@\n+2009-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/tr1_impl/random: Remove, empty.\n+\t* include/tr1_impl/random.tcc: Likewise.\n+\n+\t* include/std/random: Minor clean-ups, formatting fixes, adjust\n+\tcopyright years.\n+\t* include/bits/random.tcc: Likewise.\n+\t* include/bits/random.h: Likewise.\n+\t* include/tr1/random: Likewise.\n+\t* include/tr1/random.tcc: Likewise.\n+\t* include/tr1/random.h: Likewise.\n+\n 2009-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/20_util/shared_ptr/thread/default_weaktoshared.cc:"}, {"sha": "33cf513a99202f9231ca18a36131f2b59f015dde", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=95fe602ebea97abb5c5a303e7441fa055b65bb32", "patch": "@@ -1,6 +1,6 @@\n // random number generation -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,7 +64,8 @@ namespace std\n   namespace __detail\n   {\n     template<typename _UIntType, size_t __w,\n-\t     bool = __w < static_cast<size_t>(std::numeric_limits<_UIntType>::digits)>\n+\t     bool = __w < static_cast<size_t>\n+\t\t\t  (std::numeric_limits<_UIntType>::digits)>\n       struct _Shift\n       { static const _UIntType __value = 0; };\n \n@@ -74,9 +75,13 @@ namespace std\n \n     // XXX need constexpr\n     template<typename _UIntType, size_t __w,\n-\t     bool = __w <static_cast<size_t>(std::numeric_limits<_UIntType>::digits)>\n+\t     bool = __w <static_cast<size_t>\n+\t\t\t (std::numeric_limits<_UIntType>::digits)>\n       struct _ShiftMin1\n-      { static const _UIntType __value = __gnu_cxx::__numeric_traits<_UIntType>::max; };\n+      { \n+\tstatic const _UIntType __value =\n+\t  __gnu_cxx::__numeric_traits<_UIntType>::max;\n+      };\n \n     template<typename _UIntType, size_t __w>\n       struct _ShiftMin1<_UIntType, __w, true>"}, {"sha": "022335adc178d8e3681f8cdb52f9f016021cbe06", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=95fe602ebea97abb5c5a303e7441fa055b65bb32", "patch": "@@ -1,6 +1,6 @@\n // random number generation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,14 +32,11 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#include <iostream>\n-#include <vector>\n #include <numeric>\n #include <algorithm>\n \n namespace std\n {\n-\n   /*\n    * (Further) implementation-space details.\n    */\n@@ -107,7 +104,7 @@ namespace std\n     seed(_UIntType __x0)\n     {\n       if ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n-       && (__detail::__mod<_UIntType, 1U, 0U, __m>(__x0) == 0U))\n+\t  && (__detail::__mod<_UIntType, 1U, 0U, __m>(__x0) == 0U))\n \t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n       else\n \t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__x0);\n@@ -150,7 +147,7 @@ namespace std\n       {\n \t_UIntType __x0 = __g();\n \tif ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n-\t && (__detail::__mod<_UIntType, 1U, 0U, __m>(__x0) == 0U))\n+\t    && (__detail::__mod<_UIntType, 1U, 0U, __m>(__x0) == 0U))\n \t  _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n \telse\n \t  _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__x0);\n@@ -181,9 +178,7 @@ namespace std\n \n       const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n-      __os.flags(__ios_base::dec\n-\t       | __ios_base::fixed\n-\t       | __ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__os.widen(' '));\n \n       __os << __lcr._M_x;\n@@ -347,9 +342,7 @@ namespace std\n       const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec\n-\t       | __ios_base::fixed\n-\t       | __ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__space);\n \n       for (size_t __i = 0; __i < __n - 1; ++__i)\n@@ -487,9 +480,7 @@ namespace std\n       const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec\n-\t       | __ios_base::fixed\n-\t       | __ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__space);\n \n       for (size_t __i = 0; __i < __r; ++__i)\n@@ -550,9 +541,7 @@ namespace std\n       const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec\n-\t       | __ios_base::fixed\n-\t       | __ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__space);\n \n       __os << __x.base() << __space << __x._M_n;\n@@ -653,9 +642,7 @@ namespace std\n       const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec\n-\t       | __ios_base::fixed\n-\t       | __ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__space);\n \n       __os << __x.base();\n@@ -2331,9 +2318,7 @@ namespace std\n     piecewise_constant_distribution<_RealType>::param_type::\n     param_type()\n     : _M_int(), _M_den(), _M_cp()\n-    {\n-      _M_initialize();\n-    }\n+    { _M_initialize(); }\n \n   template<typename _RealType>\n     template<typename _InputIteratorB, typename _InputIteratorW>\n@@ -2532,9 +2517,7 @@ namespace std\n     piecewise_linear_distribution<_RealType>::param_type::\n     param_type()\n     : _M_int(), _M_den(), _M_cp(), _M_m()\n-    {\n-      _M_initialize();\n-    }\n+    { _M_initialize(); }\n \n   template<typename _RealType>\n     template<typename _InputIteratorB, typename _InputIteratorW>\n@@ -2790,5 +2773,4 @@ namespace std\n \t}\n       return __sum / __tmp;\n     }\n-\n }"}, {"sha": "ad79a87e82f99fc08e2d8b4c005dfcf85fe9bef0", "filename": "libstdc++-v3/include/std/random", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom?ref=95fe602ebea97abb5c5a303e7441fa055b65bb32", "patch": "@@ -1,6 +1,6 @@\n // <random> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,10 +40,6 @@\n # include <c++0x_warning.h>\n #else\n \n-#if defined(_GLIBCXX_INCLUDE_AS_TR1)\n-#  error C++0x header cannot be included from TR1 header\n-#endif\n-\n #include <cmath>\n #include <cstdio>\n #include <cstdlib>"}, {"sha": "f420b2feeba48d6ae20cea963d46f389bae4f36c", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=95fe602ebea97abb5c5a303e7441fa055b65bb32", "patch": "@@ -1,6 +1,6 @@\n // random number generation -*- C++ -*-\n \n-// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,10 +37,6 @@\n \n #pragma GCC system_header\n \n-#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n-#  error TR1 header cannot be included from C++0x header\n-#endif\n-\n #include <cmath>\n #include <cstdio>\n #include <cstdlib>\n@@ -54,14 +50,10 @@\n #include <tr1/type_traits>\n #include <tr1/cmath>\n \n-#if defined(_GLIBCXX_INCLUDE_AS_TR1)\n-#  include <tr1/random.h>\n-#else\n-#  define _GLIBCXX_INCLUDE_AS_TR1\n-#  define _GLIBCXX_TR1 tr1::\n-#  include <tr1/random.h>\n-#  undef _GLIBCXX_TR1\n-#  undef _GLIBCXX_INCLUDE_AS_TR1\n+#include <tr1/random.h>\n+\n+#ifndef _GLIBCXX_EXPORT_TEMPLATE\n+# include <tr1/random.tcc>\n #endif\n \n #endif // _GLIBCXX_TR1_RANDOM"}, {"sha": "f2c39ba5f587db1749bf91014ab3270b8b1b4543", "filename": "libstdc++-v3/include/tr1/random.h", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h?ref=95fe602ebea97abb5c5a303e7441fa055b65bb32", "patch": "@@ -1,6 +1,6 @@\n // random number generation -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,28 +38,10 @@\n \n #pragma GCC system_header\n \n-#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n-#  error TR1 header cannot be included from C++0x header\n-#endif\n-\n-#include <cmath>\n-#include <cstdio>\n-#include <cstdlib>\n-#include <string>\n-#include <iosfwd>\n-#include <limits>\n-#include <ext/type_traits.h>\n-#include <ext/numeric_traits.h>\n-#include <bits/concept_check.h>\n-#include <debug/debug.h>\n-#include <tr1/type_traits>\n-#include <tr1/cmath>\n-\n namespace std\n {\n namespace tr1\n {\n-\n   // [5.1] Random number generation\n \n   /**\n@@ -2427,10 +2409,7 @@ namespace tr1\n   /* @} */ // group tr1_random_distributions_continuous\n   /* @} */ // group tr1_random_distributions\n   /* @} */ // group tr1_random\n-\n }\n }\n \n-#include <tr1/random.tcc>\n-\n #endif // _GLIBCXX_TR1_RANDOM_H"}, {"sha": "5ec7bfe80053653364e27f687cae10f9274cf6ba", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fe602ebea97abb5c5a303e7441fa055b65bb32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=95fe602ebea97abb5c5a303e7441fa055b65bb32", "patch": "@@ -1,6 +1,6 @@\n // random number generation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,6 @@ namespace std\n {\n namespace tr1\n {\n-\n   /*\n    * (Further) implementation-space details.\n    */\n@@ -324,7 +323,7 @@ namespace tr1\n       if (__value == 0)\n \t__value = 19780503;\n \n-      std::_GLIBCXX_TR1 linear_congruential<unsigned long, 40014, 0, 2147483563>\n+      std::tr1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n \t__lcg(__value);\n \n       for (int __i = 0; __i < long_lag; ++__i)\n@@ -443,7 +442,7 @@ namespace tr1\n     {\n       for (int __j = 0; __j < __n; ++__j)\n #if _GLIBCXX_USE_C99_MATH_TR1\n-\t_M_npows[__j] = std::_GLIBCXX_TR1 ldexp(_RealType(1), -__w + __j * 32);\n+\t_M_npows[__j] = std::tr1::ldexp(_RealType(1), -__w + __j * 32);\n #else\n         _M_npows[__j] = std::pow(_RealType(2), -__w + __j * 32);\n #endif\n@@ -459,7 +458,7 @@ namespace tr1\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 512. Seeding subtract_with_carry_01 from a single unsigned long.\n-      std::_GLIBCXX_TR1 linear_congruential<unsigned long, 40014, 0, 2147483563>\n+      std::tr1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n \t__lcg(__value);\n \n       this->seed(__lcg);\n@@ -905,14 +904,14 @@ namespace tr1\n \t{\n \t  const _RealType __m = std::floor(_M_mean);\n \t  _M_lm_thr = std::log(_M_mean);\n-\t  _M_lfm = std::_GLIBCXX_TR1 lgamma(__m + 1);\n+\t  _M_lfm = std::tr1::lgamma(__m + 1);\n \t  _M_sm = std::sqrt(__m);\n \n \t  const _RealType __pi_4 = 0.7853981633974483096156608458198757L;\n \t  const _RealType __dx = std::sqrt(2 * __m * std::log(32 * __m\n \t\t\t\t\t\t\t      / __pi_4));\n-\t  _M_d = std::_GLIBCXX_TR1 round(std::max(_RealType(6),\n-\t\t\t\t\t\t  std::min(__m, __dx)));\n+\t  _M_d = std::tr1::round(std::max(_RealType(6),\n+\t\t\t\t\t  std::min(__m, __dx)));\n \t  const _RealType __cx = 2 * __m + _M_d;\n \t  _M_scx = std::sqrt(__cx / 2);\n \t  _M_1cx = 1 / __cx;\n@@ -1008,7 +1007,7 @@ namespace tr1\n \t\t  }\n \n \t\t__reject = (__w - __e - __x * _M_lm_thr\n-\t\t\t    > _M_lfm - std::_GLIBCXX_TR1 lgamma(__x + __m + 1));\n+\t\t\t    > _M_lfm - std::tr1::lgamma(__x + __m + 1));\n \n \t\t__reject |= __x + __m >= __thr;\n \n@@ -1099,11 +1098,11 @@ namespace tr1\n \t  const _RealType __d1x =\n \t    std::sqrt(__np * __1p * std::log(32 * __np\n \t\t\t\t\t     / (81 * __pi_4 * __1p)));\n-\t  _M_d1 = std::_GLIBCXX_TR1 round(std::max(_RealType(1), __d1x));\n+\t  _M_d1 = std::tr1::round(std::max(_RealType(1), __d1x));\n \t  const _RealType __d2x =\n \t    std::sqrt(__np * __1p * std::log(32 * _M_t * __1p\n \t\t\t\t\t     / (__pi_4 * __pa)));\n-\t  _M_d2 = std::_GLIBCXX_TR1 round(std::max(_RealType(1), __d2x));\n+\t  _M_d2 = std::tr1::round(std::max(_RealType(1), __d2x));\n \t  \n \t  // sqrt(pi / 2)\n \t  const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n@@ -1119,8 +1118,8 @@ namespace tr1\n \t  const _RealType __s2s = _M_s2 * _M_s2;\n \t  _M_s = (_M_a123 + 2 * __s2s / _M_d2\n \t\t  * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));\n-\t  _M_lf = (std::_GLIBCXX_TR1 lgamma(__np + 1)\n-\t\t   + std::_GLIBCXX_TR1 lgamma(_M_t - __np + 1));\n+\t  _M_lf = (std::tr1::lgamma(__np + 1)\n+\t\t   + std::tr1::lgamma(_M_t - __np + 1));\n \t  _M_lp1p = std::log(__pa / __1p);\n \n \t  _M_q = -std::log(1 - (__p12 - __pa) / __1p);\n@@ -1248,8 +1247,8 @@ namespace tr1\n \t\tif (!__reject)\n \t\t  {\n \t\t    const _RealType __lfx =\n-\t\t      std::_GLIBCXX_TR1 lgamma(__np + __x + 1)\n-\t\t      + std::_GLIBCXX_TR1 lgamma(_M_t - (__np + __x) + 1);\n+\t\t      std::tr1::lgamma(__np + __x + 1)\n+\t\t      + std::tr1::lgamma(_M_t - (__np + __x) + 1);\n \t\t    __reject = __v > _M_lf - __lfx + __x * _M_lp1p;\n \t\t  }\n \n@@ -1578,6 +1577,5 @@ namespace tr1\n       __os.precision(__precision);\n       return __os;\n     }\n-\n }\n }"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/include/tr1_impl/random", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e935c1d3f52076eb033c8c3692d77a89c0f7d9/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e935c1d3f52076eb033c8c3692d77a89c0f7d9/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom?ref=01e935c1d3f52076eb033c8c3692d77a89c0f7d9"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/include/tr1_impl/random.tcc", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e935c1d3f52076eb033c8c3692d77a89c0f7d9/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e935c1d3f52076eb033c8c3692d77a89c0f7d9/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc?ref=01e935c1d3f52076eb033c8c3692d77a89c0f7d9"}]}