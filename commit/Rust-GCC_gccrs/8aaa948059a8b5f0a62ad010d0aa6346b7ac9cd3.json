{"sha": "8aaa948059a8b5f0a62ad010d0aa6346b7ac9cd3", "node_id": "C_kwDOANBUbNoAKDhhYWE5NDgwNTlhOGI1ZjBhNjJhZDAxMGQwYWE2MzQ2YjdhYzljZDM", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2022-06-15T15:07:20Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2022-06-15T15:09:01Z"}, "message": "arm: big-endian issue in gen_cpymem_ldrd_strd [PR105981]\n\nThe code in gen_cpymem_ldrd_strd has been incorrect for big-endian\nsince r230663.  The problem is that we use gen_lowpart, etc. to split\nthe 64-bit quantity, but fail to account for the fact that these\nroutines are really dealing with 64-bit /values/ and in big-endian the\nordering of the sub-registers changes.\n\nTo fix this, I've renamed the conceptually misnamed low_reg and hi_reg\nas first_reg and second_reg, and then used different logic for\nbig-endian targets to initialize these values.  This makes the logic\nclearer than trying to think about high bits and low bits.\n\ngcc/ChangeLog:\n\n\tPR target/105981\n\t* config/arm/arm.cc (gen_cpymem_ldrd_strd): Rename low_reg and hi_reg\n\tto first_reg and second_reg respectively.  Initialize them correctly\n\twhen generating big-endian code.", "tree": {"sha": "ef1385bb8f226204f411e4f2c159e53171a41764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef1385bb8f226204f411e4f2c159e53171a41764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aaa948059a8b5f0a62ad010d0aa6346b7ac9cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aaa948059a8b5f0a62ad010d0aa6346b7ac9cd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aaa948059a8b5f0a62ad010d0aa6346b7ac9cd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aaa948059a8b5f0a62ad010d0aa6346b7ac9cd3/comments", "author": null, "committer": null, "parents": [{"sha": "052d89537a4c09e1e1437042e2d1ea215656325f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052d89537a4c09e1e1437042e2d1ea215656325f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052d89537a4c09e1e1437042e2d1ea215656325f"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "2925907b4367822078c3e772b84e9ebe7b7dd685", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaa948059a8b5f0a62ad010d0aa6346b7ac9cd3/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaa948059a8b5f0a62ad010d0aa6346b7ac9cd3/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=8aaa948059a8b5f0a62ad010d0aa6346b7ac9cd3", "patch": "@@ -15744,23 +15744,31 @@ gen_cpymem_ldrd_strd (rtx *operands)\n     {\n       len -= 8;\n       reg0 = gen_reg_rtx (DImode);\n-      rtx low_reg = NULL_RTX;\n-      rtx hi_reg = NULL_RTX;\n+      rtx first_reg = NULL_RTX;\n+      rtx second_reg = NULL_RTX;\n \n       if (!src_aligned || !dst_aligned)\n \t{\n-\t  low_reg = gen_lowpart (SImode, reg0);\n-\t  hi_reg = gen_highpart_mode (SImode, DImode, reg0);\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    {\n+\t      second_reg = gen_lowpart (SImode, reg0);\n+\t      first_reg = gen_highpart_mode (SImode, DImode, reg0);\n+\t    }\n+\t  else\n+\t    {\n+\t      first_reg = gen_lowpart (SImode, reg0);\n+\t      second_reg = gen_highpart_mode (SImode, DImode, reg0);\n+\t    }\n \t}\n       if (MEM_ALIGN (src) >= 2 * BITS_PER_WORD)\n \temit_move_insn (reg0, src);\n       else if (src_aligned)\n \temit_insn (gen_unaligned_loaddi (reg0, src));\n       else\n \t{\n-\t  emit_insn (gen_unaligned_loadsi (low_reg, src));\n+\t  emit_insn (gen_unaligned_loadsi (first_reg, src));\n \t  src = next_consecutive_mem (src);\n-\t  emit_insn (gen_unaligned_loadsi (hi_reg, src));\n+\t  emit_insn (gen_unaligned_loadsi (second_reg, src));\n \t}\n \n       if (MEM_ALIGN (dst) >= 2 * BITS_PER_WORD)\n@@ -15769,9 +15777,9 @@ gen_cpymem_ldrd_strd (rtx *operands)\n \temit_insn (gen_unaligned_storedi (dst, reg0));\n       else\n \t{\n-\t  emit_insn (gen_unaligned_storesi (dst, low_reg));\n+\t  emit_insn (gen_unaligned_storesi (dst, first_reg));\n \t  dst = next_consecutive_mem (dst);\n-\t  emit_insn (gen_unaligned_storesi (dst, hi_reg));\n+\t  emit_insn (gen_unaligned_storesi (dst, second_reg));\n \t}\n \n       src = next_consecutive_mem (src);"}]}