{"sha": "ee1379be56bcb47ee8dba5f8e31f1d090fecc210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxMzc5YmU1NmJjYjQ3ZWU4ZGJhNWY4ZTMxZjFkMDkwZmVjYzIxMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-31T07:09:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-31T07:09:21Z"}, "message": "re PR tree-optimization/80906 (ICE in copy_loop_close_phi_args, at graphite-isl-ast-to-gimple.c:2094)\n\n2017-05-31  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80906\n\t* graphite-isl-ast-to-gimple.c (copy_loop_close_phi_nodes): Get\n\tand pass through iv_map.\n\t(copy_bb_and_scalar_dependences): Adjust.\n\t(translate_pending_phi_nodes): Likewise.\n\t(copy_loop_close_phi_args): Handle code-generating IVs instead\n\tof ICEing.\n\n\t* gcc.dg/graphite/pr80906.c: New testcase.\n\nFrom-SVN: r248722", "tree": {"sha": "435114c9973c8acc7397ce6c3f718625b2b9bfcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/435114c9973c8acc7397ce6c3f718625b2b9bfcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee1379be56bcb47ee8dba5f8e31f1d090fecc210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1379be56bcb47ee8dba5f8e31f1d090fecc210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1379be56bcb47ee8dba5f8e31f1d090fecc210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63d9caf9040df6bc190328353499b1f8e36c8201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d9caf9040df6bc190328353499b1f8e36c8201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d9caf9040df6bc190328353499b1f8e36c8201"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "8429b46d638a42d1c0a89c5b2a3e74c48979697e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee1379be56bcb47ee8dba5f8e31f1d090fecc210", "patch": "@@ -1,3 +1,13 @@\n+2017-05-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80906\n+\t* graphite-isl-ast-to-gimple.c (copy_loop_close_phi_nodes): Get\n+\tand pass through iv_map.\n+\t(copy_bb_and_scalar_dependences): Adjust.\n+\t(translate_pending_phi_nodes): Likewise.\n+\t(copy_loop_close_phi_args): Handle code-generating IVs instead\n+\tof ICEing.\n+\n 2017-05-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-color.c (color_dict): Add \"type-diff\"."}, {"sha": "5b2bc1c399f7836edf9377c3a5a28d357724206a", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=ee1379be56bcb47ee8dba5f8e31f1d090fecc210", "patch": "@@ -229,8 +229,9 @@ class translate_isl_ast_to_gimple\n   tree add_close_phis_to_outer_loops (tree last_merge_name, edge merge_e,\n \t\t\t\t      gimple *old_close_phi);\n   bool copy_loop_close_phi_args (basic_block old_bb, basic_block new_bb,\n-\t\t\t\t bool postpone);\n-  bool copy_loop_close_phi_nodes (basic_block old_bb, basic_block new_bb);\n+\t\t\t\t vec<tree> iv_map, bool postpone);\n+  bool copy_loop_close_phi_nodes (basic_block old_bb, basic_block new_bb,\n+\t\t\t\t  vec<tree> iv_map);\n   bool copy_cond_phi_args (gphi *phi, gphi *new_phi, vec<tree> iv_map,\n \t\t\t   bool postpone);\n   bool copy_cond_phi_nodes (basic_block bb, basic_block new_bb,\n@@ -2079,7 +2080,8 @@ add_close_phis_to_merge_points (gphi *old_close_phi, gphi *new_close_phi,\n /* Copy all the loop-close phi args from BB to NEW_BB.  */\n \n bool translate_isl_ast_to_gimple::\n-copy_loop_close_phi_args (basic_block old_bb, basic_block new_bb, bool postpone)\n+copy_loop_close_phi_args (basic_block old_bb, basic_block new_bb,\n+\t\t\t  vec<tree> iv_map, bool postpone)\n {\n   for (gphi_iterator psi = gsi_start_phis (old_bb); !gsi_end_p (psi);\n        gsi_next (&psi))\n@@ -2089,22 +2091,29 @@ copy_loop_close_phi_args (basic_block old_bb, basic_block new_bb, bool postpone)\n       if (virtual_operand_p (res))\n \tcontinue;\n \n-      if (is_gimple_reg (res) && scev_analyzable_p (res, region->region))\n-\t/* Loop close phi nodes should not be scev_analyzable_p.  */\n-\tgcc_unreachable ();\n-\n       gphi *new_close_phi = create_phi_node (NULL_TREE, new_bb);\n       tree new_res = create_new_def_for (res, new_close_phi,\n \t\t\t\t\t gimple_phi_result_ptr (new_close_phi));\n       set_rename (res, new_res);\n \n       tree old_name = gimple_phi_arg_def (old_close_phi, 0);\n-      tree new_name = get_new_name (new_bb, old_name, old_bb, close_phi);\n+      tree new_name;\n+      if (is_gimple_reg (res) && scev_analyzable_p (res, region->region))\n+\t{\n+\t  gimple_seq stmts;\n+\t  new_name = get_rename_from_scev (old_name, &stmts,\n+\t\t\t\t\t   old_bb->loop_father,\n+\t\t\t\t\t   new_bb, old_bb, iv_map);\n+\t  if (! codegen_error_p ())\n+\t    gsi_insert_earliest (stmts);\n+\t}\n+      else\n+\tnew_name = get_new_name (new_bb, old_name, old_bb, close_phi);\n \n       /* Predecessor basic blocks of a loop close phi should have been code\n \t generated before.  FIXME: This is fixable by merging PHIs from inner\n \t loops as well.  See: gfortran.dg/graphite/interchange-3.f90.  */\n-      if (!new_name)\n+      if (!new_name || codegen_error_p ())\n \treturn false;\n \n       add_phi_arg (new_close_phi, new_name, single_pred_edge (new_bb),\n@@ -2152,15 +2161,16 @@ copy_loop_close_phi_args (basic_block old_bb, basic_block new_bb, bool postpone)\n /* Copy loop close phi nodes from BB to NEW_BB.  */\n \n bool translate_isl_ast_to_gimple::\n-copy_loop_close_phi_nodes (basic_block old_bb, basic_block new_bb)\n+copy_loop_close_phi_nodes (basic_block old_bb, basic_block new_bb,\n+\t\t\t   vec<tree> iv_map)\n {\n   if (dump_file)\n     fprintf (dump_file, \"[codegen] copying loop close phi nodes in bb_%d.\\n\",\n \t     new_bb->index);\n   /* Loop close phi nodes should have only one argument.  */\n   gcc_assert (1 == EDGE_COUNT (old_bb->preds));\n \n-  return copy_loop_close_phi_args (old_bb, new_bb, true);\n+  return copy_loop_close_phi_args (old_bb, new_bb, iv_map, true);\n }\n \n \n@@ -2690,7 +2700,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n       gcc_assert (single_pred_edge (phi_bb)->src->loop_father\n \t\t  != single_pred_edge (phi_bb)->dest->loop_father);\n \n-      if (!copy_loop_close_phi_nodes (bb, phi_bb))\n+      if (!copy_loop_close_phi_nodes (bb, phi_bb, iv_map))\n \t{\n \t  codegen_error = true;\n \t  return NULL;\n@@ -2824,7 +2834,7 @@ translate_pending_phi_nodes ()\n \tcodegen_error = !copy_loop_phi_args (old_phi, ibp_old_bb, new_phi,\n \t\t\t\t\t    ibp_new_bb, false);\n       else if (bb_contains_loop_close_phi_nodes (new_bb))\n-\tcodegen_error = !copy_loop_close_phi_args (old_bb, new_bb, false);\n+\tcodegen_error = !copy_loop_close_phi_args (old_bb, new_bb, iv_map, false);\n       else\n \tcodegen_error = !copy_cond_phi_args (old_phi, new_phi, iv_map, false);\n "}, {"sha": "e336489188c5e62ba4e4f8173571f380d9eaf3db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee1379be56bcb47ee8dba5f8e31f1d090fecc210", "patch": "@@ -1,3 +1,8 @@\n+2017-05-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80906\n+\t* gcc.dg/graphite/pr80906.c: New testcase.\n+\n 2017-05-30  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/80910"}, {"sha": "59c7f59cadffcc175fbde16c4f83310e2c103131", "filename": "gcc/testsuite/gcc.dg/graphite/pr80906.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr80906.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1379be56bcb47ee8dba5f8e31f1d090fecc210/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr80906.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr80906.c?ref=ee1379be56bcb47ee8dba5f8e31f1d090fecc210", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -floop-nest-optimize -fdump-tree-graphite\" } */\n+\n+int qc;\n+\n+int\n+ec (int lh[][2])\n+{\n+  const int jv = 3;\n+  int zf, hp, c5 = 0, m3 = 1;\n+\n+  for (zf = 0; zf < jv; ++zf)\n+    for (hp = 0; hp < jv; ++hp)\n+      {\n+\tshort int bm = 0;\n+\n+\tfor (qc = 0; qc < jv; ++qc)\n+\t  --bm;\n+\tif (bm != 0)\n+\t  --c5;\n+\tlh[0][0] = 0;\n+\tm3 *= jv;\n+      }\n+\n+  return c5 + m3;\n+}\n+\n+/* { dg-final { scan-tree-dump \"isl AST to Gimple succeeded\" \"graphite\" } } */"}]}