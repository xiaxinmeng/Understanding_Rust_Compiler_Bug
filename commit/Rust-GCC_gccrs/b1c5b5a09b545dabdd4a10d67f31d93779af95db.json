{"sha": "b1c5b5a09b545dabdd4a10d67f31d93779af95db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjNWI1YTA5YjU0NWRhYmRkNGExMGQ2N2YzMWQ5Mzc3OWFmOTVkYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-05-24T09:40:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-05-24T09:40:56Z"}, "message": "istream.tcc (ignore): Correctly deal with n == numeric_limits<streamsize>::max().\n\n2004-05-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/istream.tcc (ignore): Correctly deal with\n\tn == numeric_limits<streamsize>::max().\n\t* testsuite/27_io/basic_istream/ignore/char/2.cc: New.\n\n\t* include/bits/istream.tcc (basic_istream<>::getline): Prefer\n\t'_M_gcount + 1 < __n' to '--__n; _M_gcount < __n', just in case\n\t__n == numeric_limits<>::min().\n\n\t* include/bits/istream.tcc: Minor tweaks.\n\n\t* testsuite/21_strings/basic_string/inserters_extractors/char/10.cc:\n\tTighten.\n\t* testsuite/21_strings/basic_string/inserters_extractors/char/11.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/10.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/11.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_istream/getline/char/5.cc: Likewise.\n\nFrom-SVN: r82198", "tree": {"sha": "79ba3633dbe2257f27c56750bac1f66555500dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ba3633dbe2257f27c56750bac1f66555500dab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1c5b5a09b545dabdd4a10d67f31d93779af95db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c5b5a09b545dabdd4a10d67f31d93779af95db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c5b5a09b545dabdd4a10d67f31d93779af95db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c5b5a09b545dabdd4a10d67f31d93779af95db/comments", "author": null, "committer": null, "parents": [{"sha": "76391e5a045593f4cdc97535246ffafe2a5ecd72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76391e5a045593f4cdc97535246ffafe2a5ecd72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76391e5a045593f4cdc97535246ffafe2a5ecd72"}], "stats": {"total": 174, "additions": 150, "deletions": 24}, "files": [{"sha": "8673f258a6502bef6e73dda9689cefcdbbf6604d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b1c5b5a09b545dabdd4a10d67f31d93779af95db", "patch": "@@ -1,3 +1,25 @@\n+2004-05-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/istream.tcc (ignore): Correctly deal with\n+\tn == numeric_limits<streamsize>::max().\n+\t* testsuite/27_io/basic_istream/ignore/char/2.cc: New.\n+\n+\t* include/bits/istream.tcc (basic_istream<>::getline): Prefer\n+\t'_M_gcount + 1 < __n' to '--__n; _M_gcount < __n', just in case\n+\t__n == numeric_limits<>::min().\n+\n+\t* include/bits/istream.tcc: Minor tweaks.\n+\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/10.cc:\n+\tTighten.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/11.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/10.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/11.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/getline/char/5.cc: Likewise.\n+\n 2004-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/12854"}, {"sha": "6417e951f03a0e0fee5609749103cddc4550275d", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=b1c5b5a09b545dabdd4a10d67f31d93779af95db", "patch": "@@ -519,8 +519,8 @@ namespace std\n \t\t     && !traits_type::eq_int_type(__c, __idelim))\n \t\t{\n \t\t  *__s++ = traits_type::to_char_type(__c);\n-\t\t  __c = __sb->snextc();\n \t\t  ++_M_gcount;\n+\t\t  __c = __sb->snextc();\n \t\t}\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n@@ -591,15 +591,14 @@ namespace std\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n-\t      --__n;\n \t      \n-\t      while (_M_gcount < __n\n+\t      while (_M_gcount + 1 < __n\n \t\t     && !traits_type::eq_int_type(__c, __eof)\n \t\t     && !traits_type::eq_int_type(__c, __idelim))\n \t\t{\n \t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n \t\t\t\t\t\t\t  - __sb->gptr()),\n-\t\t\t\t\t       __n - _M_gcount);\n+\t\t\t\t\t       __n - _M_gcount - 1);\n \t\t  if (__size > 1)\n \t\t    {\n \t\t      const char_type* __p = traits_type::find(__sb->gptr(),\n@@ -616,17 +615,17 @@ namespace std\n \t\t  else\n \t\t    {\n \t\t      *__s++ = traits_type::to_char_type(__c);\n-\t\t      __c = __sb->snextc();\n \t\t      ++_M_gcount;\n+\t\t      __c = __sb->snextc();\n \t\t    }\n \t\t}\n \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __idelim))\n \t\t{\n+\t\t  ++_M_gcount;\t\t  \n \t\t  __sb->sbumpc();\n-\t\t  ++_M_gcount;\n \t\t}\n \t      else\n \t\t__err |= ios_base::failbit;\n@@ -658,7 +657,9 @@ namespace std\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c;\n \n-\t      while (_M_gcount < __n\n+\t      if (__n != numeric_limits<streamsize>::max())\n+\t\t--__n;\n+\t      while (_M_gcount <= __n\n \t\t     && !traits_type::eq_int_type(__c = __sb->sbumpc(), __eof))\n \t\t{\n \t\t  ++_M_gcount;\n@@ -1101,7 +1102,6 @@ namespace std\n \n       __size_type __extracted = 0;\n       const __size_type __n = __str.max_size();\n-      bool __testdelim = false;\n       ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       typename __istream_type::sentry __cerb(__in, true);\n       if (__cerb)\n@@ -1136,8 +1136,8 @@ namespace std\n \t\t__err |= ios_base::eofbit;\n \t      else if (_Traits::eq_int_type(__c, __idelim))\n \t\t{\n+\t\t  ++__extracted;\t\t  \n \t\t  __sb->sbumpc();\n-\t\t  ++__extracted;\n \t\t}\n \t      else\n \t\t__err |= ios_base::failbit;"}, {"sha": "4822b6b2916a5c65f80d08f76836c06d41f702ca", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/10.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F10.cc?ref=b1c5b5a09b545dabdd4a10d67f31d93779af95db", "patch": "@@ -38,20 +38,23 @@ string prepare(string::size_type len, unsigned nchunks, char delim)\n   return ret;\n }\n \n-void check(istream& stream, const string& str, char delim)\n+void check(istream& stream, const string& str, unsigned nchunks, char delim)\n {\n   bool test __attribute__((unused)) = true;\n \n   string chunk;\n   string::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n \n   while (getline(stream, chunk, delim))\n     {\n       index_new = str.find(delim, index);\n       VERIFY( !str.compare(index, index_new - index, chunk) );\n       index = index_new + 1;\n+      ++n;\n     }\n   VERIFY( stream.eof() );\n+  VERIFY( n == nchunks );\n }\n \n // istream& getline(istream&, string&, char)\n@@ -60,7 +63,8 @@ void test01()\n   const char filename[] = \"inserters_extractors-2.txt\";\n \n   const char delim = '|';\n-  const string data = prepare(777, 10, delim);\n+  const unsigned nchunks = 10;\n+  const string data = prepare(777, nchunks, delim);\n \n   ofstream ofstrm;\n   ofstrm.open(filename);\n@@ -69,7 +73,7 @@ void test01()\n \n   ifstream ifstrm;\n   ifstrm.open(filename);\n-  check(ifstrm, data, delim);\n+  check(ifstrm, data, nchunks, delim);\n   ifstrm.close();\n }\n "}, {"sha": "e60c441110ba302f7f943e254d02f35274027ff1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/11.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F11.cc?ref=b1c5b5a09b545dabdd4a10d67f31d93779af95db", "patch": "@@ -38,28 +38,32 @@ string prepare(string::size_type len, unsigned nchunks)\n   return ret;\n }\n \n-void check(istream& stream, const string& str)\n+void check(istream& stream, const string& str, unsigned nchunks)\n {\n   bool test __attribute__((unused)) = true;\n \n   string chunk;\n   string::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n \n   while (stream >> chunk)\n     {\n       index_new = str.find(' ', index);\n       VERIFY( !str.compare(index, index_new - index, chunk) );\n       index = index_new + 1;\n+      ++n;\n     }\n   VERIFY( stream.eof() );\n+  VERIFY( n == nchunks );  \n }\n \n // istream& operator>>(istream&, string&)\n void test01()\n {\n   const char filename[] = \"inserters_extractors-3.txt\";\n \n-  const string data = prepare(666, 10);\n+  const unsigned nchunks = 10;\n+  const string data = prepare(666, nchunks);\n \n   ofstream ofstrm;\n   ofstrm.open(filename);\n@@ -68,7 +72,7 @@ void test01()\n \n   ifstream ifstrm;\n   ifstrm.open(filename);\n-  check(ifstrm, data);\n+  check(ifstrm, data, nchunks);\n   ifstrm.close();\n }\n "}, {"sha": "ba6bbaf31fa4b7a20c01b00576f99fe21a5dee69", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/10.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F10.cc?ref=b1c5b5a09b545dabdd4a10d67f31d93779af95db", "patch": "@@ -38,20 +38,23 @@ wstring prepare(wstring::size_type len, unsigned nchunks, wchar_t delim)\n   return ret;\n }\n \n-void check(wistream& stream, const wstring& str, wchar_t delim)\n+void check(wistream& stream, const wstring& str, unsigned nchunks, wchar_t delim)\n {\n   bool test __attribute__((unused)) = true;\n \n   wstring chunk;\n   wstring::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n \n   while (getline(stream, chunk, delim))\n     {\n       index_new = str.find(delim, index);\n       VERIFY( !str.compare(index, index_new - index, chunk) );\n       index = index_new + 1;\n+      ++n;\n     }\n   VERIFY( stream.eof() );\n+  VERIFY( n == nchunks );\n }\n \n // istream& getline(istream&, string&, char)\n@@ -60,7 +63,8 @@ void test01()\n   const char filename[] = \"inserters_extractors-2.txt\";\n \n   const wchar_t delim = L'|';\n-  const wstring data = prepare(777, 10, delim);\n+  const unsigned nchunks = 10;\n+  const wstring data = prepare(777, nchunks, delim);\n \n   wofstream ofstrm;\n   ofstrm.open(filename);\n@@ -69,7 +73,7 @@ void test01()\n \n   wifstream ifstrm;\n   ifstrm.open(filename);\n-  check(ifstrm, data, delim);\n+  check(ifstrm, data, nchunks, delim);\n   ifstrm.close();\n }\n "}, {"sha": "66fae676d7a0b6b8f8fdd65f5ec97400b3907d7a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/11.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F11.cc?ref=b1c5b5a09b545dabdd4a10d67f31d93779af95db", "patch": "@@ -38,28 +38,32 @@ wstring prepare(wstring::size_type len, unsigned nchunks)\n   return ret;\n }\n \n-void check(wistream& stream, const wstring& str)\n+void check(wistream& stream, const wstring& str, unsigned nchunks)\n {\n   bool test __attribute__((unused)) = true;\n \n   wstring chunk;\n   wstring::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n \n   while (stream >> chunk)\n     {\n       index_new = str.find(L' ', index);\n       VERIFY( !str.compare(index, index_new - index, chunk) );\n       index = index_new + 1;\n+      ++n;\n     }\n   VERIFY( stream.eof() );\n+  VERIFY( n == nchunks );\n }\n \n // istream& operator>>(istream&, string&)\n void test01()\n {\n   const char filename[] = \"inserters_extractors-3.txt\";\n \n-  const wstring data = prepare(666, 10);\n+  const unsigned nchunks = 10;\n+  const wstring data = prepare(666, nchunks);\n \n   wofstream ofstrm;\n   ofstrm.open(filename);\n@@ -68,7 +72,7 @@ void test01()\n \n   wifstream ifstrm;\n   ifstrm.open(filename);\n-  check(ifstrm, data);\n+  check(ifstrm, data, nchunks);\n   ifstrm.close();\n }\n "}, {"sha": "9001f52367cde0b18b3f5910b3876f9b01a7897c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/char/5.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F5.cc?ref=b1c5b5a09b545dabdd4a10d67f31d93779af95db", "patch": "@@ -38,30 +38,34 @@ string prepare(string::size_type len, unsigned nchunks, char delim)\n   return ret;\n }\n \n-void check(istream& stream, const string& str, char delim)\n+void check(istream& stream, const string& str, unsigned nchunks, char delim)\n {\n   bool test __attribute__((unused)) = true;\n \n   char buf[1000000];\n   string::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n \n   while (stream.getline(buf, sizeof(buf), delim))\n     {\n       index_new = str.find(delim, index);\n       VERIFY( stream.gcount() == index_new - index + 1 );\n       VERIFY( !str.compare(index, index_new - index, buf) );\n       index = index_new + 1;\n+      ++n;\n     }\n   VERIFY( stream.gcount() == 0 );\n   VERIFY( stream.eof() );\n+  VERIFY( n == nchunks );\n }\n \n void test01()\n {\n   const char filename[] = \"istream_getline.txt\";\n \n   const char delim = '|';\n-  const string data = prepare(777, 10, delim);\n+  const unsigned nchunks = 10;\n+  const string data = prepare(777, nchunks, delim);\n \n   ofstream ofstrm;\n   ofstrm.open(filename);\n@@ -70,7 +74,7 @@ void test01()\n \n   ifstream ifstrm;\n   ifstrm.open(filename);\n-  check(ifstrm, data, delim);\n+  check(ifstrm, data, nchunks, delim);\n   ifstrm.close();\n }\n "}, {"sha": "85bdbfc2ed723f67e0cef6e3580dd0287d381a87", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/char/2.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c5b5a09b545dabdd4a10d67f31d93779af95db/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F2.cc?ref=b1c5b5a09b545dabdd4a10d67f31d93779af95db", "patch": "@@ -0,0 +1,84 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.3 unformatted input functions\n+\n+#include <istream>\n+#include <string>\n+#include <fstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+string prepare(string::size_type len, unsigned nchunks, char delim)\n+{\n+  string ret;\n+  for (unsigned i = 0; i < nchunks; ++i)\n+    {\n+      for (string::size_type j = 0; j < len; ++j)\n+\tret.push_back('a' + rand() % 26);\n+      len *= 2;\n+      ret.push_back(delim);\n+    }\n+  return ret;\n+}\n+\n+void check(istream& stream, const string& str, unsigned nchunks, char delim)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  string::size_type index = 0, index_new = 0;\n+  unsigned n = 0;\n+\n+  while (stream.ignore(numeric_limits<streamsize>::max(), delim).good())\n+    {\n+      index_new = str.find(delim, index);\n+      VERIFY( stream.gcount() == index_new - index + 1 );\n+      index = index_new + 1;\n+      ++n;\n+    }\n+  VERIFY( stream.gcount() == 0 );\n+  VERIFY( !stream.fail() );\n+  VERIFY( n == nchunks );\n+}\n+\n+void test01()\n+{\n+  const char filename[] = \"istream_ignore.txt\";\n+\n+  const char delim = '|';\n+  const unsigned nchunks = 10;\n+  const string data = prepare(555, nchunks, delim);\n+\n+  ofstream ofstrm;\n+  ofstrm.open(filename);\n+  ofstrm.write(data.data(), data.size());\n+  ofstrm.close();\n+\n+  ifstream ifstrm;\n+  ifstrm.open(filename);\n+  check(ifstrm, data, nchunks, delim);\n+  ifstrm.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}