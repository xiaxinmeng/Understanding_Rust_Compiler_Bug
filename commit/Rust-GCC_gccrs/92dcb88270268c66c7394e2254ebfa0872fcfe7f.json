{"sha": "92dcb88270268c66c7394e2254ebfa0872fcfe7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkY2I4ODI3MDI2OGM2NmM3Mzk0ZTIyNTRlYmZhMDg3MmZjZmU3Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-24T19:50:22Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-24T19:50:22Z"}, "message": "mips.md (indirect_jump): Use force_reg.\n\n\t* config/mips/mips.md (indirect_jump): Use force_reg.  Adjust names\n\tof internal patterns.\n\t(indirect_jump[sd]i): Renamed from indirect_jump_internal[12].\n\tRedefine using :P.\n\t(tablejump): Use expand_binop to calculate address.  Adjust names\n\tof internal patterns.\n\t(tablejump[sd]i): Renamed from tablejump_internal[12].\n\tRedefine using :P.\n\t(tablejump_mips16[12]): Delete.\n\nFrom-SVN: r86509", "tree": {"sha": "bfe4b5ce48b028dd31875bd2a60f68af445fa8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfe4b5ce48b028dd31875bd2a60f68af445fa8d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92dcb88270268c66c7394e2254ebfa0872fcfe7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92dcb88270268c66c7394e2254ebfa0872fcfe7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92dcb88270268c66c7394e2254ebfa0872fcfe7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92dcb88270268c66c7394e2254ebfa0872fcfe7f/comments", "author": null, "committer": null, "parents": [{"sha": "a0160289cd4acf99a8aaeb85058d93d08e8eec63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0160289cd4acf99a8aaeb85058d93d08e8eec63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0160289cd4acf99a8aaeb85058d93d08e8eec63"}], "stats": {"total": 119, "additions": 33, "deletions": 86}, "files": [{"sha": "e2c252fbfe598cb9d4935264bc87b947384a22b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dcb88270268c66c7394e2254ebfa0872fcfe7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dcb88270268c66c7394e2254ebfa0872fcfe7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92dcb88270268c66c7394e2254ebfa0872fcfe7f", "patch": "@@ -1,3 +1,15 @@\n+2004-08-24  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (indirect_jump): Use force_reg.  Adjust names\n+\tof internal patterns.\n+\t(indirect_jump[sd]i): Renamed from indirect_jump_internal[12].\n+\tRedefine using :P.\n+\t(tablejump): Use expand_binop to calculate address.  Adjust names\n+\tof internal patterns.\n+\t(tablejump[sd]i): Renamed from tablejump_internal[12].\n+\tRedefine using :P.\n+\t(tablejump_mips16[12]): Delete.\n+\n 2004-08-24  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (*seq_[sd]i, *seq_[sd]i_mips16, *sne_[sd]i)"}, {"sha": "739307c758ee3bcb1ced61ad5b3023237120ca8d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 21, "deletions": 86, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dcb88270268c66c7394e2254ebfa0872fcfe7f/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dcb88270268c66c7394e2254ebfa0872fcfe7f/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=92dcb88270268c66c7394e2254ebfa0872fcfe7f", "patch": "@@ -5484,33 +5484,20 @@ beq\\t%2,%.,1b\\;\\\n   [(set (pc) (match_operand 0 \"register_operand\"))]\n   \"\"\n {\n-  rtx dest;\n-\n-  dest = operands[0];\n-  if (GET_CODE (dest) != REG || GET_MODE (dest) != Pmode)\n-    operands[0] = copy_to_mode_reg (Pmode, dest);\n-\n-  if (!(Pmode == DImode))\n-    emit_jump_insn (gen_indirect_jump_internal1 (operands[0]));\n+  operands[0] = force_reg (Pmode, operands[0]);\n+  if (Pmode == SImode)\n+    emit_jump_insn (gen_indirect_jumpsi (operands[0]));\n   else\n-    emit_jump_insn (gen_indirect_jump_internal2 (operands[0]));\n-\n+    emit_jump_insn (gen_indirect_jumpdi (operands[0]));\n   DONE;\n })\n \n-(define_insn \"indirect_jump_internal1\"\n-  [(set (pc) (match_operand:SI 0 \"register_operand\" \"d\"))]\n-  \"!(Pmode == DImode)\"\n-  \"%*j\\t%0%/\"\n-  [(set_attr \"type\"\t\"jump\")\n-   (set_attr \"mode\"\t\"none\")])\n-\n-(define_insn \"indirect_jump_internal2\"\n-  [(set (pc) (match_operand:DI 0 \"register_operand\" \"d\"))]\n-  \"Pmode == DImode\"\n+(define_insn \"indirect_jump<mode>\"\n+  [(set (pc) (match_operand:P 0 \"register_operand\" \"d\"))]\n+  \"\"\n   \"%*j\\t%0%/\"\n-  [(set_attr \"type\"\t\"jump\")\n-   (set_attr \"mode\"\t\"none\")])\n+  [(set_attr \"type\" \"jump\")\n+   (set_attr \"mode\" \"none\")])\n \n (define_expand \"tablejump\"\n   [(set (pc)\n@@ -5519,81 +5506,29 @@ beq\\t%2,%.,1b\\;\\\n   \"\"\n {\n   if (TARGET_MIPS16)\n-    {\n-      if (GET_MODE (operands[0]) != HImode)\n-\tabort ();\n-      if (!(Pmode == DImode))\n-\temit_insn (gen_tablejump_mips161 (operands[0], operands[1]));\n-      else\n-\temit_insn (gen_tablejump_mips162 (operands[0], operands[1]));\n-      DONE;\n-    }\n-\n-  if (GET_MODE (operands[0]) != ptr_mode)\n-    abort ();\n-\n-  if (TARGET_GPWORD)\n-    operands[0] = expand_binop (ptr_mode, add_optab, operands[0],\n+    operands[0] = expand_binop (Pmode, add_optab,\n+\t\t\t\tconvert_to_mode (Pmode, operands[0], false),\n+\t\t\t\tgen_rtx_LABEL_REF (Pmode, operands[1]),\n+\t\t\t\t0, 0, OPTAB_WIDEN);\n+  else if (TARGET_GPWORD)\n+    operands[0] = expand_binop (Pmode, add_optab, operands[0],\n \t\t\t\tpic_offset_table_rtx, 0, 0, OPTAB_WIDEN);\n \n   if (Pmode == SImode)\n-    emit_jump_insn (gen_tablejump_internal1 (operands[0], operands[1]));\n+    emit_jump_insn (gen_tablejumpsi (operands[0], operands[1]));\n   else\n-    emit_jump_insn (gen_tablejump_internal2 (operands[0], operands[1]));\n+    emit_jump_insn (gen_tablejumpdi (operands[0], operands[1]));\n   DONE;\n })\n \n-(define_insn \"tablejump_internal1\"\n+(define_insn \"tablejump<mode>\"\n   [(set (pc)\n-\t(match_operand:SI 0 \"register_operand\" \"d\"))\n+\t(match_operand:P 0 \"register_operand\" \"d\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n   \"%*j\\t%0%/\"\n-  [(set_attr \"type\"\t\"jump\")\n-   (set_attr \"mode\"\t\"none\")])\n-\n-(define_insn \"tablejump_internal2\"\n-  [(set (pc)\n-\t(match_operand:DI 0 \"register_operand\" \"d\"))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"TARGET_64BIT\"\n-  \"%*j\\t%0%/\"\n-  [(set_attr \"type\"\t\"jump\")\n-   (set_attr \"mode\"\t\"none\")])\n-\n-(define_expand \"tablejump_mips161\"\n-  [(set (pc) (plus:SI (sign_extend:SI (match_operand:HI 0 \"register_operand\"))\n-\t\t      (label_ref:SI (match_operand 1 \"\"))))]\n-  \"TARGET_MIPS16 && !(Pmode == DImode)\"\n-{\n-  rtx t1, t2, t3;\n-\n-  t1 = gen_reg_rtx (SImode);\n-  t2 = gen_reg_rtx (SImode);\n-  t3 = gen_reg_rtx (SImode);\n-  emit_insn (gen_extendhisi2 (t1, operands[0]));\n-  emit_move_insn (t2, gen_rtx_LABEL_REF (SImode, operands[1]));\n-  emit_insn (gen_addsi3 (t3, t1, t2));\n-  emit_jump_insn (gen_tablejump_internal1 (t3, operands[1]));\n-  DONE;\n-})\n-\n-(define_expand \"tablejump_mips162\"\n-  [(set (pc) (plus:DI (sign_extend:DI (match_operand:HI 0 \"register_operand\"))\n-\t\t      (label_ref:DI (match_operand 1 \"\"))))]\n-  \"TARGET_MIPS16 && Pmode == DImode\"\n-{\n-  rtx t1, t2, t3;\n-\n-  t1 = gen_reg_rtx (DImode);\n-  t2 = gen_reg_rtx (DImode);\n-  t3 = gen_reg_rtx (DImode);\n-  emit_insn (gen_extendhidi2 (t1, operands[0]));\n-  emit_move_insn (t2, gen_rtx_LABEL_REF (DImode, operands[1]));\n-  emit_insn (gen_adddi3 (t3, t1, t2));\n-  emit_jump_insn (gen_tablejump_internal2 (t3, operands[1]));\n-  DONE;\n-})\n+  [(set_attr \"type\" \"jump\")\n+   (set_attr \"mode\" \"none\")])\n \n ;; For TARGET_ABICALLS, we save the gp in the jmp_buf as well.\n ;; While it is possible to either pull it off the stack (in the"}]}