{"sha": "3589b69e2dcc9e2adecc779679dd8aff97b60874", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU4OWI2OWUyZGNjOWUyYWRlY2M3Nzk2NzlkZDhhZmY5N2I2MDg3NA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-08-06T06:45:23Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-08-06T06:45:23Z"}, "message": "Makefile.def (bfd, [...]): Mark as bootstrap module.\n\n2004-08-06  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.def (bfd, opcodes, gcc, zlib): Mark as bootstrap module.\n\t(bison, byacc, flex, texinfo): Do not mark as bootstrap module.\n\t(Dependencies): New section.\n\t* Makefile.tpl (Dependencies): Generate from Makefile.def.\n\t(configure-target-[+module+]): Depend on maybe-all-gcc\n\t(all-prebootstrap): New name of all-bootstrap.  Changed throughout.\n\t(toplevel profiledbootstrap): Fix dependencies.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r85629", "tree": {"sha": "d946abeef4176f8d324ffacf68507aafd8fe27ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d946abeef4176f8d324ffacf68507aafd8fe27ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3589b69e2dcc9e2adecc779679dd8aff97b60874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3589b69e2dcc9e2adecc779679dd8aff97b60874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3589b69e2dcc9e2adecc779679dd8aff97b60874", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3589b69e2dcc9e2adecc779679dd8aff97b60874/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae232e452c8e8ebd8d277e9707eaa69bc35171ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae232e452c8e8ebd8d277e9707eaa69bc35171ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae232e452c8e8ebd8d277e9707eaa69bc35171ee"}], "stats": {"total": 1083, "additions": 853, "deletions": 230}, "files": [{"sha": "26c0b8c8a45c11dfbc21cb0899f275bbd9e8e432", "filename": "ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3589b69e2dcc9e2adecc779679dd8aff97b60874/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3589b69e2dcc9e2adecc779679dd8aff97b60874/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=3589b69e2dcc9e2adecc779679dd8aff97b60874", "patch": "@@ -1,3 +1,14 @@\n+2004-08-06  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.def (bfd, opcodes, gcc, zlib): Mark as bootstrap module.\n+\t(bison, byacc, flex, texinfo): Do not mark as bootstrap module.\n+\t(Dependencies): New section.\n+\t* Makefile.tpl (Dependencies): Generate from Makefile.def.\n+\t(configure-target-[+module+]): Depend on maybe-all-gcc\n+\t(all-prebootstrap): New name of all-bootstrap.  Changed throughout.\n+\t(toplevel profiledbootstrap): Fix dependencies.\n+\t* Makefile.in: Regenerate.\n+\n 2004-08-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* configure.in (arm*-*-symbianelf*): Add ${libgcj} and"}, {"sha": "f19b2698521cb896d66975b57c1f092b7895a28f", "filename": "Makefile.def", "status": "modified", "additions": 228, "deletions": 7, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3589b69e2dcc9e2adecc779679dd8aff97b60874/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3589b69e2dcc9e2adecc779679dd8aff97b60874/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=3589b69e2dcc9e2adecc779679dd8aff97b60874", "patch": "@@ -36,11 +36,11 @@ host_modules= { module= ash; };\n host_modules= { module= autoconf; };\n host_modules= { module= automake; };\n host_modules= { module= bash; };\n-host_modules= { module= bfd; };\n-host_modules= { module= opcodes; };\n+host_modules= { module= bfd; bootstrap=true; };\n+host_modules= { module= opcodes; bootstrap=true; };\n host_modules= { module= binutils; bootstrap=true; };\n-host_modules= { module= bison; no_check_cross= true; bootstrap=true; };\n-host_modules= { module= byacc; no_check_cross= true; bootstrap=true; };\n+host_modules= { module= bison; no_check_cross= true; };\n+host_modules= { module= byacc; no_check_cross= true; };\n host_modules= { module= bzip2; };\n host_modules= { module= dejagnu; };\n host_modules= { module= diff; };\n@@ -50,9 +50,10 @@ host_modules= { module= fastjar; no_check_cross= true; };\n host_modules= { module= fileutils; };\n host_modules= { module= findutils; };\n host_modules= { module= find; };\n-host_modules= { module= flex; no_check_cross= true; bootstrap=true; };\n+host_modules= { module= flex; no_check_cross= true; };\n host_modules= { module= gas; bootstrap=true; };\n-host_modules= { module= gcc; extra_make_flags=\"$(EXTRA_GCC_FLAGS)\"; };\n+host_modules= { module= gcc; bootstrap=true; \n+\t\textra_make_flags=\"$(EXTRA_GCC_FLAGS)\"; };\n host_modules= { module= gawk; };\n host_modules= { module= gettext; };\n host_modules= { module= gnuserv; };\n@@ -86,7 +87,7 @@ host_modules= { module= shellutils; };\n host_modules= { module= sid; };\n host_modules= { module= sim; };\n host_modules= { module= tar; };\n-host_modules= { module= texinfo; no_install= true; bootstrap=true; };\n+host_modules= { module= texinfo; no_install= true; };\n host_modules= { module= textutils; };\n host_modules= { module= time; };\n host_modules= { module= uudecode; };\n@@ -221,6 +222,226 @@ flags_to_pass = { flag= NM_FOR_TARGET ; };\n flags_to_pass = { flag= RANLIB_FOR_TARGET ; };\n flags_to_pass = { flag= WINDRES_FOR_TARGET ; };\n \n+// Inter-module dependencies\n+\n+// Build modules\n+dependencies = { module=all-build-bison; on=all-build-texinfo; };\n+dependencies = { module=all-build-byacc; on=all-build-texinfo; };\n+dependencies = { module=all-build-flex; on=all-build-texinfo; };\n+dependencies = { module=all-build-flex; on=all-build-bison; };\n+dependencies = { module=all-build-flex; on=all-build-byacc; };\n+dependencies = { module=all-build-flex; on=all-build-m4; };\n+dependencies = { module=all-build-libiberty; on=all-build-texinfo; };\n+dependencies = { module=all-build-m4; on=all-build-texinfo; };\n+\n+// Host modules specific to gcc.\n+dependencies = { module=configure-gcc; on=configure-intl; };\n+dependencies = { module=configure-gcc; on=configure-binutils; };\n+dependencies = { module=configure-gcc; on=configure-gas; };\n+dependencies = { module=configure-gcc; on=configure-ld; };\n+dependencies = { module=configure-gcc; on=configure-bison; };\n+dependencies = { module=configure-gcc; on=configure-flex; };\n+dependencies = { module=all-gcc; on=all-libiberty; hard=true; };\n+dependencies = { module=all-gcc; on=all-intl; };\n+dependencies = { module=all-gcc; on=all-texinfo; };\n+dependencies = { module=all-gcc; on=all-bison; };\n+dependencies = { module=all-gcc; on=all-byacc; };\n+dependencies = { module=all-gcc; on=all-flex; };\n+dependencies = { module=all-gcc; on=all-binutils; };\n+dependencies = { module=all-gcc; on=all-gas; };\n+dependencies = { module=all-gcc; on=all-ld; };\n+dependencies = { module=all-gcc; on=all-zlib; };\n+dependencies = { module=all-gcc; on=all-libbanshee; };\n+dependencies = { module=all-gcc; on=all-libcpp; hard=true; };\n+dependencies = { module=all-gcc; on=all-build-libiberty; };\n+\n+dependencies = { module=configure-libcpp; on=configure-libiberty; hard=true; };\n+dependencies = { module=configure-libcpp; on=configure-intl; };\n+dependencies = { module=all-libcpp; on=all-libiberty; hard=true; };\n+dependencies = { module=all-libcpp; on=all-intl; };\n+\n+// Host modules specific to gdb.\n+dependencies = { module=configure-gdb; on=configure-itcl; };\n+dependencies = { module=configure-gdb; on=configure-tcl; };\n+dependencies = { module=configure-gdb; on=configure-tk; };\n+dependencies = { module=configure-gdb; on=configure-sim; };\n+dependencies = { module=all-gdb; on=all-libiberty; };\n+dependencies = { module=all-gdb; on=all-opcodes; };\n+dependencies = { module=all-gdb; on=all-bfd; };\n+dependencies = { module=all-gdb; on=all-mmalloc; };\n+dependencies = { module=all-gdb; on=all-readline; };\n+dependencies = { module=all-gdb; on=all-bison; };\n+dependencies = { module=all-gdb; on=all-byacc; };\n+dependencies = { module=all-gdb; on=all-sim; };\n+dependencies = { module=install-gdb; on=install-tcl; };\n+dependencies = { module=install-gdb; on=install-tk; };\n+dependencies = { module=install-gdb; on=install-itcl; };\n+dependencies = { module=install-gdb; on=install-tix; };\n+dependencies = { module=install-gdb; on=install-libgui; };\n+\n+dependencies = { module=configure-libgui; on=configure-tcl; };\n+dependencies = { module=configure-libgui; on=configure-tk; };\n+dependencies = { module=all-libgui; on=all-tcl; };\n+dependencies = { module=all-libgui; on=all-tk; };\n+dependencies = { module=all-libgui; on=all-itcl; };\n+\n+// Host modules specific to binutils.\n+dependencies = { module=configure-bfd; on=configure-libiberty; hard=true; };\n+dependencies = { module=all-bfd; on=all-libiberty; };\n+dependencies = { module=all-bfd; on=all-intl; };\n+\n+dependencies = { module=all-binutils; on=all-libiberty; };\n+dependencies = { module=all-binutils; on=all-opcodes; };\n+dependencies = { module=all-binutils; on=all-bfd; };\n+dependencies = { module=all-binutils; on=all-flex; };\n+dependencies = { module=all-binutils; on=all-bison; };\n+dependencies = { module=all-binutils; on=all-byacc; };\n+dependencies = { module=all-binutils; on=all-intl; };\n+\n+// We put install-opcodes before install-binutils because the installed\n+// binutils might be on PATH, and they might need the shared opcodes\n+// library.\n+dependencies = { module=install-binutils; on=install-opcodes; };\n+\n+// libopcodes depends on libbfd\n+dependencies = { module=install-opcodes; on=install-bfd; };\n+\n+dependencies = { module=all-gas; on=all-libiberty; };\n+dependencies = { module=all-gas; on=all-opcodes; };\n+dependencies = { module=all-gas; on=all-bfd; };\n+dependencies = { module=all-gas; on=all-intl; };\n+dependencies = { module=all-gprof; on=all-libiberty; };\n+dependencies = { module=all-gprof; on=all-bfd; };\n+dependencies = { module=all-gprof; on=all-opcodes; };\n+dependencies = { module=all-gprof; on=all-intl; };\n+dependencies = { module=all-ld; on=all-libiberty; };\n+dependencies = { module=all-ld; on=all-bfd; };\n+dependencies = { module=all-ld; on=all-opcodes; };\n+dependencies = { module=all-ld; on=all-bison; };\n+dependencies = { module=all-ld; on=all-byacc; };\n+dependencies = { module=all-ld; on=all-flex; };\n+dependencies = { module=all-ld; on=all-intl; };\n+\n+dependencies = { module=all-opcodes; on=all-bfd; };\n+dependencies = { module=all-opcodes; on=all-libiberty; };\n+\n+// Other host modules in the 'src' repository.\n+dependencies = { module=all-dejagnu; on=all-tcl; };\n+dependencies = { module=all-dejagnu; on=all-expect; };\n+dependencies = { module=all-dejagnu; on=all-tk; };\n+dependencies = { module=configure-expect; on=configure-tcl; };\n+dependencies = { module=configure-expect; on=configure-tk; };\n+dependencies = { module=all-expect; on=all-tcl; };\n+dependencies = { module=all-expect; on=all-tk; };\n+\n+// We put install-tcl before install-itcl because itcl wants to run a\n+// program on installation which uses the Tcl libraries.\n+dependencies = { module=configure-itcl; on=configure-tcl; };\n+dependencies = { module=configure-itcl; on=configure-tk; };\n+dependencies = { module=all-itcl; on=all-tcl; };\n+dependencies = { module=all-itcl; on=all-tk; };\n+dependencies = { module=install-itcl; on=install-tcl; };\n+\n+dependencies = { module=configure-tk; on=configure-tcl; };\n+dependencies = { module=all-tk; on=all-tcl; };\n+dependencies = { module=configure-tix; on=configure-tcl; };\n+dependencies = { module=configure-tix; on=configure-tk; };\n+dependencies = { module=all-tix; on=all-tcl; };\n+dependencies = { module=all-tix; on=all-tk; };\n+\n+dependencies = { module=all-sid; on=all-libiberty; };\n+dependencies = { module=all-sid; on=all-bfd; };\n+dependencies = { module=all-sid; on=all-opcodes; };\n+dependencies = { module=all-sid; on=all-tcl; };\n+dependencies = { module=all-sid; on=all-tk; };\n+dependencies = { module=install-sid; on=install-tcl; };\n+dependencies = { module=install-sid; on=install-tk; };\n+\n+dependencies = { module=all-sim; on=all-libiberty; };\n+dependencies = { module=all-sim; on=all-bfd; };\n+dependencies = { module=all-sim; on=all-opcodes; };\n+dependencies = { module=all-sim; on=all-readline; };\n+dependencies = { module=all-sim; on=configure-gdb; };\n+\n+// Other host modules.\n+dependencies = { module=all-fastjar; on=all-zlib; };\n+dependencies = { module=all-fastjar; on=all-texinfo; };\n+dependencies = { module=all-fastjar; on=all-libiberty; };\n+\n+// Warning, these are not well tested.\n+dependencies = { module=all-autoconf; on=all-m4; };\n+dependencies = { module=all-autoconf; on=all-texinfo; };\n+dependencies = { module=all-automake; on=all-m4; };\n+dependencies = { module=all-automake; on=all-texinfo; };\n+dependencies = { module=all-automake; on=all-autoconf; };\n+dependencies = { module=all-bison; on=all-intl; };\n+dependencies = { module=all-bison; on=all-texinfo; };\n+dependencies = { module=all-diff; on=all-intl; };\n+dependencies = { module=all-diff; on=all-texinfo; };\n+dependencies = { module=all-fileutils; on=all-intl; };\n+dependencies = { module=all-fileutils; on=all-texinfo; };\n+dependencies = { module=all-flex; on=all-bison; };\n+dependencies = { module=all-flex; on=all-byacc; };\n+dependencies = { module=all-flex; on=all-intl; };\n+dependencies = { module=all-flex; on=all-m4; };\n+dependencies = { module=all-flex; on=all-texinfo; };\n+dependencies = { module=all-gzip; on=all-intl; };\n+dependencies = { module=all-gzip; on=all-zlib; };\n+dependencies = { module=all-gzip; on=all-texinfo; };\n+dependencies = { module=all-hello; on=all-intl; };\n+dependencies = { module=all-hello; on=all-texinfo; };\n+dependencies = { module=all-m4; on=all-intl; };\n+dependencies = { module=all-m4; on=all-texinfo; };\n+dependencies = { module=all-make; on=all-intl; };\n+dependencies = { module=all-make; on=all-texinfo; };\n+dependencies = { module=all-patch; on=all-texinfo; };\n+dependencies = { module=all-make; on=all-texinfo; };\n+dependencies = { module=all-prms; on=all-libiberty; };\n+dependencies = { module=all-recode; on=all-texinfo; };\n+dependencies = { module=all-sed; on=all-texinfo; };\n+dependencies = { module=all-send-pr; on=all-prms; };\n+dependencies = { module=all-tar; on=all-texinfo; };\n+dependencies = { module=all-uudecode; on=all-texinfo; };\n+\n+// Target modules.  These can also have dependencies on the language\n+// environment (e.g. on libstdc++).\n+lang_env_dependencies = { module=boehm-gc; };\n+lang_env_dependencies = { module=gperf; cxx=true; };\n+lang_env_dependencies = { module=libada; };\n+lang_env_dependencies = { module=libgfortran; };\n+lang_env_dependencies = { module=libffi; };\n+lang_env_dependencies = { module=libjava; cxx=true; };\n+lang_env_dependencies = { module=libobjc; };\n+lang_env_dependencies = { module=libstdc++-v3; };\n+lang_env_dependencies = { module=zlib; };\n+\n+dependencies = { module=configure-target-boehm-gc; on=configure-target-qthreads; };\n+dependencies = { module=configure-target-fastjar; on=configure-target-zlib; };\n+dependencies = { module=all-target-fastjar; on=all-target-zlib; };\n+dependencies = { module=all-target-fastjar; on=all-target-libiberty; };\n+dependencies = { module=configure-target-libjava; on=configure-target-zlib; };\n+dependencies = { module=configure-target-libjava; on=configure-target-boehm-gc; };\n+dependencies = { module=configure-target-libjava; on=configure-target-qthreads; };\n+dependencies = { module=configure-target-libjava; on=configure-target-libffi; };\n+dependencies = { module=all-target-libjava; on=all-fastjar; };\n+dependencies = { module=all-target-libjava; on=all-target-zlib; };\n+dependencies = { module=all-target-libjava; on=all-target-boehm-gc; };\n+dependencies = { module=all-target-libjava; on=all-target-qthreads; };\n+dependencies = { module=all-target-libjava; on=all-target-libffi; };\n+dependencies = { module=all-target-libobjc; on=all-target-libiberty; };\n+dependencies = { module=all-target-libstdc++-v3; on=all-target-libiberty; };\n+\n+// Target modules in the 'src' repository.\n+lang_env_dependencies = { module=examples; };\n+lang_env_dependencies = { module=libtermcap; };\n+lang_env_dependencies = { module=rda; };\n+lang_env_dependencies = { module=winsup; };\n+lang_env_dependencies = { module=qthreads; };\n+\n+dependencies = { module=all-target-libgloss; on=configure-target-newlib; };\n+dependencies = { module=all-target-winsup; on=all-target-libiberty; };\n+dependencies = { module=all-target-winsup; on=all-target-libtermcap; };\n+\n // Toplevel bootstrap\n bootstrap_stage = {\n \tid=1 ;"}, {"sha": "ddeb28a7e3b9f3e843b09ce77552873eb1549f8a", "filename": "Makefile.in", "status": "modified", "additions": 493, "deletions": 103, "changes": 596, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3589b69e2dcc9e2adecc779679dd8aff97b60874/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3589b69e2dcc9e2adecc779679dd8aff97b60874/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=3589b69e2dcc9e2adecc779679dd8aff97b60874", "patch": "@@ -1889,7 +1889,6 @@ install-host-nogcc:  \\\n     maybe-install-find \\\n     maybe-install-flex \\\n     maybe-install-gas \\\n-    maybe-install-gcc \\\n     maybe-install-gawk \\\n     maybe-install-gettext \\\n     maybe-install-gnuserv \\\n@@ -28305,7 +28304,7 @@ maintainer-clean-target-libada:\n \n GCC_STRAP_TARGETS = bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap\n .PHONY: $(GCC_STRAP_TARGETS)\n-$(GCC_STRAP_TARGETS): all-bootstrap configure-gcc\n+$(GCC_STRAP_TARGETS): all-prebootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n@@ -28338,7 +28337,7 @@ $(GCC_STRAP_TARGETS): all-bootstrap configure-gcc\n \techo \"Building runtime libraries\"; \\\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all\n \n-profiledbootstrap: all-bootstrap configure-gcc\n+profiledbootstrap: all-prebootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n@@ -28472,7 +28471,7 @@ objext = .o\n # Real targets act phony if they depend on phony targets; this hack\n # prevents gratuitous rebuilding of stage 1.\n prebootstrap:\n-\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-bootstrap\n+\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-prebootstrap\n \t$(STAMP) prebootstrap\n \n # Flags to pass to stage2 and later makes.\n@@ -29176,7 +29175,7 @@ stagefeedback-start::\n \t  { find . -type d | sort | sed 's,.*,$(SHELL) '\"$$s\"'/mkinstalldirs \"../gcc/&\",' | $(SHELL); } && \\\n \t  { find . -name '*.*da' | sed 's,.*,$(LN) -f \"&\" \"../gcc/&\",' | $(SHELL); }\n \n-profiledbootstrap: all-bootstrap configure-gcc\n+profiledbootstrap: all-prebootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n@@ -29201,127 +29200,518 @@ profiledbootstrap: all-bootstrap configure-gcc\n # Dependencies between different modules\n # --------------------------------------\n \n+# Generic dependencies for target modules on host stuff, especially gcc\n+\n+configure-target-libstdc++-v3: maybe-all-gcc\n+\n+configure-target-libmudflap: maybe-all-gcc\n+\n+configure-target-newlib: maybe-all-gcc\n+\n+configure-target-libgfortran: maybe-all-gcc\n+\n+configure-target-libobjc: maybe-all-gcc\n+\n+configure-target-libtermcap: maybe-all-gcc\n+\n+configure-target-winsup: maybe-all-gcc\n+\n+configure-target-libgloss: maybe-all-gcc\n+\n+configure-target-libiberty: maybe-all-gcc\n+\n+configure-target-gperf: maybe-all-gcc\n+\n+configure-target-examples: maybe-all-gcc\n+\n+configure-target-libffi: maybe-all-gcc\n+\n+configure-target-libjava: maybe-all-gcc\n+\n+configure-target-zlib: maybe-all-gcc\n+\n+configure-target-boehm-gc: maybe-all-gcc\n+\n+configure-target-qthreads: maybe-all-gcc\n+\n+configure-target-rda: maybe-all-gcc\n+\n+configure-target-libada: maybe-all-gcc\n+\n+\n+\n+configure-target-boehm-gc: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-gperf: maybe-all-target-newlib maybe-all-target-libgloss\n+configure-target-gperf: maybe-all-target-libstdc++-v3\n+\n+configure-target-libada: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-libgfortran: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-libffi: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-libjava: maybe-all-target-newlib maybe-all-target-libgloss\n+configure-target-libjava: maybe-all-target-libstdc++-v3\n+\n+configure-target-libobjc: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-libstdc++-v3: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-zlib: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-examples: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-libtermcap: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-rda: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-winsup: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+configure-target-qthreads: maybe-all-target-newlib maybe-all-target-libgloss\n+\n+\n # There are two types of dependencies here: 'hard' dependencies, where one\n # module simply won't build without the other; and 'soft' dependencies, where\n # if the depended-on module is missing, the depending module will do without\n # or find a substitute somewhere (perhaps installed).  Soft dependencies\n-# are specified by depending on a 'maybe-' target.  If you're not sure,\n+# are made here to depend on a 'maybe-' target.  If you're not sure,\n # it's safer to use a soft dependency.\n \n-# Build modules\n+\n+\n+\n+\n+# With all the machinery above in place, it is pretty easy to generate\n+# dependencies.  Host dependencies are a bit more complex because we have\n+# to check for bootstrap/prebootstrap dependencies.  To resolve\n+# prebootstrap dependencies, prebootstrap modules are gathered in\n+# a hash table.\n all-build-bison: maybe-all-build-texinfo\n+all-build-byacc: maybe-all-build-texinfo\n all-build-flex: maybe-all-build-texinfo\n+all-build-flex: maybe-all-build-bison\n+all-build-flex: maybe-all-build-byacc\n+all-build-flex: maybe-all-build-m4\n all-build-libiberty: maybe-all-build-texinfo\n-all-build-m4: maybe-all-build-libiberty maybe-all-build-texinfo\n-\n-# Host modules specific to gcc.\n-# GCC needs to identify certain tools.\n-# GCC also needs the information exported by the intl configure script.\n-configure-gcc: maybe-configure-intl maybe-configure-binutils maybe-configure-gas maybe-configure-ld maybe-configure-bison maybe-configure-flex\n-all-gcc: maybe-all-libiberty maybe-all-intl maybe-all-texinfo maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib maybe-all-libbanshee maybe-all-libcpp\n-configure-libcpp: maybe-configure-libiberty maybe-configure-intl\n-all-libcpp: maybe-all-libiberty maybe-all-intl\n-# This is a slightly kludgy method of getting dependencies on \n-# all-build-libiberty correct; it would be better to build it every time.\n+all-build-m4: maybe-all-build-texinfo\n+configure-gcc: maybe-configure-intl\n+\n+configure-stage1-gcc: maybe-configure-stage1-intl\n+configure-stage2-gcc: maybe-configure-stage2-intl\n+configure-stage3-gcc: maybe-configure-stage3-intl\n+configure-stage4-gcc: maybe-configure-stage4-intl\n+configure-stageprofile-gcc: maybe-configure-stageprofile-intl\n+configure-stagefeedback-gcc: maybe-configure-stagefeedback-intl\n+configure-gcc: maybe-configure-binutils\n+\n+configure-stage1-gcc: maybe-configure-stage1-binutils\n+configure-stage2-gcc: maybe-configure-stage2-binutils\n+configure-stage3-gcc: maybe-configure-stage3-binutils\n+configure-stage4-gcc: maybe-configure-stage4-binutils\n+configure-stageprofile-gcc: maybe-configure-stageprofile-binutils\n+configure-stagefeedback-gcc: maybe-configure-stagefeedback-binutils\n+configure-gcc: maybe-configure-gas\n+\n+configure-stage1-gcc: maybe-configure-stage1-gas\n+configure-stage2-gcc: maybe-configure-stage2-gas\n+configure-stage3-gcc: maybe-configure-stage3-gas\n+configure-stage4-gcc: maybe-configure-stage4-gas\n+configure-stageprofile-gcc: maybe-configure-stageprofile-gas\n+configure-stagefeedback-gcc: maybe-configure-stagefeedback-gas\n+configure-gcc: maybe-configure-ld\n+\n+configure-stage1-gcc: maybe-configure-stage1-ld\n+configure-stage2-gcc: maybe-configure-stage2-ld\n+configure-stage3-gcc: maybe-configure-stage3-ld\n+configure-stage4-gcc: maybe-configure-stage4-ld\n+configure-stageprofile-gcc: maybe-configure-stageprofile-ld\n+configure-stagefeedback-gcc: maybe-configure-stagefeedback-ld\n+configure-gcc: maybe-configure-bison\n+configure-gcc: maybe-configure-flex\n+all-gcc: all-libiberty\n+\n+all-stage1-gcc: all-stage1-libiberty\n+all-stage2-gcc: all-stage2-libiberty\n+all-stage3-gcc: all-stage3-libiberty\n+all-stage4-gcc: all-stage4-libiberty\n+all-stageprofile-gcc: all-stageprofile-libiberty\n+all-stagefeedback-gcc: all-stagefeedback-libiberty\n+all-gcc: maybe-all-intl\n+\n+all-stage1-gcc: maybe-all-stage1-intl\n+all-stage2-gcc: maybe-all-stage2-intl\n+all-stage3-gcc: maybe-all-stage3-intl\n+all-stage4-gcc: maybe-all-stage4-intl\n+all-stageprofile-gcc: maybe-all-stageprofile-intl\n+all-stagefeedback-gcc: maybe-all-stagefeedback-intl\n+all-gcc: maybe-all-texinfo\n+all-gcc: maybe-all-bison\n+all-gcc: maybe-all-byacc\n+all-gcc: maybe-all-flex\n+all-gcc: maybe-all-binutils\n+\n+all-stage1-gcc: maybe-all-stage1-binutils\n+all-stage2-gcc: maybe-all-stage2-binutils\n+all-stage3-gcc: maybe-all-stage3-binutils\n+all-stage4-gcc: maybe-all-stage4-binutils\n+all-stageprofile-gcc: maybe-all-stageprofile-binutils\n+all-stagefeedback-gcc: maybe-all-stagefeedback-binutils\n+all-gcc: maybe-all-gas\n+\n+all-stage1-gcc: maybe-all-stage1-gas\n+all-stage2-gcc: maybe-all-stage2-gas\n+all-stage3-gcc: maybe-all-stage3-gas\n+all-stage4-gcc: maybe-all-stage4-gas\n+all-stageprofile-gcc: maybe-all-stageprofile-gas\n+all-stagefeedback-gcc: maybe-all-stagefeedback-gas\n+all-gcc: maybe-all-ld\n+\n+all-stage1-gcc: maybe-all-stage1-ld\n+all-stage2-gcc: maybe-all-stage2-ld\n+all-stage3-gcc: maybe-all-stage3-ld\n+all-stage4-gcc: maybe-all-stage4-ld\n+all-stageprofile-gcc: maybe-all-stageprofile-ld\n+all-stagefeedback-gcc: maybe-all-stagefeedback-ld\n+all-gcc: maybe-all-zlib\n+\n+all-stage1-gcc: maybe-all-stage1-zlib\n+all-stage2-gcc: maybe-all-stage2-zlib\n+all-stage3-gcc: maybe-all-stage3-zlib\n+all-stage4-gcc: maybe-all-stage4-zlib\n+all-stageprofile-gcc: maybe-all-stageprofile-zlib\n+all-stagefeedback-gcc: maybe-all-stagefeedback-zlib\n+all-gcc: maybe-all-libbanshee\n+\n+all-stage1-gcc: maybe-all-stage1-libbanshee\n+all-stage2-gcc: maybe-all-stage2-libbanshee\n+all-stage3-gcc: maybe-all-stage3-libbanshee\n+all-stage4-gcc: maybe-all-stage4-libbanshee\n+all-stageprofile-gcc: maybe-all-stageprofile-libbanshee\n+all-stagefeedback-gcc: maybe-all-stagefeedback-libbanshee\n+all-gcc: all-libcpp\n+\n+all-stage1-gcc: all-stage1-libcpp\n+all-stage2-gcc: all-stage2-libcpp\n+all-stage3-gcc: all-stage3-libcpp\n+all-stage4-gcc: all-stage4-libcpp\n+all-stageprofile-gcc: all-stageprofile-libcpp\n+all-stagefeedback-gcc: all-stagefeedback-libcpp\n all-gcc: maybe-all-build-libiberty\n-all-bootstrap: maybe-all-binutils maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-gas maybe-all-intl maybe-all-ld maybe-all-libcpp maybe-all-libbanshee maybe-all-libiberty maybe-all-texinfo maybe-all-zlib \n-\n-# Host modules specific to gdb.\n-# GDB needs to know that the simulator is being built.\n-configure-gdb: maybe-configure-itcl maybe-configure-tcl maybe-configure-tk maybe-configure-sim\n-GDB_TK = @GDB_TK@\n-all-gdb: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-mmalloc maybe-all-readline maybe-all-bison maybe-all-byacc maybe-all-sim $(gdbnlmrequirements) $(GDB_TK)\n-install-gdb: maybe-install-tcl maybe-install-tk maybe-install-itcl maybe-install-tix maybe-install-libgui\n-configure-libgui: maybe-configure-tcl maybe-configure-tk\n-all-libgui: maybe-all-tcl maybe-all-tk maybe-all-itcl\n-\n-# Host modules specific to binutils.\n+configure-libcpp: configure-libiberty\n+\n+configure-stage1-libcpp: configure-stage1-libiberty\n+configure-stage2-libcpp: configure-stage2-libiberty\n+configure-stage3-libcpp: configure-stage3-libiberty\n+configure-stage4-libcpp: configure-stage4-libiberty\n+configure-stageprofile-libcpp: configure-stageprofile-libiberty\n+configure-stagefeedback-libcpp: configure-stagefeedback-libiberty\n+configure-libcpp: maybe-configure-intl\n+\n+configure-stage1-libcpp: maybe-configure-stage1-intl\n+configure-stage2-libcpp: maybe-configure-stage2-intl\n+configure-stage3-libcpp: maybe-configure-stage3-intl\n+configure-stage4-libcpp: maybe-configure-stage4-intl\n+configure-stageprofile-libcpp: maybe-configure-stageprofile-intl\n+configure-stagefeedback-libcpp: maybe-configure-stagefeedback-intl\n+all-libcpp: all-libiberty\n+\n+all-stage1-libcpp: all-stage1-libiberty\n+all-stage2-libcpp: all-stage2-libiberty\n+all-stage3-libcpp: all-stage3-libiberty\n+all-stage4-libcpp: all-stage4-libiberty\n+all-stageprofile-libcpp: all-stageprofile-libiberty\n+all-stagefeedback-libcpp: all-stagefeedback-libiberty\n+all-libcpp: maybe-all-intl\n+\n+all-stage1-libcpp: maybe-all-stage1-intl\n+all-stage2-libcpp: maybe-all-stage2-intl\n+all-stage3-libcpp: maybe-all-stage3-intl\n+all-stage4-libcpp: maybe-all-stage4-intl\n+all-stageprofile-libcpp: maybe-all-stageprofile-intl\n+all-stagefeedback-libcpp: maybe-all-stagefeedback-intl\n+configure-gdb: maybe-configure-itcl\n+configure-gdb: maybe-configure-tcl\n+configure-gdb: maybe-configure-tk\n+configure-gdb: maybe-configure-sim\n+all-gdb: maybe-all-libiberty\n+all-gdb: maybe-all-opcodes\n+all-gdb: maybe-all-bfd\n+all-gdb: maybe-all-mmalloc\n+all-gdb: maybe-all-readline\n+all-gdb: maybe-all-bison\n+all-gdb: maybe-all-byacc\n+all-gdb: maybe-all-sim\n+install-gdb: maybe-install-tcl\n+install-gdb: maybe-install-tk\n+install-gdb: maybe-install-itcl\n+install-gdb: maybe-install-tix\n+install-gdb: maybe-install-libgui\n+configure-libgui: maybe-configure-tcl\n+configure-libgui: maybe-configure-tk\n+all-libgui: maybe-all-tcl\n+all-libgui: maybe-all-tk\n+all-libgui: maybe-all-itcl\n configure-bfd: configure-libiberty\n-all-bfd: maybe-all-libiberty maybe-all-intl\n-all-binutils: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-flex maybe-all-bison maybe-all-byacc maybe-all-intl\n-# We put install-opcodes before install-binutils because the installed\n-# binutils might be on PATH, and they might need the shared opcodes\n-# library.\n+\n+configure-stage1-bfd: configure-stage1-libiberty\n+configure-stage2-bfd: configure-stage2-libiberty\n+configure-stage3-bfd: configure-stage3-libiberty\n+configure-stage4-bfd: configure-stage4-libiberty\n+configure-stageprofile-bfd: configure-stageprofile-libiberty\n+configure-stagefeedback-bfd: configure-stagefeedback-libiberty\n+all-bfd: maybe-all-libiberty\n+\n+all-stage1-bfd: maybe-all-stage1-libiberty\n+all-stage2-bfd: maybe-all-stage2-libiberty\n+all-stage3-bfd: maybe-all-stage3-libiberty\n+all-stage4-bfd: maybe-all-stage4-libiberty\n+all-stageprofile-bfd: maybe-all-stageprofile-libiberty\n+all-stagefeedback-bfd: maybe-all-stagefeedback-libiberty\n+all-bfd: maybe-all-intl\n+\n+all-stage1-bfd: maybe-all-stage1-intl\n+all-stage2-bfd: maybe-all-stage2-intl\n+all-stage3-bfd: maybe-all-stage3-intl\n+all-stage4-bfd: maybe-all-stage4-intl\n+all-stageprofile-bfd: maybe-all-stageprofile-intl\n+all-stagefeedback-bfd: maybe-all-stagefeedback-intl\n+all-binutils: maybe-all-libiberty\n+\n+all-stage1-binutils: maybe-all-stage1-libiberty\n+all-stage2-binutils: maybe-all-stage2-libiberty\n+all-stage3-binutils: maybe-all-stage3-libiberty\n+all-stage4-binutils: maybe-all-stage4-libiberty\n+all-stageprofile-binutils: maybe-all-stageprofile-libiberty\n+all-stagefeedback-binutils: maybe-all-stagefeedback-libiberty\n+all-binutils: maybe-all-opcodes\n+\n+all-stage1-binutils: maybe-all-stage1-opcodes\n+all-stage2-binutils: maybe-all-stage2-opcodes\n+all-stage3-binutils: maybe-all-stage3-opcodes\n+all-stage4-binutils: maybe-all-stage4-opcodes\n+all-stageprofile-binutils: maybe-all-stageprofile-opcodes\n+all-stagefeedback-binutils: maybe-all-stagefeedback-opcodes\n+all-binutils: maybe-all-bfd\n+\n+all-stage1-binutils: maybe-all-stage1-bfd\n+all-stage2-binutils: maybe-all-stage2-bfd\n+all-stage3-binutils: maybe-all-stage3-bfd\n+all-stage4-binutils: maybe-all-stage4-bfd\n+all-stageprofile-binutils: maybe-all-stageprofile-bfd\n+all-stagefeedback-binutils: maybe-all-stagefeedback-bfd\n+all-binutils: maybe-all-flex\n+all-binutils: maybe-all-bison\n+all-binutils: maybe-all-byacc\n+all-binutils: maybe-all-intl\n+\n+all-stage1-binutils: maybe-all-stage1-intl\n+all-stage2-binutils: maybe-all-stage2-intl\n+all-stage3-binutils: maybe-all-stage3-intl\n+all-stage4-binutils: maybe-all-stage4-intl\n+all-stageprofile-binutils: maybe-all-stageprofile-intl\n+all-stagefeedback-binutils: maybe-all-stagefeedback-intl\n install-binutils: maybe-install-opcodes\n-# libopcodes depends on libbfd\n install-opcodes: maybe-install-bfd\n-all-gas: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-intl\n-all-gprof: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-intl\n-all-ld: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-intl\n-all-opcodes: maybe-all-bfd maybe-all-libiberty\n-\n-# Other host modules in the 'src' repository.\n-all-dejagnu: maybe-all-tcl maybe-all-expect maybe-all-tk\n-configure-expect: maybe-configure-tcl maybe-configure-tk\n-all-expect: maybe-all-tcl maybe-all-tk\n-configure-itcl: maybe-configure-tcl maybe-configure-tk\n-all-itcl: maybe-all-tcl maybe-all-tk\n-# We put install-tcl before install-itcl because itcl wants to run a\n-# program on installation which uses the Tcl libraries.\n+all-gas: maybe-all-libiberty\n+\n+all-stage1-gas: maybe-all-stage1-libiberty\n+all-stage2-gas: maybe-all-stage2-libiberty\n+all-stage3-gas: maybe-all-stage3-libiberty\n+all-stage4-gas: maybe-all-stage4-libiberty\n+all-stageprofile-gas: maybe-all-stageprofile-libiberty\n+all-stagefeedback-gas: maybe-all-stagefeedback-libiberty\n+all-gas: maybe-all-opcodes\n+\n+all-stage1-gas: maybe-all-stage1-opcodes\n+all-stage2-gas: maybe-all-stage2-opcodes\n+all-stage3-gas: maybe-all-stage3-opcodes\n+all-stage4-gas: maybe-all-stage4-opcodes\n+all-stageprofile-gas: maybe-all-stageprofile-opcodes\n+all-stagefeedback-gas: maybe-all-stagefeedback-opcodes\n+all-gas: maybe-all-bfd\n+\n+all-stage1-gas: maybe-all-stage1-bfd\n+all-stage2-gas: maybe-all-stage2-bfd\n+all-stage3-gas: maybe-all-stage3-bfd\n+all-stage4-gas: maybe-all-stage4-bfd\n+all-stageprofile-gas: maybe-all-stageprofile-bfd\n+all-stagefeedback-gas: maybe-all-stagefeedback-bfd\n+all-gas: maybe-all-intl\n+\n+all-stage1-gas: maybe-all-stage1-intl\n+all-stage2-gas: maybe-all-stage2-intl\n+all-stage3-gas: maybe-all-stage3-intl\n+all-stage4-gas: maybe-all-stage4-intl\n+all-stageprofile-gas: maybe-all-stageprofile-intl\n+all-stagefeedback-gas: maybe-all-stagefeedback-intl\n+all-gprof: maybe-all-libiberty\n+all-gprof: maybe-all-bfd\n+all-gprof: maybe-all-opcodes\n+all-gprof: maybe-all-intl\n+all-ld: maybe-all-libiberty\n+\n+all-stage1-ld: maybe-all-stage1-libiberty\n+all-stage2-ld: maybe-all-stage2-libiberty\n+all-stage3-ld: maybe-all-stage3-libiberty\n+all-stage4-ld: maybe-all-stage4-libiberty\n+all-stageprofile-ld: maybe-all-stageprofile-libiberty\n+all-stagefeedback-ld: maybe-all-stagefeedback-libiberty\n+all-ld: maybe-all-bfd\n+\n+all-stage1-ld: maybe-all-stage1-bfd\n+all-stage2-ld: maybe-all-stage2-bfd\n+all-stage3-ld: maybe-all-stage3-bfd\n+all-stage4-ld: maybe-all-stage4-bfd\n+all-stageprofile-ld: maybe-all-stageprofile-bfd\n+all-stagefeedback-ld: maybe-all-stagefeedback-bfd\n+all-ld: maybe-all-opcodes\n+\n+all-stage1-ld: maybe-all-stage1-opcodes\n+all-stage2-ld: maybe-all-stage2-opcodes\n+all-stage3-ld: maybe-all-stage3-opcodes\n+all-stage4-ld: maybe-all-stage4-opcodes\n+all-stageprofile-ld: maybe-all-stageprofile-opcodes\n+all-stagefeedback-ld: maybe-all-stagefeedback-opcodes\n+all-ld: maybe-all-bison\n+all-ld: maybe-all-byacc\n+all-ld: maybe-all-flex\n+all-ld: maybe-all-intl\n+\n+all-stage1-ld: maybe-all-stage1-intl\n+all-stage2-ld: maybe-all-stage2-intl\n+all-stage3-ld: maybe-all-stage3-intl\n+all-stage4-ld: maybe-all-stage4-intl\n+all-stageprofile-ld: maybe-all-stageprofile-intl\n+all-stagefeedback-ld: maybe-all-stagefeedback-intl\n+all-opcodes: maybe-all-bfd\n+\n+all-stage1-opcodes: maybe-all-stage1-bfd\n+all-stage2-opcodes: maybe-all-stage2-bfd\n+all-stage3-opcodes: maybe-all-stage3-bfd\n+all-stage4-opcodes: maybe-all-stage4-bfd\n+all-stageprofile-opcodes: maybe-all-stageprofile-bfd\n+all-stagefeedback-opcodes: maybe-all-stagefeedback-bfd\n+all-opcodes: maybe-all-libiberty\n+\n+all-stage1-opcodes: maybe-all-stage1-libiberty\n+all-stage2-opcodes: maybe-all-stage2-libiberty\n+all-stage3-opcodes: maybe-all-stage3-libiberty\n+all-stage4-opcodes: maybe-all-stage4-libiberty\n+all-stageprofile-opcodes: maybe-all-stageprofile-libiberty\n+all-stagefeedback-opcodes: maybe-all-stagefeedback-libiberty\n+all-dejagnu: maybe-all-tcl\n+all-dejagnu: maybe-all-expect\n+all-dejagnu: maybe-all-tk\n+configure-expect: maybe-configure-tcl\n+configure-expect: maybe-configure-tk\n+all-expect: maybe-all-tcl\n+all-expect: maybe-all-tk\n+configure-itcl: maybe-configure-tcl\n+configure-itcl: maybe-configure-tk\n+all-itcl: maybe-all-tcl\n+all-itcl: maybe-all-tk\n install-itcl: maybe-install-tcl\n-all-sid: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-tcl maybe-all-tk\n-install-sid: maybe-install-tcl maybe-install-tk\n-all-sim: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-readline maybe-configure-gdb\n configure-tk: maybe-configure-tcl\n all-tk: maybe-all-tcl\n-configure-tix: maybe-configure-tcl maybe-configure-tk\n-all-tix: maybe-all-tcl maybe-all-tk\n-all-texinfo: maybe-all-libiberty\n-\n-# Other host modules.  Warning, these are not well tested.\n-all-autoconf: maybe-all-m4 maybe-all-texinfo\n-all-automake: maybe-all-m4 maybe-all-texinfo\n+configure-tix: maybe-configure-tcl\n+configure-tix: maybe-configure-tk\n+all-tix: maybe-all-tcl\n+all-tix: maybe-all-tk\n+all-sid: maybe-all-libiberty\n+all-sid: maybe-all-bfd\n+all-sid: maybe-all-opcodes\n+all-sid: maybe-all-tcl\n+all-sid: maybe-all-tk\n+install-sid: maybe-install-tcl\n+install-sid: maybe-install-tk\n+all-sim: maybe-all-libiberty\n+all-sim: maybe-all-bfd\n+all-sim: maybe-all-opcodes\n+all-sim: maybe-all-readline\n+all-sim: maybe-configure-gdb\n+all-fastjar: maybe-all-zlib\n+all-fastjar: maybe-all-texinfo\n+all-fastjar: maybe-all-libiberty\n+all-autoconf: maybe-all-m4\n+all-autoconf: maybe-all-texinfo\n+all-automake: maybe-all-m4\n+all-automake: maybe-all-texinfo\n+all-automake: maybe-all-autoconf\n+all-bison: maybe-all-intl\n all-bison: maybe-all-texinfo\n-all-diff: maybe-all-libiberty\n-all-fastjar: maybe-all-zlib maybe-all-libiberty\n-all-fileutils: maybe-all-libiberty\n-all-flex: maybe-all-libiberty maybe-all-bison maybe-all-byacc\n-all-gzip: maybe-all-libiberty\n-all-hello: maybe-all-libiberty\n-all-m4: maybe-all-libiberty maybe-all-texinfo\n-all-make: maybe-all-libiberty maybe-all-intl\n-all-patch: maybe-all-libiberty\n+all-diff: maybe-all-intl\n+all-diff: maybe-all-texinfo\n+all-fileutils: maybe-all-intl\n+all-fileutils: maybe-all-texinfo\n+all-flex: maybe-all-bison\n+all-flex: maybe-all-byacc\n+all-flex: maybe-all-intl\n+all-flex: maybe-all-m4\n+all-flex: maybe-all-texinfo\n+all-gzip: maybe-all-intl\n+all-gzip: maybe-all-zlib\n+all-gzip: maybe-all-texinfo\n+all-hello: maybe-all-intl\n+all-hello: maybe-all-texinfo\n+all-m4: maybe-all-intl\n+all-m4: maybe-all-texinfo\n+all-make: maybe-all-intl\n+all-make: maybe-all-texinfo\n+all-patch: maybe-all-texinfo\n+all-make: maybe-all-texinfo\n all-prms: maybe-all-libiberty\n-all-recode: maybe-all-libiberty\n-all-sed: maybe-all-libiberty\n+all-recode: maybe-all-texinfo\n+all-sed: maybe-all-texinfo\n all-send-pr: maybe-all-prms\n-all-tar: maybe-all-libiberty\n-all-uudecode: maybe-all-libiberty\n-\n-ALL_GCC = maybe-all-gcc\n-ALL_GCC_C = $(ALL_GCC) maybe-all-target-newlib maybe-all-target-libgloss\n-ALL_GCC_CXX = $(ALL_GCC_C) maybe-all-target-libstdc++-v3\n-\n-# Target modules specific to gcc.\n-configure-target-boehm-gc: $(ALL_GCC_C) maybe-configure-target-qthreads\n+all-tar: maybe-all-texinfo\n+all-uudecode: maybe-all-texinfo\n+configure-target-boehm-gc: maybe-configure-target-qthreads\n configure-target-fastjar: maybe-configure-target-zlib\n-all-target-fastjar: maybe-all-target-zlib maybe-all-target-libiberty\n-configure-target-libada: $(ALL_GCC_C)\n-configure-target-libgfortran: $(ALL_GCC_C)\n-configure-target-libffi: $(ALL_GCC_C) \n-configure-target-libjava: $(ALL_GCC_C) maybe-configure-target-zlib maybe-configure-target-boehm-gc maybe-configure-target-qthreads maybe-configure-target-libffi\n-all-target-libjava: maybe-all-fastjar maybe-all-target-zlib maybe-all-target-boehm-gc maybe-all-target-qthreads maybe-all-target-libffi\n-configure-target-libobjc: $(ALL_GCC_C)\n+all-target-fastjar: maybe-all-target-zlib\n+all-target-fastjar: maybe-all-target-libiberty\n+configure-target-libjava: maybe-configure-target-zlib\n+configure-target-libjava: maybe-configure-target-boehm-gc\n+configure-target-libjava: maybe-configure-target-qthreads\n+configure-target-libjava: maybe-configure-target-libffi\n+all-target-libjava: maybe-all-fastjar\n+all-target-libjava: maybe-all-target-zlib\n+all-target-libjava: maybe-all-target-boehm-gc\n+all-target-libjava: maybe-all-target-qthreads\n+all-target-libjava: maybe-all-target-libffi\n all-target-libobjc: maybe-all-target-libiberty\n-configure-target-libstdc++-v3: $(ALL_GCC_C)\n all-target-libstdc++-v3: maybe-all-target-libiberty\n-configure-target-zlib: $(ALL_GCC_C)\n-\n-# Target modules in the 'src' repository.\n-configure-target-examples: $(ALL_GCC_C)\n-configure-target-libgloss: $(ALL_GCC)\n all-target-libgloss: maybe-configure-target-newlib\n-configure-target-libiberty: $(ALL_GCC)\n-configure-target-libtermcap: $(ALL_GCC_C)\n-configure-target-newlib: $(ALL_GCC)\n-configure-target-rda: $(ALL_GCC_C)\n-configure-target-winsup: $(ALL_GCC_C)\n-all-target-winsup: maybe-all-target-libiberty maybe-all-target-libtermcap\n-\n-# Other target modules.  Warning, these are not well tested.\n-configure-target-gperf: $(ALL_GCC_CXX)\n-all-target-gperf: maybe-all-target-libiberty maybe-all-target-libstdc++-v3\n-configure-target-qthreads: $(ALL_GCC_C)\n+all-target-winsup: maybe-all-target-libiberty\n+all-target-winsup: maybe-all-target-libtermcap\n+\n+\n+# Now build the prebootstrap dependencies.\n+\n+all-prebootstrap: maybe-all-bison\n+all-prebootstrap: maybe-all-byacc\n+all-prebootstrap: maybe-all-flex\n+all-prebootstrap: maybe-all-texinfo\n+\n+# Unless toplevel bootstrap is going, bootstrapped packages are actually\n+# prebootstrapped, with the exception of gcc.  Another wart that will go\n+# away with toplevel bootstrap.\n+@if gcc-no-bootstrap\n+\n+all-prebootstrap: maybe-all-bfd\n+all-prebootstrap: maybe-all-opcodes\n+all-prebootstrap: maybe-all-binutils\n+all-prebootstrap: maybe-all-gas\n+all-prebootstrap: maybe-all-intl\n+all-prebootstrap: maybe-all-ld\n+all-prebootstrap: maybe-all-libcpp\n+all-prebootstrap: maybe-all-libbanshee\n+all-prebootstrap: maybe-all-libiberty\n+all-prebootstrap: maybe-all-zlib\n+@endif gcc-no-bootstrap\n+\n+GDB_TK = @GDB_TK@\n+all-gdb: $(gdbnlmrequirements) $(GDB_TK)\n \n # Serialization dependencies.  Host configures don't work well in parallel to\n # each other, due to contention over config.cache.  Target configures and "}, {"sha": "dee4cee887edacbcbe5d1a1cdcac5364afb38b9a", "filename": "Makefile.tpl", "status": "modified", "additions": 121, "deletions": 120, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3589b69e2dcc9e2adecc779679dd8aff97b60874/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3589b69e2dcc9e2adecc779679dd8aff97b60874/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=3589b69e2dcc9e2adecc779679dd8aff97b60874", "patch": "@@ -738,8 +738,8 @@ install: installdirs install-host install-target\n \n .PHONY: install-host-nogcc\n install-host-nogcc: [+\n-  FOR host_modules +] \\\n-    maybe-install-[+module+][+\n+  FOR host_modules +][+ IF (not (= (get \"module\") \"gcc\")) +] \\\n+    maybe-install-[+module+][+ ENDIF +][+\n   ENDFOR host_modules +]\n \n .PHONY: install-host\n@@ -1196,7 +1196,7 @@ ENDIF raw_cxx +]\n \n GCC_STRAP_TARGETS = bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap\n .PHONY: $(GCC_STRAP_TARGETS)\n-$(GCC_STRAP_TARGETS): all-bootstrap configure-gcc\n+$(GCC_STRAP_TARGETS): all-prebootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n@@ -1229,7 +1229,7 @@ $(GCC_STRAP_TARGETS): all-bootstrap configure-gcc\n \techo \"Building runtime libraries\"; \\\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all\n \n-profiledbootstrap: all-bootstrap configure-gcc\n+profiledbootstrap: all-prebootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n@@ -1363,7 +1363,7 @@ objext = .o\n # Real targets act phony if they depend on phony targets; this hack\n # prevents gratuitous rebuilding of stage 1.\n prebootstrap:\n-\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-bootstrap\n+\t$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-prebootstrap\n \t$(STAMP) prebootstrap\n \n # Flags to pass to stage2 and later makes.\n@@ -1534,7 +1534,7 @@ stagefeedback-start::\n \t  { find . -type d | sort | sed 's,.*,$(SHELL) '\"$$s\"'/mkinstalldirs \"../gcc/&\",' | $(SHELL); } && \\\n \t  { find . -name '*.*da' | sed 's,.*,$(LN) -f \"&\" \"../gcc/&\",' | $(SHELL); }\n \n-profiledbootstrap: all-bootstrap configure-gcc\n+profiledbootstrap: all-prebootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n@@ -1559,127 +1559,128 @@ profiledbootstrap: all-bootstrap configure-gcc\n # Dependencies between different modules\n # --------------------------------------\n \n+# Generic dependencies for target modules on host stuff, especially gcc\n+[+ FOR target_modules +]\n+configure-target-[+module+]: maybe-all-gcc\n+[+ ENDFOR target_modules +]\n+\n+[+ FOR lang_env_dependencies +]\n+configure-target-[+module+]: maybe-all-target-newlib maybe-all-target-libgloss\n+[+ IF cxx +]configure-target-[+module+]: maybe-all-target-libstdc++-v3\n+[+ ENDIF cxx +][+ ENDFOR lang_env_dependencies +]\n+\n # There are two types of dependencies here: 'hard' dependencies, where one\n # module simply won't build without the other; and 'soft' dependencies, where\n # if the depended-on module is missing, the depending module will do without\n # or find a substitute somewhere (perhaps installed).  Soft dependencies\n-# are specified by depending on a 'maybe-' target.  If you're not sure,\n+# are made here to depend on a 'maybe-' target.  If you're not sure,\n # it's safer to use a soft dependency.\n \n-# Build modules\n-all-build-bison: maybe-all-build-texinfo\n-all-build-flex: maybe-all-build-texinfo\n-all-build-libiberty: maybe-all-build-texinfo\n-all-build-m4: maybe-all-build-libiberty maybe-all-build-texinfo\n-\n-# Host modules specific to gcc.\n-# GCC needs to identify certain tools.\n-# GCC also needs the information exported by the intl configure script.\n-configure-gcc: maybe-configure-intl maybe-configure-binutils maybe-configure-gas maybe-configure-ld maybe-configure-bison maybe-configure-flex\n-all-gcc: maybe-all-libiberty maybe-all-intl maybe-all-texinfo maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib maybe-all-libbanshee maybe-all-libcpp\n-configure-libcpp: maybe-configure-libiberty maybe-configure-intl\n-all-libcpp: maybe-all-libiberty maybe-all-intl\n-# This is a slightly kludgy method of getting dependencies on \n-# all-build-libiberty correct; it would be better to build it every time.\n-all-gcc: maybe-all-build-libiberty\n-all-bootstrap: [+ FOR host_modules +][+ IF bootstrap +]maybe-all-[+module+] [+ ENDIF bootstrap +][+ ENDFOR host_modules +]\n-\n-# Host modules specific to gdb.\n-# GDB needs to know that the simulator is being built.\n-configure-gdb: maybe-configure-itcl maybe-configure-tcl maybe-configure-tk maybe-configure-sim\n+[+ ;; These Scheme functions build the bulk of the dependencies.\n+   ;; dep-target builds a string like \"maybe-all-MODULE_KIND-gcc\",\n+   ;; where \"maybe-\" is only included if HARD is true, and all-gcc\n+   ;; is taken from VAR-NAME.\n+   (define dep-target (lambda (module-kind var-name hard)\n+      (string-append\n+         (if hard \"\" \"maybe-\")\n+         (dep-subtarget var-name)\n+         module-kind\n+         (dep-module var-name)\n+      )))\n+\n+   ;; make-dep builds a dependency from the MODULE and ON AutoGen vars.\n+   (define make-dep (lambda (module-kind)\n+      (string-append\n+         (dep-target module-kind \"module\" #t) \": \"\n+         (dep-target module-kind \"on\" (exist? \"hard\")))))\n+\n+   ;; dep-subtarget extracts everything up to the first dash in the given\n+   ;; AutoGen variable, for example it extracts \"all-\" out of \"all-gcc\".\n+   (define dep-subtarget (lambda (var-name)\n+      (substring (get var-name) 0 (+ 1 (string-index (get var-name) #\\-)))))\n+\n+   ;; dep-module extracts everything up to the first dash in the given\n+   ;; AutoGen variable, for example it extracts \"gcc\" out of \"all-gcc\".\n+   (define dep-module (lambda (var-name)\n+      (substring (get var-name) (+ 1 (string-index (get var-name) #\\-)))))\n+\n+   ;; dep-stage builds a string for the prefix of a bootstrap stage.\n+   (define dep-stage (lambda ()\n+      (string-append\n+\t \"stage\"\n+\t (get \"id\")\n+\t \"-\")))\n+\n+   ;; dep-maybe is the same as the AutoGen expression \"- hard 'maybe-'\"\n+   ;; but is written in Scheme.\n+   (define dep-maybe (lambda ()\n+      (if (exist? \"hard\") \"\" \"maybe-\")))\n+\n+   ;; dep-kind returns \"normal\" is the dependency is on an \"install\" target,\n+   ;; or if the LHS module is not bootstrapped.  It returns \"bootstrap\" for\n+   ;; configure or build dependencies between bootstrapped modules; it returns\n+   ;; \"prebootstrap\" for configure or build dependencies of bootstrapped\n+   ;; modules on a non-bootstrapped modules (e.g. gcc on bison).  All this\n+   ;; is only necessary for host modules.\n+   (define dep-kind (lambda ()\n+      (if (or (= (dep-subtarget \"on\") \"install-\")\n+\t      (=* (dep-module \"on\") \"build-\")\n+\t      (=* (dep-module \"on\") \"target-\"))\n+          \"normal\"\n+\n+          (if (hash-ref boot-modules (dep-module \"module\"))\n+              (if (hash-ref boot-modules (dep-module \"on\"))\n+\t          \"bootstrap\"\n+\t          \"prebootstrap\")\n+\t      \"normal\"))))\n+\n+   ;; We now build the hash table that is used by dep-kind.\n+   (define boot-modules (make-hash-table 113))\n+   (define preboot-modules (make-hash-table 37))\n++]\n+\n+[+ FOR host_modules +][+\n+   (if (exist? \"bootstrap\")\n+       (hash-create-handle! boot-modules (get \"module\") #t))\n+   \"\" +][+ ENDFOR host_modules +]\n+\n+# With all the machinery above in place, it is pretty easy to generate\n+# dependencies.  Host dependencies are a bit more complex because we have\n+# to check for bootstrap/prebootstrap dependencies.  To resolve\n+# prebootstrap dependencies, prebootstrap modules are gathered in\n+# a hash table.\n+[+ FOR dependencies +][+ (make-dep \"\") +]\n+[+ CASE (dep-kind) +][+\n+   == \"prebootstrap\"\n+     +][+ (hash-create-handle! preboot-modules (dep-module \"on\") #t) \"\" +][+\n+   == \"bootstrap\"\n+     +][+ FOR bootstrap_stage +]\n+[+ (make-dep (dep-stage)) +][+\n+       ENDFOR bootstrap_stage +]\n+[+ ESAC +][+\n+ENDFOR dependencies +]\n+\n+# Now build the prebootstrap dependencies.\n+[+ FOR host_modules +][+\n+   IF (hash-ref preboot-modules (get \"module\")) +]\n+all-prebootstrap: maybe-all-[+module+][+\n+   ENDIF +][+\n+ENDFOR host_modules +]\n+\n+# Unless toplevel bootstrap is going, bootstrapped packages are actually\n+# prebootstrapped, with the exception of gcc.  Another wart that will go\n+# away with toplevel bootstrap.\n+@if gcc-no-bootstrap\n+[+ FOR host_modules +][+\n+   IF (and (not (= (get \"module\") \"gcc\"))\n+\t   (hash-ref boot-modules (get \"module\"))) +]\n+all-prebootstrap: maybe-all-[+module+][+\n+   ENDIF +][+\n+ENDFOR host_modules +]\n+@endif gcc-no-bootstrap\n+\n GDB_TK = @GDB_TK@\n-all-gdb: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-mmalloc maybe-all-readline maybe-all-bison maybe-all-byacc maybe-all-sim $(gdbnlmrequirements) $(GDB_TK)\n-install-gdb: maybe-install-tcl maybe-install-tk maybe-install-itcl maybe-install-tix maybe-install-libgui\n-configure-libgui: maybe-configure-tcl maybe-configure-tk\n-all-libgui: maybe-all-tcl maybe-all-tk maybe-all-itcl\n-\n-# Host modules specific to binutils.\n-configure-bfd: configure-libiberty\n-all-bfd: maybe-all-libiberty maybe-all-intl\n-all-binutils: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-flex maybe-all-bison maybe-all-byacc maybe-all-intl\n-# We put install-opcodes before install-binutils because the installed\n-# binutils might be on PATH, and they might need the shared opcodes\n-# library.\n-install-binutils: maybe-install-opcodes\n-# libopcodes depends on libbfd\n-install-opcodes: maybe-install-bfd\n-all-gas: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-intl\n-all-gprof: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-intl\n-all-ld: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-intl\n-all-opcodes: maybe-all-bfd maybe-all-libiberty\n-\n-# Other host modules in the 'src' repository.\n-all-dejagnu: maybe-all-tcl maybe-all-expect maybe-all-tk\n-configure-expect: maybe-configure-tcl maybe-configure-tk\n-all-expect: maybe-all-tcl maybe-all-tk\n-configure-itcl: maybe-configure-tcl maybe-configure-tk\n-all-itcl: maybe-all-tcl maybe-all-tk\n-# We put install-tcl before install-itcl because itcl wants to run a\n-# program on installation which uses the Tcl libraries.\n-install-itcl: maybe-install-tcl\n-all-sid: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-tcl maybe-all-tk\n-install-sid: maybe-install-tcl maybe-install-tk\n-all-sim: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-readline maybe-configure-gdb\n-configure-tk: maybe-configure-tcl\n-all-tk: maybe-all-tcl\n-configure-tix: maybe-configure-tcl maybe-configure-tk\n-all-tix: maybe-all-tcl maybe-all-tk\n-all-texinfo: maybe-all-libiberty\n-\n-# Other host modules.  Warning, these are not well tested.\n-all-autoconf: maybe-all-m4 maybe-all-texinfo\n-all-automake: maybe-all-m4 maybe-all-texinfo\n-all-bison: maybe-all-texinfo\n-all-diff: maybe-all-libiberty\n-all-fastjar: maybe-all-zlib maybe-all-libiberty\n-all-fileutils: maybe-all-libiberty\n-all-flex: maybe-all-libiberty maybe-all-bison maybe-all-byacc\n-all-gzip: maybe-all-libiberty\n-all-hello: maybe-all-libiberty\n-all-m4: maybe-all-libiberty maybe-all-texinfo\n-all-make: maybe-all-libiberty maybe-all-intl\n-all-patch: maybe-all-libiberty\n-all-prms: maybe-all-libiberty\n-all-recode: maybe-all-libiberty\n-all-sed: maybe-all-libiberty\n-all-send-pr: maybe-all-prms\n-all-tar: maybe-all-libiberty\n-all-uudecode: maybe-all-libiberty\n-\n-ALL_GCC = maybe-all-gcc\n-ALL_GCC_C = $(ALL_GCC) maybe-all-target-newlib maybe-all-target-libgloss\n-ALL_GCC_CXX = $(ALL_GCC_C) maybe-all-target-libstdc++-v3\n-\n-# Target modules specific to gcc.\n-configure-target-boehm-gc: $(ALL_GCC_C) maybe-configure-target-qthreads\n-configure-target-fastjar: maybe-configure-target-zlib\n-all-target-fastjar: maybe-all-target-zlib maybe-all-target-libiberty\n-configure-target-libada: $(ALL_GCC_C)\n-configure-target-libgfortran: $(ALL_GCC_C)\n-configure-target-libffi: $(ALL_GCC_C) \n-configure-target-libjava: $(ALL_GCC_C) maybe-configure-target-zlib maybe-configure-target-boehm-gc maybe-configure-target-qthreads maybe-configure-target-libffi\n-all-target-libjava: maybe-all-fastjar maybe-all-target-zlib maybe-all-target-boehm-gc maybe-all-target-qthreads maybe-all-target-libffi\n-configure-target-libobjc: $(ALL_GCC_C)\n-all-target-libobjc: maybe-all-target-libiberty\n-configure-target-libstdc++-v3: $(ALL_GCC_C)\n-all-target-libstdc++-v3: maybe-all-target-libiberty\n-configure-target-zlib: $(ALL_GCC_C)\n-\n-# Target modules in the 'src' repository.\n-configure-target-examples: $(ALL_GCC_C)\n-configure-target-libgloss: $(ALL_GCC)\n-all-target-libgloss: maybe-configure-target-newlib\n-configure-target-libiberty: $(ALL_GCC)\n-configure-target-libtermcap: $(ALL_GCC_C)\n-configure-target-newlib: $(ALL_GCC)\n-configure-target-rda: $(ALL_GCC_C)\n-configure-target-winsup: $(ALL_GCC_C)\n-all-target-winsup: maybe-all-target-libiberty maybe-all-target-libtermcap\n-\n-# Other target modules.  Warning, these are not well tested.\n-configure-target-gperf: $(ALL_GCC_CXX)\n-all-target-gperf: maybe-all-target-libiberty maybe-all-target-libstdc++-v3\n-configure-target-qthreads: $(ALL_GCC_C)\n+all-gdb: $(gdbnlmrequirements) $(GDB_TK)\n \n # Serialization dependencies.  Host configures don't work well in parallel to\n # each other, due to contention over config.cache.  Target configures and "}]}