{"sha": "581be128699c4f5953b9bfe70a6d7bf42dfd7d9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxYmUxMjg2OTljNGY1OTUzYjliZmU3MGE2ZDdiZjQyZGZkN2Q5ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-12-30T23:07:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-12-30T23:07:15Z"}, "message": "i386.c (ix86_legitimize_address): Declare \"changed\" as bool.\n\n\t* config/i386/i386.c (ix86_legitimize_address): Declare\n\t\"changed\" as bool.\n\t(ix86_expand_unary_operator): Declare \"matching_memory\" as bool.\n\t(ix86_avoid_jump_mispredicts): Declare \"isjump\" as bool.\n\n\t* config/i386/i386.c (ix86_reassociation_width): Remove unneeded\n\tvariable \"res\".\n\nFrom-SVN: r219115", "tree": {"sha": "c7aafb7c18e7bdad710a6707088f90f27cf38c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7aafb7c18e7bdad710a6707088f90f27cf38c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/581be128699c4f5953b9bfe70a6d7bf42dfd7d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581be128699c4f5953b9bfe70a6d7bf42dfd7d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/581be128699c4f5953b9bfe70a6d7bf42dfd7d9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581be128699c4f5953b9bfe70a6d7bf42dfd7d9e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9897ab448f53f3cfdf546c9f58c7101c57826dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9897ab448f53f3cfdf546c9f58c7101c57826dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9897ab448f53f3cfdf546c9f58c7101c57826dc0"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "2b89c49d2758e450e4d77040744c28b67c66d28e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581be128699c4f5953b9bfe70a6d7bf42dfd7d9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581be128699c4f5953b9bfe70a6d7bf42dfd7d9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=581be128699c4f5953b9bfe70a6d7bf42dfd7d9e", "patch": "@@ -1,3 +1,15 @@\n+2014-12-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_legitimize_address): Declare\n+\t\"changed\" as bool.\n+\t(ix86_expand_unary_operator): Declare \"matching_memory\" as bool.\n+\t(ix86_avoid_jump_mispredicts): Declare \"isjump\" as bool.\n+\n+2014-12-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_reassociation_width): Remove unneeded\n+\tvariable \"res\".\n+\n 2014-12-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (estimate_function_body_sizes): Do not"}, {"sha": "162fe269f94a64a8538ea57851618f460174bbdc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581be128699c4f5953b9bfe70a6d7bf42dfd7d9e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581be128699c4f5953b9bfe70a6d7bf42dfd7d9e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=581be128699c4f5953b9bfe70a6d7bf42dfd7d9e", "patch": "@@ -9009,7 +9009,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t\t  rtx slot = XVECEXP (container, 0, i);\n \t\t  if (REGNO (XEXP (slot, 0)) != FIRST_SSE_REG + (unsigned int) i\n \t\t      || INTVAL (XEXP (slot, 1)) != i * 16)\n-\t\t    need_temp = 1;\n+\t\t    need_temp = true;\n \t\t}\n \t    }\n \t  else\n@@ -9021,7 +9021,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t\t  rtx slot = XVECEXP (container, 0, i);\n \t\t  if (REGNO (XEXP (slot, 0)) != (unsigned int) i\n \t\t      || INTVAL (XEXP (slot, 1)) != i * 8)\n-\t\t    need_temp = 1;\n+\t\t    need_temp = true;\n \t\t}\n \t    }\n \t}\n@@ -14291,7 +14291,7 @@ legitimize_pe_coff_symbol (rtx addr, bool inreg)\n static rtx\n ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n {\n-  int changed = 0;\n+  bool changed = false;\n   unsigned log;\n \n   log = GET_CODE (x) == SYMBOL_REF ? SYMBOL_REF_TLS_MODEL (x) : 0;\n@@ -14327,7 +14327,7 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n       && CONST_INT_P (XEXP (x, 1))\n       && (unsigned HOST_WIDE_INT) INTVAL (XEXP (x, 1)) < 4)\n     {\n-      changed = 1;\n+      changed = true;\n       log = INTVAL (XEXP (x, 1));\n       x = gen_rtx_MULT (Pmode, force_reg (Pmode, XEXP (x, 0)),\n \t\t\tGEN_INT (1 << log));\n@@ -14341,7 +14341,7 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n \t  && CONST_INT_P (XEXP (XEXP (x, 0), 1))\n \t  && (unsigned HOST_WIDE_INT) INTVAL (XEXP (XEXP (x, 0), 1)) < 4)\n \t{\n-\t  changed = 1;\n+\t  changed = true;\n \t  log = INTVAL (XEXP (XEXP (x, 0), 1));\n \t  XEXP (x, 0) = gen_rtx_MULT (Pmode,\n \t\t\t\t      force_reg (Pmode, XEXP (XEXP (x, 0), 0)),\n@@ -14352,7 +14352,7 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n \t  && CONST_INT_P (XEXP (XEXP (x, 1), 1))\n \t  && (unsigned HOST_WIDE_INT) INTVAL (XEXP (XEXP (x, 1), 1)) < 4)\n \t{\n-\t  changed = 1;\n+\t  changed = true;\n \t  log = INTVAL (XEXP (XEXP (x, 1), 1));\n \t  XEXP (x, 1) = gen_rtx_MULT (Pmode,\n \t\t\t\t      force_reg (Pmode, XEXP (XEXP (x, 1), 0)),\n@@ -14363,7 +14363,7 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n       if (GET_CODE (XEXP (x, 1)) == MULT)\n \t{\n \t  std::swap (XEXP (x, 0), XEXP (x, 1));\n-\t  changed = 1;\n+\t  changed = true;\n \t}\n \n       /* Canonicalize (plus (mult (reg) (const)) (plus (reg) (const)))\n@@ -14372,7 +14372,7 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n \t similar optimizations.  */\n       if (GET_CODE (XEXP (x, 0)) == MULT && GET_CODE (XEXP (x, 1)) == PLUS)\n \t{\n-\t  changed = 1;\n+\t  changed = true;\n \t  x = gen_rtx_PLUS (Pmode,\n \t\t\t    gen_rtx_PLUS (Pmode, XEXP (x, 0),\n \t\t\t\t\t  XEXP (XEXP (x, 1), 0)),\n@@ -14405,7 +14405,7 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n \n \t  if (constant)\n \t    {\n-\t      changed = 1;\n+\t      changed = true;\n \t      x = gen_rtx_PLUS (Pmode,\n \t\t\t\tgen_rtx_PLUS (Pmode, XEXP (XEXP (x, 0), 0),\n \t\t\t\t\t      XEXP (XEXP (XEXP (x, 0), 1), 0)),\n@@ -14419,13 +14419,13 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n \n       if (GET_CODE (XEXP (x, 0)) == MULT)\n \t{\n-\t  changed = 1;\n+\t  changed = true;\n \t  XEXP (x, 0) = copy_addr_to_reg (XEXP (x, 0));\n \t}\n \n       if (GET_CODE (XEXP (x, 1)) == MULT)\n \t{\n-\t  changed = 1;\n+\t  changed = true;\n \t  XEXP (x, 1) = copy_addr_to_reg (XEXP (x, 1));\n \t}\n \n@@ -14436,7 +14436,7 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n \n       if (flag_pic && SYMBOLIC_CONST (XEXP (x, 1)))\n \t{\n-\t  changed = 1;\n+\t  changed = true;\n \t  x = legitimize_pic_address (x, 0);\n \t}\n \n@@ -18068,19 +18068,18 @@ void\n ix86_expand_unary_operator (enum rtx_code code, machine_mode mode,\n \t\t\t    rtx operands[])\n {\n-  int matching_memory;\n+  bool matching_memory = false;\n   rtx src, dst, op, clob;\n \n   dst = operands[0];\n   src = operands[1];\n \n   /* If the destination is memory, and we do not have matching source\n      operands, do things in registers.  */\n-  matching_memory = 0;\n   if (MEM_P (dst))\n     {\n       if (rtx_equal_p (dst, src))\n-\tmatching_memory = 1;\n+\tmatching_memory = true;\n       else\n \tdst = gen_reg_rtx (mode);\n     }\n@@ -43084,7 +43083,7 @@ ix86_avoid_jump_mispredicts (void)\n {\n   rtx_insn *insn, *start = get_insns ();\n   int nbytes = 0, njumps = 0;\n-  int isjump = 0;\n+  bool isjump = false;\n \n   /* Look for all minimal intervals of instructions containing 4 jumps.\n      The intervals are bounded by START and INSN.  NBYTES is the total\n@@ -43127,9 +43126,9 @@ ix86_avoid_jump_mispredicts (void)\n \t\t  start = NEXT_INSN (start);\n \t\t  if ((JUMP_P (start) && asm_noperands (PATTERN (start)) < 0)\n \t\t      || CALL_P (start))\n-\t\t    njumps--, isjump = 1;\n+\t\t    njumps--, isjump = true;\n \t\t  else\n-\t\t    isjump = 0;\n+\t\t    isjump = false;\n \t\t  nbytes -= min_insn_size (start);\n \t\t}\n \t    }\n@@ -43152,9 +43151,9 @@ ix86_avoid_jump_mispredicts (void)\n \t  start = NEXT_INSN (start);\n \t  if ((JUMP_P (start) && asm_noperands (PATTERN (start)) < 0)\n \t      || CALL_P (start))\n-\t    njumps--, isjump = 1;\n+\t    njumps--, isjump = true;\n \t  else\n-\t    isjump = 0;\n+\t    isjump = false;\n \t  nbytes -= min_insn_size (start);\n \t}\n       gcc_assert (njumps >= 0);\n@@ -51014,8 +51013,6 @@ has_dispatch (rtx_insn *insn, int action)\n static int\n ix86_reassociation_width (unsigned int, machine_mode mode)\n {\n-  int res = 1;\n-\n   /* Vector part.  */\n   if (VECTOR_MODE_P (mode))\n     {\n@@ -51027,11 +51024,11 @@ ix86_reassociation_width (unsigned int, machine_mode mode)\n \n   /* Scalar part.  */\n   if (INTEGRAL_MODE_P (mode) && TARGET_REASSOC_INT_TO_PARALLEL)\n-    res = 2;\n+    return 2;\n   else if (FLOAT_MODE_P (mode) && TARGET_REASSOC_FP_TO_PARALLEL)\n-    res = 2;\n-\n-  return res;\n+    return 2;\n+  else\n+    return 1;\n }\n \n /* ??? No autovectorization into MMX or 3DNOW until we can reliably"}]}