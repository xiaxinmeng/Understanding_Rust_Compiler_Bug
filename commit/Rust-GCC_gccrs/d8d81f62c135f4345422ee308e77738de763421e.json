{"sha": "d8d81f62c135f4345422ee308e77738de763421e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkODFmNjJjMTM1ZjQzNDU0MjJlZTMwOGU3NzczOGRlNzYzNDIxZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-04T17:36:38Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-04T17:36:38Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLE_DEBUG_FLAGS): To --enable-libstdcxx-debug-flags.\n\n\n2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_DEBUG_FLAGS): To\n\t--enable-libstdcxx-debug-flags.\n\t(GLIBCPP_ENABLE_DEBUG_FLAGS): To --enable-libstdcxx-debug.\n\t(GLIBCPP_ENABLE_PCH): To --enable-libstdcxx-pch.\n\t* aclocal.m4: Regenerate.\n\t* configure: Same.\n\t* docs/html/configopts.html: Update.\n\nFrom-SVN: r68925", "tree": {"sha": "3d8223ea22b8f1800c481e4fb19e9aec4c305db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d8223ea22b8f1800c481e4fb19e9aec4c305db4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d81f62c135f4345422ee308e77738de763421e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d81f62c135f4345422ee308e77738de763421e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d81f62c135f4345422ee308e77738de763421e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d81f62c135f4345422ee308e77738de763421e/comments", "author": null, "committer": null, "parents": [{"sha": "6124d3bda0f852bb2e53972ec1110137ed48de4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6124d3bda0f852bb2e53972ec1110137ed48de4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6124d3bda0f852bb2e53972ec1110137ed48de4c"}], "stats": {"total": 2757, "additions": 1385, "deletions": 1372}, "files": [{"sha": "3dbc8e898009e8eeffe76dd9c0b63bbeb7c15a86", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d8d81f62c135f4345422ee308e77738de763421e", "patch": "@@ -1,3 +1,13 @@\n+2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_DEBUG_FLAGS): To\n+\t--enable-libstdcxx-debug-flags.\n+\t(GLIBCPP_ENABLE_DEBUG_FLAGS): To --enable-libstdcxx-debug.\n+\t(GLIBCPP_ENABLE_PCH): To --enable-libstdcxx-pch.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Same.\n+\t* docs/html/configopts.html: Update.\n+\t\n 2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n \n \tRevert the fix for libstdc++/11378."}, {"sha": "9d727ba2e023933cfe8ab67c797173572f2df273", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=d8d81f62c135f4345422ee308e77738de763421e", "patch": "@@ -1013,67 +1013,68 @@ dnl Check to see if debugging libraries are to be built.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG\n dnl\n-dnl --enable-debug\n+dnl --enable-libstdcxx-debug\n dnl builds a separate set of debugging libraries in addition to the\n dnl normal (shared, static) libstdc++ binaries.\n dnl\n-dnl --disable-debug\n+dnl --disable-libstdcxx-debug\n dnl builds only one (non-debug) version of libstdc++.\n dnl\n-dnl --enable-debug-flags=FLAGS\n+dnl --enable-libstdcxx-debug-flags=FLAGS\n dnl iff --enable-debug == yes, then use FLAGS to build the debug library.\n dnl\n dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n AC_DEFUN(GLIBCPP_ENABLE_DEBUG, [dnl\n define([GLIBCPP_ENABLE_DEBUG_DEFAULT], ifelse($1, yes, yes, no))dnl\n-AC_ARG_ENABLE(debug,\n+AC_ARG_ENABLE(libstdcxx_debug,\n changequote(<<, >>)dnl\n-<<  --enable-debug          build extra debug library [default=>>GLIBCPP_ENABLE_DEBUG_DEFAULT],\n+<<  --enable-libstdcxx-debug          build extra debug library [default=>>GLIBCPP_ENABLE_DEBUG_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n- yes) enable_debug=yes ;;\n- no)  enable_debug=no ;;\n+ yes) enable_libstdcxx_debug=yes ;;\n+ no)  enable_libstdcxx_debug=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable extra debugging]) ;;\n  esac],\n-enable_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n+enable_libstdcxx_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n AC_MSG_CHECKING([for additional debug build])\n-AC_MSG_RESULT($enable_debug)\n-AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_debug\" = yes)\n+AC_MSG_RESULT($enable_libstdcxx_debug)\n+AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_libstdcxx_debug\" = yes)\n ])\n \n \n dnl Check for explicit debug flags.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG_FLAGS\n dnl\n-dnl --enable-debug-flags='-O1'\n+dnl --enable-libstdcxx-debug-flags='-O1'\n dnl is a general method for passing flags to be used when\n dnl building debug libraries with --enable-debug.\n dnl\n-dnl --disable-debug-flags does nothing.\n+dnl --disable-libstdcxx-debug-flags does nothing.\n dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n AC_DEFUN(GLIBCPP_ENABLE_DEBUG_FLAGS, [dnl\n define([GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n-AC_ARG_ENABLE(debug_flags,\n+AC_ARG_ENABLE(libstdcxx_debug_flags,\n changequote(<<, >>)dnl\n-<<  --enable-debug-flags=FLAGS    pass compiler FLAGS when building debug\n-\t                library;[default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n+<<  --enable-libstdcxx-debug-flags=FLAGS    pass compiler FLAGS when building \n+                                            debug library;\n+                                [default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n  none)  ;;\n- -*) enable_debug_flags=\"${enableval}\" ;;\n+ -*) enable_libstdcxx_debug_flags=\"${enableval}\" ;;\n  *)   AC_MSG_ERROR([Unknown argument to extra debugging flags]) ;;\n  esac],\n-enable_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n+enable_libstdcxx_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n \n dnl Option parsed, now set things appropriately\n-case x\"$enable_debug\" in\n+case x\"$enable_libstdcxx_debug\" in\n     xyes)\n-        case \"$enable_debug_flags\" in\n+        case \"$enable_libstdcxx_debug_flags\" in\n \t  none)\n             DEBUG_FLAGS=\"-g3 -O0\";;\n \t  -*) #valid input\n@@ -1111,7 +1112,7 @@ define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_MSG_CHECKING([for extra compiler flags for building])\n AC_ARG_ENABLE(cxx_flags,\n changequote(<<, >>)dnl\n-<<  --enable-cxx-flags=FLAGS      pass compiler FLAGS when building library;\n+<<  --enable-cxx-flags=FLAGS     pass compiler FLAGS when building library;\n                                   [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"x$enable_cxx_flags\" in\n@@ -1339,7 +1340,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n   [  --enable-cstdio         enable stdio for target io package.\n-  --enable-cstdio=LIB     use LIB target-speific io package. [default=stdio]\n+  --enable-cstdio=LIB     use LIB target-specific io package. [default=stdio]\n   ],\n   if test x$enable_cstdio = xno; then\n      enable_cstdio=stdio\n@@ -1378,55 +1379,55 @@ dnl Check to see if building and using a C++ precompiled header can be done.\n dnl\n dnl GLIBCPP_ENABLE_PCH\n dnl\n-dnl --enable-pch=yes\n+dnl --enable-libstdcxx-pch=yes\n dnl default, this shows intent to use stdc++.h.gch If it looks like it\n dnl may work, after some light-hearted attempts to puzzle out compiler\n dnl support, flip bits on in include/Makefile.am\n dnl\n-dnl --disable-pch\n+dnl --disable-libstdcxx-pch\n dnl turns off attempts to use or build stdc++.h.gch.\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_PCH, [dnl\n define([GLIBCPP_ENABLE_PCH_DEFAULT], ifelse($1,,, $1))dnl\n-AC_ARG_ENABLE(pch,\n+AC_ARG_ENABLE(libstdcxx_pch,\n changequote(<<, >>)dnl\n-<<  --enable-pch         build pre-compiled libstdc++ includes [default=>>GLIBCPP_ENABLE_PCH_DEFAULT],\n+<<  --enable-libstdcxx-pch     build pre-compiled libstdc++ includes [default=>>GLIBCPP_ENABLE_PCH_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n- yes) enable_pch=yes ;;\n- no)  enable_pch=no ;;\n+ yes) enable_libstdcxx_pch=yes ;;\n+ no)  enable_libstdcxx_pch=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable PCH]) ;;\n  esac],\n-enable_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n+enable_libstdcxx_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n \n-  if test x$enable_pch = xyes; then\n+  if test x$enable_libstdcxx_pch = xyes; then\n     ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n     ac_save_CXXFLAGS=\"$CXXFLAGS\"\n     CXXFLAGS='-Werror -Winvalid-pch -Wno-deprecated -x c++-header'\n \n     AC_MSG_CHECKING([for compiler that seems to compile .gch files])\n-    if test x${glibcpp_pch_comp+set} != xset; then\n-      AC_CACHE_VAL(glibcpp_pch_comp, [\n+    if test x${pch_comp+set} != xset; then\n+      AC_CACHE_VAL(pch_comp, [\n         AC_LANG_SAVE\n         AC_LANG_CPLUSPLUS\n         AC_TRY_COMPILE([#include <math.h>], ,\n-                       [glibcpp_pch_comp=yes], [glibcpp_pch_comp=no])\n+                       [pch_comp=yes], [pch_comp=no])\n         AC_LANG_RESTORE\n       ])\n     fi\n-    AC_MSG_RESULT([$glibcpp_pch_comp])\n+    AC_MSG_RESULT([$pch_comp])\n \n     CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   fi\n \n-  if test x\"$enable_pch\" = xyes && test x\"$glibcpp_pch_comp\" = xno; then\n+  if test x\"$enable_libstdcxx_pch\" = xyes && test x\"$pch_comp\" = xno; then\n     enable_pch=no\n   fi\n \n   AC_MSG_CHECKING([for enabled PCH])\n-  AC_MSG_RESULT([$enable_pch])\n+  AC_MSG_RESULT([$enable_libstdcxx_pch])\n \n-  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$enable_pch\" = yes)\n+  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$enable_libstdcxx_pch\" = yes)\n   if test \"$enable_pch\" = yes; then\n \tglibcpp_PCHFLAGS=\"-include bits/stdc++.h\"\n   else"}, {"sha": "8858b4b416e2038aa6f3039cd97bc6e5cc4d6064", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=d8d81f62c135f4345422ee308e77738de763421e", "patch": "@@ -1025,67 +1025,68 @@ dnl Check to see if debugging libraries are to be built.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG\n dnl\n-dnl --enable-debug\n+dnl --enable-libstdcxx-debug\n dnl builds a separate set of debugging libraries in addition to the\n dnl normal (shared, static) libstdc++ binaries.\n dnl\n-dnl --disable-debug\n+dnl --disable-libstdcxx-debug\n dnl builds only one (non-debug) version of libstdc++.\n dnl\n-dnl --enable-debug-flags=FLAGS\n+dnl --enable-libstdcxx-debug-flags=FLAGS\n dnl iff --enable-debug == yes, then use FLAGS to build the debug library.\n dnl\n dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n dnl       defaults to `no'.\n AC_DEFUN(GLIBCPP_ENABLE_DEBUG, [dnl\n define([GLIBCPP_ENABLE_DEBUG_DEFAULT], ifelse($1, yes, yes, no))dnl\n-AC_ARG_ENABLE(debug,\n+AC_ARG_ENABLE(libstdcxx_debug,\n changequote(<<, >>)dnl\n-<<  --enable-debug          build extra debug library [default=>>GLIBCPP_ENABLE_DEBUG_DEFAULT],\n+<<  --enable-libstdcxx-debug          build extra debug library [default=>>GLIBCPP_ENABLE_DEBUG_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n- yes) enable_debug=yes ;;\n- no)  enable_debug=no ;;\n+ yes) enable_libstdcxx_debug=yes ;;\n+ no)  enable_libstdcxx_debug=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable extra debugging]) ;;\n  esac],\n-enable_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n+enable_libstdcxx_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n AC_MSG_CHECKING([for additional debug build])\n-AC_MSG_RESULT($enable_debug)\n-AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_debug\" = yes)\n+AC_MSG_RESULT($enable_libstdcxx_debug)\n+AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_libstdcxx_debug\" = yes)\n ])\n \n \n dnl Check for explicit debug flags.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG_FLAGS\n dnl\n-dnl --enable-debug-flags='-O1'\n+dnl --enable-libstdcxx-debug-flags='-O1'\n dnl is a general method for passing flags to be used when\n dnl building debug libraries with --enable-debug.\n dnl\n-dnl --disable-debug-flags does nothing.\n+dnl --disable-libstdcxx-debug-flags does nothing.\n dnl  +  Usage:  GLIBCPP_ENABLE_DEBUG_FLAGS(default flags)\n dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n AC_DEFUN(GLIBCPP_ENABLE_DEBUG_FLAGS, [dnl\n define([GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n-AC_ARG_ENABLE(debug_flags,\n+AC_ARG_ENABLE(libstdcxx_debug_flags,\n changequote(<<, >>)dnl\n-<<  --enable-debug-flags=FLAGS    pass compiler FLAGS when building debug\n-\t                library;[default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n+<<  --enable-libstdcxx-debug-flags=FLAGS    pass compiler FLAGS when building \n+                                            debug library;\n+                                [default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n  none)  ;;\n- -*) enable_debug_flags=\"${enableval}\" ;;\n+ -*) enable_libstdcxx_debug_flags=\"${enableval}\" ;;\n  *)   AC_MSG_ERROR([Unknown argument to extra debugging flags]) ;;\n  esac],\n-enable_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n+enable_libstdcxx_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n \n dnl Option parsed, now set things appropriately\n-case x\"$enable_debug\" in\n+case x\"$enable_libstdcxx_debug\" in\n     xyes)\n-        case \"$enable_debug_flags\" in\n+        case \"$enable_libstdcxx_debug_flags\" in\n \t  none)\n             DEBUG_FLAGS=\"-g3 -O0\";;\n \t  -*) #valid input\n@@ -1123,7 +1124,7 @@ define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_MSG_CHECKING([for extra compiler flags for building])\n AC_ARG_ENABLE(cxx_flags,\n changequote(<<, >>)dnl\n-<<  --enable-cxx-flags=FLAGS      pass compiler FLAGS when building library;\n+<<  --enable-cxx-flags=FLAGS     pass compiler FLAGS when building library;\n                                   [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"x$enable_cxx_flags\" in\n@@ -1351,7 +1352,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n   [  --enable-cstdio         enable stdio for target io package.\n-  --enable-cstdio=LIB     use LIB target-speific io package. [default=stdio]\n+  --enable-cstdio=LIB     use LIB target-specific io package. [default=stdio]\n   ],\n   if test x$enable_cstdio = xno; then\n      enable_cstdio=stdio\n@@ -1390,55 +1391,55 @@ dnl Check to see if building and using a C++ precompiled header can be done.\n dnl\n dnl GLIBCPP_ENABLE_PCH\n dnl\n-dnl --enable-pch=yes\n+dnl --enable-libstdcxx-pch=yes\n dnl default, this shows intent to use stdc++.h.gch If it looks like it\n dnl may work, after some light-hearted attempts to puzzle out compiler\n dnl support, flip bits on in include/Makefile.am\n dnl\n-dnl --disable-pch\n+dnl --disable-libstdcxx-pch\n dnl turns off attempts to use or build stdc++.h.gch.\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_PCH, [dnl\n define([GLIBCPP_ENABLE_PCH_DEFAULT], ifelse($1,,, $1))dnl\n-AC_ARG_ENABLE(pch,\n+AC_ARG_ENABLE(libstdcxx_pch,\n changequote(<<, >>)dnl\n-<<  --enable-pch         build pre-compiled libstdc++ includes [default=>>GLIBCPP_ENABLE_PCH_DEFAULT],\n+<<  --enable-libstdcxx-pch     build pre-compiled libstdc++ includes [default=>>GLIBCPP_ENABLE_PCH_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n- yes) enable_pch=yes ;;\n- no)  enable_pch=no ;;\n+ yes) enable_libstdcxx_pch=yes ;;\n+ no)  enable_libstdcxx_pch=no ;;\n  *)   AC_MSG_ERROR([Unknown argument to enable/disable PCH]) ;;\n  esac],\n-enable_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n+enable_libstdcxx_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n \n-  if test x$enable_pch = xyes; then\n+  if test x$enable_libstdcxx_pch = xyes; then\n     ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n     ac_save_CXXFLAGS=\"$CXXFLAGS\"\n     CXXFLAGS='-Werror -Winvalid-pch -Wno-deprecated -x c++-header'\n \n     AC_MSG_CHECKING([for compiler that seems to compile .gch files])\n-    if test x${glibcpp_pch_comp+set} != xset; then\n-      AC_CACHE_VAL(glibcpp_pch_comp, [\n+    if test x${pch_comp+set} != xset; then\n+      AC_CACHE_VAL(pch_comp, [\n         AC_LANG_SAVE\n         AC_LANG_CPLUSPLUS\n         AC_TRY_COMPILE([#include <math.h>], ,\n-                       [glibcpp_pch_comp=yes], [glibcpp_pch_comp=no])\n+                       [pch_comp=yes], [pch_comp=no])\n         AC_LANG_RESTORE\n       ])\n     fi\n-    AC_MSG_RESULT([$glibcpp_pch_comp])\n+    AC_MSG_RESULT([$pch_comp])\n \n     CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   fi\n \n-  if test x\"$enable_pch\" = xyes && test x\"$glibcpp_pch_comp\" = xno; then\n+  if test x\"$enable_libstdcxx_pch\" = xyes && test x\"$pch_comp\" = xno; then\n     enable_pch=no\n   fi\n \n   AC_MSG_CHECKING([for enabled PCH])\n-  AC_MSG_RESULT([$enable_pch])\n+  AC_MSG_RESULT([$enable_libstdcxx_pch])\n \n-  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$enable_pch\" = yes)\n+  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$enable_libstdcxx_pch\" = yes)\n   if test \"$enable_pch\" = yes; then\n \tglibcpp_PCHFLAGS=\"-include bits/stdc++.h\"\n   else"}, {"sha": "990eb781f0339b78b3f1b3b573781e5b1faddae6", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1297, "deletions": 1296, "changes": 2593, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d8d81f62c135f4345422ee308e77738de763421e"}, {"sha": "2f16b7a6b2ccf0da49fb3ad3658a22334e763827", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d81f62c135f4345422ee308e77738de763421e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=d8d81f62c135f4345422ee308e77738de763421e", "patch": "@@ -144,7 +144,7 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n- <dt><code>--enable-debug  </code></dt>\n+ <dt><code>--enable-libstdcxx-debug  </code></dt>\n  <dd><p>Build separate debug libraries in addition to what is normally built.\n  \tBy default, the debug libraries are compiled with \n         <code> CXXFLAGS='-g3 -O0'</code>\n@@ -159,7 +159,7 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n- <dt><code>--enable-debug-flags=FLAGS</code></dt>\n+ <dt><code>--enable-libstdcxx-debug-flags=FLAGS</code></dt>\n \n  <dd><p>This option is only valid when <code> --enable-debug </code>\n         is also specified, and applies to the debug builds only. With\n@@ -168,7 +168,7 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n         FLAGS is a quoted string of options, like\n      </p>\n         <pre>\n-  --enable-debug-flags='-g3 -O1 -gdwarf-2'</pre>\n+  --enable-libstdcxx-debug-flags='-g3 -O1 -gdwarf-2'</pre>\n  </dd>\n \n  <dt><code>--enable-cxx-flags=FLAGS</code></dt>\n@@ -262,7 +262,7 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n- <dt><code>--enable-pch  </code></dt>\n+ <dt><code>--enable-libstdcxx-pch  </code></dt>\n  <dd><p>In 3.4 and later, tries to turn on the generation of\n         stdc++.h.gch, a pre-compiled file including all the standard\n         C++ includes. If enabled (as by default), and the compiler"}]}