{"sha": "d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhNDhjMjExZTkwNTZlOGFhOGQ2MmQ0YmIyYTJjYmUzMmM3NDgxNQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-25T23:03:06Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-25T23:03:06Z"}, "message": "re PR target/54089 ([SH] Refactor shift patterns)\n\n\tPR target/54089\n\t* config/sh/predicates.md (shift_count_operand): Handle not-SHMEDIA\n\tcase.\n\t(p27_shift_count_operand, not_p27_shift_count_operand): New predicates.\n\t* config/sh/sh.md (ashlsi3): Remove parallel and T_REG clobber\n\tfrom expander.  Do not emit shift insn for not-SHMEDIA case.\n\t(ashlsi3_std): Replace with ...\n\t(ashlsi3_k, ashlsi3_d): ... these new insns.\n\t* config/sh/sh.c (gen_ashift): Make static.  Add sanity checks.\n\tEmit ashlsi3_k insn instead of ashlsi3_std in ASHIFT case.\n\t(gen_ashift_hi): Make static.\n\t* config/sh/sh-protos.h (gen_ashift, gen_ashift_hi): Remove forward\n\tdeclaration.\n\nFrom-SVN: r189872", "tree": {"sha": "95d7dea89a15eeed4848095b5087afefcd61b69b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95d7dea89a15eeed4848095b5087afefcd61b69b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/comments", "author": null, "committer": null, "parents": [{"sha": "1acc33406fdf0d0eec647e2e5c6d02ce67a6e50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acc33406fdf0d0eec647e2e5c6d02ce67a6e50d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1acc33406fdf0d0eec647e2e5c6d02ce67a6e50d"}], "stats": {"total": 156, "additions": 104, "deletions": 52}, "files": [{"sha": "2ef72fef6f4bd89b787fe2936f2a63b9c7b85629", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "patch": "@@ -1,3 +1,19 @@\n+2012-07-25  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* config/sh/predicates.md (shift_count_operand): Handle not-SHMEDIA\n+\tcase.\n+\t(p27_shift_count_operand, not_p27_shift_count_operand): New predicates.\n+\t* config/sh/sh.md (ashlsi3): Remove parallel and T_REG clobber\n+\tfrom expander.  Do not emit shift insn for not-SHMEDIA case.\n+\t(ashlsi3_std): Replace with ...\n+\t(ashlsi3_k, ashlsi3_d): ... these new insns.\n+\t* config/sh/sh.c (gen_ashift): Make static.  Add sanity checks.\n+\tEmit ashlsi3_k insn instead of ashlsi3_std in ASHIFT case.\n+\t(gen_ashift_hi): Make static.\n+\t* config/sh/sh-protos.h (gen_ashift, gen_ashift_hi): Remove forward\n+\tdeclaration.\n+\n 2012-07-25  Bharathi Seshadri  <bseshadr@cisco.com>\n \t    Jim Wilson  <jimwilso@cisco.com>\n "}, {"sha": "e87f6ba12bfb570c354709ddadef5e249569b7aa", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "patch": "@@ -755,6 +755,13 @@\n (define_predicate \"shift_count_operand\"\n   (match_code \"const_int,const_double,const,symbol_ref,label_ref,subreg,reg,zero_extend,sign_extend\")\n {\n+  /* Allow T_REG as shift count for dynamic shifts, although it is not\n+     really possible.  It will then be copied to a general purpose reg.  */\n+  if (! TARGET_SHMEDIA)\n+    return const_int_operand (op, mode)\n+\t   || (TARGET_DYNSHIFT && (arith_reg_operand (op, mode)\n+\t\t\t\t   || t_reg_operand (op, mode)));\n+\n   return (CONSTANT_P (op)\n \t  ? (CONST_INT_P (op)\n \t     ? (unsigned) INTVAL (op) < GET_MODE_BITSIZE (mode)\n@@ -785,6 +792,14 @@\n   return arith_reg_operand (op, mode);\n })\n \n+(define_predicate \"p27_shift_count_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"satisfies_constraint_P27 (op)\")))\n+\n+(define_predicate \"not_p27_shift_count_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"! satisfies_constraint_P27 (op)\")))\n+\n ;; TODO: Add a comment here.\n \n (define_predicate \"shift_operator\""}, {"sha": "ff29399ee28217d5a2a664c1449af467fb2de93e", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "patch": "@@ -74,8 +74,6 @@ extern rtx sh_emit_cheap_store_flag (enum machine_mode, enum rtx_code, rtx, rtx)\n extern void sh_emit_compare_and_branch (rtx *, enum machine_mode);\n extern void sh_emit_compare_and_set (rtx *, enum machine_mode);\n extern int shift_insns_rtx (rtx);\n-extern void gen_ashift (int, int, rtx);\n-extern void gen_ashift_hi (int, int, rtx);\n extern void gen_shifty_op (int, rtx *);\n extern void gen_shifty_hi_op (int, rtx *);\n extern bool expand_ashiftrt (rtx *);"}, {"sha": "b0ef972dcc22aa1950746110c0965d308531b5bc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "patch": "@@ -3277,9 +3277,11 @@ sh_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n \n /* Code to expand a shift.  */\n \n-void\n+static void\n gen_ashift (int type, int n, rtx reg)\n {\n+  rtx n_rtx;\n+\n   /* Negative values here come from the shift_amounts array.  */\n   if (n < 0)\n     {\n@@ -3290,26 +3292,30 @@ gen_ashift (int type, int n, rtx reg)\n       n = -n;\n     }\n \n+  n_rtx = GEN_INT (n);\n+  gcc_assert (satisfies_constraint_P27 (n_rtx));\n+\n   switch (type)\n     {\n     case ASHIFTRT:\n-      emit_insn (gen_ashrsi3_k (reg, reg, GEN_INT (n)));\n+      emit_insn (gen_ashrsi3_k (reg, reg, n_rtx));\n       break;\n     case LSHIFTRT:\n       if (n == 1)\n-\temit_insn (gen_lshrsi3_m (reg, reg, GEN_INT (n)));\n+\temit_insn (gen_lshrsi3_m (reg, reg, n_rtx));\n       else\n-\temit_insn (gen_lshrsi3_k (reg, reg, GEN_INT (n)));\n+\temit_insn (gen_lshrsi3_k (reg, reg, n_rtx));\n       break;\n     case ASHIFT:\n-      emit_insn (gen_ashlsi3_std (reg, reg, GEN_INT (n)));\n+      emit_insn (gen_ashlsi3_k (reg, reg, n_rtx));\n       break;\n+    default:\n+      gcc_unreachable ();\n     }\n }\n \n /* Same for HImode */\n-\n-void\n+static void\n gen_ashift_hi (int type, int n, rtx reg)\n {\n   /* Negative values here come from the shift_amounts array.  */"}, {"sha": "2224fa4c8f371bdbb548ddf7d769895cd2ce8524", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 60, "deletions": 43, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=d8a48c211e9056e8aa8d62d4bb2a2cbe32c74815", "patch": "@@ -3492,67 +3492,84 @@ label:\n ;; SImode shift left\n \n (define_expand \"ashlsi3\"\n-  [(parallel [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-\t\t   (ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n-\t\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:SI T_REG))])]\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n+\t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"shift_count_operand\" \"\")))]\n   \"\"\n {\n   if (TARGET_SHMEDIA)\n     {\n       emit_insn (gen_ashlsi3_media (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-  if (CONST_INT_P (operands[2])\n-      && sh_dynamicalize_shift_p (operands[2]))\n-    operands[2] = force_reg (SImode, operands[2]);\n-  if (TARGET_DYNSHIFT)\n+  if (TARGET_DYNSHIFT\n+      && CONST_INT_P (operands[2]) && sh_dynamicalize_shift_p (operands[2]))\n+      operands[2] = force_reg (SImode, operands[2]);\n+})\n+\n+(define_insn \"ashlsi3_k\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n+\t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0,0\")\n+\t\t   (match_operand:SI 2 \"p27_shift_count_operand\" \"M,P27\")))]\n+  \"TARGET_SH1\"\n+  \"@\n+\tadd\t%0,%0\n+\tshll%O2\t%0\"\n+  [(set_attr \"type\" \"arith\")])\n+\n+(define_insn_and_split \"ashlsi3_d\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t   (match_operand:SI 2 \"shift_count_operand\" \"r\")))]\n+  \"TARGET_DYNSHIFT\"\n+  \"shld\t%2,%0\"\n+  \"&& (CONST_INT_P (operands[2]) && ! sh_dynamicalize_shift_p (operands[2]))\"\n+  [(const_int 0)]\n+{\n+  if (satisfies_constraint_P27 (operands[2]))\n     {\n-      emit_insn (gen_ashlsi3_std (operands[0], operands[1], operands[2]));\n+      emit_insn (gen_ashlsi3_k (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+  else if (!satisfies_constraint_P27 (operands[2]))\n+    {\n+      emit_insn (gen_ashlsi3_n (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-  if (! immediate_operand (operands[2], GET_MODE (operands[2])))\n-    FAIL;\n-})\n \n-;; This pattern is used by init_expmed for computing the costs of shift\n-;; insns.\n-(define_insn_and_split \"ashlsi3_std\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r,r,r\")\n-\t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0,0,0,0\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,M,P27,?ri\")))\n-   (clobber (match_scratch:SI 3 \"=X,X,X,&r\"))]\n-  \"TARGET_DYNSHIFT || (TARGET_SH1 && satisfies_constraint_P27 (operands[2]))\"\n-  \"@\n-   shld\t%2,%0\n-   add\t%0,%0\n-   shll%O2\t%0\n-   #\"\n-  \"TARGET_DYNSHIFT\n-   && reload_completed\n-   && CONST_INT_P (operands[2])\n-   && ! satisfies_constraint_P27 (operands[2])\"\n-  [(set (match_dup 3) (match_dup 2))\n-   (parallel\n-    [(set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 3)))\n-     (clobber (match_dup 4))])]\n-{\n-  operands[4] = gen_rtx_SCRATCH (SImode);\n+  FAIL;\n }\n-  [(set_attr \"length\" \"*,*,*,4\")\n-   (set_attr \"type\" \"dyn_shift,arith,arith,arith\")])\n+  [(set_attr \"type\" \"arith\")])\n \n (define_insn_and_split \"ashlsi3_n\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1 && ! sh_dynamicalize_shift_p (operands[2])\"\n+\t\t   (match_operand:SI 2 \"not_p27_shift_count_operand\" \"\")))]\n+  \"TARGET_SH1\"\n   \"#\"\n-  \"TARGET_SH1 && reload_completed\"\n-  [(use (reg:SI R0_REG))]\n+  \"&& (reload_completed || INTVAL (operands[2]) == 31\n+       || (sh_dynamicalize_shift_p (operands[2]) && can_create_pseudo_p ()))\"\n+  [(const_int 0)]\n {\n-  gen_shifty_op (ASHIFT, operands);\n+  if (INTVAL (operands[2]) == 31)\n+    {\n+      /* If the shift amount is 31 we split into a different sequence before\n+\t reload so that it gets a chance to allocate R0 for the sequence.\n+\t If it fails to do so (due to pressure on R0), it will take one insn\n+\t more for the and.  */\n+      emit_insn (gen_andsi3 (operands[0], operands[1], const1_rtx));\n+      emit_insn (gen_rotlsi3_31 (operands[0], operands[0]));\n+    }\n+  else if (sh_dynamicalize_shift_p (operands[2]) && can_create_pseudo_p ())\n+    {\n+      /* If this pattern was picked and dynamic shifts are supported, switch\n+\t to dynamic shift pattern before reload.  */\n+      operands[2] = force_reg (SImode, operands[2]);\n+      emit_insn (gen_ashlsi3_d (operands[0], operands[1], operands[2]));\n+    }\n+  else\n+    gen_shifty_op (ASHIFT, operands);\n+\n   DONE;\n })\n "}]}