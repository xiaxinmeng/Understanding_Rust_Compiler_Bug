{"sha": "5b296c8a7612a3a3adea46343e3475bbb979a2e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyOTZjOGE3NjEyYTNhM2FkZWE0NjM0M2UzNDc1YmJiOTc5YTJlOA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-04-09T15:39:34Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-04-09T15:39:34Z"}, "message": "predicates.md (altivec_register_operand): Remove redundant match_code test.\n\n        * config/rs6000/predicates.md (altivec_register_operand): Remove\n        redundant match_code test.\n        (gpc_reg_operand): Same.\n        (cc_reg_operand): Same.\n        (cc_reg_not_cr0_operand): Same.\n\nFrom-SVN: r97902", "tree": {"sha": "e93223d4df0f23e598710710604e997eb55f8ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e93223d4df0f23e598710710604e997eb55f8ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b296c8a7612a3a3adea46343e3475bbb979a2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b296c8a7612a3a3adea46343e3475bbb979a2e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b296c8a7612a3a3adea46343e3475bbb979a2e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b296c8a7612a3a3adea46343e3475bbb979a2e8/comments", "author": null, "committer": null, "parents": [{"sha": "0be0a2bef8720161d2275272ad37b68d49064e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be0a2bef8720161d2275272ad37b68d49064e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be0a2bef8720161d2275272ad37b68d49064e00"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "2b5ad905d4055939e3198db7783ff491cddeba57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b296c8a7612a3a3adea46343e3475bbb979a2e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b296c8a7612a3a3adea46343e3475bbb979a2e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b296c8a7612a3a3adea46343e3475bbb979a2e8", "patch": "@@ -1,3 +1,11 @@\n+2005-04-09  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/predicates.md (altivec_register_operand): Remove\n+\tredundant match_code test.\n+\t(gpc_reg_operand): Same.\n+\t(cc_reg_operand): Same.\n+\t(cc_reg_not_cr0_operand): Same.\n+\n 2005-04-09  Jan Hubicka  <jh@suse.cz>\n \n \tForgotten hunk from my last merge patch:"}, {"sha": "430816423efe2ffe5a07f32cfea4c784fef1b8dd", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b296c8a7612a3a3adea46343e3475bbb979a2e8/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b296c8a7612a3a3adea46343e3475bbb979a2e8/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=5b296c8a7612a3a3adea46343e3475bbb979a2e8", "patch": "@@ -34,11 +34,10 @@\n   \n ;; Return 1 if op is an Altivec register.\n (define_predicate \"altivec_register_operand\"\n-  (and (match_code \"reg,subreg\")\n-       (and (match_operand 0 \"register_operand\")\n-\t    (match_test \"GET_CODE (op) != REG\n-\t\t\t || ALTIVEC_REGNO_P (REGNO (op))\n-\t\t\t || REGNO (op) > LAST_VIRTUAL_REGISTER\"))))\n+   (and (match_operand 0 \"register_operand\")\n+\t(match_test \"GET_CODE (op) != REG\n+\t\t     || ALTIVEC_REGNO_P (REGNO (op))\n+\t\t     || REGNO (op) > LAST_VIRTUAL_REGISTER\")))\n \n ;; Return 1 if op is XER register.\n (define_predicate \"xer_operand\"\n@@ -74,28 +73,25 @@\n \n ;; Return 1 if op is a register that is not special.\n (define_predicate \"gpc_reg_operand\"\n-  (and (match_code \"reg,subreg\")\n-       (and (match_operand 0 \"register_operand\")\n-\t    (match_test \"GET_CODE (op) != REG\n-\t\t\t || (REGNO (op) >= ARG_POINTER_REGNUM\n-\t\t\t     && !XER_REGNO_P (REGNO (op)))\n-\t\t\t || REGNO (op) < MQ_REGNO\"))))\n+   (and (match_operand 0 \"register_operand\")\n+\t(match_test \"GET_CODE (op) != REG\n+\t\t     || (REGNO (op) >= ARG_POINTER_REGNUM\n+\t\t\t && !XER_REGNO_P (REGNO (op)))\n+\t\t     || REGNO (op) < MQ_REGNO\")))\n \n ;; Return 1 if op is a register that is a condition register field.\n (define_predicate \"cc_reg_operand\"\n-  (and (match_code \"reg,subreg\")\n-       (and (match_operand 0 \"register_operand\")\n-\t    (match_test \"GET_CODE (op) != REG\n-\t\t\t || REGNO (op) > LAST_VIRTUAL_REGISTER\n-\t\t\t || CR_REGNO_P (REGNO (op))\"))))\n+   (and (match_operand 0 \"register_operand\")\n+\t(match_test \"GET_CODE (op) != REG\n+\t\t     || REGNO (op) > LAST_VIRTUAL_REGISTER\n+\t\t     || CR_REGNO_P (REGNO (op))\")))\n \n ;; Return 1 if op is a register that is a condition register field not cr0.\n (define_predicate \"cc_reg_not_cr0_operand\"\n-  (and (match_code \"reg,subreg\")\n-       (and (match_operand 0 \"register_operand\")\n-\t    (match_test \"GET_CODE (op) != REG\n-\t\t\t || REGNO (op) > LAST_VIRTUAL_REGISTER\n-\t\t\t || CR_REGNO_NOT_CR0_P (REGNO (op))\"))))\n+   (and (match_operand 0 \"register_operand\")\n+\t(match_test \"GET_CODE (op) != REG\n+\t\t     || REGNO (op) > LAST_VIRTUAL_REGISTER\n+\t\t     || CR_REGNO_NOT_CR0_P (REGNO (op))\")))\n \n ;; Return 1 if op is a constant integer valid for D field\n ;; or non-special register register."}]}