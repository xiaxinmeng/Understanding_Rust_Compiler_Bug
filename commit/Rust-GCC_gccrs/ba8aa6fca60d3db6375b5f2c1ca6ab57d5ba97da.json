{"sha": "ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4YWE2ZmNhNjBkM2RiNjM3NWI1ZjJjMWNhNmFiNTdkNWJhOTdkYQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2014-08-14T18:52:12Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2014-08-14T18:52:12Z"}, "message": "re PR fortran/62106 (Adding a scalar variable to an array constructor gives wrong result)\n\n2014-08-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/62106\n\t* gfortran.h (symbol_attribute):  Add fe_temp flag.\n\t* frontend-passes.c (is_fe_temp):  New function.\n\t(create_var):  Don't add a temporary for an already\n\tcreated variable or for a constant.\n\t(combine_ARRAY_constructor):  Remove special handling\n\tfor constants.\n\n2014-08-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/62106\n\t* gfortran.dg/array_constructor_49.f90:  New test.\n\nFrom-SVN: r213980", "tree": {"sha": "c05298e642e4da5fff2ed70900313cdb25f9d8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c05298e642e4da5fff2ed70900313cdb25f9d8c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/comments", "author": null, "committer": null, "parents": [{"sha": "bc0229f9f6929e000bc638e26fcd25ff0e95b2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0229f9f6929e000bc638e26fcd25ff0e95b2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0229f9f6929e000bc638e26fcd25ff0e95b2ed"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "a8930a9f6365a500c631388d26eb864024dc5008", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "patch": "@@ -1,3 +1,13 @@\n+2014-08-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/62106\n+\t* gfortran.h (symbol_attribute):  Add fe_temp flag.\n+\t* frontend-passes.c (is_fe_temp):  New function.\n+\t(create_var):  Don't add a temporary for an already\n+\tcreated variable or for a constant.\n+\t(combine_ARRAY_constructor):  Remove special handling\n+\tfor constants.\n+\n 2014-08-14  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.texi (caf_register_t): Add CAF_REGTYPE_CRITICAL."}, {"sha": "edf63486784e19e9753e35b1075817ea0c5e5965", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "patch": "@@ -430,11 +430,26 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n+/* Auxiliary function to check if an expression is a temporary created by\n+   create var.  */\n+\n+static bool\n+is_fe_temp (gfc_expr *e)\n+{\n+  if (e->expr_type != EXPR_VARIABLE)\n+    return false;\n+\n+  return e->symtree->n.sym->attr.fe_temp;\n+}\n+\n+\n /* Returns a new expression (a variable) to be used in place of the old one,\n    with an assignment statement before the current statement to set\n    the value of the variable. Creates a new BLOCK for the statement if\n    that hasn't already been done and puts the statement, plus the\n-   newly created variables, in that block.  */\n+   newly created variables, in that block.  Special cases:  If the\n+   expression is constant or a temporary which has already\n+   been created, just copy it.  */\n \n static gfc_expr*\n create_var (gfc_expr * e)\n@@ -448,6 +463,9 @@ create_var (gfc_expr * e)\n   gfc_namespace *ns;\n   int i;\n \n+  if (e->expr_type == EXPR_CONSTANT || is_fe_temp (e))\n+    return gfc_copy_expr (e);\n+\n   /* If the block hasn't already been created, do so.  */\n   if (inserted_block == NULL)\n     {\n@@ -522,6 +540,7 @@ create_var (gfc_expr * e)\n   symbol->attr.flavor = FL_VARIABLE;\n   symbol->attr.referenced = 1;\n   symbol->attr.dimension = e->rank > 0;\n+  symbol->attr.fe_temp = 1;\n   gfc_commit_symbol (symbol);\n \n   result = gfc_get_expr ();\n@@ -1082,10 +1101,7 @@ combine_array_constructor (gfc_expr *e)\n   if (op2->ts.type == BT_CHARACTER)\n     return false;\n \n-  if (op2->expr_type == EXPR_CONSTANT)\n-    scalar = gfc_copy_expr (op2);\n-  else\n-    scalar = create_var (gfc_copy_expr (op2));\n+  scalar = create_var (gfc_copy_expr (op2));\n \n   oldbase = op1->value.constructor;\n   newbase = NULL;"}, {"sha": "e84aceaf4b1fe23a1860968cf85e76a48974b9db", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "patch": "@@ -739,7 +739,7 @@ typedef struct\n     optional:1, pointer:1, target:1, value:1, volatile_:1, temporary:1,\n     dummy:1, result:1, assign:1, threadprivate:1, not_always_present:1,\n     implied_index:1, subref_array_pointer:1, proc_pointer:1, asynchronous:1,\n-    contiguous:1;\n+    contiguous:1, fe_temp: 1;\n \n   /* For CLASS containers, the pointer attribute is sometimes set internally\n      even though it was not directly specified.  In this case, keep the"}, {"sha": "b879b3a60dc2208b307f8e909f2b08e2bf54432f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "patch": "@@ -1,3 +1,8 @@\n+2014-08-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/62106\n+\t* gfortran.dg/array_constructor_49.f90:  New test.\n+\n 2014-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54377\n@@ -115,7 +120,7 @@\n \n \tPR tree-optimization/62073\n \t* gcc.dg/vect/pr62073.c: New test.\n-\t\n+\n 2014-08-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/62070"}, {"sha": "6a198d676fe0b11d6b592db7a470f343be1d2524", "filename": "gcc/testsuite/gfortran.dg/array_constructor_49.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_49.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_49.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_49.f90?ref=ba8aa6fca60d3db6375b5f2c1ca6ab57d5ba97da", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! PR 62106 - this used to give wrong results because\n+! of a bogus extra temporary variable.\n+! Original test case by Martien Hulsen\n+program t\n+  integer :: ndim=2, ndfp=4, i\n+  character (len=8) :: line\n+  write (unit=line,fmt='(4I2)'), (/ ( i, i = 1, ndfp ) /) + ndim\n+  if (line /= ' 3 4 5 6') call abort\n+end program t\n+! { dg-final { scan-tree-dump-times \"__var\" 3 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}