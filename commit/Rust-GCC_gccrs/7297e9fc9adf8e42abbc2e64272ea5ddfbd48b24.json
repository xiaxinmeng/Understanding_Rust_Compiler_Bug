{"sha": "7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5N2U5ZmM5YWRmOGU0MmFiYmMyZTY0MjcyZWE1ZGRmYmQ0OGIyNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-12-09T22:06:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-09T22:06:52Z"}, "message": "genrecog.c (validate_pattern): Verify that ZERO_EXTRACT and STRICT_LOW_PART as SET_DEST have in-out constraints.\n\n        * genrecog.c (validate_pattern): Verify that ZERO_EXTRACT and\n        STRICT_LOW_PART as SET_DEST have in-out constraints.\n\nFrom-SVN: r38164", "tree": {"sha": "d6b86f741f45027fb07f42e45fe200e179ce8e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b86f741f45027fb07f42e45fe200e179ce8e7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24/comments", "author": null, "committer": null, "parents": [{"sha": "e45046aeda064dac8461f0037eb221cca677c9d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45046aeda064dac8461f0037eb221cca677c9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45046aeda064dac8461f0037eb221cca677c9d0"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "bffca09fda04e50812780c73febf00bf4c2244e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24", "patch": "@@ -1,3 +1,8 @@\n+2000-12-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* genrecog.c (validate_pattern): Verify that ZERO_EXTRACT and \n+\tSTRICT_LOW_PART as SET_DEST have in-out constraints.\n+\n 2000-12-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (check_function_format): Don't suggest adding format"}, {"sha": "1121d8f77caae608bd0e2e5f9bb31cbb3f7d093b", "filename": "gcc/genrecog.c", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=7297e9fc9adf8e42abbc2e64272ea5ddfbd48b24", "patch": "@@ -231,7 +231,7 @@ static struct decision_test *new_decision_test\n static rtx find_operand\n   PARAMS ((rtx, int));\n static void validate_pattern\n-  PARAMS ((rtx, rtx, rtx));\n+  PARAMS ((rtx, rtx, rtx, int));\n static struct decision *add_to_sequence\n   PARAMS ((rtx, struct decision_head *, const char *, enum routine_type, int));\n \n@@ -397,13 +397,15 @@ find_operand (pattern, n)\n }\n \n /* Check for various errors in patterns.  SET is nonnull for a destination,\n-   and is the complete set pattern.  */\n+   and is the complete set pattern.  SET_CODE is '=' for normal sets, and\n+   '+' within a context that requires in-out constraints.  */\n \n static void\n-validate_pattern (pattern, insn, set)\n+validate_pattern (pattern, insn, set, set_code)\n      rtx pattern;\n      rtx insn;\n      rtx set;\n+     int set_code;\n {\n   const char *fmt;\n   RTX_CODE code;\n@@ -482,16 +484,26 @@ validate_pattern (pattern, insn, set)\n \t  }\n \n \t/* A MATCH_OPERAND that is a SET should have an output reload.  */\n-\tif (set\n-\t    && code == MATCH_OPERAND\n-\t    && XSTR (pattern, 2)[0] != '\\0'\n-\t    && XSTR (pattern, 2)[0] != '='\n-\t    && XSTR (pattern, 2)[0] != '+')\n+\tif (set && code == MATCH_OPERAND)\n \t  {\n-\t    message_with_line (pattern_lineno,\n-\t\t\t       \"operand %d missing output reload\", \n-\t\t\t       XINT (pattern, 0));\n-\t    error_count++;\n+\t    if (set_code == '+'\n+\t\t&& XSTR (pattern, 2)[0] != '\\0'\n+\t\t&& XSTR (pattern, 2)[0] != '+')\n+\t      {\n+\t\tmessage_with_line (pattern_lineno,\n+\t\t\t\t   \"operand %d missing in-out reload\",\n+\t\t\t\t   XINT (pattern, 0));\n+\t\terror_count++;\n+\t      }\n+\t    else if (XSTR (pattern, 2)[0] != '\\0'\n+\t\t     && XSTR (pattern, 2)[0] != '='\n+\t\t     && XSTR (pattern, 2)[0] != '+')\n+\t      {\n+\t\tmessage_with_line (pattern_lineno,\n+\t\t\t\t   \"operand %d missing output reload\", \n+\t\t\t\t   XINT (pattern, 0));\n+\t\terror_count++;\n+\t      }\n \t  }\n \n \t/* Allowing non-lvalues in destinations -- particularly CONST_INT --\n@@ -593,14 +605,25 @@ validate_pattern (pattern, insn, set)\n \t  }\n \n \tif (dest != SET_DEST (pattern))\n-\t  validate_pattern (dest, insn, pattern);\n-\tvalidate_pattern (SET_DEST (pattern), insn, pattern);\n-        validate_pattern (SET_SRC (pattern), insn, NULL_RTX);\n+\t  validate_pattern (dest, insn, pattern, '=');\n+\tvalidate_pattern (SET_DEST (pattern), insn, pattern, '=');\n+        validate_pattern (SET_SRC (pattern), insn, NULL_RTX, 0);\n         return;\n       }\n \n     case CLOBBER:\n-      validate_pattern (SET_DEST (pattern), insn, pattern);\n+      validate_pattern (SET_DEST (pattern), insn, pattern, '=');\n+      return;\n+\n+    case ZERO_EXTRACT:\n+      validate_pattern (XEXP (pattern, 0), insn, set, set ? '+' : 0);\n+      validate_pattern (XEXP (pattern, 1), insn, NULL_RTX, 0);\n+      validate_pattern (XEXP (pattern, 2), insn, NULL_RTX, 0);\n+      return;\n+\n+    case STRICT_LOW_PART:\n+      validate_pattern (XEXP (pattern, 0), insn, set, set ? '+' : 0);\n+      validate_pattern (XEXP (pattern, 1), insn, NULL, 0);\n       return;\n \n     case LABEL_REF:\n@@ -624,12 +647,12 @@ validate_pattern (pattern, insn, set)\n       switch (fmt[i])\n \t{\n \tcase 'e': case 'u':\n-\t  validate_pattern (XEXP (pattern, i), insn, NULL_RTX);\n+\t  validate_pattern (XEXP (pattern, i), insn, NULL_RTX, 0);\n \t  break;\n \n \tcase 'E':\n \t  for (j = 0; j < XVECLEN (pattern, i); j++)\n-\t    validate_pattern (XVECEXP (pattern, i, j), insn, NULL_RTX);\n+\t    validate_pattern (XVECEXP (pattern, i, j), insn, NULL_RTX, 0);\n \t  break;\n \n \tcase 'i': case 'w': case '0': case 's':\n@@ -2337,7 +2360,7 @@ make_insn_sequence (insn, type)\n       PUT_MODE (x, VOIDmode);\n     }\n \n-  validate_pattern (x, insn, NULL_RTX);\n+  validate_pattern (x, insn, NULL_RTX, 0);\n \n   memset(&head, 0, sizeof(head));\n   last = add_to_sequence (x, &head, \"\", type, 1);"}]}