{"sha": "18379eeafcd1261207d3d67eb4e5f6ee7715628a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgzNzllZWFmY2QxMjYxMjA3ZDNkNjdlYjRlNWY2ZWU3NzE1NjI4YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-07-11T20:57:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-07-11T20:57:15Z"}, "message": "avx512bitalgintrin.h (_mm512_mask_bitshuffle_epi64_mask): Use __mmask64 type instead of __mmask8 for __M argument.\n\n\t* config/i386/avx512bitalgintrin.h (_mm512_mask_bitshuffle_epi64_mask):\n\tUse __mmask64 type instead of __mmask8 for __M argument.\n\t* config/i386/avx512fintrin.h (_mm512_mask_xor_epi64,\n\t_mm512_maskz_xor_epi64): Use __mmask8 type instead of __mmask16 for\n\t__U argument.\n\t(_mm512_mask_cmpneq_epi64_mask): Use __mmask8 type instead of\n\t__mmask16 for __M argument.\n\t(_mm512_maskz_insertf32x4, _mm512_maskz_inserti32x4,\n\t_mm512_mask_insertf32x4, _mm512_mask_inserti32x4): Cast last argument\n\tto __mmask16 instead of __mmask8.\n\t* config/i386/avx512vlintrin.h (_mm_mask_add_ps, _mm_maskz_add_ps,\n\t_mm256_mask_add_ps, _mm256_maskz_add_ps, _mm_mask_sub_ps,\n\t_mm_maskz_sub_ps, _mm256_mask_sub_ps, _mm256_maskz_sub_ps,\n\t_mm256_maskz_cvtepi32_ps, _mm_maskz_cvtepi32_ps): Use __mmask8 type\n\tinstead of __mmask16 for __U argument.\n\t* config/i386/avx512vlbwintrin.h (_mm_mask_cmp_epi8_mask): Use\n\t__mmask16 instead of __mmask8 for __U argument.\n\t(_mm256_mask_cmp_epi8_mask): Use __mmask32 instead of __mmask16 for\n\t__U argument.\n\t(_mm256_cmp_epi8_mask): Use __mmask32 return type instead of\n\t__mmask16.\n\t(_mm_mask_cmp_epu8_mask): Use __mmask16 instead of __mmask8 for __U\n\targument.\n\t(_mm256_mask_cmp_epu8_mask): Use __mmask32 instead of __mmask16 for\n\t__U argument.\n\t(_mm256_cmp_epu8_mask): Use __mmask32 return type instead of\n\t__mmask16.\n\t(_mm_mask_cmp_epi16_mask): Cast last argument to __mmask8 instead\n\tof __mmask16.\n\t(_mm256_mask_cvtepi8_epi16): Use __mmask16 instead of __mmask32 for\n\t__U argument.\n\t(_mm_mask_cvtepi8_epi16): Use __mmask8 instead of __mmask32 for\n\t__U argument.\n\t(_mm256_mask_cvtepu8_epi16): Use __mmask16 instead of __mmask32 for\n\t__U argument.\n\t(_mm_mask_cvtepu8_epi16): Use __mmask8 instead of __mmask32 for\n\t__U argument.\n\t(_mm256_mask_cmpneq_epu8_mask, _mm256_mask_cmplt_epu8_mask,\n\t_mm256_mask_cmpge_epu8_mask, _mm256_mask_cmple_epu8_mask): Change\n\treturn type as well as __M argument type and all casts from __mmask8\n\tto __mmask32.\n\t(_mm256_mask_cmpneq_epu16_mask, _mm256_mask_cmplt_epu16_mask,\n\t_mm256_mask_cmpge_epu16_mask, _mm256_mask_cmple_epu16_mask): Change\n\treturn type as well as __M argument type and all casts from __mmask8\n\tto __mmask16.\n\t(_mm256_mask_cmpneq_epi8_mask, _mm256_mask_cmplt_epi8_mask,\n\t_mm256_mask_cmpge_epi8_mask, _mm256_mask_cmple_epi8_mask): Change\n\treturn type as well as __M argument type and all casts from __mmask8\n\tto __mmask32.\n\t(_mm256_mask_cmpneq_epi16_mask, _mm256_mask_cmplt_epi16_mask,\n\t_mm256_mask_cmpge_epi16_mask, _mm256_mask_cmple_epi16_mask): Change\n\treturn type as well as __M argument type and all casts from __mmask8\n\tto __mmask16.\n\t* config/i386/avx512vbmi2vlintrin.h (_mm_mask_shrdi_epi32,\n\t_mm_mask_shldi_epi32): Cast last argument to __mmask8 instead of\n\t__mmask16.\n\n\t* gcc.target/i386/avx512bw-vpcmpb-2.c (CMP): Use SIZE macro instead\n\tof hardcoding size.  Cast (rel) to MASK_TYPE.\n\t* gcc.target/i386/avx512bw-vpcmpub-2.c (CMP): Likewise.\n\t* gcc.target/i386/avx512f-vinserti32x4-3.c: New test.\n\t* gcc.target/i386/avx512f-vinsertf32x4-3.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpnequb-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpgeub-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpleb-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpgeb-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpltb-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpltub-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpleub-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpneqb-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpnequw-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpgeuw-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmplew-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpgew-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpltw-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpltuw-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpleuw-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpcmpneqw-2.c: New test.\n\n2018-07-11  Grazvydas Ignotas  <notasas@gmail.com>\n\n\t* config/i386/avx512bwintrin.h: (_mm512_mask_cmp_epi8_mask,\n\t_mm512_mask_cmp_epu8_mask): Use __mmask64 type instead of __mmask32\n\tfor __U argument.\n\n\t* gcc.target/i386/avx512bw-vpcmpb-2.c (SIZE): Define to\n\t(AVX512F_LEN / 8) instead of (AVX512F_LEN / 16).\n\t* gcc.target/i386/avx512bw-vpcmpub-2.c (SIZE): Likewise.\n\nFrom-SVN: r262566", "tree": {"sha": "77444298db96ed19c22318ffae7101587941c120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77444298db96ed19c22318ffae7101587941c120"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18379eeafcd1261207d3d67eb4e5f6ee7715628a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18379eeafcd1261207d3d67eb4e5f6ee7715628a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18379eeafcd1261207d3d67eb4e5f6ee7715628a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18379eeafcd1261207d3d67eb4e5f6ee7715628a/comments", "author": null, "committer": null, "parents": [{"sha": "2d05894b17b95d7efc88c28014a134c2b5f9a675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d05894b17b95d7efc88c28014a134c2b5f9a675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d05894b17b95d7efc88c28014a134c2b5f9a675"}], "stats": {"total": 735, "additions": 596, "deletions": 139}, "files": [{"sha": "5c86553ce6d8bcc769c864d9862380963185c64a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -1,3 +1,68 @@\n+2018-07-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/avx512bitalgintrin.h (_mm512_mask_bitshuffle_epi64_mask):\n+\tUse __mmask64 type instead of __mmask8 for __M argument.\n+\t* config/i386/avx512fintrin.h (_mm512_mask_xor_epi64,\n+\t_mm512_maskz_xor_epi64): Use __mmask8 type instead of __mmask16 for\n+\t__U argument.\n+\t(_mm512_mask_cmpneq_epi64_mask): Use __mmask8 type instead of\n+\t__mmask16 for __M argument.\n+\t(_mm512_maskz_insertf32x4, _mm512_maskz_inserti32x4,\n+\t_mm512_mask_insertf32x4, _mm512_mask_inserti32x4): Cast last argument\n+\tto __mmask16 instead of __mmask8.\n+\t* config/i386/avx512vlintrin.h (_mm_mask_add_ps, _mm_maskz_add_ps,\n+\t_mm256_mask_add_ps, _mm256_maskz_add_ps, _mm_mask_sub_ps,\n+\t_mm_maskz_sub_ps, _mm256_mask_sub_ps, _mm256_maskz_sub_ps,\n+\t_mm256_maskz_cvtepi32_ps, _mm_maskz_cvtepi32_ps): Use __mmask8 type\n+\tinstead of __mmask16 for __U argument.\n+\t* config/i386/avx512vlbwintrin.h (_mm_mask_cmp_epi8_mask): Use\n+\t__mmask16 instead of __mmask8 for __U argument.\n+\t(_mm256_mask_cmp_epi8_mask): Use __mmask32 instead of __mmask16 for\n+\t__U argument.\n+\t(_mm256_cmp_epi8_mask): Use __mmask32 return type instead of\n+\t__mmask16.\n+\t(_mm_mask_cmp_epu8_mask): Use __mmask16 instead of __mmask8 for __U\n+\targument.\n+\t(_mm256_mask_cmp_epu8_mask): Use __mmask32 instead of __mmask16 for\n+\t__U argument.\n+\t(_mm256_cmp_epu8_mask): Use __mmask32 return type instead of\n+\t__mmask16.\n+\t(_mm_mask_cmp_epi16_mask): Cast last argument to __mmask8 instead\n+\tof __mmask16.\n+\t(_mm256_mask_cvtepi8_epi16): Use __mmask16 instead of __mmask32 for\n+\t__U argument.\n+\t(_mm_mask_cvtepi8_epi16): Use __mmask8 instead of __mmask32 for\n+\t__U argument.\n+\t(_mm256_mask_cvtepu8_epi16): Use __mmask16 instead of __mmask32 for\n+\t__U argument.\n+\t(_mm_mask_cvtepu8_epi16): Use __mmask8 instead of __mmask32 for\n+\t__U argument.\n+\t(_mm256_mask_cmpneq_epu8_mask, _mm256_mask_cmplt_epu8_mask,\n+\t_mm256_mask_cmpge_epu8_mask, _mm256_mask_cmple_epu8_mask): Change\n+\treturn type as well as __M argument type and all casts from __mmask8\n+\tto __mmask32.\n+\t(_mm256_mask_cmpneq_epu16_mask, _mm256_mask_cmplt_epu16_mask,\n+\t_mm256_mask_cmpge_epu16_mask, _mm256_mask_cmple_epu16_mask): Change\n+\treturn type as well as __M argument type and all casts from __mmask8\n+\tto __mmask16.\n+\t(_mm256_mask_cmpneq_epi8_mask, _mm256_mask_cmplt_epi8_mask,\n+\t_mm256_mask_cmpge_epi8_mask, _mm256_mask_cmple_epi8_mask): Change\n+\treturn type as well as __M argument type and all casts from __mmask8\n+\tto __mmask32.\n+\t(_mm256_mask_cmpneq_epi16_mask, _mm256_mask_cmplt_epi16_mask,\n+\t_mm256_mask_cmpge_epi16_mask, _mm256_mask_cmple_epi16_mask): Change\n+\treturn type as well as __M argument type and all casts from __mmask8\n+\tto __mmask16.\n+\t* config/i386/avx512vbmi2vlintrin.h (_mm_mask_shrdi_epi32,\n+\t_mm_mask_shldi_epi32): Cast last argument to __mmask8 instead of\n+\t__mmask16.\n+\n+2018-07-11  Grazvydas Ignotas  <notasas@gmail.com>\n+\n+\t* config/i386/avx512bwintrin.h: (_mm512_mask_cmp_epi8_mask,\n+\t_mm512_mask_cmp_epu8_mask): Use __mmask64 type instead of __mmask32\n+\tfor __U argument.\n+\n 2018-07-11  Paul Koning  <ni1d@arrl.net>\n \n \t* doc/md.texi (define_subst): Document how multiple occurrences of"}, {"sha": "3a7414adb693d2dc6ae879a34d7344a7ee1cdd02", "filename": "gcc/config/i386/avx512bitalgintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -107,7 +107,7 @@ _mm512_bitshuffle_epi64_mask (__m512i __A, __m512i __B)\n \n extern __inline __mmask64\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_bitshuffle_epi64_mask (__mmask8 __M, __m512i __A, __m512i __B)\n+_mm512_mask_bitshuffle_epi64_mask (__mmask64 __M, __m512i __A, __m512i __B)\n {\n   return (__mmask64) __builtin_ia32_vpshufbitqmb512_mask ((__v64qi) __A,\n \t\t\t\t\t\t (__v64qi) __B,"}, {"sha": "24ad5f1e2af7c70df04ef6d3f3b58a148c23a126", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -3043,7 +3043,7 @@ _mm512_cmp_epi16_mask (__m512i __X, __m512i __Y, const int __P)\n \n extern __inline __mmask64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_cmp_epi8_mask (__mmask32 __U, __m512i __X, __m512i __Y,\n+_mm512_mask_cmp_epi8_mask (__mmask64 __U, __m512i __X, __m512i __Y,\n \t\t\t   const int __P)\n {\n   return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n@@ -3081,7 +3081,7 @@ _mm512_cmp_epu16_mask (__m512i __X, __m512i __Y, const int __P)\n \n extern __inline __mmask64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_cmp_epu8_mask (__mmask32 __U, __m512i __X, __m512i __Y,\n+_mm512_mask_cmp_epu8_mask (__mmask64 __U, __m512i __X, __m512i __Y,\n \t\t\t   const int __P)\n {\n   return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,"}, {"sha": "80525f9fb4dff3396767196aa5de0bf63f0717d5", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -7377,7 +7377,7 @@ _mm512_xor_epi64 (__m512i __A, __m512i __B)\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_xor_epi64 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)\n+_mm512_mask_xor_epi64 (__m512i __W, __mmask8 __U, __m512i __A, __m512i __B)\n {\n   return (__m512i) __builtin_ia32_pxorq512_mask ((__v8di) __A,\n \t\t\t\t\t\t (__v8di) __B,\n@@ -7387,7 +7387,7 @@ _mm512_mask_xor_epi64 (__m512i __W, __mmask16 __U, __m512i __A, __m512i __B)\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_xor_epi64 (__mmask16 __U, __m512i __A, __m512i __B)\n+_mm512_maskz_xor_epi64 (__mmask8 __U, __m512i __A, __m512i __B)\n {\n   return (__m512i) __builtin_ia32_pxorq512_mask ((__v8di) __A,\n \t\t\t\t\t\t (__v8di) __B,\n@@ -9615,7 +9615,7 @@ _mm512_cmpneq_epu32_mask (__m512i __X, __m512i __Y)\n \n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_cmpneq_epi64_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+_mm512_mask_cmpneq_epi64_mask (__mmask8 __M, __m512i __X, __m512i __Y)\n {\n   return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n \t\t\t\t\t\t    (__v8di) __Y, 4,\n@@ -10877,22 +10877,22 @@ _mm512_mask_insertf32x4 (__m512 __A, __mmask16 __B, __m512 __C,\n #define _mm512_maskz_insertf32x4(A, X, Y, C)                            \\\n   ((__m512) __builtin_ia32_insertf32x4_mask ((__v16sf)(__m512) (X),     \\\n     (__v4sf)(__m128) (Y), (int) (C), (__v16sf)_mm512_setzero_ps(),      \\\n-    (__mmask8)(A)))\n+    (__mmask16)(A)))\n \n #define _mm512_maskz_inserti32x4(A, X, Y, C)                            \\\n   ((__m512i) __builtin_ia32_inserti32x4_mask ((__v16si)(__m512i) (X),   \\\n     (__v4si)(__m128i) (Y), (int) (C), (__v16si)_mm512_setzero_si512 (),     \\\n-    (__mmask8)(A)))\n+    (__mmask16)(A)))\n \n #define _mm512_mask_insertf32x4(A, B, X, Y, C)                          \\\n   ((__m512) __builtin_ia32_insertf32x4_mask ((__v16sf)(__m512) (X),     \\\n     (__v4sf)(__m128) (Y), (int) (C), (__v16sf)(__m512) (A),             \\\n-\t\t\t\t\t     (__mmask8)(B)))\n+\t\t\t\t\t     (__mmask16)(B)))\n \n #define _mm512_mask_inserti32x4(A, B, X, Y, C)                          \\\n   ((__m512i) __builtin_ia32_inserti32x4_mask ((__v16si)(__m512i) (X),   \\\n     (__v4si)(__m128i) (Y), (int) (C), (__v16si)(__m512i) (A),           \\\n-\t\t\t\t\t      (__mmask8)(B)))\n+\t\t\t\t\t      (__mmask16)(B)))\n #endif\n \n extern __inline __m512i"}, {"sha": "b089d3381fe0d315b195e98eb8b0eba41a5083ec", "filename": "gcc/config/i386/avx512vbmi2vlintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -541,7 +541,7 @@ _mm_shldi_epi64 (__m128i __A, __m128i __B, int __C)\n \t(__v4si)(__m128i)(B),(int)(C))\n #define _mm_mask_shrdi_epi32(A, B, C, D, E) \\\n   ((__m128i) __builtin_ia32_vpshrd_v4si_mask ((__v4si)(__m128i)(C), \\\n-\t(__v4si)(__m128i)(D), (int)(E), (__v4si)(__m128i)(A),(__mmask16)(B))\n+\t(__v4si)(__m128i)(D), (int)(E), (__v4si)(__m128i)(A),(__mmask8)(B))\n #define _mm_maskz_shrdi_epi32(A, B, C, D) \\\n   ((__m128i) __builtin_ia32_vpshrd_v4si_mask ((__v4si)(__m128i)(B), \\\n \t(__v4si)(__m128i)(C),(int)(D), \\\n@@ -601,7 +601,7 @@ _mm_shldi_epi64 (__m128i __A, __m128i __B, int __C)\n \t(__v4si)(__m128i)(B),(int)(C))\n #define _mm_mask_shldi_epi32(A, B, C, D, E) \\\n   ((__m128i) __builtin_ia32_vpshld_v4si_mask ((__v4si)(__m128i)(C), \\\n-\t(__v4si)(__m128i)(D), (int)(E), (__v4si)(__m128i)(A),(__mmask16)(B))\n+\t(__v4si)(__m128i)(D), (int)(E), (__v4si)(__m128i)(A),(__mmask8)(B))\n #define _mm_maskz_shldi_epi32(A, B, C, D) \\\n   ((__m128i) __builtin_ia32_vpshld_v4si_mask ((__v4si)(__m128i)(B), \\\n \t(__v4si)(__m128i)(C),(int)(D), \\"}, {"sha": "02afce15686ba50f56ce9f1045fa27d6d22cf5d9", "filename": "gcc/config/i386/avx512vlbwintrin.h", "status": "modified", "additions": 91, "deletions": 91, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -1467,7 +1467,7 @@ _mm256_cmp_epi16_mask (__m256i __X, __m256i __Y, const int __P)\n \n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_cmp_epi8_mask (__mmask8 __U, __m128i __X, __m128i __Y,\n+_mm_mask_cmp_epi8_mask (__mmask16 __U, __m128i __X, __m128i __Y,\n \t\t\tconst int __P)\n {\n   return (__mmask16) __builtin_ia32_cmpb128_mask ((__v16qi) __X,\n@@ -1486,15 +1486,15 @@ _mm_cmp_epi8_mask (__m128i __X, __m128i __Y, const int __P)\n \n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmp_epi8_mask (__mmask16 __U, __m256i __X, __m256i __Y,\n+_mm256_mask_cmp_epi8_mask (__mmask32 __U, __m256i __X, __m256i __Y,\n \t\t\t   const int __P)\n {\n   return (__mmask32) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n \t\t\t\t\t\t  (__v32qi) __Y, __P,\n \t\t\t\t\t\t  (__mmask32) __U);\n }\n \n-extern __inline __mmask16\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmp_epi8_mask (__m256i __X, __m256i __Y, const int __P)\n {\n@@ -1543,7 +1543,7 @@ _mm256_cmp_epu16_mask (__m256i __X, __m256i __Y, const int __P)\n \n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_cmp_epu8_mask (__mmask8 __U, __m128i __X, __m128i __Y,\n+_mm_mask_cmp_epu8_mask (__mmask16 __U, __m128i __X, __m128i __Y,\n \t\t\tconst int __P)\n {\n   return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __X,\n@@ -1562,15 +1562,15 @@ _mm_cmp_epu8_mask (__m128i __X, __m128i __Y, const int __P)\n \n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmp_epu8_mask (__mmask16 __U, __m256i __X, __m256i __Y,\n+_mm256_mask_cmp_epu8_mask (__mmask32 __U, __m256i __X, __m256i __Y,\n \t\t\t   const int __P)\n {\n   return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n \t\t\t\t\t\t   (__v32qi) __Y, __P,\n \t\t\t\t\t\t   (__mmask32) __U);\n }\n \n-extern __inline __mmask16\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmp_epu8_mask (__m256i __X, __m256i __Y, const int __P)\n {\n@@ -1998,7 +1998,7 @@ _mm_maskz_slli_epi16 (__mmask8 __U, __m128i __A, int __B)\n #define _mm_mask_cmp_epi16_mask(M, X, Y, P)\t\t\t\t\\\n   ((__mmask8) __builtin_ia32_cmpw128_mask ((__v8hi)(__m128i)(X),\t\\\n \t\t\t\t\t    (__v8hi)(__m128i)(Y), (int)(P),\\\n-\t\t\t\t\t    (__mmask16)(M)))\n+\t\t\t\t\t    (__mmask8)(M)))\n \n #define _mm_mask_cmp_epi8_mask(M, X, Y, P)\t\t\t\t\\\n   ((__mmask16) __builtin_ia32_cmpb128_mask ((__v16qi)(__m128i)(X),\t\\\n@@ -2430,7 +2430,7 @@ _mm_maskz_mullo_epi16 (__mmask8 __U, __m128i __A, __m128i __B)\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cvtepi8_epi16 (__m256i __W, __mmask32 __U, __m128i __A)\n+_mm256_mask_cvtepi8_epi16 (__m256i __W, __mmask16 __U, __m128i __A)\n {\n   return (__m256i) __builtin_ia32_pmovsxbw256_mask ((__v16qi) __A,\n \t\t\t\t\t\t    (__v16hi) __W,\n@@ -2449,7 +2449,7 @@ _mm256_maskz_cvtepi8_epi16 (__mmask16 __U, __m128i __A)\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_cvtepi8_epi16 (__m128i __W, __mmask32 __U, __m128i __A)\n+_mm_mask_cvtepi8_epi16 (__m128i __W, __mmask8 __U, __m128i __A)\n {\n   return (__m128i) __builtin_ia32_pmovsxbw128_mask ((__v16qi) __A,\n \t\t\t\t\t\t    (__v8hi) __W,\n@@ -2468,7 +2468,7 @@ _mm_maskz_cvtepi8_epi16 (__mmask8 __U, __m128i __A)\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cvtepu8_epi16 (__m256i __W, __mmask32 __U, __m128i __A)\n+_mm256_mask_cvtepu8_epi16 (__m256i __W, __mmask16 __U, __m128i __A)\n {\n   return (__m256i) __builtin_ia32_pmovzxbw256_mask ((__v16qi) __A,\n \t\t\t\t\t\t    (__v16hi) __W,\n@@ -2487,7 +2487,7 @@ _mm256_maskz_cvtepu8_epi16 (__mmask16 __U, __m128i __A)\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_cvtepu8_epi16 (__m128i __W, __mmask32 __U, __m128i __A)\n+_mm_mask_cvtepu8_epi16 (__m128i __W, __mmask8 __U, __m128i __A)\n {\n   return (__m128i) __builtin_ia32_pmovzxbw128_mask ((__v16qi) __A,\n \t\t\t\t\t\t    (__v8hi) __W,\n@@ -4541,148 +4541,148 @@ _mm_mask_cmple_epi16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n \t\t\t\t\t\t (__mmask8) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmpneq_epu8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmpneq_epu8_mask (__mmask32 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n-\t\t\t\t\t\t  (__v32qi) __Y, 4,\n-\t\t\t\t\t\t  (__mmask8) __M);\n+  return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t   (__v32qi) __Y, 4,\n+\t\t\t\t\t\t   (__mmask32) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmplt_epu8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmplt_epu8_mask (__mmask32 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n-\t\t\t\t\t\t  (__v32qi) __Y, 1,\n-\t\t\t\t\t\t  (__mmask8) __M);\n+  return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t   (__v32qi) __Y, 1,\n+\t\t\t\t\t\t   (__mmask32) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmpge_epu8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmpge_epu8_mask (__mmask32 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n-\t\t\t\t\t\t  (__v32qi) __Y, 5,\n-\t\t\t\t\t\t  (__mmask8) __M);\n+  return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t   (__v32qi) __Y, 5,\n+\t\t\t\t\t\t   (__mmask32) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmple_epu8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmple_epu8_mask (__mmask32 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n-\t\t\t\t\t\t  (__v32qi) __Y, 2,\n-\t\t\t\t\t\t  (__mmask8) __M);\n+  return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t   (__v32qi) __Y, 2,\n+\t\t\t\t\t\t   (__mmask32) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmpneq_epu16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmpneq_epu16_mask (__mmask16 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n-\t\t\t\t\t\t  (__v16hi) __Y, 4,\n-\t\t\t\t\t\t  (__mmask8) __M);\n+  return (__mmask16) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t   (__v16hi) __Y, 4,\n+\t\t\t\t\t\t   (__mmask16) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmplt_epu16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmplt_epu16_mask (__mmask16 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n-\t\t\t\t\t\t  (__v16hi) __Y, 1,\n-\t\t\t\t\t\t  (__mmask8) __M);\n+  return (__mmask16) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t   (__v16hi) __Y, 1,\n+\t\t\t\t\t\t   (__mmask16) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmpge_epu16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmpge_epu16_mask (__mmask16 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n-\t\t\t\t\t\t  (__v16hi) __Y, 5,\n-\t\t\t\t\t\t  (__mmask8) __M);\n+  return (__mmask16) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t   (__v16hi) __Y, 5,\n+\t\t\t\t\t\t   (__mmask16) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmple_epu16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmple_epu16_mask (__mmask16 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n-\t\t\t\t\t\t  (__v16hi) __Y, 2,\n-\t\t\t\t\t\t  (__mmask8) __M);\n+  return (__mmask16) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t   (__v16hi) __Y, 2,\n+\t\t\t\t\t\t   (__mmask16) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmpneq_epi8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmpneq_epi8_mask (__mmask32 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n-\t\t\t\t\t\t (__v32qi) __Y, 4,\n-\t\t\t\t\t\t (__mmask8) __M);\n+  return (__mmask32) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t  (__v32qi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask32) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmplt_epi8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmplt_epi8_mask (__mmask32 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n-\t\t\t\t\t\t (__v32qi) __Y, 1,\n-\t\t\t\t\t\t (__mmask8) __M);\n+  return (__mmask32) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t  (__v32qi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask32) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmpge_epi8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmpge_epi8_mask (__mmask32 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n-\t\t\t\t\t\t (__v32qi) __Y, 5,\n-\t\t\t\t\t\t (__mmask8) __M);\n+  return (__mmask32) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t  (__v32qi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask32) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmple_epi8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmple_epi8_mask (__mmask32 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n-\t\t\t\t\t\t (__v32qi) __Y, 2,\n-\t\t\t\t\t\t (__mmask8) __M);\n+  return (__mmask32) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t  (__v32qi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask32) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmpneq_epi16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmpneq_epi16_mask (__mmask16 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n-\t\t\t\t\t\t (__v16hi) __Y, 4,\n-\t\t\t\t\t\t (__mmask8) __M);\n+  return (__mmask16) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t  (__v16hi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask16) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmplt_epi16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmplt_epi16_mask (__mmask16 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n-\t\t\t\t\t\t (__v16hi) __Y, 1,\n-\t\t\t\t\t\t (__mmask8) __M);\n+  return (__mmask16) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t  (__v16hi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask16) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmpge_epi16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmpge_epi16_mask (__mmask16 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n-\t\t\t\t\t\t (__v16hi) __Y, 5,\n-\t\t\t\t\t\t (__mmask8) __M);\n+  return (__mmask16) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t  (__v16hi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask16) __M);\n }\n \n-extern __inline __mmask8\n+extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_cmple_epi16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+_mm256_mask_cmple_epi16_mask (__mmask16 __M, __m256i __X, __m256i __Y)\n {\n-  return (__mmask8) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n-\t\t\t\t\t\t (__v16hi) __Y, 2,\n-\t\t\t\t\t\t (__mmask8) __M);\n+  return (__mmask16) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t  (__v16hi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask16) __M);\n }\n \n #ifdef __DISABLE_AVX512VLBW__"}, {"sha": "68b5537845b1088c9ce41f6b5adfa6db03c46cfe", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -466,7 +466,7 @@ _mm256_maskz_add_pd (__mmask8 __U, __m256d __A, __m256d __B)\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_add_ps (__m128 __W, __mmask16 __U, __m128 __A, __m128 __B)\n+_mm_mask_add_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n {\n   return (__m128) __builtin_ia32_addps128_mask ((__v4sf) __A,\n \t\t\t\t\t\t(__v4sf) __B,\n@@ -476,7 +476,7 @@ _mm_mask_add_ps (__m128 __W, __mmask16 __U, __m128 __A, __m128 __B)\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_add_ps (__mmask16 __U, __m128 __A, __m128 __B)\n+_mm_maskz_add_ps (__mmask8 __U, __m128 __A, __m128 __B)\n {\n   return (__m128) __builtin_ia32_addps128_mask ((__v4sf) __A,\n \t\t\t\t\t\t(__v4sf) __B,\n@@ -487,7 +487,7 @@ _mm_maskz_add_ps (__mmask16 __U, __m128 __A, __m128 __B)\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_add_ps (__m256 __W, __mmask16 __U, __m256 __A, __m256 __B)\n+_mm256_mask_add_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B)\n {\n   return (__m256) __builtin_ia32_addps256_mask ((__v8sf) __A,\n \t\t\t\t\t\t(__v8sf) __B,\n@@ -497,7 +497,7 @@ _mm256_mask_add_ps (__m256 __W, __mmask16 __U, __m256 __A, __m256 __B)\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskz_add_ps (__mmask16 __U, __m256 __A, __m256 __B)\n+_mm256_maskz_add_ps (__mmask8 __U, __m256 __A, __m256 __B)\n {\n   return (__m256) __builtin_ia32_addps256_mask ((__v8sf) __A,\n \t\t\t\t\t\t(__v8sf) __B,\n@@ -551,7 +551,7 @@ _mm256_maskz_sub_pd (__mmask8 __U, __m256d __A, __m256d __B)\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_sub_ps (__m128 __W, __mmask16 __U, __m128 __A, __m128 __B)\n+_mm_mask_sub_ps (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n {\n   return (__m128) __builtin_ia32_subps128_mask ((__v4sf) __A,\n \t\t\t\t\t\t(__v4sf) __B,\n@@ -561,7 +561,7 @@ _mm_mask_sub_ps (__m128 __W, __mmask16 __U, __m128 __A, __m128 __B)\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_sub_ps (__mmask16 __U, __m128 __A, __m128 __B)\n+_mm_maskz_sub_ps (__mmask8 __U, __m128 __A, __m128 __B)\n {\n   return (__m128) __builtin_ia32_subps128_mask ((__v4sf) __A,\n \t\t\t\t\t\t(__v4sf) __B,\n@@ -572,7 +572,7 @@ _mm_maskz_sub_ps (__mmask16 __U, __m128 __A, __m128 __B)\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_sub_ps (__m256 __W, __mmask16 __U, __m256 __A, __m256 __B)\n+_mm256_mask_sub_ps (__m256 __W, __mmask8 __U, __m256 __A, __m256 __B)\n {\n   return (__m256) __builtin_ia32_subps256_mask ((__v8sf) __A,\n \t\t\t\t\t\t(__v8sf) __B,\n@@ -582,7 +582,7 @@ _mm256_mask_sub_ps (__m256 __W, __mmask16 __U, __m256 __A, __m256 __B)\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskz_sub_ps (__mmask16 __U, __m256 __A, __m256 __B)\n+_mm256_maskz_sub_ps (__mmask8 __U, __m256 __A, __m256 __B)\n {\n   return (__m256) __builtin_ia32_subps256_mask ((__v8sf) __A,\n \t\t\t\t\t\t(__v8sf) __B,\n@@ -1320,7 +1320,7 @@ _mm256_mask_cvtepi32_ps (__m256 __W, __mmask8 __U, __m256i __A)\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskz_cvtepi32_ps (__mmask16 __U, __m256i __A)\n+_mm256_maskz_cvtepi32_ps (__mmask8 __U, __m256i __A)\n {\n   return (__m256) __builtin_ia32_cvtdq2ps256_mask ((__v8si) __A,\n \t\t\t\t\t\t   (__v8sf)\n@@ -1339,7 +1339,7 @@ _mm_mask_cvtepi32_ps (__m128 __W, __mmask8 __U, __m128i __A)\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskz_cvtepi32_ps (__mmask16 __U, __m128i __A)\n+_mm_maskz_cvtepi32_ps (__mmask8 __U, __m128i __A)\n {\n   return (__m128) __builtin_ia32_cvtdq2ps128_mask ((__v4si) __A,\n \t\t\t\t\t\t   (__v4sf)"}, {"sha": "e8df3b63a45a5e1cfba6726b49fc82792ea63a30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -1,3 +1,33 @@\n+2018-07-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/avx512bw-vpcmpb-2.c (CMP): Use SIZE macro instead\n+\tof hardcoding size.  Cast (rel) to MASK_TYPE.\n+\t* gcc.target/i386/avx512bw-vpcmpub-2.c (CMP): Likewise.\n+\t* gcc.target/i386/avx512f-vinserti32x4-3.c: New test.\n+\t* gcc.target/i386/avx512f-vinsertf32x4-3.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpnequb-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpgeub-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpleb-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpgeb-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpltb-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpltub-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpleub-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpneqb-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpnequw-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpgeuw-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmplew-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpgew-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpltw-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpltuw-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpleuw-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpcmpneqw-2.c: New test.\n+\n+2018-07-11  Grazvydas Ignotas  <notasas@gmail.com>\n+\n+\t* gcc.target/i386/avx512bw-vpcmpb-2.c (SIZE): Define to\n+\t(AVX512F_LEN / 8) instead of (AVX512F_LEN / 16).\n+\t* gcc.target/i386/avx512bw-vpcmpub-2.c (SIZE): Likewise.\n+\n 2018-07-10  Mark Wielaard  <mark@klomp.org>\n \n \tPR debug/86459"}, {"sha": "024c4a620f7f3eb58a369846c9ae1c55d3d39e5d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpb-2.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -6,17 +6,15 @@\n #include \"avx512f-helper.h\"\n \n #include <math.h>\n-#define SIZE (AVX512F_LEN / 16)\n+#define SIZE (AVX512F_LEN / 8)\n #include \"avx512f-mask-type.h\"\n \n #if AVX512F_LEN == 512\n #undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 64; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+    for (i = 0; i < SIZE; i++)\t\t\t\t\\\n+      dst_ref = ((MASK_TYPE) (rel) << i) | dst_ref;\t\\\n     source1.x = _mm512_loadu_si512 (s1);\t\t\\\n     source2.x = _mm512_loadu_si512 (s2);\t\t\\\n     dst1 = _mm512_cmp_epi8_mask (source1.x, source2.x, imm);\\\n@@ -29,10 +27,8 @@\n #undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 32; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+    for (i = 0; i < SIZE; i++)\t\t\t\t\\\n+      dst_ref = ((MASK_TYPE) (rel) << i) | dst_ref;\t\\\n     source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\\\n     source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\\\n     dst1 = _mm256_cmp_epi8_mask (source1.x, source2.x, imm);\\\n@@ -45,10 +41,8 @@\n #undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 16; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+    for (i = 0; i < SIZE; i++)\t\t\t\t\\\n+      dst_ref = ((MASK_TYPE) (rel) << i) | dst_ref;\t\\\n     source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n     source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n     dst1 = _mm_cmp_epi8_mask (source1.x, source2.x, imm);\\"}, {"sha": "2d592a6e6eded1bf3cda156badcac948caac18fa", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpub-2.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -6,17 +6,15 @@\n #include \"avx512f-helper.h\"\n \n #include <math.h>\n-#define SIZE (AVX512F_LEN / 16)\n+#define SIZE (AVX512F_LEN / 8)\n #include \"avx512f-mask-type.h\"\n \n #if AVX512F_LEN == 512\n #undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 64; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+    for (i = 0; i < SIZE; i++)\t\t\t\t\\\n+      dst_ref = ((MASK_TYPE) (rel) << i) | dst_ref;\t\\\n     source1.x = _mm512_loadu_si512 (s1);\t\t\\\n     source2.x = _mm512_loadu_si512 (s2);\t\t\\\n     dst1 = _mm512_cmp_epu8_mask (source1.x, source2.x, imm);\\\n@@ -29,10 +27,8 @@\n #undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 32; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+    for (i = 0; i < SIZE; i++)\t\t\t\t\\\n+      dst_ref = ((MASK_TYPE) (rel) << i) | dst_ref;\t\\\n     source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\\\n     source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\\\n     dst1 = _mm256_cmp_epu8_mask (source1.x, source2.x, imm);\\\n@@ -45,10 +41,8 @@\n #undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 16; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+    for (i = 0; i < SIZE; i++)\t\t\t\t\\\n+      dst_ref = ((MASK_TYPE) (rel) << i) | dst_ref;\t\\\n     source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n     source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n     dst1 = _mm_cmp_epu8_mask (source1.x, source2.x, imm);\\"}, {"sha": "239a7b81a943ebfabff34029ceb8cbf2e595ceba", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinsertf32x4-3.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinsertf32x4-3.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include \"string.h\"\n+\n+void static\n+CALC (UNION_TYPE (AVX512F_LEN,) s1, union128 s2, float *res_ref, int imm)\n+{\n+  memcpy (res_ref, s1.a, SIZE * sizeof (float));\n+  memcpy (res_ref + imm * 4, s2.a, 16);\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,) s1, res1, res2, res3;\n+  union128 s2;\n+  float res_ref[SIZE];\n+  int j;\n+\n+  MASK_TYPE mask = (MASK_TYPE) 0xa55a;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j / 10.2;\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    s2.a[j] = j * j * j / 2.03;\n+\n+  res1.x = INTRINSIC (_insertf32x4) (s1.x, s2.x, 1);\n+  res2.x = INTRINSIC (_mask_insertf32x4) (res2.x, mask, s1.x, s2.x, 1);\n+  res3.x = INTRINSIC (_maskz_insertf32x4) (mask, s1.x, s2.x, 1);\n+\n+  CALC (s1, s2, res_ref, 1);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "05b32978c0be4da2c20f16d226b71ca446277b7a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vinserti32x4-3.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vinserti32x4-3.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include \"string.h\"\n+\n+void static\n+CALC (UNION_TYPE (AVX512F_LEN, i_d) s1, union128i_d s2, int *res_ref, int imm)\n+{\n+  memcpy (res_ref, s1.a, SIZE * sizeof (int));\n+  memcpy (res_ref + imm * 4, s2.a, 16);\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s1, res1, res2, res3;\n+  union128i_d s2;\n+  int res_ref[SIZE];\n+  int j;\n+\n+  MASK_TYPE mask = (MASK_TYPE) 0xa55a;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j;\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    s2.a[j] = j * j * j;\n+\n+  res1.x = INTRINSIC (_inserti32x4) (s1.x, s2.x, 1);\n+  res2.x = INTRINSIC (_mask_inserti32x4) (res2.x, mask, s1.x, s2.x, 1);\n+  res3.x = INTRINSIC (_maskz_inserti32x4) (mask, s1.x, s2.x, 1);\n+\n+  CALC (s1, s2, res_ref, 1);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "f83d809f9258714cbd99ef9e2e15ae0385ab5a7c", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgeb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeb-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgeb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgeb-2.c\""}, {"sha": "40618e5a4ad9033c8961124d0b8c3d876d7a117f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgeub-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeub-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgeub-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgeub-2.c\""}, {"sha": "0ce6bbdcbc015b7f65bd8f65f2d31a25b77cffc8", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgeuw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeuw-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgeuw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgeuw-2.c\""}, {"sha": "9852796bc9235261850354e26917b69e39bc43af", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgew-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgew-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgew-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgew-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgew-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgew-2.c\""}, {"sha": "35c8d464334eab35b95d2e1c89f5248426605228", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpleb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleb-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpleb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpleb-2.c\""}, {"sha": "ca4d84a46378e6d05338f5c3f1250bdb58ade49c", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpleub-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleub-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpleub-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpleb-2.c\""}, {"sha": "bf8d7e6d27f859ec8a442f66ee733257b675f01d", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpleuw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleuw-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpleuw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmplew-2.c\""}, {"sha": "6ff7ae8af27c1302b87aa79dd53e06344b2645e9", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmplew-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmplew-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmplew-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmplew-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmplew-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmplew-2.c\""}, {"sha": "46e66506a268136e0bf90c8ce3c156f5e3add1f5", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpltb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltb-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpltb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpltb-2.c\""}, {"sha": "13b49240a30ebe12e63c0b80f3a839bcffd191d6", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpltub-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltub-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpltub-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpltub-2.c\""}, {"sha": "0c4dc77815ebec935dd4a85b6028e52d419ac8e6", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpltuw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltuw-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpltuw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpltuw-2.c\""}, {"sha": "86fe9af08a15836fb858c9d77a2db88206964a3a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpltw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltw-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpltw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpltw-2.c\""}, {"sha": "99356077c7819bde2712d7c926e4652e6af2f304", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpneqb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqb-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpneqb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpneqb-2.c\""}, {"sha": "dff70c10974cb34a24792d4ce61406d04b1e33d2", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpnequb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequb-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpnequb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpnequb-2.c\""}, {"sha": "ebcd37f5da03281fee23699e15495e35abdd8172", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpnequw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequw-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpnequw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpnequw-2.c\""}, {"sha": "e19b6f58c5b02b6e4c200ab2c78857067da71f27", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpneqw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18379eeafcd1261207d3d67eb4e5f6ee7715628a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqw-2.c?ref=18379eeafcd1261207d3d67eb4e5f6ee7715628a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpneqw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpneqw-2.c\""}]}