{"sha": "67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdkYzFmMjRkY2VlYThkY2E0YjI4MTBmMmNiOWQ5Yjc3NzVkMmI5OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-08T03:47:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-08T03:47:36Z"}, "message": "re PR c++/18451 (C++ error message regression)\n\n\tPR c++/18451\n\tPR c++/40738\n\t* cp-tree.h (cp_decl_specifier_seq): Add any_type_specifiers_p.\n\t* parser.c (cp_parser_single_declaration): Call\n\tcp_parser_parse_and_diagnose_invalid_type_name here, too.\n\t(cp_parser_parameter_declaration): And here.\n\t(cp_parser_parse_and_diagnose_invalid_type_name): Be\n\tless picky about declarator form.  Don't skip to\n\tthe end of the block if\twe're in a declarator.\n\t(cp_parser_decl_specifier_seq): Set any_type_specifiers_p.\n\t(cp_parser_simple_declaration): Check it.\n\t(cp_parser_member_declaration): Likewise.\n\t(cp_parser_diagnose_invalid_type_name): Tweak error message.\n\t(cp_parser_expression_statement): Likewise.\n\t* decl2.c (grokfield): Mention decltype instead of typeof.\n\nFrom-SVN: r154006", "tree": {"sha": "dd1b28a0105b37143349e8a0082a6894d5afb12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd1b28a0105b37143349e8a0082a6894d5afb12c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5241b7e4a17c23a94b85b16850febad8eaf6bcdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5241b7e4a17c23a94b85b16850febad8eaf6bcdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5241b7e4a17c23a94b85b16850febad8eaf6bcdf"}], "stats": {"total": 175, "additions": 123, "deletions": 52}, "files": [{"sha": "7dc15875cfe60169ef2929d6deb2b8872fd7dae3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -1,3 +1,21 @@\n+2009-11-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/18451\n+\tPR c++/40738\n+\t* cp-tree.h (cp_decl_specifier_seq): Add any_type_specifiers_p.\n+\t* parser.c (cp_parser_single_declaration): Call\n+\tcp_parser_parse_and_diagnose_invalid_type_name here, too.\n+\t(cp_parser_parameter_declaration): And here.\n+\t(cp_parser_parse_and_diagnose_invalid_type_name): Be\n+\tless picky about declarator form.  Don't skip to\n+\tthe end of the block if\twe're in a declarator.\n+\t(cp_parser_decl_specifier_seq): Set any_type_specifiers_p.\n+\t(cp_parser_simple_declaration): Check it.\n+\t(cp_parser_member_declaration): Likewise.\n+\t(cp_parser_diagnose_invalid_type_name): Tweak error message.\n+\t(cp_parser_expression_statement): Likewise.\n+\t* decl2.c (grokfield): Mention decltype instead of typeof.\n+\n 2009-11-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/15946"}, {"sha": "68be934547199727e8e2eae1e3cdaf8962beb460", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -4267,6 +4267,8 @@ typedef struct cp_decl_specifier_seq {\n   BOOL_BITFIELD conflicting_specifiers_p : 1;\n   /* True iff at least one decl-specifier was found.  */\n   BOOL_BITFIELD any_specifiers_p : 1;\n+  /* True iff at least one type-specifier was found.  */\n+  BOOL_BITFIELD any_type_specifiers_p : 1;\n   /* True iff \"int\" was explicitly provided.  */\n   BOOL_BITFIELD explicit_int_p : 1;\n   /* True iff \"char\" was explicitly provided.  */"}, {"sha": "ba987f7888c0ca4d82be2da9913d5fed6f9662bc", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -789,7 +789,7 @@ grokfield (const cp_declarator *declarator,\n \n   if (TREE_CODE (value) == TYPE_DECL && init)\n     {\n-      error (\"typedef %qD is initialized (use __typeof__ instead)\", value);\n+      error (\"typedef %qD is initialized (use decltype instead)\", value);\n       init = NULL_TREE;\n     }\n "}, {"sha": "7bafb67bc1cba57169317d8fff7c7fa35b23ef5a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -2402,8 +2402,8 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser,\n \t\t  id, parser->scope);\n       else if (TYPE_P (parser->scope)\n \t       && dependent_scope_p (parser->scope))\n-\terror_at (location, \"need %<typename%> before %<%T::%E%> to name \"\n-\t\t  \"a type in dependent scope %qT\",\n+\terror_at (location, \"need %<typename%> before %<%T::%E%> because \"\n+\t\t  \"%qT is a dependent scope\",\n \t\t  parser->scope, id, parser->scope);\n       else if (TYPE_P (parser->scope))\n \terror_at (location, \"%qE in class %qT does not name a type\",\n@@ -2437,9 +2437,9 @@ cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)\n \t\t\t\t/*template_p=*/NULL,\n \t\t\t\t/*declarator_p=*/true,\n \t\t\t\t/*optional_p=*/false);\n-  /* After the id-expression, there should be a plain identifier,\n-     otherwise this is not a simple variable declaration.  */\n-  if (!cp_lexer_next_token_is (parser->lexer, CPP_NAME)\n+  /* If the next token is a (, this is a function with no explicit return\n+     type, i.e. constructor, destructor or conversion op.  */\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN)\n       || TREE_CODE (id) == TYPE_DECL)\n     {\n       cp_parser_abort_tentative_parse (parser);\n@@ -2451,9 +2451,11 @@ cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)\n   /* Emit a diagnostic for the invalid type.  */\n   cp_parser_diagnose_invalid_type_name (parser, parser->scope,\n \t\t\t\t\tid, token->location);\n-  /* Skip to the end of the declaration; there's no point in\n-     trying to process it.  */\n-  cp_parser_skip_to_end_of_block_or_statement (parser);\n+  /* If we aren't in the middle of a declarator (i.e. in a\n+     parameter-declaration-clause), skip to the end of the declaration;\n+     there's no point in trying to process it.  */\n+  if (!parser->in_declarator_p)\n+    cp_parser_skip_to_end_of_block_or_statement (parser);\n   return true;\n }\n \n@@ -7773,8 +7775,8 @@ cp_parser_expression_statement (cp_parser* parser, tree in_statement_expr)\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON)\n       && !cp_parser_uncommitted_to_tentative_parse_p (parser)\n       && TREE_CODE (statement) == SCOPE_REF)\n-    error_at (token->location, \"need %<typename%> before %qE to name \"\n-\t      \"a type in dependent scope %qT\",\n+    error_at (token->location, \"need %<typename%> before %qE because \"\n+\t      \"%qT is a dependent scope\",\n \t      statement, TREE_OPERAND (statement, 0));\n \n   /* Consume the final `;'.  */\n@@ -8846,7 +8848,7 @@ cp_parser_simple_declaration (cp_parser* parser,\n        T t;\n \n      where \"T\" should name a type -- but does not.  */\n-  if (!decl_specifiers.type\n+  if (!decl_specifiers.any_type_specifiers_p\n       && cp_parser_parse_and_diagnose_invalid_type_name (parser))\n     {\n       /* If parsing tentatively, we should commit; we really are\n@@ -9211,6 +9213,8 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t    {\n \t      constructor_possible_p = false;\n \t      found_decl_spec = true;\n+\t      if (!is_cv_qualifier)\n+\t\tdecl_specs->any_type_specifiers_p = true;\n \t    }\n \t}\n \n@@ -14973,6 +14977,11 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t\t\t\tCP_PARSER_FLAGS_NONE,\n \t\t\t\t&decl_specifiers,\n \t\t\t\t&declares_class_or_enum);\n+\n+  /* Complain about missing 'typename' or other invalid type names.  */\n+  if (!decl_specifiers.any_type_specifiers_p)\n+    cp_parser_parse_and_diagnose_invalid_type_name (parser);\n+\n   /* If an error occurred, there's no reason to attempt to parse the\n      rest of the declaration.  */\n   if (cp_parser_error_occurred (parser))\n@@ -16523,7 +16532,7 @@ cp_parser_member_declaration (cp_parser* parser)\n   prefix_attributes = decl_specifiers.attributes;\n   decl_specifiers.attributes = NULL_TREE;\n   /* Check for an invalid type-name.  */\n-  if (!decl_specifiers.type\n+  if (!decl_specifiers.any_type_specifiers_p\n       && cp_parser_parse_and_diagnose_invalid_type_name (parser))\n     return;\n   /* If there is no declarator, then the decl-specifier-seq should\n@@ -18775,6 +18784,11 @@ cp_parser_single_declaration (cp_parser* parser,\n \t  cp_parser_perform_template_parameter_access_checks (checks);\n \t}\n     }\n+\n+  /* Complain about missing 'typename' or other invalid type names.  */\n+  if (!decl_specifiers.any_type_specifiers_p)\n+    cp_parser_parse_and_diagnose_invalid_type_name (parser);\n+\n   /* If it's not a template class, try for a template function.  If\n      the next token is a `;', then this declaration does not declare\n      anything.  But, if there were errors in the decl-specifiers, then"}, {"sha": "d4dc136cbff720137f207223ec1aadb73e29b3d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -1,5 +1,30 @@\n 2009-11-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/18451\n+\tPR c++/40738\n+\t* g++.dg/parse/error36.C: Add parameter and template cases.\n+\t* g++.dg/cpp0x/variadic-ex1.C: Update expected errors.\n+\t* g++.dg/ext/typedef-init.C: Likewise.\n+\t* g++.dg/lookup/hidden-class1.C: Likewise.\n+\t* g++.dg/lookup/hidden-class10.C: Likewise.\n+\t* g++.dg/lookup/hidden-class5.C: Likewise.\n+\t* g++.dg/lookup/hidden-class7.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class1.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class4.C: Likewise.\n+\t* g++.dg/lookup/hidden-temp-class7.C: Likewise.\n+\t* g++.dg/lookup/strong-using-2.C: Likewise.\n+\t* g++.dg/other/typedef1.C: Likewise.\n+\t* g++.dg/parse/access10.C: Likewise.\n+\t* g++.dg/parse/constructor1.C: Likewise.\n+\t* g++.dg/parse/crash38.C: Likewise.\n+\t* g++.dg/parse/error3.C: Likewise.\n+\t* g++.dg/parse/typespec1.C: Likewise.\n+\t* g++.dg/template/typedef5.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename3.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename4.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename6.C: Likewise.\n+\t* g++.old-deja/g++.robertl/eb94.C: Likewise.\n+\n \t* g++.dg/abi/regparm1.C: Fix execute test.\n \n 2009-11-07  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "485fffa476cf10345ca978f3a9d457ec94e6efd8", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -1,4 +1,4 @@\n // { dg-options \"-std=gnu++0x\" }\n template<typename ... Elements> class Tuple;\n Tuple<>* t; // OK: Elements is empty\n-Tuple* u; // { dg-error \"expected\" }\n+Tuple* u; // { dg-error \"template-name\" }"}, {"sha": "153303d217b5012baab63b39071df651ca7db25f", "filename": "gcc/testsuite/g++.dg/ext/typedef-init.C", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypedef-init.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypedef-init.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypedef-init.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -11,8 +11,7 @@\n \n /* Case A: just the bare name = initializer.  */\n \n-typedef A = 0;  /* { dg-error \"initialized\" \"A\" } */\n-                /* { dg-warning \"no type\" \"A warns\" { target *-*-* } 14 } */\n+typedef A = 0;  /* { dg-error \"does not name a type\" \"A\" } */\n A a;            /* { dg-error \"does not name a type\" \"A error cascade\" } */\n \n /* Case B: with a type also.  */\n@@ -24,9 +23,8 @@ B b;\t\t    /* { dg-error \"does not name a type\" \"B error cascade\" } */\n    field declarations go by a different code path in C++ (ick).  */\n \n struct S {\n-  typedef C = 0; /* { dg-error \"initialized\" \"C\" } */\n-                 /* { dg-warning \"no type\" \"C warns\" { target *-*-* } 27 } */\n-  C c;\t\t /* { dg-bogus \"\" \"C error cascade\" } */\n+  typedef C = 0; /* { dg-error \"does not name a type\" \"C\" } */\n+  C c;\t\t /* { dg-error \"\" \"C error cascade\" } */\n \n   typedef int D = 0; /* { dg-error \"initialized\" \"D\" } */\n   D d;\t\t     /* { dg-bogus \"\" \"D error cascade\" } */"}, {"sha": "b3be4e8e9412ac97f4bea2b2a7adca6c710bffd7", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class1.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -4,5 +4,5 @@\n \n class A {\n   friend class B;\n-  B *b;\t\t// { dg-error \"no type|expected\" }\n+  B *b;\t\t// { dg-error \"type|expected\" }\n };"}, {"sha": "c9b5ca9f663fa3d0cfb3d27e2b190bb8a4a643bb", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class10.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -7,5 +7,5 @@\n \n class A {\n   friend class abort;\n-  abort *b;\t// { dg-error \"no type|expected\" }\n+  abort *b;\t// { dg-error \"type|expected\" }\n };"}, {"sha": "c2413546bd7605d2ad1d7702464636266aa6e2aa", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class5.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -6,4 +6,4 @@ class A {\n   friend class B;\n };\n \n-B* b;\t\t// { dg-error \"expected\" }\n+B* b;\t\t// { dg-error \"type|expected\" }"}, {"sha": "a46ae711d2054431c39af3bd4aa873d1cf7652f7", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class7.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -10,4 +10,4 @@ class C {\n   friend class B;\n };\n \n-B *b;\t\t// { dg-error \"expected\" }\n+B *b;\t\t// { dg-error \"type|expected\" }"}, {"sha": "8cdb235e8fcff88d1d7ade12ab65c61f93479650", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class1.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -4,5 +4,5 @@\n \n class A {\n   template <class T> friend class B;\n-  B<int> *b;\t// { dg-error \"no type|expected\" }\n+  B<int> *b;\t// { dg-error \"type|expected\" }\n };"}, {"sha": "3d085e2249a3618b211aea0624e9a3243c4ae445", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class4.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -6,4 +6,4 @@ class A {\n   template <class T> friend class B;\n };\n \n-B<int> *b;\t// { dg-error \"expected\" }\n+B<int> *b;\t// { dg-error \"type|expected\" }"}, {"sha": "19dd95248959d6eefd43fdf8d79bad279160022c", "filename": "gcc/testsuite/g++.dg/lookup/hidden-temp-class7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-temp-class7.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -10,4 +10,4 @@ class C {\n   template <class T> friend class B;\n };\n \n-B<int> *b;\t// { dg-error \"expected\" }\n+B<int> *b;\t// { dg-error \"type|expected\" }"}, {"sha": "314aa52388a01582dc10ff7afcb492fa0ca5ac14", "filename": "gcc/testsuite/g++.dg/lookup/strong-using-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstrong-using-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstrong-using-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstrong-using-2.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -20,4 +20,4 @@ namespace baz {\n \n foo::T *t1;\n bar::T *t2;\n-baz::T *t3; // { dg-error \"(ambiguous|expected|extra)\" \"\" }\n+baz::T *t3; // { dg-error \"(ambiguous|does not name a type)\" \"\" }"}, {"sha": "ef1684d7aeffa17fb009b7092f763eef7ed3e3d9", "filename": "gcc/testsuite/g++.dg/other/typedef1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef1.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -2,6 +2,6 @@\n // { dg-do compile }\n \n void f1(typedef) {}        // { dg-error \"no type|typedef declaration\" }\n-void f2(typedef x) {}      // { dg-error \"no type|typedef declaration\" }\n-void f3(typedef x[]) {}    // { dg-error \"no type|typedef declaration\" }\n+void f2(typedef x) {}      // { dg-error \"type|typedef declaration\" }\n+void f3(typedef x[]) {}    // { dg-error \"type|typedef declaration\" }\n void f4(typedef int x) {}  // { dg-error \"typedef declaration\" }"}, {"sha": "62adc1b16f99f1ab809b030370ad9d733b148b6f", "filename": "gcc/testsuite/g++.dg/parse/access10.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess10.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -7,7 +7,5 @@ template<int> struct A\n     ::A~();\t\t\t// { dg-bogus \"using-declaration\" }\n };\n \n-// Instead of the bogus error we get 3 separate errors.\n-// { dg-error \"no type\" \"\" { target *-*-* } 7 }\n-// { dg-error \"::\" \"\" { target *-*-* } 7 }\n-// { dg-error \"~\" \"\" { target *-*-* } 7 }\n+// Instead of the bogus error we get a different error.\n+// { dg-error \"template-name\" \"\" { target *-*-* } 7 }"}, {"sha": "1bb9ee0a1050ed08c2673aa357e9ae1ea00b00b0", "filename": "gcc/testsuite/g++.dg/parse/constructor1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n // { dg-options \"-fshow-column\" }\n \n-ACE_Process_Descriptor::ACE_Process_Descriptor () : // { dg-error \"declared\" \"declared\" }\n-  // { dg-error \"no type\" \"no type\" { target *-*-* } 4 }\n-  process_ (0) // { dg-error \"3: only constructors take base initializers\" }\n+ACE_Process_Descriptor::ACE_Process_Descriptor () :\n+  // { dg-error \"does not name a type\" \"no type\" { target *-*-* } 4 }\n+  process_ (0)\n {\n }"}, {"sha": "724f9b80a1277099c5112d9ca77fe61d744300cc", "filename": "gcc/testsuite/g++.dg/parse/crash38.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -3,7 +3,7 @@\n /* This would not ICE.  */\n namespace M { } /* { dg-error \"previous declaration\" } */\n struct M; /* { dg-error \"redeclared as different kind of symbol\" } */\n-M *p; /* { dg-error \"expected constructor\" } */\n+M *p; /* { dg-error \"does not name a type\" } */\n \n /* This would ICE when processing 'p'.  */\n namespace N { } /* { dg-error \"previous declaration\" } */"}, {"sha": "7e8cf8de000f8c1e4836cd69e177dd7a341cc779", "filename": "gcc/testsuite/g++.dg/parse/error3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror3.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -5,5 +5,5 @@ static void InstantiateConstraint(const float&, unsigned,\n                                   void(*AddFunction)(const TYPE&,bool&,\n                                                      char*, char*,\n                                                      unsigned*));\n-// { dg-error \"64:expected ',' or '...' before '&' token\" \"\" { target *-*-* }  { 5 } }\n-// { dg-error \"60:ISO C\\\\+\\\\+ forbids declaration of 'TYPE' with no type\" \"\" { target *-*-* } { 5 } }\n+// { dg-error \"64: ISO C\\\\+\\\\+ forbids declaration of 'parameter' with no type\" \"\" { target *-*-* }  { 5 } }\n+// { dg-error \"60: 'TYPE' does not name a type\" \"\" { target *-*-* } { 5 } }"}, {"sha": "0d7f8cfc4c33b0a3c2d8bbb3f3b7bb7fb542b691", "filename": "gcc/testsuite/g++.dg/parse/error36.C", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -1,17 +1,33 @@\n+// PR c++/15946\n // Test for helpful error message about missing typename.\n \n-template <class T> struct A { typedef T foo; typedef T bar; };\n+template <class T> struct A\n+{\n+  struct B { };\n+  static B b;\n+};\n+\n template <class T>\n void f(T t)\n {\n   typedef A<T>::foo type;\t// { dg-error \"typename\" }\n   A<T>::bar b;\t\t\t// { dg-error \"typename\" }\n-} // { dg-error \"expected ';'\" \"\" { target *-*-* } 8 }\n+} // { dg-error \"expected ';'\" \"\" { target *-*-* } 14 }\n \n+// PR c++/36353\n template <class T> struct B\n {\n   void f()\n   {\n     A<T>::baz z;\t\t// { dg-error \"typename\" }\n-  } // { dg-error \"expected ';'\" \"\" { target *-*-* } 15 }\n+  } // { dg-error \"expected ';'\" \"\" { target *-*-* } 22 }\n };\n+\n+// PR c++/40738\n+template <class T>\n+void g(const A<T>::type &t);\t// { dg-error \"typename\" }\n+// { dg-error \"no type\" \"\" { target *-*-* } 28 }\n+\n+// PR c++/18451\n+template <class T> A<T>::B A<T>::b; // { dg-error \"typename\" }\n+// { dg-error \"expected\" \"\" { target *-*-* } 32 }"}, {"sha": "44ee116f636b76af1271e1c19d65b79822865cc0", "filename": "gcc/testsuite/g++.dg/parse/typespec1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypespec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypespec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypespec1.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -1,4 +1,4 @@\n // PR c++/26571\n \n struct A {};\n-unsigned A a;\t\t\t// { dg-error \"multiple\" }\n+unsigned A a;\t\t\t// { dg-error \"expected initializer\" }"}, {"sha": "04b8eac3bcc283c7f08d5e2821db7b08a5f2ef2c", "filename": "gcc/testsuite/g++.dg/template/typedef5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef5.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -2,6 +2,6 @@\n // { dg-do compile }\n \n template<typedef,int>        struct A1; // { dg-error \"no type|typedef declaration|default argument\" }\n-template<typedef x,int>      struct A2; // { dg-error \"no type|typedef declaration|default argument\" }\n-template<typedef x[],int>    struct A3; // { dg-error \"no type|typedef declaration|default argument\" }\n+template<typedef x,int>      struct A2; // { dg-error \"type|typedef declaration|default argument\" }\n+template<typedef x[],int>    struct A3; // { dg-error \"no type|typedef declaration|expected\" }\n template<typedef int x, int> struct A4; // { dg-error \"typedef declaration|default argument\" }"}, {"sha": "0708f1f24953524284660cdcfdbb2d0f1ab515cf", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -17,5 +17,5 @@ struct B : public A<U>\n \n \n template <class U>\n-B<U>::A_Type B<U>::Func() { // { dg-error \"expected\" } implicit typename\n-}\n+B<U>::A_Type B<U>::Func() { // { dg-error \"typename\" } implicit typename\n+}\t\t\t    // { dg-error \"expected\" }"}, {"sha": "7238470e4ceb6296cb1542f4219808f3e0247701", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -22,5 +22,5 @@ struct C : public B<U>\n \n \n template <class U>\n-C<U>::A_Type C<U>::Func() { // { dg-error \"expected\" } implicit typename\n-}\n+C<U>::A_Type C<U>::Func() { // { dg-error \"typename\" } implicit typename\n+}\t\t\t    // { dg-error \"expected\" }"}, {"sha": "0a5f0184bd455ef69f620ecf9de6c1d5b6082c62", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -15,6 +15,6 @@ struct B : public A<U>\n };\n \n template <class U>\n-A<U>::A_Type B<U>::Func()       // { dg-error \"expected\" } function\n+A<U>::A_Type B<U>::Func()       // { dg-error \"typename\" } function\n {\t\t\t\t\n-}\n+} // { dg-error \"expected\" }"}, {"sha": "535023606a7b438e8d9864eecf6393fb3beada7f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb94.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb94.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb94.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb94.C?ref=67dc1f24dceea8dca4b2810f2cb9d9b7775d2b98", "patch": "@@ -10,7 +10,7 @@ static int variable;\n class myClass : public baseClass\n {\n private:\n-static int variable;                    // this is intentionally duplicated\n+static int variable;                    // { dg-error \"private\" }\n };\n \n myClass::variable = 0;                  //{ dg-error \"\" } no type"}]}