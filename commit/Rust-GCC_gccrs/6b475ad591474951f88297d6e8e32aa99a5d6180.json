{"sha": "6b475ad591474951f88297d6e8e32aa99a5d6180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0NzVhZDU5MTQ3NDk1MWY4ODI5N2Q2ZThlMzJhYTk5YTVkNjE4MA==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2003-09-22T17:35:06Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2003-09-22T17:35:06Z"}, "message": "m68k.h (MASK_RTD, [...]): Resurrect -mrtd option.\n\n\t* config/m68k/m68k.h (MASK_RTD, TARGET_RTD, RETURN_POPS_ARGS):\n\tResurrect -mrtd option.\n\nFrom-SVN: r71658", "tree": {"sha": "02535df9e41278f1d6b52af0ef56b5791b861fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02535df9e41278f1d6b52af0ef56b5791b861fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b475ad591474951f88297d6e8e32aa99a5d6180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b475ad591474951f88297d6e8e32aa99a5d6180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b475ad591474951f88297d6e8e32aa99a5d6180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b475ad591474951f88297d6e8e32aa99a5d6180/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5463a4f35db07971b9436c04d44da59fabc10be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5463a4f35db07971b9436c04d44da59fabc10be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5463a4f35db07971b9436c04d44da59fabc10be5"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "6d52d355c682d8812d96e57bce700c8c7afcd76a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b475ad591474951f88297d6e8e32aa99a5d6180/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b475ad591474951f88297d6e8e32aa99a5d6180/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b475ad591474951f88297d6e8e32aa99a5d6180", "patch": "@@ -1,3 +1,8 @@\n+2003-09-22  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* config/m68k/m68k.h (MASK_RTD, TARGET_RTD, RETURN_POPS_ARGS):\n+\tResurrect -mrtd option.\n+\n 2003-09-21  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/12281"}, {"sha": "977a034bb1360213fd7140c6138b7630d62d9931", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b475ad591474951f88297d6e8e32aa99a5d6180/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b475ad591474951f88297d6e8e32aa99a5d6180/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=6b475ad591474951f88297d6e8e32aa99a5d6180", "patch": "@@ -201,6 +201,11 @@ extern int target_flags;\n #define MASK_NO_STRICT_ALIGNMENT (1<<15)\n #define TARGET_STRICT_ALIGNMENT  (~target_flags & MASK_NO_STRICT_ALIGNMENT)\n \n+/* Compile using rtd insn calling sequence.\n+   This will not work unless you use prototypes at least\n+   for all functions that can take varying numbers of args.  */\n+#define MASK_RTD\t(1<<16)\n+#define TARGET_RTD\t(target_flags & MASK_RTD)\n \n /* Compile for a CPU32.  A 68020 without bitfields is a good\n    heuristic for a CPU32.  */\n@@ -306,6 +311,10 @@ extern int target_flags;\n       N_(\"Do not use unaligned memory references\") },\t\t\t\\\n     { \"no-strict-align\", MASK_NO_STRICT_ALIGNMENT,\t\t\t\\\n       N_(\"Use unaligned memory references\") },\t\t\t\t\\\n+    { \"rtd\", MASK_RTD,\t\t\t\t\t\t\t\\\n+      N_(\"Use different calling convention using 'rtd'\") },\t\t\\\n+    { \"nortd\", - MASK_RTD,\t\t\t\t\t\t\\\n+      N_(\"Use normal calling convention\") },\t\t\t\t\\\n     SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n     { \"\", TARGET_DEFAULT, \"\" }}\n /* TARGET_DEFAULT is defined in m68k-none.h, netbsd.h, etc.  */\n@@ -790,9 +799,21 @@ enum reg_class {\n    or for a library call it is an identifier node for the subroutine name.\n    SIZE is the number of bytes of arguments passed on the stack.\n \n-   On the m68k, the caller must always pop the args. */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n+   On the 68000, the RTS insn cannot pop anything.\n+   On the 68010, the RTD insn may be used to pop them if the number\n+     of args is fixed, but if the number is variable then the caller\n+     must pop them all.  RTD can't be used for library calls now\n+     because the library is compiled with the Unix compiler.\n+   Use of RTD is a selectable option, since it is incompatible with\n+   standard Unix calling sequences.  If the option is not selected,\n+   the caller must always pop the args.  */\n+\n+#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)   \\\n+  ((TARGET_RTD && (!(FUNDECL) || TREE_CODE (FUNDECL) != IDENTIFIER_NODE)\t\\\n+    && (TYPE_ARG_TYPES (FUNTYPE) == 0\t\t\t\t\\\n+\t|| (TREE_VALUE (tree_last (TYPE_ARG_TYPES (FUNTYPE)))\t\\\n+\t    == void_type_node)))\t\t\t\t\\\n+   ? (SIZE) : 0)\n \n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree)."}]}