{"sha": "e90247f8bac2b058550d5e3af7873fa2768624d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwMjQ3ZjhiYWMyYjA1ODU1MGQ1ZTNhZjc4NzNmYTI3Njg2MjRkMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2012-04-26T14:20:39Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2012-04-26T14:20:39Z"}, "message": "re PR middle-end/52940 (conversion from MODE_PARTIAL_INT uses sign extension for unsigned types)\n\n\tPR middle-end/52940\n\t* machmode.h (CLASS_HAS_WIDER_MODES_P): True for MODE_PARTIAL_INT.\n\t* expr.c (convert_move): Honor unsignedp when extending partial int\n\tmodes.\n\t* genmodes.c (complete_mode): Don't clear component field of partial\n\tint modes.\n\t(emit_mode_inner): Don't emit it however.\n\t(calc_wider_mode): Partial int modes widen to their component.\n\nFrom-SVN: r186877", "tree": {"sha": "cc9676874f6a1ec2605d4af7227233a8650f66f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc9676874f6a1ec2605d4af7227233a8650f66f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90247f8bac2b058550d5e3af7873fa2768624d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90247f8bac2b058550d5e3af7873fa2768624d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90247f8bac2b058550d5e3af7873fa2768624d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90247f8bac2b058550d5e3af7873fa2768624d2/comments", "author": null, "committer": null, "parents": [{"sha": "81c082ecd2881c3d1ed9387e4deeb922f74a8c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c082ecd2881c3d1ed9387e4deeb922f74a8c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c082ecd2881c3d1ed9387e4deeb922f74a8c4f"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "2ca14ffe8b07da22f2ee20dd404249226707b934", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90247f8bac2b058550d5e3af7873fa2768624d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90247f8bac2b058550d5e3af7873fa2768624d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e90247f8bac2b058550d5e3af7873fa2768624d2", "patch": "@@ -3,6 +3,15 @@\n \t* PR middle-end/52997\n \t* ira.c (find_moveable_pseudos): Call resize_reg_info.\n \n+\tPR middle-end/52940\n+\t* machmode.h (CLASS_HAS_WIDER_MODES_P): True for MODE_PARTIAL_INT.\n+\t* expr.c (convert_move): Honor unsignedp when extending partial int\n+\tmodes.\n+\t* genmodes.c (complete_mode): Don't clear component field of partial\n+\tint modes.\n+\t(emit_mode_inner): Don't emit it however.\n+\t(calc_wider_mode): Partial int modes widen to their component.\n+\n 2012-04-26  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/niagara4.md: New file."}, {"sha": "3e8e004063bc3986c49409d458cc8b6912e9283f", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90247f8bac2b058550d5e3af7873fa2768624d2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90247f8bac2b058550d5e3af7873fa2768624d2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e90247f8bac2b058550d5e3af7873fa2768624d2", "patch": "@@ -438,21 +438,20 @@ convert_move (rtx to, rtx from, int unsignedp)\n       rtx new_from;\n       enum machine_mode full_mode\n \t= smallest_mode_for_size (GET_MODE_BITSIZE (from_mode), MODE_INT);\n+      convert_optab ctab = unsignedp ? zext_optab : sext_optab;\n+      enum insn_code icode;\n \n-      gcc_assert (convert_optab_handler (sext_optab, full_mode, from_mode)\n-\t\t  != CODE_FOR_nothing);\n+      icode = convert_optab_handler (ctab, full_mode, from_mode);\n+      gcc_assert (icode != CODE_FOR_nothing);\n \n       if (to_mode == full_mode)\n \t{\n-\t  emit_unop_insn (convert_optab_handler (sext_optab, full_mode,\n-\t\t\t\t\t\t from_mode),\n-\t\t\t  to, from, UNKNOWN);\n+\t  emit_unop_insn (icode, to, from, UNKNOWN);\n \t  return;\n \t}\n \n       new_from = gen_reg_rtx (full_mode);\n-      emit_unop_insn (convert_optab_handler (sext_optab, full_mode, from_mode),\n-\t\t      new_from, from, UNKNOWN);\n+      emit_unop_insn (icode, new_from, from, UNKNOWN);\n \n       /* else proceed to integer conversions below.  */\n       from_mode = full_mode;"}, {"sha": "d0095c3b0b136a3f165c9ffbd2afcd69896d2a8f", "filename": "gcc/genmodes.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90247f8bac2b058550d5e3af7873fa2768624d2/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90247f8bac2b058550d5e3af7873fa2768624d2/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=e90247f8bac2b058550d5e3af7873fa2768624d2", "patch": "@@ -360,7 +360,6 @@ complete_mode (struct mode_data *m)\n       m->bytesize = m->component->bytesize;\n \n       m->ncomponents = 1;\n-      m->component = 0;  /* ??? preserve this */\n       break;\n \n     case MODE_COMPLEX_INT:\n@@ -821,7 +820,13 @@ calc_wider_mode (void)\n \n \t  sortbuf[i] = 0;\n \t  for (j = 0; j < i; j++)\n-\t    sortbuf[j]->next = sortbuf[j]->wider = sortbuf[j + 1];\n+\t    {\n+\t      sortbuf[j]->next = sortbuf[j + 1];\n+\t      if (c == MODE_PARTIAL_INT)\n+\t\tsortbuf[j]->wider = sortbuf[j]->component;\n+\t      else\n+\t\tsortbuf[j]->wider = sortbuf[j]->next;\n+\t    }\n \n \t  modes[c] = sortbuf[0];\n \t}\n@@ -1118,7 +1123,8 @@ emit_mode_inner (void)\n \n   for_all_modes (c, m)\n     tagged_printf (\"%smode\",\n-\t\t   m->component ? m->component->name : void_mode->name,\n+\t\t   c != MODE_PARTIAL_INT && m->component\n+\t\t   ? m->component->name : void_mode->name,\n \t\t   m->name);\n \n   print_closer ();"}, {"sha": "6137c70e1e648d9ccfdd9b1ebfc378c28b26cfa0", "filename": "gcc/machmode.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90247f8bac2b058550d5e3af7873fa2768624d2/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90247f8bac2b058550d5e3af7873fa2768624d2/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=e90247f8bac2b058550d5e3af7873fa2768624d2", "patch": "@@ -166,6 +166,7 @@ extern const unsigned char mode_class[NUM_MACHINE_MODES];\n /* Nonzero if CLASS modes can be widened.  */\n #define CLASS_HAS_WIDER_MODES_P(CLASS)         \\\n   (CLASS == MODE_INT                           \\\n+   || CLASS == MODE_PARTIAL_INT                \\\n    || CLASS == MODE_FLOAT                      \\\n    || CLASS == MODE_DECIMAL_FLOAT              \\\n    || CLASS == MODE_COMPLEX_FLOAT              \\"}]}