{"sha": "e3a709be4d65ffbaa50949f94039f7ab7686e4f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhNzA5YmU0ZDY1ZmZiYWE1MDk0OWY5NDAzOWY3YWI3Njg2ZTRmNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-03-24T20:20:56Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-03-24T20:20:56Z"}, "message": "builtins.c (expand_builtin_bzero): New function.\n\n\t* builtins.c (expand_builtin_bzero): New function.\n\t(expand_builtin): Handle bzero.\n\n\t* builtins.def: Add BUILT_IN_BZERO.\n\n\t* c-common.c (c_common_nodes_and_builtins): Provide builtin\n\tprototype & function for bzero.\n\nFrom-SVN: r32727", "tree": {"sha": "d8a9016e5e8a7f8532c10a24cd7aaaad58cd2200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8a9016e5e8a7f8532c10a24cd7aaaad58cd2200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a709be4d65ffbaa50949f94039f7ab7686e4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a709be4d65ffbaa50949f94039f7ab7686e4f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a709be4d65ffbaa50949f94039f7ab7686e4f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/comments", "author": null, "committer": null, "parents": [{"sha": "3424984446d90b366bddbce3dedb9235f8af280b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3424984446d90b366bddbce3dedb9235f8af280b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3424984446d90b366bddbce3dedb9235f8af280b"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "4fcef1c3284bf8fccacae66dd2bc1a4a0e39643f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3a709be4d65ffbaa50949f94039f7ab7686e4f5", "patch": "@@ -1,3 +1,13 @@\n+2000-03-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_bzero): New function.\n+\t(expand_builtin): Handle bzero.\n+\n+\t* builtins.def: Add BUILT_IN_BZERO.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Provide builtin\n+\tprototype & function for bzero.\n+\n 2000-03-23  Michael Meissner  <meissner@redhat.com>\n \n \t* config/alpha/alpha.md (TF floating point insns): Undo 2000-03-21"}, {"sha": "285f4a060eb61c5179bb0e8e199d62f26207f44b", "filename": "gcc/builtins.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e3a709be4d65ffbaa50949f94039f7ab7686e4f5", "patch": "@@ -96,6 +96,7 @@ static rtx expand_builtin_strcmp\tPARAMS ((tree, rtx));\n static rtx expand_builtin_memcpy\tPARAMS ((tree));\n static rtx expand_builtin_strcpy\tPARAMS ((tree));\n static rtx expand_builtin_memset\tPARAMS ((tree));\n+static rtx expand_builtin_bzero\t\tPARAMS ((tree));\n static rtx expand_builtin_strlen\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n@@ -1574,6 +1575,42 @@ expand_builtin_memset (exp)\n     }\n }\n \n+/* Expand expression EXP, which is a call to the bzero builtin.  Return 0\n+   if we failed the caller should emit a normal call.  */\n+static rtx\n+expand_builtin_bzero (exp)\n+     tree exp;\n+{\n+  tree arglist = TREE_OPERAND (exp, 1);\n+\n+  if (arglist == 0\n+      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+\t  != INTEGER_TYPE))\n+    return 0;\n+  else\n+    {\n+      tree newarglist;\n+      rtx result;\n+\n+      /* New argument list transforming bzero(x, y) -> memset(x, 0, y).  */\n+      newarglist = build_tree_list (NULL_TREE, TREE_VALUE (arglist));\n+      chainon (newarglist, build_tree_list (NULL_TREE, integer_zero_node));\n+      chainon (newarglist,\n+\t       build_tree_list (NULL_TREE, TREE_VALUE (TREE_CHAIN (arglist))));\n+      TREE_OPERAND (exp, 1) = newarglist;\n+\n+      result = expand_builtin_memset(exp);\n+      \n+      /* Always restore the original arguments.  */\n+      TREE_OPERAND (exp, 1) = arglist;\n+\n+      return result;\n+    }\n+}\n+\n #ifdef HAVE_cmpstrsi\n /* Expand expression EXP, which is a call to the memcmp or the strcmp builtin.\n    ARGLIST is the argument list for this call.  Return 0 if we failed and the\n@@ -2313,7 +2350,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       && (fcode == BUILT_IN_SIN || fcode == BUILT_IN_COS\n \t  || fcode == BUILT_IN_FSQRT || fcode == BUILT_IN_MEMSET\n \t  || fcode == BUILT_IN_MEMCPY || fcode == BUILT_IN_MEMCMP\n-\t  || fcode == BUILT_IN_BCMP\n+\t  || fcode == BUILT_IN_BCMP || fcode == BUILT_IN_BZERO\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS))\n     return expand_call (exp, target, ignore);\n@@ -2451,6 +2488,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n \n+    case BUILT_IN_BZERO:\n+      target = expand_builtin_bzero (exp);\n+      if (target)\n+\treturn target;\n+      break;\n+\n /* These comparison functions need an instruction that returns an actual\n    index.  An ordinary compare that just sets the condition codes\n    is not enough.  */"}, {"sha": "506bc4102c5da9de5a8c0c0f72c13f0b13dcbbcc", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=e3a709be4d65ffbaa50949f94039f7ab7686e4f5", "patch": "@@ -33,6 +33,7 @@ DEF_BUILTIN(BUILT_IN_FREM)\n DEF_BUILTIN(BUILT_IN_MEMCPY)\n DEF_BUILTIN(BUILT_IN_MEMCMP)\n DEF_BUILTIN(BUILT_IN_MEMSET)\n+DEF_BUILTIN(BUILT_IN_BZERO)\n DEF_BUILTIN(BUILT_IN_BCMP)\n DEF_BUILTIN(BUILT_IN_STRCPY)\n DEF_BUILTIN(BUILT_IN_STRCMP)"}, {"sha": "b80501d089803368b5a4f17d59ed26bd1b9b8747", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a709be4d65ffbaa50949f94039f7ab7686e4f5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e3a709be4d65ffbaa50949f94039f7ab7686e4f5", "patch": "@@ -3462,7 +3462,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n {\n   tree temp;\n   tree memcpy_ftype, memset_ftype, strlen_ftype;\n-  tree bcmp_ftype;\n+  tree bzero_ftype, bcmp_ftype;\n   tree endlink, int_endlink, double_endlink, unsigned_endlink;\n   tree sizetype_endlink;\n   tree ptr_ftype, ptr_ftype_unsigned;\n@@ -3597,6 +3597,12 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\t\t\t\t\t    sizetype,\n \t\t\t\t\t\t\t    endlink))));\n \n+  /* Prototype for bzero.  */\n+  bzero_ftype\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, traditional_ptr_type_node,\n+\t\t\t\t      traditional_len_endlink));\n+\n   /* Prototype for bcmp.  */\n   bcmp_ftype\n     = build_function_type (integer_type_node,\n@@ -3639,6 +3645,11 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n       /* Suppress error if redefined as a non-function.  */\n       DECL_BUILT_IN_NONANSI (temp) = 1;\n \n+      /* In C mode, don't conflict with system prototype variations.  */\n+      temp = builtin_function (\"bzero\",\n+\t\t\t       cplus_mode ? bzero_ftype : void_ftype_any,\n+\t\t\t       BUILT_IN_BZERO, BUILT_IN_NORMAL, NULL_PTR);\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n       temp = builtin_function (\"bcmp\",\n \t\t\t       cplus_mode ? bcmp_ftype : int_ftype_any,\n \t\t\t       BUILT_IN_BCMP, BUILT_IN_NORMAL, NULL_PTR);\n@@ -3746,8 +3757,10 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t    BUILT_IN_NORMAL, \"memcpy\");\n   builtin_function (\"__builtin_memcmp\", int_ftype_cptr_cptr_sizet,\n \t\t    BUILT_IN_MEMCMP, BUILT_IN_NORMAL, \"memcmp\");\n-  builtin_function (\"__builtin_memset\", memset_ftype, BUILT_IN_MEMSET,\n-\t\t    BUILT_IN_NORMAL, \"memset\");\n+  builtin_function (\"__builtin_memset\", memset_ftype,\n+\t\t    BUILT_IN_MEMSET, BUILT_IN_NORMAL, \"memset\");\n+  builtin_function (\"__builtin_bzero\", bzero_ftype,\n+\t\t    BUILT_IN_BZERO, BUILT_IN_NORMAL, \"bzero\");\n   builtin_function (\"__builtin_bcmp\", bcmp_ftype,\n \t\t    BUILT_IN_BCMP, BUILT_IN_NORMAL, \"bcmp\");\n   builtin_function (\"__builtin_strcmp\", int_ftype_string_string,"}]}