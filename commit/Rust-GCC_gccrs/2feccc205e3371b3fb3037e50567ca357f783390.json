{"sha": "2feccc205e3371b3fb3037e50567ca357f783390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlY2NjMjA1ZTMzNzFiM2ZiMzAzN2U1MDU2N2NhMzU3Zjc4MzM5MA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2001-01-15T08:11:40Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-01-15T08:11:40Z"}, "message": "All files with updated copyright.\n\n2001-01-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\tAll files with updated copyright.\n\t* prims.cc (class _Jv_PrimClass): Removed.\n\t(init_prim_class): New function.\n\t(DECLARE_PRIM_TYPE): Rewritten. `java::lang::Class' replaces\n\t`_Jv_PrimClass' in primitive type declarations. Assign to the\n\tvalue returned by `init_prim_class.'\n\t* gcj/array.h: `java::lang::Class' replaces `_Jv_PrimClass' in\n\tprimitive type declarations.\n\t(JvPrimClass): Cast to `jclass' removed.\n\t* java/lang/Class.h (Class): New constructor.\n\t(Class): New copy constructor.\n\t(initializePrim): New prototype.\n\t(_Jv_PrimClass): Field removed.\n\t* java/lang/Object.h (struct _JvObjectPrefix): New virtuals\n\tnacd_1 and nacd_2 (for compatibility with the new C++ ABI.)\n\t(class java::lang::Object): `finalize' moved up front.\n\t* java/lang/natClass.cc\n\t(isAssignableFrom): Turned outline.\n\t(isInstance): Likewise.\n\t(isInterface): Likewise, fixed indentation.\n\t(initializePrim): New function.\n\n(New C++ ABI compatibility patch:\n http://sources.redhat.com/ml/java-patches/2001-q1/msg00065.html)\n\nFrom-SVN: r39032", "tree": {"sha": "0f67eae624079d38f268d0277b1b5f7310768fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f67eae624079d38f268d0277b1b5f7310768fa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2feccc205e3371b3fb3037e50567ca357f783390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2feccc205e3371b3fb3037e50567ca357f783390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2feccc205e3371b3fb3037e50567ca357f783390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2feccc205e3371b3fb3037e50567ca357f783390/comments", "author": null, "committer": null, "parents": [{"sha": "dc08e603899b1ac1ea91a9ee641853b20521d61e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc08e603899b1ac1ea91a9ee641853b20521d61e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc08e603899b1ac1ea91a9ee641853b20521d61e"}], "stats": {"total": 194, "additions": 121, "deletions": 73}, "files": [{"sha": "3ed758f2920702d6f06704a1bcfb7b6e24425f27", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2feccc205e3371b3fb3037e50567ca357f783390", "patch": "@@ -116,6 +116,30 @@\n \tfrom the c++ compiler.\n \t* Makefile.in: Rebuilt.\n \n+2001-01-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\tAll files with updated copyright.\n+\t* prims.cc (class _Jv_PrimClass): Removed.\n+\t(init_prim_class): New function.\n+\t(DECLARE_PRIM_TYPE): Rewritten. `java::lang::Class' replaces\n+\t`_Jv_PrimClass' in primitive type declarations. Assign to the\n+\tvalue returned by `init_prim_class.'\n+\t* gcj/array.h: `java::lang::Class' replaces `_Jv_PrimClass' in\n+\tprimitive type declarations.\n+\t(JvPrimClass): Cast to `jclass' removed.\n+\t* java/lang/Class.h (Class): New constructor.\n+\t(Class): New copy constructor.\n+\t(initializePrim): New prototype.\n+\t(_Jv_PrimClass): Field removed.\n+\t* java/lang/Object.h (struct _JvObjectPrefix): New virtuals\n+\tnacd_1 and nacd_2 (for compatibility with the new C++ ABI.)\n+\t(class java::lang::Object): `finalize' moved up front.\n+\t* java/lang/natClass.cc \n+\t(isAssignableFrom): Turned outline.\n+\t(isInstance): Likewise.\n+\t(isInterface): Likewise, fixed indentation.\n+\t(initializePrim): New function.\n+\n 2001-01-07  Anthony Green  <green@redhat.com>\n \n \t* Makefile.am (texinfo): Add texinfo target for generating texinfo"}, {"sha": "db58ddfbdf874f71c1ac852fc9050b7190cd85ba", "filename": "libjava/gcj/array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fgcj%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fgcj%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Farray.h?ref=2feccc205e3371b3fb3037e50567ca357f783390", "patch": "@@ -1,6 +1,6 @@\n // array.h - Header file for CNI arrays.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -60,10 +60,10 @@ typedef JArray<jfloat> *jfloatArray;\n typedef JArray<jdouble> *jdoubleArray;\n typedef JArray<jstring> *jstringArray;\n \n-extern class _Jv_PrimClass _Jv_byteClass, _Jv_shortClass, _Jv_intClass,\n+extern java::lang::Class _Jv_byteClass, _Jv_shortClass, _Jv_intClass,\n   _Jv_longClass, _Jv_booleanClass, _Jv_charClass, _Jv_floatClass,\n   _Jv_doubleClass, _Jv_voidClass;\n-#define JvPrimClass(TYPE) ((jclass) & _Jv_##TYPE##Class)\n+#define JvPrimClass(TYPE) (& _Jv_##TYPE##Class)\n \n extern \"C\" jobjectArray _Jv_NewObjectArray(jsize length, jclass, jobject init);\n extern \"C\" jobject _Jv_NewPrimArray (jclass eltype, jint count);"}, {"sha": "9793a5698dd2e20cc8e972181881afd3c18e506b", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=2feccc205e3371b3fb3037e50567ca357f783390", "patch": "@@ -1,6 +1,6 @@\n // Class.h - Header file for java.lang.Class.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -14,6 +14,7 @@ details.  */\n \n #pragma interface\n \n+#include <stdio.h>\n #include <java/lang/Object.h>\n #include <java/lang/String.h>\n #include <java/net/URL.h>\n@@ -191,6 +192,53 @@ class java::lang::Class : public java::lang::Object\n   // finalization\n   void finalize ();\n \n+  // For the initialization of primitive types: some constructors as\n+  // required by prims.cc:init_prim_class(), and the prototype of\n+  // method to perform a lightweight initialization of a Class object.\n+  Class (void) {}\n+  Class (const Class& x) : Object () {\n+    \n+    // C++ ctors are fixing the vtbl in a way that doesn't fit Java.\n+    // We can fix the C++ compiler, or we can hack our runtime. What's\n+    // below fix the vtable so that it starts at -2.\n+    void *p =  ((void **)this)[0];\n+    ((void **)this)[0] = (void *)((char *)p-2*sizeof (void *));\n+\n+    _Jv_VTable *avtable = x.vtable;\n+\n+    // We must initialize every field of the class.  We do this in\n+    // the same order they are declared in Class.h.\n+    next = NULL;\n+    name = x.name;\n+    accflags = x.accflags;\n+    superclass = NULL;\n+    constants.size = 0;\n+    constants.tags = NULL;\n+    constants.data = NULL;\n+    methods = NULL;\n+    method_count = x.method_count;\n+    vtable_method_count = 0;\n+    fields = NULL;\n+    size_in_bytes = x.size_in_bytes;\n+    field_count = 0;\n+    static_field_count = 0;\n+    vtable = JV_PRIMITIVE_VTABLE;\n+    interfaces = NULL;\n+    loader = NULL;\n+    interface_count = 0;\n+    state = JV_STATE_DONE;\n+    thread = NULL;\n+    depth = -1;\n+    ancestors = NULL;\n+    idt = NULL;\n+\n+    if (method_count != 'V')\n+      _Jv_NewArrayClass (this, NULL, avtable);\n+    else\n+      arrayclass = NULL;\n+  }\n+  void initializePrim (jobject cname, jbyte sig, jint len, jobject avtable);\n+\n   static java::lang::Class class$;\n \n private:   \n@@ -237,8 +285,6 @@ class java::lang::Class : public java::lang::Object\n   friend jint JvNumMethods (jclass);\n   friend jmethodID JvGetFirstMethod (jclass);\n \n-  friend class _Jv_PrimClass;\n-\n   // Friends classes and functions to implement the ClassLoader\n   friend class java::lang::ClassLoader;\n "}, {"sha": "81b5a66dfb62ab7adb807143710123e96606ac29", "filename": "libjava/java/lang/Object.h", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fjava%2Flang%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fjava%2Flang%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FObject.h?ref=2feccc205e3371b3fb3037e50567ca357f783390", "patch": "@@ -1,6 +1,6 @@\n // Object.h - Header file for java.lang.Object.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -15,23 +15,22 @@ details.  */\n \n #include <gcj/javaprims.h>\n \n-// This class is mainly here as a kludge to get G++ to allocate\n-// vtable pointer as the *first* word of each Object, instead of\n-// the second word (following sync_info).  Note that various pieces of\n-// code know that finalize() is the first method.  For instance,\n-// Object.java knows this, as does _Jv_AllocObject.\n+// This class is mainly here as a kludge to get G++ to allocate two\n+// extra entries in the vtable. We will use them to store data.  This\n+// allows us to support the new C++ ABI.\n \n struct _JvObjectPrefix\n {\n protected:\n-  // This is disguised as the C++ vtbl.\n-  // _Jv_VTable*  vtable;\n-\n-  virtual void finalize () = 0;\n+  // New ABI Compatibility Dummy, #1 and 2.\n+  virtual void nacd_1 (void) {};\n+  virtual void nacd_2 (void) {};\n };\n \n class java::lang::Object : public _JvObjectPrefix\n {\n+protected:\n+  virtual void finalize (void);\n public:\n   // Order must match order in Object.java.\n   jclass getClass (void);\n@@ -61,7 +60,6 @@ class java::lang::Object : public _JvObjectPrefix\n \n protected:\n   virtual jobject clone (void);\n-  virtual void finalize (void);\n \n private:\n   // This does not actually refer to a Java object.  Instead it is a"}, {"sha": "0e5479154b49771d5b377fe8e022279f51441777", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=2feccc205e3371b3fb3037e50567ca357f783390", "patch": "@@ -1,6 +1,6 @@\n // natClass.cc - Implementation of java.lang.Class native methods.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -615,7 +615,7 @@ java::lang::Class::getMethods (void)\n   return result;\n }\n \n-inline jboolean\n+jboolean\n java::lang::Class::isAssignableFrom (jclass klass)\n {\n   // Arguments may not have been initialized, given \".class\" syntax.\n@@ -624,7 +624,7 @@ java::lang::Class::isAssignableFrom (jclass klass)\n   return _Jv_IsAssignableFrom (this, klass);\n }\n \n-inline jboolean\n+jboolean\n java::lang::Class::isInstance (jobject obj)\n {\n   if (__builtin_expect (! obj || isPrimitive (), false))\n@@ -633,7 +633,7 @@ java::lang::Class::isInstance (jobject obj)\n   return _Jv_IsAssignableFrom (this, JV_CLASS (obj));\n }\n \n-inline jboolean\n+jboolean\n java::lang::Class::isInterface (void)\n {\n   return (accflags & java::lang::reflect::Modifier::INTERFACE) != 0;\n@@ -1235,7 +1235,7 @@ _Jv_AppendPartialITable (jclass klass, jclass iface, void **itable,\n       for (jclass cl = klass; cl; cl = cl->getSuperclass())\n         {\n \t  meth = _Jv_GetMethodLocal (cl, iface->methods[j].name,\n-                 iface->methods[j].signature);\n+\t\t\t\t     iface->methods[j].signature);\n \t\t \n \t  if (meth)\n \t    break;\n@@ -1409,3 +1409,19 @@ java::lang::Class::getPrivateMethod (jstring name, JArray<jclass> *param_types)\n   JvThrow (new java::lang::NoSuchMethodException);\n }\n \n+// Perform a lightweight initialization of a Class object, for the\n+// purpose of creating the Class object of primitive types.\n+\n+void\n+java::lang::Class::initializePrim (jobject cname, jbyte sig, jint len, jobject avtable)\n+{\n+  using namespace java::lang::reflect;\n+\n+  name = _Jv_makeUtf8Const ((char *) cname, -1);\n+  accflags = Modifier::PUBLIC | Modifier::FINAL | Modifier::ABSTRACT;\n+  method_count = sig;\n+  size_in_bytes = len;\n+  // We temporarily store `avtable' in the `vtable' field, so that the\n+  // copy constructor can correctly invoke _Jv_FindArrayClass.\n+  vtable = (_Jv_VTable *) avtable;\n+}"}, {"sha": "415c82ce61df82529974159f5f9dc6d6dcbc505e", "filename": "libjava/prims.cc", "status": "modified", "additions": 15, "deletions": 51, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feccc205e3371b3fb3037e50567ca357f783390/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=2feccc205e3371b3fb3037e50567ca357f783390", "patch": "@@ -1,6 +1,6 @@\n // prims.cc - Code for core of runtime environment.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -510,57 +510,21 @@ _Jv_NewMultiArray (jclass array_type, jint dimensions, ...)\n \n \f\n \n-class _Jv_PrimClass : public java::lang::Class\n+// Initialize Class object for primitive types. The `return' statement\n+// does the actuall job.\n+static java::lang::Class\n+init_prim_class (jobject cname, jbyte sig, jint len, jobject array_vtable)\n {\n-public:\n-  // FIXME: calling convention is weird.  If we use the natural types\n-  // then the compiler will complain because they aren't Java types.\n-  _Jv_PrimClass (jobject cname, jbyte sig, jint len, jobject array_vtable)\n-    {\n-      using namespace java::lang::reflect;\n-\n-      // We must initialize every field of the class.  We do this in\n-      // the same order they are declared in Class.h.\n-      next = NULL;\n-      name = _Jv_makeUtf8Const ((char *) cname, -1);\n-      accflags = Modifier::PUBLIC | Modifier::FINAL | Modifier::ABSTRACT;\n-      superclass = NULL;\n-      constants.size = 0;\n-      constants.tags = NULL;\n-      constants.data = NULL;\n-      methods = NULL;\n-      method_count = sig;\n-      vtable_method_count = 0;\n-      fields = NULL;\n-      size_in_bytes = len;\n-      field_count = 0;\n-      static_field_count = 0;\n-      vtable = JV_PRIMITIVE_VTABLE;\n-      interfaces = NULL;\n-      loader = NULL;\n-      interface_count = 0;\n-      state = JV_STATE_DONE;\n-      thread = NULL;\n-      depth = -1;\n-      ancestors = NULL;\n-      idt = NULL;\n-\n-      // Note that we have to set `methods' to NULL.\n-      if (sig != 'V')\n-\t_Jv_NewArrayClass (this, NULL, (_Jv_VTable *) array_vtable);\n-      else\n-        arrayclass = NULL;\n-    }\n-};\n-\n-// We use this to define both primitive classes and the vtables for\n-// arrays of primitive classes.  The latter are given names so that we\n-// can refer to them from the compiler, allowing us to construct\n-// arrays of primitives statically.\n-#define DECLARE_PRIM_TYPE(NAME, SIG, LEN) \\\n-  _Jv_ArrayVTable _Jv_##NAME##VTable; \\\n-  _Jv_PrimClass _Jv_##NAME##Class((jobject) #NAME, (jbyte) SIG, (jint) LEN, \\\n-                                  (jobject) &_Jv_##NAME##VTable)\n+  static java::lang::Class iclass;\n+  iclass.initializePrim (cname, sig, len, array_vtable);\n+  return iclass;\n+}\n+  \n+#define DECLARE_PRIM_TYPE(NAME, SIG, LEN)\t\t\t\t\\\n+  _Jv_ArrayVTable _Jv_##NAME##VTable;\t\t\t\t\t\\\n+  java::lang::Class _Jv_##NAME##Class = \t\t\t\t\\\n+    init_prim_class ((jobject) #NAME, (jbyte) SIG,\t\t\t\\\n+                     (jint) LEN, (jobject) &_Jv_##NAME##VTable);\n \n DECLARE_PRIM_TYPE(byte, 'B', 1);\n DECLARE_PRIM_TYPE(short, 'S', 2);"}]}