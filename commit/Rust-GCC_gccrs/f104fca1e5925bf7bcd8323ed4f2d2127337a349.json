{"sha": "f104fca1e5925bf7bcd8323ed4f2d2127337a349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwNGZjYTFlNTkyNWJmN2JjZDgzMjNlZDRmMmQyMTI3MzM3YTM0OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:29:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:29:28Z"}, "message": "[multiple changes]\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (Inherited_Discriminant): New flag on\n\tN_Component_Association nodes, to indicate that a component association\n\tof an extension aggregate denotes the value of a discriminant of an\n\tancestor type that has been constrained by the derivation.\n\t* sem_aggr.adb (Discr_Present): use Inherited_Discriminant to prevent a\n\tdouble expansion of the aggregate appearing in a context that delays\n\texpansion, to prevent double insertion of discriminant values when the\n\taggregate is reanalyzed.\n\n2010-06-17  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Allocator): Do not use\n\tAllocator as the Related_Node of Return_Obj_Access in call to\n\tMake_Temporary below as this would create a sort of infinite\n\t\"recursion\".\n\nFrom-SVN: r160914", "tree": {"sha": "bbec0741a365f045beb8a068ca5f8830aaed01d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbec0741a365f045beb8a068ca5f8830aaed01d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f104fca1e5925bf7bcd8323ed4f2d2127337a349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f104fca1e5925bf7bcd8323ed4f2d2127337a349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f104fca1e5925bf7bcd8323ed4f2d2127337a349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f104fca1e5925bf7bcd8323ed4f2d2127337a349/comments", "author": null, "committer": null, "parents": [{"sha": "b07607395afcbf884295020823335d6f8ef3fe35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07607395afcbf884295020823335d6f8ef3fe35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07607395afcbf884295020823335d6f8ef3fe35"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "bc5002581c31472dc5e693c282e450ec4442ecb3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f104fca1e5925bf7bcd8323ed4f2d2127337a349", "patch": "@@ -1,3 +1,21 @@\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (Inherited_Discriminant): New flag on\n+\tN_Component_Association nodes, to indicate that a component association\n+\tof an extension aggregate denotes the value of a discriminant of an\n+\tancestor type that has been constrained by the derivation.\n+\t* sem_aggr.adb (Discr_Present): use Inherited_Discriminant to prevent a\n+\tdouble expansion of the aggregate appearing in a context that delays\n+\texpansion, to prevent double insertion of discriminant values when the\n+\taggregate is reanalyzed.\n+\n+2010-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Allocator): Do not use\n+\tAllocator as the Related_Node of Return_Obj_Access in call to\n+\tMake_Temporary below as this would create a sort of infinite\n+\t\"recursion\".\n+\n 2010-06-17  Ben Brosgol  <brosgol@adacore.com>\n \n \t* gnat_ugn.texi: Update gnatcheck doc."}, {"sha": "d1a56e2ebb729bfa6f878728e8ecab86de98aafa", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f104fca1e5925bf7bcd8323ed4f2d2127337a349", "patch": "@@ -5095,9 +5095,11 @@ package body Exp_Ch6 is\n          Rewrite (Allocator, New_Allocator);\n \n          --  Create a new access object and initialize it to the result of the\n-         --  new uninitialized allocator.\n+         --  new uninitialized allocator. Do not use Allocator as the\n+         --  Related_Node of Return_Obj_Access in call to Make_Temporary below\n+         --  as this would create a sort of infinite \"recursion\".\n \n-         Return_Obj_Access := Make_Temporary (Loc, 'R', Allocator);\n+         Return_Obj_Access := Make_Temporary (Loc, 'R');\n          Set_Etype (Return_Obj_Access, Acc_Type);\n \n          Insert_Action (Allocator,"}, {"sha": "bdc2be0b1af116f8856899ab9b5243a3f79c4ac5", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=f104fca1e5925bf7bcd8323ed4f2d2127337a349", "patch": "@@ -2488,10 +2488,14 @@ package body Sem_Aggr is\n       --  whose value may already have been specified by N's ancestor part.\n       --  This routine checks whether this is indeed the case and if so returns\n       --  False, signaling that no value for Discr should appear in N's\n-      --  aggregate part. Also, in this case, the routine appends\n-      --  New_Assoc_List Discr the discriminant value specified in the ancestor\n+      --  aggregate part. Also, in this case, the routine appends to\n+      --  New_Assoc_List the discriminant value specified in the ancestor\n       --  part.\n-      --  Can't parse previous sentence, appends what where???\n+      --  If the aggregate is in a context with expansion delayed, it will be\n+      --  reanalyzed, The inherited discriminant values must not be reinserted\n+      --  in the component list to prevent spurious errors, but it must be\n+      --  present on first analysis to build the proper subtype indications.\n+      --  The flag Inherited_Discriminant is used to prevent the re-insertion.\n \n       function Get_Value\n         (Compon                 : Node_Id;\n@@ -2556,6 +2560,7 @@ package body Sem_Aggr is\n          Loc : Source_Ptr;\n \n          Ancestor     : Node_Id;\n+         Comp_Assoc   : Node_Id;\n          Discr_Expr   : Node_Id;\n \n          Ancestor_Typ : Entity_Id;\n@@ -2570,6 +2575,20 @@ package body Sem_Aggr is\n             return True;\n          end if;\n \n+         --  Check whether inherited discriminant values have already been\n+         --  inserted in the aggregate. This will be the case if we are\n+         --  re-analyzing an aggregate whose expansion was delayed.\n+\n+         if Present (Component_Associations (N)) then\n+            Comp_Assoc := First (Component_Associations (N));\n+            while Present (Comp_Assoc) loop\n+               if Inherited_Discriminant (Comp_Assoc) then\n+                  return True;\n+               end if;\n+               Next (Comp_Assoc);\n+            end loop;\n+         end if;\n+\n          Ancestor     := Ancestor_Part (N);\n          Ancestor_Typ := Etype (Ancestor);\n          Loc          := Sloc (Ancestor);\n@@ -2627,6 +2646,7 @@ package body Sem_Aggr is\n                end if;\n \n                Resolve_Aggr_Expr (Discr_Expr, Discr);\n+               Set_Inherited_Discriminant (Last (New_Assoc_List));\n                return False;\n             end if;\n "}, {"sha": "8a5c6bc9aea70749eaedaabe203cee7f26165587", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=f104fca1e5925bf7bcd8323ed4f2d2127337a349", "patch": "@@ -1572,6 +1572,14 @@ package body Sinfo is\n       return Flag11 (N);\n    end Includes_Infinities;\n \n+   function Inherited_Discriminant\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Component_Association);\n+      return Flag13 (N);\n+   end Inherited_Discriminant;\n+\n    function Instance_Spec\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -4466,6 +4474,14 @@ package body Sinfo is\n       Set_Flag11 (N, Val);\n    end Set_Includes_Infinities;\n \n+   procedure Set_Inherited_Discriminant\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Component_Association);\n+      Set_Flag13 (N, Val);\n+   end Set_Inherited_Discriminant;\n+\n    procedure Set_Instance_Spec\n       (N : Node_Id; Val : Node_Id) is\n    begin"}, {"sha": "9a95b1385d946c18f6ee6fe51e87f4169359549d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f104fca1e5925bf7bcd8323ed4f2d2127337a349/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=f104fca1e5925bf7bcd8323ed4f2d2127337a349", "patch": "@@ -1180,6 +1180,12 @@ package Sinfo is\n    --    range is given by the programmer, even if that range is identical to\n    --    the range for Float.\n \n+   --  Inherited_Discriminant (Flag13-Sem)\n+   --    This flag is present in N_Component_Association nodes. It indicates\n+   --    that a given component association in an extension aggregate is the\n+   --    value obtained from a constraint on an ancestor. Used to prevent\n+   --    double expansion when the aggregate has expansion delayed.\n+\n    --  Instance_Spec (Node5-Sem)\n    --    This field is present in generic instantiation nodes, and also in\n    --    formal package declaration nodes (formal package declarations are\n@@ -3340,6 +3346,7 @@ package Sinfo is\n       --  Loop_Actions (List2-Sem)\n       --  Expression (Node3)\n       --  Box_Present (Flag15)\n+      --  Inherited_Discriminant (Flag13)\n \n       --  Note: this structure is used for both record component associations\n       --  and array component associations, since the two cases aren't always\n@@ -8117,6 +8124,9 @@ package Sinfo is\n    function Includes_Infinities\n      (N : Node_Id) return Boolean;    -- Flag11\n \n+   function Inherited_Discriminant\n+     (N : Node_Id) return Boolean;    -- Flag13\n+\n    function Instance_Spec\n      (N : Node_Id) return Node_Id;    -- Node5\n \n@@ -9041,6 +9051,9 @@ package Sinfo is\n    procedure Set_Includes_Infinities\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n+   procedure Set_Inherited_Discriminant\n+     (N : Node_Id; Val : Boolean := True);    -- Flag13\n+\n    procedure Set_Instance_Spec\n      (N : Node_Id; Val : Node_Id);            -- Node5\n \n@@ -11332,6 +11345,7 @@ package Sinfo is\n    pragma Inline (Interface_Present);\n    pragma Inline (Includes_Infinities);\n    pragma Inline (In_Present);\n+   pragma Inline (Inherited_Discriminant);\n    pragma Inline (Instance_Spec);\n    pragma Inline (Intval);\n    pragma Inline (Is_Accessibility_Actual);\n@@ -11636,6 +11650,7 @@ package Sinfo is\n    pragma Inline (Set_Interface_List);\n    pragma Inline (Set_Interface_Present);\n    pragma Inline (Set_In_Present);\n+   pragma Inline (Set_Inherited_Discriminant);\n    pragma Inline (Set_Instance_Spec);\n    pragma Inline (Set_Intval);\n    pragma Inline (Set_Is_Accessibility_Actual);"}]}