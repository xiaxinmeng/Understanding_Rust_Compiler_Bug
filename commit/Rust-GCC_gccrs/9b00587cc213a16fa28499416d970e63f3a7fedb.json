{"sha": "9b00587cc213a16fa28499416d970e63f3a7fedb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIwMDU4N2NjMjEzYTE2ZmEyODQ5OTQxNmQ5NzBlNjNmM2E3ZmVkYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-15T10:04:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-15T10:04:55Z"}, "message": "re PR middle-end/52580 (171.swim performance drop on x86 \u2013 vectorization doesn\u2019t happen anymore)\n\n2012-03-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/52580\n\t* tree-data-ref.c (subscript_dependence_tester_1): Check\n\tall dimensions for non-conflicting access functions.\n\n\t* gfortran.dg/vect/pr52580.f: New testcase.\n\nFrom-SVN: r185426", "tree": {"sha": "81bcb3824da76d55dd829c68a39d7aec32f8c546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81bcb3824da76d55dd829c68a39d7aec32f8c546"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b00587cc213a16fa28499416d970e63f3a7fedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b00587cc213a16fa28499416d970e63f3a7fedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b00587cc213a16fa28499416d970e63f3a7fedb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b00587cc213a16fa28499416d970e63f3a7fedb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a12bf402815d0aa90dd32eb3a279281ca3a1dffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12bf402815d0aa90dd32eb3a279281ca3a1dffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12bf402815d0aa90dd32eb3a279281ca3a1dffd"}], "stats": {"total": 94, "additions": 71, "deletions": 23}, "files": [{"sha": "31ab14bab86b78700d4558a2b47117191dd41a46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b00587cc213a16fa28499416d970e63f3a7fedb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b00587cc213a16fa28499416d970e63f3a7fedb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b00587cc213a16fa28499416d970e63f3a7fedb", "patch": "@@ -1,3 +1,9 @@\n+2012-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52580\n+\t* tree-data-ref.c (subscript_dependence_tester_1): Check\n+\tall dimensions for non-conflicting access functions.\n+\n 2012-03-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/44783"}, {"sha": "d39995fb44b7ba0e6e26c338b6d4e9c838a4a1e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b00587cc213a16fa28499416d970e63f3a7fedb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b00587cc213a16fa28499416d970e63f3a7fedb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b00587cc213a16fa28499416d970e63f3a7fedb", "patch": "@@ -1,3 +1,8 @@\n+2012-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52580\n+\t* gfortran.dg/vect/pr52580.f: New testcase.\n+\n 2012-03-15  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* gcc.target/sh/fpul-usage-1.c: New."}, {"sha": "eab9fa54bf5f6598909afb923299fbc861e32493", "filename": "gcc/testsuite/gfortran.dg/vect/pr52580.f", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b00587cc213a16fa28499416d970e63f3a7fedb/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr52580.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b00587cc213a16fa28499416d970e63f3a7fedb/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr52580.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr52580.f?ref=9b00587cc213a16fa28499416d970e63f3a7fedb", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! { dg-require-effective-target vect_double }\n+      SUBROUTINE CALC2\n+      IMPLICIT REAL*8\t(A-H, O-Z)\n+      PARAMETER (N1=1335, N2=1335)\n+\n+      COMMON  U(N1,N2), V(N1,N2), P(N1,N2),\n+     *        UNEW(N1,N2), VNEW(N1,N2),\n+     1        PNEW(N1,N2), UOLD(N1,N2),\n+     *        VOLD(N1,N2), POLD(N1,N2),\n+     2        CU(N1,N2), CV(N1,N2),\n+     *        Z(N1,N2), H(N1,N2), PSI(N1,N2)\n+      COMMON /CONS/ DT,TDT,DX,DY,A,ALPHA,ITMAX,MPRINT,M,N,MP1,\n+     1              NP1,EL,PI,TPI,DI,DJ,PCF\n+      TDTS8 = TDT/8.D0\n+      TDTSDX = TDT/DX\n+      TDTSDY = TDT/DY\n+\n+      DO 200 J=1,N\n+      DO 200 I=1,M\n+      UNEW(I+1,J) = UOLD(I+1,J)+\n+     1    TDTS8*(Z(I+1,J+1)+Z(I+1,J))*(CV(I+1,J+1)+CV(I,J+1)+CV(I,J)\n+     2       +CV(I+1,J))-TDTSDX*(H(I+1,J)-H(I,J))\n+      VNEW(I,J+1) = VOLD(I,J+1)-TDTS8*(Z(I+1,J+1)+Z(I,J+1))\n+     1       *(CU(I+1,J+1)+CU(I,J+1)+CU(I,J)+CU(I+1,J))\n+     2       -TDTSDY*(H(I,J+1)-H(I,J))\n+      PNEW(I,J) = POLD(I,J)-TDTSDX*(CU(I+1,J)-CU(I,J))\n+     1       -TDTSDY*(CV(I,J+1)-CV(I,J))\n+  200 CONTINUE\n+      RETURN\n+      END\n+! { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 1 \"vect\" } }\n+! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "9b3a10df3c73c3f2da1473c4ab3b06e92f570b4d", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b00587cc213a16fa28499416d970e63f3a7fedb/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b00587cc213a16fa28499416d970e63f3a7fedb/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=9b00587cc213a16fa28499416d970e63f3a7fedb", "patch": "@@ -3460,6 +3460,7 @@ subscript_dependence_tester_1 (struct data_dependence_relation *ddr,\n   unsigned int i;\n   tree last_conflicts;\n   struct subscript *subscript;\n+  tree res = NULL_TREE;\n \n   for (i = 0; VEC_iterate (subscript_p, DDR_SUBSCRIPTS (ddr), i, subscript);\n        i++)\n@@ -3471,40 +3472,43 @@ subscript_dependence_tester_1 (struct data_dependence_relation *ddr,\n \t\t\t\t      &overlaps_a, &overlaps_b,\n \t\t\t\t      &last_conflicts, loop_nest);\n \n+      if (SUB_CONFLICTS_IN_A (subscript))\n+\tfree_conflict_function (SUB_CONFLICTS_IN_A (subscript));\n+      if (SUB_CONFLICTS_IN_B (subscript))\n+\tfree_conflict_function (SUB_CONFLICTS_IN_B (subscript));\n+\n+      SUB_CONFLICTS_IN_A (subscript) = overlaps_a;\n+      SUB_CONFLICTS_IN_B (subscript) = overlaps_b;\n+      SUB_LAST_CONFLICT (subscript) = last_conflicts;\n+\n+      /* If there is any undetermined conflict function we have to\n+         give a conservative answer in case we cannot prove that\n+\t no dependence exists when analyzing another subscript.  */\n       if (CF_NOT_KNOWN_P (overlaps_a)\n  \t  || CF_NOT_KNOWN_P (overlaps_b))\n  \t{\n- \t  finalize_ddr_dependent (ddr, chrec_dont_know);\n-\t  dependence_stats.num_dependence_undetermined++;\n-\t  free_conflict_function (overlaps_a);\n-\t  free_conflict_function (overlaps_b);\n-\t  return false;\n+\t  res = chrec_dont_know;\n+\t  continue;\n  \t}\n \n+      /* When there is a subscript with no dependence we can stop.  */\n       else if (CF_NO_DEPENDENCE_P (overlaps_a)\n  \t       || CF_NO_DEPENDENCE_P (overlaps_b))\n  \t{\n- \t  finalize_ddr_dependent (ddr, chrec_known);\n-\t  dependence_stats.num_dependence_independent++;\n-\t  free_conflict_function (overlaps_a);\n-\t  free_conflict_function (overlaps_b);\n-\t  return false;\n- \t}\n-\n-      else\n- \t{\n-\t  if (SUB_CONFLICTS_IN_A (subscript))\n-\t    free_conflict_function (SUB_CONFLICTS_IN_A (subscript));\n-\t  if (SUB_CONFLICTS_IN_B (subscript))\n-\t    free_conflict_function (SUB_CONFLICTS_IN_B (subscript));\n-\n- \t  SUB_CONFLICTS_IN_A (subscript) = overlaps_a;\n- \t  SUB_CONFLICTS_IN_B (subscript) = overlaps_b;\n-\t  SUB_LAST_CONFLICT (subscript) = last_conflicts;\n+\t  res = chrec_known;\n+\t  break;\n  \t}\n     }\n \n-  return true;\n+  if (res == NULL_TREE)\n+    return true;\n+\n+  if (res == chrec_known)\n+    dependence_stats.num_dependence_independent++;\n+  else\n+    dependence_stats.num_dependence_undetermined++;\n+  finalize_ddr_dependent (ddr, res);\n+  return false;\n }\n \n /* Computes the conflicting iterations in LOOP_NEST, and initialize DDR.  */"}]}