{"sha": "f981f97beb9437fac8f5071a282669b09e295707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4MWY5N2JlYjk0MzdmYWM4ZjUwNzFhMjgyNjY5YjA5ZTI5NTcwNw==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2001-07-23T13:21:13Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-07-23T13:21:13Z"}, "message": "* analyze_brprob: Fix more typos.\n\nFrom-SVN: r44263", "tree": {"sha": "0da42e7fa73cf71951016e289693708750c8102e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0da42e7fa73cf71951016e289693708750c8102e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f981f97beb9437fac8f5071a282669b09e295707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f981f97beb9437fac8f5071a282669b09e295707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f981f97beb9437fac8f5071a282669b09e295707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f981f97beb9437fac8f5071a282669b09e295707/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "075cc945ada230e9618be57bc9eb9b53b966fc15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075cc945ada230e9618be57bc9eb9b53b966fc15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075cc945ada230e9618be57bc9eb9b53b966fc15"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "56e9f86c0931d61d4929bd48c76850c9d1eda596", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981f97beb9437fac8f5071a282669b09e295707/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981f97beb9437fac8f5071a282669b09e295707/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=f981f97beb9437fac8f5071a282669b09e295707", "patch": "@@ -1,3 +1,7 @@\n+2001-07-23  Andreas Jaeger  <aj@suse.de>\n+\n+\t* analyze_brprob: Fix more typos.\n+\n 2001-07-23  Andreas Jaeger  <aj@suse.de>\n \n \t* analyze_brprob: Fix typos."}, {"sha": "8e61292e7e3a4a4ebdae88ada5aad28d50f36147", "filename": "contrib/analyze_brprob", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981f97beb9437fac8f5071a282669b09e295707/contrib%2Fanalyze_brprob", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981f97beb9437fac8f5071a282669b09e295707/contrib%2Fanalyze_brprob", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fanalyze_brprob?ref=f981f97beb9437fac8f5071a282669b09e295707", "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/awk -f\n # Script to analyze experimental results of our branch prediction heuristics\n-# Contributed by Jan Hubicka, SuSE inc.\n+# Contributed by Jan Hubicka, SuSE Inc.\n # Copyright (C) 2001 Free Software Foundation, Inc.\n #\n # This file is part of GNU CC.\n@@ -22,28 +22,28 @@\n #\n #\n # This script is used to calculate two basic properties of the branch prediction\n-# heuristics - coverage and hitrate.  Coverage is number of executions of given\n+# heuristics - coverage and hitrate.  Coverage is number of execution of a given\n # branch matched by the heuristics and hitrate is probability that once branch is\n # predicted as taken it is really taken.\n #\n-# These values are usefull to determine quality of given heuristics and hitrate\n+# These values are useful to determine the quality of given heuristics.  Hitrate\n # may be directly used in predict.c.\n #\n # Usage:\n-#  step 1: compile and profile your program.  You need to use -fprofile-arcs\n+#  Step 1: compile and profile your program.  You need to use -fprofile-arcs\n #    flag to get the profiles\n-#  step 2: Generate log files.  The information about given heuristics are\n-#    saved into *.life dumps.  You need to pass -df swtich to compiler as well\n-#    as -fbranch-probabilities to get results of profiling noted in the dumps.\n-#    Ensure that there is no \"Arc profiling: some edge counts were bad.\" warnings.\n+#  Step 2: Generate log files.  The information about given heuristics are\n+#    saved into *.life dumps.  You need to pass the -df switch to the compiler as well\n+#    as -fbranch-probabilities to get the results of profiling noted in the dumps.\n+#    Ensure that there are no \"Arc profiling: some edge counts were bad.\" warnings.\n #    Keep the -fprofile-arcs switch to ensure that CFGs match.\n-#  step 3: Run this script to concatetation of all *.life files:\n+#  Step 3: Run this script to concatenate all *.life files:\n #    analyze_brprob `find . -name *.life`\n #    the information is collected and print once all files are parsed.  This\n #    may take a while.\n-#    Note that script does use bc to perform long arithmetic.\n-#  step 4: Read the results.  Basically following table is printed:\n-#  (this is just example from very early stages of branch prediction pass\n+#    Note that the script does use bc to perform long arithmetic.\n+#  Step 4: Read the results.  Basically the following table is printed:\n+#  (this is just an example from a very early stage of branch prediction pass\n #   development, so please don't take these numbers seriously)\n #\n #HEURISTICS                  BRANCHES  (REL)  HITRATE             COVERAGE  (REL)\n@@ -57,15 +57,15 @@\n #loop branch                       51   1.5%  99.26%/ 99.27%        26854   0.3%\n #noreturn call                    951  27.6% 100.00%/100.00%      1759809  17.6%\n #\n-#  The heuristics called \"first match\" is heuristics used by gcc branch\n+#  The heuristic called \"first match\" is a heuristic used by GCC branch\n #  prediction pass and it predicts 89.92% branches correctly.\n #\n #  The quality of heuristics can be rated using both, coverage and hitrate\n #  parameters.  For example \"loop branch\" heuristics (predicting loopback edge\n-#  as taken) have both very high hitrate and coverage, so it is very usefull.\n+#  as taken) have both very high hitrate and coverage, so it is very useful.\n #  On the other hand, \"exit block\" heuristics (predicting exit edges as not\n-#  taken) have good hitrate, but poor coverage, so only 3 branches has been\n-#  predicted.  The \"loop header\" heuristics have problem, since it tends to\n+#  taken) have good hitrate, but poor coverage, so only 3 branches have been\n+#  predicted.  The \"loop header\" heuristic has problems, since it tends to\n #  misspredict.\n #\n #  The implementation of this script is somewhat brute force.  My awk skills\n@@ -133,7 +133,7 @@ END {\n   # Heuristics called combined predicts just everything.\n   maxcounts = longeval (counts[\"first match\"])\n   maxbranches = branches[\"first match\"]\n-  max = names[\"firat match\"]\n+  max = names[\"first match\"]\n   printf(\"HEURISTICS                  BRANCHES  (REL)  HITRATE             COVERAGE  (REL)\\n\")\n   for (i = 0; i < nnames ; i++)\n    {"}]}