{"sha": "0ea6b275aa84087aeb90313f41d1046a83746846", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhNmIyNzVhYTg0MDg3YWViOTAzMTNmNDFkMTA0NmE4Mzc0Njg0Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-17T16:48:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-17T16:48:28Z"}, "message": "(winnt_function_prologue): Deleted.\n\n(gen_stdcall_suffix): New function.\n\nFrom-SVN: r9199", "tree": {"sha": "d593c265168728d2f5e1af29a2967da1db9d0f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d593c265168728d2f5e1af29a2967da1db9d0f03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea6b275aa84087aeb90313f41d1046a83746846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea6b275aa84087aeb90313f41d1046a83746846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea6b275aa84087aeb90313f41d1046a83746846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea6b275aa84087aeb90313f41d1046a83746846/comments", "author": null, "committer": null, "parents": [{"sha": "f6b54ae8080201d61fb5af1d612d810cc735c6d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b54ae8080201d61fb5af1d612d810cc735c6d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b54ae8080201d61fb5af1d612d810cc735c6d1"}], "stats": {"total": 78, "additions": 23, "deletions": 55}, "files": [{"sha": "89b774583960fe79599578da4e3bbc26872066d3", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 23, "deletions": 55, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea6b275aa84087aeb90313f41d1046a83746846/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea6b275aa84087aeb90313f41d1046a83746846/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=0ea6b275aa84087aeb90313f41d1046a83746846", "patch": "@@ -27,65 +27,33 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n #include \"flags.h\"\n \n-/* This function generates the assembly code for function entry.\n-   FILE is an stdio stream to output the code to.\n-   SIZE is an int: how many units of temporary storage to allocate. */\n+/* Return string which is the former assembler name modified with a \n+   suffix consisting of an atsign (@) followed by the number of bytes of \n+   arguments */\n \n-void\n-winnt_function_prologue (file, size)\n-     FILE *file;\n-     int size;\n+char *\n+gen_stdcall_suffix (decl)\n+  tree decl;\n {\n-  register int regno;\n-  int limit;\n-  rtx xops[4];\n-  int pic_reg_used = flag_pic && (current_function_uses_pic_offset_table\n-\t\t\t\t  || current_function_uses_const_pool);\n+  int total = 0;\n+  char *asmname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  char *newsym;\n \n-  xops[0] = stack_pointer_rtx;\n-  xops[1] = frame_pointer_rtx;\n-  xops[2] = GEN_INT (size);\n-  xops[3] = gen_rtx (REG, Pmode, 0); /* eax */\n-  if (frame_pointer_needed)\n-    {\n-      output_asm_insn (\"push%L1 %1\", xops);\n-      output_asm_insn (AS2 (mov%L0,%0,%1), xops);\n-    }\n-\n-  if (size > 4095)\n-    {\n-      output_asm_insn (AS2 (mov%L0, %2, %3), xops);\n-      output_asm_insn (\"call __chkstk\", xops);\n-    }\n-  else if (size)\n-    output_asm_insn (AS2 (sub%L0,%2,%0), xops);\n-\n-  /* Note If use enter it is NOT reversed args.\n-     This one is not reversed from intel!!\n-     I think enter is slower.  Also sdb doesn't like it.\n-     But if you want it the code is:\n-     {\n-     xops[3] = const0_rtx;\n-     output_asm_insn (\"enter %2,%3\", xops);\n-     }\n-     */\n-  limit = (frame_pointer_needed ? FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM);\n-  for (regno = limit - 1; regno >= 0; regno--)\n-    if ((regs_ever_live[regno] && ! call_used_regs[regno])\n-\t|| (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n+  if (TYPE_ARG_TYPES (TREE_TYPE (decl)))\n+    if (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (decl)))) \n+        == void_type_node)\n       {\n-\txops[0] = gen_rtx (REG, SImode, regno);\n-\toutput_asm_insn (\"push%L0 %0\", xops);\n-      }\n+        tree formal_type = TYPE_ARG_TYPES (TREE_TYPE (decl));\n \n-  if (pic_reg_used)\n-    {\n-      xops[0] = pic_offset_table_rtx;\n-      xops[1] = (rtx) gen_label_rtx ();\n+        while (TREE_VALUE (formal_type) != void_type_node)\n+          {\n+            total += TREE_INT_CST_LOW (TYPE_SIZE (TREE_VALUE (formal_type)));\n+            formal_type = TREE_CHAIN (formal_type);\n+          }\n+      }\n \n-      output_asm_insn (AS1 (call,%P1), xops);\n-      ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (xops[1]));\n-      output_asm_insn (AS1 (pop%L0,%0), xops);\n-      output_asm_insn (\"addl $_GLOBAL_OFFSET_TABLE_+[.-%P1],%0\", xops);\n-    }\n+  newsym = xmalloc (strlen (asmname) + 10);\n+  sprintf (newsym, \"%s@%d\", asmname, total/BITS_PER_UNIT);\n+  return IDENTIFIER_POINTER (get_identifier (newsym));\n }\n+"}]}