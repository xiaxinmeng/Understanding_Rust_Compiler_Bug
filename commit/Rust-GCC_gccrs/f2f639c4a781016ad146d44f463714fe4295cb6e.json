{"sha": "f2f639c4a781016ad146d44f463714fe4295cb6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmNjM5YzRhNzgxMDE2YWQxNDZkNDRmNDYzNzE0ZmU0Mjk1Y2I2ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-02T02:52:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-02T02:52:41Z"}, "message": "analyzer: add more feasibility test cases [PR93355,PR96374]\n\nThis patch adds a couple more reduced test cases derived from the\nintegration test for PR analyzer/93355.  In both cases, the analyzer\nfalsely rejects the buggy code paths as being infeasible due to\nPR analyzer/96374, and so the tests are marked as XFAIL for now.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93355\n\tPR analyzer/96374\n\t* gcc.dg/analyzer/pr93355-localealias-feasibility-2.c: New test.\n\t* gcc.dg/analyzer/pr93355-localealias-feasibility-3.c: New test.", "tree": {"sha": "cfecb2b8b2191a311b99094f24b5fa1bd6182b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfecb2b8b2191a311b99094f24b5fa1bd6182b3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2f639c4a781016ad146d44f463714fe4295cb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f639c4a781016ad146d44f463714fe4295cb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f639c4a781016ad146d44f463714fe4295cb6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f639c4a781016ad146d44f463714fe4295cb6e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a481021a65d6237b0c509a76fcd9c1f32c4558e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a481021a65d6237b0c509a76fcd9c1f32c4558e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a481021a65d6237b0c509a76fcd9c1f32c4558e"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "1afc6df5da126debe4d8cf72d8cfd3b97605c550", "filename": "gcc/testsuite/gcc.dg/analyzer/pr93355-localealias-feasibility-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f639c4a781016ad146d44f463714fe4295cb6e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93355-localealias-feasibility-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f639c4a781016ad146d44f463714fe4295cb6e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93355-localealias-feasibility-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93355-localealias-feasibility-2.c?ref=f2f639c4a781016ad146d44f463714fe4295cb6e", "patch": "@@ -0,0 +1,31 @@\n+/* Simplified version of test to ensure we issue a FILE * leak diagnostic,\n+   reproducing a feasibility issue.\n+   Adapted from intl/localealias.c, with all #includes removed.  */\n+\n+/* { dg-do \"compile\" } */\n+\n+#include \"analyzer-decls.h\"\n+\n+#define NULL ((void *) 0)\n+#define PATH_SEPARATOR ':'\n+#define LOCALE_ALIAS_PATH \"value for LOCALE_ALIAS_PATH\"\n+\n+const char *\n+_nl_expand_alias (void)\n+{\n+  static const char *locale_alias_path;\n+\n+  if (locale_alias_path == NULL)\n+    locale_alias_path = LOCALE_ALIAS_PATH;\n+\n+  const char *start = locale_alias_path;\n+\n+  while (locale_alias_path[0] != '\\0'\n+\t && locale_alias_path[0] != PATH_SEPARATOR)\n+    ++locale_alias_path;\n+\n+  if (start < locale_alias_path)\n+    __analyzer_dump_path (); /* { dg-message \"path\" \"\" { xfail *-*-* } } */\n+  /* XFAIL: PR analyzer/96374\n+     Use -fno-analyzer-feasibility to see the path.  */\n+}"}, {"sha": "a86483113ff1345ba4e0b173fac54a4e1d71eacc", "filename": "gcc/testsuite/gcc.dg/analyzer/pr93355-localealias-feasibility-3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f639c4a781016ad146d44f463714fe4295cb6e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93355-localealias-feasibility-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f639c4a781016ad146d44f463714fe4295cb6e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93355-localealias-feasibility-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93355-localealias-feasibility-3.c?ref=f2f639c4a781016ad146d44f463714fe4295cb6e", "patch": "@@ -0,0 +1,64 @@\n+/* Simplified version of test to ensure we issue a FILE * leak diagnostic,\n+   reproducing a feasibility issue.\n+   Adapted from intl/localealias.c, with all #includes removed.  */\n+\n+/* { dg-do \"compile\" } */\n+\n+/* Handle aliases for locale names.\n+   Copyright (C) 1995-1999, 2000-2001, 2003 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU Library General Public License as published\n+   by the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Library General Public\n+   License along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301,\n+   USA.  */\n+\n+/* Minimal version of system headers.  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+#define NULL ((void *)0)\n+\n+typedef struct _IO_FILE FILE;\n+extern FILE *fopen (const char *__restrict __filename,\n+\t\t    const char *__restrict __modes);\n+extern int fclose (FILE *__stream);\n+\n+extern int isspace (int) __attribute__((__nothrow__, __leaf__));\n+\n+/* Cleaned-up body of localealias.c follows.  */\n+\n+size_t\n+read_alias_file (const char *fname, char *cp)\n+{\n+  FILE *fp;\n+\n+  fp = fopen (fname, \"r\"); /* { dg-message \"opened here\" \"\" { xfail *-*-* } } */\n+  /* XFAIL: PR analyzer/96374\n+     Use -fno-analyzer-feasibility to see the path.  */\n+  if (fp == NULL)\n+    return 0;\n+\n+  if (cp[0] != '\\0')\n+    *cp++ = '\\0';\n+\n+  while (isspace ((unsigned char)cp[0]))\n+    ++cp;\n+\n+  if (cp[0] != '\\0')\n+    return 42; /* { dg-warning \"leak of FILE 'fp'\" \"\" { xfail *-*-* } } */\n+  /* XFAIL: PR analyzer/96374\n+     Use -fno-analyzer-feasibility to see the path.  */\n+\n+  fclose(fp);\n+\n+  return 0;\n+}"}]}