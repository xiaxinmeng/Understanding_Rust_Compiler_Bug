{"sha": "5c64df80df274c753bfc8415bd902e1180e76f6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2NGRmODBkZjI3NGM3NTNiZmM4NDE1YmQ5MDJlMTE4MGU3NmY2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-10T15:53:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-10T15:53:46Z"}, "message": "c++: Fix constexpr evaluation of SPACESHIP_EXPR [PR96497]\n\nThe following valid testcase is rejected, because cxx_eval_binary_expression\nis called on the SPACESHIP_EXPR with lval = true, as the address of the\nspaceship needs to be passed to a method call.\nAfter recursing on the operands and calling genericize_spaceship which turns\nit into a TARGET_EXPR with initialization, we call cxx_eval_constant_expression\non it which succeeds, but then we fall through into code that will\nVERIFY_CONSTANT (r) which FAILs because it is an address of a variable.  Rather\nthan avoiding that for lval = true and SPACESHIP_EXPR, the patch just tail\ncalls cxx_eval_constant_expression - I believe that call should perform all\nthe needed verifications.\n\n2020-08-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/96497\n\t* constexpr.c (cxx_eval_binary_expression): For SPACESHIP_EXPR, tail\n\tcall cxx_eval_constant_expression after genericize_spaceship to avoid\n\tundesirable further VERIFY_CONSTANT.\n\n\t* g++.dg/cpp2a/spaceship-constexpr3.C: New test.", "tree": {"sha": "dca9a6c4f6f0d7f8ab211c5b3e23a492c3dec49a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca9a6c4f6f0d7f8ab211c5b3e23a492c3dec49a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c64df80df274c753bfc8415bd902e1180e76f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c64df80df274c753bfc8415bd902e1180e76f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c64df80df274c753bfc8415bd902e1180e76f6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c64df80df274c753bfc8415bd902e1180e76f6a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fd9d26108fc98bbffce3d99d218a6a09fa80c6"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "8ee0f2abe1adf2b08d1be8a0dc9e4301b3a49a75", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c64df80df274c753bfc8415bd902e1180e76f6a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c64df80df274c753bfc8415bd902e1180e76f6a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=5c64df80df274c753bfc8415bd902e1180e76f6a", "patch": "@@ -3085,8 +3085,8 @@ cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n   else if (code == SPACESHIP_EXPR)\n     {\n       r = genericize_spaceship (type, lhs, rhs);\n-      r = cxx_eval_constant_expression (ctx, r, lval, non_constant_p,\n-\t\t\t\t\toverflow_p);\n+      return cxx_eval_constant_expression (ctx, r, lval, non_constant_p,\n+\t\t\t\t\t   overflow_p);\n     }\n \n   if (r == NULL_TREE)"}, {"sha": "95f03e6e231f110d70369e3d3e46405b20bfa600", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-constexpr3.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c64df80df274c753bfc8415bd902e1180e76f6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c64df80df274c753bfc8415bd902e1180e76f6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr3.C?ref=5c64df80df274c753bfc8415bd902e1180e76f6a", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/96497\n+// { dg-do compile { target c++20 } }\n+\n+#include <compare>\n+\n+static_assert(std::partial_ordering(std::strong_ordering::less) < 0);\n+static_assert(std::partial_ordering(1 <=> 2) < 0);"}]}