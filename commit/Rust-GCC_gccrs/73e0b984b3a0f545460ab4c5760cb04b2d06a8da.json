{"sha": "73e0b984b3a0f545460ab4c5760cb04b2d06a8da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlMGI5ODRiM2EwZjU0NTQ2MGFiNGM1NzYwY2IwNGIyZDA2YThkYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-03-01T19:26:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-03-01T19:26:43Z"}, "message": "runtime, testing/quick: libffi doesn't handle complex on Alpha.\n\nFrom Uros Bizjak.\n\nFrom-SVN: r196389", "tree": {"sha": "4a9503567f85a3b0ad72cf2fb13c868a4543c694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a9503567f85a3b0ad72cf2fb13c868a4543c694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e0b984b3a0f545460ab4c5760cb04b2d06a8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e0b984b3a0f545460ab4c5760cb04b2d06a8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e0b984b3a0f545460ab4c5760cb04b2d06a8da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e0b984b3a0f545460ab4c5760cb04b2d06a8da/comments", "author": null, "committer": null, "parents": [{"sha": "40bf31ed08918ac239b82fb82c3c78d3e6189691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf31ed08918ac239b82fb82c3c78d3e6189691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bf31ed08918ac239b82fb82c3c78d3e6189691"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "a178ec28e6902dce2b2a9b315df833da41cb4a3c", "filename": "libgo/go/testing/quick/quick_test.go", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e0b984b3a0f545460ab4c5760cb04b2d06a8da/libgo%2Fgo%2Ftesting%2Fquick%2Fquick_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e0b984b3a0f545460ab4c5760cb04b2d06a8da/libgo%2Fgo%2Ftesting%2Fquick%2Fquick_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Fquick%2Fquick_test.go?ref=73e0b984b3a0f545460ab4c5760cb04b2d06a8da", "patch": "@@ -7,6 +7,7 @@ package quick\n import (\n \t\"math/rand\"\n \t\"reflect\"\n+\t\"runtime\"\n \t\"testing\"\n )\n \n@@ -72,8 +73,10 @@ func TestCheckEqual(t *testing.T) {\n \treportError(\"fBool\", CheckEqual(fBool, fBool, nil), t)\n \treportError(\"fFloat32\", CheckEqual(fFloat32, fFloat32, nil), t)\n \treportError(\"fFloat64\", CheckEqual(fFloat64, fFloat64, nil), t)\n-\treportError(\"fComplex64\", CheckEqual(fComplex64, fComplex64, nil), t)\n-\treportError(\"fComplex128\", CheckEqual(fComplex128, fComplex128, nil), t)\n+\tif runtime.GOARCH != \"alpha\" {\n+\t\treportError(\"fComplex64\", CheckEqual(fComplex64, fComplex64, nil), t)\n+\t\treportError(\"fComplex128\", CheckEqual(fComplex128, fComplex128, nil), t)\n+\t}\n \treportError(\"fInt16\", CheckEqual(fInt16, fInt16, nil), t)\n \treportError(\"fInt32\", CheckEqual(fInt32, fInt32, nil), t)\n \treportError(\"fInt64\", CheckEqual(fInt64, fInt64, nil), t)"}, {"sha": "a66f92868f87fa367b9cfe9c30b8d9f94875e935", "filename": "libgo/runtime/go-reflect-call.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e0b984b3a0f545460ab4c5760cb04b2d06a8da/libgo%2Fruntime%2Fgo-reflect-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e0b984b3a0f545460ab4c5760cb04b2d06a8da/libgo%2Fruntime%2Fgo-reflect-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-call.c?ref=73e0b984b3a0f545460ab4c5760cb04b2d06a8da", "patch": "@@ -30,7 +30,7 @@ static ffi_type *go_struct_to_ffi (const struct __go_struct_type *)\n static ffi_type *go_string_to_ffi (void) __attribute__ ((no_split_stack));\n static ffi_type *go_interface_to_ffi (void) __attribute__ ((no_split_stack));\n static ffi_type *go_complex_to_ffi (ffi_type *)\n-  __attribute__ ((no_split_stack));\n+  __attribute__ ((no_split_stack, unused));\n static ffi_type *go_type_to_ffi (const struct __go_type_descriptor *)\n   __attribute__ ((no_split_stack));\n static ffi_type *go_func_return_ffi (const struct __go_func_type *)\n@@ -185,13 +185,23 @@ go_type_to_ffi (const struct __go_type_descriptor *descriptor)\n \treturn &ffi_type_double;\n       abort ();\n     case GO_COMPLEX64:\n+#ifdef __alpha__\n+      runtime_throw(\"the libffi library does not support Complex64 type with \"\n+\t\t    \"reflect.Call or runtime.SetFinalizer\");\n+#else\n       if (sizeof (float) == 4)\n \treturn go_complex_to_ffi (&ffi_type_float);\n       abort ();\n+#endif\n     case GO_COMPLEX128:\n+#ifdef __alpha__\n+      runtime_throw(\"the libffi library does not support Complex128 type with \"\n+\t\t    \"reflect.Call or runtime.SetFinalizer\");\n+#else\n       if (sizeof (double) == 8)\n \treturn go_complex_to_ffi (&ffi_type_double);\n       abort ();\n+#endif\n     case GO_INT16:\n       return &ffi_type_sint16;\n     case GO_INT32:"}]}