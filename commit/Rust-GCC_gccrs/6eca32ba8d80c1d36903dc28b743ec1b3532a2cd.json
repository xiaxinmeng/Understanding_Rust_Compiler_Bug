{"sha": "6eca32ba8d80c1d36903dc28b743ec1b3532a2cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVjYTMyYmE4ZDgwYzFkMzY5MDNkYzI4Yjc0M2VjMWIzNTMyYTJjZA==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@adacore.com", "date": "2008-08-22T13:29:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T13:29:10Z"}, "message": "trans.c: Define FP_ARITH_MAY_WIDEN\n\n2008-08-22  Geert Bosch  <bosch@adacore.com>\n\n\t* gcc-interface/trans.c: Define FP_ARITH_MAY_WIDEN\n\t(convert_with_check): Only use longest_float_type if FP_ARITH_MAY_WIDEN is 0\n\nFrom-SVN: r139468", "tree": {"sha": "d6fbb27d449a20479e091b6f48a0be3d37589e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6fbb27d449a20479e091b6f48a0be3d37589e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd/comments", "author": null, "committer": null, "parents": [{"sha": "1c7717c3a8b6e5fab41b071961c8fb00e889dc01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7717c3a8b6e5fab41b071961c8fb00e889dc01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7717c3a8b6e5fab41b071961c8fb00e889dc01"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "6bb8b4524a10eb1a295fdd04a34982b1791e3b63", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6eca32ba8d80c1d36903dc28b743ec1b3532a2cd", "patch": "@@ -1,3 +1,8 @@\n+2008-08-22  Geert Bosch  <bosch@adacore.com>\n+\n+\t* gcc-interface/trans.c: Define FP_ARITH_MAY_WIDEN\n+\t(convert_with_check): Only use longest_float_type if FP_ARITH_MAY_WIDEN is 0\n+\n 2008-08-22  Doug Rupp  <rupp@adacore.com>\n \n \t* bindgen.adb [VMS] (Gen_Adainit_Ada, Gen_Adainit_C): Import and call"}, {"sha": "a67476eae7082bdb75c2e4eb27eb16eb46d9b129", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=6eca32ba8d80c1d36903dc28b743ec1b3532a2cd", "patch": "@@ -73,6 +73,19 @@\n #define TARGET_ABI_OPEN_VMS 0\n #endif\n \n+/* For efficient float-to-int rounding, it is necessary to know whether\n+   floating-point arithmetic on may use wider intermediate results.\n+   When FP_ARITH_MAY_WIDEN is not defined, be conservative and only assume\n+   floating-point arithmetic does not widen if double precision is emulated. */\n+\n+#ifndef FP_ARITH_MAY_WIDEN\n+#if defined(HAVE_extendsfdf2)\n+#define FP_ARITH_MAY_WIDEN HAVE_extendsfdf2\n+#else\n+#define FP_ARITH_MAY_WIDEN 0\n+#endif\n+#endif\n+\n extern char *__gnat_to_canonical_file_spec (char *);\n \n int max_gnat_nodes;\n@@ -6308,12 +6321,11 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n       /* The following calculations depend on proper rounding to even\n          of each arithmetic operation. In order to prevent excess\n          precision from spoiling this property, use the widest hardware\n-         floating-point type.\n+         floating-point type if FP_ARITH_MAY_WIDEN is true.  */\n \n-         FIXME: For maximum efficiency, this should only be done for machines\n-         and types where intermediates may have extra precision.  */\n+      calc_type = (FP_ARITH_MAY_WIDEN ? longest_float_type_node\n+                                      : gnu_in_basetype);\n \n-      calc_type = longest_float_type_node;\n       /* FIXME: Should not have padding in the first place */\n       if (TREE_CODE (calc_type) == RECORD_TYPE\n               && TYPE_IS_PADDING_P (calc_type))"}]}