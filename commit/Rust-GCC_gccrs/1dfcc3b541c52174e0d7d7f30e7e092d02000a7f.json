{"sha": "1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmY2MzYjU0MWM1MjE3NGUwZDdkN2YzMGU3ZTA5MmQwMjAwMGE3Zg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-20T16:56:23Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-20T16:57:45Z"}, "message": "[ARM][GCC][11x]: MVE ACLE vector interleaving store and deinterleaving load intrinsics and also aliases to vstr and vldr intrinsics.\n\nThis patch supports following MVE ACLE intrinsics which are aliases of vstr and\nvldr intrinsics.\n\nvst1q_p_u8, vst1q_p_s8, vld1q_z_u8, vld1q_z_s8, vst1q_p_u16, vst1q_p_s16,\nvld1q_z_u16, vld1q_z_s16, vst1q_p_u32, vst1q_p_s32, vld1q_z_u32, vld1q_z_s32,\nvld1q_z_f16, vst1q_p_f16, vld1q_z_f32, vst1q_p_f32.\n\nThis patch also supports following MVE ACLE vector deinterleaving loads and vector\ninterleaving stores.\n\nvst2q_s8, vst2q_u8, vld2q_s8, vld2q_u8, vld4q_s8, vld4q_u8, vst2q_s16, vst2q_u16,\nvld2q_s16, vld2q_u16, vld4q_s16, vld4q_u16, vst2q_s32, vst2q_u32, vld2q_s32,\nvld2q_u32, vld4q_s32, vld4q_u32, vld4q_f16, vld2q_f16, vst2q_f16, vld4q_f32,\nvld2q_f32, vst2q_f32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm_mve.h (vst1q_p_u8): Define macro.\n\t(vst1q_p_s8): Likewise.\n\t(vst2q_s8): Likewise.\n\t(vst2q_u8): Likewise.\n\t(vld1q_z_u8): Likewise.\n\t(vld1q_z_s8): Likewise.\n\t(vld2q_s8): Likewise.\n\t(vld2q_u8): Likewise.\n\t(vld4q_s8): Likewise.\n\t(vld4q_u8): Likewise.\n\t(vst1q_p_u16): Likewise.\n\t(vst1q_p_s16): Likewise.\n\t(vst2q_s16): Likewise.\n\t(vst2q_u16): Likewise.\n\t(vld1q_z_u16): Likewise.\n\t(vld1q_z_s16): Likewise.\n\t(vld2q_s16): Likewise.\n\t(vld2q_u16): Likewise.\n\t(vld4q_s16): Likewise.\n\t(vld4q_u16): Likewise.\n\t(vst1q_p_u32): Likewise.\n\t(vst1q_p_s32): Likewise.\n\t(vst2q_s32): Likewise.\n\t(vst2q_u32): Likewise.\n\t(vld1q_z_u32): Likewise.\n\t(vld1q_z_s32): Likewise.\n\t(vld2q_s32): Likewise.\n\t(vld2q_u32): Likewise.\n\t(vld4q_s32): Likewise.\n\t(vld4q_u32): Likewise.\n\t(vld4q_f16): Likewise.\n\t(vld2q_f16): Likewise.\n\t(vld1q_z_f16): Likewise.\n\t(vst2q_f16): Likewise.\n\t(vst1q_p_f16): Likewise.\n\t(vld4q_f32): Likewise.\n\t(vld2q_f32): Likewise.\n\t(vld1q_z_f32): Likewise.\n\t(vst2q_f32): Likewise.\n\t(vst1q_p_f32): Likewise.\n\t(__arm_vst1q_p_u8): Define intrinsic.\n\t(__arm_vst1q_p_s8): Likewise.\n\t(__arm_vst2q_s8): Likewise.\n\t(__arm_vst2q_u8): Likewise.\n\t(__arm_vld1q_z_u8): Likewise.\n\t(__arm_vld1q_z_s8): Likewise.\n\t(__arm_vld2q_s8): Likewise.\n\t(__arm_vld2q_u8): Likewise.\n\t(__arm_vld4q_s8): Likewise.\n\t(__arm_vld4q_u8): Likewise.\n\t(__arm_vst1q_p_u16): Likewise.\n\t(__arm_vst1q_p_s16): Likewise.\n\t(__arm_vst2q_s16): Likewise.\n\t(__arm_vst2q_u16): Likewise.\n\t(__arm_vld1q_z_u16): Likewise.\n\t(__arm_vld1q_z_s16): Likewise.\n\t(__arm_vld2q_s16): Likewise.\n\t(__arm_vld2q_u16): Likewise.\n\t(__arm_vld4q_s16): Likewise.\n\t(__arm_vld4q_u16): Likewise.\n\t(__arm_vst1q_p_u32): Likewise.\n\t(__arm_vst1q_p_s32): Likewise.\n\t(__arm_vst2q_s32): Likewise.\n\t(__arm_vst2q_u32): Likewise.\n\t(__arm_vld1q_z_u32): Likewise.\n\t(__arm_vld1q_z_s32): Likewise.\n\t(__arm_vld2q_s32): Likewise.\n\t(__arm_vld2q_u32): Likewise.\n\t(__arm_vld4q_s32): Likewise.\n\t(__arm_vld4q_u32): Likewise.\n\t(__arm_vld4q_f16): Likewise.\n\t(__arm_vld2q_f16): Likewise.\n\t(__arm_vld1q_z_f16): Likewise.\n\t(__arm_vst2q_f16): Likewise.\n\t(__arm_vst1q_p_f16): Likewise.\n\t(__arm_vld4q_f32): Likewise.\n\t(__arm_vld2q_f32): Likewise.\n\t(__arm_vld1q_z_f32): Likewise.\n\t(__arm_vst2q_f32): Likewise.\n\t(__arm_vst1q_p_f32): Likewise.\n\t(vld1q_z): Define polymorphic variant.\n\t(vld2q): Likewise.\n\t(vld4q): Likewise.\n\t(vst1q_p): Likewise.\n\t(vst2q): Likewise.\n\t* config/arm/arm_mve_builtins.def (STORE1): Use builtin qualifier.\n\t(LOAD1): Likewise.\n\t* config/arm/mve.md (mve_vst2q<mode>): Define RTL pattern.\n\t(mve_vld2q<mode>): Likewise.\n\t(mve_vld4q<mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld4q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst1q_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst2q_u8.c: Likewise.", "tree": {"sha": "3942be6c63bcb8bb30c4080781171d04fb299b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3942be6c63bcb8bb30c4080781171d04fb299b96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5446d0cc09e6a931065b98101d799711fd5b035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5446d0cc09e6a931065b98101d799711fd5b035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5446d0cc09e6a931065b98101d799711fd5b035"}], "stats": {"total": 1635, "additions": 1634, "deletions": 1}, "files": [{"sha": "9f50e43924eb70ea39f3812107f13add7962419a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -1,3 +1,98 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm_mve.h (vst1q_p_u8): Define macro.\n+\t(vst1q_p_s8): Likewise.\n+\t(vst2q_s8): Likewise.\n+\t(vst2q_u8): Likewise.\n+\t(vld1q_z_u8): Likewise.\n+\t(vld1q_z_s8): Likewise.\n+\t(vld2q_s8): Likewise.\n+\t(vld2q_u8): Likewise.\n+\t(vld4q_s8): Likewise.\n+\t(vld4q_u8): Likewise.\n+\t(vst1q_p_u16): Likewise.\n+\t(vst1q_p_s16): Likewise.\n+\t(vst2q_s16): Likewise.\n+\t(vst2q_u16): Likewise.\n+\t(vld1q_z_u16): Likewise.\n+\t(vld1q_z_s16): Likewise.\n+\t(vld2q_s16): Likewise.\n+\t(vld2q_u16): Likewise.\n+\t(vld4q_s16): Likewise.\n+\t(vld4q_u16): Likewise.\n+\t(vst1q_p_u32): Likewise.\n+\t(vst1q_p_s32): Likewise.\n+\t(vst2q_s32): Likewise.\n+\t(vst2q_u32): Likewise.\n+\t(vld1q_z_u32): Likewise.\n+\t(vld1q_z_s32): Likewise.\n+\t(vld2q_s32): Likewise.\n+\t(vld2q_u32): Likewise.\n+\t(vld4q_s32): Likewise.\n+\t(vld4q_u32): Likewise.\n+\t(vld4q_f16): Likewise.\n+\t(vld2q_f16): Likewise.\n+\t(vld1q_z_f16): Likewise.\n+\t(vst2q_f16): Likewise.\n+\t(vst1q_p_f16): Likewise.\n+\t(vld4q_f32): Likewise.\n+\t(vld2q_f32): Likewise.\n+\t(vld1q_z_f32): Likewise.\n+\t(vst2q_f32): Likewise.\n+\t(vst1q_p_f32): Likewise.\n+\t(__arm_vst1q_p_u8): Define intrinsic.\n+\t(__arm_vst1q_p_s8): Likewise.\n+\t(__arm_vst2q_s8): Likewise.\n+\t(__arm_vst2q_u8): Likewise.\n+\t(__arm_vld1q_z_u8): Likewise.\n+\t(__arm_vld1q_z_s8): Likewise.\n+\t(__arm_vld2q_s8): Likewise.\n+\t(__arm_vld2q_u8): Likewise.\n+\t(__arm_vld4q_s8): Likewise.\n+\t(__arm_vld4q_u8): Likewise.\n+\t(__arm_vst1q_p_u16): Likewise.\n+\t(__arm_vst1q_p_s16): Likewise.\n+\t(__arm_vst2q_s16): Likewise.\n+\t(__arm_vst2q_u16): Likewise.\n+\t(__arm_vld1q_z_u16): Likewise.\n+\t(__arm_vld1q_z_s16): Likewise.\n+\t(__arm_vld2q_s16): Likewise.\n+\t(__arm_vld2q_u16): Likewise.\n+\t(__arm_vld4q_s16): Likewise.\n+\t(__arm_vld4q_u16): Likewise.\n+\t(__arm_vst1q_p_u32): Likewise.\n+\t(__arm_vst1q_p_s32): Likewise.\n+\t(__arm_vst2q_s32): Likewise.\n+\t(__arm_vst2q_u32): Likewise.\n+\t(__arm_vld1q_z_u32): Likewise.\n+\t(__arm_vld1q_z_s32): Likewise.\n+\t(__arm_vld2q_s32): Likewise.\n+\t(__arm_vld2q_u32): Likewise.\n+\t(__arm_vld4q_s32): Likewise.\n+\t(__arm_vld4q_u32): Likewise.\n+\t(__arm_vld4q_f16): Likewise.\n+\t(__arm_vld2q_f16): Likewise.\n+\t(__arm_vld1q_z_f16): Likewise.\n+\t(__arm_vst2q_f16): Likewise.\n+\t(__arm_vst1q_p_f16): Likewise.\n+\t(__arm_vld4q_f32): Likewise.\n+\t(__arm_vld2q_f32): Likewise.\n+\t(__arm_vld1q_z_f32): Likewise.\n+\t(__arm_vst2q_f32): Likewise.\n+\t(__arm_vst1q_p_f32): Likewise.\n+\t(vld1q_z): Define polymorphic variant.\n+\t(vld2q): Likewise.\n+\t(vld4q): Likewise.\n+\t(vst1q_p): Likewise.\n+\t(vst2q): Likewise.\n+\t* config/arm/arm_mve_builtins.def (STORE1): Use builtin qualifier.\n+\t(LOAD1): Likewise.\n+\t* config/arm/mve.md (mve_vst2q<mode>): Define RTL pattern.\n+\t(mve_vld2q<mode>): Likewise.\n+\t(mve_vld4q<mode>): Likewise.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "f6810ddf4b735e1cd782a67c2d48bab8ddb75814", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 482, "deletions": 0, "changes": 482, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -2466,6 +2466,46 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vsbcq_u32(__a, __b,  __carry) __arm_vsbcq_u32(__a, __b,  __carry)\n #define vsbcq_m_s32(__inactive, __a, __b,  __carry, __p) __arm_vsbcq_m_s32(__inactive, __a, __b,  __carry, __p)\n #define vsbcq_m_u32(__inactive, __a, __b,  __carry, __p) __arm_vsbcq_m_u32(__inactive, __a, __b,  __carry, __p)\n+#define vst1q_p_u8(__addr, __value, __p) __arm_vst1q_p_u8(__addr, __value, __p)\n+#define vst1q_p_s8(__addr, __value, __p) __arm_vst1q_p_s8(__addr, __value, __p)\n+#define vst2q_s8(__addr, __value) __arm_vst2q_s8(__addr, __value)\n+#define vst2q_u8(__addr, __value) __arm_vst2q_u8(__addr, __value)\n+#define vld1q_z_u8(__base, __p) __arm_vld1q_z_u8(__base, __p)\n+#define vld1q_z_s8(__base, __p) __arm_vld1q_z_s8(__base, __p)\n+#define vld2q_s8(__addr) __arm_vld2q_s8(__addr)\n+#define vld2q_u8(__addr) __arm_vld2q_u8(__addr)\n+#define vld4q_s8(__addr) __arm_vld4q_s8(__addr)\n+#define vld4q_u8(__addr) __arm_vld4q_u8(__addr)\n+#define vst1q_p_u16(__addr, __value, __p) __arm_vst1q_p_u16(__addr, __value, __p)\n+#define vst1q_p_s16(__addr, __value, __p) __arm_vst1q_p_s16(__addr, __value, __p)\n+#define vst2q_s16(__addr, __value) __arm_vst2q_s16(__addr, __value)\n+#define vst2q_u16(__addr, __value) __arm_vst2q_u16(__addr, __value)\n+#define vld1q_z_u16(__base, __p) __arm_vld1q_z_u16(__base, __p)\n+#define vld1q_z_s16(__base, __p) __arm_vld1q_z_s16(__base, __p)\n+#define vld2q_s16(__addr) __arm_vld2q_s16(__addr)\n+#define vld2q_u16(__addr) __arm_vld2q_u16(__addr)\n+#define vld4q_s16(__addr) __arm_vld4q_s16(__addr)\n+#define vld4q_u16(__addr) __arm_vld4q_u16(__addr)\n+#define vst1q_p_u32(__addr, __value, __p) __arm_vst1q_p_u32(__addr, __value, __p)\n+#define vst1q_p_s32(__addr, __value, __p) __arm_vst1q_p_s32(__addr, __value, __p)\n+#define vst2q_s32(__addr, __value) __arm_vst2q_s32(__addr, __value)\n+#define vst2q_u32(__addr, __value) __arm_vst2q_u32(__addr, __value)\n+#define vld1q_z_u32(__base, __p) __arm_vld1q_z_u32(__base, __p)\n+#define vld1q_z_s32(__base, __p) __arm_vld1q_z_s32(__base, __p)\n+#define vld2q_s32(__addr) __arm_vld2q_s32(__addr)\n+#define vld2q_u32(__addr) __arm_vld2q_u32(__addr)\n+#define vld4q_s32(__addr) __arm_vld4q_s32(__addr)\n+#define vld4q_u32(__addr) __arm_vld4q_u32(__addr)\n+#define vld4q_f16(__addr) __arm_vld4q_f16(__addr)\n+#define vld2q_f16(__addr) __arm_vld2q_f16(__addr)\n+#define vld1q_z_f16(__base, __p) __arm_vld1q_z_f16(__base, __p)\n+#define vst2q_f16(__addr, __value) __arm_vst2q_f16(__addr, __value)\n+#define vst1q_p_f16(__addr, __value, __p) __arm_vst1q_p_f16(__addr, __value, __p)\n+#define vld4q_f32(__addr) __arm_vld4q_f32(__addr)\n+#define vld2q_f32(__addr) __arm_vld2q_f32(__addr)\n+#define vld1q_z_f32(__base, __p) __arm_vld1q_z_f32(__base, __p)\n+#define vst2q_f32(__addr, __value) __arm_vst2q_f32(__addr, __value)\n+#define vst1q_p_f32(__addr, __value, __p) __arm_vst1q_p_f32(__addr, __value, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -16085,6 +16125,252 @@ __arm_vsbcq_m_u32 (uint32x4_t __inactive, uint32x4_t __a, uint32x4_t __b, unsign\n   return __res;\n }\n \n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_p_u8 (uint8_t * __addr, uint8x16_t __value, mve_pred16_t __p)\n+{\n+  return vstrbq_p_u8 (__addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_p_s8 (int8_t * __addr, int8x16_t __value, mve_pred16_t __p)\n+{\n+  return vstrbq_p_s8 (__addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst2q_s8 (int8_t * __addr, int8x16x2_t __value)\n+{\n+  union { int8x16x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst2qv16qi ((__builtin_neon_qi *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst2q_u8 (uint8_t * __addr, uint8x16x2_t __value)\n+{\n+  union { uint8x16x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst2qv16qi ((__builtin_neon_qi *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_z_u8 (uint8_t const *__base, mve_pred16_t __p)\n+{\n+  return vldrbq_z_u8 ( __base, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_z_s8 (int8_t const *__base, mve_pred16_t __p)\n+{\n+  return vldrbq_z_s8 ( __base, __p);\n+}\n+\n+__extension__ extern __inline int8x16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld2q_s8 (int8_t const * __addr)\n+{\n+  union { int8x16x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld2qv16qi ((__builtin_neon_qi *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline uint8x16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld2q_u8 (uint8_t const * __addr)\n+{\n+  union { uint8x16x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld2qv16qi ((__builtin_neon_qi *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline int8x16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld4q_s8 (int8_t const * __addr)\n+{\n+  union { int8x16x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld4qv16qi ((__builtin_neon_qi *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline uint8x16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld4q_u8 (uint8_t const * __addr)\n+{\n+  union { uint8x16x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld4qv16qi ((__builtin_neon_qi *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_p_u16 (uint16_t * __addr, uint16x8_t __value, mve_pred16_t __p)\n+{\n+  return vstrhq_p_u16 (__addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_p_s16 (int16_t * __addr, int16x8_t __value, mve_pred16_t __p)\n+{\n+  return vstrhq_p_s16 (__addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst2q_s16 (int16_t * __addr, int16x8x2_t __value)\n+{\n+  union { int16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst2qv8hi ((__builtin_neon_hi *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst2q_u16 (uint16_t * __addr, uint16x8x2_t __value)\n+{\n+  union { uint16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst2qv8hi ((__builtin_neon_hi *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_z_u16 (uint16_t const *__base, mve_pred16_t __p)\n+{\n+  return vldrhq_z_u16 ( __base, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_z_s16 (int16_t const *__base, mve_pred16_t __p)\n+{\n+  return vldrhq_z_s16 ( __base, __p);\n+}\n+\n+__extension__ extern __inline int16x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld2q_s16 (int16_t const * __addr)\n+{\n+  union { int16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld2qv8hi ((__builtin_neon_hi *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline uint16x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld2q_u16 (uint16_t const * __addr)\n+{\n+  union { uint16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld2qv8hi ((__builtin_neon_hi *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline int16x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld4q_s16 (int16_t const * __addr)\n+{\n+  union { int16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld4qv8hi ((__builtin_neon_hi *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline uint16x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld4q_u16 (uint16_t const * __addr)\n+{\n+  union { uint16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld4qv8hi ((__builtin_neon_hi *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_p_u32 (uint32_t * __addr, uint32x4_t __value, mve_pred16_t __p)\n+{\n+  return vstrwq_p_u32 (__addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_p_s32 (int32_t * __addr, int32x4_t __value, mve_pred16_t __p)\n+{\n+  return vstrwq_p_s32 (__addr, __value, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst2q_s32 (int32_t * __addr, int32x4x2_t __value)\n+{\n+  union { int32x4x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst2qv4si ((__builtin_neon_si *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst2q_u32 (uint32_t * __addr, uint32x4x2_t __value)\n+{\n+  union { uint32x4x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst2qv4si ((__builtin_neon_si *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_z_u32 (uint32_t const *__base, mve_pred16_t __p)\n+{\n+  return vldrwq_z_u32 ( __base, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_z_s32 (int32_t const *__base, mve_pred16_t __p)\n+{\n+  return vldrwq_z_s32 ( __base, __p);\n+}\n+\n+__extension__ extern __inline int32x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld2q_s32 (int32_t const * __addr)\n+{\n+  union { int32x4x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld2qv4si ((__builtin_neon_si *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline uint32x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld2q_u32 (uint32_t const * __addr)\n+{\n+  union { uint32x4x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld2qv4si ((__builtin_neon_si *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline int32x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld4q_s32 (int32_t const * __addr)\n+{\n+  union { int32x4x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld4qv4si ((__builtin_neon_si *) __addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline uint32x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld4q_u32 (uint32_t const * __addr)\n+{\n+  union { uint32x4x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld4qv4si ((__builtin_neon_si *) __addr);\n+  return __rv.__i;\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -19436,6 +19722,88 @@ __arm_vrev64q_x_f32 (float32x4_t __a, mve_pred16_t __p)\n   return __builtin_mve_vrev64q_m_fv4sf (vuninitializedq_f32 (), __a, __p);\n }\n \n+__extension__ extern __inline float16x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld4q_f16 (float16_t const * __addr)\n+{\n+  union { float16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld4qv8hf (__addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline float16x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld2q_f16 (float16_t const * __addr)\n+{\n+  union { float16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld2qv8hf (__addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_z_f16 (float16_t const *__base, mve_pred16_t __p)\n+{\n+  return vldrhq_z_f16 ( __base, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst2q_f16 (float16_t * __addr, float16x8x2_t __value)\n+{\n+  union { float16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst2qv8hf (__addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_p_f16 (float16_t * __addr, float16x8_t __value, mve_pred16_t __p)\n+{\n+  return vstrhq_p_f16 (__addr, __value, __p);\n+}\n+\n+__extension__ extern __inline float32x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld4q_f32 (float32_t const * __addr)\n+{\n+  union { float32x4x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld4qv4sf (__addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline float32x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld2q_f32 (float32_t const * __addr)\n+{\n+  union { float32x4x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_mve_vld2qv4sf (__addr);\n+  return __rv.__i;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_z_f32 (float32_t const *__base, mve_pred16_t __p)\n+{\n+  return vldrwq_z_f32 ( __base, __p);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst2q_f32 (float32_t * __addr, float32x4x2_t __value)\n+{\n+  union { float32x4x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst2qv4sf (__addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst1q_p_f32 (float32_t * __addr, float32x4_t __value, mve_pred16_t __p)\n+{\n+  return vstrwq_p_f32 (__addr, __value, __p);\n+}\n+\n #endif\n \n enum {\n@@ -21911,6 +22279,42 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16_t_const_ptr]: __arm_vld1q_f16 (__ARM_mve_coerce(__p0, float16_t const *)), \\\n   int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vld1q_f32 (__ARM_mve_coerce(__p0, float32_t const *)));})\n \n+#define vld1q_z(p0,p1) __arm_vld1q_z(p0, p1)\n+#define __arm_vld1q_z(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr]: __arm_vld1q_z_s8 (__ARM_mve_coerce(__p0, int8_t const *), p1), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr]: __arm_vld1q_z_s16 (__ARM_mve_coerce(__p0, int16_t const *), p1), \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vld1q_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr]: __arm_vld1q_z_u8 (__ARM_mve_coerce(__p0, uint8_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld1q_z_u16 (__ARM_mve_coerce(__p0, uint16_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld1q_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_float16_t_const_ptr]: __arm_vld1q_z_f16 (__ARM_mve_coerce(__p0, float16_t const *), p1), \\\n+  int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vld1q_z_f32 (__ARM_mve_coerce(__p0, float32_t const *), p1));})\n+\n+#define vld2q(p0) __arm_vld2q(p0)\n+#define __arm_vld2q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr]: __arm_vld2q_s8 (__ARM_mve_coerce(__p0, int8_t const *)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr]: __arm_vld2q_s16 (__ARM_mve_coerce(__p0, int16_t const *)), \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vld2q_s32 (__ARM_mve_coerce(__p0, int32_t const *)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr]: __arm_vld2q_u8 (__ARM_mve_coerce(__p0, uint8_t const *)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld2q_u16 (__ARM_mve_coerce(__p0, uint16_t const *)), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld2q_u32 (__ARM_mve_coerce(__p0, uint32_t const *)), \\\n+  int (*)[__ARM_mve_type_float16_t_const_ptr]: __arm_vld2q_f16 (__ARM_mve_coerce(__p0, float16_t const *)), \\\n+  int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vld2q_f32 (__ARM_mve_coerce(__p0, float32_t const *)));})\n+\n+#define vld4q(p0) __arm_vld4q(p0)\n+#define __arm_vld4q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr]: __arm_vld4q_s8 (__ARM_mve_coerce(__p0, int8_t const *)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr]: __arm_vld4q_s16 (__ARM_mve_coerce(__p0, int16_t const *)), \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vld4q_s32 (__ARM_mve_coerce(__p0, int32_t const *)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr]: __arm_vld4q_u8 (__ARM_mve_coerce(__p0, uint8_t const *)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld4q_u16 (__ARM_mve_coerce(__p0, uint16_t const *)), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld4q_u32 (__ARM_mve_coerce(__p0, uint32_t const *)), \\\n+  int (*)[__ARM_mve_type_float16_t_const_ptr]: __arm_vld4q_f16 (__ARM_mve_coerce(__p0, float16_t const *)), \\\n+  int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vld4q_f32 (__ARM_mve_coerce(__p0, float32_t const *)));})\n+\n #define vldrhq_gather_offset(p0,p1) __arm_vldrhq_gather_offset(p0,p1)\n #define __arm_vldrhq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -21979,6 +22383,32 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1, p2), \\\n   int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vldrwq_gather_shifted_offset_z_f32 (__ARM_mve_coerce(__p0, float32_t const *), p1, p2));})\n \n+#define vst1q_p(p0,p1,p2) __arm_vst1q_p(p0,p1,p2)\n+#define __arm_vst1q_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16_t]: __arm_vst1q_p_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vst1q_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vst1q_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16_t]: __arm_vst1q_p_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vst1q_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vst1q_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_float16x8_t]: __arm_vst1q_p_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vst1q_p_f32 (__ARM_mve_coerce(__p0, float32_t *), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+\n+#define vst2q(p0,p1) __arm_vst2q(p0,p1)\n+#define __arm_vst2q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16x2_t]: __arm_vst2q_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16x2_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8x2_t]: __arm_vst2q_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8x2_t)), \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4x2_t]: __arm_vst2q_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16x2_t]: __arm_vst2q_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16x2_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8x2_t]: __arm_vst2q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8x2_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4x2_t]: __arm_vst2q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4x2_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_float16x8x2_t]: __arm_vst2q_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, float16x8x2_t)), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4x2_t]: __arm_vst2q_f32 (__ARM_mve_coerce(__p0, float32_t *), __ARM_mve_coerce(__p1, float32x4x2_t)));})\n+\n #define vst1q(p0,p1) __arm_vst1q(p0,p1)\n #define __arm_vst1q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -24849,6 +25279,28 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vst1q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vst1q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n \n+#define vst1q_p(p0,p1,p2) __arm_vst1q_p(p0,p1,p2)\n+#define __arm_vst1q_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16_t]: __arm_vst1q_p_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vst1q_p_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vst1q_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16_t]: __arm_vst1q_p_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vst1q_p_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vst1q_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vst2q(p0,p1) __arm_vst2q(p0,p1)\n+#define __arm_vst2q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16x2_t]: __arm_vst2q_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16x2_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8x2_t]: __arm_vst2q_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8x2_t)), \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4x2_t]: __arm_vst2q_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16x2_t]: __arm_vst2q_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16x2_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8x2_t]: __arm_vst2q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8x2_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4x2_t]: __arm_vst2q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4x2_t)));})\n+\n #define vstrhq(p0,p1) __arm_vstrhq(p0,p1)\n #define __arm_vstrhq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -25403,6 +25855,36 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t]: __arm_vbrsrq_x_n_u16 (__ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n   int (*)[__ARM_mve_type_uint32x4_t]: __arm_vbrsrq_x_n_u32 (__ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n \n+#define vld1q_z(p0,p1) __arm_vld1q_z(p0, p1)\n+#define __arm_vld1q_z(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr]: __arm_vld1q_z_s8 (__ARM_mve_coerce(__p0, int8_t const *), p1), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr]: __arm_vld1q_z_s16 (__ARM_mve_coerce(__p0, int16_t const *), p1), \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vld1q_z_s32 (__ARM_mve_coerce(__p0, int32_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr]: __arm_vld1q_z_u8 (__ARM_mve_coerce(__p0, uint8_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld1q_z_u16 (__ARM_mve_coerce(__p0, uint16_t const *), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld1q_z_u32 (__ARM_mve_coerce(__p0, uint32_t const *), p1));})\n+\n+#define vld2q(p0) __arm_vld2q(p0)\n+#define __arm_vld2q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr]: __arm_vld2q_s8 (__ARM_mve_coerce(__p0, int8_t const *)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr]: __arm_vld2q_s16 (__ARM_mve_coerce(__p0, int16_t const *)), \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vld2q_s32 (__ARM_mve_coerce(__p0, int32_t const *)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr]: __arm_vld2q_u8 (__ARM_mve_coerce(__p0, uint8_t const *)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld2q_u16 (__ARM_mve_coerce(__p0, uint16_t const *)), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld2q_u32 (__ARM_mve_coerce(__p0, uint32_t const *)));})\n+\n+#define vld4q(p0) __arm_vld4q(p0)\n+#define __arm_vld4q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr]: __arm_vld4q_s8 (__ARM_mve_coerce(__p0, int8_t const *)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr]: __arm_vld4q_s16 (__ARM_mve_coerce(__p0, int16_t const *)), \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vld4q_s32 (__ARM_mve_coerce(__p0, int32_t const *)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr]: __arm_vld4q_u8 (__ARM_mve_coerce(__p0, uint8_t const *)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld4q_u16 (__ARM_mve_coerce(__p0, uint16_t const *)), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld4q_u32 (__ARM_mve_coerce(__p0, uint32_t const *)));})\n+\n #endif /* MVE Integer.  */\n \n #define vmvnq_x(p1,p2) __arm_vmvnq_x(p1,p2)"}, {"sha": "a60650cb7b1fe4e52ab1c7bf3c1215ff083a106f", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -873,3 +873,6 @@ VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vsbciq_m_s, v4si)\n VAR1 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vsbciq_m_u, v4si)\n VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vsbcq_m_s, v4si)\n VAR1 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vsbcq_m_u, v4si)\n+VAR5 (STORE1, vst2q, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR5 (LOAD1, vld4q, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR5 (LOAD1, vld2q, v16qi, v8hi, v4si, v8hf, v4sf)"}, {"sha": "2e28d9d8408127dd52b9d16c772e7f27a47d390a", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -214,7 +214,7 @@\n \t\t\t VLDRDQGBWB_S VLDRDQGBWB_U VADCQ_U VADCQ_M_U VADCQ_S\n \t\t\t VADCQ_M_S VSBCIQ_U VSBCIQ_S VSBCIQ_M_U VSBCIQ_M_S\n \t\t\t VSBCQ_U VSBCQ_S VSBCQ_M_U VSBCQ_M_S VADCIQ_U VADCIQ_M_U\n-\t\t\t VADCIQ_S VADCIQ_M_S])\n+\t\t\t VADCIQ_S VADCIQ_M_S VLD2Q VLD4Q VST2Q])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -10797,3 +10797,91 @@\n   \"vsbc.i32\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vst2q])\n+;;\n+(define_insn \"mve_vst2q<mode>\"\n+  [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n+\t(unspec:OI [(match_operand:OI 1 \"s_register_operand\" \"w\")\n+\t\t    (unspec:MVE_VLD_ST [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t VST2Q))\n+  ]\n+  \"(TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+   || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode))\"\n+{\n+   rtx ops[4];\n+   int regno = REGNO (operands[1]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1] = gen_rtx_REG (TImode, regno + 4);\n+   rtx reg  = operands[0];\n+   while (reg && !REG_P (reg))\n+    reg = XEXP (reg, 0);\n+   gcc_assert (REG_P (reg));\n+   ops[2] = reg;\n+   ops[3] = operands[0];\n+   output_asm_insn (\"vst20.<V_sz_elem>\\t{%q0, %q1}, [%2]\\n\\t\"\n+\t\t    \"vst21.<V_sz_elem>\\t{%q0, %q1}, %3\", ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vld2q])\n+;;\n+(define_insn \"mve_vld2q<mode>\"\n+  [(set (match_operand:OI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:OI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n+\t\t    (unspec:MVE_VLD_ST [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t VLD2Q))\n+  ]\n+  \"(TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+   || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode))\"\n+{\n+   rtx ops[4];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1] = gen_rtx_REG (TImode, regno + 4);\n+   rtx reg  = operands[1];\n+   while (reg && !REG_P (reg))\n+    reg = XEXP (reg, 0);\n+   gcc_assert (REG_P (reg));\n+   ops[2] = reg;\n+   ops[3] = operands[1];\n+   output_asm_insn (\"vld20.<V_sz_elem>\\t{%q0, %q1}, [%2]\\n\\t\"\n+\t\t    \"vld21.<V_sz_elem>\\t{%q0, %q1}, %3\", ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vld4q])\n+;;\n+(define_insn \"mve_vld4q<mode>\"\n+  [(set (match_operand:XI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:XI [(match_operand:XI 1 \"neon_struct_operand\" \"Um\")\n+\t\t    (unspec:MVE_VLD_ST [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t VLD4Q))\n+  ]\n+  \"(TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+   || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode))\"\n+{\n+   rtx ops[6];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1] = gen_rtx_REG (TImode, regno+4);\n+   ops[2] = gen_rtx_REG (TImode, regno+8);\n+   ops[3] = gen_rtx_REG (TImode, regno + 12);\n+   rtx reg  = operands[1];\n+   while (reg && !REG_P (reg))\n+    reg = XEXP (reg, 0);\n+   gcc_assert (REG_P (reg));\n+   ops[4] = reg;\n+   ops[5] = operands[1];\n+   output_asm_insn (\"vld40.<V_sz_elem>\\t{%q0, %q1, %q2, %q3}, [%4]\\n\\t\"\n+\t\t    \"vld41.<V_sz_elem>\\t{%q0, %q1, %q2, %q3}, [%4]\\n\\t\"\n+\t\t    \"vld42.<V_sz_elem>\\t{%q0, %q1, %q2, %q3}, [%4]\\n\\t\"\n+\t\t    \"vld43.<V_sz_elem>\\t{%q0, %q1, %q2, %q3}, %5\", ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"16\")])"}, {"sha": "c9fff884146bb2fd1dbe91c979fad1b206c2fbc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -1,3 +1,48 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vld1q_z_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_z_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_z_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_z_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_z_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld4q_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld4q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld4q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld4q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld4q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld4q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld4q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld4q_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst1q_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst2q_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst2q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst2q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst2q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst2q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst2q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst2q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst2q_u8.c: Likewise.\n+\n 2020-03-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/94072"}, {"sha": "830d817d14353645c4b647069cc37cb61b28d6c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z_f16 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */"}, {"sha": "84f976a6605949cf4ce565dfb426ea9e57d775db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z_f32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.f32\"  }  } */"}, {"sha": "8bb7ef34d69ed9827d0d3a2576457883ed6be30b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z_s16 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.s16\"  }  } */"}, {"sha": "f5d7cc0396f0dbb55b463b4919cb4ad84ce01f6d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z_s32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.s32\"  }  } */"}, {"sha": "a3999e680277ce3e0e00e5e4a826df9a31dfa714", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z_s8 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.s8\"  }  } */"}, {"sha": "ada9c2ff1aacae47811d8b12b6f70f2085722bdf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z_u16 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */"}, {"sha": "c96be7b76c2b6158e36a7bba0e41b0bb94363050", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z_u32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}, {"sha": "faca38dd99584b05e8d9c3d3bdb376e6cd0ecadf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z_u8 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8_t const * base, mve_pred16_t p)\n+{\n+  return vld1q_z (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */"}, {"sha": "cb2bc6f9c4dda8777ea91171e3aa178a9c5528ed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8x2_t\n+foo (float16_t const * addr)\n+{\n+  return vld2q_f16 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld21.16\"  }  } */\n+\n+float16x8x2_t\n+foo1 (float16_t const * addr)\n+{\n+  return vld2q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.16\"  }  } */"}, {"sha": "f701d3d4cbcd992dda9abadfbcc7e222eb7a6fad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4x2_t\n+foo (float32_t const * addr)\n+{\n+  return vld2q_f32 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld21.32\"  }  } */\n+\n+float32x4x2_t\n+foo1 (float32_t const * addr)\n+{\n+  return vld2q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.32\"  }  } */"}, {"sha": "85e844cea441ea08b47d8ffba59aa2a8c59a7b2a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8x2_t\n+foo (int16_t const * addr)\n+{\n+  return vld2q_s16 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld21.16\"  }  } */\n+\n+int16x8x2_t\n+foo1 (int16_t const * addr)\n+{\n+  return vld2q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.16\"  }  } */"}, {"sha": "f46a9d17fe987de4174f6464a79db6598094166e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4x2_t\n+foo (int32_t const * addr)\n+{\n+  return vld2q_s32 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld21.32\"  }  } */\n+\n+int32x4x2_t\n+foo1 (int32_t const * addr)\n+{\n+  return vld2q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.32\"  }  } */"}, {"sha": "29dc2885f1231bb82619380d70a9d51164494642", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16x2_t\n+foo (int8_t const * addr)\n+{\n+  return vld2q_s8 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.8\"  }  } */\n+/* { dg-final { scan-assembler \"vld21.8\"  }  } */\n+\n+int8x16x2_t\n+foo1 (int8_t const * addr)\n+{\n+  return vld2q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.8\"  }  } */"}, {"sha": "7d867b5b7a4ac980c132c438f6b2d810c938d502", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8x2_t\n+foo (uint16_t const * addr)\n+{\n+  return vld2q_u16 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld21.16\"  }  } */\n+\n+uint16x8x2_t\n+foo1 (uint16_t const * addr)\n+{\n+  return vld2q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.16\"  }  } */"}, {"sha": "6c9d12e9cd8e0061f75e24ef6a4d822a4c394a66", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4x2_t\n+foo (uint32_t const * addr)\n+{\n+  return vld2q_u32 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld21.32\"  }  } */\n+\n+uint32x4x2_t\n+foo1 (uint32_t const * addr)\n+{\n+  return vld2q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.32\"  }  } */"}, {"sha": "002a645342748373fa010b5d6e89d40ad5aa192a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16x2_t\n+foo (uint8_t const * addr)\n+{\n+  return vld2q_u8 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.8\"  }  } */\n+/* { dg-final { scan-assembler \"vld21.8\"  }  } */\n+\n+uint8x16x2_t\n+foo1 (uint8_t const * addr)\n+{\n+  return vld2q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld20.8\"  }  } */"}, {"sha": "386b71b35258eab2031d62d49cb5578f22e0557b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld4q_f16.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_f16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8x4_t\n+foo (float16_t const * addr)\n+{\n+  return vld4q_f16 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld43.16\"  }  } */\n+\n+float16x8x4_t\n+foo1 (float16_t const * addr)\n+{\n+  return vld4q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.16\"  }  } */"}, {"sha": "c38bb54a4ca11689a1f7754707561b3e4eee0426", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld4q_f32.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_f32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4x4_t\n+foo (float32_t const * addr)\n+{\n+  return vld4q_f32 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld43.32\"  }  } */\n+\n+float32x4x4_t\n+foo1 (float32_t const * addr)\n+{\n+  return vld4q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.32\"  }  } */"}, {"sha": "68e6b98fec298cf07c4d0b97bbe063ea34c4c8ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld4q_s16.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8x4_t\n+foo (int16_t const * addr)\n+{\n+  return vld4q_s16 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld43.16\"  }  } */\n+\n+int16x8x4_t\n+foo1 (int16_t const * addr)\n+{\n+  return vld4q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.16\"  }  } */"}, {"sha": "db0ba20bfb193b2cf2d59f940bb1595799cc428e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld4q_s32.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4x4_t\n+foo (int32_t const * addr)\n+{\n+  return vld4q_s32 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld43.32\"  }  } */\n+\n+int32x4x4_t\n+foo1 (int32_t const * addr)\n+{\n+  return vld4q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.32\"  }  } */"}, {"sha": "e38bdeab87bd19eaf0e933c7551a84130e3afd97", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld4q_s8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_s8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16x4_t\n+foo (int8_t const * addr)\n+{\n+  return vld4q_s8 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.8\"  }  } */\n+/* { dg-final { scan-assembler \"vld41.8\"  }  } */\n+/* { dg-final { scan-assembler \"vld42.8\"  }  } */\n+/* { dg-final { scan-assembler \"vld43.8\"  }  } */\n+\n+int8x16x4_t\n+foo1 (int8_t const * addr)\n+{\n+  return vld4q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.8\"  }  } */"}, {"sha": "7f6a7838fc0889db889e800b2380287908f5d8b9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld4q_u16.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8x4_t\n+foo (uint16_t const * addr)\n+{\n+  return vld4q_u16 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vld43.16\"  }  } */\n+\n+uint16x8x4_t\n+foo1 (uint16_t const * addr)\n+{\n+  return vld4q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.16\"  }  } */"}, {"sha": "29af573735335d1d86141daf259d622a6e84f338", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld4q_u32.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4x4_t\n+foo (uint32_t const * addr)\n+{\n+  return vld4q_u32 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vld43.32\"  }  } */\n+\n+uint32x4x4_t\n+foo1 (uint32_t const * addr)\n+{\n+  return vld4q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.32\"  }  } */"}, {"sha": "f54036229c60ab55cafd4fc5eae5d584b3e50a6c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld4q_u8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld4q_u8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16x4_t\n+foo (uint8_t const * addr)\n+{\n+  return vld4q_u8 (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.8\"  }  } */\n+/* { dg-final { scan-assembler \"vld41.8\"  }  } */\n+/* { dg-final { scan-assembler \"vld42.8\"  }  } */\n+/* { dg-final { scan-assembler \"vld43.8\"  }  } */\n+\n+uint8x16x4_t\n+foo1 (uint8_t const * addr)\n+{\n+  return vld4q (addr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld40.8\"  }  } */"}, {"sha": "7ef5ccee663c609c2d8f5ceecca3e115f697d955", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_p_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_f16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * addr, float16x8_t value, mve_pred16_t p)\n+{\n+  vst1q_p_f16 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (float16_t * addr, float16x8_t value, mve_pred16_t p)\n+{\n+  vst1q_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "2cd7221985a663703e5a4c2a3ae266079b68c007", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_f32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * addr, float32x4_t value, mve_pred16_t p)\n+{\n+  vst1q_p_f32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (float32_t * addr, float32x4_t value, mve_pred16_t p)\n+{\n+  vst1q_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "ca56f7384aca4898542851706cfed60255c281e1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * addr, int16x8_t value, mve_pred16_t p)\n+{\n+  vst1q_p_s16 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (int16_t * addr, int16x8_t value, mve_pred16_t p)\n+{\n+  vst1q_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "782496f458967f3f0489350a91701ca0e4a943e8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vst1q_p_s32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (int32_t * addr, int32x4_t value, mve_pred16_t p)\n+{\n+  vst1q_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "92bbc0a239a0a3dcc92f06655a8dfe43f11d603c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_s8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int8x16_t value, mve_pred16_t p)\n+{\n+  vst1q_p_s8 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int8x16_t value, mve_pred16_t p)\n+{\n+  vst1q_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */"}, {"sha": "12c50f7b137a49e7f1f78df612830e7dfeb4ffbd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * addr, uint16x8_t value, mve_pred16_t p)\n+{\n+  vst1q_p_u16 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * addr, uint16x8_t value, mve_pred16_t p)\n+{\n+  vst1q_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrht.16\"  }  } */"}, {"sha": "2f7ef61aaaef135644c611c3efb2e3fadd0c38a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vst1q_p_u32 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * addr, uint32x4_t value, mve_pred16_t p)\n+{\n+  vst1q_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrwt.32\"  }  } */"}, {"sha": "56fde60c54b380e89a62ac013e828298b788a288", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst1q_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst1q_p_u8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint8x16_t value, mve_pred16_t p)\n+{\n+  vst1q_p_u8 (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint8x16_t value, mve_pred16_t p)\n+{\n+  vst1q_p (addr, value, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrbt.8\"  }  } */"}, {"sha": "79e1b5c035526dcf70a7c165817198869ee4060d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst2q_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_f16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * addr, float16x8x2_t value)\n+{\n+  vst2q_f16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst21.16\"  }  } */\n+\n+void\n+foo1 (float16_t * addr, float16x8x2_t value)\n+{\n+  vst2q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.16\"  }  } */"}, {"sha": "7d256aacd33d1d7dbc4c47c7612499eb427cf27f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst2q_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_f32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * addr, float32x4x2_t value)\n+{\n+  vst2q_f32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst21.32\"  }  } */\n+\n+void\n+foo1 (float32_t * addr, float32x4x2_t value)\n+{\n+  vst2q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.32\"  }  } */"}, {"sha": "f2fd867b877a4b129a33e83d5b102be627449bd5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst2q_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * addr, int16x8x2_t value)\n+{\n+  vst2q_s16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst21.16\"  }  } */\n+\n+void\n+foo1 (int16_t * addr, int16x8x2_t value)\n+{\n+  vst2q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.16\"  }  } */"}, {"sha": "85e36df48a339b4a658c56b1e0a156f89fd0a2b2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst2q_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * addr, int32x4x2_t value)\n+{\n+  vst2q_s32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst21.32\"  }  } */\n+\n+void\n+foo1 (int32_t * addr, int32x4x2_t value)\n+{\n+  vst2q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.32\"  }  } */"}, {"sha": "57e9efc44f16cb4db6317d17bf38edd06e0ea78a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst2q_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_s8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int8x16x2_t value)\n+{\n+  vst2q_s8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst21.8\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int8x16x2_t value)\n+{\n+  vst2q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.8\"  }  } */"}, {"sha": "b54c79157b20bde98cb505fa4291049560676ed0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst2q_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u16.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * addr, uint16x8x2_t value)\n+{\n+  vst2q_u16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst21.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * addr, uint16x8x2_t value)\n+{\n+  vst2q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.16\"  }  } */"}, {"sha": "167f8bdb14e418e888a58ab0ca157abac1484549", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst2q_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u32.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * addr, uint32x4x2_t value)\n+{\n+  vst2q_u32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst21.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * addr, uint32x4x2_t value)\n+{\n+  vst2q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.32\"  }  } */"}, {"sha": "9f7a5f1a7c00fc6a17e46935ca0b174cbfca8979", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst2q_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfcc3b541c52174e0d7d7f30e7e092d02000a7f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst2q_u8.c?ref=1dfcc3b541c52174e0d7d7f30e7e092d02000a7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint8x16x2_t value)\n+{\n+  vst2q_u8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst21.8\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint8x16x2_t value)\n+{\n+  vst2q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst20.8\"  }  } */"}]}