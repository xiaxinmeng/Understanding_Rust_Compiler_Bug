{"sha": "dd64aaafe6916ac11ccae3182b4550c8b8f5e066", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2NGFhYWZlNjkxNmFjMTFjY2FlMzE4MmI0NTUwYzhiOGY1ZTA2Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-03-29T18:09:35Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-03-29T18:09:35Z"}, "message": "Fix typo in merge_call_lhs_flags\n\ngcc/ChangeLog:\n\n2021-03-29  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* ipa-modref.c (merge_call_lhs_flags): Correct handling of deref.\n\t(analyze_ssa_name_flags): Fix typo in comment.\n\ngcc/testsuite/ChangeLog:\n\n2021-03-29  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* gcc.c-torture/compile/pr99751.c: New test.", "tree": {"sha": "e497f10aca4e34cdb0b3911e39dcc5fb0de1a00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e497f10aca4e34cdb0b3911e39dcc5fb0de1a00e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd64aaafe6916ac11ccae3182b4550c8b8f5e066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd64aaafe6916ac11ccae3182b4550c8b8f5e066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd64aaafe6916ac11ccae3182b4550c8b8f5e066", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd64aaafe6916ac11ccae3182b4550c8b8f5e066/comments", "author": null, "committer": null, "parents": [{"sha": "864caa158f6db6b653c6a88ff32ce5ce0b4660a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864caa158f6db6b653c6a88ff32ce5ce0b4660a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864caa158f6db6b653c6a88ff32ce5ce0b4660a8"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "5f33bb5b4104947ed420864cf76635411e25c9b5", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd64aaafe6916ac11ccae3182b4550c8b8f5e066/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd64aaafe6916ac11ccae3182b4550c8b8f5e066/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=dd64aaafe6916ac11ccae3182b4550c8b8f5e066", "patch": "@@ -1545,9 +1545,9 @@ merge_call_lhs_flags (gcall *call, int arg, int index, bool deref,\n       tree lhs = gimple_call_lhs (call);\n       analyze_ssa_name_flags (lhs, lattice, depth + 1, ipa);\n       if (deref)\n-\tlattice[index].merge (lattice[SSA_NAME_VERSION (lhs)]);\n-      else\n \tlattice[index].merge_deref (lattice[SSA_NAME_VERSION (lhs)], false);\n+      else\n+\tlattice[index].merge (lattice[SSA_NAME_VERSION (lhs)]);\n     }\n   /* In the case of memory store we can do nothing.  */\n   else\n@@ -1621,7 +1621,7 @@ analyze_ssa_name_flags (tree name, vec<modref_lattice> &lattice, int depth,\n       else if (gcall *call = dyn_cast <gcall *> (use_stmt))\n \t{\n \t  tree callee = gimple_call_fndecl (call);\n-\t  /* Return slot optiomization would require bit of propagation;\n+\t  /* Return slot optimization would require bit of propagation;\n \t     give up for now.  */\n \t  if (gimple_call_return_slot_opt_p (call)\n \t      && gimple_call_lhs (call) != NULL_TREE"}, {"sha": "f1d5101c359ad5a830d4ca9819cf8b7c2e98ce07", "filename": "gcc/testsuite/gcc.c-torture/compile/pr99751.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd64aaafe6916ac11ccae3182b4550c8b8f5e066/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99751.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd64aaafe6916ac11ccae3182b4550c8b8f5e066/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99751.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99751.c?ref=dd64aaafe6916ac11ccae3182b4550c8b8f5e066", "patch": "@@ -0,0 +1,20 @@\n+int *ptr1 = 0, **ptr2 = &ptr1;\n+\n+int *identity(int *p)\n+{\n+  return p;\n+}\n+\n+void store_to_c(int *p)\n+{\n+  *ptr2 = identity(p);\n+}\n+\n+int main()\n+{\n+  int f;\n+  store_to_c(&f);\n+  if (ptr1 != &f)\n+    __builtin_abort();\n+  return 0;\n+}"}]}