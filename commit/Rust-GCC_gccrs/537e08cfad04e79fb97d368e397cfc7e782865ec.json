{"sha": "537e08cfad04e79fb97d368e397cfc7e782865ec", "node_id": "C_kwDOANBUbNoAKDUzN2UwOGNmYWQwNGU3OWZiOTdkMzY4ZTM5N2NmYzdlNzgyODY1ZWM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-29T21:45:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-13T21:18:20Z"}, "message": "c++: trivial formatting cleanups\n\nSplit out from the C++ contracts patch.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h: Fix whitespace.\n\t* parser.h: Fix whitespace.\n\t* decl.cc: Fix whitespace.\n\t* parser.cc: Fix whitespace.\n\t* pt.cc: Fix whitespace.", "tree": {"sha": "1424b5a18e6c0d07cc1f3f5e403ebf3e5800cbe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1424b5a18e6c0d07cc1f3f5e403ebf3e5800cbe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/537e08cfad04e79fb97d368e397cfc7e782865ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537e08cfad04e79fb97d368e397cfc7e782865ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537e08cfad04e79fb97d368e397cfc7e782865ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537e08cfad04e79fb97d368e397cfc7e782865ec/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99da523359e9333555585484eb3b8f854a98f1b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99da523359e9333555585484eb3b8f854a98f1b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99da523359e9333555585484eb3b8f854a98f1b4"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "1534c875693963bd78d6ea96a948dfeebda03edb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=537e08cfad04e79fb97d368e397cfc7e782865ec", "patch": "@@ -7458,7 +7458,7 @@ extern tree get_template_argument_pack_elems\t(const_tree);\n extern tree get_function_template_decl\t\t(const_tree);\n extern tree resolve_nondeduced_context\t\t(tree, tsubst_flags_t);\n extern tree resolve_nondeduced_context_or_error\t(tree, tsubst_flags_t);\n-extern hashval_t iterative_hash_template_arg (tree arg, hashval_t val);\n+extern hashval_t iterative_hash_template_arg\t(tree arg, hashval_t val);\n extern tree coerce_template_parms               (tree, tree, tree);\n extern tree coerce_template_parms               (tree, tree, tree, tsubst_flags_t);\n extern tree canonicalize_type_argument\t\t(tree, tsubst_flags_t);\n@@ -7519,7 +7519,7 @@ extern tree lookup_fnfields\t\t\t(tree, tree, int, tsubst_flags_t);\n extern tree lookup_member\t\t\t(tree, tree, int, bool,\n \t\t\t\t\t\t tsubst_flags_t,\n \t\t\t\t\t\t access_failure_info *afi = NULL);\n-extern tree lookup_member_fuzzy\t\t(tree, tree, bool);\n+extern tree lookup_member_fuzzy\t\t\t(tree, tree, bool);\n extern tree locate_field_accessor\t\t(tree, tree, bool);\n extern int look_for_overrides\t\t\t(tree, tree);\n extern void get_pure_virtuals\t\t\t(tree);"}, {"sha": "85b892cddf043fd19f490f4cd4c2ead48c1275e0", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=537e08cfad04e79fb97d368e397cfc7e782865ec", "patch": "@@ -2319,7 +2319,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t\t= DECL_DECLARED_INLINE_P (new_result);\n \t      DECL_DISREGARD_INLINE_LIMITS (old_result)\n \t        |= DECL_DISREGARD_INLINE_LIMITS (new_result);\n-\n \t    }\n \t  else\n \t    {\n@@ -10220,7 +10219,6 @@ grokfndecl (tree ctype,\n \t      return NULL_TREE;\n \t    }\n \n-\n \t  /* A friend declaration of the form friend void f<>().  Record\n \t     the information in the TEMPLATE_ID_EXPR.  */\n \t  SET_DECL_IMPLICIT_INSTANTIATION (decl);"}, {"sha": "10d303884fbacc43d7fc8d6ffa3723821b41a945", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=537e08cfad04e79fb97d368e397cfc7e782865ec", "patch": "@@ -11677,10 +11677,10 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n     declarator = make_call_declarator (declarator, param_list, quals,\n \t\t\t\t       VIRT_SPEC_UNSPECIFIED,\n-                                       REF_QUAL_NONE,\n+\t\t\t\t       REF_QUAL_NONE,\n \t\t\t\t       tx_qual,\n \t\t\t\t       exception_spec,\n-                                       return_type,\n+\t\t\t\t       return_type,\n \t\t\t\t       trailing_requires_clause,\n \t\t\t\t       UNKNOWN_LOCATION);\n     declarator->std_attributes = std_attrs;\n@@ -25410,6 +25410,7 @@ cp_parser_skip_to_closing_square_bracket (cp_parser *parser)\n \t  if (!parser->lexer->in_pragma)\n \t    break;\n \t  /* FALLTHRU */\n+\n \tcase CPP_EOF:\n \t  /* If we've run out of tokens, then there is no closing `]'.  */\n \t  return false;\n@@ -27490,6 +27491,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t\t\t\t\t\t      &decl_specifiers,\n \t\t\t\t\t\t\t      declarator,\n \t\t\t\t\t\t\t      attributes);\n+\n \t\t  if (parser->fully_implicit_function_template_p)\n \t\t    decl = finish_fully_implicit_template (parser, decl);\n \t\t  /* If the member was not a friend, declare it here.  */\n@@ -27513,6 +27515,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      else\n \t\tif (declarator->kind == cdk_function)\n \t\t  declarator->id_loc = token->location;\n+\n \t      /* Create the declaration.  */\n \t      decl = grokfield (declarator, &decl_specifiers,\n \t\t\t\tinitializer, /*init_const_expr_p=*/true,\n@@ -29107,6 +29110,7 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n       attr_id = canonicalize_attr_name (attr_id);\n       attribute = build_tree_list (build_tree_list (NULL_TREE, attr_id),\n \t\t\t\t   NULL_TREE);\n+\n       /* We used to treat C++11 noreturn attribute as equivalent to GNU's,\n \t but no longer: we have to be able to tell [[noreturn]] and\n \t __attribute__((noreturn)) apart.  */\n@@ -29437,8 +29441,7 @@ cp_parser_std_attribute_spec (cp_parser *parser)\n /* Parse a standard C++-11 attribute-specifier-seq.\n \n    attribute-specifier-seq:\n-     attribute-specifier-seq [opt] attribute-specifier\n- */\n+     attribute-specifier-seq [opt] attribute-specifier  */\n \n static tree\n cp_parser_std_attribute_spec_seq (cp_parser *parser)\n@@ -31393,6 +31396,7 @@ cp_parser_function_definition_after_declarator (cp_parser* parser,\n \n   /* Generate code for it, if necessary.  */\n   expand_or_defer_fn (fn);\n+\n   /* Restore the saved values.  */\n   parser->in_unbraced_linkage_specification_p\n     = saved_in_unbraced_linkage_specification_p;"}, {"sha": "3e95bfc131b41fba2bd72a3225c4a22584c86849", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=537e08cfad04e79fb97d368e397cfc7e782865ec", "patch": "@@ -391,7 +391,7 @@ struct GTY(()) cp_parser {\n   /* When parsing #pragma acc routine, this is a pointer to a helper data\n      structure.  */\n   cp_oacc_routine_data * GTY((skip)) oacc_routine;\n-  \n+\n   /* Nonzero if parsing a parameter list where 'auto' should trigger an implicit\n      template parameter.  */\n   bool auto_is_implicit_function_template_parm_p;"}, {"sha": "f6800857dcf017117c1b14eab6a552ae13d63676", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537e08cfad04e79fb97d368e397cfc7e782865ec/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=537e08cfad04e79fb97d368e397cfc7e782865ec", "patch": "@@ -1581,6 +1581,7 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n \t\t there were no definition, and vice versa.  */\n \t      DECL_INITIAL (fn) = NULL_TREE;\n \t      duplicate_decls (spec, fn, /*hiding=*/is_friend);\n+\n \t      /* The call to duplicate_decls will have applied\n \t\t [temp.expl.spec]:\n \n@@ -12185,6 +12186,7 @@ instantiate_class_template (tree type)\n \t      r = tsubst (t, args, tf_error, NULL_TREE);\n \t      if (TREE_CODE (t) == TEMPLATE_DECL)\n \t\t--processing_template_decl;\n+\n \t      set_current_access_from_decl (r);\n \t      finish_member_declaration (r);\n \t      /* Instantiate members marked with attribute used.  */\n@@ -17020,7 +17022,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  /* This can happen for a parameter name used later in a function\n \t     declaration (such as in a late-specified return type).  Just\n \t     make a dummy decl, since it's only used for its type.  */\n-\t  gcc_assert (cp_unevaluated_operand != 0);\n+\t  gcc_assert (cp_unevaluated_operand);\n \t  r = tsubst_decl (t, args, complain);\n \t  /* Give it the template pattern as its context; its true context\n \t     hasn't been instantiated yet and this is good enough for\n@@ -21918,6 +21920,7 @@ instantiate_template (tree tmpl, tree orig_args, tsubst_flags_t complain)\n \t}\n       return error_mark_node;\n     }\n+\n   return fndecl;\n }\n \n@@ -26183,12 +26186,9 @@ regenerate_decl_from_template (tree decl, tree tmpl, tree args)\n {\n   /* The arguments used to instantiate DECL, from the most general\n      template.  */\n-  tree code_pattern;\n-\n-  code_pattern = DECL_TEMPLATE_RESULT (tmpl);\n+  tree code_pattern = DECL_TEMPLATE_RESULT (tmpl);\n \n-  /* Make sure that we can see identifiers, and compute access\n-     correctly.  */\n+  /* Make sure that we can see identifiers, and compute access correctly.  */\n   push_access_scope (decl);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)"}]}