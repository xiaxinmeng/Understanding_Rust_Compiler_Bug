{"sha": "280d2838c112f02cb24dd34a69edf112e84cfe12", "node_id": "C_kwDOANBUbNoAKDI4MGQyODM4YzExMmYwMmNiMjRkZDM0YTY5ZWRmMTEyZTg0Y2ZlMTI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-18T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-18T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "77fcc5baffe1d34af5c14e4d905b75edae77f153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77fcc5baffe1d34af5c14e4d905b75edae77f153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/280d2838c112f02cb24dd34a69edf112e84cfe12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280d2838c112f02cb24dd34a69edf112e84cfe12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280d2838c112f02cb24dd34a69edf112e84cfe12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280d2838c112f02cb24dd34a69edf112e84cfe12/comments", "author": null, "committer": null, "parents": [{"sha": "32221357007666124409ec3ee0d3a1cf263ebc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32221357007666124409ec3ee0d3a1cf263ebc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32221357007666124409ec3ee0d3a1cf263ebc9e"}], "stats": {"total": 442, "additions": 441, "deletions": 1}, "files": [{"sha": "5e5a720f0715e18c9fd5a6dc759d975a191b2937", "filename": "gcc/ChangeLog", "status": "modified", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=280d2838c112f02cb24dd34a69edf112e84cfe12", "patch": "@@ -1,3 +1,169 @@\n+2021-11-17  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103228\n+\tPR tree-optimization/55177\n+\t* match.pd ((type) X bitop CST): Also do this\n+\ttransformation for nop conversions.\n+\n+2021-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/102759\n+\t* gimple-array-bounds.cc (build_printable_array_type): Move...\n+\t* gimple-ssa-warn-access.cc (build_printable_array_type): Avoid\n+\tpathological function redeclarations that remove a previously\n+\tdeclared prototype.\n+\tImprove formatting of function arguments in informational notes.\n+\t* pointer-query.cc (build_printable_array_type): ...to here.\n+\t* pointer-query.h (build_printable_array_type): Declared.\n+\n+2021-11-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/102952\n+\t* config/i386/i386-opts.h (harden_sls): New enum.\n+\t* config/i386/i386.c (output_indirect_thunk): Mitigate against\n+\tSLS for function return.\n+\t(ix86_output_function_return): Likewise.\n+\t(ix86_output_jmp_thunk_or_indirect): Mitigate against indirect\n+\tbranch.\n+\t(ix86_output_indirect_jmp): Likewise.\n+\t(ix86_output_call_insn): Likewise.\n+\t* config/i386/i386.opt: Add -mharden-sls=.\n+\t* doc/invoke.texi: Document -mharden-sls=.\n+\n+2021-11-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/103307\n+\t* config/i386/i386.c (ix86_code_end): Remove \"%!\" before ret.\n+\t(ix86_output_function_return): Likewise.\n+\t* config/i386/i386.md (simple_return_pop_internal): Likewise.\n+\n+2021-11-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103246\n+\t* ipa-modref.c (read_modref_records): Fix streaminig in of every_access\n+\tflag.\n+\n+2021-11-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (indirect_thunks_used): Redefine as HARD_REG_SET.\n+\t(ix86_code_end): Use TEST_HARD_REG_BIT on indirect_thunks_used.\n+\t(ix86_output_indirect_branch_via_reg): Use SET_HARD_REG_BIT\n+\ton indirect_thunks_used.\n+\t(ix86_output_indirect_function_return): Ditto.\n+\n+2021-11-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.c: Include cgraph.h and tree-streamer.h.\n+\t(modref_access_node::stream_out): New member function.\n+\t(modref_access_node::stream_in): New member function.\n+\t* ipa-modref-tree.h (modref_access_node::stream_out,\n+\tmodref_access_node::stream_in): Declare.\n+\t* ipa-modref.c (modref_summary_lto::useful_p): Free useless kills.\n+\t(modref_summary_lto::dump): Dump kills.\n+\t(analyze_store): Record kills for LTO\n+\t(analyze_stmt): Likewise.\n+\t(modref_summaries_lto::duplicate): Duplicate kills.\n+\t(write_modref_records): Use new stream_out member function.\n+\t(read_modref_records): Likewise.\n+\t(modref_write): Stream out kills.\n+\t(read_section): Stream in kills\n+\t(remap_kills): New function.\n+\t(update_signature): Use it.\n+\n+2021-11-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (LEGACY_SSE_REGNO_P): New predicate.\n+\t(SSE_REGNO_P): Use LEGACY_SSE_REGNO_P predicate.\n+\t* config/i386/i386.c (zero_all_vector_registers):\n+\tUse LEGACY_SSE_REGNO_P predicate.\n+\t(ix86_register_priority): Use REX_INT_REGNO_P, REX_SSE_REGNO_P\n+\tand EXT_REG_SSE_REGNO_P predicates.\n+\t(ix86_hard_regno_call_part_clobbered): Use REX_SSE_REGNO_P\n+\tand LEGACY_SSE_REGNO_P predicates.\n+\n+2021-11-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* doc/invoke.texi (C++ Dialect Options): Document\n+\t-fimplicit-constexpr.\n+\n+2021-11-17  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-modes.def (VECTOR_MODE): New V8DI mode.\n+\t* config/aarch64/aarch64.c (aarch64_hard_regno_mode_ok): Handle\n+\tV8DImode.\n+\t* config/aarch64/iterators.md (define_mode_attr nunits): Add entry\n+\tfor V8DI.\n+\n+2021-11-17  Martin Uecker  <uecker@gcc.gnu.org>\n+\n+\tPR c/91038\n+\tPR c/29970\n+\t* gimplify.c (gimplify_var_or_parm_decl): Update comment.\n+\t(gimplify_compound_lval): Gimplify base expression first.\n+\t(gimplify_target_expr): Add comment.\n+\n+2021-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103192\n+\t* tree-ssa-loop-im.c (move_computations_worker): Use\n+\treset_flow_sensitive_info instead of manually clearing\n+\tSSA_NAME_RANGE_INFO and do it for all SSA_NAMEs, not just ones\n+\twith integral types.\n+\n+2021-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103255\n+\t* gimple-range-fold.cc (fold_using_range::range_of_address): Return\n+\trange_nonzero rather than unadjusted base's range.  Formatting fixes.\n+\n+2021-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/md.texi (cond_fmin@var{mode}, cond_fmax@var{mode}): Document.\n+\t* optabs.def (cond_fmin_optab, cond_fmax_optab): New optabs.\n+\t* internal-fn.def (COND_FMIN, COND_FMAX): New functions.\n+\t* internal-fn.c (first_commutative_argument): Handle them.\n+\t(FOR_EACH_COND_FN_PAIR): Likewise.\n+\t* match.pd (UNCOND_BINARY, COND_BINARY): Likewise.\n+\t* config/aarch64/aarch64-sve.md (cond_<fmaxmin><mode>): New\n+\tpattern.\n+\n+2021-11-17  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/i386/i386.md (*add<dwi>3_doubleword, *addv<dwi>4_doubleword,\n+\t*addv<dwi>4_doubleword_1, *sub<dwi>3_doubleword,\n+\t*subv<dwi>4_doubleword, *subv<dwi>4_doubleword_1,\n+\t*add<dwi>3_doubleword_cc_overflow_1, *divmodsi4_const,\n+\t*neg<dwi>2_doubleword, *tls_dynamic_gnu2_combine_64_<mode>): Fix split\n+\tcondition.\n+\n+2021-11-17  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103288\n+\t* tree-ssa-phiopt.c (value_replacement): Return early if middle\n+\tblock has more than one pred.\n+\n+2021-11-17  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/visium/visium.md (*add<mode>3_insn, *addsi3_insn, *addi3_insn,\n+\t*sub<mode>3_insn, *subsi3_insn, *subdi3_insn, *neg<mode>2_insn,\n+\t*negdi2_insn, *and<mode>3_insn, *ior<mode>3_insn, *xor<mode>3_insn,\n+\t*one_cmpl<mode>2_insn, *ashl<mode>3_insn, *ashr<mode>3_insn,\n+\t*lshr<mode>3_insn, *trunchiqi2_insn, *truncsihi2_insn,\n+\t*truncdisi2_insn, *extendqihi2_insn, *extendqisi2_insn,\n+\t*extendhisi2_insn, *extendsidi2_insn, *zero_extendqihi2_insn,\n+\t*zero_extendqisi2_insn, *zero_extendsidi2_insn): Fix split condition.\n+\n+2021-11-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/103026\n+\t* doc/invoke.texi: Document -Wbidi-chars.\n+\n+2021-11-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103246\n+\t* ipa-modref.c (ipa_merge_modref_summary_after_inlining): Fix clearing\n+\tof to_info_lto\n+\n 2021-11-16  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-modref.c (get_modref_function_summary): Declare."}, {"sha": "15171a257387e6a14b443ea4f402c4f82a2cb07a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=280d2838c112f02cb24dd34a69edf112e84cfe12", "patch": "@@ -1 +1 @@\n-20211117\n+20211118"}, {"sha": "d9fc37ccc546e4067bd247e10d8440924bbd2248", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=280d2838c112f02cb24dd34a69edf112e84cfe12", "patch": "@@ -1,3 +1,20 @@\n+2021-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102695\n+\t* region-model-impl-calls.cc (region_model::impl_call_strchr): New.\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_unaryop): Simplify cast to\n+\tpointer type of an existing pointer to a region.\n+\t* region-model.cc (region_model::on_call_pre): Handle\n+\tBUILT_IN_STRCHR and \"strchr\".\n+\t(write_to_const_diagnostic::emit): Add auto_diagnostic_group.  Add\n+\talternate wordings for functions and labels.\n+\t(write_to_const_diagnostic::describe_final_event): Add alternate\n+\twordings for functions and labels.\n+\t(region_model::check_for_writable_region): Handle RK_FUNCTION and\n+\tRK_LABEL.\n+\t* region-model.h (region_model::impl_call_strchr): New decl.\n+\n 2021-11-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/102662"}, {"sha": "21f153e87e6c1b3179b21b99d2d3a9b2145880cb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=280d2838c112f02cb24dd34a69edf112e84cfe12", "patch": "@@ -1,3 +1,16 @@\n+2021-11-17  Martin Uecker  <uecker@gcc.gnu.org>\n+\n+\tPR c/91038\n+\tPR c/29970\n+\t* c-common.c (pointer_int_sum): Make sure pointer expressions\n+\tare evaluated first when the size expression depends on for\n+\tvariably-modified types.\n+\n+2021-11-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/103026\n+\t* c.opt (Wbidi-chars, Wbidi-chars=): New option.\n+\n 2021-11-16  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (release_tree_vector): Only cache vecs smaller than"}, {"sha": "8dcd6be5fb540af1813901495b726efe5810767e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=280d2838c112f02cb24dd34a69edf112e84cfe12", "patch": "@@ -1,3 +1,9 @@\n+2021-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/101702\n+\t* c-decl.c (get_parm_array_spec): Strip casts earlier and fold array\n+\tbounds before deciding if they're constant.\n+\n 2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (OMP_TARGET_CLAUSE_MASK): Add"}, {"sha": "594cc2c66c592188dda1e83ffcbd4aaf61671cfd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280d2838c112f02cb24dd34a69edf112e84cfe12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=280d2838c112f02cb24dd34a69edf112e84cfe12", "patch": "@@ -1,3 +1,120 @@\n+2021-11-17  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103228\n+\tPR tree-optimization/55177\n+\t* gcc.dg/tree-ssa/pr103228-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr55177-1.c: New test.\n+\n+2021-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/103026\n+\t* c-c++-common/Wbidi-chars-ranges.c: New test.\n+\n+2021-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/102759\n+\t* gcc.dg/Warray-parameter-10.c: New test.\n+\t* gcc.dg/Wstringop-overflow-82.c: New test.\n+\n+2021-11-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/102952\n+\t* gcc.target/i386/harden-sls-1.c: New test.\n+\t* gcc.target/i386/harden-sls-2.c: Likewise.\n+\t* gcc.target/i386/harden-sls-3.c: Likewise.\n+\t* gcc.target/i386/harden-sls-4.c: Likewise.\n+\t* gcc.target/i386/harden-sls-5.c: Likewise.\n+\n+2021-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/101702\n+\t* gcc.dg/Warray-parameter-11.c: New test.\n+\n+2021-11-17  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.target/mips/frame-header-1.c (bar): Add noipa attribute.\n+\t* gcc.target/mips/frame-header-2.c (bar): Likewise.\n+\n+2021-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/103130\n+\t* c-c++-common/cpp/dir-only-9.c: New test.\n+\n+2021-11-17  Martin Uecker  <uecker@gcc.gnu.org>\n+\n+\tPR c/91038\n+\tPR c/29970\n+\t* gcc.dg/vla-stexp-3.c: New test.\n+\t* gcc.dg/vla-stexp-4.c: New test.\n+\t* gcc.dg/vla-stexp-5.c: New test.\n+\t* gcc.dg/vla-stexp-6.c: New test.\n+\t* gcc.dg/vla-stexp-7.c: New test.\n+\t* gcc.dg/vla-stexp-8.c: New test.\n+\t* gcc.dg/vla-stexp-9.c: New test.\n+\n+2021-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103255\n+\t* gcc.c-torture/execute/pr103255.c: New test.\n+\n+2021-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_5.c: New test.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_7_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fmaxnm_8_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_7_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_fminnm_8_run.c: Likewise.\n+\n+2021-11-17  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/103288\n+\t* gcc.c-torture/compile/pr103288-1.c: New test.\n+\n+2021-11-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/103026\n+\t* c-c++-common/Wbidi-chars-1.c: New test.\n+\t* c-c++-common/Wbidi-chars-2.c: New test.\n+\t* c-c++-common/Wbidi-chars-3.c: New test.\n+\t* c-c++-common/Wbidi-chars-4.c: New test.\n+\t* c-c++-common/Wbidi-chars-5.c: New test.\n+\t* c-c++-common/Wbidi-chars-6.c: New test.\n+\t* c-c++-common/Wbidi-chars-7.c: New test.\n+\t* c-c++-common/Wbidi-chars-8.c: New test.\n+\t* c-c++-common/Wbidi-chars-9.c: New test.\n+\t* c-c++-common/Wbidi-chars-10.c: New test.\n+\t* c-c++-common/Wbidi-chars-11.c: New test.\n+\t* c-c++-common/Wbidi-chars-12.c: New test.\n+\t* c-c++-common/Wbidi-chars-13.c: New test.\n+\t* c-c++-common/Wbidi-chars-14.c: New test.\n+\t* c-c++-common/Wbidi-chars-15.c: New test.\n+\t* c-c++-common/Wbidi-chars-16.c: New test.\n+\t* c-c++-common/Wbidi-chars-17.c: New test.\n+\n+2021-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102695\n+\t* gcc.dg/analyzer/pr102695.c: New test.\n+\t* gcc.dg/analyzer/strchr-1.c: New test.\n+\n+2021-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102779\n+\t* gcc.dg/analyzer/capacity-1.c: Add dg-require-effective-target\n+\talloca.  Use __builtin_alloca rather than alloca.\n+\t* gcc.dg/analyzer/capacity-3.c: Likewise.\n+\n 2021-11-16  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/modref-dse-4.c: New test."}, {"sha": "3bcf688c467684bc63058c6fd36f0a442810606a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280d2838c112f02cb24dd34a69edf112e84cfe12/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280d2838c112f02cb24dd34a69edf112e84cfe12/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=280d2838c112f02cb24dd34a69edf112e84cfe12", "patch": "@@ -1,3 +1,74 @@\n+2021-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/103026\n+\t* lex.c (struct bidi::context): New.\n+\t(bidi::vec): Convert to a vec of context rather than unsigned\n+\tchar.\n+\t(bidi::ctx_at): Rename to...\n+\t(bidi::pop_kind_at): ...this and reimplement for above change.\n+\t(bidi::current_ctx): Update for change to vec.\n+\t(bidi::current_ctx_ucn_p): Likewise.\n+\t(bidi::current_ctx_loc): New.\n+\t(bidi::on_char): Update for usage of context struct.  Add \"loc\"\n+\tparam and pass it when pushing contexts.\n+\t(get_location_for_byte_range_in_cur_line): New.\n+\t(get_bidi_utf8): Rename to...\n+\t(get_bidi_utf8_1): ...this, reintroducing...\n+\t(get_bidi_utf8): ...as a wrapper, setting *OUT when the result is\n+\tnot NONE.\n+\t(get_bidi_ucn): Rename to...\n+\t(get_bidi_ucn_1): ...this, reintroducing...\n+\t(get_bidi_ucn): ...as a wrapper, setting *OUT when the result is\n+\tnot NONE.\n+\t(class unpaired_bidi_rich_location): New.\n+\t(maybe_warn_bidi_on_close): Use unpaired_bidi_rich_location when\n+\treporting on unpaired bidi chars.  Split into singular vs plural\n+\tspellings.\n+\t(maybe_warn_bidi_on_char): Pass in a location_t rather than a\n+\tconst uchar * and use it when emitting warnings, and when calling\n+\tbidi::on_char.\n+\t(_cpp_skip_block_comment): Capture location when kind is not NONE\n+\tand pass it to maybe_warn_bidi_on_char.\n+\t(skip_line_comment): Likewise.\n+\t(forms_identifier_p): Likewise.\n+\t(lex_raw_string): Likewise.\n+\t(lex_string): Likewise.\n+\n+2021-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/103026\n+\t* lex.c (maybe_warn_bidi_on_close): Use a rich_location\n+\tand call set_escape_on_output (true) on it.\n+\t(maybe_warn_bidi_on_char): Likewise.\n+\n+2021-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/103130\n+\t* lex.c (cpp_directive_only_process): Treat even \\*/ as end of block\n+\tcomment.\n+\n+2021-11-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/103026\n+\t* include/cpplib.h (enum cpp_bidirectional_level): New.\n+\t(struct cpp_options): Add cpp_warn_bidirectional.\n+\t(enum cpp_warning_reason): Add CPP_W_BIDIRECTIONAL.\n+\t* internal.h (struct cpp_reader): Add warn_bidi_p member\n+\tfunction.\n+\t* init.c (cpp_create_reader): Set cpp_warn_bidirectional.\n+\t* lex.c (bidi): New namespace.\n+\t(get_bidi_utf8): New function.\n+\t(get_bidi_ucn): Likewise.\n+\t(maybe_warn_bidi_on_close): Likewise.\n+\t(maybe_warn_bidi_on_char): Likewise.\n+\t(_cpp_skip_block_comment): Implement warning about bidirectional\n+\tcontrol characters.\n+\t(skip_line_comment): Likewise.\n+\t(forms_identifier_p): Likewise.\n+\t(lex_identifier): Likewise.\n+\t(lex_string): Likewise.\n+\t(lex_raw_string): Likewise.\n+\n 2021-11-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* charset.c (convert_escape): Use encoding_rich_location when"}, {"sha": "575e1d2620004123b89a1a73b6c6fce3636ea909", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280d2838c112f02cb24dd34a69edf112e84cfe12/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280d2838c112f02cb24dd34a69edf112e84cfe12/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=280d2838c112f02cb24dd34a69edf112e84cfe12", "patch": "@@ -1,3 +1,53 @@\n+2021-11-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (address): Use std::_Construct\n+\tto initialize union members.\n+\n+2021-11-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (_M_construct_aux): Only define\n+\tfor C++98. Remove constexpr.\n+\t(_M_construct_aux_2): Likewise.\n+\t(_M_construct(InputIter, InputIter)): Remove.\n+\t(basic_string(const basic_string&)): Call _M_construct with\n+\titerator category argument.\n+\t(basic_string(const basic_string&, size_type, const Alloc&)):\n+\tLikewise.\n+\t(basic_string(const basic_string&, size_type, size_type)):\n+\tLikewise.\n+\t(basic_string(const charT*, size_type, const Alloc&)): Likewise.\n+\tCheck for null pointer.\n+\t(basic_string(const charT*, const Alloc&)): Likewise.\n+\t(basic_string(initializer_list<charT>, const Alloc&)): Call\n+\t_M_construct with iterator category argument.\n+\t(basic_string(const basic_string&, const Alloc&)): Likewise.\n+\t(basic_string(basic_string&&, const Alloc&)): Likewise.\n+\t(basic_string(_InputIter, _InputIter, const Alloc&)): Likewise\n+\tfor C++11 and later, call _M_construct_aux for C++98.\n+\t* include/bits/basic_string.tcc\n+\t(_M_construct(I, I, input_iterator_tag)): Replace try-block with\n+\tRAII type.\n+\t(_M_construct(I, I, forward_iterator_tag)): Likewise. Remove\n+\t__is_null_pointer check.\n+\n+2021-11-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103295\n+\t* include/bits/basic_string.h (_M_use_local_data()): New\n+\tmember function to make local buffer the active member.\n+\t(assign(const basic_string&)): Use it.\n+\t* include/bits/basic_string.tcc (_M_construct, reserve()):\n+\tLikewise.\n+\n+2021-11-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103240\n+\t* libsupc++/tinfo2.cc (type_info::before): Use unadjusted name\n+\tto check for the '*' prefix.\n+\t* testsuite/util/testsuite_shared.cc: Add type_info object for\n+\tuse in new test.\n+\t* testsuite/18_support/type_info/103240.cc: New test.\n+\n 2021-11-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/basic_string.h (operator<=>): Use constexpr"}]}