{"sha": "cd1a8088eb150e9836c675f8dd7f2950ea658e89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QxYTgwODhlYjE1MGU5ODM2YzY3NWY4ZGQ3ZjI5NTBlYTY1OGU4OQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-09-17T13:57:03Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-09-17T13:57:03Z"}, "message": "cfg.texi: Use @smallexample.\n\n2004-09-17  James Morrison  <phython@gcc.gnu.org>\n\n        * doc/cfg.texi: Use @smallexample.\n        * doc/md.texi: Likewise.\n        * doc/tree-ssa.texi: Likewise.\n        * doc/extend.texi: Likewise.  Use @r{} in comments.\n        * doc/trouble.texi: Use @r{} in comments.\n\nFrom-SVN: r87646", "tree": {"sha": "d254d5e86b9469d8a369289c381246c852a14b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d254d5e86b9469d8a369289c381246c852a14b28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd1a8088eb150e9836c675f8dd7f2950ea658e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1a8088eb150e9836c675f8dd7f2950ea658e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1a8088eb150e9836c675f8dd7f2950ea658e89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1a8088eb150e9836c675f8dd7f2950ea658e89/comments", "author": null, "committer": null, "parents": [{"sha": "57f0099a9633018a8812b64e7134fe93b62ab972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f0099a9633018a8812b64e7134fe93b62ab972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f0099a9633018a8812b64e7134fe93b62ab972"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "193b083fb64f5d7c438f09b1ba9ab65897b70afe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd1a8088eb150e9836c675f8dd7f2950ea658e89", "patch": "@@ -1,3 +1,11 @@\n+2004-09-17  James Morrison  <phython@gcc.gnu.org>\n+\n+\t* doc/cfg.texi: Use @smallexample.\n+\t* doc/md.texi: Likewise.\n+\t* doc/tree-ssa.texi: Likewise.\n+\t* doc/extend.texi: Likewise.  Use @r{} in comments.\n+\t* doc/trouble.texi: Use @r{} in comments.\n+\n 2004-09-17  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* configure.ac (gcc_cv_gld_version): Handle whitespace before"}, {"sha": "2b3aec61630f9143d39076ee67e237fc6a463b3d", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=cd1a8088eb150e9836c675f8dd7f2950ea658e89", "patch": "@@ -120,7 +120,7 @@ in the various @file{tree-*} files.\n The following snippet will pretty-print all the statements of the\n program in the GIMPLE representation.\n \n-@example\n+@smallexample\n FOR_EACH_BB (bb)\n   @{\n      block_stmt_iterator si;\n@@ -131,7 +131,7 @@ FOR_EACH_BB (bb)\n           print_generic_stmt (stderr, stmt, 0);\n        @}\n   @}\n-@end example\n+@end smallexample\n \n \n @node Edges\n@@ -231,7 +231,7 @@ stages of the compilation process, GCC tries to avoid such dense flow\n graphs by factoring computed jumps.  For example, given the following\n series of jumps, \n \n-@example\n+@smallexample\n   goto *x;\n   [ ... ]\n \n@@ -240,13 +240,13 @@ series of jumps,\n \n   goto *x;\n   [ ... ]\n-@end example\n+@end smallexample\n \n @noindent\n factoring the computed jumps results in the following code sequence\n which has a much simpler flow graph:\n \n-@example\n+@smallexample\n   goto y;\n   [ ... ]\n \n@@ -258,7 +258,7 @@ which has a much simpler flow graph:\n \n y:\n   goto *x;\n-@end example\n+@end smallexample\n \n However, the classic problem with this transformation is that it has a\n runtime cost in there resulting code: An extra jump.  Therefore, the"}, {"sha": "3724e6b5a58dade6d6b90a1331a7cb5de1f73799", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=cd1a8088eb150e9836c675f8dd7f2950ea658e89", "patch": "@@ -3610,13 +3610,13 @@ it as input or output but if this is not known, you should add\n @samp{memory}.  As an example, if you access ten bytes of a string, you\n can use a memory input like:\n \n-@example\n+@smallexample\n @{\"m\"( (@{ struct @{ char x[10]; @} *p = (void *)ptr ; *p; @}) )@}.\n-@end example\n+@end smallexample\n \n Note that in the following example the memory input is necessary,\n otherwise GCC might optimize the store to @code{x} away:\n-@example\n+@smallexample\n int foo ()\n @{\n   int x = 42;\n@@ -3626,7 +3626,7 @@ int foo ()\n         \"=&d\" (r) : \"a\" (y), \"m\" (*y));\n   return result;     \n @}\n-@end example\n+@end smallexample\n \n You can put multiple assembler instructions together in a single\n @code{asm} template, separated by the characters normally used in assembly\n@@ -9246,14 +9246,14 @@ namespace std @{\n     template <class T> struct A @{ @};\n   @}\n   using namespace debug __attribute ((__strong__));\n-  template <> struct A<int> @{ @};   // ok to specialize\n+  template <> struct A<int> @{ @};   // @r{ok to specialize}\n \n   template <class T> void f (A<T>);\n @}\n \n int main()\n @{\n-  f (std::A<float>());             // lookup finds std::f\n+  f (std::A<float>());             // @r{lookup finds} std::f\n   f (std::A<int>());\n @}\n @end smallexample\n@@ -9270,7 +9270,7 @@ Sample problematic code is:\n \n @smallexample\n   struct S @{ ~S(); @};\n-  extern void bar();    // is written in Java, and may throw exceptions\n+  extern void bar();    // @r{is written in Java, and may throw exceptions}\n   void foo()\n   @{\n     S s;"}, {"sha": "02bc0a6c3b25a7047f34d169c938429ab96dc195", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=cd1a8088eb150e9836c675f8dd7f2950ea658e89", "patch": "@@ -771,16 +771,16 @@ instruction operands on a RISC machine.\n This is a slight variant on @code{register_operand} which works around\n a limitation in the machine-description reader.\n \n-@example\n+@smallexample\n (match_operand @var{n} \"pmode_register_operand\" @var{constraint})\n-@end example\n+@end smallexample\n \n @noindent\n means exactly what\n \n-@example\n+@smallexample\n (match_operand:P @var{n} \"register_operand\" @var{constraint})\n-@end example\n+@end smallexample\n \n @noindent\n would mean, if the machine-description reader accepted @samp{:P}"}, {"sha": "311006d4c0fb79a45e7da907a0c8162f2a1c577e", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=cd1a8088eb150e9836c675f8dd7f2950ea658e89", "patch": "@@ -1193,7 +1193,7 @@ marked as an alias tag and added to the alias set of TMT@.\n \n For instance, consider the following function:\n \n-@example\n+@smallexample\n foo (int i)\n @{\n   int *p, *q, a, b;\n@@ -1208,15 +1208,15 @@ foo (int i)\n   a = b + 2;\n   return *p;\n @}\n-@end example\n+@end smallexample\n \n After aliasing analysis has finished, the type memory tag for\n pointer @code{p} will have two aliases, namely variables @code{a} and\n @code{b}.\n Every time pointer @code{p} is dereferenced, we want to mark the\n operation as a potential reference to @code{a} and @code{b}.\n \n-@example\n+@smallexample\n foo (int i)\n @{\n   int *p, a, b;\n@@ -1239,7 +1239,7 @@ foo (int i)\n   # VUSE <b_8>;\n   return *p_1;\n @}\n-@end example\n+@end smallexample\n \n In certain cases, the list of may aliases for a pointer may grow\n too large.  This may cause an explosion in the number of virtual"}, {"sha": "90c4daacc5d77911add964fa1d2657836389fbb0", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1a8088eb150e9836c675f8dd7f2950ea658e89/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=cd1a8088eb150e9836c675f8dd7f2950ea658e89", "patch": "@@ -910,11 +910,11 @@ of instantiation.  For example, consider\n   struct A @{\n     template <typename T>\n     void f () @{\n-      foo (1);        // 1\n-      int i = N;      // 2\n+      foo (1);        // @r{1}\n+      int i = N;      // @r{2}\n       T t;\n-      t.bar();        // 3\n-      foo (t);        // 4\n+      t.bar();        // @r{3}\n+      foo (t);        // @r{4}\n     @}\n \n     static const int N;"}]}