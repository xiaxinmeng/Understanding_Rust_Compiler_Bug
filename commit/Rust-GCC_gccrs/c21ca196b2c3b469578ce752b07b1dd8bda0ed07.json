{"sha": "c21ca196b2c3b469578ce752b07b1dd8bda0ed07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxY2ExOTZiMmMzYjQ2OTU3OGNlNzUyYjA3YjFkZDhiZGEwZWQwNw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-04-29T21:57:03Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-04-29T21:57:03Z"}, "message": "avr.c (initial_elimination_offset): Rename to avr_initial_elimination_offset.\n\n\t* config/avr/avr.c (initial_elimination_offset): Rename to\n\tavr_initial_elimination_offset.\n\t(frame_pointer_required_p): Rename to avr_frame_pointer_required_p,\n\tchange return type to bool.\n\t(avr_can_eliminate): New function.\n\t* config/avr/avr.h (CAN_ELIMINATE): Use avr_can_eliminate.\n\t(FRAME_POINTER_REQUIRED): Use avr_frame_pointer_required_p.\n\t(INITIAL_ELIMINATION_OFFSET): Use avr_initial_elimination_offset.\n\t* config/avr/avr-protos.h (initial_elimination_offset) : Rename to\n\tavr_initial_elimination_offset.\n\t(frame_pointer_required_p): Rename to avr_frame_pointer_required_p.\n\t(avr_initial_elimination_offset): Define.\n\nFrom-SVN: r146989", "tree": {"sha": "e6cbaab8820060fd0378d4d925ac416f8854bd75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6cbaab8820060fd0378d4d925ac416f8854bd75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21ca196b2c3b469578ce752b07b1dd8bda0ed07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21ca196b2c3b469578ce752b07b1dd8bda0ed07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21ca196b2c3b469578ce752b07b1dd8bda0ed07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/comments", "author": null, "committer": null, "parents": [{"sha": "2a34bece475923eef33afd72384e6b1072f1b671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a34bece475923eef33afd72384e6b1072f1b671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a34bece475923eef33afd72384e6b1072f1b671"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "51d9ec989c4e8ae7a179cc0fdea409954aa0f202", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c21ca196b2c3b469578ce752b07b1dd8bda0ed07", "patch": "@@ -1,3 +1,18 @@\n+2009-04-29  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/avr/avr.c (initial_elimination_offset): Rename to\n+\tavr_initial_elimination_offset.\n+\t(frame_pointer_required_p): Rename to avr_frame_pointer_required_p,\n+\tchange return type to bool.\n+\t(avr_can_eliminate): New function.\n+\t* config/avr/avr.h (CAN_ELIMINATE): Use avr_can_eliminate.\n+\t(FRAME_POINTER_REQUIRED): Use avr_frame_pointer_required_p.\n+\t(INITIAL_ELIMINATION_OFFSET): Use avr_initial_elimination_offset.\n+\t* config/avr/avr-protos.h (initial_elimination_offset) : Rename to\n+\tavr_initial_elimination_offset.\n+\t(frame_pointer_required_p): Rename to avr_frame_pointer_required_p.\n+\t(avr_initial_elimination_offset): Define.\n+\n 2009-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n             Steven Bosscher  <steven@gcc.gnu.org>\n "}, {"sha": "2ee8d8558b30f46bb45787b6e416f8227963d76c", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=c21ca196b2c3b469578ce752b07b1dd8bda0ed07", "patch": "@@ -30,11 +30,12 @@ extern int avr_ret_register (void);\n extern enum reg_class class_likely_spilled_p (int c);\n extern enum reg_class avr_regno_reg_class (int r);\n extern enum reg_class avr_reg_class_from_letter (int c);\n-extern int frame_pointer_required_p (void);\n+extern int avr_frame_pointer_required_p (void);\n extern void asm_globalize_label (FILE *file, const char *name);\n extern void avr_asm_declare_function_name (FILE *, const char *, tree);\n extern void order_regs_for_local_alloc (void);\n-extern int initial_elimination_offset (int from, int to);\n+extern bool avr_can_eliminate (int, int);\n+extern int avr_initial_elimination_offset (int from, int to);\n extern int avr_simple_epilogue (void);\n extern void gas_output_limited_string (FILE *file, const char *str);\n extern void gas_output_ascii (FILE *file, const char *str, size_t length);"}, {"sha": "7683c380e74b6d389ddf85e8b233c18e81f33772", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c21ca196b2c3b469578ce752b07b1dd8bda0ed07", "patch": "@@ -545,10 +545,21 @@ avr_regs_to_save (HARD_REG_SET *set)\n   return count;\n }\n \n+/* Return true if register FROM can be eliminated via register TO.  */\n+\n+bool\n+avr_can_eliminate (int from, int to)\n+{\n+  return ((from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n+\t  || ((from == FRAME_POINTER_REGNUM \n+\t       || from == FRAME_POINTER_REGNUM + 1)\n+\t      && !frame_pointer_needed));\n+}\n+\n /* Compute offset between arg_pointer and frame_pointer.  */\n \n int\n-initial_elimination_offset (int from, int to)\n+avr_initial_elimination_offset (int from, int to)\n {\n   if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n     return 0;\n@@ -2843,8 +2854,8 @@ out_movhi_mr_r (rtx insn, rtx op[], int *l)\n \n /* Return 1 if frame pointer for current function required.  */\n \n-int\n-frame_pointer_required_p (void)\n+bool\n+avr_frame_pointer_required_p (void)\n {\n   return (cfun->calls_alloca\n \t  || crtl->args.info.nregs == 0"}, {"sha": "45d02c4c414c328dceef8734ec71b575201ba342", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21ca196b2c3b469578ce752b07b1dd8bda0ed07/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c21ca196b2c3b469578ce752b07b1dd8bda0ed07", "patch": "@@ -350,7 +350,7 @@ enum reg_class {\n \n #define STATIC_CHAIN_REGNUM 2\n \n-#define FRAME_POINTER_REQUIRED frame_pointer_required_p()\n+#define FRAME_POINTER_REQUIRED avr_frame_pointer_required_p()\n \n /* Offset from the frame pointer register value to the top of the stack.  */\n #define FRAME_POINTER_CFA_OFFSET(FNDECL) 0\n@@ -360,15 +360,10 @@ enum reg_class {\n \t{FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}\t\t\\\n        ,{FRAME_POINTER_REGNUM+1,STACK_POINTER_REGNUM+1}}\n \n-#define CAN_ELIMINATE(FROM, TO) (((FROM) == ARG_POINTER_REGNUM\t\t   \\\n-\t\t\t\t  && (TO) == FRAME_POINTER_REGNUM)\t   \\\n-\t\t\t\t || (((FROM) == FRAME_POINTER_REGNUM\t   \\\n-\t\t\t\t      || (FROM) == FRAME_POINTER_REGNUM+1) \\\n-\t\t\t\t     && ! FRAME_POINTER_REQUIRED\t   \\\n-\t\t\t\t     ))\n+#define CAN_ELIMINATE(FROM, TO)\tavr_can_eliminate (FROM, TO)\n \n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n-     OFFSET = initial_elimination_offset (FROM, TO)\n+  OFFSET = avr_initial_elimination_offset (FROM, TO)\n \n #define RETURN_ADDR_RTX(count, x) \\\n   gen_rtx_MEM (Pmode, memory_address (Pmode, plus_constant (tem, 1)))"}]}