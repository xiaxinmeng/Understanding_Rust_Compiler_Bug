{"sha": "401cec230683dd086b9102645941bc190eb0a514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAxY2VjMjMwNjgzZGQwODZiOTEwMjY0NTk0MWJjMTkwZWIwYTUxNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-06-08T18:51:25Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-06-08T18:51:25Z"}, "message": "(call_operand, call_operand_address): Accept any address not just REG rtx.\n\nFrom-SVN: r4651", "tree": {"sha": "3a75ccc8f207a7e847aae7f88fa4ef456b2b6d62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a75ccc8f207a7e847aae7f88fa4ef456b2b6d62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/401cec230683dd086b9102645941bc190eb0a514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401cec230683dd086b9102645941bc190eb0a514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401cec230683dd086b9102645941bc190eb0a514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401cec230683dd086b9102645941bc190eb0a514/comments", "author": null, "committer": null, "parents": [{"sha": "6ffeae97834991f74aa4fbf352f6dd8402e7951e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffeae97834991f74aa4fbf352f6dd8402e7951e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffeae97834991f74aa4fbf352f6dd8402e7951e"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "5ecaa65ba7ee9637f0017367a583f2e295fe876d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401cec230683dd086b9102645941bc190eb0a514/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401cec230683dd086b9102645941bc190eb0a514/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=401cec230683dd086b9102645941bc190eb0a514", "patch": "@@ -113,7 +113,8 @@ restore_operand (op, mode)\n \t  && (REGNO (op) < 8 || (REGNO (op) >= 24 && REGNO (op) < 32)));\n }\n \n-/* PC-relative call insn on SPARC is independent of `memory_operand'.  */\n+/* Call insn on SPARC can take a PC-relative constant address, or any regular\n+   memory address.  */\n \n int\n call_operand (op, mode)\n@@ -123,15 +124,15 @@ call_operand (op, mode)\n   if (GET_CODE (op) != MEM)\n     abort ();\n   op = XEXP (op, 0);\n-  return (REG_P (op) || CONSTANT_P (op));\n+  return (CONSTANT_P (op) || memory_address_p (Pmode, op));\n }\n \n int\n call_operand_address (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  return (REG_P (op) || CONSTANT_P (op));\n+  return (CONSTANT_P (op) || memory_address_p (Pmode, op));\n }\n \n /* Returns 1 if OP is either a symbol reference or a sum of a symbol"}]}