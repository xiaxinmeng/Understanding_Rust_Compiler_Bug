{"sha": "d7593fec92166db4d454fdf241b1fde6922d72f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1OTNmZWM5MjE2NmRiNGQ0NTRmZGYyNDFiMWZkZTY5MjJkNzJmMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-03-30T16:53:09Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-31T08:45:07Z"}, "message": "Add support for TypeAlias\n\nThis allows for a typedef style alias of any type in rust code, as the\ntypes are abstracted behind the TyTy interface this falls out quite nicely.\n\nIn order to support TypeAliases we needed to be able to supported already\nsubstituted types in #311.\n\nMore testing is needed here the GenericParameters on TypeAlias are not\nbeing used in the type resolution pass here.\n\nFixes #312\nAddresses #311", "tree": {"sha": "4a381b854a9db351e093e1c5b52a8af49ea02f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a381b854a9db351e093e1c5b52a8af49ea02f72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7593fec92166db4d454fdf241b1fde6922d72f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7593fec92166db4d454fdf241b1fde6922d72f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7593fec92166db4d454fdf241b1fde6922d72f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7593fec92166db4d454fdf241b1fde6922d72f2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ed1e36ceae2edd11db4a7f333fe7530f3eed4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ed1e36ceae2edd11db4a7f333fe7530f3eed4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ed1e36ceae2edd11db4a7f333fe7530f3eed4c"}], "stats": {"total": 157, "additions": 139, "deletions": 18}, "files": [{"sha": "8ffe1502bf3c914bdfd2a77e0d8225a985bb002e", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -1720,6 +1720,8 @@ class TypeAlias : public VisItem, public TraitImplItem\n     return existing_type;\n   }\n \n+  Identifier get_new_type_name () const { return new_type_name; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "edbc498088fb6854989a3ca5bb66c83a4e3d3110", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -53,6 +53,39 @@ class ASTLoweringItem : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n+  void visit (AST::TypeAlias &alias) override\n+  {\n+    std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+    HIR::WhereClause where_clause (std::move (where_clause_items));\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    std::vector<HIR::Attribute> outer_attrs;\n+\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (alias.has_generics ())\n+      generic_params = lower_generic_params (alias.get_generic_params ());\n+\n+    HIR::Type *existing_type\n+      = ASTLoweringType::translate (alias.get_type_aliased ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, alias.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::TypeAlias (mapping, alias.get_new_type_name (),\n+\t\t\t\t     std::move (generic_params),\n+\t\t\t\t     std::move (where_clause),\n+\t\t\t\t     std::unique_ptr<HIR::Type> (existing_type),\n+\t\t\t\t     std::move (vis), std::move (outer_attrs),\n+\t\t\t\t     alias.get_locus ());\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       alias.get_locus ());\n+  }\n+\n   void visit (AST::TupleStruct &struct_decl) override\n   {\n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;"}, {"sha": "a11733345746c7c98ad3775d239a4d2b0d8945bc", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -1504,6 +1504,31 @@ class TypeAlias : public VisItem, public TraitImplItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  {\n+    return generic_params;\n+  }\n+  const std::vector<std::unique_ptr<GenericParam> > &get_generic_params () const\n+  {\n+    return generic_params;\n+  }\n+\n+  // TODO: is this better? Or is a \"vis_block\" better?\n+  WhereClause &get_where_clause ()\n+  {\n+    rust_assert (has_where_clause ());\n+    return where_clause;\n+  }\n+\n+  // TODO: is this better? Or is a \"vis_block\" better?\n+  std::unique_ptr<Type> &get_type_aliased ()\n+  {\n+    rust_assert (existing_type != nullptr);\n+    return existing_type;\n+  }\n+\n+  Identifier get_new_type_name () const { return new_type_name; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "45d94dbcb2662ce16df4b00001b7b5d10875c8a5", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -39,6 +39,22 @@ class ResolveItem : public ResolverBase\n     item->accept_vis (resolver);\n   };\n \n+  void visit (AST::TypeAlias &alias) override\n+  {\n+    NodeId scope_node_id = alias.get_node_id ();\n+    resolver->get_type_scope ().push (scope_node_id);\n+\n+    if (alias.has_generics ())\n+      {\n+\tfor (auto &generic : alias.get_generic_params ())\n+\t  ResolveGenericParam::go (generic.get (), alias.get_node_id ());\n+      }\n+\n+    ResolveType::go (alias.get_type_aliased ().get (), alias.get_node_id ());\n+\n+    resolver->get_type_scope ().pop ();\n+  }\n+\n   void visit (AST::TupleStruct &struct_decl) override\n   {\n     NodeId scope_node_id = struct_decl.get_node_id ();"}, {"sha": "afc0068b876acf3aa7c601d3dfc8412994f7b955", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -38,6 +38,16 @@ class ResolveTopLevel : public ResolverBase\n     item->accept_vis (resolver);\n   };\n \n+  void visit (AST::TypeAlias &alias) override\n+  {\n+    resolver->get_type_scope ().insert (\n+      alias.get_new_type_name (), alias.get_node_id (), alias.get_locus (),\n+      false, [&] (std::string, NodeId, Location locus) -> void {\n+\trust_error_at (alias.get_locus (), \"redefined multiple times\");\n+\trust_error_at (locus, \"was defined here\");\n+      });\n+  }\n+\n   void visit (AST::TupleStruct &struct_decl) override\n   {\n     resolver->get_type_scope ().insert ("}, {"sha": "dc4aaa765a18ba9ea9c6d661cfe5aff6c9925e2e", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -115,10 +115,6 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     infered = field_tyty->get_field_type ();\n-    printf (\"ZXZX resolved: %s to: \\n\", expr.as_string ().c_str ());\n-    adt->debug ();\n-    infered->debug ();\n-    printf (\"ZXZX done\\n\");\n   }\n \n   void visit (HIR::TupleExpr &expr) override"}, {"sha": "7e9e8625b3dff54f8252cee5238382449a232227", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -242,15 +242,12 @@ class TypeCheckImplItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->get_return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    printf (\"XXXX method body boyo: 1!!\\n\");\n-\n     auto block_expr_ty\n       = TypeCheckExpr::Resolve (method.get_definition ().get (), false);\n \n     context->pop_return_type ();\n \n     expected_ret_tyty->unify (block_expr_ty);\n-    printf (\"XXXX method body boyo: 2!!\\n\");\n   }\n \n private:"}, {"sha": "01315554e2ebdd2dc5e2a889266d24990079989d", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -40,6 +40,14 @@ class TypeCheckTopLevel : public TypeCheckBase\n     item->accept_vis (resolver);\n   }\n \n+  void visit (HIR::TypeAlias &alias) override\n+  {\n+    TyTy::BaseType *actual_type\n+      = TypeCheckType::Resolve (alias.get_type_aliased ().get ());\n+\n+    context->insert_type (alias.get_mappings (), actual_type);\n+  }\n+\n   void visit (HIR::TupleStruct &struct_decl) override\n   {\n     std::vector<TyTy::SubstitutionParamMapping> substitutions;"}, {"sha": "8b2f657178371333c523d05cd37a84e51d3ba725", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -305,19 +305,27 @@ TypeCheckStructExpr::visit (HIR::PathInExpression &expr)\n   if (struct_path_resolved->has_substitutions ())\n     {\n       HIR::PathExprSegment seg = expr.get_final_segment ();\n-\n-      TyTy::BaseType *subst\n-\t= SubstMapper::Resolve (struct_path_resolved, expr.get_locus (),\n-\t\t\t\tseg.has_generic_args ()\n-\t\t\t\t  ? &seg.get_generic_args ()\n-\t\t\t\t  : nullptr);\n-      if (subst == nullptr || subst->get_kind () != TyTy::TypeKind::ADT)\n+      if (!struct_path_resolved->needs_substitution ()\n+\t  && seg.has_generic_args ())\n \t{\n-\t  rust_fatal_error (mappings->lookup_location (ref),\n-\t\t\t    \"expected a substituted ADT type\");\n-\t  return;\n+\t  rust_error_at (seg.get_generic_args ().get_locus (),\n+\t\t\t \"unexpected type arguments\");\n+\t}\n+      else if (struct_path_resolved->needs_substitution ())\n+\t{\n+\t  TyTy::BaseType *subst\n+\t    = SubstMapper::Resolve (struct_path_resolved, expr.get_locus (),\n+\t\t\t\t    seg.has_generic_args ()\n+\t\t\t\t      ? &seg.get_generic_args ()\n+\t\t\t\t      : nullptr);\n+\t  if (subst == nullptr || subst->get_kind () != TyTy::TypeKind::ADT)\n+\t    {\n+\t      rust_fatal_error (mappings->lookup_location (ref),\n+\t\t\t\t\"expected a substituted ADT type\");\n+\t      return;\n+\t    }\n+\t  struct_path_resolved = static_cast<TyTy::ADTType *> (subst);\n \t}\n-      struct_path_resolved = static_cast<TyTy::ADTType *> (subst);\n     }\n }\n "}, {"sha": "3c8f5ba0058d3de7964a10f3f0a3e80923041efd", "filename": "gcc/testsuite/rust.test/compile/generics11.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics11.rs?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -0,0 +1,8 @@\n+struct Foo<T>(T, u32);\n+\n+type TypeAlias = Foo<i32>;\n+\n+fn main() {\n+    let a: Foo<i32>;\n+    a = TypeAlias { 0: 123, 1: 456 };\n+}"}, {"sha": "78bf0461036530e67c481be20c08a2c7eb00b156", "filename": "gcc/testsuite/rust.test/compile/type-alias1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ftype-alias1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ftype-alias1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ftype-alias1.rs?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -0,0 +1,6 @@\n+type TypeAlias = (i32, u32);\n+\n+fn main() {\n+    let a: TypeAlias;\n+    a = (123, 456);\n+}"}, {"sha": "b1ac205f221277cdb20a24c557e0438651034d98", "filename": "gcc/testsuite/rust.test/compile/type-alias2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ftype-alias2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ftype-alias2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ftype-alias2.rs?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -0,0 +1,6 @@\n+type x = u32;\n+\n+fn main() {\n+    let x: x = 1;\n+    let y: x = 2;\n+}"}, {"sha": "c7d7048246a99336f1c55fe6cd8ec95382ba540f", "filename": "gcc/testsuite/rust.test/xfail_compile/type-alias1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-alias1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7593fec92166db4d454fdf241b1fde6922d72f2/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-alias1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-alias1.rs?ref=d7593fec92166db4d454fdf241b1fde6922d72f2", "patch": "@@ -0,0 +1,6 @@\n+type TypeAlias = (i32, u32);\n+\n+fn main() {\n+    let a: TypeAlias;\n+    a = (123, 456f32); // { dg-error \"expected .u32. got .f32.\" }\n+}"}]}