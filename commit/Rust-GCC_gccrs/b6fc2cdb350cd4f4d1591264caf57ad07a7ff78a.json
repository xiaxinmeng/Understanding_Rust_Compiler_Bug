{"sha": "b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmYzJjZGIzNTBjZDRmNGQxNTkxMjY0Y2FmNTdhZDA3YTdmZjc4YQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-04-16T09:11:39Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-04-16T09:11:39Z"}, "message": "c-common.c (vector_targets_convertible_p, [...]): Use TYPE_VECTOR_OPAQUE instead of targetm.vector_opaque_p.\n\n2009-04-16  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* c-common.c (vector_targets_convertible_p, vector_types_convertible_p):\n\tUse TYPE_VECTOR_OPAQUE instead of targetm.vector_opaque_p.\n\t* c-typeck.c (really_start_incremental_init): Likewise.\n\t* target-def.h (TARGET_VECTOR_OPAQUE_P): Remove.\n\t(TARGET_INITIALIZER): Remove it.\n\t* target.h (struct target): Remove vector_opaque_p.\n\t* tree.c (build_opaque_vector_type): New.\n\t* tree.h (TYPE_VECTOR_OPAQUE): New.\n\t(build_opaque_vector_type): Declare.\n\t* doc/tm.texi (TARGET_VECTOR_OPAQUE_P): Remove.\n\t* config/rs6000/rs6000.c (build_opaque_vector_type,\n\trs6000_is_vector_type, TARGET_VECTOR_OPAQUE_P): Remove.\n\t(rs6000_init_builtins): Use build_opaque_vector_type for\n\topaque_V4SI_type_node.\n\ncp:\n2009-04-16  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* decl.c (check_initializer): Use TYPE_VECTOR_OPAQUE\n\tinstead of targetm.vector_opaque_p.\n\nFrom-SVN: r146153", "tree": {"sha": "d76cd3e5993a1a60d42ee32e88262c35591e9e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d76cd3e5993a1a60d42ee32e88262c35591e9e3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/comments", "author": null, "committer": null, "parents": [{"sha": "b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da"}], "stats": {"total": 95, "additions": 50, "deletions": 45}, "files": [{"sha": "66374e5926cfde16c5211912462a142f0de7195f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -1,3 +1,20 @@\n+2009-04-16  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* c-common.c (vector_targets_convertible_p, vector_types_convertible_p):\n+\tUse TYPE_VECTOR_OPAQUE instead of targetm.vector_opaque_p.\n+\t* c-typeck.c (really_start_incremental_init): Likewise.\n+\t* target-def.h (TARGET_VECTOR_OPAQUE_P): Remove.\n+\t(TARGET_INITIALIZER): Remove it.\n+\t* target.h (struct target): Remove vector_opaque_p.\n+\t* tree.c (build_opaque_vector_type): New.\n+\t* tree.h (TYPE_VECTOR_OPAQUE): New.\n+\t(build_opaque_vector_type): Declare.\n+\t* doc/tm.texi (TARGET_VECTOR_OPAQUE_P): Remove.\n+\t* config/rs6000/rs6000.c (build_opaque_vector_type,\n+\trs6000_is_vector_type, TARGET_VECTOR_OPAQUE_P): Remove.\n+\t(rs6000_init_builtins): Use build_opaque_vector_type for\n+\topaque_V4SI_type_node.\n+\n 2009-04-15  Catherine Moore  <clm@codesourcery.com>\n \n         * debug.h (set_name):  Declare."}, {"sha": "77f7ebc4d622fce671d3159a7801cc9a98cfbf3f", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -1882,7 +1882,7 @@ bool\n vector_targets_convertible_p (const_tree t1, const_tree t2)\n {\n   if (TREE_CODE (t1) == VECTOR_TYPE && TREE_CODE (t2) == VECTOR_TYPE\n-      && (targetm.vector_opaque_p (t1) || targetm.vector_opaque_p (t2))\n+      && (TYPE_VECTOR_OPAQUE (t1) || TYPE_VECTOR_OPAQUE (t2))\n       && tree_int_cst_equal (TYPE_SIZE (t1), TYPE_SIZE (t2)))\n     return true;\n \n@@ -1900,7 +1900,7 @@ vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note)\n   static bool emitted_lax_note = false;\n   bool convertible_lax;\n \n-  if ((targetm.vector_opaque_p (t1) || targetm.vector_opaque_p (t2))\n+  if ((TYPE_VECTOR_OPAQUE (t1) || TYPE_VECTOR_OPAQUE (t2))\n       && tree_int_cst_equal (TYPE_SIZE (t1), TYPE_SIZE (t2)))\n     return true;\n "}, {"sha": "4b0dbbb8be88f47b190351f87101490557769293", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -5700,7 +5700,8 @@ really_start_incremental_init (tree type)\n   if (type == 0)\n     type = TREE_TYPE (constructor_decl);\n \n-  if (targetm.vector_opaque_p (type))\n+  if (TREE_CODE (type) == VECTOR_TYPE\n+      && TYPE_VECTOR_OPAQUE (type))\n     error (\"opaque vector types cannot be initialized\");\n \n   p->type = constructor_type;"}, {"sha": "07131b727231ad34ccc2f99a254460e5d7378106", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -885,7 +885,6 @@ static rtx paired_expand_predicate_builtin (enum insn_code, tree, rtx);\n static void enable_mask_for_builtins (struct builtin_description *, int,\n \t\t\t\t      enum rs6000_builtins,\n \t\t\t\t      enum rs6000_builtins);\n-static tree build_opaque_vector_type (tree, int);\n static void spe_init_builtins (void);\n static rtx spe_expand_builtin (tree, rtx, bool *);\n static rtx spe_expand_stv_builtin (enum insn_code, tree);\n@@ -916,7 +915,6 @@ static void compute_save_world_info (rs6000_stack_t *info_ptr);\n static void is_altivec_return_reg (rtx, void *);\n static rtx generate_set_vrsave (rtx, rs6000_stack_t *, int);\n int easy_vector_constant (rtx, enum machine_mode);\n-static bool rs6000_is_opaque_type (const_tree);\n static rtx rs6000_dwarf_register_span (rtx);\n static void rs6000_init_dwarf_reg_sizes_extra (tree);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n@@ -1191,9 +1189,6 @@ static const char alt_reg_names[][8] =\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n \n-#undef TARGET_VECTOR_OPAQUE_P\n-#define TARGET_VECTOR_OPAQUE_P rs6000_is_opaque_type\n-\n #undef TARGET_DWARF_REGISTER_SPAN\n #define TARGET_DWARF_REGISTER_SPAN rs6000_dwarf_register_span\n \n@@ -9362,15 +9357,6 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   gcc_unreachable ();\n }\n \n-static tree\n-build_opaque_vector_type (tree node, int nunits)\n-{\n-  node = copy_node (node);\n-  TYPE_MAIN_VARIANT (node) = node;\n-  TYPE_CANONICAL (node) = node;\n-  return build_vector_type (node, nunits);\n-}\n-\n static void\n rs6000_init_builtins (void)\n {\n@@ -9391,7 +9377,7 @@ rs6000_init_builtins (void)\n   opaque_V2SF_type_node = build_opaque_vector_type (float_type_node, 2);\n   opaque_V2SI_type_node = build_opaque_vector_type (intSI_type_node, 2);\n   opaque_p_V2SI_type_node = build_pointer_type (opaque_V2SI_type_node);\n-  opaque_V4SI_type_node = copy_node (V4SI_type_node);\n+  opaque_V4SI_type_node = build_opaque_vector_type (intSI_type_node, 4);\n \n   /* The 'vector bool ...' types must be kept distinct from 'vector unsigned ...'\n      types, especially in C++ land.  Similarly, 'vector pixel' is distinct from\n@@ -22694,16 +22680,6 @@ rs6000_initial_elimination_offset (int from, int to)\n   return offset;\n }\n \n-/* Return true if TYPE is a SPE or AltiVec opaque type.  */\n-\n-static bool\n-rs6000_is_opaque_type (const_tree type)\n-{\n-  return (type == opaque_V2SI_type_node\n-\t      || type == opaque_V2SF_type_node\n-\t      || type == opaque_V4SI_type_node);\n-}\n-\n static rtx\n rs6000_dwarf_register_span (rtx reg)\n {"}, {"sha": "c0fa5ba4995344c5de243c384c2bb788d1ba5d0b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -1,3 +1,8 @@\n+2009-04-16  Le-Chun Wu  <lcwu@google.com>\n+\n+\t* decl.c (check_initializer): Use TYPE_VECTOR_OPAQUE\n+\tinstead of targetm.vector_opaque_p.\n+\n 2009-04-15  Le-Chun Wu  <lcwu@google.com>\n \n \tPR c++/39551"}, {"sha": "707bd338217be52727cc106f38495bb942f6d090", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -5157,7 +5157,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t\t       decl);\n \t      init = build_tree_list (NULL_TREE, init);\n \t    }\n-\t  else if ((*targetm.vector_opaque_p) (type))\n+\t  else if (TREE_CODE (type) == VECTOR_TYPE && TYPE_VECTOR_OPAQUE (type))\n \t    {\n \t      error (\"opaque vector types cannot be initialized\");\n \t      init = error_mark_node;"}, {"sha": "3f61f6193ea82ec1e6fb7335da9f97794fd1c8a4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -1424,14 +1424,6 @@ floating-point arithmetic.\n The default definition of this macro returns false for all sizes.\n @end defmac\n \n-@deftypefn {Target Hook} bool TARGET_VECTOR_OPAQUE_P (tree @var{type})\n-This target hook should return @code{true} a vector is opaque.  That\n-is, if no cast is needed when copying a vector value of type\n-@var{type} into another vector lvalue of the same size.  Vector opaque\n-types cannot be initialized.  The default is that there are no such\n-types.\n-@end deftypefn\n-\n @deftypefn {Target Hook} bool TARGET_MS_BITFIELD_LAYOUT_P (tree @var{record_type})\n This target hook returns @code{true} if bit-fields in the given\n @var{record_type} are to be laid out following the rules of Microsoft"}, {"sha": "73e69434d208c93c99e35f1976708230f333e040", "filename": "gcc/target-def.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -478,10 +478,6 @@\n #define TARGET_VECTOR_MODE_SUPPORTED_P hook_bool_mode_false\n #endif\n \n-#ifndef TARGET_VECTOR_OPAQUE_P\n-#define TARGET_VECTOR_OPAQUE_P hook_bool_const_tree_false\n-#endif\n-\n /* In hooks.c.  */\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_bool_void_false\n #define TARGET_BRANCH_TARGET_REGISTER_CLASS hook_int_void_no_regs\n@@ -886,7 +882,6 @@\n   TARGET_VALID_POINTER_MODE,                    \\\n   TARGET_SCALAR_MODE_SUPPORTED_P,\t\t\\\n   TARGET_VECTOR_MODE_SUPPORTED_P,               \\\n-  TARGET_VECTOR_OPAQUE_P,\t\t\t\\\n   TARGET_RTX_COSTS,\t\t\t\t\\\n   TARGET_ADDRESS_COST,\t\t\t\t\\\n   TARGET_ALLOCATE_INITIAL_VALUE,\t\t\\"}, {"sha": "608910a3ec49757bfa4dfc68193fb4e85a9c3d50", "filename": "gcc/target.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -674,9 +674,6 @@ struct gcc_target\n      for further details.  */\n   bool (* vector_mode_supported_p) (enum machine_mode mode);\n \n-  /* True if a vector is opaque.  */\n-  bool (* vector_opaque_p) (const_tree);\n-\n   /* Compute a (partial) cost for rtx X.  Return true if the complete\n      cost has been computed, and false if subexpressions should be\n      scanned.  In either case, *TOTAL contains the cost result.  */"}, {"sha": "ac6c31e051c87b8ec098e301b5a8f2f8b1305ed7", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -7970,6 +7970,19 @@ build_vector_type (tree innertype, int nunits)\n   return make_vector_type (innertype, nunits, VOIDmode);\n }\n \n+/* Similarly, but takes the inner type and number of units, which must be\n+   a power of two.  */\n+\n+tree\n+build_opaque_vector_type (tree innertype, int nunits)\n+{\n+  tree t;\n+  innertype = build_distinct_type_copy (innertype);\n+  t = make_vector_type (innertype, nunits, VOIDmode);\n+  TYPE_VECTOR_OPAQUE (t) = true;\n+  return t;\n+}\n+\n \n /* Build RESX_EXPR with given REGION_NUMBER.  */\n tree"}, {"sha": "e2423ee434c2e6e68e7b93724ef31005ccb04039", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b6fc2cdb350cd4f4d1591264caf57ad07a7ff78a", "patch": "@@ -586,6 +586,9 @@ struct tree_common GTY(())\n        STMT_IN_SSA_EDGE_WORKLIST in\n            all expressions (tree-ssa-propagate.c)\n \n+\tTYPE_VECTOR_OPAQUE in\n+\t   VECTOR_TYPE\n+\n    visited:\n \n        TREE_VISITED in\n@@ -2221,6 +2224,11 @@ extern enum machine_mode vector_type_mode (const_tree);\n #define SET_TYPE_VECTOR_SUBPARTS(VECTOR_TYPE, X) \\\n   (VECTOR_TYPE_CHECK (VECTOR_TYPE)->type.precision = exact_log2 (X))\n \n+/* Nonzero in an IDENTIFIER_NODE if the name is a local alias, whose\n+   uses are to be substituted for uses of the TREE_CHAINed identifier.  */\n+#define TYPE_VECTOR_OPAQUE(NODE) \\\n+  (VECTOR_TYPE_CHECK (NODE)->base.deprecated_flag)\n+\n /* Indicates that objects of this type must be initialized by calling a\n    function when they are created.  */\n #define TYPE_NEEDS_CONSTRUCTING(NODE) \\\n@@ -3938,6 +3946,7 @@ extern tree build_reference_type_for_mode (tree, enum machine_mode, bool);\n extern tree build_reference_type (tree);\n extern tree build_vector_type_for_mode (tree, enum machine_mode);\n extern tree build_vector_type (tree innertype, int nunits);\n+extern tree build_opaque_vector_type (tree innertype, int nunits);\n extern tree build_type_no_quals (tree);\n extern tree build_index_type (tree);\n extern tree build_index_2_type (tree, tree);"}]}