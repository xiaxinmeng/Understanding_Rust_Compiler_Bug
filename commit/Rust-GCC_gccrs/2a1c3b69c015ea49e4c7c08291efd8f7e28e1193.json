{"sha": "2a1c3b69c015ea49e4c7c08291efd8f7e28e1193", "node_id": "C_kwDOANBUbNoAKDJhMWMzYjY5YzAxNWVhNDllNGM3YzA4MjkxZWZkOGY3ZTI4ZTExOTM", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-10T12:02:04Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-10T12:02:04Z"}, "message": "PR ipa/103601: ICE compiling CSiBE in ipa-modref's insert_kill.\n\nThis patch fixes PR ipa/103061 which is P1 regression that shows up as\nan ICE in ipa-modref-tree.c's insert_kill when compiling the CSiBE\nbenchmark.  I believe the underlying cause is that the new kill tracking\nfunctionality wasn't anticipating memory accesses that are zero bits\nwide!?.  The failing source code (test case) contains the unusual lines:\ntypedef struct { } spinlock_t;\nand\nq->lock = (spinlock_t) { };\nMaking spinlock_t larger, or removing the assignment work around the issue.\n\nThe one line patch below to useful_for_kill_p teaches IPA that a memory\nwrite is only useful as a \"kill\" if it is more than zero bits wide.\nIn theory, the existing known_size_p (size) test is now redundant, as\npoly_int64 currently uses the value -1 for unknown size values,\nbut the proposed change makes the semantics clear, and defends against\npossible future changes in representation.\n\n2021-12-10  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR ipa/103601\n\t* ipa-modref-tree.h (useful_for_kill_p): Zero width accesses aren't\n\tuseful for kill tracking.\n\ngcc/testsuite/ChangeLog\n\tPR ipa/103601\n\t* gcc.dg/ipa/pr103601.c: New test case.", "tree": {"sha": "8c2661d499fec25db3ef1d572049c06137afee33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c2661d499fec25db3ef1d572049c06137afee33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1c3b69c015ea49e4c7c08291efd8f7e28e1193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1c3b69c015ea49e4c7c08291efd8f7e28e1193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1c3b69c015ea49e4c7c08291efd8f7e28e1193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1c3b69c015ea49e4c7c08291efd8f7e28e1193/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a87a8e4b13e979e7c8a626a8f4082715a48e21e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a87a8e4b13e979e7c8a626a8f4082715a48e21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a87a8e4b13e979e7c8a626a8f4082715a48e21e"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "4ad556fbe36a0f8d72942d721cf8333a0405967b", "filename": "gcc/ipa-modref-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1c3b69c015ea49e4c7c08291efd8f7e28e1193/gcc%2Fipa-modref-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1c3b69c015ea49e4c7c08291efd8f7e28e1193/gcc%2Fipa-modref-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref-tree.h?ref=2a1c3b69c015ea49e4c7c08291efd8f7e28e1193", "patch": "@@ -87,7 +87,8 @@ struct GTY(()) modref_access_node\n     {\n       return parm_offset_known && parm_index != MODREF_UNKNOWN_PARM\n \t     && parm_index != MODREF_RETSLOT_PARM && known_size_p (size)\n-\t     && known_eq (max_size, size);\n+\t     && known_eq (max_size, size)\n+\t     && known_gt (size, 0);\n     }\n   /* Dump range to debug OUT.  */\n   void dump (FILE *out);"}, {"sha": "7bdb5e50fbea49056e19160ab0c03d1cad7bb647", "filename": "gcc/testsuite/gcc.dg/ipa/pr103601.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1c3b69c015ea49e4c7c08291efd8f7e28e1193/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr103601.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1c3b69c015ea49e4c7c08291efd8f7e28e1193/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr103601.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr103601.c?ref=2a1c3b69c015ea49e4c7c08291efd8f7e28e1193", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fgnu89-inline\" } */\n+\n+typedef struct { } spinlock_t;\n+struct list_head {\n+ struct list_head *next, *prev;\n+};\n+struct __wait_queue_head {\n+ spinlock_t lock;\n+ struct list_head task_list;\n+};\n+typedef struct __wait_queue_head wait_queue_head_t;\n+static inline void init_waitqueue_head(wait_queue_head_t *q)\n+{\n+ q->lock = (spinlock_t) { };\n+ do { (&q->task_list)->next = (&q->task_list); (&q->task_list)->prev = (&q->task_list); } while (0);\n+}\n+struct timer_list {\n+ void (*function)(unsigned long);\n+};\n+struct rpc_task {\n+ struct timer_list tk_timer;\n+ wait_queue_head_t tk_wait;\n+};\n+static void\n+rpc_run_timer(struct rpc_task *task)\n+{\n+}\n+inline void\n+rpc_init_task(struct rpc_task *task)\n+{\n+ task->tk_timer.function = (void (*)(unsigned long)) rpc_run_timer;\n+ init_waitqueue_head(&task->tk_wait);\n+}\n+"}]}