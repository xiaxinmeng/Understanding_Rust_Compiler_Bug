{"sha": "5d3498b4e03cbd1639cff5d1b19515393b0009b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzNDk4YjRlMDNjYmQxNjM5Y2ZmNWQxYjE5NTE1MzkzYjAwMDliNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-21T09:49:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-21T09:49:13Z"}, "message": "Add simple sign-stripping cases to match.pd\n\nThis patch makes sure that, for every simplification that uses\nfold_strip_sign_ops, there are associated match.pd rules for the\nleaf sign ops, i.e. abs, negate and copysign.  A follow-on patch\nwill add a pass to handle more complex cases.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* match.pd: Add rules to simplify ccos, ccosh, hypot, copysign\n\tand x*x in cases where the operands are sign ops.  Extend these\n\trules to handle copysign as a sign op (including for cos, cosh\n\tand pow, which already treated negate and abs as sign ops).\n\nFrom-SVN: r229123", "tree": {"sha": "e80a9f5011fa7ceae0d53ca58e953a84f6c350b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e80a9f5011fa7ceae0d53ca58e953a84f6c350b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d3498b4e03cbd1639cff5d1b19515393b0009b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3498b4e03cbd1639cff5d1b19515393b0009b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3498b4e03cbd1639cff5d1b19515393b0009b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3498b4e03cbd1639cff5d1b19515393b0009b5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc3cf66b06e1357d69e5ad9293449369064f254e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3cf66b06e1357d69e5ad9293449369064f254e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3cf66b06e1357d69e5ad9293449369064f254e"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "28cafa14b52994f8e92b09cb5129f0ba1889b22e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3498b4e03cbd1639cff5d1b19515393b0009b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3498b4e03cbd1639cff5d1b19515393b0009b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d3498b4e03cbd1639cff5d1b19515393b0009b5", "patch": "@@ -1,3 +1,10 @@\n+2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* match.pd: Add rules to simplify ccos, ccosh, hypot, copysign\n+\tand x*x in cases where the operands are sign ops.  Extend these\n+\trules to handle copysign as a sign op (including for cos, cosh\n+\tand pow, which already treated negate and abs as sign ops).\n+\n 2015-10-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/68018"}, {"sha": "c5aa001cd71e0d3021384646d463f86155121a86", "filename": "gcc/match.pd", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3498b4e03cbd1639cff5d1b19515393b0009b5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3498b4e03cbd1639cff5d1b19515393b0009b5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5d3498b4e03cbd1639cff5d1b19515393b0009b5", "patch": "@@ -62,6 +62,12 @@ along with GCC; see the file COPYING3.  If not see\n (define_operator_list COSH BUILT_IN_COSHF BUILT_IN_COSH BUILT_IN_COSHL)\n (define_operator_list CEXPI BUILT_IN_CEXPIF BUILT_IN_CEXPI BUILT_IN_CEXPIL)\n (define_operator_list CPROJ BUILT_IN_CPROJF BUILT_IN_CPROJ BUILT_IN_CPROJL)\n+(define_operator_list CCOS BUILT_IN_CCOSF BUILT_IN_CCOS BUILT_IN_CCOSL)\n+(define_operator_list CCOSH BUILT_IN_CCOSHF BUILT_IN_CCOSH BUILT_IN_CCOSHL)\n+(define_operator_list HYPOT BUILT_IN_HYPOTF BUILT_IN_HYPOT BUILT_IN_HYPOTL)\n+(define_operator_list COPYSIGN BUILT_IN_COPYSIGNF\n+\t\t\t       BUILT_IN_COPYSIGN\n+\t\t\t       BUILT_IN_COPYSIGNL)\n \n /* Simplifications of operations with one constant operand and\n    simplifications to constants or single values.  */\n@@ -323,7 +329,70 @@ along with GCC; see the file COPYING3.  If not see\n    (pows (op @0) REAL_CST@1)\n    (with { HOST_WIDE_INT n; }\n     (if (real_isinteger (&TREE_REAL_CST (@1), &n) && (n & 1) == 0)\n-     (pows @0 @1))))))\n+     (pows @0 @1)))))\n+ /* Strip negate and abs from both operands of hypot.  */\n+ (for hypots (HYPOT)\n+  (simplify\n+   (hypots (op @0) @1)\n+   (hypots @0 @1))\n+  (simplify\n+   (hypots @0 (op @1))\n+   (hypots @0 @1)))\n+ /* copysign(-x, y) and copysign(abs(x), y) -> copysign(x, y).  */\n+ (for copysigns (COPYSIGN)\n+  (simplify\n+   (copysigns (op @0) @1)\n+   (copysigns @0 @1))))\n+\n+/* abs(x)*abs(x) -> x*x.  Should be valid for all types.  */\n+(simplify\n+ (mult (abs@1 @0) @1)\n+ (mult @0 @0))\n+\n+/* cos(copysign(x, y)) -> cos(x).  Similarly for cosh.  */\n+(for coss (COS COSH)\n+     copysigns (COPYSIGN)\n+ (simplify\n+  (coss (copysigns @0 @1))\n+   (coss @0)))\n+\n+/* pow(copysign(x, y), z) -> pow(x, z) if z is an even integer.  */\n+(for pows (POW)\n+     copysigns (COPYSIGN)\n+ (simplify\n+  (pows (copysigns @0 @1) REAL_CST@1)\n+  (with { HOST_WIDE_INT n; }\n+   (if (real_isinteger (&TREE_REAL_CST (@1), &n) && (n & 1) == 0)\n+    (pows @0 @1)))))\n+\n+(for hypots (HYPOT)\n+     copysigns (COPYSIGN)\n+ /* hypot(copysign(x, y), z) -> hypot(x, z).  */\n+ (simplify\n+  (hypots (copysigns @0 @1) @2)\n+  (hypots @0 @2))\n+ /* hypot(x, copysign(y, z)) -> hypot(x, y).  */\n+ (simplify\n+  (hypots @0 (copysigns @1 @2))\n+  (hypots @0 @1)))\n+\n+/* copysign(copysign(x, y), z) -> copysign(x, z).  */\n+(for copysigns (COPYSIGN)\n+ (simplify\n+  (copysigns (copysigns @0 @1) @2)\n+  (copysigns @0 @2)))\n+\n+/* copysign(x,y)*copysign(x,y) -> x*x.  */\n+(for copysigns (COPYSIGN)\n+ (simplify\n+  (mult (copysigns@2 @0 @1) @2)\n+  (mult @0 @0)))\n+\n+/* ccos(-x) -> ccos(x).  Similarly for ccosh.  */\n+(for ccoss (CCOS CCOSH)\n+ (simplify\n+  (ccoss (negate @0))\n+   (ccoss @0)))\n \n /* Fold (a * (1 << b)) into (a << b)  */\n (simplify"}]}