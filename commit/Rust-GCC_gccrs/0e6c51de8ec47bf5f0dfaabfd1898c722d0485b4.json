{"sha": "0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2YzUxZGU4ZWM0N2JmNWYwZGZhYWJmZDE4OThjNzIyZDA0ODViNA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-08-24T01:15:21Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-08-24T01:15:21Z"}, "message": "reorg.c (fill_slots_from_thread): Improve for TARGET_FLAGS_REGNUM\n\nThis handles TARGET_FLAGS_REGNUM clobbering insns as delay-slot\nfillers using a method similar to that in commit 33c2207d3fda,\nwhere care was taken for fill_simple_delay_slots to allow such\ninsns when scanning for delay-slot fillers *backwards* (before\nthe insn).\n\nA TARGET_FLAGS_REGNUM target is typically a former cc0 target.\nFor cc0 targets, insns don't mention clobbering cc0, so the\nclobbers are mentioned in the \"resources\" only as a special\nentity and only for compare-insns and branches, where the cc0\nvalue matters.\n\nIn contrast, with TARGET_FLAGS_REGNUM, most insns clobber it and\nthe register liveness detection in reorg.c / resource.c treats\nthat as a blocker (for other insns mentioning it, i.e. most)\nwhen looking for delay-slot-filling candidates.  This means that\nwhen comparing core and performance for a delay-slot cc0 target\nbefore and after the de-cc0 conversion, the inability to fill a\ndelay slot after conversion manifests as a regression.  This was\none such case, for CRIS, with random_bitstring in\ngcc.c-torture/execute/arith-rand-ll.c as well as the target\nlibgcc division function.\n\nAfter this, all known performance regressions compared to cc0\nare fixed.\n\ngcc:\n\tPR target/93372\n\t* reorg.c (fill_slots_from_thread): Allow trial insns that clobber\n\tTARGET_FLAGS_REGNUM as delay-slot fillers.\n\ngcc/testsuite:\n\tPR target/93372\n\t* gcc.target/cris/pr93372-47.c: New test.", "tree": {"sha": "c226f91c199bb1f810f865455c5acebd873855d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c226f91c199bb1f810f865455c5acebd873855d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baf917af016236878b1246c7412735e8e831bf16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf917af016236878b1246c7412735e8e831bf16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf917af016236878b1246c7412735e8e831bf16"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "613831e02cf7546844b4ae1a1301180de0fa1a6e", "filename": "gcc/reorg.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4", "patch": "@@ -2412,6 +2412,21 @@ fill_slots_from_thread (rtx_jump_insn *insn, rtx condition,\n   CLEAR_RESOURCE (&needed);\n   CLEAR_RESOURCE (&set);\n \n+  /* Handle the flags register specially, to be able to accept a\n+     candidate that clobbers it.  See also fill_simple_delay_slots.  */\n+  bool filter_flags\n+    = (slots_to_fill == 1\n+       && targetm.flags_regnum != INVALID_REGNUM\n+       && find_regno_note (insn, REG_DEAD, targetm.flags_regnum));\n+  struct resources fset;\n+  struct resources flags_res;\n+  if (filter_flags)\n+    {\n+      CLEAR_RESOURCE (&fset);\n+      CLEAR_RESOURCE (&flags_res);\n+      SET_HARD_REG_BIT (flags_res.regs, targetm.flags_regnum);\n+    }\n+\n   /* If we do not own this thread, we must stop as soon as we find\n      something that we can't put in a delay slot, since all we can do\n      is branch into THREAD at a later point.  Therefore, labels stop\n@@ -2440,8 +2455,18 @@ fill_slots_from_thread (rtx_jump_insn *insn, rtx condition,\n       /* If TRIAL conflicts with the insns ahead of it, we lose.  Also,\n \t don't separate or copy insns that set and use CC0.  */\n       if (! insn_references_resource_p (trial, &set, true)\n-\t  && ! insn_sets_resource_p (trial, &set, true)\n+\t  && ! insn_sets_resource_p (trial, filter_flags ? &fset : &set, true)\n \t  && ! insn_sets_resource_p (trial, &needed, true)\n+\t  /* If we're handling sets to the flags register specially, we\n+\t     only allow an insn into a delay-slot, if it either:\n+\t     - doesn't set the flags register,\n+\t     - the \"set\" of the flags register isn't used (clobbered),\n+\t     - insns between the delay-slot insn and the trial-insn\n+\t     as accounted in \"set\", have not affected the flags register.  */\n+\t  && (! filter_flags\n+\t      || ! insn_sets_resource_p (trial, &flags_res, true)\n+\t      || find_regno_note (trial, REG_UNUSED, targetm.flags_regnum)\n+\t      || ! TEST_HARD_REG_BIT (set.regs, targetm.flags_regnum))\n \t  && (!HAVE_cc0 || (! (reg_mentioned_p (cc0_rtx, pat)\n \t\t\t      && (! own_thread || ! sets_cc0_p (pat)))))\n \t  && ! can_throw_internal (trial))\n@@ -2619,6 +2644,16 @@ fill_slots_from_thread (rtx_jump_insn *insn, rtx condition,\n       lose = 1;\n       mark_set_resources (trial, &set, 0, MARK_SRC_DEST_CALL);\n       mark_referenced_resources (trial, &needed, true);\n+      if (filter_flags)\n+\t{\n+\t  mark_set_resources (trial, &fset, 0, MARK_SRC_DEST_CALL);\n+\n+\t  /* Groups of flags-register setters with users should not\n+\t     affect opportunities to move flags-register-setting insns\n+\t     (clobbers) into the delay-slot.  */\n+\t  CLEAR_HARD_REG_BIT (needed.regs, targetm.flags_regnum);\n+\t  CLEAR_HARD_REG_BIT (fset.regs, targetm.flags_regnum);\n+\t}\n \n       /* Ensure we don't put insns between the setting of cc and the comparison\n \t by moving a setting of cc into an earlier delay slot since these insns"}, {"sha": "8d80ae6b4aa9a9adb5b34af385fd56f0ac554960", "filename": "gcc/testsuite/gcc.target/cris/pr93372-47.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-47.c?ref=0e6c51de8ec47bf5f0dfaabfd1898c722d0485b4", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=v10\" } */\n+/* { dg-final { scan-assembler-times {\\tnop} 1 } } */\n+\n+/* A somewhat brittle test-case, checking that we have (only) one\n+   unfilled delay-slot in random_bitstring: there might be none or two\n+   or more, and general improvements may lead to unfilled delay-slots.\n+   When the scan-assembler-times directive regresses, re-run\n+   gcc.c-torture/execute/arith-rand-ll.c, check cycle-level\n+   execution-time regressions in random_bitstring and take appropriate\n+   action.  */\n+\n+static long long\n+simple_rand ()\n+{\n+  static unsigned long long seed = 47114711;\n+  unsigned long long this = seed * 1103515245 + 12345;\n+  seed = this;\n+  return this >> 8;\n+}\n+\n+unsigned long long int\n+random_bitstring ()\n+{\n+  unsigned long long int x;\n+  int n_bits;\n+  long long ran;\n+  int tot_bits = 0;\n+\n+  x = 0;\n+  for (;;)\n+    {\n+      ran = simple_rand ();\n+      n_bits = (ran >> 1) % 16;\n+      tot_bits += n_bits;\n+\n+      if (n_bits == 0)\n+\treturn x;\n+      else\n+\t{\n+\t  x <<= n_bits;\n+\t  if (ran & 1)\n+\t    x |= (1 << n_bits) - 1;\n+\n+\t  if (tot_bits > 8 * sizeof (long long) + 6)\n+\t    return x;\n+\t}\n+    }\n+}"}]}