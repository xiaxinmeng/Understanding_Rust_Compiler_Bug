{"sha": "ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlMmMwNTUzOWQ1ZWM2YmZjNDE1NGZjZGM3MWM0MWFkZjkwMGEyOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-29T00:39:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-29T00:39:37Z"}, "message": "PR libstdc++/86910 fix filesystem::create_directories\n\nImplement the proposed semantics from P1164R0, which reverts the changes\nof LWG 2935. This means that failure to create a directory because a\nnon-directory already exists with that name will be reported as an\nerror.\n\nWhile rewriting the function, also fix PR 87846, which is a result of\nthe C++17 changes to how a trailing slash on a path affects the last\ncomponent of a path.\n\n\tPR libstdc++/86910\n\tPR libstdc++/87846\n\t* src/filesystem/ops.cc (experimental::create_directories): Report\n\tan error when the path resolves to an existing non-directory (P1164).\n\t* src/filesystem/std-ops.cc (create_directories): Likewise. Handle\n\tempty filenames due to trailing slashes.\n\t* testsuite/27_io/filesystem/operations/create_directories.cc: Test\n\twhen some component of the path exists and is not a directory. Test\n\ttrailing slashes.\n\t* testsuite/experimental/filesystem/operations/create_directories.cc:\n\tLikewise.\n\nFrom-SVN: r266598", "tree": {"sha": "ca81cca12fb5d845c034143ff054836d87df5c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca81cca12fb5d845c034143ff054836d87df5c23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2182a27d856af0fb660db77a7751dc5a2ba0df59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2182a27d856af0fb660db77a7751dc5a2ba0df59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2182a27d856af0fb660db77a7751dc5a2ba0df59"}], "stats": {"total": 217, "additions": 194, "deletions": 23}, "files": [{"sha": "607edb9beb31eecd5023e98134205fd056be966a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "patch": "@@ -1,3 +1,17 @@\n+2018-11-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/86910\n+\tPR libstdc++/87846\n+\t* src/filesystem/ops.cc (experimental::create_directories): Report\n+\tan error when the path resolves to an existing non-directory (P1164).\n+\t* src/filesystem/std-ops.cc (create_directories): Likewise. Handle\n+\tempty filenames due to trailing slashes.\n+\t* testsuite/27_io/filesystem/operations/create_directories.cc: Test\n+\twhen some component of the path exists and is not a directory. Test\n+\ttrailing slashes.\n+\t* testsuite/experimental/filesystem/operations/create_directories.cc:\n+\tLikewise.\n+\n 2018-11-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/83306"}, {"sha": "a6ae75ff7346a112b8986dba816144c82b27e851", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "patch": "@@ -423,6 +423,19 @@ fs::create_directories(const path& p, error_code& ec) noexcept\n       ec = std::make_error_code(errc::invalid_argument);\n       return false;\n     }\n+\n+  file_status st = symlink_status(p, ec);\n+  if (is_directory(st))\n+    return false;\n+  else if (ec && !status_known(st))\n+    return false;\n+  else if (exists(st))\n+    {\n+      if (!ec)\n+\tec = std::make_error_code(std::errc::not_a_directory);\n+      return false;\n+    }\n+\n   std::stack<path> missing;\n   path pp = p;\n \n@@ -431,24 +444,29 @@ fs::create_directories(const path& p, error_code& ec) noexcept\n       ec.clear();\n       const auto& filename = pp.filename();\n       if (!is_dot(filename) && !is_dotdot(filename))\n-\tmissing.push(pp);\n-      pp.remove_filename();\n+\t{\n+\t  missing.push(std::move(pp));\n+\t  pp = missing.top().parent_path();\n+\t}\n+      else\n+\tpp = pp.parent_path();\n     }\n \n   if (ec || missing.empty())\n     return false;\n \n+  bool created;\n   do\n     {\n       const path& top = missing.top();\n-      create_directory(top, ec);\n-      if (ec && is_directory(top))\n-\tec.clear();\n+      created = create_directory(top, ec);\n+      if (ec)\n+\treturn false;\n       missing.pop();\n     }\n-  while (!missing.empty() && !ec);\n+  while (!missing.empty());\n \n-  return missing.empty();\n+  return created;\n }\n \n namespace"}, {"sha": "2f9a76ffaa1688a30b141d72f99cac210375fda1", "filename": "libstdc++-v3/src/filesystem/std-ops.cc", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc?ref=ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "patch": "@@ -646,38 +646,74 @@ fs::create_directories(const path& p, error_code& ec)\n       ec = std::make_error_code(errc::invalid_argument);\n       return false;\n     }\n+\n+  file_status st = symlink_status(p, ec);\n+  if (is_directory(st))\n+    return false;\n+  else if (ec && !status_known(st))\n+    return false;\n+  else if (exists(st))\n+    {\n+      if (!ec)\n+\tec = std::make_error_code(std::errc::not_a_directory);\n+      return false;\n+    }\n+\n   std::stack<path> missing;\n   path pp = p;\n \n-  while (pp.has_filename() && status(pp, ec).type() == file_type::not_found)\n+  // Strip any trailing slash\n+  if (pp.has_relative_path() && !pp.has_filename())\n+    pp = pp.parent_path();\n+\n+  do\n     {\n-      ec.clear();\n       const auto& filename = pp.filename();\n-      if (!is_dot(filename) && !is_dotdot(filename))\n-\tmissing.push(pp);\n-      pp = pp.parent_path();\n+      if (is_dot(filename) || is_dotdot(filename))\n+\tpp = pp.parent_path();\n+      else\n+\t{\n+\t  missing.push(std::move(pp));\n+\t  if (missing.size() > 1000) // sanity check\n+\t    {\n+\t      ec = std::make_error_code(std::errc::filename_too_long);\n+\t      return false;\n+\t    }\n+\t  pp = missing.top().parent_path();\n+\t}\n \n-      if (missing.size() > 1000) // sanity check\n+      if (pp.empty())\n+\tbreak;\n+\n+      st = status(pp, ec);\n+      if (exists(st))\n \t{\n-\t  ec = std::make_error_code(std::errc::filename_too_long);\n-\t  return false;\n+\t  if (ec)\n+\t    return false;\n+\t  if (!is_directory(st))\n+\t    {\n+\t      ec = std::make_error_code(std::errc::not_a_directory);\n+\t      return false;\n+\t    }\n \t}\n-    }\n \n-  if (ec || missing.empty())\n-    return false;\n+      if (ec && exists(st))\n+\treturn false;\n+    }\n+  while (st.type() == file_type::not_found);\n \n+  bool created;\n   do\n     {\n       const path& top = missing.top();\n-      create_directory(top, ec);\n-      if (ec && is_directory(top))\n-\tec.clear();\n+      created = create_directory(top, ec);\n+      if (ec)\n+\treturn false;\n       missing.pop();\n     }\n-  while (!missing.empty() && !ec);\n+  while (!missing.empty());\n \n-  return missing.empty();\n+  return created;\n }\n \n namespace"}, {"sha": "a85a15eaea836edf9d6528f899e18ced979352c2", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/create_directories.cc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc?ref=ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "patch": "@@ -76,8 +76,59 @@ test01()\n   VERIFY( count == 6 );\n }\n \n+void\n+test02()\n+{\n+  // PR libstdc++/86910\n+  const auto p = __gnu_test::nonexistent_path();\n+  std::error_code ec;\n+  bool result;\n+\n+  {\n+    __gnu_test::scoped_file file;\n+\n+    result = create_directories(file.path, ec);\n+    VERIFY( !result );\n+    VERIFY( ec == std::errc::not_a_directory );\n+    result = create_directories(file.path / \"foo\", ec);\n+    VERIFY( !result );\n+    VERIFY( ec == std::errc::not_a_directory );\n+  }\n+\n+  create_directories(p);\n+  {\n+    __gnu_test::scoped_file dir(p, __gnu_test::scoped_file::adopt_file);\n+    __gnu_test::scoped_file file(dir.path/\"file\");\n+\n+    result = create_directories(file.path, ec);\n+    VERIFY( !result );\n+    VERIFY( ec == std::errc::not_a_directory );\n+    result = create_directories(file.path/\"../bar\", ec);\n+    VERIFY( !result );\n+    VERIFY( ec == std::errc::not_a_directory );\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  // PR libstdc++/87846\n+  const auto p = __gnu_test::nonexistent_path() / \"\";\n+  bool result = create_directories(p);\n+  VERIFY( result );\n+  VERIFY( exists(p) );\n+  remove(p);\n+  result = create_directories(p/\"foo/\");\n+  VERIFY( result );\n+  VERIFY( exists(p) );\n+  VERIFY( exists(p/\"foo\") );\n+  remove_all(p);\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}, {"sha": "e25ccb6c4f1c25c484f484d02526427dbb61e0b0", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/create_directories.cc", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe2c05539d5ec6bfc4154fcdc71c41adf900a29/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc?ref=ffe2c05539d5ec6bfc4154fcdc71c41adf900a29", "patch": "@@ -69,8 +69,60 @@ test01()\n   VERIFY( count == 6 );\n }\n \n+void\n+test02()\n+{\n+  // PR libstdc++/86910\n+  const auto p = __gnu_test::nonexistent_path();\n+  std::error_code ec;\n+  bool result;\n+\n+  {\n+    __gnu_test::scoped_file file;\n+\n+    result = create_directories(file.path, ec);\n+    VERIFY( !result );\n+    VERIFY( ec == std::errc::not_a_directory );\n+    result = create_directories(file.path / \"foo\", ec);\n+    VERIFY( !result );\n+    __builtin_printf(\"%d\\n\", ec.value());\n+    VERIFY( ec == std::errc::not_a_directory );\n+  }\n+\n+  create_directories(p);\n+  {\n+    __gnu_test::scoped_file dir(p, __gnu_test::scoped_file::adopt_file);\n+    __gnu_test::scoped_file file(dir.path/\"file\");\n+\n+    result = create_directories(file.path, ec);\n+    VERIFY( !result );\n+    VERIFY( ec == std::errc::not_a_directory );\n+    result = create_directories(file.path/\"../bar\", ec);\n+    VERIFY( !result );\n+    VERIFY( ec == std::errc::not_a_directory );\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  // PR libstdc++/87846\n+  const auto p = __gnu_test::nonexistent_path() / \"/\";\n+  bool result = create_directories(p);\n+  VERIFY( result );\n+  VERIFY( exists(p) );\n+  remove(p);\n+  result = create_directories(p/\"foo/\");\n+  VERIFY( result );\n+  VERIFY( exists(p) );\n+  VERIFY( exists(p/\"foo\") );\n+  remove_all(p);\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}]}