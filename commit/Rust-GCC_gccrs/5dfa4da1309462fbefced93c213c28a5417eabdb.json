{"sha": "5dfa4da1309462fbefced93c213c28a5417eabdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRmYTRkYTEzMDk0NjJmYmVmY2VkOTNjMjEzYzI4YTU0MTdlYWJkYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@midnite.ec.rhno.columbia.edu", "date": "1999-02-08T20:27:27Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-02-08T20:27:27Z"}, "message": "cpplib.c (special_symbol): Rewrite.\n\n1999-02-08 23:25 -0500  Zack Weinberg  <zack@midnite.ec.rhno.columbia.edu>\n\t* cpplib.c (special_symbol): Rewrite.  Don't copy things\n\t  multiple times.  Handle __STDC__ specially.  T_CONST\n\t  indicates a constant /string/.  Don't handle T_*_TYPE and\n\t  T_SPEC_DEFINED.  Use cpp_buf_line_and_col instead of\n\t  adjust_position.  Determine the file buffer only if needed.\n\t  (initialize_builtins): Handle __SIZE_TYPE__,\n\t  __PTRDIFF_TYPE__, __WCHAR_TYPE__, __USER_LABEL_PREFIX__, and\n\t  __REGISTER_PREFIX__ with T_CONST special hashtab entries.\n\t  Don't provide __OBJC__; the driver does that.\t Provide\n\t  __STDC_VERSION__, using T_CONST.  Use T_STDC for\n\t  __STDC__.  Give install the length of all symbols defined.\n\t  (eval_if_expression): Drop code to insert and remove the\n\t  \"defined\" special symbol.\n\t* cpplib.h: Remove SELF_DIR_DUMMY (no longer used).  Remove\n\t  T_*_TYPE and T_SPEC_DEFINED from enum node_type; add T_STDC.\n\t* cpphash.c (install): Drop the `ivalue' parameter.  Constify\n\t  the `value' parameter.  All callers changed.\n\t* cpphash.h (install): Change prototype to match.\n\t  (union hashval): Remove `ival' member.\n\t* cppexp.c (cpp_lex): Handle `defined' here.\n\nFrom-SVN: r25097", "tree": {"sha": "c079b4e9cc9eae1f223a405bc08b6a1cd358fb74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c079b4e9cc9eae1f223a405bc08b6a1cd358fb74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dfa4da1309462fbefced93c213c28a5417eabdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfa4da1309462fbefced93c213c28a5417eabdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dfa4da1309462fbefced93c213c28a5417eabdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfa4da1309462fbefced93c213c28a5417eabdb/comments", "author": null, "committer": null, "parents": [{"sha": "1c6c21c8a84cd07a513ebbf13e18325ea1bb1f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6c21c8a84cd07a513ebbf13e18325ea1bb1f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6c21c8a84cd07a513ebbf13e18325ea1bb1f18"}], "stats": {"total": 405, "additions": 189, "deletions": 216}, "files": [{"sha": "542e135a3d44f2e7d3dd02aeb7ae87c92baf764e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dfa4da1309462fbefced93c213c28a5417eabdb", "patch": "@@ -1,3 +1,28 @@\n+1999-02-08 23:25 -0500  Zack Weinberg  <zack@midnite.ec.rhno.columbia.edu>\n+\n+\t* cpplib.c (special_symbol): Rewrite.  Don't copy things\n+\t  multiple times.  Handle __STDC__ specially.  T_CONST\n+\t  indicates a constant /string/.  Don't handle T_*_TYPE and\n+\t  T_SPEC_DEFINED.  Use cpp_buf_line_and_col instead of\n+\t  adjust_position.  Determine the file buffer only if needed.\n+\t  (initialize_builtins): Handle __SIZE_TYPE__,\n+\t  __PTRDIFF_TYPE__, __WCHAR_TYPE__, __USER_LABEL_PREFIX__, and\n+\t  __REGISTER_PREFIX__ with T_CONST special hashtab entries.\n+\t  Don't provide __OBJC__; the driver does that.\t Provide\n+\t  __STDC_VERSION__, using T_CONST.  Use T_STDC for\n+\t  __STDC__.  Give install the length of all symbols defined.\n+\t  (eval_if_expression): Drop code to insert and remove the\n+\t  \"defined\" special symbol.\n+\n+\t* cpplib.h: Remove SELF_DIR_DUMMY (no longer used).  Remove\n+\t  T_*_TYPE and T_SPEC_DEFINED from enum node_type; add T_STDC.\n+\n+\t* cpphash.c (install): Drop the `ivalue' parameter.  Constify\n+\t  the `value' parameter.  All callers changed.\n+\t* cpphash.h (install): Change prototype to match.\n+\t  (union hashval): Remove `ival' member.\n+\t* cppexp.c (cpp_lex): Handle `defined' here.\n+\n Mon Feb  8 17:29:42 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.h (EXTRA_CONSTRAINT): Fix comment."}, {"sha": "093412e3b2663d5581e35d868ff5db86736b3376", "filename": "gcc/cppexp.c", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=5dfa4da1309462fbefced93c213c28a5417eabdb", "patch": "@@ -1,5 +1,5 @@\n /* Parse C expressions for CCCP.\n-   Copyright (C) 1987, 1992, 1994, 1995, 1997, 1998 Free Software Foundation.\n+   Copyright (C) 1987, 92, 94, 95, 97, 98, 1999 Free Software Foundation.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -109,6 +109,8 @@ static long right_shift PARAMS ((cpp_reader *, long, int, unsigned long));\n #define HOST_BITS_PER_WIDE_INT (CHAR_BIT * sizeof (HOST_WIDE_INT))\n #endif\n \n+#define SKIP_WHITE_SPACE(p) do { while (is_hor_space[*p]) p++; } while (0)\n+\n struct operation {\n     short op;\n     char rprio; /* Priority of op (relative to it right operand).  */\n@@ -435,12 +437,52 @@ cpp_lex (pfile, skip_evaluation)\n       return parse_charconst (pfile, tok_start, tok_end);\n \n     case CPP_NAME:\n-      if (CPP_WARN_UNDEF (pfile) && !skip_evaluation)\n-\tcpp_warning (pfile, \"`%.*s' is not defined\",\n-\t\t     (int) (tok_end - tok_start), tok_start);\n       op.op = INT;\n       op.unsignedp = 0;\n       op.value = 0;\n+      if (strcmp (tok_start, \"defined\"))\n+\t{\n+\t  if (CPP_WARN_UNDEF (pfile) && !skip_evaluation)\n+\t    cpp_warning (pfile, \"`%.*s' is not defined\",\n+\t\t\t (int) (tok_end - tok_start), tok_start);\n+\t}\n+      else\n+\t{\n+\t  int paren = 0, len;\n+\t  cpp_buffer *ip = CPP_BUFFER (pfile);\n+\t  U_CHAR *tok;\n+\n+\t  SKIP_WHITE_SPACE (ip->cur);\n+\t  if (*ip->cur == '(')\n+\t    {\n+\t      paren++;\n+\t      ip->cur++;\t\t\t/* Skip over the paren */\n+\t      SKIP_WHITE_SPACE (ip->cur);\n+\t    }\n+\n+\t  if (!is_idstart[*ip->cur])\n+\t    goto oops;\n+\t  if (ip->cur[0] == 'L' && (ip->cur[1] == '\\'' || ip->cur[1] == '\"'))\n+\t    goto oops;\n+\t  tok = ip->cur;\n+\t  while (is_idchar[*ip->cur])\n+\t    ++ip->cur;\n+\t  len = ip->cur - tok;\n+\t  SKIP_WHITE_SPACE (ip->cur);\n+\t  if (paren)\n+\t    {\n+\t      if (*ip->cur != ')')\n+\t\tgoto oops;\n+\t      ++ip->cur;\n+\t    }\n+\t  if (cpp_lookup (pfile, tok, len, -1))\n+\t    op.value = 1;\n+\n+\t}\n+      return op;\n+\n+    oops:\n+      cpp_error (pfile, \"`defined' without an identifier\");\n       return op;\n \n     case CPP_OTHER:"}, {"sha": "bb0b46d5d2faede77829c6443034ee5c49a2a011", "filename": "gcc/cpphash.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=5dfa4da1309462fbefced93c213c28a5417eabdb", "patch": "@@ -131,8 +131,8 @@ delete_macro (hp)\n }\n \n /* Install a name in the main hash table, even if it is already there.\n-     name stops with first non alphanumeric, except leading '#'.\n-   caller must check against redefinition if that is desired.\n+   Name stops with first non alphanumeric, except leading '#'.\n+   Caller must check against redefinition if that is desired.\n    delete_macro () removes things installed by install () in fifo order.\n    this is important because of the `defined' special symbol used\n    in #if, and also if pushdef/popdef directives are ever implemented.\n@@ -144,12 +144,11 @@ delete_macro (hp)\n    Otherwise, compute the hash code.  */\n \n HASHNODE *\n-install (name, len, type, ivalue, value, hash)\n+install (name, len, type, value, hash)\n      U_CHAR *name;\n      int len;\n      enum node_type type;\n-     int ivalue;\n-     char *value;\n+     const char *value;\n      int hash;\n {\n   register HASHNODE *hp;\n@@ -177,10 +176,7 @@ install (name, len, type, ivalue, value, hash)\n     hp->next->prev = hp;\n   hp->type = type;\n   hp->length = len;\n-  if (hp->type == T_CONST)\n-    hp->value.ival = ivalue;\n-  else\n-    hp->value.cpval = value;\n+  hp->value.cpval = value;\n   hp->name = ((U_CHAR *) hp) + sizeof (HASHNODE);\n   bcopy (name, hp->name, len);\n   hp->name[len] = 0;"}, {"sha": "28271f7e39693e970f35378b7e0d7ce7fb9d7646", "filename": "gcc/cpphash.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=5dfa4da1309462fbefced93c213c28a5417eabdb", "patch": "@@ -16,12 +16,12 @@ along with this program; if not, write to the Free Software\n Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n /* different kinds of things that can appear in the value field\n-   of a hash node.  Actually, this may be useless now. */\n-union hashval {\n-  int ival;\n-  char *cpval;\n-  DEFINITION *defn;\n-  struct hashnode *aschain; /* for #assert */\n+   of a hash node. */\n+union hashval\n+{\n+  const char *cpval;\t\t/* some predefined macros */\n+  DEFINITION *defn;\t\t/* #define */\n+  struct hashnode *aschain;\t/* #assert */\n };\n \n struct hashnode {\n@@ -49,6 +49,7 @@ typedef struct hashnode HASHNODE;\n #define HASHSTEP(old, c) ((old << 2) + c)\n #define MAKE_POS(v) (v & 0x7fffffff) /* make number positive */\n \n-extern HASHNODE *install PARAMS ((U_CHAR *,int,enum node_type, int,char *,int));\n+extern HASHNODE *install PARAMS ((U_CHAR *, int, enum node_type,\n+\t\t\t\t  const char *, int));\n extern int hashf PARAMS ((const U_CHAR *, int, int));\n extern void delete_macro PARAMS ((HASHNODE *));"}, {"sha": "79046593964c0671e8ce2b7300d4a4b4159968bc", "filename": "gcc/cpplib.c", "status": "modified", "additions": 103, "deletions": 184, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=5dfa4da1309462fbefced93c213c28a5417eabdb", "patch": "@@ -1435,7 +1435,7 @@ do_define (pfile, keyword)\n \t that for this new definition now.  */\n       if (CPP_OPTIONS (pfile)->debug_output && keyword)\n \tpass_thru_directive (macro, end, pfile, keyword);\n-      install (mdef.symnam, mdef.symlen, T_MACRO, 0,\n+      install (mdef.symnam, mdef.symlen, T_MACRO,\n \t       (char *) mdef.defn, hashcode);\n     }\n \n@@ -1883,201 +1883,121 @@ special_symbol (hp, pfile)\n      cpp_reader *pfile;\n {\n   const char *buf;\n-  char *wbuf;\n   int len;\n-  int true_indepth;\n-  cpp_buffer *ip = NULL;\n-  struct tm *timebuf;\n-\n-  int paren = 0;\t\t/* For special `defined' keyword */\n-\n-#if 0\n-  if (pcp_outfile && pcp_inside_if\n-      && hp->type != T_SPEC_DEFINED && hp->type != T_CONST)\n-    cpp_error (pfile,\n-\t       \"Predefined macro `%s' used inside `#if' during precompilation\",\n-\t       hp->name);\n-#endif\n-    \n-  for (ip = CPP_BUFFER (pfile); ; ip = CPP_PREV_BUFFER (ip))\n-    {\n-      if (ip == CPP_NULL_BUFFER (pfile))\n-\t{\n-\t  cpp_error (pfile, \"cccp error: not in any file?!\");\n-\t  return;\t\t\t/* the show must go on */\n-\t}\n-      if (ip->fname != NULL)\n-\tbreak;\n-    }\n \n   switch (hp->type)\n     {\n     case T_FILE:\n     case T_BASE_FILE:\n       {\n-\tchar *string;\n+\tcpp_buffer *ip = CPP_BUFFER (pfile);\n \tif (hp->type == T_BASE_FILE)\n \t  {\n \t    while (CPP_PREV_BUFFER (ip) != CPP_NULL_BUFFER (pfile))\n \t      ip = CPP_PREV_BUFFER (ip);\n \t  }\n-\tstring = ip->nominal_fname;\n+\telse\n+\t  {\n+\t    ip = CPP_BUFFER (pfile);\n+\t    while (! ip->nominal_fname && ip != CPP_NULL_BUFFER (pfile))\n+\t      ip = CPP_PREV_BUFFER (ip);\n+\t  }\n+\n+\tbuf = ip->nominal_fname;\n \n-\tif (!string)\n-\t  string = \"\";\n-\tCPP_RESERVE (pfile, 3 + 4 * strlen (string));\n-\tquote_string (pfile, string);\n+\tif (!buf)\n+\t  buf = \"\";\n+\tCPP_RESERVE (pfile, 3 + 4 * strlen (buf));\n+\tquote_string (pfile, buf);\n \treturn;\n       }\n \n     case T_INCLUDE_LEVEL:\n-      true_indepth = 0;\n-      ip = CPP_BUFFER (pfile);\n-      for (;  ip != CPP_NULL_BUFFER (pfile); ip = CPP_PREV_BUFFER (ip))\n-\tif (ip->fname != NULL)\n-\t  true_indepth++;\n-\n-      wbuf = (char *) alloca (8); /* Eight bytes ought to be more than enough*/\n-      sprintf (wbuf, \"%d\", true_indepth - 1);\n-      buf = wbuf;\n-      break;\n-\n-  case T_VERSION:\n-      wbuf = (char *) alloca (3 + strlen (version_string));\n-      sprintf (wbuf, \"\\\"%s\\\"\", version_string);\n-      buf = wbuf;\n-      break;\n-\n-#ifndef NO_BUILTIN_SIZE_TYPE\n-    case T_SIZE_TYPE:\n-      buf = SIZE_TYPE;\n-      break;\n-#endif\n+      {\n+\tint true_indepth = 0;\n+\tcpp_buffer *ip = CPP_BUFFER (pfile);\n+\tfor (;  ip != CPP_NULL_BUFFER (pfile); ip = CPP_PREV_BUFFER (ip))\n+\t  if (ip->fname != NULL)\n+\t    true_indepth++;\n \n-#ifndef NO_BUILTIN_PTRDIFF_TYPE\n-    case T_PTRDIFF_TYPE:\n-      buf = PTRDIFF_TYPE;\n-      break;\n-#endif\n+\tCPP_RESERVE (pfile, 10);\n+\tsprintf (CPP_PWRITTEN (pfile), \"%d\", true_indepth);\n+\tCPP_ADJUST_WRITTEN (pfile, strlen (CPP_PWRITTEN (pfile)));\n+\treturn;\n+      }\n \n-    case T_WCHAR_TYPE:\n-      buf = CPP_WCHAR_TYPE (pfile);\n-    break;\n+    case T_VERSION:\n+      len = strlen (version_string);\n+      CPP_RESERVE (pfile, 3 + len);\n+      CPP_PUTC_Q (pfile, '\"');\n+      CPP_PUTS_Q (pfile, version_string, len);\n+      CPP_PUTC_Q (pfile, '\"');\n+      CPP_NUL_TERMINATE_Q (pfile);\n+      return;\n \n-    case T_USER_LABEL_PREFIX_TYPE:\n-      buf = user_label_prefix;\n-      break;\n+    case T_CONST:\n+      buf = hp->value.cpval;\n+      if (!buf)\n+\treturn;\n \n-    case T_REGISTER_PREFIX_TYPE:\n-      buf = REGISTER_PREFIX;\n-      break;\n+      len = strlen (buf);\n+      CPP_RESERVE (pfile, len + 1);\n+      CPP_PUTS_Q (pfile, buf, len);\n+      CPP_NUL_TERMINATE_Q (pfile);\n+      return;\n \n-  case T_CONST:\n-      wbuf = (char *) alloca (4 * sizeof (int));\n-      sprintf (wbuf, \"%d\", hp->value.ival);\n+    case T_STDC:\n+      CPP_RESERVE (pfile, 2);\n #ifdef STDC_0_IN_SYSTEM_HEADERS\n+      ip = CPP_BUFFER (pfile);\n+      while (! ip->nominal_fname && ip != CPP_NULL_BUFFER (pfile))\n+\tip = CPP_PREV_BUFFER (ip);\n       if (ip->system_header_p\n-\t  && hp->length == 8 && bcmp (hp->name, \"__STDC__\", 8) == 0\n-\t  && ! cpp_lookup (pfile, (U_CHAR *) \"__STRICT_ANSI__\", -1, -1))\n-\tstrcpy (wbuf, \"0\");\n-#endif\n-#if 0\n-      if (pcp_inside_if && pcp_outfile)\n-\t/* Output a precondition for this macro use */\n-\tfprintf (pcp_outfile, \"#define %s %d\\n\", hp->name, hp->value.ival);\n+\t  && ! cpp_lookup (pfile, (U_CHAR *) \"__STRICT_ANSI__\", 15, -1))\n+\tCPP_PUTC_Q (pfile, '0');\n+      else\n #endif\n-      buf = wbuf;\n-      break;\n+\tCPP_PUTC_Q (pfile, '1');\n+      CPP_NUL_TERMINATE_Q (pfile);\n+      return;\n \n     case T_SPECLINE:\n       {\n-\tlong line = ip->lineno;\n-\tlong col = ip->colno;\n-\tadjust_position (CPP_LINE_BASE (ip), ip->cur, &line, &col);\n+\tlong line;\n+\tcpp_buf_line_and_col (CPP_BUFFER (pfile), &line, NULL);\n \n-\twbuf = (char *) alloca (10);\n-\tsprintf (wbuf, \"%ld\", line);\n-\tbuf = wbuf;\n+\tCPP_RESERVE (pfile, 10);\n+\tsprintf (CPP_PWRITTEN (pfile), \"%ld\", line);\n+\tCPP_ADJUST_WRITTEN (pfile, strlen (CPP_PWRITTEN (pfile)));\n+\treturn;\n       }\n-      break;\n \n     case T_DATE:\n     case T_TIME:\n-      wbuf = (char *) alloca (20);\n-      timebuf = timestamp (pfile);\n-      if (hp->type == T_DATE)\n-\tsprintf (wbuf, \"\\\"%s %2d %4d\\\"\", monthnames[timebuf->tm_mon],\n-\t\t timebuf->tm_mday, timebuf->tm_year + 1900);\n-      else\n-\tsprintf (wbuf, \"\\\"%02d:%02d:%02d\\\"\", timebuf->tm_hour, timebuf->tm_min,\n-\t\t timebuf->tm_sec);\n-      buf = wbuf;\n-      break;\n-\n-    case T_SPEC_DEFINED:\n-      buf = \" 0 \";\t\t/* Assume symbol is not defined */\n-      ip = CPP_BUFFER (pfile);\n-      SKIP_WHITE_SPACE (ip->cur);\n-      if (*ip->cur == '(')\n-\t{\n-\t  paren++;\n-\t  ip->cur++;\t\t\t/* Skip over the paren */\n-\t  SKIP_WHITE_SPACE (ip->cur);\n-\t}\n-\n-      if (!is_idstart[*ip->cur])\n-\tgoto oops;\n-      if (ip->cur[0] == 'L' && (ip->cur[1] == '\\'' || ip->cur[1] == '\"'))\n-\tgoto oops;\n-      if ((hp = cpp_lookup (pfile, ip->cur, -1, -1)))\n-\t{\n-#if 0\n-\t  if (pcp_outfile && pcp_inside_if\n-\t      && (hp->type == T_CONST\n-\t\t  || (hp->type == T_MACRO && hp->value.defn->predefined)))\n-\t    /* Output a precondition for this macro use.  */\n-\t    fprintf (pcp_outfile, \"#define %s\\n\", hp->name);\n-#endif\n-\t  buf = \" 1 \";\n-\t}\n-#if 0\n-      else\n-\tif (pcp_outfile && pcp_inside_if)\n-\t  {\n-\t    /* Output a precondition for this macro use */\n-\t    U_CHAR *cp = ip->bufp;\n-\t    fprintf (pcp_outfile, \"#undef \");\n-\t    while (is_idchar[*cp]) /* Ick! */\n-\t      fputc (*cp++, pcp_outfile);\n-\t    putc ('\\n', pcp_outfile);\n-\t  }\n-#endif\n-      while (is_idchar[*ip->cur])\n-\t++ip->cur;\n-      SKIP_WHITE_SPACE (ip->cur);\n-      if (paren)\n-\t{\n-\t  if (*ip->cur != ')')\n-\t    goto oops;\n-\t  ++ip->cur;\n-\t}\n-      break;\n-\n-    oops:\n+      {\n+\tstruct tm *timebuf;\n+\n+\tCPP_RESERVE (pfile, 20);\n+\ttimebuf = timestamp (pfile);\n+\tif (hp->type == T_DATE)\n+\t  sprintf (CPP_PWRITTEN (pfile), \"\\\"%s %2d %4d\\\"\",\n+\t\t   monthnames[timebuf->tm_mon],\n+\t\t   timebuf->tm_mday, timebuf->tm_year + 1900);\n+\telse\n+\t  sprintf (CPP_PWRITTEN (pfile), \"\\\"%02d:%02d:%02d\\\"\",\n+\t\t   timebuf->tm_hour, timebuf->tm_min, timebuf->tm_sec);\n \n-      cpp_error (pfile, \"`defined' without an identifier\");\n-      break;\n+\tCPP_ADJUST_WRITTEN (pfile, strlen (CPP_PWRITTEN (pfile)));\n+\treturn;\n+      }\n \n     default:\n-      cpp_error (pfile, \"cccp error: invalid special hash type\"); /* time for gdb */\n-      abort ();\n+      cpp_fatal (pfile, \"cpplib internal error: invalid special hash type\");\n+      return;\n     }\n-  len = strlen (buf);\n-  CPP_RESERVE (pfile, len + 1);\n-  CPP_PUTS_Q (pfile, buf, len);\n-  CPP_NUL_TERMINATE_Q (pfile);\n \n-  return;\n+  /* This point should be unreachable. */\n+  abort();\n }\n \n /* Write out a #define command for the special named MACRO_NAME\n@@ -2105,29 +2025,34 @@ static void\n initialize_builtins (pfile)\n      cpp_reader *pfile;\n {\n-  install ((U_CHAR *)\"__LINE__\", -1, T_SPECLINE, 0, 0, -1);\n-  install ((U_CHAR *)\"__DATE__\", -1, T_DATE, 0, 0, -1);\n-  install ((U_CHAR *)\"__FILE__\", -1, T_FILE, 0, 0, -1);\n-  install ((U_CHAR *)\"__BASE_FILE__\", -1, T_BASE_FILE, 0, 0, -1);\n-  install ((U_CHAR *)\"__INCLUDE_LEVEL__\", -1, T_INCLUDE_LEVEL, 0, 0, -1);\n-  install ((U_CHAR *)\"__VERSION__\", -1, T_VERSION, 0, 0, -1);\n+#define NAME(str) (U_CHAR *)str, sizeof str - 1\n+  install (NAME(\"__TIME__\"),\t\t  T_TIME,\t0, -1);\n+  install (NAME(\"__DATE__\"),\t\t  T_DATE,\t0, -1);\n+  install (NAME(\"__FILE__\"),\t\t  T_FILE,\t0, -1);\n+  install (NAME(\"__BASE_FILE__\"),\t  T_BASE_FILE,\t0, -1);\n+  install (NAME(\"__LINE__\"),\t\t  T_SPECLINE,\t0, -1);\n+  install (NAME(\"__INCLUDE_LEVEL__\"),\t  T_INCLUDE_LEVEL, 0, -1);\n+  install (NAME(\"__VERSION__\"),\t\t  T_VERSION,\t0, -1);\n #ifndef NO_BUILTIN_SIZE_TYPE\n-  install ((U_CHAR *)\"__SIZE_TYPE__\", -1, T_SIZE_TYPE, 0, 0, -1);\n+  install (NAME(\"__SIZE_TYPE__\"),\t  T_CONST, SIZE_TYPE, -1);\n #endif\n #ifndef NO_BUILTIN_PTRDIFF_TYPE\n-  install ((U_CHAR *)\"__PTRDIFF_TYPE__ \", -1, T_PTRDIFF_TYPE, 0, 0, -1);\n+  install (NAME(\"__PTRDIFF_TYPE__ \"),\t  T_CONST, PTRDIFF_TYPE, -1);\n #endif\n-  install ((U_CHAR *)\"__WCHAR_TYPE__\", -1, T_WCHAR_TYPE, 0, 0, -1);\n-  install ((U_CHAR *)\"__USER_LABEL_PREFIX__\", -1, T_USER_LABEL_PREFIX_TYPE, 0, 0, -1);\n-  install ((U_CHAR *)\"__REGISTER_PREFIX__\", -1, T_REGISTER_PREFIX_TYPE, 0, 0, -1);\n-  install ((U_CHAR *)\"__TIME__\", -1, T_TIME, 0, 0, -1);\n+  install (NAME(\"__WCHAR_TYPE__\"),\t  T_CONST, WCHAR_TYPE, -1);\n+  install (NAME(\"__USER_LABEL_PREFIX__\"), T_CONST, user_label_prefix, -1);\n+  install (NAME(\"__REGISTER_PREFIX__\"),\t  T_CONST, REGISTER_PREFIX, -1);\n   if (!CPP_TRADITIONAL (pfile))\n-    install ((U_CHAR *)\"__STDC__\", -1, T_CONST, STDC_VALUE, 0, -1);\n-  if (CPP_OPTIONS (pfile)->objc)\n-    install ((U_CHAR *)\"__OBJC__\", -1, T_CONST, 1, 0, -1);\n-/*  This is supplied using a -D by the compiler driver\n-    so that it is present only when truly compiling with GNU C.  */\n-/*  install (\"__GNUC__\", -1, T_CONST, 2, 0, -1);  */\n+    {\n+      install (NAME(\"__STDC__\"),\t  T_STDC,  0, -1);\n+#if 0\n+      if (CPP_OPTIONS (pfile)->c9x)\n+\tinstall (NAME(\"__STDC_VERSION__\"),T_CONST, \"199909L\", -1);\n+      else\n+#endif\n+\tinstall (NAME(\"__STDC_VERSION__\"),T_CONST, \"199409L\", -1);\n+    }\n+#undef NAME\n \n   if (CPP_OPTIONS (pfile)->debug_output)\n     {\n@@ -2144,8 +2069,6 @@ initialize_builtins (pfile)\n       dump_special_to_buffer (pfile, \"__TIME__\");\n       if (!CPP_TRADITIONAL (pfile))\n \tdump_special_to_buffer (pfile, \"__STDC__\");\n-      if (CPP_OPTIONS (pfile)->objc)\n-\tdump_special_to_buffer (pfile, \"__OBJC__\");\n     }\n }\n \f\n@@ -3377,16 +3300,12 @@ static HOST_WIDE_INT\n eval_if_expression (pfile)\n      cpp_reader *pfile;\n {\n-  HASHNODE *save_defined;\n   HOST_WIDE_INT value;\n   long old_written = CPP_WRITTEN (pfile);\n \n-  save_defined = install ((U_CHAR *)\"defined\", -1, T_SPEC_DEFINED, 0, 0, -1);\n   pfile->pcp_inside_if = 1;\n-\n   value = cpp_parse_expr (pfile);\n   pfile->pcp_inside_if = 0;\n-  delete_macro (save_defined);\t/* clean up special symbol */\n \n   CPP_SET_WRITTEN (pfile, old_written); /* Pop */\n \n@@ -5818,7 +5737,7 @@ do_assert (pfile, keyword)\n \n   base = cpp_lookup (pfile, sym, baselen, -1);\n   if (! base)\n-    base = install (sym, baselen, T_ASSERT, 0, 0, -1);\n+    base = install (sym, baselen, T_ASSERT, 0, -1);\n   else if (base->type != T_ASSERT)\n   {\n     /* Token clash - but with what?! */\n@@ -5827,7 +5746,7 @@ do_assert (pfile, keyword)\n     goto error;\n   }\n \n-  this = install (sym, thislen, T_ASSERT, 0,\n+  this = install (sym, thislen, T_ASSERT,\n \t\t  (char *)base->value.aschain, -1);\n   base->value.aschain = this;\n   "}, {"sha": "9572bb8d12e196f1d0a01871cb26fa84edf5e159", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfa4da1309462fbefced93c213c28a5417eabdb/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=5dfa4da1309462fbefced93c213c28a5417eabdb", "patch": "@@ -526,12 +526,7 @@ struct include_hash\n \t\t\t   redundant_include_p */\n   char *buf, *limit;\t/* for file content cache, not yet implemented */\n };\n-    \n-/* If a buffer's dir field is SELF_DIR_DUMMY, it means the file was found\n-   via the same directory as the file that #included it.  */\n-#define SELF_DIR_DUMMY ((struct file_name_list *) (~0))\n \n-    \n /* Name under which this program was invoked.  */\n \n extern char *progname;\n@@ -570,16 +565,11 @@ enum node_type {\n  T_BASE_FILE,\t/* `__BASE_FILE__' */\n  T_INCLUDE_LEVEL, /* `__INCLUDE_LEVEL__' */\n  T_VERSION,\t/* `__VERSION__' */\n- T_SIZE_TYPE,   /* `__SIZE_TYPE__' */\n- T_PTRDIFF_TYPE,   /* `__PTRDIFF_TYPE__' */\n- T_WCHAR_TYPE,   /* `__WCHAR_TYPE__' */\n- T_USER_LABEL_PREFIX_TYPE, /* `__USER_LABEL_PREFIX__' */\n- T_REGISTER_PREFIX_TYPE,   /* `__REGISTER_PREFIX__' */\n  T_TIME,\t/* `__TIME__' */\n- T_CONST,\t/* Constant value, used by `__STDC__' */\n+ T_STDC,\t/* `__STDC__' */\n+ T_CONST,\t/* Constant string, used by `__SIZE_TYPE__' etc */\n  T_MACRO,\t/* macro defined by `#define' */\n  T_DISABLED,\t/* macro temporarily turned off for rescan */\n- T_SPEC_DEFINED, /* special `defined' macro for use in #if statements */\n  T_PCSTRING,\t/* precompiled string (hashval is KEYDEF *) */\n  T_UNUSED\t/* Used for something not defined.  */\n  };"}]}