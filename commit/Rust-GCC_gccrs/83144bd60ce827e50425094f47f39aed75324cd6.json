{"sha": "83144bd60ce827e50425094f47f39aed75324cd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxNDRiZDYwY2U4MjdlNTA0MjUwOTRmNDdmMzlhZWQ3NTMyNGNkNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-07-27T17:13:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-07-27T17:13:29Z"}, "message": "re PR c++/32346 (long long bitfield passed to int argument incorrectly)\n\n\tPR c++/32346\n\t* call.c (convert_for_arg_passing): Only widen bitfields to their\n\tdeclared types if necessary.\n\tPR c++/32346\n\t* g++.dg/expr/bitfield9.C: New test.\n\nFrom-SVN: r126986", "tree": {"sha": "8699cc4407ba2a4a6d5b61ba61f8dcc7daeccc44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8699cc4407ba2a4a6d5b61ba61f8dcc7daeccc44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83144bd60ce827e50425094f47f39aed75324cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83144bd60ce827e50425094f47f39aed75324cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83144bd60ce827e50425094f47f39aed75324cd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83144bd60ce827e50425094f47f39aed75324cd6/comments", "author": null, "committer": null, "parents": [{"sha": "b8475dd604f7461fef93b0fe2b9c52b4a6d206f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8475dd604f7461fef93b0fe2b9c52b4a6d206f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8475dd604f7461fef93b0fe2b9c52b4a6d206f0"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "3c7b8c6d472b79cac05605f6ef1048647a23c966", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83144bd60ce827e50425094f47f39aed75324cd6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83144bd60ce827e50425094f47f39aed75324cd6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83144bd60ce827e50425094f47f39aed75324cd6", "patch": "@@ -1,3 +1,9 @@\n+2007-07-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/32346\n+\t* call.c (convert_for_arg_passing): Only widen bitfields to their\n+\tdeclared types if necessary.\n+\n 2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* parser.c (cp_parser_string_literal, cp_parser_sizeof_operand):"}, {"sha": "1f220f039109d54d015227bb869c46af26765ae5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83144bd60ce827e50425094f47f39aed75324cd6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83144bd60ce827e50425094f47f39aed75324cd6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=83144bd60ce827e50425094f47f39aed75324cd6", "patch": "@@ -4752,7 +4752,27 @@ type_passed_as (tree type)\n tree\n convert_for_arg_passing (tree type, tree val)\n {\n-  val = convert_bitfield_to_declared_type (val);\n+  tree bitfield_type;\n+\n+  /* If VAL is a bitfield, then -- since it has already been converted\n+     to TYPE -- it cannot have a precision greater than TYPE.  \n+\n+     If it has a smaller precision, we must widen it here.  For\n+     example, passing \"int f:3;\" to a function expecting an \"int\" will\n+     not result in any conversion before this point.\n+\n+     If the precision is the same we must not risk widening.  For\n+     example, the COMPONENT_REF for a 32-bit \"long long\" bitfield will\n+     often have type \"int\", even though the C++ type for the field is\n+     \"long long\".  If the value is being passed to a function\n+     expecting an \"int\", then no conversions will be required.  But,\n+     if we call convert_bitfield_to_declared_type, the bitfield will\n+     be converted to \"long long\".  */\n+  bitfield_type = is_bitfield_expr_with_lowered_type (val);\n+  if (bitfield_type \n+      && TYPE_PRECISION (TREE_TYPE (val)) < TYPE_PRECISION (type))\n+    val = convert_to_integer (TYPE_MAIN_VARIANT (bitfield_type), val);\n+\n   if (val == error_mark_node)\n     ;\n   /* Pass classes with copy ctors by invisible reference.  */"}, {"sha": "76494062b00556488aa1090735ea997b9c6fbc2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83144bd60ce827e50425094f47f39aed75324cd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83144bd60ce827e50425094f47f39aed75324cd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83144bd60ce827e50425094f47f39aed75324cd6", "patch": "@@ -1,3 +1,8 @@\n+2007-07-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/32346\n+\t* g++.dg/expr/bitfield9.C: New test.\n+\n 2007-07-26  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/32899\n@@ -22,7 +27,7 @@\n \n \t* gcc.target/mips/ins-1.c: New test.\n \n-2007-07-26  Nathan Froyd  <froydnj@codesourcery.com>\n+'2007-07-26  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR/19232\n \t* gcc.dg/assign-warn-3.c (f0): Declare as inline."}, {"sha": "047b1bf5239cc05555e870daeba1bf567b5c1cc8", "filename": "gcc/testsuite/g++.dg/expr/bitfield9.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83144bd60ce827e50425094f47f39aed75324cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83144bd60ce827e50425094f47f39aed75324cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield9.C?ref=83144bd60ce827e50425094f47f39aed75324cd6", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/32346\n+// { dg-do run }\n+\n+extern \"C\" void abort();\n+\n+struct S {\n+  long long i : 32;\n+};\n+\n+void f(int i, int j) {\n+  if (i != 0xabcdef01)\n+    abort();\n+  if (j != 0)\n+    abort();\n+}\n+\n+void g(S s) {\n+  f(s.i, 0);\n+}\n+\n+int main() {\n+  S s;\n+  s.i = 0xabcdef01;\n+  g(s);\n+}"}]}