{"sha": "5c614849364bcaa926bf2017a69ac6569a14dfa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2MTQ4NDkzNjRiY2FhOTI2YmYyMDE3YTY5YWM2NTY5YTE0ZGZhMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-09T07:31:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-09T07:31:26Z"}, "message": "c_io_libio.h: Tweak.\n\n\n2000-08-08  Benjamin Kosnik  <bkoz@cygnus.com>\n\t    Ulrich Drepper  <drepper@cygnus.com>\n\n\t* config/c_io_libio.h: Tweak.\n\t* config/c_io_libio_codecvt.c: New file.\n\t* libio/Makefile.am: Add c_codecvt.c.\n\t* libio/Makefile.in: Regenerate.\n\t* libio/genops.c (_IO_unbuffer_write): Don't call _IO_SETBUF if the\n\tstream is not orientated.\n\n\t* acinclude.m4: Add config/c_io_libio_codecvt.c dummy file, until\n\tencoding gets fleshed out.\n\n\t* bits/basic_file.h: Add specialization declarations.\n\t* config/c_io_libio.cc: Add specializations for pbackfail, uflow.\n\n\t* config/c_io_libio.h: Add __c_wfile_type.\n\t* bits/basic_file.h: Add _M_wfile.\n\n\t* config/c_io_libio.cc (__basic_file<char>): Initialize the\n\tstreams without setting the orientation of the underlying FILE to\n\teither wide or narrow.\n\t(__basic_file<wchar_t>)): Enable tricky wchar_t io bits.\n\nFrom-SVN: r35583", "tree": {"sha": "d3ca5206944605a943dd451e7be15ec0b3689519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3ca5206944605a943dd451e7be15ec0b3689519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c614849364bcaa926bf2017a69ac6569a14dfa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c614849364bcaa926bf2017a69ac6569a14dfa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c614849364bcaa926bf2017a69ac6569a14dfa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c614849364bcaa926bf2017a69ac6569a14dfa0/comments", "author": null, "committer": null, "parents": [{"sha": "86b8dde6332cf181979edb42ab96f672b40261d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b8dde6332cf181979edb42ab96f672b40261d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86b8dde6332cf181979edb42ab96f672b40261d3"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "8407cb93a71c9ccf8a3ba6a787146bc6b59843c3", "filename": "libstdc++-v3/config/c_io_libio_codecvt.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c614849364bcaa926bf2017a69ac6569a14dfa0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c614849364bcaa926bf2017a69ac6569a14dfa0/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio_codecvt.c?ref=5c614849364bcaa926bf2017a69ac6569a14dfa0", "patch": "@@ -0,0 +1,150 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.\n+   This file is part of the GNU IO Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU General Public License as\n+   published by the Free Software Foundation; either version 2, or (at\n+   your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this library; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+   MA 02111-1307, USA.\n+\n+   As a special exception, if you link this library with files\n+   compiled with a GNU compiler to produce an executable, this does\n+   not cause the resulting executable to be covered by the GNU General\n+   Public License.  This exception does not however invalidate any\n+   other reasons why the executable file might be covered by the GNU\n+   General Public License.  */\n+\n+/* Slightly modified from glibc/libio/iofwide.c */\n+\n+#include <libio.h>\n+\n+\n+/* Prototypes of libio's codecvt functions.  */\n+static enum __codecvt_result \n+do_out(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+       const wchar_t *from_start, const wchar_t *from_end,\n+       const wchar_t **from_stop, char *to_start, char *to_end, \n+       char **to_stop);\n+\n+static enum __codecvt_result \n+do_unshift(struct _IO_codecvt *codecvt, __mbstate_t *statep, char *to_start, \n+\t   char *to_end, char **to_stop);\n+\n+static enum __codecvt_result \n+do_in(struct _IO_codecvt *codecvt, __mbstate_t *statep, \n+      const char *from_start, const char *from_end, const char **from_stop, \n+      wchar_t *to_start, wchar_t *to_end, wchar_t **to_stop);\n+\n+static int \n+do_encoding(struct _IO_codecvt *codecvt);\n+\n+static int \n+do_length(struct _IO_codecvt *codecvt, __mbstate_t *statep, \n+\t  const char *from_start, const char *from_end, _IO_size_t max);\n+\n+static int \n+do_max_length(struct _IO_codecvt *codecvt);\n+\n+static int \n+do_always_noconv(struct _IO_codecvt *codecvt);\n+\n+\n+/* The functions used in `codecvt' for libio are always the same.  */\n+struct _IO_codecvt __c_libio_codecvt =\n+{\n+  .__codecvt_destr = NULL,\t\t/* Destructor, never used.  */\n+  .__codecvt_do_out = do_out,\n+  .__codecvt_do_unshift = do_unshift,\n+  .__codecvt_do_in = do_in,\n+  .__codecvt_do_encoding = do_encoding,\n+  .__codecvt_do_always_noconv = do_always_noconv,\n+  .__codecvt_do_length = do_length,\n+  .__codecvt_do_max_length = do_max_length\n+};\n+\n+static enum __codecvt_result\n+do_out(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+       const wchar_t *from_start, const wchar_t *from_end,\n+       const wchar_t **from_stop, char *to_start, char *to_end,\n+       char **to_stop)\n+{\n+  enum __codecvt_result res = __codecvt_ok;\n+\n+  while (from_start < from_end)\n+    {\n+      if (to_start >= to_end)\n+\t{\n+\t  res = __codecvt_partial;\n+\t  break;\n+\t}\n+      *to_start++ = (char) *from_start++;\n+    }\n+\n+  *from_stop = from_start;\n+  *to_stop = to_start;\n+\n+  return res;\n+}\n+\n+\n+static enum __codecvt_result\n+do_unshift(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+\t   char *to_start, char *to_end, char **to_stop)\n+{\n+  *to_stop = to_start;\n+  return __codecvt_ok;\n+}\n+\n+\n+static enum __codecvt_result\n+do_in(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+      const char *from_start, const char *from_end, const char **from_stop,\n+      wchar_t *to_start, wchar_t *to_end, wchar_t **to_stop)\n+{\n+  enum __codecvt_result res = __codecvt_ok;\n+\n+  while (from_start < from_end)\n+    {\n+      if (to_start >= to_end)\n+\t{\n+\t  res = __codecvt_partial;\n+\t  break;\n+\t}\n+      *to_start++ = (wchar_t) *from_start++;\n+    }\n+\n+  *from_stop = from_start;\n+  *to_stop = to_start;\n+\n+  return res;\n+}\n+\n+\n+static int\n+do_encoding(struct _IO_codecvt *codecvt)\n+{ return 1; }\n+\n+\n+static int\n+do_always_noconv(struct _IO_codecvt *codecvt)\n+{ return 0; }\n+\n+\n+static int\n+do_length(struct _IO_codecvt *codecvt, __mbstate_t *statep,\n+\t  const char *from_start, const char *from_end, _IO_size_t max)\n+{ return from_end - from_start; }\n+\n+\n+static int\n+do_max_length(struct _IO_codecvt *codecvt)\n+{ return 1; }"}]}