{"sha": "5f11ca4c7eb5d7b352b0f3a557d14b6933154ca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxMWNhNGM3ZWI1ZDdiMzUyYjBmM2E1NTdkMTRiNjkzMzE1NGNhMQ==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1993-08-06T01:01:02Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1993-08-06T01:01:02Z"}, "message": "Cygnus<->FSF merge, added g++ driver in C\n\nFrom-SVN: r5080", "tree": {"sha": "d70de7bdd26d599fd1fe4e768296529348376049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d70de7bdd26d599fd1fe4e768296529348376049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f11ca4c7eb5d7b352b0f3a557d14b6933154ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f11ca4c7eb5d7b352b0f3a557d14b6933154ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f11ca4c7eb5d7b352b0f3a557d14b6933154ca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f11ca4c7eb5d7b352b0f3a557d14b6933154ca1/comments", "author": null, "committer": null, "parents": [{"sha": "a638896014f4f99c3637d0834b14ff8916bd82d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a638896014f4f99c3637d0834b14ff8916bd82d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a638896014f4f99c3637d0834b14ff8916bd82d6"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "81a03dfc771de3220812e435e06d145f0e968068", "filename": "gcc/Makefile.in", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f11ca4c7eb5d7b352b0f3a557d14b6933154ca1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f11ca4c7eb5d7b352b0f3a557d14b6933154ca1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5f11ca4c7eb5d7b352b0f3a557d14b6933154ca1", "patch": "@@ -420,7 +420,7 @@ STAGESTUFF = *.o insn-flags.h insn-config.h insn-codes.h \\\n  stamp-attr stamp-attrtab stamp-opinit stamp-proto \\\n  genemit genoutput genrecog genextract genflags gencodes genconfig genpeep \\\n  genattrtab genattr genopinit \\\n- $(GCC_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross cccp \\\n+ $(GCC_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross cccp g++ g++-cross \\\n  cc1plus cc1obj enquire protoize unprotoize specs collect2 $(USE_COLLECT2)\n \n # Members of libgcc1.a.\n@@ -469,9 +469,9 @@ all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n # Note that we can compile enquire using the cross-compiler just build,\n # although we can't run it on this machine.\n-all.cross: native gcc-cross specs $(LIBGCC) stmp-headers $(STMP_FIXPROTO) cross-test enquire $(EXTRA_PARTS)\n+all.cross: native gcc-cross g++-cross specs $(LIBGCC) stmp-headers $(STMP_FIXPROTO) cross-test enquire $(EXTRA_PARTS)\n # This is what to compile if making gcc with a cross-compiler.\n-all.build: native xgcc $(EXTRA_PARTS)\n+all.build: native xgcc g++ $(EXTRA_PARTS)\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc specs $(LIBGCC1) xlimits.h\n # Use this to make a GCC that will be used only to recompile GCC.\n@@ -526,12 +526,21 @@ xgcc: gcc.o version.o $(LIBDEPS)\n specs: xgcc\n \t$(GCC_FOR_TARGET) -dumpspecs > specs\n \n+# Create the compiler driver for g++.\n+g++: g++.o $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o g++ g++.o $(LIBS)\n+\n # We do want to create an executable named `xgcc', so we can use it to\n # compile libgcc2.a.\n # Also create gcc-cross, so that install-common will install properly.\n gcc-cross: xgcc\n \tcp xgcc gcc-cross\n \n+# Create a version of the g++ driver which calls the cross-compiler.\n+g++-cross: $(srcdir)/g++.c\n+\t$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o g++-cross \\\n+\t   -DGCC_NAME=\\\"$(target)-gcc\\\" $(srcdir)/g++.c version.o $(LIBS)\n+\n cc1:$(P) $(C_OBJS) $(OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1 $(C_OBJS) $(OBJS) $(LIBS)\n \n@@ -1616,7 +1625,7 @@ install-dir:\n # Install the compiler executables built during cross compilation.\n # Deps on  $(srcdir)/g++ $(srcdir)/c++  would be natural here,\n # but the latter would get confused with the target `c++'.\n-install-common: native install-dir xgcc $(EXTRA_PARTS)\n+install-common: native install-dir xgcc g++ $(EXTRA_PARTS)\n \tfor file in $(COMPILERS); do \\\n \t  if [ -f $$file ] ; then \\\n \t    rm -f $(libsubdir)/$$file; \\\n@@ -1644,6 +1653,13 @@ install-common: native install-dir xgcc $(EXTRA_PARTS)\n \t    rm -f $(tooldir)/bin/gcc; \\\n \t    $(INSTALL_PROGRAM) gcc-cross $(tooldir)/bin/gcc; \\\n \t  else true; fi; \\\n+\t  if [ -f cc1plus ] ; then \\\n+\t    rm -f $(bindir)/$(target)-g++; \\\n+\t    $(INSTALL_PROGRAM) g++-cross $(bindir)/$(target)-g++; \\\n+\t    chmod a+x $(bindir)/$(target)-g++; \\\n+\t    rm -f $(bindir)/$(target)-c++; \\\n+\t    ln $(bindir)/$(target)-g++ $(bindir)/$(target)-c++; \\\n+\t  fi ; \\\n \telse \\\n \t  rm -f $(bindir)/gcc; \\\n \t  $(INSTALL_PROGRAM) xgcc $(bindir)/gcc; \\\n@@ -1663,10 +1679,11 @@ install-common: native install-dir xgcc $(EXTRA_PARTS)\n \t    chmod a-x $(libsubdir)/SYSCALLS.c.X; \\\n \tfi\n \t-if [ -f cc1plus ] ; then \\\n-\t  rm -f $(bindir)/c++ ; \\\n-\t  $(INSTALL_PROGRAM) $(srcdir)/c++ $(bindir)/c++ ; \\\n-\t  rm -f $(bindir)/g++ ; \\\n-\t  $(INSTALL_PROGRAM) $(srcdir)/g++ $(bindir)/g++ ; \\\n+\t    rm -f $(bindir)/g++; \\\n+\t    $(INSTALL_PROGRAM) g++ $(bindir)/g++; \\\n+\t    chmod a+x $(bindir)/g++; \\\n+\t    rm -f $(bindir)/c++; \\\n+\t    ln $(bindir)/g++ $(bindir)/c++; \\\n \tfi\n \t-rm -f $(libsubdir)/cpp\n \t$(INSTALL_PROGRAM) cpp $(libsubdir)/cpp"}]}