{"sha": "1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1NzU1ZWZlZTU3MjY4YjQzZDhmYmYzOGMxMGNiZGJmMGEwZGQwNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-18T09:22:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-18T09:22:42Z"}, "message": "cgraph.c (cgraph_create_indirect_edge): Discover polymorphic calls and record basic info into indirect_info.\n\n\t* cgraph.c (cgraph_create_indirect_edge): Discover\n\tpolymorphic calls and record basic info into indirect_info.\n\t* gimple-fold.c (gimple_fold_call): When doing BINFO based\n\tdevirtualization, ignore objc function calls.\n\t* ipa-cp.c (initialize_node_lattices): Be ready for polymorphic\n\tcall with no parm index info.\n\t* ipa-prop.c (ipa_analyze_call_uses): Likewise.\n\t* tree.c (virtual_method_call_p): New function.\n\t* tree.h (virtual_method_call_p): Declare.\n\nFrom-SVN: r201824", "tree": {"sha": "e1a133f48c521b91466f3bcd74ce9eba66d5faa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1a133f48c521b91466f3bcd74ce9eba66d5faa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/comments", "author": null, "committer": null, "parents": [{"sha": "34fdd6b31e8b715b2dfb1490b7c77b4eddacc8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34fdd6b31e8b715b2dfb1490b7c77b4eddacc8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34fdd6b31e8b715b2dfb1490b7c77b4eddacc8df"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "faa465ab27ff0a4b0da489876772fe5aebbfe662", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "patch": "@@ -1,3 +1,15 @@\n+2013-08-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_create_indirect_edge): Discover\n+\tpolymorphic calls and record basic info into indirect_info.\n+\t* gimple-fold.c (gimple_fold_call): When doing BINFO based\n+\tdevirtualization, ignore objc function calls.\n+\t* ipa-cp.c (initialize_node_lattices): Be ready for polymorphic\n+\tcall with no parm index info.\n+\t* ipa-prop.c (ipa_analyze_call_uses): Likewise.\n+\t* tree.c (virtual_method_call_p): New function.\n+\t* tree.h (virtual_method_call_p): Declare.\n+\n 2013-08-16  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/58179"}, {"sha": "e2f96d6436d3956990a3f61feec868cb48e74514", "filename": "gcc/cgraph.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "patch": "@@ -925,13 +925,31 @@ cgraph_create_indirect_edge (struct cgraph_node *caller, gimple call_stmt,\n {\n   struct cgraph_edge *edge = cgraph_create_edge_1 (caller, NULL, call_stmt,\n \t\t\t\t\t\t   count, freq);\n+  tree target;\n \n   edge->indirect_unknown_callee = 1;\n   initialize_inline_failed (edge);\n \n   edge->indirect_info = cgraph_allocate_init_indirect_info ();\n   edge->indirect_info->ecf_flags = ecf_flags;\n \n+  /* Record polymorphic call info.  */\n+  if (call_stmt\n+      && (target = gimple_call_fn (call_stmt))\n+      && virtual_method_call_p (target))\n+    {\n+      tree type = obj_type_ref_class (target);\n+\n+\n+      /* Only record types can have virtual calls.  */\n+      gcc_assert (TREE_CODE (type) == RECORD_TYPE);\n+      edge->indirect_info->param_index = -1;\n+      edge->indirect_info->otr_token\n+\t = tree_low_cst (OBJ_TYPE_REF_TOKEN (target), 1);\n+      edge->indirect_info->otr_type = type;\n+      edge->indirect_info->polymorphic = 1;\n+    }\n+\n   edge->next_callee = caller->indirect_calls;\n   if (caller->indirect_calls)\n     caller->indirect_calls->prev_callee = edge;"}, {"sha": "df6aef534eb41489eedfcf6c3a1e90e5de9a4679", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "patch": "@@ -1105,7 +1105,7 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t  gimple_call_set_fn (stmt, OBJ_TYPE_REF_EXPR (callee));\n \t  changed = true;\n \t}\n-      else\n+      else if (virtual_method_call_p (callee))\n \t{\n \t  tree obj = OBJ_TYPE_REF_OBJECT (callee);\n \t  tree binfo = gimple_extract_devirt_binfo_from_cst"}, {"sha": "93934e20de827ba675e25831d12dd753d16c6aa2", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "patch": "@@ -734,7 +734,8 @@ initialize_node_lattices (struct cgraph_node *node)\n     }\n \n   for (ie = node->indirect_calls; ie; ie = ie->next_callee)\n-    if (ie->indirect_info->polymorphic)\n+    if (ie->indirect_info->polymorphic\n+        && ie->indirect_info->param_index >= 0)\n       {\n \tgcc_checking_assert (ie->indirect_info->param_index >= 0);\n \tipa_get_parm_lattices (info,"}, {"sha": "7ffa929c4111342c0b7e2858527fa863dd8fa331", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "patch": "@@ -1922,7 +1922,7 @@ ipa_analyze_call_uses (struct cgraph_node *node,\n     return;\n   if (TREE_CODE (target) == SSA_NAME)\n     ipa_analyze_indirect_call_uses (node, info, parms_ainfo, call, target);\n-  else if (TREE_CODE (target) == OBJ_TYPE_REF)\n+  else if (virtual_method_call_p (target))\n     ipa_analyze_virtual_call_uses (node, info, call, target);\n }\n "}, {"sha": "9d4bc7f9fc8a3ee69d755140fc9367818cbcadad", "filename": "gcc/tree.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "patch": "@@ -11864,6 +11864,27 @@ types_same_for_odr (tree type1, tree type2)\n   return true;\n }\n \n+/* TARGET is a call target of GIMPLE call statement\n+   (obtained by gimple_call_fn).  Return true if it is\n+   OBJ_TYPE_REF representing an virtual call of C++ method.\n+   (As opposed to OBJ_TYPE_REF representing objc calls\n+   through a cast where middle-end devirtualization machinery\n+   can't apply.) */\n+\n+bool\n+virtual_method_call_p (tree target)\n+{\n+  if (TREE_CODE (target) != OBJ_TYPE_REF)\n+    return false;\n+  target = TREE_TYPE (target);\n+  gcc_checking_assert (TREE_CODE (target) == POINTER_TYPE);\n+  target = TREE_TYPE (target);\n+  if (TREE_CODE (target) == FUNCTION_TYPE)\n+    return false;\n+  gcc_checking_assert (TREE_CODE (target) == METHOD_TYPE);\n+  return true;\n+}\n+\n /* REF is OBJ_TYPE_REF, return the class the ref corresponds to.  */\n \n tree"}, {"sha": "4dbff212b97b3bce367f6ca7f6780bc34a5035e5", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "patch": "@@ -5974,6 +5974,7 @@ extern location_t tree_nonartificial_location (tree);\n extern tree block_ultimate_origin (const_tree);\n \n extern tree get_binfo_at_offset (tree, HOST_WIDE_INT, tree);\n+extern bool virtual_method_call_p (tree);\n extern tree obj_type_ref_class (tree ref);\n extern bool types_same_for_odr (tree type1, tree type2);\n extern tree get_ref_base_and_extent (tree, HOST_WIDE_INT *,"}]}