{"sha": "aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjMGIxOWU3OWYyYjRiMTg5YjhkMDBhMWY4NGQ3NGNkOTFmNDYwYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-01-28T22:32:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-01-28T22:32:47Z"}, "message": "re PR target/69459 (wrong code with -O2 and vector arithmetics @ x86_64)\n\n\tPR target/69459\n\t* config/i386/constraints.md (C): Only accept constant zero operand.\n\t(BC): New constraint.\n\t* config/i386/sse.md (*mov<mode>_internal): Use BC constraint\n\tinstead of C constraint.\n\t* doc/md.texi (Machine Constraints): Update description\n\tof C constraint.\n\ntestsuite/ChangeLog:\n\n\tPR target/69459\n\t* gcc.target/i386/pr69459.c: New test.\n\nFrom-SVN: r232955", "tree": {"sha": "014ae95c4d34e8f9325602be48c7e91fc8faaf3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/014ae95c4d34e8f9325602be48c7e91fc8faaf3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/comments", "author": null, "committer": null, "parents": [{"sha": "df113ce7de77eba567568d47c0d0e3d5ebd98559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df113ce7de77eba567568d47c0d0e3d5ebd98559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df113ce7de77eba567568d47c0d0e3d5ebd98559"}], "stats": {"total": 148, "additions": 109, "deletions": 39}, "files": [{"sha": "fb0fb88d60df2fbe5f07cd36fdf5c8150ef654c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 34, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "patch": "@@ -1,3 +1,13 @@\n+2016-01-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/69459\n+\t* config/i386/constraints.md (C): Only accept constant zero operand.\n+\t(BC): New constraint.\n+\t* config/i386/sse.md (*mov<mode>_internal): Use BC constraint\n+\tinstead of C constraint.\n+\t* doc/md.texi (Machine Constraints): Update description\n+\tof C constraint.\n+\n 2016-01-28  Steve Ellcey  <sellcey@imgtec.com>\n \n \tPR target/68400\n@@ -61,7 +71,8 @@\n \n 2016-01-28  Sebastian Pop  <s.pop@samsung.com>\n \n-\t* graphite-isl-ast-to-gimple.c (binary_op_to_tree): Call codegen_error_p.\n+\t* graphite-isl-ast-to-gimple.c (binary_op_to_tree): Call\n+\tcodegen_error_p.\n \t(ternary_op_to_tree): Same.\n \t(unary_op_to_tree): Same.\n \t(nary_op_to_tree): Same.\n@@ -76,8 +87,8 @@\n \n 2016-01-28  Sebastian Pop  <s.pop@samsung.com>\n \n-\t* graphite-isl-ast-to-gimple.c (get_rename_from_scev): Assert instead of\n-\tsetting codegen_error to fail codegen.\n+\t* graphite-isl-ast-to-gimple.c (get_rename_from_scev): Assert\n+\tinstead of setting codegen_error to fail codegen.\n \n 2016-01-28  Jason Merrill  <jason@redhat.com>\n \n@@ -232,8 +243,8 @@\n \n 2016-01-27  Claudiu Zissulescu  <claziss@synopsys.com>\n \n-        * config/arc/predicates.md (proper_comparison_operator): Reject\n-        constant-constant comparison.\n+\t* config/arc/predicates.md (proper_comparison_operator): Reject\n+\tconstant-constant comparison.\n \n 2016-01-26  Tom de Vries  <tom@codesourcery.com>\n \n@@ -242,7 +253,7 @@\n \tDR_NUM_DIMENSIONS == 0.\n \n 2016-01-26  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n-            Sebastian Pop  <s.pop@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n \n \t* graphite-isl-ast-to-gimple.c (ternary_op_to_tree): Handle\n \tisl_ast_op_cond and isl_ast_op_select.\n@@ -463,7 +474,8 @@\n \t(compute_deps): Remove.\n \t* graphite-isl-ast-to-gimple.c (print_schedule_ast): New.\n \t(debug_schedule_ast): New.\n-\t(translate_isl_ast_to_gimple::scop_to_isl_ast): Call set_separate_option.\n+\t(translate_isl_ast_to_gimple::scop_to_isl_ast): Call\n+\tset_separate_option.\n \t(graphite_regenerate_ast_isl): Add dump.\n \t(translate_isl_ast_to_gimple::scop_to_isl_ast): Generate code\n \tfrom scop->transformed_schedule.\n@@ -874,7 +886,7 @@\n \n 2016-01-21  Richard Biener  <rguenther@suse.de>\n \n-        PR tree-optimization/69378\n+\tPR tree-optimization/69378\n \t* tree-ssa-sccvn.c (dominated_by_p_w_unex): New function.\n \t(set_ssa_val_to): Use it for dominance checks taking into\n \taccount not executable edges.\n@@ -926,10 +938,10 @@\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n-        * graphite-isl-ast-to-gimple.c: Fix comment.\n-        * graphite-scop-detection.c (defined_in_loop_p): New.\n-        (canonicalize_loop_closed_ssa): Do not add close phi nodes for SSA\n-        names defined in loop.\n+\t* graphite-isl-ast-to-gimple.c: Fix comment.\n+\t* graphite-scop-detection.c (defined_in_loop_p): New.\n+\t(canonicalize_loop_closed_ssa): Do not add close phi nodes for SSA\n+\tnames defined in loop.\n \n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n@@ -940,21 +952,21 @@\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n-        * graphite-sese-to-poly.c (set_scop_parameter_dim): Remove.\n-        (cleanup_loop_iter_dom): Remove.\n-        (build_loop_iteration_domains): Remove.\n-        (build_scop_context): Remove.\n-        (build_scop_iteration_domain): Remove.\n-        (add_loop_constraints): New.\n-        (build_iteration_domains): New.\n-        (build_poly_scop): Call build_iteration_domains.\n+\t* graphite-sese-to-poly.c (set_scop_parameter_dim): Remove.\n+\t(cleanup_loop_iter_dom): Remove.\n+\t(build_loop_iteration_domains): Remove.\n+\t(build_scop_context): Remove.\n+\t(build_scop_iteration_domain): Remove.\n+\t(add_loop_constraints): New.\n+\t(build_iteration_domains): New.\n+\t(build_poly_scop): Call build_iteration_domains.\n \n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n-        * graphite-scop-detection.c\n-        (scop_detection::harmful_loop_in_region): Free dom and loops.\n-        (scop_detection::loop_body_is_valid_scop): Free bbs.\n+\t* graphite-scop-detection.c\n+\t(scop_detection::harmful_loop_in_region): Free dom and loops.\n+\t(scop_detection::loop_body_is_valid_scop): Free bbs.\n \n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n@@ -973,8 +985,10 @@\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n-\t* graphite-scop-detection.c (loop_is_valid_scop): Renamed loop_is_valid_in_scop.\n-\t(scop_detection::harmful_stmt_in_region): Renamed harmful_loop_in_region.\n+\t* graphite-scop-detection.c (loop_is_valid_scop): Renamed\n+\tloop_is_valid_in_scop.\n+\t(scop_detection::harmful_stmt_in_region): Renamed\n+\tharmful_loop_in_region.\n \tCall loop_is_valid_in_scop.\n \n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n@@ -988,7 +1002,7 @@\n \n \t* graphite-poly.c (new_poly_bb): Remove use of PBB_IS_REDUCTION.\n \t* graphite.h (struct poly_bb): Remove field is_reduction.\n-        (PBB_IS_REDUCTION): Remove.\n+\t(PBB_IS_REDUCTION): Remove.\n \n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n@@ -1452,7 +1466,7 @@\n \t* lto-section-in.c (lto_section_name): Add hsa section name.\n \t* lto-streamer.h (lto_section_type): Add hsa section.\n \t* timevar.def (TV_IPA_HSA): New.\n-        * hsa-brig-format.h: New file.\n+\t* hsa-brig-format.h: New file.\n \t* hsa-brig.c: New file.\n \t* hsa-dump.c: Likewise.\n \t* hsa-gen.c: Likewise.\n@@ -1885,7 +1899,7 @@\n \t* loop-doloop.c (record_reg_sets): New.\n \t(doloop_optimize): Reject the transform if the sequence\n \tclobbers registers live at the end of the loop block.\n-\t(doloop_optimize_loops): Enable df_live if needed. \n+\t(doloop_optimize_loops): Enable df_live if needed.\n \n 2016-01-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n@@ -2326,14 +2340,18 @@\n \n \t* config/i386/xm-djgpp.h (NATIVE_SYSTEM_HEADER_DIR): Define.\n \t(MD_EXEC_PREFIX): Define (moved from config/i386/djgpp.h).\n-\t(STANDARD_STARTFILE_PREFIX_1): Define (moved from MD_STARTFILE_PREFIX in config/i386/djgpp.h).\n-\t(STANDARD_STARTFILE_PREFIX_2): Define identical to STANDARD_STARTFILE_PREFIX_1.\n+\t(STANDARD_STARTFILE_PREFIX_1): Define (moved from MD_STARTFILE_PREFIX\n+\tin config/i386/djgpp.h).\n+\t(STANDARD_STARTFILE_PREFIX_2): Define identical to\n+\tSTANDARD_STARTFILE_PREFIX_1.\n \t(LOCAL_INCLUDE_DIR): Define (moved from config/i386/djgpp.h).\n-\t(GCC_DRIVER_HOST_INITIALIZATION): Fix reporting fatal installation errors.\n+\t(GCC_DRIVER_HOST_INITIALIZATION): Fix reporting fatal\n+\tinstallation errors.\n \t(MAX_OFILE_ALIGNMENT): Define to 128.\n \t(HAVE_FTW_H): Undefine as DJGPP do not have nftw, but have ftw.h.\n \n-\t* config/i386/djgpp.c: New file. Add implementation of i386_djgpp_asm_named_section.\n+\t* config/i386/djgpp.c: New file. Add implementation of\n+\ti386_djgpp_asm_named_section.\n \n \t* config/i386/djgpp.opt: Remove obsolete option -mbnu210.\n \n@@ -2530,10 +2548,10 @@\n \tPR middle-end/68743\n \t* match.pd: Require target has function_c99_misc before doing\n \ttruncl(extend(x)) and trunc(extend(x)) -> extend(truncf(x)), etc.\n-\t\n+\n 2016-01-09  Gerald Pfeifer  <gerald@pfeifer.com>\n \n-\t* configure.ac (isl_options_set_schedule_serialize_sccs): Also \n+\t* configure.ac (isl_options_set_schedule_serialize_sccs): Also\n \tuse GMPINC.\n \t* configure: Regenerate.\n "}, {"sha": "3b0b7c79dc11010219288fb48dcb3fbc938bb0ab", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "patch": "@@ -152,6 +152,7 @@\n ;;  s  Sibcall memory operand, not valid for TARGET_X32\n ;;  w  Call memory operand, not valid for TARGET_X32\n ;;  z  Constant call address operand.\n+;;  C  SSE constant operand.\n \n (define_constraint \"Bf\"\n   \"@internal Flags register operand.\"\n@@ -183,6 +184,10 @@\n   \"@internal Constant call address operand.\"\n   (match_operand 0 \"constant_call_address_operand\"))\n \n+(define_constraint \"BC\"\n+  \"@internal SSE constant operand.\"\n+  (match_test \"standard_sse_constant_p (op)\"))\n+\n ;; Integer constant constraints.\n (define_constraint \"I\"\n   \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\"\n@@ -233,8 +238,8 @@\n \n ;; This can theoretically be any mode's CONST0_RTX.\n (define_constraint \"C\"\n-  \"Standard SSE floating point constant.\"\n-  (match_test \"standard_sse_constant_p (op)\"))\n+  \"SSE constant zero operand.\"\n+  (match_test \"standard_sse_constant_p (op) == 1\"))\n \n ;; Constant-or-symbol-reference constraints.\n "}, {"sha": "3f53a0aa722114d348f71460ae464d3f85a1b757", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "patch": "@@ -833,7 +833,7 @@\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:VMOVE 0 \"nonimmediate_operand\"               \"=v,v ,m\")\n-\t(match_operand:VMOVE 1 \"nonimmediate_or_sse_const_operand\"  \"C ,vm,v\"))]\n+\t(match_operand:VMOVE 1 \"nonimmediate_or_sse_const_operand\"  \"BC,vm,v\"))]\n   \"TARGET_SSE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\""}, {"sha": "3c11d1944b8e212fb049381b8f11f42334fb80f9", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "patch": "@@ -4100,7 +4100,7 @@ Integer constant in the range 0 @dots{} 127, for 128-bit shifts.\n Standard 80387 floating point constant.\n \n @item C\n-Standard SSE floating point constant.\n+SSE constant zero operand.\n \n @item e\n 32-bit signed integer constant, or a symbolic reference known"}, {"sha": "d8810beffe1f704bca8d955261995bac23f50c65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "patch": "@@ -1,3 +1,8 @@\n+2016-01-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/69459\n+\t* gcc.target/i386/pr69459.c: New test.\n+\n 2016-01-28  Steve Ellcey  <sellcey@imgtec.com>\n \n \tPR target/68400\n@@ -71,7 +76,7 @@\n 2016-01-25  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/68398\n-        PR tree-optimization/69196\n+\tPR tree-optimization/69196\n \t* gcc.dg/tree-ssa/pr66752-3.c: Update expected output.\n \t* gcc.dg/tree-ssa/ssa-dom-thread-2c.c: Add extra statements on thread\n \tpath to avoid new heuristic allowing more irreducible regions"}, {"sha": "2d0bbbcdbf1fd654c47b535ac42bd4cf7252f4bd", "filename": "gcc/testsuite/gcc.target/i386/pr69459.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69459.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec0b19e79f2b4b189b8d00a1f84d74cd91f460b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69459.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69459.c?ref=aec0b19e79f2b4b189b8d00a1f84d74cd91f460b", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/69549 */\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned short u16;\n+typedef unsigned int u32;\n+typedef unsigned long long u64;\n+typedef unsigned char v16u8 __attribute__ ((vector_size (16)));\n+typedef unsigned short v16u16 __attribute__ ((vector_size (16)));\n+typedef unsigned int v16u32 __attribute__ ((vector_size (16)));\n+typedef unsigned long long v16u64 __attribute__ ((vector_size (16)));\n+\n+u64 __attribute__((noinline, noclone))\n+foo (u8 u8_0, u16 u16_3, v16u8 v16u8_0, v16u16 v16u16_0, v16u32 v16u32_0, v16u64 v16u64_0, v16u8 v16u8_1, v16u16 v16u16_1, v16u32 v16u32_1, v16u64 v16u64_1, v16u8 v16u8_2, v16u16 v16u16_2, v16u32 v16u32_2, v16u64 v16u64_2, v16u8 v16u8_3, v16u16 v16u16_3, v16u32 v16u32_3, v16u64 v16u64_3)\n+{\n+  v16u64_0 /= (v16u64){u16_3, ((0))} | 1;\n+  v16u64_1 += (v16u64)~v16u32_0;\n+  v16u16_1 /= (v16u16){-v16u64_3[1]} | 1;\n+  v16u64_3[1] -= 0x1fffffff;\n+  v16u32_2 /= (v16u32)-v16u64_0 | 1;\n+  v16u32_1 += ~v16u32_1;\n+  v16u16_3 %= (v16u16){0xfff, v16u32_2[3], v16u8_0[14]} | 1;\n+  v16u64_3 -= (v16u64)v16u32_2;\n+  if (v16u64_1[1] >= 1) {\n+    v16u64_0 %= (v16u64){v16u32_0[1]} | 1;\n+    v16u32_1[1] %= 0x5fb856;\n+    v16u64_1 |= -v16u64_0;\n+  }\n+  v16u8_0 *= (v16u8)v16u32_1;\n+  return u8_0 + v16u8_0 [12] + v16u8_0 [13] + v16u8_0 [14] + v16u8_0 [15] + v16u16_0 [0] + v16u16_0 [1] + v16u32_0 [0] + v16u32_0 [1] + v16u32_0 [2] + v16u32_0 [3] + v16u64_0 [0] + v16u64_0 [1] + v16u8_1 [9] + v16u8_1 [10] + v16u8_1 [11] + v16u8_1 [15] + v16u16_1 [0] + v16u16_1 [1] + v16u16_1 [3] + v16u64_1 [0] + v16u64_1 [1] + v16u8_2 [3] + v16u8_2 [4] + v16u8_2 [5] + v16u8_2 [0] + v16u32_2 [1] + v16u32_2 [2] + v16u32_2 [3] + v16u64_2 [0] + v16u64_2 [1] + v16u8_3 [0] + v16u16_3 [6] + v16u16_3[7] + v16u32_3[1] + v16u32_3[2] + v16u64_3[0] + v16u64_3[1];\n+}\n+\n+int\n+main ()\n+{\n+  u64 x = foo(1, 1, (v16u8){1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, (v16u16){1, 1}, (v16u32){1}, (v16u64){1}, (v16u8){1}, (v16u16){1, 1}, (v16u32){1}, (v16u64){1}, (v16u8){1, 1, 1, 1, 1}, (v16u16){1}, (v16u32){1}, (v16u64){1}, (v16u8){1}, (v16u16){1}, (v16u32){1}, (v16u64){1});\n+\n+  if (x != 0xffffffffe0000209)\n+    __builtin_abort();\n+  return 0;\n+}"}]}