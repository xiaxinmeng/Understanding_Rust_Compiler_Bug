{"sha": "0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ3ZTVmYTY1NWU1OWM5OTAzNWJmOTRhNDZjOTEyZTM2OWJiOWZhMA==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-05-28T07:49:42Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-07-01T15:31:07Z"}, "message": "aarch64: Add 64 bit setter getter fpsr fpcr\n\ngcc/ChangeLog\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_builtins): Add enums\n\tfor 64bits fpsr/fpcr getter setters builtin variants.\n\t(aarch64_init_fpsr_fpcr_builtins): New function.\n\t(aarch64_general_init_builtins): Modify to make use of the later.\n\t(aarch64_expand_fpsr_fpcr_setter): New function.\n\t(aarch64_general_expand_builtin): Modify to make use of the later.\n\t* config/aarch64/aarch64.md (@aarch64_set_<fpscr_name><GPI:mode>)\n\t(@aarch64_get_<fpscr_name><GPI:mode>): New patterns replacing and\n\tgeneralizing 'get_fpcr', 'set_fpsr'.\n\t* config/aarch64/iterators.md (GET_FPSCR, SET_FPSCR): New int\n\titerators.\n\t(fpscr_name): New int attribute.\n\t* doc/extend.texi (__builtin_aarch64_get_fpcr64)\n\t(__builtin_aarch64_set_fpcr64, __builtin_aarch64_get_fpsr64)\n\t(__builtin_aarch64_set_fpsr64): Add into AArch64 Built-in\n\tFunctions.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/aarch64/get_fpcr64_1.c: New test.\n\t* gcc.target/aarch64/set_fpcr64_1.c: New test.\n\t* gcc.target/aarch64/get_fpsr64_1.c: New test.\n\t* gcc.target/aarch64/set_fpsr64_1.c: New test.", "tree": {"sha": "5654641a941c08b2ce1072613185993f65f129ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5654641a941c08b2ce1072613185993f65f129ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685d8dafb4a1cb29ee219ad7857614ff66a78022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685d8dafb4a1cb29ee219ad7857614ff66a78022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/685d8dafb4a1cb29ee219ad7857614ff66a78022"}], "stats": {"total": 197, "additions": 143, "deletions": 54}, "files": [{"sha": "49dfbafec3ab6876b4ee7b65eff435d173a109ff", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 75, "deletions": 29, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "patch": "@@ -450,6 +450,11 @@ enum aarch64_builtins\n   AARCH64_BUILTIN_GET_FPSR,\n   AARCH64_BUILTIN_SET_FPSR,\n \n+  AARCH64_BUILTIN_GET_FPCR64,\n+  AARCH64_BUILTIN_SET_FPCR64,\n+  AARCH64_BUILTIN_GET_FPSR64,\n+  AARCH64_BUILTIN_SET_FPSR64,\n+\n   AARCH64_BUILTIN_RSQRT_DF,\n   AARCH64_BUILTIN_RSQRT_SF,\n   AARCH64_BUILTIN_RSQRT_V2DF,\n@@ -1247,33 +1252,64 @@ aarch64_init_memtag_builtins (void)\n #undef AARCH64_INIT_MEMTAG_BUILTINS_DECL\n }\n \n-/* Initialize all builtins in the AARCH64_BUILTIN_GENERAL group.  */\n+/* Initialize fpsr fpcr getters and setters.  */\n \n-void\n-aarch64_general_init_builtins (void)\n+static void\n+aarch64_init_fpsr_fpcr_builtins (void)\n {\n-  tree ftype_set_fpr\n+  tree ftype_set\n     = build_function_type_list (void_type_node, unsigned_type_node, NULL);\n-  tree ftype_get_fpr\n+  tree ftype_get\n     = build_function_type_list (unsigned_type_node, NULL);\n \n   aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPCR]\n     = aarch64_general_add_builtin (\"__builtin_aarch64_get_fpcr\",\n-\t\t\t\t   ftype_get_fpr,\n+\t\t\t\t   ftype_get,\n \t\t\t\t   AARCH64_BUILTIN_GET_FPCR);\n   aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPCR]\n     = aarch64_general_add_builtin (\"__builtin_aarch64_set_fpcr\",\n-\t\t\t\t   ftype_set_fpr,\n+\t\t\t\t   ftype_set,\n \t\t\t\t   AARCH64_BUILTIN_SET_FPCR);\n   aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPSR]\n     = aarch64_general_add_builtin (\"__builtin_aarch64_get_fpsr\",\n-\t\t\t\t   ftype_get_fpr,\n+\t\t\t\t   ftype_get,\n \t\t\t\t   AARCH64_BUILTIN_GET_FPSR);\n   aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPSR]\n     = aarch64_general_add_builtin (\"__builtin_aarch64_set_fpsr\",\n-\t\t\t\t   ftype_set_fpr,\n+\t\t\t\t   ftype_set,\n \t\t\t\t   AARCH64_BUILTIN_SET_FPSR);\n \n+  ftype_set\n+    = build_function_type_list (void_type_node, long_long_unsigned_type_node,\n+\t\t\t\tNULL);\n+  ftype_get\n+    = build_function_type_list (long_long_unsigned_type_node, NULL);\n+\n+  aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPCR64]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_get_fpcr64\",\n+\t\t\t\t   ftype_get,\n+\t\t\t\t   AARCH64_BUILTIN_GET_FPCR64);\n+  aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPCR64]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_set_fpcr64\",\n+\t\t\t\t   ftype_set,\n+\t\t\t\t   AARCH64_BUILTIN_SET_FPCR64);\n+  aarch64_builtin_decls[AARCH64_BUILTIN_GET_FPSR64]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_get_fpsr64\",\n+\t\t\t\t   ftype_get,\n+\t\t\t\t   AARCH64_BUILTIN_GET_FPSR64);\n+  aarch64_builtin_decls[AARCH64_BUILTIN_SET_FPSR64]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_set_fpsr64\",\n+\t\t\t\t   ftype_set,\n+\t\t\t\t   AARCH64_BUILTIN_SET_FPSR64);\n+}\n+\n+/* Initialize all builtins in the AARCH64_BUILTIN_GENERAL group.  */\n+\n+void\n+aarch64_general_init_builtins (void)\n+{\n+  aarch64_init_fpsr_fpcr_builtins ();\n+\n   aarch64_init_fp16_types ();\n \n   aarch64_init_bf16_types ();\n@@ -1878,6 +1914,16 @@ aarch64_expand_builtin_memtag (int fcode, tree exp, rtx target)\n   return target;\n }\n \n+/* Expand an expression EXP as fpsr or cpsr setter (depending on\n+   UNSPEC) using MODE.  */\n+static void\n+aarch64_expand_fpsr_fpcr_setter (int unspec, machine_mode mode, tree exp)\n+{\n+  tree arg = CALL_EXPR_ARG (exp, 0);\n+  rtx op = force_reg (mode, expand_normal (arg));\n+  emit_insn (gen_aarch64_set (unspec, mode, op));\n+}\n+\n /* Expand an expression EXP that calls built-in function FCODE,\n    with result going to TARGET if that's convenient.  IGNORE is true\n    if the result of the builtin is ignored.  */\n@@ -1886,35 +1932,35 @@ aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target,\n \t\t\t\tint ignore)\n {\n   int icode;\n-  rtx pat, op0;\n+  rtx op0;\n   tree arg0;\n \n   switch (fcode)\n     {\n     case AARCH64_BUILTIN_GET_FPCR:\n+      emit_insn (gen_aarch64_get (UNSPECV_GET_FPCR, SImode, target));\n+      return target;\n     case AARCH64_BUILTIN_SET_FPCR:\n+      aarch64_expand_fpsr_fpcr_setter (UNSPECV_SET_FPCR, SImode, exp);\n+      return target;\n     case AARCH64_BUILTIN_GET_FPSR:\n+      emit_insn (gen_aarch64_get (UNSPECV_GET_FPSR, SImode, target));\n+      return target;\n     case AARCH64_BUILTIN_SET_FPSR:\n-      if ((fcode == AARCH64_BUILTIN_GET_FPCR)\n-\t  || (fcode == AARCH64_BUILTIN_GET_FPSR))\n-\t{\n-\t  icode = (fcode == AARCH64_BUILTIN_GET_FPSR) ?\n-\t    CODE_FOR_get_fpsr : CODE_FOR_get_fpcr;\n-\t  target = gen_reg_rtx (SImode);\n-\t  pat = GEN_FCN (icode) (target);\n-\t}\n-      else\n-\t{\n-\t  target = NULL_RTX;\n-\t  icode = (fcode == AARCH64_BUILTIN_SET_FPSR) ?\n-\t    CODE_FOR_set_fpsr : CODE_FOR_set_fpcr;\n-\t  arg0 = CALL_EXPR_ARG (exp, 0);\n-\t  op0 = force_reg (SImode, expand_normal (arg0));\n-\t  pat = GEN_FCN (icode) (op0);\n-\t}\n-      emit_insn (pat);\n+      aarch64_expand_fpsr_fpcr_setter (UNSPECV_SET_FPSR, SImode, exp);\n+      return target;\n+    case AARCH64_BUILTIN_GET_FPCR64:\n+      emit_insn (gen_aarch64_get (UNSPECV_GET_FPCR, DImode, target));\n+      return target;\n+    case AARCH64_BUILTIN_SET_FPCR64:\n+      aarch64_expand_fpsr_fpcr_setter (UNSPECV_SET_FPCR, DImode, exp);\n+      return target;\n+    case AARCH64_BUILTIN_GET_FPSR64:\n+      emit_insn (gen_aarch64_get (UNSPECV_GET_FPSR, DImode, target));\n+      return target;\n+    case AARCH64_BUILTIN_SET_FPSR64:\n+      aarch64_expand_fpsr_fpcr_setter (UNSPECV_SET_FPSR, DImode, exp);\n       return target;\n-\n     case AARCH64_PAUTH_BUILTIN_AUTIA1716:\n     case AARCH64_PAUTH_BUILTIN_PACIA1716:\n     case AARCH64_PAUTH_BUILTIN_AUTIB1716:"}, {"sha": "c98ec7c35709d5e2c1c9ea8ebbc81f5b6b1a1185", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "patch": "@@ -7230,37 +7230,21 @@\n   [(set_attr \"length\" \"12\")\n    (set_attr \"type\" \"multiple\")])\n \n-;; Write Floating-point Control Register.\n-(define_insn \"set_fpcr\"\n-  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPECV_SET_FPCR)]\n+;; Write into the Floating-point Status or Control Register.\n+(define_insn \"@aarch64_set_<fpscr_name><GPI:mode>\"\n+  [(unspec_volatile [(match_operand:GPI 0 \"register_operand\" \"r\")] SET_FPSCR)]\n   \"\"\n-  \"msr\\\\tfpcr, %0\"\n+  \"msr\\\\t<fpscr_name>, %0\"\n   [(set_attr \"type\" \"mrs\")])\n \n-;; Read Floating-point Control Register.\n-(define_insn \"get_fpcr\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec_volatile:SI [(const_int 0)] UNSPECV_GET_FPCR))]\n-  \"\"\n-  \"mrs\\\\t%0, fpcr\"\n-  [(set_attr \"type\" \"mrs\")])\n-\n-;; Write Floating-point Status Register.\n-(define_insn \"set_fpsr\"\n-  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPECV_SET_FPSR)]\n-  \"\"\n-  \"msr\\\\tfpsr, %0\"\n-  [(set_attr \"type\" \"mrs\")])\n-\n-;; Read Floating-point Status Register.\n-(define_insn \"get_fpsr\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec_volatile:SI [(const_int 0)] UNSPECV_GET_FPSR))]\n+;; Read into the Floating-point Status or Control Register.\n+(define_insn \"@aarch64_get_<fpscr_name><GPI:mode>\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:GPI [(const_int 0)] GET_FPSCR))]\n   \"\"\n-  \"mrs\\\\t%0, fpsr\"\n+  \"mrs\\\\t%0, <fpscr_name>\"\n   [(set_attr \"type\" \"mrs\")])\n \n-\n ;; Define the subtract-one-and-jump insns so loop.c\n ;; knows what to generate.\n (define_expand \"doloop_end\""}, {"sha": "9a51916896342b77fad4d2dc53f4178d31bf743d", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "patch": "@@ -3453,3 +3453,17 @@\n \n (define_int_attr unspec [(UNSPEC_WHILERW \"UNSPEC_WHILERW\")\n \t\t\t (UNSPEC_WHILEWR \"UNSPEC_WHILEWR\")])\n+\n+;; Iterators and attributes for fpcr fpsr getter setters\n+\n+(define_int_iterator GET_FPSCR\n+  [UNSPECV_GET_FPSR UNSPECV_GET_FPCR])\n+\n+(define_int_iterator SET_FPSCR\n+  [UNSPECV_SET_FPSR UNSPECV_SET_FPCR])\n+\n+(define_int_attr fpscr_name\n+  [(UNSPECV_GET_FPSR \"fpsr\")\n+   (UNSPECV_SET_FPSR \"fpsr\")\n+   (UNSPECV_GET_FPCR \"fpcr\")\n+   (UNSPECV_SET_FPCR \"fpcr\")])"}, {"sha": "ecd3661d257107604de10fd49e7bdc9e1568a8bd", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "patch": "@@ -13881,6 +13881,11 @@ unsigned int __builtin_aarch64_get_fpcr ()\n void __builtin_aarch64_set_fpcr (unsigned int)\n unsigned int __builtin_aarch64_get_fpsr ()\n void __builtin_aarch64_set_fpsr (unsigned int)\n+\n+unsigned long long __builtin_aarch64_get_fpcr64 ()\n+void __builtin_aarch64_set_fpcr64 (unsigned long long)\n+unsigned long long __builtin_aarch64_get_fpsr64 ()\n+void __builtin_aarch64_set_fpsr64 (unsigned long long)\n @end smallexample\n \n @node Alpha Built-in Functions"}, {"sha": "66afca49107a1568007797ab6c465e7e84757dd0", "filename": "gcc/testsuite/gcc.target/aarch64/get_fpcr64_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fget_fpcr64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fget_fpcr64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fget_fpcr64_1.c?ref=0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long long unsigned\n+get_fpcr64 ()\n+{\n+  return __builtin_aarch64_get_fpcr64 ();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tmrs\\tx0, fpcr\\n} 1 } } */"}, {"sha": "9e94f1cf3eaf8397dd862ca460c60f42995fc40d", "filename": "gcc/testsuite/gcc.target/aarch64/get_fpsr64_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fget_fpsr64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fget_fpsr64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fget_fpsr64_1.c?ref=0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long long unsigned\n+get_fpsr64 ()\n+{\n+  return __builtin_aarch64_get_fpsr64 ();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tmrs\\tx0, fpsr\\n} 1 } } */"}, {"sha": "0b95e33ad77f2325e90e1205dde3123fc1465d96", "filename": "gcc/testsuite/gcc.target/aarch64/set_fpcr64_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fset_fpcr64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fset_fpcr64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fset_fpcr64_1.c?ref=0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void\n+set_fpcr64 (long long unsigned x)\n+{\n+  return __builtin_aarch64_set_fpcr64 (x);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tmsr\\tfpcr, x0\\n} 1 } } */"}, {"sha": "e0256ea4db9cc4f0b13c79d9c7a43c47d42027b1", "filename": "gcc/testsuite/gcc.target/aarch64/set_fpsr64_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fset_fpsr64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7e5fa655e59c99035bf94a46c912e369bb9fa0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fset_fpsr64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fset_fpsr64_1.c?ref=0d7e5fa655e59c99035bf94a46c912e369bb9fa0", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void\n+set_fpsr64 (long long unsigned x)\n+{\n+  return __builtin_aarch64_set_fpsr64 (x);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tmsr\\tfpsr, x0\\n} 1 } } */"}]}