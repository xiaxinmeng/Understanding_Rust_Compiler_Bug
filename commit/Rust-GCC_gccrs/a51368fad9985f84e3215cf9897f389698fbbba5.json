{"sha": "a51368fad9985f84e3215cf9897f389698fbbba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxMzY4ZmFkOTk4NWY4NGUzMjE1Y2Y5ODk3ZjM4OTY5OGZiYmJhNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T12:04:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T12:04:16Z"}, "message": "[multiple changes]\n\n2017-01-23  Pascal Obry  <obry@adacore.com>\n\n\t* s-taprop-mingw.adb (Enter_Task): Initialize the Thread handle which\n\tis needed when a foreign thread call a Win32 API using a thread handle\n\tlike GetThreadTimes() for example.\n\n2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Do not\n\tallow an 'Address clause to be specified on a prefix of a\n\tclass-wide type.\n\n2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb (Insert_Valid_Check): Ensure that the prefix of\n\tattribute 'Valid is a renaming of the original expression when\n\tthe expression denotes a name. For all other kinds of expression,\n\tuse a constant to capture the value.\n\t* exp_util.adb (Is_Name_Reference): Moved to Sem_Util.\n\t* sem_util.ads, sem_util.adb (Is_Name_Reference): Moved from Exp_Util.\n\n2017-01-23  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_eval.adb (Eval_Integer_Literal): Add special\n\tcase to avoid optimizing out check if the literal appears in\n\tan if-expression.\n\nFrom-SVN: r244792", "tree": {"sha": "f3b135f9f55bd902b705221e118ad19c1baacb63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3b135f9f55bd902b705221e118ad19c1baacb63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51368fad9985f84e3215cf9897f389698fbbba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51368fad9985f84e3215cf9897f389698fbbba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51368fad9985f84e3215cf9897f389698fbbba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51368fad9985f84e3215cf9897f389698fbbba5/comments", "author": null, "committer": null, "parents": [{"sha": "c7775327e8cf214872b3d179bfaa1b441759ab5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7775327e8cf214872b3d179bfaa1b441759ab5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7775327e8cf214872b3d179bfaa1b441759ab5a"}], "stats": {"total": 224, "additions": 149, "deletions": 75}, "files": [{"sha": "10a61b88759ae49d67551861ba2936fe5c4e8ff7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a51368fad9985f84e3215cf9897f389698fbbba5", "patch": "@@ -1,3 +1,51 @@\n+2017-01-23  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-taprop-mingw.adb (Enter_Task): Initialize the Thread handle which\n+\tis needed when a foreign thread call a Win32 API using a thread handle\n+\tlike GetThreadTimes() for example.\n+\n+2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Do not\n+\tallow an 'Address clause to be specified on a prefix of a\n+\tclass-wide type.\n+\n+2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): Ensure that the prefix of\n+\tattribute 'Valid is a renaming of the original expression when\n+\tthe expression denotes a name. For all other kinds of expression,\n+\tuse a constant to capture the value.\n+\t* exp_util.adb (Is_Name_Reference): Moved to Sem_Util.\n+\t* sem_util.ads, sem_util.adb (Is_Name_Reference): Moved from Exp_Util.\n+\n+2017-01-23  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Integer_Literal): Add special\n+\tcase to avoid optimizing out check if the literal appears in\n+\tan if-expression.\n+\n+2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Do not\n+\tallow an 'Address clause to be specified on a prefix of a\n+\tclass-wide type.\n+\n+2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): Ensure that the prefix of\n+\tattribute 'Valid is a renaming of the original expression when\n+\tthe expression denotes a name. For all other kinds of expression,\n+\tuse a constant to capture the value.\n+\t* exp_util.adb (Is_Name_Reference): Moved to Sem_Util.\n+\t* sem_util.ads, sem_util.adb (Is_Name_Reference): Moved from Exp_Util.\n+\n+2017-01-23  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Integer_Literal): Add special\n+\tcase to avoid optimizing out check if the literal appears in\n+\tan if-expression.\n+\n 2017-01-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Try_Primitive_Operations,"}, {"sha": "011878eb046d9ad5b5951154bf72c0d14a8337b8", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=a51368fad9985f84e3215cf9897f389698fbbba5", "patch": "@@ -7206,12 +7206,18 @@ package body Checks is\n             Force_Evaluation (Exp, Name_Req => False);\n          end if;\n \n-         --  Build the prefix for the 'Valid call\n+         --  Build the prefix for the 'Valid call. If the expression denotes\n+         --  a name, use a renaming to alias it, otherwise use a constant to\n+         --  capture the value of the expression.\n+\n+         --    Temp : ... renames Expr;      --  reference to a name\n+         --    Temp : constant ... := Expr;  --  all other cases\n \n          PV :=\n            Duplicate_Subexpr_No_Checks\n              (Exp           => Exp,\n               Name_Req      => False,\n+              Renaming_Req  => Is_Name_Reference (Exp),\n               Related_Id    => Related_Id,\n               Is_Low_Bound  => Is_Low_Bound,\n               Is_High_Bound => Is_High_Bound);"}, {"sha": "a0b0edad191483e82c134a0f54594c75d0cc7c79", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a51368fad9985f84e3215cf9897f389698fbbba5", "patch": "@@ -9014,12 +9014,6 @@ package body Exp_Util is\n       --  is present (xxx is taken from the Chars field of Related_Nod),\n       --  otherwise it generates an internal temporary.\n \n-      function Is_Name_Reference (N : Node_Id) return Boolean;\n-      --  Determine if the tree referenced by N represents a name. This is\n-      --  similar to Is_Object_Reference but returns true only if N can be\n-      --  renamed without the need for a temporary, the typical example of\n-      --  an object not in this category being a function call.\n-\n       ---------------------\n       -- Build_Temporary --\n       ---------------------\n@@ -9050,61 +9044,6 @@ package body Exp_Util is\n          end if;\n       end Build_Temporary;\n \n-      -----------------------\n-      -- Is_Name_Reference --\n-      -----------------------\n-\n-      function Is_Name_Reference (N : Node_Id) return Boolean is\n-      begin\n-         if Is_Entity_Name (N) then\n-            return Present (Entity (N)) and then Is_Object (Entity (N));\n-         end if;\n-\n-         case Nkind (N) is\n-            when N_Indexed_Component\n-               | N_Slice\n-            =>\n-               return\n-                 Is_Name_Reference (Prefix (N))\n-                   or else Is_Access_Type (Etype (Prefix (N)));\n-\n-            --  Attributes 'Input, 'Old and 'Result produce objects\n-\n-            when N_Attribute_Reference =>\n-               return\n-                 Nam_In\n-                   (Attribute_Name (N), Name_Input, Name_Old, Name_Result);\n-\n-            when N_Selected_Component =>\n-               return\n-                 Is_Name_Reference (Selector_Name (N))\n-                   and then\n-                     (Is_Name_Reference (Prefix (N))\n-                       or else Is_Access_Type (Etype (Prefix (N))));\n-\n-            when N_Explicit_Dereference =>\n-               return True;\n-\n-            --  A view conversion of a tagged name is a name reference\n-\n-            when N_Type_Conversion =>\n-               return\n-                 Is_Tagged_Type (Etype (Subtype_Mark (N)))\n-                   and then Is_Tagged_Type (Etype (Expression (N)))\n-                   and then Is_Name_Reference (Expression (N));\n-\n-            --  An unchecked type conversion is considered to be a name if\n-            --  the operand is a name (this construction arises only as a\n-            --  result of expansion activities).\n-\n-            when N_Unchecked_Type_Conversion =>\n-               return Is_Name_Reference (Expression (N));\n-\n-            when others =>\n-               return False;\n-         end case;\n-      end Is_Name_Reference;\n-\n       --  Local variables\n \n       Loc          : constant Source_Ptr      := Sloc (Exp);"}, {"sha": "aba2367310d0c3c7b6fb07a578366c8971e19d03", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=a51368fad9985f84e3215cf9897f389698fbbba5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -157,11 +157,19 @@ package body System.Task_Primitives.Operations is\n \n    package body Specific is\n \n+      -------------------\n+      -- Is_Valid_Task --\n+      -------------------\n+\n       function Is_Valid_Task return Boolean is\n       begin\n          return TlsGetValue (TlsIndex) /= System.Null_Address;\n       end Is_Valid_Task;\n \n+      ---------\n+      -- Set --\n+      ---------\n+\n       procedure Set (Self_Id : Task_Id) is\n          Succeeded : BOOL;\n       begin\n@@ -761,13 +769,9 @@ package body System.Task_Primitives.Operations is\n    --  1) from System.Task_Primitives.Operations.Initialize\n    --  2) from System.Tasking.Stages.Task_Wrapper\n \n-   --  The thread initialisation has to be done only for the first case\n-\n-   --  This is because the GetCurrentThread NT call does not return the real\n-   --  thread handler but only a \"pseudo\" one. It is not possible to release\n-   --  the thread handle and free the system resources from this \"pseudo\"\n-   --  handle. So we really want to keep the real thread handle set in\n-   --  System.Task_Primitives.Operations.Create_Task during thread creation.\n+   --  The pseudo handle (LL.Thread) need not be closed when it is no\n+   --  longer needed. Calling the CloseHandle function with this handle\n+   --  has no effect.\n \n    procedure Enter_Task (Self_ID : Task_Id) is\n       procedure Get_Stack_Bounds (Base : Address; Limit : Address);\n@@ -787,6 +791,7 @@ package body System.Task_Primitives.Operations is\n          raise Invalid_CPU_Number;\n       end if;\n \n+      Self_ID.Common.LL.Thread    := GetCurrentThread;\n       Self_ID.Common.LL.Thread_Id := GetCurrentThreadId;\n \n       Get_Stack_Bounds\n@@ -887,8 +892,8 @@ package body System.Task_Primitives.Operations is\n             DWORD (Stack_Size),\n             Entry_Point,\n             pTaskParameter,\n-            DWORD (Create_Suspended) or\n-              DWORD (Stack_Size_Param_Is_A_Reservation),\n+            DWORD (Create_Suspended)\n+              or DWORD (Stack_Size_Param_Is_A_Reservation),\n             TaskId'Unchecked_Access);\n       else\n          hTask := CreateThread"}, {"sha": "f8078ff62f387c60252c64c32eb9361456bb865c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a51368fad9985f84e3215cf9897f389698fbbba5", "patch": "@@ -4915,7 +4915,20 @@ package body Sem_Ch13 is\n               or else Has_Controlled_Component (Etype (U_Ent))\n             then\n                Error_Msg_NE\n-                 (\"??controlled object& must not be overlaid\", Nam, U_Ent);\n+                 (\"??controlled object & must not be overlaid\", Nam, U_Ent);\n+               Error_Msg_N\n+                 (\"\\??Program_Error will be raised at run time\", Nam);\n+               Insert_Action (Declaration_Node (U_Ent),\n+                 Make_Raise_Program_Error (Loc,\n+                   Reason => PE_Overlaid_Controlled_Object));\n+               return;\n+\n+            --  Case of an address clause for a class-wide object which is\n+            --  considered erroneous.\n+\n+            elsif Is_Class_Wide_Type (Etype (U_Ent)) then\n+               Error_Msg_NE\n+                 (\"??class-wide object & must not be overlaid\", Nam, U_Ent);\n                Error_Msg_N\n                  (\"\\??Program_Error will be raised at run time\", Nam);\n                Insert_Action (Declaration_Node (U_Ent),"}, {"sha": "6e56e1d10bfd96aae7eb2454d9a84075e19d467d", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=a51368fad9985f84e3215cf9897f389698fbbba5", "patch": "@@ -2682,9 +2682,12 @@ package body Sem_Eval is\n       --  If the literal appears in a non-expression context, then it is\n       --  certainly appearing in a non-static context, so check it. This is\n       --  actually a redundant check, since Check_Non_Static_Context would\n-      --  check it, but it seems worth while avoiding the call.\n+      --  check it, but it seems worth while to optimize out the call.\n \n-      if Nkind (Parent (N)) not in N_Subexpr\n+      --  An exception is made for a literal in an if or case expression\n+\n+      if (Nkind_In (Parent (N), N_If_Expression, N_Case_Expression_Alternative)\n+           or else Nkind (Parent (N)) not in N_Subexpr)\n         and then not In_Any_Integer_Context\n       then\n          Check_Non_Static_Context (N);"}, {"sha": "fd45a38667831b4358f163aa408c756324be870b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a51368fad9985f84e3215cf9897f389698fbbba5", "patch": "@@ -13405,6 +13405,60 @@ package body Sem_Util is\n       end if;\n    end Is_Local_Variable_Reference;\n \n+   -----------------------\n+   -- Is_Name_Reference --\n+   -----------------------\n+\n+   function Is_Name_Reference (N : Node_Id) return Boolean is\n+   begin\n+      if Is_Entity_Name (N) then\n+         return Present (Entity (N)) and then Is_Object (Entity (N));\n+      end if;\n+\n+      case Nkind (N) is\n+         when N_Indexed_Component\n+            | N_Slice\n+         =>\n+            return\n+              Is_Name_Reference (Prefix (N))\n+                or else Is_Access_Type (Etype (Prefix (N)));\n+\n+         --  Attributes 'Input, 'Old and 'Result produce objects\n+\n+         when N_Attribute_Reference =>\n+            return\n+              Nam_In (Attribute_Name (N), Name_Input, Name_Old, Name_Result);\n+\n+         when N_Selected_Component =>\n+            return\n+              Is_Name_Reference (Selector_Name (N))\n+                and then\n+                  (Is_Name_Reference (Prefix (N))\n+                    or else Is_Access_Type (Etype (Prefix (N))));\n+\n+         when N_Explicit_Dereference =>\n+            return True;\n+\n+         --  A view conversion of a tagged name is a name reference\n+\n+         when N_Type_Conversion =>\n+            return\n+              Is_Tagged_Type (Etype (Subtype_Mark (N)))\n+                and then Is_Tagged_Type (Etype (Expression (N)))\n+                and then Is_Name_Reference (Expression (N));\n+\n+         --  An unchecked type conversion is considered to be a name if the\n+         --  operand is a name (this construction arises only as a result of\n+         --  expansion activities).\n+\n+         when N_Unchecked_Type_Conversion =>\n+            return Is_Name_Reference (Expression (N));\n+\n+         when others =>\n+            return False;\n+      end case;\n+   end Is_Name_Reference;\n+\n    ---------------------------------\n    -- Is_Nontrivial_DIC_Procedure --\n    ---------------------------------"}, {"sha": "42d51a5f848b996650de72c2d8e917f63bf7cd54", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51368fad9985f84e3215cf9897f389698fbbba5/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=a51368fad9985f84e3215cf9897f389698fbbba5", "patch": "@@ -1548,6 +1548,12 @@ package Sem_Util is\n    --  parameter of the current enclosing subprogram.\n    --  Why are OUT parameters not considered here ???\n \n+   function Is_Name_Reference (N : Node_Id) return Boolean;\n+   --  Determine whether arbitrary node N is a reference to a name. This is\n+   --  similar to Is_Object_Reference but returns True only if N can be renamed\n+   --  without the need for a temporary, the typical example of an object not\n+   --  in this category being a function call.\n+\n    function Is_Nontrivial_DIC_Procedure (Id : Entity_Id) return Boolean;\n    --  Determine whether entity Id denotes the procedure that verifies the\n    --  assertion expression of pragma Default_Initial_Condition and if it does,"}]}