{"sha": "8a5b54490034f3b5a56298ba27ca70206a4dd37a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1YjU0NDkwMDM0ZjNiNWE1NjI5OGJhMjdjYTcwMjA2YTRkZDM3YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-17T18:22:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-17T18:22:04Z"}, "message": "rx: Split adddi3 and subdi3 after reload.\n\nThe formulation of the pre-reload pattern allows the lower_subreg\npass to properly split the patterns.  This also required re-writing\nrx_source_operand and related predicates to accept subregs.\n\nFrom-SVN: r168929", "tree": {"sha": "d4b57ae1533dcba8650db3f94092d77be04ed5bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4b57ae1533dcba8650db3f94092d77be04ed5bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5b54490034f3b5a56298ba27ca70206a4dd37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b54490034f3b5a56298ba27ca70206a4dd37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5b54490034f3b5a56298ba27ca70206a4dd37a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b54490034f3b5a56298ba27ca70206a4dd37a/comments", "author": null, "committer": null, "parents": [{"sha": "784f69be19ef920218a7b05d6fb2569596864afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784f69be19ef920218a7b05d6fb2569596864afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/784f69be19ef920218a7b05d6fb2569596864afb"}], "stats": {"total": 276, "additions": 225, "deletions": 51}, "files": [{"sha": "e7f9d749eef3c2e0e295a747392ec5aba60e231c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b54490034f3b5a56298ba27ca70206a4dd37a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b54490034f3b5a56298ba27ca70206a4dd37a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a5b54490034f3b5a56298ba27ca70206a4dd37a", "patch": "@@ -1,5 +1,16 @@\n 2011-01-17  Richard Henderson  <rth@redhat.com>\n \n+\t* config/rx/predicates.md (rx_constshift_operand): Use match_test.\n+\t(rx_restricted_mem_operand): New.\n+\t(rx_shift_operand): Use register_operand.\n+\t(rx_source_operand, rx_compare_operand): Likewise.\n+\t* config/rx/rx.md (addsi3_flags): New expander.\n+\t(adddi3): Rewrite as expander.\n+\t(adc_internal, *adc_flags, adddi3_internal): New patterns.\n+\t(subsi3_flags): New expander.\n+\t(subdi3): Rewrite as expander.\n+\t(sbb_internal, *sbb_flags, subdi3_internal): New patterns.\n+\n \t* config/rx/rx.c (RX_BUILTIN_SAT): Remove.\n \t(rx_init_builtins): Remove sat builtin.\n \t(rx_expand_builtin): Likewise."}, {"sha": "608fca5f9255123385aafe8d0e1f8355cdb4699e", "filename": "gcc/config/rx/predicates.md", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b54490034f3b5a56298ba27ca70206a4dd37a/gcc%2Fconfig%2Frx%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b54490034f3b5a56298ba27ca70206a4dd37a/gcc%2Fconfig%2Frx%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Fpredicates.md?ref=8a5b54490034f3b5a56298ba27ca70206a4dd37a", "patch": "@@ -37,40 +37,29 @@\n ;; Only small integers or a value in a register are permitted.\n \n (define_predicate \"rx_shift_operand\"\n-  (match_code \"const_int,reg\")\n-  {\n-    if (CONST_INT_P (op))\n-      return IN_RANGE (INTVAL (op), 0, 31);\n-    return true;\n-  }\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"IN_RANGE (INTVAL (op), 0, 31)\")))\n )\n \n (define_predicate \"rx_constshift_operand\"\n-  (match_code \"const_int\")\n-  {\n-    return IN_RANGE (INTVAL (op), 0, 31);\n-  }\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 31)\"))\n+)\n+\n+(define_predicate \"rx_restricted_mem_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"rx_is_restricted_memory_address (XEXP (op, 0), mode)\"))\n )\n \n ;; Check that the operand is suitable as the source operand\n ;; for a logic or arithmeitc instruction.  Registers, integers\n ;; and a restricted subset of memory addresses are allowed.\n \n (define_predicate \"rx_source_operand\"\n-  (match_code \"const_int,const_double,const,symbol_ref,label_ref,reg,mem\")\n-  {\n-    if (CONSTANT_P (op))\n-      return rx_is_legitimate_constant (op);\n-\n-    if (! MEM_P (op))\n-      return true;\n-      \n-    /* Do not allow size conversions whilst accessing memory.  */\n-    if (GET_MODE (op) != mode)\n-      return false;\n-\n-    return rx_is_restricted_memory_address (XEXP (op, 0), mode);\n-  }\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"immediate_operand\")\n+       (match_operand 0 \"rx_restricted_mem_operand\"))\n )\n \n ;; Check that the operand is suitable as the source operand\n@@ -79,16 +68,8 @@\n ;; CONST_INTs are not.\n \n (define_predicate \"rx_compare_operand\"\n-  (match_code \"subreg,reg,mem\")\n-  {\n-    if (GET_CODE (op) == SUBREG)\n-      return REG_P (XEXP (op, 0));\n-    \n-    if (! MEM_P (op))\n-      return true;\n-\n-    return rx_is_restricted_memory_address (XEXP (op, 0), mode);\n-  }\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"rx_restricted_mem_operand\"))\n )\n \n ;; Return true if OP is a store multiple operation.  This looks like:"}, {"sha": "d8cd66d63de0f21d50fba46b238c568ae131bd43", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 199, "deletions": 17, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b54490034f3b5a56298ba27ca70206a4dd37a/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b54490034f3b5a56298ba27ca70206a4dd37a/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=8a5b54490034f3b5a56298ba27ca70206a4dd37a", "patch": "@@ -988,17 +988,127 @@\n    (set_attr \"length\"   \"2,2,2,3,4,5,6,2,3,3,4,5,6,5\")]\n )\n \n-(define_insn \"adddi3\"\n-  [(set (match_operand:DI          0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n-\t\t (match_operand:DI 2 \"rx_source_operand\"\n-\t\t\t\t   \"r,Sint08,Sint16,Sint24,i,Q\")))\n+;; A helper to expand the above with the CC_MODE filled in.\n+(define_expand \"addsi3_flags\"\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\")\n+\t\t   (plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t    (match_operand:SI 2 \"rx_source_operand\")))\n+\t      (set (reg:CC_ZSC CC_REG)\n+\t\t   (compare:CC_ZSC (plus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t   (const_int 0)))])]\n+)\n+\n+(define_insn \"adc_internal\"\n+  [(set (match_operand:SI     0 \"register_operand\"  \"=r,r,r,r,r,r\")\n+\t(plus:SI\n+\t  (plus:SI\n+\t    (ltu:SI (reg:CC CC_REG) (const_int 0))\n+\t    (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0\"))\n+\t  (match_operand:SI   2 \"rx_source_operand\" \"r,Sint08,Sint16,Sint24,i,Q\")))\n+    (clobber (reg:CC CC_REG))]\n+  \"reload_completed\"\n+  \"adc %2,%0\"\n+  [(set_attr \"timings\" \"11,11,11,11,11,33\")\n+   (set_attr \"length\"   \"3,4,5,6,7,6\")]\n+)\n+\n+(define_insn \"*adc_flags\"\n+  [(set (match_operand:SI     0 \"register_operand\"  \"=r,r,r,r,r,r\")\n+\t(plus:SI\n+\t  (plus:SI\n+\t    (ltu:SI (reg:CC CC_REG) (const_int 0))\n+\t    (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0\"))\n+\t  (match_operand:SI   2 \"rx_source_operand\" \"r,Sint08,Sint16,Sint24,i,Q\")))\n+   (set (reg CC_REG)\n+\t(compare \n+\t  (plus:SI\n+\t    (plus:SI\n+\t      (ltu:SI (reg:CC CC_REG) (const_int 0))\n+\t      (match_dup 1))\n+\t    (match_dup 2))\n+\t  (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSCmode)\"\n+  \"adc %2,%0\"\n+  [(set_attr \"timings\" \"11,11,11,11,11,33\")\n+   (set_attr \"length\"   \"3,4,5,6,7,6\")]\n+)\n+\n+(define_expand \"adddi3\"\n+  [(set (match_operand:DI          0 \"register_operand\" \"\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t (match_operand:DI 2 \"rx_source_operand\" \"\")))]\n+  \"\"\n+{\n+  rtx op0l, op0h, op1l, op1h, op2l, op2h;\n+\n+  op0l = gen_lowpart (SImode, operands[0]);\n+  op1l = gen_lowpart (SImode, operands[1]);\n+  op2l = gen_lowpart (SImode, operands[2]);\n+  op0h = gen_highpart (SImode, operands[0]);\n+  op1h = gen_highpart (SImode, operands[1]);\n+  op2h = gen_highpart_mode (SImode, DImode, operands[2]);\n+\n+  emit_insn (gen_adddi3_internal (op0l, op0h, op1l, op2l, op1h, op2h));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"adddi3_internal\"\n+  [(set (match_operand:SI          0 \"register_operand\"  \"=r\")\n+\t(plus:SI (match_operand:SI 2 \"register_operand\"  \"r\")\n+\t\t (match_operand:SI 3 \"rx_source_operand\" \"riQ\")))\n+   (set (match_operand:SI          1 \"register_operand\"  \"=r\")\n+\t(plus:SI\n+\t  (plus:SI\n+\t    (ltu:SI (plus:SI (match_dup 2) (match_dup 3)) (match_dup 2))\n+\t    (match_operand:SI      4 \"register_operand\"  \"%1\"))\n+\t  (match_operand:SI        5 \"rx_source_operand\" \"riQ\")))\n+   (clobber (match_scratch:SI      6                     \"=&r\"))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n-  \"add\\t%L2, %L0\\n\\tadc\\t%H2, %H0\"\n-  [(set_attr \"timings\" \"22,22,22,22,22,44\")\n-   (set_attr \"length\" \"5,7,9,11,13,11\")]\n-)\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op0l = operands[0];\n+  rtx op0h = operands[1];\n+  rtx op1l = operands[2];\n+  rtx op2l = operands[3];\n+  rtx op1h = operands[4];\n+  rtx op2h = operands[5];\n+  rtx scratch = operands[6];\n+  rtx x;\n+\n+  if (reg_overlap_mentioned_p (op0l, op1h))\n+    {\n+      emit_move_insn (scratch, op0l);\n+      op1h = scratch;\n+      if (reg_overlap_mentioned_p (op0l, op2h))\n+\top2h = scratch;\n+    }\n+  else if (reg_overlap_mentioned_p (op0l, op2h))\n+    {\n+      emit_move_insn (scratch, op0l);\n+      op2h = scratch;\n+    }\n+\n+  if (rtx_equal_p (op0l, op1l))\n+    ;\n+  else if (rtx_equal_p (op0l, op2l))\n+    x = op1l, op1l = op2l, op2l = x;\n+  emit_insn (gen_addsi3_flags (op0l, op1l, op2l));\n+\n+  if (rtx_equal_p (op0h, op1h))\n+    ;\n+  else if (rtx_equal_p (op0h, op2h))\n+    x = op1h, op1h = op2h, op2h = x;\n+  else\n+    {\n+      emit_move_insn (op0h, op1h);\n+      op1h = op0h;\n+    }\n+  emit_insn (gen_adc_internal (op0h, op1h, op2h));\n+  DONE;\n+})\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI         0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r\")\n@@ -1445,16 +1555,88 @@\n    (set_attr \"length\" \"2,2,6,3,5\")]\n )\n \n-(define_insn \"subdi3\"\n-  [(set (match_operand:DI           0 \"register_operand\" \"=r,r\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\"  \"0,0\")\n-\t\t  (match_operand:DI 2 \"rx_source_operand\" \"r,Q\")))\n+;; A helper to expand the above with the CC_MODE filled in.\n+(define_expand \"subsi3_flags\"\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\")\n+\t\t   (minus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t     (match_operand:SI 2 \"rx_source_operand\")))\n+\t      (set (reg:CC_ZSC CC_REG)\n+\t\t   (compare:CC_ZSC (minus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t   (const_int 0)))])]\n+)\n+\n+(define_insn \"sbb_internal\"\n+  [(set (match_operand:SI     0 \"register_operand\"   \"=r,r\")\n+\t(minus:SI\n+\t  (minus:SI\n+\t    (match_operand:SI 1 \"register_operand\"   \" 0,0\")\n+\t    (match_operand:SI 2 \"rx_compare_operand\" \" r,Q\"))\n+\t  (geu:SI (reg:CC CC_REG) (const_int 0))))\n+    (clobber (reg:CC CC_REG))]\n+  \"reload_completed\"\n+  \"sbb\\t%2, %0\"\n+  [(set_attr \"timings\" \"11,33\")\n+   (set_attr \"length\"  \"3,6\")]\n+)\n+\n+(define_insn \"*sbb_flags\"\n+  [(set (match_operand:SI     0 \"register_operand\"   \"=r,r\")\n+\t(minus:SI\n+\t  (minus:SI\n+\t    (match_operand:SI 1 \"register_operand\"   \" 0,0\")\n+\t    (match_operand:SI 2 \"rx_compare_operand\" \" r,Q\"))\n+\t  (geu:SI (reg:CC CC_REG) (const_int 0))))\n+   (set (reg CC_REG)\n+\t(compare\n+\t  (minus:SI\n+\t    (minus:SI (match_dup 1) (match_dup 2))\n+\t    (geu:SI (reg:CC CC_REG) (const_int 0)))\n+\t  (const_int 0)))]\n+  \"reload_completed\"\n+  \"sbb\\t%2, %0\"\n+  [(set_attr \"timings\" \"11,33\")\n+   (set_attr \"length\"  \"3,6\")]\n+)\n+\n+(define_expand \"subdi3\"\n+  [(set (match_operand:DI           0 \"register_operand\" \"\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t  (match_operand:DI 2 \"rx_source_operand\" \"\")))]\n+  \"\"\n+{\n+  rtx op0l, op0h, op1l, op1h, op2l, op2h;\n+\n+  op0l = gen_lowpart (SImode, operands[0]);\n+  op1l = gen_lowpart (SImode, operands[1]);\n+  op2l = gen_lowpart (SImode, operands[2]);\n+  op0h = gen_highpart (SImode, operands[0]);\n+  op1h = gen_highpart (SImode, operands[1]);\n+  op2h = gen_highpart_mode (SImode, DImode, operands[2]);\n+\n+  emit_insn (gen_subdi3_internal (op0l, op0h, op1l, op2l, op1h, op2h));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"subdi3_internal\"\n+  [(set (match_operand:SI          0 \"register_operand\"   \"=&r,&r\")\n+\t(minus:SI (match_operand:SI 2 \"register_operand\"  \"  0, r\")\n+\t\t  (match_operand:SI 3 \"rx_source_operand\" \"rnQ, r\")))\n+   (set (match_operand:SI          1 \"register_operand\"   \"= r, r\")\n+\t(minus:SI\n+\t  (minus:SI\n+\t    (match_operand:SI      4 \"register_operand\"   \"  1, 1\")\n+\t    (match_operand:SI      5 \"rx_compare_operand\" \" rQ,rQ\"))\n+\t  (geu:SI (match_dup 2) (match_dup 3))))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n-  \"sub\\t%L2, %L0\\n\\tsbb\\t%H2, %H0\"\n-  [(set_attr \"timings\" \"22,44\")\n-   (set_attr \"length\" \"5,11\")]\n-)\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  emit_insn (gen_subsi3_flags (operands[0], operands[2], operands[3]));\n+  emit_insn (gen_sbb_internal (operands[1], operands[4], operands[5]));\n+  DONE;\n+})\n \n (define_insn \"xorsi3\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=r,r,r,r,r,r\")"}]}