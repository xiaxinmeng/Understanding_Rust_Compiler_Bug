{"sha": "08700251e57a6fe9133fe77a31b098a99abd26e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3MDAyNTFlNTdhNmZlOTEzM2ZlNzdhMzFiMDk4YTk5YWJkMjZlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-11-15T09:35:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-11-15T09:35:34Z"}, "message": "re PR tree-optimization/29581 (Latent bug in 4.1/4.2/4.3 lambda-code.c)\n\n\tPR tree-optimization/29581\n\t* lambda-code.c (replace_uses_equiv_to_x_with_y): Add YINIT,\n\tREPLACEMENTS, FIRSTBSI arguments.  If initial condition or\n\ttype is different between Y and USE, create a temporary\n\tvariable, initialize it at the beginning of the body bb\n\tand use it as replacement instead of Y.\n\n\t* gcc.dg/pr29581-1.c: New test.\n\t* gcc.dg/pr29581-2.c: New test.\n\t* gcc.dg/pr29581-3.c: New test.\n\t* gcc.dg/pr29581-4.c: New test.\n\t* gfortran.dg/pr29581.f90: New test.\n\nFrom-SVN: r118848", "tree": {"sha": "98699616c4062e9e81d2c10336ff645e90ced992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98699616c4062e9e81d2c10336ff645e90ced992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08700251e57a6fe9133fe77a31b098a99abd26e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08700251e57a6fe9133fe77a31b098a99abd26e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08700251e57a6fe9133fe77a31b098a99abd26e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08700251e57a6fe9133fe77a31b098a99abd26e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6cfd93133a6b3c3b32d98c6087e90c6b6be2685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cfd93133a6b3c3b32d98c6087e90c6b6be2685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cfd93133a6b3c3b32d98c6087e90c6b6be2685"}], "stats": {"total": 337, "additions": 323, "deletions": 14}, "files": [{"sha": "1675c70522f84b0503ac7755df8a96a4055145b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08700251e57a6fe9133fe77a31b098a99abd26e8", "patch": "@@ -1,3 +1,12 @@\n+2006-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/29581\n+\t* lambda-code.c (replace_uses_equiv_to_x_with_y): Add YINIT,\n+\tREPLACEMENTS, FIRSTBSI arguments.  If initial condition or\n+\ttype is different between Y and USE, create a temporary\n+\tvariable, initialize it at the beginning of the body bb\n+\tand use it as replacement instead of Y.\n+\n 2006-11-15  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR middle-end/29753"}, {"sha": "14a1ba35c253e5484093085252ab072b3c3cebb2", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 92, "deletions": 14, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=08700251e57a6fe9133fe77a31b098a99abd26e8", "patch": "@@ -2104,11 +2104,17 @@ perfect_nest_p (struct loop *loop)\n   return true;\n }\n \n-/* Replace the USES of X in STMT, or uses with the same step as X  with Y.  */\n+/* Replace the USES of X in STMT, or uses with the same step as X with Y.\n+   YINIT is the initial value of Y, REPLACEMENTS is a hash table to\n+   avoid creating duplicate temporaries and FIRSTBSI is statement\n+   iterator where new temporaries should be inserted at the beginning\n+   of body basic block.  */\n \n static void\n replace_uses_equiv_to_x_with_y (struct loop *loop, tree stmt, tree x, \n-\t\t\t\tint xstep, tree y)\n+\t\t\t\tint xstep, tree y, tree yinit,\n+\t\t\t\thtab_t replacements,\n+\t\t\t\tblock_stmt_iterator *firstbsi)\n {\n   ssa_op_iter iter;\n   use_operand_p use_p;\n@@ -2117,17 +2123,83 @@ replace_uses_equiv_to_x_with_y (struct loop *loop, tree stmt, tree x,\n     {\n       tree use = USE_FROM_PTR (use_p);\n       tree step = NULL_TREE;\n-      tree scev = instantiate_parameters (loop,\n-\t\t\t\t\t  analyze_scalar_evolution (loop, use));\n+      tree scev, init, val, var, setstmt;\n+      struct tree_map *h, in;\n+      void **loc;\n \n-      if (scev != NULL_TREE && scev != chrec_dont_know)\n-\tstep = evolution_part_in_loop_num (scev, loop->num);\n+      /* Replace uses of X with Y right away.  */\n+      if (use == x)\n+\t{\n+\t  SET_USE (use_p, y);\n+\t  continue;\n+\t}\n+\n+      scev = instantiate_parameters (loop,\n+\t\t\t\t     analyze_scalar_evolution (loop, use));\n+\n+      if (scev == NULL || scev == chrec_dont_know)\n+\tcontinue;\n+\n+      step = evolution_part_in_loop_num (scev, loop->num);\n+      if (step == NULL\n+\t  || step == chrec_dont_know\n+\t  || TREE_CODE (step) != INTEGER_CST\n+\t  || int_cst_value (step) != xstep)\n+\tcontinue;\n+\n+      /* Use REPLACEMENTS hash table to cache already created\n+\t temporaries.  */\n+      in.hash = htab_hash_pointer (use);\n+      in.from = use;\n+      h = htab_find_with_hash (replacements, &in, in.hash);\n+      if (h != NULL)\n+\t{\n+\t  SET_USE (use_p, h->to);\n+\t  continue;\n+\t}\n \n-      if ((step && step != chrec_dont_know \n-\t   && TREE_CODE (step) == INTEGER_CST\n-\t   && int_cst_value (step) == xstep)\n-\t  || USE_FROM_PTR (use_p) == x)\n-\tSET_USE (use_p, y);\n+      /* USE which has the same step as X should be replaced\n+\t with a temporary set to Y + YINIT - INIT.  */\n+      init = initial_condition_in_loop_num (scev, loop->num);\n+      gcc_assert (init != NULL && init != chrec_dont_know);\n+      if (TREE_TYPE (use) == TREE_TYPE (y))\n+\t{\n+\t  val = fold_build2 (MINUS_EXPR, TREE_TYPE (y), init, yinit);\n+\t  val = fold_build2 (PLUS_EXPR, TREE_TYPE (y), y, val);\n+\t  if (val == y)\n+ \t    {\n+\t      /* If X has the same type as USE, the same step\n+\t\t and same initial value, it can be replaced by Y.  */\n+\t      SET_USE (use_p, y);\n+\t      continue;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  val = fold_build2 (MINUS_EXPR, TREE_TYPE (y), y, yinit);\n+\t  val = fold_convert (TREE_TYPE (use), val);\n+\t  val = fold_build2 (PLUS_EXPR, TREE_TYPE (use), val, init);\n+\t}\n+\n+      /* Create a temporary variable and insert it at the beginning\n+\t of the loop body basic block, right after the PHI node\n+\t which sets Y.  */\n+      var = create_tmp_var (TREE_TYPE (use), \"perfecttmp\");\n+      add_referenced_var (var);\n+      val = force_gimple_operand_bsi (firstbsi, val, false, NULL);\n+      setstmt = build2 (MODIFY_EXPR, void_type_node, var, val);\n+      var = make_ssa_name (var, setstmt);\n+      TREE_OPERAND (setstmt, 0) = var;\n+      bsi_insert_before (firstbsi, setstmt, BSI_SAME_STMT);\n+      update_stmt (setstmt);\n+      SET_USE (use_p, var);\n+      h = ggc_alloc (sizeof (struct tree_map));\n+      h->hash = in.hash;\n+      h->from = use;\n+      h->to = var;\n+      loc = htab_find_slot_with_hash (replacements, h, in.hash, INSERT);\n+      gcc_assert ((*(struct tree_map **)loc) == NULL);\n+      *(struct tree_map **) loc = h;\n     }\n }\n \n@@ -2379,7 +2451,7 @@ perfect_nestify (struct loops *loops,\n   tree then_label, else_label, cond_stmt;\n   basic_block preheaderbb, headerbb, bodybb, latchbb, olddest;\n   int i;\n-  block_stmt_iterator bsi;\n+  block_stmt_iterator bsi, firstbsi;\n   bool insert_after;\n   edge e;\n   struct loop *newloop;\n@@ -2388,7 +2460,8 @@ perfect_nestify (struct loops *loops,\n   tree stmt;\n   tree oldivvar, ivvar, ivvarinced;\n   VEC(tree,heap) *phis = NULL;\n-  \n+  htab_t replacements = NULL;\n+\n   /* Create the new loop.  */\n   olddest = loop->single_exit->dest;\n   preheaderbb = loop_split_edge_with (loop->single_exit, NULL);\n@@ -2484,10 +2557,13 @@ perfect_nestify (struct loops *loops,\n \t\t\t\t\t    uboundvar,\n \t\t\t\t\t    ivvarinced);\n   update_stmt (exit_condition);\n+  replacements = htab_create_ggc (20, tree_map_hash,\n+\t\t\t\t  tree_map_eq, NULL);\n   bbs = get_loop_body_in_dom_order (loop); \n   /* Now move the statements, and replace the induction variable in the moved\n      statements with the correct loop induction variable.  */\n   oldivvar = VEC_index (tree, loopivs, 0);\n+  firstbsi = bsi_start (bodybb);\n   for (i = loop->num_nodes - 1; i >= 0 ; i--)\n     {\n       block_stmt_iterator tobsi = bsi_last (bodybb);\n@@ -2543,7 +2619,8 @@ perfect_nestify (struct loops *loops,\n \t\t    }\n \t\t  \n \t\t  replace_uses_equiv_to_x_with_y \n-\t\t    (loop, stmt, oldivvar, VEC_index (int, steps, 0), ivvar);\n+\t\t    (loop, stmt, oldivvar, VEC_index (int, steps, 0), ivvar,\n+\t\t     VEC_index (tree, lbounds, 0), replacements, &firstbsi);\n \n \t\t  bsi_move_before (&bsi, &tobsi);\n \t\t  \n@@ -2559,6 +2636,7 @@ perfect_nestify (struct loops *loops,\n     }\n \n   free (bbs);\n+  htab_delete (replacements);\n   return perfect_nest_p (loop);\n }\n "}, {"sha": "a53e25c911e0faeb9f8e7f62cc9d0c35b1b89387", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08700251e57a6fe9133fe77a31b098a99abd26e8", "patch": "@@ -1,3 +1,12 @@\n+2006-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/29581\n+\t* gcc.dg/pr29581-1.c: New test.\n+\t* gcc.dg/pr29581-2.c: New test.\n+\t* gcc.dg/pr29581-3.c: New test.\n+\t* gcc.dg/pr29581-4.c: New test.\n+\t* gfortran.dg/pr29581.f90: New test.\n+\n 2006-11-14  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \tPR fortran/29702"}, {"sha": "e540073552544039bc19ef0805d919a76b9cbbd6", "filename": "gcc/testsuite/gcc.dg/pr29581-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-1.c?ref=08700251e57a6fe9133fe77a31b098a99abd26e8", "patch": "@@ -0,0 +1,44 @@\n+/* PR tree-optimization/29581 */\n+/* Origin: gcc.dg/vect/vect-85.c */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-loop-linear\" } */\n+\n+extern void abort (void);\n+\n+#define N 16\n+\n+int main1 (int *a)\n+{\n+  int i, j, k;\n+  int b[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\t{\n+\t  k = i + N;\n+\t  a[j] = k;\n+\t}\n+      b[i] = k;\n+    }\n+\n+\n+  for (j = 0; j < N; j++)\n+    if (a[j] != i + N - 1)\n+      abort();\t\n+\n+  for (j = 0; j < N; j++)\n+    if (b[j] != j + N)\n+      abort();\t\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int a[N] __attribute__ ((__aligned__(16)));\n+\n+  main1 (a);\n+\n+  return 0;\n+}"}, {"sha": "c99d78ce2f1d6b84b9b3c845588bf5d4151bd27a", "filename": "gcc/testsuite/gcc.dg/pr29581-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-2.c?ref=08700251e57a6fe9133fe77a31b098a99abd26e8", "patch": "@@ -0,0 +1,46 @@\n+/* PR tree-optimization/29581 */\n+/* Origin: gcc.dg/vect/vect-86.c */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-loop-linear\" } */\n+\n+extern void abort (void);\n+\n+#define N 16\n+\n+int main1 (int n)\n+{\n+  int i, j, k;\n+  int a[N], b[N];\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      for (j = 0; j < n; j++)\n+\t{\n+\t  k = i + n;\n+\t  a[j] = k;\n+\t}\n+      b[i] = k;\n+    }\n+\n+\n+  for (j = 0; j < n; j++)\n+    if (a[j] != i + n - 1)\n+      abort();\t\n+\n+  for (i = 0; i < n; i++)\n+    if (b[i] != i + n)\n+      abort();\t\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  main1 (N);\n+  main1 (0);\n+  main1 (1);\n+  main1 (2);\n+  main1 (N-1);\n+\n+  return 0;\n+}"}, {"sha": "c9d72ce281ff4e9390e65c61646ddff288597d2d", "filename": "gcc/testsuite/gcc.dg/pr29581-3.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-3.c?ref=08700251e57a6fe9133fe77a31b098a99abd26e8", "patch": "@@ -0,0 +1,48 @@\n+/* PR tree-optimization/29581 */\n+/* Origin: gcc.dg/vect/vect-87.c */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-loop-linear\" } */\n+\n+extern void abort (void);\n+\n+#define N 16\n+\n+int main1 (int n, int *a)\n+{\n+  int i, j, k;\n+  int b[N];\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      for (j = 0; j < n; j++)\n+\t{\n+\t  k = i + n;\n+\t  a[j] = k;\n+\t}\n+      b[i] = k;\n+    }\n+\n+\n+  for (j = 0; j < n; j++)\n+    if (a[j] != i + n - 1)\n+      abort();\t\n+\n+  for (j = 0; j < n; j++)\n+    if (b[j] != j + n)\n+      abort();\t\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int a[N] __attribute__ ((__aligned__(16)));\n+\n+  main1 (N, a);\n+  main1 (0, a);\n+  main1 (1, a);\n+  main1 (2, a);\n+  main1 (N-1, a);\n+\n+  return 0;\n+}"}, {"sha": "c2d894c8d201f4b23c5412ce9fc854759f931b08", "filename": "gcc/testsuite/gcc.dg/pr29581-4.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29581-4.c?ref=08700251e57a6fe9133fe77a31b098a99abd26e8", "patch": "@@ -0,0 +1,48 @@\n+/* PR tree-optimization/29581 */\n+/* Origin: gcc.dg/vect/vect-88.c */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-loop-linear\" } */\n+\n+extern void abort (void);\n+\n+#define N 16\n+\n+int main1 (int n, int *a)\n+{\n+  int i, j, k;\n+  int b[N];\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      for (j = 0; j < n; j++)\n+\t{\n+\t  k = i + n;\n+\t  a[j] = k;\n+\t}\n+      b[i] = k;\n+    }\n+\n+\n+  for (j = 0; j < n; j++)\n+    if (a[j] != i + n - 1)\n+      abort();\t\n+\n+  for (j = 0; j < n; j++)\n+    if (b[j] != j + n)\n+      abort();\t\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int a[N+1] __attribute__ ((__aligned__(16)));\n+\n+  main1 (N, a+1);\n+  main1 (0, a+1);\n+  main1 (1, a+1);\n+  main1 (2, a+1);\n+  main1 (N-1, a+1);\n+\n+  return 0;\n+}"}, {"sha": "3e4a39efb63243963287536fb487180289012105", "filename": "gcc/testsuite/gfortran.dg/pr29581.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr29581.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08700251e57a6fe9133fe77a31b098a99abd26e8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr29581.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr29581.f90?ref=08700251e57a6fe9133fe77a31b098a99abd26e8", "patch": "@@ -0,0 +1,27 @@\n+! PR tree-optimization/29581\n+! { dg-do run }\n+! { dg-options \"-O2 -ftree-loop-linear\" }\n+\n+      SUBROUTINE FOO (K)\n+      INTEGER I, J, K, A(5,5), B\n+      COMMON A\n+      A(1,1) = 1\n+ 10   B = 0\n+      DO 30 I = 1, K\n+        DO 20 J = 1, K\n+          B = B + A(I,J)\n+ 20     CONTINUE\n+        A(I,I) = A(I,I) * 2\n+ 30   CONTINUE\n+      IF (B.GE.3) RETURN\n+      GO TO 10\n+      END SUBROUTINE\n+\n+      PROGRAM BAR\n+        INTEGER A(5,5)\n+        COMMON A\n+        CALL FOO (2)\n+        IF (A(1,1).NE.8) CALL ABORT\n+        A(1,1) = 0\n+        IF (ANY(A.NE.0)) CALL ABORT\n+      END"}]}