{"sha": "814a4c3b3548e6fae72992026982d3ce8a186568", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0YTRjM2IzNTQ4ZTZmYWU3Mjk5MjAyNjk4MmQzY2U4YTE4NjU2OA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2009-11-11T14:23:03Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2009-11-11T14:23:03Z"}, "message": "arm.c (neon_vdup_constant, [...]): New.\n\n\tgcc/\n\t* config/arm/arm.c (neon_vdup_constant, neon_make_constant): New.\n\t(neon_expand_vector_init): Use them.  Also handle non-constant\n\tvectors with identical elements and vectors with only one\n\tnon-constant element.\n\t(arm_print_operand): Handle 'y' modifier.\n\t* config/arm/arm-protos.h (neon_make_constant): Declare.\n\t* config/arm/neon.md (neon_vdup_n<mode>): Split into two\n\tpatterns.  Use VX instead of VDQW for the first one.  Allow\n\ta VFP alternative and V32 modes for the second one.\n\t* config/arm/neon.ml (shape_elt): Add Alternatives.\n\t(ops): Use Alternatives for vdup lane instructions.\n\t* config/arm/neon-testgen.ml (analyze_shape): Handle Alternatives.\n\t* config/arm/vec-common.md (mov<mode>): Use neon_make_constant.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/neon: Regenerate generated tests.\n\nFrom-SVN: r154094", "tree": {"sha": "8b82758d87fb4dcc505191cc1b4a840c0e65c2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b82758d87fb4dcc505191cc1b4a840c0e65c2cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/814a4c3b3548e6fae72992026982d3ce8a186568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814a4c3b3548e6fae72992026982d3ce8a186568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814a4c3b3548e6fae72992026982d3ce8a186568", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814a4c3b3548e6fae72992026982d3ce8a186568/comments", "author": null, "committer": null, "parents": [{"sha": "40f73786e9ae1b4a4fafffaff58a54d79f4a5a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f73786e9ae1b4a4fafffaff58a54d79f4a5a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f73786e9ae1b4a4fafffaff58a54d79f4a5a1a"}], "stats": {"total": 329, "additions": 276, "deletions": 53}, "files": [{"sha": "04b44988a3181fd8167ee8e8a4b8889a9a96448f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -1,3 +1,19 @@\n+2009-11-11  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/arm/arm.c (neon_vdup_constant, neon_make_constant): New.\n+\t(neon_expand_vector_init): Use them.  Also handle non-constant\n+\tvectors with identical elements and vectors with only one\n+\tnon-constant element.\n+\t(arm_print_operand): Handle 'y' modifier.\n+\t* config/arm/arm-protos.h (neon_make_constant): Declare.\n+\t* config/arm/neon.md (neon_vdup_n<mode>): Split into two\n+\tpatterns.  Use VX instead of VDQW for the first one.  Allow\n+\ta VFP alternative and V32 modes for the second one.\n+\t* config/arm/neon.ml (shape_elt): Add Alternatives.\n+\t(ops): Use Alternatives for vdup lane instructions.\n+\t* config/arm/neon-testgen.ml (analyze_shape): Handle Alternatives.\n+\t* config/arm/vec-common.md (mov<mode>): Use neon_make_constant.\n+\n 2009-11-11  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/arm/neon.md (*neon_mov<mode>): Reject two non-register"}, {"sha": "4d6d51b204fc314c0920f6b8f3ee4fbec88587c4", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -68,6 +68,7 @@ extern char *neon_output_logic_immediate (const char *, rtx *,\n \t\t\t\t\t  enum machine_mode, int, int);\n extern void neon_pairwise_reduce (rtx, rtx, enum machine_mode,\n \t\t\t\t  rtx (*) (rtx, rtx, rtx));\n+extern rtx neon_make_constant (rtx);\n extern void neon_expand_vector_init (rtx, rtx);\n extern void neon_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern void neon_const_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);"}, {"sha": "5fb2d17b1c923f0f2a881f7c7cd7307e7e9267e4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 180, "deletions": 10, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -8085,25 +8085,171 @@ neon_pairwise_reduce (rtx op0, rtx op1, enum machine_mode mode,\n     }\n }\n \n-/* Initialize a vector with non-constant elements.  FIXME: We can do better\n-   than the current implementation (building a vector on the stack and then\n-   loading it) in many cases.  See rs6000.c.  */\n+/* If VALS is a vector constant that can be loaded into a register\n+   using VDUP, generate instructions to do so and return an RTX to\n+   assign to the register.  Otherwise return NULL_RTX.  */\n+\n+static rtx\n+neon_vdup_constant (rtx vals)\n+{\n+  enum machine_mode mode = GET_MODE (vals);\n+  enum machine_mode inner_mode = GET_MODE_INNER (mode);\n+  int n_elts = GET_MODE_NUNITS (mode);\n+  bool all_same = true;\n+  rtx x;\n+  int i;\n+\n+  if (GET_CODE (vals) != CONST_VECTOR || GET_MODE_SIZE (inner_mode) > 4)\n+    return NULL_RTX;\n+\n+  for (i = 0; i < n_elts; ++i)\n+    {\n+      x = XVECEXP (vals, 0, i);\n+      if (i > 0 && !rtx_equal_p (x, XVECEXP (vals, 0, 0)))\n+\tall_same = false;\n+    }\n+\n+  if (!all_same)\n+    /* The elements are not all the same.  We could handle repeating\n+       patterns of a mode larger than INNER_MODE here (e.g. int8x8_t\n+       {0, C, 0, C, 0, C, 0, C} which can be loaded using\n+       vdup.i16).  */\n+    return NULL_RTX;\n+\n+  /* We can load this constant by using VDUP and a constant in a\n+     single ARM register.  This will be cheaper than a vector\n+     load.  */\n+\n+  x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, 0));\n+  return gen_rtx_UNSPEC (mode, gen_rtvec (1, x),\n+\t\t\t UNSPEC_VDUP_N);\n+}\n+\n+/* Generate code to load VALS, which is a PARALLEL containing only\n+   constants (for vec_init) or CONST_VECTOR, efficiently into a\n+   register.  Returns an RTX to copy into the register, or NULL_RTX\n+   for a PARALLEL that can not be converted into a CONST_VECTOR.  */\n+\n+rtx\n+neon_make_constant (rtx vals)\n+{\n+  enum machine_mode mode = GET_MODE (vals);\n+  rtx target;\n+  rtx const_vec = NULL_RTX;\n+  int n_elts = GET_MODE_NUNITS (mode);\n+  int n_const = 0;\n+  int i;\n+\n+  if (GET_CODE (vals) == CONST_VECTOR)\n+    const_vec = vals;\n+  else if (GET_CODE (vals) == PARALLEL)\n+    {\n+      /* A CONST_VECTOR must contain only CONST_INTs and\n+\t CONST_DOUBLEs, but CONSTANT_P allows more (e.g. SYMBOL_REF).\n+\t Only store valid constants in a CONST_VECTOR.  */\n+      for (i = 0; i < n_elts; ++i)\n+\t{\n+\t  rtx x = XVECEXP (vals, 0, i);\n+\t  if (GET_CODE (x) == CONST_INT || GET_CODE (x) == CONST_DOUBLE)\n+\t    n_const++;\n+\t}\n+      if (n_const == n_elts)\n+\tconst_vec = gen_rtx_CONST_VECTOR (mode, XVEC (vals, 0));\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  if (const_vec != NULL\n+      && neon_immediate_valid_for_move (const_vec, mode, NULL, NULL))\n+    /* Load using VMOV.  On Cortex-A8 this takes one cycle.  */\n+    return const_vec;\n+  else if ((target = neon_vdup_constant (vals)) != NULL_RTX)\n+    /* Loaded using VDUP.  On Cortex-A8 the VDUP takes one NEON\n+       pipeline cycle; creating the constant takes one or two ARM\n+       pipeline cycles.  */\n+    return target;\n+  else if (const_vec != NULL_RTX)\n+    /* Load from constant pool.  On Cortex-A8 this takes two cycles\n+       (for either double or quad vectors).  We can not take advantage\n+       of single-cycle VLD1 because we need a PC-relative addressing\n+       mode.  */\n+    return const_vec;\n+  else\n+    /* A PARALLEL containing something not valid inside CONST_VECTOR.\n+       We can not construct an initializer.  */\n+    return NULL_RTX;\n+}\n+\n+/* Initialize vector TARGET to VALS.  */\n \n void\n neon_expand_vector_init (rtx target, rtx vals)\n {\n   enum machine_mode mode = GET_MODE (target);\n-  enum machine_mode inner = GET_MODE_INNER (mode);\n-  unsigned int i, n_elts = GET_MODE_NUNITS (mode);\n-  rtx mem;\n+  enum machine_mode inner_mode = GET_MODE_INNER (mode);\n+  int n_elts = GET_MODE_NUNITS (mode);\n+  int n_var = 0, one_var = -1;\n+  bool all_same = true;\n+  rtx x, mem;\n+  int i;\n \n-  gcc_assert (VECTOR_MODE_P (mode));\n+  for (i = 0; i < n_elts; ++i)\n+    {\n+      x = XVECEXP (vals, 0, i);\n+      if (!CONSTANT_P (x))\n+\t++n_var, one_var = i;\n+\n+      if (i > 0 && !rtx_equal_p (x, XVECEXP (vals, 0, 0)))\n+\tall_same = false;\n+    }\n \n+  if (n_var == 0)\n+    {\n+      rtx constant = neon_make_constant (vals);\n+      if (constant != NULL_RTX)\n+\t{\n+\t  emit_move_insn (target, constant);\n+\t  return;\n+\t}\n+    }\n+\n+  /* Splat a single non-constant element if we can.  */\n+  if (all_same && GET_MODE_SIZE (inner_mode) <= 4)\n+    {\n+      x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, 0));\n+      emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t      gen_rtx_UNSPEC (mode, gen_rtvec (1, x),\n+\t\t\t\t\t      UNSPEC_VDUP_N)));\n+      return;\n+    }\n+\n+  /* One field is non-constant.  Load constant then overwrite varying\n+     field.  This is more efficient than using the stack.  */\n+  if (n_var == 1)\n+    {\n+      rtx copy = copy_rtx (vals);\n+      rtvec ops;\n+\n+      /* Load constant part of vector, substitute neighboring value for\n+\t varying element.  */\n+      XVECEXP (copy, 0, one_var) = XVECEXP (vals, 0, (one_var + 1) % n_elts);\n+      neon_expand_vector_init (target, copy);\n+\n+      /* Insert variable.  */\n+      x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, one_var));\n+      ops = gen_rtvec (3, x, target, GEN_INT (one_var));\n+      emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t      gen_rtx_UNSPEC (mode, ops, UNSPEC_VSET_LANE)));\n+      return;\n+    }\n+\n+  /* Construct the vector in memory one field at a time\n+     and load the whole vector.  */\n   mem = assign_stack_temp (mode, GET_MODE_SIZE (mode), 0);\n   for (i = 0; i < n_elts; i++)\n-    emit_move_insn (adjust_address_nv (mem, inner, i * GET_MODE_SIZE (inner)),\n-                   XVECEXP (vals, 0, i));\n-\n+    emit_move_insn (adjust_address_nv (mem, inner_mode,\n+\t\t\t\t    i * GET_MODE_SIZE (inner_mode)),\n+\t\t    XVECEXP (vals, 0, i));\n   emit_move_insn (target, mem);\n }\n \n@@ -15253,6 +15399,30 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       }\n       return;\n \n+    /* Translate an S register number into a D register number and element index.  */\n+    case 'y':\n+      {\n+        int mode = GET_MODE (x);\n+        int regno;\n+\n+        if (GET_MODE_SIZE (mode) != 4 || GET_CODE (x) != REG)\n+          {\n+\t    output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t    return;\n+          }\n+\n+        regno = REGNO (x);\n+        if (!VFP_REGNO_OK_FOR_SINGLE (regno))\n+          {\n+\t    output_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t    return;\n+          }\n+\n+\tregno = regno - FIRST_VFP_REGNUM;\n+\tfprintf (stream, \"d%d[%d]\", regno / 2, regno % 2);\n+      }\n+      return;\n+\n     /* Register specifier for vld1.16/vst1.16.  Translate the S register\n        number into a D register number and element index.  */\n     case 'z':"}, {"sha": "f1c431a384178bdc823419e1b9dbed7007260f71", "filename": "gcc/config/arm/neon-testgen.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-testgen.ml?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -175,6 +175,7 @@ let rec analyze_shape shape =\n     | Element_of_dreg -> (analyze_shape_elt Dreg) ^ \"\\\\\\\\\\\\[\\\\[0-9\\\\]+\\\\\\\\\\\\]\"\n     | Element_of_qreg -> (analyze_shape_elt Qreg) ^ \"\\\\\\\\\\\\[\\\\[0-9\\\\]+\\\\\\\\\\\\]\"\n     | All_elements_of_dreg -> (analyze_shape_elt Dreg) ^ \"\\\\\\\\\\\\[\\\\\\\\\\\\]\"\n+    | Alternatives (elts) -> \"(\" ^ (String.concat \"|\" (List.map analyze_shape_elt elts)) ^ \")\"\n   in\n     match shape with\n       All (n, elt) -> commas analyze_shape_elt (n_things n elt) \"\""}, {"sha": "43b3805c7bade3d525582f2ec2a1dbc78bd5fed6", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -2687,16 +2687,29 @@\n })\n \n (define_insn \"neon_vdup_n<mode>\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VDQW [(match_operand:<V_elem> 1 \"s_register_operand\" \"r\")]\n-                    UNSPEC_VDUP_N))]\n+  [(set (match_operand:VX 0 \"s_register_operand\" \"=w\")\n+\t(unspec:VX [(match_operand:<V_elem> 1 \"s_register_operand\" \"r\")]\n+\t\t   UNSPEC_VDUP_N))]\n   \"TARGET_NEON\"\n   \"vdup%?.<V_sz_elem>\\t%<V_reg>0, %1\"\n   ;; Assume this schedules like vmov.\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"neon_type\" \"neon_bp_simple\")]\n )\n \n+(define_insn \"neon_vdup_n<mode>\"\n+  [(set (match_operand:V32 0 \"s_register_operand\" \"=w,w\")\n+\t(unspec:V32 [(match_operand:<V_elem> 1 \"s_register_operand\" \"r,t\")]\n+\t\t    UNSPEC_VDUP_N))]\n+  \"TARGET_NEON\"\n+  \"@\n+  vdup%?.<V_sz_elem>\\t%<V_reg>0, %1\n+  vdup%?.<V_sz_elem>\\t%<V_reg>0, %y1\"\n+  ;; Assume this schedules like vmov.\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n (define_insn \"neon_vdup_ndi\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n \t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"r\")]"}, {"sha": "466b06b0fffd639e65e3c9845d5557122411904a", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -68,6 +68,7 @@ type shape_elt = Dreg | Qreg | Corereg | Immed | VecArray of int * shape_elt\n \t       | Element_of_dreg\t(* Used for \"lane\" variants.  *)\n \t       | Element_of_qreg\t(* Likewise.  *)\n \t       | All_elements_of_dreg\t(* Used for \"dup\" variants.  *)\n+\t       | Alternatives of shape_elt list (* Used for multiple valid operands *)\n \n type shape_form = All of int * shape_elt\n                 | Long\n@@ -1008,15 +1009,21 @@ let ops =\n       pf_su_8_64;\n \n     (* Set all lanes to the same value.  *)\n-    Vdup_n, [],\n+    Vdup_n,\n+      [Disassembles_as [Use_operands [| Dreg;\n+                                        Alternatives [ Corereg;\n+                                                       Element_of_dreg ] |]]],\n       Use_operands [| Dreg; Corereg |], \"vdup_n\", bits_1,\n       pf_su_8_32;\n     Vdup_n,\n       [Instruction_name [\"vmov\"];\n        Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]]],\n       Use_operands [| Dreg; Corereg |], \"vdup_n\", notype_1,\n       [S64; U64];\n-    Vdup_n, [],\n+    Vdup_n,\n+      [Disassembles_as [Use_operands [| Qreg;\n+                                        Alternatives [ Corereg;\n+                                                       Element_of_dreg ] |]]],\n       Use_operands [| Qreg; Corereg |], \"vdupQ_n\", bits_1,\n       pf_su_8_32;\n     Vdup_n,\n@@ -1028,7 +1035,10 @@ let ops =\n \n     (* These are just aliases for the above.  *)\n     Vmov_n,\n-      [Builtin_name \"vdup_n\"],\n+      [Builtin_name \"vdup_n\";\n+       Disassembles_as [Use_operands [| Dreg;\n+                                        Alternatives [ Corereg;\n+                                                       Element_of_dreg ] |]]],\n       Use_operands [| Dreg; Corereg |],\n       \"vmov_n\", bits_1, pf_su_8_32;\n     Vmov_n,\n@@ -1038,7 +1048,10 @@ let ops =\n       Use_operands [| Dreg; Corereg |],\n       \"vmov_n\", notype_1, [S64; U64];\n     Vmov_n,\n-      [Builtin_name \"vdupQ_n\"],\n+      [Builtin_name \"vdupQ_n\";\n+       Disassembles_as [Use_operands [| Qreg;\n+                                        Alternatives [ Corereg;\n+                                                       Element_of_dreg ] |]]],\n       Use_operands [| Qreg; Corereg |],\n       \"vmovQ_n\", bits_1, pf_su_8_32;\n     Vmov_n,"}, {"sha": "d33fdf99d70f6f63e3350cf54ae1b0ffc06a5666", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -42,6 +42,11 @@\n     {\n       if (GET_CODE (operands[0]) != REG)\n \toperands[1] = force_reg (<MODE>mode, operands[1]);\n+      else if (TARGET_NEON && CONSTANT_P (operands[1]))\n+\t{\n+\t  operands[1] = neon_make_constant (operands[1]);\n+\t  gcc_assert (operands[1] != NULL_RTX);\n+\t}\n     }\n })\n "}, {"sha": "381701587218c94d74e3aa830172dcfe49c4a697", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -1,3 +1,7 @@\n+2009-11-11  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* gcc.target/arm/neon: Regenerate generated tests.\n+\n 2009-11-10  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/init/placement5.C: New."}, {"sha": "a4d575655104793cbbb00d4f8ca0b733a44c9205", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_nf32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nf32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_nf32 (void)\n   out_float32x4_t = vdupq_n_f32 (arg0_float32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "76b3695873b2b2d05d585767765c98d1f7d970f1", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_np16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_np16 (void)\n   out_poly16x8_t = vdupq_n_p16 (arg0_poly16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "61dff2c4ca5d97f9e437efe1528ceee4cd0df562", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_np8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_np8 (void)\n   out_poly8x16_t = vdupq_n_p8 (arg0_poly8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "593dbebb64c4d0a54655623385b123b8637b688f", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_ns16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_ns16 (void)\n   out_int16x8_t = vdupq_n_s16 (arg0_int16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "22ec1ae5cdfd53a38643b9a051cdffddfb812336", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_ns32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_ns32 (void)\n   out_int32x4_t = vdupq_n_s32 (arg0_int32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "80d046ca5bd1213cd473c83b3a8c1ce0c808c293", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_ns8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_ns8 (void)\n   out_int8x16_t = vdupq_n_s8 (arg0_int8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9f6c98d7af787d64b4ccb469b4af040fe1264d04", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_nu16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_nu16 (void)\n   out_uint16x8_t = vdupq_n_u16 (arg0_uint16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f847c23f69276a5d41f9e88b0da95cc49ac0b810", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_nu32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_nu32 (void)\n   out_uint32x4_t = vdupq_n_u32 (arg0_uint32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4637c52bca6382ce4ea4b92897bdd627426e2d47", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_nu8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdupQ_nu8 (void)\n   out_uint8x16_t = vdupq_n_u8 (arg0_uint8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "94101f64993c2f27d60df60bf5045eea909312e5", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_nf32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nf32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_nf32 (void)\n   out_float32x2_t = vdup_n_f32 (arg0_float32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "aa505ac0650e743db4e90458017c3b37d12a1ba1", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_np16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_np16 (void)\n   out_poly16x4_t = vdup_n_p16 (arg0_poly16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "271d501cf30f28fb06c27cf3d583aa0a92213476", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_np8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_np8 (void)\n   out_poly8x8_t = vdup_n_p8 (arg0_poly8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "14c3e5e77d72996e13ad427485d74d8fbf5b92f0", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_ns16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_ns16 (void)\n   out_int16x4_t = vdup_n_s16 (arg0_int16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "98a7f552140ade8f9fc9bf98d041fdea46048c6c", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_ns32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_ns32 (void)\n   out_int32x2_t = vdup_n_s32 (arg0_int32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "de853e414f976ce88e945d3e88bbee9a8925115c", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_ns8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_ns8 (void)\n   out_int8x8_t = vdup_n_s8 (arg0_int8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "abb747236f8587677cf0f663b814214cff823840", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_nu16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_nu16 (void)\n   out_uint16x4_t = vdup_n_u16 (arg0_uint16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "278df3c77b9833c1a6e283d4f67536de93cfa033", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_nu32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_nu32 (void)\n   out_uint32x2_t = vdup_n_u32 (arg0_uint32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4d675130799b2f24fc980dc73096e1dc1d2cb13a", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_nu8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vdup_nu8 (void)\n   out_uint8x8_t = vdup_n_u8 (arg0_uint8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9e469f1bbc4e0087401bb8f65c5f07958ed17ead", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_nf32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nf32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_nf32 (void)\n   out_float32x4_t = vmovq_n_f32 (arg0_float32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3109d81f52d81d00c058a5acb65d6da399639042", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_np16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_np16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_np16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_np16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_np16 (void)\n   out_poly16x8_t = vmovq_n_p16 (arg0_poly16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "99502f96c9e490f68efb791b2a08f7ea162e9ca6", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_np8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_np8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_np8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_np8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_np8 (void)\n   out_poly8x16_t = vmovq_n_p8 (arg0_poly8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "eea4e1e9ad1e2db0f310382a14fed50cb1adb0b6", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_ns16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_ns16 (void)\n   out_int16x8_t = vmovq_n_s16 (arg0_int16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4c98006011082c69431622ea294e6da460d25ffb", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_ns32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_ns32 (void)\n   out_int32x4_t = vmovq_n_s32 (arg0_int32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b557356eae00302b80d452593408b7bbbe45e93c", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_ns8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_ns8 (void)\n   out_int8x16_t = vmovq_n_s8 (arg0_int8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "748bf6b39110afc5342242ec93965e38f80dd9d5", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_nu16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_nu16 (void)\n   out_uint16x8_t = vmovq_n_u16 (arg0_uint16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1b7f83c0587c22d5cde441eceb55a18494603aa7", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_nu32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_nu32 (void)\n   out_uint32x4_t = vmovq_n_u32 (arg0_uint32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f67f3653596cb35633e6788fa99276b1aa8c1f83", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_nu8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmovQ_nu8 (void)\n   out_uint8x16_t = vmovq_n_u8 (arg0_uint8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "255f565d79e2da3dd6c74465f10962d977ece011", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_nf32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nf32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_nf32 (void)\n   out_float32x2_t = vmov_n_f32 (arg0_float32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6b37dcf82da5b523642b6481d1d6951d2183465a", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_np16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_np16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_np16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_np16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_np16 (void)\n   out_poly16x4_t = vmov_n_p16 (arg0_poly16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1905582c45da947af1f213748d8356b8cccd1b73", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_np8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_np8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_np8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_np8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_np8 (void)\n   out_poly8x8_t = vmov_n_p8 (arg0_poly8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5c56d02e5582441fc5f1202726210b40a4293826", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_ns16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_ns16 (void)\n   out_int16x4_t = vmov_n_s16 (arg0_int16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b4603585668ff948e96c22331a0836a0cff114df", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_ns32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_ns32 (void)\n   out_int32x2_t = vmov_n_s32 (arg0_int32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "dbd70ee3fa91ebb907a7d395b0735b588f20c490", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_ns8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_ns8 (void)\n   out_int8x8_t = vmov_n_s8 (arg0_int8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e035c579a8812563e909507200e043b79d92ed92", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_nu16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu16.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_nu16 (void)\n   out_uint16x4_t = vmov_n_u16 (arg0_uint16_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3ceee794a1a0a9870ccb5344007023bf3fd62019", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_nu32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu32.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_nu32 (void)\n   out_uint32x2_t = vmov_n_u32 (arg0_uint32_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c5328d2236b2e33b8201bdb2216345282c3c6bcc", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_nu8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814a4c3b3548e6fae72992026982d3ce8a186568/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu8.c?ref=814a4c3b3548e6fae72992026982d3ce8a186568", "patch": "@@ -15,5 +15,5 @@ void test_vmov_nu8 (void)\n   out_uint8x8_t = vmov_n_u8 (arg0_uint8_t);\n }\n \n-/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"vdup\\.8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, (\\[rR\\]\\[0-9\\]+|\\[dD\\]\\[0-9\\]+\\\\\\[\\[0-9\\]+\\\\\\])!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}]}