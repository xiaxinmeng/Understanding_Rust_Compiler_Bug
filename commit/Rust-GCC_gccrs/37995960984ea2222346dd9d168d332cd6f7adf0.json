{"sha": "37995960984ea2222346dd9d168d332cd6f7adf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5OTU5NjA5ODRlYTIyMjIzNDZkZDlkMTY4ZDMzMmNkNmY3YWRmMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-27T10:38:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-27T10:42:13Z"}, "message": "c-family: Use TYPE_OVERFLOW_UNDEFINED instead of !TYPE_UNSIGNED in pointer_sum [PR95903]\n\nFor lp64 targets and int off ... ptr[off + 1]\nis lowered in pointer_sum to *(ptr + ((sizetype) off + (sizetype) 1)).\nThat is fine when signed integer wrapping is undefined (and is not done\nalready if off has unsigned type), but changes behavior for -fwrapv, where\noverflow is well defined.  Runtime test could be:\nint\nmain ()\n{\n  char *p = __builtin_malloc (0x100000000UL);\n  if (!p) return 0;\n  char *q = p + 0x80000000UL;\n  int o = __INT_MAX__;\n  q[o + 1] = 1;\n  if (q[-__INT_MAX__ - 1] != 1) __builtin_abort ();\n  return 0;\n}\nwith -fwrapv or so, not included in the testsuite because it requires 4GB\nallocation (with some other test it would be enough to have something\nslightly above 2GB, but still...).\n\n2020-06-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/95903\ngcc/c-family/\n\t* c-common.c (pointer_int_sum): Use TYPE_OVERFLOW_UNDEFINED instead of\n\t!TYPE_UNSIGNED check to see if we can apply distributive law and handle\n\tsmaller precision intop operands separately.\ngcc/testsuite/\n\t* c-c++-common/pr95903.c: New test.", "tree": {"sha": "a4fa692125fde0f40042723e52372c67f8911b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4fa692125fde0f40042723e52372c67f8911b77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37995960984ea2222346dd9d168d332cd6f7adf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37995960984ea2222346dd9d168d332cd6f7adf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37995960984ea2222346dd9d168d332cd6f7adf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37995960984ea2222346dd9d168d332cd6f7adf0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daaed0199ee57013ae011421a7e90b7bdd295373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daaed0199ee57013ae011421a7e90b7bdd295373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daaed0199ee57013ae011421a7e90b7bdd295373"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "a9fa0d123cfcd396359013e38aeb9eda5a5e52ba", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37995960984ea2222346dd9d168d332cd6f7adf0/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37995960984ea2222346dd9d168d332cd6f7adf0/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=37995960984ea2222346dd9d168d332cd6f7adf0", "patch": "@@ -3141,7 +3141,7 @@ pointer_int_sum (location_t loc, enum tree_code resultcode,\n       /* If the constant is unsigned, and smaller than the pointer size,\n \t then we must skip this optimization.  This is because it could cause\n \t an overflow error if the constant is negative but INTOP is not.  */\n-      && (!TYPE_UNSIGNED (TREE_TYPE (intop))\n+      && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (intop))\n \t  || (TYPE_PRECISION (TREE_TYPE (intop))\n \t      == TYPE_PRECISION (TREE_TYPE (ptrop)))))\n     {"}, {"sha": "6e9f68e200f1bbbcb396fbb6f4fcdd1f83251fb9", "filename": "gcc/testsuite/c-c++-common/pr95903.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37995960984ea2222346dd9d168d332cd6f7adf0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95903.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37995960984ea2222346dd9d168d332cd6f7adf0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95903.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95903.c?ref=37995960984ea2222346dd9d168d332cd6f7adf0", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/95903 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -fwrapv -fdump-tree-optimized\" } */\n+/* Verify that for -fwrapv the + 1 addition is performed in the parameter's\n+   type before sign extending it.  */\n+/* { dg-final { scan-tree-dump-times \"off_\\[0-9]+\\\\\\(D\\\\\\) \\\\+ 1\" 2 \"optimized\" } } */\n+\n+char\n+foo (const char *ptr, int off)\n+{\n+  off += 1;\n+  return ptr[off];\n+}\n+\n+char\n+bar (const char *ptr, int off)\n+{\n+  return ptr[off + 1];\n+}"}]}