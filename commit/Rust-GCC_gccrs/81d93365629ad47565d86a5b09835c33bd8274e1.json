{"sha": "81d93365629ad47565d86a5b09835c33bd8274e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkOTMzNjU2MjlhZDQ3NTY1ZDg2YTViMDk4MzVjMzNiZDgyNzRlMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T08:48:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T08:48:01Z"}, "message": "[multiple changes]\n\n2009-07-23  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch6.adb (Check_Return_Subtype_Indication): Replace type equality\n\twith test of coverage, to allow specific type objects in extended\n\treturns of class-wide functions. Remove now-unnecessary special-case\n\ttests that allowed this in certain cases of expanded extended returns.\n\n2009-07-23  Javier Miranda  <miranda@adacore.com>\n\n\t* sinfo.ads,sinfo.adb (Entity/Set_Entity): Attribute available in\n\tN_Null_Statements (for SCIL nodes).\n\t(Is_Scil_Node/Set_Is_Scil_Node): New attribute (for SCIL nodes).\n\t(Scil_Nkind/Set_Scil_Nkind): New attribute (for SCIL nodes).\n\t(Scil_Related_Node/Set_Scil_Related_Node): New attribute (for SCIL\n\tnodes).\n\t(Scil_Target_Prim/Set_Scil_Target_Prim): New attribute (for SCIL nodes).\n\t* exp_disp.adb (Expand_Dispatching_Call): Add generation of SCIL node\n\tassociated with dispatching call.\n\t(Get_Scil_Node_Kind): New function that returns the kind of SCIL node.\n\t(Make_DT, Make_Tags): Add generation of SCIL nodes associated with\n\tinitialization of dispatch tables and initialization of tags.\n\t(New_Scil_Node): New function that creates a new SCIL node.\n\t(Build_Init_Procedure): Add generation of SCIL node associated with the\n\tinitialization of tags done in the IP subprogram.\n\n2009-07-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* errout.adb (Error_Msg_NEL): If the entity in the initial message has\n\tWarnings_Off, do not emit continuation messages.\n\n\t* sem_ch10.adb: Set Is_Compilation_Unit on generated child subprogram\n\tspec.\n\n2009-07-23  Emmanuel Briot  <briot@adacore.com>\n\n\t* ali.adb: Minor comment update\n\n2009-07-23  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* s-win32.ads (HANDLE): Define to be the same size as address type.\n\tFix copyright.\n\n2009-07-23  Olivier Hainque  <hainque@adacore.com>\n\n\t* g-sse.ads: New file. Root of the SSE facilities trees, with\n\tgeneral description and common declarations.\n\t* g-ssvety.ads: New file. Expose user level SSE vector types.\n\t* impunit.adb (Non_Imp_File_Names_95): Register new units.\n\t* gcc-interface/Makefile.in (x86 32/64 linux, win32): Add\n\tEXTRA_GNATRTL_NONTASKING_OBJS entries for SSE units.\n\n2009-07-23  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_ugn.texi: Wordsmithing.\n\nFrom-SVN: r149974", "tree": {"sha": "3934ad8b42d16450bd0d088b678fbab04e0fc5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3934ad8b42d16450bd0d088b678fbab04e0fc5bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81d93365629ad47565d86a5b09835c33bd8274e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d93365629ad47565d86a5b09835c33bd8274e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d93365629ad47565d86a5b09835c33bd8274e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d93365629ad47565d86a5b09835c33bd8274e1/comments", "author": null, "committer": null, "parents": [{"sha": "8b17c58ea569553148e645d2b6b37811cbcaf5a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b17c58ea569553148e645d2b6b37811cbcaf5a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b17c58ea569553148e645d2b6b37811cbcaf5a3"}], "stats": {"total": 722, "additions": 622, "deletions": 100}, "files": [{"sha": "a681c6579dba95a705a0d2851cd37bbbc536094b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -1,3 +1,58 @@\n+2009-07-23  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Return_Subtype_Indication): Replace type equality\n+\twith test of coverage, to allow specific type objects in extended\n+\treturns of class-wide functions. Remove now-unnecessary special-case\n+\ttests that allowed this in certain cases of expanded extended returns.\n+\n+2009-07-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sinfo.ads,sinfo.adb (Entity/Set_Entity): Attribute available in\n+\tN_Null_Statements (for SCIL nodes).\n+\t(Is_Scil_Node/Set_Is_Scil_Node): New attribute (for SCIL nodes).\n+\t(Scil_Nkind/Set_Scil_Nkind): New attribute (for SCIL nodes).\n+\t(Scil_Related_Node/Set_Scil_Related_Node): New attribute (for SCIL\n+\tnodes).\n+\t(Scil_Target_Prim/Set_Scil_Target_Prim): New attribute (for SCIL nodes).\n+\t* exp_disp.adb (Expand_Dispatching_Call): Add generation of SCIL node\n+\tassociated with dispatching call.\n+\t(Get_Scil_Node_Kind): New function that returns the kind of SCIL node.\n+\t(Make_DT, Make_Tags): Add generation of SCIL nodes associated with\n+\tinitialization of dispatch tables and initialization of tags.\n+\t(New_Scil_Node): New function that creates a new SCIL node.\n+\t(Build_Init_Procedure): Add generation of SCIL node associated with the\n+\tinitialization of tags done in the IP subprogram.\n+\n+2009-07-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* errout.adb (Error_Msg_NEL): If the entity in the initial message has\n+\tWarnings_Off, do not emit continuation messages.\n+\n+\t* sem_ch10.adb: Set Is_Compilation_Unit on generated child subprogram\n+\tspec.\n+\n+2009-07-23  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* ali.adb: Minor comment update\n+\n+2009-07-23  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* s-win32.ads (HANDLE): Define to be the same size as address type.\n+\tFix copyright.\n+\n+2009-07-23  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* g-sse.ads: New file. Root of the SSE facilities trees, with\n+\tgeneral description and common declarations.\n+\t* g-ssvety.ads: New file. Expose user level SSE vector types.\n+\t* impunit.adb (Non_Imp_File_Names_95): Register new units.\n+\t* gcc-interface/Makefile.in (x86 32/64 linux, win32): Add\n+\tEXTRA_GNATRTL_NONTASKING_OBJS entries for SSE units.\n+\n+2009-07-23  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_ugn.texi: Wordsmithing.\n+\n 2009-07-23  Arnaud Charlet  <charlet@adacore.com>\n \n \t* prj-conf.ads, prj-conf.adb: Switch to GPLv3."}, {"sha": "b2357eae970716fc2145507f2c5daf3df647cc67", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -2248,7 +2248,9 @@ package body ALI is\n                            end;\n \n                         --  Interfaces are stored in the list of references,\n-                        --  although the parent type itself is stored in XE\n+                        --  although the parent type itself is stored in XE.\n+                        --  The first interface (when there are only\n+                        --  interfaces) is stored in XE.Tref*)\n \n                         elsif Ref = Tref_Derived\n                           and then Typ = 'R'"}, {"sha": "377c3f4a4f44274d39aa3df97f7690eee49607d2", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -1100,6 +1100,10 @@ package body Errout is\n          --  Suppress if no warnings set for either entity or node\n \n          if No_Warnings (N) or else No_Warnings (E) then\n+\n+            --  Disable as well continuation messages, if any.\n+\n+            Last_Killed := True;\n             return;\n          end if;\n "}, {"sha": "2b2b702813b7fae4efd45bb365cc28d93d9072af", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -2322,6 +2322,14 @@ package body Exp_Ch3 is\n                   New_Reference_To\n                     (Node (First_Elmt (Access_Disp_Table (Rec_Type))), Loc)));\n \n+            if Generate_SCIL then\n+               Prepend_To (Init_Tags_List,\n+                 New_Scil_Node\n+                   (Nkind        => IP_Tag_Init,\n+                    Related_Node => First (Init_Tags_List),\n+                    Entity       => Rec_Type));\n+            end if;\n+\n             --  Ada 2005 (AI-251): Initialize the secondary tags components\n             --  located at fixed positions (tags whose position depends on\n             --  variable size components are initialized later ---see below)."}, {"sha": "7e312dad5829d86713d86fdf1a8e8c25ab063365", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -643,6 +643,15 @@ package body Exp_Disp is\n          Typ := Non_Limited_View (Typ);\n       end if;\n \n+      if Generate_SCIL then\n+         Insert_Action (Call_Node,\n+           New_Scil_Node\n+             (Nkind        => Dispatching_Call,\n+              Related_Node => Call_Node,\n+              Entity       => Typ,\n+              Target_Prim  => Subp));\n+      end if;\n+\n       if not Is_Limited_Type (Typ) then\n          Eq_Prim_Op := Find_Prim_Op (Typ, Name_Op_Eq);\n       end if;\n@@ -1596,6 +1605,18 @@ package body Exp_Disp is\n       end if;\n    end Expand_Interface_Thunk;\n \n+   ------------------------\n+   -- Get_Scil_Node_Kind --\n+   ------------------------\n+\n+   function Get_Scil_Node_Kind (Node : Node_Id) return Scil_Node_Kind is\n+   begin\n+      pragma Assert (Nkind (Node) = N_Null_Statement\n+        and then Is_Scil_Node (Node));\n+\n+      return Scil_Node_Kind'Val (UI_To_Int (Scil_Nkind (Node)));\n+   end Get_Scil_Node_Kind;\n+\n    ------------\n    -- Has_DT --\n    ------------\n@@ -4221,6 +4242,14 @@ package body Exp_Disp is\n                   New_Reference_To\n                     (RTE (RE_No_Dispatch_Table_Wrapper), Loc)));\n \n+            if Generate_SCIL then\n+               Insert_Before (Last (Result),\n+                 New_Scil_Node\n+                   (Nkind        => Dispatch_Table_Object_Init,\n+                    Related_Node => Last (Result),\n+                    Entity       => Typ));\n+            end if;\n+\n             Append_To (Result,\n               Make_Attribute_Definition_Clause (Loc,\n                 Name       => New_Reference_To (DT, Loc),\n@@ -4247,6 +4276,14 @@ package body Exp_Disp is\n                             (RTE_Record_Component (RE_NDT_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n \n+            if Generate_SCIL then\n+               Insert_Before (Last (Result),\n+                 New_Scil_Node\n+                   (Nkind        => Dispatch_Table_Tag_Init,\n+                    Related_Node => Last (Result),\n+                    Entity       => Typ));\n+            end if;\n+\n          --  Generate:\n          --    DT : Dispatch_Table_Wrapper (Nb_Prim);\n          --    for DT'Alignment use Address'Alignment;\n@@ -4276,6 +4313,14 @@ package body Exp_Disp is\n                     Constraint => Make_Index_Or_Discriminant_Constraint (Loc,\n                                     Constraints => DT_Constr_List))));\n \n+            if Generate_SCIL then\n+               Insert_Before (Last (Result),\n+                 New_Scil_Node\n+                   (Nkind        => Dispatch_Table_Object_Init,\n+                    Related_Node => Last (Result),\n+                    Entity       => Typ));\n+            end if;\n+\n             Append_To (Result,\n               Make_Attribute_Definition_Clause (Loc,\n                 Name       => New_Reference_To (DT, Loc),\n@@ -4302,6 +4347,14 @@ package body Exp_Disp is\n                             (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n \n+            if Generate_SCIL then\n+               Insert_Before (Last (Result),\n+                 New_Scil_Node\n+                   (Nkind        => Dispatch_Table_Tag_Init,\n+                    Related_Node => Last (Result),\n+                    Entity       => Typ));\n+            end if;\n+\n             Append_To (Result,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier =>\n@@ -5070,6 +5123,14 @@ package body Exp_Disp is\n                 Expression => Make_Aggregate (Loc,\n                   Expressions => DT_Aggr_List)));\n \n+            if Generate_SCIL then\n+               Insert_Before (Last (Result),\n+                 New_Scil_Node\n+                   (Nkind        => Dispatch_Table_Object_Init,\n+                    Related_Node => Last (Result),\n+                    Entity       => Typ));\n+            end if;\n+\n             Append_To (Result,\n               Make_Attribute_Definition_Clause (Loc,\n                 Name       => New_Reference_To (DT, Loc),\n@@ -5376,6 +5437,14 @@ package body Exp_Disp is\n                 Expression => Make_Aggregate (Loc,\n                   Expressions => DT_Aggr_List)));\n \n+            if Generate_SCIL then\n+               Insert_Before (Last (Result),\n+                 New_Scil_Node\n+                   (Nkind        => Dispatch_Table_Object_Init,\n+                    Related_Node => Last (Result),\n+                    Entity       => Typ));\n+            end if;\n+\n             Append_To (Result,\n               Make_Attribute_Definition_Clause (Loc,\n                 Name       => New_Reference_To (DT, Loc),\n@@ -6066,6 +6135,14 @@ package body Exp_Disp is\n                             (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n \n+            if Generate_SCIL then\n+               Insert_Before (Last (Result),\n+                 New_Scil_Node\n+                   (Nkind        => Dispatch_Table_Tag_Init,\n+                    Related_Node => Last (Result),\n+                    Entity       => Typ));\n+            end if;\n+\n             Append_To (Result,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Predef_Prims_Ptr,\n@@ -6100,6 +6177,14 @@ package body Exp_Disp is\n                           New_Occurrence_Of\n                             (RTE_Record_Component (RE_NDT_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n+\n+            if Generate_SCIL then\n+               Insert_Before (Last (Result),\n+                 New_Scil_Node\n+                   (Nkind        => Dispatch_Table_Tag_Init,\n+                    Related_Node => Last (Result),\n+                    Entity       => Typ));\n+            end if;\n          end if;\n \n          Set_Is_True_Constant (DT_Ptr);\n@@ -6322,6 +6407,29 @@ package body Exp_Disp is\n       end if;\n    end New_Value;\n \n+   -------------------\n+   -- New_Scil_Node --\n+   -------------------\n+\n+   function New_Scil_Node\n+     (Nkind        : Scil_Node_Kind;\n+      Related_Node : Node_Id;\n+      Entity       : Entity_Id := Empty;\n+      Target_Prim  : Entity_Id := Empty) return Node_Id\n+   is\n+      New_N : Node_Id;\n+\n+   begin\n+      New_N := New_Node (N_Null_Statement, Sloc (Related_Node));\n+      Set_Is_Scil_Node      (New_N);\n+      Set_Scil_Nkind        (New_N, UI_From_Int (Scil_Node_Kind'Pos (Nkind)));\n+      Set_Scil_Related_Node (New_N, Related_Node);\n+      Set_Entity            (New_N, Entity);\n+      Set_Scil_Target_Prim  (New_N, Target_Prim);\n+\n+      return New_N;\n+   end New_Scil_Node;\n+\n    -----------------------------------\n    -- Original_View_In_Visible_Part --\n    -----------------------------------"}, {"sha": "fab99c28de712cf1e4b0d2bd156bbf21e47fea56", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -30,6 +30,17 @@ with Types; use Types;\n \n package Exp_Disp is\n \n+   -------------------------------\n+   -- SCIL Node Type Definition --\n+   -------------------------------\n+\n+   type Scil_Node_Kind is (\n+      Unused,\n+      IP_Tag_Init,\n+      Dispatching_Call,\n+      Dispatch_Table_Object_Init,\n+      Dispatch_Table_Tag_Init);\n+\n    -------------------------------------\n    -- Predefined primitive operations --\n    -------------------------------------\n@@ -215,6 +226,9 @@ package Exp_Disp is\n    --  Otherwise they are set to the defining identifier and the subprogram\n    --  body of the generated thunk.\n \n+   function Get_Scil_Node_Kind (Node : Node_Id) return Scil_Node_Kind;\n+   --  Returns the kind of an SCIL node\n+\n    function Is_Predefined_Dispatching_Operation (E : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-251): Determines if E is a predefined primitive operation\n \n@@ -309,6 +323,15 @@ package Exp_Disp is\n    --  tagged types this routine imports the forward declaration of the tag\n    --  entity, that will be declared and exported by Make_DT.\n \n+   function New_Scil_Node\n+     (Nkind        : Scil_Node_Kind;\n+      Related_Node : Node_Id;\n+      Entity       : Entity_Id := Empty;\n+      Target_Prim  : Entity_Id := Empty) return Node_Id;\n+   --  Creates a new Scil node. Related_Node is the AST node associated with\n+   --  this Scil node. Entity is the tagged type associated with the Scil node.\n+   --  For Dispatching_Call nodes, Target_Prim is the dispatching primitive.\n+\n    function Register_Primitive\n      (Loc     : Source_Ptr;\n       Prim    : Entity_Id) return List_Id;"}, {"sha": "d0c3ec3fbe4eada0ae89f5ca0aad79fa6bfd5b79", "filename": "gcc/ada/g-sse.ads", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fg-sse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fg-sse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sse.ads?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -0,0 +1,102 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                             G N A T . S S E                              --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This unit is the root of a set aimed at offering Ada bindings to a subset\n+--  of the Intel(r) Streaming SIMD Extensions with GNAT.  It exposes vector\n+--  _component_ types together with general comments on the binding contents.\n+\n+--  The purpose is to allow access from Ada to the SSE facilities defined in\n+--  the Intel(r) compiler manuals, in particular in the Intrinsics Reference\n+--  of the C++ Compiler User's Guide, available from http://www.intel.com.\n+\n+--  As of today, essentially one unit is offered: GNAT.SSE.Vector__Types,\n+--  which exposes Ada types corresponding to the reference types (__m128 and\n+--  the like) over which GCC builtins will operate.\n+\n+--  The exposed Ada types are private. Object initializations or value\n+--  observations may be performed with unchecked conversions or address\n+--  overlays, for example:\n+\n+--  with Ada.Unchecked_Conversion;\n+--  with GNAT.SSE.Vector_Types; use GNAT.SSE; use GNAT.SSE.Vector_Types;\n+--\n+--  procedure SSE_Base is\n+--\n+--     --  Core operations\n+--\n+--     function mm_add_ss (A, B : M128) return M128;\n+--     pragma Import (Intrinsic, mm_add_ss, \"__builtin_ia32_addss\");\n+--\n+--     --  User views / conversions or overlays\n+--\n+--     type Vf32_View is array (1 .. 4) of Float;\n+--     for Vf32_View'Alignment use VECTOR_ALIGN;\n+--\n+--     function To_M128 is new Ada.Unchecked_Conversion (Vf32_View, M128);\n+--\n+--     X, Y, Z : M128;\n+--\n+--     Vz : Vf32_View;\n+--     for Vz'Address use Z'Address;\n+--  begin\n+--     X := To_M128 ((1.0, 1.0, 2.0, 2.0));\n+--     Y := To_M128 ((2.0, 2.0, 1.0, 1.0));\n+--     Z := mm_add_ss (X, Y);\n+--\n+--     if vz /= (3.0, 1.0, 2.0, 2.0) then\n+--        raise Program_Error;\n+--     end if;\n+--  end;\n+\n+--  Use of Unchecked_Union is very tempting, however hits difficulties with\n+--  e.g. implicit front-end expanded equality operators, which typically\n+--  feature a subcase comparing the m128 components, not supported by the\n+--  middle-end.\n+\n+package GNAT.SSE is\n+   type Float32 is new Float;\n+   type Float64 is new Long_Float;\n+   type Integer64 is new Long_Long_Integer;\n+\n+   VECTOR_BYTES : constant := 16;\n+   --  Common size of all the SSE vector types, in bytes.\n+\n+   VECTOR_ALIGN : constant := 16;\n+   --  Common alignment of all the SSE vector types, in bytes.\n+\n+   --  Alignment-wise, the reference document reads:\n+   --  << The compiler aligns __m128d and _m128i local and global data to\n+   --     16-byte boundaries on the stack. >>\n+   --\n+   --  We apply that consistently to all the Ada vector types, as GCC does\n+   --  for the corresponding C types.\n+\n+end GNAT.SSE;"}, {"sha": "4ad63d852a51fc57081681b118c7f1c967e4f40a", "filename": "gcc/ada/g-ssvety.ads", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fg-ssvety.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fg-ssvety.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-ssvety.ads?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -0,0 +1,126 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                 G N A T . S S E . V e c t o r _ T y p e s                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This unit exposes the Ada __m128 like data types to represent the contents\n+--  of SSE registers, for use by the SSE intrinsics.\n+\n+package GNAT.SSE.Vector_Types is\n+\n+   --  The reference guide states a few usage guidelines for the C types :\n+\n+   --  << Since these new data types are not basic ANSI C data types, you\n+   --     must observe the following usage restrictions:\n+   --\n+   --     * Use new data types only on either side of an assignment, as a\n+   --       return value, or as a parameter. You cannot use it with other\n+   --       arithmetic expressions (\"+\", \"-\", and so on).\n+   --\n+   --     * Use new data types as objects in aggregates, such as unions to\n+   --       access the byte elements and structures.\n+   --\n+   --     * Use new data types only with the respective intrinsics described\n+   --       in this documentation. >>\n+\n+   type M128 is private;   --  SSE >= 1\n+   type M128d is private;  --  SSE >= 2\n+   type M128i is private;  --  SSE >= 2\n+\n+private\n+\n+   --  GCC'wise, vector operations operate on objects of vector modes,\n+   --  conveyed through vector types obtained by setting an attribute on what\n+   --  looks like a component typedef.  For example, in C (xmmintrin.h):\n+   --\n+   --    typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+   --  We can obtain the same low level GCC effect in Ada with\n+   --  Machine_Attribute pragmas, as in\n+   --\n+   --    type Vf is new Float;\n+   --    pragma Machine_Attribute (Vf,  \"vector_size\", 16);\n+   --\n+   --  which makes Vf a 16bytes long V4SFmode type for GCC. The effect on the\n+   --  type layout is not conveyed to the front-end, however, so the latter\n+   --  still sees \"Vf\" as a 4bytes long single float. This leads to numerous\n+   --  potential pitfalls if this type is directly exposed user land, so we\n+   --  add wrapper records with rep clauses to compensate.\n+\n+   --  The wrapper records all have a single component of the twisted low\n+   --  level type, so they inherit the mode while the rep clauses convey the\n+   --  size and alignment information to the front-end.\n+\n+   ------------\n+   --  M128  --\n+   ------------\n+\n+   --  << The __m128 data type can hold four 32-bit floating-point values. >>\n+\n+   type V4sf is new Float32;\n+   pragma Machine_Attribute (V4sf, \"vector_size\", VECTOR_BYTES);\n+\n+   type M128 is record\n+      Value : V4sf;\n+   end record;\n+   for M128'Size use VECTOR_BYTES * 8;\n+   for M128'Alignment use VECTOR_ALIGN;\n+\n+   -------------\n+   --  M128d  --\n+   -------------\n+\n+   --  << The __m128d data type can hold two 64-bit floating-point values. >>\n+\n+   type V2df is new Float64;\n+   pragma Machine_Attribute (V2df, \"vector_size\", VECTOR_BYTES);\n+\n+   type M128d is record\n+      Value : V2df;\n+   end record;\n+   for M128d'Size use VECTOR_BYTES * 8;\n+   for M128d'Alignment use VECTOR_ALIGN;\n+\n+   -------------\n+   --  M128i  --\n+   -------------\n+\n+   --  << The __m128i data type can hold sixteen 8-bit, eight 16-bit, four\n+   --     32-bit, or two 64-bit integer values. >>\n+\n+   type V2di is new Integer64;\n+   pragma Machine_Attribute (V2di, \"vector_size\", VECTOR_BYTES);\n+\n+   type M128i is record\n+      Value : V2di;\n+   end record;\n+   for M128i'Size use VECTOR_BYTES * 8;\n+   for M128i'Alignment use VECTOR_ALIGN;\n+\n+end GNAT.SSE.Vector_Types;"}, {"sha": "d487716cc5303cad1449b49642ffbde009dd6b04", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -1052,6 +1052,7 @@ ifeq ($(strip $(filter-out %86 linux%,$(arch) $(osys))),)\n     endif\n \n     THREADSLIB = -lpthread\n+    EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n     EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   endif\n \n@@ -1591,7 +1592,8 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n         system.ads<system-mingw.ads\n     endif\n \n-    EXTRA_GNATRTL_NONTASKING_OBJS = s-win32.o s-winext.o g-regist.o\n+    EXTRA_GNATRTL_NONTASKING_OBJS = \\\n+\ts-win32.o s-winext.o g-regist.o g-sse.o g-ssvety.o\n     EXTRA_GNATRTL_TASKING_OBJS = a-exetim.o\n \n     MISCLIB = -lws2_32\n@@ -2001,6 +2003,7 @@ ifeq ($(strip $(filter-out %x86_64 linux%,$(arch) $(osys))),)\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n     indepsw.adb<indepsw-gnu.adb\n \n+  EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n   THREADSLIB=-lpthread"}, {"sha": "36efbe7ee367ad2df9b3077ea56953c27db88336", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 64, "deletions": 60, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -21209,29 +21209,29 @@ This rule has no parameters.\n @cindex @code{Complex_Inlined_Subprograms} rule (for @command{gnatcheck})\n \n @noindent\n-Flags a subprogram body if a pragma Inline is applied to the subprogram or\n-generic subprogram and this subprogram is too complex to be inlined.\n+Flags the body of a subprogram (or generic subprogram) if\n+pragma Inline has been applied to the subprogram but the body\n+is too complex to be expanded inline.\n \n-A subprogram is considered as being too complex for inlining if at least one\n-of the following conditions is met for its body:\n+A subprogram (or generic subprogram) is considered too complex for inline\n+expansion if its body meets at least one of the following conditions:\n \n @itemize @bullet\n @item\n-number of local declarations + number of statements in subprogram body is\n-more that a value specified by the @option{N} rule parameter;\n+The number of local declarations and statements exceeds\n+a value specified by the @option{N} rule parameter;\n \n @item\n-the body statement sequence contains a loop, if or case statement;\n-\n+The body contains a @code{loop}, @code{if} or @code{case} statement;\n @end itemize\n \n @noindent\n-This rule has the following (mandatory) parameters for the @option{+R} option:\n+This rule has the following (mandatory) parameter for the @option{+R} option:\n \n @table @emph\n @item N\n-Positive integer specifying the maximal allowed total number of local\n-declarations and statements in subprogram body.\n+Positive integer specifying the maximum allowed total number of local\n+declarations and statements in the subprogram body.\n @end table\n \n \n@@ -21252,24 +21252,24 @@ This rule has no parameters.\n @cindex @code{Deep_Inheritance_Hierarchies} rule (for @command{gnatcheck})\n \n @noindent\n-Flags tagged derived type declarations and formal tagged derived type\n-declarations if the corresponding inheritance hierarchy is deeper that\n-a value specified by the @option{N} rule parameter.\n+Flags a tagged derived type declaration if its depth (in its inheritance\n+hierarchy) exceeds the value specified by the @option{N} rule parameter.\n \n-The depth of the inheritance hierarchy is the length of the longest\n-path from the root to a leaf in the type inheritance tree.\n+The depth of a root tagged type (ie, a tagged type that is not a derived type)\n+is 0.\n+If tagged type T2 derives directly from tagged type T1, then the depth of T2\n+is one more than the depth of T1.\n \n-The rule does not flag interface types and private extension\n-declarations (in case of a private extension, the correspondong full\n-declaration is checked)\n+This rule does not flag interface types or private extension\n+declarations. In the case of a private extension, the correspondong full\n+declaration is checked.\n \n-This rule has the following parameter for +R option:\n-\n-This rule has the following (mandatory) parameters for the @option{+R} option:\n+This rule has the following (mandatory) parameter for the @option{+R} option:\n \n @table @emph\n @item N\n-Positive integer specifying the maximal allowed depth of the inheritance tree.\n+Positive integer specifying the maximal allowed depth of any inheritance\n+hierarchy.\n @end table\n \n \n@@ -21278,43 +21278,47 @@ Positive integer specifying the maximal allowed depth of the inheritance tree.\n @cindex @code{Deeply_Nested_Generics} rule (for @command{gnatcheck})\n \n @noindent\n-Flags generic declarations nested in another generic declarations if\n-the level of generics-in-generics nesting is higher that\n+Flags a generic declaration nested in another generic declaration if\n+the nesting level of the inner generic exceeds\n a value specified by the @option{N} rule parameter.\n-The level of generics-in-generics\n-nesting is the number of generic declaratons that enclose the given (generic)\n-declaration. Formal packages are not flagged by this rule.\n+The nesting level is the number of generic declaratons that enclose the given\n+(generic) declaration. Formal packages are not flagged by this rule.\n \n This rule has the following (mandatory) parameters for the @option{+R} option:\n \n @table @emph\n @item N\n-Positive integer specifying the maximal allowed level of\n-generics-in-generics nesting.\n+Positive integer specifying the maximal allowed nesting level\n+for a generic declaration.\n @end table\n \n @node Deeply_Nested_Inlining\n @subsection @code{Deeply_Nested_Inlining}\n @cindex @code{Deeply_Nested_Inlining} rule (for @command{gnatcheck})\n \n @noindent\n-Flags a subprogram if a pragma @code{Inline} is applied to the corresponding\n-subprogram (or generic subprogram in case if a flagged subprogram is a generic\n-instantiation) and the subprogram body contains a call to another inlined\n-subprogram that results in nested inlining with nesting depth more then\n-a value specified by the @option{N} rule parameter. This rule\n-assumes that calls to subprograms in with'ed units are inlided if\n-at the place of the call the corresponding Inline pragma is visible. This\n-rule may be usefull for the case when eiter @option{-gnatn} or @option{-gnatN}\n-option is used when building the executable.\n+Flags the body of a subprogram (or generic subprogram) if\n+pragma Inline has been applied to the subprogram but the body\n+contains a call to another inlined subprogram that results in nested inlining\n+with nesting depth exceeding the value specified by the\n+@option{N} rule parameter.\n+\n+This rule assumes that pragma Inline applies equally to calls on\n+subprograms regardless of whether the subprogram declaration appears in the\n+same compilation unit as the call, or in a separately compiled\n+(e.g., @i{with}ed) unit.\n+\n+This rule may be useful when either the @option{-gnatn} or @option{-gnatN}\n+option is used.\n \n If a subprogram should be flagged according to this rule, the body declaration\n is flagged only if it is not a completion of a subprogram declaration.\n \n-This rule requires the global analysis of all the set of compilation units that\n-are @command{gnatcheck} arguments, that may affect performance.\n+This rule requires the global analysis of all the compilation units that\n+are @command{gnatcheck} arguments; such analysis may affect the tool's\n+performance.\n \n-This rule has the following (mandatory) parameters for the @option{+R} option:\n+This rule has the following (mandatory) parameter for the @option{+R} option:\n \n @table @emph\n @item N\n@@ -21366,8 +21370,8 @@ This rule has no parameters.\n \n @noindent\n Flags any non-dispatching call to a dispatching primitive operation, except\n-when a primitive of a tagged type calls directly the same primitive of the\n-immediate ancestor.\n+for the common idiom where a primitive subprogram for a tagged type\n+directly calls the same primitive subprogram of the type's immediate ancestor.\n \n This rule has no parameters.\n \n@@ -21487,16 +21491,17 @@ This rule has the following parameters:\n \n @table @asis\n @item @emph{Attribute_Designator}\n-Adds the specified attribute to the set of attributes to be checked and sets\n-the checks for all the specified attributes ON. If @emph{Attribute_Designator}\n-does not correspond to any attribute designator defined in the Ada standard\n-or to the designator of a GNAT-specific attribute defined in\n+Adds the specified attribute to the set of attributes to be detected and sets\n+the detection checks for all the specified attributes ON.\n+If @emph{Attribute_Designator}\n+does not denote any attribute defined in the Ada standard\n+or in\n @ref{Implementation Defined Attributes,,, gnat_rm, GNAT Reference\n Manual}, it is treated as the name of unknown attribute.\n \n @item @code{GNAT}\n All the GNAT-specific attributes are detected; this sets\n-the checks for all the specified attributes ON.\n+the detection checks for all the specified attributes ON.\n \n @item @code{ALL}\n All attributes are detected; this sets the rule ON.\n@@ -21506,12 +21511,11 @@ All attributes are detected; this sets the rule ON.\n @table @asis\n @item @emph{Attribute_Designator}\n Removes the specified attribute from the set of attributes to be\n-checked without affecting checks for\n+detected without affecting detection checks for\n other attributes. If @emph{Attribute_Designator} does not correspond to any\n-attribute designator defined in the Ada standard or to the designator\n-of a GNAT-specific attribute defined in\n+attribute defined in the Ada standard or in\n @ref{Implementation Defined Attributes,,, gnat_rm, GNAT Reference Manual},\n-this option is treated as turning OFF detection of all unknown pragmas.\n+this option is treated as turning OFF detection of all unknown attributes.\n \n @item GNAT\n Turn OFF detection of all GNAT-specific attributes\n@@ -21523,20 +21527,20 @@ turn the rule OFF.\n @end itemize\n \n @noindent\n-Parameters are not case sensitive. If @emph{Attribute_Designator} does not have\n-the syntax of an Ada identifier and therefore can not be considered as a (part\n-of an) attribute designator, a diagnostic message is generated and the\n+Parameters are not case sensitive. If @emph{Attribute_Designator} does not\n+have the syntax of an Ada identifier and therefore can not be considered as a\n+(part of an) attribute designator, a diagnostic message is generated and the\n corresponding parameter is ignored. (If an attribute allows a static\n expression to be a part of the attribute designator, this expression is\n-ignored by this rule.\n+ignored by this rule.)\n \n When more then one parameter is given in the same rule option, the parameters\n-must be separated by a comma.\n+must be separated by commas.\n \n If more then one option for this rule is specified for the gnatcheck call, a\n new option overrides the previous one(s).\n \n-The @option{+R} option with no parameters turns the rule ON with the set of\n+The @option{+R} option with no parameters turns the rule ON, with the set of\n attributes to be detected defined by the previous rule options.\n (By default this set is empty, so if the only option specified for the rule is\n @option{+RForbidden_Attributes} (with\n@@ -21818,7 +21822,7 @@ parameter name is not case-sensitive). Declarations of dispatching functions\n with controlling result and no controlling parameter are never flagged.\n \n A subprogram body declaration, subprogram renaming declaration of subprogram\n-body stub is flagged only if it is not a completion of a pripr subprogram\n+body stub is flagged only if it is not a completion of a prior subprogram\n declaration.\n \n This rule has no parameters."}, {"sha": "4264a5a9db738d2b18e15771807cefef618ce8cb", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -275,6 +275,8 @@ package body Impunit is\n      \"g-sptavs\",    -- GNAT.Spitbol.Table_Vstring\n      \"g-string\",    -- GNAT.Strings\n      \"g-strspl\",    -- GNAT.String_Split\n+     \"g-sse   \",    -- GNAT.SSE\n+     \"g-ssvety\",    -- GNAT.SSE.Vector_Types\n      \"g-table \",    -- GNAT.Table\n      \"g-tasloc\",    -- GNAT.Task_Lock\n      \"g-thread\",    -- GNAT.Threads"}, {"sha": "307647f7366f33aa45599bc512c36c96974c7dc1", "filename": "gcc/ada/s-win32.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fs-win32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fs-win32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-win32.ads?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2009, Free Software Foundation, Inc.            --\n+--         Copyright (C) 2008-2009, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,7 +52,7 @@ package System.Win32 is\n \n    subtype PVOID is Address;\n \n-   type HANDLE is new Interfaces.C.long;\n+   type HANDLE is new Interfaces.C.ptrdiff_t;\n \n    INVALID_HANDLE_VALUE : constant HANDLE := -1;\n "}, {"sha": "a67acb5539f2d860395d25afb4d86a8084773a78", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -3829,11 +3829,14 @@ package body Sem_Ch10 is\n       --  immediately visible.\n \n       --  Find entity for compilation unit, and set its private descendant\n-      --  status as needed.\n+      --  status as needed. Indicate that it is a compilation unit, which is\n+      --  redundant in general, but needed if this is a generated child spec\n+      --  for a child body without previous spec.\n \n       E_Name := Defining_Entity (Lib_Unit);\n \n       Set_Is_Child_Unit (E_Name);\n+      Set_Is_Compilation_Unit (E_Name);\n \n       Set_Is_Private_Descendant (E_Name,\n          Is_Private_Descendant (P_Name)"}, {"sha": "2b3256824b0ae0f035c7a31b00fe2c34078ce8c1", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -583,15 +583,19 @@ package body Sem_Ch6 is\n                Error_Msg_N (\"must use anonymous access type\", Subtype_Ind);\n             end if;\n \n-         --  Subtype indication case: check that the types are the same, and\n-         --  statically match if appropriate. Also handle record types with\n-         --  unknown discriminants for which we have built the underlying\n-         --  record view.\n-\n-         elsif Base_Type (R_Stm_Type) = Base_Type (R_Type)\n+         --  Subtype indication case: check that the return object's type is\n+         --  covered by the result type, and that the subtypes statically match\n+         --  when the result subtype is constrained. Also handle record types\n+         --  with unknown discriminants for which we have built the underlying\n+         --  record view. Coverage is needed to allow specific-type return\n+         --  objects when the result type is class-wide (see AI05-32).\n+\n+         elsif Covers (Base_Type (R_Type), Base_Type (R_Stm_Type))\n            or else (Is_Underlying_Record_View (Base_Type (R_Stm_Type))\n-                      and then Underlying_Record_View (Base_Type (R_Stm_Type))\n-                                 = Base_Type (R_Type))\n+                      and then\n+                        Covers\n+                          (Base_Type (R_Type),\n+                           Underlying_Record_View (Base_Type (R_Stm_Type))))\n          then\n             --  A null exclusion may be present on the return type, on the\n             --  function specification, on the object declaration or on the\n@@ -616,31 +620,6 @@ package body Sem_Ch6 is\n                end if;\n             end if;\n \n-         --  If the function's result type doesn't match the return object\n-         --  entity's type, then we check for the case where the result type\n-         --  is class-wide, and allow the declaration if the type of the object\n-         --  definition matches the class-wide type. This prevents rejection\n-         --  in the case where the object declaration is initialized by a call\n-         --  to a build-in-place function with a specific result type and the\n-         --  object entity had its type changed to that specific type. This is\n-         --  also allowed in the case where Obj_Decl does not come from source,\n-         --  which can occur for an expansion of a simple return statement of\n-         --  a build-in-place class-wide function when the result expression\n-         --  has a specific type, because a return object with a specific type\n-         --  is created. (Note that the ARG believes that return objects should\n-         --  be allowed to have a type covered by a class-wide result type in\n-         --  any case, so once that relaxation is made (see AI05-32), the above\n-         --  check for type compatibility should be changed to test Covers\n-         --  rather than equality, and the following special test will no\n-         --  longer be needed. ???)\n-\n-         elsif Is_Class_Wide_Type (R_Type)\n-           and then\n-             (R_Type = Etype (Object_Definition (Original_Node (Obj_Decl)))\n-               or else not Comes_From_Source (Obj_Decl))\n-         then\n-            null;\n-\n          elsif Etype (Base_Type (R_Type)) = R_Stm_Type\n            and then Is_Null_Extension (Base_Type (R_Type))\n          then"}, {"sha": "56347de3bd5f543e0e9aa1b4765fc6468e52d37a", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 68, "deletions": 2, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -1027,7 +1027,8 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind in N_Has_Entity\n         or else NT (N).Nkind = N_Freeze_Entity\n-        or else NT (N).Nkind = N_Attribute_Definition_Clause);\n+        or else NT (N).Nkind = N_Attribute_Definition_Clause\n+        or else NT (N).Nkind = N_Null_Statement);\n       return Node4 (N);\n    end Entity;\n \n@@ -1703,6 +1704,14 @@ package body Sinfo is\n       return Flag7 (N);\n    end Is_Protected_Subprogram_Body;\n \n+   function Is_Scil_Node\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      return Flag4 (N);\n+   end Is_Scil_Node;\n+\n    function Is_Static_Coextension\n       (N : Node_Id) return Boolean is\n    begin\n@@ -2533,6 +2542,30 @@ package body Sinfo is\n       return Flag18 (N);\n    end Rounded_Result;\n \n+   function Scil_Nkind\n+      (N : Node_Id) return Uint is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      return Uint3 (N);\n+   end Scil_Nkind;\n+\n+   function Scil_Related_Node\n+      (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      return Node1 (N);\n+   end Scil_Related_Node;\n+\n+   function Scil_Target_Prim\n+      (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      return Node2 (N);\n+   end Scil_Target_Prim;\n+\n    function Scope\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -3850,7 +3883,8 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind in N_Has_Entity\n         or else NT (N).Nkind = N_Freeze_Entity\n-        or else NT (N).Nkind = N_Attribute_Definition_Clause);\n+        or else NT (N).Nkind = N_Attribute_Definition_Clause\n+        or else NT (N).Nkind = N_Null_Statement);\n       Set_Node4 (N, Val); -- semantic field, no parent set\n    end Set_Entity;\n \n@@ -4517,6 +4551,14 @@ package body Sinfo is\n       Set_Flag7 (N, Val);\n    end Set_Is_Protected_Subprogram_Body;\n \n+   procedure Set_Is_Scil_Node\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      Set_Flag4 (N, Val);\n+   end Set_Is_Scil_Node;\n+\n    procedure Set_Is_Static_Coextension\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n@@ -5347,6 +5389,30 @@ package body Sinfo is\n       Set_Flag18 (N, Val);\n    end Set_Rounded_Result;\n \n+   procedure Set_Scil_Nkind\n+      (N : Node_Id; Val : Uint) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      Set_Uint3 (N, Val);\n+   end Set_Scil_Nkind;\n+\n+   procedure Set_Scil_Related_Node\n+      (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      Set_Node1 (N, Val);\n+   end Set_Scil_Related_Node;\n+\n+   procedure Set_Scil_Target_Prim\n+      (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      Set_Node2 (N, Val);\n+   end Set_Scil_Target_Prim;\n+\n    procedure Set_Scope\n       (N : Node_Id; Val : Node_Id) is\n    begin"}, {"sha": "4966bb79533695b417f77312cc3a4fdb5e4ab098", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d93365629ad47565d86a5b09835c33bd8274e1/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=81d93365629ad47565d86a5b09835c33bd8274e1", "patch": "@@ -3836,6 +3836,11 @@ package Sinfo is\n \n       --  N_Null_Statement\n       --  Sloc points to NULL\n+      --  Is_Scil_Node (Flag4-Sem)\n+      --  Scil_Nkind (Uint3-Sem)\n+      --  Scil_Related_Node (Node1-Sem)\n+      --  Entity (Node4-Sem)\n+      --  Scil_Target_Prim (Node2-Sem)\n \n       ----------------\n       -- 5.1  Label --\n@@ -8052,6 +8057,9 @@ package Sinfo is\n    function Is_Protected_Subprogram_Body\n      (N : Node_Id) return Boolean;    -- Flag7\n \n+   function Is_Scil_Node\n+     (N : Node_Id) return Boolean;    -- Flag4\n+\n    function Is_Static_Coextension\n      (N : Node_Id) return Boolean;    -- Flag14\n \n@@ -8307,6 +8315,15 @@ package Sinfo is\n    function Rounded_Result\n      (N : Node_Id) return Boolean;    -- Flag18\n \n+   function Scil_Nkind\n+      (N : Node_Id) return Uint;      -- Uint3\n+\n+   function Scil_Related_Node\n+     (N : Node_Id) return Node_Id;    -- Node1\n+\n+   function Scil_Target_Prim\n+     (N : Node_Id) return Node_Id;    -- Node2\n+\n    function Scope\n      (N : Node_Id) return Node_Id;    -- Node3\n \n@@ -8949,6 +8966,9 @@ package Sinfo is\n    procedure Set_Is_Protected_Subprogram_Body\n      (N : Node_Id; Val : Boolean := True);    -- Flag7\n \n+   procedure Set_Is_Scil_Node\n+     (N : Node_Id; Val : Boolean := True);    -- Flag4\n+\n    procedure Set_Is_Static_Coextension\n      (N : Node_Id; Val : Boolean := True);    -- Flag14\n \n@@ -9204,6 +9224,15 @@ package Sinfo is\n    procedure Set_Rounded_Result\n      (N : Node_Id; Val : Boolean := True);    -- Flag18\n \n+   procedure Set_Scil_Nkind\n+      (N : Node_Id; Val : Uint);              -- Uint3\n+\n+   procedure Set_Scil_Related_Node\n+     (N : Node_Id; Val : Node_Id);            -- Node1\n+\n+   procedure Set_Scil_Target_Prim\n+     (N : Node_Id; Val : Node_Id);            -- Node2\n+\n    procedure Set_Scope\n      (N : Node_Id; Val : Node_Id);            -- Node3\n \n@@ -11144,6 +11173,7 @@ package Sinfo is\n    pragma Inline (Is_Overloaded);\n    pragma Inline (Is_Power_Of_2_For_Shift);\n    pragma Inline (Is_Protected_Subprogram_Body);\n+   pragma Inline (Is_Scil_Node);\n    pragma Inline (Is_Static_Coextension);\n    pragma Inline (Is_Static_Expression);\n    pragma Inline (Is_Subprogram_Descriptor);\n@@ -11229,6 +11259,9 @@ package Sinfo is\n    pragma Inline (Reverse_Present);\n    pragma Inline (Right_Opnd);\n    pragma Inline (Rounded_Result);\n+   pragma Inline (Scil_Nkind);\n+   pragma Inline (Scil_Related_Node);\n+   pragma Inline (Scil_Target_Prim);\n    pragma Inline (Scope);\n    pragma Inline (Select_Alternatives);\n    pragma Inline (Selector_Name);\n@@ -11439,6 +11472,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Overloaded);\n    pragma Inline (Set_Is_Power_Of_2_For_Shift);\n    pragma Inline (Set_Is_Protected_Subprogram_Body);\n+   pragma Inline (Set_Is_Scil_Node);\n    pragma Inline (Set_Has_Self_Reference);\n    pragma Inline (Set_Is_Static_Coextension);\n    pragma Inline (Set_Is_Static_Expression);\n@@ -11524,6 +11558,9 @@ package Sinfo is\n    pragma Inline (Set_Reverse_Present);\n    pragma Inline (Set_Right_Opnd);\n    pragma Inline (Set_Rounded_Result);\n+   pragma Inline (Set_Scil_Nkind);\n+   pragma Inline (Set_Scil_Related_Node);\n+   pragma Inline (Set_Scil_Target_Prim);\n    pragma Inline (Set_Scope);\n    pragma Inline (Set_Select_Alternatives);\n    pragma Inline (Set_Selector_Name);"}]}