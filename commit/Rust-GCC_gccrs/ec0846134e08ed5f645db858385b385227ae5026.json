{"sha": "ec0846134e08ed5f645db858385b385227ae5026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwODQ2MTM0ZTA4ZWQ1ZjY0NWRiODU4Mzg1YjM4NTIyN2FlNTAyNg==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2019-10-25T14:28:40Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-10-25T14:28:40Z"}, "message": "[Fortran] OpenACC \u2013 permit common blocks in some clauses\n\n2019-10-25  Cesar Philippidis <cesar@codesourcery.com>\n\t    Tobias Burnus  <tobias@codesourcery.com>\n\n\tgcc/fortran/\n\t* openmp.c (gfc_match_omp_map_clause): Add and pass allow_commons\n\targument.\n\t(gfc_match_omp_clauses): Update calls to permit common blocks for\n\tOpenACC's copy/copyin/copyout, create/delete, host,\n\tpcopy/pcopy_in/pcopy_out, present_or_copy, present_or_copy_in,\n\tpresent_or_copy_out, present_or_create and self.\n\n\tgcc/\n\t* gimplify.c (oacc_default_clause): Privatize fortran common blocks.\n\t(omp_notice_variable): Defer the expansion of DECL_VALUE_EXPR for\n\tcommon block decls.\n    \n\tgcc/testsuite/\n\t* gfortran.dg/goacc/common-block-1.f90: New test.\n\t* gfortran.dg/goacc/common-block-2.f90: New test.\n\t* gfortran.dg/goacc/common-block-3.f90: New test.\n    \n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/common-block-1.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/common-block-2.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/common-block-3.f90: New test.\n\nReviewed-by: Thomas Schwinge <thomas@codesourcery.com>\n\nCo-Authored-By: Tobias Burnus <tobias@codesourcery.com>\n\nFrom-SVN: r277451", "tree": {"sha": "cf234892de7408cd52df5184bcccdcae675e7bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf234892de7408cd52df5184bcccdcae675e7bb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec0846134e08ed5f645db858385b385227ae5026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0846134e08ed5f645db858385b385227ae5026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec0846134e08ed5f645db858385b385227ae5026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0846134e08ed5f645db858385b385227ae5026/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "643c11a1f7407d694031b12d86fd6fc0fd5e9d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643c11a1f7407d694031b12d86fd6fc0fd5e9d10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643c11a1f7407d694031b12d86fd6fc0fd5e9d10"}], "stats": {"total": 687, "additions": 659, "deletions": 28}, "files": [{"sha": "1da576b5468fe71f74e818d77524ef714f5de154", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -1,3 +1,10 @@\n+2019-10-25  Cesar Philippidis <cesar@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gimplify.c (oacc_default_clause): Privatize fortran common blocks.\n+\t(omp_notice_variable): Defer the expansion of DECL_VALUE_EXPR for\n+\tcommon block decls.\n+\n 2019-10-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92222"}, {"sha": "d14d190b0bd3932617cb91b2bc25061f50f0982e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -1,3 +1,13 @@\n+2019-10-25  Cesar Philippidis <cesar@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_omp_map_clause): Add and pass allow_commons\n+\targument.\n+\t(gfc_match_omp_clauses): Update calls to permit common blocks for\n+\tOpenACC's copy/copyin/copyout, create/delete, host,\n+\tpcopy/pcopy_in/pcopy_out, present_or_copy, present_or_copy_in,\n+\tpresent_or_copy_out, present_or_create and self.\n+\n 2019-10-24  Martin Liska  <mliska@suse.cz>\n \n \tPR fortran/92174"}, {"sha": "ca34278854570fd43356e4551f9e584581fbb2b7", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -926,10 +926,11 @@ omp_inv_mask::omp_inv_mask (const omp_mask &m) : omp_mask (m)\n    mapping.  */\n \n static bool\n-gfc_match_omp_map_clause (gfc_omp_namelist **list, gfc_omp_map_op map_op)\n+gfc_match_omp_map_clause (gfc_omp_namelist **list, gfc_omp_map_op map_op,\n+\t\t\t  bool allow_common)\n {\n   gfc_omp_namelist **head = NULL;\n-  if (gfc_match_omp_variable_list (\"\", list, false, NULL, &head, true)\n+  if (gfc_match_omp_variable_list (\"\", list, allow_common, NULL, &head, true)\n       == MATCH_YES)\n     {\n       gfc_omp_namelist *n;\n@@ -1051,15 +1052,15 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_COPY)\n \t      && gfc_match (\"copy ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_TOFROM))\n+\t\t\t\t\t   OMP_MAP_TOFROM, true))\n \t    continue;\n \t  if (mask & OMP_CLAUSE_COPYIN)\n \t    {\n \t      if (openacc)\n \t\t{\n \t\t  if (gfc_match (\"copyin ( \") == MATCH_YES\n \t\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t\t   OMP_MAP_TO))\n+\t\t\t\t\t\t   OMP_MAP_TO, true))\n \t\t    continue;\n \t\t}\n \t      else if (gfc_match_omp_variable_list (\"copyin (\",\n@@ -1070,7 +1071,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_COPYOUT)\n \t      && gfc_match (\"copyout ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_FROM))\n+\t\t\t\t\t   OMP_MAP_FROM, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_COPYPRIVATE)\n \t      && gfc_match_omp_variable_list (\"copyprivate (\",\n@@ -1080,7 +1081,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_CREATE)\n \t      && gfc_match (\"create ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_ALLOC))\n+\t\t\t\t\t   OMP_MAP_ALLOC, true))\n \t    continue;\n \t  break;\n \tcase 'd':\n@@ -1116,7 +1117,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_DELETE)\n \t      && gfc_match (\"delete ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_RELEASE))\n+\t\t\t\t\t   OMP_MAP_RELEASE, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_DEPEND)\n \t      && gfc_match (\"depend ( \") == MATCH_YES)\n@@ -1168,12 +1169,12 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      && openacc\n \t      && gfc_match (\"device ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_FORCE_TO))\n+\t\t\t\t\t   OMP_MAP_FORCE_TO, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_DEVICEPTR)\n \t      && gfc_match (\"deviceptr ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_FORCE_DEVICEPTR))\n+\t\t\t\t\t   OMP_MAP_FORCE_DEVICEPTR, false))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_DEVICE_RESIDENT)\n \t      && gfc_match_omp_variable_list\n@@ -1251,7 +1252,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_HOST_SELF)\n \t      && gfc_match (\"host ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_FORCE_FROM))\n+\t\t\t\t\t   OMP_MAP_FORCE_FROM, true))\n \t    continue;\n \t  break;\n \tcase 'i':\n@@ -1523,47 +1524,47 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_COPY)\n \t      && gfc_match (\"pcopy ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_TOFROM))\n+\t\t\t\t\t   OMP_MAP_TOFROM, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_COPYIN)\n \t      && gfc_match (\"pcopyin ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_TO))\n+\t\t\t\t\t   OMP_MAP_TO, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_COPYOUT)\n \t      && gfc_match (\"pcopyout ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_FROM))\n+\t\t\t\t\t   OMP_MAP_FROM, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_CREATE)\n \t      && gfc_match (\"pcreate ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_ALLOC))\n+\t\t\t\t\t   OMP_MAP_ALLOC, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_PRESENT)\n \t      && gfc_match (\"present ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_FORCE_PRESENT))\n+\t\t\t\t\t   OMP_MAP_FORCE_PRESENT, false))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_COPY)\n \t      && gfc_match (\"present_or_copy ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_TOFROM))\n+\t\t\t\t\t   OMP_MAP_TOFROM, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_COPYIN)\n \t      && gfc_match (\"present_or_copyin ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_TO))\n+\t\t\t\t\t   OMP_MAP_TO, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_COPYOUT)\n \t      && gfc_match (\"present_or_copyout ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_FROM))\n+\t\t\t\t\t   OMP_MAP_FROM, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_CREATE)\n \t      && gfc_match (\"present_or_create ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_ALLOC))\n+\t\t\t\t\t   OMP_MAP_ALLOC, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_PRIORITY)\n \t      && c->priority == NULL\n@@ -1781,7 +1782,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_HOST_SELF)\n \t      && gfc_match (\"self ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   OMP_MAP_FORCE_FROM))\n+\t\t\t\t\t   OMP_MAP_FORCE_FROM, true))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_SEQ)\n \t      && !c->seq"}, {"sha": "fdf6b695003f17dc589862fb406b066f59347d73", "filename": "gcc/gimplify.c", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -7227,15 +7227,28 @@ oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n {\n   const char *rkind;\n   bool on_device = false;\n+  bool is_private = false;\n   bool declared = is_oacc_declared (decl);\n   tree type = TREE_TYPE (decl);\n \n   if (lang_hooks.decls.omp_privatize_by_reference (decl))\n     type = TREE_TYPE (type);\n \n+  /* For Fortran COMMON blocks, only used variables in those blocks are\n+     transfered and remapped.  The block itself will have a private clause to\n+     avoid transfering the data twice.\n+     The hook evaluates to false by default.  For a variable in Fortran's COMMON\n+     or EQUIVALENCE block, returns 'true' (as we have shared=false) - as only\n+     the variables in such a COMMON/EQUIVALENCE block shall be privatized not\n+     the whole block.  For C++ and Fortran, it can also be true under certain\n+     other conditions, if DECL_HAS_VALUE_EXPR.  */\n+  if (RECORD_OR_UNION_TYPE_P (type))\n+    is_private = lang_hooks.decls.omp_disregard_value_expr (decl, false);\n+\n   if ((ctx->region_type & (ORT_ACC_PARALLEL | ORT_ACC_KERNELS)) != 0\n       && is_global_var (decl)\n-      && device_resident_p (decl))\n+      && device_resident_p (decl)\n+      && !is_private)\n     {\n       on_device = true;\n       flags |= GOVD_MAP_TO_ONLY;\n@@ -7246,7 +7259,9 @@ oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n     case ORT_ACC_KERNELS:\n       rkind = \"kernels\";\n \n-      if (AGGREGATE_TYPE_P (type))\n+      if (is_private)\n+\tflags |= GOVD_FIRSTPRIVATE;\n+      else if (AGGREGATE_TYPE_P (type))\n \t{\n \t  /* Aggregates default to 'present_or_copy', or 'present'.  */\n \t  if (ctx->default_kind != OMP_CLAUSE_DEFAULT_PRESENT)\n@@ -7263,7 +7278,9 @@ oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n     case ORT_ACC_PARALLEL:\n       rkind = \"parallel\";\n \n-      if (on_device || declared)\n+      if (is_private)\n+\tflags |= GOVD_FIRSTPRIVATE;\n+      else if (on_device || declared)\n \tflags |= GOVD_MAP;\n       else if (AGGREGATE_TYPE_P (type))\n \t{\n@@ -7327,10 +7344,18 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \n       if (DECL_HAS_VALUE_EXPR_P (decl))\n \t{\n-\t  tree value = get_base_address (DECL_VALUE_EXPR (decl));\n+\t  if (ctx->region_type & ORT_ACC)\n+\t    /* For OpenACC, defer expansion of value to avoid transfering\n+\t       privatized common block data instead of im-/explicitly transfered\n+\t       variables which are in common blocks.  */\n+\t    ;\n+\t  else\n+\t    {\n+\t      tree value = get_base_address (DECL_VALUE_EXPR (decl));\n \n-\t  if (value && DECL_P (value) && DECL_THREAD_LOCAL_P (value))\n-\t    return omp_notice_threadprivate_variable (ctx, decl, value);\n+\t      if (value && DECL_P (value) && DECL_THREAD_LOCAL_P (value))\n+\t\treturn omp_notice_threadprivate_variable (ctx, decl, value);\n+\t    }\n \t}\n \n       if (gimplify_omp_ctxp->outer_context == NULL\n@@ -7361,7 +7386,13 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n   n = splay_tree_lookup (ctx->variables, (splay_tree_key)decl);\n   if ((ctx->region_type & ORT_TARGET) != 0)\n     {\n-      ret = lang_hooks.decls.omp_disregard_value_expr (decl, true);\n+      if (ctx->region_type & ORT_ACC)\n+\t/* For OpenACC, as remarked above, defer expansion.  */\n+\tshared = false;\n+      else\n+\tshared = true;\n+\n+      ret = lang_hooks.decls.omp_disregard_value_expr (decl, shared);\n       if (n == NULL)\n \t{\n \t  unsigned nflags = flags;\n@@ -7528,7 +7559,11 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t}\n     }\n \n-  shared = ((flags | n->value) & GOVD_SHARED) != 0;\n+  if (ctx->region_type & ORT_ACC)\n+    /* For OpenACC, as remarked above, defer expansion.  */\n+    shared = false;\n+  else\n+    shared = ((flags | n->value) & GOVD_SHARED) != 0;\n   ret = lang_hooks.decls.omp_disregard_value_expr (decl, shared);\n \n   /* If nothing changed, there's nothing left to do.  */"}, {"sha": "ddf575ba8c35bf54c9c14d5e57e3e010139702a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -1,3 +1,10 @@\n+2019-10-25  Cesar Philippidis <cesar@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/common-block-1.f90: New test.\n+\t* gfortran.dg/goacc/common-block-2.f90: New test.\n+\t* gfortran.dg/goacc/common-block-3.f90: New test.\n+\n 2019-10-25  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/pr70100.c: Add -mvsx."}, {"sha": "ea437526b4641a92bee8f2be11cc7e797b88969c", "filename": "gcc/testsuite/gfortran.dg/goacc/common-block-1.f90", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-1.f90?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -0,0 +1,74 @@\n+! Test data clauses involving common blocks and common block data.\n+! Specifically, validates early matching errors.\n+\n+subroutine subtest\n+  implicit none\n+  integer, parameter :: n = 10\n+  integer a(n), b(n), c, d(n), e\n+  real*4 x(n), y(n), z, w(n), v\n+  common /blockA/ a, c, x\n+  common /blockB/ b, y, z\n+  !$acc declare link(/blockA/, /blockB/, e, v)\n+end subroutine subtest\n+\n+program test\n+  implicit none\n+  integer, parameter :: n = 10\n+  integer a(n), b(n), c, d(n), e\n+  real*4 x(n), y(n), z, w(n), v\n+  common /blockA/ a, c, x\n+  common /blockB/ b, y, z\n+\n+  !$acc declare link(/blockA/, /blockB/, e, v)\n+\n+  !$acc data copy(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data copyin(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data copyout(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data create(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data copyout(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data pcopy(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data pcopyin(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data pcopyout(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data pcreate(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc data pcopyout(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n+  !$acc parallel private(/blockA/, /blockB/, e, v)\n+  !$acc end parallel\n+\n+  !$acc parallel firstprivate(/blockA/, /blockB/, e, v)\n+  !$acc update device(/blockA/)\n+  !$acc update self(/blockB/, v)\n+  !$acc update host(/blockA/, e, /blockB/)\n+  !$acc end parallel\n+\n+  !$acc enter data pcopyin(/blockA/, /blockB/, e, v)\n+  !$acc exit data delete(/blockA/, /blockB/, e, v)\n+\n+\n+  ! No /block/ permitted in present and deviceptr:\n+\n+  !$acc data present(/blockA/, /blockB/, e, v) ! { dg-error \"Syntax error in OpenMP variable list\" }\n+  !$acc end data ! { dg-error \"Unexpected ..ACC END DATA statement\" }\n+\n+  !$acc data deviceptr(/blockA/, /blockB/, e, v) ! { dg-error \"Syntax error in OpenMP variable list\" }\n+  !$acc end data ! { dg-error \"Unexpected ..ACC END DATA statement\" }\n+end program test"}, {"sha": "1ba945019f9e8b0a1e3f11e0d7b8b482cda6fbd7", "filename": "gcc/testsuite/gfortran.dg/goacc/common-block-2.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-2.f90?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -0,0 +1,53 @@\n+! Test data clauses involving common blocks and common block data.\n+! Specifically, resolver errors such as duplicate data clauses.\n+\n+program test\n+  implicit none\n+  integer, parameter :: n = 10\n+  integer a(n), b(n), c, d(n), e\n+  real*4 x(n), y(n), z, w(n), v\n+  common /blockA/ a, c, x\n+  common /blockB/ b, y, z\n+\n+  !$acc data copy(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data copyin(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data copyout(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data create(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data copyout(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data pcopy(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data pcopyin(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data pcopyout(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data pcreate(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc data pcopyout(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n+  !$acc parallel private(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end parallel\n+\n+  !$acc parallel firstprivate(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc update device(b, /blockA/, x) ! { dg-error \"Symbol .x. present on multiple clauses\" }\n+  !$acc update self(z, /blockB/, v) ! { dg-error \"Symbol .z. present on multiple clauses\" }\n+  !$acc update host(/blockA/, c) ! { dg-error \"Symbol .c. present on multiple clauses\" }\n+  !$acc end parallel\n+\n+  !$acc enter data copyin(/blockB/, e, v, a, c, y) ! { dg-error \"Symbol .y. present on multiple clauses\" }\n+  !$acc exit data delete(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+end program test"}, {"sha": "9032d9331f07932c7948fb967a93d1e822e6e397", "filename": "gcc/testsuite/gfortran.dg/goacc/common-block-3.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -0,0 +1,39 @@\n+! { dg-options \"-fopenacc -fdump-tree-omplower\" }\n+\n+module consts\n+  integer, parameter :: n = 100\n+end module consts\n+\n+program main\n+  use consts\n+  implicit none\n+\n+  integer :: i, j\n+  real ::  a(n) = 0, b(n) = 0, c, d\n+  real ::  x(n) = 0, y(n), z\n+  common /BLOCK/ a, b, c, j, d\n+  common /KERNELS_BLOCK/ x, y, z\n+\n+  c = 1.0\n+  !$acc parallel loop copy(/BLOCK/)\n+  do i = 1, n\n+     a(i) = b(i) + c\n+  end do\n+  !$acc kernels\n+  do i = 1, n\n+     x(i) = y(i) + c\n+  end do\n+  !$acc end kernels\n+end program main\n+\n+! { dg-final { scan-tree-dump-times \"omp target oacc_parallel .*map\\\\(tofrom:a \\\\\\[len: 400\\\\\\]\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_parallel .*map\\\\(tofrom:b \\\\\\[len: 400\\\\\\]\\\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_parallel .*map\\\\(tofrom:c \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n+\n+! { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(force_tofrom:i \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(tofrom:x \\\\\\[len: 400\\\\\\]\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(tofrom:y \\\\\\[len: 400\\\\\\]\\\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(force_tofrom:c \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n+\n+! { dg-final { scan-tree-dump-not \"map\\\\(.*:block\\\\)\" \"omplower\" } }\n+! { dg-final { scan-tree-dump-not \"map\\\\(.*:kernels_block\\\\)\" \"omplower\" } }"}, {"sha": "351df1153fdeec4e08fcff8e4762a0d06f410b08", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -1,3 +1,10 @@\n+2019-10-25  Cesar Philippidis <cesar@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/common-block-1.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/common-block-2.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/common-block-3.f90: New test.\n+\n 2019-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/92081"}, {"sha": "000d811a05986e30ad41d60bdb7774cf104c7f78", "filename": "libgomp/testsuite/libgomp.oacc-fortran/common-block-1.f90", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-1.f90?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -0,0 +1,107 @@\n+! { dg-do run }\n+!\n+! Test data located inside common blocks.  This test does not exercise\n+! ACC DECLARE.\n+\n+module const\n+  integer, parameter :: n = 100\n+end module const\n+\n+subroutine check\n+  use const\n+\n+  implicit none\n+  integer i, x(n), y\n+  common /BLOCK/ x, y\n+\n+  do i = 1, n\n+     if (x(i) .ne. y) call abort\n+  end do\n+end subroutine check\n+\n+module m\n+  use const\n+  integer a(n), b\n+  common /BLOCK/ a, b\n+\n+contains\n+  subroutine mod_implicit_incr\n+    implicit none\n+    integer i\n+\n+    !$acc parallel loop\n+    do i = 1, n\n+       a(i) = b\n+    end do\n+    !$acc end parallel loop\n+\n+    call check\n+  end subroutine mod_implicit_incr\n+\n+  subroutine mod_explicit_incr\n+    implicit none\n+    integer i\n+\n+    !$acc parallel loop copy(a(1:n)) copyin(b)\n+    do i = 1, n\n+       a(i) = b\n+    end do\n+    !$acc end parallel loop\n+\n+    call check\n+  end subroutine mod_explicit_incr\n+end module m\n+\n+subroutine sub_implicit_incr\n+  use const\n+\n+  implicit none\n+  integer i, x(n), y\n+  common /BLOCK/ x, y\n+\n+  !$acc parallel loop\n+  do i = 1, n\n+     x(i) = y\n+  end do\n+  !$acc end parallel loop\n+\n+  call check\n+end subroutine sub_implicit_incr\n+\n+subroutine sub_explicit_incr\n+  use const\n+\n+  implicit none\n+  integer i, x(n), y\n+  common /BLOCK/ x, y\n+\n+  !$acc parallel loop copy(x(1:n)) copyin(y)\n+  do i = 1, n\n+     x(i) = y\n+  end do\n+  !$acc end parallel loop\n+\n+  call check\n+end subroutine sub_explicit_incr\n+\n+program main\n+  use m\n+\n+  implicit none\n+\n+  a(:) = -1\n+  b = 5\n+  call mod_implicit_incr\n+\n+  a(:) = -2\n+  b = 6\n+  call mod_explicit_incr\n+\n+  a(:) = -3\n+  b = 7\n+  call sub_implicit_incr\n+\n+  a(:) = -4\n+  b = 8\n+  call sub_explicit_incr\n+end program main"}, {"sha": "4cfcded244d7a7ae3c37d14a34e9069234af6c05", "filename": "libgomp/testsuite/libgomp.oacc-fortran/common-block-2.f90", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-2.f90?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -0,0 +1,152 @@\n+! { dg-do run }\n+!\n+! Test data located inside common blocks.  This test does not exercise\n+! ACC DECLARE.  All data clauses are explicit.\n+\n+module consts\n+  integer, parameter :: n = 100\n+end module consts\n+\n+subroutine validate\n+  use consts\n+\n+  implicit none\n+  integer i, j\n+  real*4 x(n), y(n), z\n+  common /BLOCK/ x, y, z, j\n+\n+  do i = 1, n\n+     if (abs(x(i) - i - z) .ge. 0.0001) call abort\n+  end do\n+end subroutine validate\n+\n+subroutine incr\n+  use consts\n+\n+  implicit none\n+  integer i, j\n+  real*4 x(n), y(n), z\n+  common /BLOCK/ x, y, z, j\n+\n+  !$acc parallel loop pcopy(/BLOCK/)\n+  do i = 1, n\n+     x(i) = x(i) + z\n+  end do\n+  !$acc end parallel loop\n+end subroutine incr\n+\n+program main\n+  use consts\n+\n+  implicit none\n+  integer i, j\n+  real*4 a(n), b(n), c\n+  common /BLOCK/ a, b, c, j\n+\n+  ! Test copyout, pcopy, device\n+\n+  !$acc data copyout(a, c)\n+\n+  c = 1.0\n+\n+  !$acc update device(c)\n+\n+  !$acc parallel loop pcopy(a)\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end parallel loop\n+\n+  call incr\n+  call incr\n+  call incr\n+  !$acc end data\n+\n+  c = 3.0\n+  call validate\n+\n+  ! Test pcopy without copyout\n+\n+  c = 2.0\n+  call incr\n+  c = 5.0\n+  call validate\n+\n+  ! Test create, delete, host, copyout, copyin\n+\n+  !$acc enter data create(b)\n+\n+  !$acc parallel loop pcopy(b)\n+  do i = 1, n\n+     b(i) = i\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host (b)\n+\n+  !$acc parallel loop pcopy(b) copyout(a) copyin(c)\n+  do i = 1, n\n+     a(i) = b(i) + c\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc exit data delete(b)\n+\n+  call validate\n+\n+  a(:) = b(:)\n+  c = 0.0\n+  call validate\n+\n+  ! Test copy\n+\n+  c = 1.0\n+  !$acc parallel loop copy(/BLOCK/)\n+  do i = 1, n\n+     a(i) = b(i) + c\n+  end do\n+  !$acc end parallel loop\n+\n+  call validate\n+\n+  ! Test pcopyin, pcopyout FIXME\n+\n+  c = 2.0\n+  !$acc data copyin(b, c) copyout(a)\n+\n+  !$acc parallel loop pcopyin(b, c) pcopyout(a)\n+  do i = 1, n\n+     a(i) = b(i) + c\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc end data\n+\n+  call validate\n+\n+  ! Test reduction, private\n+\n+  j = 0\n+\n+  !$acc parallel private(i) copy(j)\n+  !$acc loop reduction(+:j)\n+  do i = 1, n\n+     j = j + 1\n+  end do\n+  !$acc end parallel\n+\n+  if (j .ne. n) call abort\n+\n+  ! Test firstprivate, copy\n+\n+  a(:) = 0\n+  c = j\n+\n+  !$acc parallel loop firstprivate(c) copyout(a)\n+  do i = 1, n\n+     a(i) = i + c\n+  end do\n+  !$acc end parallel loop\n+\n+  call validate\n+end program main"}, {"sha": "5a68b485b1ed90e53a116c2d1965b48c667a636a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/common-block-3.f90", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0846134e08ed5f645db858385b385227ae5026/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0846134e08ed5f645db858385b385227ae5026/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcommon-block-3.f90?ref=ec0846134e08ed5f645db858385b385227ae5026", "patch": "@@ -0,0 +1,139 @@\n+! { dg-do run }\n+!\n+! Test data located inside common blocks.  This test does not exercise\n+! ACC DECLARE.  Most of the data clauses are implicit.\n+\n+module consts\n+  integer, parameter :: n = 100\n+end module consts\n+\n+subroutine validate\n+  use consts\n+\n+  implicit none\n+  integer i, j\n+  real*4 x(n), y(n), z\n+  common /BLOCK/ x, y, z, j\n+\n+  do i = 1, n\n+     if (abs(x(i) - i - z) .ge. 0.0001) call abort\n+  end do\n+end subroutine validate\n+\n+subroutine incr_parallel\n+  use consts\n+\n+  implicit none\n+  integer i, j\n+  real*4 x(n), y(n), z\n+  common /BLOCK/ x, y, z, j\n+\n+  !$acc parallel loop\n+  do i = 1, n\n+     x(i) = x(i) + z\n+  end do\n+  !$acc end parallel loop\n+end subroutine incr_parallel\n+\n+subroutine incr_kernels\n+  use consts\n+\n+  implicit none\n+  integer i, j\n+  real*4 x(n), y(n), z\n+  common /BLOCK/ x, y, z, j\n+\n+  !$acc kernels\n+  do i = 1, n\n+     x(i) = x(i) + z\n+  end do\n+  !$acc end kernels\n+end subroutine incr_kernels\n+\n+program main\n+  use consts\n+\n+  implicit none\n+  integer i, j\n+  real*4 a(n), b(n), c\n+  common /BLOCK/ a, b, c, j\n+\n+  !$acc data copyout(a, c)\n+\n+  c = 1.0\n+\n+  !$acc update device(c)\n+\n+  !$acc parallel loop\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end parallel loop\n+\n+  call incr_parallel\n+  call incr_parallel\n+  call incr_parallel\n+  !$acc end data\n+\n+  c = 3.0\n+  call validate\n+\n+  ! Test pcopy without copyout\n+\n+  c = 2.0\n+  call incr_kernels\n+  c = 5.0\n+  call validate\n+\n+  !$acc kernels\n+  do i = 1, n\n+     b(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  !$acc parallel loop\n+  do i = 1, n\n+     a(i) = b(i) + c\n+  end do\n+  !$acc end parallel loop\n+\n+  call validate\n+\n+  a(:) = b(:)\n+  c = 0.0\n+  call validate\n+\n+  ! Test copy\n+\n+  c = 1.0\n+  !$acc parallel loop\n+  do i = 1, n\n+     a(i) = b(i) + c\n+  end do\n+  !$acc end parallel loop\n+\n+  call validate\n+\n+  c = 2.0\n+  !$acc data copyin(b, c) copyout(a)\n+\n+  !$acc kernels\n+  do i = 1, n\n+     a(i) = b(i) + c\n+  end do\n+  !$acc end kernels\n+\n+  !$acc end data\n+\n+  call validate\n+\n+  j = 0\n+\n+  !$acc parallel loop reduction(+:j)\n+  do i = 1, n\n+     j = j + 1\n+  end do\n+  !$acc end parallel loop\n+\n+  if (j .ne. n) call abort\n+end program main"}]}