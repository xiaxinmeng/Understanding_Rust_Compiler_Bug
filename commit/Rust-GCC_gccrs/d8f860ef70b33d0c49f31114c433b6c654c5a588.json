{"sha": "d8f860ef70b33d0c49f31114c433b6c654c5a588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmODYwZWY3MGIzM2QwYzQ5ZjMxMTE0YzQzM2I2YzY1NGM1YTU4OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:17:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:17:06Z"}, "message": "poly_int: omp-simd-clone.c\n\nThis patch adds a wrapper around TYPE_VECTOR_SUBPARTS for omp-simd-clone.c.\nSupporting SIMD clones for variable-length vectors is post GCC8 work.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* omp-simd-clone.c (simd_clone_subparts): New function.\n\t(simd_clone_init_simd_arrays): Use it instead of TYPE_VECTOR_SUBPARTS.\n\t(ipa_simd_modify_function_body): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256145", "tree": {"sha": "560cf6f3f5cb3fa57e78ed70a07c13a60cdb9570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/560cf6f3f5cb3fa57e78ed70a07c13a60cdb9570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8f860ef70b33d0c49f31114c433b6c654c5a588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f860ef70b33d0c49f31114c433b6c654c5a588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8f860ef70b33d0c49f31114c433b6c654c5a588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f860ef70b33d0c49f31114c433b6c654c5a588/comments", "author": null, "committer": null, "parents": [{"sha": "e112bba2fced713f1fa6c7f41c6925ee4573f215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e112bba2fced713f1fa6c7f41c6925ee4573f215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e112bba2fced713f1fa6c7f41c6925ee4573f215"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "aede16d6602e394e98975993e30d54adc222acdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f860ef70b33d0c49f31114c433b6c654c5a588/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f860ef70b33d0c49f31114c433b6c654c5a588/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8f860ef70b33d0c49f31114c433b6c654c5a588", "patch": "@@ -1,3 +1,11 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* omp-simd-clone.c (simd_clone_subparts): New function.\n+\t(simd_clone_init_simd_arrays): Use it instead of TYPE_VECTOR_SUBPARTS.\n+\t(ipa_simd_modify_function_body): Likewise.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "0626a5a900d3bb278792f40b8b43a2fbc40f94bc", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f860ef70b33d0c49f31114c433b6c654c5a588/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f860ef70b33d0c49f31114c433b6c654c5a588/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=d8f860ef70b33d0c49f31114c433b6c654c5a588", "patch": "@@ -51,6 +51,15 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n \n+/* Return the number of elements in vector type VECTYPE, which is associated\n+   with a SIMD clone.  At present these always have a constant length.  */\n+\n+static unsigned HOST_WIDE_INT\n+simd_clone_subparts (tree vectype)\n+{\n+  return TYPE_VECTOR_SUBPARTS (vectype);\n+}\n+\n /* Allocate a fresh `simd_clone' and return it.  NARGS is the number\n    of arguments to reserve space for.  */\n \n@@ -761,7 +770,7 @@ simd_clone_init_simd_arrays (struct cgraph_node *node,\n \t    }\n \t  continue;\n \t}\n-      if (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg)) == node->simdclone->simdlen)\n+      if (simd_clone_subparts (TREE_TYPE (arg)) == node->simdclone->simdlen)\n \t{\n \t  tree ptype = build_pointer_type (TREE_TYPE (TREE_TYPE (array)));\n \t  tree ptr = build_fold_addr_expr (array);\n@@ -772,7 +781,7 @@ simd_clone_init_simd_arrays (struct cgraph_node *node,\n \t}\n       else\n \t{\n-\t  unsigned int simdlen = TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg));\n+\t  unsigned int simdlen = simd_clone_subparts (TREE_TYPE (arg));\n \t  tree ptype = build_pointer_type (TREE_TYPE (TREE_TYPE (array)));\n \t  for (k = 0; k < node->simdclone->simdlen; k += simdlen)\n \t    {\n@@ -918,8 +927,8 @@ ipa_simd_modify_function_body (struct cgraph_node *node,\n \t\t  iter,\n \t\t  NULL_TREE, NULL_TREE);\n       if (adjustments[j].op == IPA_PARM_OP_NONE\n-\t  && TYPE_VECTOR_SUBPARTS (vectype) < node->simdclone->simdlen)\n-\tj += node->simdclone->simdlen / TYPE_VECTOR_SUBPARTS (vectype) - 1;\n+\t  && simd_clone_subparts (vectype) < node->simdclone->simdlen)\n+\tj += node->simdclone->simdlen / simd_clone_subparts (vectype) - 1;\n     }\n \n   l = adjustments.length ();"}]}