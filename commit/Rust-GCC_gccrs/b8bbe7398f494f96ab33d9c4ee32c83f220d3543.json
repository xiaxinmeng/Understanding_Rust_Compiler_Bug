{"sha": "b8bbe7398f494f96ab33d9c4ee32c83f220d3543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhiYmU3Mzk4ZjQ5NGY5NmFiMzNkOWM0ZWUzMmM4M2YyMjBkMzU0Mw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-05-22T13:20:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-22T13:20:13Z"}, "message": "[Ada] Prevent caching of non-text symbols for symbolic tracebacks\n\nWe now only have the executable code section boundaries at hand,\nso can only infer offsets for symbols within those boundaries.\n\nSymbols outside of this region are non-text symbols, pointless for\ntraceback symbolization anyway.\n\n2018-05-22  Olivier Hainque  <hainque@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-dwalin.adb (Enable_Cache): Skip symbols outside of the\n\texecutable code section boundaries.\n\nFrom-SVN: r260510", "tree": {"sha": "c62d585d4584041f173708b358daa5533280570e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c62d585d4584041f173708b358daa5533280570e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8bbe7398f494f96ab33d9c4ee32c83f220d3543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bbe7398f494f96ab33d9c4ee32c83f220d3543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8bbe7398f494f96ab33d9c4ee32c83f220d3543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bbe7398f494f96ab33d9c4ee32c83f220d3543/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ea8dd20e05e6a71170743e7d9a711c9599f1d1"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "6b3e907f5d8d3ea493400de0ec44440a9729a3cb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bbe7398f494f96ab33d9c4ee32c83f220d3543/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bbe7398f494f96ab33d9c4ee32c83f220d3543/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b8bbe7398f494f96ab33d9c4ee32c83f220d3543", "patch": "@@ -1,3 +1,8 @@\n+2018-05-22  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* libgnat/s-dwalin.adb (Enable_Cache): Skip symbols outside of the\n+\texecutable code section boundaries.\n+\n 2018-05-22  Javier Miranda  <miranda@adacore.com>\n \n \t* locales.c: New implementation for the Ada.Locales package."}, {"sha": "0a2d90ededff4c014c501fc8452b379b7a804190", "filename": "gcc/ada/libgnat/s-dwalin.adb", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bbe7398f494f96ab33d9c4ee32c83f220d3543/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bbe7398f494f96ab33d9c4ee32c83f220d3543/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb?ref=b8bbe7398f494f96ab33d9c4ee32c83f220d3543", "patch": "@@ -1202,6 +1202,9 @@ package body System.Dwarf_Lines is\n       --  Phase 1: count number of symbols. Phase 2: fill the cache.\n       declare\n          S               : Object_Symbol;\n+         Val             : uint64;\n+         Xcode_Low       : constant uint64 := uint64 (C.Low);\n+         Xcode_High      : constant uint64 := uint64 (C.High);\n          Sz              : uint32;\n          Addr, Prev_Addr : uint32;\n          Nbr_Symbols     : Natural;\n@@ -1211,22 +1214,31 @@ package body System.Dwarf_Lines is\n             S           := First_Symbol (C.Obj.all);\n             Prev_Addr   := uint32'Last;\n             while S /= Null_Symbol loop\n-               --  Discard symbols whose length is 0\n+               --  Discard symbols of length 0 or located outside of the\n+               --  execution code section outer boundaries.\n                Sz := uint32 (Size (S));\n+               Val := Value (S);\n \n-               --  Try to filter symbols at the same address. This is a best\n-               --  effort as they might not be consecutive.\n-               Addr := uint32 (Value (S) - uint64 (C.Low));\n-               if Sz > 0 and then Addr /= Prev_Addr then\n-                  Nbr_Symbols := Nbr_Symbols + 1;\n-                  Prev_Addr   := Addr;\n-\n-                  if Phase = 2 then\n-                     C.Cache (Nbr_Symbols) :=\n-                       (First => Addr,\n-                        Size  => Sz,\n-                        Sym   => uint32 (Off (S)),\n-                        Line  => 0);\n+               if Sz > 0\n+                 and then Val >= Xcode_Low\n+                 and then Val <= Xcode_High\n+               then\n+\n+                  Addr := uint32 (Val - Xcode_Low);\n+\n+                  --  Try to filter symbols at the same address. This is a best\n+                  --  effort as they might not be consecutive.\n+                  if Addr /= Prev_Addr then\n+                     Nbr_Symbols := Nbr_Symbols + 1;\n+                     Prev_Addr   := Addr;\n+\n+                     if Phase = 2 then\n+                        C.Cache (Nbr_Symbols) :=\n+                          (First => Addr,\n+                           Size  => Sz,\n+                           Sym   => uint32 (Off (S)),\n+                           Line  => 0);\n+                     end if;\n                   end if;\n                end if;\n "}]}