{"sha": "8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzNWE2NDM5ZGRiNjZhYTllYmM2N2VlNDdhYTJlNmUzMTdlM2VmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-11-14T22:58:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-11-14T22:58:01Z"}, "message": "asan-dg.exp: New file.\n\n\t* lib/asan-dg.exp: New file.\n\t* gcc.dg/asan/asan.exp: New file.\n\t* g++.dg/dg.exp: Prune also asan tests.\n\t* g++.dg/asan/asan.exp: New file.\n\t* c-c++-common/asan/memcmp-1.c: New test.\n\nFrom-SVN: r193511", "tree": {"sha": "18bc797a461bd0f1731169a44428c1d45024ddeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18bc797a461bd0f1731169a44428c1d45024ddeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3547cab78d67d520da35f7ec44659f9be362602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3547cab78d67d520da35f7ec44659f9be362602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3547cab78d67d520da35f7ec44659f9be362602"}], "stats": {"total": 280, "additions": 279, "deletions": 1}, "files": [{"sha": "7b18ff1d73739ea1c0991cdc0eb47d0ea0e4ab53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "patch": "@@ -1,3 +1,11 @@\n+2012-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/asan-dg.exp: New file.\n+\t* gcc.dg/asan/asan.exp: New file.\n+\t* g++.dg/dg.exp: Prune also asan tests.\n+\t* g++.dg/asan/asan.exp: New file.\n+\t* c-c++-common/asan/memcmp-1.c: New test.\n+\n 2012-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/55323"}, {"sha": "8f45a3f2fcb6b5f26bc06037c24384116e9f5fb5", "filename": "gcc/testsuite/c-c++-common/asan/memcmp-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c?ref=8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-builtin-memcmp\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <string.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  char a1[] = {argc, 2, 3, 4};\n+  char a2[] = {1, 2*argc, 3, 4};\n+  int res = memcmp (a1, a2, 5 + argc);\n+  return res;\n+}\n+\n+/* { dg-output \"ERROR: AddressSanitizer stack-buffer-overflow.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)memcmp |\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 0x\\[0-9a-f\\]+ (in _*main|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "ec9b0c418f84664d7ca932d1086a1c239a085954", "filename": "gcc/testsuite/g++.dg/asan/asan.exp", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan.exp?ref=8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "patch": "@@ -0,0 +1,36 @@\n+# Copyright (C) 2012 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+load_lib asan-dg.exp\n+\n+if ![check_effective_target_faddress_sanitizer] {\n+  return\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+asan_init\n+\n+# Main loop.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/asan/*.c]] \"\"\n+\n+# All done.\n+asan_finish\n+dg-finish"}, {"sha": "e0184c6024b82738828ddac65ba4cfd18a1a08c0", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "patch": "@@ -1,4 +1,5 @@\n-#   Copyright (C) 2000, 2007, 2009, 2010 Free Software Foundation, Inc.\n+#   Copyright (C) 2000, 2007, 2009, 2010, 2011, 2012\n+#   Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -50,6 +51,7 @@ set tests [prune $tests $srcdir/$subdir/graphite/*]\n set tests [prune $tests $srcdir/$subdir/tm/*]\n set tests [prune $tests $srcdir/$subdir/guality/*]\n set tests [prune $tests $srcdir/$subdir/simulate-thread/*]\n+set tests [prune $tests $srcdir/$subdir/asan/*]\n \n # Main loop.\n g++-dg-runtest $tests $DEFAULT_CXXFLAGS"}, {"sha": "f1b8d0c40fe8ee4e0e7b352452ac3f02fea6bc46", "filename": "gcc/testsuite/gcc.dg/asan/asan.exp", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fasan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fasan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fasan.exp?ref=8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "patch": "@@ -0,0 +1,38 @@\n+# Copyright (C) 2012 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+load_lib asan-dg.exp\n+\n+if ![check_effective_target_faddress_sanitizer] {\n+  return\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+asan_init\n+\n+# Main loop.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/asan/*.c]] \"\"\n+\n+# All done.\n+asan_finish\n+dg-finish"}, {"sha": "f873fca23d97b258b6020d04c402fc1f52e56741", "filename": "gcc/testsuite/lib/asan-dg.exp", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp?ref=8335a6439ddb66aa9ebc67ee47aa2e6e317e3ef9", "patch": "@@ -0,0 +1,176 @@\n+# Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Return 1 if compilation with -faddress-sanitizer is error-free for trivial\n+# code, 0 otherwise.\n+\n+proc check_effective_target_faddress_sanitizer {} {\n+    return [check_no_compiler_messages faddress_sanitizer object {\n+\tvoid foo (void) { }\n+    } \"-faddress-sanitizer\"]\n+}\n+\n+#\n+# asan_link_flags -- compute library path and flags to find libasan.\n+# (originally from g++.exp)\n+#\n+\n+proc asan_link_flags { paths } {\n+    global srcdir\n+    global ld_library_path\n+    global shlib_ext\n+\n+    set gccpath ${paths}\n+    set flags \"\"\n+\n+    set shlib_ext [get_shlib_extension]\n+\n+    if { $gccpath != \"\" } {\n+      if { [file exists \"${gccpath}/libsanitizer/asan/.libs/libasan.a\"]\n+\t   || [file exists \"${gccpath}/libsanitizer/asan/.libs/libasan.${shlib_ext}\"] } {\n+\t  append flags \" -L${gccpath}/libsanitizer/asan/.libs \"\n+\t  append ld_library_path \":${gccpath}/libsanitizer/asan/.libs\"\n+      }\n+    } else {\n+      global tool_root_dir\n+\n+      set libasan [lookfor_file ${tool_root_dir} libasan]\n+      if { $libasan != \"\" } {\n+\t  append flags \"-L${libasan} \"\n+\t  append ld_library_path \":${libasan}\"\n+      }\n+    }\n+\n+    set_ld_library_path_env_vars\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# asan_init -- called at the start of each subdir of tests\n+#\n+\n+proc asan_init { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global ALWAYS_CXXFLAGS\n+    global TOOL_OPTIONS\n+    global asan_saved_TEST_ALWAYS_FLAGS\n+\n+    set link_flags \"\"\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    set link_flags \"[asan_link_flags [get_multilibs ${TOOL_OPTIONS}]]\"\n+\t} else {\n+\t    set link_flags \"[asan_link_flags [get_multilibs]]\"\n+\t}\n+    }\n+\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset asan_saved_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n+    }\n+    if [info exists ALWAYS_CXXFLAGS] {\n+\tset ALWAYS_CXXFLAGS [concat \"{ldflags=$link_flags}\" $ALWAYS_CXXFLAGS]\n+\tset ALWAYS_CXXFLAGS [concat \"{additional_flags=-faddress-sanitizer -g}\" $ALWAYS_CXXFLAGS]\n+    } else {\n+\tif [info exists TEST_ALWAYS_FLAGS] {\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags -faddress-sanitizer -g $TEST_ALWAYS_FLAGS\"\n+\t} else {\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags -faddress-sanitizer -g\"\n+\t}\n+    }\n+}\n+\n+#\n+# asan_finish -- called at the start of each subdir of tests\n+#\n+\n+proc asan_finish { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global asan_saved_TEST_ALWAYS_FLAGS\n+\n+    if [info exists asan_saved_TEST_ALWAYS_FLAGS] {\n+\tset TEST_ALWAYS_FLAGS $asan_saved_TEST_ALWAYS_FLAGS\n+    } else {\n+\tunset TEST_ALWAYS_FLAGS\n+    }\n+}\n+\n+# Symbolize lines like\n+#   #2 0xdeadbeef (/some/path/libsanitizer.so.0.0.0+0xbeef)\n+# in $output using addr2line to\n+#   #2 0xdeadbeef in foobar file:123\n+proc asan_symbolize { output } {\n+    set addresses [regexp -inline -all -line \"^ *#\\[0-9\\]+ 0x\\[0-9a-f\\]+ \\[(\\](\\[^)\\]+)\\[+\\](0x\\[0-9a-f\\]+)\\[)\\]$\" \"$output\"]\n+    if { [llength $addresses] > 0 } {\n+\tset addr2line_name [find_binutils_prog addr2line]\n+\tset idx 1\n+\twhile { $idx < [llength $addresses] } {\n+\t    set key [lindex $addresses $idx]\n+\t    set val [lindex $addresses [expr $idx + 1]]\n+\t    lappend arr($key) $val\n+\t    set idx [expr $idx + 3]\n+\t}\n+\tforeach key [array names arr] {\n+\t    set args \"-f -e $key $arr($key)\"\n+\t    set status [remote_exec host \"$addr2line_name\" $args]\n+\t    if { [lindex $status 0] > 0 } continue\n+\t    set addr2line_output [regexp -inline -all -line \"^\\[^\\n\\r]*\" [lindex $status 1]]\n+\t    set idx 0\n+\t    foreach val $arr($key) {\n+\t\tif { [expr $idx + 1] < [llength $addr2line_output] } {\n+\t\t    set fnname [lindex $addr2line_output $idx]\n+\t\t    set fileline [lindex $addr2line_output [expr $idx + 1]]\n+\t\t    if { \"$fnname\" != \"??\" } {\n+\t\t\tset newkey \"$key+$val\"\n+\t\t\tset repl($newkey) \"$fnname $fileline\"\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+\tset idx 0\n+\tset new_output \"\"\n+\twhile {[regexp -start $idx -indices \" #\\[0-9\\]+ 0x\\[0-9a-f\\]+ \\[(\\](\\[^)\\]+\\[+\\]0x\\[0-9a-f\\]+)\\[)\\]\" \"$output\" -> addr] > 0} {\n+\t    set low [lindex $addr 0]\n+\t    set high [lindex $addr 1]\n+\t    set val [string range \"$output\" $low $high]\n+\t    append new_output [string range \"$output\" $idx [expr $low - 2]]\n+\t    if [info exists repl($val)] {\n+\t\tappend new_output \"in $repl($val)\"\n+\t    } else {\n+\t\tappend new_output \"($val)\"\n+\t    }\n+\t    set idx [expr $high + 2]\n+\t}\n+\tappend new_output [string range \"$output\" $idx [string length \"$output\"]]\n+\treturn \"$new_output\"\n+    }\n+    return \"$output\"\n+}\n+\n+# Replace ${tool}_load with a wrapper so that we can symbolize the output.\n+if { [info procs ${tool}_load] != [list] \\\n+      && [info procs saved_asan_${tool}_load] == [list] } {\n+    rename ${tool}_load saved_asan_${tool}_load\n+\n+    proc ${tool}_load { program args } {\n+\tglobal tool\n+\tset result [eval [list saved_asan_${tool}_load $program] $args]\n+\tset output [lindex $result 1]\n+\tset symbolized_output [asan_symbolize \"$output\"]\n+\tset result [list [lindex $result 0] $symbolized_output]\n+\treturn $result\n+    }\n+}"}]}