{"sha": "92e8164f763bb6082f8c3067ef95c302dfce6f09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlODE2NGY3NjNiYjYwODJmOGMzMDY3ZWY5NWMzMDJkZmNlNmYwOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-13T08:40:04Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-13T08:40:04Z"}, "message": "optimize.c (initialize_inlined_parameters): Take FN to which the parameters belong as an argument.\n\n\t* optimize.c (initialize_inlined_parameters): Take FN to which the\n\tparameters belong as an argument.\n\t(expand_call_inline): Expand calls into the parameter\n\tinitializations before pushing the function onto the list of\n\tfunctions we are presently expanding.\n\nFrom-SVN: r30888", "tree": {"sha": "b88606b40861d33205c04c18d76e5072f2192a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b88606b40861d33205c04c18d76e5072f2192a7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e8164f763bb6082f8c3067ef95c302dfce6f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e8164f763bb6082f8c3067ef95c302dfce6f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e8164f763bb6082f8c3067ef95c302dfce6f09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e8164f763bb6082f8c3067ef95c302dfce6f09/comments", "author": null, "committer": null, "parents": [{"sha": "2ecac43338fb3bf41c7d5d56049fa865df5f71f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ecac43338fb3bf41c7d5d56049fa865df5f71f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ecac43338fb3bf41c7d5d56049fa865df5f71f0"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "9521c19c7cb91026cf3a5d80c665d1b5f9e8e276", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e8164f763bb6082f8c3067ef95c302dfce6f09/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e8164f763bb6082f8c3067ef95c302dfce6f09/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92e8164f763bb6082f8c3067ef95c302dfce6f09", "patch": "@@ -1,3 +1,11 @@\n+1999-12-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* optimize.c (initialize_inlined_parameters): Take FN to which the\n+\tparameters belong as an argument.\n+\t(expand_call_inline): Expand calls into the parameter\n+\tinitializations before pushing the function onto the list of\n+\tfunctions we are presently expanding.\n+\n 1999-12-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (get_vtable_name): Use a literal format string and"}, {"sha": "ee33886984042586bb77acb32f048c2497a4f046", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e8164f763bb6082f8c3067ef95c302dfce6f09/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e8164f763bb6082f8c3067ef95c302dfce6f09/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=92e8164f763bb6082f8c3067ef95c302dfce6f09", "patch": "@@ -67,7 +67,7 @@ typedef struct inline_data\n \n /* Prototypes.  */\n \n-static tree initialize_inlined_parameters PROTO((inline_data *, tree));\n+static tree initialize_inlined_parameters PROTO((inline_data *, tree, tree));\n static tree declare_return_variable PROTO((inline_data *, tree *));\n static tree copy_body_r PROTO((tree *, int *, void *));\n static tree copy_body PROTO((inline_data *));\n@@ -342,18 +342,17 @@ copy_body (id)\n    top of the stack in ID from the ARGS (presented as a TREE_LIST).  */\n \n static tree\n-initialize_inlined_parameters (id, args)\n+initialize_inlined_parameters (id, args, fn)\n      inline_data *id;\n      tree args;\n+     tree fn;\n {\n-  tree fn;\n   tree init_stmts;\n   tree parms;\n   tree a;\n   tree p;\n \n   /* Figure out what the parameters are.  */\n-  fn = VARRAY_TOP_TREE (id->fns);\n   parms = DECL_ARGUMENTS (fn);\n \n   /* Start with no initializations whatsoever.  */\n@@ -517,6 +516,7 @@ expand_call_inline (tp, walk_subtrees, data)\n   tree fn;\n   tree scope_stmt;\n   tree use_stmt;\n+  tree arg_inits;\n   splay_tree st;\n \n   /* See what we've got.  */\n@@ -570,32 +570,38 @@ expand_call_inline (tp, walk_subtrees, data)\n   if (!inlinable_function_p (fn, id))\n     return NULL_TREE;\n \n-  /* Return statements in the function body will be replaced by jumps\n-     to the RET_LABEL.  */\n-  id->ret_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n-  DECL_CONTEXT (id->ret_label) = VARRAY_TREE (id->fns, 0);\n-\n   /* Build a statement-expression containing code to initialize the\n      arguments, the actual inline expansion of the body, and a label\n      for the return statements within the function to jump to.  The\n      type of the statement expression is the return type of the\n      function call.  */\n   expr = build_min (STMT_EXPR, TREE_TYPE (TREE_TYPE (fn)), NULL_TREE);\n \n-  /* Record the function we are about to inline so that we can avoid\n-     recursing into it.  */\n-  VARRAY_PUSH_TREE (id->fns, fn);\n-\n   /* Local declarations will be replaced by their equivalents in this\n      map.  */\n   st = id->decl_map;\n   id->decl_map = splay_tree_new (splay_tree_compare_pointers,\n \t\t\t\t NULL, NULL);\n \n   /* Initialize the parameters.  */\n-  STMT_EXPR_STMT (expr) \n-    = initialize_inlined_parameters (id, TREE_OPERAND (t, 1));\n-    \n+  arg_inits = initialize_inlined_parameters (id, TREE_OPERAND (t, 1), fn);\n+  /* Expand any inlined calls in the initializers.  Do this before we\n+     push FN on the stack of functions we are inlining; we want to\n+     inline calls to FN that appear in the initializers for the\n+     parameters.  */\n+  expand_calls_inline (&arg_inits, id);\n+  /* And add them to the tree.  */\n+  STMT_EXPR_STMT (expr) = chainon (STMT_EXPR_STMT (expr), arg_inits);\n+\n+  /* Record the function we are about to inline so that we can avoid\n+     recursing into it.  */\n+  VARRAY_PUSH_TREE (id->fns, fn);\n+\n+  /* Return statements in the function body will be replaced by jumps\n+     to the RET_LABEL.  */\n+  id->ret_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n+  DECL_CONTEXT (id->ret_label) = VARRAY_TREE (id->fns, 0);\n+\n   /* Create a block to put the parameters in.  We have to do this\n      after the parameters have been remapped because remapping\n      parameters is different from remapping ordinary variables.  */"}, {"sha": "eb7794d1ed217ed2d3ae517ef6b2bfb357139a2b", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e8164f763bb6082f8c3067ef95c302dfce6f09/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e8164f763bb6082f8c3067ef95c302dfce6f09/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline2.C?ref=92e8164f763bb6082f8c3067ef95c302dfce6f09", "patch": "@@ -0,0 +1,11 @@\n+// Origin: Martin Reinecke <martin@MPA-Garching.MPG.DE>\n+// Build don't link:\n+// Special g++ Options: -O2 -Winline\n+\n+#include <cmath>\n+\n+int main()\n+{\n+  double foo = 4.5;\n+  if (abs (0.5-abs (foo-0.5)) < 1e-10) foo+=1;\n+}"}]}