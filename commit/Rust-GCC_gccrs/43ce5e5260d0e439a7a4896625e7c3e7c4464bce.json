{"sha": "43ce5e5260d0e439a7a4896625e7c3e7c4464bce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNjZTVlNTI2MGQwZTQzOWE3YTQ4OTY2MjVlN2MzZTdjNDQ2NGJjZQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-07-22T08:28:10Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-07-22T08:28:10Z"}, "message": "trans.h (gfc_set_decl_assembler_name): New prototype.\n\n\t* trans.h (gfc_set_decl_assembler_name): New prototype.\n\t* trans-decl.c (gfc_set_decl_assembler_name): New function.\n\t(gfc_get_symbol_decl, gfc_get_extern_function_decl,\n\tbuild_function_decl): Use gfc_set_decl_assembler_name instead of\n\tSET_DECL_ASSEMBLER_NAME.\n\t* trans-common.c (build_common_decl): Use\n\tgfc_set_decl_assembler_name instead of SET_DECL_ASSEMBLER_NAME.\n\nFrom-SVN: r149918", "tree": {"sha": "d439f8e07f4d1a4a04ae402b44515f9bdf363d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d439f8e07f4d1a4a04ae402b44515f9bdf363d9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43ce5e5260d0e439a7a4896625e7c3e7c4464bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ce5e5260d0e439a7a4896625e7c3e7c4464bce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ce5e5260d0e439a7a4896625e7c3e7c4464bce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fe6dea8ffc4ca9e1d502c29f0148c4a2c90ba07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe6dea8ffc4ca9e1d502c29f0148c4a2c90ba07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe6dea8ffc4ca9e1d502c29f0148c4a2c90ba07"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "9370dd7227bd0b7b90769b9226a5bdaa1aafc1f2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=43ce5e5260d0e439a7a4896625e7c3e7c4464bce", "patch": "@@ -1,3 +1,13 @@\n+2009-07-22  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* trans.h (gfc_set_decl_assembler_name): New prototype.\n+\t* trans-decl.c (gfc_set_decl_assembler_name): New function.\n+\t(gfc_get_symbol_decl, gfc_get_extern_function_decl,\n+\tbuild_function_decl): Use gfc_set_decl_assembler_name instead of\n+\tSET_DECL_ASSEMBLER_NAME.\n+\t* trans-common.c (build_common_decl): Use\n+\tgfc_set_decl_assembler_name instead of SET_DECL_ASSEMBLER_NAME.\n+\n 2009-07-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/40726"}, {"sha": "ca94567d633f32e1b2b1e334bd2a109829545f59", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=43ce5e5260d0e439a7a4896625e7c3e7c4464bce", "patch": "@@ -415,7 +415,7 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n     {\n       decl = build_decl (input_location,\n \t\t\t VAR_DECL, get_identifier (com->name), union_type);\n-      SET_DECL_ASSEMBLER_NAME (decl, gfc_sym_mangled_common_id (com));\n+      gfc_set_decl_assembler_name (decl, gfc_sym_mangled_common_id (com));\n       TREE_PUBLIC (decl) = 1;\n       TREE_STATIC (decl) = 1;\n       DECL_IGNORED_P (decl) = 1;"}, {"sha": "83c28cd8ebe785a214d7a9ef753a6138ee88346a", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=43ce5e5260d0e439a7a4896625e7c3e7c4464bce", "patch": "@@ -368,6 +368,14 @@ gfc_sym_mangled_function_id (gfc_symbol * sym)\n }\n \n \n+void\n+gfc_set_decl_assembler_name (tree decl, tree name)\n+{\n+  tree target_mangled = targetm.mangle_decl_assembler_name (decl, name);\n+  SET_DECL_ASSEMBLER_NAME (decl, target_mangled);\n+}\n+\n+\n /* Returns true if a variable of specified size should go on the stack.  */\n \n int\n@@ -1111,12 +1119,16 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   decl = build_decl (sym->declared_at.lb->location,\n \t\t     VAR_DECL, gfc_sym_identifier (sym), gfc_sym_type (sym));\n \n+  /* Add attributes to variables.  Functions are handled elsewhere.  */\n+  attributes = add_attributes_to_decl (sym->attr, NULL_TREE);\n+  decl_attributes (&decl, attributes, 0);\n+\n   /* Symbols from modules should have their assembler names mangled.\n      This is done here rather than in gfc_finish_var_decl because it\n      is different for string length variables.  */\n   if (sym->module)\n     {\n-      SET_DECL_ASSEMBLER_NAME (decl, gfc_sym_mangled_identifier (sym));\n+      gfc_set_decl_assembler_name (decl, gfc_sym_mangled_identifier (sym));\n       if (sym->attr.use_assoc)\n \tDECL_IGNORED_P (decl) = 1;\n     }\n@@ -1162,7 +1174,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t      name[0] = '.';\n \t      strcpy (&name[1],\n \t\t      IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (length)));\n-\t      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (name));\n+\t      gfc_set_decl_assembler_name (decl, get_identifier (name));\n \t    }\n \t  gfc_finish_var_decl (length, sym);\n \t  gcc_assert (!sym->value);\n@@ -1210,10 +1222,6 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       && !sym->attr.proc_pointer)\n     DECL_BY_REFERENCE (decl) = 1;\n \n-  /* Add attributes to variables.  Functions are handled elsewhere.  */\n-  attributes = add_attributes_to_decl (sym->attr, NULL_TREE);\n-  decl_attributes (&decl, attributes, 0);\n-\n   return decl;\n }\n \n@@ -1422,7 +1430,10 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n   fndecl = build_decl (input_location,\n \t\t       FUNCTION_DECL, name, type);\n \n-  SET_DECL_ASSEMBLER_NAME (fndecl, mangled_name);\n+  attributes = add_attributes_to_decl (sym->attr, NULL_TREE);\n+  decl_attributes (&fndecl, attributes, 0);\n+\n+  gfc_set_decl_assembler_name (fndecl, mangled_name);\n \n   /* Set the context of this decl.  */\n   if (0 && sym->ns && sym->ns->proc_name)\n@@ -1465,9 +1476,6 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n   if (DECL_CONTEXT (fndecl) == NULL_TREE)\n     pushdecl_top_level (fndecl);\n \n-  attributes = add_attributes_to_decl (sym->attr, NULL_TREE);\n-  decl_attributes (&fndecl, attributes, 0);\n-\n   return fndecl;\n }\n \n@@ -1501,15 +1509,18 @@ build_function_decl (gfc_symbol * sym)\n   fndecl = build_decl (input_location,\n \t\t       FUNCTION_DECL, gfc_sym_identifier (sym), type);\n \n+  attr = sym->attr;\n+\n+  attributes = add_attributes_to_decl (attr, NULL_TREE);\n+  decl_attributes (&fndecl, attributes, 0);\n+\n   /* Perform name mangling if this is a top level or module procedure.  */\n   if (current_function_decl == NULL_TREE)\n-    SET_DECL_ASSEMBLER_NAME (fndecl, gfc_sym_mangled_function_id (sym));\n+    gfc_set_decl_assembler_name (fndecl, gfc_sym_mangled_function_id (sym));\n \n   /* Figure out the return type of the declared function, and build a\n      RESULT_DECL for it.  If this is a subroutine with alternate\n      returns, build a RESULT_DECL for it.  */\n-  attr = sym->attr;\n-\n   result_decl = NULL_TREE;\n   /* TODO: Shouldn't this just be TREE_TYPE (TREE_TYPE (fndecl)).  */\n   if (attr.function)\n@@ -1579,8 +1590,6 @@ build_function_decl (gfc_symbol * sym)\n       TREE_SIDE_EFFECTS (fndecl) = 0;\n     }\n \n-  attributes = add_attributes_to_decl (attr, NULL_TREE);\n-  decl_attributes (&fndecl, attributes, 0);\n \n   /* Layout the function declaration and put it in the binding level\n      of the current function.  */"}, {"sha": "4469023499de35c10de4a990fd1f1fafece8c10b", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ce5e5260d0e439a7a4896625e7c3e7c4464bce/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=43ce5e5260d0e439a7a4896625e7c3e7c4464bce", "patch": "@@ -409,6 +409,10 @@ void gfc_shadow_sym (gfc_symbol *, tree, gfc_saved_var *);\n /* Restore the original variable.  */\n void gfc_restore_sym (gfc_symbol *, gfc_saved_var *);\n \n+/* Setting a decl assembler name, mangling it according to target rules\n+   (like Windows @NN decorations).  */\n+void gfc_set_decl_assembler_name (tree, tree);\n+\n /* Returns true if a variable of specified size should go on the stack.  */\n int gfc_can_put_var_on_stack (tree);\n "}]}