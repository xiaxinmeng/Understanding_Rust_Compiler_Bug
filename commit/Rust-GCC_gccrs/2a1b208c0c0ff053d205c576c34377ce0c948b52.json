{"sha": "2a1b208c0c0ff053d205c576c34377ce0c948b52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExYjIwOGMwYzBmZjA1M2QyMDVjNTc2YzM0Mzc3Y2UwYzk0OGI1Mg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2012-03-15T09:10:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-15T09:10:42Z"}, "message": "sem_ch4.adb (Analyze_Quantified_Expression): Add comment.\n\n2012-03-15  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Quantified_Expression): Add comment.\n\t* sem_prag.adb: Minor comment additions.\n\t* sem_attr.adb (Check_First_Last_Valid): Make sure prefix type\n\tis frozen.\n\nFrom-SVN: r185420", "tree": {"sha": "323b3cf2f1e0e20616283cb0da61e9a49d2e3ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/323b3cf2f1e0e20616283cb0da61e9a49d2e3ce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1b208c0c0ff053d205c576c34377ce0c948b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1b208c0c0ff053d205c576c34377ce0c948b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1b208c0c0ff053d205c576c34377ce0c948b52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1b208c0c0ff053d205c576c34377ce0c948b52/comments", "author": null, "committer": null, "parents": [{"sha": "ce6002ece2cb80b14030526abf0ef4401528f2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6002ece2cb80b14030526abf0ef4401528f2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce6002ece2cb80b14030526abf0ef4401528f2b9"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "864c3dd3c92e39d83ac5f131a6cf5fa5c9a4fee3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1b208c0c0ff053d205c576c34377ce0c948b52/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1b208c0c0ff053d205c576c34377ce0c948b52/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2a1b208c0c0ff053d205c576c34377ce0c948b52", "patch": "@@ -1,3 +1,10 @@\n+2012-03-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Quantified_Expression): Add comment.\n+\t* sem_prag.adb: Minor comment additions.\n+\t* sem_attr.adb (Check_First_Last_Valid): Make sure prefix type\n+\tis frozen.\n+\n 2012-03-15  Vincent Pucci  <pucci@adacore.com>\n \n \t* sem_ch4.adb (Analyze_Quantified_Expression):"}, {"sha": "f007a9dafe6968a9fef05802b2c1eb32a97c99e9", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1b208c0c0ff053d205c576c34377ce0c948b52/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1b208c0c0ff053d205c576c34377ce0c948b52/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=2a1b208c0c0ff053d205c576c34377ce0c948b52", "patch": "@@ -1273,9 +1273,12 @@ package body Sem_Attr is\n          Check_Ada_2012_Attribute;\n          Check_Discrete_Type;\n \n-         if not Is_Static_Subtype (P_Type) then\n-            Error_Attr_P (\"prefix of % attribute must be a static subtype\");\n-         end if;\n+         --  Freeze the subtype now, so that the following test for predicates\n+         --  works (we set the predicates stuff up at freeze time)\n+\n+         Insert_Actions (N, Freeze_Entity (P_Type, P));\n+\n+         --  Now test for dynamic predicate\n \n          if Has_Predicates (P_Type)\n            and then No (Static_Predicate (P_Type))\n@@ -1284,6 +1287,14 @@ package body Sem_Attr is\n               (\"prefix of % attribute may not have dynamic predicate\");\n          end if;\n \n+         --  Check non-static subtype\n+\n+         if not Is_Static_Subtype (P_Type) then\n+            Error_Attr_P (\"prefix of % attribute must be a static subtype\");\n+         end if;\n+\n+         --  Test case for no values\n+\n          if Expr_Value (Type_Low_Bound (P_Type)) >\n             Expr_Value (Type_High_Bound (P_Type))\n            or else (Has_Predicates (P_Type)"}, {"sha": "5ab5d3fe475eb0a2a454eb0e112fc1749d7fbb11", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1b208c0c0ff053d205c576c34377ce0c948b52/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1b208c0c0ff053d205c576c34377ce0c948b52/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=2a1b208c0c0ff053d205c576c34377ce0c948b52", "patch": "@@ -3449,6 +3449,12 @@ package body Sem_Ch4 is\n          --  quantified expression, only a preanalysis of the condition needs\n          --  to be done.\n \n+         --  This is weird and irregular code for several reasons. First, doing\n+         --  an Analyze with no Resolve is very suspicious, how can this be\n+         --  right for the overloaded case ??? Second, doing two calls to\n+         --  analyze on the same node is peculiar ??? Why can't we use the\n+         --  normal Preanalyze calls here ???\n+\n          Expander_Mode_Save_And_Set (False);\n          Analyze (Condition (N));\n          Expander_Mode_Restore;"}, {"sha": "d55325a272fc74bf72ba17e8103d8c763cd8b34b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1b208c0c0ff053d205c576c34377ce0c948b52/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1b208c0c0ff053d205c576c34377ce0c948b52/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2a1b208c0c0ff053d205c576c34377ce0c948b52", "patch": "@@ -696,7 +696,8 @@ package body Sem_Prag is\n       pragma No_Return (Error_Pragma);\n       --  Outputs error message for current pragma. The message contains a %\n       --  that will be replaced with the pragma name, and the flag is placed\n-      --  on the pragma itself. Pragma_Exit is then raised.\n+      --  on the pragma itself. Pragma_Exit is then raised. Note: this routine\n+      --  calls Fix_Error (see spec of that function for details).\n \n       procedure Error_Pragma_Arg (Msg : String; Arg : Node_Id);\n       pragma No_Return (Error_Pragma_Arg);\n@@ -707,7 +708,8 @@ package body Sem_Prag is\n       --  in which case the flag is placed directly on the expression. The\n       --  message is placed using Error_Msg_N, so the message may also contain\n       --  an & insertion character which will reference the given Arg value.\n-      --  After placing the message, Pragma_Exit is raised.\n+      --  After placing the message, Pragma_Exit is raised. Note: this routine\n+      --  calls Fix_Error (see spec of that function for details).\n \n       procedure Error_Pragma_Arg (Msg1, Msg2 : String; Arg : Node_Id);\n       pragma No_Return (Error_Pragma_Arg);\n@@ -723,14 +725,16 @@ package body Sem_Prag is\n       --  on the identifier. The message is placed using Error_Msg_N so\n       --  the message may also contain an & insertion character which will\n       --  reference the identifier. After placing the message, Pragma_Exit\n-      --  is raised.\n+      --  is raised. Note: this routine calls Fix_Error (see spec of that\n+      --  function for details).\n \n       procedure Error_Pragma_Ref (Msg : String; Ref : Entity_Id);\n       pragma No_Return (Error_Pragma_Ref);\n       --  Outputs error message for current pragma. The message may contain\n       --  a % that will be replaced with the pragma name. The parameter Ref\n       --  must be an entity whose name can be referenced by & and sloc by #.\n-      --  After placing the message, Pragma_Exit is raised.\n+      --  After placing the message, Pragma_Exit is raised. Note: this routine\n+      --  calls Fix_Error (see spec of that function for details).\n \n       function Find_Lib_Unit_Name return Entity_Id;\n       --  Used for a library unit pragma to find the entity to which the"}]}