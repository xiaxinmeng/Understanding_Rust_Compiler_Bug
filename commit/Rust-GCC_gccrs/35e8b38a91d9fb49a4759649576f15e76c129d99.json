{"sha": "35e8b38a91d9fb49a4759649576f15e76c129d99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVlOGIzOGE5MWQ5ZmI0OWE0NzU5NjQ5NTc2ZjE1ZTc2YzEyOWQ5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T15:37:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T15:44:03Z"}, "message": "c++: Fix empty base stores in cxx_eval_store_expression [PR100111]\n\nIn r11-6895 handling of empty bases has been fixed such that non-lval\nstores of empty classes are not added when the type of *valp doesn't\nmatch the type of the initializer, but as this testcase shows it is\ndone only when *valp is non-NULL.  If it is NULL, we still shouldn't\nadd empty class constructors if the type of the constructor elt *valp\npoints to doesn't match.\n\n2021-04-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/100111\n\t* constexpr.c (cxx_eval_store_expression): Don't add CONSTRUCTORs\n\tfor empty classes into *valp when types don't match even when *valp\n\tis NULL.\n\n\t* g++.dg/cpp0x/constexpr-100111.C: New test.", "tree": {"sha": "49ae45c6708611d0f597beb5d0fbe0eb2398e8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ae45c6708611d0f597beb5d0fbe0eb2398e8bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35e8b38a91d9fb49a4759649576f15e76c129d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e8b38a91d9fb49a4759649576f15e76c129d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e8b38a91d9fb49a4759649576f15e76c129d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e8b38a91d9fb49a4759649576f15e76c129d99/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b53f4cde2accd328e5de4f164dc390d33446216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b53f4cde2accd328e5de4f164dc390d33446216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b53f4cde2accd328e5de4f164dc390d33446216"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "0fb0ab44b39e3f0cf6bf6a3e01cdf3c80228f120", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e8b38a91d9fb49a4759649576f15e76c129d99/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e8b38a91d9fb49a4759649576f15e76c129d99/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=35e8b38a91d9fb49a4759649576f15e76c129d99", "patch": "@@ -5538,6 +5538,14 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       CONSTRUCTOR_NO_CLEARING (*valp)\n \t= CONSTRUCTOR_NO_CLEARING (init);\n     }\n+  else if (TREE_CODE (init) == CONSTRUCTOR\n+\t   && !same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (init),\n+\t\t\t\t\t\t\t  type))\n+    {\n+      /* See above on initialization of empty bases.  */\n+      gcc_assert (is_empty_class (TREE_TYPE (init)) && !lval);\n+      return init;\n+    }\n   else\n     *valp = init;\n "}, {"sha": "446d21d03c5a2efd779e2fbe9dce20bfa5a5d020", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-100111.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e8b38a91d9fb49a4759649576f15e76c129d99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-100111.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e8b38a91d9fb49a4759649576f15e76c129d99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-100111.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-100111.C?ref=35e8b38a91d9fb49a4759649576f15e76c129d99", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/100111\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fno-elide-constructors\" }\n+\n+struct A {};\n+struct B : A { int b; constexpr B (A x) : A(x), b() {} };\n+struct C { B c; constexpr C () : c({}) {} } d;"}]}