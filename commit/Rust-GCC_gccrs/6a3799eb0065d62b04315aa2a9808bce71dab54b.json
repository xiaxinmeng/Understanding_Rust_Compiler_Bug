{"sha": "6a3799eb0065d62b04315aa2a9808bce71dab54b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEzNzk5ZWIwMDY1ZDYyYjA0MzE1YWEyYTk4MDhiY2U3MWRhYjU0Yg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2008-09-01T15:02:27Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-09-01T15:02:27Z"}, "message": "tree.c (protected_set_expr_location): New.\n\n        * tree.c (protected_set_expr_location): New.\n        * tree.h (protected_set_expr_location): New prototype.\n        * c-tree.h (build_array_ref): Add argument.\n        (parser_build_unary_op): Same.\n        * c-typeck.c (build_indirect_ref): Handle new location argument.\n        (build_array_ref): Same.\n        (parser_build_unary_op): Same.\n        * gimplify.c (gimplify_asm_expr): Set input_location before calling\n        error.\n        * c-omp.c (c_finish_omp_atomic): Pass location when calling\n        build_indirect_ref.\n        * c-common.c (finish_label_address_expr): Handle new location\n        argument.\n        * c-common.h (build_indirect_ref): Add argument.\n        (finish_label_address_expr): Same.\n        * c-parser.c (c_parser_unary_expression): Pass location to build\n        functions.\n        (c_parser_postfix_expression): Same.\nobjc/\n        * objc-act.c (build_typed_selector_reference): Pass input_location to\n        build_unary_op calls.\n        (build_selector_reference): Same, but to build_array_ref.\n        (objc_substitute_decl): Same.\n        (build_ivar_reference): Same, but to build_indirect_ref.\n        (get_super_receiver): Same.\ntestsuite/\n        * gcc.dg/20010516-1.c: Test for columns.\ncp/\n        * typeck.c (build_x_indirect_ref): Add location argument.\n        * class.c (build_base_path): Pass location to build_indirect_ref.\n        * pt.c (tsubst_copy_and_build): Pass location to\n        finish_label_address_expr.\n        * parser.c (cp_parser_unary_expression): Same.\n\nFrom-SVN: r139867", "tree": {"sha": "57a9ce83f96df241f121be8ab48c43f79b30bd47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57a9ce83f96df241f121be8ab48c43f79b30bd47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a3799eb0065d62b04315aa2a9808bce71dab54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3799eb0065d62b04315aa2a9808bce71dab54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a3799eb0065d62b04315aa2a9808bce71dab54b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3799eb0065d62b04315aa2a9808bce71dab54b/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e1e5626dc66aa2bf4a2529b4aa842741d726340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1e5626dc66aa2bf4a2529b4aa842741d726340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e1e5626dc66aa2bf4a2529b4aa842741d726340"}], "stats": {"total": 181, "additions": 137, "deletions": 44}, "files": [{"sha": "16cb50cda164f6334e76ec02ed1f6ae19a77b7f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -1,3 +1,24 @@\n+2008-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree.c (protected_set_expr_location): New.\n+\t* tree.h (protected_set_expr_location): New prototype.\n+\t* c-tree.h (build_array_ref): Add argument.\n+\t(parser_build_unary_op): Same.\n+\t* c-typeck.c (build_indirect_ref): Handle new location argument.\n+\t(build_array_ref): Same.\n+\t(parser_build_unary_op): Same.\n+\t* gimplify.c (gimplify_asm_expr): Set input_location before calling\n+\terror.\n+\t* c-omp.c (c_finish_omp_atomic): Pass location when calling\n+\tbuild_indirect_ref.\n+\t* c-common.c (finish_label_address_expr): Handle new location\n+\targument.\n+\t* c-common.h (build_indirect_ref): Add argument.\n+\t(finish_label_address_expr): Same.\n+\t* c-parser.c (c_parser_unary_expression): Pass location to build\n+\tfunctions.\n+\t(c_parser_postfix_expression): Same.\n+\n 2008-09-01  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.md: Include cortex-r4f.md."}, {"sha": "8c9e48cbe97d82ea21800a9073ebe8d6f68941a3", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -5003,10 +5003,12 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n }\n \n /* Finish an expression taking the address of LABEL (an\n-   IDENTIFIER_NODE).  Returns an expression for the address.  */\n+   IDENTIFIER_NODE).  Returns an expression for the address.\n+\n+   LOC is the location for the expression returned.  */\n \n tree\n-finish_label_address_expr (tree label)\n+finish_label_address_expr (tree label, location_t loc)\n {\n   tree result;\n \n@@ -5025,6 +5027,7 @@ finish_label_address_expr (tree label)\n       /* The current function in not necessarily uninlinable.\n \t Computed gotos are incompatible with inlining, but the value\n \t here could be used only in a diagnostic, for example.  */\n+      protected_set_expr_location (result, loc);\n     }\n \n   return result;"}, {"sha": "d6f8d05f6de4e1906f2395560fbb250d661eddcc", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -357,7 +357,7 @@ extern void push_cleanup (tree, tree, bool);\n extern tree pushdecl_top_level (tree);\n extern tree pushdecl (tree);\n extern tree build_modify_expr (tree, enum tree_code, tree);\n-extern tree build_indirect_ref (tree, const char *);\n+extern tree build_indirect_ref (tree, const char *, location_t);\n \n extern int c_expand_decl (tree);\n \n@@ -851,7 +851,7 @@ extern tree build_function_call (tree, tree);\n \n extern tree resolve_overloaded_builtin (tree, tree);\n \n-extern tree finish_label_address_expr (tree);\n+extern tree finish_label_address_expr (tree, location_t);\n \n /* Same function prototype, but the C and C++ front ends have\n    different implementations.  Used in c-common.c.  */"}, {"sha": "6d9d5fa3810d175c2127cdfd49941a4de1e5ebc4", "filename": "gcc/c-omp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-omp.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -137,7 +137,7 @@ c_finish_omp_atomic (enum tree_code code, tree lhs, tree rhs)\n       tree var = create_tmp_var_raw (TREE_TYPE (addr), NULL);\n       addr = build4 (TARGET_EXPR, TREE_TYPE (addr), var, addr, NULL, NULL);\n     }\n-  lhs = build_indirect_ref (addr, NULL);\n+  lhs = build_indirect_ref (addr, NULL, EXPR_LOCATION (addr));\n \n   /* There are lots of warnings, errors, and conversions that need to happen\n      in the course of interpreting a statement.  Use the normal mechanisms"}, {"sha": "b7f3a17f1b610f22472d78c1d879c9338e4d4303", "filename": "gcc/c-parser.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -4798,27 +4798,29 @@ c_parser_unary_expression (c_parser *parser)\n {\n   int ext;\n   struct c_expr ret, op;\n+  location_t loc = c_parser_peek_token (parser)->location;\n   switch (c_parser_peek_token (parser)->type)\n     {\n     case CPP_PLUS_PLUS:\n       c_parser_consume_token (parser);\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (op);\n-      return parser_build_unary_op (PREINCREMENT_EXPR, op);\n+      return parser_build_unary_op (PREINCREMENT_EXPR, op, loc);\n     case CPP_MINUS_MINUS:\n       c_parser_consume_token (parser);\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (op);\n-      return parser_build_unary_op (PREDECREMENT_EXPR, op);\n+      return parser_build_unary_op (PREDECREMENT_EXPR, op, loc);\n     case CPP_AND:\n       c_parser_consume_token (parser);\n       return parser_build_unary_op (ADDR_EXPR,\n-\t\t\t\t    c_parser_cast_expression (parser, NULL));\n+\t\t\t\t    c_parser_cast_expression (parser, NULL),\n+\t\t\t\t    loc);\n     case CPP_MULT:\n       c_parser_consume_token (parser);\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (op);\n-      ret.value = build_indirect_ref (op.value, \"unary *\");\n+      ret.value = build_indirect_ref (op.value, \"unary *\", loc);\n       ret.original_code = ERROR_MARK;\n       return ret;\n     case CPP_PLUS:\n@@ -4829,29 +4831,29 @@ c_parser_unary_expression (c_parser *parser)\n       c_parser_consume_token (parser);\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (op);\n-      return parser_build_unary_op (CONVERT_EXPR, op);\n+      return parser_build_unary_op (CONVERT_EXPR, op, loc);\n     case CPP_MINUS:\n       c_parser_consume_token (parser);\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (op);\n-      return parser_build_unary_op (NEGATE_EXPR, op);\n+      return parser_build_unary_op (NEGATE_EXPR, op, loc);\n     case CPP_COMPL:\n       c_parser_consume_token (parser);\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (op);\n-      return parser_build_unary_op (BIT_NOT_EXPR, op);\n+      return parser_build_unary_op (BIT_NOT_EXPR, op, loc);\n     case CPP_NOT:\n       c_parser_consume_token (parser);\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (op);\n-      return parser_build_unary_op (TRUTH_NOT_EXPR, op);\n+      return parser_build_unary_op (TRUTH_NOT_EXPR, op, loc);\n     case CPP_AND_AND:\n       /* Refer to the address of a label as a pointer.  */\n       c_parser_consume_token (parser);\n       if (c_parser_next_token_is (parser, CPP_NAME))\n \t{\n \t  ret.value = finish_label_address_expr\n-\t    (c_parser_peek_token (parser)->value);\n+\t    (c_parser_peek_token (parser)->value, loc);\n \t  c_parser_consume_token (parser);\n \t}\n       else\n@@ -4878,12 +4880,12 @@ c_parser_unary_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  op = c_parser_cast_expression (parser, NULL);\n \t  op = default_function_array_conversion (op);\n-\t  return parser_build_unary_op (REALPART_EXPR, op);\n+\t  return parser_build_unary_op (REALPART_EXPR, op, loc);\n \tcase RID_IMAGPART:\n \t  c_parser_consume_token (parser);\n \t  op = c_parser_cast_expression (parser, NULL);\n \t  op = default_function_array_conversion (op);\n-\t  return parser_build_unary_op (IMAGPART_EXPR, op);\n+\t  return parser_build_unary_op (IMAGPART_EXPR, op, loc);\n \tdefault:\n \t  return c_parser_postfix_expression (parser);\n \t}\n@@ -5273,11 +5275,12 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t    else\n \t\t      {\n \t\t\ttree idx;\n+\t\t\tloc = c_parser_peek_token (parser)->location;\n \t\t\tc_parser_consume_token (parser);\n \t\t\tidx = c_parser_expression (parser).value;\n \t\t\tc_parser_skip_until_found (parser, CPP_CLOSE_SQUARE,\n \t\t\t\t\t\t   \"expected %<]%>\");\n-\t\t\toffsetof_ref = build_array_ref (offsetof_ref, idx);\n+\t\t\toffsetof_ref = build_array_ref (offsetof_ref, idx, loc);\n \t\t      }\n \t\t  }\n \t      }\n@@ -5513,17 +5516,19 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t   struct c_expr expr)\n {\n   tree ident, idx, exprlist;\n+  location_t loc = c_parser_peek_token (parser)->location;\n   while (true)\n     {\n       switch (c_parser_peek_token (parser)->type)\n \t{\n \tcase CPP_OPEN_SQUARE:\n \t  /* Array reference.  */\n+\t  loc = c_parser_peek_token (parser)->location;\n \t  c_parser_consume_token (parser);\n \t  idx = c_parser_expression (parser).value;\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_SQUARE,\n \t\t\t\t     \"expected %<]%>\");\n-\t  expr.value = build_array_ref (expr.value, idx);\n+\t  expr.value = build_array_ref (expr.value, idx, loc);\n \t  expr.original_code = ERROR_MARK;\n \t  break;\n \tcase CPP_OPEN_PAREN:\n@@ -5572,7 +5577,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t    }\n \t  c_parser_consume_token (parser);\n \t  expr.value = build_component_ref (build_indirect_ref (expr.value,\n-\t\t\t\t\t\t\t\t\"->\"), ident);\n+\t\t\t\t\t\t\t\t\"->\", loc),\n+\t\t\t\t\t    ident);\n \t  expr.original_code = ERROR_MARK;\n \t  break;\n \tcase CPP_PLUS_PLUS:"}, {"sha": "1329ce32282bebd4a35092e760ec4067810faeef", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -550,12 +550,13 @@ extern tree c_type_promotes_to (tree);\n extern struct c_expr default_function_array_conversion (struct c_expr);\n extern tree composite_type (tree, tree);\n extern tree build_component_ref (tree, tree);\n-extern tree build_array_ref (tree, tree);\n+extern tree build_array_ref (tree, tree, location_t);\n extern tree build_external_ref (tree, int, location_t);\n extern void pop_maybe_used (bool);\n extern struct c_expr c_expr_sizeof_expr (struct c_expr);\n extern struct c_expr c_expr_sizeof_type (struct c_type_name *);\n-extern struct c_expr parser_build_unary_op (enum tree_code, struct c_expr);\n+extern struct c_expr parser_build_unary_op (enum tree_code, struct c_expr,\n+    \t\t\t\t\t    location_t);\n extern struct c_expr parser_build_binary_op (enum tree_code, struct c_expr,\n \t\t\t\t\t     struct c_expr);\n extern tree build_conditional_expr (tree, tree, tree);"}, {"sha": "2246526b8bf7fca957cb3444f65ef73a1c4d2bd4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -1967,13 +1967,16 @@ build_component_ref (tree datum, tree component)\n \f\n /* Given an expression PTR for a pointer, return an expression\n    for the value pointed to.\n-   ERRORSTRING is the name of the operator to appear in error messages.  */\n+   ERRORSTRING is the name of the operator to appear in error messages.\n+\n+   LOC is the location to use for the generated tree.  */\n \n tree\n-build_indirect_ref (tree ptr, const char *errorstring)\n+build_indirect_ref (tree ptr, const char *errorstring, location_t loc)\n {\n   tree pointer = default_conversion (ptr);\n   tree type = TREE_TYPE (pointer);\n+  tree ref;\n \n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n@@ -1992,11 +1995,14 @@ build_indirect_ref (tree ptr, const char *errorstring)\n       if (TREE_CODE (pointer) == ADDR_EXPR\n \t  && (TREE_TYPE (TREE_OPERAND (pointer, 0))\n \t      == TREE_TYPE (type)))\n-\treturn TREE_OPERAND (pointer, 0);\n+\t{\n+\t  ref = TREE_OPERAND (pointer, 0);\n+\t  protected_set_expr_location (ref, loc);\n+\t  return ref;\n+\t}\n       else\n \t{\n \t  tree t = TREE_TYPE (type);\n-\t  tree ref;\n \n \t  ref = build1 (INDIRECT_REF, t, pointer);\n \n@@ -2019,6 +2025,7 @@ build_indirect_ref (tree ptr, const char *errorstring)\n \t  TREE_SIDE_EFFECTS (ref)\n \t    = TYPE_VOLATILE (t) || TREE_SIDE_EFFECTS (pointer);\n \t  TREE_THIS_VOLATILE (ref) = TYPE_VOLATILE (t);\n+\t  protected_set_expr_location (ref, loc);\n \t  return ref;\n \t}\n     }\n@@ -2034,11 +2041,14 @@ build_indirect_ref (tree ptr, const char *errorstring)\n    If A is a variable or a member, we generate a primitive ARRAY_REF.\n    This avoids forcing the array out of registers, and can work on\n    arrays that are not lvalues (for example, members of structures returned\n-   by functions).  */\n+   by functions).\n+\n+   LOC is the location to use for the returned expression.  */\n \n tree\n-build_array_ref (tree array, tree index)\n+build_array_ref (tree array, tree index, location_t loc)\n {\n+  tree ret;\n   bool swapped = false;\n   if (TREE_TYPE (array) == error_mark_node\n       || TREE_TYPE (index) == error_mark_node)\n@@ -2139,7 +2149,9 @@ build_array_ref (tree array, tree index)\n \t       in an inline function.\n \t       Hope it doesn't break something else.  */\n \t    | TREE_THIS_VOLATILE (array));\n-      return require_complete_type (fold (rval));\n+      ret = require_complete_type (fold (rval));\n+      protected_set_expr_location (ret, loc);\n+      return ret;\n     }\n   else\n     {\n@@ -2152,7 +2164,7 @@ build_array_ref (tree array, tree index)\n       gcc_assert (TREE_CODE (TREE_TYPE (TREE_TYPE (ar))) != FUNCTION_TYPE);\n \n       return build_indirect_ref (build_binary_op (PLUS_EXPR, ar, index, 0),\n-\t\t\t\t \"array indexing\");\n+\t\t\t\t \"array indexing\", loc);\n     }\n }\n \f\n@@ -2724,16 +2736,20 @@ convert_arguments (int nargs, tree *argarray,\n /* This is the entry point used by the parser to build unary operators\n    in the input.  CODE, a tree_code, specifies the unary operator, and\n    ARG is the operand.  For unary plus, the C parser currently uses\n-   CONVERT_EXPR for code.  */\n+   CONVERT_EXPR for code.\n+\n+   LOC is the location to use for the tree generated.\n+*/\n \n struct c_expr\n-parser_build_unary_op (enum tree_code code, struct c_expr arg)\n+parser_build_unary_op (enum tree_code code, struct c_expr arg, location_t loc)\n {\n   struct c_expr result;\n \n   result.original_code = ERROR_MARK;\n   result.value = build_unary_op (code, arg.value, 0);\n-  \n+  protected_set_expr_location (result.value, loc);\n+\n   if (TREE_OVERFLOW_P (result.value) && !TREE_OVERFLOW_P (arg.value))\n     overflow_warning (result.value);\n "}, {"sha": "67f3f2b7b0455162b9d9291290af2830b3ab1e8f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -1,3 +1,11 @@\n+2008-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* typeck.c (build_x_indirect_ref): Add location argument.\n+\t* class.c (build_base_path): Pass location to build_indirect_ref.\n+\t* pt.c (tsubst_copy_and_build): Pass location to\n+\tfinish_label_address_expr.\n+\t* parser.c (cp_parser_unary_expression): Same.\n+\n 2008-08-31  Jason Merrill  <jason@redhat.com>\n \n \tImplement late-specified return type using 'auto'."}, {"sha": "5f7d4a28c9d3431b90dfb43fa90f9a3248152113", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -299,7 +299,7 @@ build_base_path (enum tree_code code,\n     {\n       expr = build_nop (build_pointer_type (target_type), expr);\n       if (!want_pointer)\n-\texpr = build_indirect_ref (expr, NULL);\n+\texpr = build_indirect_ref (expr, NULL, EXPR_LOCATION (expr));\n       return expr;\n     }\n "}, {"sha": "4549f8f8924236853f9f2518714dbeb7fb8ba89c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -5457,13 +5457,14 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p)\n \t{\n \t  tree identifier;\n \t  tree expression;\n+\t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \n \t  /* Consume the '&&' token.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  /* Look for the identifier.  */\n \t  identifier = cp_parser_identifier (parser);\n \t  /* Create an expression representing the address.  */\n-\t  expression = finish_label_address_expr (identifier);\n+\t  expression = finish_label_address_expr (identifier, loc);\n \t  if (cp_parser_non_integral_constant_expression (parser,\n \t\t\t\t\t\t\"the address of a label\"))\n \t    expression = error_mark_node;"}, {"sha": "7c9165c20eabf5a7bf7439c5f084c05bb7181ac9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -11056,7 +11056,8 @@ tsubst_copy_and_build (tree t,\n \top1 = tsubst_non_call_postfix_expression (op1, args, complain,\n \t\t\t\t\t\t  in_decl);\n       if (TREE_CODE (op1) == LABEL_DECL)\n-\treturn finish_label_address_expr (DECL_NAME (op1));\n+\treturn finish_label_address_expr (DECL_NAME (op1),\n+\t\t\t\t\t  EXPR_LOCATION (op1));\n       return build_x_unary_op (ADDR_EXPR, op1, complain);\n \n     case PLUS_EXPR:"}, {"sha": "d60ddbd950be54d6ab8adb931f853ce3046353dc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -2405,7 +2405,8 @@ build_x_indirect_ref (tree expr, const char *errorstring,\n \n /* Helper function called from c-common.  */\n tree\n-build_indirect_ref (tree ptr, const char *errorstring)\n+build_indirect_ref (tree ptr, const char *errorstring, \n+\t\t    location_t loc __attribute__ ((__unused__)))\n {\n   return cp_build_indirect_ref (ptr, errorstring, tf_warning_or_error);\n }"}, {"sha": "c1f5744d7a89fdf729480b76e45a72ae297121be", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -4762,6 +4762,8 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  mark_addressable (TREE_VALUE (link));\n \t  if (tret == GS_ERROR)\n \t    {\n+\t      if (EXPR_HAS_LOCATION (TREE_VALUE (link)))\n+\t        input_location = EXPR_LOCATION (TREE_VALUE (link));\n \t      error (\"memory input %d is not directly addressable\", i);\n \t      ret = tret;\n \t    }"}, {"sha": "8eea3dbfd6720090907a97e3f0a0e44ab7f67a3e", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -1,3 +1,12 @@\n+2008-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* objc-act.c (build_typed_selector_reference): Pass input_location to\n+\tbuild_unary_op calls.\n+\t(build_selector_reference): Same, but to build_array_ref.\n+\t(objc_substitute_decl): Same.\n+\t(build_ivar_reference): Same, but to build_indirect_ref.\n+\t(get_super_receiver): Same.\n+\n 2008-07-28  Richard Guenther  <rguenther@suse.de>\n \n \tMerge from gimple-tuples-branch."}, {"sha": "8f9571942c27d210233eeb865465f4cf28abdb88", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -2630,7 +2630,8 @@ build_typed_selector_reference (tree ident, tree prototype)\n  return_at_index:\n   expr = build_unary_op (ADDR_EXPR,\n \t\t\t build_array_ref (UOBJC_SELECTOR_TABLE_decl,\n-\t\t\t\t\t  build_int_cst (NULL_TREE, index)),\n+\t\t\t\t\t  build_int_cst (NULL_TREE, index),\n+\t\t\t\t\t  input_location),\n \t\t\t 1);\n   return convert (objc_selector_type, expr);\n }\n@@ -2648,7 +2649,8 @@ build_selector_reference (tree ident)\n \treturn (flag_next_runtime\n \t\t? TREE_PURPOSE (*chain)\n \t\t: build_array_ref (UOBJC_SELECTOR_TABLE_decl,\n-\t\t\t\t   build_int_cst (NULL_TREE, index)));\n+\t\t\t\t   build_int_cst (NULL_TREE, index),\n+\t\t\t\t   input_location));\n \n       index++;\n       chain = &TREE_CHAIN (*chain);\n@@ -2661,7 +2663,8 @@ build_selector_reference (tree ident)\n   return (flag_next_runtime\n \t  ? expr\n \t  : build_array_ref (UOBJC_SELECTOR_TABLE_decl,\n-\t\t\t     build_int_cst (NULL_TREE, index)));\n+\t\t\t     build_int_cst (NULL_TREE, index),\n+\t\t\t     input_location));\n }\n \n static GTY(()) int class_reference_idx;\n@@ -3046,11 +3049,13 @@ objc_substitute_decl (tree expr, tree oldexpr, tree newexpr)\n       return build_array_ref (objc_substitute_decl (TREE_OPERAND (expr, 0),\n \t\t\t\t\t\t    oldexpr,\n \t\t\t\t\t\t    newexpr),\n-\t\t\t      TREE_OPERAND (expr, 1));\n+\t\t\t      TREE_OPERAND (expr, 1),\n+\t\t\t      input_location);\n     case INDIRECT_REF:\n       return build_indirect_ref (objc_substitute_decl (TREE_OPERAND (expr, 0),\n \t\t\t\t\t\t       oldexpr,\n-\t\t\t\t\t\t       newexpr), \"->\");\n+\t\t\t\t\t\t       newexpr), \"->\",\n+\t\t\t\t input_location);\n     default:\n       return expr;\n     }\n@@ -6713,7 +6718,8 @@ build_ivar_reference (tree id)\n       self_decl = convert (objc_instance_type, self_decl); /* cast */\n     }\n \n-  return objc_build_component_ref (build_indirect_ref (self_decl, \"->\"), id);\n+  return objc_build_component_ref (build_indirect_ref (self_decl, \"->\",\n+  \t\t\t\t\t\t       input_location), id);\n }\n \f\n /* Compute a hash value for a given method SEL_NAME.  */\n@@ -8737,7 +8743,7 @@ get_super_receiver (void)\n \t\tsuper_class\n \t\t  = build_indirect_ref\n \t\t    (build_c_cast (build_pointer_type (objc_class_type),\n-\t\t\t\t   super_class), \"unary *\");\n+\t\t\t\t   super_class), \"unary *\", input_location);\n \t    }\n \t  else\n \t    {"}, {"sha": "c5a4f5c848298675fcf30822a5ec08d115993f20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -1,3 +1,7 @@\n+2008-09-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/20010516-1.c: Test for columns.\n+\n 2008-09-01  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37193"}, {"sha": "6ddabd0931db3dcaabb947cce1bf8097d86088ad", "filename": "gcc/testsuite/gcc.dg/20010516-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Ftestsuite%2Fgcc.dg%2F20010516-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Ftestsuite%2Fgcc.dg%2F20010516-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20010516-1.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -1,5 +1,7 @@\n+/* { dg-options \"-fshow-column\" } */\n+\n foo()\n {\n       char d;\n-      __asm volatile ( \"\" :: \"m\"(&d)); /* { dg-error \"\" \"non-lvalue\" } */\n+      __asm volatile ( \"\" :: \"m\"(&d)); /* { dg-error \"34:\" \"non-lvalue\" } */\n }"}, {"sha": "95680bacb6123f9ab727730e518464816b35a0bd", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -3577,6 +3577,16 @@ set_expr_locus (tree node, source_location *loc)\n   else\n     EXPR_CHECK (node)->exp.locus = *loc;\n }\n+\n+/* Like SET_EXPR_LOCATION, but make sure the tree can have a location.\n+\n+   LOC is the location to use in tree T.  */\n+\n+void protected_set_expr_location (tree t, location_t loc)\n+{\n+  if (t && t != error_mark_node && CAN_HAVE_LOCATION_P (t))\n+    SET_EXPR_LOCATION (t, loc);\n+}\n \f\n /* Return a declaration like DDECL except that its DECL_ATTRIBUTES\n    is ATTRIBUTE.  */"}, {"sha": "43531e59e4bb2f2ff03cc10023f8ee8ecabb33ec", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3799eb0065d62b04315aa2a9808bce71dab54b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6a3799eb0065d62b04315aa2a9808bce71dab54b", "patch": "@@ -1578,6 +1578,8 @@ struct tree_constructor GTY(())\n    location.  */\n #define CAN_HAVE_LOCATION_P(NODE) (EXPR_P (NODE))\n \n+extern void protected_set_expr_location (tree, location_t);\n+\n /* In a TARGET_EXPR node.  */\n #define TARGET_EXPR_SLOT(NODE) TREE_OPERAND_CHECK_CODE (NODE, TARGET_EXPR, 0)\n #define TARGET_EXPR_INITIAL(NODE) TREE_OPERAND_CHECK_CODE (NODE, TARGET_EXPR, 1)"}]}