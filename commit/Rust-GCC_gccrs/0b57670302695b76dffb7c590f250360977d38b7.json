{"sha": "0b57670302695b76dffb7c590f250360977d38b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI1NzY3MDMwMjY5NWI3NmRmZmI3YzU5MGYyNTAzNjA5NzdkMzhiNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-09T15:28:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-09T15:28:19Z"}, "message": "profile.c (is_edge_inconsistent): Add debug output; ignore negative count on fake edges.\n\n\t* profile.c (is_edge_inconsistent): Add debug output; ignore negative count\n\ton fake edges.\n\t(is_inconsistent): Add debug output.\n\nFrom-SVN: r140156", "tree": {"sha": "fe0388349cd8789b11cdfcc9d1d95907d7973010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe0388349cd8789b11cdfcc9d1d95907d7973010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b57670302695b76dffb7c590f250360977d38b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b57670302695b76dffb7c590f250360977d38b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b57670302695b76dffb7c590f250360977d38b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b57670302695b76dffb7c590f250360977d38b7/comments", "author": null, "committer": null, "parents": [{"sha": "018fe68f30a380821f44af06c36d24a0df8fc4b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018fe68f30a380821f44af06c36d24a0df8fc4b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018fe68f30a380821f44af06c36d24a0df8fc4b4"}], "stats": {"total": 81, "additions": 69, "deletions": 12}, "files": [{"sha": "7e391dbd593e62bbe7ce1044132736dd68b70c20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b57670302695b76dffb7c590f250360977d38b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b57670302695b76dffb7c590f250360977d38b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b57670302695b76dffb7c590f250360977d38b7", "patch": "@@ -1,3 +1,9 @@\n+2008-09-09  Jan Hubicka  <jh@suse.cz>\n+\n+\t* profile.c (is_edge_inconsistent): Add debug output; ignore negative count\n+\ton fake edges.\n+\t(is_inconsistent): Add debug output.\n+\n 2008-09-09  Andrey Belevantsev  <abel@ispras.ru>\n \n \t* haifa-sched.c (advance_one_cycle): Do not print '\\n' before printing"}, {"sha": "0ece72519d91e971579a2659720e35748180e352", "filename": "gcc/profile.c", "status": "modified", "additions": 63, "deletions": 12, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b57670302695b76dffb7c590f250360977d38b7/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b57670302695b76dffb7c590f250360977d38b7/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=0b57670302695b76dffb7c590f250360977d38b7", "patch": "@@ -277,8 +277,20 @@ is_edge_inconsistent (VEC(edge,gc) *edges)\n     {\n       if (!EDGE_INFO (e)->ignore)\n         {\n-          if (e->count < 0)\n-            return true;\n+          if (e->count < 0\n+\t      && ((!e->flags & EDGE_FAKE)\n+\t          || !block_ends_with_call_p (e->src)))\n+\t    {\n+\t      if (dump_file)\n+\t\t{\n+\t\t  fprintf (dump_file,\n+\t\t  \t   \"Edge %i->%i is inconsistent, count\"HOST_WIDEST_INT_PRINT_DEC,\n+\t\t\t   e->src->index, e->dest->index, e->count);\n+\t\t  dump_bb (e->src, dump_file, 0);\n+\t\t  dump_bb (e->dest, dump_file, 0);\n+\t\t}\n+              return true;\n+\t    }\n         }\n     }\n   return false;\n@@ -307,20 +319,59 @@ static bool\n is_inconsistent (void)\n {\n   basic_block bb;\n+  bool inconsistent = false;\n   FOR_EACH_BB (bb)\n     {\n-      if (is_edge_inconsistent (bb->preds))\n-        return true;\n-      if (is_edge_inconsistent (bb->succs))\n-        return true;\n-      if ( bb->count != sum_edge_counts (bb->preds)\n-         || (bb->count != sum_edge_counts (bb->succs) &&\n-             !(find_edge (bb, EXIT_BLOCK_PTR) != NULL &&\n-               block_ends_with_call_p (bb))))\n-        return true;\n+      inconsistent |= is_edge_inconsistent (bb->preds);\n+      if (!dump_file && inconsistent)\n+\treturn true;\n+      inconsistent |= is_edge_inconsistent (bb->succs);\n+      if (!dump_file && inconsistent)\n+\treturn true;\n+      if (bb->count < 0)\n+        {\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"BB %i count is negative \"\n+\t\t       HOST_WIDEST_INT_PRINT_DEC,\n+\t\t       bb->index,\n+\t\t       bb->count);\n+\t      dump_bb (bb, dump_file, 0);\n+\t    }\n+\t  inconsistent = true;\n+\t}\n+      if (bb->count != sum_edge_counts (bb->preds))\n+        {\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"BB %i count does not match sum of incomming edges \"\n+\t\t       HOST_WIDEST_INT_PRINT_DEC\" should be \" HOST_WIDEST_INT_PRINT_DEC,\n+\t\t       bb->index,\n+\t\t       bb->count,\n+\t\t       sum_edge_counts (bb->preds));\n+\t      dump_bb (bb, dump_file, 0);\n+\t    }\n+\t  inconsistent = true;\n+\t}\n+      if (bb->count != sum_edge_counts (bb->succs) &&\n+          ! (find_edge (bb, EXIT_BLOCK_PTR) != NULL && block_ends_with_call_p (bb)))\n+\t{\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"BB %i count does not match sum of outgoing edges \"\n+\t\t       HOST_WIDEST_INT_PRINT_DEC\" should be \" HOST_WIDEST_INT_PRINT_DEC,\n+\t\t       bb->index,\n+\t\t       bb->count,\n+\t\t       sum_edge_counts (bb->succs));\n+\t      dump_bb (bb, dump_file, 0);\n+\t    }\n+\t  inconsistent = true;\n+\t}\n+      if (!dump_file && inconsistent)\n+\treturn true;\n     }\n \n-  return false;\n+  return inconsistent;\n }\n \n /* Set each basic block count to the sum of its outgoing edge counts */"}]}