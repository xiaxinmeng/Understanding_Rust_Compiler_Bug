{"sha": "6ca20f85cf0890431f4a2f0bc993d733ccb30bb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhMjBmODVjZjA4OTA0MzFmNGEyZjBiYzk5M2Q3MzNjY2IzMGJiMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-07T20:37:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-07T20:37:15Z"}, "message": "stl_algobase.h: Do not include <cstring>.\n\n2007-05-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h: Do not include <cstring>.\n\t(copy(const _Tp*, const _Tp*, _Tp*), __copy_b(const _Tp*, const _Tp*,\n\t_Tp*)): Use __builtin_memmove.\n\t(__fill_aux): Use __builtin_memset.\n\t(equal(const _Tp*, const _Tp*, const _Tp*),\n\tlexicographical_compare(const unsigned char*, const unsigned char*,\n\tconst unsigned char*, const unsigned char*)): Use __builtin_memcmp.\n\t*  include/bits/valarray_array.h: Do not include <cstring>.\n\t(_Array_default_ctor<, true>::_S_do_it): Use __builtin_memset.\n\t(_Array_copy_ctor<, true>::_S_do_it, _Array_copier<, true>::_S_do_it):\n\tUse __builtin_memcpy.\n\t* include/ext/algorithm\n\t(__lexicographical_compare_3way(const unsigned char*,\n\tconst unsigned char*, const unsigned char*, const unsigned char*)):\n\tUse __builtin_memcmp.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Adjust dg-error line number.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r124512", "tree": {"sha": "4c804414ea5c805f0a4f9e92f8dcc90ceba4479a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c804414ea5c805f0a4f9e92f8dcc90ceba4479a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ca20f85cf0890431f4a2f0bc993d733ccb30bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca20f85cf0890431f4a2f0bc993d733ccb30bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca20f85cf0890431f4a2f0bc993d733ccb30bb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca20f85cf0890431f4a2f0bc993d733ccb30bb2/comments", "author": null, "committer": null, "parents": [{"sha": "360721e336dbcceb4254ffbc6fd06b655ef3a9ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360721e336dbcceb4254ffbc6fd06b655ef3a9ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/360721e336dbcceb4254ffbc6fd06b655ef3a9ec"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "128b9deae8d709cd1bdff39293d753fbab91d6b9", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca20f85cf0890431f4a2f0bc993d733ccb30bb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca20f85cf0890431f4a2f0bc993d733ccb30bb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=6ca20f85cf0890431f4a2f0bc993d733ccb30bb2", "patch": "@@ -1,7 +1,8 @@\n // The template and inlines for the -*- C++ -*- internal _Array helper class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2003, 2004, 2005, 2006, 2007\n-//  Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,7 +44,6 @@\n #include <bits/c++config.h>\n #include <bits/cpp_type_traits.h>\n #include <cstdlib>\n-#include <cstring>\n #include <new>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -91,7 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // For fundamental types, it suffices to say 'memset()'\n       inline static void\n       _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e)\n-      { std::memset(__b, 0, (__e - __b) * sizeof(_Tp)); }\n+      { __builtin_memset(__b, 0, (__e - __b) * sizeof(_Tp)); }\n     };\n \n   template<typename _Tp>\n@@ -160,7 +160,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       inline static void\n       _S_do_it(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e,\n \t       _Tp* __restrict__ __o)\n-      { std::memcpy(__o, __b, (__e - __b)*sizeof(_Tp)); }\n+      { __builtin_memcpy(__o, __b, (__e - __b) * sizeof(_Tp)); }\n     };\n \n   template<typename _Tp>\n@@ -267,7 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       inline static void\n       _S_do_it(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)\n-      { std::memcpy (__b, __a, __n * sizeof (_Tp)); }\n+      { __builtin_memcpy(__b, __a, __n * sizeof (_Tp)); }\n     };\n \n   // Copy a plain array __a[<__n>] into a play array __b[<>]"}]}