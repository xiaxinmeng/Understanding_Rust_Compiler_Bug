{"sha": "369e59b1c16871040601d6d8671c7877777f32e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY5ZTU5YjFjMTY4NzEwNDA2MDFkNmQ4NjcxYzc4Nzc3NzdmMzJlMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-03-15T12:34:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-03-15T12:34:40Z"}, "message": "i386.md (movhi_1): Promote movw imm...\n\n\t* i386.md (movhi_1): Promote movw imm, reg to movl imm, reg and\n\tmovw reg, reg to movzwl reg, reg on PARTIAL_REGISTER_STALL machines.\n\t* i386.c (pentiumpro_cost): Set mul cost to 4.\n\t(x86_use_movx): Set for PPro.\n\nFrom-SVN: r32560", "tree": {"sha": "a4450d64ddf71bd79717aff99b23e3140133a442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4450d64ddf71bd79717aff99b23e3140133a442"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/369e59b1c16871040601d6d8671c7877777f32e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369e59b1c16871040601d6d8671c7877777f32e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369e59b1c16871040601d6d8671c7877777f32e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369e59b1c16871040601d6d8671c7877777f32e3/comments", "author": null, "committer": null, "parents": [{"sha": "5f677a9ee77e6b776b7ccfc7741478bffff2068f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f677a9ee77e6b776b7ccfc7741478bffff2068f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f677a9ee77e6b776b7ccfc7741478bffff2068f"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "ca7070e609f2fc0058df4f34eb831cac8a7f823d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369e59b1c16871040601d6d8671c7877777f32e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369e59b1c16871040601d6d8671c7877777f32e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=369e59b1c16871040601d6d8671c7877777f32e3", "patch": "@@ -1,3 +1,10 @@\n+Wed Mar 15 13:26:58 MET 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (movhi_1): Promote movw imm, reg to movl imm, reg and\n+\tmovw reg, reg to movzwl reg, reg on PARTIAL_REGISTER_STALL machines.\n+\t* i386.c (pentiumpro_cost): Set mul cost to 4.\n+\t(x86_use_movx): Set for PPro.\n+\n Wed Mar 15 13:07:05 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (ix86_compute_frame_size): stack_alignment_needed is"}, {"sha": "c2eadf13bd228610367d57535c94fb87cfc0e01e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369e59b1c16871040601d6d8671c7877777f32e3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369e59b1c16871040601d6d8671c7877777f32e3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=369e59b1c16871040601d6d8671c7877777f32e3", "patch": "@@ -124,7 +124,7 @@ struct processor_costs pentiumpro_cost = {\n   1,\t\t\t\t\t/* cost of a lea instruction */\n   1,\t\t\t\t\t/* variable shift costs */\n   1,\t\t\t\t\t/* constant shift costs */\n-  1,\t\t\t\t\t/* cost of starting a multiply */\n+  4,\t\t\t\t\t/* cost of starting a multiply */\n   0,\t\t\t\t\t/* cost of multiply per each bit set */\n   17,\t\t\t\t\t/* cost of a divide/mod */\n   8,\t\t\t\t\t/* \"large\" insn */\n@@ -195,7 +195,7 @@ struct processor_costs *ix86_cost = &pentium_cost;\n const int x86_use_leave = m_386 | m_K6 | m_ATHLON;\n const int x86_push_memory = m_386 | m_K6 | m_ATHLON;\n const int x86_zero_extend_with_and = m_486 | m_PENT;\n-const int x86_movx = m_ATHLON /* m_386 | m_PPRO | m_K6 */;\n+const int x86_movx = m_ATHLON | m_PPRO /* m_386 | m_K6 */;\n const int x86_double_with_add = ~m_386;\n const int x86_use_bit_test = m_386;\n const int x86_unroll_strlen = m_486 | m_PENT | m_PPRO | m_ATHLON | m_K6;"}, {"sha": "925473952ac99e2618013af5121e4653570a815a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369e59b1c16871040601d6d8671c7877777f32e3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369e59b1c16871040601d6d8671c7877777f32e3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=369e59b1c16871040601d6d8671c7877777f32e3", "patch": "@@ -1379,8 +1379,8 @@\n   [(set_attr \"type\" \"pop\")])\n \n (define_insn \"*movhi_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m\")\n-\t(match_operand:HI 1 \"general_operand\" \"rn,rm,rn\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m\")\n+\t(match_operand:HI 1 \"general_operand\" \"r,rn,rm,rn\"))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"*\n {\n@@ -1398,22 +1398,28 @@\n     }\n }\"\n   [(set (attr \"type\")\n-     (cond [(and (eq_attr \"alternative\" \"0,1\")\n+     (cond [(and (eq_attr \"alternative\" \"0\")\n+\t\t (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n+\t\t\t(const_int 0)))\n+\t      (const_string \"imov\")\n+\t    (and (eq_attr \"alternative\" \"1,2\")\n \t\t (match_operand:HI 1 \"aligned_operand\" \"\"))\n \t      (const_string \"imov\")\n \t    (and (ne (symbol_ref \"TARGET_MOVX\")\n \t\t     (const_int 0))\n-\t\t (eq_attr \"alternative\" \"1\"))\n+\t\t (eq_attr \"alternative\" \"0,2\"))\n \t      (const_string \"imovx\")\n \t   ]\n \t   (const_string \"imov\")))\n     (set (attr \"length_prefix\")\n       (cond [(eq_attr \"type\" \"imovx\")\n \t       (const_string \"0\")\n-\t     (and (eq_attr \"alternative\" \"0,1\")\n-\t\t  (and (match_operand:HI 1 \"aligned_operand\" \"\")\n-\t\t       (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n-\t\t\t   (const_int 0))))\n+\t     (and (eq_attr \"alternative\" \"1,2\")\n+\t\t  (match_operand:HI 1 \"aligned_operand\" \"\"))\n+\t       (const_string \"0\")\n+\t     (and (eq_attr \"alternative\" \"0\")\n+\t\t  (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n+\t\t      (const_int 0)))\n \t       (const_string \"0\")\n \t    ]\n \t    (const_string \"1\")))"}]}