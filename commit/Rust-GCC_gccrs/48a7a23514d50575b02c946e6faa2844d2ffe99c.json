{"sha": "48a7a23514d50575b02c946e6faa2844d2ffe99c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhhN2EyMzUxNGQ1MDU3NWIwMmM5NDZlNmZhYTI4NDRkMmZmZTk5Yw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-03-31T22:40:57Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-03-31T22:40:57Z"}, "message": "c-common.c (c_unsafe_for_reeval): Rename.\n\n\t* c-common.c (c_unsafe_for_reeval): Rename.\n\t* c-common.h (c_unsafe_for_reeval): Rename.\n\t* c-decl.c (finish_incomplete_decl): Rename.\n\t(c_init_decl_processing): Don't set langhook.\n\t* c-lang.c (LANG_HOOKS_FINISH_INCOMPLETE_DECL,\n\tLANG_HOOKS_UNSAFE_FOR_REEVAL): Redefine.\n\t* c-objc-common.c (c_objc_common_init): Don't set langhook.\n\t* c-tree.h (finish_incomplete_decl): Rename.\n\t* langhooks-def.h (lhd_unsafe_for_reeval): New.\n\t(LANG_HOOKS_FINISH_INCOMPLETE_DECL, LANG_HOOKS_UNSAFE_FOR_REEVAL): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.c (lhd_unsafe_For_reeval): New.\n\t* langhooks.h (struct langhooks): New hooks.\n\t* toplev.c (incomplete_decl_finalize_hook): Remove.\n\t(wrapup_global_declarations): Update.\n\t* tree.c (lang_unsafe_for_reeval): Remove.\n\t(unsafe_for_reeval): Update.\n\t* tree.h (lang_unsafe_for_reeval, incomplete_decl_finalize_hook):\n\tRemove.\nada:\n\t* gigi.h (finish_incomplete_decl): Rename.\n\t* misc.c (LANG_HOOKS_FINISH_INCOMPLETE_DECL): Redefine.\n\t* utils.c (gnat_init_decl_processing): Don't set hook.\n\t(finish_incomplete_decl): Rename.\ncp:\n\t* cp-lang.c (LANG_HOOKS_UNSAFE_FOR_REEVAL): Redefine.\n\t* lex.c (cxx_init): Don't set hook.\nobjc:\n\t* objc-lang.c (LANG_HOOKS_FINISH_INCOMPLETE_DECL,\n\tLANG_HOOKS_UNSAFE_FOR_REEVAL): Redefine.\n\nFrom-SVN: r51673", "tree": {"sha": "600c929066a396a657e416e8ec38992c5fcf2367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/600c929066a396a657e416e8ec38992c5fcf2367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48a7a23514d50575b02c946e6faa2844d2ffe99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a7a23514d50575b02c946e6faa2844d2ffe99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a7a23514d50575b02c946e6faa2844d2ffe99c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a7a23514d50575b02c946e6faa2844d2ffe99c/comments", "author": null, "committer": null, "parents": [{"sha": "7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb32822701d0ce49aae361f576c9c9dc31bb2f3"}], "stats": {"total": 134, "additions": 85, "deletions": 49}, "files": [{"sha": "9f4d8d939c99c266327f5775593af8acc7035fde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -1,3 +1,28 @@\n+2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (c_unsafe_for_reeval): Rename.\n+\t* c-common.h (c_unsafe_for_reeval): Rename.\n+\t* c-decl.c (finish_incomplete_decl): Rename.\n+\t(c_init_decl_processing): Don't set langhook.\n+\t* c-lang.c (LANG_HOOKS_FINISH_INCOMPLETE_DECL,\n+\tLANG_HOOKS_UNSAFE_FOR_REEVAL): Redefine.\n+\t* c-objc-common.c (c_objc_common_init): Don't set langhook.\n+\t* c-tree.h (finish_incomplete_decl): Rename.\n+\t* langhooks-def.h (lhd_unsafe_for_reeval): New.\n+\t(LANG_HOOKS_FINISH_INCOMPLETE_DECL, LANG_HOOKS_UNSAFE_FOR_REEVAL): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.c (lhd_unsafe_For_reeval): New.\n+\t* langhooks.h (struct langhooks): New hooks.\n+\t* toplev.c (incomplete_decl_finalize_hook): Remove.\n+\t(wrapup_global_declarations): Update.\n+\t* tree.c (lang_unsafe_for_reeval): Remove.\n+\t(unsafe_for_reeval): Update.\n+\t* tree.h (lang_unsafe_for_reeval, incomplete_decl_finalize_hook):\n+\tRemove.\n+objc:\n+\t* objc-lang.c (LANG_HOOKS_FINISH_INCOMPLETE_DECL,\n+\tLANG_HOOKS_UNSAFE_FOR_REEVAL): Redefine.\n+\n 2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* diagnostic.c (print_error_function): Remove."}, {"sha": "062c7e6041130dae4390e6581bfe6deb55b81350", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -1,3 +1,10 @@\n+2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gigi.h (finish_incomplete_decl): Rename.\n+\t* misc.c (LANG_HOOKS_FINISH_INCOMPLETE_DECL): Redefine.\n+\t* utils.c (gnat_init_decl_processing): Don't set hook.\n+\t(finish_incomplete_decl): Rename.\n+\n 2002-03-29  Andreas Schwab  <schwab@suse.de>\n \n \t* Makefile.in: Pass VPATH=$(fsrcdir) when calling make in rts"}, {"sha": "de05d4eea76a837407746a9001237bf5d9c35bad", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -448,7 +448,7 @@ extern void incomplete_type_error\tPARAMS ((tree, tree));\n    compile_file in toplev.c makes an indirect call through the function pointer\n    incomplete_decl_finalize_hook which is initialized to this routine in\n    init_decl_processing.  */\n-extern void finish_incomplete_decl\tPARAMS ((tree));\n+extern void gnat_finish_incomplete_decl\tPARAMS ((tree));\n \n /* Create an expression whose value is that of EXPR,\n    converted to type TYPE.  The TREE_TYPE of the value"}, {"sha": "8edbba4c5173559b25f2096facc0e4e7e2beb8e6", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -108,6 +108,8 @@ static rtx gnat_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode,\n #define LANG_HOOKS_MARK_TREE\t\tgnat_mark_tree\n #undef LANG_HOOKS_HONOR_READONLY\n #define LANG_HOOKS_HONOR_READONLY\t1\n+#undef LANG_HOOKS_FINISH_INCOMPLETE_DECL\n+#define LANG_HOOKS_FINISH_INCOMPLETE_DECL gnat_finish_incomplete_decl\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET\tgnat_get_alias_set\n #undef LANG_HOOKS_EXPAND_EXPR"}, {"sha": "6d8f637bf45d3d787869bc22d40d50fa4546942b", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -481,12 +481,6 @@ gnat_init_decl_processing ()\n {\n   lineno = 0;\n \n-  /* incomplete_decl_finalize_hook is defined in toplev.c. It needs to be set\n-     by each front end to the appropriate routine that handles incomplete \n-     VAR_DECL nodes. This routine will be invoked by compile_file when a  \n-     VAR_DECL node of DECL_SIZE zero is encountered.  */\n-  incomplete_decl_finalize_hook = finish_incomplete_decl;\n-\n   /* Make the binding_level structure for global names.  */\n   current_function_decl = 0;\n   current_binding_level = 0;\n@@ -709,7 +703,7 @@ incomplete_type_error (dont_care_1, dont_care_2)\n    init_decl_processing.  */\n \n void\n-finish_incomplete_decl (dont_care)\n+gnat_finish_incomplete_decl (dont_care)\n      tree dont_care ATTRIBUTE_UNUSED;\n {\n   gigi_abort (405);"}, {"sha": "a3fa01737269135107998fe89b4fb0e0a9e9ecde", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -2323,7 +2323,6 @@ c_apply_type_quals_to_decl (type_quals, decl)\n     }\n }\n \n-\n /* Return the typed-based alias set for T, which may be an expression\n    or a type.  Return -1 if we don't do anything special.  */\n \n@@ -3709,7 +3708,7 @@ c_safe_from_p (target, exp)\n /* Hook used by unsafe_for_reeval to handle language-specific tree codes.  */\n \n int\n-c_unsafe_for_reeval (exp)\n+c_common_unsafe_for_reeval (exp)\n      tree exp;\n {\n   /* Statement expressions may not be reevaluated, likewise compound"}, {"sha": "263b227f55114dc76aa9a01438ae5df951e1825c", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -853,7 +853,7 @@ extern int c_safe_from_p                        PARAMS ((rtx, tree));\n \n extern int c_staticp                            PARAMS ((tree));\n \n-extern int c_unsafe_for_reeval\t\t\tPARAMS ((tree));\n+extern int c_common_unsafe_for_reeval\t\tPARAMS ((tree));\n \n /* Information recorded about each file examined during compilation.  */\n "}, {"sha": "d7e70a4634c6b4d98be53d2daafa9caaa3fc8b37", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -734,7 +734,7 @@ c_print_identifier (file, node, indent)\n    for a top-level tentative array defn that wasn't complete before.  */\n \n void\n-finish_incomplete_decl (decl)\n+c_finish_incomplete_decl (decl)\n      tree decl;\n {\n   if (TREE_CODE (decl) == VAR_DECL)\n@@ -2985,8 +2985,6 @@ c_init_decl_processing ()\n   make_fname_decl = c_make_fname_decl;\n   start_fname_decls ();\n \n-  incomplete_decl_finalize_hook = finish_incomplete_decl;\n-\n   /* Record our roots.  */\n \n   ggc_add_tree_root (c_global_trees, CTI_MAX);"}, {"sha": "31763587f45d86945a9e03787d6722325258ac9e", "filename": "gcc/c-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -58,6 +58,10 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES\n #define LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES c_insert_default_attributes\n+#undef LANG_HOOKS_FINISH_INCOMPLETE_DECL\n+#define LANG_HOOKS_FINISH_INCOMPLETE_DECL c_finish_incomplete_decl\n+#undef LANG_HOOKS_UNSAFE_FOR_REEVAL\n+#define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n #undef LANG_HOOKS_PRINT_IDENTIFIER"}, {"sha": "5207abda080dda4cdd7fec990e5c191d971f787e", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -220,8 +220,6 @@ c_objc_common_init (filename)\n   if (filename == NULL)\n     return NULL;\n \n-  lang_unsafe_for_reeval = c_unsafe_for_reeval;\n-\n   save_lang_status = &push_c_function_context;\n   restore_lang_status = &pop_c_function_context;\n   mark_lang_status = &mark_c_function_context;"}, {"sha": "12ae456adb8c2abaf51be5023b82e79127c092b6", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -383,7 +383,7 @@ extern int system_header_p;\n extern int mesg_implicit_function_declaration;\n \n /* In c-decl.c */\n-extern void finish_incomplete_decl PARAMS ((tree));\n+extern void c_finish_incomplete_decl PARAMS ((tree));\n \n extern tree static_ctors;\n extern tree static_dtors;"}, {"sha": "3f81db3df6eab67cbdd0bd946665c76baa7fc509", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -1,3 +1,8 @@\n+2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_UNSAFE_FOR_REEVAL): Redefine.\n+\t* lex.c (cxx_init): Don't set hook.\n+\n 2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* Make-lang.in (error.o): Update."}, {"sha": "28d3add1c3e4bd2ec53f90e7cde2b96b6a97ff10", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -65,6 +65,8 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n #define LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES cxx_insert_default_attributes\n #undef LANG_HOOKS_MARK_TREE\n #define LANG_HOOKS_MARK_TREE cxx_mark_tree\n+#undef LANG_HOOKS_UNSAFE_FOR_REEVAL\n+#define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_PRINT_STATISTICS\n #define LANG_HOOKS_PRINT_STATISTICS cxx_print_statistics\n #undef LANG_HOOKS_PRINT_XNODE"}, {"sha": "2f6148711a46792fcd998579f5d2c8c15665d78e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -648,9 +648,6 @@ cxx_init (filename)\n   init_spew ();\n   init_tree ();\n   init_cp_semantics ();\n-\n-  lang_unsafe_for_reeval = c_unsafe_for_reeval;\n-\n   init_operators ();\n   init_method ();\n   init_error ();"}, {"sha": "49f80c0224e0fcf676eb00de6b2c9c64b6a6c729", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -47,6 +47,7 @@ extern tree lhd_return_tree PARAMS ((tree));\n extern tree lhd_return_null_tree PARAMS ((tree));\n extern int lhd_safe_from_p PARAMS ((rtx, tree));\n extern int lhd_staticp PARAMS ((tree));\n+extern int lhd_unsafe_for_reeval PARAMS ((tree));\n extern void lhd_clear_binding_stack PARAMS ((void));\n extern void lhd_print_tree_nothing PARAMS ((FILE *, tree, int));\n extern const char *lhd_decl_printable_name PARAMS ((tree, int));\n@@ -85,6 +86,8 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n #define LANG_HOOKS_EXPAND_EXPR\t\tlhd_expand_expr\n #define LANG_HOOKS_SAFE_FROM_P\t\tlhd_safe_from_p\n+#define LANG_HOOKS_FINISH_INCOMPLETE_DECL lhd_do_nothing_t\n+#define LANG_HOOKS_UNSAFE_FOR_REEVAL\tlhd_unsafe_for_reeval\n #define LANG_HOOKS_STATICP\t\tlhd_staticp\n #define LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES lhd_do_nothing_t\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL lhd_do_nothing_t\n@@ -150,8 +153,8 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN \\\n }\n \n-/* Types hooks.  No default for LANG_HOOKS_TYPE_FOR_MODE or\n-   LANG_HOOKS_TYPE_FOR_SIZE.  */\n+/* Types hooks.  There are no reasonable defaults for most of them,\n+   so we create a compile-time error instead.  */\n #define LANG_HOOKS_MAKE_TYPE make_node\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n@@ -195,6 +198,8 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_EXPAND_EXPR, \\\n   LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES, \\\n   LANG_HOOKS_SAFE_FROM_P, \\\n+  LANG_HOOKS_FINISH_INCOMPLETE_DECL, \\\n+  LANG_HOOKS_UNSAFE_FOR_REEVAL, \\\n   LANG_HOOKS_STATICP, \\\n   LANG_HOOKS_DUP_LANG_SPECIFIC_DECL, \\\n   LANG_HOOKS_UNSAVE_EXPR_NOW, \\"}, {"sha": "92877117e5db8ca6b49d95c3a91c832f100344a7", "filename": "gcc/langhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -95,6 +95,15 @@ lhd_safe_from_p (x, exp)\n   return 1;\n }\n \n+/* Called from unsafe_for_reeval.  */\n+\n+int\n+lhd_unsafe_for_reeval (t)\n+     tree t ATTRIBUTE_UNUSED;\n+{\n+  return -1;\n+}\n+\n /* Called from staticp.  */\n \n int"}, {"sha": "8a0f4b54e9e5e4ba388eaf7da7252ae96faa97b1", "filename": "gcc/langhooks.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -197,6 +197,15 @@ struct lang_hooks\n      parameter.  */\n   int (*safe_from_p) PARAMS ((rtx, tree));\n \n+  /* Function to finish handling an incomplete decl at the end of\n+     compilation.  Default hook is does nothing.  */\n+  void (*finish_incomplete_decl) PARAMS ((tree));\n+\n+  /* Function used by unsafe_for_reeval.  A non-negative number is\n+     returned directly from unsafe_for_reeval, a negative number falls\n+     through.  The default hook returns a negative number.  */\n+  int (*unsafe_for_reeval) PARAMS ((tree));\n+\n   /* Hook called by staticp for language-specific tree codes.  */\n   int (*staticp) PARAMS ((tree));\n "}, {"sha": "b493cfcc0bf72f920e9feed37106cf23d7e161e8", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -52,6 +52,10 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n #undef LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES\n #define LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES c_insert_default_attributes\n+#undef LANG_HOOKS_FINISH_INCOMPLETE_DECL\n+#define LANG_HOOKS_FINISH_INCOMPLETE_DECL c_finish_incomplete_decl\n+#undef LANG_HOOKS_UNSAFE_FOR_REEVAL\n+#define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL"}, {"sha": "24009593366b30c164b5e1002ca9d37c641ac55b", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -349,11 +349,6 @@ tree current_function_decl;\n    if none.  */\n tree current_function_func_begin_label;\n \n-/* Pointer to function to finish handling an incomplete decl at the\n-   end of compilation.  */\n-\n-void (*incomplete_decl_finalize_hook) PARAMS ((tree)) = 0;\n-\n /* Nonzero if doing dwarf2 duplicate elimination.  */\n \n int flag_eliminate_dwarf2_dups = 0;\n@@ -1822,9 +1817,8 @@ wrapup_global_declarations (vec, len)\n       /* We're not deferring this any longer.  */\n       DECL_DEFER_OUTPUT (decl) = 0;\n \n-      if (TREE_CODE (decl) == VAR_DECL && DECL_SIZE (decl) == 0\n-\t  && incomplete_decl_finalize_hook != 0)\n-\t(*incomplete_decl_finalize_hook) (decl);\n+      if (TREE_CODE (decl) == VAR_DECL && DECL_SIZE (decl) == 0)\n+\t(*lang_hooks.finish_incomplete_decl) (decl);\n     }\n \n   /* Now emit any global variables or functions that we have been"}, {"sha": "47408914f3209455754e05f93077b333da53405e", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -133,10 +133,6 @@ static int type_hash_marked_p PARAMS ((const void *));\n static void type_hash_mark PARAMS ((const void *));\n static int mark_tree_hashtable_entry PARAMS((void **, void *));\n \n-/* If non-null, these are language-specific helper functions for\n-   unsafe_for_reeval.  Return negative to not handle some tree.  */\n-int (*lang_unsafe_for_reeval) PARAMS ((tree));\n-\n /* Set the DECL_ASSEMBLER_NAME for a node.  If it is the sort of thing\n    that the assembler should talk about, set DECL_ASSEMBLER_NAME to an\n    appropriate IDENTIFIER_NODE.  Otherwise, set it to the\n@@ -1688,12 +1684,9 @@ unsafe_for_reeval (expr)\n       break;\n \n     default:\n-      if (lang_unsafe_for_reeval != 0)\n-\t{\n-\t  tmp = (*lang_unsafe_for_reeval) (expr);\n-\t  if (tmp >= 0)\n-\t    return tmp;\n-\t}\n+      tmp = (*lang_hooks.unsafe_for_reeval) (expr);\n+      if (tmp >= 0)\n+\treturn tmp;\n       break;\n     }\n "}, {"sha": "e6f0377e2a83aadcd3c7a19440cc629a40c3196c", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a7a23514d50575b02c946e6faa2844d2ffe99c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=48a7a23514d50575b02c946e6faa2844d2ffe99c", "patch": "@@ -2553,10 +2553,6 @@ extern void unsave_expr_1               PARAMS ((tree));\n    return 2 if it is completely unsafe.  */\n extern int unsafe_for_reeval\t\tPARAMS ((tree));\n \n-/* If non-null, these are language-specific helper functions for\n-   unsafe_for_reeval.  Return negative to not handle some tree.  */\n-extern int (*lang_unsafe_for_reeval)\tPARAMS ((tree));\n-\n /* Return 1 if EXP contains a PLACEHOLDER_EXPR; i.e., if it represents a size\n    or offset that depends on a field within a record.\n \n@@ -2691,11 +2687,6 @@ extern tree current_function_func_begin_label;\n \n extern int all_types_permanent;\n \n-/* Pointer to function to finish handling an incomplete decl at the\n-   end of compilation.  */\n-\n-extern void (*incomplete_decl_finalize_hook)\tPARAMS ((tree));\n-\n /* Declare a predefined function.  Return the declaration.  This function is\n    provided by each language frontend.  */\n extern tree builtin_function\t\t\tPARAMS ((const char *, tree, int,"}]}