{"sha": "538a7cd055a77acd6301ece4d752da6288a36ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4YTdjZDA1NWE3N2FjZDYzMDFlY2U0ZDc1MmRhNjI4OGEzNmZmYQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-05-27T17:06:40Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-05-27T17:06:40Z"}, "message": "stl_tree.h (_Rb_tree_impl(_Node_allocator&&)): New.\n\n2018-05-27  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_tree.h (_Rb_tree_impl(_Node_allocator&&)): New.\n\t(_Rb_tree(const allocator_type&)): Use latter.\n\t* include/bits/stl_map.h (map(const allocator_type&)): Likewise.\n\t(map(initializer_list<value_type>, const allocator_type&)): Likewise.\n\t(map(_InputIterator, _InputIterator, const allocator_type&)): Likewise.\n\t* include/bits/stl_multimap.h\n\t(multimap(const allocator_type&)): Likewise.\n\t(multimap(initializer_list<value_type>, const allocator_type&)):\n\tLikewise.\n\t(multimap(_InputIterator, _InputIterator, const allocator_type&)):\n\tLikewise.\n\t* include/bits/stl_set.h (set(const allocator_type&)): Likewise.\n\t(set(initializer_list<value_type>, const allocator_type&)): Likewise.\n\t(set(_InputIterator, _InputIterator, const allocator_type&)): Likewise.\n\t* include/bits/stl_multiset.h\n\t(multiset(const allocator_type&)): Likewise.\n\t(multiset(initializer_list<value_type>, const allocator_type&)):\n\tLikewise.\n\t(multiset(_InputIterator, _InputIterator, const allocator_type&)):\n\tLikewise.\n\nFrom-SVN: r260806", "tree": {"sha": "9a059cdb899709f31ee22973af21ab94aa35ab6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a059cdb899709f31ee22973af21ab94aa35ab6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/538a7cd055a77acd6301ece4d752da6288a36ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538a7cd055a77acd6301ece4d752da6288a36ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/538a7cd055a77acd6301ece4d752da6288a36ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538a7cd055a77acd6301ece4d752da6288a36ffa/comments", "author": null, "committer": null, "parents": [{"sha": "8889fbe5424f437f504901a659ebcc772066a478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8889fbe5424f437f504901a659ebcc772066a478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8889fbe5424f437f504901a659ebcc772066a478"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "3068a08b3ec935f6abbfa8d7054f98f4831ff41d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=538a7cd055a77acd6301ece4d752da6288a36ffa", "patch": "@@ -1,3 +1,26 @@\n+2018-05-27  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_tree.h (_Rb_tree_impl(_Node_allocator&&)): New.\n+\t(_Rb_tree(const allocator_type&)): Use latter.\n+\t* include/bits/stl_map.h (map(const allocator_type&)): Likewise.\n+\t(map(initializer_list<value_type>, const allocator_type&)): Likewise.\n+\t(map(_InputIterator, _InputIterator, const allocator_type&)): Likewise.\n+\t* include/bits/stl_multimap.h\n+\t(multimap(const allocator_type&)): Likewise.\n+\t(multimap(initializer_list<value_type>, const allocator_type&)):\n+\tLikewise.\n+\t(multimap(_InputIterator, _InputIterator, const allocator_type&)):\n+\tLikewise.\n+\t* include/bits/stl_set.h (set(const allocator_type&)): Likewise.\n+\t(set(initializer_list<value_type>, const allocator_type&)): Likewise.\n+\t(set(_InputIterator, _InputIterator, const allocator_type&)): Likewise.\n+\t* include/bits/stl_multiset.h\n+\t(multiset(const allocator_type&)): Likewise.\n+\t(multiset(initializer_list<value_type>, const allocator_type&)):\n+\tLikewise.\n+\t(multiset(_InputIterator, _InputIterator, const allocator_type&)):\n+\tLikewise.\n+\n 2018-05-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/85768"}, {"sha": "b81a2c4b7fc5d7985206dfd4fc6bcd49c7a5d310", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=538a7cd055a77acd6301ece4d752da6288a36ffa", "patch": "@@ -232,7 +232,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Allocator-extended default constructor.\n       explicit\n       map(const allocator_type& __a)\n-      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }\n+      : _M_t(_Pair_alloc_type(__a)) { }\n \n       /// Allocator-extended copy constructor.\n       map(const map& __m, const allocator_type& __a)\n@@ -246,14 +246,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Allocator-extended initialier-list constructor.\n       map(initializer_list<value_type> __l, const allocator_type& __a)\n-      : _M_t(_Compare(), _Pair_alloc_type(__a))\n+      : _M_t(_Pair_alloc_type(__a))\n       { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n \n       /// Allocator-extended range constructor.\n       template<typename _InputIterator>\n \tmap(_InputIterator __first, _InputIterator __last,\n \t    const allocator_type& __a)\n-\t: _M_t(_Compare(), _Pair_alloc_type(__a))\n+\t: _M_t(_Pair_alloc_type(__a))\n \t{ _M_t._M_insert_unique(__first, __last); }\n #endif\n "}, {"sha": "23332ee53f85ce07ed8189f24ecfa26aefb510e5", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=538a7cd055a77acd6301ece4d752da6288a36ffa", "patch": "@@ -229,7 +229,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Allocator-extended default constructor.\n       explicit\n       multimap(const allocator_type& __a)\n-      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }\n+      : _M_t(_Pair_alloc_type(__a)) { }\n \n       /// Allocator-extended copy constructor.\n       multimap(const multimap& __m, const allocator_type& __a)\n@@ -243,14 +243,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Allocator-extended initialier-list constructor.\n       multimap(initializer_list<value_type> __l, const allocator_type& __a)\n-      : _M_t(_Compare(), _Pair_alloc_type(__a))\n+      : _M_t(_Pair_alloc_type(__a))\n       { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n \n       /// Allocator-extended range constructor.\n       template<typename _InputIterator>\n \tmultimap(_InputIterator __first, _InputIterator __last,\n \t\t const allocator_type& __a)\n-\t: _M_t(_Compare(), _Pair_alloc_type(__a))\n+\t: _M_t(_Pair_alloc_type(__a))\n \t{ _M_t._M_insert_equal(__first, __last); }\n #endif\n "}, {"sha": "829bc96e8b22c95c8aa8e115b120ef39308b3cd0", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=538a7cd055a77acd6301ece4d752da6288a36ffa", "patch": "@@ -245,7 +245,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Allocator-extended default constructor.\n       explicit\n       multiset(const allocator_type& __a)\n-      : _M_t(_Compare(), _Key_alloc_type(__a)) { }\n+      : _M_t(_Key_alloc_type(__a)) { }\n \n       /// Allocator-extended copy constructor.\n       multiset(const multiset& __m, const allocator_type& __a)\n@@ -259,14 +259,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Allocator-extended initialier-list constructor.\n       multiset(initializer_list<value_type> __l, const allocator_type& __a)\n-      : _M_t(_Compare(), _Key_alloc_type(__a))\n+      : _M_t(_Key_alloc_type(__a))\n       { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n \n       /// Allocator-extended range constructor.\n       template<typename _InputIterator>\n \tmultiset(_InputIterator __first, _InputIterator __last,\n \t\t const allocator_type& __a)\n-\t: _M_t(_Compare(), _Key_alloc_type(__a))\n+\t: _M_t(_Key_alloc_type(__a))\n \t{ _M_t._M_insert_equal(__first, __last); }\n \n       /**"}, {"sha": "4192526502568d63f10bf440890070a399f88e2d", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=538a7cd055a77acd6301ece4d752da6288a36ffa", "patch": "@@ -249,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Allocator-extended default constructor.\n       explicit\n       set(const allocator_type& __a)\n-      : _M_t(_Compare(), _Key_alloc_type(__a)) { }\n+      : _M_t(_Key_alloc_type(__a)) { }\n \n       /// Allocator-extended copy constructor.\n       set(const set& __x, const allocator_type& __a)\n@@ -263,14 +263,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Allocator-extended initialier-list constructor.\n       set(initializer_list<value_type> __l, const allocator_type& __a)\n-      : _M_t(_Compare(), _Key_alloc_type(__a))\n+      : _M_t(_Key_alloc_type(__a))\n       { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n \n       /// Allocator-extended range constructor.\n       template<typename _InputIterator>\n \tset(_InputIterator __first, _InputIterator __last,\n \t    const allocator_type& __a)\n-\t: _M_t(_Compare(), _Key_alloc_type(__a))\n+\t: _M_t(_Key_alloc_type(__a))\n \t{ _M_t._M_insert_unique(__first, __last); }\n \n       /**"}, {"sha": "2403eba8eb3d6417025f933bce03df5b9b3e8557", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538a7cd055a77acd6301ece4d752da6288a36ffa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=538a7cd055a77acd6301ece4d752da6288a36ffa", "patch": "@@ -715,6 +715,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n \t  _Rb_tree_impl(_Rb_tree_impl&&) = default;\n \n+\t  explicit\n+\t  _Rb_tree_impl(_Node_allocator&& __a)\n+\t  : _Node_allocator(std::move(__a))\n+\t  { }\n+\n \t  _Rb_tree_impl(_Rb_tree_impl&& __x, _Node_allocator&& __a)\n \t  : _Node_allocator(std::move(__a)),\n \t    _Base_key_compare(std::move(__x)),\n@@ -948,7 +953,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n       _Rb_tree(const allocator_type& __a)\n-      : _M_impl(_Compare(), _Node_allocator(__a))\n+      : _M_impl(_Node_allocator(__a))\n       { }\n \n       _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)"}]}