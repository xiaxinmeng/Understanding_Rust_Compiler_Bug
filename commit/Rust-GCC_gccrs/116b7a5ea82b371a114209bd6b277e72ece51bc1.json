{"sha": "116b7a5ea82b371a114209bd6b277e72ece51bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE2YjdhNWVhODJiMzcxYTExNDIwOWJkNmIyNzdlNzJlY2U1MWJjMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-12T02:57:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-12T02:57:02Z"}, "message": "alpha.c (ALPHA_BUILTIN_THREAD_POINTER): New.\n\n        * config/alpha/alpha.c (ALPHA_BUILTIN_THREAD_POINTER): New.\n        (ALPHA_BUILTIN_SET_THREAD_POINTER): New.\n        (code_for_builtns): Update.\n        (alpha_init_builtins): Add __builtin_thread_pointer and\n        __builtin_set_thread_pointer.\n        (alpha_expand_builtin): Handle void builtins.\n        * doc/extend.texi (Alpha Built-in Functions): Update.\n\nFrom-SVN: r54543", "tree": {"sha": "dfccc2fd109d0cf8d447280a8c2cd8a1a41a2904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfccc2fd109d0cf8d447280a8c2cd8a1a41a2904"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/116b7a5ea82b371a114209bd6b277e72ece51bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116b7a5ea82b371a114209bd6b277e72ece51bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116b7a5ea82b371a114209bd6b277e72ece51bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116b7a5ea82b371a114209bd6b277e72ece51bc1/comments", "author": null, "committer": null, "parents": [{"sha": "0cec6af13cc6b2f44b21841c7ffda68b9d043318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cec6af13cc6b2f44b21841c7ffda68b9d043318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cec6af13cc6b2f44b21841c7ffda68b9d043318"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "01d3cc680a69582808b5d498da2ba6e166a83b9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116b7a5ea82b371a114209bd6b277e72ece51bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116b7a5ea82b371a114209bd6b277e72ece51bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=116b7a5ea82b371a114209bd6b277e72ece51bc1", "patch": "@@ -1,3 +1,13 @@\n+2002-06-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (ALPHA_BUILTIN_THREAD_POINTER): New.\n+\t(ALPHA_BUILTIN_SET_THREAD_POINTER): New.\n+\t(code_for_builtns): Update.\n+\t(alpha_init_builtins): Add __builtin_thread_pointer and\n+\t__builtin_set_thread_pointer.\n+\t(alpha_expand_builtin): Handle void builtins.\n+\t* doc/extend.texi (Alpha Built-in Functions): Update.\n+\n 2002-06-11  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/6997"}, {"sha": "24e8c5c5eda762ba755dee2c949ae130b6043df2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116b7a5ea82b371a114209bd6b277e72ece51bc1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116b7a5ea82b371a114209bd6b277e72ece51bc1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=116b7a5ea82b371a114209bd6b277e72ece51bc1", "patch": "@@ -6345,6 +6345,8 @@ enum alpha_builtin\n   ALPHA_BUILTIN_AMASK,\n   ALPHA_BUILTIN_IMPLVER,\n   ALPHA_BUILTIN_RPCC,\n+  ALPHA_BUILTIN_THREAD_POINTER,\n+  ALPHA_BUILTIN_SET_THREAD_POINTER,\n \n   /* TARGET_MAX */\n   ALPHA_BUILTIN_MINUB8,\n@@ -6398,6 +6400,8 @@ static unsigned int const code_for_builtin[ALPHA_BUILTIN_max] = {\n   CODE_FOR_builtin_amask,\n   CODE_FOR_builtin_implver,\n   CODE_FOR_builtin_rpcc,\n+  CODE_FOR_load_tp,\n+  CODE_FOR_set_tp,\n \n   /* TARGET_MAX */\n   CODE_FOR_builtin_minub8,\n@@ -6515,6 +6519,16 @@ alpha_init_builtins ()\n   for (i = 0; i < ARRAY_SIZE (two_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n       builtin_function (p->name, ftype, p->code, BUILT_IN_MD, NULL);\n+\n+  ftype = build_function_type (ptr_type_node, void_list_node);\n+  builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t    ALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD, NULL);\n+\n+  ftype = build_function_type (void_type_node, tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t  ptr_type_node,\n+\t\t\t\t\t\t\t  void_list_node));\n+  builtin_function (\"__builtin_set_thread_pointer\", ftype,\n+\t\t    ALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD, NULL);\n }\n \n /* Expand an expression EXP that calls a built-in function,\n@@ -6539,14 +6553,16 @@ alpha_expand_builtin (exp, target, subtarget, mode, ignore)\n   enum insn_code icode;\n   rtx op[MAX_ARGS], pat;\n   int arity;\n-  enum machine_mode tmode;\n+  bool nonvoid;\n \n   if (fcode >= ALPHA_BUILTIN_max)\n     internal_error (\"bad builtin fcode\");\n   icode = code_for_builtin[fcode];\n   if (icode == 0)\n     internal_error (\"bad builtin fcode\");\n \n+  nonvoid = TREE_TYPE (TREE_TYPE (fndecl)) != void_type_node;\n+\n   for (arglist = TREE_OPERAND (exp, 1), arity = 0;\n        arglist;\n        arglist = TREE_CHAIN (arglist), arity++)\n@@ -6559,26 +6575,33 @@ alpha_expand_builtin (exp, target, subtarget, mode, ignore)\n       if (arity > MAX_ARGS)\n \treturn NULL_RTX;\n \n-      op[arity] = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n+      insn_op = &insn_data[icode].operand[arity + nonvoid];\n+\n+      op[arity] = expand_expr (arg, NULL_RTX, insn_op->mode, 0);\n \n-      insn_op = &insn_data[icode].operand[arity + 1];\n       if (!(*insn_op->predicate) (op[arity], insn_op->mode))\n \top[arity] = copy_to_mode_reg (insn_op->mode, op[arity]);\n     }\n \n-  tmode = insn_data[icode].operand[0].mode;\n-  if (!target\n-      || GET_MODE (target) != tmode\n-      || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n-    target = gen_reg_rtx (tmode);\n+  if (nonvoid)\n+    {\n+      enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+      if (!target\n+\t  || GET_MODE (target) != tmode\n+\t  || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+    }\n \n   switch (arity)\n     {\n     case 0:\n       pat = GEN_FCN (icode) (target);\n       break;\n     case 1:\n-      pat = GEN_FCN (icode) (target, op[0]);\n+      if (nonvoid)\n+        pat = GEN_FCN (icode) (target, op[0]);\n+      else\n+\tpat = GEN_FCN (icode) (op[0]);\n       break;\n     case 2:\n       pat = GEN_FCN (icode) (target, op[0], op[1]);\n@@ -6590,7 +6613,10 @@ alpha_expand_builtin (exp, target, subtarget, mode, ignore)\n     return NULL_RTX;\n   emit_insn (pat);\n \n-  return target;\n+  if (nonvoid)\n+    return target;\n+  else\n+    return const0_rtx;\n }\n \f\n /* This page contains routines that are used to determine what the function"}, {"sha": "68d231db05a2fe4503313690e06396ec6ee62d79", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116b7a5ea82b371a114209bd6b277e72ece51bc1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116b7a5ea82b371a114209bd6b277e72ece51bc1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=116b7a5ea82b371a114209bd6b277e72ece51bc1", "patch": "@@ -4834,6 +4834,16 @@ long __builtin_alpha_ctlz (long)\n long __builtin_alpha_ctpop (long)\n @end example\n \n+The following builtins are available on systems that use the OSF/1\n+PALcode.  Normally they invoke the @code{rduniq} and @code{wruniq}\n+PAL calls, but when invoked with @option{-mtls-kernel}, they invoke\n+@code{rdval} and @code{wrval}.\n+\n+@example\n+void *__builtin_thread_pointer (void)\n+void __builtin_set_thread_pointer (void *)\n+@end example\n+\n @node X86 Built-in Functions\n @subsection X86 Built-in Functions\n "}]}