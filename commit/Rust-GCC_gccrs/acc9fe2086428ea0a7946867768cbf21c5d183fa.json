{"sha": "acc9fe2086428ea0a7946867768cbf21c5d183fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjOWZlMjA4NjQyOGVhMGE3OTQ2ODY3NzY4Y2JmMjFjNWQxODNmYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-23T02:30:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-23T02:30:56Z"}, "message": "(get_vbase): New routine to switch hierarchies from the CLASSTYPE_VBASECLASSES to the normal one.\n\n(get_vbase): New routine to switch hierarchies from the CLASSTYPE_VBASECLASSES\nto the normal one.\n(expand_indirect_vtbls_init): Use get_vbase to figure out how we want to\nconvert to a vbase pointer.\n\nFrom-SVN: r10040", "tree": {"sha": "5baa1f07fdee2a21a6d56a343c64fd8ed07e743d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5baa1f07fdee2a21a6d56a343c64fd8ed07e743d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc9fe2086428ea0a7946867768cbf21c5d183fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc9fe2086428ea0a7946867768cbf21c5d183fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc9fe2086428ea0a7946867768cbf21c5d183fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc9fe2086428ea0a7946867768cbf21c5d183fa/comments", "author": null, "committer": null, "parents": [{"sha": "ff86beb76a7c3f0f7ad2623d48b952e82f3efebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff86beb76a7c3f0f7ad2623d48b952e82f3efebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff86beb76a7c3f0f7ad2623d48b952e82f3efebe"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "e61f2f2a022faff3e366c724c523ff83d6204777", "filename": "gcc/cp/search.c", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc9fe2086428ea0a7946867768cbf21c5d183fa/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc9fe2086428ea0a7946867768cbf21c5d183fa/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=acc9fe2086428ea0a7946867768cbf21c5d183fa", "patch": "@@ -1,6 +1,6 @@\n /* Breadth-first and depth-first routines for\n    searching multiple-inheritance lattice for GNU C++.\n-   Copyright (C) 1987, 1989, 1992, 1993, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -381,6 +381,53 @@ pop_memoized_context (use_old)\n     type_stack = (struct type_level *)type_stack->base.prev;\n }\n \f\n+/* Get a virtual binfo that is found inside BINFO's hierarchy that is\n+   the same type as the type given in PARENT.  To be optimal, we want\n+   the first one that is found by going through the least number of\n+   virtual bases.  DEPTH should be NULL_PTR.  */\n+static tree\n+get_vbase (parent, binfo, depth)\n+     tree parent, binfo;\n+     unsigned int *depth;\n+{\n+  tree binfos;\n+  int i, n_baselinks;\n+  tree rval = NULL_TREE;\n+\n+  if (depth == 0)\n+    {\n+      unsigned int d = (unsigned int)-1;\n+      return get_vbase (parent, binfo, &d);\n+    }\n+\n+  if (BINFO_TYPE (binfo) == parent && TREE_VIA_VIRTUAL (binfo))\n+    {\n+      *depth = 0;\n+      return binfo;\n+    }\n+\n+  *depth = *depth - 1;\n+\n+  binfos = BINFO_BASETYPES (binfo);\n+  n_baselinks = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n+\n+  /* Process base types.  */\n+  for (i = 0; i < n_baselinks; i++)\n+    {\n+      tree base_binfo = TREE_VEC_ELT (binfos, i);\n+      tree nrval;\n+\n+      if (*depth == 0)\n+\tbreak;\n+\n+      nrval = get_vbase (parent, base_binfo, depth);\n+      if (nrval)\n+\trval = nrval;\n+    }\n+  *depth = *depth+1;\n+  return rval;\n+}\n+\n /* This is the newer recursive depth first search routine. */\n #if 0\t\t\t\t/* unused */\n /* Return non-zero if PARENT is directly derived from TYPE.  By directly\n@@ -2783,6 +2830,11 @@ expand_indirect_vtbls_init (binfo, true_exp, decl_ptr, use_computed_offsets)\n \t    addr = (tree)CLASSTYPE_SEARCH_SLOT (BINFO_TYPE (vbases));\n \t  else\n \t    {\n+#if 1\n+\t      tree vb = get_vbase (TREE_TYPE (vbases), TYPE_BINFO (TREE_TYPE (vbase_decl)),\n+\t\t\t\t   NULL_PTR);\n+\t      addr = convert_pointer_to_real (vb, vbase_decl_ptr);\n+#else\n \t      tree vbinfo = get_binfo (TREE_TYPE (vbases),\n \t\t\t\t       TREE_TYPE (vbase_decl),\n \t\t\t\t       0);\n@@ -2805,6 +2857,7 @@ expand_indirect_vtbls_init (binfo, true_exp, decl_ptr, use_computed_offsets)\n \t\t  if (addr == error_mark_node)\n \t\t    continue;\n \t\t}\n+#endif\n \t    }\n \n \t  /* Do all vtables from this virtual base. */"}]}