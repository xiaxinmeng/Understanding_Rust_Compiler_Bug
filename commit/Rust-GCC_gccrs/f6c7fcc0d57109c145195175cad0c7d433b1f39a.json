{"sha": "f6c7fcc0d57109c145195175cad0c7d433b1f39a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZjN2ZjYzBkNTcxMDljMTQ1MTk1MTc1Y2FkMGM3ZDQzM2IxZjM5YQ==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2009-07-26T15:09:10Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2009-07-26T15:09:10Z"}, "message": "re PR bootstrap/40578 (FOPEN double defined used in ada/adaint.h:58)\n\n\tPR bootstrap/40578\n\t* adaint.h (FOPEN, STAT, FSTAT, LSTAT, STRUCT_STAT): Rename from these\n\t(GNAT_FOPEN, GNAT_STAT, GNAT_FSTAT, GNAT_LSTAT, GNAT_STRUCT_STAT): ...\n\tto these.\n\t(__gnat_stat): Adjust reference to STAT in prototype.\n\t* adaint.c (__gnat_try_lock, __gnat_fopen, __gnat_file_length,\n\t__gnat_named_file_length, __gnat_file_time_name, __gnat_file_time_fd,\n\t__gnat_get_libraries_from_registry, __gnat_stat, __gnat_file_exists,\n\t__gnat_is_regular_file, __gnat_is_directory, __gnat_is_readable_file,\n\t__gnat_is_writable_file, __gnat_is_executable_file,\n\t__gnat_set_writable, __gnat_set_executable, __gnat_set_non_writable,\n\t__gnat_set_readable, __gnat_set_non_readable, __gnat_is_symbolic_link,\n\t__gnat_copy_attribs): Adjust all references to the above.\n\t* cstreams.c (__gnat_is_regular_file_fd): Likewise.\n\nFrom-SVN: r150098", "tree": {"sha": "031a5480960c46b8ab269e374fa54532a3f89cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/031a5480960c46b8ab269e374fa54532a3f89cef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6c7fcc0d57109c145195175cad0c7d433b1f39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c7fcc0d57109c145195175cad0c7d433b1f39a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c7fcc0d57109c145195175cad0c7d433b1f39a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c7fcc0d57109c145195175cad0c7d433b1f39a/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2600c676cfe1b90c6536476c3dbf887953fcc50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2600c676cfe1b90c6536476c3dbf887953fcc50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2600c676cfe1b90c6536476c3dbf887953fcc50"}], "stats": {"total": 109, "additions": 63, "deletions": 46}, "files": [{"sha": "fba1a74a6c1a481690a5a46af5c40dac3f976e21", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c7fcc0d57109c145195175cad0c7d433b1f39a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c7fcc0d57109c145195175cad0c7d433b1f39a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f6c7fcc0d57109c145195175cad0c7d433b1f39a", "patch": "@@ -1,3 +1,20 @@\n+2009-07-16  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR bootstrap/40578\n+\t* adaint.h (FOPEN, STAT, FSTAT, LSTAT, STRUCT_STAT): Rename from these\n+\t(GNAT_FOPEN, GNAT_STAT, GNAT_FSTAT, GNAT_LSTAT, GNAT_STRUCT_STAT): ...\n+\tto these.\n+\t(__gnat_stat): Adjust reference to STAT in prototype.\n+\t* adaint.c (__gnat_try_lock, __gnat_fopen, __gnat_file_length,\n+\t__gnat_named_file_length, __gnat_file_time_name, __gnat_file_time_fd,\n+\t__gnat_get_libraries_from_registry, __gnat_stat, __gnat_file_exists,\n+\t__gnat_is_regular_file, __gnat_is_directory, __gnat_is_readable_file,\n+\t__gnat_is_writable_file, __gnat_is_executable_file,\n+\t__gnat_set_writable, __gnat_set_executable, __gnat_set_non_writable,\n+\t__gnat_set_readable, __gnat_set_non_readable, __gnat_is_symbolic_link,\n+\t__gnat_copy_attribs): Adjust all references to the above.\n+\t* cstreams.c (__gnat_is_regular_file_fd): Likewise.\n+\n 2009-07-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem.adb (Do_Unit_And_Dependents): Now that specs and bodies are not"}, {"sha": "19bbf7075eecfdc269ad0d1a210555d4d7ce19a1", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c7fcc0d57109c145195175cad0c7d433b1f39a/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c7fcc0d57109c145195175cad0c7d433b1f39a/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=f6c7fcc0d57109c145195175cad0c7d433b1f39a", "patch": "@@ -521,7 +521,7 @@ __gnat_try_lock (char *dir, char *file)\n {\n   char full_path[256];\n   char temp_file[256];\n-  STRUCT_STAT stat_result;\n+  GNAT_STRUCT_STAT stat_result;\n   int fd;\n \n   sprintf (full_path, \"%s%c%s\", dir, DIR_SEPARATOR, file);\n@@ -776,7 +776,7 @@ __gnat_fopen (char *path, char *mode, int encoding ATTRIBUTE_UNUSED)\n #elif defined (VMS)\n   return decc$fopen (path, mode);\n #else\n-  return FOPEN (path, mode);\n+  return GNAT_FOPEN (path, mode);\n #endif\n }\n \n@@ -1020,9 +1020,9 @@ long\n __gnat_file_length (int fd)\n {\n   int ret;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  ret = FSTAT (fd, &statbuf);\n+  ret = GNAT_FSTAT (fd, &statbuf);\n   if (ret || !S_ISREG (statbuf.st_mode))\n     return 0;\n \n@@ -1039,7 +1039,7 @@ long\n __gnat_named_file_length (char *name)\n {\n   int ret;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n   ret = __gnat_stat (name, &statbuf);\n   if (ret || !S_ISREG (statbuf.st_mode))\n@@ -1270,7 +1270,7 @@ __gnat_file_time_name (char *name)\n     }\n   return (OS_Time) ret;\n #else\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n   if (__gnat_stat (name, &statbuf) != 0) {\n      return (OS_Time)-1;\n   } else {\n@@ -1362,9 +1362,9 @@ __gnat_file_time_fd (int fd)\n   return (OS_Time) ret;\n \n #else\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  if (FSTAT (fd, &statbuf) != 0) {\n+  if (GNAT_FSTAT (fd, &statbuf) != 0) {\n      return (OS_Time) -1;\n   } else {\n #ifdef VMS\n@@ -1652,7 +1652,7 @@ __gnat_get_libraries_from_registry (void)\n }\n \n int\n-__gnat_stat (char *name, STRUCT_STAT *statbuf)\n+__gnat_stat (char *name, GNAT_STRUCT_STAT *statbuf)\n {\n #ifdef __MINGW32__\n   /* Under Windows the directory name for the stat function must not be\n@@ -1696,7 +1696,7 @@ __gnat_stat (char *name, STRUCT_STAT *statbuf)\n   return _tstat (wname, (struct _stat *)statbuf);\n \n #else\n-  return STAT (name, statbuf);\n+  return GNAT_STAT (name, statbuf);\n #endif\n }\n \n@@ -1712,7 +1712,7 @@ __gnat_file_exists (char *name)\n   S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n   return GetFileAttributes (wname) != INVALID_FILE_ATTRIBUTES;\n #else\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n   return !__gnat_stat (name, &statbuf);\n #endif\n@@ -1757,7 +1757,7 @@ int\n __gnat_is_regular_file (char *name)\n {\n   int ret;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n   ret = __gnat_stat (name, &statbuf);\n   return (!ret && S_ISREG (statbuf.st_mode));\n@@ -1767,7 +1767,7 @@ int\n __gnat_is_directory (char *name)\n {\n   int ret;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n   ret = __gnat_stat (name, &statbuf);\n   return (!ret && S_ISDIR (statbuf.st_mode));\n@@ -1985,9 +1985,9 @@ __gnat_is_readable_file (char *name)\n #else\n   int ret;\n   int mode;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  ret = STAT (name, &statbuf);\n+  ret = GNAT_STAT (name, &statbuf);\n   mode = statbuf.st_mode & S_IRUSR;\n   return (!ret && mode);\n #endif\n@@ -2017,9 +2017,9 @@ __gnat_is_writable_file (char *name)\n #else\n   int ret;\n   int mode;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  ret = STAT (name, &statbuf);\n+  ret = GNAT_STAT (name, &statbuf);\n   mode = statbuf.st_mode & S_IWUSR;\n   return (!ret && mode);\n #endif\n@@ -2047,9 +2047,9 @@ __gnat_is_executable_file (char *name)\n #else\n   int ret;\n   int mode;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  ret = STAT (name, &statbuf);\n+  ret = GNAT_STAT (name, &statbuf);\n   mode = statbuf.st_mode & S_IXUSR;\n   return (!ret && mode);\n #endif\n@@ -2069,9 +2069,9 @@ __gnat_set_writable (char *name)\n   SetFileAttributes\n     (wname, GetFileAttributes (wname) & ~FILE_ATTRIBUTE_READONLY);\n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  if (STAT (name, &statbuf) == 0)\n+  if (GNAT_STAT (name, &statbuf) == 0)\n     {\n       statbuf.st_mode = statbuf.st_mode | S_IWUSR;\n       chmod (name, statbuf.st_mode);\n@@ -2091,9 +2091,9 @@ __gnat_set_executable (char *name)\n     __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_EXECUTE);\n \n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  if (STAT (name, &statbuf) == 0)\n+  if (GNAT_STAT (name, &statbuf) == 0)\n     {\n       statbuf.st_mode = statbuf.st_mode | S_IXUSR;\n       chmod (name, statbuf.st_mode);\n@@ -2118,9 +2118,9 @@ __gnat_set_non_writable (char *name)\n   SetFileAttributes\n     (wname, GetFileAttributes (wname) | FILE_ATTRIBUTE_READONLY);\n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  if (STAT (name, &statbuf) == 0)\n+  if (GNAT_STAT (name, &statbuf) == 0)\n     {\n       statbuf.st_mode = statbuf.st_mode & 07577;\n       chmod (name, statbuf.st_mode);\n@@ -2140,9 +2140,9 @@ __gnat_set_readable (char *name)\n     __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_READ);\n \n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  if (STAT (name, &statbuf) == 0)\n+  if (GNAT_STAT (name, &statbuf) == 0)\n     {\n       chmod (name, statbuf.st_mode | S_IREAD);\n     }\n@@ -2161,9 +2161,9 @@ __gnat_set_non_readable (char *name)\n     __gnat_set_OWNER_ACL (wname, DENY_ACCESS, FILE_GENERIC_READ);\n \n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  if (STAT (name, &statbuf) == 0)\n+  if (GNAT_STAT (name, &statbuf) == 0)\n     {\n       chmod (name, statbuf.st_mode & (~S_IREAD));\n     }\n@@ -2178,9 +2178,9 @@ __gnat_is_symbolic_link (char *name ATTRIBUTE_UNUSED)\n \n #elif defined (_AIX) || defined (__APPLE__) || defined (__unix__)\n   int ret;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n-  ret = LSTAT (name, &statbuf);\n+  ret = GNAT_LSTAT (name, &statbuf);\n   return (!ret && S_ISLNK (statbuf.st_mode));\n \n #else\n@@ -3438,10 +3438,10 @@ __gnat_copy_attribs (char *from, char *to, int mode)\n   return 0;\n \n #else\n-  STRUCT_STAT fbuf;\n+  GNAT_STRUCT_STAT fbuf;\n   struct utimbuf tbuf;\n \n-  if (STAT (from, &fbuf) == -1)\n+  if (GNAT_STAT (from, &fbuf) == -1)\n     {\n       return -1;\n     }"}, {"sha": "471b5ab6b03609eec03123d2c72e093b6f634735", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c7fcc0d57109c145195175cad0c7d433b1f39a/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c7fcc0d57109c145195175cad0c7d433b1f39a/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=f6c7fcc0d57109c145195175cad0c7d433b1f39a", "patch": "@@ -49,17 +49,17 @@\n    tested.  */\n \n #if defined (__GLIBC__) || defined (sun)  || defined (__sgi)\n-#define FOPEN fopen64\n-#define STAT stat64\n-#define FSTAT fstat64\n-#define LSTAT lstat64\n-#define STRUCT_STAT struct stat64\n+#define GNAT_FOPEN fopen64\n+#define GNAT_STAT stat64\n+#define GNAT_FSTAT fstat64\n+#define GNAT_LSTAT lstat64\n+#define GNAT_STRUCT_STAT struct stat64\n #else\n-#define FOPEN fopen\n-#define STAT stat\n-#define FSTAT fstat\n-#define LSTAT lstat\n-#define STRUCT_STAT struct stat\n+#define GNAT_FOPEN fopen\n+#define GNAT_STAT stat\n+#define GNAT_FSTAT fstat\n+#define GNAT_LSTAT lstat\n+#define GNAT_STRUCT_STAT struct stat\n #endif\n \n /* Type corresponding to GNAT.OS_Lib.OS_Time */\n@@ -94,7 +94,7 @@ extern int    __gnat_open_new                      (char *, int);\n extern int    __gnat_open_new_temp\t\t   (char *, int);\n extern int    __gnat_mkdir\t\t\t   (char *);\n extern int    __gnat_stat\t\t\t   (char *,\n-\t\t\t\t\t\t    STRUCT_STAT *);\n+\t\t\t\t\t\t    GNAT_STRUCT_STAT *);\n extern int    __gnat_unlink                        (char *);\n extern int    __gnat_rename                        (char *, char *);\n extern int    __gnat_chdir                         (char *);"}, {"sha": "d57b382a7fbb0e54dc8bed16f01883375577867a", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c7fcc0d57109c145195175cad0c7d433b1f39a/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c7fcc0d57109c145195175cad0c7d433b1f39a/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=f6c7fcc0d57109c145195175cad0c7d433b1f39a", "patch": "@@ -96,7 +96,7 @@ int\n __gnat_is_regular_file_fd (int fd)\n {\n   int ret;\n-  STRUCT_STAT statbuf;\n+  GNAT_STRUCT_STAT statbuf;\n \n #ifdef __EMX__\n   /* Programs using screen I/O may need to reset the FPU after\n@@ -107,7 +107,7 @@ __gnat_is_regular_file_fd (int fd)\n   __gnat_init_float();\n #endif\n \n-  ret = FSTAT (fd, &statbuf);\n+  ret = GNAT_FSTAT (fd, &statbuf);\n   return (!ret && S_ISREG (statbuf.st_mode));\n }\n "}]}