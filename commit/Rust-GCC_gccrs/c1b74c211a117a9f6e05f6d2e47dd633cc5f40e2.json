{"sha": "c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiNzRjMjExYTExN2E5ZjZlMDVmNmQyZTQ3ZGQ2MzNjYzVmNDBlMg==", "commit": {"author": {"name": "Nathan C. Myers", "email": "ncm-nospam@cantrip.org", "date": "2003-06-18T17:17:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-18T17:17:52Z"}, "message": "fstream.tcc (setbuf): Allow (__s...\n\n2003-06-18  Nathan C. Myers  <ncm-nospam@cantrip.org>\n\t    Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/fstream.tcc (setbuf): Allow (__s, 1) too,\n\tsimply equivalent to the unbuffered case (0, 0) as far as\n\t_M_buf_size is concerned.\n\nCo-Authored-By: Paolo Carlini <pcarlini@unitus.it>\n\nFrom-SVN: r68160", "tree": {"sha": "726fb6b7c21c185101948ea48de0e6660d0fb9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/726fb6b7c21c185101948ea48de0e6660d0fb9b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2/comments", "author": null, "committer": null, "parents": [{"sha": "5a9335ef017c45e09d9493b982a25a8e58b51d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9335ef017c45e09d9493b982a25a8e58b51d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9335ef017c45e09d9493b982a25a8e58b51d40"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "a77f7ec80119de2c0d59c6cc2dceee30b4983814", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2", "patch": "@@ -1,3 +1,10 @@\n+2003-06-18  Nathan C. Myers  <ncm-nospam@cantrip.org>\n+            Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/fstream.tcc (setbuf): Allow (__s, 1) too,\n+\tsimply equivalent to the unbuffered case (0, 0) as far as\n+\t_M_buf_size is concerned.\n+\n 2003-06-18  Andreas Jaeger  <aj@suse.de>\n \n \t* testsuite/Makefile.am (new-abi-baseline): Create baseline"}, {"sha": "c0ef882422af439ce49f5c31aca94dc462ab3da8", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=c1b74c211a117a9f6e05f6d2e47dd633cc5f40e2", "patch": "@@ -429,15 +429,16 @@ namespace std\n     {\n       if (!this->is_open() && __s == 0 && __n == 0)\n \tthis->_M_buf_size = 1;\n-      else if (__s && __n > 1)\n+      else if (__s && __n >= 1)\n \t{\n \t  // This is implementation-defined behavior, and assumes that\n-\t  // an external char_type array of length (__s + __n) exists\n-\t  // and has been pre-allocated. If this is not the case,\n-\t  // things will quickly blow up. The length argument __n must\n-\t  // be greater than 1 because __n - 1 positions will be used\n-\t  // for the get and put areas, and 1 position is needed to\n-\t  // host the overflow char of a full put area.\n+\t  // an external char_type array of length __n exists and has\n+\t  // been pre-allocated. If this is not the case, things will\n+\t  // quickly blow up. When __n > 1, __n - 1 positions will be\n+\t  // used for the get area, __n - 1 for the put area and 1\n+\t  // position to host the overflow char of a full put area.\n+\t  // When __n == 1, 1 position will be used for the get area\n+\t  // and 0 for the put area, as in the unbuffered case above.\n \n \t  // Step 1: Destroy the current internal array.\n \t  _M_destroy_internal_buffer();"}]}