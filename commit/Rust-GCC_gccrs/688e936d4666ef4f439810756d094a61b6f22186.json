{"sha": "688e936d4666ef4f439810756d094a61b6f22186", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4ZTkzNmQ0NjY2ZWY0ZjQzOTgxMDc1NmQwOTRhNjFiNmYyMjE4Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-11-20T05:37:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-11-20T05:37:08Z"}, "message": "re PR tree-optimization/24665 (internal compiler error: get_indirect_ref_operands)\n\n        PR tree-opt/24665\n        * tree-gimple.c (is_gimple_id): Export.\n        * tree-gimple.h (is_gimple_id): Declare.\n        * tree-ssa-ccp.c (ccp_decl_initial_min_invariant): New.\n        (get_default_value): Use it.\n        (maybe_fold_stmt_indirect): Likewise.\n\nFrom-SVN: r107244", "tree": {"sha": "122db954d6114e9b5e9bf6c18c520145c59570fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/122db954d6114e9b5e9bf6c18c520145c59570fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/688e936d4666ef4f439810756d094a61b6f22186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688e936d4666ef4f439810756d094a61b6f22186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688e936d4666ef4f439810756d094a61b6f22186", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688e936d4666ef4f439810756d094a61b6f22186/comments", "author": null, "committer": null, "parents": [{"sha": "7ab1122a479d64423c6ad069793f41666f9fd3aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab1122a479d64423c6ad069793f41666f9fd3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab1122a479d64423c6ad069793f41666f9fd3aa"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "991b8838c9c7394a46e048a653f2204affa87a41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e936d4666ef4f439810756d094a61b6f22186/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e936d4666ef4f439810756d094a61b6f22186/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=688e936d4666ef4f439810756d094a61b6f22186", "patch": "@@ -1,3 +1,12 @@\n+2005-11-19  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-opt/24665\n+\t* tree-gimple.c (is_gimple_id): Export.\n+\t* tree-gimple.h (is_gimple_id): Declare.\n+\t* tree-ssa-ccp.c (ccp_decl_initial_min_invariant): New.\n+\t(get_default_value): Use it.\n+\t(maybe_fold_stmt_indirect): Likewise.\n+\n 2005-11-19  James A. Morrison  <phython@gcc.gnu.org>\n \n         * tree-vrp.c (compare_ranges): Return false for EQ_EXPR if VR0 is less"}, {"sha": "646642c4986f60e14a66596275b83a25cdcff616", "filename": "gcc/testsuite/g++.dg/opt/pr24665.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e936d4666ef4f439810756d094a61b6f22186/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr24665.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e936d4666ef4f439810756d094a61b6f22186/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr24665.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr24665.C?ref=688e936d4666ef4f439810756d094a61b6f22186", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+typedef unsigned long T;\n+typedef volatile T* const hwreg_t;\n+struct RegisterLayout\n+{\n+    T intmask;\n+};\n+struct Controller_t\n+{\n+    Controller_t();\n+    inline void\n+    disableInterrupt()\n+    {\n+        *mpMaskRegister = 0;\n+    };\n+    static hwreg_t mpMaskRegister;\n+};\n+\n+extern char SimulatedRegisters[];\n+\n+hwreg_t Controller_t::mpMaskRegister\n+  = &(reinterpret_cast<volatile RegisterLayout*>(SimulatedRegisters))->intmask;\n+\n+Controller_t::Controller_t()\n+{\n+    disableInterrupt();\n+}"}, {"sha": "82bbf7acea418be0a5133c776be5cba4f1205717", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e936d4666ef4f439810756d094a61b6f22186/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e936d4666ef4f439810756d094a61b6f22186/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=688e936d4666ef4f439810756d094a61b6f22186", "patch": "@@ -35,8 +35,6 @@ Boston, MA 02110-1301, USA.  */\n \n /* For the definitive definition of GIMPLE, see doc/tree-ssa.texi.  */\n \n-static inline bool is_gimple_id (tree);\n-\n /* Validation of GIMPLE expressions.  */\n \n /* Return true if T is a GIMPLE RHS for an assignment to a temporary.  */\n@@ -244,7 +242,7 @@ is_gimple_variable (tree t)\n \n /*  Return true if T is a GIMPLE identifier (something with an address).  */\n \n-static inline bool\n+bool\n is_gimple_id (tree t)\n {\n   return (is_gimple_variable (t)"}, {"sha": "83c17fbad7a0e17c48ae9c3240536588f55c9f99", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e936d4666ef4f439810756d094a61b6f22186/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e936d4666ef4f439810756d094a61b6f22186/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=688e936d4666ef4f439810756d094a61b6f22186", "patch": "@@ -53,6 +53,8 @@ extern bool is_gimple_formal_tmp_var (tree);\n extern bool is_gimple_formal_tmp_reg (tree);\n /* Returns true iff T is any sort of variable.  */\n extern bool is_gimple_variable (tree);\n+/* Returns true iff T is any sort of symbol.  */\n+extern bool is_gimple_id (tree);\n /* Returns true iff T is a variable or an INDIRECT_REF (of a variable).  */\n extern bool is_gimple_min_lval (tree);\n /* Returns true iff T is something whose address can be taken.  */"}, {"sha": "cd446ee63e0fa23d69bd761a10a7a1e048c74f8c", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e936d4666ef4f439810756d094a61b6f22186/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e936d4666ef4f439810756d094a61b6f22186/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=688e936d4666ef4f439810756d094a61b6f22186", "patch": "@@ -273,6 +273,32 @@ debug_lattice_value (prop_value_t val)\n }\n \n \n+/* The regular is_gimple_min_invariant does a shallow test of the object.\n+   It assumes that full gimplification has happened, or will happen on the\n+   object.  For a value coming from DECL_INITIAL, this is not true, so we\n+   have to be more strict outselves.  */\n+\n+static bool\n+ccp_decl_initial_min_invariant (tree t)\n+{\n+  if (!is_gimple_min_invariant (t))\n+    return false;\n+  if (TREE_CODE (t) == ADDR_EXPR)\n+    {\n+      /* Inline and unroll is_gimple_addressable.  */\n+      while (1)\n+\t{\n+\t  t = TREE_OPERAND (t, 0);\n+\t  if (is_gimple_id (t))\n+\t    return true;\n+\t  if (!handled_component_p (t))\n+\t    return false;\n+\t}\n+    }\n+  return true;\n+}\n+\n+\n /* Compute a default value for variable VAR and store it in the\n    CONST_VAL array.  The following rules are used to get default\n    values:\n@@ -317,7 +343,7 @@ get_default_value (tree var)\n   else if (TREE_STATIC (sym)\n \t   && TREE_READONLY (sym)\n \t   && DECL_INITIAL (sym)\n-\t   && is_gimple_min_invariant (DECL_INITIAL (sym)))\n+\t   && ccp_decl_initial_min_invariant (DECL_INITIAL (sym)))\n     {\n       /* Globals and static variables declared 'const' take their\n \t initial value.  */\n@@ -1712,7 +1738,7 @@ maybe_fold_stmt_indirect (tree expr, tree base, tree offset)\n \n       /* Fold away CONST_DECL to its value, if the type is scalar.  */\n       if (TREE_CODE (base) == CONST_DECL\n-\t  && is_gimple_min_invariant (DECL_INITIAL (base)))\n+\t  && ccp_decl_initial_min_invariant (DECL_INITIAL (base)))\n \treturn DECL_INITIAL (base);\n \n       /* Try folding *(&B+O) to B[X].  */"}]}