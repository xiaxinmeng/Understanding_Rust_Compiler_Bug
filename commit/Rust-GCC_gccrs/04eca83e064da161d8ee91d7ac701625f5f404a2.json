{"sha": "04eca83e064da161d8ee91d7ac701625f5f404a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlY2E4M2UwNjRkYTE2MWQ4ZWU5MWQ3YWM3MDE2MjVmNWY0MDRhMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-06-16T01:59:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-06-16T01:59:55Z"}, "message": "re PR c++/58583 ([c++11] ICE with invalid non-static data member initialization in template)\n\n\tcp/\n\tPR c++/58583\n\t* cp-tree.h (DECL_INSTANTIATING_NSDMI_P): New.\n\t* init.c (get_nsdmi): Check for DEFAULT_ARG in template case and\n\tprotect it from recursive instantiation.\n\n\ttestsuite/\n\tPR c++/58583\n\t* g++.dg/cpp0x/nsdmi-template14.C: New test.\n\nFrom-SVN: r224502", "tree": {"sha": "732badca01be7ddf1363610c4db6dd06853b9c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/732badca01be7ddf1363610c4db6dd06853b9c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04eca83e064da161d8ee91d7ac701625f5f404a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04eca83e064da161d8ee91d7ac701625f5f404a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04eca83e064da161d8ee91d7ac701625f5f404a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04eca83e064da161d8ee91d7ac701625f5f404a2/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4927b383fe3840cf912422b56603711a29e723c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4927b383fe3840cf912422b56603711a29e723c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4927b383fe3840cf912422b56603711a29e723c1"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "15766f4d7267bdaacfd95813a4c9aa29d570536f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04eca83e064da161d8ee91d7ac701625f5f404a2", "patch": "@@ -1,3 +1,10 @@\n+2015-06-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/58583\n+\t* cp-tree.h (DECL_INSTANTIATING_NSDMI_P): New.\n+\t* init.c (get_nsdmi): Check for DEFAULT_ARG in template case and\n+\tprotect it from recursive instantiation.\n+\n 2015-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51048"}, {"sha": "303a432760a023f94c5625fdaab104a199a927ec", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=04eca83e064da161d8ee91d7ac701625f5f404a2", "patch": "@@ -156,6 +156,7 @@ c-common.h, not after.\n    2: DECL_THIS_EXTERN (in VAR_DECL or FUNCTION_DECL).\n       DECL_IMPLICIT_TYPEDEF_P (in a TYPE_DECL)\n       TEMPLATE_DECL_COMPLEX_ALIAS_P (in TEMPLATE_DECL)\n+      DECL_INSTANTIATING_NSDMI_P (in a FIELD_DECL)\n    3: DECL_IN_AGGR_P.\n    4: DECL_C_BIT_FIELD (in a FIELD_DECL)\n       DECL_ANON_UNION_VAR_P (in a VAR_DECL)\n@@ -3785,6 +3786,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define DECL_ARRAY_PARAMETER_P(NODE) \\\n   DECL_LANG_FLAG_1 (PARM_DECL_CHECK (NODE))\n \n+/* Nonzero for a FIELD_DECL who's NSMDI is currently being\n+   instantiated.  */\n+#define DECL_INSTANTIATING_NSDMI_P(NODE) \\\n+  DECL_LANG_FLAG_2 (FIELD_DECL_CHECK (NODE))\n+\n /* Nonzero for FIELD_DECL node means that this field is a base class\n    of the parent object, as opposed to a member field.  */\n #define DECL_FIELD_IS_BASE(NODE) \\"}, {"sha": "aa964b9e8e3ac2cf1374fa6a6fbbd2a0a4cccbe9", "filename": "gcc/cp/init.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=04eca83e064da161d8ee91d7ac701625f5f404a2", "patch": "@@ -541,29 +541,48 @@ get_nsdmi (tree member, bool in_ctor)\n   tree init;\n   tree save_ccp = current_class_ptr;\n   tree save_ccr = current_class_ref;\n+  \n   if (!in_ctor)\n     {\n       /* Use a PLACEHOLDER_EXPR when we don't have a 'this' parameter to\n \t refer to; constexpr evaluation knows what to do with it.  */\n       current_class_ref = build0 (PLACEHOLDER_EXPR, DECL_CONTEXT (member));\n       current_class_ptr = build_address (current_class_ref);\n     }\n+\n   if (DECL_LANG_SPECIFIC (member) && DECL_TEMPLATE_INFO (member))\n     {\n-      /* Do deferred instantiation of the NSDMI.  */\n-      init = (tsubst_copy_and_build\n-\t      (DECL_INITIAL (DECL_TI_TEMPLATE (member)),\n-\t       DECL_TI_ARGS (member),\n-\t       tf_warning_or_error, member, /*function_p=*/false,\n-\t       /*integral_constant_expression_p=*/false));\n-\n-      init = digest_nsdmi_init (member, init);\n+      init = DECL_INITIAL (DECL_TI_TEMPLATE (member));\n+      if (TREE_CODE (init) == DEFAULT_ARG)\n+\tgoto unparsed;\n+\n+      /* Check recursive instantiation.  */\n+      if (DECL_INSTANTIATING_NSDMI_P (member))\n+\t{\n+\t  error (\"recursive instantiation of non-static data member \"\n+\t\t \"initializer for %qD\", member);\n+\t  init = error_mark_node;\n+\t}\n+      else\n+\t{\n+\t  DECL_INSTANTIATING_NSDMI_P (member) = 1;\n+\t  \n+\t  /* Do deferred instantiation of the NSDMI.  */\n+\t  init = (tsubst_copy_and_build\n+\t\t  (init, DECL_TI_ARGS (member),\n+\t\t   tf_warning_or_error, member, /*function_p=*/false,\n+\t\t   /*integral_constant_expression_p=*/false));\n+\t  init = digest_nsdmi_init (member, init);\n+\t  \n+\t  DECL_INSTANTIATING_NSDMI_P (member) = 0;\n+\t}\n     }\n   else\n     {\n       init = DECL_INITIAL (member);\n       if (init && TREE_CODE (init) == DEFAULT_ARG)\n \t{\n+\tunparsed:\n \t  error (\"constructor required before non-static data member \"\n \t\t \"for %qD has been parsed\", member);\n \t  DECL_INITIAL (member) = error_mark_node;"}, {"sha": "57c33d6be5ad88cba56115a1f68c83c6a453e7e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04eca83e064da161d8ee91d7ac701625f5f404a2", "patch": "@@ -1,3 +1,8 @@\n+2015-06-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/58583\n+\t* g++.dg/cpp0x/nsdmi-template14.C: New test.\n+\n 2015-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51048"}, {"sha": "9cb01f1b7eee892db7a92b19c6ee8fcbcedea175", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template14.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eca83e064da161d8ee91d7ac701625f5f404a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template14.C?ref=04eca83e064da161d8ee91d7ac701625f5f404a2", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/58583\n+// { dg-do compile { target c++11 } }\n+\n+template<int> struct A // { dg-error \"has been parsed\" }\n+{\n+  int i = (A<0>(), 0); // { dg-error \"has been parsed\" }\n+};\n+\n+template<int N> struct B\n+{\n+  B* p = new B<N>;\n+};\n+\n+B<1> x; // { dg-error \"recursive instantiation of non-static data\" }\n+\n+struct C\n+{\n+  template<int N> struct D\n+  {\n+    D* p = new D<0>;\n+  };\n+};"}]}