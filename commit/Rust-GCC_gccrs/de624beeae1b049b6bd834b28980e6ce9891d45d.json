{"sha": "de624beeae1b049b6bd834b28980e6ce9891d45d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2MjRiZWVhZTFiMDQ5YjZiZDgzNGIyODk4MGU2Y2U5ODkxZDQ1ZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-21T09:02:17Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-21T09:02:17Z"}, "message": "re PR fortran/82586 ([PDT] ICE: write_symbol(): bad module symbol)\n\n2017-10-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82586\n\t* decl.c (gfc_get_pdt_instance): Remove the error message that\n\tthe parameter does not have a corresponding component since\n\tthis is now taken care of when the derived type is resolved. Go\n\tstraight to error return instead.\n\t(gfc_match_formal_arglist): Make the PDT relevant errors\n\timmediate so that parsing of the derived type can continue.\n\t(gfc_match_derived_decl): Do not check the match status on\n\treturn from gfc_match_formal_arglist for the same reason.\n\t* resolve.c (resolve_fl_derived0): Check that each type\n\tparameter has a corresponding component.\n\n\tPR fortran/82587\n\t* resolve.c (resolve_generic_f): Check that the derived type\n\tcan be used before resolving the struture constructor.\n\n\tPR fortran/82589\n\t* symbol.c (check_conflict): Add the conflicts involving PDT\n\tKIND and LEN attributes.\n\n2017-10-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82586\n\t* gfortran.dg/pdt_16.f03 : New test.\n\t* gfortran.dg/pdt_4.f03 : Catch the changed messages.\n\t* gfortran.dg/pdt_8.f03 : Ditto.\n\n\tPR fortran/82587\n\t* gfortran.dg/pdt_17.f03 : New test.\n\n\tPR fortran/82589\n\t* gfortran.dg/pdt_18.f03 : New test.\n\nFrom-SVN: r253970", "tree": {"sha": "63f51314f4655c12f86d5ba76dd5853289bad244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63f51314f4655c12f86d5ba76dd5853289bad244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de624beeae1b049b6bd834b28980e6ce9891d45d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de624beeae1b049b6bd834b28980e6ce9891d45d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de624beeae1b049b6bd834b28980e6ce9891d45d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de624beeae1b049b6bd834b28980e6ce9891d45d/comments", "author": null, "committer": null, "parents": [{"sha": "aa93ca090e54442af1f2494ae6f6b07bd3c65630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa93ca090e54442af1f2494ae6f6b07bd3c65630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa93ca090e54442af1f2494ae6f6b07bd3c65630"}], "stats": {"total": 163, "additions": 146, "deletions": 17}, "files": [{"sha": "6bf4f1d566d4a08055c62c5d0925b6925d463369", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -1,3 +1,25 @@\n+2017-10-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82586\n+\t* decl.c (gfc_get_pdt_instance): Remove the error message that\n+\tthe parameter does not have a corresponding component since\n+\tthis is now taken care of when the derived type is resolved. Go\n+\tstraight to error return instead.\n+\t(gfc_match_formal_arglist): Make the PDT relevant errors\n+\timmediate so that parsing of the derived type can continue.\n+\t(gfc_match_derived_decl): Do not check the match status on\n+\treturn from gfc_match_formal_arglist for the same reason.\n+\t* resolve.c (resolve_fl_derived0): Check that each type\n+\tparameter has a corresponding component.\n+\n+\tPR fortran/82587\n+\t* resolve.c (resolve_generic_f): Check that the derived type\n+\tcan be used before resolving the struture constructor.\n+\n+\tPR fortran/82589\n+\t* symbol.c (check_conflict): Add the conflicts involving PDT\n+\tKIND and LEN attributes.\n+\n 2017-10-19  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* interface.c (check_sym_interfaces, check_uop_interfaces,"}, {"sha": "1a2d8f004cac519af366172624b4828cfa9b12e7", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -3242,13 +3242,10 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n       param = type_param_name_list->sym;\n \n       c1 = gfc_find_component (pdt, param->name, false, true, NULL);\n+      /* An error should already have been thrown in resolve.c\n+\t (resolve_fl_derived0).  */\n       if (!pdt->attr.use_assoc && !c1)\n-\t{\n-\t  gfc_error (\"The type parameter name list at %L contains a parameter \"\n-\t\t     \"'%qs' , which is not declared as a component of the type\",\n-\t\t     &pdt->declared_at, param->name);\n-\t  goto error_return;\n-\t}\n+\tgoto error_return;\n \n       kind_expr = NULL;\n       if (!name_seen)\n@@ -5984,7 +5981,7 @@ gfc_match_formal_arglist (gfc_symbol *progname, int st_flag,\n       /* The name of a program unit can be in a different namespace,\n \t so check for it explicitly.  After the statement is accepted,\n \t the name is checked for especially in gfc_get_symbol().  */\n-      if (gfc_new_block != NULL && sym != NULL\n+      if (gfc_new_block != NULL && sym != NULL && !typeparam\n \t  && strcmp (sym->name, gfc_new_block->name) == 0)\n \t{\n \t  gfc_error (\"Name %qs at %C is the name of the procedure\",\n@@ -5999,7 +5996,11 @@ gfc_match_formal_arglist (gfc_symbol *progname, int st_flag,\n       m = gfc_match_char (',');\n       if (m != MATCH_YES)\n \t{\n-\t  gfc_error (\"Unexpected junk in formal argument list at %C\");\n+\t  if (typeparam)\n+\t    gfc_error_now (\"Expected parameter list in type declaration \"\n+\t\t\t   \"at %C\");\n+\t  else\n+\t    gfc_error (\"Unexpected junk in formal argument list at %C\");\n \t  goto cleanup;\n \t}\n     }\n@@ -6016,8 +6017,12 @@ gfc_match_formal_arglist (gfc_symbol *progname, int st_flag,\n \t  for (q = p->next; q; q = q->next)\n \t    if (p->sym == q->sym)\n \t      {\n-\t\tgfc_error (\"Duplicate symbol %qs in formal argument list \"\n-\t\t\t   \"at %C\", p->sym->name);\n+\t\tif (typeparam)\n+\t\t  gfc_error_now (\"Duplicate name %qs in parameter \"\n+\t\t\t\t \"list at %C\", p->sym->name);\n+\t\telse\n+\t\t  gfc_error (\"Duplicate symbol %qs in formal argument \"\n+\t\t\t     \"list at %C\", p->sym->name);\n \n \t\tm = MATCH_ERROR;\n \t\tgoto cleanup;\n@@ -9814,9 +9819,9 @@ gfc_match_derived_decl (void)\n \n   if (parameterized_type)\n     {\n-      m = gfc_match_formal_arglist (sym, 0, 0, true);\n-      if (m != MATCH_YES)\n-\treturn m;\n+      /* Ignore error or mismatches to avoid the component declarations\n+\t causing problems later.  */\n+      gfc_match_formal_arglist (sym, 0, 0, true);\n       m = gfc_match_eos ();\n       if (m != MATCH_YES)\n \treturn m;"}, {"sha": "5062bcb755a15d00d3a4d71aa97b608635c4ab5a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -2694,6 +2694,8 @@ resolve_generic_f (gfc_expr *expr)\n       if (!gfc_convert_to_structure_constructor (expr, intr->sym, NULL,\n \t\t\t\t\t\t NULL, false))\n \treturn false;\n+      if (!gfc_use_derived (expr->ts.u.derived))\n+\treturn false;\n       return resolve_structure_cons (expr, 0);\n     }\n \n@@ -13937,6 +13939,7 @@ resolve_fl_derived0 (gfc_symbol *sym)\n {\n   gfc_symbol* super_type;\n   gfc_component *c;\n+  gfc_formal_arglist *f;\n   bool success;\n \n   if (sym->attr.unlimited_polymorphic)\n@@ -13989,6 +13992,22 @@ resolve_fl_derived0 (gfc_symbol *sym)\n       && !ensure_not_abstract (sym, super_type))\n     return false;\n \n+  /* Check that there is a component for every PDT parameter.  */\n+  if (sym->attr.pdt_template)\n+    {\n+      for (f = sym->formal; f; f = f->next)\n+\t{\n+\t  c = gfc_find_component (sym, f->sym->name, true, true, NULL);\n+\t  if (c == NULL)\n+\t    {\n+\t      gfc_error (\"Parameterized type %qs does not have a component \"\n+\t\t\t \"corresponding to parameter %qs at %L\", sym->name,\n+\t\t\t f->sym->name, &sym->declared_at);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n   /* Add derived type to the derived type list.  */\n   add_dt_to_dt_list (sym);\n "}, {"sha": "11b6f600103ab5a39ffb3b9174e816f8bb3ed312", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -426,7 +426,8 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n     *is_bind_c = \"BIND(C)\", *procedure = \"PROCEDURE\",\n     *proc_pointer = \"PROCEDURE POINTER\", *abstract = \"ABSTRACT\",\n     *asynchronous = \"ASYNCHRONOUS\", *codimension = \"CODIMENSION\",\n-    *contiguous = \"CONTIGUOUS\", *generic = \"GENERIC\", *automatic = \"AUTOMATIC\";\n+    *contiguous = \"CONTIGUOUS\", *generic = \"GENERIC\", *automatic = \"AUTOMATIC\",\n+    *pdt_len = \"LEN\", *pdt_kind = \"KIND\";\n   static const char *threadprivate = \"THREADPRIVATE\";\n   static const char *omp_declare_target = \"OMP DECLARE TARGET\";\n   static const char *omp_declare_target_link = \"OMP DECLARE TARGET LINK\";\n@@ -707,6 +708,23 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n   conf (entry, oacc_declare_deviceptr)\n   conf (entry, oacc_declare_device_resident)\n \n+  conf (pdt_kind, allocatable)\n+  conf (pdt_kind, pointer)\n+  conf (pdt_kind, dimension)\n+  conf (pdt_kind, codimension)\n+\n+  conf (pdt_len, allocatable)\n+  conf (pdt_len, pointer)\n+  conf (pdt_len, dimension)\n+  conf (pdt_len, codimension)\n+\n+  if (attr->access == ACCESS_PRIVATE)\n+    {\n+      a1 = privat;\n+      conf2 (pdt_kind);\n+      conf2 (pdt_len);\n+    }\n+\n   a1 = gfc_code2string (flavors, attr->flavor);\n \n   if (attr->in_namelist"}, {"sha": "12f9f6d98c4dc452b23168f605e78d909da06e17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -1,3 +1,16 @@\n+2017-10-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82586\n+\t* gfortran.dg/pdt_16.f03 : New test.\n+\t* gfortran.dg/pdt_4.f03 : Catch the changed messages.\n+\t* gfortran.dg/pdt_8.f03 : Ditto.\n+\n+\tPR fortran/82587\n+\t* gfortran.dg/pdt_17.f03 : New test.\n+\n+\tPR fortran/82589\n+\t* gfortran.dg/pdt_18.f03 : New test.\n+\n 2017-10-20  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \t* c-c++-common/fcf-protection-1.c: New test."}, {"sha": "067d87d660d18f7bd288385a04e06b754a18fad3", "filename": "gcc/testsuite/gfortran.dg/pdt_16.f03", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_16.f03?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+!\n+! Test the fix for all three errors in PR82586\n+!\n+! Contributed by G Steinmetz  <gscfq@t-online.de>\n+!\n+module m\n+   type t(a)                 ! { dg-error \"does not have a component\" }\n+   end type\n+end\n+\n+program p\n+   type t(a                  ! { dg-error \"Expected parameter list\" }\n+      integer, kind :: a\n+      real(a) :: x\n+   end type\n+   type u(a, a)              ! { dg-error \"Duplicate name\" }\n+      integer, kind :: a     ! { dg-error \"already declared\" }\n+      integer, len :: a      ! { dg-error \"already declared\" }\n+   end type\n+end"}, {"sha": "1b0a30dca4cb2cca1e802579bf70015838b5ac10", "filename": "gcc/testsuite/gfortran.dg/pdt_17.f03", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_17.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_17.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_17.f03?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR82587\n+!\n+! Contributed by G Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   type t(a)                   ! { dg-error \"does not have a component\" }\n+      integer(kind=t()) :: x   ! { dg-error \"used before it is defined\" }\n+   end type\n+end"}, {"sha": "896a727eaae8ea96c9a32c975c08cae7227e8667", "filename": "gcc/testsuite/gfortran.dg/pdt_18.f03", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_18.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_18.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_18.f03?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR82589\n+!\n+! Contributed by G Steinmetz  <gscfq@t-online.de>\n+!\n+module m\n+   type t(a)\n+      integer, KIND, private :: a        ! { dg-error \"attribute conflicts with\" }\n+      integer, KIND, allocatable :: a    ! { dg-error \"attribute conflicts with\" }\n+      integer, KIND, POINTER :: a        ! { dg-error \"attribute conflicts with\" }\n+      integer, KIND, dimension(2) :: a   ! { dg-error \"attribute conflicts with\" }\n+      integer, len, private :: a         ! { dg-error \"attribute conflicts with\" }\n+      integer, len, allocatable :: a     ! { dg-error \"attribute conflicts with\" }\n+      integer, len, POINTER :: a         ! { dg-error \"attribute conflicts with\" }\n+      integer, len, dimension(2) :: a    ! { dg-error \"attribute conflicts with\" }\n+      integer, kind :: a\n+   end type\n+end"}, {"sha": "15cb6417ca7666b352793ef036de7d9c6a934b5c", "filename": "gcc/testsuite/gfortran.dg/pdt_4.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -26,7 +26,7 @@ module bad_vars\n   integer, kind :: bad_kind    ! { dg-error \"not allowed outside a TYPE definition\" }\n   integer, len :: bad_len      ! { dg-error \"not allowed outside a TYPE definition\" }\n \n-  type :: bad_pdt (a,b, c, d)\n+  type :: bad_pdt (a,b, c, d)  ! { dg-error \"does not have a component\" }\n     real, kind :: a            ! { dg-error \"must be INTEGER\" }\n     INTEGER(8), kind :: b      ! { dg-error \"be default integer kind\" }\n     real, LEN :: c             ! { dg-error \"must be INTEGER\" }"}, {"sha": "aeec407fb4bea637992d7342011a91faaecd004f", "filename": "gcc/testsuite/gfortran.dg/pdt_8.f03", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de624beeae1b049b6bd834b28980e6ce9891d45d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_8.f03?ref=de624beeae1b049b6bd834b28980e6ce9891d45d", "patch": "@@ -15,9 +15,10 @@\n   real, kind :: x        ! { dg-error \"must be INTEGER\" }\n end type\n \n-type :: t1(k,y)          ! { dg-error \"not declared as a component of the type\" }\n+type :: t1(k,y)          ! { dg-error \"does not have a component\" }\n   integer, kind :: k\n end type\n \n-type(t1(4,4)) :: z\n+! This is a knock-on from the previous error\n+type(t1(4,4)) :: z       ! { dg-error \"Invalid character in name\" }\n end"}]}