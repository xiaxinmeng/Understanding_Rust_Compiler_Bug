{"sha": "a5883ba0de68efad36db145e75c86394d8bd44ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4ODNiYTBkZTY4ZWZhZDM2ZGIxNDVlNzVjODYzOTRkOGJkNDRlYQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-11-24T15:37:32Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-11-24T15:37:32Z"}, "message": "tree.h (union tree_ann_d): Don't declare.\n\n\t* tree.h (union tree_ann_d): Don't declare.\n\t(tree_base): Remove ann field.\n\t(struct var_ann_d): Declare forward.\n\t(tree_result_decl, tree_parm_decl, tree_var_decl): Add ann field.\n\t(DECL_VAR_ANN_PTR): New macro.\n\t* tree-dfa.c (create_var_ann): Rewrite in terms of above macro,\n\taccept only VAR, PARM or RESULT decls.\n\t(create_tree_common_ann): Remove.\n\t(remove_referenced_var): Use DECL_VAR_ANN_PTR.\n\t* tree-eh.c (lookup_expr_eh_lp): Remove.\n\t* tree-flow-inline.h (var_ann, get_var_ann): Rewrite in terms of\n\tDECL_VAR_ANN_PTR.\n\t(ann_type, tree_common_ann, get_tree_common_ann): Remove.\n\t* tree-flow.h (enum tree_ann_type): Remove.\n\t(struct tree_ann_common_d): Remove.\n\t(struct var_ann_d): Remove common field.\n\t(union tree_ann_d): Remove.\n\t(tree_ann_t, tree_ann_common_t): Remove typedefs.\n\t(tree_common_ann, get_tree_common_ann, ann_type,\n\tcreate_tree_common_ann, lookup_expr_eh_lp): Don't declare.\n\t* tree-ssa.c (delete_tree_ssa): Use DECL_VAR_ANN_PTR.\n\t* tree.c (copy_node_stat): Use DECL_VAR_ANN_PTR.\n\t* builtins.c (expand_builtin_memcpy): Use\n\tcurrently_expanding_gimple_stmt instead of tree annotation.\n\t(expand_builtin_memset_args): Ditto.\n\t* cfgexpand.c (currently_expanding_gimple_stmt): Add global variable.\n\t(expand_call_stmt): Don't set tree annotation.\n\t(expand_gimple_basic_block): Set currently_expanding_gimple_stmt.\n\t* expr.c (expand_expr_real): Don't call lookup_expr_eh_lp.\n\t* gimple.h (currently_expanding_gimple_stmt): Declare.\n\nFrom-SVN: r154502", "tree": {"sha": "b906ae87996cd4f2fdf60f2a50c3cbf838d510f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b906ae87996cd4f2fdf60f2a50c3cbf838d510f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5883ba0de68efad36db145e75c86394d8bd44ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5883ba0de68efad36db145e75c86394d8bd44ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5883ba0de68efad36db145e75c86394d8bd44ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5883ba0de68efad36db145e75c86394d8bd44ea/comments", "author": null, "committer": null, "parents": [{"sha": "6e0b03f5855ae33c0e25d723c5cfc0f2dbc6698f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0b03f5855ae33c0e25d723c5cfc0f2dbc6698f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0b03f5855ae33c0e25d723c5cfc0f2dbc6698f"}], "stats": {"total": 255, "additions": 86, "deletions": 169}, "files": [{"sha": "1656762ffe0251167a9dd07739487e82a16903b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -1,3 +1,36 @@\n+2009-11-24  Michael Matz  <matz@suse.de>\n+\n+\t* tree.h (union tree_ann_d): Don't declare.\n+\t(tree_base): Remove ann field.\n+\t(struct var_ann_d): Declare forward.\n+\t(tree_result_decl, tree_parm_decl, tree_var_decl): Add ann field.\n+\t(DECL_VAR_ANN_PTR): New macro.\n+\t* tree-dfa.c (create_var_ann): Rewrite in terms of above macro,\n+\taccept only VAR, PARM or RESULT decls.\n+\t(create_tree_common_ann): Remove.\n+\t(remove_referenced_var): Use DECL_VAR_ANN_PTR.\n+\t* tree-eh.c (lookup_expr_eh_lp): Remove.\n+\t* tree-flow-inline.h (var_ann, get_var_ann): Rewrite in terms of\n+\tDECL_VAR_ANN_PTR.\n+\t(ann_type, tree_common_ann, get_tree_common_ann): Remove.\n+\t* tree-flow.h (enum tree_ann_type): Remove.\n+\t(struct tree_ann_common_d): Remove.\n+\t(struct var_ann_d): Remove common field.\n+\t(union tree_ann_d): Remove.\n+\t(tree_ann_t, tree_ann_common_t): Remove typedefs.\n+\t(tree_common_ann, get_tree_common_ann, ann_type,\n+\tcreate_tree_common_ann, lookup_expr_eh_lp): Don't declare.\n+\t* tree-ssa.c (delete_tree_ssa): Use DECL_VAR_ANN_PTR.\n+\t* tree.c (copy_node_stat): Use DECL_VAR_ANN_PTR.\n+\t* builtins.c (expand_builtin_memcpy): Use\n+\tcurrently_expanding_gimple_stmt instead of tree annotation.\n+\t(expand_builtin_memset_args): Ditto.\n+\t* cfgexpand.c (currently_expanding_gimple_stmt): Add global variable.\n+\t(expand_call_stmt): Don't set tree annotation.\n+\t(expand_gimple_basic_block): Set currently_expanding_gimple_stmt.\n+\t* expr.c (expand_expr_real): Don't call lookup_expr_eh_lp.\n+\t* gimple.h (currently_expanding_gimple_stmt): Declare.\n+\n 2009-11-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* dwarf2out.c (add_location_or_const_value_attribute): Remove\n@@ -11,7 +44,7 @@\n \n 2009-11-24  Basile Starynkevitch  <basile@starynkevitch.net>\n \n-        * Makefile.in (PLUGIN_HEADERS): Added files: cppdefault.h flags.h\n+\t* Makefile.in (PLUGIN_HEADERS): Added files: cppdefault.h flags.h\n \t$(MD5_H) params.def params.h prefix.h tree-inline.h.\n \n 2009-11-24  Paul Brook  <paul@codesourcery.com>\n@@ -30,14 +63,14 @@\n \n \t* cfgrtl.c (commit_one_edge_insertion): Remove set but not used\n \tlocal variable bb_note.\n-        * dominance.c (get_dominated_by): Likewise local var n.\n-        (output_file_names): Likewise local var idx.\n-        (add_location_or_const_value_attribute): Likewise local var status.\n-        * dwarf2out.c (gen_variable_die): Likewise local var field.\n-        * emit-rtl.c (no_line_numbers): Remove.\n+\t* dominance.c (get_dominated_by): Likewise local var n.\n+\t(output_file_names): Likewise local var idx.\n+\t(add_location_or_const_value_attribute): Likewise local var status.\n+\t* dwarf2out.c (gen_variable_die): Likewise local var field.\n+\t* emit-rtl.c (no_line_numbers): Remove.\n \t(init_emit_once): Remove line_numbers parameter.\n-        * rtl.h (init_emit_once): Adjust prototype.\n-        * toplev.c (backend_init): Adjust init_emit_once call.\n+\t* rtl.h (init_emit_once): Adjust prototype.\n+\t* toplev.c (backend_init): Adjust init_emit_once call.\n \n 2009-11-24  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "835d78888ffa50b904cf3405ec3b347ab54b4897", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -3259,7 +3259,6 @@ expand_builtin_memcpy (tree exp, rtx target)\n       rtx dest_mem, src_mem, dest_addr, len_rtx;\n       HOST_WIDE_INT expected_size = -1;\n       unsigned int expected_align = 0;\n-      tree_ann_common_t ann;\n \n       /* If DEST is not a pointer type, call the normal function.  */\n       if (dest_align == 0)\n@@ -3270,9 +3269,9 @@ expand_builtin_memcpy (tree exp, rtx target)\n       if (src_align == 0)\n \treturn NULL_RTX;\n  \n-      ann = tree_common_ann (exp);\n-      if (ann)\n-        stringop_block_profile (ann->stmt, &expected_align, &expected_size);\n+      if (currently_expanding_gimple_stmt)\n+        stringop_block_profile (currently_expanding_gimple_stmt,\n+\t\t\t\t&expected_align, &expected_size);\n \n       if (expected_align < dest_align)\n \texpected_align = dest_align;\n@@ -3737,17 +3736,16 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n   rtx dest_mem, dest_addr, len_rtx;\n   HOST_WIDE_INT expected_size = -1;\n   unsigned int expected_align = 0;\n-  tree_ann_common_t ann;\n \n   dest_align = get_pointer_alignment (dest, BIGGEST_ALIGNMENT);\n \n   /* If DEST is not a pointer type, don't do this operation in-line.  */\n   if (dest_align == 0)\n     return NULL_RTX;\n \n-  ann = tree_common_ann (orig_exp);\n-  if (ann)\n-    stringop_block_profile (ann->stmt, &expected_align, &expected_size);\n+  if (currently_expanding_gimple_stmt)\n+    stringop_block_profile (currently_expanding_gimple_stmt,\n+\t\t\t    &expected_align, &expected_size);\n \n   if (expected_align < dest_align)\n     expected_align = dest_align;"}, {"sha": "3f7b1d28ac6f9dfa1215acd939833b77bc6aca4e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -49,6 +49,10 @@ along with GCC; see the file COPYING3.  If not see\n    into RTL.  */\n struct ssaexpand SA;\n \n+/* This variable holds the currently expanded gimple statement for purposes\n+   of comminucating the profile info to the builtin expanders.  */\n+gimple currently_expanding_gimple_stmt;\n+\n /* Return an expression tree corresponding to the RHS of GIMPLE\n    statement STMT.  */\n \n@@ -1756,7 +1760,6 @@ expand_call_stmt (gimple stmt)\n {\n   tree exp;\n   tree lhs = gimple_call_lhs (stmt);\n-  tree fndecl = gimple_call_fndecl (stmt);\n   size_t i;\n \n   exp = build_vl_exp (CALL_EXPR, gimple_call_num_args (stmt) + 3);\n@@ -1782,15 +1785,6 @@ expand_call_stmt (gimple stmt)\n   SET_EXPR_LOCATION (exp, gimple_location (stmt));\n   TREE_BLOCK (exp) = gimple_block (stmt);\n \n-  /* Record the original call statement, as it may be used\n-     to retrieve profile information during expansion.  */\n-\n-  if (fndecl && DECL_BUILT_IN (fndecl))\n-    {\n-      tree_ann_common_t ann = get_tree_common_ann (exp);\n-      ann->stmt = stmt;\n-    }\n-\n   if (lhs)\n     expand_assignment (lhs, exp, false);\n   else\n@@ -3106,6 +3100,7 @@ expand_gimple_basic_block (basic_block bb)\n       basic_block new_bb;\n \n       stmt = gsi_stmt (gsi);\n+      currently_expanding_gimple_stmt = stmt;\n \n       /* Expand this statement, then evaluate the resulting RTL and\n \t fixup the CFG accordingly.  */\n@@ -3203,6 +3198,8 @@ expand_gimple_basic_block (basic_block bb)\n \t}\n     }\n \n+  currently_expanding_gimple_stmt = NULL;\n+\n   /* Expand implicit goto and convert goto_locus.  */\n   FOR_EACH_EDGE (e, ei, bb->succs)\n     {"}, {"sha": "66810032a4851339f98907c33f9eb6923f2a613c", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -7157,8 +7157,7 @@ rtx\n expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \t\t  enum expand_modifier modifier, rtx *alt_rtl)\n {\n-  int lp_nr = 0;\n-  rtx ret, last = NULL;\n+  rtx ret;\n \n   /* Handle ERROR_MARK before anybody tries to access its type.  */\n   if (TREE_CODE (exp) == ERROR_MARK\n@@ -7168,13 +7167,6 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n       return ret ? ret : const0_rtx;\n     }\n \n-  if (flag_non_call_exceptions)\n-    {\n-      lp_nr = lookup_expr_eh_lp (exp);\n-      if (lp_nr)\n-\tlast = get_last_insn ();\n-    }\n-\n   /* If this is an expression of some kind and it has an associated line\n      number, then emit the line number before expanding the expression.\n \n@@ -7201,25 +7193,6 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n       ret = expand_expr_real_1 (exp, target, tmode, modifier, alt_rtl);\n     }\n \n-  /* If using non-call exceptions, mark all insns that may trap.\n-     expand_call() will mark CALL_INSNs before we get to this code,\n-     but it doesn't handle libcalls, and these may trap.  */\n-  if (lp_nr)\n-    {\n-      rtx insn;\n-      for (insn = next_real_insn (last); insn;\n-\t   insn = next_real_insn (insn))\n-\t{\n-\t  if (! find_reg_note (insn, REG_EH_REGION, NULL_RTX)\n-\t      /* If we want exceptions for non-call insns, any\n-\t\t may_trap_p instruction may throw.  */\n-\t      && GET_CODE (PATTERN (insn)) != CLOBBER\n-\t      && GET_CODE (PATTERN (insn)) != USE\n-\t      && insn_could_throw_p (insn))\n-\t    make_reg_eh_region_note (insn, 0, lp_nr);\n-\t}\n-    }\n-\n   return ret;\n }\n "}, {"sha": "9a0160c861a6681f0bddcc2194f33f45154c485d", "filename": "gcc/gimple.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -769,6 +769,10 @@ extern size_t const gimple_ops_offset_[];\n /* Map GIMPLE codes to GSS codes.  */\n extern enum gimple_statement_structure_enum const gss_for_code_[];\n \n+/* This variable holds the currently expanded gimple statement for purposes\n+   of comminucating the profile info to the builtin expanders.  */\n+extern gimple currently_expanding_gimple_stmt;\n+\n gimple gimple_build_return (tree);\n \n gimple gimple_build_assign_stat (tree, tree MEM_STAT_DECL);"}, {"sha": "078a72a8bccb698efc5f3cdfbd423f92af0e042c", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -133,12 +133,12 @@ create_var_ann (tree t)\n   var_ann_t ann;\n \n   gcc_assert (t);\n-  gcc_assert (DECL_P (t));\n-  gcc_assert (!t->base.ann || t->base.ann->common.type == VAR_ANN);\n+  gcc_assert (TREE_CODE (t) == VAR_DECL\n+\t      || TREE_CODE (t) == PARM_DECL\n+\t      || TREE_CODE (t) == RESULT_DECL);\n \n   ann = GGC_CNEW (struct var_ann_d);\n-  ann->common.type = VAR_ANN;\n-  t->base.ann = (tree_ann_t) ann;\n+  *DECL_VAR_ANN_PTR (t) = ann;\n \n   return ann;\n }\n@@ -188,24 +188,6 @@ renumber_gimple_stmt_uids_in_blocks (basic_block *blocks, int n_blocks)\n     }\n }\n \n-/* Create a new annotation for a tree T.  */\n-\n-tree_ann_common_t\n-create_tree_common_ann (tree t)\n-{\n-  tree_ann_common_t ann;\n-\n-  gcc_assert (t);\n-  gcc_assert (!t->base.ann || t->base.ann->common.type == TREE_ANN_COMMON);\n-\n-  ann = GGC_CNEW (struct tree_ann_common_d);\n-\n-  ann->type = TREE_ANN_COMMON;\n-  t->base.ann = (tree_ann_t) ann;\n-\n-  return ann;\n-}\n-\n /* Build a temporary.  Make sure and register it to be renamed.  */\n \n tree\n@@ -654,7 +636,7 @@ remove_referenced_var (tree var)\n       && (v_ann = var_ann (var)))\n     {\n       ggc_free (v_ann);\n-      var->base.ann = NULL;\n+      *DECL_VAR_ANN_PTR (var) = NULL;\n     }\n   gcc_assert (DECL_P (var));\n   in.uid = uid;"}, {"sha": "61c44f1fb14dd8764056d85076eeecab01d2f51d", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -203,21 +203,6 @@ lookup_stmt_eh_lp (gimple t)\n   return lookup_stmt_eh_lp_fn (cfun, t);\n }\n \n-/* Likewise, but reference a tree expression instead.  */\n-\n-int\n-lookup_expr_eh_lp (tree t)\n-{\n-  if (cfun && cfun->eh->throw_stmt_table && t && EXPR_P (t))\n-    {\n-      tree_ann_common_t ann = tree_common_ann (t);\n-      if (ann)\n-\treturn ann->lp_nr;\n-    }\n-  return 0;\n-}\n-\n-\n /* First pass of EH node decomposition.  Build up a tree of GIMPLE_TRY_FINALLY\n    nodes and LABEL_DECL nodes.  We will use this during the second phase to\n    determine if a goto leaves the body of a TRY_FINALLY_EXPR node.  */"}, {"sha": "56dc9f038b6f742ae9cfa0adfc10123b0a039f8e", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 5, "deletions": 38, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -152,24 +152,18 @@ fill_referenced_var_vec (VEC (tree, heap) **vec)\n static inline var_ann_t\n var_ann (const_tree t)\n {\n-  var_ann_t ann;\n-\n-  if (!t->base.ann)\n-    return NULL;\n-  ann = (var_ann_t) t->base.ann;\n-\n-  gcc_assert (ann->common.type == VAR_ANN);\n-\n-  return ann;\n+  const var_ann_t *p = DECL_VAR_ANN_PTR (t);\n+  return p ? *p : NULL;\n }\n \n /* Return the variable annotation for T, which must be a _DECL node.\n    Create the variable annotation if it doesn't exist.  */\n static inline var_ann_t\n get_var_ann (tree var)\n {\n-  var_ann_t ann = var_ann (var);\n-  return (ann) ? ann : create_var_ann (var);\n+  var_ann_t *p = DECL_VAR_ANN_PTR (var);\n+  gcc_assert (p);\n+  return *p ? *p : create_var_ann (var);\n }\n \n /* Get the number of the next statement uid to be allocated.  */\n@@ -193,13 +187,6 @@ inc_gimple_stmt_max_uid (struct function *fn)\n   return fn->last_stmt_uid++;\n }\n \n-/* Return the annotation type for annotation ANN.  */\n-static inline enum tree_ann_type\n-ann_type (tree_ann_t ann)\n-{\n-  return ann->common.type;\n-}\n-\n /* Return the line number for EXPR, or return -1 if we have no line\n    number information for it.  */\n static inline int\n@@ -678,26 +665,6 @@ is_call_used (const_tree var)\n \t      && pt_solution_includes (&cfun->gimple_df->callused, var)));\n }\n \n-/* Return the common annotation for T.  Return NULL if the annotation\n-   doesn't already exist.  */\n-static inline tree_ann_common_t\n-tree_common_ann (const_tree t)\n-{\n-  /* Watch out static variables with unshared annotations.  */\n-  if (DECL_P (t) && TREE_CODE (t) == VAR_DECL)\n-    return &var_ann (t)->common;\n-  return &t->base.ann->common;\n-}\n-\n-/* Return a common annotation for T.  Create the constant annotation if it\n-   doesn't exist.  */\n-static inline tree_ann_common_t\n-get_tree_common_ann (tree t)\n-{\n-  tree_ann_common_t ann = tree_common_ann (t);\n-  return (ann) ? ann : create_tree_common_ann (t);\n-}\n-\n /*  -----------------------------------------------------------------------  */\n \n /* The following set of routines are used to iterator over various type of"}, {"sha": "bec184d336e6215b4fd2902d272e4d1f2ac67251", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -125,24 +125,6 @@ struct GTY(()) ptr_info_def\n };\n \n \n-/*---------------------------------------------------------------------------\n-\t\t   Tree annotations stored in tree_base.ann\n----------------------------------------------------------------------------*/\n-enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, FUNCTION_ANN };\n-\n-struct GTY(()) tree_ann_common_d {\n-  /* Annotation type.  */\n-  enum tree_ann_type type;\n-\n-  /* Record EH landing pad number into a statement tree created\n-     during RTL expansion (see gimple_to_tree).  */\n-  int lp_nr;\n-\n-  /* Pointer to original GIMPLE statement.  Used during RTL expansion\n-     (see gimple_to_tree).  */\n-  gimple stmt;\n-};\n-\n /* It is advantageous to avoid things like life analysis for variables which\n    do not need PHI nodes.  This enum describes whether or not a particular\n    variable may need a PHI node.  */\n@@ -192,8 +174,6 @@ enum noalias_state {\n \n \n struct GTY(()) var_ann_d {\n-  struct tree_ann_common_d common;\n-\n   /* Used when building base variable structures in a var_map.  */\n   unsigned base_var_processed : 1;\n \n@@ -318,20 +298,10 @@ typedef struct immediate_use_iterator_d\n \n \n \n-union GTY((desc (\"ann_type ((tree_ann_t)&%h)\"))) tree_ann_d {\n-  struct tree_ann_common_d GTY((tag (\"TREE_ANN_COMMON\"))) common;\n-  struct var_ann_d GTY((tag (\"VAR_ANN\"))) vdecl;\n-};\n-\n-typedef union tree_ann_d *tree_ann_t;\n typedef struct var_ann_d *var_ann_t;\n-typedef struct tree_ann_common_d *tree_ann_common_t;\n \n-static inline tree_ann_common_t tree_common_ann (const_tree);\n-static inline tree_ann_common_t get_tree_common_ann (tree);\n static inline var_ann_t var_ann (const_tree);\n static inline var_ann_t get_var_ann (tree);\n-static inline enum tree_ann_type ann_type (tree_ann_t);\n static inline void update_stmt (gimple);\n static inline int get_lineno (const_gimple);\n \n@@ -556,7 +526,6 @@ extern const char *op_symbol_code (enum tree_code);\n extern var_ann_t create_var_ann (tree);\n extern void renumber_gimple_stmt_uids (void);\n extern void renumber_gimple_stmt_uids_in_blocks (basic_block *, int);\n-extern tree_ann_common_t create_tree_common_ann (tree);\n extern void dump_dfa_stats (FILE *);\n extern void debug_dfa_stats (void);\n extern void debug_referenced_vars (void);\n@@ -856,7 +825,6 @@ extern void add_stmt_to_eh_lp (gimple, int);\n extern bool remove_stmt_from_eh_lp (gimple);\n extern bool remove_stmt_from_eh_lp_fn (struct function *, gimple);\n extern int lookup_stmt_eh_lp_fn (struct function *, gimple);\n-extern int lookup_expr_eh_lp (tree);\n extern int lookup_stmt_eh_lp (gimple);\n extern bool maybe_clean_eh_stmt_fn (struct function *, gimple);\n extern bool maybe_clean_eh_stmt (gimple);"}, {"sha": "7fe94ee944dd959f4e115ce376c525a1a7fe23f3", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -1138,9 +1138,11 @@ delete_tree_ssa (void)\n     {\n       if (is_global_var (var))\n \tcontinue;\n-      if (var->base.ann)\n-        ggc_free (var->base.ann);\n-      var->base.ann = NULL;\n+      if (var_ann (var))\n+\t{\n+\t  ggc_free (var_ann (var));\n+\t  *DECL_VAR_ANN_PTR (var) = NULL;\n+\t}\n     }\n   htab_delete (gimple_referenced_vars (cfun));\n   cfun->gimple_df->referenced_vars = NULL;"}, {"sha": "a40c36ecf733964ee32d4341fffde208032aa83e", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -955,7 +955,8 @@ copy_node_stat (tree node MEM_STAT_DECL)\n   TREE_CHAIN (t) = 0;\n   TREE_ASM_WRITTEN (t) = 0;\n   TREE_VISITED (t) = 0;\n-  t->base.ann = 0;\n+  if (code == VAR_DECL || code == PARM_DECL || code == RESULT_DECL)\n+    *DECL_VAR_ANN_PTR (t) = 0;\n \n   if (TREE_CODE_CLASS (code) == tcc_declaration)\n     {"}, {"sha": "6fbac3aa2c75b45d8a785944402d5a1ed393811a", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5883ba0de68efad36db145e75c86394d8bd44ea/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a5883ba0de68efad36db145e75c86394d8bd44ea", "patch": "@@ -356,7 +356,6 @@ enum omp_clause_code\n \n    See the accessor macros, defined below, for documentation of the\n    fields.  */\n-union tree_ann_d;\n \n struct GTY(()) tree_base {\n   ENUM_BITFIELD(tree_code) code : 16;\n@@ -398,8 +397,6 @@ struct GTY(()) tree_base {\n      in tree_base instead of tree_type is to save space.  The size of the\n      field must be large enough to hold addr_space_t values.  */\n   unsigned address_space : 8;\n-\n-  union tree_ann_d *ann;\n };\n \n struct GTY(()) tree_common {\n@@ -2854,8 +2851,10 @@ struct GTY(()) tree_label_decl {\n   int eh_landing_pad_nr;\n };\n \n+struct var_ann_d;\n struct GTY(()) tree_result_decl {\n   struct tree_decl_with_rtl common;\n+  struct var_ann_d *ann;\n };\n \n struct GTY(()) tree_const_decl {\n@@ -2873,6 +2872,7 @@ struct GTY(()) tree_const_decl {\n struct GTY(()) tree_parm_decl {\n   struct tree_decl_with_rtl common;\n   rtx incoming_rtl;\n+  struct var_ann_d *ann;\n };\n \n \n@@ -3082,8 +3082,15 @@ extern void decl_fini_priority_insert (tree, priority_type);\n #define DECL_THREAD_LOCAL_P(NODE) \\\n   (VAR_DECL_CHECK (NODE)->decl_with_vis.tls_model >= TLS_MODEL_REAL)\n \n+#define DECL_VAR_ANN_PTR(NODE) \\\n+  (TREE_CODE (NODE) == VAR_DECL ? &(NODE)->var_decl.ann \\\n+   : TREE_CODE (NODE) == PARM_DECL ? &(NODE)->parm_decl.ann \\\n+   : TREE_CODE (NODE) == RESULT_DECL ? &(NODE)->result_decl.ann \\\n+   : NULL)\n+\n struct GTY(()) tree_var_decl {\n   struct tree_decl_with_vis common;\n+  struct var_ann_d *ann;\n };\n \n "}]}