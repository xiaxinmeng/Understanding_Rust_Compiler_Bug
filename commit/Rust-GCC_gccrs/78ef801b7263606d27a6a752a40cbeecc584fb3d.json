{"sha": "78ef801b7263606d27a6a752a40cbeecc584fb3d", "node_id": "C_kwDOANBUbNoAKDc4ZWY4MDFiNzI2MzYwNmQyN2E2YTc1MmE0MGNiZWVjYzU4NGZiM2Q", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-07T10:01:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-08T14:05:17Z"}, "message": "Fix some gimple_ctrl_altering_p mistakes\n\nCFG cleanup resets the control altering flag for noreturn functions\nwhen they are ECF_LEAF (like __builtin_unreachable ()).  The\n.ABNORMAL_DISPATCHER call built during CFG construction is not\nmarked as control altering.  Several passes inserting traps or\nunreachables fail to set the flag.  And more.\n\n\tPR middle-end/106870\n\t* gimple-harden-conditionals.cc (insert_check_and_trap):\n\tSet the control-altering flag on the built IFN_TRAP.\n\t* gimple.cc (gimple_build_builtin_unreachable): Likewise.\n\t* tree-cfg.cc (handle_abnormal_edges): Set the control-altering\n\tflag on the .ABNORMAL_DISPATCHER call.\n\t* tree-cfgcleanup.cc (cleanup_call_ctrl_altering_flag): Avoid\n\tresetting the control altering flag for ECF_NORETURN calls.\n\t(cleanup_control_flow_bb): Set the control altering flag on\n\tdiscovered noreturn calls.\n\t* symtab-thunks.cc (expand_thunk): Set the control altering\n\tflag for the noreturn tailcall case.\n\t* tree-eh.cc (lower_resx): Likewisw for trap and unwind_resume\n\tcalls.", "tree": {"sha": "b523e083051e0bed3f186cc7716ece05e98c280f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b523e083051e0bed3f186cc7716ece05e98c280f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78ef801b7263606d27a6a752a40cbeecc584fb3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ef801b7263606d27a6a752a40cbeecc584fb3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ef801b7263606d27a6a752a40cbeecc584fb3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ef801b7263606d27a6a752a40cbeecc584fb3d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4db3cb781c355341fa041e6b5bbbfc495c6a0fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "1b3dd563baaae05eec058cb1862fd9d5a4242b31", "filename": "gcc/gimple-harden-conditionals.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Fgimple-harden-conditionals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Fgimple-harden-conditionals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-harden-conditionals.cc?ref=78ef801b7263606d27a6a752a40cbeecc584fb3d", "patch": "@@ -238,6 +238,7 @@ insert_check_and_trap (location_t loc, gimple_stmt_iterator *gsip,\n \n   gimple_stmt_iterator gsit = gsi_after_labels (trp);\n   gcall *trap = gimple_build_call (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+  gimple_call_set_ctrl_altering (trap, true);\n   gimple_set_location (trap, loc);\n   gsi_insert_before (&gsit, trap, GSI_SAME_STMT);\n "}, {"sha": "4d45311b45cdd77e8d8e54c9635c1f1b15cb7d9d", "filename": "gcc/gimple.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Fgimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Fgimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.cc?ref=78ef801b7263606d27a6a752a40cbeecc584fb3d", "patch": "@@ -440,6 +440,7 @@ gimple_build_builtin_unreachable (location_t loc)\n       gcc_checking_assert (data == NULL_TREE);\n       g = gimple_build_call_internal (IFN_TRAP, 0);\n     }\n+  gimple_call_set_ctrl_altering (g, true);\n   gimple_set_location (g, loc);\n   return g;\n }"}, {"sha": "bd50c6897619b48f754e3c361d667c4bff5bf6c2", "filename": "gcc/symtab-thunks.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Fsymtab-thunks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Fsymtab-thunks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab-thunks.cc?ref=78ef801b7263606d27a6a752a40cbeecc584fb3d", "patch": "@@ -635,6 +635,7 @@ expand_thunk (cgraph_node *node, bool output_asm_thunks,\n \t}\n       else\n \t{\n+\t  gimple_call_set_ctrl_altering (call, true);\n \t  gimple_call_set_tail (call, true);\n \t  cfun->tail_call_marked = true;\n \t  remove_edge (single_succ_edge (bb));"}, {"sha": "e39d9471220d220adad961cedda346b5d6d51c10", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=78ef801b7263606d27a6a752a40cbeecc584fb3d", "patch": "@@ -821,8 +821,9 @@ handle_abnormal_edges (basic_block *dispatcher_bbs, basic_block for_bb,\n       else\n \t{\n \t  tree arg = inner ? boolean_true_node : boolean_false_node;\n-\t  gimple *g = gimple_build_call_internal (IFN_ABNORMAL_DISPATCHER,\n+\t  gcall *g = gimple_build_call_internal (IFN_ABNORMAL_DISPATCHER,\n \t\t\t\t\t\t 1, arg);\n+\t  gimple_call_set_ctrl_altering (g, true);\n \t  gimple_stmt_iterator gsi = gsi_after_labels (*dispatcher);\n \t  gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n "}, {"sha": "b4869aee78d100559e060bfefb41d49896bf7199", "filename": "gcc/tree-cfgcleanup.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Ftree-cfgcleanup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Ftree-cfgcleanup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.cc?ref=78ef801b7263606d27a6a752a40cbeecc584fb3d", "patch": "@@ -220,9 +220,10 @@ cleanup_call_ctrl_altering_flag (basic_block bb, gimple *bb_end)\n     return;\n \n   int flags = gimple_call_flags (bb_end);\n-  if (((flags & (ECF_CONST | ECF_PURE))\n-       && !(flags & ECF_LOOPING_CONST_OR_PURE))\n-      || (flags & ECF_LEAF))\n+  if (!(flags & ECF_NORETURN)\n+      && (((flags & (ECF_CONST | ECF_PURE))\n+\t   && !(flags & ECF_LOOPING_CONST_OR_PURE))\n+\t  || (flags & ECF_LEAF)))\n     gimple_call_set_ctrl_altering (bb_end, false);\n   else\n     {\n@@ -328,6 +329,10 @@ cleanup_control_flow_bb (basic_block bb)\n \tgsi_remove (&gsi, true);\n       if (remove_fallthru_edge (bb->succs))\n \tretval = true;\n+      tree lhs = gimple_call_lhs (stmt);\n+      if (!lhs\n+\t  || !should_remove_lhs_p (lhs))\n+\tgimple_call_set_ctrl_altering (stmt, true);\n     }\n \n   return retval;"}, {"sha": "ae8fa21d9a37225b06465cee0c4359f6e108dcf3", "filename": "gcc/tree-eh.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Ftree-eh.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef801b7263606d27a6a752a40cbeecc584fb3d/gcc%2Ftree-eh.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.cc?ref=78ef801b7263606d27a6a752a40cbeecc584fb3d", "patch": "@@ -3321,7 +3321,7 @@ lower_resx (basic_block bb, gresx *stmt,\n   int lp_nr;\n   eh_region src_r, dst_r;\n   gimple_stmt_iterator gsi;\n-  gimple *x;\n+  gcall *x;\n   tree fn, src_nr;\n   bool ret = false;\n \n@@ -3346,6 +3346,7 @@ lower_resx (basic_block bb, gresx *stmt,\n \n       fn = builtin_decl_implicit (BUILT_IN_TRAP);\n       x = gimple_build_call (fn, 0);\n+      gimple_call_set_ctrl_altering (x, true);\n       gsi_insert_before (&gsi, x, GSI_SAME_STMT);\n \n       while (EDGE_COUNT (bb->succs) > 0)\n@@ -3463,6 +3464,7 @@ lower_resx (basic_block bb, gresx *stmt,\n \n \t  fn = builtin_decl_implicit (BUILT_IN_UNWIND_RESUME);\n \t  x = gimple_build_call (fn, 1, var);\n+\t  gimple_call_set_ctrl_altering (x, true);\n \t  gsi_insert_before (&gsi, x, GSI_SAME_STMT);\n \t}\n "}]}