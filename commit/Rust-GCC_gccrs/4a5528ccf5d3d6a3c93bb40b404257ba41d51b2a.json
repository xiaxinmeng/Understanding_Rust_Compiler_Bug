{"sha": "4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE1NTI4Y2NmNWQzZDZhM2M5M2JiNDBiNDA0MjU3YmE0MWQ1MWIyYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2010-04-14T16:16:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-14T16:16:31Z"}, "message": "i386.md (maxmin_int): Rename code attribute from maxminiprefix and update all users.\n\n\t* config/i386/i386.md (maxmin_int): Rename code attribute from\n\tmaxminiprefix and update all users.\n\t(maxmin_float): Ditto from maxminfprefix.\n\t(logic): Ditto from logicprefix.\n\t(absneg_mnemonic): Ditto from absnegprefix.\n\t* config/i386/mmx.md: Update all users of maxminiprefix,\n\tmaxminfprefix and loficprefix for rename.\n\t* config/i386/sse.md: Ditto.\n\t* config/i386/sync.md (sync_<code><mode>): Update for\n\tlogicprefix rename.\n\nFrom-SVN: r158350", "tree": {"sha": "e2be1e245d9122761de96a1482b414f00c743c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2be1e245d9122761de96a1482b414f00c743c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "289fcbbd6e1e9683416f6a6380faa9471787e079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289fcbbd6e1e9683416f6a6380faa9471787e079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289fcbbd6e1e9683416f6a6380faa9471787e079"}], "stats": {"total": 121, "additions": 67, "deletions": 54}, "files": [{"sha": "f702110c332189b6b81303b60fd93affdad76f51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "patch": "@@ -1,3 +1,16 @@\n+2010-04-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (maxmin_int): Rename code attribute from\n+\tmaxminiprefix and update all users.\n+\t(maxmin_float): Ditto from maxminfprefix.\n+\t(logic): Ditto from logicprefix.\n+\t(absneg_mnemonic): Ditto from absnegprefix.\n+\t* config/i386/mmx.md: Update all users of maxminiprefix,\n+\tmaxminfprefix and loficprefix for rename.\n+\t* config/i386/sse.md: Ditto.\n+\t* config/i386/sync.md (sync_<code><mode>): Update for\n+\tlogicprefix rename.\n+\n 2010-04-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR 42966"}, {"sha": "557bb3b14659e5b8ae46384ab65aa21346d2bdb6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "patch": "@@ -713,16 +713,16 @@\n (define_code_iterator maxmin [smax smin umax umin])\n \n ;; Base name for integer and FP insn mnemonic\n-(define_code_attr maxminiprefix [(smax \"maxs\") (smin \"mins\")\n-\t\t\t\t (umax \"maxu\") (umin \"minu\")])\n-(define_code_attr maxminfprefix [(smax \"max\") (smin \"min\")])\n+(define_code_attr maxmin_int [(smax \"maxs\") (smin \"mins\")\n+\t\t\t      (umax \"maxu\") (umin \"minu\")])\n+(define_code_attr maxmin_float [(smax \"max\") (smin \"min\")])\n \n ;; Mapping of logic operators\n (define_code_iterator any_logic [and ior xor])\n (define_code_iterator any_or [ior xor])\n \n ;; Base name for insn mnemonic.\n-(define_code_attr logicprefix [(and \"and\") (ior \"or\") (xor \"xor\")])\n+(define_code_attr logic [(and \"and\") (ior \"or\") (xor \"xor\")])\n \n ;; Mapping of shift-right operators\n (define_code_iterator any_shiftrt [lshiftrt ashiftrt])\n@@ -746,7 +746,7 @@\n (define_code_iterator absneg [abs neg])\n \n ;; Base name for x87 insn mnemonic.\n-(define_code_attr absnegprefix [(abs \"abs\") (neg \"chs\")])\n+(define_code_attr absneg_mnemonic [(abs \"abs\") (neg \"chs\")])\n \n ;; Used in signed and unsigned widening multiplications.\n (define_code_iterator any_extend [sign_extend zero_extend])\n@@ -8785,7 +8785,7 @@\n \t (match_operand:SWI248 2 \"<general_operand>\" \"<g>,r<i>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<logicprefix>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  \"<logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -8797,9 +8797,9 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, QImode, operands)\"\n   \"@\n-   <logicprefix>{b}\\t{%2, %0|%0, %2}\n-   <logicprefix>{b}\\t{%2, %0|%0, %2}\n-   <logicprefix>{l}\\t{%k2, %k0|%k0, %k2}\"\n+   <logic>{b}\\t{%2, %0|%0, %2}\n+   <logic>{b}\\t{%2, %0|%0, %2}\n+   <logic>{l}\\t{%k2, %k0|%k0, %k2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI,QI,SI\")])\n \n@@ -8811,7 +8811,7 @@\n \t\t    (match_operand:SI 2 \"general_operand\" \"g\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n-  \"<logicprefix>{l}\\t{%2, %k0|%k0, %2}\"\n+  \"<logic>{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -8822,7 +8822,7 @@\n \t (match_operand:DI 2 \"x86_64_zext_immediate_operand\" \"Z\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n-  \"<logicprefix>{l}\\t{%2, %k0|%k0, %2}\"\n+  \"<logic>{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -8833,7 +8833,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"<logicprefix>{b}\\t{%1, %0|%0, %1}\"\n+  \"<logic>{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n \n@@ -8847,7 +8847,7 @@\n \t(any_or:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<logicprefix>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  \"<logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -8862,7 +8862,7 @@\n \t(zero_extend:DI (any_or:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n-  \"<logicprefix>{l}\\t{%2, %k0|%k0, %2}\"\n+  \"<logic>{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -8876,7 +8876,7 @@\n \t(any_or:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n-  \"<logicprefix>{l}\\t{%2, %k0|%k0, %2}\"\n+  \"<logic>{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -8890,7 +8890,7 @@\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCNOmode)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"<logicprefix>{b}\\t{%1, %0|%0, %1}\"\n+  \"<logic>{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n \n@@ -8903,7 +8903,7 @@\n    (clobber (match_scratch:SWI 0 \"=<r>\"))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<logicprefix>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  \"<logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -8919,7 +8919,7 @@\n \t  (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n-  \"<logicprefix>{b}\\t{%2, %h0|%h0, %2}\"\n+  \"<logic>{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"modrm\" \"1\")\n@@ -8939,7 +8939,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n-  \"<logicprefix>{b}\\t{%2, %h0|%h0, %2}\"\n+  \"<logic>{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8958,7 +8958,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n-  \"<logicprefix>{b}\\t{%2, %h0|%h0, %2}\"\n+  \"<logic>{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8976,7 +8976,7 @@\n \t\t\t   (const_int 8))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n-  \"<logicprefix>{b}\\t{%h2, %h0|%h0, %h2}\"\n+  \"<logic>{b}\\t{%h2, %h0|%h0, %h2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n@@ -9366,7 +9366,7 @@\n   \"TARGET_80387\n    && (reload_completed\n        || !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n-  \"f<absnegprefix>\"\n+  \"f<absneg_mnemonic>\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -9375,7 +9375,7 @@\n \t(absneg:DF (float_extend:DF\n \t\t     (match_operand:SF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387 && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\"\n-  \"f<absnegprefix>\"\n+  \"f<absneg_mnemonic>\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])\n \n@@ -9384,16 +9384,16 @@\n \t(absneg:XF (float_extend:XF\n \t\t     (match_operand:SF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n-  \"f<absnegprefix>\"\n+  \"f<absneg_mnemonic>\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"*<code>extenddfxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(absneg:XF (float_extend:XF\n-\t\t      (match_operand:DF 1 \"register_operand\" \"0\"))))]\n+\t\t     (match_operand:DF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n-  \"f<absnegprefix>\"\n+  \"f<absneg_mnemonic>\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n \n@@ -16898,7 +16898,7 @@\n \t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"%x\")\n \t  (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm\")))]\n   \"AVX_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n-  \"v<maxminfprefix>s<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"v<maxmin_float>s<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -16909,7 +16909,7 @@\n \t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n-  \"<maxminfprefix>s<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n+  \"<maxmin_float>s<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<MODE>\")])\n "}, {"sha": "af19732624a5f302cf42e901fb8e6d1ac39c82ad", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "patch": "@@ -396,7 +396,7 @@\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_3DNOW && flag_finite_math_only\n    && ix86_binary_operator_ok (<CODE>, V2SFmode, operands)\"\n-  \"pf<maxminfprefix>\\t{%2, %0|%0, %2}\"\n+  \"pf<maxmin_float>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n@@ -407,7 +407,7 @@\n \t  (match_operand:V2SF 1 \"register_operand\" \"0\")\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_3DNOW\"\n-  \"pf<maxminfprefix>\\t{%2, %0|%0, %2}\"\n+  \"pf<maxmin_float>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n@@ -970,7 +970,7 @@\n \t  (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"(TARGET_SSE || TARGET_3DNOW_A)\n    && ix86_binary_operator_ok (<CODE>, V4HImode, operands)\"\n-  \"p<maxminiprefix>w\\t{%2, %0|%0, %2}\"\n+  \"p<maxmin_int>w\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -989,7 +989,7 @@\n \t  (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"(TARGET_SSE || TARGET_3DNOW_A)\n    && ix86_binary_operator_ok (<CODE>, V8QImode, operands)\"\n-  \"p<maxminiprefix>b\\t{%2, %0|%0, %2}\"\n+  \"p<maxmin_int>b\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -1099,7 +1099,7 @@\n \t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n   \"TARGET_MMX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<logicprefix>\\t{%2, %0|%0, %2}\"\n+  \"p<logic>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"DI\")])\n "}, {"sha": "0baefd8470509bd3bdd42d29f202b044313667f4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "patch": "@@ -1015,7 +1015,7 @@\n \t  (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n   \"AVX_VEC_FLOAT_MODE_P (<MODE>mode) && flag_finite_math_only\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"v<maxminfprefix>p<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"v<maxmin_float>p<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1027,7 +1027,7 @@\n \t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode) && flag_finite_math_only\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<maxminfprefix>p<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n+  \"<maxmin_float>p<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1037,7 +1037,7 @@\n \t  (match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"%x\")\n \t  (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n   \"AVX_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"v<maxminfprefix>p<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"v<maxmin_float>p<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n@@ -1048,7 +1048,7 @@\n \t  (match_operand:SSEMODEF2P 1 \"register_operand\" \"0\")\n \t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"<maxminfprefix>p<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n+  \"<maxmin_float>p<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1061,7 +1061,7 @@\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"AVX128_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"v<maxminfprefix>s<ssemodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"v<maxmin_float>s<ssemodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n@@ -1075,7 +1075,7 @@\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"<maxminfprefix>s<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n+  \"<maxmin_float>s<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -1597,7 +1597,7 @@\n \t  (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n   \"AVX_VEC_FLOAT_MODE_P (<MODE>mode)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"v<logicprefix>p<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"v<logic>p<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n@@ -1617,7 +1617,7 @@\n \t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<logicprefix>p<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n+  \"<logic>p<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1673,7 +1673,7 @@\n \t  (match_operand:MODEF 1 \"register_operand\" \"x\")\n \t  (match_operand:MODEF 2 \"register_operand\" \"x\")))]\n   \"AVX_FLOAT_MODE_P (<MODE>mode)\"\n-  \"v<logicprefix>p<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"v<logic>p<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<ssevecmode>\")])\n@@ -1684,7 +1684,7 @@\n \t  (match_operand:MODEF 1 \"register_operand\" \"0\")\n \t  (match_operand:MODEF 2 \"register_operand\" \"x\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"<logicprefix>p<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n+  \"<logic>p<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"<ssevecmode>\")])\n \n@@ -6031,7 +6031,7 @@\n \t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"%x\")\n \t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<maxminiprefix><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set (attr \"prefix_extra\")\n      (if_then_else\n@@ -6056,7 +6056,7 @@\n \t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V16QImode, operands)\"\n-  \"p<maxminiprefix>b\\t{%2, %0|%0, %2}\"\n+  \"p<maxmin_int>b\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -6075,7 +6075,7 @@\n \t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V8HImode, operands)\"\n-  \"p<maxminiprefix>w\\t{%2, %0|%0, %2}\"\n+  \"p<maxmin_int>w\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -6130,7 +6130,7 @@\n \t  (match_operand:SSEMODE14 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:SSEMODE14 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<maxminiprefix><ssevecsize>\\t{%2, %0|%0, %2}\"\n+  \"p<maxmin_int><ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -6186,7 +6186,7 @@\n \t  (match_operand:SSEMODE24 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:SSEMODE24 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<maxminiprefix><ssevecsize>\\t{%2, %0|%0, %2}\"\n+  \"p<maxmin_int><ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -6518,7 +6518,7 @@\n           (match_operand:AVX256MODEI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"v<logicprefix>ps\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"v<logic>ps\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecpsmode>\")])\n@@ -6530,7 +6530,7 @@\n           (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"(TARGET_SSE && !TARGET_SSE2)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<logicprefix>ps\\t{%2, %0|%0, %2}\"\n+  \"<logic>ps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -6541,7 +6541,7 @@\n           (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<logicprefix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vp<logic>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -6552,7 +6552,7 @@\n \t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<logicprefix>\\t{%2, %0|%0, %2}\"\n+  \"p<logic>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -6571,7 +6571,7 @@\n \t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0\")\n \t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, TFmode, operands)\"\n-  \"p<logicprefix>\\t{%2, %0|%0, %2}\"\n+  \"p<logic>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])"}, {"sha": "0fb10bc972ef3e2a07ceead132ca5fe8aa2a783a", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=4a5528ccf5d3d6a3c93bb40b404257ba41d51b2a", "patch": "@@ -236,4 +236,4 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock{%;| }<logicprefix>{<imodesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{%;| }<logic>{<imodesuffix>}\\t{%1, %0|%0, %1}\")"}]}