{"sha": "a6fe12b0a9a375e655945ff385810661d8bb494c", "node_id": "C_kwDOANBUbNoAKGE2ZmUxMmIwYTlhMzc1ZTY1NTk0NWZmMzg1ODEwNjYxZDhiYjQ5NGM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-08-09T23:06:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-01T06:13:36Z"}, "message": "[Ada] Info. gathering in preparation for more efficiency improvements\n\ngcc/ada/\n\n\t* atree.adb: Gather and print statistics about frequency of\n\tgetter and setter calls.\n\t* atree.ads (Print_Statistics): New procedure for printing\n\tstatistics.\n\t* debug.adb: Document -gnatd.A switch.\n\t* gen_il-gen.adb: Generate code for statistics gathering.\n\tChoose the offset of Homonym early.  Misc cleanup.  Put more\n\tcomments in the generated code.\n\t* gen_il-internals.ads (Unknown_Offset): New value to indicate\n\tthat the offset has not yet been chosen.\n\t* gnat1drv.adb: Call Print_Statistics.\n\t* libgnat/s-imglli.ads: Minor comment fix.\n\t* output.ads (Write_Int_64): New procedure to write a 64-bit\n\tvalue.  Needed for new statistics, and could come in handy\n\telsewhere.\n\t* output.adb (Write_Int_64): Likewise.\n\t* sinfo.ads: Remove obsolete comment. The xtreeprs program no\n\tlonger exists.\n\t* types.ads: New 64-bit types needed for new statistics.", "tree": {"sha": "56f4b101a3296d6c88ae641309ba536ebbd728be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56f4b101a3296d6c88ae641309ba536ebbd728be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6fe12b0a9a375e655945ff385810661d8bb494c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fe12b0a9a375e655945ff385810661d8bb494c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fe12b0a9a375e655945ff385810661d8bb494c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fe12b0a9a375e655945ff385810661d8bb494c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0ab2003576fd34f37afbf5cd39d714b261f3f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ab2003576fd34f37afbf5cd39d714b261f3f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ab2003576fd34f37afbf5cd39d714b261f3f05"}], "stats": {"total": 309, "additions": 243, "deletions": 66}, "files": [{"sha": "5af4b13bb3d13896541af63021755b07c7f1f1ae", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -211,6 +211,10 @@ package body Atree is\n      (Old_N : Entity_Id; New_Kind : Entity_Kind);\n    --  Above are the same as the ones for nodes, but for entities\n \n+   procedure Update_Kind_Statistics (Field : Node_Or_Entity_Field);\n+   --  Increment Set_Count (Field). This is in a procedure so we can put it in\n+   --  pragma Debug for efficiency.\n+\n    procedure Init_Nkind (N : Node_Id; Val : Node_Kind);\n    --  Initialize the Nkind field, which must not have been set already. This\n    --  cannot be used to modify an already-initialized Nkind field. See also\n@@ -905,7 +909,7 @@ package body Atree is\n       Old_Kind : constant Node_Kind := Nkind (Old_N);\n \n       --  If this fails, it means you need to call Reinit_Field_To_Zero before\n-      --  calling Set_Nkind.\n+      --  calling Mutate_Nkind.\n \n    begin\n       for J in Node_Field_Table (Old_Kind)'Range loop\n@@ -970,11 +974,17 @@ package body Atree is\n    Nkind_Offset : constant Field_Offset :=\n      Field_Descriptors (F_Nkind).Offset;\n \n+   procedure Update_Kind_Statistics (Field : Node_Or_Entity_Field) is\n+   begin\n+      Set_Count (Field) := Set_Count (Field) + 1;\n+   end Update_Kind_Statistics;\n+\n    procedure Set_Node_Kind_Type is new Set_8_Bit_Field (Node_Kind) with Inline;\n \n    procedure Init_Nkind (N : Node_Id; Val : Node_Kind) is\n       pragma Assert (Field_Is_Initial_Zero (N, F_Nkind));\n    begin\n+      pragma Debug (Update_Kind_Statistics (F_Nkind));\n       Set_Node_Kind_Type (N, Nkind_Offset, Val);\n    end Init_Nkind;\n \n@@ -1017,6 +1027,7 @@ package body Atree is\n          Zero_Dynamic_Slots (Off_F (N) + Old_Size, Slots.Last);\n       end if;\n \n+      pragma Debug (Update_Kind_Statistics (F_Nkind));\n       Set_Node_Kind_Type (N, Nkind_Offset, Val);\n       pragma Debug (Validate_Node_Write (N));\n \n@@ -1049,6 +1060,7 @@ package body Atree is\n       --  For now, we are allocating all entities with the same size, so we\n       --  don't need to reallocate slots here.\n \n+      pragma Debug (Update_Kind_Statistics (F_Ekind));\n       Set_Entity_Kind_Type (N, Ekind_Offset, Val);\n       pragma Debug (Validate_Node_Write (N));\n \n@@ -1535,8 +1547,7 @@ package body Atree is\n       for J in Fields'Range loop\n          declare\n             use Seinfo;\n-            Desc : Field_Descriptor renames\n-              Field_Descriptors (Fields (J));\n+            Desc : Field_Descriptor renames Field_Descriptors (Fields (J));\n          begin\n             if Desc.Kind in Node_Id_Field | List_Id_Field then\n                Fix_Parent (Get_Node_Field_Union (Fix_Node, Desc.Offset));\n@@ -2477,4 +2488,60 @@ package body Atree is\n       Zero_Header_Slots (N);\n    end Zero_Slots;\n \n+   ----------------------\n+   -- Print_Statistics --\n+   ----------------------\n+\n+   procedure Print_Statistics is\n+      Total, G_Total, S_Total : Call_Count := 0;\n+   begin\n+      Write_Line (\"Frequency of field getter and setter calls:\");\n+\n+      for Field in Node_Or_Entity_Field loop\n+         G_Total := G_Total + Get_Count (Field);\n+         S_Total := S_Total + Set_Count (Field);\n+         Total := G_Total + S_Total;\n+      end loop;\n+\n+      Write_Int_64 (Total);\n+      Write_Str (\" (100%) = \");\n+      Write_Int_64 (G_Total);\n+      Write_Str (\" + \");\n+      Write_Int_64 (S_Total);\n+      Write_Line (\" total getter and setter calls\");\n+\n+      for Field in Node_Or_Entity_Field loop\n+         declare\n+            G : constant Call_Count := Get_Count (Field);\n+            S : constant Call_Count := Set_Count (Field);\n+            GS : constant Call_Count := G + S;\n+\n+            Percent : constant Int :=\n+              Int ((Long_Float (GS) / Long_Float (Total)) * 100.0);\n+\n+            use Seinfo;\n+            Desc : Field_Descriptor renames Field_Descriptors (Field);\n+            Slot : constant Field_Offset :=\n+              (Field_Size (Desc.Kind) * Desc.Offset) / Slot_Size;\n+\n+         begin\n+            Write_Int_64 (GS);\n+            Write_Str (\" (\");\n+            Write_Int (Percent);\n+            Write_Str (\"%)\");\n+            Write_Str (\" = \");\n+            Write_Int_64 (G);\n+            Write_Str (\" + \");\n+            Write_Int_64 (S);\n+            Write_Str (\" \");\n+            Write_Str (Node_Or_Entity_Field'Image (Field));\n+            Write_Str (\" in slot \");\n+            Write_Int (Int (Slot));\n+            Write_Str (\" size \");\n+            Write_Int (Int (Field_Size (Desc.Kind)));\n+            Write_Eol;\n+         end;\n+      end loop;\n+   end Print_Statistics;\n+\n end Atree;"}, {"sha": "7120ecf3f807fc4587ce33ecc9c412d6790c9839", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -862,4 +862,14 @@ package Atree is\n \n    end Atree_Private_Part;\n \n+   --  Statistics:\n+\n+   subtype Call_Count is Nat_64;\n+   Get_Count, Set_Count : array (Node_Or_Entity_Field) of Call_Count :=\n+     (others => 0);\n+   --  Number of calls to each getter and setter. See documentaton for\n+   --  -gnatd.A.\n+\n+   procedure Print_Statistics;\n+\n end Atree;"}, {"sha": "a7cdfae25819b863a9aeedc4f50e62aa57851422", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -112,7 +112,7 @@ package body Debug is\n    --  d.y  Disable implicit pragma Elaborate_All on task bodies\n    --  d.z  Restore previous support for frontend handling of Inline_Always\n \n-   --  d.A\n+   --  d.A  Enable statistics printing in Atree\n    --  d.B  Generate a bug box on abort_statement\n    --  d.C  Generate concatenation call, do not generate inline code\n    --  d.D  Disable errors on use of overriding keyword in Ada 95 mode\n@@ -830,6 +830,10 @@ package body Debug is\n    --       handling of Inline_Always by the front end on such targets. For the\n    --       targets that do not use the GCC back end, this switch is ignored.\n \n+   --  d.A  Enable statistics printing in Atree. First set Statistics_Enabled\n+   --       in gen_il-gen.adb to True, then rebuild, then run the compiler with\n+   --       -gnatd.A. You might want to apply \"sort -nr\" to the output.\n+\n    --  d.B  Generate a bug box when we see an abort_statement, even though\n    --       there is no bug. Useful for testing Comperr.Compiler_Abort: write\n    --       some code containing an abort_statement, and compile it with"}, {"sha": "dd1e3a158448a0332a37215df5ee1a5738197e18", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 114, "deletions": 55, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -28,11 +28,18 @@ with Ada.Text_IO;\n \n package body Gen_IL.Gen is\n \n+   Statistics_Enabled : constant Boolean := False;\n+   --  Change to True or False to enable/disable statistics printed by\n+   --  Atree. Should normally be False, for efficiency. Also compile with\n+   --  -gnatd.A to get the statistics printed.  Enabling these statistics\n+   --  makes the compiler about 20% slower.\n+\n    Num_Header_Slots : constant := 3;\n    --  Number of header slots; the first Num_Header_Slots slots are stored in\n    --  the header; the rest are dynamically allocated in the Slots table. We\n    --  need to subtract this off when accessing dynamic slots. The constant\n-   --  Seinfo.N_Head will contain this value.\n+   --  Seinfo.N_Head will contain this value. Fields that are allocated in the\n+   --  header slots are quicker to access.\n    --\n    --  This number can be adjusted for efficiency. We choose 3 because the\n    --  minimum node size is 3 slots, and because that causes the size of type\n@@ -326,7 +333,7 @@ package body Gen_IL.Gen is\n             Pre => new String'(Pre),\n             Pre_Get => new String'(Pre_Get),\n             Pre_Set => new String'(Pre_Set),\n-            Offset => <>); -- filled in later\n+            Offset => Unknown_Offset);\n \n       --  The Field_Table entry has already been created by the 'then' part\n       --  above. Now we're seeing the same field being \"created\" again in a\n@@ -938,8 +945,7 @@ package body Gen_IL.Gen is\n            (F : Field_Enum; Offset : Field_Offset);\n          --  Mark the offset as \"in use\"\n \n-         function Choose_Offset\n-           (F : Field_Enum) return Field_Offset;\n+         procedure Choose_Offset (F : Field_Enum);\n          --  Choose an offset for this field\n \n          function Offset_OK\n@@ -979,14 +985,14 @@ package body Gen_IL.Gen is\n             end loop;\n          end Set_Offset_In_Use;\n \n-         function Choose_Offset\n-           (F : Field_Enum) return Field_Offset is\n+         procedure Choose_Offset (F : Field_Enum) is\n          begin\n             for Offset in Field_Offset loop\n                if Offset_OK (F, Offset) then\n                   Set_Offset_In_Use (F, Offset);\n \n-                  return Offset;\n+                  Field_Table (F).Offset := Offset;\n+                  return;\n                end if;\n             end loop;\n \n@@ -1059,8 +1065,18 @@ package body Gen_IL.Gen is\n          --  complication compared to standard graph coloring is that fields\n          --  are different sizes.\n \n+         --  First choose offsets for some heavily-used fields, so they will\n+         --  get low offsets, so they will wind up in the node header for\n+         --  faster access.\n+\n+         Choose_Offset (Homonym);\n+\n+         --  Then loop through them all, skipping the ones we did above\n+\n          for F of All_Fields loop\n-            Field_Table (F).Offset := Choose_Offset (F);\n+            if Field_Table (F).Offset = Unknown_Offset then\n+               Choose_Offset (F);\n+            end if;\n          end loop;\n \n       end Compute_Field_Offsets;\n@@ -1611,14 +1627,6 @@ package body Gen_IL.Gen is\n          Put (S, LF & \"subtype Flag is Boolean;\" & LF & LF);\n       end Put_Type_And_Subtypes;\n \n-      function Low_Level_Getter_Name (T : Type_Enum) return String is\n-        (\"Get_\" & Image (T));\n-      function Low_Level_Setter_Name (T : Type_Enum) return String is\n-        (\"Set_\" & Image (T));\n-      function Low_Level_Setter_Name (F : Field_Enum) return String is\n-        (Low_Level_Setter_Name (Field_Table (F).Field_Type) &\n-           (if Setter_Needs_Parent (F) then \"_With_Parent\" else \"\"));\n-\n       -------------------------------------------\n       -- Put_Casts --\n       -------------------------------------------\n@@ -1705,6 +1713,25 @@ package body Gen_IL.Gen is\n       --  Node_Id or Entity_Id, and the getter and setter will have\n       --  preconditions.\n \n+      procedure Put_Get_Set_Incr\n+        (S : in out Sink; F : Field_Enum; Get_Or_Set : String)\n+        with Pre => Get_Or_Set in \"Get\" | \"Set\";\n+      --  If statistics are enabled, put the appropriate increment statement\n+\n+      ----------------------\n+      -- Put_Get_Set_Incr --\n+      ----------------------\n+\n+      procedure Put_Get_Set_Incr\n+        (S : in out Sink; F : Field_Enum; Get_Or_Set : String) is\n+      begin\n+         if Statistics_Enabled then\n+            Put (S, \"Atree.\" & Get_Or_Set & \"_Count (\" & F_Image (F) &\n+                   \") := Atree.\" & Get_Or_Set & \"_Count (\" &\n+                   F_Image (F) & \") + 1;\" & LF);\n+         end if;\n+      end Put_Get_Set_Incr;\n+\n       ------------------------\n       -- Node_To_Fetch_From --\n       ------------------------\n@@ -1831,7 +1858,8 @@ package body Gen_IL.Gen is\n             pragma Assert (Field_Size (Rec.Field_Type) = 32);\n             Put (S, LF);\n             Increase_Indent (S, 2);\n-            Put (S, \"(if Raw = 0 then \" & Special_Default (Rec.Field_Type) & \" else \" & \"Cast (Raw));\");\n+            Put (S, \"(if Raw = 0 then \" & Special_Default (Rec.Field_Type) &\n+                   \" else \" & \"Cast (Raw));\");\n             Decrease_Indent (S, 2);\n \n          else\n@@ -1856,6 +1884,7 @@ package body Gen_IL.Gen is\n             Put (S, \"pragma Assert (\" & Rec.Pre_Get.all & \");\" & LF);\n          end if;\n \n+         Put_Get_Set_Incr (S, F, \"Get\");\n          Put (S, \"return Val;\" & LF);\n          Decrease_Indent (S, 3);\n          Put (S, \"end \" & Image (F) & \";\" & LF & LF);\n@@ -1954,6 +1983,7 @@ package body Gen_IL.Gen is\n             Put (S, \"S := Slot (Raw);\" & LF);\n          end if;\n \n+         Put_Get_Set_Incr (S, F, \"Set\");\n          Decrease_Indent (S, 3);\n          Put (S, \"end Set_\" & Image (F) & \";\" & LF & LF);\n       end Put_Setter_Body;\n@@ -2310,6 +2340,40 @@ package body Gen_IL.Gen is\n          if Root = Node_Kind then\n             declare\n                First_Time : Boolean := True;\n+               FS, FB, LB : Bit_Offset;\n+               --  Field size in bits, first bit, and last bit for the previous\n+               --  time around the loop. Used to print a comment after \",\".\n+\n+               procedure One_Comp (F : Field_Enum);\n+\n+               procedure One_Comp (F : Field_Enum) is\n+                  Offset : constant Field_Offset :=  Field_Table (F).Offset;\n+               begin\n+                  if First_Time then\n+                     First_Time := False;\n+                  else\n+                     Put (S, \",\");\n+\n+                     --  Print comment showing field's bits, except for 1-bit\n+                     --  fields.\n+\n+                     if FS /= 1 then\n+                        Put (S, \" -- *\" & Image (FS) & \" = bits \" &\n+                               Image (FB) & \"..\" & Image (LB));\n+                     end if;\n+\n+                     Put (S, LF);\n+                  end if;\n+\n+                  Put (S, F_Image (F) & \" => (\" &\n+                       Image (Field_Table (F).Field_Type) & \"_Field, \" &\n+                       Image (Offset) & \")\");\n+\n+                  FS := Field_Size (F);\n+                  FB := First_Bit (F, Offset);\n+                  LB := Last_Bit (F, Offset);\n+               end One_Comp;\n+\n             begin\n                Put (S, LF & \"--  Table mapping fields to kind and offset:\" & LF & LF);\n \n@@ -2321,22 +2385,11 @@ package body Gen_IL.Gen is\n                Increase_Indent (S, 1);\n \n                for F in Node_Field loop\n-                  if First_Time then\n-                     First_Time := False;\n-                  else\n-                     Put (S, \",\" & LF);\n-                  end if;\n-\n-                  Put (S, F_Image (F) & \" => (\" &\n-                       Image (Field_Table (F).Field_Type) & \"_Field, \" &\n-                       Image (Field_Table (F).Offset) & \")\");\n+                  One_Comp (F);\n                end loop;\n \n                for F in Entity_Field loop\n-                  Put (S, \",\" & LF);\n-                  Put (S, F_Image (F) & \" => (\" &\n-                       Image (Field_Table (F).Field_Type) & \"_Field, \" &\n-                       Image (Field_Table (F).Offset) & \")\");\n+                  One_Comp (F);\n                end loop;\n \n                Decrease_Indent (S, 1);\n@@ -2420,8 +2473,8 @@ package body Gen_IL.Gen is\n          --  the base type, because we are using zero-origin addressing in\n          --  Atree.\n \n-         Put (S, \"N_Head : constant Field_Offset := \" & N_Head & \";\" & LF);\n          Put (S, \"\" & LF);\n+         Put (S, \"N_Head : constant Field_Offset := \" & N_Head & \";\" & LF);\n          Put (S, \"type Node_Header_Slots is\" & LF);\n          Put (S, \"  array (Field_Offset range 0 .. N_Head - 1) of aliased Slot;\" & LF);\n          Put (S, \"type Node_Header is record\" & LF);\n@@ -2956,6 +3009,7 @@ package body Gen_IL.Gen is\n \n          declare\n             First_Time : Boolean := True;\n+\n          begin\n             for T in Concrete_Type loop\n                if First_Time then\n@@ -2977,40 +3031,45 @@ package body Gen_IL.Gen is\n                declare\n                   First_Time : Boolean := True;\n                   First_Bit : Bit_Offset := 0;\n+                  F : Opt_Field_Enum;\n+\n+                  function Node_Field_Of_Entity return String is\n+                     (if T in Entity_Type and then F in Node_Field then\n+                       \" -- N\" else \"\");\n+                  --  A comment to put out for fields of entities that are\n+                  --  shared with nodes, such as Chars.\n+\n                begin\n                   while First_Bit < Type_Bit_Size_Aligned (T) loop\n                      if First_Time then\n                         First_Time := False;\n                      else\n-                        Put (B, \",\" & LF);\n+                        Put (B, \",\" & Node_Field_Of_Entity & LF);\n                      end if;\n \n+                     F := Type_Layout (T) (First_Bit);\n+\n                      declare\n-                        F : constant Opt_Field_Enum :=\n-                          Type_Layout (T) (First_Bit);\n+                        Last_Bit : constant Bit_Offset :=\n+                          Get_Last_Bit (T, F, First_Bit);\n                      begin\n-                        declare\n-                           Last_Bit : constant Bit_Offset :=\n-                             Get_Last_Bit (T, F, First_Bit);\n-                        begin\n+                        pragma Assert\n+                          (Type_Layout (T) (First_Bit .. Last_Bit) =\n+                                           (First_Bit .. Last_Bit => F));\n+\n+                        if Last_Bit = First_Bit then\n+                           Put (B, First_Bit_Image (First_Bit) & \" => \" &\n+                                Image_Or_Waste (F));\n+                        else\n                            pragma Assert\n-                             (Type_Layout (T) (First_Bit .. Last_Bit) =\n-                                              (First_Bit .. Last_Bit => F));\n-\n-                           if Last_Bit = First_Bit then\n-                              Put (B, First_Bit_Image (First_Bit) & \" => \" &\n-                                   Image_Or_Waste (F));\n-                           else\n-                              pragma Assert\n-                                (if F /= No_Field then\n-                                  First_Bit mod Field_Size (F) = 0);\n-                              Put (B, First_Bit_Image (First_Bit) & \" .. \" &\n-                                   Last_Bit_Image (Last_Bit) & \" => \" &\n-                                   Image_Or_Waste (F));\n-                           end if;\n-\n-                           First_Bit := Last_Bit + 1;\n-                        end;\n+                             (if F /= No_Field then\n+                               First_Bit mod Field_Size (F) = 0);\n+                           Put (B, First_Bit_Image (First_Bit) & \" .. \" &\n+                                Last_Bit_Image (Last_Bit) & \" => \" &\n+                                Image_Or_Waste (F));\n+                        end if;\n+\n+                        First_Bit := Last_Bit + 1;\n                      end;\n                   end loop;\n                end;"}, {"sha": "11a99123f67db769b89a43b35d41e034f3dca661", "filename": "gcc/ada/gen_il-internals.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fgen_il-internals.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fgen_il-internals.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-internals.ads?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -147,6 +147,9 @@ package Gen_IL.Internals is\n    --  The default is No_Type_Only, indicating the field is not one of\n    --  these special \"[... only]\" ones.\n \n+   Unknown_Offset : constant := -1;\n+   --  Initial value of Offset, so we can tell whether it has been set\n+\n    type Field_Info is record\n       Have_This_Field : Type_Vector;\n       --  Types that have this field\n@@ -162,7 +165,7 @@ package Gen_IL.Internals is\n       --  Above record the information in the calls to Create_...Field.\n       --  See Gen_IL.Gen for details.\n \n-      Offset          : Field_Offset;\n+      Offset : Field_Offset'Base range Unknown_Offset .. Field_Offset'Last;\n       --  Offset of the field from the start of the node, in units of the field\n       --  size. So if a field is 4 bits in size, it starts at bit number\n       --  Offset*4 from the start of the node."}, {"sha": "55f9efa777bc6b1b2c8dee9b787382f019e1603b", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -1695,6 +1695,10 @@ begin\n \n    <<End_Of_Program>>\n \n+   if Debug_Flag_Dot_AA then\n+      Atree.Print_Statistics;\n+   end if;\n+\n --  The outer exception handler handles an unrecoverable error\n \n exception"}, {"sha": "e6e3efccd64d9162b24b71b79c422131c01d3382", "filename": "gcc/ada/libgnat/s-imglli.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Flibgnat%2Fs-imglli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Flibgnat%2Fs-imglli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imglli.ads?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -30,8 +30,8 @@\n ------------------------------------------------------------------------------\n \n --  This package contains the routines for supporting the Image attribute for\n---  signed integer types larger Integer, and also for conversion operations\n---  required in Text_IO.Integer_IO for such types.\n+--  signed integer types larger than Integer, and also for conversion\n+--  operations required in Text_IO.Integer_IO for such types.\n \n with System.Image_I;\n "}, {"sha": "00202fd1d2d8a4d875a469c45bef982b9248aeb1", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -467,6 +467,32 @@ package body Output is\n       end if;\n    end Write_Int;\n \n+   ------------------\n+   -- Write_Int_64 --\n+   ------------------\n+\n+   procedure Write_Int_64 (Val : Int_64) is\n+      subtype Nonpositive is Int_64 range Int_64'First .. 0;\n+      procedure Write_Abs (Val : Nonpositive);\n+\n+      procedure Write_Abs (Val : Nonpositive) is\n+      begin\n+         if Val < -9 then\n+            Write_Abs (Val / 10);\n+         end if;\n+\n+         Write_Char (Character'Val (-(Val rem 10) + Character'Pos ('0')));\n+      end Write_Abs;\n+\n+   begin\n+      if Val < 0 then\n+         Write_Char ('-');\n+         Write_Abs (Val);\n+      else\n+         Write_Abs (-Val);\n+      end if;\n+   end Write_Int_64;\n+\n    ----------------\n    -- Write_Line --\n    ----------------"}, {"sha": "5058d6dfbe1757cc15fb2456489d5d91a73d887d", "filename": "gcc/ada/output.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Foutput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Foutput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.ads?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -124,6 +124,7 @@ package Output is\n    --  Similar as Write_Eol, except that trailing spaces are not removed\n \n    procedure Write_Int (Val : Int);\n+   procedure Write_Int_64 (Val : Int_64);\n    --  Write an integer value with no leading blanks or zeroes. Negative values\n    --  are preceded by a minus sign).\n "}, {"sha": "b99edf75891e6b7356ff47de2c303f06addfac2a", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -411,10 +411,6 @@ package Sinfo is\n    --       Assignment_OK             set if modification is OK\n    --       Is_Controlling_Actual     set for controlling argument\n \n-   --  Note: the utility program that creates the Treeprs spec (in the file\n-   --  xtreeprs.adb) knows about the special fields here, so it must be\n-   --  modified if any change is made to these fields.\n-\n    --  Note: see under (EXPRESSION) for further details on the use of\n    --  the Paren_Count field to record the number of parentheses levels.\n "}, {"sha": "32194e8e75fd2d32db183bf1ca80b29ff5ce685d", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fe12b0a9a375e655945ff385810661d8bb494c/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=a6fe12b0a9a375e655945ff385810661d8bb494c", "patch": "@@ -61,6 +61,13 @@ package Types is\n \n    subtype Nonzero_Int is Int with Predicate => Nonzero_Int /= 0;\n \n+   type Int_64 is range -2 ** 63 .. +2 ** 63 - 1;\n+   --  Signed 64-bit integer\n+\n+   subtype Nat_64 is Int_64 range 0 .. Int_64'Last;\n+   subtype Pos_64 is Int_64 range 1 .. Int_64'Last;\n+   subtype Nonzero_Int_64 is Int_64 with Predicate => Nonzero_Int_64 /= 0;\n+\n    type Word is mod 2 ** 32;\n    --  Unsigned 32-bit integer\n "}]}