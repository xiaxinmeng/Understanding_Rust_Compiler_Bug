{"sha": "396eb900bbb7deb1243ea6de03fe881234314acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2ZWI5MDBiYmI3ZGViMTI0M2VhNmRlMDNmZTg4MTIzNDMxNGFjYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T12:37:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T12:37:03Z"}, "message": "[multiple changes]\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.ads, checks.adb (Activate_Overflow_Check): Do not set flag for\n\tunconstrained fpt ops.\n\n2014-07-31  Pascal Obry  <obry@adacore.com>\n\n\t* s-fileio.adb (Open): Make sure a shared file gets inserted into\n\tthe global list atomically. This ensures that the file descriptor\n\twon't be freed because another tasks is closing the file.\n\nFrom-SVN: r213349", "tree": {"sha": "da507e16b9cb1d5024f943ccf7be402675dd61cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da507e16b9cb1d5024f943ccf7be402675dd61cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/396eb900bbb7deb1243ea6de03fe881234314acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396eb900bbb7deb1243ea6de03fe881234314acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396eb900bbb7deb1243ea6de03fe881234314acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396eb900bbb7deb1243ea6de03fe881234314acb/comments", "author": null, "committer": null, "parents": [{"sha": "e8cddc3b5a9c50a9c7bd4b58b97f6384bc1aa807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8cddc3b5a9c50a9c7bd4b58b97f6384bc1aa807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8cddc3b5a9c50a9c7bd4b58b97f6384bc1aa807"}], "stats": {"total": 86, "additions": 64, "deletions": 22}, "files": [{"sha": "5f40546cb54b80d5d14734a8c189dedc52004d54", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396eb900bbb7deb1243ea6de03fe881234314acb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396eb900bbb7deb1243ea6de03fe881234314acb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=396eb900bbb7deb1243ea6de03fe881234314acb", "patch": "@@ -1,3 +1,14 @@\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.ads, checks.adb (Activate_Overflow_Check): Do not set flag for\n+\tunconstrained fpt ops.\n+\n+2014-07-31  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-fileio.adb (Open): Make sure a shared file gets inserted into\n+\tthe global list atomically. This ensures that the file descriptor\n+\twon't be freed because another tasks is closing the file.\n+\n 2014-07-31  Vincent Celier  <celier@adacore.com>\n \n \t* projects.texi: Minor spelling error fix."}, {"sha": "facf85ba5eb667dbb4515bfc9aba38041b06d563", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396eb900bbb7deb1243ea6de03fe881234314acb/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396eb900bbb7deb1243ea6de03fe881234314acb/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=396eb900bbb7deb1243ea6de03fe881234314acb", "patch": "@@ -389,10 +389,31 @@ package body Checks is\n \n    procedure Activate_Overflow_Check (N : Node_Id) is\n    begin\n-      if not Nkind_In (N, N_Op_Rem, N_Op_Mod, N_Op_Plus) then\n-         Set_Do_Overflow_Check (N, True);\n-         Possible_Local_Raise (N, Standard_Constraint_Error);\n+      --  Nothing to do for unconstrained floating-point types (the test for\n+      --  Etype (N) being present seems necessary in some cases, should be\n+      --  tracked down, but for now just ignore the check in this case ???)\n+\n+      if Present (Etype (N))\n+        and then Is_Floating_Point_Type (Etype (N))\n+        and then not Is_Constrained (Etype (N))\n+\n+        --  But do the check after all if float overflow checking enforced\n+\n+        and then not Check_Float_Overflow\n+      then\n+         return;\n+      end if;\n+\n+      --  Nothing to do for Rem/Mod/Plus (overflow not possible)\n+\n+      if Nkind_In (N, N_Op_Rem, N_Op_Mod, N_Op_Plus) then\n+         return;\n       end if;\n+\n+      --  Otherwise set the flag\n+\n+      Set_Do_Overflow_Check (N, True);\n+      Possible_Local_Raise (N, Standard_Constraint_Error);\n    end Activate_Overflow_Check;\n \n    --------------------------"}, {"sha": "9362550b3827d1396df291235dcedc8bb65229bf", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396eb900bbb7deb1243ea6de03fe881234314acb/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396eb900bbb7deb1243ea6de03fe881234314acb/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=396eb900bbb7deb1243ea6de03fe881234314acb", "patch": "@@ -146,7 +146,9 @@ package Checks is\n    --  Always call this routine rather than calling Set_Do_Overflow_Check to\n    --  set an explicit value of True, to ensure handling the local raise case.\n    --  Note that this call has no effect for MOD, REM, and unary \"+\" for which\n-   --  overflow is never possible in any case.\n+   --  overflow is never possible in any case. In addition, we do not set the\n+   --  flag for unconstrained floating-point type operations, since we want to\n+   --  allow for the generation of IEEE infinities in such cases.\n \n    procedure Activate_Range_Check (N : Node_Id);\n    pragma Inline (Activate_Range_Check);"}, {"sha": "d4d9a6771e670962d1519442318770973b2f09fb", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396eb900bbb7deb1243ea6de03fe881234314acb/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396eb900bbb7deb1243ea6de03fe881234314acb/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=396eb900bbb7deb1243ea6de03fe881234314acb", "patch": "@@ -29,28 +29,26 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Finalization;  use Ada.Finalization;\n-with Ada.IO_Exceptions; use Ada.IO_Exceptions;\n+with Ada.Finalization;           use Ada.Finalization;\n+with Ada.IO_Exceptions;          use Ada.IO_Exceptions;\n+with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n with Interfaces.C_Streams; use Interfaces.C_Streams;\n \n-with System.CRTL;\n-\n with System.Case_Util;    use System.Case_Util;\n+with System.CRTL;\n with System.OS_Lib;\n with System.Soft_Links;\n \n-with Ada.Unchecked_Deallocation;\n-\n package body System.File_IO is\n \n    use System.File_Control_Block;\n \n    package SSL renames System.Soft_Links;\n \n-   use type Interfaces.C.int;\n    use type CRTL.size_t;\n+   use type Interfaces.C.int;\n \n    subtype String_Access is System.OS_Lib.String_Access;\n    procedure Free (X : in out String_Access) renames System.OS_Lib.Free;\n@@ -1162,6 +1160,17 @@ package body System.File_IO is\n             To_Lower (Fullname (1 .. Full_Name_Len));\n          end if;\n \n+         --  We need to lock all tasks from this point. This is needed as in\n+         --  the case of a shared file we want to ensure that the file is\n+         --  inserted into the chain with the shared status. We must be sure\n+         --  that this file won't be closed (and then the runtime file\n+         --  descriptor removed from the chain and released) before we leave\n+         --  this routine.\n+\n+         --  Take a task lock to protect Open_Files\n+\n+         SSL.Lock_Task.all;\n+\n          --  If Shared=None or Shared=Yes, then check for the existence of\n          --  another file with exactly the same full name.\n \n@@ -1170,10 +1179,6 @@ package body System.File_IO is\n                P : AFCB_Ptr;\n \n             begin\n-               --  Take a task lock to protect Open_Files\n-\n-               SSL.Lock_Task.all;\n-\n                --  Search list of open files\n \n                P := Open_Files;\n@@ -1213,13 +1218,6 @@ package body System.File_IO is\n \n                   P := P.Next;\n                end loop;\n-\n-               SSL.Unlock_Task.all;\n-\n-            exception\n-               when others =>\n-                  SSL.Unlock_Task.all;\n-                  raise;\n             end;\n          end if;\n \n@@ -1314,6 +1312,16 @@ package body System.File_IO is\n \n       Chain_File (File_Ptr);\n       Append_Set (File_Ptr);\n+\n+      --  We can now safely release the global lock, as the File_Ptr is\n+      --  inserted into the global file list.\n+\n+      SSL.Unlock_Task.all;\n+\n+   exception\n+      when others =>\n+         SSL.Unlock_Task.all;\n+         raise;\n    end Open;\n \n    ------------------------"}]}