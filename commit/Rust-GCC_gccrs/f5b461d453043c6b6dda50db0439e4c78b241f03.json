{"sha": "f5b461d453043c6b6dda50db0439e4c78b241f03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjViNDYxZDQ1MzA0M2M2YjZkZGE1MGRiMDQzOWU0Yzc4YjI0MWYwMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@torsion.usersys.redhat.com", "date": "2020-05-16T04:47:47Z"}, "committer": {"name": "Jeff Law", "email": "law@torsion.usersys.redhat.com", "date": "2020-05-16T04:50:53Z"}, "message": "Consolidate a couple peepholes and improve peepholes that combine stack allocations with stack stores.\n\n\t* config/h8300/h8300.md (SFI iterator): New iterator for\n\tSFmode and SImode.\n\t* config/h8300/peepholes.md (memory comparison): Use mode\n\titerator to consolidate 3 patterns into one.\n\t(stack allocation and stack store): Handle SFmode.  Handle\n\t8 byte allocations.", "tree": {"sha": "91c1d94416670a74599a2e59058bd09ac89eb01e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91c1d94416670a74599a2e59058bd09ac89eb01e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5b461d453043c6b6dda50db0439e4c78b241f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b461d453043c6b6dda50db0439e4c78b241f03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b461d453043c6b6dda50db0439e4c78b241f03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b461d453043c6b6dda50db0439e4c78b241f03/comments", "author": null, "committer": null, "parents": [{"sha": "53b4d52f11417b69b560c7f853c8c2da59f2d1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b4d52f11417b69b560c7f853c8c2da59f2d1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b4d52f11417b69b560c7f853c8c2da59f2d1da"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "4f48d443235a8ab0ec06a93edb9ef95d3a6226ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b461d453043c6b6dda50db0439e4c78b241f03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b461d453043c6b6dda50db0439e4c78b241f03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5b461d453043c6b6dda50db0439e4c78b241f03", "patch": "@@ -1,3 +1,12 @@\n+2020-05-15 Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/h8300.md (SFI iterator): New iterator for\n+\tSFmode and SImode.\n+\t* config/h8300/peepholes.md (memory comparison): Use mode\n+\titerator to consolidate 3 patterns into one.\n+\t(stack allocation and stack store): Handle SFmode.  Handle\n+\t8 byte allocations.\n+\n 2020-05-15  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000-builtin.def (BU_FUTURE_MISC_2): Also require"}, {"sha": "46ab24425769808e0c2cf0a9dfb48235e3370f63", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b461d453043c6b6dda50db0439e4c78b241f03/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b461d453043c6b6dda50db0439e4c78b241f03/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=f5b461d453043c6b6dda50db0439e4c78b241f03", "patch": "@@ -191,6 +191,8 @@\n \n (define_mode_iterator QHSIF [QI HI SI SF])\n \n+(define_mode_iterator SFI [SF SI])\n+\n (define_code_iterator shifts [ashift ashiftrt lshiftrt])\n \n (define_code_iterator ors [ior xor])"}, {"sha": "a0f5af28a53f640ff5037d10ecec1d61cb7ea05f", "filename": "gcc/config/h8300/peepholes.md", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b461d453043c6b6dda50db0439e4c78b241f03/gcc%2Fconfig%2Fh8300%2Fpeepholes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b461d453043c6b6dda50db0439e4c78b241f03/gcc%2Fconfig%2Fh8300%2Fpeepholes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fpeepholes.md?ref=f5b461d453043c6b6dda50db0439e4c78b241f03", "patch": "@@ -551,9 +551,9 @@\n ;; Convert a memory comparison to a move if there is a scratch register.\n \n (define_peephole2\n-  [(match_scratch:QI 1 \"r\")\n+  [(match_scratch:QHSI 1 \"r\")\n    (set (cc0)\n-\t(compare (match_operand:QI 0 \"memory_operand\" \"\")\n+\t(compare (match_operand:QHSI 0 \"memory_operand\" \"\")\n \t\t (const_int 0)))]\n   \"\"\n   [(set (match_dup 1)\n@@ -562,31 +562,6 @@\n \t\t       (const_int 0)))]\n   \"\")\n \n-(define_peephole2\n-  [(match_scratch:HI 1 \"r\")\n-   (set (cc0)\n-\t(compare (match_operand:HI 0 \"memory_operand\" \"\")\n-\t\t (const_int 0)))]\n-  \"\"\n-  [(set (match_dup 1)\n-\t(match_dup 0))\n-   (set (cc0) (compare (match_dup 1)\n-\t\t       (const_int 0)))]\n-  \"\")\n-\n-(define_peephole2\n-  [(match_scratch:SI 1 \"r\")\n-   (set (cc0)\n-\t(compare (match_operand:SI 0 \"memory_operand\" \"\")\n-\t\t (const_int 0)))]\n-  \"\"\n-  [(set (match_dup 1)\n-\t(match_dup 0))\n-   (set (cc0) (compare (match_dup 1)\n-\t\t       (const_int 0)))]\n-  \"\")\n-\n-\n ;; (compare (reg:HI) (const_int)) takes 4 bytes, so we try to achieve\n ;; the equivalent with shorter sequences.  Here is the summary.  Cases\n ;; are grouped for each define_peephole2.\n@@ -1418,41 +1393,57 @@\n \n ;; stack adjustment of -4, generate one push\n ;;\n-;; before : 6 bytes, 10 clocks\n-;; after  : 4 bytes, 10 clocks\n+;; before : 6 bytes\n+;; after  : 4 bytes\n \n (define_peephole2\n   [(set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n \t\t (const_int -4)))\n-   (set (mem:SI (reg:SI SP_REG))\n-\t(match_operand:SI 0 \"register_operand\" \"\"))]\n+   (set (mem:SFI (reg:SI SP_REG))\n+\t(match_operand:SFI 0 \"register_operand\" \"\"))]\n   \"!TARGET_NORMAL_MODE && REGNO (operands[0]) != SP_REG\"\n-  [(set (mem:SI (pre_dec:SI (reg:SI SP_REG)))\n-\t(match_dup 0))]\n-  \"\")\n+  [(set (mem:SFI (pre_dec:SI (reg:SI SP_REG)))\n+\t(match_dup 0))])\n+\n+;; stack adjustment of -8, generate one push\n+;;\n+;; before : 8 bytes\n+;; after  : 6 bytes\n+\n+(define_peephole2\n+  [(set (reg:SI SP_REG)\n+\t(plus:SI (reg:SI SP_REG)\n+\t\t (const_int -8)))\n+   (set (mem:SFI (reg:SI SP_REG))\n+\t(match_operand:SFI 0 \"register_operand\" \"\"))]\n+  \"!TARGET_NORMAL_MODE && REGNO (operands[0]) != SP_REG\"\n+  [(set (reg:SI SP_REG)\n+\t(plus:SI (reg:SI SP_REG)\n+\t\t (const_int -4)))\n+   (set (mem:SFI (pre_dec:SI (reg:SI SP_REG)))\n+\t(match_dup 0))])\n \n ;; stack adjustment of -12, generate one push\n ;;\n-;; before : 10 bytes, 14 clocks\n-;; after  :  8 bytes, 14 clocks\n+;; before : 10 bytes\n+;; after  :  8 bytes\n \n (define_peephole2\n   [(set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n \t\t (const_int -12)))\n-   (set (mem:SI (reg:SI SP_REG))\n-\t(match_operand:SI 0 \"register_operand\" \"\"))]\n+   (set (mem:SFI (reg:SI SP_REG))\n+\t(match_operand:SFI 0 \"register_operand\" \"\"))]\n   \"!TARGET_NORMAL_MODE && REGNO (operands[0]) != SP_REG\"\n   [(set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n \t\t (const_int -4)))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n \t\t (const_int -4)))\n-   (set (mem:SI (pre_dec:SI (reg:SI SP_REG)))\n-\t(match_dup 0))]\n-  \"\")\n+   (set (mem:SFI (pre_dec:SI (reg:SI SP_REG)))\n+\t(match_dup 0))])\n \n ;; Transform\n ;;"}]}