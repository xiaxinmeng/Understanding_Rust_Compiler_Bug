{"sha": "25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlOGNiMmU0NzcyNWZjYzY3ZjRjYmJmODVjMzdiZWU0N2JjYzFkMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-10-04T16:54:19Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-10-04T16:54:19Z"}, "message": "[multiple changes]\n\n2006-10-04  Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29343\n\t* resolve.c (resolve_allocate_expr): Exclude derived types from\n\tsearch for dependences between allocated variables and the\n\tspecification expressions for other allocations in the same\n\tstatement.\n\n2006-10-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29343\n\t* gfortran.dg/alloc_alloc_expr_2.f90: New test.\n\nFrom-SVN: r117435", "tree": {"sha": "52b27ca1efc8544a6b827ef97e820a40041b824f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b27ca1efc8544a6b827ef97e820a40041b824f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/comments", "author": null, "committer": null, "parents": [{"sha": "9e8265851df1859e0dfc447cb9ac44088bb8cb1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e8265851df1859e0dfc447cb9ac44088bb8cb1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e8265851df1859e0dfc447cb9ac44088bb8cb1c"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "5038694fcf137493b20e2243c940107da6994a91", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0", "patch": "@@ -1,3 +1,11 @@\n+2006-10-04  Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29343\n+\t* resolve.c (resolve_allocate_expr): Exclude derived types from\n+\tsearch for dependences between allocated variables and the\n+\tspecification expressions for other allocations in the same\n+\tstatement.\n+\n 2006-10-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29098"}, {"sha": "b9653eb7eab7161cf655a2ba7145fdba62c6bf5b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0", "patch": "@@ -3466,7 +3466,7 @@ resolve_allocate_expr (gfc_expr * e, gfc_code * code)\n       pointer = e->symtree->n.sym->attr.pointer;\n       dimension = e->symtree->n.sym->attr.dimension;\n \n-      if (sym == e->symtree->n.sym)\n+      if (sym == e->symtree->n.sym && sym->ts.type != BT_DERIVED)\n \t{\n \t  gfc_error (\"The STAT variable '%s' in an ALLOCATE statement must \"\n \t\t     \"not be allocated in the same statement at %L\",\n@@ -3571,6 +3571,11 @@ resolve_allocate_expr (gfc_expr * e, gfc_code * code)\n       for (a = code->ext.alloc_list; a; a = a->next)\n \t{\n \t  sym = a->expr->symtree->n.sym;\n+\n+\t  /* TODO - check derived type components.  */\n+\t  if (sym->ts.type == BT_DERIVED)\n+\t    continue;\n+\n \t  if ((ar->start[i] != NULL && find_sym_in_expr (sym, ar->start[i]))\n \t\t || (ar->end[i] != NULL && find_sym_in_expr (sym, ar->end[i])))\n \t    {"}, {"sha": "5d9297e4f61e10572b376238d22cd1cd6a565664", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0", "patch": "@@ -1,3 +1,8 @@\n+2006-10-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29343\n+\t* gfortran.dg/alloc_alloc_expr_2.f90: New test.\n+\n 2006-10-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* gfortran.dg/bounds_check_fail_1.f90: New test."}, {"sha": "16235e3904653a99e9ede170fc8e37d4b7dc1470", "filename": "gcc/testsuite/gfortran.dg/alloc_alloc_expr_2.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_alloc_expr_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_alloc_expr_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_alloc_expr_2.f90?ref=25e8cb2e47725fcc67f4cbbf85c37bee47bcc1d0", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! This tests the fix for PR29343, in which the valid ALLOCATE statement\n+! below triggered an error following the patch for PR20779 and PR20891.\n+!\n+! Contributed by Grigory Zagorodnev <grigory_zagorodnev@linux.intel.com>\n+!\n+        Subroutine ReadParameters (Album)\n+        Implicit NONE\n+\n+\n+        Type GalleryP\n+                Integer       :: NoOfEntries\n+                Character(80), Pointer :: FileName (:)\n+        End Type GalleryP\n+\n+\n+        Type(GalleryP), Intent(Out) :: Album\n+        Allocate (Album%FileName   (Album%NoOfEntries))\n+        end"}]}