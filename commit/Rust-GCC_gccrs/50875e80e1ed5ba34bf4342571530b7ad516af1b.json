{"sha": "50875e80e1ed5ba34bf4342571530b7ad516af1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4NzVlODBlMWVkNWJhMzRiZjQzNDI1NzE1MzBiN2FkNTE2YWYxYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-19T22:03:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-19T22:03:30Z"}, "message": "noexcept.cc: Change to compile-only test.\n\n\t* testsuite/23_containers/forward_list/allocator/noexcept.cc: Change\n\tto compile-only test. Adjust swap overload to handle rebound\n\tallocators.\n\t* testsuite/23_containers/map/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/multimap/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/multiset/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/set/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_set/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/allocator/noexcept.cc: Likewise.\n\t* testsuite/23_containers/vector/allocator/swap.cc: Add elements\n\tbefore swapping.\n\nFrom-SVN: r205056", "tree": {"sha": "312cede16ce78b3c62218e34cebed05e17cef0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/312cede16ce78b3c62218e34cebed05e17cef0c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50875e80e1ed5ba34bf4342571530b7ad516af1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50875e80e1ed5ba34bf4342571530b7ad516af1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50875e80e1ed5ba34bf4342571530b7ad516af1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50875e80e1ed5ba34bf4342571530b7ad516af1b/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fefa31b568664d9efb6257a35ae7b014766faa69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fefa31b568664d9efb6257a35ae7b014766faa69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fefa31b568664d9efb6257a35ae7b014766faa69"}], "stats": {"total": 256, "additions": 88, "deletions": 168}, "files": [{"sha": "27629f9c59d2528e1b4c2751dfb8be35c2ddac08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -1,3 +1,24 @@\n+2013-11-19  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* testsuite/23_containers/forward_list/allocator/noexcept.cc: Change\n+\tto compile-only test. Adjust swap overload to handle rebound\n+\tallocators.\n+\t* testsuite/23_containers/map/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/multimap/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/multiset/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/set/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/allocator/noexcept.cc: Likewise.\n+\t* testsuite/23_containers/vector/allocator/swap.cc: Add elements\n+\tbefore swapping.\n+\n 2013-11-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/experimental/string_view (_S_max_size): Remove."}, {"sha": "635fb77bec5421bbe0419bd82f55ded96bfc45b0", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,23 +15,21 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n #include <forward_list>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n struct T { int i; };\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<T, true>& l, propagating_allocator<T, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<T> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -64,13 +62,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  // static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }"}, {"sha": "4bd3f5755aa97e2b870cc88239bad5bdddf05bf8", "filename": "libstdc++-v3/testsuite/23_containers/map/allocator/noexcept.cc", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,10 +15,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n \n #include <map>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n struct T { int i; };\n@@ -31,14 +31,11 @@ struct U { };\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<std::pair<const T, U>, true>& l,\n-       propagating_allocator<std::pair<const T, U>, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<std::pair<const T, U>> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -73,11 +70,3 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n-}"}, {"sha": "9913acb863296928908b67b13d598df281b1e08e", "filename": "libstdc++-v3/testsuite/23_containers/multimap/allocator/noexcept.cc", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,10 +15,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n \n #include <map>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n struct T { int i; };\n@@ -31,14 +31,11 @@ struct U { };\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<std::pair<const T, U>, true>& l,\n-       propagating_allocator<std::pair<const T, U>, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<std::pair<const T, U>> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -73,11 +70,3 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n-}"}, {"sha": "d429313d5871b5ed6f7d0711b1d10b977acb580a", "filename": "libstdc++-v3/testsuite/23_containers/multiset/allocator/noexcept.cc", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,6 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n \n #include <set>\n@@ -29,14 +30,11 @@ using Cmp = std::less<T>;\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<T, true>& l,\n-       propagating_allocator<T, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<T> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -71,11 +69,3 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n-}"}, {"sha": "f8389d6a42f7799db991261ae71f7ac4274b7244", "filename": "libstdc++-v3/testsuite/23_containers/set/allocator/noexcept.cc", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,10 +15,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n \n #include <set>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n struct T { int i; };\n@@ -29,14 +29,11 @@ using Cmp = std::less<T>;\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<T, true>& l,\n-       propagating_allocator<T, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<T> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -71,11 +68,3 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n-}"}, {"sha": "64c46f2e12bb696b17eab88fc0fe75c45c1b7bfe", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,10 +15,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=c++11\" }\n \n #include <unordered_map>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n struct T { int i; };\n@@ -37,13 +37,11 @@ struct equal_to\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<T, true>& l, propagating_allocator<T, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<T> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -76,13 +74,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  // static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }"}, {"sha": "fe6fc6e0c7281ff14b137d89da4072552c944736", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,10 +15,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=c++11\" }\n \n #include <unordered_map>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n struct T { int i; };\n@@ -37,13 +37,11 @@ struct equal_to\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<T, true>& l, propagating_allocator<T, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<T> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -76,13 +74,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  // static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }"}, {"sha": "2c7e853891fe4447f1eff8b85ed56a7c6c5a7d45", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,10 +15,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=c++11\" }\n \n #include <unordered_set>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n struct T { int i; };\n@@ -37,13 +37,11 @@ struct equal_to\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<T, true>& l, propagating_allocator<T, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<T> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -76,13 +74,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  // static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }"}, {"sha": "5ada755fcbf07c1e7151ee75d1d81fd07012bbd1", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,10 +15,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=c++11\" }\n \n #include <unordered_set>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n struct T { int i; };\n@@ -37,13 +37,11 @@ struct equal_to\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<T, true>& l, propagating_allocator<T, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<T> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -76,13 +74,5 @@ void test03()\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n-  // static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n+  static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }"}, {"sha": "31231436b03761f82f96422d83721756f8a7191c", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/noexcept.cc", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fnoexcept.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -15,23 +15,21 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n #include <vector>\n-#include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n struct T { int i; };\n \n namespace __gnu_test\n {\n-  inline void\n-  swap(propagating_allocator<T, true>& l, propagating_allocator<T, true>& r)\n-  noexcept(false)\n-  {\n-    typedef uneq_allocator<T> base_alloc;\n-    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n-  }\n+  template<typename U>\n+    inline void\n+    swap(propagating_allocator<U, true>& l, propagating_allocator<U, true>& r)\n+    noexcept(false)\n+    { }\n }\n \n using __gnu_test::propagating_allocator;\n@@ -66,11 +64,3 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n-}"}, {"sha": "ba44267737f3f1cfe9d295da381aa6f1ca08cf76", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/swap.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50875e80e1ed5ba34bf4342571530b7ad516af1b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc?ref=50875e80e1ed5ba34bf4342571530b7ad516af1b", "patch": "@@ -64,7 +64,9 @@ void test02()\n   typedef propagating_allocator<T, true> alloc_type;\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n+  v1.push_back(T());\n   test_type v2(alloc_type(2));\n+  v2.push_back(T());\n   std::swap(v1, v2);\n   VERIFY(2 == v1.get_allocator().get_personality());\n   VERIFY(1 == v2.get_allocator().get_personality());"}]}