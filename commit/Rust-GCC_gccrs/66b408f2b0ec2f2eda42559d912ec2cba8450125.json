{"sha": "66b408f2b0ec2f2eda42559d912ec2cba8450125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiNDA4ZjJiMGVjMmYyZWRhNDI1NTlkOTEyZWMyY2JhODQ1MDEyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-05-23T09:29:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-05-23T09:29:29Z"}, "message": "re PR target/6753 (gcc 3.1 produces wrong code when optimizing for pentium4)\n\n\tPR target/6753\n\t* config/i386/i386.md (sse_movdfcc, sse_movdfcc_eq): Use Y instead\n\tof x in constraints for clarity.\n\t(sse_mov?fcc split): abort if op2 == op3.\n\t(sse_movsfcc_const0_1, sse_movsfcc_const0_2, sse_movsfcc_const0_3,\n\tsse_movsfcc_const0_4): Add earlyclobber.\n\t(sse_movdfcc_const0_1, sse_movdfcc_const0_2, sse_movdfcc_const0_3,\n\tsse_movdfcc_const0_4): Likewise.  Use DFmode, not SFmode.\n\tUse Y instead of x in constraints.\n\n\t* gcc.dg/20020523-1.c: New test.\n\nFrom-SVN: r53784", "tree": {"sha": "0cafa1cf07f157e72ca2e26a30afff5fbd1f519b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cafa1cf07f157e72ca2e26a30afff5fbd1f519b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b408f2b0ec2f2eda42559d912ec2cba8450125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b408f2b0ec2f2eda42559d912ec2cba8450125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b408f2b0ec2f2eda42559d912ec2cba8450125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b408f2b0ec2f2eda42559d912ec2cba8450125/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9217ef40d124791add4a83eed80a0b2e189a5ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9217ef40d124791add4a83eed80a0b2e189a5ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9217ef40d124791add4a83eed80a0b2e189a5ae0"}], "stats": {"total": 161, "additions": 123, "deletions": 38}, "files": [{"sha": "3e19e618b680c349164cf0c262464417b9ac8e09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b408f2b0ec2f2eda42559d912ec2cba8450125/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b408f2b0ec2f2eda42559d912ec2cba8450125/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66b408f2b0ec2f2eda42559d912ec2cba8450125", "patch": "@@ -1,3 +1,15 @@\n+2002-05-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/6753\n+\t* config/i386/i386.md (sse_movdfcc, sse_movdfcc_eq): Use Y instead\n+\tof x in constraints for clarity.\n+\t(sse_mov?fcc split): abort if op2 == op3.\n+\t(sse_movsfcc_const0_1, sse_movsfcc_const0_2, sse_movsfcc_const0_3,\n+\tsse_movsfcc_const0_4): Add earlyclobber.\n+\t(sse_movdfcc_const0_1, sse_movdfcc_const0_2, sse_movdfcc_const0_3,\n+\tsse_movdfcc_const0_4): Likewise.  Use DFmode, not SFmode.\n+\tUse Y instead of x in constraints.\n+\n 2002-05-23  Richard Henderson  <rth@redhat.com>\n \n \t* doc/extend.texi (C99 Thread-Local Edits): New subsection."}, {"sha": "1bdfac82a83ae903fa6de5a6dcd5ba16eb5d7dde", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b408f2b0ec2f2eda42559d912ec2cba8450125/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b408f2b0ec2f2eda42559d912ec2cba8450125/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=66b408f2b0ec2f2eda42559d912ec2cba8450125", "patch": "@@ -15949,12 +15949,12 @@\n   \"#\")\n \n (define_insn \"sse_movdfcc\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&x#rf,x#rf,?f#xr,?f#xr,?f#xr,?f#xr,?r#xf,?r#xf,?r#xf,?r#xf\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&Y#rf,Y#rf,?f#Yr,?f#Yr,?f#Yr,?f#Yr,?r#Yf,?r#Yf,?r#Yf,?r#Yf\")\n \t(if_then_else:DF (match_operator 1 \"sse_comparison_operator\"\n-\t\t\t[(match_operand:DF 4 \"nonimmediate_operand\" \"0#fx,x#fx,f#x,f#x,xm#f,xm#f,f#x,f#x,xm#f,xm#f\")\n-\t\t\t (match_operand:DF 5 \"nonimmediate_operand\" \"xm#f,xm#f,f#x,f#x,x#f,x#f,f#x,f#x,x#f,x#f\")])\n-\t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"x#fr,0#fr,f#fx,0#fx,f#fx,0#fx,rm#rx,0#rx,rm#rx,0#rx\")\n-\t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"x#fr,x#fr,0#fx,f#fx,0#fx,f#fx,0#fx,rm#rx,0#rx,rm#rx\")))\n+\t\t\t[(match_operand:DF 4 \"nonimmediate_operand\" \"0#fY,Y#fY,f#Y,f#Y,Ym#f,Ym#f,f#Y,f#Y,Ym#f,Ym#f\")\n+\t\t\t (match_operand:DF 5 \"nonimmediate_operand\" \"Ym#f,Ym#f,f#Y,f#Y,Y#f,Y#f,f#Y,f#Y,Y#f,Y#f\")])\n+\t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"Y#fr,0#fr,f#fY,0#fY,f#fY,0#fY,rm#rY,0#rY,rm#rY,0#rY\")\n+\t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"Y#fr,Y#fr,0#fY,f#fY,0#fY,f#fY,0#fY,rm#rY,0#rY,rm#rY\")))\n    (clobber (match_scratch:DF 6 \"=2,&4,X,X,X,X,X,X,X,X\"))\n    (clobber (reg:CC 17))]\n   \"TARGET_SSE2\n@@ -15964,11 +15964,11 @@\n   \"#\")\n \n (define_insn \"sse_movdfcc_eq\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&x#rf,x#rf,?f#xr,?f#xr,?r#xf,?r#xf\")\n-\t(if_then_else:DF (eq (match_operand:DF 3 \"nonimmediate_operand\" \"%0#fx,x#fx,f#x,xm#f,f#x,xm#f\")\n-\t\t\t     (match_operand:DF 4 \"nonimmediate_operand\" \"xm#f,xm#f,f#x,x#f,f#x,x#f\"))\n-\t\t      (match_operand:DF 1 \"nonimmediate_operand\" \"x#fr,0#fr,0#fx,0#fx,0#rx,0#rx\")\n-\t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"x#fr,x#fr,f#fx,f#fx,rm#rx,rm#rx\")))\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&Y#rf,Y#rf,?f#Yr,?f#Yr,?r#Yf,?r#Yf\")\n+\t(if_then_else:DF (eq (match_operand:DF 3 \"nonimmediate_operand\" \"%0#fY,Y#fY,f#Y,Ym#f,f#Y,Ym#f\")\n+\t\t\t     (match_operand:DF 4 \"nonimmediate_operand\" \"Ym#f,Ym#f,f#Y,Y#f,f#Y,Y#f\"))\n+\t\t      (match_operand:DF 1 \"nonimmediate_operand\" \"Y#fr,0#fr,0#fY,0#fY,0#rY,0#rY\")\n+\t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"Y#fr,Y#fr,f#fY,f#fY,rm#rY,rm#rY\")))\n    (clobber (match_scratch:DF 5 \"=1,&3,X,X,X,X\"))\n    (clobber (reg:CC 17))]\n   \"TARGET_SSE\n@@ -16020,6 +16020,10 @@\n    (set (subreg:TI (match_dup 0) 0) (ior:TI (subreg:TI (match_dup 6) 0)\n \t\t\t\t\t    (subreg:TI (match_dup 7) 0)))]\n {\n+  /* If op2 == op3, op3 will be clobbered before it is used.\n+     This should be optimized out though.  */\n+  if (operands_match_p (operands[2], operands[3]))\n+    abort ();\n   PUT_MODE (operands[1], GET_MODE (operands[0]));\n   if (operands_match_p (operands[0], operands[4]))\n     operands[6] = operands[4], operands[7] = operands[2];\n@@ -16031,7 +16035,7 @@\n ;; Do not brother with the integer/floating point case, since these are\n ;; bot considerably slower, unlike in the generic case.\n (define_insn \"*sse_movsfcc_const0_1\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=&x\")\n \t(if_then_else:SF (match_operator 1 \"sse_comparison_operator\"\n \t\t\t[(match_operand:SF 4 \"register_operand\" \"0\")\n \t\t\t (match_operand:SF 5 \"nonimmediate_operand\" \"xm\")])\n@@ -16041,7 +16045,7 @@\n   \"#\")\n \n (define_insn \"*sse_movsfcc_const0_2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=&x\")\n \t(if_then_else:SF (match_operator 1 \"sse_comparison_operator\"\n \t\t\t[(match_operand:SF 4 \"register_operand\" \"0\")\n \t\t\t (match_operand:SF 5 \"nonimmediate_operand\" \"xm\")])\n@@ -16051,7 +16055,7 @@\n   \"#\")\n \n (define_insn \"*sse_movsfcc_const0_3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=&x\")\n \t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t[(match_operand:SF 4 \"nonimmediate_operand\" \"xm\")\n \t\t\t (match_operand:SF 5 \"register_operand\" \"0\")])\n@@ -16061,7 +16065,7 @@\n   \"#\")\n \n (define_insn \"*sse_movsfcc_const0_4\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=&x\")\n \t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t[(match_operand:SF 4 \"nonimmediate_operand\" \"xm\")\n \t\t\t (match_operand:SF 5 \"register_operand\" \"0\")])\n@@ -16071,42 +16075,42 @@\n   \"#\")\n \n (define_insn \"*sse_movdfcc_const0_1\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(if_then_else:SF (match_operator 1 \"sse_comparison_operator\"\n-\t\t\t[(match_operand:SF 4 \"register_operand\" \"0\")\n-\t\t\t (match_operand:SF 5 \"nonimmediate_operand\" \"xm\")])\n-\t\t      (match_operand:SF 2 \"register_operand\" \"x\")\n-\t\t      (match_operand:SF 3 \"const0_operand\" \"X\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&Y\")\n+\t(if_then_else:DF (match_operator 1 \"sse_comparison_operator\"\n+\t\t\t[(match_operand:DF 4 \"register_operand\" \"0\")\n+\t\t\t (match_operand:DF 5 \"nonimmediate_operand\" \"Ym\")])\n+\t\t      (match_operand:DF 2 \"register_operand\" \"Y\")\n+\t\t      (match_operand:DF 3 \"const0_operand\" \"X\")))]\n   \"TARGET_SSE2\"\n   \"#\")\n \n (define_insn \"*sse_movdfcc_const0_2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(if_then_else:SF (match_operator 1 \"sse_comparison_operator\"\n-\t\t\t[(match_operand:SF 4 \"register_operand\" \"0\")\n-\t\t\t (match_operand:SF 5 \"nonimmediate_operand\" \"xm\")])\n-\t\t      (match_operand:SF 2 \"const0_operand\" \"X\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"x\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&Y\")\n+\t(if_then_else:DF (match_operator 1 \"sse_comparison_operator\"\n+\t\t\t[(match_operand:DF 4 \"register_operand\" \"0\")\n+\t\t\t (match_operand:DF 5 \"nonimmediate_operand\" \"Ym\")])\n+\t\t      (match_operand:DF 2 \"const0_operand\" \"X\")\n+\t\t      (match_operand:DF 3 \"register_operand\" \"Y\")))]\n   \"TARGET_SSE2\"\n   \"#\")\n \n (define_insn \"*sse_movdfcc_const0_3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\"\n-\t\t\t[(match_operand:SF 4 \"nonimmediate_operand\" \"xm\")\n-\t\t\t (match_operand:SF 5 \"register_operand\" \"0\")])\n-\t\t      (match_operand:SF 2 \"register_operand\" \"x\")\n-\t\t      (match_operand:SF 3 \"const0_operand\" \"X\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&Y\")\n+\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\"\n+\t\t\t[(match_operand:DF 4 \"nonimmediate_operand\" \"Ym\")\n+\t\t\t (match_operand:DF 5 \"register_operand\" \"0\")])\n+\t\t      (match_operand:DF 2 \"register_operand\" \"Y\")\n+\t\t      (match_operand:DF 3 \"const0_operand\" \"X\")))]\n   \"TARGET_SSE2\"\n   \"#\")\n \n (define_insn \"*sse_movdfcc_const0_4\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(if_then_else:SF (match_operator 1 \"fcmov_comparison_operator\"\n-\t\t\t[(match_operand:SF 4 \"nonimmediate_operand\" \"xm\")\n-\t\t\t (match_operand:SF 5 \"register_operand\" \"0\")])\n-\t\t      (match_operand:SF 2 \"const0_operand\" \"X\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"x\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&Y\")\n+\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\"\n+\t\t\t[(match_operand:DF 4 \"nonimmediate_operand\" \"Ym\")\n+\t\t\t (match_operand:DF 5 \"register_operand\" \"0\")])\n+\t\t      (match_operand:DF 2 \"const0_operand\" \"X\")\n+\t\t      (match_operand:DF 3 \"register_operand\" \"Y\")))]\n   \"TARGET_SSE2\"\n   \"#\")\n "}, {"sha": "87ab261664c2cfa9077a1ae600bb189b9864a224", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b408f2b0ec2f2eda42559d912ec2cba8450125/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b408f2b0ec2f2eda42559d912ec2cba8450125/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66b408f2b0ec2f2eda42559d912ec2cba8450125", "patch": "@@ -1,3 +1,7 @@\n+2002-05-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20020523-1.c: New test.\n+\n 2002-05-23  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* objc.dg/const-str-2.m: Update now that we stop after"}, {"sha": "5ae3da5473a633ae3c95c6600a18cfdba5da3ca9", "filename": "gcc/testsuite/gcc.dg/20020523-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b408f2b0ec2f2eda42559d912ec2cba8450125/gcc%2Ftestsuite%2Fgcc.dg%2F20020523-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b408f2b0ec2f2eda42559d912ec2cba8450125/gcc%2Ftestsuite%2Fgcc.dg%2F20020523-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020523-1.c?ref=66b408f2b0ec2f2eda42559d912ec2cba8450125", "patch": "@@ -0,0 +1,65 @@\n+/* PR target/6753\n+   This testcase was miscompiled because sse_mov?fcc_const0*\n+   patterns were missing earlyclobber.  */\n+/* { dg-do run { target i386-*-* } } */\n+/* { dg-options \"-march=pentium3 -msse -ffast-math -O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+float one = 1.f;\n+\n+void bar (float f)\n+{\n+  if (__builtin_memcmp (&one, &f, sizeof (float)))\n+    abort ();\n+}\n+\n+float foo (void)\n+{\n+  return 1.f;\n+}\n+\n+typedef struct\n+{\n+  float t;\n+} T;\n+\n+void bail_if_no_sse (void)\n+{\n+  int fl1, fl2;\n+\n+  /* See if we can use cpuid.  */\n+  __asm__ (\"pushfl; pushfl; popl %0; movl %0,%1; xorl %2,%0;\"\n+\t   \"pushl %0; popfl; pushfl; popl %0; popfl\"\n+\t   : \"=&r\" (fl1), \"=&r\" (fl2)\n+\t   : \"i\" (0x00200000));\n+  if (((fl1 ^ fl2) & 0x00200000) == 0)\n+    exit (0);\n+\n+  /* See if cpuid gives capabilities.  */\n+  __asm__ (\"cpuid\" : \"=a\" (fl1) : \"0\" (0) : \"ebx\", \"ecx\", \"edx\", \"cc\");\n+  if (fl1 == 0)\n+    exit (0);\n+\n+  /* See if capabilities include SSE (25th bit; 26 for SSE2).  */\n+  __asm__ (\"cpuid\" : \"=a\" (fl1), \"=d\" (fl2) : \"0\" (1) : \"ebx\", \"ecx\", \"cc\");\n+  if ((fl2 & (1 << 25)) == 0)\n+    exit (0);\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  T x[1];\n+\n+  bail_if_no_sse ();\n+  for (i = 0; i < 1; i++)\n+    {\n+      x[i].t = foo ();\n+      x[i].t = 0.f > x[i].t ? 0.f : x[i].t;\n+      bar (x[i].t);\n+    }\n+\n+  exit (0);\n+}"}]}