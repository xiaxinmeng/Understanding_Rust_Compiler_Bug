{"sha": "0a0440c94f4e57a050348a0970a34ab496f9d5dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwNDQwYzk0ZjRlNTdhMDUwMzQ4YTA5NzBhMzRhYjQ5NmY5ZDVkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-29T08:01:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-29T08:01:20Z"}, "message": "combine.c (set_nonzero_bits_and_sign_copies): Don't call nonzero_bits if not needed.\n\n\t* combine.c (set_nonzero_bits_and_sign_copies): Don't call\n\tnonzero_bits if not needed.\n\t(nonzero_bits) [XOR]: Likewise.\n\t(nonzero_bits) [REG]: Use reg_last_set_nonzero_bits even if\n\treg_last_set_mode and mode are both MODE_INT, but not equal.\n\t(record_value_for_reg): Compute reg_last_set_nonzero_bits\n\tin nonzero_bits_mode for MODE_INT modes.\n\nFrom-SVN: r51551", "tree": {"sha": "4cbadd2a4172d048aafb0cabc2311fd510f84b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cbadd2a4172d048aafb0cabc2311fd510f84b2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a0440c94f4e57a050348a0970a34ab496f9d5dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0440c94f4e57a050348a0970a34ab496f9d5dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0440c94f4e57a050348a0970a34ab496f9d5dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0440c94f4e57a050348a0970a34ab496f9d5dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7f4981a5122c9b1dfcbe4596b05515d055a4b17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f4981a5122c9b1dfcbe4596b05515d055a4b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f4981a5122c9b1dfcbe4596b05515d055a4b17"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "48a7dcf7aa3caca807338794dc11445bb078bd2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0440c94f4e57a050348a0970a34ab496f9d5dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0440c94f4e57a050348a0970a34ab496f9d5dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a0440c94f4e57a050348a0970a34ab496f9d5dc", "patch": "@@ -1,3 +1,13 @@\n+2002-03-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* combine.c (set_nonzero_bits_and_sign_copies): Don't call\n+\tnonzero_bits if not needed.\n+\t(nonzero_bits) [XOR]: Likewise.\n+\t(nonzero_bits) [REG]: Use reg_last_set_nonzero_bits even if\n+\treg_last_set_mode and mode are both MODE_INT, but not equal.\n+\t(record_value_for_reg): Compute reg_last_set_nonzero_bits\n+\tin nonzero_bits_mode for MODE_INT modes.\n+\n 2002-03-28  Richard Henderson  <rth@redhat.com>\n \n \tPR target/5715"}, {"sha": "3e97a1afddd0734cdaeda11aae73899ad36b3310", "filename": "gcc/combine.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0440c94f4e57a050348a0970a34ab496f9d5dc/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0440c94f4e57a050348a0970a34ab496f9d5dc/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0a0440c94f4e57a050348a0970a34ab496f9d5dc", "patch": "@@ -906,8 +906,10 @@ set_nonzero_bits_and_sign_copies (x, set, data)\n \t\t\t      << GET_MODE_BITSIZE (GET_MODE (x))));\n #endif\n \n-\t  reg_nonzero_bits[REGNO (x)]\n-\t    |= nonzero_bits (src, nonzero_bits_mode);\n+\t  /* Don't call nonzero_bits if it cannot change anything.  */\n+\t  if (reg_nonzero_bits[REGNO (x)] != ~(unsigned HOST_WIDE_INT) 0)\n+\t    reg_nonzero_bits[REGNO (x)]\n+\t      |= nonzero_bits (src, nonzero_bits_mode);\n \t  num = num_sign_bit_copies (SET_SRC (set), GET_MODE (x));\n \t  if (reg_sign_bit_copies[REGNO (x)] == 0\n \t      || reg_sign_bit_copies[REGNO (x)] > num)\n@@ -8049,7 +8051,9 @@ nonzero_bits (x, mode)\n \t for this register.  */\n \n       if (reg_last_set_value[REGNO (x)] != 0\n-\t  && reg_last_set_mode[REGNO (x)] == mode\n+\t  && (reg_last_set_mode[REGNO (x)] == mode\n+\t      || (GET_MODE_CLASS (reg_last_set_mode[REGNO (x)]) == MODE_INT\n+\t\t  && GET_MODE_CLASS (mode) == MODE_INT))\n \t  && (reg_last_set_label[REGNO (x)] == label_tick\n \t      || (REGNO (x) >= FIRST_PSEUDO_REGISTER\n \t\t  && REG_N_SETS (REGNO (x)) == 1\n@@ -8191,8 +8195,14 @@ nonzero_bits (x, mode)\n \n     case XOR:   case IOR:\n     case UMIN:  case UMAX:  case SMIN:  case SMAX:\n-      nonzero &= (nonzero_bits (XEXP (x, 0), mode)\n-\t\t  | nonzero_bits (XEXP (x, 1), mode));\n+      {\n+\tunsigned HOST_WIDE_INT nonzero0 = nonzero_bits (XEXP (x, 0), mode);\n+\n+\t/* Don't call nonzero_bits for the second time if it cannot change\n+\t   anything.  */\n+\tif ((nonzero & nonzero0) != nonzero)\n+\t  nonzero &= (nonzero0 | nonzero_bits (XEXP (x, 1), mode));\n+      }\n       break;\n \n     case PLUS:  case MINUS:\n@@ -11218,9 +11228,13 @@ record_value_for_reg (reg, insn, value)\n \n   if (value)\n     {\n+      enum machine_mode mode = GET_MODE (reg);\n       subst_low_cuid = INSN_CUID (insn);\n-      reg_last_set_mode[regno] = GET_MODE (reg);\n-      reg_last_set_nonzero_bits[regno] = nonzero_bits (value, GET_MODE (reg));\n+      reg_last_set_mode[regno] = mode;\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+\tmode = nonzero_bits_mode;\n+      reg_last_set_nonzero_bits[regno] = nonzero_bits (value, mode);\n       reg_last_set_sign_bit_copies[regno]\n \t= num_sign_bit_copies (value, GET_MODE (reg));\n     }"}]}