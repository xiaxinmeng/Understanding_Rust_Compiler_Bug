{"sha": "6b76f569a3f2030616575bb034bf9fce4e04c87e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI3NmY1NjlhM2YyMDMwNjE2NTc1YmIwMzRiZjlmY2U0ZTA0Yzg3ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-21T16:50:29Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-21T16:50:29Z"}, "message": "[multiple changes]\n\n\n2000-10-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* docs/links.html: Add links to defects list, standards FAQ.\n\n\t* testsuite/21_strings/ctor_copy_dtor.cc (test01): Disable tests\n\twith string creation that allocate huge ammounts of memory.\n\n\t* include/c/bits/std_cstddef.h: Put size_t, ptrdiff_t in\n\tnamepace std.\n\n2000-10-21  Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n\n    \t* libsupc++/exception.cc: Use namespace std.\n    \t* libsupc++/new: DITTO.\n    \t* libsupc++/new_op.cc: DITTO.\n    \t* libsupc++/new_opnt.cc: DITTO.\n    \t* libsupc++/new_opv.cc: DITTO.\n    \t* libsupc++/new_opvnt.cc: DITTO.\n    \t* libsupc++/tinfo.cc: DITTO.\n    \t* libsupc++/tinfo.h: DITTO.\n    \t* libsupc++/vec.cc: DITTO.\n    \t* libsupc++/Makefile.am: Blank lines removal.\n\nFrom-SVN: r36995", "tree": {"sha": "8b9a189f1f15205c1301f96492baaf74f25c84a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b9a189f1f15205c1301f96492baaf74f25c84a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b76f569a3f2030616575bb034bf9fce4e04c87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b76f569a3f2030616575bb034bf9fce4e04c87e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b76f569a3f2030616575bb034bf9fce4e04c87e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b76f569a3f2030616575bb034bf9fce4e04c87e/comments", "author": null, "committer": null, "parents": [{"sha": "80393943c7e03b2f48ed1ac247bbbd10f852598b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80393943c7e03b2f48ed1ac247bbbd10f852598b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80393943c7e03b2f48ed1ac247bbbd10f852598b"}], "stats": {"total": 163, "additions": 101, "deletions": 62}, "files": [{"sha": "c540b9a9dd83580ddb2d4616481f328c4728ed9e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -1,3 +1,26 @@\n+2000-10-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* docs/links.html: Add links to defects list, standards FAQ.\n+\n+\t* testsuite/21_strings/ctor_copy_dtor.cc (test01): Disable tests\n+\twith string creation that allocate huge ammounts of memory.\n+\n+\t* include/c/bits/std_cstddef.h: Put size_t, ptrdiff_t in\n+\tnamepace std.\n+\n+2000-10-21  Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n+\n+    \t* libsupc++/exception.cc: Use namespace std.\n+    \t* libsupc++/new: DITTO.\n+    \t* libsupc++/new_op.cc: DITTO.\n+    \t* libsupc++/new_opnt.cc: DITTO.\n+    \t* libsupc++/new_opv.cc: DITTO.\n+    \t* libsupc++/new_opvnt.cc: DITTO.\n+    \t* libsupc++/tinfo.cc: DITTO.\n+    \t* libsupc++/tinfo.h: DITTO.\n+    \t* libsupc++/vec.cc: DITTO.\n+    \t* libsupc++/Makefile.am: Blank lines removal.\n+\n 2000-10-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* docs/configopts.html, docs/install.html, docs/17_intro/BADNAMES,"}, {"sha": "c19e0f7034d82b0d40eef71e291336b32a2448a0", "filename": "libstdc++-v3/docs/links.html", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Fdocs%2Flinks.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Fdocs%2Flinks.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Flinks.html?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -5,6 +5,13 @@\n \n <H3>Links</H3>\n \n+Public websites that have info on known defects in the standard:\n+<P><UL>\n+  <LI><A HREF=\"http://www.dkuug.dk/jtc1/sc22/wg21/\">defect reflector</A>\n+  <LI><A HREF=\"http://www.comeaucomputing.com/iso/\">comeau reflector</A>\n+  <LI><A HREF=\"http://reality.sgi.com/austern_mti/std-c++/faq.html\">c++ standards FAQ</A>\n+</UL></P>\n+\n <P><UL>\n   <LI><A HREF=\"http://www.sgi.com/Technology/STL\">The SGI STL page</A>\n   <LI><A HREF=\"http://www.stlport.org/\">STLport homepage</A>"}, {"sha": "ea517e41a4d365d6d4adc3b4ec31f44b75007d9a", "filename": "libstdc++-v3/include/c/bits/std_cstddef.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cstddef.h?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -38,3 +38,10 @@\n # pragma GCC system_header\n # include_next <stddef.h>\n #endif\n+\n+namespace std {\n+  using ::size_t;\n+  using ::ptrdiff_t;\n+} // namespace std\n+\n+"}, {"sha": "e147b21694663f837da00bebc7c83cdfcd7a7ef8", "filename": "libstdc++-v3/libsupc++/exception_support.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -31,7 +31,7 @@\n \n #include \"typeinfo\"\n #include \"exception\"\n-#include <stddef.h>\n+#include <cstddef>\n #include \"gansidecl.h\" /* Needed to support macros used in eh-common.h. */\n #include \"eh-common.h\"\n \n@@ -119,7 +119,7 @@ struct cp_eh_info\n extern \"C\" cp_eh_info **__get_eh_info (); \t// actually void **\n \n /* Exception allocate and free, defined in libgcc2. */\n-extern \"C\" void *__eh_alloc(size_t);\n+extern \"C\" void *__eh_alloc(std::size_t);\n extern \"C\" void __eh_free(void *);\n \n /* Is P the type_info node for a pointer of some kind?  */"}, {"sha": "cb66dacc44466188df118b7a1f5c2a2d3b4ef2ea", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -32,7 +32,6 @@\n \n #pragma interface \"new\"\n #include <cstddef>\n-//#include <stddef.h>\n #include <exception>\n \n extern \"C++\" {\n@@ -52,18 +51,18 @@ namespace std {\n } // namespace std\n \n // replaceable signatures\n-void *operator new (size_t) throw (std::bad_alloc);\n-void *operator new[] (size_t) throw (std::bad_alloc);\n+void *operator new (std::size_t) throw (std::bad_alloc);\n+void *operator new[] (std::size_t) throw (std::bad_alloc);\n void operator delete (void *) throw();\n void operator delete[] (void *) throw();\n-void *operator new (size_t, const std::nothrow_t&) throw();\n-void *operator new[] (size_t, const std::nothrow_t&) throw();\n+void *operator new (std::size_t, const std::nothrow_t&) throw();\n+void *operator new[] (std::size_t, const std::nothrow_t&) throw();\n void operator delete (void *, const std::nothrow_t&) throw();\n void operator delete[] (void *, const std::nothrow_t&) throw();\n \n // default placement versions of operator new\n-inline void *operator new(size_t, void *place) throw() { return place; }\n-inline void *operator new[](size_t, void *place) throw() { return place; }\n+inline void *operator new(std::size_t, void *place) throw() { return place; }\n+inline void *operator new[](std::size_t, void *place) throw() { return place; }\n } // extern \"C++\"\n \n #endif"}, {"sha": "26be6ddb2e3128f410922a3092bb978f1ac48ba7", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -31,11 +31,11 @@\n using std::new_handler;\n using std::bad_alloc;\n \n-extern \"C\" void *malloc (size_t);\n+extern \"C\" void *malloc (std::size_t);\n extern new_handler __new_handler;\n \n void *\n-operator new (size_t sz) throw (std::bad_alloc)\n+operator new (std::size_t sz) throw (std::bad_alloc)\n {\n   void *p;\n "}, {"sha": "d7aa91d85458f00229807f680ee85d4742f3ca60", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -31,11 +31,11 @@\n using std::new_handler;\n using std::bad_alloc;\n \n-extern \"C\" void *malloc (size_t);\n+extern \"C\" void *malloc (std::size_t);\n extern new_handler __new_handler;\n \n void *\n-operator new (size_t sz, const std::nothrow_t&) throw()\n+operator new (std::size_t sz, const std::nothrow_t&) throw()\n {\n   void *p;\n "}, {"sha": "98df6c9d8ea3aa371eff98114d36df03260170b5", "filename": "libstdc++-v3/libsupc++/new_opv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -30,7 +30,7 @@\n #include \"new\"\n \n void *\n-operator new[] (size_t sz) throw (std::bad_alloc)\n+operator new[] (std::size_t sz) throw (std::bad_alloc)\n {\n   return ::operator new(sz);\n }"}, {"sha": "12a3c2fc22eac321a5d9a30c09627802b09098de", "filename": "libstdc++-v3/libsupc++/new_opvnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -30,7 +30,7 @@\n #include \"new\"\n \n void *\n-operator new[] (size_t sz, const std::nothrow_t& nothrow) throw()\n+operator new[] (std::size_t sz, const std::nothrow_t& nothrow) throw()\n {\n   return ::operator new(sz, nothrow);\n }"}, {"sha": "523f5b8653c604b56aa1625e293ca0866fb18790", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -29,7 +29,7 @@\n \n #pragma implementation \"typeinfo\"\n \n-#include <stddef.h>\n+#include <cstddef>\n #include \"tinfo.h\"\n #include \"new\"\t\t\t// for placement new\n \n@@ -73,7 +73,7 @@ operator== (const std::type_info& arg) const\n \n extern \"C\" void\n __rtti_class (void *addr, const char *name,\n-\t      const __class_type_info::base_info *bl, size_t bn)\n+\t      const __class_type_info::base_info *bl, std::size_t bn)\n { new (addr) __class_type_info (name, bl, bn); }\n \n extern \"C\" void\n@@ -274,7 +274,7 @@ do_upcast (sub_kind access_path,\n       return contained_nonpublic_p (access_path);\n     }\n   \n-  for (size_t i = n_bases; i--;)\n+  for (std::size_t i = n_bases; i--;)\n     {\n       upcast_result result2;\n       void *p = objptr;\n@@ -366,7 +366,7 @@ do_dyncast (int boff, sub_kind access_path,\n       return false;\n     }\n   bool result_ambig = false;\n-  for (size_t i = n_bases; i--;)\n+  for (std::size_t i = n_bases; i--;)\n     {\n       dyncast_result result2;\n       void *p;\n@@ -513,7 +513,7 @@ do_find_public_subobj (int boff, const type_info &subtype, void *objptr, void *s\n   if (objptr == subptr && subtype == *this)\n     return contained_public;\n   \n-  for (size_t i = n_bases; i--;)\n+  for (std::size_t i = n_bases; i--;)\n     {\n       if (base_list[i].access != PUBLIC)\n         continue; // Not public, can't be here.\n@@ -767,7 +767,7 @@ __do_find_public_src (ptrdiff_t src2dst,\n   if (obj_ptr == src_ptr && *this == *src_type)\n     return __contained_public;\n   \n-  for (size_t i = __base_count; i--;)\n+  for (std::size_t i = __base_count; i--;)\n     {\n       if (!__base_info[i].__is_public_p ())\n         continue; // Not public, can't be here.\n@@ -894,7 +894,7 @@ __do_dyncast (ptrdiff_t src2dst,\n     }\n \n   bool result_ambig = false;\n-  for (size_t i = __base_count; i--;)\n+  for (std::size_t i = __base_count; i--;)\n     {\n       __dyncast_result result2 (result.whole_details);\n       void const *base = obj_ptr;\n@@ -1089,7 +1089,7 @@ __do_upcast (const __class_type_info *dst, const void *obj_ptr,\n   if (src_details & __flags_unknown_mask)\n     src_details = __flags;\n   \n-  for (size_t i = __base_count; i--;)\n+  for (std::size_t i = __base_count; i--;)\n     {\n       __upcast_result result2 (src_details);\n       const void *base = obj_ptr;"}, {"sha": "456f715eeb3c0fc566d00055e4b702fee14377d7", "filename": "libstdc++-v3/libsupc++/tinfo.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -2,6 +2,7 @@\n // Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000 Free Software Foundation\n \n #include \"typeinfo\"\n+#include <cstddef>\n \n // Class declarations shared between the typeinfo implementation files.\n \n@@ -200,9 +201,9 @@ struct __class_type_info : public __user_type_info {\n   };\n \n   const base_info *base_list;\n-  size_t n_bases;\n+  std::size_t n_bases;\n \n-  __class_type_info (const char *name, const base_info *bl, size_t bn)\n+  __class_type_info (const char *name, const base_info *bl, std::size_t bn)\n     : __user_type_info (name), base_list (bl), n_bases (bn) {}\n \n   public:"}, {"sha": "691bd04d94330cbc85234dea3906b9f84b1f1a66", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -41,9 +41,9 @@ namespace __cxxabiv1\n \n /* allocate and construct array */\n extern \"C\" void *\n-__cxa_vec_new (size_t element_count,\n-               size_t element_size,\n-               size_t padding_size,\n+__cxa_vec_new (std::size_t element_count,\n+               std::size_t element_size,\n+               std::size_t padding_size,\n                void (*constructor) (void *),\n                void (*destructor) (void *))\n {\n@@ -53,21 +53,21 @@ __cxa_vec_new (size_t element_count,\n }\n \n extern \"C\" void *\n-__cxa_vec_new2 (size_t element_count,\n-                size_t element_size,\n-                size_t padding_size,\n+__cxa_vec_new2 (std::size_t element_count,\n+                std::size_t element_size,\n+                std::size_t padding_size,\n                 void (*constructor) (void *),\n                 void (*destructor) (void *),\n                 void *(*alloc) (size_t),\n                 void (*dealloc) (void *))\n {\n-  size_t size = element_count * element_size + padding_size;\n+  std::size_t size = element_count * element_size + padding_size;\n   char *base = static_cast <char *> (alloc (size));\n   \n   if (padding_size)\n     {\n       base += padding_size;\n-      reinterpret_cast <size_t *> (base)[-1] = element_count;\n+      reinterpret_cast <std::size_t *> (base)[-1] = element_count;\n     }\n   try\n     {\n@@ -84,21 +84,21 @@ __cxa_vec_new2 (size_t element_count,\n }\n \n extern \"C\" void *\n-__cxa_vec_new3 (size_t element_count,\n-                size_t element_size,\n-                size_t padding_size,\n+__cxa_vec_new3 (std::size_t element_count,\n+                std::size_t element_size,\n+                std::size_t padding_size,\n                 void (*constructor) (void *),\n                 void (*destructor) (void *),\n-                void *(*alloc) (size_t),\n-                void (*dealloc) (void *, size_t))\n+                void *(*alloc) (std::size_t),\n+                void (*dealloc) (void *, std::size_t))\n {\n-  size_t size = element_count * element_size + padding_size;\n+  std::size_t size = element_count * element_size + padding_size;\n   char *base = static_cast <char *> (alloc (size));\n   \n   if (padding_size)\n     {\n       base += padding_size;\n-      reinterpret_cast <size_t *> (base)[-1] = element_count;\n+      reinterpret_cast <std::size_t *> (base)[-1] = element_count;\n     }\n   try\n     {\n@@ -117,12 +117,12 @@ __cxa_vec_new3 (size_t element_count,\n /* construct array */\n extern \"C\" void\n __cxa_vec_ctor (void *array_address,\n-                size_t element_count,\n-                size_t element_size,\n+                std::size_t element_count,\n+                std::size_t element_size,\n                 void (*constructor) (void *),\n                 void (*destructor) (void *))\n {\n-  size_t ix = 0;\n+  std::size_t ix = 0;\n   char *ptr = static_cast <char *> (array_address);\n   \n   try\n@@ -144,12 +144,12 @@ __cxa_vec_ctor (void *array_address,\n extern \"C\" void\n __cxa_vec_cctor (void *dest_array,\n \t\t void *src_array,\n-\t\t size_t element_count,\n-\t\t size_t element_size,\n+\t\t std::size_t element_count,\n+\t\t std::size_t element_size,\n \t\t void (*constructor) (void *, void *),\n \t\t void (*destructor) (void *))\n {\n-  size_t ix = 0;\n+  std::size_t ix = 0;\n   char *dest_ptr = static_cast <char *> (dest_array);\n   char *src_ptr = static_cast <char *> (src_array);\n \n@@ -171,14 +171,14 @@ __cxa_vec_cctor (void *dest_array,\n /* destruct array */\n extern \"C\" void\n __cxa_vec_dtor (void *array_address,\n-                size_t element_count,\n-                size_t element_size,\n+                std::size_t element_count,\n+                std::size_t element_size,\n                 void (*destructor) (void *))\n {\n   if (destructor)\n     {\n       char *ptr = static_cast <char *> (array_address);\n-      size_t ix = element_count;\n+      std::size_t ix = element_count;\n       bool unwinding = std::uncaught_exception ();\n       \n       ptr += element_count * element_size;\n@@ -207,8 +207,8 @@ __cxa_vec_dtor (void *array_address,\n /* destruct and release array */\n extern \"C\" void\n __cxa_vec_delete (void *array_address,\n-                  size_t element_size,\n-                  size_t padding_size,\n+                  std::size_t element_size,\n+                  std::size_t padding_size,\n                   void (*destructor) (void *))\n {\n   __cxa_vec_delete2 (array_address, element_size, padding_size,\n@@ -218,16 +218,16 @@ __cxa_vec_delete (void *array_address,\n \n extern \"C\" void\n __cxa_vec_delete2 (void *array_address,\n-                  size_t element_size,\n-                  size_t padding_size,\n+                  std::size_t element_size,\n+                  std::size_t padding_size,\n                   void (*destructor) (void *),\n                   void (*dealloc) (void *))\n {\n   char *base = static_cast <char *> (array_address);\n   \n   if (padding_size)\n     {\n-      size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n+      std::size_t element_count = reinterpret_cast <std::size_t *> (base)[-1];\n       base -= padding_size;\n       try\n         {\n@@ -246,17 +246,17 @@ __cxa_vec_delete2 (void *array_address,\n \n extern \"C\" void\n __cxa_vec_delete3 (void *array_address,\n-                  size_t element_size,\n-                  size_t padding_size,\n+                  std::size_t element_size,\n+                  std::size_t padding_size,\n                   void (*destructor) (void *),\n-                  void (*dealloc) (void *, size_t))\n+                  void (*dealloc) (void *, std::size_t))\n {\n   char *base = static_cast <char *> (array_address);\n-  size_t size = 0;\n+  std::size_t size = 0;\n   \n   if (padding_size)\n     {\n-      size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n+      std::size_t element_count = reinterpret_cast <std::size_t *> (base)[-1];\n       base -= padding_size;\n       size = element_count * element_size + padding_size;\n       try"}, {"sha": "abb590695db6963e000508f3e8d2b701b833cfba", "filename": "libstdc++-v3/testsuite/21_strings/ctor_copy_dtor.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b76f569a3f2030616575bb034bf9fce4e04c87e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc?ref=6b76f569a3f2030616575bb034bf9fce4e04c87e", "patch": "@@ -59,7 +59,9 @@ int test01(void)\n     VERIFY( false );\n   }\n \n-\n+#if 0\n+  // XXX These tests have been temporarily disabled.\n+  //http://sources.redhat.com/ml/libstdc++/2000-10/msg00033.html\n   // basic_string(const char* s, size_type n, alloc)\n   csz01 = str01.max_size();\n   // NB: As strlen(str_lit01) != csz01, this test is undefined. It\n@@ -89,7 +91,7 @@ int test01(void)\n     VERIFY( false );\n   }\n \n-  // Build a maxsize-1 lengthed string consisting of all A's\n+  // Build a maxsize - 1 lengthed string consisting of all A's\n   try {\n     std::string str03(csz01 - 1, 'A');\n     VERIFY( str03.size() == csz01 - 1 );\n@@ -103,7 +105,7 @@ int test01(void)\n   catch(...) {\n     VERIFY( false );\n   }\n-\n+#endif\n \n   // basic_string(const char* s, const allocator& a = allocator())\n   std::string str04(str_lit01);"}]}