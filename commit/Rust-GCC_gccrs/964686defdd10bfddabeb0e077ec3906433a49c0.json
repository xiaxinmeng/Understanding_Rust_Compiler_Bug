{"sha": "964686defdd10bfddabeb0e077ec3906433a49c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0Njg2ZGVmZGQxMGJmZGRhYmViMGUwNzdlYzM5MDY0MzNhNDljMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-10-24T00:06:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-24T00:06:18Z"}, "message": "alpha.md: Add names for all unnamed insns; use define_insn_and_split in some obvious places.\n\n        * config/alpha/alpha.md: Add names for all unnamed insns; use\n        define_insn_and_split in some obvious places.\n        (lda): Remove.\n        (zero_extendqihi2): Use an expander w/ nonimmediate_operand for BWX.\n        (zero_extendqisi2, zero_extendqidi2): Likewise.\n        (zero_extendhisi2, zero_extendhidi2): Likewise.\n        (abs splitters): Fix match_scratch operand number.\n        (bcc_reverse): Swap pc & label instead of non-canonical compare.\n\nFrom-SVN: r37028", "tree": {"sha": "7880a8a2c7c9a01b0ed4521873635893e895d7ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7880a8a2c7c9a01b0ed4521873635893e895d7ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/964686defdd10bfddabeb0e077ec3906433a49c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964686defdd10bfddabeb0e077ec3906433a49c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964686defdd10bfddabeb0e077ec3906433a49c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964686defdd10bfddabeb0e077ec3906433a49c0/comments", "author": null, "committer": null, "parents": [{"sha": "18a3c539ee506283fb09cb4646e832497cc05bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a3c539ee506283fb09cb4646e832497cc05bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a3c539ee506283fb09cb4646e832497cc05bf0"}], "stats": {"total": 525, "additions": 259, "deletions": 266}, "files": [{"sha": "9ba7546563cbe89a6021b0e3db54c31d44f7ecc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964686defdd10bfddabeb0e077ec3906433a49c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964686defdd10bfddabeb0e077ec3906433a49c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=964686defdd10bfddabeb0e077ec3906433a49c0", "patch": "@@ -1,3 +1,14 @@\n+2000-10-23  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/alpha/alpha.md: Add names for all unnamed insns; use\n+\tdefine_insn_and_split in some obvious places.\n+\t(lda): Remove.\n+\t(zero_extendqihi2): Use an expander w/ nonimmediate_operand for BWX.\n+\t(zero_extendqisi2, zero_extendqidi2): Likewise.\n+\t(zero_extendhisi2, zero_extendhidi2): Likewise.\n+\t(abs splitters): Fix match_scratch operand number.\n+\t(bcc_reverse): Swap pc & label instead of non-canonical compare.\n+\n 2000-10-23  Jim Wilson  <wilson@cygnus.com>\n \n \t* ia64.c (ia64_print_operand, case 'r'): Correct comment.  Handle"}, {"sha": "4fcaaecd11ff5c1d40003cf0cfd3a7f61c44d622", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 248, "deletions": 266, "changes": 514, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964686defdd10bfddabeb0e077ec3906433a49c0/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964686defdd10bfddabeb0e077ec3906433a49c0/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=964686defdd10bfddabeb0e077ec3906433a49c0", "patch": "@@ -2,19 +2,19 @@\n ;; Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n ;; 2000 Free Software Foundation, Inc.\n ;; Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n-\n+;;\n ;; This file is part of GNU CC.\n-\n+;;\n ;; GNU CC is free software; you can redistribute it and/or modify\n ;; it under the terms of the GNU General Public License as published by\n ;; the Free Software Foundation; either version 2, or (at your option)\n ;; any later version.\n-\n+;;\n ;; GNU CC is distributed in the hope that it will be useful,\n ;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n ;; GNU General Public License for more details.\n-\n+;;\n ;; You should have received a copy of the GNU General Public License\n ;; along with GNU CC; see the file COPYING.  If not, write to\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n@@ -403,7 +403,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*extendsidi2_nofix\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,*f,?*f\")\n \t(sign_extend:DI\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,*f,m\")))]\n@@ -416,7 +416,7 @@\n   [(set_attr \"type\" \"iadd,ild,fadd,fld\")\n    (set_attr \"length\" \"*,*,*,8\")])\n \n-(define_insn \"\"\n+(define_insn \"*extendsidi2_fix\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r,*f,?*f\")\n \t(sign_extend:DI\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,*f,*f,m\")))]\n@@ -439,6 +439,42 @@\n    (set (match_dup 0) (sign_extend:DI (match_dup 2)))]\n   \"operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n \n+;; Optimize sign-extension of SImode loads.  This shows up in the wake of\n+;; reload when converting fp->int.\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"hard_int_register_operand\" \"\")\n+        (match_operand:SI 1 \"memory_operand\" \"\"))\n+   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n+        (sign_extend:DI (match_dup 0)))]\n+  \"true_regnum (operands[0]) == true_regnum (operands[2])\n+   || peep2_reg_dead_p (2, operands[0])\"\n+  [(set (match_dup 2)\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"\")\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"hard_int_register_operand\" \"\")\n+        (match_operand:SI 1 \"hard_fp_register_operand\" \"\"))\n+   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n+        (sign_extend:DI (match_dup 0)))]\n+  \"TARGET_FIX\n+   && (true_regnum (operands[0]) == true_regnum (operands[2])\n+       || peep2_reg_dead_p (2, operands[0]))\"\n+  [(set (match_dup 2)\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"\")\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"hard_fp_register_operand\" \"\")\n+        (sign_extend:DI (match_operand:SI 1 \"hard_fp_register_operand\" \"\")))\n+   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n+        (match_dup 0))]\n+  \"TARGET_FIX && peep2_reg_dead_p (2, operands[0])\"\n+  [(set (match_dup 2)\n+\t(sign_extend:DI (match_dup 1)))]\n+  \"\")\n+\n ;; Do addsi3 the way expand_binop would do if we didn't have one.  This\n ;; generates better code.  We have the anonymous addsi3 pattern below in\n ;; case combine wants to make it.\n@@ -466,7 +502,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*addsi_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n \t(plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ,rJ,rJ,rJ\")\n \t\t (match_operand:SI 2 \"add_operand\" \"rI,O,K,L\")))]\n@@ -494,7 +530,7 @@\n   operands[4] = GEN_INT (low);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*addsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n \t (plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ,rJ\")\n@@ -553,15 +589,6 @@\n   \"\"\n   \"\")\n \n-;; This pattern exists so that register elimination tries to canonize\n-;; (plus (plus reg c1) c2).\n-\n-(define_insn \"*lda\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (match_operand:DI 1 \"addition_operation\" \"p\"))]\n-  \"\"\n-  \"lda %0,%a1\")\n-\n ;; We used to expend quite a lot of effort choosing addq/subq/lda.\n ;; With complications like\n ;;\n@@ -578,7 +605,7 @@\n ;; and the fact that the three insns schedule exactly the same, it's\n ;; just not worth the effort.\n \n-(define_insn \"*adddi_2\"\n+(define_insn \"*adddi_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%r,r,r\")\n \t\t (match_operand:DI 2 \"add_operand\" \"r,K,L\")))]\n@@ -593,7 +620,7 @@\n ;; done because register elimination offsets will change the hi/lo split,\n ;; and if we split before reload, we will require additional instructions.\n \n-(define_insn \"\"\n+(define_insn \"*adddi_fp_hack\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (plus:DI (match_operand:DI 1 \"reg_no_subreg_operand\" \"r\")\n \t\t (match_operand:DI 2 \"const_int_operand\" \"n\")))]\n@@ -644,7 +671,7 @@\n     FAIL;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*saddl\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n \t\t\t  (match_operand:SI 2 \"const48_operand\" \"I,I\"))\n@@ -654,7 +681,7 @@\n    s%2addl %1,%3,%0\n    s%2subl %1,%n3,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*saddl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n \t (plus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n@@ -686,7 +713,7 @@\n   operands[8] = gen_lowpart (SImode, operands[6]);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*saddq\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(plus:DI (mult:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r,r\")\n \t\t\t  (match_operand:DI 2 \"const48_operand\" \"I,I\"))\n@@ -702,7 +729,7 @@\n   \"\"\n   \"subl $31,%1,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*negsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (neg:SI\n \t\t\t (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI\"))))]\n@@ -739,14 +766,14 @@\n     }\n } \")\n \n-(define_insn \"\"\n+(define_insn \"*subsi_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t  (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n   \"subl %r1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*subsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t\t  (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\"))))]\n@@ -760,15 +787,15 @@\n   \"\"\n   \"subq %r1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*ssubl\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n \t\t\t   (match_operand:SI 2 \"const48_operand\" \"I\"))\n \t\t  (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n   \"s%2subl %1,%3,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*ssubl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n \t (minus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n@@ -777,7 +804,7 @@\n   \"\"\n   \"s%2subl %1,%3,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*ssubq\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (mult:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r\")\n \t\t\t   (match_operand:DI 2 \"const48_operand\" \"I\"))\n@@ -794,7 +821,7 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"opsize\" \"si\")])\n \n-(define_insn \"\"\n+(define_insn \"*mulsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n \t  (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n@@ -826,7 +853,7 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"opsize\" \"udi\")])\n \n-(define_insn \"\"\n+(define_insn \"*umuldi3_highpart_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(truncate:DI\n \t (lshiftrt:TI\n@@ -957,7 +984,7 @@\n \n ;; Lengths of 8 for ldq $t12,__divq($gp); jsr $t9,($t12),__divq as\n ;; expanded by the assembler.\n-(define_insn \"\"\n+(define_insn \"*divmodsi_internal\"\n   [(set (reg:DI 27)\n \t(sign_extend:DI (match_operator:SI 1 \"divmod_operator\"\n \t\t\t[(reg:DI 24) (reg:DI 25)])))\n@@ -968,7 +995,7 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*divmoddi_internal\"\n   [(set (reg:DI 27)\n \t(match_operator:DI 1 \"divmod_operator\"\n \t\t\t[(reg:DI 24) (reg:DI 25)]))\n@@ -1023,14 +1050,43 @@\n   operands[4] = GEN_INT (mask2);\n }\")\n \n-(define_insn \"zero_extendqihi2\"\n+(define_expand \"zero_extendqihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (! TARGET_BWX)\n+    operands[1] = force_reg (QImode, operands[1]);\n+}\")\n+\n+(define_insn \"*zero_extendqihi2_bwx\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"TARGET_BWX\"\n+  \"@\n+   and %1,0xff,%0\n+   ldbu %0,%1\"\n+  [(set_attr \"type\" \"ilog,ild\")])\n+\n+(define_insn \"*zero_extendqihi2_nobwx\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\")))]\n-  \"\"\n+  \"! TARGET_BWX\"\n   \"and %1,0xff,%0\"\n   [(set_attr \"type\" \"ilog\")])\n \n-(define_insn \"\"\n+(define_expand \"zero_extendqisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (! TARGET_BWX)\n+    operands[1] = force_reg (QImode, operands[1]);\n+}\")\n+\n+(define_insn \"*zero_extendqisi2_bwx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"TARGET_BWX\"\n@@ -1039,20 +1095,24 @@\n    ldbu %0,%1\"\n   [(set_attr \"type\" \"ilog,ild\")])\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqisi2_nobwx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"! TARGET_BWX\"\n   \"and %1,0xff,%0\"\n   [(set_attr \"type\" \"ilog\")])\n \n-(define_expand \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(zero_extend:SI (match_operand:QI 1 \"register_operand\" \"\")))]\n+(define_expand \"zero_extendqidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\")\n-\n-(define_insn \"\"\n+  \"\n+{\n+  if (! TARGET_BWX)\n+    operands[1] = force_reg (QImode, operands[1]);\n+}\")\n+  \n+(define_insn \"*zero_extendqidi2_bwx\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"TARGET_BWX\"\n@@ -1061,20 +1121,24 @@\n    ldbu %0,%1\"\n   [(set_attr \"type\" \"ilog,ild\")])\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqidi2_nobwx\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"! TARGET_BWX\"\n   \"and %1,0xff,%0\"\n   [(set_attr \"type\" \"ilog\")])\n   \n-(define_expand \"zero_extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI (match_operand:QI 1 \"register_operand\" \"\")))]\n+(define_expand \"zero_extendhisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\")\n-  \n-(define_insn \"\"\n+  \"\n+{\n+  if (! TARGET_BWX)\n+    operands[1] = force_reg (HImode, operands[1]);\n+}\")\n+\n+(define_insn \"*zero_extendhisi2_bwx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"TARGET_BWX\"\n@@ -1083,20 +1147,24 @@\n    ldwu %0,%1\"\n   [(set_attr \"type\" \"shift,ild\")])\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendhisi2_nobwx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))]\n   \"! TARGET_BWX\"\n   \"zapnot %1,3,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_expand \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n+(define_expand \"zero_extendhidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"\")\n+  \"\n+{\n+  if (! TARGET_BWX)\n+    operands[1] = force_reg (HImode, operands[1]);\n+}\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendhidi2_bwx\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"TARGET_BWX\"\n@@ -1105,27 +1173,21 @@\n    ldwu %0,%1\"\n   [(set_attr \"type\" \"shift,ild\")])\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendhidi2_nobwx\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (match_operand:HI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"zapnot %1,3,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_expand \"zero_extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI (match_operand:HI 1 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n (define_insn \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"zapnot %1,15,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn  \"\"\n+(define_insn  \"*andnot\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (not:DI (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI\"))\n \t\t(match_operand:DI 2 \"reg_or_0_operand\" \"rJ\")))]\n@@ -1150,7 +1212,7 @@\n   \"ornot $31,%1,%0\"\n   [(set_attr \"type\" \"ilog\")])\n \n-(define_insn \"\"\n+(define_insn \"*iornot\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (not:DI (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI\"))\n \t\t(match_operand:DI 2 \"reg_or_0_operand\" \"rJ\")))]\n@@ -1168,7 +1230,7 @@\n    eqv %r1,%N2,%0\"\n   [(set_attr \"type\" \"ilog\")])\n \n-(define_insn \"\"\n+(define_insn \"*xornot\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (xor:DI (match_operand:DI 1 \"register_operand\" \"%rJ\")\n \t\t\t(match_operand:DI 2 \"register_operand\" \"rI\"))))]\n@@ -1193,7 +1255,7 @@\n   operands[3] = gen_reg_rtx (DImode);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*cttz\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")] 1))]\n   \"TARGET_CIX\"\n@@ -1504,7 +1566,7 @@\n   operands[4] = gen_reg_rtx (DImode);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*extxl_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extract:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t (match_operand:DI 2 \"mode_width_operand\" \"n\")\n@@ -1527,7 +1589,7 @@\n ;; in shifts larger than a word size.  So capture these patterns that it \n ;; should have turned into zero_extracts.\n \n-(define_insn \"\"\n+(define_insn \"*extxl_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (lshiftrt:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t  (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n@@ -1537,7 +1599,7 @@\n   \"ext%U3l %1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"\"\n+(define_insn \"*extql_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t  (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n@@ -1616,23 +1678,23 @@\n ;;  operands[7] = GEN_INT (- INTVAL (operands[2]) / BITS_PER_UNIT);\n ;;}\")\n   \n-(define_insn \"\"\n+(define_insn \"*insbl_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"r\"))\n \t\t   (match_operand:DI 2 \"mul8_operand\" \"I\")))]\n   \"\"\n   \"insbl %1,%s2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"\"\n+(define_insn \"*inswl_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"r\"))\n \t\t   (match_operand:DI 2 \"mul8_operand\" \"I\")))]\n   \"\"\n   \"inswl %1,%s2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"\"\n+(define_insn \"*insll_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t   (match_operand:DI 2 \"mul8_operand\" \"I\")))]\n@@ -1679,7 +1741,7 @@\n ;; Combine has this sometimes habit of moving the and outside of the\n ;; shift, making life more interesting.\n \n-(define_insn \"\"\n+(define_insn \"*insxl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t   \t   (match_operand:DI 2 \"mul8_operand\" \"I\"))\n@@ -1811,18 +1873,13 @@\n #endif\n }\")\n \n-(define_insn \"\"\n+(define_insn_and_split \"*abstf_internal\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=r\")\n \t(abs:TF (match_operand:TF 1 \"reg_or_fp0_operand\" \"rG\")))\n    (use (match_operand:DI 2 \"register_operand\" \"=r\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(abs:TF (match_operand:TF 1 \"reg_or_fp0_operand\" \"\")))\n-   (use (match_operand:DI 4 \"register_operand\" \"\"))]\n-  \"reload_completed\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(const_int 0)]\n   \"\n {\n@@ -1877,18 +1934,13 @@\n #endif\n }\")\n \n-(define_insn \"\"\n+(define_insn_and_split \"*negtf_internal\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=r\")\n \t(neg:TF (match_operand:TF 1 \"reg_or_fp0_operand\" \"rG\")))\n    (use (match_operand:DI 2 \"register_operand\" \"=r\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(neg:TF (match_operand:TF 1 \"reg_or_fp0_operand\" \"\")))\n-   (use (match_operand:DI 4 \"register_operand\" \"\"))]\n-  \"reload_completed\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(const_int 0)]\n   \"\n {\n@@ -1912,7 +1964,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*addsf_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(plus:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -1930,7 +1982,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddf_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(plus:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -1948,7 +2000,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(plus:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n@@ -1958,7 +2010,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(plus:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"reg_or_fp0_operand\" \"%fG\"))\n@@ -1993,48 +2045,37 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_split\n-  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n-\t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"\")) 0))\n-   (clobber (match_scratch:DI 2 \"\"))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_FP && reload_completed\"\n-  [(set (match_dup 2) (fix:DI (match_dup 1)))\n-   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n-   (set (match_dup 0) (match_dup 3))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n-\t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"\")) 0))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_FP && reload_completed\"\n-  [(set (match_dup 2) (fix:DI (match_dup 1)))\n-   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n-   (set (match_dup 0) (match_dup 3))]\n-  ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n-  \"operands[3] = gen_rtx_REG (SImode, REGNO (operands[2]));\")\n-\n-(define_insn \"\"\n+(define_insn_and_split \"*fix_truncdfsi_ieee\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n \t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")) 0))\n    (clobber (match_scratch:DI 2 \"=&f\"))\n    (clobber (match_scratch:SI 3 \"=&f\"))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (fix:DI (match_dup 1)))\n+   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n+   (set (match_dup 0) (match_dup 3))]\n+  \"\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"*fix_truncdfsi_internal\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n \t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")) 0))\n    (clobber (match_scratch:DI 2 \"=f\"))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n   \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (fix:DI (match_dup 1)))\n+   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n+   (set (match_dup 0) (match_dup 3))]\n+  ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n+  \"operands[3] = gen_rtx_REG (SImode, REGNO (operands[2]));\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*fix_truncdfdi_ieee\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=&f\")\n \t(fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n@@ -2052,52 +2093,39 @@\n \n ;; Likewise between SFmode and SImode.\n \n-(define_split\n-  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n-\t(subreg:SI (fix:DI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"\"))) 0))\n-   (clobber (match_scratch:DI 2 \"\"))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_FP && reload_completed\"\n-  [(set (match_dup 2) (fix:DI (float_extend:DF (match_dup 1))))\n-   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n-   (set (match_dup 0) (match_dup 3))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"memory_operand\" \"\")\n-\t(subreg:SI (fix:DI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"\"))) 0))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_FP && reload_completed\"\n-  [(set (match_dup 2) (fix:DI (float_extend:DF (match_dup 1))))\n-   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n-   (set (match_dup 0) (match_dup 3))]\n-  ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n-  \"operands[3] = gen_rtx_REG (SImode, REGNO (operands[2]));\")\n-\n-(define_insn \"\"\n+(define_insn_and_split \"*fix_truncsfsi_ieee\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n \t(subreg:SI (fix:DI (float_extend:DF\n \t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))) 0))\n    (clobber (match_scratch:DI 2 \"=&f\"))\n    (clobber (match_scratch:SI 3 \"=&f\"))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (fix:DI (float_extend:DF (match_dup 1))))\n+   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n+   (set (match_dup 0) (match_dup 3))]\n+  \"\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"*fix_truncsfsi_internal\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n \t(subreg:SI (fix:DI (float_extend:DF\n \t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))) 0))\n    (clobber (match_scratch:DI 2 \"=f\"))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n   \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (fix:DI (float_extend:DF (match_dup 1))))\n+   (set (match_dup 3) (unspec:SI [(match_dup 2)] 5))\n+   (set (match_dup 0) (match_dup 3))]\n+  ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n+  \"operands[3] = gen_rtx_REG (SImode, REGNO (operands[2]));\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*fix_truncsfdi_ieee\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=&f\")\n \t(fix:DI (float_extend:DF\n \t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))))]\n@@ -2121,7 +2149,7 @@\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FIX, operands); DONE;\")\n \n-(define_insn \"\"\n+(define_insn \"*floatdisf_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(float:SF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n@@ -2137,7 +2165,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*floatdidf_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(float:DF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n@@ -2187,15 +2215,15 @@\n     operands[1] = force_reg (SFmode, operands[1]);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*extendsfdf2_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"cvtsts %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*extendsfdf2_internal\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f,m\")\n \t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"f,m,f\")))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n@@ -2223,7 +2251,7 @@\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FLOAT_EXTEND, operands); DONE;\")\n \n-(define_insn \"\"\n+(define_insn \"*truncdfsf2_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(float_truncate:SF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n@@ -2272,7 +2300,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*divsf3_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(div:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t(match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -2292,7 +2320,7 @@\n    (set_attr \"opsize\" \"si\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*divdf3_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(div:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -2310,7 +2338,7 @@\n   [(set_attr \"type\" \"fdiv\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*divdf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n \t\t(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -2319,7 +2347,7 @@\n   [(set_attr \"type\" \"fdiv\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*divdf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t(float_extend:DF\n@@ -2329,7 +2357,7 @@\n   [(set_attr \"type\" \"fdiv\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*divdf_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n \t\t(float_extend:DF (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))))]\n@@ -2345,7 +2373,7 @@\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_arith (DIV, operands); DONE;\")\n \n-(define_insn \"\"\n+(define_insn \"*mulsf3_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(mult:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -2363,7 +2391,7 @@\n   [(set_attr \"type\" \"fmul\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*muldf3_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(mult:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -2381,7 +2409,7 @@\n   [(set_attr \"type\" \"fmul\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*muldf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(mult:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n@@ -2391,7 +2419,7 @@\n   [(set_attr \"type\" \"fmul\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*muldf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(mult:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"reg_or_fp0_operand\" \"%fG\"))\n@@ -2409,7 +2437,7 @@\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_arith (MULT, operands); DONE;\")\n \n-(define_insn \"\"\n+(define_insn \"*subsf3_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(minus:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t  (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -2427,7 +2455,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdf3_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(minus:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t  (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n@@ -2445,7 +2473,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(minus:DF (float_extend:DF\n \t\t   (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n@@ -2455,7 +2483,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t  (float_extend:DF\n@@ -2465,7 +2493,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdf_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(minus:DF (float_extend:DF\n \t\t   (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n@@ -2483,7 +2511,7 @@\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_arith (MINUS, operands); DONE;\")\n \n-(define_insn \"\"\n+(define_insn \"*sqrtsf2_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(sqrt:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && TARGET_FIX && alpha_fptm >= ALPHA_FPTM_SU\"\n@@ -2501,7 +2529,7 @@\n    (set_attr \"opsize\" \"si\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*sqrtdf2_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(sqrt:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && TARGET_FIX && alpha_fptm >= ALPHA_FPTM_SU\"\n@@ -2788,7 +2816,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(abs:DI (match_dup 0)))\n-   (clobber (match_operand:DI 2 \"register_operand\" \"\"))]\n+   (clobber (match_operand:DI 1 \"register_operand\" \"\"))]\n   \"\"\n   [(set (match_dup 1) (neg:DI (match_dup 0)))\n    (set (match_dup 0) (if_then_else:DI (ge (match_dup 0) (const_int 0))\n@@ -2807,7 +2835,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(neg:DI (abs:DI (match_dup 0))))\n-   (clobber (match_operand:DI 2 \"register_operand\" \"\"))]\n+   (clobber (match_operand:DI 1 \"register_operand\" \"\"))]\n   \"\"\n   [(set (match_dup 1) (neg:DI (match_dup 0)))\n    (set (match_dup 0) (if_then_else:DI (le (match_dup 0) (const_int 0))\n@@ -2910,7 +2938,7 @@\n \t\t\t\t       (match_dup 1) (match_dup 2)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*smax_const0\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(smax:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t (const_int 0)))]\n@@ -2941,7 +2969,7 @@\n \t\t\t\t       (match_dup 1) (match_dup 2)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*smin_const0\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(smin:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t (const_int 0)))]\n@@ -2957,9 +2985,7 @@\n \t(if_then_else:DI (eq (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"\n-{ operands[3] = gen_reg_rtx (DImode);\n-}\")\n+  \"operands[3] = gen_reg_rtx (DImode);\")\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -2980,9 +3006,7 @@\n \t(if_then_else:DI (ne (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"\n-{ operands[3] = gen_reg_rtx (DImode);\n-}\")\n+  \"operands[3] = gen_reg_rtx (DImode);\")\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -2995,7 +3019,7 @@\n \t\t\t\t       (match_dup 1) (match_dup 2)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*bcc_normal\"\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 1 \"signed_comparison_operator\"\n@@ -3007,19 +3031,20 @@\n   \"b%C1 %r2,%0\"\n   [(set_attr \"type\" \"ibr\")])\n \n-(define_insn \"\"\n+(define_insn \"*bcc_reverse\"\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 1 \"signed_comparison_operator\"\n-\t\t\t [(const_int 0)\n-\t\t\t  (match_operand:DI 2 \"register_operand\" \"r\")])\n-\t (label_ref (match_operand 0 \"\" \"\"))\n-\t (pc)))]\n+\t\t\t [(match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t  (const_int 0)])\n+\n+\t (pc)\n+\t (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n   \"b%c1 %2,%0\"\n   [(set_attr \"type\" \"ibr\")])\n \n-(define_insn \"\"\n+(define_insn \"*blbs_normal\"\n   [(set (pc)\n \t(if_then_else\n \t (ne (zero_extract:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n@@ -3032,7 +3057,7 @@\n   \"blbs %r1,%0\"\n   [(set_attr \"type\" \"ibr\")])\n \n-(define_insn \"\"\n+(define_insn \"*blbc_normal\"\n   [(set (pc)\n \t(if_then_else\n \t (eq (zero_extract:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n@@ -3074,7 +3099,7 @@\n ;; we need to have variants that expand the arguments from SFmode\n ;; to DFmode.\n \n-(define_insn \"*cmpdf_tp\"\n+(define_insn \"*cmpdf_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")\n@@ -3084,7 +3109,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"*cmpdf_no_tp\"\n+(define_insn \"*cmpdf_internal\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")\n@@ -3094,7 +3119,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_ieee_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(float_extend:DF\n@@ -3105,7 +3130,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(float_extend:DF\n@@ -3116,7 +3141,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_ieee_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")\n@@ -3127,7 +3152,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")\n@@ -3138,7 +3163,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_ieee_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(float_extend:DF\n@@ -3150,7 +3175,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(float_extend:DF\n@@ -3162,7 +3187,7 @@\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdfcc_internal\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:DF \n \t (match_operator 3 \"signed_comparison_operator\"\n@@ -3176,7 +3201,7 @@\n    fcmov%D3 %R4,%R5,%0\"\n   [(set_attr \"type\" \"fcmov\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsfcc_internal\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:SF \n \t (match_operator 3 \"signed_comparison_operator\"\n@@ -3190,7 +3215,7 @@\n    fcmov%D3 %R4,%R5,%0\"\n   [(set_attr \"type\" \"fcmov\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdfcc_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:DF \n \t (match_operator 3 \"signed_comparison_operator\"\n@@ -3204,7 +3229,7 @@\n    fcmov%D3 %R4,%R5,%0\"\n   [(set_attr \"type\" \"fcmov\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdfcc_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:DF \n \t (match_operator 3 \"signed_comparison_operator\"\n@@ -3219,7 +3244,7 @@\n    fcmov%D3 %R4,%R5,%0\"\n   [(set_attr \"type\" \"fcmov\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdfcc_ext3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:SF \n \t (match_operator 3 \"signed_comparison_operator\"\n@@ -3234,7 +3259,7 @@\n    fcmov%D3 %R4,%R5,%0\"\n   [(set_attr \"type\" \"fcmov\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdfcc_ext4\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:DF \n \t (match_operator 3 \"signed_comparison_operator\"\n@@ -3301,7 +3326,7 @@\n   operands[4] = CONST0_RTX (DFmode);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*fbcc_normal\"\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 1 \"signed_comparison_operator\"\n@@ -3313,7 +3338,7 @@\n   \"fb%C1 %R2,%0\"\n   [(set_attr \"type\" \"fbr\")])\n \n-(define_insn \"\"\n+(define_insn \"*fbcc_ext_normal\"\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 1 \"signed_comparison_operator\"\n@@ -4360,7 +4385,7 @@\n   \"\n { operands[2] = gen_reg_rtx (DImode); }\")\n \n-(define_insn \"\"\n+(define_insn \"*tablejump_osf_internal\"\n   [(set (pc)\n \t(plus (match_operand:DI 0 \"register_operand\" \"r\")\n \t      (label_ref (match_operand 1 \"\" \"\"))))\n@@ -4405,7 +4430,7 @@\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*tablejump_nt_internal\"\n   [(set (pc)\n \t(match_operand:DI 0 \"register_operand\" \"r\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n@@ -4453,7 +4478,7 @@\n ;; op 1 is table label\n ;;\n \n-(define_insn \"\"\n+(define_insn \"*tablejump_vms_internal\"\n   [(set (pc)\n \t(plus (match_operand:DI 0 \"register_operand\" \"r\")\n \t      (label_ref (match_operand 1 \"\" \"\"))))]\n@@ -4477,7 +4502,7 @@\n ;; are done via define_expand.  Start with the floating-point insns, since\n ;; they are simpler.\n \n-(define_insn \"\"\n+(define_insn \"*movsf_nofix\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,*r,*r,m,m\")\n \t(match_operand:SF 1 \"input_operand\" \"fG,m,*rG,m,fG,*r\"))]\n   \"TARGET_FPREGS && ! TARGET_FIX\n@@ -4492,7 +4517,7 @@\n    stl %r1,%0\"\n   [(set_attr \"type\" \"fcpys,fld,ilog,ild,fst,ist\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_fix\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,*r,*r,m,m,f,*r\")\n \t(match_operand:SF 1 \"input_operand\" \"fG,m,*rG,m,fG,*r,*r,f\"))]\n   \"TARGET_FPREGS && TARGET_FIX\n@@ -4509,7 +4534,7 @@\n    ftois %1,%0\"\n   [(set_attr \"type\" \"fcpys,fld,ilog,ild,fst,ist,itof,ftoi\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_nofp\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m\")\n \t(match_operand:SF 1 \"input_operand\" \"rG,m,r\"))]\n   \"! TARGET_FPREGS\n@@ -4521,7 +4546,7 @@\n    stl %r1,%0\"\n   [(set_attr \"type\" \"ilog,ild,ist\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_nofix\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,*r,*r,m,m\")\n \t(match_operand:DF 1 \"input_operand\" \"fG,m,*rG,m,fG,*r\"))]\n   \"TARGET_FPREGS && ! TARGET_FIX\n@@ -4536,7 +4561,7 @@\n    stq %r1,%0\"\n   [(set_attr \"type\" \"fcpys,fld,ilog,ild,fst,ist\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_fix\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,*r,*r,m,m,f,*r\")\n \t(match_operand:DF 1 \"input_operand\" \"fG,m,*rG,m,fG,*r,*r,f\"))]\n   \"TARGET_FPREGS && TARGET_FIX\n@@ -4553,7 +4578,7 @@\n    ftoit %1,%0\"\n   [(set_attr \"type\" \"fcpys,fld,ilog,ild,fst,ist,itof,ftoi\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_nofp\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m\")\n \t(match_operand:DF 1 \"input_operand\" \"rG,m,r\"))]\n   \"! TARGET_FPREGS\n@@ -4567,16 +4592,13 @@\n \n ;; Subregs suck for register allocation.  Pretend we can move TFmode\n ;; data between general registers until after reload.\n-(define_insn \"\"\n+\n+(define_insn_and_split \"*movtf_internal\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=r,o\")\n \t(match_operand:TF 1 \"input_operand\" \"roG,r\"))]\n   \"register_operand (operands[0], TFmode)\n    || reg_or_fp0_operand (operands[1], TFmode)\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TF 1 \"input_operand\" \"\"))]\n+  \"#\"\n   \"reload_completed\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 1) (match_dup 3))]\n@@ -4624,7 +4646,7 @@\n     operands[1] = force_reg (TFmode, operands[1]);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*movsi_nofix\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,*f,*f,m\")\n \t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,m,rJ,*fJ,m,*f\"))]\n   \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS && ! TARGET_FIX\n@@ -4641,7 +4663,7 @@\n    st%, %R1,%0\"\n   [(set_attr \"type\" \"ilog,iadd,iadd,ild,ist,fcpys,fld,fst\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_fix\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,*f,*f,m,r,*f\")\n \t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,m,rJ,*fJ,m,*f,*f,r\"))]\n   \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS && TARGET_FIX\n@@ -4660,7 +4682,7 @@\n    itofs %1,%0\"\n   [(set_attr \"type\" \"ilog,iadd,iadd,ild,ist,fcpys,fld,fst,ftoi,itof\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsi_nt_vms\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,m,*f,*f,m\")\n \t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,s,m,rJ,*fJ,m,*f\"))]\n   \"(TARGET_WINDOWS_NT || TARGET_OPEN_VMS)\n@@ -4678,7 +4700,7 @@\n    st%, %R1,%0\"\n   [(set_attr \"type\" \"ilog,iadd,iadd,ldsym,ild,ist,fcpys,fld,fst\")])\n \n-(define_insn \"\"\n+(define_insn \"*movhi_nobwx\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(match_operand:HI 1 \"input_operand\" \"rJ,n\"))]\n   \"! TARGET_BWX\n@@ -4689,7 +4711,7 @@\n    lda %0,%L1\"\n   [(set_attr \"type\" \"ilog,iadd\")])\n \n-(define_insn \"\"\n+(define_insn \"*movhi_bwx\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m\")\n \t(match_operand:HI 1 \"input_operand\" \"rJ,n,m,rJ\"))]\n   \"TARGET_BWX\n@@ -4702,7 +4724,7 @@\n    stw %r1,%0\"\n   [(set_attr \"type\" \"ilog,iadd,ild,ist\")])\n \n-(define_insn \"\"\n+(define_insn \"*movqi_nobwx\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n \t(match_operand:QI 1 \"input_operand\" \"rJ,n\"))]\n   \"! TARGET_BWX\n@@ -4713,7 +4735,7 @@\n    lda %0,%L1\"\n   [(set_attr \"type\" \"ilog,iadd\")])\n \n-(define_insn \"\"\n+(define_insn \"*movqi_bwx\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r,m\")\n \t(match_operand:QI 1 \"input_operand\" \"rJ,n,m,rJ\"))]\n   \"TARGET_BWX\n@@ -4769,7 +4791,7 @@\n     FAIL;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*movdi_nofix\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,m,*f,*f,Q\")\n \t(match_operand:DI 1 \"input_operand\" \"rJ,K,L,s,m,rJ,*fJ,Q,*f\"))]\n   \"! TARGET_FIX\n@@ -4787,7 +4809,7 @@\n    stt %R1,%0\"\n   [(set_attr \"type\" \"ilog,iadd,iadd,ldsym,ild,ist,fcpys,fld,fst\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdi_fix\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,m,*f,*f,Q,r,*f\")\n \t(match_operand:DI 1 \"input_operand\" \"rJ,K,L,s,m,rJ,*fJ,Q,*f,*f,r\"))]\n   \"TARGET_FIX\n@@ -5601,8 +5623,6 @@\n   DONE;\n }\")\n \n-\n-\n ;; Block move/clear, see alpha.c for more details.\n ;; Argument 0 is the destination\n ;; Argument 1 is the source\n@@ -5863,14 +5883,14 @@\n   DONE;\n }\")\n \n-(define_insn \"builtin_setjmp_receiver\"\n+(define_insn \"*builtin_setjmp_receiver_sub_label\"\n   [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] 2)]\n   \"! TARGET_OPEN_VMS && ! TARGET_WINDOWS_NT && TARGET_AS_CAN_SUBTRACT_LABELS\"\n   \"\\\\n$LSJ%=:\\;ldgp $29,$LSJ%=-%l0($27)\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multi\")])\n \n-(define_insn \"\"\n+(define_insn \"builtin_setjmp_receiver\"\n   [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] 2)]\n   \"! TARGET_OPEN_VMS && ! TARGET_WINDOWS_NT\"\n   \"br $29,$LSJ%=\\\\n$LSJ%=:\\;ldgp $29,0($29)\"\n@@ -6006,41 +6026,3 @@\n    ldq $27,%3\\;jsr $26,%1\\;ldq $27,0($29)\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,16\")])\n-\f\n-;; Peepholes go at the end.\n-\n-;; Optimize sign-extension of SImode loads.  This shows up in the wake of\n-;; reload when converting fp->int.\n-\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"hard_int_register_operand\" \"\")\n-        (match_operand:SI 1 \"memory_operand\" \"\"))\n-   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n-        (sign_extend:DI (match_dup 0)))]\n-  \"true_regnum (operands[0]) == true_regnum (operands[2])\n-   || peep2_reg_dead_p (2, operands[0])\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"\")\n-\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"hard_int_register_operand\" \"\")\n-        (match_operand:SI 1 \"hard_fp_register_operand\" \"\"))\n-   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n-        (sign_extend:DI (match_dup 0)))]\n-  \"TARGET_FIX\n-   && (true_regnum (operands[0]) == true_regnum (operands[2])\n-       || peep2_reg_dead_p (2, operands[0]))\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"\")\n-\n-(define_peephole2\n-  [(set (match_operand:DI 0 \"hard_fp_register_operand\" \"\")\n-        (sign_extend:DI (match_operand:SI 1 \"hard_fp_register_operand\" \"\")))\n-   (set (match_operand:DI 2 \"hard_int_register_operand\" \"\")\n-        (match_dup 0))]\n-  \"TARGET_FIX && peep2_reg_dead_p (2, operands[0])\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"\")"}]}