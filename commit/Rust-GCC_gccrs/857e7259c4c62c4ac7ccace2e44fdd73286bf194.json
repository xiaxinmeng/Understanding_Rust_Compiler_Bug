{"sha": "857e7259c4c62c4ac7ccace2e44fdd73286bf194", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3ZTcyNTljNGM2MmM0YWM3Y2NhY2UyZTQ0ZmRkNzMyODZiZjE5NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-12-08T19:13:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-12-08T19:13:35Z"}, "message": "re PR middle-end/17982 (stop calling assemble_external before final assembly output time)\n\n\tPR 17982\n\t* varasm.c (pending_assemble_externals): New static.\n\t(assemble_external_real): Meat of assemble_external split out\n\tto this new function.\n\t(process_pending_assemble_externals): New function.\n\t(assemble_external): Use gcc_assert.  If flag_unit_at_a_time\n\tis true and the basic test passes, merely cons the decl onto\n\tthe pending list to be handled later.\n\t* tree.h: Declare process_pending_assemble_externals.\n\t* cgraphunit.c (cgraph_optimize): Call it.\n\n\t* config/h8300/h8300.h: Do not define ASM_OUTPUT_EXTERNAL.\n\nFrom-SVN: r91914", "tree": {"sha": "d6fa6db393ca0978490c8abd03a55eb4749830d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6fa6db393ca0978490c8abd03a55eb4749830d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/857e7259c4c62c4ac7ccace2e44fdd73286bf194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857e7259c4c62c4ac7ccace2e44fdd73286bf194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/857e7259c4c62c4ac7ccace2e44fdd73286bf194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857e7259c4c62c4ac7ccace2e44fdd73286bf194/comments", "author": null, "committer": null, "parents": [{"sha": "b057216dba84bd26eeb749d876fde5b871e01e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b057216dba84bd26eeb749d876fde5b871e01e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b057216dba84bd26eeb749d876fde5b871e01e15"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "e780766c2629cda01a8d9cf6f0c0906547a6e6e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=857e7259c4c62c4ac7ccace2e44fdd73286bf194", "patch": "@@ -1,3 +1,18 @@\n+2004-12-08  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 17982\n+\t* varasm.c (pending_assemble_externals): New static.\n+\t(assemble_external_real): Meat of assemble_external split out\n+\tto this new function.\n+\t(process_pending_assemble_externals): New function.\n+\t(assemble_external): Use gcc_assert.  If flag_unit_at_a_time\n+\tis true and the basic test passes, merely cons the decl onto\n+\tthe pending list to be handled later.\n+\t* tree.h: Declare process_pending_assemble_externals.\n+\t* cgraphunit.c (cgraph_optimize): Call it.\n+\n+\t* config/h8300/h8300.h: Do not define ASM_OUTPUT_EXTERNAL.\n+\n 2004-12-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cfgloopmanip.c (create_preheader): Speed up by \"unrolling\"\n@@ -87,9 +102,9 @@\n \n 2004-12-07  David Mosberger  <davidm@hpl.hp.com>\n \n-        PR target/18443\n-        * config/ia64/ia64.c (ia64_assemble_integer): Add support for\n-        emitting unaligned pointer-sized integers.\n+\tPR target/18443\n+\t* config/ia64/ia64.c (ia64_assemble_integer): Add support for\n+\temitting unaligned pointer-sized integers.\n \n 2004-12-07  Steven Bosscher  <stevenb@suse.de>\n "}, {"sha": "22b33816caa70cceb7cf863e9642c04d3e25b170", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=857e7259c4c62c4ac7ccace2e44fdd73286bf194", "patch": "@@ -1750,6 +1750,9 @@ cgraph_optimize (void)\n #endif\n   if (!flag_unit_at_a_time)\n     return;\n+\n+  process_pending_assemble_externals ();\n+\n   timevar_push (TV_CGRAPHOPT);\n   if (!quiet_flag)\n     fprintf (stderr, \"Performing intraprocedural optimizations\\n\");"}, {"sha": "85886dd066f9b115e2b25812e884e7437b56ec14", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=857e7259c4c62c4ac7ccace2e44fdd73286bf194", "patch": "@@ -1160,8 +1160,6 @@ struct cum_arg\n { {\"er0\", 0}, {\"er1\", 1}, {\"er2\", 2}, {\"er3\", 3}, {\"er4\", 4}, \\\n   {\"er5\", 5}, {\"er6\", 6}, {\"er7\", 7}, {\"r7\", 7} }\n \n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\n-\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.global \"\n "}, {"sha": "7f42aa58c6564960d2b42bf27fd55cc4c2bbff68", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=857e7259c4c62c4ac7ccace2e44fdd73286bf194", "patch": "@@ -3701,6 +3701,7 @@ extern void mark_referenced (tree);\n extern void mark_decl_referenced (tree);\n extern void notice_global_symbol (tree);\n extern void set_user_assembler_name (tree, const char *);\n+extern void process_pending_assemble_externals (void);\n \n /* In stmt.c */\n extern void expand_computed_goto (tree);"}, {"sha": "f80ce93d4e4ed7af061945e6a61473584b4a0d87", "filename": "gcc/varasm.c", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e7259c4c62c4ac7ccace2e44fdd73286bf194/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=857e7259c4c62c4ac7ccace2e44fdd73286bf194", "patch": "@@ -1759,6 +1759,12 @@ contains_pointers_p (tree type)\n     }\n }\n \n+/* In unit-at-a-time mode, we delay assemble_external processing until\n+   the compilation unit is finalized.  This is the best we can do for\n+   right now (i.e. stage 3 of GCC 4.0) - the right thing is to delay\n+   it all the way to final.  See PR 17982 for further discussion.  */\n+static GTY(()) tree pending_assemble_externals;\n+\n #ifdef ASM_OUTPUT_EXTERNAL\n /* True if DECL is a function decl for which no out-of-line copy exists.\n    It is assumed that DECL's assembler name has been set.  */\n@@ -1780,8 +1786,37 @@ incorporeal_function_p (tree decl)\n     }\n   return false;\n }\n+\n+/* Actually do the tests to determine if this is necessary, and invoke\n+   ASM_OUTPUT_EXTERNAL.  */\n+static void\n+assemble_external_real (tree decl)\n+{\n+  rtx rtl = DECL_RTL (decl);\n+\n+  if (MEM_P (rtl) && GET_CODE (XEXP (rtl, 0)) == SYMBOL_REF\n+      && !SYMBOL_REF_USED (XEXP (rtl, 0))\n+      && !incorporeal_function_p (decl))\n+    {\n+      /* Some systems do require some output.  */\n+      SYMBOL_REF_USED (XEXP (rtl, 0)) = 1;\n+      ASM_OUTPUT_EXTERNAL (asm_out_file, decl, XSTR (XEXP (rtl, 0), 0));\n+    }\n+}\n #endif\n \n+void\n+process_pending_assemble_externals (void)\n+{\n+#ifdef ASM_OUTPUT_EXTERNAL\n+  tree list;\n+  for (list = pending_assemble_externals; list; list = TREE_CHAIN (list))\n+    assemble_external_real (TREE_VALUE (list));\n+\n+  pending_assemble_externals = 0;\n+#endif\n+}\n+\n /* Output something to declare an external symbol to the assembler.\n    (Most assemblers don't need this, so we normally output nothing.)\n    Do nothing if DECL is not external.  */\n@@ -1793,23 +1828,17 @@ assemble_external (tree decl ATTRIBUTE_UNUSED)\n      main body of this code is only rarely exercised.  To provide some\n      testing, on all platforms, we make sure that the ASM_OUT_FILE is\n      open.  If it's not, we should not be calling this function.  */\n-  if (!asm_out_file)\n-    abort ();\n+  gcc_assert (asm_out_file);\n \n #ifdef ASM_OUTPUT_EXTERNAL\n-  if (DECL_P (decl) && DECL_EXTERNAL (decl) && TREE_PUBLIC (decl))\n-    {\n-      rtx rtl = DECL_RTL (decl);\n+  if (!DECL_P (decl) || !DECL_EXTERNAL (decl) || !TREE_PUBLIC (decl))\n+    return;\n \n-      if (MEM_P (rtl) && GET_CODE (XEXP (rtl, 0)) == SYMBOL_REF\n-\t  && !SYMBOL_REF_USED (XEXP (rtl, 0))\n-\t  && !incorporeal_function_p (decl))\n-\t{\n-\t  /* Some systems do require some output.  */\n-\t  SYMBOL_REF_USED (XEXP (rtl, 0)) = 1;\n-\t  ASM_OUTPUT_EXTERNAL (asm_out_file, decl, XSTR (XEXP (rtl, 0), 0));\n-\t}\n-    }\n+  if (flag_unit_at_a_time)\n+    pending_assemble_externals = tree_cons (0, decl,\n+\t\t\t\t\t    pending_assemble_externals);\n+  else\n+    assemble_external_real (decl);\n #endif\n }\n "}]}