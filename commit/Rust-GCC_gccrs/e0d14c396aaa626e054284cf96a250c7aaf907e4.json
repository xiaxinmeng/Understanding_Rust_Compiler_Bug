{"sha": "e0d14c396aaa626e054284cf96a250c7aaf907e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkMTRjMzk2YWFhNjI2ZTA1NDI4NGNmOTZhMjUwYzdhYWY5MDdlNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-11-05T12:14:36Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2014-11-05T12:14:36Z"}, "message": "Allow a target to skip an unnecssary register return value for a struct return.\n\n\t* target.def (omit_struct_return_reg): New data hook.\n\t* doc/tm.texi.in: Add @hook TARGET_OMIT_STRUCT_RETURN_REG.\n\t* doc/tm.texi: Regenerate.\n\t* function.c (expand_function_end): Use it.\n\nFrom-SVN: r217123", "tree": {"sha": "6ae355ca6def23b0f0cf6593b092c139fcd2f95a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ae355ca6def23b0f0cf6593b092c139fcd2f95a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d14c396aaa626e054284cf96a250c7aaf907e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d14c396aaa626e054284cf96a250c7aaf907e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d14c396aaa626e054284cf96a250c7aaf907e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d14c396aaa626e054284cf96a250c7aaf907e4/comments", "author": null, "committer": null, "parents": [{"sha": "a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50fa76a9d8e3690ea563ff75d8d9cebb07208f7"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "74e0b0fd43615912a0653e014b14c2f899aeb11e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0d14c396aaa626e054284cf96a250c7aaf907e4", "patch": "@@ -1,5 +1,10 @@\n 2014-11-05  Bernd Schmidt  <bernds@codesourcery.com>\n \n+\t* target.def (omit_struct_return_reg): New data hook.\n+\t* doc/tm.texi.in: Add @hook TARGET_OMIT_STRUCT_RETURN_REG.\n+\t* doc/tm.texi: Regenerate.\n+\t* function.c (expand_function_end): Use it.\n+\n \t* target.def (no_register_allocation): New data hook.\n \t* doc/tm.texi.in: Add @hook TARGET_NO_REGISTER_ALLOCATION.\n \t* doc/tm.texi: Regenerate."}, {"sha": "88631a1acefb4fdd01f032f73ce4cc210485de70", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e0d14c396aaa626e054284cf96a250c7aaf907e4", "patch": "@@ -4371,6 +4371,14 @@ need more space than is implied by @code{FUNCTION_VALUE_REGNO_P} for\n saving and restoring an arbitrary return value.\n @end defmac\n \n+@deftypevr {Target Hook} bool TARGET_OMIT_STRUCT_RETURN_REG\n+Normally, when a function returns a structure by memory, the address\n+is passed as an invisible pointer argument, but the compiler also\n+arranges to return the address from the function like it would a normal\n+pointer return value.  Define this to true if that behaviour is\n+undesirable on your target.\n+@end deftypevr\n+\n @deftypefn {Target Hook} bool TARGET_RETURN_IN_MSB (const_tree @var{type})\n This hook should return true if values of type @var{type} are returned\n at the most significant end of a register (in other words, if they are"}, {"sha": "856e4dc5e39eb975ea8bf300d17435115b7d9a67", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=e0d14c396aaa626e054284cf96a250c7aaf907e4", "patch": "@@ -3567,6 +3567,8 @@ need more space than is implied by @code{FUNCTION_VALUE_REGNO_P} for\n saving and restoring an arbitrary return value.\n @end defmac\n \n+@hook TARGET_OMIT_STRUCT_RETURN_REG\n+\n @hook TARGET_RETURN_IN_MSB\n \n @node Aggregate Return"}, {"sha": "91e3b2c14fbe6935cc2ef6a21ae2853e46f9a354", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e0d14c396aaa626e054284cf96a250c7aaf907e4", "patch": "@@ -5177,8 +5177,8 @@ expand_function_end (void)\n      If returning a structure PCC style,\n      the caller also depends on this value.\n      And cfun->returns_pcc_struct is not necessarily set.  */\n-  if (cfun->returns_struct\n-      || cfun->returns_pcc_struct)\n+  if ((cfun->returns_struct || cfun->returns_pcc_struct)\n+      && !targetm.calls.omit_struct_return_reg)\n     {\n       rtx value_address = DECL_RTL (DECL_RESULT (current_function_decl));\n       tree type = TREE_TYPE (DECL_RESULT (current_function_decl));"}, {"sha": "112f78eef56799236398be56027a6fc9d89ae493", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d14c396aaa626e054284cf96a250c7aaf907e4/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=e0d14c396aaa626e054284cf96a250c7aaf907e4", "patch": "@@ -3731,6 +3731,16 @@ structure value address at the beginning of a function.  If you need\\n\\\n to emit adjusting code, you should do it at this point.\",\n  rtx, (tree fndecl, int incoming),\n  hook_rtx_tree_int_null)\n+\n+DEFHOOKPOD\n+(omit_struct_return_reg,\n+ \"Normally, when a function returns a structure by memory, the address\\n\\\n+is passed as an invisible pointer argument, but the compiler also\\n\\\n+arranges to return the address from the function like it would a normal\\n\\\n+pointer return value.  Define this to true if that behaviour is\\n\\\n+undesirable on your target.\",\n+ bool, false)\n+\n DEFHOOK\n (return_in_memory,\n  \"This target hook should return a nonzero value to say to return the\\n\\"}]}