{"sha": "04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRiYmRiMWQwODA3MGRjYzMwNWQ5ZGU5ZTRkNDU3ZmRlZTExMTZhNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-10-02T18:05:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-10-02T18:05:55Z"}, "message": "re PR c++/53025 ([C++11] noexcept operator depends on copy-elision)\n\n/cp\n2014-10-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53025\n\t* cp-tree.h (struct saved_scope): Add noexcept_operand.\n\t(cp_noexcept_operand): Define.\n\t* call.c (build_over_call): Use it.\n\t* parser.c (cp_parser_unary_expression, [RID_NOEXCEPT]): Likewise.\n\t* pt.c (tsubst_copy_and_build, [NOEXCEPT_EXPR]): Likewise.\n\n/testsuite\n2014-10-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53025\n\t* g++.dg/cpp0x/noexcept23.C: New.\n\t* g++.dg/cpp0x/noexcept24.C: Likewise.\n\nFrom-SVN: r215813", "tree": {"sha": "46375b3a304b70039984cb2f5164e74f2b071655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46375b3a304b70039984cb2f5164e74f2b071655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/comments", "author": null, "committer": null, "parents": [{"sha": "a3ac63c46fd51fd3a531ae08e9f457e89e5744f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ac63c46fd51fd3a531ae08e9f457e89e5744f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ac63c46fd51fd3a531ae08e9f457e89e5744f9"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "b5b3f596bd860337f70c34c2eca730b4f0a8c07d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "patch": "@@ -1,3 +1,12 @@\n+2014-10-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53025\n+\t* cp-tree.h (struct saved_scope): Add noexcept_operand.\n+\t(cp_noexcept_operand): Define.\n+\t* call.c (build_over_call): Use it.\n+\t* parser.c (cp_parser_unary_expression, [RID_NOEXCEPT]): Likewise.\n+\t* pt.c (tsubst_copy_and_build, [NOEXCEPT_EXPR]): Likewise.\n+\n 2014-10-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/63362"}, {"sha": "347070c9c965d4ed3695b3307652c0f5af13f467", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "patch": "@@ -7251,7 +7251,11 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     /* Do things the hard way.  */;\n   else if (cand->num_convs == 1 \n            && (DECL_COPY_CONSTRUCTOR_P (fn) \n-               || DECL_MOVE_CONSTRUCTOR_P (fn)))\n+               || DECL_MOVE_CONSTRUCTOR_P (fn))\n+\t   /* It's unsafe to elide the constructor when handling\n+\t      a noexcept-expression, it may evaluate to the wrong\n+\t      value (c++/53025).  */\n+\t   && cp_noexcept_operand == 0)\n     {\n       tree targ;\n       tree arg = argarray[num_artificial_parms_for (fn)];"}, {"sha": "fe1651ef010dc2eeab36ff8f4eda4b60fd284882", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "patch": "@@ -1058,6 +1058,7 @@ struct GTY(()) saved_scope {\n \n   int unevaluated_operand;\n   int inhibit_evaluation_warnings;\n+  int noexcept_operand;\n   /* If non-zero, implicit \"omp declare target\" attribute is added into the\n      attribute lists.  */\n   int omp_declare_target_attribute;\n@@ -1124,6 +1125,10 @@ struct GTY(()) saved_scope {\n \n #define local_specializations scope_chain->x_local_specializations\n \n+/* Nonzero if we are parsing the operand of a noexcept operator.  */\n+\n+#define cp_noexcept_operand scope_chain->noexcept_operand\n+\n /* A list of private types mentioned, for deferred access checking.  */\n \n extern GTY(()) struct saved_scope *scope_chain;"}, {"sha": "63ed1c0dfea9303f9868b15e0dcd2b187c3ea8a6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "patch": "@@ -7156,7 +7156,9 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n \n \t    ++cp_unevaluated_operand;\n \t    ++c_inhibit_evaluation_warnings;\n+\t    ++cp_noexcept_operand;\n \t    expr = cp_parser_expression (parser);\n+\t    --cp_noexcept_operand;\n \t    --c_inhibit_evaluation_warnings;\n \t    --cp_unevaluated_operand;\n "}, {"sha": "d1dddff3ac2e0bca23dcec6e7ff4b779ef93a955", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "patch": "@@ -14769,11 +14769,13 @@ tsubst_copy_and_build (tree t,\n       op1 = TREE_OPERAND (t, 0);\n       ++cp_unevaluated_operand;\n       ++c_inhibit_evaluation_warnings;\n+      ++cp_noexcept_operand;\n       op1 = tsubst_copy_and_build (op1, args, complain, in_decl,\n \t\t\t\t   /*function_p=*/false,\n \t\t\t\t   /*integral_constant_expression_p=*/false);\n       --cp_unevaluated_operand;\n       --c_inhibit_evaluation_warnings;\n+      --cp_noexcept_operand;\n       RETURN (finish_noexcept_expr (op1, complain));\n \n     case MODOP_EXPR:"}, {"sha": "d9aa1e5dd2116a667a4b57b636f33668a69b9cab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "patch": "@@ -1,3 +1,9 @@\n+2014-10-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53025\n+\t* g++.dg/cpp0x/noexcept23.C: New.\n+\t* g++.dg/cpp0x/noexcept24.C: Likewise.\n+\n 2014-10-02  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/noncompile/20020130-1.c: Use -std=gnu89."}, {"sha": "5a01df46c657a50a8f40d4e8e1784773e73a0dca", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept23.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept23.C?ref=04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/53025\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  A() noexcept {}\n+  A(const A&) noexcept(false) {}\n+};\n+\n+void a(A) noexcept {}\n+\n+void f()\n+{\n+  static_assert(!noexcept(a(A{})), \"\");\n+}"}, {"sha": "c17ddfa52a75a1cbf2445b4590849c86e48fa712", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept24.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bbdb1d08070dcc305d9de9e4d457fdee1116a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept24.C?ref=04bbdb1d08070dcc305d9de9e4d457fdee1116a5", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/53025\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+struct A {\n+  A() noexcept {}\n+  A(const A&) noexcept(false) {}\n+};\n+\n+template<typename T>\n+void a(A<T>) noexcept {}\n+\n+template<typename T>\n+void f()\n+{\n+  static_assert(!noexcept(a(A<T>{})), \"\");\n+}\n+\n+void g()\n+{\n+  f<int>();\n+}"}]}