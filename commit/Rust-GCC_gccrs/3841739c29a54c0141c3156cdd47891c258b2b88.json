{"sha": "3841739c29a54c0141c3156cdd47891c258b2b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg0MTczOWMyOWE1NGMwMTQxYzMxNTZjZGQ0Nzg5MWMyNThiMmI4OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-24T11:45:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-24T12:15:05Z"}, "message": "libstdc++: enable_view has false positives (LWG 3326)\n\n\t* include/std/ranges (__deep_const_range, __enable_view_impl): Remove.\n\t(ranges::enable_view): Simplify (LWG 3326).\n\t* include/bits/range_access.h (ranges::enable_view): Declare.\n\t* include/bits/regex.h (__enable_view_impl): Remove partial\n\tspecialization.\n\t* include/bits/stl_multiset.h (__enable_view_impl): Likewise.\n\t* include/bits/stl_set.h (__enable_view_impl): Likewise.\n\t* include/bits/unordered_set.h (__enable_view_impl): Likewise.\n\t* include/debug/multiset.h (__enable_view_impl): Likewise.\n\t* include/debug/set.h (__enable_view_impl): Likewise.\n\t* include/debug/unordered_set (__enable_view_impl): Likewise.\n\t* include/experimental/string_view (ranges::enable_view): Define\n\tpartial specialization.\n\t* include/std/span (ranges::enable_view): Likewise.\n\t* include/std/string_view (ranges::enable_view): Likewise.\n\t* testsuite/std/ranges/view.cc: Check satisfaction of updated concept.", "tree": {"sha": "f69a311e19e72e8d4c1c05f38ba4af4f8dd12b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f69a311e19e72e8d4c1c05f38ba4af4f8dd12b8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3841739c29a54c0141c3156cdd47891c258b2b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3841739c29a54c0141c3156cdd47891c258b2b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3841739c29a54c0141c3156cdd47891c258b2b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3841739c29a54c0141c3156cdd47891c258b2b88/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5617b00445dcc861a498a4cecc8aaa59e05b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5617b00445dcc861a498a4cecc8aaa59e05b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5617b00445dcc861a498a4cecc8aaa59e05b8c"}], "stats": {"total": 158, "additions": 50, "deletions": 108}, "files": [{"sha": "457afdbadc8525c592be30aba4ffffbae57c93d4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -1,3 +1,22 @@\n+2020-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ranges (__deep_const_range, __enable_view_impl): Remove.\n+\t(ranges::enable_view): Simplify (LWG 3326).\n+\t* include/bits/range_access.h (ranges::enable_view): Declare.\n+\t* include/bits/regex.h (__enable_view_impl): Remove partial\n+\tspecialization.\n+\t* include/bits/stl_multiset.h (__enable_view_impl): Likewise.\n+\t* include/bits/stl_set.h (__enable_view_impl): Likewise.\n+\t* include/bits/unordered_set.h (__enable_view_impl): Likewise.\n+\t* include/debug/multiset.h (__enable_view_impl): Likewise.\n+\t* include/debug/set.h (__enable_view_impl): Likewise.\n+\t* include/debug/unordered_set (__enable_view_impl): Likewise.\n+\t* include/experimental/string_view (ranges::enable_view): Define\n+\tpartial specialization.\n+\t* include/std/span (ranges::enable_view): Likewise.\n+\t* include/std/string_view (ranges::enable_view): Likewise.\n+\t* testsuite/std/ranges/view.cc: Check satisfaction of updated concept.\n+\n 2020-02-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/optional (operator<=>(optional<T>, optional<U>))"}, {"sha": "8b276fd66256784773d2050266472bd2b96f18cc", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -346,6 +346,9 @@ namespace ranges\n   template<typename _Tp>\n     inline constexpr bool enable_borrowed_range = false;\n \n+  template<typename _Tp>\n+    extern const bool enable_view;\n+\n   namespace __detail\n   {\n     template<integral _Tp>"}, {"sha": "dcae83eea4e5bdee72a8bfce63a3ff048606ed7d", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -2058,16 +2058,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n _GLIBCXX_END_NAMESPACE_CXX11\n \n-#if __cplusplus > 201703L\n-namespace ranges::__detail\n-{\n-  template<typename _Tp> extern inline const bool __enable_view_impl;\n-  template<typename _Bi_iter, typename _Alloc>\n-    inline constexpr bool __enable_view_impl<match_results<_Bi_iter, _Alloc>>\n-      = false;\n-} // namespace ranges::__detail\n-#endif // C++20\n-\n   // [28.11.2] Function template regex_match\n   /**\n    * @name Matching, Searching, and Replacing"}, {"sha": "ab62df1e50861d71c4f90a38d221aa84a151d5c4", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -1038,17 +1038,6 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       _S_get_tree(_GLIBCXX_STD_C::multiset<_Val, _Cmp2, _Alloc>& __set)\n       { return __set._M_t; }\n     };\n-\n-#if __cplusplus > 201703L\n-namespace ranges::__detail\n-{\n-  template<typename _Tp> extern inline const bool __enable_view_impl;\n-  template<typename _Key, typename _Compare, typename _Alloc>\n-    inline constexpr bool\n-      __enable_view_impl<_GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>>\n-\t= false;\n-} // namespace ranges::__detail\n-#endif // C++20\n #endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "4f8d631bb3bb42637cdb086d586bcf8cd855b919", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -1051,15 +1051,6 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       _S_get_tree(_GLIBCXX_STD_C::multiset<_Val, _Cmp2, _Alloc>& __set)\n       { return __set._M_t; }\n     };\n-#if __cplusplus > 201703L\n-namespace ranges::__detail\n-{\n-  template<typename _Tp> extern inline const bool __enable_view_impl;\n-  template<typename _Key, typename _Compare, typename _Alloc>\n-    inline constexpr bool\n-      __enable_view_impl<_GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>> = false;\n-} // namespace ranges::__detail\n-#endif // C++20\n #endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "9c2cd45be9c9b6d89ab284d36271d3e4506b2cc1", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -1771,21 +1771,6 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       _S_get_table(unordered_multiset<_Val, _Hash2, _Eq2, _Alloc>& __set)\n       { return __set._M_h; }\n     };\n-\n-#if __cplusplus > 201703L\n-namespace ranges::__detail\n-{\n-  template<typename _Tp> extern inline const bool __enable_view_impl;\n-  template<typename _Val, typename _Hash, typename _Eq, typename _Alloc>\n-    inline constexpr bool\n-      __enable_view_impl<_GLIBCXX_STD_C::unordered_set<_Val, _Hash, _Eq,\n-\t\t\t\t\t\t       _Alloc>> = false;\n-  template<typename _Val, typename _Hash, typename _Eq, typename _Alloc>\n-    inline constexpr bool\n-      __enable_view_impl<_GLIBCXX_STD_C::unordered_multiset<_Val, _Hash, _Eq,\n-\t\t\t\t\t\t\t    _Alloc>> = false;\n-} // namespace ranges::__detail\n-#endif // C++20\n #endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "fcbba33947834786f2092f85e77d55a5aadd5eb9", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -630,19 +630,6 @@ namespace __debug\n     { return __x.swap(__y); }\n \n } // namespace __debug\n-\n-#if __cplusplus > 201703L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-namespace ranges::__detail\n-{\n-  template<typename _Tp> extern inline const bool __enable_view_impl;\n-  template<typename _Key, typename _Compare, typename _Alloc>\n-    inline constexpr bool\n-      __enable_view_impl<std::__debug::multiset<_Key, _Compare, _Alloc>>\n-\t= false;\n-} // namespace ranges::__detail\n-_GLIBCXX_END_NAMESPACE_VERSION\n-#endif // C++20\n } // namespace std\n \n #endif"}, {"sha": "093ff129f3e49355fa4d681ac0ef8a69e3dcbc9c", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -641,18 +641,6 @@ namespace __debug\n     { return __x.swap(__y); }\n \n } // namespace __debug\n-\n-#if __cplusplus > 201703L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-namespace ranges::__detail\n-{\n-  template<typename _Tp> extern inline const bool __enable_view_impl;\n-  template<typename _Key, typename _Compare, typename _Alloc>\n-    inline constexpr bool\n-      __enable_view_impl<std::__debug::set<_Key, _Compare, _Alloc>> = false;\n-} // namespace ranges::__detail\n-_GLIBCXX_END_NAMESPACE_VERSION\n-#endif // C++20\n } // namespace std\n \n #endif"}, {"sha": "9941bbe1c24f97daed56afae6da20a3b7a805555", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -1183,22 +1183,6 @@ namespace __debug\n     { return !(__x == __y); }\n \n } // namespace __debug\n-#if __cplusplus > 201703L\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-namespace ranges::__detail\n-{\n-  template<typename _Tp> extern inline const bool __enable_view_impl;\n-  template<typename _Val, typename _Hash, typename _Eq, typename _Alloc>\n-    inline constexpr bool\n-      __enable_view_impl<std::__debug::unordered_set<_Val, _Hash, _Eq, _Alloc>>\n-\t= false;\n-  template<typename _Val, typename _Hash, typename _Eq, typename _Alloc>\n-    inline constexpr bool\n-      __enable_view_impl<std::__debug::unordered_multiset<_Val, _Hash, _Eq,\n-\t\t\t\t\t\t\t  _Alloc>> = false;\n-} // namespace ranges::__detail\n-_GLIBCXX_END_NAMESPACE_VERSION\n-#endif // C++20\n } // namespace std\n \n #endif // C++11"}, {"sha": "629db577c29a3f2969c7245f7a2dcfd9a0ec1d6e", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -694,12 +694,16 @@ namespace experimental\n #if __cpp_lib_concepts\n   namespace ranges\n   {\n-    template<typename> extern inline const bool enable_borrowed_range;\n     // Opt-in to borrowed_range concept\n     template<typename _CharT, typename _Traits>\n       inline constexpr bool\n \tenable_borrowed_range<experimental::basic_string_view<_CharT, _Traits>>\n \t  = true;\n+\n+    // Opt-in to view concept\n+    template<typename _CharT, typename _Traits>\n+      inline constexpr bool\n+\tenable_view<experimental::basic_string_view<_CharT, _Traits>> = true;\n   }\n #endif\n "}, {"sha": "0b2057c966152a89c7b78289d09caf7e20eeaeb8", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -65,25 +65,8 @@ namespace ranges\n \n   struct view_base { };\n \n-  namespace __detail\n-  {\n-    template<typename _Tp>\n-      concept __deep_const_range = range<_Tp> && range<const _Tp>\n-\t&& same_as<range_reference_t<_Tp>, range_reference_t<const _Tp>>;\n-\n-    template<typename _Tp>\n-      inline constexpr bool __enable_view_impl\n-\t= derived_from<_Tp, view_base> || (!__deep_const_range<_Tp>);\n-\n-    template<typename _Tp>\n-      inline constexpr bool __enable_view_impl<std::initializer_list<_Tp>>\n-\t= false;\n-\n-  } // namespace __detail\n-\n   template<typename _Tp>\n-    inline constexpr bool enable_view\n-      = __detail::__enable_view_impl<remove_cv_t<_Tp>>;\n+    inline constexpr bool enable_view = derived_from<_Tp, view_base>;\n \n   template<typename _Tp>\n     concept view"}, {"sha": "f658adb04cf04259035cc95fe17ffbcdea0fbf45", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -447,11 +447,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   namespace ranges\n   {\n-    template<typename> extern inline const bool enable_borrowed_range;\n     // Opt-in to borrowed_range concept\n     template<typename _ElementType, size_t _Extent>\n       inline constexpr bool\n \tenable_borrowed_range<span<_ElementType, _Extent>> = true;\n+\n+    // Opt-in to view concept\n+    template<typename _ElementType, size_t _Extent>\n+      inline constexpr bool\n+\tenable_view<span<_ElementType, _Extent>>\n+\t  = _Extent == 0 || _Extent == dynamic_extent;\n   }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "ea5d547e00603c499884ec1fa412e588481d9dd6", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -727,11 +727,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cpp_lib_concepts\n   namespace ranges\n   {\n-    template<typename> extern inline const bool enable_borrowed_range;\n     // Opt-in to borrowed_range concept\n     template<typename _CharT, typename _Traits>\n       inline constexpr bool\n \tenable_borrowed_range<basic_string_view<_CharT, _Traits>> = true;\n+\n+    // Opt-in to view concept\n+    template<typename _CharT, typename _Traits>\n+      inline constexpr bool\n+\tenable_view<basic_string_view<_CharT, _Traits>> = true;\n   }\n #endif\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "72e8bcb50d74485f025c080ceb619ace1912bc6e", "filename": "libstdc++-v3/testsuite/std/ranges/view.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3841739c29a54c0141c3156cdd47891c258b2b88/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fview.cc?ref=3841739c29a54c0141c3156cdd47891c258b2b88", "patch": "@@ -19,13 +19,23 @@\n // { dg-do compile { target c++2a } }\n \n #include <ranges>\n+#include <span>\n+#include <string_view>\n+#include <experimental/string_view>\n+#include <vector>\n #include <vector>\n #include <set>\n #include <unordered_set>\n #include <regex>\n #include <testsuite_iterators.h>\n \n-static_assert(std::ranges::view<std::vector<int>>);\n+static_assert(std::ranges::view<std::span<int>>);\n+static_assert(std::ranges::view<std::span<int, 0>>);\n+static_assert(!std::ranges::view<std::span<int, 1>>);\n+static_assert(std::ranges::view<std::string_view>);\n+static_assert(std::ranges::view<std::experimental::string_view>);\n+\n+static_assert(!std::ranges::view<std::vector<int>>);\n static_assert(!std::ranges::view<const std::vector<int>>);\n static_assert(!std::ranges::view<std::initializer_list<int>>);\n static_assert(!std::ranges::view<const std::initializer_list<int>>);"}]}