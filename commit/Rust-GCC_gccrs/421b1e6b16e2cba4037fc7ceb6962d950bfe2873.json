{"sha": "421b1e6b16e2cba4037fc7ceb6962d950bfe2873", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxYjFlNmIxNmUyY2JhNDAzN2ZjN2NlYjY5NjJkOTUwYmZlMjg3Mw==", "commit": {"author": {"name": "Wolfgang Gellerich", "email": "gellerich@de.ibm.com", "date": "2009-10-20T08:16:23Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2009-10-20T08:16:23Z"}, "message": "s390.md: Added agen condition to operand forwarding bypasses.\n\n2009-10-20  Wolfgang Gellerich  <gellerich@de.ibm.com>\n\n\t* config/s390/s390.md: Added agen condition to operand\n\tforwarding bypasses. \n\tAdded bypass for early address generation use of int results.\n\tUpdated comments.\n\nFrom-SVN: r153006", "tree": {"sha": "d6c5cb69bcc8fc71a1af6d99f595c917db99e5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6c5cb69bcc8fc71a1af6d99f595c917db99e5e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/421b1e6b16e2cba4037fc7ceb6962d950bfe2873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421b1e6b16e2cba4037fc7ceb6962d950bfe2873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421b1e6b16e2cba4037fc7ceb6962d950bfe2873", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421b1e6b16e2cba4037fc7ceb6962d950bfe2873/comments", "author": null, "committer": null, "parents": [{"sha": "bd62d832fbc4521641ef006145c2f83a71382bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd62d832fbc4521641ef006145c2f83a71382bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd62d832fbc4521641ef006145c2f83a71382bf2"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "1bc1f04dc7f5a94850d229311886491ff5dd8473", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b1e6b16e2cba4037fc7ceb6962d950bfe2873/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b1e6b16e2cba4037fc7ceb6962d950bfe2873/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=421b1e6b16e2cba4037fc7ceb6962d950bfe2873", "patch": "@@ -1,3 +1,10 @@\n+2009-10-20  Wolfgang Gellerich  <gellerich@de.ibm.com>\n+\n+\t* config/s390/s390.md: Added agen condition to operand\n+\tforwarding bypasses. \n+\tAdded bypass for early address generation use of int results.\n+\tUpdated comments.\n+\n 2009-10-20  Stefan D\u00f6singer  <stefan@codeweavers.com>\n \n \t* config/i386/i386.c: Remove signal.h #include."}, {"sha": "56893596a748b2b433b1c366fdf45ef7c622a9dc", "filename": "gcc/config/s390/2097.md", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421b1e6b16e2cba4037fc7ceb6962d950bfe2873/gcc%2Fconfig%2Fs390%2F2097.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421b1e6b16e2cba4037fc7ceb6962d950bfe2873/gcc%2Fconfig%2Fs390%2F2097.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2097.md?ref=421b1e6b16e2cba4037fc7ceb6962d950bfe2873", "patch": "@@ -57,7 +57,8 @@\n                   z10_int_fr_A3\"\n                   \"z10_other_super, z10_other_super_c_E1, z10_other_super_E1, \\\n                   z10_int_super, z10_int_super_E1, \\\n-                  z10_lr, z10_store_super\")\n+                  z10_lr, z10_store_super\"\n+                  \" ! s390_agen_dep_p\")\n \n \n ; Forwarding from z10_super to frz10_ and z10_rec.\n@@ -68,7 +69,8 @@\n                   z10_store_super\"\n                   \"z10_int_fr, z10_int_fr_E1, z10_int_fr_A3, \\\n                   z10_other_fr, z10_other_fr_A3, z10_lr_fr, z10_lr_fr_E1, \\\n-                  z10_other_fr_E1, z10_store_rec\")\n+                  z10_other_fr_E1, z10_store_rec\"\n+                  \" ! s390_agen_dep_p\")\n \n \n ; Forwarding from z10_fwd and z10_fr to z10_rec and z10_fr.\n@@ -84,7 +86,8 @@\n                   z10_int_fr_A3\"\n                   \"z10_int_fr, z10_int_fr_E1, z10_int_fr_A3, \\\n                   z10_other_fr, z10_other_fr_A3, z10_lr_fr, z10_lr_fr_E1, \\\n-                  z10_other_fr_E1, z10_store_rec\")\n+                  z10_other_fr_E1, z10_store_rec\"\n+                  \" ! s390_agen_dep_p\")\n \n \n ;\n@@ -205,15 +208,12 @@\n        (and (eq_attr \"type\" \"lr\")\n             (eq_attr \"z10prop\" \"z10_fr\")))\n   \"z10_e1_ANY, z10_Gate_ANY\")\n-;  \"z10_e1_ANY\")\n \n (define_insn_reservation \"z10_lr_fr_E1\" 6\n   (and (eq_attr \"cpu\" \"z10\")\n        (and (eq_attr \"type\" \"lr\")\n             (eq_attr \"z10prop\" \"z10_fr_E1\")))\n   \"z10_e1_ANY, z10_Gate_ANY\")\n-;  \"z10_e1_ANY\")\n-\n \n (define_insn_reservation \"z10_la\" 6\n   (and (eq_attr \"cpu\" \"z10\")\n@@ -227,14 +227,12 @@\n        (and (eq_attr \"type\" \"la\")\n             (eq_attr \"z10prop\" \"z10_fwd\")))\n   \"z10_e1_ANY, z10_Gate_ANY\")\n-;  \"z10_e1_ANY\")\n \n (define_insn_reservation \"z10_la_fwd_A1\" 6\n   (and (eq_attr \"cpu\" \"z10\")\n        (and (eq_attr \"type\" \"la\")\n             (eq_attr \"z10prop\" \"z10_fwd_A1\")))\n   \"z10_e1_ANY, z10_Gate_ANY\")\n-;  \"z10_e1_ANY\")\n \n \n ; larl-type instructions\n@@ -666,13 +664,14 @@\n ; Address-related bypasses\n ;\n \n-; Here is the cycle diagram for Address-related bypasses:\n+; Here is the cycle diagram for address-related bypasses:\n ; ... G1 G2 G3 A0 A1 A2 A3 E1 P1 P2 P3 R0 ...\n-;         ^  ^    ^     ^  ^\n-;         |  |    |     |  E1-type bypasses provide the new addr AFTER this cycle\n-;         |  |    |     A3-type bypasses provide the new addr AFTER this cycle\n-;         |  |    A1-type bypasses provide the new addr AFTER this cycle\n-;         |  AGI resolution, actual USE of address is DURING this cycle\n+;         ^  ^    ^     ^  ^        ^\n+;         |  |    |     |  |        without bypass, its available AFTER this cycle\n+;         |  |    |     |  E1-type bypasses provide the new value AFTER this cycle\n+;         |  |    |     A3-type bypasses provide the new value AFTER this cycle\n+;         |  |    A1-type bypasses provide the new value AFTER this cycle\n+;         |  AGI resolution, actual USE of new value is DURING this cycle\n ;         AGI detection\n \n (define_bypass 3 \"z10_larl_A1, z10_la_fwd_A1, z10_other_fwd_A1, \\\n@@ -682,7 +681,6 @@\n                   z10_cs, z10_stm, z10_other\"\n \t         \"s390_agen_dep_p\")\n \n-\n (define_bypass 5 \"z10_larl_fwd_A3, z10_load_fwd_A3, z10_other_fwd_A3, \\\n                   z10_other_fr_A3, z10_int_fwd_A3, z10_int_fr_A3\"\n                  \"z10_agen, z10_la, z10_branch, z10_call, z10_load, \\\n@@ -699,6 +697,12 @@\n                   z10_cs, z10_stm, z10_other\"\n  \t         \"s390_agen_dep_p\")\n \n+(define_bypass 9 \"z10_int_super, z10_int_fwd, z10_int_fr\"\n+                 \"z10_agen, z10_la, z10_branch, z10_call, z10_load, \\\n+                  z10_store, \\\n+                  z10_cs, z10_stm, z10_other\"\n+ \t         \"s390_agen_dep_p\")\n+\n \n \n ;"}]}