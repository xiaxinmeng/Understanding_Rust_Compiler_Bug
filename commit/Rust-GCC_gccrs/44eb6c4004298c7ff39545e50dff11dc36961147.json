{"sha": "44eb6c4004298c7ff39545e50dff11dc36961147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRlYjZjNDAwNDI5OGM3ZmYzOTU0NWU1MGRmZjExZGMzNjk2MTE0Nw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-03-21T16:14:11Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-03-21T16:14:11Z"}, "message": "rs6000.c (rs6000_expand_vector_set): Generate a pattern for vector nor instead of subtract from splat(-1).\n\n2014-03-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Generate a\n\tpattern for vector nor instead of subtract from splat(-1).\n\t(altivec_expand_vec_perm_const_le): Likewise.\n\nFrom-SVN: r208750", "tree": {"sha": "791a22ab18735f39da3e5b73f2fe66300fa9d67e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/791a22ab18735f39da3e5b73f2fe66300fa9d67e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44eb6c4004298c7ff39545e50dff11dc36961147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44eb6c4004298c7ff39545e50dff11dc36961147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44eb6c4004298c7ff39545e50dff11dc36961147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44eb6c4004298c7ff39545e50dff11dc36961147/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec6f831a27001652401b20331a5edc1c737d9fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6f831a27001652401b20331a5edc1c737d9fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6f831a27001652401b20331a5edc1c737d9fe3"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "7cddeabb750bf95b5ea7d551354115f27b217358", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eb6c4004298c7ff39545e50dff11dc36961147/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eb6c4004298c7ff39545e50dff11dc36961147/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44eb6c4004298c7ff39545e50dff11dc36961147", "patch": "@@ -1,3 +1,9 @@\n+2014-03-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Generate a\n+\tpattern for vector nor instead of subtract from splat(-1).\n+\t(altivec_expand_vec_perm_const_le): Likewise.\n+\n 2014-03-21  Richard Henderson  <rth@twiddle.net>\n \n \tPR target/60598"}, {"sha": "fc837352c38dc3a990f69d4fd625ba9394aba6fe", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44eb6c4004298c7ff39545e50dff11dc36961147/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44eb6c4004298c7ff39545e50dff11dc36961147/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=44eb6c4004298c7ff39545e50dff11dc36961147", "patch": "@@ -5633,12 +5633,10 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n   else \n     {\n       /* Invert selector.  */\n-      rtx splat = gen_rtx_VEC_DUPLICATE (V16QImode,\n-\t\t\t\t\t gen_rtx_CONST_INT (QImode, -1));\n+      rtx notx = gen_rtx_NOT (V16QImode, force_reg (V16QImode, x));\n+      rtx andx = gen_rtx_AND (V16QImode, notx, notx);\n       rtx tmp = gen_reg_rtx (V16QImode);\n-      emit_move_insn (tmp, splat);\n-      x = gen_rtx_MINUS (V16QImode, tmp, force_reg (V16QImode, x));\n-      emit_move_insn (tmp, x);\n+      emit_move_insn (tmp, andx);\n \n       /* Permute with operands reversed and adjusted selector.  */\n       x = gen_rtx_UNSPEC (mode, gen_rtvec (3, reg, target, tmp),\n@@ -30211,18 +30209,18 @@ altivec_expand_vec_perm_const_le (rtx operands[4])\n \n /* Similarly to altivec_expand_vec_perm_const_le, we must adjust the\n    permute control vector.  But here it's not a constant, so we must\n-   generate a vector splat/subtract to do the adjustment.  */\n+   generate a vector NOR to do the adjustment.  */\n \n void\n altivec_expand_vec_perm_le (rtx operands[4])\n {\n-  rtx splat, unspec;\n+  rtx notx, andx, unspec;\n   rtx target = operands[0];\n   rtx op0 = operands[1];\n   rtx op1 = operands[2];\n   rtx sel = operands[3];\n   rtx tmp = target;\n-  rtx splatreg = gen_reg_rtx (V16QImode);\n+  rtx norreg = gen_reg_rtx (V16QImode);\n   enum machine_mode mode = GET_MODE (target);\n \n   /* Get everything in regs so the pattern matches.  */\n@@ -30235,18 +30233,14 @@ altivec_expand_vec_perm_le (rtx operands[4])\n   if (!REG_P (target))\n     tmp = gen_reg_rtx (mode);\n \n-  /* SEL = splat(31) - SEL.  */\n-  /* We want to subtract from 31, but we can't vspltisb 31 since\n-     it's out of range.  -1 works as well because only the low-order\n-     five bits of the permute control vector elements are used.  */\n-  splat = gen_rtx_VEC_DUPLICATE (V16QImode,\n-\t\t\t\t gen_rtx_CONST_INT (QImode, -1));\n-  emit_move_insn (splatreg, splat);\n-  sel = gen_rtx_MINUS (V16QImode, splatreg, sel);\n-  emit_move_insn (splatreg, sel);\n+  /* Invert the selector with a VNOR.  */\n+  notx = gen_rtx_NOT (V16QImode, sel);\n+  andx = gen_rtx_AND (V16QImode, notx, notx);\n+  emit_move_insn (norreg, andx);\n \n   /* Permute with operands reversed and adjusted selector.  */\n-  unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op0, splatreg), UNSPEC_VPERM);\n+  unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op0, norreg),\n+\t\t\t   UNSPEC_VPERM);\n \n   /* Copy into target, possibly by way of a register.  */\n   if (!REG_P (target))"}]}