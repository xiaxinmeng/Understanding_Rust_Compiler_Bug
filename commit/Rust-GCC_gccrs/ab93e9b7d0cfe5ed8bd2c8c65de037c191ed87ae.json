{"sha": "ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI5M2U5YjdkMGNmZTVlZDhiZDJjOGM2NWRlMDM3YzE5MWVkODdhZQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@cavium.com", "date": "2017-11-02T21:56:00Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2017-11-02T21:56:00Z"}, "message": "re PR target/79868 (aarch64: diagnostic \"malformed target %s value\" not translateable)\n\n\tPR target/79868\n\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse):\n\tRemove second argument from aarch64_process_target_attr call.\n\t* config/aarch64/aarch64-protos.h (aarch64_process_target_attr):\n\tDitto.\n\t* config/aarch64/aarch64.c (aarch64_attribute_info): Change\n\tfield type.\n\t(aarch64_handle_attr_arch): Remove second argument.\n\t(aarch64_handle_attr_cpu): Ditto.\n\t(aarch64_handle_attr_tune): Ditto.\n\t(aarch64_handle_attr_isa_flags): Ditto.\n\t(aarch64_process_one_target_attr): Ditto.\n\t(aarch64_process_target_attr): Ditto.\n\t(aarch64_option_valid_attribute_p): Remove second argument.\n\ton aarch64_process_target_attr call.\n\nFrom-SVN: r254359", "tree": {"sha": "3420d9cd17515809de53019536d8e7390ac34f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3420d9cd17515809de53019536d8e7390ac34f66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/comments", "author": {"login": "sellcey", "id": 25938520, "node_id": "MDQ6VXNlcjI1OTM4NTIw", "avatar_url": "https://avatars.githubusercontent.com/u/25938520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sellcey", "html_url": "https://github.com/sellcey", "followers_url": "https://api.github.com/users/sellcey/followers", "following_url": "https://api.github.com/users/sellcey/following{/other_user}", "gists_url": "https://api.github.com/users/sellcey/gists{/gist_id}", "starred_url": "https://api.github.com/users/sellcey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sellcey/subscriptions", "organizations_url": "https://api.github.com/users/sellcey/orgs", "repos_url": "https://api.github.com/users/sellcey/repos", "events_url": "https://api.github.com/users/sellcey/events{/privacy}", "received_events_url": "https://api.github.com/users/sellcey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ace725989eef16efea050619597f5c7f71667e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace725989eef16efea050619597f5c7f71667e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace725989eef16efea050619597f5c7f71667e1d"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "d7a6f39287a01935d31f8e8a370efea41810e866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae", "patch": "@@ -1,3 +1,21 @@\n+2017-11-02  Steve Ellcey  <sellcey@cavium.com>\n+\n+\tPR target/79868\n+\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse):\n+\tRemove second argument from aarch64_process_target_attr call.\n+\t* config/aarch64/aarch64-protos.h (aarch64_process_target_attr):\n+\tDitto.\n+\t* config/aarch64/aarch64.c (aarch64_attribute_info): Change\n+\tfield type.\n+\t(aarch64_handle_attr_arch): Remove second argument.\n+\t(aarch64_handle_attr_cpu): Ditto.\n+\t(aarch64_handle_attr_tune): Ditto.\n+\t(aarch64_handle_attr_isa_flags): Ditto.\n+\t(aarch64_process_one_target_attr): Ditto.\n+\t(aarch64_process_target_attr): Ditto.\n+\t(aarch64_option_valid_attribute_p): Remove second argument.\n+\ton aarch64_process_target_attr call.\n+\n 2017-11-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic.c: Include \"selftest-diagnostic.h\"."}, {"sha": "e18ec4a0aad42a3101116a4a162da2a80558b3cd", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae", "patch": "@@ -166,7 +166,7 @@ aarch64_pragma_target_parse (tree args, tree pop_target)\n      information that it specifies.  */\n   if (args)\n     {\n-      if (!aarch64_process_target_attr (args, \"pragma\"))\n+      if (!aarch64_process_target_attr (args))\n \treturn false;\n \n       aarch64_override_options_internal (&global_options);"}, {"sha": "345bfe8f3aeff302f111c1124e4ef10d2737a85f", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae", "patch": "@@ -457,7 +457,7 @@ bool aarch64_gen_adjusted_ldpstp (rtx *, bool, scalar_mode, RTX_CODE);\n \n void aarch64_init_builtins (void);\n \n-bool aarch64_process_target_attr (tree, const char*);\n+bool aarch64_process_target_attr (tree);\n void aarch64_override_options_internal (struct gcc_options *);\n \n rtx aarch64_expand_builtin (tree exp,"}, {"sha": "351974ac39dc4027f6d6456f993931331f7485a1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 36, "deletions": 54, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ab93e9b7d0cfe5ed8bd2c8c65de037c191ed87ae", "patch": "@@ -9551,9 +9551,8 @@ enum aarch64_attr_opt_type\n    ATTR_TYPE specifies the type of behavior of the attribute as described\n    in the definition of enum aarch64_attr_opt_type.\n    ALLOW_NEG is true if the attribute supports a \"no-\" form.\n-   HANDLER is the function that takes the attribute string and whether\n-   it is a pragma or attribute and handles the option.  It is needed only\n-   when the ATTR_TYPE is aarch64_attr_custom.\n+   HANDLER is the function that takes the attribute string as an argument\n+   It is needed only when the ATTR_TYPE is aarch64_attr_custom.\n    OPT_NUM is the enum specifying the option that the attribute modifies.\n    This is needed for attributes that mirror the behavior of a command-line\n    option, that is it has ATTR_TYPE aarch64_attr_mask, aarch64_attr_bool or\n@@ -9564,15 +9563,14 @@ struct aarch64_attribute_info\n   const char *name;\n   enum aarch64_attr_opt_type attr_type;\n   bool allow_neg;\n-  bool (*handler) (const char *, const char *);\n+  bool (*handler) (const char *);\n   enum opt_code opt_num;\n };\n \n-/* Handle the ARCH_STR argument to the arch= target attribute.\n-   PRAGMA_OR_ATTR is used in potential error messages.  */\n+/* Handle the ARCH_STR argument to the arch= target attribute.  */\n \n static bool\n-aarch64_handle_attr_arch (const char *str, const char *pragma_or_attr)\n+aarch64_handle_attr_arch (const char *str)\n {\n   const struct processor *tmp_arch = NULL;\n   enum aarch64_parse_opt_result parse_res\n@@ -9589,15 +9587,14 @@ aarch64_handle_attr_arch (const char *str, const char *pragma_or_attr)\n   switch (parse_res)\n     {\n       case AARCH64_PARSE_MISSING_ARG:\n-\terror (\"missing architecture name in 'arch' target %s\", pragma_or_attr);\n+\terror (\"missing name in %<target(\\\"arch=\\\")%> pragma or attribute\");\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"unknown value %qs for 'arch' target %s\", str, pragma_or_attr);\n+\terror (\"invalid name (\\\"%s\\\") in %<target(\\\"arch=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_arch (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier %qs for 'arch' target %s\",\n-\t       str, pragma_or_attr);\n+\terror (\"invalid value (\\\"%s\\\") in %<target()%> pragma or attribute\", str);\n \tbreak;\n       default:\n \tgcc_unreachable ();\n@@ -9606,11 +9603,10 @@ aarch64_handle_attr_arch (const char *str, const char *pragma_or_attr)\n   return false;\n }\n \n-/* Handle the argument CPU_STR to the cpu= target attribute.\n-   PRAGMA_OR_ATTR is used in potential error messages.  */\n+/* Handle the argument CPU_STR to the cpu= target attribute.  */\n \n static bool\n-aarch64_handle_attr_cpu (const char *str, const char *pragma_or_attr)\n+aarch64_handle_attr_cpu (const char *str)\n {\n   const struct processor *tmp_cpu = NULL;\n   enum aarch64_parse_opt_result parse_res\n@@ -9630,15 +9626,14 @@ aarch64_handle_attr_cpu (const char *str, const char *pragma_or_attr)\n   switch (parse_res)\n     {\n       case AARCH64_PARSE_MISSING_ARG:\n-\terror (\"missing cpu name in 'cpu' target %s\", pragma_or_attr);\n+\terror (\"missing name in %<target(\\\"cpu=\\\")%> pragma or attribute\");\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"unknown value %qs for 'cpu' target %s\", str, pragma_or_attr);\n+\terror (\"invalid name (\\\"%s\\\") in %<target(\\\"cpu=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_core (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier %qs for 'cpu' target %s\",\n-\t       str, pragma_or_attr);\n+\terror (\"invalid value (\\\"%s\\\") in %<target()%> pragma or attribute\", str);\n \tbreak;\n       default:\n \tgcc_unreachable ();\n@@ -9647,11 +9642,10 @@ aarch64_handle_attr_cpu (const char *str, const char *pragma_or_attr)\n   return false;\n }\n \n-/* Handle the argument STR to the tune= target attribute.\n-   PRAGMA_OR_ATTR is used in potential error messages.  */\n+/* Handle the argument STR to the tune= target attribute.  */\n \n static bool\n-aarch64_handle_attr_tune (const char *str, const char *pragma_or_attr)\n+aarch64_handle_attr_tune (const char *str)\n {\n   const struct processor *tmp_tune = NULL;\n   enum aarch64_parse_opt_result parse_res\n@@ -9668,7 +9662,7 @@ aarch64_handle_attr_tune (const char *str, const char *pragma_or_attr)\n   switch (parse_res)\n     {\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"unknown value %qs for 'tune' target %s\", str, pragma_or_attr);\n+\terror (\"invalid name (\\\"%s\\\") in %<target(\\\"tune=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_core (str);\n \tbreak;\n       default:\n@@ -9681,11 +9675,10 @@ aarch64_handle_attr_tune (const char *str, const char *pragma_or_attr)\n /* Parse an architecture extensions target attribute string specified in STR.\n    For example \"+fp+nosimd\".  Show any errors if needed.  Return TRUE\n    if successful.  Update aarch64_isa_flags to reflect the ISA features\n-   modified.\n-   PRAGMA_OR_ATTR is used in potential error messages.  */\n+   modified.  */\n \n static bool\n-aarch64_handle_attr_isa_flags (char *str, const char *pragma_or_attr)\n+aarch64_handle_attr_isa_flags (char *str)\n {\n   enum aarch64_parse_opt_result parse_res;\n   unsigned long isa_flags = aarch64_isa_flags;\n@@ -9709,13 +9702,11 @@ aarch64_handle_attr_isa_flags (char *str, const char *pragma_or_attr)\n   switch (parse_res)\n     {\n       case AARCH64_PARSE_MISSING_ARG:\n-\terror (\"missing feature modifier in target %s %qs\",\n-\t       pragma_or_attr, str);\n+\terror (\"missing value in %<target()%> pragma or attribute\");\n \tbreak;\n \n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier in target %s %qs\",\n-\t       pragma_or_attr, str);\n+\terror (\"invalid value (\\\"%s\\\") in %<target()%> pragma or attribute\", str);\n \tbreak;\n \n       default:\n@@ -9753,20 +9744,18 @@ static const struct aarch64_attribute_info aarch64_attributes[] =\n };\n \n /* Parse ARG_STR which contains the definition of one target attribute.\n-   Show appropriate errors if any or return true if the attribute is valid.\n-   PRAGMA_OR_ATTR holds the string to use in error messages about whether\n-   we're processing a target attribute or pragma.  */\n+   Show appropriate errors if any or return true if the attribute is valid.  */\n \n static bool\n-aarch64_process_one_target_attr (char *arg_str, const char* pragma_or_attr)\n+aarch64_process_one_target_attr (char *arg_str)\n {\n   bool invert = false;\n \n   size_t len = strlen (arg_str);\n \n   if (len == 0)\n     {\n-      error (\"malformed target %s\", pragma_or_attr);\n+      error (\"malformed %<target()%> pragma or attribute\");\n       return false;\n     }\n \n@@ -9782,7 +9771,7 @@ aarch64_process_one_target_attr (char *arg_str, const char* pragma_or_attr)\n      through the machinery for the rest of the target attributes in this\n      function.  */\n   if (*str_to_check == '+')\n-    return aarch64_handle_attr_isa_flags (str_to_check, pragma_or_attr);\n+    return aarch64_handle_attr_isa_flags (str_to_check);\n \n   if (len > 3 && strncmp (str_to_check, \"no-\", 3) == 0)\n     {\n@@ -9814,17 +9803,15 @@ aarch64_process_one_target_attr (char *arg_str, const char* pragma_or_attr)\n \n       if (attr_need_arg_p ^ (arg != NULL))\n \t{\n-\t  error (\"target %s %qs does not accept an argument\",\n-\t\t  pragma_or_attr, str_to_check);\n+\t  error (\"pragma or attribute %<target(\\\"%s\\\")%> does not accept an argument\", str_to_check);\n \t  return false;\n \t}\n \n       /* If the name matches but the attribute does not allow \"no-\" versions\n \t then we can't match.  */\n       if (invert && !p_attr->allow_neg)\n \t{\n-\t  error (\"target %s %qs does not allow a negated form\",\n-\t\t  pragma_or_attr, str_to_check);\n+\t  error (\"pragma or attribute %<target(\\\"%s\\\")%> does not allow a negated form\", str_to_check);\n \t  return false;\n \t}\n \n@@ -9834,7 +9821,7 @@ aarch64_process_one_target_attr (char *arg_str, const char* pragma_or_attr)\n \t   For example, cpu=, arch=, tune=.  */\n \t  case aarch64_attr_custom:\n \t    gcc_assert (p_attr->handler);\n-\t    if (!p_attr->handler (arg, pragma_or_attr))\n+\t    if (!p_attr->handler (arg))\n \t      return false;\n \t    break;\n \n@@ -9878,8 +9865,7 @@ aarch64_process_one_target_attr (char *arg_str, const char* pragma_or_attr)\n \t\t}\n \t      else\n \t\t{\n-\t\t  error (\"target %s %s=%s is not valid\",\n-\t\t\t pragma_or_attr, str_to_check, arg);\n+\t\t  error (\"pragma or attribute %<target(\\\"%s=%s\\\")%> is not valid\", str_to_check, arg);\n \t\t}\n \t      break;\n \t    }\n@@ -9913,12 +9899,10 @@ num_occurences_in_str (char c, char *str)\n }\n \n /* Parse the tree in ARGS that contains the target attribute information\n-   and update the global target options space.  PRAGMA_OR_ATTR is a string\n-   to be used in error messages, specifying whether this is processing\n-   a target attribute or a target pragma.  */\n+   and update the global target options space.  */\n \n bool\n-aarch64_process_target_attr (tree args, const char* pragma_or_attr)\n+aarch64_process_target_attr (tree args)\n {\n   if (TREE_CODE (args) == TREE_LIST)\n     {\n@@ -9927,7 +9911,7 @@ aarch64_process_target_attr (tree args, const char* pragma_or_attr)\n \t  tree head = TREE_VALUE (args);\n \t  if (head)\n \t    {\n-\t      if (!aarch64_process_target_attr (head, pragma_or_attr))\n+\t      if (!aarch64_process_target_attr (head))\n \t\treturn false;\n \t    }\n \t  args = TREE_CHAIN (args);\n@@ -9948,7 +9932,7 @@ aarch64_process_target_attr (tree args, const char* pragma_or_attr)\n \n   if (len == 0)\n     {\n-      error (\"malformed target %s value\", pragma_or_attr);\n+      error (\"malformed %<target()%> pragma or attribute\");\n       return false;\n     }\n \n@@ -9963,9 +9947,9 @@ aarch64_process_target_attr (tree args, const char* pragma_or_attr)\n   while (token)\n     {\n       num_attrs++;\n-      if (!aarch64_process_one_target_attr (token, pragma_or_attr))\n+      if (!aarch64_process_one_target_attr (token))\n \t{\n-\t  error (\"target %s %qs is invalid\", pragma_or_attr, token);\n+\t  error (\"pragma or attribute %<target(\\\"%s\\\")%> is not valid\", token);\n \t  return false;\n \t}\n \n@@ -9974,8 +9958,7 @@ aarch64_process_target_attr (tree args, const char* pragma_or_attr)\n \n   if (num_attrs != num_commas + 1)\n     {\n-      error (\"malformed target %s list %qs\",\n-\t      pragma_or_attr, TREE_STRING_POINTER (args));\n+      error (\"malformed %<target(\\\"%s\\\")%> pragma or attribute\", TREE_STRING_POINTER (args));\n       return false;\n     }\n \n@@ -10034,8 +10017,7 @@ aarch64_option_valid_attribute_p (tree fndecl, tree, tree args, int)\n     cl_target_option_restore (&global_options,\n \t\t\tTREE_TARGET_OPTION (target_option_current_node));\n \n-\n-  ret = aarch64_process_target_attr (args, \"attribute\");\n+  ret = aarch64_process_target_attr (args);\n \n   /* Set up any additional state.  */\n   if (ret)"}]}