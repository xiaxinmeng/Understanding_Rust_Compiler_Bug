{"sha": "2a10a2c0689db280ee3a94164504b7196b8370f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExMGEyYzA2ODlkYjI4MGVlM2E5NDE2NDUwNGI3MTk2YjgzNzBmNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-09-28T16:08:05Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-09-28T16:08:05Z"}, "message": "OpenMP: Handle cpp_implicit_alias in declare-target discovery (PR96390)\n\ngcc/ChangeLog:\n\n\tPR middle-end/96390\n\t* omp-offload.c (omp_discover_declare_target_tgt_fn_r): Handle\n\talias nodes.\n\nlibgomp/ChangeLog:\n\n\tPR middle-end/96390\n\t* testsuite/libgomp.c++/pr96390.C: New test.\n\t* testsuite/libgomp.c-c++-common/pr96390.c: New test.", "tree": {"sha": "c1fe6881aa115ca2c0948a481c38c2a206eacddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1fe6881aa115ca2c0948a481c38c2a206eacddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a10a2c0689db280ee3a94164504b7196b8370f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a10a2c0689db280ee3a94164504b7196b8370f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a10a2c0689db280ee3a94164504b7196b8370f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a10a2c0689db280ee3a94164504b7196b8370f4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361e32eeaa8e80c2c3b4879518756cf131e8f938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361e32eeaa8e80c2c3b4879518756cf131e8f938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361e32eeaa8e80c2c3b4879518756cf131e8f938"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "a89275b3a7a100bef84e06813e6e124c26a07720", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a10a2c0689db280ee3a94164504b7196b8370f4/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a10a2c0689db280ee3a94164504b7196b8370f4/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=2a10a2c0689db280ee3a94164504b7196b8370f4", "patch": "@@ -196,21 +196,53 @@ omp_declare_target_var_p (tree decl)\n static tree\n omp_discover_declare_target_tgt_fn_r (tree *tp, int *walk_subtrees, void *data)\n {\n-  if (TREE_CODE (*tp) == FUNCTION_DECL\n-      && !omp_declare_target_fn_p (*tp)\n-      && !lookup_attribute (\"omp declare target host\", DECL_ATTRIBUTES (*tp)))\n+  if (TREE_CODE (*tp) == FUNCTION_DECL)\n     {\n+      tree decl = *tp;\n       tree id = get_identifier (\"omp declare target\");\n-      if (!DECL_EXTERNAL (*tp) && DECL_SAVED_TREE (*tp))\n-\t((vec<tree> *) data)->safe_push (*tp);\n-      DECL_ATTRIBUTES (*tp) = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (*tp));\n       symtab_node *node = symtab_node::get (*tp);\n       if (node != NULL)\n \t{\n+\t  while (node->alias_target)\n+\t    {\n+\t      if (!omp_declare_target_fn_p (node->decl)\n+\t\t  && !lookup_attribute (\"omp declare target host\",\n+\t\t\t\t\tDECL_ATTRIBUTES (node->decl)))\n+\t\t{\n+\t\t  node->offloadable = 1;\n+\t\t  DECL_ATTRIBUTES (node->decl)\n+\t\t    = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (node->decl));\n+\t\t}\n+\t      node = symtab_node::get (node->alias_target);\n+\t    }\n+\t  symtab_node *new_node = node->ultimate_alias_target ();\n+\t  decl = new_node->decl;\n+\t  while (node != new_node)\n+\t    {\n+\t      if (!omp_declare_target_fn_p (node->decl)\n+\t\t  && !lookup_attribute (\"omp declare target host\",\n+\t\t\t\t\tDECL_ATTRIBUTES (node->decl)))\n+\t\t{\n+\t\t  node->offloadable = 1;\n+\t\t  DECL_ATTRIBUTES (node->decl)\n+\t\t    = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (node->decl));\n+\t\t}\n+\t      gcc_assert (node->alias && node->analyzed);\n+\t      node = node->get_alias_target ();\n+\t    }\n \t  node->offloadable = 1;\n \t  if (ENABLE_OFFLOADING)\n \t    g->have_offload = true;\n \t}\n+      if (omp_declare_target_fn_p (decl)\n+\t  || lookup_attribute (\"omp declare target host\",\n+\t\t\t\t    DECL_ATTRIBUTES (decl)))\n+\treturn NULL_TREE;\n+\n+      if (!DECL_EXTERNAL (decl) && DECL_SAVED_TREE (decl))\n+\t((vec<tree> *) data)->safe_push (decl);\n+      DECL_ATTRIBUTES (decl) = tree_cons (id, NULL_TREE,\n+\t\t\t\t\t  DECL_ATTRIBUTES (decl));\n     }\n   else if (TYPE_P (*tp))\n     *walk_subtrees = 0;"}, {"sha": "8c770ecb80c1187cf1ede3c747e1b9c1cb5d7ab7", "filename": "libgomp/testsuite/libgomp.c++/pr96390.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a10a2c0689db280ee3a94164504b7196b8370f4/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr96390.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a10a2c0689db280ee3a94164504b7196b8370f4/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr96390.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr96390.C?ref=2a10a2c0689db280ee3a94164504b7196b8370f4", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-additional-options \"-O0 -fdump-tree-omplower\" } */\n+/* { dg-xfail-if \"PR 97106/PR 97102 - .alias not (yet) supported for nvptx\" { offload_target_nvptx } } */\n+\n+#include <cstdlib>\n+#include <type_traits>\n+\n+template<int Dim> struct V {\n+  int version_called;\n+\n+  template<bool B = (Dim == 0),\n+           typename = typename std::enable_if<B>::type>\n+  V ()\n+  {\n+    version_called = 1;\n+  }\n+\n+  template<typename TArg0,\n+           typename = typename std::enable_if<(std::is_same<unsigned long,\n+                                               typename std::decay<TArg0>::type>::value)>::type>\n+  V (TArg0)\n+  {\n+    version_called = 2;\n+  }\n+};\n+\n+template<int Dim> struct S {\n+  V<Dim> v;\n+};\n+\n+int\n+main ()\n+{\n+  int version_set[2] = {-1, -1};\n+\n+#pragma omp target map(from: version_set[0:2])\n+  {\n+    S<0> s;\n+    version_set[0] = s.v.version_called;\n+    V<1> v2((unsigned long) 1);\n+    version_set[1] = v2.version_called;\n+  }\n+\n+  if (version_set[0] != 1 || version_set[1] != 2)\n+    abort ();\n+  return 0;\n+}\n+\n+/* \"3\" for S<0>::S, V<0>::V<>, and V<1>::V<long unsigned int>:  */\n+/* { dg-final { scan-tree-dump-times \"__attribute__..omp declare target\" 3 \"omplower\" } } */"}, {"sha": "692bd730069a022803d9292cde063abf1568ca68", "filename": "libgomp/testsuite/libgomp.c-c++-common/pr96390.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a10a2c0689db280ee3a94164504b7196b8370f4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr96390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a10a2c0689db280ee3a94164504b7196b8370f4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr96390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr96390.c?ref=2a10a2c0689db280ee3a94164504b7196b8370f4", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-additional-options \"-O0 -fdump-tree-omplower\" } */\n+/* { dg-xfail-if \"PR 97102/PR 97106 - .alias not (yet) supported for nvptx\" { offload_target_nvptx } } */\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+int foo () { return 42; }\n+int bar () __attribute__((alias (\"foo\")));\n+int baz () __attribute__((alias (\"bar\")));\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+\n+int\n+main ()\n+{\n+  int n;\n+  #pragma omp target map(from:n)\n+    n = baz ();\n+  if (n != 42)\n+    __builtin_abort ();\n+}\n+/* { dg-final { scan-tree-dump-times \"__attribute__..omp declare target\" 1 \"omplower\" } } */"}]}