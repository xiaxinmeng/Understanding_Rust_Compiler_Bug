{"sha": "2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0ZThlYmMxMzdlOGEwNGQxZDZiNjZmOTNhOTNhZTIxNWFjZjMzYQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2003-07-31T12:01:07Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2003-07-31T12:01:07Z"}, "message": "re PR bootstrap/9330 ([alpha-osf]small alphaev56-dec-osf5.1 --enable-threads=posix problem)\n\n\t* config.gcc (alpha*-dec-osf[45]*): Enable POSIX thread support by\n\tdefault.\n\n\t* gthr-posix.c: New file.\n\t* gthr-posix.h: Define _REENTRANT if missing.\n\tMake _LIBOBJC #pragma weak visible with _LIBOBJC_WEAK.\n\n\t* config/alpha/t-osf4 (SHLIB_LINK): Hide dummy functions provided\n\tby gthr-posix.o.\n\t* config/alpha/t-osf-pthread: New file.\n\n\t* fixinc/inclhack.def (alpha_pthread): New fix.\n\t* fixinc/fixincl.x: Regenerate.\n\t* fixinc/tests/base/pthread.h [ALPHA_PTHREAD_CHECK]: New testcase.\n\n\t* doc/install.texi (alpha*-dec-osf*): Remove --enable-threads\n\twarning.\n\tFixes PR bootstrap/9330.\n\nFrom-SVN: r69998", "tree": {"sha": "9da070fa50d61c24f4bb30ee44be274f1103d7fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9da070fa50d61c24f4bb30ee44be274f1103d7fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/comments", "author": null, "committer": null, "parents": [{"sha": "620a329bbbaec71ba345a5c015983538fff18818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620a329bbbaec71ba345a5c015983538fff18818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620a329bbbaec71ba345a5c015983538fff18818"}], "stats": {"total": 339, "additions": 328, "deletions": 11}, "files": [{"sha": "20ea858a735c6de2910ad399f2a8b367879b2d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -1,3 +1,24 @@\n+2003-07-31  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* config.gcc (alpha*-dec-osf[45]*): Enable POSIX thread support by\n+\tdefault.\n+\n+\t* gthr-posix.c: New file.\n+\t* gthr-posix.h: Define _REENTRANT if missing.\n+\tMake _LIBOBJC #pragma weak visible with _LIBOBJC_WEAK.\n+\n+\t* config/alpha/t-osf4 (SHLIB_LINK): Hide dummy functions provided\n+\tby gthr-posix.o.\n+\t* config/alpha/t-osf-pthread: New file.\n+\n+\t* fixinc/inclhack.def (alpha_pthread): New fix.\n+\t* fixinc/fixincl.x: Regenerate.\n+\t* fixinc/tests/base/pthread.h [ALPHA_PTHREAD_CHECK]: New testcase.\n+\n+\t* doc/install.texi (alpha*-dec-osf*): Remove --enable-threads\n+\twarning.\n+\tFixes PR bootstrap/9330.\n+\n 2003-07-31  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* configure.in (gcc_cv_ld_hidden): Also disable on mips-sgi-irix5*"}, {"sha": "c9266a5620ceca8b163dcbb2cfae7246390340f1", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -609,6 +609,12 @@ alpha*-dec-osf[45]*)\n \t    target_cpu_default=MASK_SUPPORT_ARCH\n \t    ;;\n \tesac\n+\tcase x${enable_threads} in\n+\tx | xyes | xpthreads | xposix)\n+\t    thread_file='posix'\n+\t    tmake_file=\"${tmake_file} alpha/t-osf-pthread\"\n+\t    ;;\n+\tesac\n \t;;\n alpha64-dec-*vms*)\n \ttm_file=\"${tm_file} alpha/vms.h alpha/vms64.h\""}, {"sha": "968e65cce9ef3360d27dd236d05ccfe50910b52d", "filename": "gcc/config/alpha/t-osf-pthread", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fconfig%2Falpha%2Ft-osf-pthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fconfig%2Falpha%2Ft-osf-pthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-osf-pthread?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -0,0 +1,5 @@\n+# Provide dummy POSIX threads functions\n+LIB2FUNCS_EXTRA += $(srcdir)/gthr-posix.c\n+\n+# Compile libgcc2 with POSIX threads supports\n+TARGET_LIBGCC2_CFLAGS=-pthread"}, {"sha": "fe747a3d521d9b4bb509c4e4c41990a2f23516e3", "filename": "gcc/config/alpha/t-osf4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fconfig%2Falpha%2Ft-osf4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fconfig%2Falpha%2Ft-osf4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-osf4?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -10,7 +10,11 @@ SHLIB_NAME = @shlib_base_name@.so\n SHLIB_SONAME = @shlib_base_name@.so.1\n SHLIB_OBJS = @shlib_objs@\n \n+# Hide all POSIX threads related symbols provided by gthr-posix.c.  This\n+# only has an effect if t-osf-pthread is in use.\n SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared -nodefaultlibs \\\n+\t-Wl,-hidden_symbol,pthread\\* -Wl,-hidden_symbol,__pthread\\* \\\n+\t-Wl,-hidden_symbol,sched_get_\\* -Wl,-hidden_symbol,sched_yield \\\n \t-Wl,-msym -Wl,-set_version,gcc.1 -Wl,-soname,$(SHLIB_SONAME) \\\n \t-o $(SHLIB_NAME) @multilib_flags@ $(SHLIB_OBJS) -lc && \\\n \trm -f $(SHLIB_SONAME) && \\"}, {"sha": "c1869453f07679e7ed98e7ff062bd7f49019477f", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -2030,9 +2030,6 @@ As of GNU binutils 2.11.2, neither GNU @command{as} nor GNU @command{ld}\n are supported on Tru64 UNIX, so you must not configure GCC with\n @option{--with-gnu-as} or @option{--with-gnu-ld}.\n \n-The @option{--enable-threads} options isn't supported yet.  A patch is\n-in preparation for a future release.\n-\n GCC writes a @samp{.verstamp} directive to the assembler output file\n unless it is built as a cross-compiler.  It gets the version to use from\n the system header file @file{/usr/include/stamp.h}.  If you install a"}, {"sha": "d08f86c3c0b9d236b814fa2d96d44c0618137d8b", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Thursday July 17, 2003 at 10:34:33 AM PDT\n+ * It has been AutoGen-ed  Tuesday July 29, 2003 at 08:15:05 PM MEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Thu Jul 17 10:34:33 PDT 2003\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Tue Jul 29 20:15:06 MEST 2003\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 154 fixup descriptions.\n+ * This file contains 155 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -857,6 +857,45 @@ static const char* apzAlpha_ParensPatch[] = {\n     \"#ifndef __mips64\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Alpha_Pthread fix\n+ */\n+tSCC zAlpha_PthreadName[] =\n+     \"alpha_pthread\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAlpha_PthreadList[] =\n+  \"|pthread.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAlpha_PthreadMachs[] = {\n+        \"alpha*-dec-osf*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zAlpha_PthreadSelect0[] =\n+       \"(#[ \\t]*if defined \\\\(_PTHREAD_ENV_DECC\\\\) || defined \\\\(_PTHREAD_ENV_EPCC\\\\))\\n\\\n+(#[ \\t]*define _PTHREAD_USE_PTDNAM_)\";\n+\n+#define    ALPHA_PTHREAD_TEST_CT  1\n+static tTestDesc aAlpha_PthreadTests[] = {\n+  { TT_EGREP,    zAlpha_PthreadSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Alpha_Pthread\n+ */\n+static const char* apzAlpha_PthreadPatch[] = {\n+    \"format\",\n+    \"%1 || defined (__PRAGMA_EXTERN_PREFIX)\\n\\\n+%2\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Alpha_Sbrk fix\n@@ -6109,9 +6148,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          173\n+#define REGEX_COUNT          174\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            154\n+#define FIX_COUNT            155\n \n /*\n  *  Enumerate the fixes\n@@ -6135,6 +6174,7 @@ typedef enum {\n     ALPHA_ASSERT_FIXIDX,\n     ALPHA_GETOPT_FIXIDX,\n     ALPHA_PARENS_FIXIDX,\n+    ALPHA_PTHREAD_FIXIDX,\n     ALPHA_SBRK_FIXIDX,\n     AVOID_BOOL_DEFINE_FIXIDX,\n     AVOID_BOOL_TYPE_FIXIDX,\n@@ -6364,6 +6404,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      ALPHA_PARENS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aAlpha_ParensTests,   apzAlpha_ParensPatch, 0 },\n \n+  {  zAlpha_PthreadName,    zAlpha_PthreadList,\n+     apzAlpha_PthreadMachs,\n+     ALPHA_PTHREAD_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aAlpha_PthreadTests,   apzAlpha_PthreadPatch, 0 },\n+\n   {  zAlpha_SbrkName,    zAlpha_SbrkList,\n      apzAlpha_SbrkMachs,\n      ALPHA_SBRK_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "b593d83d2b95a01f3e2bcc4be956b9f0f1b48c66", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -577,6 +577,25 @@ fix = {\n };\n \n \n+/*\n+ *  Obey __PRAGMA_EXTERN_PREFIX for Tru64 UNIX <pthread.h>.\n+ */\n+fix = {\n+    hackname  = alpha_pthread;\n+    files     = pthread.h;\n+    select    = \"(#[ \\t]*if defined \\\\(_PTHREAD_ENV_DECC\\\\) || defined \\\\(_PTHREAD_ENV_EPCC\\\\))\\n\"\n+\t\t\"(#[ \\t]*define _PTHREAD_USE_PTDNAM_)\";\n+\n+    mach      = \"alpha*-dec-osf*\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1 || defined (__PRAGMA_EXTERN_PREFIX)\\n%2\";\n+\n+    test_text = \"#  if defined (_PTHREAD_ENV_DECC) || defined (_PTHREAD_ENV_EPCC)\\n\"\n+\t\t\"#   define _PTHREAD_USE_PTDNAM_\\n\"\n+\t\t\"#  endif\";\n+};\n+\n+\n /*\n  *  Fix return value of sbrk in unistd.h on Alpha OSF/1 V2.0\n  *  And OpenBSD."}, {"sha": "95ad2d56c679745c7c5e6b7c16a0e7dc88dd92ad", "filename": "gcc/fixinc/tests/base/pthread.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Ffixinc%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Ffixinc%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fpthread.h?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -15,6 +15,13 @@\n #endif  /* AIX_PTHREAD_CHECK */\n \n \n+#if defined( ALPHA_PTHREAD_CHECK )\n+#  if defined (_PTHREAD_ENV_DECC) || defined (_PTHREAD_ENV_EPCC) || defined (__PRAGMA_EXTERN_PREFIX)\n+#   define _PTHREAD_USE_PTDNAM_\n+#  endif\n+#endif  /* ALPHA_PTHREAD_CHECK */\n+\n+\n #if defined( PTHREAD_PAGE_SIZE_CHECK )\n extern int __page_size;\n #endif  /* PTHREAD_PAGE_SIZE_CHECK */"}, {"sha": "56bbad2830111103f09754c18450596e0df8bad5", "filename": "gcc/gthr-posix.c", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fgthr-posix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fgthr-posix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.c?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -0,0 +1,207 @@\n+/* POSIX threads dummy routines for systems without weak definitions.  */\n+/* Compile this one with gcc.  */\n+/* Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#include \"tconfig.h\"\n+#include \"tm.h\"\n+/* Define so we provide weak definitions of functions used by libobjc only.  */\n+#define _LIBOBJC_WEAK\n+#include \"gthr.h\"\n+\n+int\n+pthread_once (pthread_once_t *once ATTRIBUTE_UNUSED,\n+\t      void (*func) (void) ATTRIBUTE_UNUSED)\n+{\n+  return -1;\n+}\n+\n+int\n+pthread_key_create (pthread_key_t *key ATTRIBUTE_UNUSED,\n+\t\t    void (*dtor) (void *) ATTRIBUTE_UNUSED)\n+{\n+  return -1;\n+}\n+\n+int\n+pthread_key_delete (pthread_key_t key ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+void *\n+pthread_getspecific (pthread_key_t key ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_setspecific (pthread_key_t key ATTRIBUTE_UNUSED,\n+\t\t     const void *ptr ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_create (pthread_t *thread ATTRIBUTE_UNUSED,\n+\t\tconst pthread_attr_t *attr ATTRIBUTE_UNUSED,\n+\t\tvoid *(*start_routine) (void *) ATTRIBUTE_UNUSED,\n+\t\tvoid *arg ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_mutex_lock (pthread_mutex_t *mutex ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_mutex_trylock (pthread_mutex_t *mutex ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_mutex_unlock (pthread_mutex_t *mutex ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_cond_broadcast (pthread_cond_t *cond ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_cond_destroy (pthread_cond_t *cond ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_cond_init (pthread_cond_t *cond ATTRIBUTE_UNUSED,\n+\t\t   const pthread_condattr_t *attr ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_cond_signal (pthread_cond_t *cond ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_cond_wait (pthread_cond_t *cond ATTRIBUTE_UNUSED,\n+\t\t   pthread_mutex_t *mutex ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+void\n+pthread_exit (void *value_ptr ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+int\n+pthread_mutex_init (pthread_mutex_t *mutex ATTRIBUTE_UNUSED,\n+\t\t    const pthread_mutexattr_t *attr ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_mutex_destroy (pthread_mutex_t *mutex ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+pthread_t\n+pthread_self (void)\n+{\n+  return (pthread_t) 0;\n+}\n+\n+#ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n+int\n+sched_get_priority_max (int policy ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+sched_get_priority_min (int policy ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+#endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */\n+\n+int\n+sched_yield (void)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_attr_destroy (pthread_attr_t *attr ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_attr_init (pthread_attr_t *attr ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_attr_setdetachstate (pthread_attr_t *attr ATTRIBUTE_UNUSED,\n+\t\t\t     int detachstate ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+#ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n+int\n+pthread_getschedparam (pthread_t thread ATTRIBUTE_UNUSED,\n+\t\t       int *policy ATTRIBUTE_UNUSED,\n+\t\t       struct sched_param *param ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+pthread_setschedparam (pthread_t thread ATTRIBUTE_UNUSED,\n+\t\t       int policy ATTRIBUTE_UNUSED,\n+\t\t       const struct sched_param *param ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+#endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */\n+"}, {"sha": "88234daae93a60d133c06c6304e29c1f3c1e4a28", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=2a4e8ebc137e8a04d1d6b66f93a93ae215acf33a", "patch": "@@ -1,6 +1,7 @@\n /* Threads compatibility routines for libgcc2 and libobjc.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1999, 2000, 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1999, 2000, 2001, 2002, 2003\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -34,6 +35,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #define __GTHREADS 1\n \n+/* Some implementations of <pthread.h> require this to be defined.  */\n+#ifndef _REENTRANT\n+#define _REENTRANT 1\n+#endif\n+\n #include <pthread.h>\n #include <unistd.h>\n \n@@ -57,7 +63,7 @@ typedef pthread_mutex_t __gthread_mutex_t;\n #pragma weak pthread_mutex_trylock\n #pragma weak pthread_mutex_unlock\n \n-#ifdef _LIBOBJC\n+#if defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)\n /* Objective-C.  */\n #pragma weak pthread_cond_broadcast\n #pragma weak pthread_cond_destroy\n@@ -82,7 +88,7 @@ typedef pthread_mutex_t __gthread_mutex_t;\n #pragma weak pthread_getschedparam\n #pragma weak pthread_setschedparam\n #endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */\n-#endif /* _LIBOBJC */\n+#endif /* _LIBOBJC || _LIBOBJC_WEAK */\n \n static inline int\n __gthread_active_p (void)"}]}