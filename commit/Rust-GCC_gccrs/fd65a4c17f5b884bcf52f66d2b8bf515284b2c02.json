{"sha": "fd65a4c17f5b884bcf52f66d2b8bf515284b2c02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2NWE0YzE3ZjViODg0YmNmNTJmNjZkMmI4YmY1MTUyODRiMmMwMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-11T20:31:35Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-11T20:31:35Z"}, "message": "parse.y (pedantic): Give it itype.\n\n\t* parse.y (pedantic): Give it itype.  Adjust usage accordingly\n\tthroughout.\n\nFrom-SVN: r28678", "tree": {"sha": "dc984c8dca5377e5b621be691e5cf42b6f6feb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc984c8dca5377e5b621be691e5cf42b6f6feb8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02/comments", "author": null, "committer": null, "parents": [{"sha": "6eabb2412f6c4c8306fb2f8fd05abf608e29caa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eabb2412f6c4c8306fb2f8fd05abf608e29caa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eabb2412f6c4c8306fb2f8fd05abf608e29caa9"}], "stats": {"total": 1630, "additions": 816, "deletions": 814}, "files": [{"sha": "41cea962be8ada5d5cb5ab8a130c8f70a774ef6e", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 808, "deletions": 808, "changes": 1616, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=fd65a4c17f5b884bcf52f66d2b8bf515284b2c02"}, {"sha": "9519ac007bc68d3060d6805eebcd1713f92af3d8", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd65a4c17f5b884bcf52f66d2b8bf515284b2c02/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=fd65a4c17f5b884bcf52f66d2b8bf515284b2c02", "patch": "@@ -231,6 +231,8 @@ empty_parms ()\n %type <ftype> typed_declspecs1 type_specifier_seq nonempty_cv_qualifiers\n %type <ftype> structsp typespecqual_reserved parm named_parm full_parm\n \n+%type <itype> extension\n+\n /* C++ extensions */\n %token <ttype> PTYPENAME\n %token <ttype> PRE_PARSED_FUNCTION_DECL EXTERN_LANG_STRING ALL\n@@ -370,7 +372,7 @@ extdefs_opt:\n \n extension:\n \tEXTENSION\n-\t\t{ $<itype>$ = pedantic;\n+\t\t{ $$ = pedantic;\n \t\t  pedantic = 0; }\n \t;\n \n@@ -416,7 +418,7 @@ extdef:\n \t\t{ do_toplevel_using_decl ($1); }\n \t| using_directive\n \t| extension extdef\n-\t\t{ pedantic = $<itype>1; }\n+\t\t{ pedantic = $1; }\n \t;\n \n namespace_alias:\n@@ -584,7 +586,7 @@ template_extdef:\n \t\t{ if (pending_inlines) do_pending_inlines ();\n \t\t  pop_lang_context (); }\n \t| extension template_extdef\n-\t\t{ pedantic = $<itype>1; }\n+\t\t{ pedantic = $1; }\n \t;\n \n template_datadef:\n@@ -1082,7 +1084,7 @@ unary_expr:\n \t/* __extension__ turns off -pedantic for following primary.  */\n \t| extension cast_expr  \t  %prec UNARY\n \t\t{ $$ = $2;\n-\t\t  pedantic = $<itype>1; }\n+\t\t  pedantic = $1; }\n \t| '*' cast_expr   %prec UNARY\n \t\t{ $$ = build_x_indirect_ref ($2, \"unary *\"); }\n \t| '&' cast_expr   %prec UNARY\n@@ -1660,7 +1662,7 @@ decl:\n \t| declmods ';'\n \t\t{ warning (\"empty declaration\"); }\n \t| extension decl\n-\t\t{ pedantic = $<itype>1; }\n+\t\t{ pedantic = $1; }\n \t;\n \n /* Any kind of declarator (thus, all declarators allowed\n@@ -2427,7 +2429,7 @@ component_decl:\n \t\t{ $$ = NULL_TREE; }\n \t| extension component_decl\n \t\t{ $$ = $2;\n-\t\t  pedantic = $<itype>1; }\n+\t\t  pedantic = $1; }\n         | template_header component_decl\n                 {  \n \t\t  if ($2)"}]}