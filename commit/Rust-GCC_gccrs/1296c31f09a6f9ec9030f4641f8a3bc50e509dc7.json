{"sha": "1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5NmMzMWYwOWE2ZjllYzkwMzBmNDY0MWY4YTNiYzUwZTUwOWRjNw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2007-03-09T07:27:44Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-03-09T07:27:44Z"}, "message": "tree-ssa-structalias.c (variable_info): Remove finished_solution.\n\n2007-03-09  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-structalias.c (variable_info): Remove\n\tfinished_solution.\n\t(new_var_info): Ditto.\n\t(shared_bitmap_info_t): New structure.\n\t(shared_bitmap_table): New variable.\n\t(shared_bitmap_hash): New function.\n\t(shared_bitmap_eq): Ditto\n\t(shared_bitmap_lookup): Ditto.\n\t(shared_bitmap_add): Ditto.\n\t(merge_smts_into): Change to take bitmap directly.\n\t(find_what_p_points_to): Rewrite to use shared bitmap hashtable.\n\t(init_alias_vars): Init shared bitmap hashtable.\n\t(delete_points_to_sets): Delete shared bitmap hashtable.\n\t* tree-ssa-operands.c (add_virtual_operand): Partially revert the\n\tis_aliased removal as a change that was still necessary was\n\tdeleted.\n\nFrom-SVN: r122741", "tree": {"sha": "b5a2d1dcfc824ec72c027db8dd476501c3232535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5a2d1dcfc824ec72c027db8dd476501c3232535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84ac30cb94526de72f51abbea2a223ad8714a85e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ac30cb94526de72f51abbea2a223ad8714a85e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ac30cb94526de72f51abbea2a223ad8714a85e"}], "stats": {"total": 178, "additions": 137, "deletions": 41}, "files": [{"sha": "48e94f62997a4a029e674067b9ac399dca32fd52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "patch": "@@ -1,3 +1,22 @@\n+2007-03-09  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-structalias.c (variable_info): Remove\n+\tfinished_solution.\n+\t(new_var_info): Ditto.\n+\t(shared_bitmap_info_t): New structure.\n+\t(shared_bitmap_table): New variable.\n+\t(shared_bitmap_hash): New function.\n+\t(shared_bitmap_eq): Ditto\n+\t(shared_bitmap_lookup): Ditto.\n+\t(shared_bitmap_add): Ditto.\n+\t(merge_smts_into): Change to take bitmap directly.\n+\t(find_what_p_points_to): Rewrite to use shared bitmap hashtable.\n+\t(init_alias_vars): Init shared bitmap hashtable.\n+\t(delete_points_to_sets): Delete shared bitmap hashtable.\n+\t* tree-ssa-operands.c (add_virtual_operand): Partially revert the\n+\tis_aliased removal as a change that was still necessary was\n+\tdeleted.\n+\n 2007-03-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (override_options): Conditionally disable"}, {"sha": "26f4963ab5be04cf5c564a47d429a300e9960213", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "patch": "@@ -1523,13 +1523,23 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t      append_vdef (al);\n \t    }\n \n-\t  /* Even if no aliases have been added, we still need to\n-\t     establish def-use and use-def chains, lest\n-\t     transformations think that this is not a memory\n-\t     reference.  For an example of this scenario, see\n-\t     testsuite/g++.dg/opt/cleanup1.C.  */\n-\t  if (none_added)\n-\t    append_vdef (var);\n+\t  /* If the variable is also an alias tag, add a virtual\n+\t     operand for it, otherwise we will miss representing\n+\t     references to the members of the variable's alias set.\t     \n+\t     This fixes the bug in gcc.c-torture/execute/20020503-1.c.\n+\t     \n+\t     It is also necessary to add bare defs on clobbers for\n+\t     SMT's, so that bare SMT uses caused by pruning all the\n+\t     aliases will link up properly with calls.   In order to\n+\t     keep the number of these bare defs we add down to the\n+\t     minimum necessary, we keep track of which SMT's were used\n+\t     alone in statement vdefs or VUSEs.  */\n+\t  if (none_added\n+\t      || (TREE_CODE (var) == SYMBOL_MEMORY_TAG\n+\t\t  && is_call_site))\n+\t    {\n+\t      append_vdef (var);\n+\t    }\n \t}\n       else\n \t{"}, {"sha": "b29619ec205b12e826734d35e8f6303a23699a2e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 101, "deletions": 34, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1296c31f09a6f9ec9030f4641f8a3bc50e509dc7/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=1296c31f09a6f9ec9030f4641f8a3bc50e509dc7", "patch": "@@ -256,10 +256,6 @@ struct variable_info\n   /* Old points-to set for this variable.  */\n   bitmap oldsolution;\n \n-  /* Finished points-to set for this variable (IE what is returned\n-     from find_what_p_points_to.  */\n-  bitmap finished_solution;\n-\n   /* Variable ids represented by this node.  */\n   bitmap variables;\n \n@@ -374,7 +370,6 @@ new_var_info (tree t, unsigned int id, const char *name)\n   ret->has_union = false;\n   ret->solution = BITMAP_ALLOC (&pta_obstack);\n   ret->oldsolution = BITMAP_ALLOC (&oldpta_obstack);\n-  ret->finished_solution = NULL;\n   ret->next = NULL;\n   ret->collapsed_to = NULL;\n   return ret;\n@@ -4159,6 +4154,75 @@ intra_create_variable_infos (void)\n     }\n }\n \n+/* Structure used to put solution bitmaps in a hashtable so they can\n+   be shared among variables with the same points-to set.  */\n+\n+typedef struct shared_bitmap_info\n+{\n+  bitmap pt_vars;\n+  hashval_t hashcode;\n+} *shared_bitmap_info_t;\n+\n+static htab_t shared_bitmap_table;\n+\n+/* Hash function for a shared_bitmap_info_t */\n+\n+static hashval_t\n+shared_bitmap_hash (const void *p)\n+{\n+  const shared_bitmap_info_t bi = (shared_bitmap_info_t) p;\n+  return bi->hashcode;\n+}\n+\n+/* Equality function for two shared_bitmap_info_t's. */\n+\n+static int\n+shared_bitmap_eq (const void *p1, const void *p2)\n+{\n+  const shared_bitmap_info_t sbi1 = (shared_bitmap_info_t) p1;\n+  const shared_bitmap_info_t sbi2 = (shared_bitmap_info_t) p2;\n+  return bitmap_equal_p (sbi1->pt_vars, sbi2->pt_vars);\n+}\n+\n+/* Lookup a bitmap in the shared bitmap hashtable, and return an already\n+   existing instance if there is one, NULL otherwise.  */\n+\n+static bitmap\n+shared_bitmap_lookup (bitmap pt_vars)\n+{\n+  void **slot;\n+  struct shared_bitmap_info sbi;\n+\n+  sbi.pt_vars = pt_vars;\n+  sbi.hashcode = bitmap_hash (pt_vars);\n+  \n+  slot = htab_find_slot_with_hash (shared_bitmap_table, &sbi,\n+\t\t\t\t   sbi.hashcode, NO_INSERT);\n+  if (!slot)\n+    return NULL;\n+  else\n+    return ((shared_bitmap_info_t) *slot)->pt_vars;\n+}\n+\n+\n+/* Add a bitmap to the shared bitmap hashtable.  */\n+\n+static void\n+shared_bitmap_add (bitmap pt_vars)\n+{\n+  void **slot;\n+  shared_bitmap_info_t sbi = XNEW (struct shared_bitmap_info);\n+  \n+  sbi->pt_vars = pt_vars;\n+  sbi->hashcode = bitmap_hash (pt_vars);\n+  \n+  slot = htab_find_slot_with_hash (shared_bitmap_table, sbi,\n+\t\t\t\t   sbi->hashcode, INSERT);\n+  gcc_assert (!*slot);\n+  *slot = (void *) sbi;\n+}\n+\n+\n /* Set bits in INTO corresponding to the variable uids in solution set\n    FROM, which came from variable PTR.\n    For variables that are actually dereferenced, we also use type\n@@ -4282,12 +4346,12 @@ set_used_smts (void)\n     }\n }\n \n-/* Merge the necessary SMT's into the solution set for VI, which is\n+/* Merge the necessary SMT's into the bitmap INTO, which is\n    P's varinfo.  This involves merging all SMT's that are a subset of\n    the SMT necessary for P. */\n \n static void\n-merge_smts_into (tree p, varinfo_t vi)\n+merge_smts_into (tree p, bitmap solution)\n {\n   unsigned int i;\n   bitmap_iterator bi;\n@@ -4305,20 +4369,20 @@ merge_smts_into (tree p, varinfo_t vi)\n \n       /* Need to set the SMT subsets first before this\n \t will work properly.  */\n-      bitmap_set_bit (vi->finished_solution, DECL_UID (smt));\n+      bitmap_set_bit (solution, DECL_UID (smt));\n       EXECUTE_IF_SET_IN_BITMAP (used_smts, 0, i, bi)\n \t{\n \t  tree newsmt = referenced_var (i);\n \t  tree newsmttype = TREE_TYPE (newsmt);\n \n \t  if (alias_set_subset_of (get_alias_set (newsmttype),\n \t\t\t\t   smtset))\n-\t    bitmap_set_bit (vi->finished_solution, i);\n+\t    bitmap_set_bit (solution, i);\n \t}\n \n       aliases = MTAG_ALIASES (smt);\n       if (aliases)\n-        bitmap_ior_into (vi->finished_solution, aliases);\n+        bitmap_ior_into (solution, aliases);\n     }\n }\n \n@@ -4371,7 +4435,9 @@ find_what_p_points_to (tree p)\n \t  unsigned int i;\n \t  bitmap_iterator bi;\n \t  bool was_pt_anything = false;\n-\n+\t  bitmap finished_solution;\n+\t  bitmap result;\n+\t  \n \t  if (!pi->is_dereferenced)\n \t    return false;\n \n@@ -4403,32 +4469,31 @@ find_what_p_points_to (tree p)\n \t\t}\n \t    }\n \n-\t  /* Share the final set of variables between the SSA_NAME\n-\t     pointer infos for collapsed nodes that are collapsed to\n-\t     non-special variables.  This is because special vars have\n-\t     no real types associated with them, so while we know the\n-\t     pointers are equivalent to them, we need to generate the\n-\t     solution separately since it will include SMT's from the\n-\t     original non-collapsed variable.  */\n-\t  if (!vi->is_special_var && vi->finished_solution)\n+\t  /* Share the final set of variables when possible.  */\n+\t  \n+\t  finished_solution = BITMAP_GGC_ALLOC ();\n+\t  stats.points_to_sets_created++;\n+\t  \n+\t  /* Instead of using pt_anything, we instead merge in the SMT\n+\t     aliases for the underlying SMT.  */\n+\t  if (was_pt_anything)\n \t    {\n-\t      pi->pt_vars = vi->finished_solution;\n+\t      merge_smts_into (p, finished_solution);\n+\t      pi->pt_global_mem = 1;\n+\t    }\n+\t  \n+\t  set_uids_in_ptset (vi->decl, finished_solution, vi->solution);\n+\t  result = shared_bitmap_lookup (finished_solution);\n+\n+\t  if (!result)\n+\t    {\n+\t      shared_bitmap_add (finished_solution);\n+\t      pi->pt_vars = finished_solution;\n \t    }\n \t  else\n \t    {\n-\t      vi->finished_solution = BITMAP_GGC_ALLOC ();\n-\t      stats.points_to_sets_created++;\n-\n-\t      /* Instead of using pt_anything, we instead merge in the SMT\n-\t\t aliases for the underlying SMT.  */\n-\t      if (was_pt_anything)\n-\t\t{\n-\t\t  merge_smts_into (p, vi);\n-\t\t  pi->pt_global_mem = 1;\n-\t\t}\n-\n-\t      set_uids_in_ptset (vi->decl, vi->finished_solution, vi->solution);\n-\t      pi->pt_vars = vi->finished_solution;\n+\t      pi->pt_vars = result;\n+\t      bitmap_clear (finished_solution);\n \t    }\n \n \t  if (bitmap_empty_p (pi->pt_vars))\n@@ -4602,7 +4667,8 @@ init_alias_vars (void)\n   vi_for_tree = pointer_map_create ();\n \n   memset (&stats, 0, sizeof (stats));\n-\n+  shared_bitmap_table = htab_create (511, shared_bitmap_hash,\n+\t\t\t\t     shared_bitmap_eq, free);\n   init_base_vars ();\n }\n \n@@ -4737,6 +4803,7 @@ delete_points_to_sets (void)\n   varinfo_t v;\n   int i;\n \n+  htab_delete (shared_bitmap_table);\n   if (dump_file && (dump_flags & TDF_STATS))\n     fprintf (dump_file, \"Points to sets created:%d\\n\",\n \t     stats.points_to_sets_created);"}]}