{"sha": "65f69237d7a0a3883ab120593c372fed53613b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmNjkyMzdkN2EwYTM4ODNhYjEyMDU5M2MzNzJmZWQ1MzYxM2IzNQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "2000-08-29T22:15:21Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-08-29T22:15:21Z"}, "message": "typeck.c (build_java_array_type): Rewrite code to do array alignment.\n\n2000-08-16  Andrew Haley  <aph@cygnus.com>\n\n\t* typeck.c (build_java_array_type): Rewrite code to do array\n\talignment.  Take into account back-end macros when aligning array\n\tdata.  Remove setting of TYPE_USER_ALIGN; Java doesn't allow the\n\tuser to set alignment. Fixes gcj/252 and 160.\n\n(This fixes gcj/252 and 160:\n http://sources.redhat.com/ml/java-prs/2000-q2/msg00254.html\n <couldn't find an archive entry for gcj/160>\n http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00907.html)\n\nFrom-SVN: r36057", "tree": {"sha": "2535202ed384f0558a94feb08a4c14605880a4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2535202ed384f0558a94feb08a4c14605880a4fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65f69237d7a0a3883ab120593c372fed53613b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f69237d7a0a3883ab120593c372fed53613b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f69237d7a0a3883ab120593c372fed53613b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f69237d7a0a3883ab120593c372fed53613b35/comments", "author": null, "committer": null, "parents": [{"sha": "7efcf4662e9bf7ac58f09ef7184c34f077ea85ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efcf4662e9bf7ac58f09ef7184c34f077ea85ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efcf4662e9bf7ac58f09ef7184c34f077ea85ae"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "754112a606b448376e3f9605f472dec68a6df3ef", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f69237d7a0a3883ab120593c372fed53613b35/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f69237d7a0a3883ab120593c372fed53613b35/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=65f69237d7a0a3883ab120593c372fed53613b35", "patch": "@@ -35,6 +35,13 @@\n \t* lang-specs.h: Do not process -o or run the assembler if\n \t-fsyntax-only.\n \n+2000-08-16  Andrew Haley  <aph@cygnus.com>\n+\n+\t* typeck.c (build_java_array_type): Rewrite code to do array\n+\talignment.  Take into account back-end macros when aligning array\n+\tdata.  Remove setting of TYPE_USER_ALIGN; Java doesn't allow the\n+\tuser to set alignment. Fixes gcj/252 and 160.\n+\n 2000-08-09  Tom Tromey  <tromey@cygnus.com>\n \n \t* parse.y (check_abstract_method_definitions): Now return `int'."}, {"sha": "990ff066db7dc5fe315321093314911624dfb15a", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f69237d7a0a3883ab120593c372fed53613b35/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f69237d7a0a3883ab120593c372fed53613b35/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=65f69237d7a0a3883ab120593c372fed53613b35", "patch": "@@ -417,13 +417,34 @@ build_java_array_type (element_type, length)\n     {\n       tree atype = build_prim_array_type (element_type, length);\n       tree arfld = build_decl (FIELD_DECL, get_identifier (\"data\"), atype);\n+      \n       DECL_CONTEXT (arfld) = t;\n       TREE_CHAIN (fld) = arfld;\n+\n+      /* We need to force the data field to begin at an alignment at\n+       least equal to the biggest alignment in an object type node\n+       in order to be compatible with the way that JArray is defined\n+       in CNI.  However, we can't exceed BIGGEST_FIELD_ALIGNMENT. */\n+      {\n+      unsigned desired_align = TYPE_ALIGN (object_type_node);\n+      desired_align = MAX (desired_align, TYPE_ALIGN (element_type));\n+#ifdef BIGGEST_FIELD_ALIGNMENT\n+      desired_align = MIN (desired_align, \n+                           (unsigned) BIGGEST_FIELD_ALIGNMENT);\n+#endif\n+#ifdef ADJUST_FIELD_ALIGN\n+      desired_align = ADJUST_FIELD_ALIGN (field, desired_align);\n+#endif\n+      DECL_ALIGN (arfld) = desired_align;\n+      }\n     }\n   else\n     {\n-      TYPE_ALIGN (t) = TYPE_ALIGN (element_type);\n-      TYPE_USER_ALIGN (t) = TYPE_USER_ALIGN (element_type);\n+      unsigned desired_align = TYPE_ALIGN (element_type);\n+#ifdef BIGGEST_FIELD_ALIGNMENT\n+      desired_align = MIN (desired_align, (unsigned) BIGGEST_FIELD_ALIGNMENT);\n+#endif\n+      TYPE_ALIGN (t) = desired_align;\n     }\n   pop_obstacks ();\n "}]}