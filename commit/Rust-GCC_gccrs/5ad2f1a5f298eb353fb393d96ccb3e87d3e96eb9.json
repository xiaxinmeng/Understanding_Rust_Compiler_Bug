{"sha": "5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFkMmYxYTVmMjk4ZWIzNTNmYjM5M2Q5NmNjYjNlODdkM2U5NmViOQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2008-11-24T17:55:35Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2008-11-24T17:55:35Z"}, "message": "re PR target/35018 ([m68k-elf] Gcc ouputs invalid asm when compiling with -O2 or higher)\n\n\tPR target/35018\n\n\t* config/m68k/m68k.md (ok_for_coldfire, enabled): New attributes.\n\t(addsi_lshrsi_31): Add ColdFire-friendly alternatives.\n\n\t* gcc.target/m68k/pr35018.c: New.\n\nFrom-SVN: r142161", "tree": {"sha": "4f61423a367d4a03cf1547609eb974c2a1085138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f61423a367d4a03cf1547609eb974c2a1085138"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/comments", "author": null, "committer": null, "parents": [{"sha": "148153c18ccc773df6b67034796295a489658814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148153c18ccc773df6b67034796295a489658814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148153c18ccc773df6b67034796295a489658814"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "6ed89220bf2fd79b708a1259e297d19d5e999f61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9", "patch": "@@ -1,3 +1,9 @@\n+2008-11-24  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR target/35018\n+\t* config/m68k/m68k.md (ok_for_coldfire, enabled): New attributes.\n+\t(addsi_lshrsi_31): Add ColdFire-friendly alternatives.\n+\n 2008-11-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (UNSPECV_CMPXCHG): Rename from"}, {"sha": "8522cc1a24dfac5209989e3e97d5376e2fceb831", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9", "patch": "@@ -244,6 +244,15 @@\n (define_attr \"size\" \"1,2,3\"\n   (symbol_ref \"m68k_sched_attr_size (insn)\"))\n \n+;; Alternative is OK for ColdFire.\n+(define_attr \"ok_for_coldfire\" \"yes,no\" (const_string \"yes\"))\n+\n+;; Define 'enabled' attribute.\n+(define_attr \"enabled\" \"\"\n+  (cond [(and (ne (symbol_ref \"TARGET_COLDFIRE\") (const_int 0))\n+\t      (eq_attr \"ok_for_coldfire\" \"no\"))\n+\t (const_int 0)]\n+ \t(const_int 1)))\n \f\n ;; Mode macros for floating point operations.\n ;; Valid floating point modes\n@@ -2281,8 +2290,8 @@\n })\n \n (define_insn \"addsi_lshrsi_31\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=dm\")\n-    (plus:SI (lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"rm\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=dm,dm,d<Q>\")\n+    (plus:SI (lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"rm,r<Q>,rm\")\n             (const_int 31))\n         (match_dup 1)))]\n   \"\"\n@@ -2302,7 +2311,8 @@\n   (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n \t\t\t\tCODE_LABEL_NUMBER (operands[3]));\n   return \"\";\n-})\n+}\n+  [(set_attr \"ok_for_coldfire\" \"no,yes,yes\")])\n \n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")"}, {"sha": "0c2f72204aac4fffa632da7461e0876f3cd04c02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9", "patch": "@@ -1,3 +1,8 @@\n+2008-11-24  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR target/35018\n+\t* gcc.target/m68k/pr35018.c: New.\n+\n 2008-11-24  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37779"}, {"sha": "fadea8620b21982ea4204c90696f882699fcdab2", "filename": "gcc/testsuite/gcc.target/m68k/pr35018.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr35018.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr35018.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr35018.c?ref=5ad2f1a5f298eb353fb393d96ccb3e87d3e96eb9", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mcpu=5249\" } */\n+\n+static inline void vect_add(int *x, int *y, int n)\n+{\n+    asm volatile (\"nop;\"\n+                : [n] \"+d\" (n), [x] \"+a\" (x), [y] \"+a\" (y)\n+                : : \"%d0\", \"%d1\", \"%d2\", \"%d3\", \"%a0\", \"%a1\", \"%a2\", \"%a3\",\n+                    \"cc\", \"memory\");\n+}\n+\n+extern void vect_copy (int *, int *, int);\n+\n+void vorbis_synthesis_blockin(int *blocksizes)\n+{\n+    int j, *pcm, *p;\n+\n+    int n=blocksizes[*p]/2;\n+    int n0=blocksizes[0]/2;\n+    int n1=blocksizes[1]/2;\n+\n+    for(j=0;j<*p;j++)\n+    {\n+        vect_add(p, pcm, n1);\n+        vect_add(pcm, p, n0);\n+        vect_add(p, pcm, n0);\n+        vect_add(p, pcm, n0);\n+        vect_copy(pcm, p, n);\n+    }\n+}\n+"}]}