{"sha": "b6105bf2c397ba0aba21454a17e013974e0fe657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxMDViZjJjMzk3YmEwYWJhMjE0NTRhMTdlMDEzOTc0ZTBmZTY1Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-12-11T00:41:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-11T00:41:29Z"}, "message": "sso_string_base.h (__sso_string_base<>::_M_compare): Add...\n\n2005-12-10  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_compare):\n\tAdd, specialized for char and wchar_t to immediately return true\n\twhen a string is compared to itself.\n\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_compare):\n\tLikewise, for the same _Rep.\n\t* include/ext/vstring.h (compare(const string&)): Use it.\n\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_destroy):\n\tDeallocate passed size + 1.\n\t(_M_dispose, _M_reserve): Adjust.\n\nFrom-SVN: r108372", "tree": {"sha": "6f2dff5fbecaa3fc1d3a8fbc15ad8d28758c8d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f2dff5fbecaa3fc1d3a8fbc15ad8d28758c8d84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6105bf2c397ba0aba21454a17e013974e0fe657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6105bf2c397ba0aba21454a17e013974e0fe657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6105bf2c397ba0aba21454a17e013974e0fe657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6105bf2c397ba0aba21454a17e013974e0fe657/comments", "author": null, "committer": null, "parents": [{"sha": "42e25796b5a0f59d44e06c4e0a8e1c203b953fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e25796b5a0f59d44e06c4e0a8e1c203b953fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e25796b5a0f59d44e06c4e0a8e1c203b953fbc"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "6e28250af1914185fe0f55b6dbd29e089df4932c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6105bf2c397ba0aba21454a17e013974e0fe657/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6105bf2c397ba0aba21454a17e013974e0fe657/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b6105bf2c397ba0aba21454a17e013974e0fe657", "patch": "@@ -1,3 +1,16 @@\n+2005-12-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_compare):\n+\tAdd, specialized for char and wchar_t to immediately return true\n+\twhen a string is compared to itself.\n+\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_compare):\n+\tLikewise, for the same _Rep.\n+\t* include/ext/vstring.h (compare(const string&)): Use it.\n+\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_destroy):\n+\tDeallocate passed size + 1.\n+\t(_M_dispose, _M_reserve): Adjust.\n+\n 2005-12-09  Paolo Carlini  <pcarlini@suse.de>\n \t    Howard Hinnant  <hhinnant@apple.com>\n "}, {"sha": "43a69c2c1b68f059f3570ca5f1e511eaf1b0b7d1", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6105bf2c397ba0aba21454a17e013974e0fe657/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6105bf2c397ba0aba21454a17e013974e0fe657/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=b6105bf2c397ba0aba21454a17e013974e0fe657", "patch": "@@ -334,6 +334,10 @@ namespace __gnu_cxx\n       \n       void\n       _M_erase(size_type __pos, size_type __n);\n+\n+      bool\n+      _M_compare(const __rc_string_base&) const\n+      { return false; }\n     };\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -670,6 +674,28 @@ namespace __gnu_cxx\n \n       _M_rep()->_M_set_length(__new_size);      \n     }\n+\n+  template<>\n+    inline bool\n+    __rc_string_base<char, std::char_traits<char>,\n+\t\t     std::allocator<char> >::\n+    _M_compare(const __rc_string_base& __rcs) const\n+    {\n+      if (_M_rep() == __rcs._M_rep())\n+\treturn true;\n+      return false;\n+    }\n+\n+  template<>\n+    inline bool\n+    __rc_string_base<wchar_t, std::char_traits<wchar_t>,\n+\t\t     std::allocator<wchar_t> >::\n+    _M_compare(const __rc_string_base& __rcs) const\n+    {\n+      if (_M_rep() == __rcs._M_rep())\n+\treturn true;\n+      return false;\n+    }\n } // namespace __gnu_cxx\n \n #endif /* _RC_STRING_BASE_H */"}, {"sha": "bb0d746eca511b40eca82706f93bb7c21f84e960", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6105bf2c397ba0aba21454a17e013974e0fe657/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6105bf2c397ba0aba21454a17e013974e0fe657/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=b6105bf2c397ba0aba21454a17e013974e0fe657", "patch": "@@ -102,7 +102,7 @@ namespace __gnu_cxx\n       _M_dispose()\n       {\n \tif (!_M_is_local())\n-\t  _M_destroy(_M_allocated_capacity + 1);\n+\t  _M_destroy(_M_allocated_capacity);\n       }\n \n       void\n@@ -225,13 +225,17 @@ namespace __gnu_cxx\n \n       void\n       _M_erase(size_type __pos, size_type __n);\n+\n+      bool\n+      _M_compare(const __sso_string_base&) const\n+      { return false; }\n     };\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n     __sso_string_base<_CharT, _Traits, _Alloc>::\n     _M_destroy(size_type __size) throw()\n-    { _CharT_alloc_type(_M_get_allocator()).deallocate(_M_data(), __size); }\n+    { _CharT_alloc_type(_M_get_allocator()).deallocate(_M_data(), __size + 1); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n@@ -498,7 +502,7 @@ namespace __gnu_cxx\n \t  else if (!_M_is_local())\n \t    {\n \t      _S_copy(_M_local_data, _M_data(), _M_length() + 1);\n-\t      _M_destroy(__capacity + 1);\n+\t      _M_destroy(__capacity);\n \t      _M_data(_M_local_data);\n \t    }\n \t}\n@@ -541,6 +545,28 @@ namespace __gnu_cxx\n \n       _M_set_length(_M_length() - __n);\n     }\n+\n+  template<>\n+    inline bool\n+    __sso_string_base<char, std::char_traits<char>,\n+\t\t      std::allocator<char> >::\n+    _M_compare(const __sso_string_base& __rcs) const\n+    {\n+      if (this == &__rcs)\n+\treturn true;\n+      return false;\n+    }\n+\n+  template<>\n+    inline bool\n+    __sso_string_base<wchar_t, std::char_traits<wchar_t>,\n+\t\t      std::allocator<wchar_t> >::\n+    _M_compare(const __sso_string_base& __rcs) const\n+    {\n+      if (this == &__rcs)\n+\treturn true;\n+      return false;\n+    }\n } // namespace __gnu_cxx\n \n #endif /* _SSO_STRING_BASE_H */"}, {"sha": "1c59e717915f46530136dcf5a900db60dbd391bb", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6105bf2c397ba0aba21454a17e013974e0fe657/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6105bf2c397ba0aba21454a17e013974e0fe657/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=b6105bf2c397ba0aba21454a17e013974e0fe657", "patch": "@@ -1665,6 +1665,9 @@ namespace __gnu_cxx\n       int\n       compare(const __versa_string& __str) const\n       {\n+\tif (this->_M_compare(__str))\n+\t  return 0;\n+\n \tconst size_type __size = this->size();\n \tconst size_type __osize = __str.size();\n \tconst size_type __len = std::min(__size, __osize);"}]}