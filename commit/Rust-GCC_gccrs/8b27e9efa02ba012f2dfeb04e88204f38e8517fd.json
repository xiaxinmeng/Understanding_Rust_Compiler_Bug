{"sha": "8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIyN2U5ZWZhMDJiYTAxMmYyZGZlYjA0ZTg4MjA0ZjM4ZTg1MTdmZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-07-25T20:19:24Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-07-25T20:19:24Z"}, "message": "Kill strict_prototype.\n\n\tKill strict_prototype. Backwards compatibility only for\n\tnon NO_IMPLICIT_EXTERN_C systems.\n\t* cp-tree.h (flag_strict_prototype): Remove.\n\t(strict_prototype): Remove.\n\t(strict_prototypes_lang_c, strict_prototypes_lang_cplusplus): Remove.\n\t* decl.c (maybe_push_to_top_level): Adjust.\n\t(pop_from_top_level): Adjust.\n\t(decls_match): Only allow sloppy parm matching for ancient\n\tsystem headers.\n\t(init_decl_processing): Adjust.\n\t(grokdeclarator): Adjust.\n\t* decl2.c (flag_strict_prototype): Remove.\n\t(strict_prototype): Remove.\n\t(strict_prototypes_lang_c, strict_prototypes_lang_cplusplus): Remove.\n\t(lang_f_options): Remove \"strict-prototype\".\n\t(unsupported-options): Add \"strict-prototype\".\n\t* lex.c (do_identifier): Adjust.\n\t(do_scoped_id): Adjust.\n\t* parse.y (empty_parms): Adjust.\n\t* class.c (push_lang_context): Adjust.\n\t(pop_lang_context): Adjust.\n\t* typeck.c (comp_target_parms): Adjust.\n\nFrom-SVN: r35254", "tree": {"sha": "020a802280b525bb0553d216f4ebb2c6dff1b41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020a802280b525bb0553d216f4ebb2c6dff1b41c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/comments", "author": null, "committer": null, "parents": [{"sha": "7b300d1385d166fbb827450f969af269270430d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b300d1385d166fbb827450f969af269270430d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b300d1385d166fbb827450f969af269270430d8"}], "stats": {"total": 138, "additions": 56, "deletions": 82}, "files": [{"sha": "030cce6f7bdd5fe3149e74e4a1585f974fdf05b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "patch": "@@ -1,3 +1,28 @@\n+2000-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tKill strict_prototype. Backwards compatibility only for\n+\tnon NO_IMPLICIT_EXTERN_C systems.\n+\t* cp-tree.h (flag_strict_prototype): Remove.\n+\t(strict_prototype): Remove.\n+\t(strict_prototypes_lang_c, strict_prototypes_lang_cplusplus): Remove.\n+\t* decl.c (maybe_push_to_top_level): Adjust.\n+\t(pop_from_top_level): Adjust.\n+\t(decls_match): Only allow sloppy parm matching for ancient\n+\tsystem headers.\n+\t(init_decl_processing): Adjust.\n+\t(grokdeclarator): Adjust.\n+\t* decl2.c (flag_strict_prototype): Remove.\n+\t(strict_prototype): Remove.\n+\t(strict_prototypes_lang_c, strict_prototypes_lang_cplusplus): Remove.\n+\t(lang_f_options): Remove \"strict-prototype\".\n+\t(unsupported-options): Add \"strict-prototype\".\n+\t* lex.c (do_identifier): Adjust.\n+\t(do_scoped_id): Adjust.\n+\t* parse.y (empty_parms): Adjust.\n+\t* class.c (push_lang_context): Adjust.\n+\t(pop_lang_context): Adjust.\n+\t* typeck.c (comp_target_parms): Adjust.\n+\n 2000-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (poplevel): Deal with anonymous variables at for scope."}, {"sha": "f9c2c9e2eaf3ec7989813e63c7f51a58b4be9171", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "patch": "@@ -5690,12 +5690,10 @@ push_lang_context (name)\n \n   if (name == lang_name_cplusplus)\n     {\n-      strict_prototype = strict_prototypes_lang_cplusplus;\n       current_lang_name = name;\n     }\n   else if (name == lang_name_java)\n     {\n-      strict_prototype = strict_prototypes_lang_cplusplus;\n       current_lang_name = name;\n       /* DECL_IGNORED_P is initially set for these types, to avoid clutter.\n \t (See record_builtin_java_type in decl.c.)  However, that causes\n@@ -5712,7 +5710,6 @@ push_lang_context (name)\n     }\n   else if (name == lang_name_c)\n     {\n-      strict_prototype = strict_prototypes_lang_c;\n       current_lang_name = name;\n     }\n   else\n@@ -5728,11 +5725,6 @@ pop_lang_context ()\n      to it.  */\n   *current_lang_stack = NULL_TREE;\n   current_lang_name = *--current_lang_stack;\n-  if (current_lang_name == lang_name_cplusplus\n-      || current_lang_name == lang_name_java)\n-    strict_prototype = strict_prototypes_lang_cplusplus;\n-  else if (current_lang_name == lang_name_c)\n-    strict_prototype = strict_prototypes_lang_c;\n }\n \f\n /* Type instantiation routines.  */"}, {"sha": "56798f1db057d7d7e3af3330db576edf67b1d168", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "patch": "@@ -1181,10 +1181,6 @@ extern int flag_use_repository;\n    required.  */\n extern int flag_optional_diags;\n \n-/* Nonzero means do not consider empty argument prototype to mean function\n-   takes no arguments.  */\n-extern int flag_strict_prototype;\n-\n /* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n extern int flag_vtable_gc;\n \n@@ -3212,11 +3208,6 @@ typedef enum special_function_kind {\n   sfk_conversion           /* A conversion operator.  */\n } special_function_kind;\n \n-/* Zero means prototype weakly, as in ANSI C (no args means nothing).\n-   Each language context defines how this variable should be set.  */\n-extern int strict_prototype;\n-extern int strict_prototypes_lang_c, strict_prototypes_lang_cplusplus;\n-\n /* Non-zero means that if a label exists, and no other identifier\n    applies, use the value of the label.  */\n extern int flag_labels_ok;"}, {"sha": "bfcc47e62c95a31f74f4fbb9a98ca131f75fe812", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "patch": "@@ -2588,7 +2588,6 @@ maybe_push_to_top_level (pseudo)\n   VARRAY_TREE_INIT (current_lang_base, 10, \"current_lang_base\");\n   current_lang_stack = &VARRAY_TREE (current_lang_base, 0);\n   current_lang_name = lang_name_cplusplus;\n-  strict_prototype = strict_prototypes_lang_cplusplus;\n   current_namespace = global_namespace;\n }\n \n@@ -2622,11 +2621,6 @@ pop_from_top_level ()\n  \t}\n     }\n \n-  if (current_lang_name == lang_name_cplusplus)\n-    strict_prototype = strict_prototypes_lang_cplusplus;\n-  else if (current_lang_name == lang_name_c)\n-    strict_prototype = strict_prototypes_lang_c;\n-\n   /* If we were in the middle of compiling a function, restore our\n      state.  */\n   if (s->need_pop_function_context)\n@@ -3021,22 +3015,31 @@ decls_match (newdecl, olddecl)\n \n       if (same_type_p (TREE_TYPE (f1), TREE_TYPE (f2)))\n \t{\n-\t  if ((! strict_prototypes_lang_c || DECL_BUILT_IN (olddecl))\n-\t      && DECL_EXTERN_C_P (olddecl)\n-\t      && p2 == NULL_TREE)\n+\t  if (p2 == NULL_TREE && DECL_EXTERN_C_P (olddecl)\n+\t      && (DECL_BUILT_IN (olddecl)\n+#ifndef NO_IMPLICIT_EXTERN_C\n+\t          || (DECL_IN_SYSTEM_HEADER (newdecl) && !DECL_CLASS_SCOPE_P (newdecl))\n+\t          || (DECL_IN_SYSTEM_HEADER (olddecl) && !DECL_CLASS_SCOPE_P (olddecl))\n+#endif\n+\t      ))\n \t    {\n \t      types_match = self_promoting_args_p (p1);\n \t      if (p1 == void_list_node)\n \t\tTREE_TYPE (newdecl) = TREE_TYPE (olddecl);\n \t    }\n-\t  else if (!strict_prototypes_lang_c \n-\t\t   && DECL_EXTERN_C_P (olddecl)\n-\t\t   && DECL_EXTERN_C_P (newdecl)\n-\t\t   && p1 == NULL_TREE)\n+#ifndef NO_IMPLICIT_EXTERN_C\n+\t  else if (p1 == NULL_TREE\n+\t\t   && (DECL_EXTERN_C_P (olddecl)\n+\t               && DECL_IN_SYSTEM_HEADER (olddecl)\n+\t               && !DECL_CLASS_SCOPE_P (olddecl))\n+\t\t   && (DECL_EXTERN_C_P (newdecl)\n+\t               && DECL_IN_SYSTEM_HEADER (newdecl)\n+\t               && !DECL_CLASS_SCOPE_P (newdecl)))\n \t    {\n \t      types_match = self_promoting_args_p (p2);\n \t      TREE_TYPE (newdecl) = TREE_TYPE (olddecl);\n \t    }\n+#endif\n \t  else\n \t    types_match = compparms (p1, p2);\n \t}\n@@ -6287,15 +6290,11 @@ init_decl_processing ()\n   current_lang_name = NULL_TREE;\n \n   /* Adjust various flags based on command-line settings.  */\n-  if (flag_strict_prototype == 2)\n-    flag_strict_prototype = pedantic;\n   if (! flag_permissive && ! pedantic)\n     flag_pedantic_errors = 1;\n   if (!flag_no_inline)\n     flag_inline_trees = 1;\n \n-  strict_prototypes_lang_c = flag_strict_prototype;\n-\n   /* Initially, C.  */\n   current_lang_name = lang_name_c;\n \n@@ -7986,7 +7985,7 @@ destroy_local_var (decl)\n    If the length of an array type is not known before,\n    it must be determined now, from the initial value, or it is an error.\n \n-   INIT0 holds the value of an initializer that should be allowed to escape\n+   INIT holds the value of an initializer that should be allowed to escape\n    the normal rules.\n \n    FLAGS is LOOKUP_ONLYCONVERTING if the = init syntax was used, else 0\n@@ -10678,10 +10677,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\tif (TREE_CODE (declarator) == BIT_NOT_EXPR)\n \t\t  declarator = TREE_OPERAND (declarator, 0);\n \n-\t\tif (strict_prototype == 0 && arg_types == NULL_TREE)\n-\t\t  arg_types = void_list_node;\n-\t\telse if (arg_types == NULL_TREE\n-\t\t\t || arg_types != void_list_node)\n+                if (arg_types != void_list_node)\n \t\t  {\n \t\t    cp_error (\"destructors may not have parameters\");\n \t\t    arg_types = void_list_node;"}, {"sha": "360805172abf68cca69e7d67831126b881ce4683", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "patch": "@@ -360,13 +360,6 @@ int warn_deprecated = 1;\n #endif\n int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n \n-/* Nonzero for -fno-strict-prototype switch: do not consider empty\n-   argument prototype to mean function takes no arguments.  */\n-\n-int flag_strict_prototype = 2;\n-int strict_prototype = 1;\n-int strict_prototypes_lang_c, strict_prototypes_lang_cplusplus = 1;\n-\n /* Nonzero means that labels can be used as first-class objects */\n \n int flag_labels_ok;\n@@ -554,7 +547,6 @@ lang_f_options[] =\n   {\"rtti\", &flag_rtti, 1},\n   {\"squangle\", &flag_do_squangling, 1},\n   {\"stats\", &flag_detailed_statistics, 1},\n-  {\"strict-prototype\", &flag_strict_prototype, 1},\n   {\"use-cxa-atexit\", &flag_use_cxa_atexit, 1},\n   {\"vtable-gc\", &flag_vtable_gc, 1},\n   {\"vtable-thunks\", &flag_vtable_thunks, 1},\n@@ -571,6 +563,7 @@ static const char * const unsupported_options[] = {\n   \"guiding-decls\",\n   \"nonnull-objects\",\n   \"this-is-variable\",\n+  \"strict-prototype\",\n };\n \n /* Compare two option strings, pointed two by P1 and P2, for use with"}, {"sha": "b29f6d2861e4f9ded959cd2e46d2e6c57947df0a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "patch": "@@ -3114,19 +3114,6 @@ do_identifier (token, parsing, args)\n \t    cp_error (\"`%D' not defined\", token);\n \t  id = error_mark_node;\n \t}\n-      else if (in_call && ! flag_strict_prototype)\n-\t{\n-\t  if (!id)\n-\t    id = implicitly_declare (token);\n-\t  else\n-\t    {\n-\t      /* Implicit declaration of built-in function.  Don't\n-\t\t change the built-in declaration, but don't let this\n-\t\t go by silently, either.  */\n-\t      cp_pedwarn (\"implicit declaration of function `%D'\", token);\n-\t      DECL_ANTICIPATED (id) = 0;  /* only issue this warning once */\n-\t    }\n-\t}\n       else if (current_function_decl == 0)\n \t{\n \t  cp_error (\"`%D' was not declared in this scope\", token);\n@@ -3256,17 +3243,11 @@ do_scoped_id (token, parsing)\n \t  LOOKUP_EXPR_GLOBAL (id) = 1;\n \t  return id;\n \t}\n-      if (parsing && (yychar == '(' || yychar == LEFT_RIGHT)\n-\t  && ! flag_strict_prototype)\n-\tid = implicitly_declare (token);\n-      else\n-\t{\n-\t  if (IDENTIFIER_NAMESPACE_VALUE (token) != error_mark_node)\n-\t    cp_error (\"`::%D' undeclared (first use here)\", token);\n-\t  id = error_mark_node;\n-\t  /* Prevent repeated error messages.  */\n-\t  SET_IDENTIFIER_NAMESPACE_VALUE (token, error_mark_node);\n-\t}\n+      if (IDENTIFIER_NAMESPACE_VALUE (token) != error_mark_node)\n+        cp_error (\"`::%D' undeclared (first use here)\", token);\n+      id = error_mark_node;\n+      /* Prevent repeated error messages.  */\n+      SET_IDENTIFIER_NAMESPACE_VALUE (token, error_mark_node);\n     }\n   else\n     {"}, {"sha": "d162a456941653bfd3a5299c2284d374c3fe0ecc", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "patch": "@@ -101,11 +101,12 @@ empty_parms ()\n {\n   tree parms;\n \n-  if (strict_prototype\n-      || current_class_type != NULL)\n-    parms = void_list_node;\n-  else\n+#ifndef NO_IMPLICIT_EXTERN_C\n+  if (in_system_header && current_class_type == NULL)\n     parms = NULL_TREE;\n+  else\n+#endif\n+  parms = void_list_node;\n   return parms;\n }\n "}, {"sha": "e7f8d2f81ec4aa75c8ca8e4da9d1e6f9fbb34825", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b27e9efa02ba012f2dfeb04e88204f38e8517fd/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8b27e9efa02ba012f2dfeb04e88204f38e8517fd", "patch": "@@ -1484,13 +1484,8 @@ comp_target_parms (parms1, parms2)\n \n   if (t1 == 0 && t2 != 0)\n     {\n-      if (! flag_strict_prototype && t2 == void_list_node)\n-\t/* t1 might be the arglist of a function pointer in extern \"C\"\n-\t   declared to take (), which we fudged to (...).  Don't make the\n-\t   user pay for our mistake.  */;\n-      else\n-\tcp_pedwarn (\"ISO C++ prohibits conversion from `%#T' to `(...)'\",\n-\t\t    parms2);\n+      cp_pedwarn (\"ISO C++ prohibits conversion from `%#T' to `(...)'\",\n+\t\t  parms2);\n       return self_promoting_args_p (t2);\n     }\n   if (t2 == 0)"}]}