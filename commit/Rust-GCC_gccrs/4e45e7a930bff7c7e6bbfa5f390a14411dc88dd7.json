{"sha": "4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU0NWU3YTkzMGJmZjdjN2U2YmJmYTVmMzkwYTE0NDExZGM4OGRkNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-02-10T13:51:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:51:40Z"}, "message": "a-strunb.ads, [...]: Add missing pragma Ada_05 statements Fix name of Set routine\n\n2005-02-09  Robert Dewar  <dewar@adacore.com>\n\n        * a-strunb.ads, a-strunb.adb: Add missing pragma Ada_05 statements\n        Fix name of Set routine\n\n\t* a-strfix.ads, a-strfix.adb: Add new index functions from AI-301 to\n\tfixed packages.\n\n\t* a-stwise.ads, a-stwise.adb, a-stwifi.ads, a-stwifi.adb,\n\ta-strsea.ads, a-strsea.adb: Add new index functions from AI-301 to\n\tfixed packages\n\n\t* a-witeio.ads, a-witeio.adb, a-textio.ads, a-textio.adb: New function\n\tforms of Get_Line subprograms for AI-301.\n\n\t* a-wtcoau.adb, a-wtcoau.ads, a-wtcoio.adb, a-wtcoio.ads,\n\ta-wtedit.adb, a-wtedit.adb, a-wtedit.ads, a-wttest.adb,\n\ta-wttest.ads, a-strmap.ads, a-strmap.adb, a-stwima.adb,\n\ta-stwima.ads: Minor reformatting.\n\nFrom-SVN: r94810", "tree": {"sha": "63cfc97375650994bb335d260cabbdfd63f70efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63cfc97375650994bb335d260cabbdfd63f70efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/comments", "author": null, "committer": null, "parents": [{"sha": "82c80734715c801643075ab68c5c9a5e00da1b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c80734715c801643075ab68c5c9a5e00da1b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c80734715c801643075ab68c5c9a5e00da1b03"}], "stats": {"total": 3058, "additions": 1745, "deletions": 1313}, "files": [{"sha": "aadc977051c9c769d4fbc5248803c1da2cb87f63", "filename": "gcc/ada/a-strfix.adb", "status": "modified", "additions": 123, "deletions": 112, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strfix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strfix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strfix.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,59 +50,82 @@ package body Ada.Strings.Fixed is\n    ------------------------\n \n    function Index\n-     (Source   : in String;\n-      Pattern  : in String;\n-      Going    : in Direction := Forward;\n-      Mapping  : in Maps.Character_Mapping := Maps.Identity)\n-      return     Natural\n+     (Source  : String;\n+      Pattern : String;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n    renames Ada.Strings.Search.Index;\n \n    function Index\n-     (Source   : in String;\n-      Pattern  : in String;\n-      Going    : in Direction := Forward;\n-      Mapping  : in Maps.Character_Mapping_Function)\n-      return     Natural\n+     (Source  : String;\n+      Pattern : String;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural\n    renames Ada.Strings.Search.Index;\n \n    function Index\n-     (Source : in String;\n-      Set    : in Maps.Character_Set;\n-      Test   : in Membership := Inside;\n-      Going  : in Direction  := Forward)\n-      return   Natural\n+     (Source : String;\n+      Set    : Maps.Character_Set;\n+      Test   : Membership := Inside;\n+      Going  : Direction  := Forward) return Natural\n    renames Ada.Strings.Search.Index;\n \n+   function Index\n+     (Source  : String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n+   renames Ada.Strings.Search.Index;\n+\n+   function Index\n+     (Source  : String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural\n+   renames Ada.Strings.Search.Index;\n+\n+   function Index\n+     (Source  : String;\n+      Set     : Maps.Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural\n+   renames Ada.Strings.Search.Index;\n+\n+   function Index_Non_Blank\n+     (Source : String;\n+      Going  : Direction := Forward) return Natural\n+   renames Ada.Strings.Search.Index_Non_Blank;\n+\n    function Index_Non_Blank\n-     (Source : in String;\n-      Going  : in Direction := Forward)\n-      return   Natural\n+     (Source : String;\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural\n    renames Ada.Strings.Search.Index_Non_Blank;\n \n    function Count\n-     (Source   : in String;\n-      Pattern  : in String;\n-      Mapping  : in Maps.Character_Mapping := Maps.Identity)\n-      return     Natural\n+     (Source  : String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n    renames Ada.Strings.Search.Count;\n \n    function Count\n-     (Source   : in String;\n-      Pattern  : in String;\n-      Mapping  : in Maps.Character_Mapping_Function)\n-      return     Natural\n+     (Source  : String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping_Function) return Natural\n    renames Ada.Strings.Search.Count;\n \n    function Count\n-     (Source   : in String;\n-      Set      : in Maps.Character_Set)\n-      return     Natural\n+     (Source : String;\n+      Set    : Maps.Character_Set) return Natural\n    renames Ada.Strings.Search.Count;\n \n    procedure Find_Token\n-     (Source : in String;\n-      Set    : in Maps.Character_Set;\n-      Test   : in Membership;\n+     (Source : String;\n+      Set    : Maps.Character_Set;\n+      Test   : Membership;\n       First  : out Positive;\n       Last   : out Natural)\n    renames Ada.Strings.Search.Find_Token;\n@@ -112,9 +135,8 @@ package body Ada.Strings.Fixed is\n    ---------\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in Character)\n-      return  String\n+     (Left  : Natural;\n+      Right : Character) return String\n    is\n       Result : String (1 .. Left);\n \n@@ -127,9 +149,8 @@ package body Ada.Strings.Fixed is\n    end \"*\";\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in String)\n-      return  String\n+     (Left  : Natural;\n+      Right : String) return String\n    is\n       Result : String (1 .. Left * Right'Length);\n       Ptr    : Integer := 1;\n@@ -148,10 +169,9 @@ package body Ada.Strings.Fixed is\n    ------------\n \n    function Delete\n-     (Source  : in String;\n-      From    : in Positive;\n-      Through : in Natural)\n-      return    String\n+     (Source  : String;\n+      From    : Positive;\n+      Through : Natural) return String\n    is\n    begin\n       if From > Through then\n@@ -185,10 +205,10 @@ package body Ada.Strings.Fixed is\n \n    procedure Delete\n      (Source  : in out String;\n-      From    : in Positive;\n-      Through : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Character := Space)\n+      From    : Positive;\n+      Through : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Character := Space)\n    is\n    begin\n       Move (Source  => Delete (Source, From, Through),\n@@ -202,10 +222,9 @@ package body Ada.Strings.Fixed is\n    ----------\n \n    function Head\n-     (Source : in String;\n-      Count  : in Natural;\n-      Pad    : in Character := Space)\n-      return   String\n+     (Source : String;\n+      Count  : Natural;\n+      Pad    : Character := Space) return String\n    is\n       subtype Result_Type is String (1 .. Count);\n \n@@ -232,9 +251,9 @@ package body Ada.Strings.Fixed is\n \n    procedure Head\n      (Source  : in out String;\n-      Count   : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Character := Space)\n+      Count   : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Character := Space)\n    is\n    begin\n       Move (Source  => Head (Source, Count, Pad),\n@@ -249,10 +268,9 @@ package body Ada.Strings.Fixed is\n    ------------\n \n    function Insert\n-     (Source   : in String;\n-      Before   : in Positive;\n-      New_Item : in String)\n-      return     String\n+     (Source   : String;\n+      Before   : Positive;\n+      New_Item : String) return String\n    is\n       Result : String (1 .. Source'Length + New_Item'Length);\n       Front  : constant Integer := Before - Source'First;\n@@ -274,9 +292,9 @@ package body Ada.Strings.Fixed is\n \n    procedure Insert\n      (Source   : in out String;\n-      Before   : in Positive;\n-      New_Item : in String;\n-      Drop     : in Truncation := Error)\n+      Before   : Positive;\n+      New_Item : String;\n+      Drop     : Truncation := Error)\n    is\n    begin\n       Move (Source => Insert (Source, Before, New_Item),\n@@ -289,11 +307,11 @@ package body Ada.Strings.Fixed is\n    ----------\n \n    procedure Move\n-     (Source  : in  String;\n+     (Source  : String;\n       Target  : out String;\n-      Drop    : in  Truncation := Error;\n-      Justify : in  Alignment  := Left;\n-      Pad     : in  Character  := Space)\n+      Drop    : Truncation := Error;\n+      Justify : Alignment  := Left;\n+      Pad     : Character  := Space)\n    is\n       Sfirst  : constant Integer := Source'First;\n       Slast   : constant Integer := Source'Last;\n@@ -398,10 +416,9 @@ package body Ada.Strings.Fixed is\n    ---------------\n \n    function Overwrite\n-     (Source   : in String;\n-      Position : in Positive;\n-      New_Item : in String)\n-      return     String\n+     (Source   : String;\n+      Position : Positive;\n+      New_Item : String) return String\n    is\n    begin\n       if Position not in Source'First .. Source'Last + 1 then\n@@ -430,9 +447,9 @@ package body Ada.Strings.Fixed is\n \n    procedure Overwrite\n      (Source   : in out String;\n-      Position : in Positive;\n-      New_Item : in String;\n-      Drop     : in Truncation := Right)\n+      Position : Positive;\n+      New_Item : String;\n+      Drop     : Truncation := Right)\n    is\n    begin\n       Move (Source => Overwrite (Source, Position, New_Item),\n@@ -445,11 +462,10 @@ package body Ada.Strings.Fixed is\n    -------------------\n \n    function Replace_Slice\n-     (Source   : in String;\n-      Low      : in Positive;\n-      High     : in Natural;\n-      By       : in String)\n-      return     String\n+     (Source : String;\n+      Low    : Positive;\n+      High   : Natural;\n+      By     : String) return String\n    is\n    begin\n       if Low > Source'Last + 1 or High < Source'First - 1 then\n@@ -490,12 +506,12 @@ package body Ada.Strings.Fixed is\n \n    procedure Replace_Slice\n      (Source   : in out String;\n-      Low      : in Positive;\n-      High     : in Natural;\n-      By       : in String;\n-      Drop     : in Truncation := Error;\n-      Justify  : in Alignment  := Left;\n-      Pad      : in Character  := Space)\n+      Low      : Positive;\n+      High     : Natural;\n+      By       : String;\n+      Drop     : Truncation := Error;\n+      Justify  : Alignment  := Left;\n+      Pad      : Character  := Space)\n    is\n    begin\n       Move (Replace_Slice (Source, Low, High, By), Source, Drop, Justify, Pad);\n@@ -506,10 +522,9 @@ package body Ada.Strings.Fixed is\n    ----------\n \n    function Tail\n-     (Source : in String;\n-      Count  : in Natural;\n-      Pad    : in Character := Space)\n-      return   String\n+     (Source : String;\n+      Count  : Natural;\n+      Pad    : Character := Space) return String\n    is\n       subtype Result_Type is String (1 .. Count);\n \n@@ -536,9 +551,9 @@ package body Ada.Strings.Fixed is\n \n    procedure Tail\n      (Source  : in out String;\n-      Count   : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Character := Space)\n+      Count   : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Character := Space)\n    is\n    begin\n       Move (Source  => Tail (Source, Count, Pad),\n@@ -553,9 +568,8 @@ package body Ada.Strings.Fixed is\n    ---------------\n \n    function Translate\n-     (Source  : in String;\n-      Mapping : in Maps.Character_Mapping)\n-      return    String\n+     (Source  : String;\n+      Mapping : Maps.Character_Mapping) return String\n    is\n       Result : String (1 .. Source'Length);\n \n@@ -569,7 +583,7 @@ package body Ada.Strings.Fixed is\n \n    procedure Translate\n      (Source  : in out String;\n-      Mapping : in Maps.Character_Mapping)\n+      Mapping : Maps.Character_Mapping)\n    is\n    begin\n       for J in Source'Range loop\n@@ -578,9 +592,8 @@ package body Ada.Strings.Fixed is\n    end Translate;\n \n    function Translate\n-     (Source  : in String;\n-      Mapping : in Maps.Character_Mapping_Function)\n-      return    String\n+     (Source  : String;\n+      Mapping : Maps.Character_Mapping_Function) return String\n    is\n       Result : String (1 .. Source'Length);\n       pragma Unsuppress (Access_Check);\n@@ -595,7 +608,7 @@ package body Ada.Strings.Fixed is\n \n    procedure Translate\n      (Source  : in out String;\n-      Mapping : in Maps.Character_Mapping_Function)\n+      Mapping : Maps.Character_Mapping_Function)\n    is\n       pragma Unsuppress (Access_Check);\n    begin\n@@ -609,9 +622,8 @@ package body Ada.Strings.Fixed is\n    ----------\n \n    function Trim\n-     (Source : in String;\n-      Side   : in Trim_End)\n-      return   String\n+     (Source : String;\n+      Side   : Trim_End) return String\n    is\n       Low, High : Integer;\n \n@@ -658,9 +670,9 @@ package body Ada.Strings.Fixed is\n \n    procedure Trim\n      (Source  : in out String;\n-      Side    : in Trim_End;\n-      Justify : in Alignment := Left;\n-      Pad     : in Character := Space)\n+      Side    : Trim_End;\n+      Justify : Alignment := Left;\n+      Pad     : Character := Space)\n    is\n    begin\n       Move (Trim (Source, Side),\n@@ -670,10 +682,9 @@ package body Ada.Strings.Fixed is\n    end Trim;\n \n    function Trim\n-     (Source : in String;\n-      Left   : in Maps.Character_Set;\n-      Right  : in Maps.Character_Set)\n-      return   String\n+     (Source : String;\n+      Left   : Maps.Character_Set;\n+      Right  : Maps.Character_Set) return String\n    is\n       High, Low : Integer;\n \n@@ -705,10 +716,10 @@ package body Ada.Strings.Fixed is\n \n    procedure Trim\n      (Source  : in out String;\n-      Left    : in Maps.Character_Set;\n-      Right   : in Maps.Character_Set;\n-      Justify : in Alignment := Strings.Left;\n-      Pad     : in Character := Space)\n+      Left    : Maps.Character_Set;\n+      Right   : Maps.Character_Set;\n+      Justify : Alignment := Strings.Left;\n+      Pad     : Character := Space)\n    is\n    begin\n       Move (Source  => Trim (Source, Left, Right),"}, {"sha": "bf1a496828de0ea271f1267a085ec276483712a4", "filename": "gcc/ada/a-strfix.ads", "status": "modified", "additions": 126, "deletions": 137, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strfix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strfix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strfix.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,32 +6,10 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-1997 Free Software Foundation, Inc.          --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+-- This specification is adapted from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n --                                                                          --\n ------------------------------------------------------------------------------\n \n@@ -46,63 +24,86 @@ pragma Preelaborate (Fixed);\n    --------------------------------------------------------------\n \n    procedure Move\n-     (Source  : in  String;\n+     (Source  : String;\n       Target  : out String;\n-      Drop    : in  Truncation := Error;\n-      Justify : in  Alignment  := Left;\n-      Pad     : in  Character  := Space);\n+      Drop    : Truncation := Error;\n+      Justify : Alignment  := Left;\n+      Pad     : Character  := Space);\n \n    ------------------------\n    -- Search Subprograms --\n    ------------------------\n \n    function Index\n-     (Source   : in String;\n-      Pattern  : in String;\n-      Going    : in Direction := Forward;\n-      Mapping  : in Maps.Character_Mapping := Maps.Identity)\n-      return     Natural;\n+     (Source  : String;\n+      Pattern : String;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural;\n+\n+   function Index\n+     (Source  : String;\n+      Pattern : String;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural;\n \n    function Index\n-     (Source   : in String;\n-      Pattern  : in String;\n-      Going    : in Direction := Forward;\n-      Mapping  : in Maps.Character_Mapping_Function)\n-      return     Natural;\n+     (Source : String;\n+      Set    : Maps.Character_Set;\n+      Test   : Membership := Inside;\n+      Going  : Direction  := Forward) return Natural;\n \n    function Index\n-     (Source : in String;\n-      Set    : in Maps.Character_Set;\n-      Test   : in Membership := Inside;\n-      Going  : in Direction  := Forward)\n-      return   Natural;\n+     (Source  : String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural;\n+   pragma Ada_05 (Index);\n+\n+   function Index\n+     (Source  : String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural;\n+   pragma Ada_05 (Index);\n+\n+   function Index\n+     (Source  : String;\n+      Set     : Maps.Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural;\n+   pragma Ada_05 (Index);\n+\n+   function Index_Non_Blank\n+     (Source : String;\n+      Going  : Direction := Forward) return Natural;\n \n    function Index_Non_Blank\n-     (Source : in String;\n-      Going  : in Direction := Forward)\n-      return   Natural;\n+     (Source : String;\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural;\n+   pragma Ada_05 (Index_Non_Blank);\n \n    function Count\n-     (Source   : in String;\n-      Pattern  : in String;\n-      Mapping  : in Maps.Character_Mapping := Maps.Identity)\n-      return     Natural;\n+     (Source  : String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural;\n \n    function Count\n-     (Source   : in String;\n-      Pattern  : in String;\n-      Mapping  : in Maps.Character_Mapping_Function)\n-      return     Natural;\n+     (Source  : String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping_Function) return Natural;\n \n    function Count\n-     (Source   : in String;\n-      Set      : in Maps.Character_Set)\n-      return     Natural;\n+     (Source : String;\n+      Set    : Maps.Character_Set) return Natural;\n \n    procedure Find_Token\n-     (Source : in String;\n-      Set    : in Maps.Character_Set;\n-      Test   : in Membership;\n+     (Source : String;\n+      Set    : Maps.Character_Set;\n+      Test   : Membership;\n       First  : out Positive;\n       Last   : out Natural);\n \n@@ -111,144 +112,132 @@ pragma Preelaborate (Fixed);\n    ------------------------------------\n \n    function Translate\n-     (Source  : in String;\n-      Mapping : in Maps.Character_Mapping)\n-      return    String;\n+     (Source  : String;\n+      Mapping : Maps.Character_Mapping) return String;\n \n    procedure Translate\n      (Source  : in out String;\n-      Mapping : in Maps.Character_Mapping);\n+      Mapping : Maps.Character_Mapping);\n \n    function Translate\n-     (Source  : in String;\n-      Mapping : in Maps.Character_Mapping_Function)\n-      return    String;\n+     (Source  : String;\n+      Mapping : Maps.Character_Mapping_Function) return String;\n \n    procedure Translate\n      (Source  : in out String;\n-      Mapping : in Maps.Character_Mapping_Function);\n+      Mapping : Maps.Character_Mapping_Function);\n \n    ---------------------------------------\n    -- String Transformation Subprograms --\n    ---------------------------------------\n \n    function Replace_Slice\n-     (Source : in String;\n-      Low    : in Positive;\n-      High   : in Natural;\n-      By     : in String)\n-      return   String;\n+     (Source : String;\n+      Low    : Positive;\n+      High   : Natural;\n+      By     : String) return String;\n \n    procedure Replace_Slice\n      (Source  : in out String;\n-      Low     : in Positive;\n-      High    : in Natural;\n-      By      : in String;\n-      Drop    : in Truncation := Error;\n-      Justify : in Alignment  := Left;\n-      Pad     : in Character  := Space);\n+      Low     : Positive;\n+      High    : Natural;\n+      By      : String;\n+      Drop    : Truncation := Error;\n+      Justify : Alignment  := Left;\n+      Pad     : Character  := Space);\n \n    function Insert\n-     (Source   : in String;\n-      Before   : in Positive;\n-      New_Item : in String)\n-      return     String;\n+     (Source   : String;\n+      Before   : Positive;\n+      New_Item : String) return String;\n \n    procedure Insert\n      (Source   : in out String;\n-      Before   : in Positive;\n-      New_Item : in String;\n-      Drop     : in Truncation := Error);\n+      Before   : Positive;\n+      New_Item : String;\n+      Drop     : Truncation := Error);\n \n    function Overwrite\n-     (Source   : in String;\n-      Position : in Positive;\n-      New_Item : in String)\n-      return     String;\n+     (Source   : String;\n+      Position : Positive;\n+      New_Item : String) return String;\n \n    procedure Overwrite\n      (Source   : in out String;\n-      Position : in Positive;\n-      New_Item : in String;\n-      Drop     : in Truncation := Right);\n+      Position : Positive;\n+      New_Item : String;\n+      Drop     : Truncation := Right);\n \n    function Delete\n-     (Source  : in String;\n-      From    : in Positive;\n-      Through : in Natural)\n-      return    String;\n+     (Source  : String;\n+      From    : Positive;\n+      Through : Natural) return String;\n \n    procedure Delete\n      (Source  : in out String;\n-      From    : in Positive;\n-      Through : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Character := Space);\n+      From    : Positive;\n+      Through : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Character := Space);\n \n    ---------------------------------\n    -- String Selector Subprograms --\n    ---------------------------------\n \n    function Trim\n-     (Source : in String;\n-      Side   : in Trim_End)\n-      return   String;\n+     (Source : String;\n+      Side   : Trim_End) return String;\n \n    procedure Trim\n      (Source  : in out String;\n-      Side    : in Trim_End;\n-      Justify : in Alignment := Left;\n-      Pad     : in Character := Space);\n+      Side    : Trim_End;\n+      Justify : Alignment := Left;\n+      Pad     : Character := Space);\n \n    function Trim\n-     (Source : in String;\n-      Left   : in Maps.Character_Set;\n-      Right  : in Maps.Character_Set)\n-      return   String;\n+     (Source : String;\n+      Left   : Maps.Character_Set;\n+      Right  : Maps.Character_Set) return String;\n \n    procedure Trim\n      (Source  : in out String;\n-      Left    : in Maps.Character_Set;\n-      Right   : in Maps.Character_Set;\n-      Justify : in Alignment := Strings.Left;\n-      Pad     : in Character := Space);\n+      Left    : Maps.Character_Set;\n+      Right   : Maps.Character_Set;\n+      Justify : Alignment := Strings.Left;\n+      Pad     : Character := Space);\n \n    function Head\n-     (Source : in String;\n-      Count  : in Natural;\n-      Pad    : in Character := Space)\n-      return   String;\n+     (Source : String;\n+      Count  : Natural;\n+      Pad    : Character := Space) return String;\n \n    procedure Head\n      (Source  : in out String;\n-      Count   : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Character := Space);\n+      Count   : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Character := Space);\n \n    function Tail\n-     (Source : in String;\n-      Count  : in Natural;\n-      Pad    : in Character := Space)\n-      return   String;\n+     (Source : String;\n+      Count  : Natural;\n+      Pad    : Character := Space) return String;\n \n    procedure Tail\n      (Source  : in out String;\n-      Count   : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Character := Space);\n+      Count   : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Character := Space);\n \n    ----------------------------------\n    -- String Constructor Functions --\n    ----------------------------------\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in Character)\n-      return  String;\n+     (Left  : Natural;\n+      Right : Character) return String;\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in String)\n-      return  String;\n+     (Left  : Natural;\n+      Right : String) return String;\n \n end Ada.Strings.Fixed;"}, {"sha": "c7201cfc985b1b6850f41b8a460641b57d6bddfc", "filename": "gcc/ada/a-strmap.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strmap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strmap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strmap.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "598b23488572567af30de3978efd63be6f0c0bf1", "filename": "gcc/ada/a-strmap.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strmap.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strmap.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strmap.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --"}, {"sha": "c4e4d5db54bc411acf0b4bf513fa85d69412977b", "filename": "gcc/ada/a-strsea.adb", "status": "modified", "additions": 108, "deletions": 8, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strsea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strsea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strsea.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -76,9 +76,9 @@ package body Ada.Strings.Search is\n    -----------\n \n    function Count\n-     (Source   : String;\n-      Pattern  : String;\n-      Mapping  : Maps.Character_Mapping := Maps.Identity) return Natural\n+     (Source  : String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n    is\n       N : Natural;\n       J : Natural;\n@@ -110,9 +110,9 @@ package body Ada.Strings.Search is\n    end Count;\n \n    function Count\n-     (Source   : String;\n-      Pattern  : String;\n-      Mapping  : Maps.Character_Mapping_Function) return Natural\n+     (Source  : String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping_Function) return Natural\n    is\n       Mapped_Source : String (Source'Range);\n       N             : Natural;\n@@ -280,7 +280,6 @@ package body Ada.Strings.Search is\n \n       declare\n          pragma Unsuppress (Access_Check);\n-\n       begin\n          for J in Source'Range loop\n             Mapped_Source (J) := Mapping.all (Source (J));\n@@ -348,6 +347,84 @@ package body Ada.Strings.Search is\n       return 0;\n    end Index;\n \n+   function Index\n+     (Source  : String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n+   is\n+   begin\n+      if Going = Forward then\n+         if From < Source'First then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index (Source (From .. Source'Last), Pattern, Forward, Mapping);\n+\n+      else\n+         if From > Source'Last then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index (Source (Source'First .. From), Pattern, Backward, Mapping);\n+      end if;\n+   end Index;\n+\n+   function Index\n+     (Source  : String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural\n+   is\n+   begin\n+      if Going = Forward then\n+         if From < Source'First then\n+            raise Index_Error;\n+         end if;\n+\n+         return Index\n+           (Source (From .. Source'Last), Pattern, Forward, Mapping);\n+\n+      else\n+         if From > Source'Last then\n+            raise Index_Error;\n+         end if;\n+\n+         return Index\n+           (Source (Source'First .. From), Pattern, Backward, Mapping);\n+      end if;\n+   end Index;\n+\n+   function Index\n+     (Source  : String;\n+      Set     : Maps.Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural\n+   is\n+   begin\n+      if Going = Forward then\n+         if From < Source'First then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index (Source (From .. Source'Last), Set, Test, Forward);\n+\n+      else\n+         if From > Source'Last then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index (Source (Source'First .. From), Set, Test, Backward);\n+      end if;\n+   end Index;\n+\n    ---------------------\n    -- Index_Non_Blank --\n    ---------------------\n@@ -375,7 +452,30 @@ package body Ada.Strings.Search is\n       --  Fall through if no match\n \n       return 0;\n+   end Index_Non_Blank;\n \n+   function Index_Non_Blank\n+     (Source : String;\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural\n+   is\n+   begin\n+      if Going = Forward then\n+         if From < Source'First then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index_Non_Blank (Source (From .. Source'Last), Forward);\n+\n+      else\n+         if From > Source'Last then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index_Non_Blank (Source (Source'First .. From), Backward);\n+      end if;\n    end Index_Non_Blank;\n \n end Ada.Strings.Search;"}, {"sha": "457b452f202c7b99a0f1db4b406fc6eea421fc8b", "filename": "gcc/ada/a-strsea.ads", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strsea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strsea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strsea.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,8 +61,34 @@ pragma Preelaborate (Search);\n       Test   : Membership := Inside;\n       Going  : Direction  := Forward) return Natural;\n \n+   function Index\n+     (Source  : String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural;\n+\n+   function Index\n+     (Source  : String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural;\n+\n+   function Index\n+     (Source  : String;\n+      Set     : Maps.Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural;\n+\n+   function Index_Non_Blank\n+     (Source : String;\n+      Going  : Direction := Forward) return Natural;\n+\n    function Index_Non_Blank\n      (Source : String;\n+      From   : Positive;\n       Going  : Direction := Forward) return Natural;\n \n    function Count"}, {"sha": "8a997b3cf418a3ab13676d03ed5812360675cda4", "filename": "gcc/ada/a-strunb.adb", "status": "modified", "additions": 184, "deletions": 122, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,16 +44,19 @@ package body Ada.Strings.Unbounded is\n       Chunk_Size : Natural);\n    pragma Inline (Realloc_For_Chunk);\n    --  Adjust the size allocated for the string. Add at least Chunk_Size so it\n-   --  is safe to add a string of this size at the end of the current\n-   --  content. The real size allocated for the string is Chunk_Size + x %\n-   --  of the current string size. This buffered handling makes the Append\n-   --  unbounded string routines very fast.\n+   --  is safe to add a string of this size at the end of the current content.\n+   --  The real size allocated for the string is Chunk_Size + x of the current\n+   --  string size. This buffered handling makes the Append unbounded string\n+   --  routines very fast.\n \n    ---------\n    -- \"&\" --\n    ---------\n \n-   function \"&\" (Left, Right : Unbounded_String) return Unbounded_String is\n+   function \"&\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Unbounded_String\n+   is\n       L_Length : constant Natural := Left.Last;\n       R_Length : constant Natural := Right.Last;\n       Result   : Unbounded_String;\n@@ -73,8 +76,7 @@ package body Ada.Strings.Unbounded is\n \n    function \"&\"\n      (Left  : Unbounded_String;\n-      Right : String)\n-      return  Unbounded_String\n+      Right : String) return Unbounded_String\n    is\n       L_Length : constant Natural := Left.Last;\n       Result   : Unbounded_String;\n@@ -92,8 +94,7 @@ package body Ada.Strings.Unbounded is\n \n    function \"&\"\n      (Left  : String;\n-      Right : Unbounded_String)\n-      return  Unbounded_String\n+      Right : Unbounded_String) return Unbounded_String\n    is\n       R_Length : constant Natural := Right.Last;\n       Result   : Unbounded_String;\n@@ -112,8 +113,7 @@ package body Ada.Strings.Unbounded is\n \n    function \"&\"\n      (Left  : Unbounded_String;\n-      Right : Character)\n-      return  Unbounded_String\n+      Right : Character) return Unbounded_String\n    is\n       Result : Unbounded_String;\n \n@@ -131,8 +131,7 @@ package body Ada.Strings.Unbounded is\n \n    function \"&\"\n      (Left  : Character;\n-      Right : Unbounded_String)\n-      return  Unbounded_String\n+      Right : Unbounded_String) return Unbounded_String\n    is\n       Result : Unbounded_String;\n \n@@ -152,8 +151,7 @@ package body Ada.Strings.Unbounded is\n \n    function \"*\"\n      (Left  : Natural;\n-      Right : Character)\n-      return  Unbounded_String\n+      Right : Character) return Unbounded_String\n    is\n       Result : Unbounded_String;\n \n@@ -170,8 +168,7 @@ package body Ada.Strings.Unbounded is\n \n    function \"*\"\n      (Left  : Natural;\n-      Right : String)\n-     return   Unbounded_String\n+      Right : String) return Unbounded_String\n    is\n       Len    : constant Natural := Right'Length;\n       K      : Positive;\n@@ -193,8 +190,7 @@ package body Ada.Strings.Unbounded is\n \n    function \"*\"\n      (Left  : Natural;\n-      Right : Unbounded_String)\n-      return  Unbounded_String\n+      Right : Unbounded_String) return Unbounded_String\n    is\n       Len    : constant Natural := Right.Last;\n       K      : Positive;\n@@ -219,25 +215,26 @@ package body Ada.Strings.Unbounded is\n    -- \"<\" --\n    ---------\n \n-   function \"<\" (Left, Right : Unbounded_String) return Boolean is\n+   function \"<\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean\n+   is\n    begin\n       return\n         Left.Reference (1 .. Left.Last) < Right.Reference (1 .. Right.Last);\n    end \"<\";\n \n    function \"<\"\n      (Left  : Unbounded_String;\n-      Right : String)\n-      return  Boolean\n+      Right : String) return Boolean\n    is\n    begin\n       return Left.Reference (1 .. Left.Last) < Right;\n    end \"<\";\n \n    function \"<\"\n      (Left  : String;\n-      Right : Unbounded_String)\n-      return  Boolean\n+      Right : Unbounded_String) return Boolean\n    is\n    begin\n       return Left < Right.Reference (1 .. Right.Last);\n@@ -247,25 +244,26 @@ package body Ada.Strings.Unbounded is\n    -- \"<=\" --\n    ----------\n \n-   function \"<=\" (Left, Right : Unbounded_String) return Boolean is\n+   function \"<=\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean\n+   is\n    begin\n       return\n         Left.Reference (1 .. Left.Last) <= Right.Reference (1 .. Right.Last);\n    end \"<=\";\n \n    function \"<=\"\n      (Left  : Unbounded_String;\n-      Right : String)\n-      return  Boolean\n+      Right : String) return Boolean\n    is\n    begin\n       return Left.Reference (1 .. Left.Last) <= Right;\n    end \"<=\";\n \n    function \"<=\"\n      (Left  : String;\n-      Right : Unbounded_String)\n-      return  Boolean\n+      Right : Unbounded_String) return Boolean\n    is\n    begin\n       return Left <= Right.Reference (1 .. Right.Last);\n@@ -275,25 +273,26 @@ package body Ada.Strings.Unbounded is\n    -- \"=\" --\n    ---------\n \n-   function \"=\" (Left, Right : Unbounded_String) return Boolean is\n+   function \"=\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean\n+   is\n    begin\n       return\n         Left.Reference (1 .. Left.Last) = Right.Reference (1 .. Right.Last);\n    end \"=\";\n \n    function \"=\"\n      (Left  : Unbounded_String;\n-      Right : String)\n-      return  Boolean\n+      Right : String) return Boolean\n    is\n    begin\n       return Left.Reference (1 .. Left.Last) = Right;\n    end \"=\";\n \n    function \"=\"\n      (Left  : String;\n-      Right : Unbounded_String)\n-      return  Boolean\n+      Right : Unbounded_String) return Boolean\n    is\n    begin\n       return Left = Right.Reference (1 .. Right.Last);\n@@ -303,25 +302,26 @@ package body Ada.Strings.Unbounded is\n    -- \">\" --\n    ---------\n \n-   function \">\"  (Left, Right : Unbounded_String) return Boolean is\n+   function \">\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean\n+   is\n    begin\n       return\n         Left.Reference (1 .. Left.Last) > Right.Reference (1 .. Right.Last);\n    end \">\";\n \n    function \">\"\n      (Left  : Unbounded_String;\n-      Right : String)\n-      return  Boolean\n+      Right : String) return Boolean\n    is\n    begin\n       return Left.Reference (1 .. Left.Last) > Right;\n    end \">\";\n \n    function \">\"\n      (Left  : String;\n-      Right : Unbounded_String)\n-      return  Boolean\n+      Right : Unbounded_String) return Boolean\n    is\n    begin\n       return Left > Right.Reference (1 .. Right.Last);\n@@ -331,25 +331,26 @@ package body Ada.Strings.Unbounded is\n    -- \">=\" --\n    ----------\n \n-   function \">=\" (Left, Right : Unbounded_String) return Boolean is\n+   function \">=\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean\n+   is\n    begin\n       return\n         Left.Reference (1 .. Left.Last) >= Right.Reference (1 .. Right.Last);\n    end \">=\";\n \n    function \">=\"\n      (Left  : Unbounded_String;\n-      Right : String)\n-      return  Boolean\n+      Right : String) return Boolean\n    is\n    begin\n       return Left.Reference (1 .. Left.Last) >= Right;\n    end \">=\";\n \n    function \">=\"\n      (Left  : String;\n-      Right : Unbounded_String)\n-      return  Boolean\n+      Right : Unbounded_String) return Boolean\n    is\n    begin\n       return Left >= Right.Reference (1 .. Right.Last);\n@@ -362,9 +363,8 @@ package body Ada.Strings.Unbounded is\n    procedure Adjust (Object : in out Unbounded_String) is\n    begin\n       --  Copy string, except we do not copy the statically allocated null\n-      --  string, since it can never be deallocated.\n-      --  Note that we do not copy extra string room here to avoid dragging\n-      --  unused allocated memory.\n+      --  string, since it can never be deallocated. Note that we do not copy\n+      --  extra string room here to avoid dragging unused allocated memory.\n \n       if Object.Reference /= Null_String'Access then\n          Object.Reference := new String'(Object.Reference (1 .. Object.Last));\n@@ -412,31 +412,28 @@ package body Ada.Strings.Unbounded is\n    -----------\n \n    function Count\n-     (Source   : Unbounded_String;\n-      Pattern  : String;\n-      Mapping  : Maps.Character_Mapping := Maps.Identity)\n-      return     Natural\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n    is\n    begin\n       return\n         Search.Count (Source.Reference (1 .. Source.Last), Pattern, Mapping);\n    end Count;\n \n    function Count\n-     (Source   : Unbounded_String;\n-      Pattern  : String;\n-      Mapping  : Maps.Character_Mapping_Function)\n-      return     Natural\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping_Function) return Natural\n    is\n    begin\n       return\n         Search.Count (Source.Reference (1 .. Source.Last), Pattern, Mapping);\n    end Count;\n \n    function Count\n-     (Source   : Unbounded_String;\n-      Set      : Maps.Character_Set)\n-      return     Natural\n+     (Source : Unbounded_String;\n+      Set    : Maps.Character_Set) return Natural\n    is\n    begin\n       return Search.Count (Source.Reference (1 .. Source.Last), Set);\n@@ -449,8 +446,7 @@ package body Ada.Strings.Unbounded is\n    function Delete\n      (Source  : Unbounded_String;\n       From    : Positive;\n-      Through : Natural)\n-      return    Unbounded_String\n+      Through : Natural) return Unbounded_String\n    is\n    begin\n       return\n@@ -488,8 +484,7 @@ package body Ada.Strings.Unbounded is\n \n    function Element\n      (Source : Unbounded_String;\n-      Index  : Positive)\n-      return   Character\n+      Index  : Positive) return Character\n    is\n    begin\n       if Index <= Source.Last then\n@@ -556,8 +551,7 @@ package body Ada.Strings.Unbounded is\n    function Head\n      (Source : Unbounded_String;\n       Count  : Natural;\n-      Pad    : Character := Space)\n-      return   Unbounded_String\n+      Pad    : Character := Space) return Unbounded_String\n    is\n    begin\n       return To_Unbounded_String\n@@ -570,7 +564,6 @@ package body Ada.Strings.Unbounded is\n       Pad    : Character := Space)\n    is\n       Old : String_Access := Source.Reference;\n-\n    begin\n       Source.Reference :=\n         new String'(Fixed.Head (Source.Reference (1 .. Source.Last),\n@@ -584,23 +577,21 @@ package body Ada.Strings.Unbounded is\n    -----------\n \n    function Index\n-     (Source   : Unbounded_String;\n-      Pattern  : String;\n-      Going    : Strings.Direction := Strings.Forward;\n-      Mapping  : Maps.Character_Mapping := Maps.Identity)\n-      return     Natural\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      Going   : Strings.Direction := Strings.Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n    is\n    begin\n       return Search.Index\n         (Source.Reference (1 .. Source.Last), Pattern, Going, Mapping);\n    end Index;\n \n    function Index\n-     (Source   : Unbounded_String;\n-      Pattern  : String;\n-      Going    : Direction := Forward;\n-      Mapping  : Maps.Character_Mapping_Function)\n-      return     Natural\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural\n    is\n    begin\n       return Search.Index\n@@ -611,22 +602,69 @@ package body Ada.Strings.Unbounded is\n      (Source : Unbounded_String;\n       Set    : Maps.Character_Set;\n       Test   : Strings.Membership := Strings.Inside;\n-      Going  : Strings.Direction  := Strings.Forward)\n-      return   Natural\n+      Going  : Strings.Direction  := Strings.Forward) return Natural\n    is\n    begin\n       return Search.Index\n         (Source.Reference (1 .. Source.Last), Set, Test, Going);\n    end Index;\n \n+   function Index\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n+   is\n+   begin\n+      return Search.Index\n+        (Source.Reference (1 .. Source.Last), Pattern, From, Going, Mapping);\n+   end Index;\n+\n+   function Index\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural\n+   is\n+   begin\n+      return Search.Index\n+        (Source.Reference (1 .. Source.Last), Pattern, From, Going, Mapping);\n+   end Index;\n+\n+\n+   function Index\n+     (Source  : Unbounded_String;\n+      Set     : Maps.Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural\n+   is\n+   begin\n+      return Search.Index\n+        (Source.Reference (1 .. Source.Last), Set, From, Test, Going);\n+   end Index;\n+\n+   function Index_Non_Blank\n+     (Source : Unbounded_String;\n+      Going  : Strings.Direction := Strings.Forward) return Natural\n+   is\n+   begin\n+      return\n+        Search.Index_Non_Blank\n+          (Source.Reference (1 .. Source.Last), Going);\n+   end Index_Non_Blank;\n+\n    function Index_Non_Blank\n      (Source : Unbounded_String;\n-      Going  : Strings.Direction := Strings.Forward)\n-      return   Natural\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural\n    is\n    begin\n       return\n-        Search.Index_Non_Blank (Source.Reference (1 .. Source.Last), Going);\n+        Search.Index_Non_Blank\n+          (Source.Reference (1 .. Source.Last), From, Going);\n    end Index_Non_Blank;\n \n    ----------------\n@@ -646,8 +684,7 @@ package body Ada.Strings.Unbounded is\n    function Insert\n      (Source   : Unbounded_String;\n       Before   : Positive;\n-      New_Item : String)\n-      return     Unbounded_String\n+      New_Item : String) return Unbounded_String\n    is\n    begin\n       return To_Unbounded_String\n@@ -688,11 +725,10 @@ package body Ada.Strings.Unbounded is\n    ---------------\n \n    function Overwrite\n-     (Source    : Unbounded_String;\n-      Position  : Positive;\n-      New_Item  : String)\n-      return      Unbounded_String is\n-\n+     (Source   : Unbounded_String;\n+      Position : Positive;\n+      New_Item : String) return Unbounded_String\n+   is\n    begin\n       return To_Unbounded_String\n         (Fixed.Overwrite\n@@ -705,15 +741,12 @@ package body Ada.Strings.Unbounded is\n       New_Item  : String)\n    is\n       NL : constant Natural := New_Item'Length;\n-\n    begin\n       if Position <= Source.Last - NL + 1 then\n          Source.Reference (Position .. Position + NL - 1) := New_Item;\n-\n       else\n          declare\n             Old : String_Access := Source.Reference;\n-\n          begin\n             Source.Reference := new String'\n               (Fixed.Overwrite\n@@ -741,7 +774,6 @@ package body Ada.Strings.Unbounded is\n             Alloc_Chunk_Size : constant Positive :=\n                                  Chunk_Size + (S_Length / Growth_Factor);\n             Tmp : String_Access;\n-\n          begin\n             Tmp := new String (1 .. S_Length + Alloc_Chunk_Size);\n             Tmp (1 .. Source.Last) := Source.Reference (1 .. Source.Last);\n@@ -773,11 +805,10 @@ package body Ada.Strings.Unbounded is\n    -------------------\n \n    function Replace_Slice\n-     (Source   : Unbounded_String;\n-      Low      : Positive;\n-      High     : Natural;\n-      By       : String)\n-      return     Unbounded_String\n+     (Source : Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural;\n+      By     : String) return Unbounded_String\n    is\n    begin\n       return To_Unbounded_String\n@@ -786,13 +817,12 @@ package body Ada.Strings.Unbounded is\n    end Replace_Slice;\n \n    procedure Replace_Slice\n-     (Source   : in out Unbounded_String;\n-      Low      : Positive;\n-      High     : Natural;\n-      By       : String)\n+     (Source : in out Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural;\n+      By     : String)\n    is\n       Old : String_Access := Source.Reference;\n-\n    begin\n       Source.Reference := new String'\n         (Fixed.Replace_Slice\n@@ -801,15 +831,28 @@ package body Ada.Strings.Unbounded is\n       Free (Old);\n    end Replace_Slice;\n \n+   --------------------------\n+   -- Set_Unbounded_String --\n+   --------------------------\n+\n+   procedure Set_Unbounded_String\n+     (Target : out Unbounded_String;\n+      Source : String)\n+   is\n+   begin\n+      Target.Last          := Source'Length;\n+      Target.Reference     := new String (1 .. Source'Length);\n+      Target.Reference.all := Source;\n+   end Set_Unbounded_String;\n+\n    -----------\n    -- Slice --\n    -----------\n \n    function Slice\n      (Source : Unbounded_String;\n       Low    : Positive;\n-      High   : Natural)\n-      return   String\n+      High   : Natural) return String\n    is\n    begin\n       --  Note: test of High > Length is in accordance with AI95-00128\n@@ -828,9 +871,7 @@ package body Ada.Strings.Unbounded is\n    function Tail\n      (Source : Unbounded_String;\n       Count  : Natural;\n-      Pad    : Character := Space)\n-      return   Unbounded_String is\n-\n+      Pad    : Character := Space) return Unbounded_String is\n    begin\n       return To_Unbounded_String\n         (Fixed.Tail (Source.Reference (1 .. Source.Last), Count, Pad));\n@@ -842,7 +883,6 @@ package body Ada.Strings.Unbounded is\n       Pad    : Character := Space)\n    is\n       Old : String_Access := Source.Reference;\n-\n    begin\n       Source.Reference := new String'\n         (Fixed.Tail (Source.Reference (1 .. Source.Last), Count, Pad));\n@@ -865,7 +905,6 @@ package body Ada.Strings.Unbounded is\n \n    function To_Unbounded_String (Source : String) return Unbounded_String is\n       Result : Unbounded_String;\n-\n    begin\n       Result.Last          := Source'Length;\n       Result.Reference     := new String (1 .. Source'Length);\n@@ -874,11 +913,9 @@ package body Ada.Strings.Unbounded is\n    end To_Unbounded_String;\n \n    function To_Unbounded_String\n-     (Length : Natural)\n-      return   Unbounded_String\n+     (Length : Natural) return Unbounded_String\n    is\n       Result : Unbounded_String;\n-\n    begin\n       Result.Last      := Length;\n       Result.Reference := new String (1 .. Length);\n@@ -891,8 +928,7 @@ package body Ada.Strings.Unbounded is\n \n    function Translate\n      (Source  : Unbounded_String;\n-      Mapping : Maps.Character_Mapping)\n-      return    Unbounded_String\n+      Mapping : Maps.Character_Mapping) return Unbounded_String\n    is\n    begin\n       return To_Unbounded_String\n@@ -909,8 +945,7 @@ package body Ada.Strings.Unbounded is\n \n    function Translate\n      (Source  : Unbounded_String;\n-      Mapping : Maps.Character_Mapping_Function)\n-      return    Unbounded_String\n+      Mapping : Maps.Character_Mapping_Function) return Unbounded_String\n    is\n    begin\n       return To_Unbounded_String\n@@ -931,8 +966,7 @@ package body Ada.Strings.Unbounded is\n \n    function Trim\n      (Source : Unbounded_String;\n-      Side   : Trim_End)\n-      return   Unbounded_String\n+      Side   : Trim_End) return Unbounded_String\n    is\n    begin\n       return To_Unbounded_String\n@@ -944,7 +978,6 @@ package body Ada.Strings.Unbounded is\n       Side   : Trim_End)\n    is\n       Old : String_Access := Source.Reference;\n-\n    begin\n       Source.Reference := new String'\n         (Fixed.Trim (Source.Reference (1 .. Source.Last), Side));\n@@ -955,8 +988,7 @@ package body Ada.Strings.Unbounded is\n    function Trim\n      (Source : Unbounded_String;\n       Left   : Maps.Character_Set;\n-      Right  : Maps.Character_Set)\n-      return   Unbounded_String\n+      Right  : Maps.Character_Set) return Unbounded_String\n    is\n    begin\n       return To_Unbounded_String\n@@ -969,12 +1001,42 @@ package body Ada.Strings.Unbounded is\n       Right  : Maps.Character_Set)\n    is\n       Old : String_Access := Source.Reference;\n-\n    begin\n       Source.Reference := new String'\n         (Fixed.Trim (Source.Reference (1 .. Source.Last), Left, Right));\n       Source.Last      := Source.Reference'Length;\n       Free (Old);\n    end Trim;\n \n+   ---------------------\n+   -- Unbounded_Slice --\n+   ---------------------\n+\n+   function Unbounded_Slice\n+     (Source : Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural) return Unbounded_String\n+   is\n+   begin\n+      if Low > Source.Last + 1 or else High > Source.Last then\n+         raise Index_Error;\n+      else\n+         return To_Unbounded_String (Source.Reference.all (Low .. High));\n+      end if;\n+   end Unbounded_Slice;\n+\n+   procedure Unbounded_Slice\n+     (Source : Unbounded_String;\n+      Target : out Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural)\n+   is\n+   begin\n+      if Low > Source.Last + 1 or else High > Source.Last then\n+         raise Index_Error;\n+      else\n+         Target := To_Unbounded_String (Source.Reference.all (Low .. High));\n+      end if;\n+   end Unbounded_Slice;\n+\n end Ada.Strings.Unbounded;"}, {"sha": "c974b879e27110a7b7cc73ed817e5f480c87f3a8", "filename": "gcc/ada/a-strunb.ads", "status": "modified", "additions": 187, "deletions": 160, "changes": 347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strunb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-strunb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -55,172 +55,212 @@ pragma Preelaborate (Unbounded);\n    -- Conversion, Concatenation, and Selection Functions --\n    --------------------------------------------------------\n \n-   function To_Unbounded_String (Source : String)     return Unbounded_String;\n-   function To_Unbounded_String (Length : in Natural) return Unbounded_String;\n+   function To_Unbounded_String\n+     (Source : String)  return Unbounded_String;\n+\n+   function To_Unbounded_String\n+     (Length : Natural) return Unbounded_String;\n \n    function To_String (Source : Unbounded_String) return String;\n \n+   procedure Set_Unbounded_String\n+     (Target : out Unbounded_String;\n+      Source : String);\n+   pragma Ada_05 (Set_Unbounded_String);\n+\n    procedure Append\n      (Source   : in out Unbounded_String;\n-      New_Item : in Unbounded_String);\n+      New_Item : Unbounded_String);\n \n    procedure Append\n      (Source   : in out Unbounded_String;\n-      New_Item : in String);\n+      New_Item : String);\n \n    procedure Append\n      (Source   : in out Unbounded_String;\n-      New_Item : in Character);\n+      New_Item : Character);\n \n-   function \"&\" (Left, Right : Unbounded_String) return Unbounded_String;\n+   function \"&\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Unbounded_String;\n \n    function \"&\"\n-     (Left  : in Unbounded_String;\n-      Right : in String)\n-      return  Unbounded_String;\n+     (Left  : Unbounded_String;\n+      Right : String) return Unbounded_String;\n \n    function \"&\"\n-     (Left  : in String;\n-      Right : in Unbounded_String)\n-      return  Unbounded_String;\n+     (Left  : String;\n+      Right : Unbounded_String) return Unbounded_String;\n \n    function \"&\"\n-     (Left  : in Unbounded_String;\n-      Right : in Character)\n-      return  Unbounded_String;\n+     (Left  : Unbounded_String;\n+      Right : Character) return Unbounded_String;\n \n    function \"&\"\n-     (Left  : in Character;\n-      Right : in Unbounded_String)\n-      return  Unbounded_String;\n+     (Left  : Character;\n+      Right : Unbounded_String) return Unbounded_String;\n \n    function Element\n-     (Source : in Unbounded_String;\n-      Index  : in Positive)\n-      return   Character;\n+     (Source : Unbounded_String;\n+      Index  : Positive) return Character;\n \n    procedure Replace_Element\n      (Source : in out Unbounded_String;\n-      Index  : in Positive;\n+      Index  : Positive;\n       By     : Character);\n \n    function Slice\n-     (Source : in Unbounded_String;\n-      Low    : in Positive;\n-      High   : in Natural)\n-      return   String;\n+     (Source : Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural) return String;\n+\n+   function Unbounded_Slice\n+     (Source : Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural) return Unbounded_String;\n+   pragma Ada_05 (Unbounded_Slice);\n+\n+   procedure Unbounded_Slice\n+     (Source : Unbounded_String;\n+      Target : out Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural);\n+   pragma Ada_05 (Unbounded_Slice);\n \n-   function \"=\" (Left, Right : in Unbounded_String) return Boolean;\n+   function \"=\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean;\n \n    function \"=\"\n-     (Left  : in Unbounded_String;\n-      Right : in String)\n-      return  Boolean;\n+     (Left  : Unbounded_String;\n+      Right : String) return Boolean;\n \n    function \"=\"\n-     (Left  : in String;\n-      Right : in Unbounded_String)\n-      return  Boolean;\n+     (Left  : String;\n+      Right : Unbounded_String) return Boolean;\n \n-   function \"<\" (Left, Right : in Unbounded_String) return Boolean;\n+   function \"<\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean;\n \n    function \"<\"\n-     (Left  : in Unbounded_String;\n-      Right : in String)\n-      return  Boolean;\n+     (Left  : Unbounded_String;\n+      Right : String) return Boolean;\n \n    function \"<\"\n-     (Left  : in String;\n-      Right : in Unbounded_String)\n-      return  Boolean;\n+     (Left  : String;\n+      Right : Unbounded_String) return Boolean;\n \n-   function \"<=\" (Left, Right : in Unbounded_String) return Boolean;\n+   function \"<=\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean;\n \n    function \"<=\"\n-     (Left  : in Unbounded_String;\n-      Right : in String)\n-      return  Boolean;\n+     (Left  : Unbounded_String;\n+      Right : String) return Boolean;\n \n    function \"<=\"\n-     (Left  : in String;\n-      Right : in Unbounded_String)\n-      return  Boolean;\n+     (Left  : String;\n+      Right : Unbounded_String) return Boolean;\n \n-   function \">\" (Left, Right : in Unbounded_String) return Boolean;\n+   function \">\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean;\n \n    function \">\"\n-     (Left  : in Unbounded_String;\n-      Right : in String)\n-      return  Boolean;\n+     (Left  : Unbounded_String;\n+      Right : String) return Boolean;\n \n    function \">\"\n-     (Left  : in String;\n-      Right : in Unbounded_String)\n-      return  Boolean;\n+     (Left  : String;\n+      Right : Unbounded_String) return Boolean;\n \n-   function \">=\" (Left, Right : in Unbounded_String) return Boolean;\n+   function \">=\"\n+     (Left  : Unbounded_String;\n+      Right : Unbounded_String) return Boolean;\n \n    function \">=\"\n-     (Left  : in Unbounded_String;\n-      Right : in String)\n-      return  Boolean;\n+     (Left  : Unbounded_String;\n+      Right : String) return Boolean;\n \n    function \">=\"\n-     (Left  : in String;\n-      Right : in Unbounded_String)\n-      return  Boolean;\n+     (Left  : String;\n+      Right : Unbounded_String) return Boolean;\n \n    ------------------------\n    -- Search Subprograms --\n    ------------------------\n \n    function Index\n-     (Source   : in Unbounded_String;\n-      Pattern  : in String;\n-      Going    : in Direction := Forward;\n-      Mapping  : in Maps.Character_Mapping := Maps.Identity)\n-      return     Natural;\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural;\n+\n+   function Index\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural;\n \n    function Index\n-     (Source   : in Unbounded_String;\n-      Pattern  : in String;\n-      Going    : in Direction := Forward;\n-      Mapping  : in Maps.Character_Mapping_Function)\n-      return     Natural;\n+     (Source : Unbounded_String;\n+      Set    : Maps.Character_Set;\n+      Test   : Membership := Inside;\n+      Going  : Direction  := Forward) return Natural;\n \n    function Index\n-     (Source : in Unbounded_String;\n-      Set    : in Maps.Character_Set;\n-      Test   : in Membership := Inside;\n-      Going  : in Direction  := Forward)\n-      return   Natural;\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural;\n+   pragma Ada_05 (Index);\n+\n+   function Index\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Maps.Character_Mapping_Function) return Natural;\n+   pragma Ada_05 (Index);\n+\n+   function Index\n+     (Source  : Unbounded_String;\n+      Set     : Maps.Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural;\n+   pragma Ada_05 (Index);\n \n    function Index_Non_Blank\n-     (Source : in Unbounded_String;\n-      Going  : in Direction := Forward)\n-      return   Natural;\n+     (Source : Unbounded_String;\n+      Going  : Direction := Forward) return Natural;\n+\n+   function Index_Non_Blank\n+     (Source : Unbounded_String;\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural;\n+   pragma Ada_05 (Index_Non_Blank);\n \n    function Count\n-     (Source  : in Unbounded_String;\n-      Pattern : in String;\n-      Mapping : in Maps.Character_Mapping := Maps.Identity)\n-      return    Natural;\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping := Maps.Identity) return Natural;\n \n    function Count\n-     (Source   : in Unbounded_String;\n-      Pattern  : in String;\n-      Mapping  : in Maps.Character_Mapping_Function)\n-      return     Natural;\n+     (Source  : Unbounded_String;\n+      Pattern : String;\n+      Mapping : Maps.Character_Mapping_Function) return Natural;\n \n    function Count\n-     (Source : in Unbounded_String;\n-      Set    : in Maps.Character_Set)\n-      return   Natural;\n+     (Source : Unbounded_String;\n+      Set    : Maps.Character_Set) return Natural;\n \n    procedure Find_Token\n-     (Source : in Unbounded_String;\n-      Set    : in Maps.Character_Set;\n-      Test   : in Membership;\n+     (Source : Unbounded_String;\n+      Set    : Maps.Character_Set;\n+      Test   : Membership;\n       First  : out Positive;\n       Last   : out Natural);\n \n@@ -229,129 +269,116 @@ pragma Preelaborate (Unbounded);\n    ------------------------------------\n \n    function Translate\n-     (Source  : in Unbounded_String;\n-      Mapping : in Maps.Character_Mapping)\n-      return    Unbounded_String;\n+     (Source  : Unbounded_String;\n+      Mapping : Maps.Character_Mapping) return Unbounded_String;\n \n    procedure Translate\n      (Source  : in out Unbounded_String;\n       Mapping : Maps.Character_Mapping);\n \n    function Translate\n-     (Source  : in Unbounded_String;\n-      Mapping : in Maps.Character_Mapping_Function)\n-      return    Unbounded_String;\n+     (Source  : Unbounded_String;\n+      Mapping : Maps.Character_Mapping_Function) return Unbounded_String;\n \n    procedure Translate\n      (Source  : in out Unbounded_String;\n-      Mapping : in Maps.Character_Mapping_Function);\n+      Mapping : Maps.Character_Mapping_Function);\n \n    ---------------------------------------\n    -- String Transformation Subprograms --\n    ---------------------------------------\n \n    function Replace_Slice\n-     (Source : in Unbounded_String;\n-      Low    : in Positive;\n-      High   : in Natural;\n-      By     : in String)\n-      return   Unbounded_String;\n+     (Source : Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural;\n+      By     : String) return Unbounded_String;\n \n    procedure Replace_Slice\n-     (Source   : in out Unbounded_String;\n-      Low      : in Positive;\n-      High     : in Natural;\n-      By       : in String);\n+     (Source : in out Unbounded_String;\n+      Low    : Positive;\n+      High   : Natural;\n+      By     : String);\n \n    function Insert\n-     (Source   : in Unbounded_String;\n-      Before   : in Positive;\n-      New_Item : in String)\n-      return     Unbounded_String;\n+     (Source   : Unbounded_String;\n+      Before   : Positive;\n+      New_Item : String) return Unbounded_String;\n \n    procedure Insert\n      (Source   : in out Unbounded_String;\n-      Before   : in Positive;\n-      New_Item : in String);\n+      Before   : Positive;\n+      New_Item : String);\n \n    function Overwrite\n-     (Source   : in Unbounded_String;\n-      Position : in Positive;\n-      New_Item : in String)\n-      return     Unbounded_String;\n+     (Source   : Unbounded_String;\n+      Position : Positive;\n+      New_Item : String) return Unbounded_String;\n \n    procedure Overwrite\n-     (Source    : in out Unbounded_String;\n-      Position  : in Positive;\n-      New_Item  : in String);\n+     (Source   : in out Unbounded_String;\n+      Position : Positive;\n+      New_Item : String);\n \n    function Delete\n-     (Source  : in Unbounded_String;\n-      From    : in Positive;\n-      Through : in Natural)\n-      return    Unbounded_String;\n+     (Source  : Unbounded_String;\n+      From    : Positive;\n+      Through : Natural) return Unbounded_String;\n \n    procedure Delete\n      (Source  : in out Unbounded_String;\n-      From    : in Positive;\n-      Through : in Natural);\n+      From    : Positive;\n+      Through : Natural);\n \n    function Trim\n-     (Source : in Unbounded_String;\n-      Side   : in Trim_End)\n-      return   Unbounded_String;\n+     (Source : Unbounded_String;\n+      Side   : Trim_End) return Unbounded_String;\n \n    procedure Trim\n      (Source : in out Unbounded_String;\n-      Side   : in Trim_End);\n+      Side   : Trim_End);\n \n    function Trim\n-     (Source : in Unbounded_String;\n-      Left   : in Maps.Character_Set;\n-      Right  : in Maps.Character_Set)\n-      return   Unbounded_String;\n+     (Source : Unbounded_String;\n+      Left   : Maps.Character_Set;\n+      Right  : Maps.Character_Set) return Unbounded_String;\n \n    procedure Trim\n      (Source : in out Unbounded_String;\n-      Left   : in Maps.Character_Set;\n-      Right  : in Maps.Character_Set);\n+      Left   : Maps.Character_Set;\n+      Right  : Maps.Character_Set);\n \n    function Head\n-     (Source : in Unbounded_String;\n-      Count  : in Natural;\n-      Pad    : in Character := Space)\n-      return   Unbounded_String;\n+     (Source : Unbounded_String;\n+      Count  : Natural;\n+      Pad    : Character := Space) return Unbounded_String;\n \n    procedure Head\n      (Source : in out Unbounded_String;\n-      Count  : in Natural;\n-      Pad    : in Character := Space);\n+      Count  : Natural;\n+      Pad    : Character := Space);\n \n    function Tail\n-     (Source : in Unbounded_String;\n-      Count  : in Natural;\n-      Pad    : in Character := Space)\n-      return   Unbounded_String;\n+     (Source : Unbounded_String;\n+      Count  : Natural;\n+      Pad    : Character := Space) return Unbounded_String;\n \n    procedure Tail\n      (Source : in out Unbounded_String;\n-      Count  : in Natural;\n-      Pad    : in Character := Space);\n+      Count  : Natural;\n+      Pad    : Character := Space);\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in Character)\n-      return  Unbounded_String;\n+     (Left  : Natural;\n+      Right : Character) return Unbounded_String;\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in String)\n-      return  Unbounded_String;\n+     (Left  : Natural;\n+      Right : String) return Unbounded_String;\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in Unbounded_String)\n-      return  Unbounded_String;\n+     (Left  : Natural;\n+      Right : Unbounded_String) return Unbounded_String;\n \n private\n    pragma Inline (Length);"}, {"sha": "f7d64c9af3c71ffce98ba3e56fb1b7cab7c53b4f", "filename": "gcc/ada/a-stwifi.adb", "status": "modified", "additions": 126, "deletions": 112, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwifi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwifi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwifi.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,59 +41,85 @@ package body Ada.Strings.Wide_Fixed is\n    ------------------------\n \n    function Index\n-     (Source  : in Wide_String;\n-      Pattern : in Wide_String;\n-      Going   : in Direction := Forward;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n-      return    Natural\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural\n    renames Ada.Strings.Wide_Search.Index;\n \n    function Index\n-     (Source  : in Wide_String;\n-      Pattern : in Wide_String;\n-      Going   : in Direction := Forward;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return    Natural\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural\n    renames Ada.Strings.Wide_Search.Index;\n \n    function Index\n-     (Source : in Wide_String;\n-      Set    : in Wide_Maps.Wide_Character_Set;\n-      Test   : in Membership := Inside;\n-      Going  : in Direction  := Forward)\n-      return   Natural\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set;\n+      Test   : Membership := Inside;\n+      Going  : Direction  := Forward) return Natural\n    renames Ada.Strings.Wide_Search.Index;\n \n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural\n+   renames Ada.Strings.Wide_Search.Index;\n+\n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural\n+   renames Ada.Strings.Wide_Search.Index;\n+\n+   function Index\n+     (Source  : Wide_String;\n+      Set     : Wide_Maps.Wide_Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural\n+   renames Ada.Strings.Wide_Search.Index;\n+\n+   function Index_Non_Blank\n+     (Source : Wide_String;\n+      Going  : Direction := Forward) return Natural\n+   renames Ada.Strings.Wide_Search.Index_Non_Blank;\n+\n    function Index_Non_Blank\n-     (Source : in Wide_String;\n-      Going  : in Direction := Forward)\n-      return   Natural\n+     (Source : Wide_String;\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural\n    renames Ada.Strings.Wide_Search.Index_Non_Blank;\n \n    function Count\n-     (Source  : in Wide_String;\n-      Pattern : in Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n-      return    Natural\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural\n    renames Ada.Strings.Wide_Search.Count;\n \n    function Count\n-     (Source   : in Wide_String;\n-      Pattern  : in Wide_String;\n-      Mapping  : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return     Natural\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural\n    renames Ada.Strings.Wide_Search.Count;\n \n    function Count\n-     (Source : in Wide_String;\n-      Set    : in Wide_Maps.Wide_Character_Set)\n-      return   Natural\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set) return Natural\n    renames Ada.Strings.Wide_Search.Count;\n \n    procedure Find_Token\n-     (Source : in Wide_String;\n-      Set    : in Wide_Maps.Wide_Character_Set;\n-      Test   : in Membership;\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set;\n+      Test   : Membership;\n       First  : out Positive;\n       Last   : out Natural)\n    renames Ada.Strings.Wide_Search.Find_Token;\n@@ -103,9 +129,8 @@ package body Ada.Strings.Wide_Fixed is\n    ---------\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in Wide_Character)\n-      return  Wide_String\n+     (Left  : Natural;\n+      Right : Wide_Character) return Wide_String\n    is\n       Result : Wide_String (1 .. Left);\n \n@@ -118,9 +143,8 @@ package body Ada.Strings.Wide_Fixed is\n    end \"*\";\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in Wide_String)\n-      return  Wide_String\n+     (Left  : Natural;\n+      Right : Wide_String) return Wide_String\n    is\n       Result : Wide_String (1 .. Left * Right'Length);\n       Ptr    : Integer := 1;\n@@ -139,10 +163,9 @@ package body Ada.Strings.Wide_Fixed is\n    ------------\n \n    function Delete\n-     (Source  : in Wide_String;\n-      From    : in Positive;\n-      Through : in Natural)\n-      return    Wide_String\n+     (Source  : Wide_String;\n+      From    : Positive;\n+      Through : Natural) return Wide_String\n    is\n    begin\n       if From not in Source'Range\n@@ -168,10 +191,10 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Delete\n      (Source  : in out Wide_String;\n-      From    : in Positive;\n-      Through : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Wide_Character := Wide_Space)\n+      From    : Positive;\n+      Through : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Wide_Character := Wide_Space)\n    is\n    begin\n       Move (Source  => Delete (Source, From, Through),\n@@ -185,10 +208,9 @@ package body Ada.Strings.Wide_Fixed is\n    ----------\n \n    function Head\n-     (Source : in Wide_String;\n-      Count  : in Natural;\n-      Pad    : in Wide_Character := Wide_Space)\n-      return   Wide_String\n+     (Source : Wide_String;\n+      Count  : Natural;\n+      Pad    : Wide_Character := Wide_Space) return Wide_String\n    is\n       Result : Wide_String (1 .. Count);\n \n@@ -209,9 +231,9 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Head\n      (Source  : in out Wide_String;\n-      Count   : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Wide_Character := Ada.Strings.Wide_Space)\n+      Count   : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Wide_Character := Ada.Strings.Wide_Space)\n    is\n    begin\n       Move (Source  => Head (Source, Count, Pad),\n@@ -226,10 +248,9 @@ package body Ada.Strings.Wide_Fixed is\n    ------------\n \n    function Insert\n-     (Source   : in Wide_String;\n-      Before   : in Positive;\n-      New_Item : in Wide_String)\n-      return     Wide_String\n+     (Source   : Wide_String;\n+      Before   : Positive;\n+      New_Item : Wide_String) return Wide_String\n    is\n       Result : Wide_String (1 .. Source'Length + New_Item'Length);\n \n@@ -245,9 +266,9 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Insert\n      (Source   : in out Wide_String;\n-      Before   : in Positive;\n-      New_Item : in Wide_String;\n-      Drop     : in Truncation := Error)\n+      Before   : Positive;\n+      New_Item : Wide_String;\n+      Drop     : Truncation := Error)\n    is\n    begin\n       Move (Source => Insert (Source, Before, New_Item),\n@@ -260,11 +281,11 @@ package body Ada.Strings.Wide_Fixed is\n    ----------\n \n    procedure Move\n-     (Source  : in  Wide_String;\n+     (Source  : Wide_String;\n       Target  : out Wide_String;\n-      Drop    : in  Truncation := Error;\n-      Justify : in  Alignment  := Left;\n-      Pad     : in  Wide_Character  := Wide_Space)\n+      Drop    : Truncation := Error;\n+      Justify : Alignment  := Left;\n+      Pad     : Wide_Character  := Wide_Space)\n    is\n       Sfirst  : constant Integer := Source'First;\n       Slast   : constant Integer := Source'Last;\n@@ -369,10 +390,9 @@ package body Ada.Strings.Wide_Fixed is\n    ---------------\n \n    function Overwrite\n-     (Source   : in Wide_String;\n-      Position : in Positive;\n-      New_Item : in Wide_String)\n-      return     Wide_String\n+     (Source   : Wide_String;\n+      Position : Positive;\n+      New_Item : Wide_String) return Wide_String\n    is\n    begin\n       if Position not in Source'First .. Source'Last + 1 then\n@@ -396,9 +416,9 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Overwrite\n      (Source   : in out Wide_String;\n-      Position : in Positive;\n-      New_Item : in Wide_String;\n-      Drop     : in Truncation := Right)\n+      Position : Positive;\n+      New_Item : Wide_String;\n+      Drop     : Truncation := Right)\n    is\n    begin\n       Move (Source => Overwrite (Source, Position, New_Item),\n@@ -411,11 +431,10 @@ package body Ada.Strings.Wide_Fixed is\n    -------------------\n \n    function Replace_Slice\n-     (Source   : in Wide_String;\n-      Low      : in Positive;\n-      High     : in Natural;\n-      By       : in Wide_String)\n-      return     Wide_String\n+     (Source : Wide_String;\n+      Low    : Positive;\n+      High   : Natural;\n+      By     : Wide_String) return Wide_String\n    is\n       Result_Length : Natural;\n \n@@ -446,12 +465,12 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Replace_Slice\n      (Source   : in out Wide_String;\n-      Low      : in Positive;\n-      High     : in Natural;\n-      By       : in Wide_String;\n-      Drop     : in Truncation := Error;\n-      Justify  : in Alignment  := Left;\n-      Pad      : in Wide_Character  := Wide_Space)\n+      Low      : Positive;\n+      High     : Natural;\n+      By       : Wide_String;\n+      Drop     : Truncation := Error;\n+      Justify  : Alignment  := Left;\n+      Pad      : Wide_Character  := Wide_Space)\n    is\n    begin\n       Move (Replace_Slice (Source, Low, High, By), Source, Drop, Justify, Pad);\n@@ -462,10 +481,9 @@ package body Ada.Strings.Wide_Fixed is\n    ----------\n \n    function Tail\n-     (Source : in Wide_String;\n-      Count  : in Natural;\n-      Pad    : in Wide_Character := Wide_Space)\n-      return   Wide_String\n+     (Source : Wide_String;\n+      Count  : Natural;\n+      Pad    : Wide_Character := Wide_Space) return Wide_String\n    is\n       Result : Wide_String (1 .. Count);\n \n@@ -488,9 +506,9 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Tail\n      (Source  : in out Wide_String;\n-      Count   : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Wide_Character := Ada.Strings.Wide_Space)\n+      Count   : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Wide_Character := Ada.Strings.Wide_Space)\n    is\n    begin\n       Move (Source  => Tail (Source, Count, Pad),\n@@ -505,9 +523,8 @@ package body Ada.Strings.Wide_Fixed is\n    ---------------\n \n    function Translate\n-     (Source  : in Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping)\n-      return    Wide_String\n+     (Source  : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping) return Wide_String\n    is\n       Result : Wide_String (1 .. Source'Length);\n \n@@ -521,7 +538,7 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Translate\n      (Source  : in out Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping)\n+      Mapping : Wide_Maps.Wide_Character_Mapping)\n    is\n    begin\n       for J in Source'Range loop\n@@ -530,9 +547,8 @@ package body Ada.Strings.Wide_Fixed is\n    end Translate;\n \n    function Translate\n-     (Source  : in Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return    Wide_String\n+     (Source  : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Wide_String\n    is\n       Result : Wide_String (1 .. Source'Length);\n \n@@ -546,7 +562,7 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Translate\n      (Source  : in out Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping_Function)\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function)\n    is\n    begin\n       for J in Source'Range loop\n@@ -559,9 +575,8 @@ package body Ada.Strings.Wide_Fixed is\n    ----------\n \n    function Trim\n-     (Source : in Wide_String;\n-      Side   : in Trim_End)\n-      return   Wide_String\n+     (Source : Wide_String;\n+      Side   : Trim_End) return Wide_String\n    is\n       Low  : Natural := Source'First;\n       High : Natural := Source'Last;\n@@ -599,9 +614,9 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Trim\n      (Source  : in out Wide_String;\n-      Side    : in Trim_End;\n-      Justify : in Alignment      := Left;\n-      Pad     : in Wide_Character := Wide_Space)\n+      Side    : Trim_End;\n+      Justify : Alignment      := Left;\n+      Pad     : Wide_Character := Wide_Space)\n    is\n    begin\n       Move (Source  => Trim (Source, Side),\n@@ -611,10 +626,9 @@ package body Ada.Strings.Wide_Fixed is\n    end Trim;\n \n    function Trim\n-      (Source : in Wide_String;\n-       Left   : in Wide_Maps.Wide_Character_Set;\n-       Right  : in Wide_Maps.Wide_Character_Set)\n-       return   Wide_String\n+      (Source : Wide_String;\n+       Left   : Wide_Maps.Wide_Character_Set;\n+       Right  : Wide_Maps.Wide_Character_Set) return Wide_String\n    is\n       Low  : Natural := Source'First;\n       High : Natural := Source'Last;\n@@ -644,10 +658,10 @@ package body Ada.Strings.Wide_Fixed is\n \n    procedure Trim\n       (Source  : in out Wide_String;\n-       Left    : in Wide_Maps.Wide_Character_Set;\n-       Right   : in Wide_Maps.Wide_Character_Set;\n-       Justify : in Alignment      := Strings.Left;\n-       Pad     : in Wide_Character := Wide_Space)\n+       Left    : Wide_Maps.Wide_Character_Set;\n+       Right   : Wide_Maps.Wide_Character_Set;\n+       Justify : Alignment      := Strings.Left;\n+       Pad     : Wide_Character := Wide_Space)\n    is\n    begin\n       Move (Source  => Trim (Source, Left, Right),"}, {"sha": "177e2f8011d4bffff9af399877019e6bf0d88f1e", "filename": "gcc/ada/a-stwifi.ads", "status": "modified", "additions": 125, "deletions": 111, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwifi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwifi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwifi.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -24,63 +24,89 @@ pragma Preelaborate (Wide_Fixed);\n    -------------------------------------------------------------------\n \n    procedure Move\n-     (Source  : in  Wide_String;\n+     (Source  : Wide_String;\n       Target  : out Wide_String;\n-      Drop    : in  Truncation := Error;\n-      Justify : in  Alignment  := Left;\n-      Pad     : in  Wide_Character  := Ada.Strings.Wide_Space);\n+      Drop    : Truncation := Error;\n+      Justify : Alignment  := Left;\n+      Pad     : Wide_Character  := Ada.Strings.Wide_Space);\n \n    ------------------------\n    -- Search Subprograms --\n    ------------------------\n \n    function Index\n-     (Source  : in Wide_String;\n-      Pattern : in Wide_String;\n-      Going   : in Direction := Forward;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n-      return    Natural;\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural;\n \n    function Index\n-     (Source  : in Wide_String;\n-      Pattern : in Wide_String;\n-      Going   : in Direction := Forward;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return    Natural;\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural;\n \n    function Index\n-     (Source : in Wide_String;\n-      Set    : in Wide_Maps.Wide_Character_Set;\n-      Test   : in Membership := Inside;\n-      Going  : in Direction  := Forward)\n-      return   Natural;\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set;\n+      Test   : Membership := Inside;\n+      Going  : Direction  := Forward) return Natural;\n+\n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural;\n+   pragma Ada_05 (Index);\n+\n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural;\n+   pragma Ada_05 (Index);\n+\n+   function Index\n+     (Source  : Wide_String;\n+      Set     : Wide_Maps.Wide_Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural;\n+   pragma Ada_05 (Index);\n+\n+   function Index_Non_Blank\n+     (Source : Wide_String;\n+      Going  : Direction := Forward) return Natural;\n \n    function Index_Non_Blank\n-     (Source : in Wide_String;\n-      Going  : in Direction := Forward)\n-      return   Natural;\n+     (Source : Wide_String;\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural;\n+   pragma Ada_05 (Index_Non_Blank);\n \n    function Count\n-     (Source  : in Wide_String;\n-      Pattern : in Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n-      return    Natural;\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural;\n \n    function Count\n-     (Source   : in Wide_String;\n-      Pattern  : in Wide_String;\n-      Mapping  : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return     Natural;\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural;\n \n    function Count\n-     (Source : in Wide_String;\n-      Set    : in Wide_Maps.Wide_Character_Set)\n-      return   Natural;\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set) return Natural;\n \n    procedure Find_Token\n-     (Source : in Wide_String;\n-      Set    : in Wide_Maps.Wide_Character_Set;\n-      Test   : in Membership;\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set;\n+      Test   : Membership;\n       First  : out Positive;\n       Last   : out Natural);\n \n@@ -89,144 +115,132 @@ pragma Preelaborate (Wide_Fixed);\n    -----------------------------------------\n \n    function Translate\n-     (Source  : in Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping)\n-      return    Wide_String;\n+     (Source  : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping) return Wide_String;\n \n    procedure Translate\n      (Source  : in out Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping);\n+      Mapping : Wide_Maps.Wide_Character_Mapping);\n \n    function Translate\n-     (Source  : in Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return    Wide_String;\n+     (Source  : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Wide_String;\n \n    procedure Translate\n      (Source  : in out Wide_String;\n-      Mapping : in Wide_Maps.Wide_Character_Mapping_Function);\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function);\n \n    --------------------------------------------\n    -- Wide_String Transformation Subprograms --\n    --------------------------------------------\n \n    function Replace_Slice\n-     (Source : in Wide_String;\n-      Low    : in Positive;\n-      High   : in Natural;\n-      By     : in Wide_String)\n-      return   Wide_String;\n+     (Source : Wide_String;\n+      Low    : Positive;\n+      High   : Natural;\n+      By     : Wide_String) return Wide_String;\n \n    procedure Replace_Slice\n      (Source  : in out Wide_String;\n-      Low     : in Positive;\n-      High    : in Natural;\n-      By      : in Wide_String;\n-      Drop    : in Truncation := Error;\n-      Justify : in Alignment  := Left;\n-      Pad     : in Wide_Character  := Ada.Strings.Wide_Space);\n+      Low     : Positive;\n+      High    : Natural;\n+      By      : Wide_String;\n+      Drop    : Truncation := Error;\n+      Justify : Alignment  := Left;\n+      Pad     : Wide_Character  := Ada.Strings.Wide_Space);\n \n    function Insert\n-     (Source   : in Wide_String;\n-      Before   : in Positive;\n-      New_Item : in Wide_String)\n-      return     Wide_String;\n+     (Source   : Wide_String;\n+      Before   : Positive;\n+      New_Item : Wide_String) return Wide_String;\n \n    procedure Insert\n      (Source   : in out Wide_String;\n-      Before   : in Positive;\n-      New_Item : in Wide_String;\n-      Drop     : in Truncation := Error);\n+      Before   : Positive;\n+      New_Item : Wide_String;\n+      Drop     : Truncation := Error);\n \n    function Overwrite\n-     (Source   : in Wide_String;\n-      Position : in Positive;\n-      New_Item : in Wide_String)\n-      return     Wide_String;\n+     (Source   : Wide_String;\n+      Position : Positive;\n+      New_Item : Wide_String) return Wide_String;\n \n    procedure Overwrite\n      (Source   : in out Wide_String;\n-      Position : in Positive;\n-      New_Item : in Wide_String;\n-      Drop     : in Truncation := Right);\n+      Position : Positive;\n+      New_Item : Wide_String;\n+      Drop     : Truncation := Right);\n \n    function Delete\n-     (Source  : in Wide_String;\n-      From    : in Positive;\n-      Through : in Natural)\n-      return    Wide_String;\n+     (Source  : Wide_String;\n+      From    : Positive;\n+      Through : Natural) return Wide_String;\n \n    procedure Delete\n      (Source  : in out Wide_String;\n-      From    : in Positive;\n-      Through : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Wide_Character := Ada.Strings.Wide_Space);\n+      From    : Positive;\n+      Through : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Wide_Character := Ada.Strings.Wide_Space);\n \n    --------------------------------------\n    -- Wide_String Selector Subprograms --\n    --------------------------------------\n \n    function Trim\n-     (Source : in Wide_String;\n-      Side   : in Trim_End)\n-      return   Wide_String;\n+     (Source : Wide_String;\n+      Side   : Trim_End) return Wide_String;\n \n    procedure Trim\n      (Source  : in out Wide_String;\n-      Side    : in Trim_End;\n-      Justify : in Alignment      := Left;\n-      Pad     : in Wide_Character := Wide_Space);\n+      Side    : Trim_End;\n+      Justify : Alignment      := Left;\n+      Pad     : Wide_Character := Wide_Space);\n \n    function Trim\n-     (Source : in Wide_String;\n-      Left   : in Wide_Maps.Wide_Character_Set;\n-      Right  : in Wide_Maps.Wide_Character_Set)\n-      return   Wide_String;\n+     (Source : Wide_String;\n+      Left   : Wide_Maps.Wide_Character_Set;\n+      Right  : Wide_Maps.Wide_Character_Set) return Wide_String;\n \n    procedure Trim\n      (Source  : in out Wide_String;\n-      Left    : in Wide_Maps.Wide_Character_Set;\n-      Right   : in Wide_Maps.Wide_Character_Set;\n-      Justify : in Alignment := Ada.Strings.Left;\n-      Pad     : in Wide_Character := Ada.Strings.Wide_Space);\n+      Left    : Wide_Maps.Wide_Character_Set;\n+      Right   : Wide_Maps.Wide_Character_Set;\n+      Justify : Alignment := Ada.Strings.Left;\n+      Pad     : Wide_Character := Ada.Strings.Wide_Space);\n \n    function Head\n-     (Source : in Wide_String;\n-      Count  : in Natural;\n-      Pad    : in Wide_Character := Ada.Strings.Wide_Space)\n-      return   Wide_String;\n+     (Source : Wide_String;\n+      Count  : Natural;\n+      Pad    : Wide_Character := Ada.Strings.Wide_Space) return Wide_String;\n \n    procedure Head\n      (Source  : in out Wide_String;\n-      Count   : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad     : in Wide_Character := Ada.Strings.Wide_Space);\n+      Count   : Natural;\n+      Justify : Alignment := Left;\n+      Pad     : Wide_Character := Ada.Strings.Wide_Space);\n \n    function Tail\n-     (Source : in Wide_String;\n-      Count  : in Natural;\n-      Pad    : in Wide_Character := Ada.Strings.Wide_Space)\n-      return   Wide_String;\n+     (Source : Wide_String;\n+      Count  : Natural;\n+      Pad    : Wide_Character := Ada.Strings.Wide_Space) return Wide_String;\n \n    procedure Tail\n      (Source : in out Wide_String;\n-      Count  : in Natural;\n-      Justify : in Alignment := Left;\n-      Pad    : in Wide_Character := Ada.Strings.Wide_Space);\n+      Count  : Natural;\n+      Justify : Alignment := Left;\n+      Pad    : Wide_Character := Ada.Strings.Wide_Space);\n \n    ---------------------------------------\n    -- Wide_String Constructor Functions --\n    ---------------------------------------\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in Wide_Character)\n-      return  Wide_String;\n+     (Left  : Natural;\n+      Right : Wide_Character) return Wide_String;\n \n    function \"*\"\n-     (Left  : in Natural;\n-      Right : in Wide_String)\n-      return Wide_String;\n+     (Left  : Natural;\n+      Right : Wide_String) return Wide_String;\n \n end Ada.Strings.Wide_Fixed;"}, {"sha": "79e0479acff59b305b0e6d8744b55c7b3bd49527", "filename": "gcc/ada/a-stwima.adb", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwima.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,8 +40,7 @@ package body Ada.Strings.Wide_Maps is\n    ---------\n \n    function \"-\"\n-     (Left, Right : in Wide_Character_Set)\n-      return        Wide_Character_Set\n+     (Left, Right : Wide_Character_Set) return Wide_Character_Set\n    is\n       LS : constant Wide_Character_Ranges_Access := Left.Set;\n       RS : constant Wide_Character_Ranges_Access := Right.Set;\n@@ -159,8 +158,7 @@ package body Ada.Strings.Wide_Maps is\n    -----------\n \n    function \"and\"\n-     (Left, Right : in Wide_Character_Set)\n-      return        Wide_Character_Set\n+     (Left, Right : Wide_Character_Set) return Wide_Character_Set\n    is\n       LS : constant Wide_Character_Ranges_Access := Left.Set;\n       RS : constant Wide_Character_Ranges_Access := Right.Set;\n@@ -210,8 +208,7 @@ package body Ada.Strings.Wide_Maps is\n    -----------\n \n    function \"not\"\n-     (Right  : in Wide_Character_Set)\n-      return Wide_Character_Set\n+     (Right : Wide_Character_Set) return Wide_Character_Set\n    is\n       RS : constant Wide_Character_Ranges_Access := Right.Set;\n \n@@ -253,8 +250,7 @@ package body Ada.Strings.Wide_Maps is\n    ----------\n \n    function \"or\"\n-     (Left, Right : in Wide_Character_Set)\n-      return        Wide_Character_Set\n+     (Left, Right : Wide_Character_Set) return Wide_Character_Set\n    is\n       LS : constant Wide_Character_Ranges_Access := Left.Set;\n       RS : constant Wide_Character_Ranges_Access := Right.Set;\n@@ -341,8 +337,7 @@ package body Ada.Strings.Wide_Maps is\n    -----------\n \n    function \"xor\"\n-     (Left, Right : in Wide_Character_Set)\n-      return        Wide_Character_Set\n+     (Left, Right : Wide_Character_Set) return Wide_Character_Set\n    is\n    begin\n       return (Left or Right) - (Left and Right);\n@@ -409,9 +404,8 @@ package body Ada.Strings.Wide_Maps is\n    -----------\n \n    function Is_In\n-     (Element : in Wide_Character;\n-      Set     : in Wide_Character_Set)\n-      return    Boolean\n+     (Element : Wide_Character;\n+      Set     : Wide_Character_Set) return Boolean\n    is\n       L, R, M : Natural;\n       SS      : constant Wide_Character_Ranges_Access := Set.Set;\n@@ -446,9 +440,8 @@ package body Ada.Strings.Wide_Maps is\n    ---------------\n \n    function Is_Subset\n-     (Elements : in Wide_Character_Set;\n-      Set      : in Wide_Character_Set)\n-      return     Boolean\n+     (Elements : Wide_Character_Set;\n+      Set      : Wide_Character_Set) return Boolean\n    is\n       ES : constant Wide_Character_Ranges_Access := Elements.Set;\n       SS : constant Wide_Character_Ranges_Access := Set.Set;\n@@ -493,8 +486,7 @@ package body Ada.Strings.Wide_Maps is\n    ---------------\n \n    function To_Domain\n-     (Map  : in Wide_Character_Mapping)\n-      return Wide_Character_Sequence\n+     (Map : Wide_Character_Mapping) return Wide_Character_Sequence\n    is\n    begin\n       return Map.Map.Domain;\n@@ -505,8 +497,7 @@ package body Ada.Strings.Wide_Maps is\n    ----------------\n \n    function To_Mapping\n-     (From, To : in Wide_Character_Sequence)\n-      return     Wide_Character_Mapping\n+     (From, To : Wide_Character_Sequence) return Wide_Character_Mapping\n    is\n       Domain : Wide_Character_Sequence (1 .. From'Length);\n       Rangev : Wide_Character_Sequence (1 .. To'Length);\n@@ -554,8 +545,7 @@ package body Ada.Strings.Wide_Maps is\n    --------------\n \n    function To_Range\n-     (Map  : in Wide_Character_Mapping)\n-      return Wide_Character_Sequence\n+     (Map : Wide_Character_Mapping) return Wide_Character_Sequence\n    is\n    begin\n       return Map.Map.Rangev;\n@@ -566,8 +556,7 @@ package body Ada.Strings.Wide_Maps is\n    ---------------\n \n    function To_Ranges\n-     (Set :  in Wide_Character_Set)\n-      return Wide_Character_Ranges\n+     (Set :  in Wide_Character_Set) return Wide_Character_Ranges\n    is\n    begin\n       return Set.Set.all;\n@@ -578,8 +567,7 @@ package body Ada.Strings.Wide_Maps is\n    -----------------\n \n    function To_Sequence\n-     (Set  : in Wide_Character_Set)\n-      return Wide_Character_Sequence\n+     (Set : Wide_Character_Set) return Wide_Character_Sequence\n    is\n       SS : constant Wide_Character_Ranges_Access := Set.Set;\n \n@@ -604,8 +592,7 @@ package body Ada.Strings.Wide_Maps is\n    --  Case of multiple range input\n \n    function To_Set\n-     (Ranges : in Wide_Character_Ranges)\n-      return   Wide_Character_Set\n+     (Ranges : Wide_Character_Ranges) return Wide_Character_Set\n    is\n       Result : Wide_Character_Ranges (Ranges'Range);\n       N      : Natural := 0;\n@@ -667,8 +654,7 @@ package body Ada.Strings.Wide_Maps is\n    --  Case of single range input\n \n    function To_Set\n-     (Span : in Wide_Character_Range)\n-      return Wide_Character_Set\n+     (Span : Wide_Character_Range) return Wide_Character_Set\n    is\n    begin\n       if Span.Low > Span.High then\n@@ -685,8 +671,7 @@ package body Ada.Strings.Wide_Maps is\n    --  Case of wide string input\n \n    function To_Set\n-     (Sequence : in Wide_Character_Sequence)\n-      return     Wide_Character_Set\n+     (Sequence : Wide_Character_Sequence) return Wide_Character_Set\n    is\n       R : Wide_Character_Ranges (1 .. Sequence'Length);\n \n@@ -701,8 +686,7 @@ package body Ada.Strings.Wide_Maps is\n    --  Case of single wide character input\n \n    function To_Set\n-     (Singleton : in Wide_Character)\n-      return      Wide_Character_Set\n+     (Singleton : Wide_Character) return Wide_Character_Set\n    is\n    begin\n       return\n@@ -715,9 +699,8 @@ package body Ada.Strings.Wide_Maps is\n    -----------\n \n    function Value\n-     (Map     : in Wide_Character_Mapping;\n-      Element : in Wide_Character)\n-      return    Wide_Character\n+     (Map     : Wide_Character_Mapping;\n+      Element : Wide_Character) return Wide_Character\n    is\n       L, R, M : Natural;\n "}, {"sha": "382452f408529657db08f03c95adf0d352493a46", "filename": "gcc/ada/a-stwima.ads", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwima.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwima.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwima.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-1998 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -63,16 +63,13 @@ package Ada.Strings.Wide_Maps is\n      array (Positive range <>) of Wide_Character_Range;\n \n    function To_Set\n-     (Ranges : in Wide_Character_Ranges)\n-      return   Wide_Character_Set;\n+     (Ranges : Wide_Character_Ranges) return Wide_Character_Set;\n \n    function To_Set\n-     (Span : in Wide_Character_Range)\n-      return Wide_Character_Set;\n+     (Span : Wide_Character_Range) return Wide_Character_Set;\n \n    function To_Ranges\n-     (Set :  in Wide_Character_Set)\n-      return Wide_Character_Ranges;\n+     (Set :  in Wide_Character_Set) return Wide_Character_Ranges;\n \n    ---------------------------------------\n    -- Operations on Wide Character Sets --\n@@ -81,55 +78,44 @@ package Ada.Strings.Wide_Maps is\n    function \"=\" (Left, Right : in Wide_Character_Set) return Boolean;\n \n    function \"not\"\n-     (Right  : in Wide_Character_Set)\n-      return Wide_Character_Set;\n+     (Right : Wide_Character_Set) return Wide_Character_Set;\n \n    function \"and\"\n-     (Left, Right : in Wide_Character_Set)\n-      return        Wide_Character_Set;\n+     (Left, Right : Wide_Character_Set) return Wide_Character_Set;\n \n    function \"or\"\n-     (Left, Right : in Wide_Character_Set)\n-      return        Wide_Character_Set;\n+     (Left, Right : Wide_Character_Set) return Wide_Character_Set;\n \n    function \"xor\"\n-     (Left, Right : in Wide_Character_Set)\n-      return        Wide_Character_Set;\n+     (Left, Right : Wide_Character_Set) return Wide_Character_Set;\n \n    function \"-\"\n-     (Left, Right : in Wide_Character_Set)\n-      return        Wide_Character_Set;\n+     (Left, Right : Wide_Character_Set) return Wide_Character_Set;\n \n    function Is_In\n-     (Element : in Wide_Character;\n-      Set     : in Wide_Character_Set)\n-      return    Boolean;\n+     (Element : Wide_Character;\n+      Set     : Wide_Character_Set) return Boolean;\n \n    function Is_Subset\n-     (Elements : in Wide_Character_Set;\n-      Set      : in Wide_Character_Set)\n-      return     Boolean;\n+     (Elements : Wide_Character_Set;\n+      Set      : Wide_Character_Set) return Boolean;\n \n    function \"<=\"\n-     (Left  : in Wide_Character_Set;\n-      Right : in Wide_Character_Set)\n-      return  Boolean\n+     (Left  : Wide_Character_Set;\n+      Right : Wide_Character_Set) return Boolean\n    renames Is_Subset;\n \n    subtype Wide_Character_Sequence is Wide_String;\n    --  Alternative representation for a set of character values\n \n    function To_Set\n-     (Sequence  : in Wide_Character_Sequence)\n-      return      Wide_Character_Set;\n+     (Sequence : Wide_Character_Sequence) return Wide_Character_Set;\n \n    function To_Set\n-     (Singleton : in Wide_Character)\n-      return      Wide_Character_Set;\n+     (Singleton : Wide_Character) return Wide_Character_Set;\n \n    function To_Sequence\n-     (Set  : in Wide_Character_Set)\n-      return Wide_Character_Sequence;\n+     (Set : Wide_Character_Set) return Wide_Character_Sequence;\n \n    -----------------------------------------\n    -- Wide Character Mapping Declarations --\n@@ -139,9 +125,8 @@ package Ada.Strings.Wide_Maps is\n    --  Representation for a wide character to wide character mapping:\n \n    function Value\n-     (Map     : in Wide_Character_Mapping;\n-      Element : in Wide_Character)\n-      return    Wide_Character;\n+     (Map     : Wide_Character_Mapping;\n+      Element : Wide_Character) return Wide_Character;\n \n    Identity : constant Wide_Character_Mapping;\n \n@@ -150,19 +135,16 @@ package Ada.Strings.Wide_Maps is\n    ---------------------------------\n \n    function To_Mapping\n-     (From, To : in Wide_Character_Sequence)\n-      return     Wide_Character_Mapping;\n+     (From, To : Wide_Character_Sequence) return Wide_Character_Mapping;\n \n    function To_Domain\n-     (Map  : in Wide_Character_Mapping)\n-      return Wide_Character_Sequence;\n+     (Map : Wide_Character_Mapping) return Wide_Character_Sequence;\n \n    function To_Range\n-     (Map  : in Wide_Character_Mapping)\n-      return Wide_Character_Sequence;\n+     (Map : Wide_Character_Mapping) return Wide_Character_Sequence;\n \n    type Wide_Character_Mapping_Function is\n-      access function (From : in Wide_Character) return Wide_Character;\n+      access function (From : Wide_Character) return Wide_Character;\n \n private\n    package AF renames Ada.Finalization;"}, {"sha": "d1eae0ed637d0164f81517095e0aea4718964f7e", "filename": "gcc/ada/a-stwise.adb", "status": "modified", "additions": 134, "deletions": 42, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwise.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwise.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwise.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,8 +42,7 @@ package body Ada.Strings.Wide_Search is\n    function Belongs\n      (Element : Wide_Character;\n       Set     : Wide_Maps.Wide_Character_Set;\n-      Test    : Membership)\n-      return    Boolean;\n+      Test    : Membership) return Boolean;\n    pragma Inline (Belongs);\n    --  Determines if the given element is in (Test = Inside) or not in\n    --  (Test = Outside) the given character set.\n@@ -55,9 +54,8 @@ package body Ada.Strings.Wide_Search is\n    function Belongs\n      (Element : Wide_Character;\n       Set     : Wide_Maps.Wide_Character_Set;\n-      Test    : Membership)\n-      return    Boolean is\n-\n+      Test    : Membership) return Boolean\n+   is\n    begin\n       if Test = Inside then\n          return Is_In (Element, Set);\n@@ -71,10 +69,10 @@ package body Ada.Strings.Wide_Search is\n    -----------\n \n    function Count\n-     (Source   : in Wide_String;\n-      Pattern  : in Wide_String;\n-      Mapping  : in Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n-      return     Natural\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural\n    is\n       N : Natural;\n       J : Natural;\n@@ -117,10 +115,9 @@ package body Ada.Strings.Wide_Search is\n    end Count;\n \n    function Count\n-     (Source   : in Wide_String;\n-      Pattern  : in Wide_String;\n-      Mapping  : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return     Natural\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural\n    is\n       Mapped_Source : Wide_String (Source'Range);\n \n@@ -132,9 +129,9 @@ package body Ada.Strings.Wide_Search is\n       return Count (Mapped_Source, Pattern);\n    end Count;\n \n-   function Count (Source : in Wide_String;\n-                   Set    : in Wide_Maps.Wide_Character_Set)\n-     return Natural\n+   function Count\n+     (Source : in Wide_String;\n+      Set : Wide_Maps.Wide_Character_Set) return Natural\n    is\n       N : Natural := 0;\n \n@@ -153,9 +150,9 @@ package body Ada.Strings.Wide_Search is\n    ----------------\n \n    procedure Find_Token\n-     (Source : in Wide_String;\n-      Set    : in Wide_Maps.Wide_Character_Set;\n-      Test   : in Membership;\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set;\n+      Test   : Membership;\n       First  : out Positive;\n       Last   : out Natural)\n    is\n@@ -190,11 +187,11 @@ package body Ada.Strings.Wide_Search is\n    -----------\n \n    function Index\n-     (Source   : in Wide_String;\n-      Pattern  : in Wide_String;\n-      Going    : in Direction := Forward;\n-      Mapping  : in Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n-      return     Natural\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural\n    is\n    begin\n       if Pattern = \"\" then\n@@ -239,16 +236,11 @@ package body Ada.Strings.Wide_Search is\n       return 0;\n    end Index;\n \n-   -----------\n-   -- Index --\n-   -----------\n-\n    function Index\n-     (Source   : in Wide_String;\n-      Pattern  : in Wide_String;\n-      Going    : in Direction := Forward;\n-      Mapping  : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return     Natural\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural\n    is\n       Mapped_Source : Wide_String (Source'Range);\n \n@@ -261,11 +253,10 @@ package body Ada.Strings.Wide_Search is\n    end Index;\n \n    function Index\n-     (Source : in Wide_String;\n-      Set    : in Wide_Maps.Wide_Character_Set;\n-      Test   : in Membership := Inside;\n-      Going  : in Direction  := Forward)\n-      return   Natural\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set;\n+      Test   : Membership := Inside;\n+      Going  : Direction  := Forward) return Natural\n    is\n    begin\n       if Going = Forward then\n@@ -288,14 +279,92 @@ package body Ada.Strings.Wide_Search is\n       return 0;\n    end Index;\n \n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n+      return Natural\n+   is\n+   begin\n+      if Going = Forward then\n+         if From < Source'First then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index (Source (From .. Source'Last), Pattern, Forward, Mapping);\n+\n+      else\n+         if From > Source'Last then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index (Source (Source'First .. From), Pattern, Backward, Mapping);\n+      end if;\n+   end Index;\n+\n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural\n+   is\n+   begin\n+      if Going = Forward then\n+         if From < Source'First then\n+            raise Index_Error;\n+         end if;\n+\n+         return Index\n+           (Source (From .. Source'Last), Pattern, Forward, Mapping);\n+\n+      else\n+         if From > Source'Last then\n+            raise Index_Error;\n+         end if;\n+\n+         return Index\n+           (Source (Source'First .. From), Pattern, Backward, Mapping);\n+      end if;\n+   end Index;\n+\n+   function Index\n+     (Source  : Wide_String;\n+      Set     : Wide_Maps.Wide_Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural\n+   is\n+   begin\n+      if Going = Forward then\n+         if From < Source'First then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index (Source (From .. Source'Last), Set, Test, Forward);\n+\n+      else\n+         if From > Source'Last then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index (Source (Source'First .. From), Set, Test, Backward);\n+      end if;\n+   end Index;\n+\n    ---------------------\n    -- Index_Non_Blank --\n    ---------------------\n \n    function Index_Non_Blank\n-     (Source : in Wide_String;\n-      Going  : in Direction := Forward)\n-      return   Natural\n+     (Source : Wide_String;\n+      Going  : Direction := Forward) return Natural\n    is\n    begin\n       if Going = Forward then\n@@ -316,7 +385,30 @@ package body Ada.Strings.Wide_Search is\n       --  Fall through if no match\n \n       return 0;\n+   end Index_Non_Blank;\n \n+   function Index_Non_Blank\n+     (Source : Wide_String;\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural\n+   is\n+   begin\n+      if Going = Forward then\n+         if From < Source'First then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index_Non_Blank (Source (From .. Source'Last), Forward);\n+\n+      else\n+         if From > Source'Last then\n+            raise Index_Error;\n+         end if;\n+\n+         return\n+           Index_Non_Blank (Source (Source'First .. From), Backward);\n+      end if;\n    end Index_Non_Blank;\n \n end Ada.Strings.Wide_Search;"}, {"sha": "26ba39a0baeea3cc0835ca635d73543c6e69a340", "filename": "gcc/ada/a-stwise.ads", "status": "modified", "additions": 62, "deletions": 35, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwise.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-stwise.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwise.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-1997 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,49 +43,76 @@ with Ada.Strings.Wide_Maps;\n private package Ada.Strings.Wide_Search is\n pragma Preelaborate (Wide_Search);\n \n-   function Index (Source   : in Wide_String;\n-                   Pattern  : in Wide_String;\n-                   Going    : in Direction := Forward;\n-                   Mapping  : in Wide_Maps.Wide_Character_Mapping :=\n-                                          Wide_Maps.Identity)\n-      return Natural;\n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping :=\n+                  Wide_Maps.Identity) return Natural;\n \n-   function Index (Source   : in Wide_String;\n-                   Pattern  : in Wide_String;\n-                   Going    : in Direction := Forward;\n-                   Mapping  : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return Natural;\n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural;\n \n-   function Index (Source : in Wide_String;\n-                   Set    : in Wide_Maps.Wide_Character_Set;\n-                   Test   : in Membership := Inside;\n-                   Going  : in Direction  := Forward)\n-      return Natural;\n+   function Index\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set;\n+      Test   : Membership := Inside;\n+      Going  : Direction  := Forward) return Natural;\n \n-   function Index_Non_Blank (Source : in Wide_String;\n-                             Going  : in Direction := Forward)\n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n       return Natural;\n \n-   function Count (Source   : in Wide_String;\n-                   Pattern  : in Wide_String;\n-                   Mapping  : in Wide_Maps.Wide_Character_Mapping :=\n-                                          Wide_Maps.Identity)\n-      return Natural;\n+   function Index\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      From    : Positive;\n+      Going   : Direction := Forward;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural;\n \n-   function Count (Source   : in Wide_String;\n-                   Pattern  : in Wide_String;\n-                   Mapping  : in Wide_Maps.Wide_Character_Mapping_Function)\n-      return Natural;\n+   function Index\n+     (Source  : Wide_String;\n+      Set     : Wide_Maps.Wide_Character_Set;\n+      From    : Positive;\n+      Test    : Membership := Inside;\n+      Going   : Direction := Forward) return Natural;\n+\n+   function Index_Non_Blank\n+     (Source : Wide_String;\n+      Going  : Direction := Forward) return Natural;\n \n-   function Count (Source   : in Wide_String;\n-                   Set      : in Wide_Maps.Wide_Character_Set)\n+   function Index_Non_Blank\n+     (Source : Wide_String;\n+      From   : Positive;\n+      Going  : Direction := Forward) return Natural;\n+\n+   function Count\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping := Wide_Maps.Identity)\n       return Natural;\n \n+   function Count\n+     (Source  : Wide_String;\n+      Pattern : Wide_String;\n+      Mapping : Wide_Maps.Wide_Character_Mapping_Function) return Natural;\n+\n+   function Count\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set) return Natural;\n \n-   procedure Find_Token (Source : in Wide_String;\n-                         Set    : in Wide_Maps.Wide_Character_Set;\n-                         Test   : in Membership;\n-                         First  : out Positive;\n-                         Last   : out Natural);\n+   procedure Find_Token\n+     (Source : Wide_String;\n+      Set    : Wide_Maps.Wide_Character_Set;\n+      Test   : Membership;\n+      First  : out Positive;\n+      Last   : out Natural);\n \n end Ada.Strings.Wide_Search;"}, {"sha": "3fc95f02bd83e8d7fae8885553c1eba68fd83312", "filename": "gcc/ada/a-textio.adb", "status": "modified", "additions": 111, "deletions": 60, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,7 +60,6 @@ package body Ada.Text_IO is\n \n    function AFCB_Allocate (Control_Block : Text_AFCB) return FCB.AFCB_Ptr is\n       pragma Unreferenced (Control_Block);\n-\n    begin\n       return new Text_AFCB;\n    end AFCB_Allocate;\n@@ -118,7 +117,7 @@ package body Ada.Text_IO is\n    --  to exceed the value of Count'Last, i.e. no check is required for\n    --  overflow raising layout error.\n \n-   function Col (File : in File_Type) return Positive_Count is\n+   function Col (File : File_Type) return Positive_Count is\n    begin\n       FIO.Check_File_Open (AP (File));\n       return File.Col;\n@@ -135,9 +134,9 @@ package body Ada.Text_IO is\n \n    procedure Create\n      (File : in out File_Type;\n-      Mode : in File_Mode := Out_File;\n-      Name : in String := \"\";\n-      Form : in String := \"\")\n+      Mode : File_Mode := Out_File;\n+      Name : String := \"\";\n+      Form : String := \"\")\n    is\n       Dummy_File_Control_Block : Text_AFCB;\n       pragma Warnings (Off, Dummy_File_Control_Block);\n@@ -212,8 +211,8 @@ package body Ada.Text_IO is\n    -- End_Of_File --\n    -----------------\n \n-   function End_Of_File (File : in File_Type) return Boolean is\n-      ch  : int;\n+   function End_Of_File (File : File_Type) return Boolean is\n+      ch : int;\n \n    begin\n       FIO.Check_Read_Status (AP (File));\n@@ -270,7 +269,7 @@ package body Ada.Text_IO is\n    -- End_Of_Line --\n    -----------------\n \n-   function End_Of_Line (File : in File_Type) return Boolean is\n+   function End_Of_Line (File : File_Type) return Boolean is\n       ch : int;\n \n    begin\n@@ -301,7 +300,7 @@ package body Ada.Text_IO is\n    -- End_Of_Page --\n    -----------------\n \n-   function End_Of_Page (File : in File_Type) return Boolean is\n+   function End_Of_Page (File : File_Type) return Boolean is\n       ch  : int;\n \n    begin\n@@ -357,7 +356,7 @@ package body Ada.Text_IO is\n    -- Flush --\n    -----------\n \n-   procedure Flush (File : in File_Type) is\n+   procedure Flush (File : File_Type) is\n    begin\n       FIO.Flush (AP (File));\n    end Flush;\n@@ -371,7 +370,7 @@ package body Ada.Text_IO is\n    -- Form --\n    ----------\n \n-   function Form (File : in File_Type) return String is\n+   function Form (File : File_Type) return String is\n    begin\n       return FIO.Form (AP (File));\n    end Form;\n@@ -381,7 +380,7 @@ package body Ada.Text_IO is\n    ---------\n \n    procedure Get\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Character)\n    is\n       ch : int;\n@@ -430,7 +429,7 @@ package body Ada.Text_IO is\n    end Get;\n \n    procedure Get\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out String)\n    is\n       ch : int;\n@@ -489,7 +488,7 @@ package body Ada.Text_IO is\n    --  More work required here ???\n \n    procedure Get_Immediate\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Character)\n    is\n       ch          : int;\n@@ -530,7 +529,7 @@ package body Ada.Text_IO is\n    end Get_Immediate;\n \n    procedure Get_Immediate\n-     (File      : in File_Type;\n+     (File      : File_Type;\n       Item      : out Character;\n       Available : out Boolean)\n    is\n@@ -594,7 +593,7 @@ package body Ada.Text_IO is\n    --------------\n \n    procedure Get_Line\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out String;\n       Last : out Natural)\n    is\n@@ -712,6 +711,58 @@ package body Ada.Text_IO is\n       Get_Line (Current_In, Item, Last);\n    end Get_Line;\n \n+   function Get_Line (File : File_Type) return String is\n+      Buffer : String (1 .. 500);\n+      Last   : Natural;\n+\n+      function Get_Rest (S : String) return String;\n+      --  This is a recursive function that reads the rest of the line and\n+      --  returns it. S is the part read so far.\n+\n+      --------------\n+      -- Get_Rest --\n+      --------------\n+\n+      function Get_Rest (S : String) return String is\n+\n+         --  Each time we allocate a buffer the same size as what we have\n+         --  read so far. This limits us to a logarithmic number of calls\n+         --  to Get_Rest and also ensures only a linear use of stack space.\n+\n+         Buffer : String (1 .. S'Length);\n+         Last   : Natural;\n+\n+      begin\n+         Get_Line (File, Buffer, Last);\n+\n+         declare\n+            R : constant String := S & Buffer (1 .. Last);\n+         begin\n+            if Last < Buffer'Last then\n+               return R;\n+            else\n+               return Get_Rest (R);\n+            end if;\n+         end;\n+      end Get_Rest;\n+\n+   --  Start of processing for Get_Line\n+\n+   begin\n+      Get_Line (File, Buffer, Last);\n+\n+      if Last < Buffer'Last then\n+         return Buffer (1 .. Last);\n+      else\n+         return Get_Rest (Buffer (1 .. Last));\n+      end if;\n+   end Get_Line;\n+\n+   function Get_Line return String is\n+   begin\n+      return Get_Line (Current_In);\n+   end Get_Line;\n+\n    ----------\n    -- Getc --\n    ----------\n@@ -733,7 +784,7 @@ package body Ada.Text_IO is\n    -- Is_Open --\n    -------------\n \n-   function Is_Open (File : in File_Type) return Boolean is\n+   function Is_Open (File : File_Type) return Boolean is\n    begin\n       return FIO.Is_Open (AP (File));\n    end Is_Open;\n@@ -746,7 +797,7 @@ package body Ada.Text_IO is\n    --  to exceed the value of Count'Last, i.e. no check is required for\n    --  overflow raising layout error.\n \n-   function Line (File : in File_Type) return Positive_Count is\n+   function Line (File : File_Type) return Positive_Count is\n    begin\n       FIO.Check_File_Open (AP (File));\n       return File.Line;\n@@ -761,7 +812,7 @@ package body Ada.Text_IO is\n    -- Line_Length --\n    -----------------\n \n-   function Line_Length (File : in File_Type) return Count is\n+   function Line_Length (File : File_Type) return Count is\n    begin\n       FIO.Check_Write_Status (AP (File));\n       return File.Line_Length;\n@@ -777,7 +828,7 @@ package body Ada.Text_IO is\n    ----------------\n \n    procedure Look_Ahead\n-     (File        : in File_Type;\n+     (File        : File_Type;\n       Item        : out Character;\n       End_Of_Line : out Boolean)\n    is\n@@ -818,7 +869,7 @@ package body Ada.Text_IO is\n    -- Mode --\n    ----------\n \n-   function Mode (File : in File_Type) return File_Mode is\n+   function Mode (File : File_Type) return File_Mode is\n    begin\n       return To_TIO (FIO.Mode (AP (File)));\n    end Mode;\n@@ -827,7 +878,7 @@ package body Ada.Text_IO is\n    -- Name --\n    ----------\n \n-   function Name (File : in File_Type) return String is\n+   function Name (File : File_Type) return String is\n    begin\n       return FIO.Name (AP (File));\n    end Name;\n@@ -837,8 +888,8 @@ package body Ada.Text_IO is\n    --------------\n \n    procedure New_Line\n-     (File    : in File_Type;\n-      Spacing : in Positive_Count := 1)\n+     (File    : File_Type;\n+      Spacing : Positive_Count := 1)\n    is\n    begin\n       --  Raise Constraint_Error if out of range value. The reason for this\n@@ -867,7 +918,7 @@ package body Ada.Text_IO is\n       File.Col := 1;\n    end New_Line;\n \n-   procedure New_Line (Spacing : in Positive_Count := 1) is\n+   procedure New_Line (Spacing : Positive_Count := 1) is\n    begin\n       New_Line (Current_Out, Spacing);\n    end New_Line;\n@@ -876,7 +927,7 @@ package body Ada.Text_IO is\n    -- New_Page --\n    --------------\n \n-   procedure New_Page (File : in File_Type) is\n+   procedure New_Page (File : File_Type) is\n    begin\n       FIO.Check_Write_Status (AP (File));\n \n@@ -925,9 +976,9 @@ package body Ada.Text_IO is\n \n    procedure Open\n      (File : in out File_Type;\n-      Mode : in File_Mode;\n-      Name : in String;\n-      Form : in String := \"\")\n+      Mode : File_Mode;\n+      Name : String;\n+      Form : String := \"\")\n    is\n       Dummy_File_Control_Block : Text_AFCB;\n       pragma Warnings (Off, Dummy_File_Control_Block);\n@@ -955,7 +1006,7 @@ package body Ada.Text_IO is\n    --  to exceed the value of Count'Last, i.e. no check is required for\n    --  overflow raising layout error.\n \n-   function Page (File : in File_Type) return Positive_Count is\n+   function Page (File : File_Type) return Positive_Count is\n    begin\n       FIO.Check_File_Open (AP (File));\n       return File.Page;\n@@ -970,7 +1021,7 @@ package body Ada.Text_IO is\n    -- Page_Length --\n    -----------------\n \n-   function Page_Length (File : in File_Type) return Count is\n+   function Page_Length (File : File_Type) return Count is\n    begin\n       FIO.Check_Write_Status (AP (File));\n       return File.Page_Length;\n@@ -986,8 +1037,8 @@ package body Ada.Text_IO is\n    ---------\n \n    procedure Put\n-     (File : in File_Type;\n-      Item : in Character)\n+     (File : File_Type;\n+      Item : Character)\n    is\n    begin\n       FIO.Check_Write_Status (AP (File));\n@@ -1003,7 +1054,7 @@ package body Ada.Text_IO is\n       File.Col := File.Col + 1;\n    end Put;\n \n-   procedure Put (Item : in Character) is\n+   procedure Put (Item : Character) is\n    begin\n       FIO.Check_Write_Status (AP (Current_Out));\n \n@@ -1025,8 +1076,8 @@ package body Ada.Text_IO is\n    ---------\n \n    procedure Put\n-     (File : in File_Type;\n-      Item : in String)\n+     (File : File_Type;\n+      Item : String)\n    is\n    begin\n       FIO.Check_Write_Status (AP (File));\n@@ -1052,7 +1103,7 @@ package body Ada.Text_IO is\n       end if;\n    end Put;\n \n-   procedure Put (Item : in String) is\n+   procedure Put (Item : String) is\n    begin\n       Put (Current_Out, Item);\n    end Put;\n@@ -1062,8 +1113,8 @@ package body Ada.Text_IO is\n    --------------\n \n    procedure Put_Line\n-     (File : in File_Type;\n-      Item : in String)\n+     (File : File_Type;\n+      Item : String)\n    is\n       Ilen   : Natural := Item'Length;\n       Istart : Natural := Item'First;\n@@ -1127,7 +1178,7 @@ package body Ada.Text_IO is\n       end;\n    end Put_Line;\n \n-   procedure Put_Line (Item : in String) is\n+   procedure Put_Line (Item : String) is\n    begin\n       Put_Line (Current_Out, Item);\n    end Put_Line;\n@@ -1231,7 +1282,7 @@ package body Ada.Text_IO is\n \n    procedure Reset\n      (File : in out File_Type;\n-      Mode : in File_Mode)\n+      Mode : File_Mode)\n    is\n    begin\n       --  Don't allow change of mode for current file (RM A.10.2(5))\n@@ -1273,8 +1324,8 @@ package body Ada.Text_IO is\n    -------------\n \n    procedure Set_Col\n-     (File : in File_Type;\n-      To   : in Positive_Count)\n+     (File : File_Type;\n+      To   : Positive_Count)\n    is\n       ch : int;\n \n@@ -1333,7 +1384,7 @@ package body Ada.Text_IO is\n       end if;\n    end Set_Col;\n \n-   procedure Set_Col (To : in Positive_Count) is\n+   procedure Set_Col (To : Positive_Count) is\n    begin\n       Set_Col (Current_Out, To);\n    end Set_Col;\n@@ -1342,7 +1393,7 @@ package body Ada.Text_IO is\n    -- Set_Error --\n    ---------------\n \n-   procedure Set_Error (File : in File_Type) is\n+   procedure Set_Error (File : File_Type) is\n    begin\n       FIO.Check_Write_Status (AP (File));\n       Current_Err := File;\n@@ -1352,7 +1403,7 @@ package body Ada.Text_IO is\n    -- Set_Input --\n    ---------------\n \n-   procedure Set_Input (File : in File_Type) is\n+   procedure Set_Input (File : File_Type) is\n    begin\n       FIO.Check_Read_Status (AP (File));\n       Current_In := File;\n@@ -1363,8 +1414,8 @@ package body Ada.Text_IO is\n    --------------\n \n    procedure Set_Line\n-     (File : in File_Type;\n-      To   : in Positive_Count)\n+     (File : File_Type;\n+      To   : Positive_Count)\n    is\n    begin\n       --  Raise Constraint_Error if out of range value. The reason for this\n@@ -1401,7 +1452,7 @@ package body Ada.Text_IO is\n       end if;\n    end Set_Line;\n \n-   procedure Set_Line (To : in Positive_Count) is\n+   procedure Set_Line (To : Positive_Count) is\n    begin\n       Set_Line (Current_Out, To);\n    end Set_Line;\n@@ -1410,7 +1461,7 @@ package body Ada.Text_IO is\n    -- Set_Line_Length --\n    ---------------------\n \n-   procedure Set_Line_Length (File : in File_Type; To : in Count) is\n+   procedure Set_Line_Length (File : File_Type; To : Count) is\n    begin\n       --  Raise Constraint_Error if out of range value. The reason for this\n       --  explicit test is that we don't want junk values around, even if\n@@ -1424,7 +1475,7 @@ package body Ada.Text_IO is\n       File.Line_Length := To;\n    end Set_Line_Length;\n \n-   procedure Set_Line_Length (To : in Count) is\n+   procedure Set_Line_Length (To : Count) is\n    begin\n       Set_Line_Length (Current_Out, To);\n    end Set_Line_Length;\n@@ -1433,7 +1484,7 @@ package body Ada.Text_IO is\n    -- Set_Output --\n    ----------------\n \n-   procedure Set_Output (File : in File_Type) is\n+   procedure Set_Output (File : File_Type) is\n    begin\n       FIO.Check_Write_Status (AP (File));\n       Current_Out := File;\n@@ -1443,7 +1494,7 @@ package body Ada.Text_IO is\n    -- Set_Page_Length --\n    ---------------------\n \n-   procedure Set_Page_Length (File : in File_Type; To : in Count) is\n+   procedure Set_Page_Length (File : File_Type; To : Count) is\n    begin\n       --  Raise Constraint_Error if out of range value. The reason for this\n       --  explicit test is that we don't want junk values around, even if\n@@ -1457,7 +1508,7 @@ package body Ada.Text_IO is\n       File.Page_Length := To;\n    end Set_Page_Length;\n \n-   procedure Set_Page_Length (To : in Count) is\n+   procedure Set_Page_Length (To : Count) is\n    begin\n       Set_Page_Length (Current_Out, To);\n    end Set_Page_Length;\n@@ -1467,8 +1518,8 @@ package body Ada.Text_IO is\n    ---------------\n \n    procedure Skip_Line\n-     (File    : in File_Type;\n-      Spacing : in Positive_Count := 1)\n+     (File    : File_Type;\n+      Spacing : Positive_Count := 1)\n    is\n       ch : int;\n \n@@ -1548,7 +1599,7 @@ package body Ada.Text_IO is\n       end loop;\n    end Skip_Line;\n \n-   procedure Skip_Line (Spacing : in Positive_Count := 1) is\n+   procedure Skip_Line (Spacing : Positive_Count := 1) is\n    begin\n       Skip_Line (Current_In, Spacing);\n    end Skip_Line;\n@@ -1557,7 +1608,7 @@ package body Ada.Text_IO is\n    -- Skip_Page --\n    ---------------\n \n-   procedure Skip_Page (File : in File_Type) is\n+   procedure Skip_Page (File : File_Type) is\n       ch : int;\n \n    begin\n@@ -1712,7 +1763,7 @@ package body Ada.Text_IO is\n \n    procedure Write\n      (File : in out Text_AFCB;\n-      Item : in Stream_Element_Array)\n+      Item : Stream_Element_Array)\n    is\n \n       function Has_Translated_Characters return Boolean;"}, {"sha": "451c9d0560c878582bfec59f9af8c2ab89a4c6fb", "filename": "gcc/ada/a-textio.ads", "status": "modified", "additions": 58, "deletions": 52, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-textio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-textio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -86,34 +86,34 @@ pragma Elaborate_Body (Text_IO);\n \n    procedure Create\n      (File : in out File_Type;\n-      Mode : in File_Mode := Out_File;\n-      Name : in String := \"\";\n-      Form : in String := \"\");\n+      Mode : File_Mode := Out_File;\n+      Name : String := \"\";\n+      Form : String := \"\");\n \n    procedure Open\n      (File : in out File_Type;\n-      Mode : in File_Mode;\n-      Name : in String;\n-      Form : in String := \"\");\n+      Mode : File_Mode;\n+      Name : String;\n+      Form : String := \"\");\n \n    procedure Close  (File : in out File_Type);\n    procedure Delete (File : in out File_Type);\n-   procedure Reset  (File : in out File_Type; Mode : in File_Mode);\n+   procedure Reset  (File : in out File_Type; Mode : File_Mode);\n    procedure Reset  (File : in out File_Type);\n \n-   function Mode (File : in File_Type) return File_Mode;\n-   function Name (File : in File_Type) return String;\n-   function Form (File : in File_Type) return String;\n+   function Mode (File : File_Type) return File_Mode;\n+   function Name (File : File_Type) return String;\n+   function Form (File : File_Type) return String;\n \n-   function Is_Open (File : in File_Type) return Boolean;\n+   function Is_Open (File : File_Type) return Boolean;\n \n    ------------------------------------------------------\n    -- Control of default input, output and error files --\n    ------------------------------------------------------\n \n-   procedure Set_Input  (File : in File_Type);\n-   procedure Set_Output (File : in File_Type);\n-   procedure Set_Error  (File : in File_Type);\n+   procedure Set_Input  (File : File_Type);\n+   procedure Set_Output (File : File_Type);\n+   procedure Set_Error  (File : File_Type);\n \n    function Standard_Input  return File_Type;\n    function Standard_Output return File_Type;\n@@ -140,76 +140,76 @@ pragma Elaborate_Body (Text_IO);\n    --  Note: The parameter file is IN OUT in the RM, but this is clearly\n    --  an oversight, and was intended to be IN, see AI95-00057.\n \n-   procedure Flush (File : in File_Type);\n+   procedure Flush (File : File_Type);\n    procedure Flush;\n \n    --------------------------------------------\n    -- Specification of line and page lengths --\n    --------------------------------------------\n \n-   procedure Set_Line_Length (File : in File_Type; To : in Count);\n-   procedure Set_Line_Length (To : in Count);\n+   procedure Set_Line_Length (File : File_Type; To : Count);\n+   procedure Set_Line_Length (To : Count);\n \n-   procedure Set_Page_Length (File : in File_Type; To : in Count);\n-   procedure Set_Page_Length (To : in Count);\n+   procedure Set_Page_Length (File : File_Type; To : Count);\n+   procedure Set_Page_Length (To : Count);\n \n-   function Line_Length (File : in File_Type) return Count;\n+   function Line_Length (File : File_Type) return Count;\n    function Line_Length return Count;\n \n-   function Page_Length (File : in File_Type) return Count;\n+   function Page_Length (File : File_Type) return Count;\n    function Page_Length return Count;\n \n    ------------------------------------\n    -- Column, Line, and Page Control --\n    ------------------------------------\n \n-   procedure New_Line (File : in File_Type; Spacing : in Positive_Count := 1);\n-   procedure New_Line (Spacing : in Positive_Count := 1);\n+   procedure New_Line (File : File_Type; Spacing : Positive_Count := 1);\n+   procedure New_Line (Spacing : Positive_Count := 1);\n \n-   procedure Skip_Line (File : in File_Type; Spacing : in Positive_Count := 1);\n-   procedure Skip_Line (Spacing : in Positive_Count := 1);\n+   procedure Skip_Line (File : File_Type; Spacing : Positive_Count := 1);\n+   procedure Skip_Line (Spacing : Positive_Count := 1);\n \n-   function End_Of_Line (File : in File_Type) return Boolean;\n+   function End_Of_Line (File : File_Type) return Boolean;\n    function End_Of_Line return Boolean;\n \n-   procedure New_Page (File : in File_Type);\n+   procedure New_Page (File : File_Type);\n    procedure New_Page;\n \n-   procedure Skip_Page (File : in File_Type);\n+   procedure Skip_Page (File : File_Type);\n    procedure Skip_Page;\n \n-   function End_Of_Page (File : in File_Type) return Boolean;\n+   function End_Of_Page (File : File_Type) return Boolean;\n    function End_Of_Page return Boolean;\n \n-   function End_Of_File (File : in File_Type) return Boolean;\n+   function End_Of_File (File : File_Type) return Boolean;\n    function End_Of_File return Boolean;\n \n-   procedure Set_Col (File : in File_Type;  To : in Positive_Count);\n-   procedure Set_Col (To : in Positive_Count);\n+   procedure Set_Col (File : File_Type;  To : Positive_Count);\n+   procedure Set_Col (To : Positive_Count);\n \n-   procedure Set_Line (File : in File_Type; To : in Positive_Count);\n-   procedure Set_Line (To : in Positive_Count);\n+   procedure Set_Line (File : File_Type; To : Positive_Count);\n+   procedure Set_Line (To : Positive_Count);\n \n-   function Col (File : in File_Type) return Positive_Count;\n+   function Col (File : File_Type) return Positive_Count;\n    function Col return Positive_Count;\n \n-   function Line (File : in File_Type) return Positive_Count;\n+   function Line (File : File_Type) return Positive_Count;\n    function Line return Positive_Count;\n \n-   function Page (File : in File_Type) return Positive_Count;\n+   function Page (File : File_Type) return Positive_Count;\n    function Page return Positive_Count;\n \n    ----------------------------\n    -- Character Input-Output --\n    ----------------------------\n \n-   procedure Get (File : in File_Type; Item : out Character);\n+   procedure Get (File : File_Type; Item : out Character);\n    procedure Get (Item : out Character);\n-   procedure Put (File : in File_Type; Item : in Character);\n-   procedure Put (Item : in Character);\n+   procedure Put (File : File_Type; Item : Character);\n+   procedure Put (Item : Character);\n \n    procedure Look_Ahead\n-     (File        : in File_Type;\n+     (File        : File_Type;\n       Item        : out Character;\n       End_Of_Line : out Boolean);\n \n@@ -218,14 +218,14 @@ pragma Elaborate_Body (Text_IO);\n       End_Of_Line : out Boolean);\n \n    procedure Get_Immediate\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Character);\n \n    procedure Get_Immediate\n      (Item : out Character);\n \n    procedure Get_Immediate\n-     (File      : in File_Type;\n+     (File      : File_Type;\n       Item      : out Character;\n       Available : out Boolean);\n \n@@ -237,26 +237,32 @@ pragma Elaborate_Body (Text_IO);\n    -- String Input-Output --\n    -------------------------\n \n-   procedure Get (File : in File_Type; Item : out String);\n+   procedure Get (File : File_Type; Item : out String);\n    procedure Get (Item : out String);\n-   procedure Put (File : in File_Type; Item : in String);\n-   procedure Put (Item : in String);\n+   procedure Put (File : File_Type; Item : String);\n+   procedure Put (Item : String);\n \n    procedure Get_Line\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out String;\n       Last : out Natural);\n \n    procedure Get_Line\n      (Item : out String;\n       Last : out Natural);\n \n+   function Get_Line (File : File_Type) return String;\n+   pragma Ada_05 (Get_Line);\n+\n+   function Get_Line return String;\n+   pragma Ada_05 (Get_Line);\n+\n    procedure Put_Line\n-     (File : in File_Type;\n-      Item : in String);\n+     (File : File_Type;\n+      Item : String);\n \n    procedure Put_Line\n-     (Item : in String);\n+     (Item : String);\n \n    ---------------------------------------\n    -- Generic packages for Input-Output --\n@@ -375,7 +381,7 @@ private\n \n    procedure Write\n      (File : in out Text_AFCB;\n-      Item : in Ada.Streams.Stream_Element_Array);\n+      Item : Ada.Streams.Stream_Element_Array);\n    --  Write operation used when Text_IO file is treated directly as Stream\n \n    ------------------------"}, {"sha": "cfed9a7f0a4e601f80ffcd41999638707192e746", "filename": "gcc/ada/a-witeio.adb", "status": "modified", "additions": 138, "deletions": 75, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-witeio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-witeio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-witeio.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,6 +40,7 @@ with System.CRTL;\n with System.File_IO;\n with System.WCh_Cnv;       use System.WCh_Cnv;\n with System.WCh_Con;       use System.WCh_Con;\n+\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n@@ -65,14 +66,13 @@ package body Ada.Wide_Text_IO is\n    -- Local Subprograms --\n    -----------------------\n \n-   function Getc_Immed (File : in File_Type) return int;\n+   function Getc_Immed (File : File_Type) return int;\n    --  This routine is identical to Getc, except that the read is done in\n    --  Get_Immediate mode (i.e. without waiting for a line return).\n \n    function Get_Wide_Char_Immed\n      (C    : Character;\n-      File : File_Type)\n-      return Wide_Character;\n+      File : File_Type) return Wide_Character;\n    --  This routine is identical to Get_Wide_Char, except that the reads are\n    --  done in Get_Immediate mode (i.e. without waiting for a line return).\n \n@@ -86,11 +86,9 @@ package body Ada.Wide_Text_IO is\n    -------------------\n \n    function AFCB_Allocate\n-     (Control_Block : Wide_Text_AFCB)\n-      return          FCB.AFCB_Ptr\n+     (Control_Block : Wide_Text_AFCB) return FCB.AFCB_Ptr\n    is\n       pragma Unreferenced (Control_Block);\n-\n    begin\n       return new Wide_Text_AFCB;\n    end AFCB_Allocate;\n@@ -148,7 +146,7 @@ package body Ada.Wide_Text_IO is\n    --  to exceed the value of Count'Last, i.e. no check is required for\n    --  overflow raising layout error.\n \n-   function Col (File : in File_Type) return Positive_Count is\n+   function Col (File : File_Type) return Positive_Count is\n    begin\n       FIO.Check_File_Open (AP (File));\n       return File.Col;\n@@ -165,9 +163,9 @@ package body Ada.Wide_Text_IO is\n \n    procedure Create\n      (File : in out File_Type;\n-      Mode : in File_Mode := Out_File;\n-      Name : in String := \"\";\n-      Form : in String := \"\")\n+      Mode : File_Mode := Out_File;\n+      Name : String := \"\";\n+      Form : String := \"\")\n    is\n       Dummy_File_Control_Block : Wide_Text_AFCB;\n       pragma Warnings (Off, Dummy_File_Control_Block);\n@@ -241,7 +239,7 @@ package body Ada.Wide_Text_IO is\n    -- End_Of_File --\n    -----------------\n \n-   function End_Of_File (File : in File_Type) return Boolean is\n+   function End_Of_File (File : File_Type) return Boolean is\n       ch  : int;\n \n    begin\n@@ -302,7 +300,7 @@ package body Ada.Wide_Text_IO is\n    -- End_Of_Line --\n    -----------------\n \n-   function End_Of_Line (File : in File_Type) return Boolean is\n+   function End_Of_Line (File : File_Type) return Boolean is\n       ch : int;\n \n    begin\n@@ -336,7 +334,7 @@ package body Ada.Wide_Text_IO is\n    -- End_Of_Page --\n    -----------------\n \n-   function End_Of_Page (File : in File_Type) return Boolean is\n+   function End_Of_Page (File : File_Type) return Boolean is\n       ch  : int;\n \n    begin\n@@ -386,7 +384,7 @@ package body Ada.Wide_Text_IO is\n    -- Flush --\n    -----------\n \n-   procedure Flush (File : in File_Type) is\n+   procedure Flush (File : File_Type) is\n    begin\n       FIO.Flush (AP (File));\n    end Flush;\n@@ -400,7 +398,7 @@ package body Ada.Wide_Text_IO is\n    -- Form --\n    ----------\n \n-   function Form (File : in File_Type) return String is\n+   function Form (File : File_Type) return String is\n    begin\n       return FIO.Form (AP (File));\n    end Form;\n@@ -410,7 +408,7 @@ package body Ada.Wide_Text_IO is\n    ---------\n \n    procedure Get\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Wide_Character)\n    is\n       C  : Character;\n@@ -434,7 +432,7 @@ package body Ada.Wide_Text_IO is\n    end Get;\n \n    procedure Get\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Wide_String)\n    is\n    begin\n@@ -453,7 +451,7 @@ package body Ada.Wide_Text_IO is\n    -------------------\n \n    procedure Get_Character\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Character)\n    is\n       ch : int;\n@@ -501,7 +499,7 @@ package body Ada.Wide_Text_IO is\n    -------------------\n \n    procedure Get_Immediate\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Wide_Character)\n    is\n       ch : int;\n@@ -537,7 +535,7 @@ package body Ada.Wide_Text_IO is\n    end Get_Immediate;\n \n    procedure Get_Immediate\n-     (File      : in File_Type;\n+     (File      : File_Type;\n       Item      : out Wide_Character;\n       Available : out Boolean)\n    is\n@@ -580,7 +578,7 @@ package body Ada.Wide_Text_IO is\n    --------------\n \n    procedure Get_Line\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Wide_String;\n       Last : out Natural)\n    is\n@@ -671,22 +669,78 @@ package body Ada.Wide_Text_IO is\n       Get_Line (Current_In, Item, Last);\n    end Get_Line;\n \n+   function Get_Line (File : File_Type) return Wide_String is\n+      Buffer : Wide_String (1 .. 500);\n+      Last   : Natural;\n+\n+      function Get_Rest (S : Wide_String) return Wide_String;\n+      --  This is a recursive function that reads the rest of the line and\n+      --  returns it. S is the part read so far.\n+\n+      --------------\n+      -- Get_Rest --\n+      --------------\n+\n+      function Get_Rest (S : Wide_String) return Wide_String is\n+\n+         --  Each time we allocate a buffer the same size as what we have\n+         --  read so far. This limits us to a logarithmic number of calls\n+         --  to Get_Rest and also ensures only a linear use of stack space.\n+\n+         Buffer : Wide_String (1 .. S'Length);\n+         Last   : Natural;\n+\n+      begin\n+         Get_Line (File, Buffer, Last);\n+\n+         declare\n+            R : constant Wide_String := S & Buffer (1 .. Last);\n+         begin\n+            if Last < Buffer'Last then\n+               return R;\n+            else\n+               return Get_Rest (R);\n+            end if;\n+         end;\n+      end Get_Rest;\n+\n+   --  Start of processing for Get_Line\n+\n+   begin\n+      Get_Line (File, Buffer, Last);\n+\n+      if Last < Buffer'Last then\n+         return Buffer (1 .. Last);\n+      else\n+         return Get_Rest (Buffer (1 .. Last));\n+      end if;\n+   end Get_Line;\n+\n+   function Get_Line return Wide_String is\n+   begin\n+      return Get_Line (Current_In);\n+   end Get_Line;\n+\n    -------------------\n    -- Get_Wide_Char --\n    -------------------\n \n    function Get_Wide_Char\n      (C    : Character;\n-      File : File_Type)\n-      return Wide_Character\n+      File : File_Type) return Wide_Character\n    is\n       function In_Char return Character;\n       --  Function used to obtain additional characters it the wide character\n       --  sequence is more than one character long.\n \n+      function WC_In is new Char_Sequence_To_Wide_Char (In_Char);\n+\n+      -------------\n+      -- In_Char --\n+      -------------\n+\n       function In_Char return Character is\n          ch : constant Integer := Getc (File);\n-\n       begin\n          if ch = EOF then\n             raise End_Error;\n@@ -695,7 +749,7 @@ package body Ada.Wide_Text_IO is\n          end if;\n       end In_Char;\n \n-      function WC_In is new Char_Sequence_To_Wide_Char (In_Char);\n+   --  Start of processing for In_Char\n \n    begin\n       return WC_In (C, File.WC_Method);\n@@ -707,16 +761,20 @@ package body Ada.Wide_Text_IO is\n \n    function Get_Wide_Char_Immed\n      (C    : Character;\n-      File : File_Type)\n-      return Wide_Character\n+      File : File_Type) return Wide_Character\n    is\n       function In_Char return Character;\n       --  Function used to obtain additional characters it the wide character\n       --  sequence is more than one character long.\n \n+      function WC_In is new Char_Sequence_To_Wide_Char (In_Char);\n+\n+      -------------\n+      -- In_Char --\n+      -------------\n+\n       function In_Char return Character is\n          ch : constant Integer := Getc_Immed (File);\n-\n       begin\n          if ch = EOF then\n             raise End_Error;\n@@ -725,7 +783,7 @@ package body Ada.Wide_Text_IO is\n          end if;\n       end In_Char;\n \n-      function WC_In is new Char_Sequence_To_Wide_Char (In_Char);\n+   --  Start of processing for Get_Wide_Char_Immed\n \n    begin\n       return WC_In (C, File.WC_Method);\n@@ -752,7 +810,7 @@ package body Ada.Wide_Text_IO is\n    -- Getc_Immed --\n    ----------------\n \n-   function Getc_Immed (File : in File_Type) return int is\n+   function Getc_Immed (File : File_Type) return int is\n       ch          : int;\n       end_of_file : int;\n \n@@ -785,7 +843,7 @@ package body Ada.Wide_Text_IO is\n    -- Is_Open --\n    -------------\n \n-   function Is_Open (File : in File_Type) return Boolean is\n+   function Is_Open (File : File_Type) return Boolean is\n    begin\n       return FIO.Is_Open (AP (File));\n    end Is_Open;\n@@ -798,7 +856,7 @@ package body Ada.Wide_Text_IO is\n    --  to exceed the value of Count'Last, i.e. no check is required for\n    --  overflow raising layout error.\n \n-   function Line (File : in File_Type) return Positive_Count is\n+   function Line (File : File_Type) return Positive_Count is\n    begin\n       FIO.Check_File_Open (AP (File));\n       return File.Line;\n@@ -813,7 +871,7 @@ package body Ada.Wide_Text_IO is\n    -- Line_Length --\n    -----------------\n \n-   function Line_Length (File : in File_Type) return Count is\n+   function Line_Length (File : File_Type) return Count is\n    begin\n       FIO.Check_Write_Status (AP (File));\n       return File.Line_Length;\n@@ -829,7 +887,7 @@ package body Ada.Wide_Text_IO is\n    ----------------\n \n    procedure Look_Ahead\n-     (File        : in File_Type;\n+     (File        : File_Type;\n       Item        : out Wide_Character;\n       End_Of_Line : out Boolean)\n    is\n@@ -902,7 +960,7 @@ package body Ada.Wide_Text_IO is\n    -- Mode --\n    ----------\n \n-   function Mode (File : in File_Type) return File_Mode is\n+   function Mode (File : File_Type) return File_Mode is\n    begin\n       return To_TIO (FIO.Mode (AP (File)));\n    end Mode;\n@@ -911,7 +969,7 @@ package body Ada.Wide_Text_IO is\n    -- Name --\n    ----------\n \n-   function Name (File : in File_Type) return String is\n+   function Name (File : File_Type) return String is\n    begin\n       return FIO.Name (AP (File));\n    end Name;\n@@ -921,8 +979,8 @@ package body Ada.Wide_Text_IO is\n    --------------\n \n    procedure New_Line\n-     (File    : in File_Type;\n-      Spacing : in Positive_Count := 1)\n+     (File    : File_Type;\n+      Spacing : Positive_Count := 1)\n    is\n    begin\n       --  Raise Constraint_Error if out of range value. The reason for this\n@@ -951,7 +1009,7 @@ package body Ada.Wide_Text_IO is\n       File.Col := 1;\n    end New_Line;\n \n-   procedure New_Line (Spacing : in Positive_Count := 1) is\n+   procedure New_Line (Spacing : Positive_Count := 1) is\n    begin\n       New_Line (Current_Out, Spacing);\n    end New_Line;\n@@ -960,7 +1018,7 @@ package body Ada.Wide_Text_IO is\n    -- New_Page --\n    --------------\n \n-   procedure New_Page (File : in File_Type) is\n+   procedure New_Page (File : File_Type) is\n    begin\n       FIO.Check_Write_Status (AP (File));\n \n@@ -1009,9 +1067,9 @@ package body Ada.Wide_Text_IO is\n \n    procedure Open\n      (File : in out File_Type;\n-      Mode : in File_Mode;\n-      Name : in String;\n-      Form : in String := \"\")\n+      Mode : File_Mode;\n+      Name : String;\n+      Form : String := \"\")\n    is\n       Dummy_File_Control_Block : Wide_Text_AFCB;\n       pragma Warnings (Off, Dummy_File_Control_Block);\n@@ -1038,7 +1096,7 @@ package body Ada.Wide_Text_IO is\n    --  to exceed the value of Count'Last, i.e. no check is required for\n    --  overflow raising layout error.\n \n-   function Page (File : in File_Type) return Positive_Count is\n+   function Page (File : File_Type) return Positive_Count is\n    begin\n       FIO.Check_File_Open (AP (File));\n       return File.Page;\n@@ -1053,7 +1111,7 @@ package body Ada.Wide_Text_IO is\n    -- Page_Length --\n    -----------------\n \n-   function Page_Length (File : in File_Type) return Count is\n+   function Page_Length (File : File_Type) return Count is\n    begin\n       FIO.Check_Write_Status (AP (File));\n       return File.Page_Length;\n@@ -1069,25 +1127,30 @@ package body Ada.Wide_Text_IO is\n    ---------\n \n    procedure Put\n-     (File : in File_Type;\n-      Item : in Wide_Character)\n+     (File : File_Type;\n+      Item : Wide_Character)\n    is\n       procedure Out_Char (C : Character);\n       --  Procedure to output one character of a wide character sequence\n \n+      procedure WC_Out is new Wide_Char_To_Char_Sequence (Out_Char);\n+      --------------\n+      -- Out_Char --\n+      --------------\n+\n       procedure Out_Char (C : Character) is\n       begin\n          Putc (Character'Pos (C), File);\n       end Out_Char;\n \n-      procedure WC_Out is new Wide_Char_To_Char_Sequence (Out_Char);\n+   --  Start of processing for Put\n \n    begin\n       WC_Out (Item, File.WC_Method);\n       File.Col := File.Col + 1;\n    end Put;\n \n-   procedure Put (Item : in Wide_Character) is\n+   procedure Put (Item : Wide_Character) is\n    begin\n       Put (Current_Out, Item);\n    end Put;\n@@ -1097,16 +1160,16 @@ package body Ada.Wide_Text_IO is\n    ---------\n \n    procedure Put\n-     (File : in File_Type;\n-      Item : in Wide_String)\n+     (File : File_Type;\n+      Item : Wide_String)\n    is\n    begin\n       for J in Item'Range loop\n          Put (File, Item (J));\n       end loop;\n    end Put;\n \n-   procedure Put (Item : in Wide_String) is\n+   procedure Put (Item : Wide_String) is\n    begin\n       Put (Current_Out, Item);\n    end Put;\n@@ -1116,15 +1179,15 @@ package body Ada.Wide_Text_IO is\n    --------------\n \n    procedure Put_Line\n-     (File : in File_Type;\n-      Item : in Wide_String)\n+     (File : File_Type;\n+      Item : Wide_String)\n    is\n    begin\n       Put (File, Item);\n       New_Line (File);\n    end Put_Line;\n \n-   procedure Put_Line (Item : in Wide_String) is\n+   procedure Put_Line (Item : Wide_String) is\n    begin\n       Put (Current_Out, Item);\n       New_Line (Current_Out);\n@@ -1231,7 +1294,7 @@ package body Ada.Wide_Text_IO is\n \n    procedure Reset\n      (File : in out File_Type;\n-      Mode : in File_Mode)\n+      Mode : File_Mode)\n    is\n    begin\n       --  Don't allow change of mode for current file (RM A.10.2(5))\n@@ -1273,8 +1336,8 @@ package body Ada.Wide_Text_IO is\n    -------------\n \n    procedure Set_Col\n-     (File : in File_Type;\n-      To   : in Positive_Count)\n+     (File : File_Type;\n+      To   : Positive_Count)\n    is\n       ch : int;\n \n@@ -1333,7 +1396,7 @@ package body Ada.Wide_Text_IO is\n       end if;\n    end Set_Col;\n \n-   procedure Set_Col (To : in Positive_Count) is\n+   procedure Set_Col (To : Positive_Count) is\n    begin\n       Set_Col (Current_Out, To);\n    end Set_Col;\n@@ -1342,7 +1405,7 @@ package body Ada.Wide_Text_IO is\n    -- Set_Error --\n    ---------------\n \n-   procedure Set_Error (File : in File_Type) is\n+   procedure Set_Error (File : File_Type) is\n    begin\n       FIO.Check_Write_Status (AP (File));\n       Current_Err := File;\n@@ -1352,7 +1415,7 @@ package body Ada.Wide_Text_IO is\n    -- Set_Input --\n    ---------------\n \n-   procedure Set_Input (File : in File_Type) is\n+   procedure Set_Input (File : File_Type) is\n    begin\n       FIO.Check_Read_Status (AP (File));\n       Current_In := File;\n@@ -1363,8 +1426,8 @@ package body Ada.Wide_Text_IO is\n    --------------\n \n    procedure Set_Line\n-     (File : in File_Type;\n-      To   : in Positive_Count)\n+     (File : File_Type;\n+      To   : Positive_Count)\n    is\n    begin\n       --  Raise Constraint_Error if out of range value. The reason for this\n@@ -1401,7 +1464,7 @@ package body Ada.Wide_Text_IO is\n       end if;\n    end Set_Line;\n \n-   procedure Set_Line (To : in Positive_Count) is\n+   procedure Set_Line (To : Positive_Count) is\n    begin\n       Set_Line (Current_Out, To);\n    end Set_Line;\n@@ -1410,7 +1473,7 @@ package body Ada.Wide_Text_IO is\n    -- Set_Line_Length --\n    ---------------------\n \n-   procedure Set_Line_Length (File : in File_Type; To : in Count) is\n+   procedure Set_Line_Length (File : File_Type; To : Count) is\n    begin\n       --  Raise Constraint_Error if out of range value. The reason for this\n       --  explicit test is that we don't want junk values around, even if\n@@ -1424,7 +1487,7 @@ package body Ada.Wide_Text_IO is\n       File.Line_Length := To;\n    end Set_Line_Length;\n \n-   procedure Set_Line_Length (To : in Count) is\n+   procedure Set_Line_Length (To : Count) is\n    begin\n       Set_Line_Length (Current_Out, To);\n    end Set_Line_Length;\n@@ -1433,7 +1496,7 @@ package body Ada.Wide_Text_IO is\n    -- Set_Output --\n    ----------------\n \n-   procedure Set_Output (File : in File_Type) is\n+   procedure Set_Output (File : File_Type) is\n    begin\n       FIO.Check_Write_Status (AP (File));\n       Current_Out := File;\n@@ -1443,7 +1506,7 @@ package body Ada.Wide_Text_IO is\n    -- Set_Page_Length --\n    ---------------------\n \n-   procedure Set_Page_Length (File : in File_Type; To : in Count) is\n+   procedure Set_Page_Length (File : File_Type; To : Count) is\n    begin\n       --  Raise Constraint_Error if out of range value. The reason for this\n       --  explicit test is that we don't want junk values around, even if\n@@ -1457,7 +1520,7 @@ package body Ada.Wide_Text_IO is\n       File.Page_Length := To;\n    end Set_Page_Length;\n \n-   procedure Set_Page_Length (To : in Count) is\n+   procedure Set_Page_Length (To : Count) is\n    begin\n       Set_Page_Length (Current_Out, To);\n    end Set_Page_Length;\n@@ -1497,8 +1560,8 @@ package body Ada.Wide_Text_IO is\n    ---------------\n \n    procedure Skip_Line\n-     (File    : in File_Type;\n-      Spacing : in Positive_Count := 1)\n+     (File    : File_Type;\n+      Spacing : Positive_Count := 1)\n    is\n       ch : int;\n \n@@ -1580,7 +1643,7 @@ package body Ada.Wide_Text_IO is\n       File.Before_Wide_Character := False;\n    end Skip_Line;\n \n-   procedure Skip_Line (Spacing : in Positive_Count := 1) is\n+   procedure Skip_Line (Spacing : Positive_Count := 1) is\n    begin\n       Skip_Line (Current_In, Spacing);\n    end Skip_Line;\n@@ -1589,7 +1652,7 @@ package body Ada.Wide_Text_IO is\n    -- Skip_Page --\n    ---------------\n \n-   procedure Skip_Page (File : in File_Type) is\n+   procedure Skip_Page (File : File_Type) is\n       ch : int;\n \n    begin\n@@ -1741,7 +1804,7 @@ package body Ada.Wide_Text_IO is\n \n    procedure Write\n      (File : in out Wide_Text_AFCB;\n-      Item : in Stream_Element_Array)\n+      Item : Stream_Element_Array)\n    is\n       Siz : constant size_t := Item'Length;\n "}, {"sha": "ee9dc8639baf3b3b6cc031d363be69fa02747d15", "filename": "gcc/ada/a-witeio.ads", "status": "modified", "additions": 60, "deletions": 55, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-witeio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-witeio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-witeio.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -89,34 +89,34 @@ package Ada.Wide_Text_IO is\n \n    procedure Create\n      (File : in out File_Type;\n-      Mode : in File_Mode := Out_File;\n-      Name : in String := \"\";\n-      Form : in String := \"\");\n+      Mode : File_Mode := Out_File;\n+      Name : String := \"\";\n+      Form : String := \"\");\n \n    procedure Open\n      (File : in out File_Type;\n-      Mode : in File_Mode;\n-      Name : in String;\n-      Form : in String := \"\");\n+      Mode : File_Mode;\n+      Name : String;\n+      Form : String := \"\");\n \n    procedure Close  (File : in out File_Type);\n    procedure Delete (File : in out File_Type);\n-   procedure Reset  (File : in out File_Type; Mode : in File_Mode);\n+   procedure Reset  (File : in out File_Type; Mode : File_Mode);\n    procedure Reset  (File : in out File_Type);\n \n-   function Mode (File : in File_Type) return File_Mode;\n-   function Name (File : in File_Type) return String;\n-   function Form (File : in File_Type) return String;\n+   function Mode (File : File_Type) return File_Mode;\n+   function Name (File : File_Type) return String;\n+   function Form (File : File_Type) return String;\n \n-   function Is_Open (File : in File_Type) return Boolean;\n+   function Is_Open (File : File_Type) return Boolean;\n \n    ------------------------------------------------------\n    -- Control of default input, output and error files --\n    ------------------------------------------------------\n \n-   procedure Set_Input  (File : in File_Type);\n-   procedure Set_Output (File : in File_Type);\n-   procedure Set_Error  (File : in File_Type);\n+   procedure Set_Input  (File : File_Type);\n+   procedure Set_Output (File : File_Type);\n+   procedure Set_Error  (File : File_Type);\n \n    function Standard_Input  return File_Type;\n    function Standard_Output return File_Type;\n@@ -143,76 +143,76 @@ package Ada.Wide_Text_IO is\n    --  Note: The paramter file is in out in the RM, but as pointed out\n    --  in <<95-5166.a Tucker Taft 95-6-23>> this is clearly an oversight.\n \n-   procedure Flush (File : in File_Type);\n+   procedure Flush (File : File_Type);\n    procedure Flush;\n \n    --------------------------------------------\n    -- Specification of line and page lengths --\n    --------------------------------------------\n \n-   procedure Set_Line_Length (File : in File_Type; To : in Count);\n-   procedure Set_Line_Length (To : in Count);\n+   procedure Set_Line_Length (File : File_Type; To : Count);\n+   procedure Set_Line_Length (To : Count);\n \n-   procedure Set_Page_Length (File : in File_Type; To : in Count);\n-   procedure Set_Page_Length (To : in Count);\n+   procedure Set_Page_Length (File : File_Type; To : Count);\n+   procedure Set_Page_Length (To : Count);\n \n-   function Line_Length (File : in File_Type) return Count;\n+   function Line_Length (File : File_Type) return Count;\n    function Line_Length return Count;\n \n-   function Page_Length (File : in File_Type) return Count;\n+   function Page_Length (File : File_Type) return Count;\n    function Page_Length return Count;\n \n    ------------------------------------\n    -- Column, Line, and Page Control --\n    ------------------------------------\n \n-   procedure New_Line (File : in File_Type; Spacing : in Positive_Count := 1);\n-   procedure New_Line (Spacing : in Positive_Count := 1);\n+   procedure New_Line (File : File_Type; Spacing : Positive_Count := 1);\n+   procedure New_Line (Spacing : Positive_Count := 1);\n \n-   procedure Skip_Line (File : in File_Type; Spacing : in Positive_Count := 1);\n-   procedure Skip_Line (Spacing : in Positive_Count := 1);\n+   procedure Skip_Line (File : File_Type; Spacing : Positive_Count := 1);\n+   procedure Skip_Line (Spacing : Positive_Count := 1);\n \n-   function End_Of_Line (File : in File_Type) return Boolean;\n+   function End_Of_Line (File : File_Type) return Boolean;\n    function End_Of_Line return Boolean;\n \n-   procedure New_Page (File : in File_Type);\n+   procedure New_Page (File : File_Type);\n    procedure New_Page;\n \n-   procedure Skip_Page (File : in File_Type);\n+   procedure Skip_Page (File : File_Type);\n    procedure Skip_Page;\n \n-   function End_Of_Page (File : in File_Type) return Boolean;\n+   function End_Of_Page (File : File_Type) return Boolean;\n    function End_Of_Page return Boolean;\n \n-   function End_Of_File (File : in File_Type) return Boolean;\n+   function End_Of_File (File : File_Type) return Boolean;\n    function End_Of_File return Boolean;\n \n-   procedure Set_Col (File : in File_Type;  To : in Positive_Count);\n-   procedure Set_Col (To : in Positive_Count);\n+   procedure Set_Col (File : File_Type;  To : Positive_Count);\n+   procedure Set_Col (To : Positive_Count);\n \n-   procedure Set_Line (File : in File_Type; To : in Positive_Count);\n-   procedure Set_Line (To : in Positive_Count);\n+   procedure Set_Line (File : File_Type; To : Positive_Count);\n+   procedure Set_Line (To : Positive_Count);\n \n-   function Col (File : in File_Type) return Positive_Count;\n+   function Col (File : File_Type) return Positive_Count;\n    function Col return Positive_Count;\n \n-   function Line (File : in File_Type) return Positive_Count;\n+   function Line (File : File_Type) return Positive_Count;\n    function Line return Positive_Count;\n \n-   function Page (File : in File_Type) return Positive_Count;\n+   function Page (File : File_Type) return Positive_Count;\n    function Page return Positive_Count;\n \n    ----------------------------\n    -- Character Input-Output --\n    ----------------------------\n \n-   procedure Get (File : in File_Type; Item : out Wide_Character);\n+   procedure Get (File : File_Type; Item : out Wide_Character);\n    procedure Get (Item : out Wide_Character);\n-   procedure Put (File : in File_Type; Item : in Wide_Character);\n-   procedure Put (Item : in Wide_Character);\n+   procedure Put (File : File_Type; Item : Wide_Character);\n+   procedure Put (Item : Wide_Character);\n \n    procedure Look_Ahead\n-     (File        : in File_Type;\n+     (File        : File_Type;\n       Item        : out Wide_Character;\n       End_Of_Line : out Boolean);\n \n@@ -221,14 +221,14 @@ package Ada.Wide_Text_IO is\n       End_Of_Line : out Boolean);\n \n    procedure Get_Immediate\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Wide_Character);\n \n    procedure Get_Immediate\n      (Item : out Wide_Character);\n \n    procedure Get_Immediate\n-     (File      : in File_Type;\n+     (File      : File_Type;\n       Item      : out Wide_Character;\n       Available : out Boolean);\n \n@@ -240,26 +240,32 @@ package Ada.Wide_Text_IO is\n    -- String Input-Output --\n    -------------------------\n \n-   procedure Get (File : in File_Type; Item : out Wide_String);\n+   procedure Get (File : File_Type; Item : out Wide_String);\n    procedure Get (Item : out Wide_String);\n-   procedure Put (File : in File_Type; Item : in Wide_String);\n-   procedure Put (Item : in Wide_String);\n+   procedure Put (File : File_Type; Item : Wide_String);\n+   procedure Put (Item : Wide_String);\n \n    procedure Get_Line\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Wide_String;\n       Last : out Natural);\n \n    procedure Get_Line\n      (Item : out Wide_String;\n       Last : out Natural);\n \n+   function Get_Line (File : File_Type) return Wide_String;\n+   pragma Ada_05 (Get_Line);\n+\n+   function Get_Line return Wide_String;\n+   pragma Ada_05 (Get_Line);\n+\n    procedure Put_Line\n-     (File : in File_Type;\n-      Item : in Wide_String);\n+     (File : File_Type;\n+      Item : Wide_String);\n \n    procedure Put_Line\n-     (Item : in Wide_String);\n+     (Item : Wide_String);\n \n    ---------------------------------------\n    -- Generic packages for Input-Output --\n@@ -398,7 +404,7 @@ private\n \n    procedure Write\n      (File : in out Wide_Text_AFCB;\n-      Item : in Ada.Streams.Stream_Element_Array);\n+      Item : Ada.Streams.Stream_Element_Array);\n    --  Write operation used when Wide_Text_IO file is treated as a Stream\n \n    ------------------------\n@@ -440,7 +446,7 @@ private\n    --  occurs. The result is EOF if the end of file was read.\n \n    procedure Get_Character\n-     (File : in File_Type;\n+     (File : File_Type;\n       Item : out Character);\n    --  This is essentially a copy of the normal Get routine from Text_IO. It\n    --  obtains a single character from the input file File, and places it in\n@@ -449,8 +455,7 @@ private\n \n    function Get_Wide_Char\n      (C    : Character;\n-      File : File_Type)\n-      return Wide_Character;\n+      File : File_Type) return Wide_Character;\n    --  This function is shared by Get and Get_Immediate to extract a wide\n    --  character value from the given File. The first byte has already been\n    --  read and is passed in C. The wide character value is returned as the"}, {"sha": "aecad0046bb3920fc0551b3ba524900cbf802b40", "filename": "gcc/ada/a-wtcoau.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtcoau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtcoau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtcoau.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,7 +45,7 @@ package body Ada.Wide_Text_IO.Complex_Aux is\n    ---------\n \n    procedure Get\n-     (File  : in  File_Type;\n+     (File  : File_Type;\n       ItemR : out Long_Long_Float;\n       ItemI : out Long_Long_Float;\n       Width : Field)\n@@ -96,7 +96,7 @@ package body Ada.Wide_Text_IO.Complex_Aux is\n    ----------\n \n    procedure Gets\n-     (From  : in String;\n+     (From  : String;\n       ItemR : out Long_Long_Float;\n       ItemI : out Long_Long_Float;\n       Last  : out Positive)\n@@ -163,8 +163,8 @@ package body Ada.Wide_Text_IO.Complex_Aux is\n      (To    : out String;\n       ItemR : Long_Long_Float;\n       ItemI : Long_Long_Float;\n-      Aft   : in  Field;\n-      Exp   : in  Field)\n+      Aft   :  Field;\n+      Exp   :  Field)\n    is\n       I_String : String (1 .. 3 * Field'Last);\n       R_String : String (1 .. 3 * Field'Last);"}, {"sha": "95aa34592688ad787c9daea8d0bbe843e48ffb61", "filename": "gcc/ada/a-wtcoau.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtcoau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtcoau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtcoau.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,7 @@\n package Ada.Wide_Text_IO.Complex_Aux is\n \n    procedure Get\n-     (File  : in  File_Type;\n+     (File  : File_Type;\n       ItemR : out Long_Long_Float;\n       ItemI : out Long_Long_Float;\n       Width : Field);"}, {"sha": "bdac8ee503192e40dccf0fe88766e23283f0b4c9", "filename": "gcc/ada/a-wtcoio.adb", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtcoio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtcoio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtcoio.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,6 +32,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Wide_Text_IO.Complex_Aux;\n+\n with System.WCh_Con; use System.WCh_Con;\n with System.WCh_WtS; use System.WCh_WtS;\n \n@@ -44,9 +45,6 @@ package body Ada.Wide_Text_IO.Complex_IO is\n    subtype LLF is Long_Long_Float;\n    --  Type used for calls to routines in Aux\n \n---   subtype TFT is Ada.Wide_Text_IO.File_Type;\n-   --  File type required for calls to routines in Aux\n-\n    function TFT is new\n      Ada.Unchecked_Conversion (File_Type, Ada.Wide_Text_IO.File_Type);\n    --  This unchecked conversion is to get around a visibility bug in\n@@ -58,12 +56,12 @@ package body Ada.Wide_Text_IO.Complex_IO is\n    ---------\n \n    procedure Get\n-     (File  : in  File_Type;\n+     (File  :  File_Type;\n       Item  : out Complex;\n-      Width : in  Field := 0)\n+      Width :  Field := 0)\n    is\n-      Real_Item  : Real'Base;\n-      Imag_Item  : Real'Base;\n+      Real_Item : Real'Base;\n+      Imag_Item : Real'Base;\n \n    begin\n       Aux.Get (TFT (File), LLF (Real_Item), LLF (Imag_Item), Width);\n@@ -79,7 +77,7 @@ package body Ada.Wide_Text_IO.Complex_IO is\n \n    procedure Get\n      (Item  : out Complex;\n-      Width : in  Field := 0)\n+      Width : Field := 0)\n    is\n    begin\n       Get (Current_Input, Item, Width);\n@@ -90,7 +88,7 @@ package body Ada.Wide_Text_IO.Complex_IO is\n    ---------\n \n    procedure Get\n-     (From : in  Wide_String;\n+     (From : Wide_String;\n       Item : out Complex;\n       Last : out Positive)\n    is\n@@ -116,11 +114,11 @@ package body Ada.Wide_Text_IO.Complex_IO is\n    ---------\n \n    procedure Put\n-     (File : in File_Type;\n-      Item : in Complex;\n-      Fore : in Field := Default_Fore;\n-      Aft  : in Field := Default_Aft;\n-      Exp  : in Field := Default_Exp)\n+     (File : File_Type;\n+      Item : Complex;\n+      Fore : Field := Default_Fore;\n+      Aft  : Field := Default_Aft;\n+      Exp  : Field := Default_Exp)\n    is\n    begin\n       Aux.Put (TFT (File), LLF (Re (Item)), LLF (Im (Item)), Fore, Aft, Exp);\n@@ -131,10 +129,10 @@ package body Ada.Wide_Text_IO.Complex_IO is\n    ---------\n \n    procedure Put\n-     (Item : in Complex;\n-      Fore : in Field := Default_Fore;\n-      Aft  : in Field := Default_Aft;\n-      Exp  : in Field := Default_Exp)\n+     (Item : Complex;\n+      Fore : Field := Default_Fore;\n+      Aft  : Field := Default_Aft;\n+      Exp  : Field := Default_Exp)\n    is\n    begin\n       Put (Current_Output, Item, Fore, Aft, Exp);\n@@ -146,9 +144,9 @@ package body Ada.Wide_Text_IO.Complex_IO is\n \n    procedure Put\n      (To   : out Wide_String;\n-      Item : in  Complex;\n-      Aft  : in  Field := Default_Aft;\n-      Exp  : in  Field := Default_Exp)\n+      Item : Complex;\n+      Aft  : Field := Default_Aft;\n+      Exp  : Field := Default_Exp)\n    is\n       S : String (To'First .. To'Last);\n "}, {"sha": "14bf5e76ca32ee57b2d4b3ffc449bef842151991", "filename": "gcc/ada/a-wtcoio.ads", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtcoio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtcoio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtcoio.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -27,36 +27,36 @@ package Ada.Wide_Text_IO.Complex_IO is\n    Default_Exp  : Field := 3;\n \n    procedure Get\n-     (File  : in  File_Type;\n+     (File  : File_Type;\n       Item  : out Complex;\n-      Width : in  Field := 0);\n+      Width : Field := 0);\n \n    procedure Get\n      (Item  : out Complex;\n-      Width : in  Field := 0);\n+      Width : Field := 0);\n \n    procedure Put\n-     (File : in File_Type;\n-      Item : in Complex;\n-      Fore : in Field := Default_Fore;\n-      Aft  : in Field := Default_Aft;\n-      Exp  : in Field := Default_Exp);\n+     (File : File_Type;\n+      Item : Complex;\n+      Fore : Field := Default_Fore;\n+      Aft  : Field := Default_Aft;\n+      Exp  : Field := Default_Exp);\n \n    procedure Put\n-     (Item : in Complex;\n-      Fore : in Field := Default_Fore;\n-      Aft  : in Field := Default_Aft;\n-      Exp  : in Field := Default_Exp);\n+     (Item : Complex;\n+      Fore : Field := Default_Fore;\n+      Aft  : Field := Default_Aft;\n+      Exp  : Field := Default_Exp);\n \n    procedure Get\n-     (From : in  Wide_String;\n+     (From : Wide_String;\n       Item : out Complex;\n       Last : out Positive);\n \n    procedure Put\n      (To   : out Wide_String;\n-      Item : in  Complex;\n-      Aft  : in  Field := Default_Aft;\n-      Exp  : in  Field := Default_Exp);\n+      Item : Complex;\n+      Aft  : Field := Default_Aft;\n+      Exp  : Field := Default_Exp);\n \n end Ada.Wide_Text_IO.Complex_IO;"}, {"sha": "2f0f4fb994f8dbdbaa5305c3c9cac6a007bfb2ed", "filename": "gcc/ada/a-wtedit.adb", "status": "modified", "additions": 48, "deletions": 60, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtedit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtedit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtedit.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -69,13 +69,12 @@ package body Ada.Wide_Text_IO.Editing is\n       -----------\n \n       function Image\n-        (Item       : in Num;\n-         Pic        : in Picture;\n-         Currency   : in Wide_String    := Default_Currency;\n-         Fill       : in Wide_Character := Default_Fill;\n-         Separator  : in Wide_Character := Default_Separator;\n-         Radix_Mark : in Wide_Character := Default_Radix_Mark)\n-         return       Wide_String\n+        (Item       : Num;\n+         Pic        : Picture;\n+         Currency   : Wide_String    := Default_Currency;\n+         Fill       : Wide_Character := Default_Fill;\n+         Separator  : Wide_Character := Default_Separator;\n+         Radix_Mark : Wide_Character := Default_Radix_Mark) return Wide_String\n       is\n       begin\n          return Format_Number\n@@ -88,9 +87,8 @@ package body Ada.Wide_Text_IO.Editing is\n       ------------\n \n       function Length\n-        (Pic      : in Picture;\n-         Currency : in Wide_String := Default_Currency)\n-         return     Natural\n+        (Pic      : Picture;\n+         Currency : Wide_String := Default_Currency) return Natural\n       is\n          Picstr     : constant String := Pic_String (Pic);\n          V_Adjust   : Integer := 0;\n@@ -122,26 +120,26 @@ package body Ada.Wide_Text_IO.Editing is\n       ---------\n \n       procedure Put\n-        (File       : in Wide_Text_IO.File_Type;\n-         Item       : in Num;\n-         Pic        : in Picture;\n-         Currency   : in Wide_String    := Default_Currency;\n-         Fill       : in Wide_Character := Default_Fill;\n-         Separator  : in Wide_Character := Default_Separator;\n-         Radix_Mark : in Wide_Character := Default_Radix_Mark)\n+        (File       : Wide_Text_IO.File_Type;\n+         Item       : Num;\n+         Pic        : Picture;\n+         Currency   : Wide_String    := Default_Currency;\n+         Fill       : Wide_Character := Default_Fill;\n+         Separator  : Wide_Character := Default_Separator;\n+         Radix_Mark : Wide_Character := Default_Radix_Mark)\n       is\n       begin\n          Wide_Text_IO.Put (File, Image (Item, Pic,\n                                    Currency, Fill, Separator, Radix_Mark));\n       end Put;\n \n       procedure Put\n-        (Item       : in Num;\n-         Pic        : in Picture;\n-         Currency   : in Wide_String    := Default_Currency;\n-         Fill       : in Wide_Character := Default_Fill;\n-         Separator  : in Wide_Character := Default_Separator;\n-         Radix_Mark : in Wide_Character := Default_Radix_Mark)\n+        (Item       : Num;\n+         Pic        : Picture;\n+         Currency   : Wide_String    := Default_Currency;\n+         Fill       : Wide_Character := Default_Fill;\n+         Separator  : Wide_Character := Default_Separator;\n+         Radix_Mark : Wide_Character := Default_Radix_Mark)\n       is\n       begin\n          Wide_Text_IO.Put (Image (Item, Pic,\n@@ -150,12 +148,12 @@ package body Ada.Wide_Text_IO.Editing is\n \n       procedure Put\n         (To         : out Wide_String;\n-         Item       : in Num;\n-         Pic        : in Picture;\n-         Currency   : in Wide_String    := Default_Currency;\n-         Fill       : in Wide_Character := Default_Fill;\n-         Separator  : in Wide_Character := Default_Separator;\n-         Radix_Mark : in Wide_Character := Default_Radix_Mark)\n+         Item       : Num;\n+         Pic        : Picture;\n+         Currency   : Wide_String    := Default_Currency;\n+         Fill       : Wide_Character := Default_Fill;\n+         Separator  : Wide_Character := Default_Separator;\n+         Radix_Mark : Wide_Character := Default_Radix_Mark)\n       is\n          Result : constant Wide_String :=\n            Image (Item, Pic, Currency, Fill, Separator, Radix_Mark);\n@@ -175,15 +173,13 @@ package body Ada.Wide_Text_IO.Editing is\n \n       function Valid\n         (Item     : Num;\n-         Pic      : in Picture;\n-         Currency : in Wide_String := Default_Currency)\n-         return     Boolean\n+         Pic      : Picture;\n+         Currency : Wide_String := Default_Currency) return Boolean\n       is\n       begin\n          declare\n             Temp : constant Wide_String := Image (Item, Pic, Currency);\n             pragma Warnings (Off, Temp);\n-\n          begin\n             return True;\n          end;\n@@ -192,7 +188,6 @@ package body Ada.Wide_Text_IO.Editing is\n          when Layout_Error => return False;\n \n       end Valid;\n-\n    end Decimal_Output;\n \n    ------------\n@@ -220,11 +215,11 @@ package body Ada.Wide_Text_IO.Editing is\n \n             when '(' =>\n \n-               --  We now need to scan out the count after a left paren.\n-               --  In the non-wide version we used Integer_IO.Get, but\n-               --  that is not convenient here, since we don't want to\n-               --  drag in normal Text_IO just for this purpose. So we\n-               --  do the scan ourselves, with the normal validity checks.\n+               --  We now need to scan out the count after a left paren. In\n+               --  the non-wide version we used Integer_IO.Get, but that is\n+               --  not convenient here, since we don't want to drag in normal\n+               --  Text_IO just for this purpose. So we do the scan ourselves,\n+               --  with the normal validity checks.\n \n                Last := Picture_Index + 1;\n                Count := 0;\n@@ -262,7 +257,7 @@ package body Ada.Wide_Text_IO.Editing is\n                end loop;\n \n                --  In what follows note that one copy of the repeated\n-               --  character has already been made, so a count of one is a\n+               --  character has already been made, so a count of one is\n                --  no-op, and a count of zero erases a character.\n \n                for J in 2 .. Count loop\n@@ -293,7 +288,6 @@ package body Ada.Wide_Text_IO.Editing is\n    exception\n       when others =>\n          raise Picture_Error;\n-\n    end Expand;\n \n    -------------------\n@@ -306,8 +300,7 @@ package body Ada.Wide_Text_IO.Editing is\n       Currency_Symbol     : Wide_String;\n       Fill_Character      : Wide_Character;\n       Separator_Character : Wide_Character;\n-      Radix_Point         : Wide_Character)\n-      return                Wide_String\n+      Radix_Point         : Wide_Character) return Wide_String\n    is\n       Attrs    : Number_Attributes := Parse_Number_String (Number);\n       Position : Integer;\n@@ -368,8 +361,8 @@ package body Ada.Wide_Text_IO.Editing is\n                      end loop;\n \n                      --  The rounding may add a digit in front. Either the\n-                     --  leading blank or the sign (already captured) can\n-                     --  be overwritten.\n+                     --  leading blank or the sign (already captured) can be\n+                     --  overwritten.\n \n                      if R_Pos = 1 then\n                         Rounded (R_Pos) := '1';\n@@ -421,7 +414,7 @@ package body Ada.Wide_Text_IO.Editing is\n       for J in reverse Last .. Answer'Last loop\n          exit when J = Pic.Radix_Position;\n \n-         --  Do this test First, Separator_Character can equal Pic.Floater.\n+         --  Do this test First, Separator_Character can equal Pic.Floater\n \n          if Answer (J) = Pic.Floater then\n             exit;\n@@ -547,7 +540,7 @@ package body Ada.Wide_Text_IO.Editing is\n               or else\n             Pic.Floater = '-'\n       then\n-         for J in Pic.End_Float .. Position loop --  May be null range.\n+         for J in Pic.End_Float .. Position loop --  May be null range\n             if Answer (J) = '9' then\n                Answer (J) := '0';\n \n@@ -573,12 +566,12 @@ package body Ada.Wide_Text_IO.Editing is\n \n       elsif Pic.Floater = '$' then\n \n-         for J in Pic.End_Float .. Position loop --  May be null range.\n+         for J in Pic.End_Float .. Position loop --  May be null range\n             if Answer (J) = '9' then\n                Answer (J) := '0';\n \n             elsif Answer (J) = '_' then\n-               Answer (J) := ' ';   --  no separator before leftmost digit.\n+               Answer (J) := ' ';   --  no separator before leftmost digit\n \n             elsif Answer (J) = 'b' then\n                Answer (J) := ' ';\n@@ -598,7 +591,7 @@ package body Ada.Wide_Text_IO.Editing is\n \n       elsif Pic.Floater = '*' then\n \n-         for J in Pic.End_Float .. Position loop --  May be null range.\n+         for J in Pic.End_Float .. Position loop --  May be null range\n             if Answer (J) = '9' then\n                Answer (J) := '0';\n \n@@ -1013,7 +1006,6 @@ package body Ada.Wide_Text_IO.Editing is\n \n          return Answer;\n       end if;\n-\n    end Format_Number;\n \n    -------------------------\n@@ -1094,7 +1086,6 @@ package body Ada.Wide_Text_IO.Editing is\n       --  No significant (intger) digits needs a null range.\n \n       return Answer;\n-\n    end Parse_Number_String;\n \n    ----------------\n@@ -2713,9 +2704,8 @@ package body Ada.Wide_Text_IO.Editing is\n    ----------------\n \n    function To_Picture\n-     (Pic_String      : in String;\n-      Blank_When_Zero : in Boolean := False)\n-      return            Picture\n+     (Pic_String      : String;\n+      Blank_When_Zero : Boolean := False) return Picture\n    is\n       Result : Picture;\n \n@@ -2751,9 +2741,8 @@ package body Ada.Wide_Text_IO.Editing is\n    -----------\n \n    function Valid\n-     (Pic_String      : in String;\n-      Blank_When_Zero : in Boolean := False)\n-      return            Boolean\n+     (Pic_String      : String;\n+      Blank_When_Zero : Boolean := False) return Boolean\n    is\n    begin\n       declare\n@@ -2777,7 +2766,6 @@ package body Ada.Wide_Text_IO.Editing is\n \n    exception\n       when others => return False;\n-\n    end Valid;\n \n end Ada.Wide_Text_IO.Editing;"}, {"sha": "6605d59d6d927d626444ecc91fcd17beb2b766cc", "filename": "gcc/ada/a-wtedit.ads", "status": "modified", "additions": 35, "deletions": 41, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtedit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wtedit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtedit.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-1997 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -40,14 +40,12 @@ package Ada.Wide_Text_IO.Editing is\n    type Picture is private;\n \n    function Valid\n-     (Pic_String      : in String;\n-      Blank_When_Zero : in Boolean := False)\n-      return            Boolean;\n+     (Pic_String      : String;\n+      Blank_When_Zero : Boolean := False) return Boolean;\n \n    function To_Picture\n-     (Pic_String      : in String;\n-      Blank_When_Zero : in Boolean := False)\n-      return            Picture;\n+     (Pic_String      : String;\n+      Blank_When_Zero : Boolean := False) return Picture;\n \n    function Pic_String      (Pic : in Picture) return String;\n    function Blank_When_Zero (Pic : in Picture) return Boolean;\n@@ -63,62 +61,59 @@ package Ada.Wide_Text_IO.Editing is\n \n    generic\n       type Num is delta <> digits <>;\n-      Default_Currency   : in Wide_String :=\n+      Default_Currency   : Wide_String :=\n                                 Wide_Text_IO.Editing.Default_Currency;\n-      Default_Fill       : in Wide_Character :=\n+      Default_Fill       : Wide_Character :=\n                                 Wide_Text_IO.Editing.Default_Fill;\n-      Default_Separator  : in Wide_Character :=\n+      Default_Separator  : Wide_Character :=\n                                 Wide_Text_IO.Editing.Default_Separator;\n-      Default_Radix_Mark : in Wide_Character :=\n+      Default_Radix_Mark : Wide_Character :=\n                                 Wide_Text_IO.Editing.Default_Radix_Mark;\n \n    package Decimal_Output is\n \n       function Length\n-        (Pic      : in Picture;\n-         Currency : in Wide_String := Default_Currency)\n-         return     Natural;\n+        (Pic      : Picture;\n+         Currency : Wide_String := Default_Currency) return Natural;\n \n       function Valid\n         (Item     : Num;\n-         Pic      : in Picture;\n-         Currency : in Wide_String := Default_Currency)\n-         return     Boolean;\n+         Pic      : Picture;\n+         Currency : Wide_String := Default_Currency) return Boolean;\n \n       function Image\n         (Item       : Num;\n-         Pic        : in Picture;\n-         Currency   : in Wide_String    := Default_Currency;\n-         Fill       : in Wide_Character := Default_Fill;\n-         Separator  : in Wide_Character := Default_Separator;\n-         Radix_Mark : in Wide_Character := Default_Radix_Mark)\n-         return       Wide_String;\n+         Pic        : Picture;\n+         Currency   : Wide_String    := Default_Currency;\n+         Fill       : Wide_Character := Default_Fill;\n+         Separator  : Wide_Character := Default_Separator;\n+         Radix_Mark : Wide_Character := Default_Radix_Mark) return Wide_String;\n \n       procedure Put\n-        (File       : in File_Type;\n+        (File       : File_Type;\n          Item       : Num;\n-         Pic        : in Picture;\n-         Currency   : in Wide_String    := Default_Currency;\n-         Fill       : in Wide_Character := Default_Fill;\n-         Separator  : in Wide_Character := Default_Separator;\n-         Radix_Mark : in Wide_Character := Default_Radix_Mark);\n+         Pic        : Picture;\n+         Currency   : Wide_String    := Default_Currency;\n+         Fill       : Wide_Character := Default_Fill;\n+         Separator  : Wide_Character := Default_Separator;\n+         Radix_Mark : Wide_Character := Default_Radix_Mark);\n \n       procedure Put\n         (Item       : Num;\n-         Pic        : in Picture;\n-         Currency   : in Wide_String    := Default_Currency;\n-         Fill       : in Wide_Character := Default_Fill;\n-         Separator  : in Wide_Character := Default_Separator;\n-         Radix_Mark : in Wide_Character := Default_Radix_Mark);\n+         Pic        : Picture;\n+         Currency   : Wide_String    := Default_Currency;\n+         Fill       : Wide_Character := Default_Fill;\n+         Separator  : Wide_Character := Default_Separator;\n+         Radix_Mark : Wide_Character := Default_Radix_Mark);\n \n       procedure Put\n         (To         : out Wide_String;\n          Item       : Num;\n-         Pic        : in Picture;\n-         Currency   : in Wide_String    := Default_Currency;\n-         Fill       : in Wide_Character := Default_Fill;\n-         Separator  : in Wide_Character := Default_Separator;\n-         Radix_Mark : in Wide_Character := Default_Radix_Mark);\n+         Pic        : Picture;\n+         Currency   : Wide_String    := Default_Currency;\n+         Fill       : Wide_Character := Default_Fill;\n+         Separator  : Wide_Character := Default_Separator;\n+         Radix_Mark : Wide_Character := Default_Radix_Mark);\n \n    end Decimal_Output;\n \n@@ -196,8 +191,7 @@ private\n       Currency_Symbol     : Wide_String;\n       Fill_Character      : Wide_Character;\n       Separator_Character : Wide_Character;\n-      Radix_Point         : Wide_Character)\n-      return                Wide_String;\n+      Radix_Point         : Wide_Character) return Wide_String;\n    --  Formats number according to Pic\n \n    function Expand (Picture : in String) return String;"}, {"sha": "8e925f11ca4975fc03e898bccacd0986645c9e52", "filename": "gcc/ada/a-wttest.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wttest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wttest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wttest.adb?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,7 +39,7 @@ package body Ada.Wide_Text_IO.Text_Streams is\n    -- Stream --\n    ------------\n \n-   function Stream (File : in File_Type) return Stream_Access is\n+   function Stream (File : File_Type) return Stream_Access is\n    begin\n       System.File_IO.Check_File_Open (FCB.AFCB_Ptr (File));\n       return Stream_Access (File);"}, {"sha": "c209e0e401d3258e329e5c4ffa7f726f5fbaf712", "filename": "gcc/ada/a-wttest.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wttest.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7/gcc%2Fada%2Fa-wttest.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wttest.ads?ref=4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "patch": "@@ -19,6 +19,6 @@ package Ada.Wide_Text_IO.Text_Streams is\n \n    type Stream_Access is access all Streams.Root_Stream_Type'Class;\n \n-   function Stream (File : in File_Type) return Stream_Access;\n+   function Stream (File : File_Type) return Stream_Access;\n \n end Ada.Wide_Text_IO.Text_Streams;"}]}