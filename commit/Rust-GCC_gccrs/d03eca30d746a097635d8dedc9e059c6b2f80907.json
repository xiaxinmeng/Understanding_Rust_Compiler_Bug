{"sha": "d03eca30d746a097635d8dedc9e059c6b2f80907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAzZWNhMzBkNzQ2YTA5NzYzNWQ4ZGVkYzllMDU5YzZiMmY4MDkwNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-30T15:48:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-30T15:48:23Z"}, "message": "Remove some more using-declarations from namespace __gnu_cxx\n\nSimilar to some recent patches, this removes using-declarations for\nnames from namespace std, so that they are not redeclared in __gnu_cxx.\n\n\t* include/bits/stl_iterator.h (namespace __gnu_cxx): Remove\n\tusing-declarations for std::iterator and std::iterator_traits.\n\t(__gnu_cxx::__normal_iterator): Qualify iterator_traits.\n\t* include/ext/algorithm (namespace __gnu_cxx): Remove\n\tusing-declarations for std names and qualify those names when used.\n\tAlso refer to std::min in parentheses to protect against function-like\n\tmacros.\n\t* include/ext/rc_string_base.h: Qualify iterator_traits.\n\t* include/ext/sso_string_base.h: Qualify iterator_traits.\n\nFrom-SVN: r277630", "tree": {"sha": "bb65b34ac6799c09bd0cb3bef66acbf9ac1cc319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb65b34ac6799c09bd0cb3bef66acbf9ac1cc319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d03eca30d746a097635d8dedc9e059c6b2f80907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03eca30d746a097635d8dedc9e059c6b2f80907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d03eca30d746a097635d8dedc9e059c6b2f80907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03eca30d746a097635d8dedc9e059c6b2f80907/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aeb3bef2cae234dbb90609392e536bafc09365c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aeb3bef2cae234dbb90609392e536bafc09365c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aeb3bef2cae234dbb90609392e536bafc09365c"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "7d7159a5d3c0ec937f1be59ced0f6a5605840d60", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d03eca30d746a097635d8dedc9e059c6b2f80907", "patch": "@@ -1,5 +1,15 @@\n 2019-10-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/stl_iterator.h (namespace __gnu_cxx): Remove\n+\tusing-declarations for std::iterator and std::iterator_traits.\n+\t(__gnu_cxx::__normal_iterator): Qualify iterator_traits.\n+\t* include/ext/algorithm (namespace __gnu_cxx): Remove\n+\tusing-declarations for std names and qualify those names when used.\n+\tAlso refer to std::min in parentheses to protect against function-like\n+\tmacros.\n+\t* include/ext/rc_string_base.h: Qualify iterator_traits.\n+\t* include/ext/sso_string_base.h: Qualify iterator_traits.\n+\n \tPR libstdc++/92272\n \t* include/bits/stl_bvector.h (_Bit_iterator::pointer)\n \t(_Bit_const_iterator::pointer): Define as void for C++20."}, {"sha": "ecc06178c3489d8ffba9c871555dfff0f5dd9aa2", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=d03eca30d746a097635d8dedc9e059c6b2f80907", "patch": "@@ -793,15 +793,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // The _Container parameter exists solely so that different containers\n   // using this template can instantiate different types, even if the\n   // _Iterator parameter is the same.\n-  using std::iterator_traits;\n-  using std::iterator;\n   template<typename _Iterator, typename _Container>\n     class __normal_iterator\n     {\n     protected:\n       _Iterator _M_current;\n \n-      typedef iterator_traits<_Iterator>\t\t__traits_type;\n+      typedef std::iterator_traits<_Iterator>\t\t__traits_type;\n \n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;"}, {"sha": "ec244d9186084ef05d93d155cf1d89314e1c04c1", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=d03eca30d746a097635d8dedc9e059c6b2f80907", "patch": "@@ -64,39 +64,32 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::ptrdiff_t;\n-  using std::min;\n-  using std::pair;\n-  using std::input_iterator_tag;\n-  using std::random_access_iterator_tag;\n-  using std::iterator_traits;\n-\n   //--------------------------------------------------\n   // copy_n (not part of the C++ standard)\n \n   template<typename _InputIterator, typename _Size, typename _OutputIterator>\n-    pair<_InputIterator, _OutputIterator>\n+    std::pair<_InputIterator, _OutputIterator>\n     __copy_n(_InputIterator __first, _Size __count,\n \t     _OutputIterator __result,\n-\t     input_iterator_tag)\n+\t     std::input_iterator_tag)\n     {\n       for ( ; __count > 0; --__count)\n \t{\n \t  *__result = *__first;\n \t  ++__first;\n \t  ++__result;\n \t}\n-      return pair<_InputIterator, _OutputIterator>(__first, __result);\n+      return std::pair<_InputIterator, _OutputIterator>(__first, __result);\n     }\n \n   template<typename _RAIterator, typename _Size, typename _OutputIterator>\n-    inline pair<_RAIterator, _OutputIterator>\n+    inline std::pair<_RAIterator, _OutputIterator>\n     __copy_n(_RAIterator __first, _Size __count,\n \t     _OutputIterator __result,\n-\t     random_access_iterator_tag)\n+\t     std::random_access_iterator_tag)\n     {\n       _RAIterator __last = __first + __count;\n-      return pair<_RAIterator, _OutputIterator>(__last, std::copy(__first,\n+      return std::pair<_RAIterator, _OutputIterator>(__last, std::copy(__first,\n \t\t\t\t\t\t\t\t  __last,\n \t\t\t\t\t\t\t\t  __result));\n     }\n@@ -116,13 +109,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup SGIextensions\n   */\n   template<typename _InputIterator, typename _Size, typename _OutputIterator>\n-    inline pair<_InputIterator, _OutputIterator>\n+    inline std::pair<_InputIterator, _OutputIterator>\n     copy_n(_InputIterator __first, _Size __count, _OutputIterator __result)\n     {\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator>::value_type>)\n+\t    typename std::iterator_traits<_InputIterator>::value_type>)\n \n       return __gnu_cxx::__copy_n(__first, __count, __result,\n \t\t\t\t std::__iterator_category(__first));\n@@ -156,10 +149,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t const unsigned char* __first2,\n \t\t\t\t const unsigned char* __last2)\n   {\n-    const ptrdiff_t __len1 = __last1 - __first1;\n-    const ptrdiff_t __len2 = __last2 - __first2;\n+    const std::ptrdiff_t __len1 = __last1 - __first1;\n+    const std::ptrdiff_t __len2 = __last2 - __first2;\n     const int __result = __builtin_memcmp(__first1, __first2,\n-\t\t\t\t\t  min(__len1, __len2));\n+\t\t\t\t\t  (std::min)(__len1, __len2));\n     return __result != 0 ? __result\n \t\t\t : (__len1 == __len2 ? 0 : (__len1 < __len2 ? -1 : 1));\n   }\n@@ -207,9 +200,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type>)\n+\t    typename std::iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n+\t    typename std::iterator_traits<_InputIterator2>::value_type>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n@@ -228,7 +221,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIterator>::value_type >)\n+\t    typename std::iterator_traits<_InputIterator>::value_type >)\n       __glibcxx_function_requires(_EqualityComparableConcept<_Tp>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n@@ -246,7 +239,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_InputIterator>::value_type>)\n+\t    typename std::iterator_traits<_InputIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       for ( ; __first != __last; ++__first)\n@@ -270,11 +263,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n+\t\ttypename std::iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       _Distance __remaining = std::distance(__first, __last);\n-      _Distance __m = min(__n, __remaining);\n+      _Distance __m = (std::min)(__n, __remaining);\n \n       while (__m > 0)\n \t{\n@@ -305,13 +298,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t\ttypename iterator_traits<_ForwardIterator>::value_type>)\n+\t\ttypename std::iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_function_requires(_UnaryFunctionConcept<\n \t\t_RandomNumberGenerator, _Distance, _Distance>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       _Distance __remaining = std::distance(__first, __last);\n-      _Distance __m = min(__n, __remaining);\n+      _Distance __m = (std::min)(__n, __remaining);\n \n       while (__m > 0)\n \t{\n@@ -441,7 +434,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_RandomAccessIteratorConcept<\n \t\t\t\t  _RandomAccessIterator>)\n       __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n+\t    typename std::iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       return std::__is_heap(__first, __last - __first);\n@@ -461,8 +454,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_RandomAccessIteratorConcept<\n \t\t\t\t  _RandomAccessIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n-\t    typename iterator_traits<_RandomAccessIterator>::value_type,\n-\t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n+\t    typename std::iterator_traits<_RandomAccessIterator>::value_type,\n+\t    typename std::iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       return std::__is_heap(__first, __comp, __last - __first);\n@@ -488,7 +481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_ForwardIterator>::value_type>)\n+\t    typename std::iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       if (__first == __last)\n@@ -514,8 +507,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n-\t    typename iterator_traits<_ForwardIterator>::value_type,\n-\t    typename iterator_traits<_ForwardIterator>::value_type>)\n+\t    typename std::iterator_traits<_ForwardIterator>::value_type,\n+\t    typename std::iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       if (__first == __last)"}, {"sha": "3a902d6a18ae333954202aa581d311dac2098d11", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=d03eca30d746a097635d8dedc9e059c6b2f80907", "patch": "@@ -231,7 +231,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_S_construct_aux(_InIterator __beg, _InIterator __end,\n \t\t\t const _Alloc& __a, std::__false_type)\n \t{\n-\t  typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n+\t  typedef typename std::iterator_traits<_InIterator>::iterator_category\n+\t    _Tag;\n \t  return _S_construct(__beg, __end, __a, _Tag());\n \t}\n "}, {"sha": "eacf55702c4b166998888d9d227a46e2b9c0d738", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03eca30d746a097635d8dedc9e059c6b2f80907/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=d03eca30d746a097635d8dedc9e059c6b2f80907", "patch": "@@ -98,7 +98,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _M_construct_aux(_InIterator __beg, _InIterator __end, \n \t\t\t std::__false_type)\n \t{\n-          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n+          typedef typename std::iterator_traits<_InIterator>::iterator_category\n+\t    _Tag;\n           _M_construct(__beg, __end, _Tag());\n \t}\n "}]}