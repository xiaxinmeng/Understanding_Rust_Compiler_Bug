{"sha": "754d92990a56ddb0319ecd360eed752684423f0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0ZDkyOTkwYTU2ZGRiMDMxOWVjZDM2MGVlZDc1MjY4NDQyM2YwYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-23T01:37:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-23T01:37:07Z"}, "message": "predict.c, [...]: Fix spelling errors.\n\ngcc:\n\t* predict.c, reg-stack.c: Fix spelling errors.\n\nlibstdc++-v3:\n\t* config/locale/moneypunct_members_gnu.cc,\n\tinclude/bits/locale_facets.h: Fix spelling errors.\n\nFrom-SVN: r47278", "tree": {"sha": "25c08de6326c45f6d0e7f928b657650fb67f194a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c08de6326c45f6d0e7f928b657650fb67f194a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/754d92990a56ddb0319ecd360eed752684423f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754d92990a56ddb0319ecd360eed752684423f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754d92990a56ddb0319ecd360eed752684423f0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754d92990a56ddb0319ecd360eed752684423f0a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fc610939a651cf4a5f8138b7a35abd8cf62497e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc610939a651cf4a5f8138b7a35abd8cf62497e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc610939a651cf4a5f8138b7a35abd8cf62497e"}], "stats": {"total": 81, "additions": 45, "deletions": 36}, "files": [{"sha": "d010862557536404ac0b3c1e17d050fabff49514", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d92990a56ddb0319ecd360eed752684423f0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d92990a56ddb0319ecd360eed752684423f0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=754d92990a56ddb0319ecd360eed752684423f0a", "patch": "@@ -1,3 +1,7 @@\n+2001-11-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* predict.c, reg-stack.c: Fix spelling errors.\n+\n 2001-10-09  Andrew Haley  <aph@redhat.com>\n \n \t* calls.c (check_sibcall_argument_overlap): Use slot_offset for"}, {"sha": "ba52e52c25dc67d592c4e6abb3d57817abb60560", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d92990a56ddb0319ecd360eed752684423f0a/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d92990a56ddb0319ecd360eed752684423f0a/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=754d92990a56ddb0319ecd360eed752684423f0a", "patch": "@@ -611,7 +611,7 @@ typedef struct block_info_def\n   int tovisit:1;\n \n   /* Number of predecessors we need to visit first.  */\n-  int npredecesors;\n+  int npredecessors;\n } *block_info;\n \n /* Similar information for edges.  */\n@@ -659,7 +659,7 @@ propagate_freq (head)\n \t      fprintf (rtl_dump_file,\n \t\t       \"Irreducible region hit, ignoring edge to %i->%i\\n\",\n \t\t       e->src->index, bb->index);\n-\t  BLOCK_INFO (bb)->npredecesors = count;\n+\t  BLOCK_INFO (bb)->npredecessors = count;\n \t}\n     }\n \n@@ -706,10 +706,10 @@ propagate_freq (head)\n       /* Propagate to successor blocks.  */\n       for (e = bb->succ; e; e = e->succ_next)\n \tif (!(e->flags & EDGE_DFS_BACK)\n-\t    && BLOCK_INFO (e->dest)->npredecesors)\n+\t    && BLOCK_INFO (e->dest)->npredecessors)\n \t  {\n-\t    BLOCK_INFO (e->dest)->npredecesors--;\n-\t    if (!BLOCK_INFO (e->dest)->npredecesors)\n+\t    BLOCK_INFO (e->dest)->npredecessors--;\n+\t    if (!BLOCK_INFO (e->dest)->npredecessors)\n \t      {\n \t\tif (!nextbb)\n \t\t  nextbb = e->dest;"}, {"sha": "1ebb0690a7624a8e4403e0fa590c96add032b39c", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d92990a56ddb0319ecd360eed752684423f0a/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d92990a56ddb0319ecd360eed752684423f0a/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=754d92990a56ddb0319ecd360eed752684423f0a", "patch": "@@ -197,7 +197,7 @@ typedef struct block_info_def\n   struct stack_def stack_out;\t/* Output stack configuration.  */\n   HARD_REG_SET out_reg_set;\t/* Stack regs live on output.  */\n   int done;\t\t\t/* True if block already converted.  */\n-  int predecesors;\t\t/* Number of predecessors that needs\n+  int predecessors;\t\t/* Number of predecessors that needs\n \t\t\t\t   to be visited.  */\n } *block_info;\n \n@@ -458,7 +458,7 @@ reg_to_stack (first, file)\n       for (e = bb->pred; e; e=e->pred_next)\n \tif (!(e->flags & EDGE_DFS_BACK)\n \t    && e->src != ENTRY_BLOCK_PTR)\n-\t  BLOCK_INFO (bb)->predecesors++;\n+\t  BLOCK_INFO (bb)->predecessors++;\n     }\n \n   /* Create the replacement registers up front.  */\n@@ -2797,8 +2797,8 @@ convert_regs_2 (file, block)\n       for (e = block->succ; e ; e = e->succ_next)\n \tif (! (e->flags & EDGE_DFS_BACK))\n \t  {\n-\t    BLOCK_INFO (e->dest)->predecesors--;\n-\t    if (!BLOCK_INFO (e->dest)->predecesors)\n+\t    BLOCK_INFO (e->dest)->predecessors--;\n+\t    if (!BLOCK_INFO (e->dest)->predecessors)\n \t       *sp++ = e->dest;\n \t  }\n     }"}, {"sha": "d6ea6baad8a1c43290124ba59ba35f6cb1330909", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d92990a56ddb0319ecd360eed752684423f0a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d92990a56ddb0319ecd360eed752684423f0a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=754d92990a56ddb0319ecd360eed752684423f0a", "patch": "@@ -1,3 +1,8 @@\n+2001-11-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* config/locale/moneypunct_members_gnu.cc,\n+\tinclude/bits/locale_facets.h: Fix spelling errors.\n+\n 2001-11-22  Stephen M. Webb  <stephen@bregmasoft.com>\n \n         * testsuite/23_containers/list_capacity.cc: New file."}, {"sha": "31662c20d19f70a513b2d6223b50a8a130d68ddd", "filename": "libstdc++-v3/config/locale/moneypunct_members_gnu.cc", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d92990a56ddb0319ecd360eed752684423f0a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d92990a56ddb0319ecd360eed752684423f0a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fmoneypunct_members_gnu.cc?ref=754d92990a56ddb0319ecd360eed752684423f0a", "patch": "@@ -40,14 +40,14 @@ namespace std\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n-  money_base::_S_construct_pattern(char __preceeds, char __space, char __posn)\n+  money_base::_S_construct_pattern(char __precedes, char __space, char __posn)\n   { \n     pattern __ret;\n \n     // This insanely complicated routine attempts to construct a valid\n     // pattern for use with monyepunct. A couple of invariants:\n \n-    // if (__preceeds) symbol -> value\n+    // if (__precedes) symbol -> value\n     // else value -> symbol\n     \n     // if (__space) space\n@@ -65,7 +65,7 @@ namespace std\n \tif (__space)\n \t  {\n \t    // Pattern starts with sign.\n-\t    if (__preceeds)\n+\t    if (__precedes)\n \t      {\n \t\t__ret.field[1] = symbol;\n \t\t__ret.field[2] = space;\n@@ -82,7 +82,7 @@ namespace std\n \telse\n \t  {\n \t    // Pattern starts with sign and ends with none.\n-\t    if (__preceeds)\n+\t    if (__precedes)\n \t      {\n \t\t__ret.field[1] = symbol;\n \t\t__ret.field[2] = value;\n@@ -101,7 +101,7 @@ namespace std\n \tif (__space)\n \t  {\n \t    // Pattern either ends with sign.\n-\t    if (__preceeds)\n+\t    if (__precedes)\n \t      {\n \t\t__ret.field[0] = symbol;\n \t\t__ret.field[1] = space;\n@@ -118,7 +118,7 @@ namespace std\n \telse\n \t  {\n \t    // Pattern ends with sign then none.\n-\t    if (__preceeds)\n+\t    if (__precedes)\n \t      {\n \t\t__ret.field[0] = symbol;\n \t\t__ret.field[1] = value;\n@@ -137,7 +137,7 @@ namespace std\n \tif (__space)\n \t  {\n \t    // Have space.\n-\t    if (__preceeds)\n+\t    if (__precedes)\n \t      {\n \t\t__ret.field[0] = sign;\n \t\t__ret.field[1] = symbol;\n@@ -155,7 +155,7 @@ namespace std\n \telse\n \t  {\n \t    // Have none.\n-\t    if (__preceeds)\n+\t    if (__precedes)\n \t      {\n \t\t__ret.field[0] = sign;\n \t\t__ret.field[1] = symbol;\n@@ -175,7 +175,7 @@ namespace std\n \tif (__space)\n \t  {\n \t    // Have space.\n-\t    if (__preceeds)\n+\t    if (__precedes)\n \t      {\n \t\t__ret.field[0] = symbol;\n \t\t__ret.field[1] = sign;\n@@ -193,7 +193,7 @@ namespace std\n \telse\n \t  {\n \t    // Have none.\n-\t    if (__preceeds)\n+\t    if (__precedes)\n \t      {\n \t\t__ret.field[0] = symbol;\n \t\t__ret.field[1] = sign;\n@@ -243,16 +243,16 @@ namespace std\n \t  // _Intl == true\n \t  _M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n \t  _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n-\t  char __ppreceeds = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n+\t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n-\t  _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, __pposn);\n-\t  char __npreceeds = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n+\t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n+\t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n \t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n \t    _M_negative_sign = \"()\";\n-\t  _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, __nposn);\n+\t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n \t}\n     }\n \n@@ -285,16 +285,16 @@ namespace std\n \t  // _Intl == false\n \t  _M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n \t  _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n-\t  char __ppreceeds = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n+\t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n-\t  _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, __pposn);\n-\t  char __npreceeds = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n+\t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n+\t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n \t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n \t    _M_negative_sign = \"()\";\n-\t  _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, __nposn);\n+\t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n \t}\n     }\n \n@@ -365,16 +365,16 @@ namespace std\n \t    _M_curr_symbol = string_type();\n \n \t  _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n-\t  char __ppreceeds = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n+\t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n-\t  _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, __pposn);\n-\t  char __npreceeds = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n+\t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n+\t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n \t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n \t    _M_negative_sign = L\"()\";\n-\t  _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, __nposn);\n+\t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n \t}\n     }\n \n@@ -444,16 +444,16 @@ namespace std\n \t    _M_curr_symbol = string_type();\n \n \t  _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n-\t  char __ppreceeds = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n+\t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n-\t  _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, __pposn);\n-\t  char __npreceeds = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n+\t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n+\t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n \t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n \t    _M_negative_sign = L\"()\";\n-\t  _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, __nposn);\n+\t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n \t}\n     }\n #endif"}, {"sha": "05b54c55cf5cadd0f8869020865eeb0087d0c8f2", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d92990a56ddb0319ecd360eed752684423f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d92990a56ddb0319ecd360eed752684423f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=754d92990a56ddb0319ecd360eed752684423f0a", "patch": "@@ -1476,7 +1476,7 @@ namespace std\n     // Construct and return valid pattern consisting of some combination of:\n     // space none symbol sign value\n     static pattern \n-    _S_construct_pattern(char __preceeds, char __space, char __posn);\n+    _S_construct_pattern(char __precedes, char __space, char __posn);\n   };\n \n   template<typename _CharT, bool _Intl>"}]}