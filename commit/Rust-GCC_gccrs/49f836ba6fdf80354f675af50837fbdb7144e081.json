{"sha": "49f836ba6fdf80354f675af50837fbdb7144e081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlmODM2YmE2ZmRmODAzNTRmNjc1YWY1MDgzN2ZiZGI3MTQ0ZTA4MQ==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2011-09-30T14:56:01Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2011-09-30T14:56:01Z"}, "message": "Split out LTO's writing of top level asm nodes in preparation of extending what...\n\nSplit out LTO's writing of top level asm nodes in preparation of extending\nwhat needs to be written out when top level asm-s get enhanced to accept a\nlimited set of input operands.\n\ngcc/\n2011-09-30  Jan Beulich  <jbeulich@suse.com>\n\n\t* lto-cgraph.c (output_cgraph): Remove processing of\n\t'cgraph_asm_nodes', call lto_output_toplevel_asms() instead.\n\t(input_cgraph_1): Remove loop calling cgraph_add_asm_node(), call\n\tlto_input_toplevel_asms() instead.\n\t* lto-section-in.c (lto_section_name): Add \"asm\" entry.\n\t* lto-streamer-in.c (lto_input_toplevel_asms): New.\n\t* lto-streamer-out.c (lto_output_toplevel_asms): New.\n\t* lto-streamer.h (LTO_minor_version): Bump.\n\t(enum lto_section_type): Add LTO_section_asm.\n\t(struct lto_asm_header): New.\n\t(lto_input_toplevel_asms, lto_output_toplevel_asms): Declare.\n\t* tree-streamer.h (streamer_write_string_cst): Declare.\n\t* tree-streamer-out.c (write_string_cst): Rename to\n\tstreamer_write_string_cst and make global. Handle incoming string\n\tbeing NULL.\n\t(streamer_write_tree_header): Adjust call to renamed function.\n\nFrom-SVN: r179386", "tree": {"sha": "088e41e292b4cc3059b11b7ac23f10733b2a3912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088e41e292b4cc3059b11b7ac23f10733b2a3912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49f836ba6fdf80354f675af50837fbdb7144e081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f836ba6fdf80354f675af50837fbdb7144e081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49f836ba6fdf80354f675af50837fbdb7144e081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f836ba6fdf80354f675af50837fbdb7144e081/comments", "author": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7043b893da32a14fc2000b00315437bb9b1e80d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7043b893da32a14fc2000b00315437bb9b1e80d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7043b893da32a14fc2000b00315437bb9b1e80d6"}], "stats": {"total": 183, "additions": 151, "deletions": 32}, "files": [{"sha": "52d80822bac64698eaa96603914771b95eb3c0c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49f836ba6fdf80354f675af50837fbdb7144e081", "patch": "@@ -1,3 +1,22 @@\n+2011-09-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* lto-cgraph.c (output_cgraph): Remove processing of\n+\t'cgraph_asm_nodes', call lto_output_toplevel_asms() instead.\n+\t(input_cgraph_1): Remove loop calling cgraph_add_asm_node(), call\n+\tlto_input_toplevel_asms() instead.\n+\t* lto-section-in.c (lto_section_name): Add \"asm\" entry.\n+\t* lto-streamer-in.c (lto_input_toplevel_asms): New.\n+\t* lto-streamer-out.c (lto_output_toplevel_asms): New.\n+\t* lto-streamer.h (LTO_minor_version): Bump.\n+\t(enum lto_section_type): Add LTO_section_asm.\n+\t(struct lto_asm_header): New.\n+\t(lto_input_toplevel_asms, lto_output_toplevel_asms): Declare.\n+\t* tree-streamer.h (streamer_write_string_cst): Declare.\n+\t* tree-streamer-out.c (write_string_cst): Rename to\n+\tstreamer_write_string_cst and make global. Handle incoming string\n+\tbeing NULL.\n+\t(streamer_write_tree_header): Adjust call to renamed function.\n+\n 2011-09-30  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* haifa-sched.c (modulo_ii, modulo_max_states, modulo_n_insns,"}, {"sha": "0f1a8c5ff27b7b015f7160f5177413c51c3a772b", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=49f836ba6fdf80354f675af50837fbdb7144e081", "patch": "@@ -817,7 +817,6 @@ output_cgraph (cgraph_node_set set, varpool_node_set vset)\n   int i, n_nodes;\n   lto_cgraph_encoder_t encoder;\n   lto_varpool_encoder_t varpool_encoder;\n-  struct cgraph_asm_node *can;\n   static bool asm_nodes_output = false;\n \n   if (flag_wpa)\n@@ -854,26 +853,18 @@ output_cgraph (cgraph_node_set set, varpool_node_set vset)\n \n   streamer_write_uhwi_stream (ob->main_stream, 0);\n \n+  lto_destroy_simple_output_block (ob);\n+\n   /* Emit toplevel asms.\n      When doing WPA we must output every asm just once.  Since we do not partition asm\n      nodes at all, output them to first output.  This is kind of hack, but should work\n      well.  */\n   if (!asm_nodes_output)\n     {\n       asm_nodes_output = true;\n-      for (can = cgraph_asm_nodes; can; can = can->next)\n-\t{\n-\t  int len = TREE_STRING_LENGTH (can->asm_str);\n-\t  streamer_write_uhwi_stream (ob->main_stream, len);\n-\t  for (i = 0; i < len; ++i)\n-\t    streamer_write_char_stream (ob->main_stream,\n-\t\t\t\t\tTREE_STRING_POINTER (can->asm_str)[i]);\n-\t}\n+      lto_output_toplevel_asms ();\n     }\n \n-  streamer_write_uhwi_stream (ob->main_stream, 0);\n-\n-  lto_destroy_simple_output_block (ob);\n   output_varpool (set, vset);\n   output_refs (set, vset, encoder, varpool_encoder);\n }\n@@ -1185,7 +1176,6 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n   VEC(cgraph_node_ptr, heap) *nodes = NULL;\n   struct cgraph_node *node;\n   unsigned i;\n-  unsigned HOST_WIDE_INT len;\n \n   tag = streamer_read_enum (ib, LTO_cgraph_tags, LTO_cgraph_last_tag);\n   while (tag)\n@@ -1206,18 +1196,8 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n       tag = streamer_read_enum (ib, LTO_cgraph_tags, LTO_cgraph_last_tag);\n     }\n \n-  /* Input toplevel asms.  */\n-  len = streamer_read_uhwi (ib);\n-  while (len)\n-    {\n-      char *str = (char *)xmalloc (len + 1);\n-      for (i = 0; i < len; ++i)\n-\tstr[i] = streamer_read_uchar (ib);\n-      cgraph_add_asm_node (build_string (len, str));\n-      free (str);\n+  lto_input_toplevel_asms (file_data);\n \n-      len = streamer_read_uhwi (ib);\n-    }\n   /* AUX pointers should be all non-zero for nodes read from the stream.  */\n #ifdef ENABLE_CHECKING\n   FOR_EACH_VEC_ELT (cgraph_node_ptr, nodes, i, node)"}, {"sha": "6783f4aab5f9fcd5f36de4bbf210d160e8aa9e2f", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=49f836ba6fdf80354f675af50837fbdb7144e081", "patch": "@@ -53,6 +53,7 @@ const char *lto_section_name[LTO_N_SECTION_TYPES] =\n   \"cgraph\",\n   \"vars\",\n   \"refs\",\n+  \"asm\",\n   \"jmpfuncs\",\n   \"pureconst\",\n   \"reference\","}, {"sha": "ef972cab1d021bbf94f3b5141cc5962f6852474d", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=49f836ba6fdf80354f675af50837fbdb7144e081", "patch": "@@ -1141,6 +1141,47 @@ lto_input_tree (struct lto_input_block *ib, struct data_in *data_in)\n }\n \n \n+/* Input toplevel asms.  */\n+\n+void\n+lto_input_toplevel_asms (struct lto_file_decl_data *file_data)\n+{\n+  size_t len;\n+  const char *data = lto_get_section_data (file_data, LTO_section_asm,\n+\t\t\t\t\t   NULL, &len);\n+  const struct lto_asm_header *header = (const struct lto_asm_header *) data;\n+  int32_t string_offset;\n+  struct data_in *data_in;\n+  struct lto_input_block ib;\n+  tree str;\n+\n+  if (! data)\n+    return;\n+\n+  string_offset = sizeof (*header) + header->main_size;\n+\n+  LTO_INIT_INPUT_BLOCK (ib,\n+\t\t\tdata + sizeof (*header),\n+\t\t\t0,\n+\t\t\theader->main_size);\n+\n+  data_in = lto_data_in_create (file_data, data + string_offset,\n+\t\t\t\theader->string_size, NULL);\n+\n+  /* Make sure the file was generated by the exact same compiler.  */\n+  lto_check_version (header->lto_header.major_version,\n+\t\t     header->lto_header.minor_version);\n+\n+  while ((str = streamer_read_string_cst (data_in, &ib)))\n+    cgraph_add_asm_node (str);\n+\n+  clear_line_info (data_in);\n+  lto_data_in_delete (data_in);\n+\n+  lto_free_section_data (file_data, LTO_section_asm, NULL, data, len);\n+}\n+\n+\n /* Initialization for the LTO reader.  */\n \n void"}, {"sha": "317138b824d380873b7fcf7ff68e1a748f3f3d96", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=49f836ba6fdf80354f675af50837fbdb7144e081", "patch": "@@ -934,6 +934,61 @@ output_unreferenced_globals (cgraph_node_set set, varpool_node_set vset)\n }\n \n \n+/* Emit toplevel asms.  */\n+\n+void\n+lto_output_toplevel_asms (void)\n+{\n+  struct output_block *ob;\n+  struct cgraph_asm_node *can;\n+  char *section_name;\n+  struct lto_output_stream *header_stream;\n+  struct lto_asm_header header;\n+\n+  if (! cgraph_asm_nodes)\n+    return;\n+\n+  ob = create_output_block (LTO_section_asm);\n+\n+  /* Make string 0 be a NULL string.  */\n+  streamer_write_char_stream (ob->string_stream, 0);\n+\n+  for (can = cgraph_asm_nodes; can; can = can->next)\n+    streamer_write_string_cst (ob, ob->main_stream, can->asm_str);\n+\n+  streamer_write_string_cst (ob, ob->main_stream, NULL_TREE);\n+\n+  section_name = lto_get_section_name (LTO_section_asm, NULL, NULL);\n+  lto_begin_section (section_name, !flag_wpa);\n+  free (section_name);\n+\n+  /* The entire header stream is computed here.  */\n+  memset (&header, 0, sizeof (header));\n+\n+  /* Write the header.  */\n+  header.lto_header.major_version = LTO_major_version;\n+  header.lto_header.minor_version = LTO_minor_version;\n+  header.lto_header.section_type = LTO_section_asm;\n+\n+  header.main_size = ob->main_stream->total_size;\n+  header.string_size = ob->string_stream->total_size;\n+\n+  header_stream = XCNEW (struct lto_output_stream);\n+  lto_output_data_stream (header_stream, &header, sizeof (header));\n+  lto_write_stream (header_stream);\n+  free (header_stream);\n+\n+  /* Put all of the gimple and the string table out the asm file as a\n+     block of text.  */\n+  lto_write_stream (ob->main_stream);\n+  lto_write_stream (ob->string_stream);\n+\n+  lto_end_section ();\n+\n+  destroy_output_block (ob);\n+}\n+\n+\n /* Copy the function body of NODE without deserializing. */\n \n static void"}, {"sha": "ee818429328349dd965f3198209f1098aa4e42e6", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=49f836ba6fdf80354f675af50837fbdb7144e081", "patch": "@@ -142,7 +142,7 @@ along with GCC; see the file COPYING3.  If not see\n #define LTO_SECTION_NAME_PREFIX         \".gnu.lto_\"\n \n #define LTO_major_version 2\n-#define LTO_minor_version 0\n+#define LTO_minor_version 1\n \n typedef unsigned char\tlto_decl_flags_t;\n \n@@ -238,6 +238,7 @@ enum lto_section_type\n   LTO_section_cgraph,\n   LTO_section_varpool,\n   LTO_section_refs,\n+  LTO_section_asm,\n   LTO_section_jump_functions,\n   LTO_section_ipa_pure_const,\n   LTO_section_ipa_reference,\n@@ -387,6 +388,23 @@ struct lto_decl_header\n };\n \n \n+/* Structure describing top level asm()s.  */\n+struct lto_asm_header\n+{\n+  /* The header for all types of sections. */\n+  struct lto_header lto_header;\n+\n+  /* Size compressed or 0 if not compressed.  */\n+  int32_t compressed_size;\n+\n+  /* Size of region for expressions, decls, types, etc. */\n+  int32_t main_size;\n+\n+  /* Size of the string table.  */\n+  int32_t string_size;\n+};\n+\n+\n /* Statistics gathered during LTO, WPA and LTRANS.  */\n struct lto_stats_d\n {\n@@ -789,6 +807,7 @@ extern void lto_input_function_body (struct lto_file_decl_data *, tree,\n \t\t\t\t     const char *);\n extern void lto_input_constructors_and_inits (struct lto_file_decl_data *,\n \t\t\t\t\t      const char *);\n+extern void lto_input_toplevel_asms (struct lto_file_decl_data *);\n extern struct data_in *lto_data_in_create (struct lto_file_decl_data *,\n \t\t\t\t    const char *, unsigned,\n \t\t\t\t    VEC(ld_plugin_symbol_resolution_t,heap) *);\n@@ -807,6 +826,7 @@ extern void lto_register_decl_definition (tree, struct lto_file_decl_data *);\n extern struct output_block *create_output_block (enum lto_section_type);\n extern void destroy_output_block (struct output_block *);\n extern void lto_output_tree (struct output_block *, tree, bool);\n+extern void lto_output_toplevel_asms (void);\n extern void produce_asm (struct output_block *ob, tree fn);\n void lto_output_decl_state_streams (struct output_block *,\n \t\t\t\t    struct lto_out_decl_state *);"}, {"sha": "58be0a385a00d9d42e8f92cfe9d2095f53b92aa5", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=49f836ba6fdf80354f675af50837fbdb7144e081", "patch": "@@ -31,14 +31,15 @@ along with GCC; see the file COPYING3.  If not see\n /* Output the STRING constant to the string\n    table in OB.  Then put the index onto the INDEX_STREAM.  */\n \n-static void\n-write_string_cst (struct output_block *ob,\n-\t\t   struct lto_output_stream *index_stream,\n-\t\t   tree string)\n+void\n+streamer_write_string_cst (struct output_block *ob,\n+\t\t\t   struct lto_output_stream *index_stream,\n+\t\t\t   tree string)\n {\n   streamer_write_string_with_length (ob, index_stream,\n-\t\t\t\t     TREE_STRING_POINTER (string),\n-\t\t\t\t     TREE_STRING_LENGTH (string),\n+\t\t\t\t     string ? TREE_STRING_POINTER (string)\n+\t\t\t\t\t    : NULL,\n+\t\t\t\t     string ? TREE_STRING_LENGTH (string) : 0,\n \t\t\t\t     true);\n }\n \n@@ -866,7 +867,7 @@ streamer_write_tree_header (struct output_block *ob, tree expr)\n   /* The text in strings and identifiers are completely emitted in\n      the header.  */\n   if (CODE_CONTAINS_STRUCT (code, TS_STRING))\n-    write_string_cst (ob, ob->main_stream, expr);\n+    streamer_write_string_cst (ob, ob->main_stream, expr);\n   else if (CODE_CONTAINS_STRUCT (code, TS_IDENTIFIER))\n     write_identifier (ob, ob->main_stream, expr);\n   else if (CODE_CONTAINS_STRUCT (code, TS_VEC))"}, {"sha": "06313303f0b69ef76700bd2ef813c9fae43f7c80", "filename": "gcc/tree-streamer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Ftree-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f836ba6fdf80354f675af50837fbdb7144e081/gcc%2Ftree-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.h?ref=49f836ba6fdf80354f675af50837fbdb7144e081", "patch": "@@ -75,6 +75,8 @@ tree streamer_read_integer_cst (struct lto_input_block *, struct data_in *);\n struct bitpack_d streamer_read_tree_bitfields (struct lto_input_block *, tree);\n \n /* In tree-streamer-out.c.  */\n+void streamer_write_string_cst (struct output_block *,\n+\t\t\t\tstruct lto_output_stream *, tree);\n void streamer_write_chain (struct output_block *, tree, bool);\n void streamer_write_tree_header (struct output_block *, tree);\n void streamer_pack_tree_bitfields (struct bitpack_d *, tree);"}]}