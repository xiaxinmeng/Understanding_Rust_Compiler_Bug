{"sha": "ca1f9f22854049d6f9cab5b4bfbc46edbcb5c990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExZjlmMjI4NTQwNDlkNmY5Y2FiNWI0YmZiYzQ2ZWRiY2I1Yzk5MA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-17T17:40:05Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-22T12:11:46Z"}, "message": "Add relational self-tests.\n\n\t* range-op.cc (range_relational_tests): New.\n\t(range_op_tests): Call range_relational_tests.", "tree": {"sha": "fef07696dcac93fec9c6566af7c8195fd999bda6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fef07696dcac93fec9c6566af7c8195fd999bda6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1f9f22854049d6f9cab5b4bfbc46edbcb5c990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1f9f22854049d6f9cab5b4bfbc46edbcb5c990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1f9f22854049d6f9cab5b4bfbc46edbcb5c990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1f9f22854049d6f9cab5b4bfbc46edbcb5c990/comments", "author": null, "committer": null, "parents": [{"sha": "0f7ccc063a42407f91fa52a54cc480950a45e75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7ccc063a42407f91fa52a54cc480950a45e75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7ccc063a42407f91fa52a54cc480950a45e75c"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "1692a096e20413623a945ac63e36269dd0d54375", "filename": "gcc/range-op.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1f9f22854049d6f9cab5b4bfbc46edbcb5c990/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1f9f22854049d6f9cab5b4bfbc46edbcb5c990/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=ca1f9f22854049d6f9cab5b4bfbc46edbcb5c990", "patch": "@@ -4244,13 +4244,38 @@ range_op_bitwise_and_tests ()\n   ASSERT_FALSE (res.contains_p (INT (0)));\n }\n \n+static void\n+range_relational_tests ()\n+{\n+  int_range<2> lhs (unsigned_char_type_node);\n+  int_range<2> op1 (UCHAR (8), UCHAR (10));\n+  int_range<2> op2 (UCHAR (20), UCHAR (20));\n+\n+  // Never wrapping additions mean LHS > OP1.\n+  tree_code code = op_plus.lhs_op1_relation (lhs, op1, op2);\n+  ASSERT_TRUE (code == GT_EXPR);\n+\n+  // Most wrapping additions mean nothing...\n+  op1 = int_range<2> (UCHAR (8), UCHAR (10));\n+  op2 = int_range<2> (UCHAR (0), UCHAR (255));\n+  code = op_plus.lhs_op1_relation (lhs, op1, op2);\n+  ASSERT_TRUE (code == VREL_NONE);\n+\n+  // However, always wrapping additions mean LHS < OP1.\n+  op1 = int_range<2> (UCHAR (1), UCHAR (255));\n+  op2 = int_range<2> (UCHAR (255), UCHAR (255));\n+  code = op_plus.lhs_op1_relation (lhs, op1, op2);\n+  ASSERT_TRUE (code == LT_EXPR);\n+}\n+\n void\n range_op_tests ()\n {\n   range_op_rshift_tests ();\n   range_op_lshift_tests ();\n   range_op_bitwise_and_tests ();\n   range_op_cast_tests ();\n+  range_relational_tests ();\n }\n \n } // namespace selftest"}]}