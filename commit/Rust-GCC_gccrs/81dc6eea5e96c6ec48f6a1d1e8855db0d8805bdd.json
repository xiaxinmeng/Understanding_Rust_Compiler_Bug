{"sha": "81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkYzZlZWE1ZTk2YzZlYzQ4ZjZhMWQxZTg4NTVkYjBkODgwNWJkZA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-01-12T09:46:56Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-01-12T09:46:56Z"}, "message": "In gcc/testsuite/: 2011-01-12 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tFixed the Objective-C++ testsuite and updated all tests.\n\t* lib/obj-c++.exp (obj-c++_init): Declare and set\n\tgcc_warning_prefix and gcc_error_prefix.\t\n\t* obj-c++.dg/attributes/categ-attribute-2.mm: Fixed usage of\n\t'dg-warning', 'dg-message' and 'dg-error'.\n\t* obj-c++.dg/class-extension-3.mm: Likewise.\n\t* obj-c++.dg/class-protocol-1.mm: Likewise.\n\t* obj-c++.dg/cxx-scope-2.mm: Likewise.\n\t* obj-c++.dg/encode-7.mm: Likewise.\n\t* obj-c++.dg/exceptions-3.mm: Likewise.\n\t* obj-c++.dg/exceptions-5.mm: Likewise.\t\n\t* obj-c++.dg/method-12.mm: Likewise.\n\t* obj-c++.dg/method-13.mm: Likewise.\n\t* obj-c++.dg/method-15.mm: Likewise.\n\t* obj-c++.dg/method-16.mm: Likewise.\n\t* obj-c++.dg/method-4.mm: Likewise.\n\t* obj-c++.dg/method-8.mm: Likewise.\n\t* obj-c++.dg/method-conflict-1.mm: Likewise.\n\t* obj-c++.dg/method-conflict-2.mm: Likewise.\n\t* obj-c++.dg/method-conflict-3.mm: Likewise. Also, removed FIXME\n\tand uncommented second part of the testcase now that the testsuite\n\tworks correctly.\n\t* obj-c++.dg/method-conflict-4.mm: Likewise.  Also, removed FIXME\n\tand uncommented second part of the testcase now that the testsuite\n\tworks correctly.\n\t* obj-c++.dg/private-1.mm: Likewise.\t\n\t* obj-c++.dg/proto-lossage-4.mm: Likewise.\n\t* obj-c++.dg/syntax-error-7.mm: Likewise.\n\t* obj-c++.dg/warn5.mm: Likewise.\n\t* obj-c++.dg/property/at-property-14.mm: Likewise.\n\t* obj-c++.dg/property/at-property-16.mm: Likewise, and removed\n\tFIXME.\t\n\t* obj-c++.dg/property/at-property-18.mm: Likewise.\n\t* obj-c++.dg/property/at-property-20.mm: Likewise, and removed\n\tFIXME.\n\t* obj-c++.dg/property/at-property-21.mm: Likewise.\n\t* obj-c++.dg/property/at-property-28.mm: Likewise.\n\t* obj-c++.dg/property/at-property-5.mm: Likewise.\n\t* obj-c++.dg/property/dynamic-2.mm: Likewise.\n\t* obj-c++.dg/property/property-neg-3.mm: Likewise.\n\t* obj-c++.dg/property/synthesize-11.mm: Likewise.\n\t* obj-c++.dg/property/synthesize-6.mm: Likewise.\n\t* obj-c++.dg/property/synthesize-8.mm: Likewise.\n\t* obj-c++.dg/property/synthesize-9.mm: Likewise.\n\t* obj-c++.dg/tls/diag-5.mm: Likewise.\n\t* obj-c++.dg/ivar-invalid-type-1.mm: Removed FIXME and uncommented\n\tdg-error, now matched correctly.\n\nFrom-SVN: r168699", "tree": {"sha": "367a2a8ca87ab481e0715ede779bb30fb6c644ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/367a2a8ca87ab481e0715ede779bb30fb6c644ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d853ee42d2bd96a3d589e349c57a2e71e4ace38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d853ee42d2bd96a3d589e349c57a2e71e4ace38f"}], "stats": {"total": 311, "additions": 180, "deletions": 131}, "files": [{"sha": "3450fdf6b675e46821062e4c64589fa16082699d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -1,3 +1,52 @@\n+2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tFixed the Objective-C++ testsuite and updated all tests.\n+\t* lib/obj-c++.exp (obj-c++_init): Declare and set\n+\tgcc_warning_prefix and gcc_error_prefix.\t\n+\t* obj-c++.dg/attributes/categ-attribute-2.mm: Fixed usage of\n+\t'dg-warning', 'dg-message' and 'dg-error'.\n+\t* obj-c++.dg/class-extension-3.mm: Likewise.\n+\t* obj-c++.dg/class-protocol-1.mm: Likewise.\n+\t* obj-c++.dg/encode-7.mm: Likewise.\n+\t* obj-c++.dg/exceptions-3.mm: Likewise.\n+\t* obj-c++.dg/exceptions-5.mm: Likewise.\t\n+\t* obj-c++.dg/method-12.mm: Likewise.\n+\t* obj-c++.dg/method-13.mm: Likewise.\n+\t* obj-c++.dg/method-15.mm: Likewise.\n+\t* obj-c++.dg/method-16.mm: Likewise.\n+\t* obj-c++.dg/method-4.mm: Likewise.\n+\t* obj-c++.dg/method-8.mm: Likewise.\n+\t* obj-c++.dg/method-conflict-1.mm: Likewise.\n+\t* obj-c++.dg/method-conflict-2.mm: Likewise.\n+\t* obj-c++.dg/method-conflict-3.mm: Likewise. Also, removed FIXME\n+\tand uncommented second part of the testcase now that the testsuite\n+\tworks correctly.\n+\t* obj-c++.dg/method-conflict-4.mm: Likewise.  Also, removed FIXME\n+\tand uncommented second part of the testcase now that the testsuite\n+\tworks correctly.\n+\t* obj-c++.dg/private-1.mm: Likewise.\t\n+\t* obj-c++.dg/proto-lossage-4.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-7.mm: Likewise.\n+\t* obj-c++.dg/warn5.mm: Likewise.\n+\t* obj-c++.dg/property/at-property-14.mm: Likewise.\n+\t* obj-c++.dg/property/at-property-16.mm: Likewise, and removed\n+\tFIXME.\t\n+\t* obj-c++.dg/property/at-property-18.mm: Likewise.\n+\t* obj-c++.dg/property/at-property-20.mm: Likewise, and removed\n+\tFIXME.\n+\t* obj-c++.dg/property/at-property-21.mm: Likewise.\n+\t* obj-c++.dg/property/at-property-28.mm: Likewise.\n+\t* obj-c++.dg/property/at-property-5.mm: Likewise.\n+\t* obj-c++.dg/property/dynamic-2.mm: Likewise.\n+\t* obj-c++.dg/property/property-neg-3.mm: Likewise.\n+\t* obj-c++.dg/property/synthesize-11.mm: Likewise.\n+\t* obj-c++.dg/property/synthesize-6.mm: Likewise.\n+\t* obj-c++.dg/property/synthesize-8.mm: Likewise.\n+\t* obj-c++.dg/property/synthesize-9.mm: Likewise.\n+\t* obj-c++.dg/tls/diag-5.mm: Likewise.\n+\t* obj-c++.dg/ivar-invalid-type-1.mm: Removed FIXME and uncommented\n+\tdg-error, now matched correctly.\n+\t\n 2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/property/at-property-29.m: New."}, {"sha": "57bab524a32f31c63880eabb669386b0cfaab53c", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -211,6 +211,8 @@ proc obj-c++_init { args } {\n     global OBJCXX_UNDER_TEST\n     global TESTING_IN_BUILD_TREE\n     global target_triplet\n+    global gcc_warning_prefix\n+    global gcc_error_prefix\n \n     if ![info exists OBJCXX_UNDER_TEST] then {\n \tif [info exists TOOL_EXECUTABLE] {\n@@ -265,6 +267,9 @@ proc obj-c++_init { args } {\n     # error-message parsing machinery.\n     lappend ALWAYS_OBJCXXFLAGS \"additional_flags=-fmessage-length=0\"\n \n+    set gcc_warning_prefix \"warning:\"\n+    set gcc_error_prefix \"error:\"\n+\n     if { [string match \"*-*-darwin*\" $target_triplet] } {\n \tlappend ALWAYS_OBJCXXFLAGS \"ldflags=-multiply_defined suppress\"\n     }"}, {"sha": "d2fb78913847c9889717590c3ff93f474be09223", "filename": "gcc/testsuite/obj-c++.dg/attributes/categ-attribute-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -20,7 +20,7 @@ - (int) depmth;\n @end\n \n __attribute__ ((deprecated)) \n-@implementation obj (dep_categ) /* { dg-error \"prefix attributes are ignored before\" } */\n+@implementation obj (dep_categ) /* { dg-warning \"prefix attributes are ignored before\" } */\n - (int) depmth { return var + 1; }\n @end\n "}, {"sha": "69e5705396989b4a739eed05f065f61c86664777", "filename": "gcc/testsuite/obj-c++.dg/class-extension-3.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-extension-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-extension-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-extension-3.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -10,8 +10,8 @@ @interface MyObject\n   Class isa;\n   int count;\n }\n-- (int) test;        /* { dg-warning \"previous declaration\" } */\n-@property int count; /* { dg-warning \"originally specified here\" } */\n+- (int) test;        /* { dg-message \"previous declaration\" } */\n+@property int count; /* { dg-message \"originally specified here\" } */\n @end\n \n @interface MyObject ()"}, {"sha": "2ab702a4dfb83a62c9640b5b5f8dfc7b321e1f1e", "filename": "gcc/testsuite/obj-c++.dg/class-protocol-1.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -326,8 +326,8 @@ @interface MyOtherClass1 <MyOtherProto1>\n     objP1 == cls; /* { dg-warning \"lacks a cast\" } */\n   }\n   { /* id <protocol>, non-ObjC  */\n-    num == objP1; /* { dg-warning \"between pointer\" } */\n-    objP1 == num; /* { dg-warning \"between pointer\" } */\n+    num == objP1; /* { dg-error \"between pointer\" } */\n+    objP1 == num; /* { dg-error \"between pointer\" } */\n \n     ptr == objP1;\n     objP1 == ptr;\n@@ -352,8 +352,8 @@ @interface MyOtherClass1 <MyOtherProto1>\n     clsP1 == cls;\n   }\n   { /* Class <protocol>, non-ObjC */\n-    num == clsP1; /* { dg-warning \"between pointer\" } */\n-    clsP1 == num; /* { dg-warning \"between pointer\" } */\n+    num == clsP1; /* { dg-error \"between pointer\" } */\n+    clsP1 == num; /* { dg-error \"between pointer\" } */\n \n     ptr == clsP1;\n     clsP1 == ptr;"}, {"sha": "c793b282f39110833e5b0552c291d587abd07fd5", "filename": "gcc/testsuite/obj-c++.dg/cxx-scope-2.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -11,9 +11,9 @@ @interface iostream: Object\n @end\n \n int main(void) {\n-  id i = [std::iostream new];  /* { dg-warning \"not an Objective\\\\-C class name or alias\" } */\n+  id i = [std::iostream new];  /* { dg-error \"not an Objective\\\\-C class name or alias\" } */\n   i = [iostream new];\n-  i = [std::basic_string<char> new];  /* { dg-warning \"not an Objective\\\\-C class name or alias\" } */\n+  i = [std::basic_string<char> new];  /* { dg-error \"not an Objective\\\\-C class name or alias\" } */\n \n   return 0;\n }"}, {"sha": "523c7ce02e8678836c16d6904cbffb9db9cb0454", "filename": "gcc/testsuite/obj-c++.dg/encode-7.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -26,7 +26,7 @@ we need to decay the arrays into pointers (as C does).\n @interface Test : Object\n { float j; }\n -(void) test2: (int [5])a with: (int [])b;\n--(id) test3: (Test **)b; /* { dg-warning \"previous declaration of .\\\\-\\\\(id\\\\)test3:\\\\(Test \\\\*\\\\*\\\\)b.\" } */\n+-(id) test3: (Test **)b; /* { dg-message \"previous declaration of .\\\\-\\\\(id\\\\)test3:\\\\(Test \\\\*\\\\*\\\\)b.\" } */\n @end\n \n @implementation Test"}, {"sha": "bf0be018e0307d14d5858838efbe0cc0bea0d879", "filename": "gcc/testsuite/obj-c++.dg/exceptions-3.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -71,9 +71,9 @@ int test (id object)\n   @try { @throw object; }\n   @catch (MyObject x)     /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n     {                     /* { dg-error \"no matching function\" \"\" { target *-*-* } 72 } */\n-      dummy++;            /* { dg-warning \"MyObject\" \"\" { target *-*-* } 13 } */\n-    }                     /* { dg-warning \"candidate\" \"\" { target *-*-* } 13 } */\n-                          /* { dg-warning \"candidate\" \"\" { target *-*-* } 72 } */\n+      dummy++;            /* { dg-message \"MyObject\" \"\" { target *-*-* } 13 } */\n+    }                     /* { dg-message \"candidate\" \"\" { target *-*-* } 13 } */\n+                          /* { dg-message \"candidates\" \"\" { target *-*-* } 72 } */\n   @try { @throw object; }\n   @catch (static MyObject *x) /* { dg-error \"storage class\" } */\n     {"}, {"sha": "1ea9a6f4610ec09f6d8cfbf8cb8733aa860434a3", "filename": "gcc/testsuite/obj-c++.dg/exceptions-5.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -71,9 +71,9 @@ int test (id object)\n   @try { @throw object; }\n   @catch (MyObject)     /* { dg-error \"@catch parameter is not a known Objective-C class type\" } */\n     {                     /* { dg-error \"no matching function\" \"\" { target *-*-* } 72 } */\n-      dummy++;            /* { dg-warning \"MyObject\" \"\" { target *-*-* } 13 } */\n-    }                     /* { dg-warning \"candidate\" \"\" { target *-*-* } 13 } */\n-                          /* { dg-warning \"candidate\" \"\" { target *-*-* } 72 } */\n+      dummy++;            /* { dg-message \"MyObject\" \"\" { target *-*-* } 13 } */\n+    }                     /* { dg-message \"candidate\" \"\" { target *-*-* } 13 } */\n+                          /* { dg-message \"candidate\" \"\" { target *-*-* } 72 } */\n \n   @try { @throw object; }\n   @catch (static MyObject *) /* { dg-error \"storage class\" } */"}, {"sha": "4c1480a6be998e7be45678a46072133e38449d86", "filename": "gcc/testsuite/obj-c++.dg/ivar-invalid-type-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-invalid-type-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-invalid-type-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-invalid-type-1.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -14,6 +14,6 @@ @interface MySubClass\n   static int c;    /* { dg-error \"invalid type\" } */\n   inline int d;    /* { dg-error \"declared as an .inline.\" } */\n   typedef int e;   /* { dg-error \"invalid type\" } */\n-  __thread int f;  /* dg-error \"invalid type\" */ /* FIXME: The compiler generates this message, but the testsuite does not match it.  */\n+  __thread int f;  /* { dg-error \"invalid type\" } */\n }\n @end"}, {"sha": "7c6916b320df151e33118a2b9afe0690939bdb5f", "filename": "gcc/testsuite/obj-c++.dg/method-12.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -19,8 +19,8 @@ void foo(void) {\n   Class receiver;\n \n   [receiver port];  /* { dg-warning \"multiple methods named .\\\\+port. found\" } */\n-       /* { dg-warning \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 9 } */\n-       /* { dg-warning \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 14 } */\n+       /* { dg-message \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 9 } */\n+       /* { dg-message \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 14 } */\n \n   [receiver starboard];  /* { dg-warning \"no .\\\\+starboard. method found\" } */\n        /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 25 } */"}, {"sha": "6938f7d349a26465158c419165a9056c53d46fbb", "filename": "gcc/testsuite/obj-c++.dg/method-13.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -20,8 +20,8 @@ id foo(void) {\n        /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 18 } */\n        /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 18 } */\n   [obj2 setWindow:nil]; /* { dg-warning \"multiple methods named .\\\\-setWindow:. found\" } */\n-       /* { dg-warning \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(Object \\\\*\\\\)wdw.\" \"\" { target *-*-* } 8 } */\n-       /* { dg-warning \"also found .\\\\-\\\\(void\\\\)setWindow:\\\\(Class1 \\\\*\\\\)window.\" \"\" { target *-*-* } 12 } */\n+       /* { dg-message \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(Object \\\\*\\\\)wdw.\" \"\" { target *-*-* } 8 } */\n+       /* { dg-message \"also found .\\\\-\\\\(void\\\\)setWindow:\\\\(Class1 \\\\*\\\\)window.\" \"\" { target *-*-* } 12 } */\n \n   return obj;\n }"}, {"sha": "860aad63eabef75d48223338d3410919b8af1a93", "filename": "gcc/testsuite/obj-c++.dg/method-15.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -32,9 +32,9 @@ + (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data\n {\n     NTGridDataObject *result = [[NTGridDataObject alloc] initWithData:data];\n      /* { dg-warning \"multiple methods named .\\\\-initWithData:. found\" \"\" { target *-*-* } 33 } */\n-     /* { dg-warning \"using .\\\\-\\\\(id\\\\)initWithData:\\\\(Object \\\\*\\\\)data.\" \"\" { target *-*-* } 9 } */\n-     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(id <MyObject, MyCoding>\\\\)data.\" \"\" { target *-*-* } 17 } */\n-     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(int\\\\)data.\" \"\" { target *-*-* } 13 } */\n+     /* { dg-message \"using .\\\\-\\\\(id\\\\)initWithData:\\\\(Object \\\\*\\\\)data.\" \"\" { target *-*-* } 9 } */\n+     /* { dg-message \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(id <MyObject, MyCoding>\\\\)data.\" \"\" { target *-*-* } 17 } */\n+     /* { dg-message \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(int\\\\)data.\" \"\" { target *-*-* } 13 } */\n \n      /* The following warning is a consequence of picking the \"wrong\" method signature.  */\n      /* { dg-warning \"passing argument 1 of .initWithData:. from distinct Objective\\\\-C type\" \"\" { target *-*-* } 33 } */"}, {"sha": "aceefcdc7b0c330286d85d664c42bfd95c22d936", "filename": "gcc/testsuite/obj-c++.dg/method-16.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-16.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-16.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-16.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -25,9 +25,9 @@ void foo(void) {\n   id obj1, obj2 = 0;\n   obj2 = [obj1 initWithData: obj2];\n      /* { dg-warning \"multiple methods named .\\\\-initWithData:. found\" \"\" { target *-*-* } 26 } */\n-     /* { dg-warning \"using .\\\\-\\\\(void\\\\)initWithData:\\\\(Object1 \\\\*\\\\)data.\" \"\" { target *-*-* } 13 } */\n-     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(Object1 \\\\*\\\\)data.\" \"\" { target *-*-* } 17 } */\n-     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(Object2 \\\\*\\\\)data.\" \"\" { target *-*-* } 21 } */\n+     /* { dg-message \"using .\\\\-\\\\(void\\\\)initWithData:\\\\(Object1 \\\\*\\\\)data.\" \"\" { target *-*-* } 13 } */\n+     /* { dg-message \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(Object1 \\\\*\\\\)data.\" \"\" { target *-*-* } 17 } */\n+     /* { dg-message \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(Object2 \\\\*\\\\)data.\" \"\" { target *-*-* } 21 } */\n \n      /* The following error is a consequence of picking the \"wrong\" method signature.  */\n      /* { dg-error \"void value not ignored as it ought to be\" \"\" { target *-*-* } 26 } */"}, {"sha": "e94f8f1b77096c5ce35e48769c86dd6991f8352e", "filename": "gcc/testsuite/obj-c++.dg/method-4.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-4.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -7,13 +7,13 @@\n #include <objc/objc.h>\n \n @interface Base\n-- (id) meth1: (Base *)arg1; /* { dg-warning \"using .\\\\-\\\\(id\\\\)meth1:\\\\(Base \\\\*\\\\)arg1.\" } */\n-- (id) window;              /* { dg-warning \"using .\\\\-\\\\(id\\\\)window\" } */\n+- (id) meth1: (Base *)arg1; /* { dg-message \"using .\\\\-\\\\(id\\\\)meth1:\\\\(Base \\\\*\\\\)arg1.\" } */\n+- (id) window;              /* { dg-message \"using .\\\\-\\\\(id\\\\)window\" } */\n @end\n \n @interface Derived: Base\n-- (id) meth1: (Derived *)arg1; /* { dg-warning \"also found .\\\\-\\\\(id\\\\)meth1:\\\\(Derived \\\\*\\\\)arg1.\" } */\n-- (Base *) window;             /* { dg-warning \"also found .\\\\-\\\\(Base \\\\*\\\\)window.\" } */\n+- (id) meth1: (Derived *)arg1; /* { dg-message \"also found .\\\\-\\\\(id\\\\)meth1:\\\\(Derived \\\\*\\\\)arg1.\" } */\n+- (Base *) window;             /* { dg-message \"also found .\\\\-\\\\(Base \\\\*\\\\)window.\" } */\n @end\n \n void foo(void) {"}, {"sha": "9857c63ffe006ae163491d596b0ad67cd9267a76", "filename": "gcc/testsuite/obj-c++.dg/method-8.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -2,12 +2,12 @@\n /* { dg-do compile } */\n \n @interface class1\n-- (int) meth1;   /* { dg-error \"previous declaration\" } */\n+- (int) meth1;   /* { dg-message \"previous declaration\" } */\n - (void) meth1;  /* { dg-error \"duplicate declaration of method .\\\\-meth1.\" } */\n @end\n \n @interface class2\n-+ (void) meth1; /* { dg-error \"previous declaration\" } */\n++ (void) meth1; /* { dg-message \"previous declaration\" } */\n + (int) meth1;  /* { dg-error \"duplicate declaration of method .\\\\+meth1.\" } */\n @end\n "}, {"sha": "2cc96e4fd08ca9c913f624eb1217111ea4319fde", "filename": "gcc/testsuite/obj-c++.dg/method-conflict-1.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-1.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -7,17 +7,17 @@\n    with the same name but conflicting method signatures.  */\n \n @protocol MyProtocol\n-+ (int) method1: (int)x;   /* { dg-error \"previous declaration\" } */\n++ (int) method1: (int)x;   /* { dg-message \"previous declaration\" } */\n + (float) method1: (int)x; /* { dg-error \"duplicate declaration of method .\\\\+method1.\" } */\n \n-- (int) method2: (int)x;   /* { dg-error \"previous declaration\" } */\n+- (int) method2: (int)x;   /* { dg-message \"previous declaration\" } */\n - (int) method2: (float)x; /* { dg-error \"duplicate declaration of method .\\\\-method2.\" } */\n \n @optional\n-+ (int *) method3: (int)x;    /* { dg-error \"previous declaration\" } */\n++ (int *) method3: (int)x;    /* { dg-message \"previous declaration\" } */\n + (int *) method3: (int **)x; /* { dg-error \"duplicate declaration of method .\\\\+method3.\" } */\n \n-- (id) method4: (id)x;   /* { dg-error \"previous declaration\" } */\n+- (id) method4: (id)x;   /* { dg-message \"previous declaration\" } */\n - (void) method4: (id)x; /* { dg-error \"duplicate declaration of method .\\\\-method4.\" } */\n @end\n "}, {"sha": "0b0612d771e030da739b481ea8a04e77b96da103", "filename": "gcc/testsuite/obj-c++.dg/method-conflict-2.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-2.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -11,8 +11,8 @@\n @protocol MyProtocol\n \n @optional\n-+ (void) method1: (id)x; /* { dg-error \"previous declaration\" } */\n-- (id) method2: (long)x; /* { dg-error \"previous declaration\" } */\n++ (void) method1: (id)x; /* { dg-message \"previous declaration\" } */\n+- (id) method2: (long)x; /* { dg-message \"previous declaration\" } */\n \n @required\n + (void) method1: (id)x; /* { dg-error \"declared .@optional. and .@required. at the same time\" } */\n@@ -24,8 +24,8 @@ - (id) method2: (long)x; /* { dg-error \"declared .@optional. and .@required. at\n @protocol MyProtocol2\n \n @required\n-+ (void) method3: (Class)x; /* { dg-error \"previous declaration\" } */\n-- (id *) method4: (long)x;  /* { dg-error \"previous declaration\" } */\n++ (void) method3: (Class)x; /* { dg-message \"previous declaration\" } */\n+- (id *) method4: (long)x;  /* { dg-message \"previous declaration\" } */\n \n @optional\n + (void) method3: (Class)x; /* { dg-error \"declared .@optional. and .@required. at the same time\" } */"}, {"sha": "73e80c9482b227533bb5311bf3566d365a7f40e8", "filename": "gcc/testsuite/obj-c++.dg/method-conflict-3.mm", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-3.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -27,39 +27,37 @@ - (void) method5: (id <A, B, B>)x; /* Ok */\n - (void) method6: (id <A, A, B, B, C, C>)x;\n - (void) method6: (id <C, A, B>)x; /* Ok */\n \n-- (void) method7: (id)x; /* { dg-warning \"previous declaration\" } */\n+- (void) method7: (id)x; /* { dg-message \"previous declaration\" } */\n - (void) method7: (id <A>)x; /* { dg-error \"duplicate declaration\" } */\n \n-- (void) method8: (id <A>)x; /* { dg-warning \"previous declaration\" } */\n+- (void) method8: (id <A>)x; /* { dg-message \"previous declaration\" } */\n - (void) method8: (id)x; /* { dg-error \"duplicate declaration\" } */\n \n-- (void) method9: (id <A>)x; /* { dg-warning \"previous declaration\" } */\n+- (void) method9: (id <A>)x; /* { dg-message \"previous declaration\" } */\n - (void) method9: (id <B>)x; /* { dg-error \"duplicate declaration\" } */\n \n-- (void) methodA: (id <A>)x; /* { dg-warning \"previous declaration\" } */\n+- (void) methodA: (id <A>)x; /* { dg-message \"previous declaration\" } */\n - (void) methodA: (id <A, B>)x; /* { dg-error \"duplicate declaration\" } */\n \n-/* FIXME: Bug in the testsuite - the following are done Ok by the compiler, but\n-   the testsuite barfs so we have to comment out the tests.  */\n-/* - (void) methodB: (id <A, B>)x; dg-warning \"previous declaration\" */\n-/* - (void) methodB: (id <A>)x; dg-error \"duplicate declaration\" */\n+- (void) methodB: (id <A, B>)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodB: (id <A>)x; /* { dg-error \"duplicate declaration\" } */\n \n-/* - (void) methodC: (id <A, B, C>)x;  dg-warning \"previous declaration\"  */\n-/* - (void) methodC: (id <A, B>)x;  dg-error \"duplicate declaration\"  */\n+- (void) methodC: (id <A, B, C>)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodC: (id <A, B>)x;  /* { dg-error \"duplicate declaration\" } */\n \n-/* - (void) methodD: (id <A, B, C>)x;  dg-warning \"previous declaration\"  */\n-/* - (void) methodD: (id <A, B, A>)x;  dg-error \"duplicate declaration\"  */\n+- (void) methodD: (id <A, B, C>)x;  /* { dg-message \"previous declaration\" } */\n+- (void) methodD: (id <A, B, A>)x;  /* { dg-error \"duplicate declaration\" } */\n \n-/* - (void) methodE: (MyClass <A, B, C> *)x;  dg-warning \"previous declaration\"  */\n-/* - (void) methodE: (MyClass <A, B, A> *)x;  dg-error \"duplicate declaration\"  */\n+- (void) methodE: (MyClass <A, B, C> *)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodE: (MyClass <A, B, A> *)x; /* { dg-error \"duplicate declaration\" } */\n \n - (void) methodF: (MyClass <A, B, A> *)x;\n - (void) methodF: (MyClass <A, B, A> *)x; /* Ok */\n \n-/* - (void) methodG: (MyClass *)x;   dg-warning \"previous declaration\"  */\n-/* - (void) methodG: (MyClass <A, B, C> *)x;  dg-error \"duplicate declaration\"  */\n+- (void) methodG: (MyClass *)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodG: (MyClass <A, B, C> *)x; /* { dg-error \"duplicate declaration\" } */\n \n-/* - (void) methodH: (MyClass <A, C>*)x;  dg-warning \"previous declaration\"  */\n-/* - (void) methodH: (MyClass *)x;  dg-error \"duplicate declaration\"  */\n+- (void) methodH: (MyClass <A, C>*)x; /* { dg-message \"previous declaration\" } */\n+- (void) methodH: (MyClass *)x; /* { dg-error \"duplicate declaration\" } */\n \n @end"}, {"sha": "e2aca6cc51cc3efc1d12ed751da9b80e8d447965", "filename": "gcc/testsuite/obj-c++.dg/method-conflict-4.mm", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-conflict-4.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -21,10 +21,10 @@ - (void) doYetSomethingElse;\n @end\n \n @interface MyClass2\n-- (void) aMethod: (id <A>)x;  /* { dg-error \"previous declaration\" } */\n+- (void) aMethod: (id <A>)x;  /* { dg-message \"previous declaration\" } */\n - (void) aMethod: (id <B>)x;  /* { dg-error \"duplicate declaration\" } */\n \n-- (void) bMethod: (id <B>)x;  /* { dg-error \"previous declaration\" } */\n+- (void) bMethod: (id <B>)x;  /* { dg-message \"previous declaration\" } */\n - (void) bMethod: (id <A>)x;  /* { dg-error \"duplicate declaration\" } */\n \n - (void) cMethod: (id <A, B>)x;\n@@ -33,16 +33,15 @@ - (void) cMethod: (id <B>)x;  /* Ok - because if you implement B, then you also\n - (void) dMethod: (id <A, B>)x;\n - (void) dMethod: (id <B, A>)x; /* Ok */\n \n-/* FIXME: The compiler works, but the testsuite produces errors anyway.  */\n-/* - (void) eMethod: (id <A>)x;   dg-error \"previous declaration\"  */\n-/* - (void) eMethod: (id <B, C>)x;   dg-error \"duplicate declaration\"  */\n+- (void) eMethod: (id <A>)x;    /* { dg-message \"previous declaration\" } */\n+- (void) eMethod: (id <B, C>)x; /* { dg-error \"duplicate declaration\" } */\n \n-/*- (void) fMethod: (id <B, C>)x;   dg-error \"previous declaration\"  */\n-/*- (void) fMethod: (id <A>)x;   dg-error \"duplicate declaration\"  */\n+- (void) fMethod: (id <B, C>)x;    /* { dg-message \"previous declaration\" } */\n+- (void) fMethod: (id <A>)x;       /* { dg-error \"duplicate declaration\" } */\n \n-/* - (void) gMethod: (id <A>)x;   dg-error \"previous declaration\" */\n-/* - (void) gMethod: (id <A, B, C>)x;   dg-error \"duplicate declaration\" */\n+- (void) gMethod: (id <A>)x;       /* { dg-message \"previous declaration\" } */\n+- (void) gMethod: (id <A, B, C>)x; /* { dg-error \"duplicate declaration\" } */\n \n-/* - (void) hMethod: (id <A, B, C>)x;   dg-error \"previous declaration\" */\n-/* - (void) hMethod: (id <A>)x;   dg-error \"duplicate declaration\" */\n+- (void) hMethod: (id <A, B, C>)x; /* { dg-message \"previous declaration\" } */\n+- (void) hMethod: (id <A>)x;       /* { dg-error \"duplicate declaration\" } */\n @end"}, {"sha": "0c25aea5566d9250b88059222b6dfab43e039381", "filename": "gcc/testsuite/obj-c++.dg/private-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprivate-1.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -49,8 +49,8 @@ int main (void)\n     {\n       int access;\n \n-      access = m->_private;   /* { dg-error \"is @private\" }  */\n-      access = m->_protected; /* { dg-error \"is @protected\" }  */\n+      access = m->_private;   /* { dg-warning \"is @private\" }  */\n+      access = m->_protected; /* { dg-warning \"is @protected\" }  */\n       access = m->_public;    /* Ok  */\n     }\n "}, {"sha": "a9068ba89d749f071d41d5134c82a65469536ca9", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-14.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -10,11 +10,11 @@ @interface MyRootClass\n \n /* Test the warnings on 'assign'.  */\n @property id property_a;   /*  { dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\" } */\n-\t\t\t   /*  { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 12 } */\n+\t\t\t   /*  { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 12 } */\n \n @property (readonly) id property_b; /* No 'assign' warning (assign semantics do not matter if the property is readonly).  */\n @property id *property_c;           /* No 'assign' warning (the type is not an Objective-C object).  */\n @property Class property_d;         /* No 'assign' warning (Classes are static objects so assign semantics do not matter for them).  */\n @property MyRootClass *property_e;  /* { dg-warning \"object property .property.e. has no .assign., .retain. or .copy. attribute\" } */\n-\t\t\t            /* { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 18 } */\n+\t\t\t            /* { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 18 } */\n @end"}, {"sha": "6a9856b902789680fca39c442611abbe19805171", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-16.mm", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-16.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-16.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-16.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -10,16 +10,15 @@ @interface MyRootClass\n {\n   Class isa;\n }\n-@property (assign) id a;                  /* { dg-warning \"originally specified here\" } */\n-@property (retain) id b;                  /* { dg-warning \"originally specified here\" } */\n-@property int c;                          /* { dg-warning \"originally specified here\" } */\n-@property (nonatomic) int d;              /* { dg-warning \"originally specified here\" } */\n-/* FIXME: Mysteriously the next 3 need to be 'dg-message' instead of 'dg-warning' for the testcase to work.  */\n+@property (assign) id a;                  /* { dg-message \"originally specified here\" } */\n+@property (retain) id b;                  /* { dg-message \"originally specified here\" } */\n+@property int c;                          /* { dg-message \"originally specified here\" } */\n+@property (nonatomic) int d;              /* { dg-message \"originally specified here\" } */\n @property int e;                          /* { dg-message \"originally specified here\" } */\n @property int f;                          /* { dg-message \"originally specified here\" } */\n @property int g;                          /* { dg-message \"originally specified here\" } */\n @property (readonly) int h;               /* Ok */\n-@property (readonly,getter=getMe) int i;  /* { dg-warning \"originally specified here\" } */\n+@property (readonly,getter=getMe) int i;  /* { dg-message \"originally specified here\" } */\n @end\n \n @interface MyClass : MyRootClass"}, {"sha": "d318210986debabda500eb10567bcf598e2df5d0", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-18.mm", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-18.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-18.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-18.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -26,21 +26,21 @@ @interface MyRootClass\n @end\n @interface MyRootClass (Category)\n @property (retain) id a;         /* { dg-warning \"assign semantics attributes of property .a. conflict with previous declaration\" } */\n-                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 16 } */\n+                                 /* { dg-message \"originally specified here\" \"\" { target *-*-* } 16 } */\n @property (assign) id b;         /* { dg-warning \"assign semantics attributes of property .b. conflict with previous declaration\" } */\n-                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 17 } */\n+                                 /* { dg-message \"originally specified here\" \"\" { target *-*-* } 17 } */\n @property (nonatomic) int c;     /* { dg-warning \".nonatomic. attribute of property .c. conflicts with previous declaration\" } */\n-                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 18 } */\n+                                 /* { dg-message \"originally specified here\" \"\" { target *-*-* } 18 } */\n @property int d;                 /* { dg-warning \".nonatomic. attribute of property .d. conflicts with previous declaration\" } */\n-                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 19 } */\n+                                 /* { dg-message \"originally specified here\" \"\" { target *-*-* } 19 } */\n @property (setter=setX:) int e;  /* { dg-warning \".setter. attribute of property .e. conflicts with previous declaration\" } */\n-                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 20 } */\n+                                 /* { dg-message \"originally specified here\" \"\" { target *-*-* } 20 } */\n @property (getter=x) int f;      /* { dg-warning \".getter. attribute of property .f. conflicts with previous declaration\" } */\n-                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 21 } */\n+                                 /* { dg-message \"originally specified here\" \"\" { target *-*-* } 21 } */\n @property (readonly) int g;      /* { dg-warning \".readonly. attribute of property .g. conflicts with previous declaration\" } */\n-                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 22 } */\n+                                 /* { dg-message \"originally specified here\" \"\" { target *-*-* } 22 } */\n @property (readwrite) int h;     /* Ok */\n @property (readonly) int i;      /* { dg-warning \".getter. attribute of property .i. conflicts with previous declaration\" } */\n-                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 24 } */\n+                                 /* { dg-message \"originally specified here\" \"\" { target *-*-* } 24 } */\n @property (nonatomic) float j;   /* Ok */\n @end"}, {"sha": "85f5aecd15d06b5a9a31db2fb16fdfec320bba2b", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-20.mm", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-20.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-20.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-20.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -37,14 +37,13 @@ @interface MySubClass4 : MySubClass1\n \n @interface MyClass : MyRootClass\n { }\n-@property (assign) id <MyProtocolA> a;        /* { dg-warning \"originally specified here\" } */\n-@property int b;                              /* { dg-warning \"originally specified here\" } */\n-@property float c;                            /* { dg-warning \"originally specified here\" } */\n-@property (assign) MyRootClass *d;            /* { dg-warning \"originally specified here\" } */\n-@property (assign) MySubClass1 *e;            /* { dg-warning \"originally specified here\" } */\n-/* FIXME: Mysteriously two of the next three need to be 'dg-message' instead of 'dg-warning' for the testcase to work.  */\n+@property (assign) id <MyProtocolA> a;        /* { dg-message \"originally specified here\" } */\n+@property int b;                              /* { dg-message \"originally specified here\" } */\n+@property float c;                            /* { dg-message \"originally specified here\" } */\n+@property (assign) MyRootClass *d;            /* { dg-message \"originally specified here\" } */\n+@property (assign) MySubClass1 *e;            /* { dg-message \"originally specified here\" } */\n @property (assign, readonly) MySubClass1 *f;  /* { dg-message \"originally specified here\" } */\n-@property (assign) MySubClass3 *g;            /* { dg-warning \"originally specified here\" } */\n+@property (assign) MySubClass3 *g;            /* { dg-message \"originally specified here\" } */\n @property (assign, readonly) MySubClass3 *h;  /* { dg-message \"originally specified here\"  } */\n @end\n "}, {"sha": "d1f54b1cda8e24396157827b1b74098aff4b5848", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-21.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-21.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-21.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-21.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -14,10 +14,10 @@ @interface MyRootClass\n \n /* Test the warnings on 'assign' with protocols.  */\n @property id <MyProtocol> property_a;      /* { dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\" } */\n-\t\t\t                   /* { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 16 } */\n+\t\t\t                   /* { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 16 } */\n \n @property MyRootClass <MyProtocol> *property_b; /* { dg-warning \"object property .property.b. has no .assign., .retain. or .copy. attribute\" } */\n-\t\t\t                        /* { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 19 } */\n+\t\t\t                        /* { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 19 } */\n \n @property Class <MyProtocol> property_c;   /* No 'assign' warning (Classes are static objects so assign semantics do not matter for them). */\n @end"}, {"sha": "de5122443c6f0507ddaa3c52ebce82c483d6c27e", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-28.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-28.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-28.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-28.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -10,11 +10,11 @@ @interface MyRootClass\n {\n   Class isa;\n }\n-@property (readonly, retain)    id property1; /* { dg-warning \"originally specified here\" } */\n-@property (readonly)           int property2; /* { dg-warning \"originally specified here\" } */\n-@property (readonly, getter=y) int property3; /* { dg-warning \"originally specified here\" } */\n+@property (readonly, retain)    id property1; /* { dg-message \"originally specified here\" } */\n+@property (readonly)           int property2; /* { dg-message \"originally specified here\" } */\n+@property (readonly, getter=y) int property3; /* { dg-message \"originally specified here\" } */\n @property (readonly)           int property4; /* Ok */\n-@property (readonly)           int property5; /* { dg-warning \"originally specified here\" } */\n+@property (readonly)           int property5; /* { dg-message \"originally specified here\" } */\n @end\n \n @interface MyRootClass ()"}, {"sha": "fc618f2bc550420fba675205f37df0fbf4683ba9", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-5.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-5.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -18,7 +18,7 @@ @interface MyRootClass\n \n /* Test various error messages.  */\n @property id property_a;      /* { dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\" } */\n-\t\t\t      /* { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 20 } */\n+\t\t\t      /* { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 20 } */\n @property int property_b = 4; /* { dg-error \"expected\" } */\n @property (retain) int property_c; /* { dg-error \".retain. attribute is only valid for Objective-C objects\" } */\n @property (copy) int property_d; /* { dg-error \".copy. attribute is only valid for Objective-C objects\" } */\n@@ -28,7 +28,7 @@ @interface MyRootClass\n @property (retain) id property_g;\n @property (retain) id property_h;\n @property (retain) id property_e; /* { dg-error \"redeclaration of property .property_e.\" } */\n-   \t\t\t          /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 26 } */\n+   \t\t\t          /* { dg-message \"originally specified here\" \"\" { target *-*-* } 26 } */\n @end\n \n @property id test; /* { dg-error \"misplaced .@property. Objective-C.. construct\" } */"}, {"sha": "49004eff4951fef9fc8e1e3fd4750969ea5d5a61", "filename": "gcc/testsuite/obj-c++.dg/property/dynamic-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -40,6 +40,6 @@ @interface AnotherTest : MyRootClass\n @implementation AnotherTest\n @dynamic one;\n @dynamic one; /* { dg-error \"property .one. already specified in .@dynamic.\" } */\n-              /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 41 } */\n+              /* { dg-message \"originally specified here\" \"\" { target *-*-* } 41 } */\n @dynamic three; /* { dg-error \"no declaration of property .three. found in the interface\" } */\n @end"}, {"sha": "0b30931a8813c6bfbb54120bc3648ab11269305f", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-3.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -10,5 +10,5 @@ @interface Person\n @implementation  Person\n @dynamic firstName;\n @synthesize firstName; /* { dg-error \"property .firstName. already specified in .@dynamic.\" } */\n-                       /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 11 } */\n+                       /* { dg-message \"originally specified here\" \"\" { target *-*-* } 11 } */\n @end"}, {"sha": "25158da761a3c3ed8635d4ee229973f845fd3be0", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-11.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-11.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -10,8 +10,8 @@\n @interface MyRootClass\n {\n   Class isa;\n-  int countA : 2;                  /* { dg-warning \"originally specified here\" } */\n-  int countB : 3;                  /* { dg-warning \"originally specified here\" } */\n+  int countA : 2;                  /* { dg-message \"originally specified here\" } */\n+  int countB : 3;                  /* { dg-message \"originally specified here\" } */\n }\n + (id) initialize;\n + (id) alloc;\n@@ -27,5 +27,5 @@ - (id) init { return self; }\n @synthesize countA; /* { dg-error \".atomic. property .countA. is using bit-field instance variable .countA.\" } */\n @synthesize countB; /* { dg-error \"property .countB. is using instance variable .countB. of incompatible type\" } */\n @end /* { dg-warning \"incomplete implementation of class\" } */\n-/* { dg-warning \"method definition for ..setCountA.. not found\" \"\" { target *-*-* } 29 } */\n-/* { dg-warning \"method definition for ..countA. not found\" \"\" { target *-*-* } 29 } */\n+/* { dg-message \"method definition for ..setCountA.. not found\" \"\" { target *-*-* } 29 } */\n+/* { dg-message \"method definition for ..countA. not found\" \"\" { target *-*-* } 29 } */"}, {"sha": "2a078c9b8a8f13d856c65598bf82f7863aee2229", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-6.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-6.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -15,7 +15,7 @@ @interface Test\n @property int v2;\n @end\n @implementation Test\n-@synthesize v1 = v;  /* { dg-warning \"originally specified here\" } */\n+@synthesize v1 = v;  /* { dg-message \"originally specified here\" } */\n @synthesize v2 = v;  /* { dg-error \"property .v2. is using the same instance variable as property .v1.\" } */\n @end\n @interface Test2 : Test\n@@ -26,5 +26,5 @@ @implementation Test2\n @synthesize w1;      /* { dg-error \"ivar .w1. used by .@synthesize. declaration must be an existing ivar\" } */\n @end\n /* { dg-warning \"incomplete implementation\" \"\" { target *-*-* } 27 } */\n-/* { dg-warning \"method definition for .-setW1:. not found\" \"\" { target *-*-* } 27 } */\n-/* { dg-warning \"method definition for .-w1. not found\" \"\" { target *-*-* } 27 } */\n+/* { dg-message \"method definition for .-setW1:. not found\" \"\" { target *-*-* } 27 } */\n+/* { dg-message \"method definition for .-w1. not found\" \"\" { target *-*-* } 27 } */"}, {"sha": "4af3ecc742f2bfd509646ccfaed2438d67c334ae", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-8.mm", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-8.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -52,13 +52,13 @@ @implementation Test\n /* This is not OK.  */\n @interface Test2\n {\n-  int v;                   /* { dg-warning \"originally specified here\" } */\n-  float w;                 /* { dg-warning \"originally specified here\" } */\n-  id x;                    /* { dg-warning \"originally specified here\" } */\n-  Test *y;                 /* { dg-warning \"originally specified here\" } */\n-  id <MyProtocol> *z;      /* { dg-warning \"originally specified here\" } */\n-  ClassA *a;               /* { dg-warning \"originally specified here\" } */\n-  ClassB *b;               /* { dg-warning \"originally specified here\" } */\n+  int v;                   /* { dg-message \"originally specified here\" } */\n+  float w;                 /* { dg-message \"originally specified here\" } */\n+  id x;                    /* { dg-message \"originally specified here\" } */\n+  Test *y;                 /* { dg-message \"originally specified here\" } */\n+  id <MyProtocol> *z;      /* { dg-message \"originally specified here\" } */\n+  ClassA *a;               /* { dg-message \"originally specified here\" } */\n+  ClassB *b;               /* { dg-message \"originally specified here\" } */\n }\n @property (assign) float v;\n @property (assign) id w;"}, {"sha": "7eae31d3f4db18ea98cc82c93a18d678ff034d4e", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-9.mm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-9.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -52,12 +52,12 @@ @implementation Test\n /* This is sometimes OK, sometimes not OK.  */\n @interface Test2\n {\n-  int v;                   /* { dg-warning \"originally specified here\" } */\n-  float w;                 /* { dg-warning \"originally specified here\" } */\n-  id x;                    /* { dg-warning \"originally specified here\" } */\n+  int v;                   /* { dg-message \"originally specified here\" } */\n+  float w;                 /* { dg-message \"originally specified here\" } */\n+  id x;                    /* { dg-message \"originally specified here\" } */\n   Test *y;                 \n-  id <MyProtocol> *z;      /* { dg-warning \"originally specified here\" } */\n-  ClassA *a;               /* { dg-warning \"originally specified here\" } */\n+  id <MyProtocol> *z;      /* { dg-message \"originally specified here\" } */\n+  ClassA *a;               /* { dg-message \"originally specified here\" } */\n   ClassB *b;               \n }\n @property (assign, readonly) float v;"}, {"sha": "9f94754ca07a2b4d5961c13aaf99a6546465f159", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-4.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-4.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -40,7 +40,7 @@ long foo(void) {\n   receiver += [objrcvr2 someValue];\n   receiver += [objrcvr2 anotherValue];\n   receiver += [(Obj *)objrcvr2 someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"invalid conversion\" \"\" { target *-*-* } 42 } */\n+/* { dg-error \"invalid conversion\" \"\" { target *-*-* } 42 } */\n \n   receiver += [(Obj *)objrcvr2 anotherValue];\n "}, {"sha": "e38c0958cc343964459d51d84c1516c79ed38769", "filename": "gcc/testsuite/obj-c++.dg/syntax-error-7.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-7.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -9,5 +9,5 @@ @implementation Foo\n -(void) someMethod /* { dg-error \"expected before .-.\" } */\n {\n }\n-@end /* { dg-error \"incomplete implementation of class\" } */\n-/* { dg-error \"method definition for ..someMethod. not found\" \"\" { target *-*-* } 12 } */\n+@end /* { dg-warning \"incomplete implementation of class\" } */\n+/* { dg-warning \"method definition for ..someMethod. not found\" \"\" { target *-*-* } 12 } */"}, {"sha": "413d107f24d3ab56c2598b54968e12d30e4c3873", "filename": "gcc/testsuite/obj-c++.dg/tls/diag-5.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-5.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -1,4 +1,4 @@\n /* __thread specifiers on empty declarations.  */\n /* { dg-require-effective-target tls } */\n \n-__thread struct foo; /* { dg-warning \"qualifiers can only be specified for objects and functions\" } */\n+__thread struct foo; /* { dg-error \"qualifiers can only be specified for objects and functions\" } */"}, {"sha": "5f9b7a7f76d15b322edc4ba0633541b572361ffb", "filename": "gcc/testsuite/obj-c++.dg/warn5.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fwarn5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fwarn5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fwarn5.mm?ref=81dc6eea5e96c6ec48f6a1d1e8855db0d8805bdd", "patch": "@@ -16,10 +16,10 @@ void foo() { }\n \n typedef void (A::*pmf)();\n \n-static int mememe = &A::foo - &A::bar;  // { dg-warning \"\" } \n-pmf b = &A::foo-1;      // { dg-warning \"\" } \n+static int mememe = &A::foo - &A::bar;  // { dg-error \"\" } \n+pmf b = &A::foo-1;      // { dg-error \"\" } \n \n int main() {\n     double y;\n-    y=X(Y-Z);   // { dg-warning \"\" } \n+    y=X(Y-Z);   // { dg-error \"\" } \n }"}]}