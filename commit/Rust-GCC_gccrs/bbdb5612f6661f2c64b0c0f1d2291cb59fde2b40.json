{"sha": "bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40", "node_id": "C_kwDOANBUbNoAKGJiZGI1NjEyZjY2NjFmMmM2NGIwYzBmMWQyMjkxY2I1OWZkZTJiNDA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-23T13:07:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-29T17:50:03Z"}, "message": "c++: fix class-valued ?: extension\n\nWhen the gimplifier encounters the same TARGET_EXPR twice, it evaluates\nTARGET_EXPR_INITIAL the first time and clears it so that the later\nevaluation is just the temporary.  With this testcase, using the extension\nto treat an omitted middle operand as repeating the first operand, that led\nto doing a bitwise copy of the S(1) temporary on return rather than properly\ncalling the copy constructor.\n\nWe can't use S(1) to initialize the return value here anyway, because we\nneed to materialize it into a temporary so we can convert it to bool and\ndetermine which arm we're evaluating.  So let's just treat the middle\noperand as an xvalue.\n\n\tPR c++/93046\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (build_conditional_expr): For a?:c extension, treat\n\ta reused class prvalue as an xvalue.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/cond4.C: Add runtime test.", "tree": {"sha": "56b89b14d6a13be4d736ff80363a0ba9300ea9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56b89b14d6a13be4d736ff80363a0ba9300ea9d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32b2eb59fb904926eff77811e08766a8ae6804a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b2eb59fb904926eff77811e08766a8ae6804a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b2eb59fb904926eff77811e08766a8ae6804a7"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "bd04a1d309a735dd08e480243f09addae995b7d9", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40", "patch": "@@ -5402,6 +5402,11 @@ build_conditional_expr (const op_location_t &loc,\n \t  arg1 = cp_stabilize_reference (arg1);\n \t  arg2 = arg1 = prevent_lifetime_extension (arg1);\n \t}\n+      else if (TREE_CODE (arg1) == TARGET_EXPR)\n+\t/* arg1 can't be a prvalue result of the conditional\n+\t   expression, since it needs to be materialized for the\n+\t   conversion to bool, so treat it as an xvalue in arg2.  */\n+\targ2 = move (TARGET_EXPR_SLOT (arg1));\n       else\n \targ2 = arg1 = cp_save_expr (arg1);\n     }"}, {"sha": "86993306aa5063fe6e411c29612a8f489466b7d2", "filename": "gcc/testsuite/g++.dg/ext/cond4.C", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcond4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcond4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcond4.C?ref=bbdb5612f6661f2c64b0c0f1d2291cb59fde2b40", "patch": "@@ -1,14 +1,25 @@\n // PR c++/93046\n-// { dg-do compile }\n+// { dg-do run }\n // { dg-options \"\" }\n \n+int c;\n+\n struct S {\n-  S (int);\n-  operator bool ();\n+  int i;\n+  S (int i) : i(i) { ++c; }\n+  S (const S &s): i(s.i) { ++c; }\n+  operator bool () { return i; }\n };\n \n S\n foo ()\n {\n   return S (1) ? : S (2);\n }\n+\n+int main()\n+{\n+  S s = foo();\n+  if (s.i != 1 || c != 2)\n+    __builtin_abort ();\n+}"}]}