{"sha": "366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2Mzg2YzdhOTcwYmY2YTMyYzVhMmFiYjcxNGNhNmM3ZjRlNzc5MA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-04T06:08:40Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-06T06:44:26Z"}, "message": "Enable GCC support for SERIALIZE\n\n2020-03-04  Hongtao Liu  <hongtao.liu@intel.com>\n2020-03-04  Wei Xiao  <wei3.xiao@intel.com>\n\ngcc/Changelog:\n\t* gcc/common/config/i386/i386-common.c (OPTION_MASK_ISA2_SERIALIZE_SET,\n\tOPTION_MASK_ISA2_SERIALIZE_UNSET): New macros.\n\t(ix86_handle_option): Handle -mserialize.\n\t* gcc/config.gcc (serializeintrin.h): New header file.\n\t* gcc/config/i386/cpuid.h (bit_SERIALIZE): New bit.\n\t* gcc/config/i386/driver-i386.c (host_detect_local_cpu): Detect\n\t-mserialize.\n\t* gcc/config/i386/i386-builtin.def: Add new builtin.\n\t* gcc/config/i386/i386-c.c (__SERIALIZE__): New macro.\n\t* gcc/config/i386/i386-options.c (ix86_target_opts_isa2_opts):\n\t  Add -mserialize.\n\t* (ix86_valid_target_attribute_inner_p): Add target attribute\n\t* for serialize.\n\t* gcc/config/i386/i386.h (TARGET_SERIALIZE, TARGET_SERIALIZE_P):\n\t  New macros.\n\t* gcc/config/i386/i386.md (UNSPECV_SERIALIZE): New unspec.\n\t  (serialize): New define_insn.\n\t* gcc/config/i386/i386.opt (mserialize): New option\n\t* gcc/config/i386/immintrin.h: Include serailizeintrin.h.\n\t* gcc/config/i386/serializeintrin.h: New header file.\n\t* gcc/doc/invoke.texi: Add documents for -mserialize.\n\ngcc/testsuite/Changelog\n\t* gcc/testsuite/gcc.target/i386/serialize-1.c: New test.\n\t* gcc/testsuite/g++.dg/other/i386-2.C: Add -mserialize.\n\t* gcc/testsuite/g++.dg/other/i386-3.C: Ditto.\n\t* gcc/testsuite/gcc.target/i386/funcspec-56.inc: Ditto.\n\t* gcc/testsuite/gcc.target/i386/sse-12.c: Ditto.\n\t* gcc/testsuite/gcc.target/i386/sse-13.c: Ditto.\n\t* gcc/testsuite/gcc.target/i386/sse-14.c: Ditto.\n\t* gcc/testsuite/gcc.target/i386/sse-22.c: Ditto.\n\t* gcc/testsuite/gcc.target/i386/sse-23.c: Ditto.", "tree": {"sha": "69171768f0e2938731e95879b1a97757ef9b5ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69171768f0e2938731e95879b1a97757ef9b5ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f969affaf77cc21583941b0e0652c286c433d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f969affaf77cc21583941b0e0652c286c433d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f969affaf77cc21583941b0e0652c286c433d26"}], "stats": {"total": 185, "additions": 167, "deletions": 18}, "files": [{"sha": "94f3c2590f3c0d91ff1c31fb9144933c13425dbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -1,3 +1,28 @@\n+2020-05-06  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    Wei Xiao  <wei3.xiao@intel.com>\n+\n+\t* gcc/common/config/i386/i386-common.c (OPTION_MASK_ISA2_SERIALIZE_SET,\n+\tOPTION_MASK_ISA2_SERIALIZE_UNSET): New macros.\n+\t(ix86_handle_option): Handle -mserialize.\n+\t* gcc/config.gcc (serializeintrin.h): New header file.\n+\t* gcc/config/i386/cpuid.h (bit_SERIALIZE): New bit.\n+\t* gcc/config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\t-mserialize.\n+\t* gcc/config/i386/i386-builtin.def: Add new builtin.\n+\t* gcc/config/i386/i386-c.c (__SERIALIZE__): New macro.\n+\t* gcc/config/i386/i386-options.c (ix86_target_opts_isa2_opts):\n+\t  Add -mserialize.\n+\t* (ix86_valid_target_attribute_inner_p): Add target attribute\n+\t* for serialize.\n+\t* gcc/config/i386/i386.h (TARGET_SERIALIZE, TARGET_SERIALIZE_P):\n+\t  New macros.\n+\t* gcc/config/i386/i386.md (UNSPECV_SERIALIZE): New unspec.\n+\t  (serialize): New define_insn.\n+\t* gcc/config/i386/i386.opt (mserialize): New option\n+\t* gcc/config/i386/immintrin.h: Include serailizeintrin.h.\n+\t* gcc/config/i386/serializeintrin.h: New header file.\n+\t* gcc/doc/invoke.texi: Add documents for -mserialize.\n+\n 2020-05-06  Richard Biener  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_gimple_assign_unary): Adjust integer"}, {"sha": "0a164e2c6b882caf4b49b252f94947464208ac7b", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -158,6 +158,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_WAITPKG_SET OPTION_MASK_ISA2_WAITPKG\n #define OPTION_MASK_ISA2_CLDEMOTE_SET OPTION_MASK_ISA2_CLDEMOTE\n #define OPTION_MASK_ISA2_ENQCMD_SET OPTION_MASK_ISA2_ENQCMD\n+#define OPTION_MASK_ISA2_SERIALIZE_SET OPTION_MASK_ISA2_SERIALIZE\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -241,6 +242,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_WAITPKG_UNSET OPTION_MASK_ISA2_WAITPKG\n #define OPTION_MASK_ISA2_CLDEMOTE_UNSET OPTION_MASK_ISA2_CLDEMOTE\n #define OPTION_MASK_ISA2_ENQCMD_UNSET OPTION_MASK_ISA2_ENQCMD\n+#define OPTION_MASK_ISA2_SERIALIZE_UNSET OPTION_MASK_ISA2_SERIALIZE\n #define OPTION_MASK_ISA2_AVX512VP2INTERSECT_UNSET OPTION_MASK_ISA2_AVX512VP2INTERSECT\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n@@ -677,6 +679,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mserialize:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_SERIALIZE_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SERIALIZE_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_SERIALIZE_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SERIALIZE_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx5124fmaps:\n       if (value)\n \t{"}, {"sha": "d48b6c773d23063d520c80dd8d7bc830c0ed8358", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -412,8 +412,9 @@ i[34567]86-*-*)\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n-\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\n-\t\t       enqcmdintrin.h avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\"\n+\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h\n+\t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n+\t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -445,8 +446,9 @@ x86_64-*-*)\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n-\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\n-\t\t       enqcmdintrin.h avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\"\n+\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h\n+\t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n+\t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "d3fbde93400831fad028a38a9b8a243dafcd0171", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -122,6 +122,7 @@\n #define bit_AVX512VP2INTERSECT\t(1 << 8)\n #define bit_IBT\t(1 << 20)\n #define bit_PCONFIG\t(1 << 18)\n+#define bit_SERIALIZE\t(1 << 14)\n /* XFEATURE_ENABLED_MASK register bits (%eax == 13, %ecx == 0) */\n #define bit_BNDREGS     (1 << 3)\n #define bit_BNDCSR      (1 << 4)"}, {"sha": "2ef44acb9b41b9f0c197910cd1564d1b0b4e8cf7", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -429,6 +429,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_waitpkg = 0;\n   unsigned int has_cldemote = 0;\n   unsigned int has_avx512bf16 = 0;\n+  unsigned int has_serialize = 0;\n \n   unsigned int has_ptwrite = 0;\n \n@@ -534,6 +535,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n       has_avx512vp2intersect = edx & bit_AVX512VP2INTERSECT;\n+      has_serialize = edx & bit_SERIALIZE;\n \n       has_shstk = ecx & bit_SHSTK;\n       has_pconfig = edx & bit_PCONFIG;\n@@ -1161,6 +1163,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *enqcmd = has_enqcmd ? \" -menqcmd\" : \" -mno-enqcmd\";\n       const char *waitpkg = has_waitpkg ? \" -mwaitpkg\" : \" -mno-waitpkg\";\n       const char *cldemote = has_cldemote ? \" -mcldemote\" : \" -mno-cldemote\";\n+      const char *serialize = has_serialize ? \" -mserialize\" : \" -mno-serialize\";\n       const char *ptwrite = has_ptwrite ? \" -mptwrite\" : \" -mno-ptwrite\";\n       const char *avx512bf16 = has_avx512bf16 ? \" -mavx512bf16\" : \" -mno-avx512bf16\";\n \n@@ -1178,7 +1181,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n \t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, cldemote,\n \t\t\tptwrite, avx512bf16, enqcmd, avx512vp2intersect,\n-\t\t\tNULL);\n+\t\t\tserialize, NULL);\n     }\n \n done:"}, {"sha": "48c04d4f0e9e110aaa9ecda98ac89f30da89d1aa", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -446,6 +446,9 @@ BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_PTWRITE, CODE_FOR_ptwritedi, \"__b\n BDESC (0, OPTION_MASK_ISA2_ENQCMD, CODE_FOR_nothing, \"__builtin_ia32_enqcmd\", IX86_BUILTIN_ENQCMD, UNKNOWN, (int) INT_FTYPE_PVOID_PCVOID)\n BDESC (0, OPTION_MASK_ISA2_ENQCMD, CODE_FOR_nothing, \"__builtin_ia32_enqcmds\", IX86_BUILTIN_ENQCMDS, UNKNOWN, (int) INT_FTYPE_PVOID_PCVOID)\n \n+/* SERIALIZE */\n+BDESC (0, OPTION_MASK_ISA2_SERIALIZE, CODE_FOR_serialize, \"__builtin_ia32_serialize\", IX86_BUILTIN_SERIALIZE, UNKNOWN, (int) VOID_FTYPE_VOID)\n+\n BDESC_END (SPECIAL_ARGS, ARGS)\n \n /* Builtins with variable number of arguments.  */"}, {"sha": "2ab5a8137708d28ab2129f858317b98282730702", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -561,6 +561,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__WAITPKG__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_CLDEMOTE)\n     def_or_undef (parse_in, \"__CLDEMOTE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_SERIALIZE)\n+    def_or_undef (parse_in, \"__SERIALIZE__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_PTWRITE)\n     def_or_undef (parse_in, \"__PTWRITE__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_AVX512BF16)"}, {"sha": "8ad9f1502861be8e0a9ce95fe8a051acaf8d12ff", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -205,7 +205,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mcldemote\",\tOPTION_MASK_ISA2_CLDEMOTE },\n   { \"-mptwrite\",\tOPTION_MASK_ISA2_PTWRITE },\n   { \"-mavx512bf16\",\tOPTION_MASK_ISA2_AVX512BF16 },\n-  { \"-menqcmd\",\t\tOPTION_MASK_ISA2_ENQCMD }\n+  { \"-menqcmd\",\t\tOPTION_MASK_ISA2_ENQCMD },\n+  { \"-mserialize\",\tOPTION_MASK_ISA2_SERIALIZE }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1017,6 +1018,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"ptwrite\",   OPT_mptwrite),\n     IX86_ATTR_ISA (\"avx512bf16\",   OPT_mavx512bf16),\n     IX86_ATTR_ISA (\"enqcmd\", OPT_menqcmd),\n+    IX86_ATTR_ISA (\"serialize\", OPT_mserialize),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "e907dfdfccb7249c546fdcc5138c5d5a6fa08308", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -199,6 +199,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX512BF16_P(x)\tTARGET_ISA2_AVX512BF16_P(x)\n #define TARGET_ENQCMD\tTARGET_ISA2_ENQCMD\n #define TARGET_ENQCMD_P(x) TARGET_ISA2_ENQCMD_P(x)\n+#define TARGET_SERIALIZE\tTARGET_ISA2_SERIALIZE\n+#define TARGET_SERIALIZE_P(x) TARGET_ISA2_SERIALIZE_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "8838ffec1a067c35a5d129fc7154745b5e8af1b1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -300,6 +300,9 @@\n   ;; For ENQCMD and ENQCMDS support\n   UNSPECV_ENQCMD\n   UNSPECV_ENQCMDS\n+\n+  ;; For SERIALIZE support\n+  UNSPECV_SERIALIZE\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -21232,6 +21235,13 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"3\")])\n \n+(define_insn \"serialize\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_SERIALIZE)]\n+  \"TARGET_SERIALIZE\"\n+  \"serialize\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"3\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "9af05995b9d6db8bddc3471fb01048c5a28342a7", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -1107,3 +1107,7 @@ AVX512BF16 built-in functions and code generation.\n menqcmd\n Target Report Mask(ISA2_ENQCMD) Var(ix86_isa_flags2) Save\n Support ENQCMD built-in functions and code generation.\n+\n+mserialize\n+Target Report Mask(ISA2_SERIALIZE) Var(ix86_isa_flags2) Save\n+Support SERIALIZE built-in functions and code generation."}, {"sha": "380e7f184f868d7d096fc5c6e6226071eb5aae5f", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -140,6 +140,8 @@\n \n #include <enqcmdintrin.h>\n \n+#include <serializeintrin.h>\n+\n #include <rdseedintrin.h>\n \n #include <prfchwintrin.h>"}, {"sha": "0c35b9ed1fae412e4a982268f2e58790f1b72f25", "filename": "gcc/config/i386/serializeintrin.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fserializeintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fconfig%2Fi386%2Fserializeintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fserializeintrin.h?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -0,0 +1,49 @@\n+/* Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+# error \"Never use <serializeintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _SERIALIZE_H_INCLUDED\n+#define _SERIALIZE_H_INCLUDED\n+\n+#ifndef __SERIALIZE__\n+#pragma GCC push_options\n+#pragma GCC target(\"serialize\")\n+#define __DISABLE_SERIALIZE__\n+#endif /* __SERIALIZE__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_serialize (void)\n+{\n+  __builtin_ia32_serialize ();\n+}\n+\n+#ifdef __DISABLE_SERIALIZE__\n+#undef __DISABLE_SERIALIZE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SERIALIZE__ */\n+\n+#endif /* _SERIALIZE_H_INCLUDED.  */"}, {"sha": "09bc3dfcc32932cfef873c0453b46f3563ebe058", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -1344,7 +1344,7 @@ See RS/6000 and PowerPC Options.\n -mshstk -mmanual-endbr -mforce-indirect-call  -mavx512vbmi2 -mavx512bf16 -menqcmd @gol\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n--mrdseed  -msgx -mavx512vp2intersect@gol\n+-mrdseed  -msgx -mavx512vp2intersect -mserialize @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -29485,6 +29485,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mcldemote\n @opindex mcldemote\n+@need 200\n+@itemx -mserialize\n+@opindex mserialize\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -29493,9 +29496,9 @@ WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n 3DNow!@:, enhanced 3DNow!@:, POPCNT, ABM, ADX, BMI, BMI2, LZCNT, FXSR, XSAVE,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n-ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, or CLDEMOTE\n-extended instruction sets.  Each has a corresponding @option{-mno-} option to\n-disable use of these instructions.\n+ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE\n+or CLDEMOTE extended instruction sets.  Each has a corresponding\n+@option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "f8e9f2dccda2e4ddeabb2513138263699ed702b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -1,3 +1,16 @@\n+2020-05-06  Hongtao.liu  <hongtao.liu@intel.com>\n+\t    Wei Xiao  <wei3.xiao@intel.com>\n+\n+\t* gcc/testsuite/gcc.target/i386/serialize-1.c: New test.\n+\t* gcc/testsuite/g++.dg/other/i386-2.C: Add -mserialize.\n+\t* gcc/testsuite/g++.dg/other/i386-3.C: Ditto.\n+\t* gcc/testsuite/gcc.target/i386/funcspec-56.inc: Ditto.\n+\t* gcc/testsuite/gcc.target/i386/sse-12.c: Ditto.\n+\t* gcc/testsuite/gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc/testsuite/gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc/testsuite/gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc/testsuite/gcc.target/i386/sse-23.c: Ditto.\n+\n 2020-05-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR testsuite/84324"}, {"sha": "dd9e6849cf2888fdc00292f02cd4d1e378f7044f", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "1fdea53ae7a6fff380ec7eee34cbaf5d36dd1e38", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "84f8e31eb63580b3a50ab5469af21540469977c4", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -66,6 +66,7 @@ extern void test_clwb (void)\t\t\t__attribute__((__target__(\"clwb\")));\n \n extern void test_cld (void)\t\t\t__attribute__((__target__(\"cld\")));\n extern void test_recip (void)\t\t\t__attribute__((__target__(\"recip\")));\n+extern void test_serialize (void)\t\t__attribute__((__target__(\"serialize\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -133,6 +134,7 @@ extern void test_no_clwb (void)\t\t\t__attribute__((__target__(\"no-clwb\")));\n \n extern void test_no_cld (void)\t\t\t__attribute__((__target__(\"no-cld\")));\n extern void test_no_recip (void)\t\t__attribute__((__target__(\"no-recip\")));\n+extern void test_no_serialize (void)\t\t__attribute__((__target__(\"no-serialize\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "29512b85d3473da3b3811dec1ab1dec5b717e2e5", "filename": "gcc/testsuite/gcc.target/i386/serialize-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fserialize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fserialize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fserialize-1.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mserialize\" } */\n+/* { dg-final { scan-assembler-times \"\\tserialize\"  1 } } */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (void)\n+{\n+   _serialize ();\n+}"}, {"sha": "0ab94b2692c70503dfe7491f412b64e7308186a7", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "472f7528a43c51d60dbafe3a2f201b138f967be6", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "396a4646e019f4439c493909148929c5fec62c55", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "581e16ba1d480367a0e6c8b4ad63be73e0860fc5", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -102,7 +102,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -219,7 +219,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "808913933365eeb89dd879b3e577db728ec63a04", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366386c7a970bf6a32c5a2abb714ca6c7f4e7790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=366386c7a970bf6a32c5a2abb714ca6c7f4e7790", "patch": "@@ -697,6 +697,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize\")\n \n #include <x86intrin.h>"}]}