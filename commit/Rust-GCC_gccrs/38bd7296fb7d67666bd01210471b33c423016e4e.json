{"sha": "38bd7296fb7d67666bd01210471b33c423016e4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhiZDcyOTZmYjdkNjc2NjZiZDAxMjEwNDcxYjMzYzQyMzAxNmU0ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@soma.redhat.com", "date": "2000-06-22T06:19:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-22T06:19:44Z"}, "message": "Fix alpha, powerpc build failures.\n\n\n2000-06-21  Benjamin Kosnik  <bkoz@soma.redhat.com>\n\n\tFix alpha, powerpc build failures.\n\t* acinclude.m4 (GLIBCPP_CHECK_MATH_SUPPORT): Substantially\n\tre-write. Need to check for both proper declaration when using a\n\tc++ compiler, and \"C\" linkage when linking. Do both, and if both\n\texist, then define the HAVE_* bits in config.h.\n\t(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_n): New, uber-macros. Does all.\n\t(GLIBCPP_CHECK_LINKER_FEATURES): Actually link and run this\n\tprogram, doh.\n\nFrom-SVN: r34643", "tree": {"sha": "b66d14cfea691b977946d246def16eecbdcc5321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b66d14cfea691b977946d246def16eecbdcc5321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38bd7296fb7d67666bd01210471b33c423016e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38bd7296fb7d67666bd01210471b33c423016e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38bd7296fb7d67666bd01210471b33c423016e4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38bd7296fb7d67666bd01210471b33c423016e4e/comments", "author": null, "committer": null, "parents": [{"sha": "9a7ab4b335fbcbe44a95d92defed46c0e16a5b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7ab4b335fbcbe44a95d92defed46c0e16a5b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7ab4b335fbcbe44a95d92defed46c0e16a5b8e"}], "stats": {"total": 12730, "additions": 12205, "deletions": 525}, "files": [{"sha": "28c5628097b01c37576ca11269deac498d3303aa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=38bd7296fb7d67666bd01210471b33c423016e4e", "patch": "@@ -1,3 +1,14 @@\n+2000-06-21  Benjamin Kosnik  <bkoz@soma.redhat.com>\n+\n+\tFix alpha, powerpc build failures.\n+\t* acinclude.m4 (GLIBCPP_CHECK_MATH_SUPPORT): Substantially\n+\tre-write. Need to check for both proper declaration when using a\n+\tc++ compiler, and \"C\" linkage when linking. Do both, and if both\n+\texist, then define the HAVE_* bits in config.h.\n+\t(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE): New, uber-macro. Does all.\n+\t(GLIBCPP_CHECK_LINKER_FEATURES): Actually link and run this\n+\tprogram, doh.\n+\n 2000-06-20  Anthony Williams  <anthony@anthonyw.cjb.net>\n \n \t* bits/string.tcc: Fix find."}, {"sha": "939746eb00b43cf23b7fa70c8d54a0fd6d7aa749", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 238, "deletions": 40, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=38bd7296fb7d67666bd01210471b33c423016e4e", "patch": "@@ -159,7 +159,6 @@ dnl specific precautions need to be taken.\n dnl \n dnl GLIBCPP_CHECK_COMPILER_VERSION\n AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n-\n   # Sanity check that g++ is capable of dealing with v-3.\n   AC_MSG_CHECKING([for g++ that will successfully compile this code])\n   AC_EGREP_CPP([ok], [\n@@ -264,13 +263,14 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   # Check for -Wl,--gc-sections\n   AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n   CXXFLAGS='-Wl,--gc-sections'\n-  AC_TRY_COMPILE(, [\n-   try\n-     {\n-       throw 1;\n-     }\n-   catch (...) {};\n-  ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no])\n+  AC_TRY_RUN([\n+   int main() \n+   {\n+     try { throw 1; }\n+     catch (...) { };\n+     return 0;\n+   }\n+  ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n   if test \"$ac_test_CXXFLAGS\" = set; then\n     CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   else\n@@ -893,50 +893,248 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n ])\n \n \n+dnl\n+dnl Check to see if the argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_CARGF etc if \"cargf\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with ONE parameter\n+dnl\n+dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n+AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ $1(0);], \n+  [use_$1=yes], [use_$1=no])\n+  AC_MSG_RESULT($use_$1)\n+  AC_LANG_RESTORE\n+  if test x$use_$1 = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n+\n+\n+dnl\n+dnl Check to see if the argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_CARGF etc if \"cargf\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with TWO parameters\n+dnl\n+dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n+AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ $1(0, 0);], \n+  [use_$1=yes], [use_$1=no])\n+  AC_MSG_RESULT($use_$1)\n+  AC_LANG_RESTORE\n+  if test x$use_$1 = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n+\n+\n+dnl\n+dnl Check to see if the argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_CARGF etc if \"cargf\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with THREE parameters\n+dnl\n+dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n+AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ $1(0, 0, 0);], \n+  [use_$1=yes], [use_$1=no])\n+  AC_MSG_RESULT($use_$1)\n+  AC_LANG_RESTORE\n+  if test x$use_$1 = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n+\n+\n dnl\n dnl Check to see what the underlying c library or math library is like.\n+dnl These checks need to do two things: \n+dnl 1) make sure the name is declared when using the c++ compiler\n+dnl 2) make sure the name has \"C\" linkage\n+dnl This might seem like overkill but experience has shown that it's not...\n dnl\n dnl Define HAVE_CARGF etc if \"cargf\" is found.\n dnl\n dnl GLIBCPP_CHECK_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n-  dnl Work around bug on powerpc compiler, where no long double is\n-  dnl declared, yet functions defined with long double are in libm. Thus,\n-  dnl the \"C\" math library has the prototypes implicitly declared, and\n-  dnl everything works.\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS='-Werror-implicit-function-declaration -fno-builtins'\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-fno-builtins'\n \n   dnl Check libm\n   AC_CHECK_LIB(m, sin, libm=\"-lm\")\n-  save_LIBS=\"$LIBS\"\n+  ac_save_LIBS=\"$LIBS\"\n   LIBS=\"$LIBS $libm\"\n \n-  dnl Check to see if basic C math functions have float, long double versions.\n-  AC_REPLACE_MATHFUNCS(cosf fabsf sinf sqrtf)\n-  AC_CHECK_FUNCS(isnan isnanf isnanl isinf isinff isinfl copysign copysignl \\\n-  acosf acosl asinf asinl atanf atanl atan2f atan2l ceilf ceill cosl \\\n-  coshf coshl expf expl fabsl floorf floorl fmodf fmodl frexpf frexpl ldexpf \\\n-  ldexpl logf logl log10f log10l modff modfl powf powl sinl sinhf \\\n-  sinhl sqrtl tanf tanl tanhf tanhl strtof strtold sincos sincosf \\\n-  sincosl finite finitef finitel fqfinite fpclass qfpclass)\n-\n-#Some runtimes have these functions with a preceding underscore. Please\n-# keep this sync'd with the one above. And if you add any new symbol,\n-# please add the corresponding block in the @BOTTOM@ section of\n-# acconfig.h.\n-\n-  AC_CHECK_FUNCS(_isnan _isnanf _isnanl _isinf _isinff _isinfl _copysign \\\n-  _copysignl _acosf _acosl _asinf _asinl _atanf _atanl _atan2f _atan2l \\\n-  _ceilf _ceill _cosf _cosl _coshf _coshl _expf _expl _fabsf _fabsl \\\n-  _floorf _floorl _fmodf _fmodl _frexpf _frexpl _ldexpf _ldexpl _logf _logl \\\n-  _log10f _log10l _modff _modfl _powf _powl _sinf _sinl _sinhf _sinhl \\\n-  _sqrtf _sqrtl _tanf _tanl _tanhf _tanhl _strtof _strtold _sincos _sincosf \\\n-  _sincosl _finite _finitef _finitel _fqfinite _fpclass _qfpclass)\n-\n-  LIBS=\"$save_LIBS\"\n-#  CFLAGS=\"$ac_save_CFLAGS\"\n+  dnl Although not math functions, needed and for some reason checked here.\n+  AC_CHECK_FUNCS(strtof strtold)\n+\n+  dnl Check to see if certain C math functions exist.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnan)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finite)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysign)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincos)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fpclass)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n+\n+  dnl Check to see if basic C math functions have float versions.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2f)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(ceilf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(cosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(coshf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(floorf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanhf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitef)\n+\n+  dnl Check to see if basic C math functions have long double versions.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(copysignl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2l)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(ceill)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(cosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(coshl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(floorl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(sinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanhl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitel)\n+\n+  dnl Some runtimes have these functions with a preceding underscore. Please\n+  dnl keep this sync'd with the one above. And if you add any new symbol,\n+  dnl please add the corresponding block in the @BOTTOM@ section of acconfig.h.\n+  dnl Check to see if certain C math functions exist.\n+  dnl Check to see if certain C math functions exist.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnan)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finite)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_copysign)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincos)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fpclass)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_qfpclass)\n+\n+  dnl Check to see if basic C math functions have float versions.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_atan2f)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_ceilf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_cosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_coshf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_expf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fabsf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_floorf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_fmodf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_frexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_ldexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_logf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10f)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanhf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finitef)\n+\n+  dnl Check to see if basic C math functions have long double versions.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinfl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_copysignl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_atan2l)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_ceill)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_cosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_coshl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_expl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fabsl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_floorl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_fmodl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_frexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_ldexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_logl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10l)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modfl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_sinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanhl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finitel)\n+\n+  LIBS=\"$ac_save_LIBS\"\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n \n "}, {"sha": "99e76e07058991835c1610853cdbb4afc17cadec", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 238, "deletions": 37, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=38bd7296fb7d67666bd01210471b33c423016e4e", "patch": "@@ -171,7 +171,6 @@ dnl specific precautions need to be taken.\n dnl \n dnl GLIBCPP_CHECK_COMPILER_VERSION\n AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n-\n   # Sanity check that g++ is capable of dealing with v-3.\n   AC_MSG_CHECKING([for g++ that will successfully compile this code])\n   AC_EGREP_CPP([ok], [\n@@ -276,13 +275,14 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   # Check for -Wl,--gc-sections\n   AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n   CXXFLAGS='-Wl,--gc-sections'\n-  AC_TRY_COMPILE(, [\n-   try\n-     {\n-       throw 1;\n-     }\n-   catch (...) {};\n-  ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no])\n+  AC_TRY_RUN([\n+   int main() \n+   {\n+     try { throw 1; }\n+     catch (...) { };\n+     return 0;\n+   }\n+  ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n   if test \"$ac_test_CXXFLAGS\" = set; then\n     CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   else\n@@ -905,47 +905,248 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n ])\n \n \n+dnl\n+dnl Check to see if the argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_CARGF etc if \"cargf\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with ONE parameter\n+dnl\n+dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n+AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ $1(0);], \n+  [use_$1=yes], [use_$1=no])\n+  AC_MSG_RESULT($use_$1)\n+  AC_LANG_RESTORE\n+  if test x$use_$1 = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n+\n+\n+dnl\n+dnl Check to see if the argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_CARGF etc if \"cargf\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with TWO parameters\n+dnl\n+dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n+AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ $1(0, 0);], \n+  [use_$1=yes], [use_$1=no])\n+  AC_MSG_RESULT($use_$1)\n+  AC_LANG_RESTORE\n+  if test x$use_$1 = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n+\n+\n+dnl\n+dnl Check to see if the argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_CARGF etc if \"cargf\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with THREE parameters\n+dnl\n+dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n+AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_TRY_COMPILE([#include <math.h>], \n+  [ $1(0, 0, 0);], \n+  [use_$1=yes], [use_$1=no])\n+  AC_MSG_RESULT($use_$1)\n+  AC_LANG_RESTORE\n+  if test x$use_$1 = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n+\n+\n dnl\n dnl Check to see what the underlying c library or math library is like.\n+dnl These checks need to do two things: \n+dnl 1) make sure the name is declared when using the c++ compiler\n+dnl 2) make sure the name has \"C\" linkage\n+dnl This might seem like overkill but experience has shown that it's not...\n dnl\n dnl Define HAVE_CARGF etc if \"cargf\" is found.\n dnl\n dnl GLIBCPP_CHECK_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n-  dnl Work around bug on powerpc compiler\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS='-Werror-implicit-function-declaration -fno-builtins'\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-fno-builtins'\n \n   dnl Check libm\n   AC_CHECK_LIB(m, sin, libm=\"-lm\")\n-  save_LIBS=\"$LIBS\"\n+  ac_save_LIBS=\"$LIBS\"\n   LIBS=\"$LIBS $libm\"\n \n-  dnl Check to see if basic C math functions have float, long double versions.\n-  AC_REPLACE_MATHFUNCS(cosf fabsf sinf sqrtf)\n-  AC_CHECK_FUNCS(isnan isnanf isnanl isinf isinff isinfl copysign copysignl \\\n-  acosf acosl asinf asinl atanf atanl atan2f atan2l ceilf ceill cosl \\\n-  coshf coshl expf expl fabsl floorf floorl fmodf fmodl frexpf frexpl ldexpf \\\n-  ldexpl logf logl log10f log10l modff modfl powf powl sinl sinhf \\\n-  sinhl sqrtl tanf tanl tanhf tanhl strtof strtold sincos sincosf \\\n-  sincosl finite finitef finitel fqfinite fpclass qfpclass)\n-\n-#Some runtimes have these functions with a preceding underscore. Please\n-# keep this sync'd with the one above. And if you add any new symbol,\n-# please add the corresponding block in the @BOTTOM@ section of\n-# acconfig.h.\n-\n-  AC_CHECK_FUNCS(_isnan _isnanf _isnanl _isinf _isinff _isinfl _copysign \\\n-  _copysignl _acosf _acosl _asinf _asinl _atanf _atanl _atan2f _atan2l \\\n-  _ceilf _ceill _cosf _cosl _coshf _coshl _expf _expl _fabsf _fabsl \\\n-  _floorf _floorl _fmodf _fmodl _frexpf _frexpl _ldexpf _ldexpl _logf _logl \\\n-  _log10f _log10l _modff _modfl _powf _powl _sinf _sinl _sinhf _sinhl \\\n-  _sqrtf _sqrtl _tanf _tanl _tanhf _tanhl _strtof _strtold _sincos _sincosf \\\n-  _sincosl _finite _finitef _finitel _fqfinite _fpclass _qfpclass)\n-\n-  LIBS=\"$save_LIBS\"\n-#  CFLAGS=\"$ac_save_CFLAGS\"\n+  dnl Although not math functions, needed and for some reason checked here.\n+  AC_CHECK_FUNCS(strtof strtold)\n+\n+  dnl Check to see if certain C math functions exist.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnan)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finite)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(copysign)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincos)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fpclass)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n+\n+  dnl Check to see if basic C math functions have float versions.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2f)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(ceilf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(cosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(coshf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(floorf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanhf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitef)\n+\n+  dnl Check to see if basic C math functions have long double versions.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinfl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(copysignl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(acosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(asinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(atanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2l)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(ceill)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(cosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(coshl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(expl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(floorl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(modfl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(powl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(sinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sinhl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(sqrtl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(tanhl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(finitel)\n+\n+  dnl Some runtimes have these functions with a preceding underscore. Please\n+  dnl keep this sync'd with the one above. And if you add any new symbol,\n+  dnl please add the corresponding block in the @BOTTOM@ section of acconfig.h.\n+  dnl Check to see if certain C math functions exist.\n+  dnl Check to see if certain C math functions exist.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnan)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finite)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_copysign)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincos)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fpclass)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_qfpclass)\n+\n+  dnl Check to see if basic C math functions have float versions.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_atan2f)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_ceilf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_cosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_coshf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_expf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fabsf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_floorf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_fmodf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_frexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_ldexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_logf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10f)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanhf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincosf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finitef)\n+\n+  dnl Check to see if basic C math functions have long double versions.\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isnanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_isinfl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_copysignl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_acosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_asinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_atanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_atan2l)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_ceill)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_cosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_coshl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_expl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_fabsl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_floorl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_fmodl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_frexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_ldexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_logl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_log10l)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_modfl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_powl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(_sinl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sinhl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_sqrtl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_tanhl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(_sincosl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(_finitel)\n+\n+  LIBS=\"$ac_save_LIBS\"\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n \n "}, {"sha": "f7bbfda7c6f63b25e1386580b5eb49121247d7fc", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=38bd7296fb7d67666bd01210471b33c423016e4e", "patch": "@@ -312,9 +312,6 @@\n /* Define if you have the _fpclass function.  */\n #undef HAVE__FPCLASS\n \n-/* Define if you have the _fqfinite function.  */\n-#undef HAVE__FQFINITE\n-\n /* Define if you have the _frexpf function.  */\n #undef HAVE__FREXPF\n \n@@ -399,12 +396,6 @@\n /* Define if you have the _sqrtl function.  */\n #undef HAVE__SQRTL\n \n-/* Define if you have the _strtof function.  */\n-#undef HAVE__STRTOF\n-\n-/* Define if you have the _strtold function.  */\n-#undef HAVE__STRTOLD\n-\n /* Define if you have the _tanf function.  */\n #undef HAVE__TANF\n \n@@ -612,9 +603,6 @@\n /* Define if you have the fpclass function.  */\n #undef HAVE_FPCLASS\n \n-/* Define if you have the fqfinite function.  */\n-#undef HAVE_FQFINITE\n-\n /* Define if you have the frexpf function.  */\n #undef HAVE_FREXPF\n "}, {"sha": "8423c66cb69f3f95fdb901387be54d604c293e25", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 11718, "deletions": 436, "changes": 12154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38bd7296fb7d67666bd01210471b33c423016e4e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=38bd7296fb7d67666bd01210471b33c423016e4e"}]}