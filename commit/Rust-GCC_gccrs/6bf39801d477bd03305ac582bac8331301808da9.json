{"sha": "6bf39801d477bd03305ac582bac8331301808da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJmMzk4MDFkNDc3YmQwMzMwNWFjNTgyYmFjODMzMTMwMTgwOGRhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-11-01T20:16:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-11-01T20:16:20Z"}, "message": "i386-protos.h (ix86_expand_adjust_ufix_to_sfix_si): New prototype.\n\n\t* config/i386/i386-protos.h (ix86_expand_adjust_ufix_to_sfix_si): New\n\tprototype.\n\t* config/i386/i386.c (ix86_expand_adjust_ufix_to_sfix_si): New\n\tfunction.\n\t* config/i386/sse.md (fixuns_trunc<mode><sseintvecmodelower>2): Use\n\tit.\n\t(ssepackfltmode): New mode attr.\n\t(vec_pack_ufix_trunc_<mode>): New expander.\n\nFrom-SVN: r180743", "tree": {"sha": "0827096870707eee3ffb4b7a8e94a2007a0e5531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0827096870707eee3ffb4b7a8e94a2007a0e5531"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bf39801d477bd03305ac582bac8331301808da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf39801d477bd03305ac582bac8331301808da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf39801d477bd03305ac582bac8331301808da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf39801d477bd03305ac582bac8331301808da9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d1788f2e16ff606fb2a8dc716b1f6f3006a2b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1788f2e16ff606fb2a8dc716b1f6f3006a2b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1788f2e16ff606fb2a8dc716b1f6f3006a2b38"}], "stats": {"total": 97, "additions": 73, "deletions": 24}, "files": [{"sha": "5f3343364589c84defde7f20bcdf07c752e94d1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf39801d477bd03305ac582bac8331301808da9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf39801d477bd03305ac582bac8331301808da9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bf39801d477bd03305ac582bac8331301808da9", "patch": "@@ -1,3 +1,14 @@\n+2011-11-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386-protos.h (ix86_expand_adjust_ufix_to_sfix_si): New\n+\tprototype.\n+\t* config/i386/i386.c (ix86_expand_adjust_ufix_to_sfix_si): New\n+\tfunction.\n+\t* config/i386/sse.md (fixuns_trunc<mode><sseintvecmodelower>2): Use\n+\tit.\n+\t(ssepackfltmode): New mode attr.\n+\t(vec_pack_ufix_trunc_<mode>): New expander.\n+\n 2011-10-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (floatsi<mode>2_vector_sse_with_temp splitter):"}, {"sha": "5486e618dc85079a2548e8ae5ea3e47f3b8e2248", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf39801d477bd03305ac582bac8331301808da9/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf39801d477bd03305ac582bac8331301808da9/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6bf39801d477bd03305ac582bac8331301808da9", "patch": "@@ -109,6 +109,7 @@ extern void ix86_expand_convert_uns_sixf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sidf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sisf_sse (rtx, rtx);\n extern void ix86_expand_convert_sign_didf_sse (rtx, rtx);\n+extern rtx ix86_expand_adjust_ufix_to_sfix_si (rtx);\n extern enum ix86_fpcmp_strategy ix86_fp_comparison_strategy (enum rtx_code);\n extern void ix86_expand_fp_absneg_operator (enum rtx_code, enum machine_mode,\n \t\t\t\t\t    rtx[]);"}, {"sha": "c9e0adbb1b33bb9a68ce57101c836d42b9b6ff55", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf39801d477bd03305ac582bac8331301808da9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf39801d477bd03305ac582bac8331301808da9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6bf39801d477bd03305ac582bac8331301808da9", "patch": "@@ -17016,6 +17016,46 @@ ix86_expand_convert_uns_sisf_sse (rtx target, rtx input)\n     emit_move_insn (target, fp_hi);\n }\n \n+/* Adjust a V*SFmode/V*DFmode value VAL so that *sfix_trunc* resp. fix_trunc*\n+   pattern can be used on it instead of *ufix_trunc* resp. fixuns_trunc*.\n+   This is done by subtracting 0x1p32 from VAL if VAL is greater or equal\n+   (non-signalling) than 0x1p31.  */\n+\n+rtx\n+ix86_expand_adjust_ufix_to_sfix_si (rtx val)\n+{\n+  REAL_VALUE_TYPE MTWO32r, TWO31r;\n+  rtx two31r, mtwo32r, tmp[3];\n+  enum machine_mode mode = GET_MODE (val);\n+  enum machine_mode scalarmode = GET_MODE_INNER (mode);\n+  rtx (*cmp) (rtx, rtx, rtx, rtx);\n+  int i;\n+\n+  for (i = 0; i < 3; i++)\n+    tmp[i] = gen_reg_rtx (mode);\n+  real_ldexp (&TWO31r, &dconst1, 31);\n+  two31r = const_double_from_real_value (TWO31r, scalarmode);\n+  two31r = ix86_build_const_vector (mode, 1, two31r);\n+  two31r = force_reg (mode, two31r);\n+  real_ldexp (&MTWO32r, &dconstm1, 32);\n+  mtwo32r = const_double_from_real_value (MTWO32r, scalarmode);\n+  mtwo32r = ix86_build_const_vector (mode, 1, mtwo32r);\n+  mtwo32r = force_reg (mode, mtwo32r);\n+  switch (mode)\n+    {\n+    case V8SFmode: cmp = gen_avx_cmpv8sf3; break;\n+    case V4SFmode: cmp = gen_avx_cmpv4sf3; break;\n+    case V4DFmode: cmp = gen_avx_cmpv4df3; break;\n+    case V2DFmode: cmp = gen_avx_cmpv2df3; break;\n+    default: gcc_unreachable ();\n+    }\n+  emit_insn (cmp (tmp[0], val, two31r, GEN_INT (29)));\n+  tmp[1] = expand_simple_binop (mode, AND, tmp[0], mtwo32r, tmp[1],\n+\t\t\t\t0, OPTAB_DIRECT);\n+  return expand_simple_binop (mode, PLUS, val, tmp[1], tmp[2],\n+\t\t\t      0, OPTAB_DIRECT);\n+}\n+\n /* A subroutine of ix86_build_signbit_mask.  If VECT is true,\n    then replicate the value for all elements of the vector\n    register.  */"}, {"sha": "33c2e94b3693b9156192caf13ab27b8a82bafe07", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf39801d477bd03305ac582bac8331301808da9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf39801d477bd03305ac582bac8331301808da9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6bf39801d477bd03305ac582bac8331301808da9", "patch": "@@ -2323,32 +2323,13 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"fixuns_trunc<mode><sseintvecmodelower>2\"\n-  [(set (match_dup 4)\n-\t(unspec:VF1\n-\t  [(match_operand:VF1 1 \"register_operand\" \"\")\n-\t   (match_dup 2)\n-\t   (const_int 29)] UNSPEC_PCMP))\n-   (set (match_dup 5)\n-\t(and:VF1 (match_dup 4) (match_dup 3)))\n-   (set (match_dup 6)\n-\t(plus:VF1 (match_dup 1) (match_dup 5)))\n-   (set (match_operand:<sseintvecmode> 0 \"register_operand\" \"\")\n-\t(fix:<sseintvecmode> (match_dup 6)))]\n+  [(match_operand:<sseintvecmode> 0 \"register_operand\" \"\")\n+   (match_operand:VF1 1 \"register_operand\" \"\")]\n   \"TARGET_AVX\"\n {\n-  REAL_VALUE_TYPE MTWO32r, TWO31r;\n-  int i;\n-\n-  real_ldexp (&TWO31r, &dconst1, 31);\n-  operands[2] = const_double_from_real_value (TWO31r, SFmode);\n-  operands[2] = ix86_build_const_vector (<MODE>mode, 1, operands[2]);\n-  operands[2] = force_reg (<MODE>mode, operands[2]);\n-  real_ldexp (&MTWO32r, &dconstm1, 32);\n-  operands[3] = const_double_from_real_value (MTWO32r, SFmode);\n-  operands[3] = ix86_build_const_vector (<MODE>mode, 1, operands[3]);\n-  operands[3] = force_reg (<MODE>mode, operands[3]);\n-  for (i = 4; i < 7; i++)\n-    operands[i] = gen_reg_rtx (<MODE>mode);\n+  rtx tmp = ix86_expand_adjust_ufix_to_sfix_si (operands[1]);\n+  emit_insn (gen_fix_trunc<mode><sseintvecmodelower>2 (operands[0], tmp));\n+  DONE;\n })\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -3127,6 +3108,22 @@\n   DONE;\n })\n \n+(define_mode_attr ssepackfltmode\n+  [(V4DF \"V8SI\") (V2DF \"V4SI\")])\n+\n+(define_expand \"vec_pack_ufix_trunc_<mode>\"\n+  [(match_operand:<ssepackfltmode> 0 \"register_operand\" \"\")\n+   (match_operand:VF2 1 \"register_operand\" \"\")\n+   (match_operand:VF2 2 \"register_operand\" \"\")]\n+  \"TARGET_AVX\"\n+{\n+  rtx tmp[2];\n+  tmp[0] = ix86_expand_adjust_ufix_to_sfix_si (operands[1]);\n+  tmp[1] = ix86_expand_adjust_ufix_to_sfix_si (operands[2]);\n+  emit_insn (gen_vec_pack_sfix_trunc_<mode> (operands[0], tmp[0], tmp[1]));\n+  DONE;\n+})\n+\n (define_expand \"vec_pack_sfix_v4df\"\n   [(match_operand:V8SI 0 \"register_operand\" \"\")\n    (match_operand:V4DF 1 \"nonimmediate_operand\" \"\")"}]}