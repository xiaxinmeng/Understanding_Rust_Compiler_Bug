{"sha": "27d93d2c8a36cea495599e4eb070d3f922aab279", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkOTNkMmM4YTM2Y2VhNDk1NTk5ZTRlYjA3MGQzZjkyMmFhYjI3OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-11-17T19:08:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-17T19:08:02Z"}, "message": "cp-gimplify.c (genericize_cp_loop): Use LOOP_EXPR.\n\n\t* cp-gimplify.c (genericize_cp_loop): Use LOOP_EXPR.\n\t(genericize_for_stmt): Handle null statement-list.\n\nFrom-SVN: r217669", "tree": {"sha": "4d64617bb6383603cb5aa2ff5bedab20ae217989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d64617bb6383603cb5aa2ff5bedab20ae217989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d93d2c8a36cea495599e4eb070d3f922aab279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d93d2c8a36cea495599e4eb070d3f922aab279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d93d2c8a36cea495599e4eb070d3f922aab279", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d93d2c8a36cea495599e4eb070d3f922aab279/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b065b6696786e13ccce9c8b0b3eb78b02c90011d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b065b6696786e13ccce9c8b0b3eb78b02c90011d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b065b6696786e13ccce9c8b0b3eb78b02c90011d"}], "stats": {"total": 89, "additions": 38, "deletions": 51}, "files": [{"sha": "e77e7a4169f06288d7fd4c0f29594733d13de2c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d93d2c8a36cea495599e4eb070d3f922aab279/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d93d2c8a36cea495599e4eb070d3f922aab279/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27d93d2c8a36cea495599e4eb070d3f922aab279", "patch": "@@ -1,5 +1,8 @@\n 2014-11-17  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-gimplify.c (genericize_cp_loop): Use LOOP_EXPR.\n+\t(genericize_for_stmt): Handle null statement-list.\n+\n \t* constexpr.c (use_new_call): Always use new call handling.\n \n \tC++14 constexpr support (minus loops and multiple returns)"}, {"sha": "81b26d2203dd8cc4ea88398b0b8019b7bf577b2d", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 35, "deletions": 51, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d93d2c8a36cea495599e4eb070d3f922aab279/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d93d2c8a36cea495599e4eb070d3f922aab279/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=27d93d2c8a36cea495599e4eb070d3f922aab279", "patch": "@@ -208,7 +208,7 @@ genericize_cp_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n \t\t    void *data)\n {\n   tree blab, clab;\n-  tree entry = NULL, exit = NULL, t;\n+  tree exit = NULL;\n   tree stmt_list = NULL;\n \n   blab = begin_bc_block (bc_break, start_locus);\n@@ -222,64 +222,46 @@ genericize_cp_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n   cp_walk_tree (&incr, cp_genericize_r, data, NULL);\n   *walk_subtrees = 0;\n \n-  /* If condition is zero don't generate a loop construct.  */\n-  if (cond && integer_zerop (cond))\n+  if (cond && TREE_CODE (cond) != INTEGER_CST)\n     {\n-      if (cond_is_first)\n-\t{\n-\t  t = build1_loc (start_locus, GOTO_EXPR, void_type_node,\n-\t\t\t  get_bc_label (bc_break));\n-\t  append_to_statement_list (t, &stmt_list);\n-\t}\n+      /* If COND is constant, don't bother building an exit.  If it's false,\n+\t we won't build a loop.  If it's true, any exits are in the body.  */\n+      location_t cloc = EXPR_LOC_OR_LOC (cond, start_locus);\n+      exit = build1_loc (cloc, GOTO_EXPR, void_type_node,\n+\t\t\t get_bc_label (bc_break));\n+      exit = fold_build3_loc (cloc, COND_EXPR, void_type_node, cond,\n+\t\t\t      build_empty_stmt (cloc), exit);\n     }\n-  else\n-    {\n-      /* Expand to gotos, just like c_finish_loop.  TODO: Use LOOP_EXPR.  */\n-      tree top = build1 (LABEL_EXPR, void_type_node,\n-\t\t\t create_artificial_label (start_locus));\n-\n-      /* If we have an exit condition, then we build an IF with gotos either\n-\t out of the loop, or to the top of it.  If there's no exit condition,\n-\t then we just build a jump back to the top.  */\n-      exit = build1 (GOTO_EXPR, void_type_node, LABEL_EXPR_LABEL (top));\n \n-      if (cond && !integer_nonzerop (cond))\n-\t{\n-\t  /* Canonicalize the loop condition to the end.  This means\n-\t     generating a branch to the loop condition.  Reuse the\n-\t     continue label, if possible.  */\n-\t  if (cond_is_first)\n-\t    {\n-\t      if (incr)\n-\t\t{\n-\t\t  entry = build1 (LABEL_EXPR, void_type_node,\n-\t\t\t\t  create_artificial_label (start_locus));\n-\t\t  t = build1_loc (start_locus, GOTO_EXPR, void_type_node,\n-\t\t\t\t  LABEL_EXPR_LABEL (entry));\n-\t\t}\n-\t      else\n-\t\tt = build1_loc (start_locus, GOTO_EXPR, void_type_node,\n-\t\t\t\tget_bc_label (bc_continue));\n-\t      append_to_statement_list (t, &stmt_list);\n-\t    }\n+  if (exit && cond_is_first)\n+    append_to_statement_list (exit, &stmt_list);\n+  append_to_statement_list (body, &stmt_list);\n+  finish_bc_block (&stmt_list, bc_continue, clab);\n+  append_to_statement_list (incr, &stmt_list);\n+  if (exit && !cond_is_first)\n+    append_to_statement_list (exit, &stmt_list);\n \n-\t  t = build1 (GOTO_EXPR, void_type_node, get_bc_label (bc_break));\n-\t  exit = fold_build3_loc (start_locus,\n-\t\t\t\t  COND_EXPR, void_type_node, cond, exit, t);\n-\t}\n+  if (!stmt_list)\n+    stmt_list = build_empty_stmt (start_locus);\n \n-      append_to_statement_list (top, &stmt_list);\n+  tree loop;\n+  if (cond && integer_zerop (cond))\n+    {\n+      if (cond_is_first)\n+\tloop = fold_build3_loc (start_locus, COND_EXPR,\n+\t\t\t\tvoid_type_node, cond, stmt_list,\n+\t\t\t\tbuild_empty_stmt (start_locus));\n+      else\n+\tloop = stmt_list;\n     }\n+  else\n+    loop = build1_loc (start_locus, LOOP_EXPR, void_type_node, stmt_list);\n \n-  append_to_statement_list (body, &stmt_list);\n-  finish_bc_block (&stmt_list, bc_continue, clab);\n-  append_to_statement_list (incr, &stmt_list);\n-  append_to_statement_list (entry, &stmt_list);\n-  append_to_statement_list (exit, &stmt_list);\n+  stmt_list = NULL;\n+  append_to_statement_list (loop, &stmt_list);\n   finish_bc_block (&stmt_list, bc_break, blab);\n-\n-  if (stmt_list == NULL_TREE)\n-    stmt_list = build1 (NOP_EXPR, void_type_node, integer_zero_node);\n+  if (!stmt_list)\n+    stmt_list = build_empty_stmt (start_locus);\n \n   *stmt_p = stmt_list;\n }\n@@ -303,6 +285,8 @@ genericize_for_stmt (tree *stmt_p, int *walk_subtrees, void *data)\n   genericize_cp_loop (&loop, EXPR_LOCATION (stmt), FOR_COND (stmt),\n \t\t      FOR_BODY (stmt), FOR_EXPR (stmt), 1, walk_subtrees, data);\n   append_to_statement_list (loop, &expr);\n+  if (expr == NULL_TREE)\n+    expr = loop;\n   *stmt_p = expr;\n }\n "}]}