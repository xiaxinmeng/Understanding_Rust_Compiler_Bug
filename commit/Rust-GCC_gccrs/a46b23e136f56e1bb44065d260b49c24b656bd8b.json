{"sha": "a46b23e136f56e1bb44065d260b49c24b656bd8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ2YjIzZTEzNmY1NmUxYmI0NDA2NWQyNjBiNDljMjRiNjU2YmQ4Yg==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2015-10-09T10:53:31Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-09T10:53:31Z"}, "message": "[Patch PR target/67366 1/2] [ARM] - Add movmisalignhi / si patterns\n\n\nThis adds movmisalignhi and movmisalignsi expanders when unaligned\naccess is allowed by the architecture. This allows the mid-end\nto expand to misaligned loads and stored.\n\nCompared code generated for the Linux kernel and\nit changes code generation for a handful of files all for the better\nbasically by reducing the stack usage.\n\nTested by :\n\n1. armhf bootstrap and regression test - no regressions.\n2.. arm-none-eabi cross build and regression test for\n\n    {-marm/-march=armv7-a/-mfpu=vfpv3-d16/-mfloat-abi=softfp}\n    {-mthumb/-march=armv8-a/-mfpu=crypto-neon-fp-armv8/-mfloat-abi=hard}\n    {-marm/-mcpu=arm7tdmi/-mfloat-abi=soft}\n    {-mthumb/-mcpu=arm7tdmi/-mfloat-abi=soft}\n\nWill apply to trunk once 2/2 is approved.\n\nregards\nRamana\n\n2015-10-09  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        PR target/67366\n        * config/arm/arm.md (movmisalign<mode>): New.\n        * config/arm/iterators.md (HSI): New.\n\nFrom-SVN: r228643", "tree": {"sha": "4a9aa55b4f069e4f82a3d1bbcb2444cc4506cacf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a9aa55b4f069e4f82a3d1bbcb2444cc4506cacf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46b23e136f56e1bb44065d260b49c24b656bd8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46b23e136f56e1bb44065d260b49c24b656bd8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46b23e136f56e1bb44065d260b49c24b656bd8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46b23e136f56e1bb44065d260b49c24b656bd8b/comments", "author": null, "committer": null, "parents": [{"sha": "dc0e206000fbb611e6ce9ab425035f29876470a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0e206000fbb611e6ce9ab425035f29876470a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0e206000fbb611e6ce9ab425035f29876470a5"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "8f096c7b4b0a3e0e002914fa2c168282cfe74b0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46b23e136f56e1bb44065d260b49c24b656bd8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46b23e136f56e1bb44065d260b49c24b656bd8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a46b23e136f56e1bb44065d260b49c24b656bd8b", "patch": "@@ -1,3 +1,9 @@\n+2015-10-09  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+        PR target/67366\n+        * config/arm/arm.md (movmisalign<mode>): New.\n+        * config/arm/iterators.md (HSI): New.\n+\n 2015-10-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67891"}, {"sha": "02e147ec4a4e1a1191e37bd70ae69cfc881e7509", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46b23e136f56e1bb44065d260b49c24b656bd8b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46b23e136f56e1bb44065d260b49c24b656bd8b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a46b23e136f56e1bb44065d260b49c24b656bd8b", "patch": "@@ -11504,6 +11504,41 @@\n   }\"\n )\n \n+;; movmisalign patterns for HImode and SImode.\n+(define_expand \"movmisalign<mode>\"\n+  [(match_operand:HSI 0 \"general_operand\")\n+   (match_operand:HSI 1 \"general_operand\")]\n+  \"unaligned_access\"\n+{\n+  /* This pattern is not permitted to fail during expansion: if both arguments\n+     are non-registers (e.g. memory := constant), force operand 1 into a\n+     register.  */\n+  rtx (* gen_unaligned_load)(rtx, rtx);\n+  rtx tmp_dest = operands[0];\n+  if (!s_register_operand (operands[0], <MODE>mode)\n+      && !s_register_operand (operands[1], <MODE>mode))\n+    operands[1] = force_reg (<MODE>mode, operands[1]);\n+\n+  if (<MODE>mode == HImode)\n+   {\n+    gen_unaligned_load = gen_unaligned_loadhiu;\n+    tmp_dest = gen_reg_rtx (SImode);\n+   }\n+  else\n+    gen_unaligned_load = gen_unaligned_loadsi;\n+\n+  if (MEM_P (operands[1]))\n+   {\n+    emit_insn (gen_unaligned_load (tmp_dest, operands[1]));\n+    if (<MODE>mode == HImode)\n+      emit_move_insn (operands[0], gen_lowpart (HImode, tmp_dest));\n+   }\n+  else\n+    emit_insn (gen_unaligned_store<mode> (operands[0], operands[1]));\n+\n+  DONE;\n+})\n+\n ;; Vector bits common to IWMMXT and Neon\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "6a541251ed1e5d7c766aca04f0da97ba6d470541", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46b23e136f56e1bb44065d260b49c24b656bd8b/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46b23e136f56e1bb44065d260b49c24b656bd8b/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=a46b23e136f56e1bb44065d260b49c24b656bd8b", "patch": "@@ -33,6 +33,9 @@\n ;; A list of integer modes that are up to one word long\n (define_mode_iterator QHSI [QI HI SI])\n \n+;; A list of integer modes that are half and one word long\n+(define_mode_iterator HSI [HI SI])\n+\n ;; A list of integer modes that are less than a word\n (define_mode_iterator NARROW [QI HI])\n "}]}