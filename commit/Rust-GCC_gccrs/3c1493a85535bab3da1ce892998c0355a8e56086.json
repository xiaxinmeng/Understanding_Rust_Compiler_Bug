{"sha": "3c1493a85535bab3da1ce892998c0355a8e56086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxNDkzYTg1NTM1YmFiM2RhMWNlODkyOTk4YzAzNTVhOGU1NjA4Ng==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.org", "date": "1998-02-17T20:54:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-17T20:54:12Z"}, "message": "linux.mt (IO_OBJECTS): Add iogetline.o.\n\n        * config/linux.mt (IO_OBJECTS): Add iogetline.o.\n        * config/linuxlibc1.mt: Ditto.\n        * iogetline.c (_IO_getline_info): Renamed from _IO_getline.\n        (_IO_getline): Just call _IO_getline_info.\n        * isgetline.cc (istream::getline, istream::get, _sb_readline):\n        Call _IO_getline_info instead of _IO_getline and get the EOF\n        information.\n        * sbgetline.cc (streambuf::sgetline): Ditto.\n        * libioP.h (_IO_getline_info): New declaration.\n        * iogetline.c (_IO_getline): Handle the case when there is no\n        buffer.\n\nFrom-SVN: r18042", "tree": {"sha": "275c614a7ecc92f356d3996234d1ae182b042524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/275c614a7ecc92f356d3996234d1ae182b042524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c1493a85535bab3da1ce892998c0355a8e56086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1493a85535bab3da1ce892998c0355a8e56086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1493a85535bab3da1ce892998c0355a8e56086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1493a85535bab3da1ce892998c0355a8e56086/comments", "author": null, "committer": null, "parents": [{"sha": "365ca18bf02e2fe6b41e17990ea834d788a03856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/365ca18bf02e2fe6b41e17990ea834d788a03856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/365ca18bf02e2fe6b41e17990ea834d788a03856"}], "stats": {"total": 122, "additions": 90, "deletions": 32}, "files": [{"sha": "98dac951e52442f64b8690e7ceeed16bf2d4cb97", "filename": "libio/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FChangeLog?ref=3c1493a85535bab3da1ce892998c0355a8e56086", "patch": "@@ -1,3 +1,21 @@\n+Tue Feb 17 21:56:25 1998  H.J. Lu  (hjl@gnu.org)\n+\n+\t* config/linux.mt (IO_OBJECTS): Add iogetline.o.\n+\t* config/linuxlibc1.mt: Ditto.\n+\n+\t* iogetline.c (_IO_getline_info): Renamed from _IO_getline.\n+\t(_IO_getline): Just call _IO_getline_info.\n+\n+\t* isgetline.cc (istream::getline, istream::get, _sb_readline):\n+\tCall _IO_getline_info instead of _IO_getline and get the EOF\n+\tinformation.\n+\t* sbgetline.cc (streambuf::sgetline): Ditto.\n+\n+\t* libioP.h (_IO_getline_info): New declaration.\n+\n+\t* iogetline.c (_IO_getline): Handle the case when there is no\n+\tbuffer.\n+\n Fri Feb 13 00:57:20 1998  Krister Walfridsson (cato@df.lth.se)\n \n \t* fileops.c: #include <unistd.h>."}, {"sha": "0585d90cd1033bc6ceb716790cc20fa169032eda", "filename": "libio/config/linux.mt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fconfig%2Flinux.mt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fconfig%2Flinux.mt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fconfig%2Flinux.mt?ref=3c1493a85535bab3da1ce892998c0355a8e56086", "patch": "@@ -16,7 +16,7 @@ _G_CONFIG_H=\n LIBIO_INCLUDE=\n \n # We have those in libc.a.\n-IO_OBJECTS=\n+IO_OBJECTS= iogetline.o\n STDIO_WRAP_OBJECTS=\n OSPRIM_OBJECTS=\n STDIO_OBJECTS="}, {"sha": "90fa427225e3c30dc3be1b9489a88a666257a897", "filename": "libio/config/linuxlibc1.mt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fconfig%2Flinuxlibc1.mt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fconfig%2Flinuxlibc1.mt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fconfig%2Flinuxlibc1.mt?ref=3c1493a85535bab3da1ce892998c0355a8e56086", "patch": "@@ -11,7 +11,7 @@ LIBIO_INCLUDE=\n # We have those in libc.a.\n IO_OBJECTS=iogetc.o ioputc.o iofeof.o ioferror.o \\\n \tfiledoalloc.o fileops.o genops.o iofclose.o \\\n-\tiovsprintf.o iovsscanf.o strops.o\n+\tiovsprintf.o iovsscanf.o strops.o iogetline.o\n STDIO_WRAP_OBJECTS=\n OSPRIM_OBJECTS=\n STDIO_OBJECTS="}, {"sha": "631db78d12762e6109c51e294467a481e22b40d7", "filename": "libio/iogetline.c", "status": "modified", "additions": 57, "deletions": 23, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fiogetline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fiogetline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fiogetline.c?ref=3c1493a85535bab3da1ce892998c0355a8e56086", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1993, 1997 Free Software Foundation, Inc.\n+/* Copyright (C) 1993, 1997, 1998 Free Software Foundation, Inc.\n    This file is part of the GNU IO Library.\n \n    This library is free software; you can redistribute it and/or\n@@ -26,6 +26,19 @@\n #include \"libioP.h\"\n #include <string.h>\n \n+#if defined(_LIBC) || !_G_HAVE_IO_GETLINE_INFO\n+\n+_IO_size_t\n+_IO_getline (fp, buf, n, delim, extract_delim)\n+     _IO_FILE *fp;\n+     char *buf;\n+     _IO_size_t n;\n+     int delim;\n+     int extract_delim;\n+{\n+  return _IO_getline_info (fp, buf, n, delim, extract_delim, (int *) 0);\n+}\n+\n /* Algorithm based on that used by Berkeley pre-4.4 fgets implementation.\n \n    Read chars into buf (of size n), until delim is seen.\n@@ -35,44 +48,65 @@\n    If extract_delim > 0, insert delim in output. */\n \n _IO_size_t\n-_IO_getline (fp, buf, n, delim, extract_delim)\n+_IO_getline_info (fp, buf, n, delim, extract_delim, eof)\n      _IO_FILE *fp;\n      char *buf;\n      _IO_size_t n;\n      int delim;\n      int extract_delim;\n+     int *eof;\n {\n   char *ptr = buf;\n+  if (eof) *eof = 0;\n   do\n     {\n       _IO_ssize_t len = fp->_IO_read_end - fp->_IO_read_ptr;\n-      char *t;\n       if (len <= 0)\n-\tif (__underflow (fp) == EOF)\n-\t  break;\n-\telse\n-\t  len = fp->_IO_read_end - fp->_IO_read_ptr;\n-      if ((_IO_size_t) len >= n)\n-\tlen = n;\n-      t = (char *) memchr ((void *) fp->_IO_read_ptr, delim, len);\n-      if (t != NULL)\n \t{\n-\t  _IO_size_t old_len = ptr-buf;\n-\t  len = t - fp->_IO_read_ptr;\n-\t  if (extract_delim >= 0)\n+\t  int c = __uflow (fp);\n+\t  if (c == EOF)\n+\t    {\n+\t      if (eof) *eof = c;\n+\t      break;\n+\t    }\n+\t  if (c == delim)\n \t    {\n-\t      ++t;\n \t      if (extract_delim > 0)\n-\t\t++len;\n+\t\t*ptr++ = c;\n+\t      else if (extract_delim < 0)\n+\t\t_IO_sputbackc (fp, c);\n+\t      return ptr - buf;\n \t    }\n-\t  memcpy ((void *) ptr, (void *) fp->_IO_read_ptr, len);\n-\t  fp->_IO_read_ptr = t;\n-\t  return old_len + len;\n+\t  *ptr++ = c;\n+\t  n--;\n \t}\n-      memcpy ((void *) ptr, (void *) fp->_IO_read_ptr, len);\n-      fp->_IO_read_ptr += len;\n-      ptr += len;\n-      n -= len;\n+\telse\n+\t  {\n+\t    char *t;\n+\t    if ((_IO_size_t) len >= n)\n+\t      len = n;\n+\t    t = (char *) memchr ((void *) fp->_IO_read_ptr, delim, len);\n+\t    if (t != NULL)\n+\t      {\n+\t\t_IO_size_t old_len = ptr-buf;\n+\t\tlen = t - fp->_IO_read_ptr;\n+\t\tif (extract_delim >= 0)\n+\t\t  {\n+\t\t    ++t;\n+\t\t    if (extract_delim > 0)\n+\t\t      ++len;\n+\t\t  }\n+\t\tmemcpy ((void *) ptr, (void *) fp->_IO_read_ptr, len);\n+\t\tfp->_IO_read_ptr = t;\n+\t\treturn old_len + len;\n+\t      }\n+\t    memcpy ((void *) ptr, (void *) fp->_IO_read_ptr, len);\n+\t    fp->_IO_read_ptr += len;\n+\t    ptr += len;\n+\t    n -= len;\n+\t  }\n     } while (n != 0);\n   return ptr - buf;\n }\n+\n+#endif /* Defined(_LIBC) || !_G_HAVE_IO_GETLINE_INFO */"}, {"sha": "2a2cd0f58a77a6dee72bac1128f8d21439ebadb2", "filename": "libio/isgetline.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fisgetline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fisgetline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fisgetline.cc?ref=3c1493a85535bab3da1ce892998c0355a8e56086", "patch": "@@ -38,8 +38,9 @@ istream& istream::getline(char* buf, int len, char delim)\n   if (ipfx1())\n     {\n       streambuf *sb = rdbuf();\n-      _gcount = _IO_getline(sb, buf, len - 1, delim, -1);\n-      ch = sb->sbumpc();\n+      _gcount = _IO_getline_info(sb, buf, len - 1, delim, -1, &ch);\n+      if (ch != EOF)\n+\tch = sb->sbumpc();\n       if (ch == EOF)\n \tset (_gcount == 0 ? (ios::failbit|ios::eofbit) : ios::eofbit);\n       else if (ch != (unsigned char) delim)\n@@ -67,8 +68,9 @@ istream& istream::get(char* buf, int len, char delim)\n   if (ipfx1())\n     {\n       streambuf *sbuf = rdbuf();\n-      long count = _IO_getline(sbuf, buf, len - 1, delim, -1);\n-      if (count == 0 && sbuf->sgetc() == EOF)\n+      int ch;\n+      long count = _IO_getline_info(sbuf, buf, len - 1, delim, -1, &ch);\n+      if (_gcount == 0 && ch == EOF)\n \tset(ios::failbit|ios::eofbit);\n       else\n \t_gcount = count;\n@@ -92,8 +94,10 @@ char *_sb_readline (streambuf *sb, long& total, char terminator)\n     char *ptr;\n     int ch;\n     \n-    _IO_size_t count = _IO_getline(sb, buf, CHUNK_SIZE, terminator, -1);\n-    ch = sb->sbumpc();\n+    _IO_size_t count = _IO_getline_info(sb, buf, CHUNK_SIZE, terminator,\n+\t\t\t\t       -1, &ch);\n+    if (ch != EOF)\n+      ch = sb->sbumpc();\n     long old_total = total;\n     total += count;\n     if (ch != EOF && ch != terminator) {"}, {"sha": "3a138f0c077e6dcdc663dc75967238a07b80bad4", "filename": "libio/libioP.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FlibioP.h?ref=3c1493a85535bab3da1ce892998c0355a8e56086", "patch": "@@ -417,6 +417,8 @@ extern int _IO_vsnprintf __P ((char *string, _IO_size_t maxlen,\n \n \n extern _IO_size_t _IO_getline __P ((_IO_FILE *,char *, _IO_size_t, int, int));\n+extern _IO_size_t _IO_getline_info __P ((_IO_FILE *,char *, _IO_size_t,\n+\t\t\t\t\t int, int, int *));\n extern _IO_ssize_t _IO_getdelim __P ((char **, _IO_size_t *, int, _IO_FILE *));\n extern double _IO_strtod __P ((const char *, char **));\n extern char *_IO_dtoa __P ((double __d, int __mode, int __ndigits,"}, {"sha": "0475114c629ee0d976613a46b89d19f64ea4e376", "filename": "libio/sbgetline.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fsbgetline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1493a85535bab3da1ce892998c0355a8e56086/libio%2Fsbgetline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fsbgetline.cc?ref=3c1493a85535bab3da1ce892998c0355a8e56086", "patch": "@@ -27,5 +27,5 @@ the executable file might be covered by the GNU General Public License. */\n \n long streambuf::sgetline(char* buf, _IO_size_t n, char delim, int extract_delim)\n {\n-  return _IO_getline(this, buf, n, delim, extract_delim);\n+  return _IO_getline_info(this, buf, n, delim, extract_delim, (int *) 0);\n }"}]}