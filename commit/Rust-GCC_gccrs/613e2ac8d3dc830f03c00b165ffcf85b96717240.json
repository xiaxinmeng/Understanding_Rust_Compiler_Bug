{"sha": "613e2ac8d3dc830f03c00b165ffcf85b96717240", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEzZTJhYzhkM2RjODMwZjAzYzAwYjE2NWZmY2Y4NWI5NjcxNzI0MA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-05-02T14:13:17Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-05-02T14:13:17Z"}, "message": "re PR fortran/27269 (Segfault with EQUIVALENCEs in modules together with ONLY clauses)\n\n2006-05-02 Paul Thomas <pault@gcc.gnu.org>\n\n        PR fortran/27269\n        * module.c: Add static flag in_load_equiv.\n        (mio_expr_ref): Return if no symtree and in_load_equiv.\n        (load_equiv): If any of the equivalence members have no symtree, free\n        the equivalence and the associated expressions.\n\n        PR fortran/27324\n        * trans-common.c (gfc_trans_common): Invert the order of calls to\n        finish equivalences and gfc_commit_symbols.\n\n        PR fortran/27269\n        PR fortran/27324\n        * gfortran.dg/module_equivalence_2.f90: New test.\n\nFrom-SVN: r113465", "tree": {"sha": "5e8905912be5f73f8c12dcef22be42404b8d7168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e8905912be5f73f8c12dcef22be42404b8d7168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/613e2ac8d3dc830f03c00b165ffcf85b96717240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613e2ac8d3dc830f03c00b165ffcf85b96717240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613e2ac8d3dc830f03c00b165ffcf85b96717240", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613e2ac8d3dc830f03c00b165ffcf85b96717240/comments", "author": null, "committer": null, "parents": [{"sha": "597fb86c9078a5d7e1e84b222eb18012263cfb8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597fb86c9078a5d7e1e84b222eb18012263cfb8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/597fb86c9078a5d7e1e84b222eb18012263cfb8c"}], "stats": {"total": 91, "additions": 85, "deletions": 6}, "files": [{"sha": "abc6c4a9178b14d0c7f74017ee01fda350af50aa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=613e2ac8d3dc830f03c00b165ffcf85b96717240", "patch": "@@ -1,3 +1,15 @@\n+2006-05-02 Paul Thomas <pault@gcc.gnu.org>\n+\n+        PR fortran/27269\n+        * module.c: Add static flag in_load_equiv.\n+        (mio_expr_ref): Return if no symtree and in_load_equiv.\n+        (load_equiv): If any of the equivalence members have no symtree, free\n+        the equivalence and the associated expressions.\n+\n+        PR fortran/27324\n+        * trans-common.c (gfc_trans_common): Invert the order of calls to\n+        finish equivalences and gfc_commit_symbols.\n+\n 2006-04-29  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/25681"}, {"sha": "a5722c6682bb7fc403cdc5ed591d4f52b3106a16", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=613e2ac8d3dc830f03c00b165ffcf85b96717240", "patch": "@@ -182,6 +182,9 @@ static gfc_use_rename *gfc_rename_list;\n static pointer_info *pi_root;\n static int symbol_number;\t/* Counter for assigning symbol numbers */\n \n+/* Tells mio_expr_ref not to load unused equivalence members.  */\n+static bool in_load_equiv;\n+\n \n \n /*****************************************************************/\n@@ -2135,6 +2138,11 @@ mio_symtree_ref (gfc_symtree ** stp)\n     {\n       require_atom (ATOM_INTEGER);\n       p = get_integer (atom_int);\n+\n+      /* An unused equivalence member; bail out.  */\n+      if (in_load_equiv && p->u.rsym.symtree == NULL)\n+\treturn;\n+      \n       if (p->type == P_UNKNOWN)\n         p->type = P_SYMBOL;\n \n@@ -3008,14 +3016,18 @@ load_commons(void)\n   mio_rparen();\n }\n \n-/* load_equiv()-- Load equivalences. */\n+/* load_equiv()-- Load equivalences. The flag in_load_equiv informs\n+   mio_expr_ref of this so that unused variables are not loaded and\n+   so that the expression can be safely freed.*/\n \n static void\n load_equiv(void)\n {\n-  gfc_equiv *head, *tail, *end;\n+  gfc_equiv *head, *tail, *end, *eq;\n+  bool unused;\n \n   mio_lparen();\n+  in_load_equiv = true;\n \n   end = gfc_current_ns->equiv;\n   while(end != NULL && end->next != NULL)\n@@ -3039,16 +3051,40 @@ load_equiv(void)\n \tmio_expr(&tail->expr);\n       }\n \n+    /* Unused variables have no symtree.  */\n+    unused = false;\n+    for (eq = head; eq; eq = eq->eq)\n+      {\n+\tif (!eq->expr->symtree)\n+\t  {\n+\t    unused = true;\n+\t    break;\n+\t  }\n+      }\n+\n+    if (unused)\n+      {\n+\tfor (eq = head; eq; eq = head)\n+\t  {\n+\t    head = eq->eq;\n+\t    gfc_free_expr (eq->expr);\n+\t    gfc_free (eq);\n+\t  }\n+      }\n+\n     if (end == NULL)\n       gfc_current_ns->equiv = head;\n     else\n       end->next = head;\n \n-    end = head;\n+    if (head != NULL)\n+      end = head;\n+\n     mio_rparen();\n   }\n \n   mio_rparen();\n+  in_load_equiv = false;\n }\n \n /* Recursive function to traverse the pointer_info tree and load a"}, {"sha": "bf19d12c91fdf7a81e9b66a81e836af2bb495071", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=613e2ac8d3dc830f03c00b165ffcf85b96717240", "patch": "@@ -1057,9 +1057,10 @@ gfc_trans_common (gfc_namespace *ns)\n   /* Translate all named common blocks.  */\n   gfc_traverse_symtree (ns->common_root, named_common);\n \n-  /* Commit the newly created symbols for common blocks.  */\n-  gfc_commit_symbols ();\n-\n   /* Translate local equivalence.  */\n   finish_equivalences (ns);\n+\n+  /* Commit the newly created symbols for common blocks and module\n+     equivalences.  */\n+  gfc_commit_symbols ();\n }"}, {"sha": "e71a7f0b343bbf787c9f0d38da1da4401d5f44b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=613e2ac8d3dc830f03c00b165ffcf85b96717240", "patch": "@@ -1,3 +1,9 @@\n+2006-05-02 Paul Thomas <pault@gcc.gnu.org>\n+\n+        PR fortran/27269\n+        PR fortran/27324\n+        * gfortran.dg/module_equivalence_2.f90: New test.\n+\n 2006-05-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/27337"}, {"sha": "3ec8efb41a41db3497fc3ea2ba05d2261314f911", "filename": "gcc/testsuite/gfortran.dg/module_equivalence_2.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_equivalence_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613e2ac8d3dc830f03c00b165ffcf85b96717240/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_equivalence_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_equivalence_2.f90?ref=613e2ac8d3dc830f03c00b165ffcf85b96717240", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! Tests the fix for PR27269 and PR27xxx.\n+! The former caused a segfault in trying to process\n+! module b, with an unused equivalence in a. The latter\n+! produced an assembler error due to multiple declarations\n+! for a module equivalence, when one of the variables was\n+! initialized, as M in module a.\n+!\n+module a\n+  integer, parameter :: dp = selected_real_kind (10)\n+  real(dp) :: reM, M = 1.77d0\n+  equivalence (M, reM)\n+end module a\n+\n+module b\n+  use a, only : dp\n+end module b\n+\n+  use a\n+  use b\n+  if (reM .ne. 1.77d0) call abort ()\n+  reM = 0.57d1\n+  if (M .ne. 0.57d1) call abort ()\n+end"}]}