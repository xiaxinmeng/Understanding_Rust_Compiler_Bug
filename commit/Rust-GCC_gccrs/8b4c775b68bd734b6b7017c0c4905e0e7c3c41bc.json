{"sha": "8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0Yzc3NWI2OGJkNzM0YjZiNzAxN2MwYzQ5MDVlMGU3YzNjNDFiYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-07-09T13:00:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-07-09T13:00:19Z"}, "message": "re PR tree-optimization/32681 (ice for legal C code with flags -ffast-math  -O3 -ftree-vectorize)\n\n\tPR tree-optimization/32681\n\t* tree-if-conv.c (find_phi_replacement_condition): Use the condition\n\tsaved in second_edge->aux when first_bb is a loop header.\n\ntestsuite/ChangeLog:\n\n\tPR tree-optimization/32681\n\t* gcc.dg/tree-ssa/pr32681.c: New test.\n\nFrom-SVN: r126482", "tree": {"sha": "5a8686dc82a58fef1371445e8ca7a4c1722b4d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a8686dc82a58fef1371445e8ca7a4c1722b4d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/comments", "author": null, "committer": null, "parents": [{"sha": "d241cd48e0e43ac4f3db513e32e0b66805b4a87f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d241cd48e0e43ac4f3db513e32e0b66805b4a87f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d241cd48e0e43ac4f3db513e32e0b66805b4a87f"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "ca82ac2f54070beecacfde748746029094f8ae32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc", "patch": "@@ -1,3 +1,9 @@\n+2007-07-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/32681\n+\t* tree-if-conv.c (find_phi_replacement_condition): Use the condition\n+\tsaved in second_edge->aux when first_bb is a loop header.\n+\n 2007-07-09  Jan HUbicka  <jh@suse.cz>\n \n \t* cse.c (cse_insn): Avoid invalid sharing on trial replacement.\n@@ -152,8 +158,8 @@\n \treplaced with shift_count_type.\n \t(__cmpdi2, __ucmpdi2): word_type of return type replaced with\n \tcmp_return_type.\n-\t* c-common.c (handle_mode_attribute): Handling for libgcc_cmp_return and\n-\tlibgcc_shift_count attribute added.\n+\t* c-common.c (handle_mode_attribute): Handling for libgcc_cmp_return\n+\tand libgcc_shift_count attribute added.\n \t* target-def.h (TARGET_LIBGCC_CMP_RETURN_MODE,\n \tTARGET_LIBGCC_SHIFT_COUNT_MODE): New target hooks defined.\n \t(TARGET_INITIALIZER): New target hooks added.\n@@ -173,8 +179,8 @@\n \n \t* config/s390/s390.c (s390_libgcc_cmp_return_mode,\n \ts390_libgcc_shift_count_mode): Functions added.\n-\t(TARGET_LIBGCC_CMP_RETURN_MODE,\tTARGET_LIBGCC_SHIFT_COUNT_MODE): Target\n-\thooks defined.\n+\t(TARGET_LIBGCC_CMP_RETURN_MODE,\tTARGET_LIBGCC_SHIFT_COUNT_MODE):\n+\tTarget hooks defined.\n \n 2007-07-06  Richard Sandiford  <richard@codesourcery.com>\n \n@@ -199,7 +205,7 @@\n \n 2007-07-06  Uros Bizjak  <ubizjak@gmail.com>\n \n-\tPR rtl_optimization/32450\n+\tPR rtl-optimization/32450\n \t* function.c (thread_prologue_and_epilogue_insns): Emit blockage insn\n \tto ensure that instructions are not moved into the prologue when\n \tprofiling is on.  Remove unused prologue_end variable."}, {"sha": "6e616091aba863074165c0f0b573a17f62d0da35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc", "patch": "@@ -1,3 +1,8 @@\n+2007-07-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/32681\n+\t* gcc.dg/tree-ssa/pr32681.c: New test.\n+\n 2007-07-08  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/32678"}, {"sha": "2352342443b7b78a7c76561f9cfc8cdc25f3a31d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr32681.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32681.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32681.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32681.c?ref=8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ffast-math -ftree-vectorize\" } */\n+/* { dg-options \"-O3 -ffast-math -ftree-vectorize -march=nocona\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int aa_renderpalette (int p)\n+{\n+  int y = 42;\n+  int i;\n+\n+  for (i = 0; i < 256; i++)\n+    {\n+      if (y > 255)\n+\ty = 255;\n+      if (y < 0)\n+\ty = 0;\n+\n+      if (p)\n+\ty = (y < p ? 0 : (y > p) * 255 / (255 - 2 * p));\n+    }\n+    return y;\n+}"}, {"sha": "4714bd7bce5e03febfd2fc67c94cb7a153c92905", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=8b4c775b68bd734b6b7017c0c4905e0e7c3c41bc", "patch": "@@ -751,7 +751,7 @@ find_phi_replacement_condition (struct loop *loop,\n \t AND it with the incoming bb predicate.  */\n       if (second_edge->aux)\n \t*cond = build2 (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t\t*cond, first_edge->aux);\n+\t\t\t*cond, second_edge->aux);\n \n       if (TREE_CODE (*cond) == TRUTH_NOT_EXPR)\n \t/* We can be smart here and choose inverted"}]}