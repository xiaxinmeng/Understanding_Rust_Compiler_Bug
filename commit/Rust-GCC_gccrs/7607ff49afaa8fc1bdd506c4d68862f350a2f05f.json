{"sha": "7607ff49afaa8fc1bdd506c4d68862f350a2f05f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYwN2ZmNDlhZmFhOGZjMWJkZDUwNmM0ZDY4ODYyZjM1MGEyZjA1Zg==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2019-12-20T09:30:48Z"}, "committer": {"name": "Jerome Lambourg", "email": "lambourg@gcc.gnu.org", "date": "2019-12-20T09:30:48Z"}, "message": "libstdc++: Strengthen the check for availability of pthread_rwlock_t\n\n        * acinclude.m4 (_GLIBCXX_USE_PTHREAD_RWLOCK_T): Checks that\n        _PTHREADS is defined after including gthr.h.\n        * configure: Regenerate.\n\nFrom-SVN: r279635", "tree": {"sha": "af17ece8ed22d252f36dec0a24b9ed18bb232f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af17ece8ed22d252f36dec0a24b9ed18bb232f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7607ff49afaa8fc1bdd506c4d68862f350a2f05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7607ff49afaa8fc1bdd506c4d68862f350a2f05f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7607ff49afaa8fc1bdd506c4d68862f350a2f05f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7607ff49afaa8fc1bdd506c4d68862f350a2f05f/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "211c667faf4edff934894776ac0f8c81fe1b1708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211c667faf4edff934894776ac0f8c81fe1b1708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211c667faf4edff934894776ac0f8c81fe1b1708"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "126f3d386b53f838551683945b6df18d8a843c8b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7607ff49afaa8fc1bdd506c4d68862f350a2f05f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7607ff49afaa8fc1bdd506c4d68862f350a2f05f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7607ff49afaa8fc1bdd506c4d68862f350a2f05f", "patch": "@@ -1,3 +1,9 @@\n+2019-12-20  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* acinclude.m4 (_GLIBCXX_USE_PTHREAD_RWLOCK_T): Checks that _PTHREADS\n+\tis defined after including gthr.h.\n+\t* configure: Regenerate.\n+\n 2019-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* libsupc++/compare (common_comparison_category): Define without using"}, {"sha": "8401696b5b5695156456367d853abdc2a7565e83", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7607ff49afaa8fc1bdd506c4d68862f350a2f05f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7607ff49afaa8fc1bdd506c4d68862f350a2f05f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=7607ff49afaa8fc1bdd506c4d68862f350a2f05f", "patch": "@@ -1410,7 +1410,7 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n           [#include <features.h>],\n           [\n           #if ! __GLIBC_PREREQ(2, 17)\n-          #error \n+          #error\n           #endif\n           ],\n           [glibcxx_glibc217=yes], [glibcxx_glibc217=no])\n@@ -2163,7 +2163,7 @@ AC_DEFUN([GLIBCXX_CHECK_STDIO_PROTO], [\n   AC_CACHE_VAL(glibcxx_cv_gets, [\n   AC_COMPILE_IFELSE([AC_LANG_SOURCE(\n \t  [#include <stdio.h>\n-\t   namespace test \n+\t   namespace test\n \t   {\n               using ::gets;\n \t   }\n@@ -2780,9 +2780,9 @@ AC_DEFUN([GLIBCXX_ENABLE_VTABLE_VERIFY], [\n     esac\n     VTV_PCH_CXXFLAGS=\"-fvtable-verify=std\"\n   else\n-    VTV_CXXFLAGS= \n+    VTV_CXXFLAGS=\n     VTV_PCH_CXXFLAGS=\n-    VTV_CXXLINKFLAGS= \n+    VTV_CXXLINKFLAGS=\n   fi\n \n   AC_SUBST(VTV_CXXFLAGS)\n@@ -3964,7 +3964,7 @@ dnl\n AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n   GLIBCXX_ENABLE(libstdcxx-threads,auto,,[enable C++11 threads support])\n \n-  if test x$enable_libstdcxx_threads = xauto || \n+  if test x$enable_libstdcxx_threads = xauto ||\n      test x$enable_libstdcxx_threads = xyes; then\n \n   AC_LANG_SAVE\n@@ -4017,11 +4017,23 @@ AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n \t      [Define if gthreads library is available.])\n \n     # Also check for pthread_rwlock_t for std::shared_timed_mutex in C++14\n-    AC_CHECK_TYPE([pthread_rwlock_t],\n-            [AC_DEFINE([_GLIBCXX_USE_PTHREAD_RWLOCK_T], 1,\n-            [Define if POSIX read/write locks are available in <gthr.h>.])],\n-            [],\n-            [#include \"gthr.h\"])\n+    # but only do so if we're using pthread in the gthread library.\n+    # On VxWorks for example, pthread_rwlock_t is defined in sys/types.h\n+    # but the pthread library is not there by default and the gthread library\n+    # does not use it.\n+    AC_TRY_COMPILE([#include \"gthr.h\"],\n+    [\n+      #if (!defined(_PTHREADS))\n+      #error\n+      #endif\n+    ], [ac_gthread_use_pthreads=yes], [ac_gthread_use_pthreads=no])\n+    if test x\"$ac_gthread_use_pthreads\" = x\"yes\"; then\n+      AC_CHECK_TYPE([pthread_rwlock_t],\n+             [AC_DEFINE([_GLIBCXX_USE_PTHREAD_RWLOCK_T], 1,\n+             [Define if POSIX read/write locks are available in <gthr.h>.])],\n+             [],\n+             [#include \"gthr.h\"])\n+    fi\n   fi\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\""}, {"sha": "3c51166fe9fee1885583a3c8749a9f7d3d149df3", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7607ff49afaa8fc1bdd506c4d68862f350a2f05f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7607ff49afaa8fc1bdd506c4d68862f350a2f05f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=7607ff49afaa8fc1bdd506c4d68862f350a2f05f", "patch": "@@ -74654,14 +74654,41 @@ $as_echo \"#define _GLIBCXX_HAS_GTHREADS 1\" >>confdefs.h\n \n \n     # Also check for pthread_rwlock_t for std::shared_timed_mutex in C++14\n-    ac_fn_cxx_check_type \"$LINENO\" \"pthread_rwlock_t\" \"ac_cv_type_pthread_rwlock_t\" \"#include \\\"gthr.h\\\"\n+    # but only do so if we're using pthread in the gthread library.\n+    # On VxWorks for example, pthread_rwlock_t is defined in sys/types.h\n+    # but the pthread library is not there by default and the gthread library\n+    # does not use it.\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include \"gthr.h\"\n+int\n+main ()\n+{\n+\n+      #if (!defined(_PTHREADS))\n+      #error\n+      #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_gthread_use_pthreads=yes\n+else\n+  ac_gthread_use_pthreads=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+    if test x\"$ac_gthread_use_pthreads\" = x\"yes\"; then\n+      ac_fn_cxx_check_type \"$LINENO\" \"pthread_rwlock_t\" \"ac_cv_type_pthread_rwlock_t\" \"#include \\\"gthr.h\\\"\n \"\n if test \"x$ac_cv_type_pthread_rwlock_t\" = xyes; then :\n \n $as_echo \"#define _GLIBCXX_USE_PTHREAD_RWLOCK_T 1\" >>confdefs.h\n \n fi\n \n+    fi\n   fi\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\""}]}