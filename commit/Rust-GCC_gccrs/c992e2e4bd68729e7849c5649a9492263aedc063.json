{"sha": "c992e2e4bd68729e7849c5649a9492263aedc063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5MmUyZTRiZDY4NzI5ZTc4NDljNTY0OWE5NDkyMjYzYWVkYzA2Mw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2018-07-31T09:56:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-31T09:56:15Z"}, "message": "[Ada] GNATmake fails to detect missing body\n\nThis patch corrects an issue whereby building a multi-unit compilation with\nmissing sources resulted in a cryptic \"code generation\" error instead of the\nappropriate file not found error.\n\n------------\n-- Source --\n------------\n\n--  main.adb\n\nwith Types;\nprocedure Main is\nbegin\n   null;\nend;\n\n--  types.ads\n\npackage Types is\n  procedure Force;\nend;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n& gnatmake -q main.adb\ngnatmake: \"types.adb\" not found\n\n2018-07-31  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* lib-writ.adb (Write_With_Lines): Modfiy the generation of\n\tdependencies within ali files so that source unit bodies are\n\tproperly listed even if said bodies are missing.  Perform legacy\n\tbehavior in GNATprove mode.\n\t* lib-writ.ads: Modify documentation to reflect current behavior.\n\nFrom-SVN: r263100", "tree": {"sha": "9dec6198ded128117e19995598975029e63ac364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dec6198ded128117e19995598975029e63ac364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c992e2e4bd68729e7849c5649a9492263aedc063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c992e2e4bd68729e7849c5649a9492263aedc063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c992e2e4bd68729e7849c5649a9492263aedc063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c992e2e4bd68729e7849c5649a9492263aedc063/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6ed513cb809e1c0da0d021f35835ce0924954ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ed513cb809e1c0da0d021f35835ce0924954ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ed513cb809e1c0da0d021f35835ce0924954ca"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "ccb8aa428af51db1c1fe01bf1250b6f571e11750", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c992e2e4bd68729e7849c5649a9492263aedc063/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c992e2e4bd68729e7849c5649a9492263aedc063/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c992e2e4bd68729e7849c5649a9492263aedc063", "patch": "@@ -1,3 +1,11 @@\n+2018-07-31  Justin Squirek  <squirek@adacore.com>\n+\n+\t* lib-writ.adb (Write_With_Lines): Modfiy the generation of\n+\tdependencies within ali files so that source unit bodies are\n+\tproperly listed even if said bodies are missing.  Perform legacy\n+\tbehavior in GNATprove mode.\n+\t* lib-writ.ads: Modify documentation to reflect current behavior.\n+\n 2018-07-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t*  libgnarl/s-osinte__solaris.ads (upad64_t): New private type."}, {"sha": "9a54fa9dbcd9a6626d30fc429b2099f20bc18e2d", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c992e2e4bd68729e7849c5649a9492263aedc063/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c992e2e4bd68729e7849c5649a9492263aedc063/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=c992e2e4bd68729e7849c5649a9492263aedc063", "patch": "@@ -950,20 +950,35 @@ package body Lib.Writ is\n                Write_Info_Tab (25);\n \n                if Is_Spec_Name (Uname) then\n-                  Body_Fname :=\n-                    Get_File_Name\n-                      (Get_Body_Name (Uname),\n-                       Subunit => False, May_Fail => True);\n-\n-                  Body_Index :=\n-                    Get_Unit_Index\n-                      (Get_Body_Name (Uname));\n-\n-                  if Body_Fname = No_File then\n-                     Body_Fname := Get_File_Name (Uname, Subunit => False);\n-                     Body_Index := Get_Unit_Index (Uname);\n-                  end if;\n \n+                  --  In GNATprove mode we must write the spec of a unit which\n+                  --  requires a body if that body is not found. This will\n+                  --  allow partial analysis on incomplete sources.\n+\n+                  if GNATprove_Mode then\n+\n+                     Body_Fname :=\n+                       Get_File_Name (Get_Body_Name (Uname),\n+                                       Subunit => False, May_Fail => True);\n+\n+                     Body_Index := Get_Unit_Index (Get_Body_Name (Uname));\n+\n+                     if Body_Fname = No_File then\n+                        Body_Fname := Get_File_Name (Uname, Subunit => False);\n+                        Body_Index := Get_Unit_Index (Uname);\n+                     end if;\n+\n+                  --  In the normal path we don't allow failure in fetching the\n+                  --  name of the desired body unit so that it may be properly\n+                  --  referenced in the output ali - even if it is missing.\n+\n+                  else\n+                     Body_Fname :=\n+                       Get_File_Name (Get_Body_Name (Uname),\n+                                       Subunit => False, May_Fail => False);\n+\n+                     Body_Index := Get_Unit_Index (Get_Body_Name (Uname));\n+                  end if;\n                else\n                   Body_Fname := Get_File_Name (Uname, Subunit => False);\n                   Body_Index := Get_Unit_Index (Uname);"}, {"sha": "df391a8cc9966bf2319004736e34962f3bc9c699", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c992e2e4bd68729e7849c5649a9492263aedc063/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c992e2e4bd68729e7849c5649a9492263aedc063/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=c992e2e4bd68729e7849c5649a9492263aedc063", "patch": "@@ -629,13 +629,13 @@ package Lib.Writ is\n    --      by the current unit. One Z line is present for each unit that is\n    --      only implicitly withed by the current unit. The first parameter is\n    --      the unit name in internal format. The second parameter is the file\n-   --      name of the file that must be compiled to compile this unit. It is\n-   --      usually the file for the body, except for packages which have no\n-   --      body. For units that need a body, if the source file for the body\n-   --      cannot be found, the file name of the spec is used instead. The\n-   --      third parameter is the file name of the library information file\n-   --      that contains the results of compiling this unit. The optional\n-   --      modifiers are used as follows:\n+   --      name of the body unit on which the current compliation depends -\n+   --      except when in GNATprove mode. In GNATprove mode, when packages\n+   --      which require a body have no associated source file, the file name\n+   --      of the spec is used instead to allow partial analysis of incomplete\n+   --      sources. The third parameter is the file name of the library\n+   --      information file that contains the results of compiling this unit.\n+   --      The optional modifiers are used as follows:\n \n    --        E   pragma Elaborate applies to this unit\n "}]}