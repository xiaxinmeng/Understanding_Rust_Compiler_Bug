{"sha": "0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY1ZjllZDVlNWEwNDFiNjM2Y2MwMDI0NTFiMWU4YjIyOTVmOGU0Zg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-12T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-12T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "be559cf894d65e5c4da1325c784e3eb4fe851b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be559cf894d65e5c4da1325c784e3eb4fe851b2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/comments", "author": null, "committer": null, "parents": [{"sha": "5d46ec3db21d8c8926f15a634b2d6570536db5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d46ec3db21d8c8926f15a634b2d6570536db5f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d46ec3db21d8c8926f15a634b2d6570536db5f1"}], "stats": {"total": 470, "additions": 469, "deletions": 1}, "files": [{"sha": "e515b380e7e7a00e60f5c2f7829b702487f937d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,178 @@\n+2020-11-11  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin-protos.h (darwin_make_eh_symbol_indirect): New.\n+\t* config/darwin.c (darwin_make_eh_symbol_indirect): New. Use\n+\tMach-O semantics for personality and ldsa indirections.\n+\t* config/darwin.h (TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT): New.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in: Add TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT hook.\n+\t* dwarf2out.c (dwarf2out_do_cfi_startproc): If the target defines\n+\ta hook for indirecting personality and ldsa references, use that\n+\totherwise default to ELF semantics.\n+\t* target.def (make_eh_symbol_indirect): New target hook.\n+\n+2020-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* common.opt (-fabi-version): Document =15.\n+\t* doc/invoke.texi (C++ Dialect Options): Likewise.\n+\n+2020-11-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97518\n+\t* tree.c (maybe_wrap_with_location): Don't add a location\n+\twrapper around an artificial and ignored decl.\n+\n+2020-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97623\n+\t* tree-ssa-pre.c (create_expression_by_pieces): Guard\n+\tNEW_SETS access.\n+\t(insert_into_preds_of_block): Likewise.\n+\n+2020-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (pre_expr_DFS): New function.\n+\t(sorted_array_from_bitmap_set): Use it to properly\n+\ttopologically sort the expression set.\n+\t(clean): Verify we've cleaned everything we should.\n+\n+2020-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97623\n+\t* params.opt (-param=max-pre-hoist-insert-iterations): Remove\n+\tagain.\n+\t* doc/invoke.texi (max-pre-hoist-insert-iterations): Likewise.\n+\t* tree-ssa-pre.c (insert): Move hoist insertion after PRE\n+\tinsertion iteration and do not iterate it.\n+\n+2020-11-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (@vcond_mask_<mode><vpred>): Extend\n+\tfrom SVE_FULL to SVE_ALL.\n+\t(*vcond_mask_<mode><vpred>): Likewise.\n+\t(@aarch64_sel_dup<mode>): Likewise.\n+\t(vcond<SVE_FULL:mode><v_int_equiv>): Extend to...\n+\t(vcond<SVE_ALL:mode><SVE_I:mode>): ...this, but requiring the\n+\tsizes of the container modes to match.\n+\t(vcondu<SVE_FULL:mode><v_int_equiv>): Extend to...\n+\t(vcondu<SVE_ALL:mode><SVE_I:mode>): ...this.\n+\t(vec_cmp<SVE_FULL_I:mode><vpred>): Extend to...\n+\t(vec_cmp<SVE_I:mode><vpred>): ...this.\n+\t(vec_cmpu<SVE_FULL_I:mode><vpred>): Extend to...\n+\t(vec_cmpu<SVE_I:mode><vpred>): ...this.\n+\t(@aarch64_pred_cmp<cmp_op><SVE_FULL_I:mode>): Extend to...\n+\t(@aarch64_pred_cmp<cmp_op><SVE_I:mode>): ...this.\n+\t(*cmp<cmp_op><SVE_FULL_I:mode>_cc): Extend to...\n+\t(*cmp<cmp_op><SVE_I:mode>_cc): ...this.\n+\t(*cmp<cmp_op><SVE_FULL_I:mode>_ptest): Extend to...\n+\t(*cmp<cmp_op><SVE_I:mode>_ptest): ...this.\n+\t(*cmp<cmp_op><SVE_FULL_I:mode>_and): Extend to...\n+\t(*cmp<cmp_op><SVE_I:mode>_and): ...this.\n+\n+2020-11-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* optabs-tree.c (expand_vec_cond_expr_p): Allow the compared values\n+\tand the selected values to have different mode sizes.\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Likewise.\n+\n+2020-11-11  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect AVXVNNI.\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA2_AVXVNNI_SET,\n+\tOPTION_MASK_ISA2_AVXVNNI_UNSET): New.\n+\t(OPTION_MASK_ISA2_AVX2_UNSET): Add AVXVNNI.\n+\t(ix86_hanlde_option): Handle -mavxvnni, unset avxvnni when\n+\tavx2 is disabled.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_AVXVNNI.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAMES_TABLE_ENTRY\n+\tfor avxvnni.\n+\t* config.gcc: Add avxvnniintrin.h.\n+\t* config/i386/avx512vnnivlintrin.h: Reimplement 128/256 bit non-mask\n+\tintrinsics with macros to support unified interface.\n+\t* config/i386/avxvnniintrin.h: New header file.\n+\t* config/i386/cpuid.h (bit_AVXVNNI): New.\n+\t* config/i386/i386-builtins.c (def_builtin): Handle AVXVNNI mask\n+\tfor unified builtin.\n+\t* config/i386/i386-builtin.def (BDESC): Adjust AVX512VNNI\n+\tbuiltins for AVXVNNI.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__AVXVNNI__.\n+\t* config/i386/i386-expand.c (ix86_expand_builtin): Handle bisa\n+\tfor AVXVNNI to support unified intrinsic name, since there is no\n+\tdependency between AVX512VNNI and AVXVNNI.\n+\t* config/i386/i386-options.c (isa2_opts): Add -mavxvnni.\n+\t(ix86_valid_target_attribute_inner_p): Handle avxnnni.\n+\t(ix86_option_override_internal): Ditto.\n+\t* config/i386/i386.h (TARGET_AVXVNNI, TARGET_AVXVNNI_P,\n+\tTARGET_AVXVNNI_P, PTA_AVXVNNI): New.\n+\t(PTA_SAPPHIRERAPIDS): Add AVX_VNNI.\n+\t(PTA_ALDERLAKE): Likewise.\n+\t* config/i386/i386.md (\"isa\"): Add avxvnni, avx512vnnivl.\n+\t(\"enabled\"): Adjust for avxvnni and avx512vnnivl.\n+\t* config/i386/i386.opt: Add option -mavxvnni.\n+\t* config/i386/immintrin.h: Include avxvnniintrin.h.\n+\t* config/i386/sse.md (vpdpbusd_<mode>): Adjust for AVXVNNI.\n+\t(vpdpbusds_<mode>): Likewise.\n+\t(vpdpwssd_<mode>): Likewise.\n+\t(vpdpwssds_<mode>): Likewise.\n+\t(vpdpbusd_v16si): New.\n+\t(vpdpbusds_v16si): Likewise.\n+\t(vpdpwssd_v16si): Likewise.\n+\t(vpdpwssds_v16si): Likewise.\n+\t* doc/invoke.texi: Document -mavxvnni.\n+\t* doc/extend.texi: Document avxvnni.\n+\t* doc/sourcebuild.texi: Document target avxvnni.\n+\n+2020-11-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree.c (copy_node): Fix spelling.\n+\n+2020-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (phi_translate_set): Do not sort the\n+\texpression set topologically.\n+\n+2020-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::set): Early exit on VR_VARYING.\n+\n+2020-11-11  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\t    Nannan Zheng  <zhengnannan@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor arithmetic operation intrinsics.\n+\n+2020-11-11  Strager Neds  <strager.nds@gmail.com>\n+\n+\t* cgraph.h (symtab_node::set_section_for_node): Declare new\n+\toverload.\n+\t(symtab_node::set_section_from_string): Rename from set_section.\n+\t(symtab_node::set_section_from_node): Declare.\n+\t* symtab.c (symtab_node::set_section_for_node): Define new\n+\toverload.\n+\t(symtab_node::set_section_from_string): Rename from set_section.\n+\t(symtab_node::set_section_from_node): Define.\n+\t(symtab_node::set_section): Call renamed set_section_from_string.\n+\t(symtab_node::set_section): Call new set_section_from_node.\n+\n+2020-11-11  Strager Neds  <strager.nds@gmail.com>\n+\n+\t* symtab.c (symtab_node::set_section_for_node): Extract reference\n+\tcounting logic into ...\n+\t(retain_section_hash_entry): ... here (new function) and ...\n+\t(release_section_hash_entry): ... here (new function).\n+\n+2020-11-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386.h (PTA_MOVDIRI, PTA_MOVDIR64B,\n+\tPTA_AMX_TILE, PTA_AMX_INT8, PTA_AMX_BF16, PTA_HRESET):\n+\tFormatting.\n+\n 2020-11-11  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* config/s390/s390.h (HAVE_TF): Use opaque value when"}, {"sha": "95634e06f0dee9762ab2b34332a09eed45ab0b97", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1 +1 @@\n-20201111\n+20201112"}, {"sha": "d131abf5a0682a15d43989bbacdcaa1fc7a143b9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,36 @@\n+2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h: Remove ^L characters throughout.\n+\t* gcc-interface/decl.c: Likewise.\n+\t* gcc-interface/utils.c: Likewise.\n+\t* gcc-interface/utils2.c: Likewise.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Allocator>: Do not explicitly\n+\tgo to the base type for the Has_Constrained_Partial_View flag.\n+\n+2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (build_binary_op_trapv): Convert operands\n+\tto the result type before doing generic overflow checking.\n+\n+2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (can_be_lower_p): Remove.\n+\t(Regular_Loop_to_gnu): Add ENTRY_COND unconditionally if\n+\tBOTTOM_COND is non-zero.\n+\n+2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: In case\n+\tthe constant is not being defined, get the expression in type\n+\tannotation mode only if its type is elementary.\n+\n+2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Op_Shift>: Also convert\n+\tGNU_MAX_SHIFT if the type of the operation has been changed.\n+\t* gcc-interface/utils.c (can_materialize_object_renaming_p): Add\n+\tpair of missing parentheses.\n+\n 2020-11-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Makefile.in: Force target_cpu to powerpc if the"}, {"sha": "772b0f5a2ab93db61d927ee445b4a99db6f37680", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,8 @@\n+2020-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* c-opts.c (c_common_post_options): Update latest_abi_version.\n+\n 2020-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/97748"}, {"sha": "babb45923e1c3eb528a1e8cfa5166e4980ae82a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,39 @@\n+2020-11-11  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* parser.c (cp_parser_declaration): Unless we are compiling for\n+\tOjective-C++, warn about and discard any attributes that prefix\n+\ta linkage specification.\n+\n+2020-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* mangle.c (write_expression): Mangle __alignof_ differently\n+\tfrom alignof when the ABI version is at least 15.\n+\n+2020-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* cp-tree.h (cxx_sizeof_or_alignof_expr): Add bool parameter.\n+\t* decl.c (fold_sizeof_expr): Pass false to\n+\tcxx_sizeof_or_alignof_expr.\n+\t* parser.c (cp_parser_unary_expression): Pass std_alignof to\n+\tcxx_sizeof_or_alignof_expr.\n+\t* pt.c (tsubst_copy): Pass false to cxx_sizeof_or_alignof_expr.\n+\t(tsubst_copy_and_build): Pass std_alignof to\n+\tcxx_sizeof_or_alignof_expr.\n+\t* typeck.c (cxx_alignof_expr): Add std_alignof bool parameter\n+\tand pass it to cxx_sizeof_or_alignof_type.  Set ALIGNOF_EXPR_STD_P\n+\tappropriately.\n+\t(cxx_sizeof_or_alignof_expr): Add std_alignof bool parameter\n+\tand pass it to cxx_alignof_expr.  Assert op is either\n+\tSIZEOF_EXPR or ALIGNOF_EXPR.\n+\n+2020-11-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97518\n+\t* pt.c (tsubst_qualified_id): Use EXPR_LOCATION of the qualified-id.\n+\tUse it to maybe_wrap_with_location the final expression.\n+\n 2020-11-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97518"}, {"sha": "6eb6500143d0432ef1922e760e8e9a41b070c278", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,12 @@\n+2020-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/97768\n+\t* misc.c (gfc_typename): Use ex->value.character.length only if\n+\tex->expr_type == EXPR_CONSTANT.  If ex->ts.deferred, print : instead\n+\tof length.  If ex->ts.u.cl && ex->ts.u.cl->length == NULL, print *\n+\tinstead of length.  Otherwise if character length is non-constant,\n+\tprint just CHARACTER or CHARACTER(KIND=N).\n+\n 2020-11-10  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.c (show_omp_clauses): Handle new reduction enums."}, {"sha": "06d8ecda77d8e74702ba8a434850d33fa49b6703", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,8 @@\n+2020-11-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* go-gcc.cc (Gcc_backend::global_variable_set_init): Cast NULL to\n+\tavoid ambiguous overloaded call.\n+\n 2020-11-06  Nathan Sidwell  <nathan@acm.org>\n \n \t* go-gcc.cc (Gcc_backend::call_expression): Rename"}, {"sha": "cc2d10dd0cf618cdeb1987e12f81c3c674df3eee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,155 @@\n+2020-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* g++.dg/abi/macro0.C: Adjust.\n+\t* g++.dg/cpp0x/alignof7.C: New test.\n+\t* g++.dg/cpp0x/alignof8.C: New test.\n+\n+2020-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* g++.dg/cpp0x/alignof6.C: New test.\n+\n+2020-11-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97518\n+\t* g++.dg/diagnostic/static_assert3.C: New test.\n+\n+2020-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.dg/gomp/workshare-reduction-3.f90: Use (?:_ull)? instead\n+\tof (?:_ull) in the scan-tree-dump-times directives.\n+\t* gfortran.dg/gomp/workshare-reduction-26.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-27.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-28.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-36.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-37.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-38.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-39.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-40.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-41.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-42.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-43.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-44.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-45.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-46.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-47.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-56.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-57.f90: Likewise.\n+\n+2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/bias2.adb: New test.\n+\n+2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt89.adb: New test.\n+\n+2020-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/shift1.adb: New test.\n+\n+2020-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/97797\n+\t* gcc.dg/torture/ssa-fre-5.c: Use __SIZETYPE__ where\n+\tappropriate.\n+\t* gcc.dg/torture/ssa-fre-6.c: Likewise.\n+\n+2020-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97623\n+\t* gcc.dg/tree-ssa/ssa-hoist-3.c: Adjust.\n+\t* gcc.dg/tree-ssa/ssa-hoist-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-pre-30.c: Likewise.\n+\n+2020-11-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cmp_1.c: New test.\n+\t* gcc.target/aarch64/sve/cmp_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_arith_1.c: Add --param\n+\taarch64-sve-compare-costs=0\n+\t* gcc.target/aarch64/sve/cond_arith_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_arith_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_arith_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_gather_load_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_load_slp_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_11.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_11_run.c: Likewise.\n+\n+2020-11-11  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512vl-vnni-1.c: Rename..\n+\t* gcc.target/i386/avx512vl-vnni-1a.c: To This.\n+\t* gcc.target/i386/avx512vl-vnni-1b.c: New test.\n+\t* gcc.target/i386/avx512vl-vnni-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vnni-3.c: Ditto.\n+\t* gcc.target/i386/avx-vnni-1.c: Ditto.\n+\t* gcc.target/i386/avx-vnni-2.c: Ditto.\n+\t* gcc.target/i386/avx-vnni-3.c: Ditto.\n+\t* gcc.target/i386/avx-vnni-4.c: Ditto.\n+\t* gcc.target/i386/avx-vnni-5.c: Ditto.\n+\t* gcc.target/i386/avx-vnni-6.c: Ditto.\n+\t* gcc.target/i386/avx-vpdpbusd-2.c: Ditto.\n+\t* gcc.target/i386/avx-vpdpbusds-2.c: Ditto.\n+\t* gcc.target/i386/avx-vpdpwssd-2.c: Ditto.\n+\t* gcc.target/i386/avx-vpdpwssds-2.c: Ditto.\n+\t* gcc.target/i386/vnni_inline_error.c: Ditto.\n+\t* gcc.target/i386/avx512vnnivl-builtin.c: Ditto.\n+\t* gcc.target/i386/avxvnni-builtin.c: Ditto.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/sse-12.c: Add -mavxvnni.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* lib/target-supports.exp (check_effective_target_avxvnni):\n+\tNew proc.\n+\n+2020-11-11  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/workshare-reduction-26.f90: Add (?:_ull) to\n+\tscan-tree-dump-times regex for -m32.\n+\t* gfortran.dg/gomp/workshare-reduction-27.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-28.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-3.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-36.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-37.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-38.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-39.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-40.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-41.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-42.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-43.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-44.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-45.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-46.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-47.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-56.f90: Likewise.\n+\t* gfortran.dg/gomp/workshare-reduction-57.f90: Likewise.\n+\n+2020-11-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/97768\n+\t* gfortran.dg/pr97768_1.f90: New test.\n+\t* gfortran.dg/pr97768_2.f90: New test.\n+\n+2020-11-11  Nagaraju Mekala  <nmekala@xilinx.com>\n+\n+\t* gcc.target/microblaze/others/strings1.c: Update\n+\tto include $LC label.\n+\n+2020-11-11  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* c-c++-common/zero-scratch-regs-10.c: Skip on powerpc*-*-*.\n+\t* c-c++-common/zero-scratch-regs-11.c: Skip on powerpc*-*-*.\n+\t* c-c++-common/zero-scratch-regs-5.c: Skip on powerpc*-*-aix*.\n+\t* c-c++-common/zero-scratch-regs-8.c: Skip on powerpc*-*-*.\n+\t* c-c++-common/zero-scratch-regs-9.c: Skip on powerpc*-*-*.\n+\n 2020-11-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97518"}, {"sha": "db101b14199c5e7446fc389687434c9b34d921b0", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,9 @@\n+2020-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* libcp1plugin.cc (plugin_build_unary_expr): Pass true to\n+\tcxx_sizeof_or_alignof_expr.\n+\n 2020-11-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97518"}, {"sha": "d2efbe20d3cf20512c859d81d5e6c13e9bb0ede1", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,13 @@\n+2020-11-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* cp-demangle.c (d_print_comp_inner)\n+\t<case DEMANGLE_COMPONENT_EXTENDED_OPERATOR>: Don't print the\n+\t\"operator \" prefix for __alignof__.\n+\t<case DEMANGLE_COMPONENT_UNARY>: Always print parens around the\n+\toperand of __alignof__.\n+\t* testsuite/demangle-expected: Test demangling for __alignof__.\n+\n 2020-11-09  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* pex-win32.c (pex_win32_exec_child): Initialize orig_err."}, {"sha": "62e2c960f259183d08d18e7b85dcadd0cfcc9611", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "patch": "@@ -1,3 +1,40 @@\n+2020-11-11  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_LINKER_FEATURES): Exclude\n+\tcygwin and mingw from relro linker test.\n+\t* configure: Regenerate.\n+\n+2020-11-11  Paul Scharnofske  <asynts@gmail.com>\n+\n+\t* include/std/thread (jthread::operator=(jthread&&)): Transfer\n+\tany existing state to a temporary that will request a stop and\n+\tthen join.\n+\t* testsuite/30_threads/jthread/jthread.cc: Test move assignment.\n+\n+2020-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stop_token (_Stop_state_t::_M_requester): Define\n+\tnew struct with members to store and check the thread ID.\n+\t(_Stop_state_t::_M_request_stop()): Use _M_requester._M_set().\n+\t(_Stop_state_t::_M_remove_callback(_Stop_cb*)): Use\n+\t_M_requester._M_is_current_thread().\n+\n+2020-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ostream (__syncbuf_base): New class template.\n+\t(emit_on_flush, noemit_on_flush, flush_emit): New manipulators.\n+\t* include/std/syncstream (basic_syncbuf): Derive from\n+\t__syncbuf_base instead of basic_streambuf.\n+\t(basic_syncbuf::operator=): Remove self-assignment check.\n+\t(basic_syncbuf::swap): Remove self-swap check.\n+\t(basic_syncbuf::emit): Do not skip pubsync() call if sequence\n+\tis empty.\n+\t(basic_syncbuf::sync): Remove no-op pubsync on stringbuf.\n+\t(basic_syncbuf::overflow): Define override.\n+\t* testsuite/27_io/basic_syncstream/basic_ops/1.cc: Test\n+\tbasic_osyncstream::put(char_type).\n+\t* testsuite/27_io/basic_ostream/emit/1.cc: New test.\n+\n 2020-11-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/locale/generic/c_locale.cc (__set_C_locale()): New function"}]}