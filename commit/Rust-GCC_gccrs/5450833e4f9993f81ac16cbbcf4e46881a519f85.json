{"sha": "5450833e4f9993f81ac16cbbcf4e46881a519f85", "node_id": "C_kwDOANBUbNoAKDU0NTA4MzNlNGY5OTkzZjgxYWMxNmNiYmNmNGU0Njg4MWE1MTlmODU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-24T09:38:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-24T09:38:42Z"}, "message": "builtins: Fix up ICE in inline_string_cmp [PR109258]\n\nThe PR109086 r13-6690 inline_string_cmp change to\n      if (diff != result)\n        emit_move_insn (result, diff);\nregressed\nFAIL: go.test/test/fixedbugs/bug207.go,  -O2 -g  (internal compiler error: in emit_move_insn, at expr.cc:4224)\nThe problem is the Go FE doesn't mark __builtin_memcmp as pure (I'll also\nsend patch for that) and so result is const0_rtx when the call lost its lhs\nand the above move ICEs because moving something into const0_rtx is obviously\ninvalid.\nI think it is better not to rely on all FEs having these *cmp functions\npure anD DCE being performed.  The following patch just punts from the\ninline expansion in that case, so we just emit normal library call.\n\n2023-03-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/109258\n\t* builtins.cc (inline_expand_builtin_bytecmp): Return NULL_RTX early\n\tif target == const0_rtx.", "tree": {"sha": "a370db1a5a2e18c7f4da2c2e774afaa2e8a910ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a370db1a5a2e18c7f4da2c2e774afaa2e8a910ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5450833e4f9993f81ac16cbbcf4e46881a519f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5450833e4f9993f81ac16cbbcf4e46881a519f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5450833e4f9993f81ac16cbbcf4e46881a519f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5450833e4f9993f81ac16cbbcf4e46881a519f85/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9e52675c009139a14182d92ddb446ba2feabce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9e52675c009139a14182d92ddb446ba2feabce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9e52675c009139a14182d92ddb446ba2feabce"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "ed0efd5c8b3159f70a6ffd754bff1877de51a391", "filename": "gcc/builtins.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5450833e4f9993f81ac16cbbcf4e46881a519f85/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5450833e4f9993f81ac16cbbcf4e46881a519f85/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=5450833e4f9993f81ac16cbbcf4e46881a519f85", "patch": "@@ -7178,8 +7178,8 @@ inline_expand_builtin_bytecmp (tree exp, rtx target)\n   bool is_ncmp = (fcode == BUILT_IN_STRNCMP || fcode == BUILT_IN_MEMCMP);\n \n   /* Do NOT apply this inlining expansion when optimizing for size or\n-     optimization level below 2.  */\n-  if (optimize < 2 || optimize_insn_for_size_p ())\n+     optimization level below 2 or if unused *cmp hasn't been DCEd.  */\n+  if (optimize < 2 || optimize_insn_for_size_p () || target == const0_rtx)\n     return NULL_RTX;\n \n   gcc_checking_assert (fcode == BUILT_IN_STRCMP"}]}