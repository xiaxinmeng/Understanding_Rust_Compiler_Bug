{"sha": "42addb5adfbe872a7dd086db04df3f517a61f1e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJhZGRiNWFkZmJlODcyYTdkZDA4NmRiMDRkZjNmNTE3YTYxZjFlOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-03T14:27:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-03T14:27:28Z"}, "message": "[17/n] PR85694: AArch64 support for AVG_FLOOR/CEIL\n\nThis patch adds AArch64 patterns for the new AVG_FLOOR/CEIL operations.\nAVG_FLOOR is [SU]HADD and AVG_CEIL is [SU]RHADD.\n\n2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/85694\n\t* config/aarch64/iterators.md (HADD, RHADD): New int iterators.\n\t(u): Handle UNSPEC_SHADD, UNSPEC_UHADD, UNSPEC_SRHADD and\n\tUNSPEC_URHADD.\n\t* config/aarch64/aarch64-simd.md (<u>avg<mode>3_floor)\n\t(<u>avg<mode>3_ceil): New patterns.\n\ngcc/testsuite/\n\tPR tree-optimization/85694\n\t* lib/target-supports.exp (check_effective_target_vect_avg_qi):\n\tReturn true for AArch64 without SVE.\n\t* gcc.target/aarch64/vect_hadd_1.h: New file.\n\t* gcc.target/aarch64/vect_shadd_1.c: New test.\n\t* gcc.target/aarch64/vect_srhadd_1.c: Likewise.\n\t* gcc.target/aarch64/vect_uhadd_1.c: Likewise.\n\t* gcc.target/aarch64/vect_urhadd_1.c: Likewise.\n\nFrom-SVN: r262347", "tree": {"sha": "c5315e3fa21061fb2d92fcc873cd561def7ca3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5315e3fa21061fb2d92fcc873cd561def7ca3d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42addb5adfbe872a7dd086db04df3f517a61f1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42addb5adfbe872a7dd086db04df3f517a61f1e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42addb5adfbe872a7dd086db04df3f517a61f1e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42addb5adfbe872a7dd086db04df3f517a61f1e8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25d861fef34b44f720de813410f29096d4406b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d861fef34b44f720de813410f29096d4406b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d861fef34b44f720de813410f29096d4406b02"}], "stats": {"total": 168, "additions": 165, "deletions": 3}, "files": [{"sha": "4c550b6f3e415d919381f653626439ad684b1b70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -1,3 +1,12 @@\n+2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/85694\n+\t* config/aarch64/iterators.md (HADD, RHADD): New int iterators.\n+\t(u): Handle UNSPEC_SHADD, UNSPEC_UHADD, UNSPEC_SRHADD and\n+\tUNSPEC_URHADD.\n+\t* config/aarch64/aarch64-simd.md (<u>avg<mode>3_floor)\n+\t(<u>avg<mode>3_ceil): New patterns.\n+\n 2018-07-03  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/vect/slp-perm-1.c: Remove \"note: \" prefix from"}, {"sha": "89e38e65a76d75d13812fbfab49b77e2e04eeb20", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -3387,6 +3387,22 @@\n \n ;; <su><r>h<addsub>.\n \n+(define_expand \"<u>avg<mode>3_floor\"\n+  [(set (match_operand:VDQ_BHSI 0 \"register_operand\")\n+\t(unspec:VDQ_BHSI [(match_operand:VDQ_BHSI 1 \"register_operand\")\n+\t\t\t  (match_operand:VDQ_BHSI 2 \"register_operand\")]\n+\t\t\t HADD))]\n+  \"TARGET_SIMD\"\n+)\n+\n+(define_expand \"<u>avg<mode>3_ceil\"\n+  [(set (match_operand:VDQ_BHSI 0 \"register_operand\")\n+\t(unspec:VDQ_BHSI [(match_operand:VDQ_BHSI 1 \"register_operand\")\n+\t\t\t  (match_operand:VDQ_BHSI 2 \"register_operand\")]\n+\t\t\t RHADD))]\n+  \"TARGET_SIMD\"\n+)\n+\n (define_insn \"aarch64_<sur>h<addsub><mode>\"\n   [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n         (unspec:VDQ_BHSI [(match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")"}, {"sha": "949fd2aa09d96a9b6594132410ce9741a9449328", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -1461,6 +1461,10 @@\n \t\t\t      UNSPEC_SHSUB UNSPEC_UHSUB\n \t\t\t      UNSPEC_SRHSUB UNSPEC_URHSUB])\n \n+(define_int_iterator HADD [UNSPEC_SHADD UNSPEC_UHADD])\n+\n+(define_int_iterator RHADD [UNSPEC_SRHADD UNSPEC_URHADD])\n+\n (define_int_iterator DOTPROD [UNSPEC_SDOT UNSPEC_UDOT])\n \n (define_int_iterator ADDSUBHN [UNSPEC_ADDHN UNSPEC_RADDHN\n@@ -1683,8 +1687,10 @@\n \n (define_int_attr u [(UNSPEC_SQSHLU \"u\") (UNSPEC_SQSHL \"\") (UNSPEC_UQSHL \"\")\n \t\t    (UNSPEC_SQSHRUN \"u\") (UNSPEC_SQRSHRUN \"u\")\n-                    (UNSPEC_SQSHRN \"\")  (UNSPEC_UQSHRN \"\")\n-                    (UNSPEC_SQRSHRN \"\") (UNSPEC_UQRSHRN \"\")])\n+\t\t    (UNSPEC_SQSHRN \"\")  (UNSPEC_UQSHRN \"\")\n+\t\t    (UNSPEC_SQRSHRN \"\") (UNSPEC_UQRSHRN \"\")\n+\t\t    (UNSPEC_SHADD \"\") (UNSPEC_UHADD \"u\")\n+\t\t    (UNSPEC_SRHADD \"\") (UNSPEC_URHADD \"u\")])\n \n (define_int_attr addsub [(UNSPEC_SHADD \"add\")\n \t\t\t (UNSPEC_UHADD \"add\")"}, {"sha": "333096287be835a71934fb23d8c7ca83b613c60e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -1,3 +1,14 @@\n+2018-07-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/85694\n+\t* lib/target-supports.exp (check_effective_target_vect_avg_qi):\n+\tReturn true for AArch64 without SVE.\n+\t* gcc.target/aarch64/vect_hadd_1.h: New file.\n+\t* gcc.target/aarch64/vect_shadd_1.c: New test.\n+\t* gcc.target/aarch64/vect_srhadd_1.c: Likewise.\n+\t* gcc.target/aarch64/vect_uhadd_1.c: Likewise.\n+\t* gcc.target/aarch64/vect_urhadd_1.c: Likewise.\n+\n 2018-07-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/86202"}, {"sha": "ab25a5d84d869349b7b9b6cbb1d4250dac84604f", "filename": "gcc/testsuite/gcc.target/aarch64/vect_hadd_1.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_hadd_1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_hadd_1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_hadd_1.h?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -0,0 +1,39 @@\n+#include <stdint.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+#define N 100\n+\n+#define DEF_FUNC(TYPE, B1, B2, C1, C2)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  f_##TYPE (TYPE *restrict a, TYPE *restrict b, TYPE *restrict c)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      a[i] = ((__int128) b[i] + c[i] + BIAS) >> 1;\t\t\t\\\n+  }\n+\n+#define TEST_FUNC(TYPE, B1, B2, C1, C2)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE a[N], b[N], c[N];\t\t\t\t\t\t\\\n+    for (TYPE i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tb[i] = B1 + i * B2;\t\t\t\t\t\t\\\n+\tc[i] = C1 + i * C2;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    f_##TYPE (a, b, c);\t\t\t\t\t\t\t\\\n+    for (TYPE i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (a[i] != ((B1 + C1 + BIAS + (__int128) i * (B2 + C2)) >> 1))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\t\\\n+  }\n+\n+#define FOR_EACH_SIGNED_TYPE(T) \\\n+  T (int8_t, -124, 2, -40, 1) \\\n+  T (int16_t, -32000, 510, -10000, 257) \\\n+  T (int32_t, -2000000000, 131072, -3277000, 65537) \\\n+  T (int64_t, -44, 100, -10000, 99)\n+\n+#define FOR_EACH_UNSIGNED_TYPE(T) \\\n+  T (uint8_t, 4, 2, 40, 1) \\\n+  T (uint16_t, 12, 510, 10000, 257) \\\n+  T (uint32_t, 20, 131072, 3277000, 65537) \\\n+  T (uint64_t, 90, 100, 10000, 99)"}, {"sha": "4f1e2f922e1daae51a96d1695c55d83e16935f55", "filename": "gcc/testsuite/gcc.target/aarch64/vect_shadd_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_shadd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_shadd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_shadd_1.c?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -ftree-vectorize\" } */\n+\n+#include \"vect_hadd_1.h\"\n+\n+#define BIAS 0\n+\n+FOR_EACH_SIGNED_TYPE (DEF_FUNC)\n+\n+int\n+main (void)\n+{\n+  FOR_EACH_SIGNED_TYPE (TEST_FUNC);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\tshadd\\tv[0-9]+\\.16b,} } } */\n+/* { dg-final { scan-assembler {\\tshadd\\tv[0-9]+\\.8h,} } } */\n+/* { dg-final { scan-assembler {\\tshadd\\tv[0-9]+\\.4s,} } } */\n+/* { dg-final { scan-assembler-not {\\tshadd\\tv[0-9]+\\.2d,} } } */"}, {"sha": "3110a40e4fdfad71a6f5ad3054e40aa127dad4d9", "filename": "gcc/testsuite/gcc.target/aarch64/vect_srhadd_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_srhadd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_srhadd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_srhadd_1.c?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -ftree-vectorize\" } */\n+\n+#include \"vect_hadd_1.h\"\n+\n+#define BIAS 1\n+\n+FOR_EACH_SIGNED_TYPE (DEF_FUNC)\n+\n+int\n+main (void)\n+{\n+  FOR_EACH_SIGNED_TYPE (TEST_FUNC);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\tsrhadd\\tv[0-9]+\\.16b,} } } */\n+/* { dg-final { scan-assembler {\\tsrhadd\\tv[0-9]+\\.8h,} } } */\n+/* { dg-final { scan-assembler {\\tsrhadd\\tv[0-9]+\\.4s,} } } */\n+/* { dg-final { scan-assembler-not {\\tsrhadd\\tv[0-9]+\\.2d,} } } */"}, {"sha": "529c86a7065cdaadafc9421f1574496a42072aa2", "filename": "gcc/testsuite/gcc.target/aarch64/vect_uhadd_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_uhadd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_uhadd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_uhadd_1.c?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -ftree-vectorize\" } */\n+\n+#include \"vect_hadd_1.h\"\n+\n+#define BIAS 0\n+\n+FOR_EACH_UNSIGNED_TYPE (DEF_FUNC)\n+\n+int\n+main (void)\n+{\n+  FOR_EACH_UNSIGNED_TYPE (TEST_FUNC);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\tuhadd\\tv[0-9]+\\.16b,} } } */\n+/* { dg-final { scan-assembler {\\tuhadd\\tv[0-9]+\\.8h,} } } */\n+/* { dg-final { scan-assembler {\\tuhadd\\tv[0-9]+\\.4s,} } } */\n+/* { dg-final { scan-assembler-not {\\tuhadd\\tv[0-9]+\\.2d,} } } */"}, {"sha": "47f1393e26c045d0d24cd03d43f97e243ae83dd6", "filename": "gcc/testsuite/gcc.target/aarch64/vect_urhadd_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_urhadd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_urhadd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_urhadd_1.c?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -ftree-vectorize\" } */\n+\n+#include \"vect_hadd_1.h\"\n+\n+#define BIAS 1\n+\n+FOR_EACH_UNSIGNED_TYPE (DEF_FUNC)\n+\n+int\n+main (void)\n+{\n+  FOR_EACH_UNSIGNED_TYPE (TEST_FUNC);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\turhadd\\tv[0-9]+\\.16b,} } } */\n+/* { dg-final { scan-assembler {\\turhadd\\tv[0-9]+\\.8h,} } } */\n+/* { dg-final { scan-assembler {\\turhadd\\tv[0-9]+\\.4s,} } } */\n+/* { dg-final { scan-assembler-not {\\turhadd\\tv[0-9]+\\.2d,} } } */"}, {"sha": "99613fd26bd47dc5caf12d1938249acadeaf0035", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42addb5adfbe872a7dd086db04df3f517a61f1e8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=42addb5adfbe872a7dd086db04df3f517a61f1e8", "patch": "@@ -6317,7 +6317,8 @@ proc check_effective_target_vect_usad_char { } {\n # and unsigned average operations on vectors of bytes.\n \n proc check_effective_target_vect_avg_qi {} {\n-    return 0\n+    return [expr { [istarget aarch64*-*-*]\n+\t\t   && ![check_effective_target_aarch64_sve] }]\n }\n \n # Return 1 if the target plus current options supports a vector"}]}