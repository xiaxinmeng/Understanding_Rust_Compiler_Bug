{"sha": "e12ba0642d940ecd6636906e20efcd04bf3fc745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEyYmEwNjQyZDk0MGVjZDY2MzY5MDZlMjBlZmNkMDRiZjNmYzc0NQ==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1996-01-23T03:28:01Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1996-01-23T03:28:01Z"}, "message": "Use preprocessor arithmetic instead of C arithmetic to avoid warnings on some compilers.\n\nUse preprocessor arithmetic instead of C arithmetic\nto avoid warnings on some compilers.\n(HOST_WIDE_INT_MASK): Remove.\n(MAX_CHAR_TYPE_MASK, MAX_WCHAR_TYPE_MASK): New macros.\n(yylex): Use them.\n\nFrom-SVN: r11086", "tree": {"sha": "d637766faec6fb2fac3aa23280e0e1c73db3cc73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d637766faec6fb2fac3aa23280e0e1c73db3cc73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e12ba0642d940ecd6636906e20efcd04bf3fc745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12ba0642d940ecd6636906e20efcd04bf3fc745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e12ba0642d940ecd6636906e20efcd04bf3fc745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12ba0642d940ecd6636906e20efcd04bf3fc745/comments", "author": null, "committer": null, "parents": [{"sha": "52529158ea7d7b80ea578218c9a03d8ff6f3b0d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52529158ea7d7b80ea578218c9a03d8ff6f3b0d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52529158ea7d7b80ea578218c9a03d8ff6f3b0d1"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "470c45d09763285e9881e03e38258f4022d5e181", "filename": "gcc/cexp.y", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12ba0642d940ecd6636906e20efcd04bf3fc745/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12ba0642d940ecd6636906e20efcd04bf3fc745/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=e12ba0642d940ecd6636906e20efcd04bf3fc745", "patch": "@@ -101,11 +101,6 @@ struct arglist {\n \n #endif\n \n-#define HOST_WIDE_INT_MASK(bits) \\\n-  ((bits) < HOST_BITS_PER_WIDE_INT \\\n-   ? ~ (~ (HOST_WIDE_INT) 0 << (bits)) \\\n-   : ~ (HOST_WIDE_INT) 0)\n-\n #if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 6)\n # define __attribute__(x)\n #endif\n@@ -198,6 +193,18 @@ extern int traditional;\n #define MAX_WCHAR_TYPE_SIZE WCHAR_TYPE_SIZE\n #endif\n \n+#if MAX_CHAR_TYPE_SIZE < HOST_BITS_PER_WIDE_INT\n+#define MAX_CHAR_TYPE_MASK (~ (~ (HOST_WIDE_INT) 0 << MAX_CHAR_TYPE_SIZE))\n+#else\n+#define MAX_CHAR_TYPE_MASK (~ (HOST_WIDE_INT) 0)\n+#endif\n+\n+#if MAX_WCHAR_TYPE_SIZE < HOST_BITS_PER_WIDE_INT\n+#define MAX_WCHAR_TYPE_MASK (~ (~ (HOST_WIDE_INT) 0 << MAX_WCHAR_TYPE_SIZE))\n+#else\n+#define MAX_WCHAR_TYPE_MASK (~ (HOST_WIDE_INT) 0)\n+#endif\n+\n /* Suppose A1 + B1 = SUM1, using 2's complement arithmetic ignoring overflow.\n    Suppose A, B and SUM have the same respective signs as A1, B1, and SUM1.\n    Suppose SIGNEDP is negative if the result is signed, zero if unsigned.\n@@ -632,21 +639,21 @@ yylex ()\n       {\n \tlexptr++;\n \twide_flag = 1;\n-\tmask = HOST_WIDE_INT_MASK (MAX_WCHAR_TYPE_SIZE);\n+\tmask = MAX_WCHAR_TYPE_MASK;\n \tgoto char_constant;\n       }\n     if (lexptr[1] == '\"')\n       {\n \tlexptr++;\n \twide_flag = 1;\n-\tmask = HOST_WIDE_INT_MASK (MAX_WCHAR_TYPE_SIZE);\n+\tmask = MAX_WCHAR_TYPE_MASK;\n \tgoto string_constant;\n       }\n     break;\n \n   case '\\'':\n     wide_flag = 0;\n-    mask = HOST_WIDE_INT_MASK (MAX_CHAR_TYPE_SIZE);\n+    mask = MAX_CHAR_TYPE_MASK;\n   char_constant:\n     lexptr++;\n     if (keyword_parsing) {\n@@ -801,7 +808,7 @@ yylex ()\n     return c;\n \n   case '\"':\n-    mask = HOST_WIDE_INT_MASK (MAX_CHAR_TYPE_SIZE);\n+    mask = MAX_CHAR_TYPE_MASK;\n   string_constant:\n     if (keyword_parsing) {\n       char *start_ptr = lexptr;"}]}