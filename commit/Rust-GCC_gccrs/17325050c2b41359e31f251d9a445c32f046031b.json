{"sha": "17325050c2b41359e31f251d9a445c32f046031b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczMjUwNTBjMmI0MTM1OWUzMWYyNTFkOWE0NDVjMzJmMDQ2MDMxYg==", "commit": {"author": {"name": "Andrew Pollard", "email": "andrew@andypo.net", "date": "2002-01-24T21:14:41Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2002-01-24T21:14:41Z"}, "message": "ios_base.h: Use _Atomic_word for reference counts.\n\n\tlibstdc++/5432\n\t* include/bits/ios_base.h: Use _Atomic_word for reference counts.\n\t* include/bits/localefwd.h: Likewise.\n\tAlso use for std::locale::id::_S_highwater.\n\t* src/ios.cc (ios_base::xalloc): Use _Atomic_word.\n\t* src/locale.cc: Support new usage of _Atomic_word.\n\t(std::locale::classic): Guard entire function against reentry.\n\t* src/localename.cc: Support new usage of _Atomic_word.\n\nFrom-SVN: r49195", "tree": {"sha": "cba821500b80780c5d81a3c969b81dc1eccbf9bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba821500b80780c5d81a3c969b81dc1eccbf9bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17325050c2b41359e31f251d9a445c32f046031b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17325050c2b41359e31f251d9a445c32f046031b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17325050c2b41359e31f251d9a445c32f046031b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17325050c2b41359e31f251d9a445c32f046031b/comments", "author": null, "committer": null, "parents": [{"sha": "a4f76ef9f331f1b052226d40ff6fd9d79c5606f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f76ef9f331f1b052226d40ff6fd9d79c5606f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f76ef9f331f1b052226d40ff6fd9d79c5606f3"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "5e849a4d0d29a62109268b0b0fa8022f7b5b88dd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=17325050c2b41359e31f251d9a445c32f046031b", "patch": "@@ -1,3 +1,15 @@\n+2002-01-24  andrew@andypo.net\n+\t    (tweaks, test and commit by Loren J. Rittle  <ljrittle@acm.org>)\n+\n+\tlibstdc++/5432\n+\t* include/bits/ios_base.h: Use _Atomic_word for reference counts.\n+\t* include/bits/localefwd.h: Likewise.\n+\tAlso use for std::locale::id::_S_highwater.\n+\t* src/ios.cc (ios_base::xalloc): Use _Atomic_word.\n+\t* src/locale.cc: Support new usage of _Atomic_word.\n+\t(std::locale::classic): Guard entire function against reentry.\n+\t* src/localename.cc: Support new usage of _Atomic_word.\n+\n 2002-01-24   Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/22_locale/num_put_members_wchar_t.cc (test03): Use"}, {"sha": "7525e7d6f4cd621eb74366b494ec9d7cfa42316e", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=17325050c2b41359e31f251d9a445c32f046031b", "patch": "@@ -1,6 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,6 +42,8 @@\n \n #pragma GCC system_header\n \n+#include <bits/atomicity.h>\n+\n namespace std\n {\n   // The following definitions of bitmask types are enums, not ints,\n@@ -244,17 +247,18 @@ namespace std\n       _Callback_list* \t\t_M_next;\n       ios_base::event_callback \t_M_fn;\n       int \t\t\t_M_index;\n-      int \t\t\t_M_refcount;  // 0 means one reference.\n+      _Atomic_word\t\t_M_refcount;  // 0 means one reference.\n     \n       _Callback_list(ios_base::event_callback __fn, int __index, \n \t\t     _Callback_list* __cb)\n       : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }\n       \n       void \n-      _M_add_reference() { ++_M_refcount; } // XXX MT\n-      \n+      _M_add_reference() { __atomic_add(&_M_refcount, 1); }\n+\n       int \n-      _M_remove_reference() { return _M_refcount--; }  // 0 => OK to delete\n+      _M_remove_reference() { return __exchange_and_add(&_M_refcount, -1); }\n+      // 0 => OK to delete\n     };\n \n      _Callback_list*  \t_M_callbacks;"}, {"sha": "bcb60b7e4e41caa92eb798e7fb17bfd97a6144a6", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=17325050c2b41359e31f251d9a445c32f046031b", "patch": "@@ -49,6 +49,8 @@\n #include <string> \t\t// For string\n #include <bits/functexcept.h>\n \n+#include <bits/atomicity.h>\n+\n namespace std\n {\n   // NB: Don't instantiate required wchar_t facets if no wchar_t support.\n@@ -317,7 +319,7 @@ namespace std\n \n   private:\n     // Data Members.\n-    size_t \t\t\t\t_M_references;\n+    _Atomic_word\t\t\t_M_references;\n     __vec_facet* \t\t\t_M_facets;\n     string \t\t\t\t_M_names[_S_num_categories];\n     static const locale::id* const \t_S_id_ctype[];\n@@ -330,12 +332,12 @@ namespace std\n \n     inline void \n     _M_add_reference() throw()\n-    { ++_M_references; }  // XXX MT\n+    { __atomic_add(&_M_references, 1); }\n \n     inline void \n     _M_remove_reference() throw()\n     {\n-      if (--_M_references == 0)  // XXX MT\n+      if (__exchange_and_add(&_M_references, -1) == 1)\n \t{\n \t  try \n \t    { delete this; } \n@@ -392,7 +394,7 @@ namespace std\n     friend class __enc_traits;\n \n   private:\n-    size_t _M_references;\n+    _Atomic_word _M_references;\n \n   protected:\n     // Contains data from the underlying \"C\" library for default \"C\"\n@@ -447,7 +449,7 @@ namespace std\n     mutable size_t \t_M_index;\n \n     // Last id number assigned\n-    static size_t \t_S_highwater;   \n+    static _Atomic_word \t_S_highwater;   \n \n     void \n     operator=(const id&);  // not defined"}, {"sha": "e8122bb2b77b310e71fb350f0196a262efad96ab", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=17325050c2b41359e31f251d9a445c32f046031b", "patch": "@@ -1,6 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,6 +37,8 @@\n #include <istream>\n #include <fstream>\n \n+#include <bits/atomicity.h>\n+\n namespace std \n {\n   // Extern declarations for global objects in src/globals.cc.\n@@ -224,10 +227,11 @@ namespace std\n   int \n   ios_base::xalloc() throw()\n   {\n-    // XXX MT\n     // XXX should be a symbol. (Reserve 0..3 for builtins.)\n-    static int top = 4; \n-    return top++;\n+    static _Atomic_word top = 0; \n+    return __exchange_and_add(&top, 1) + 4;\n+    // Implementation note: Initialize top to zero to ensure that\n+    // initialization occurs before main() is started.\n   }\n \n   // 27.4.2.5  iword/pword storage"}, {"sha": "52091827259f597a275bac4be31a13a51d2d6fed", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=17325050c2b41359e31f251d9a445c32f046031b", "patch": "@@ -41,6 +41,8 @@\n # include <cwctype>     // for towupper, etc.\n #endif\n \n+#include <bits/atomicity.h>\n+\n namespace std \n {\n   // Defined in globals.cc.\n@@ -72,7 +74,7 @@ namespace std\n #endif\n \n   // Definitions for static const data members of locale::id\n-  size_t locale::id::_S_highwater;  // init'd to 0 by linker\n+  _Atomic_word locale::id::_S_highwater;  // init'd to 0 by linker\n \n   // Definitions for static const data members of locale::_Impl\n   const locale::id* const\n@@ -187,7 +189,7 @@ namespace std\n   { \n     _S_initialize(); \n     (_M_impl = _S_global)->_M_add_reference(); \n-  } // XXX MT\n+  }\n \n   locale::locale(const locale& __other) throw()\n   { (_M_impl = __other._M_impl)->_M_add_reference(); }\n@@ -283,7 +285,9 @@ namespace std\n   locale const&\n   locale::classic()\n   {\n-    // XXX MT\n+    static _STL_mutex_lock __lock __STL_MUTEX_INITIALIZER;\n+    _STL_auto_lock __auto(__lock);\n+\n     if (!_S_classic)\n       {\n \ttry \n@@ -364,13 +368,13 @@ namespace std\n   void  \n   locale::facet::\n   _M_add_reference() throw()\n-  { ++_M_references; }  // XXX MT\n+  { __atomic_add(&_M_references, 1); }\n \n   void  \n   locale::facet::\n   _M_remove_reference() throw()\n   {\n-    if (_M_references-- == 0)\n+    if (__exchange_and_add(&_M_references, -1) == 0)\n       {\n         try \n \t  { delete this; }  "}, {"sha": "816f7581c121853dc97389f19eec7c417810b6ff", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17325050c2b41359e31f251d9a445c32f046031b/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=17325050c2b41359e31f251d9a445c32f046031b", "patch": "@@ -178,7 +178,7 @@ namespace std\n       {\n \tsize_t& __index = __idp->_M_index;\n \tif (!__index)\n-\t  __index = ++locale::id::_S_highwater;  // XXX MT\n+\t  __index = 1 + __exchange_and_add(&locale::id::_S_highwater, 1);\n \t\n \tif (__index >= _M_facets->size())\n \t  _M_facets->resize(__index + 1, 0);  // might throw"}]}