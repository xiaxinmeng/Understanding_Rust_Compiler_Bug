{"sha": "35ed859b0d525581e9fe771e87f24c79166832a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVlZDg1OWIwZDUyNTU4MWU5ZmU3NzFlODdmMjRjNzkxNjY4MzJhMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-01-05T09:58:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-01-05T09:58:57Z"}, "message": "tree-flow.h (struct fieldoff): Decompose field to type, size and decl.\n\n2006-01-05  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (struct fieldoff): Decompose field to\n\ttype, size and decl.\n\t* tree-ssa-alias.c (create_sft): Take type as parameter.\n\t(create_overlap_variables_for): Store type, size and decl\n\tin the fieldoff structure.\n\t* tree-ssa-structalias.c (fieldoff_compare): Adjust users\n\tof struct fieldoff.\n\t(push_fields_onto_fieldstack): Likewise.\n\t(create_variable_info_for): Likewise.  Use offset for the\n\tSFT name if the decl is not available.\n\nFrom-SVN: r109376", "tree": {"sha": "ee642046af609460b576d110ce148485977f3ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee642046af609460b576d110ce148485977f3ce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35ed859b0d525581e9fe771e87f24c79166832a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ed859b0d525581e9fe771e87f24c79166832a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ed859b0d525581e9fe771e87f24c79166832a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ed859b0d525581e9fe771e87f24c79166832a0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9220c30c89c24490d9df3439351a2ea393509d31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9220c30c89c24490d9df3439351a2ea393509d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9220c30c89c24490d9df3439351a2ea393509d31"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "9b84502af040911664ead63858a8724a0943f40e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ed859b0d525581e9fe771e87f24c79166832a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ed859b0d525581e9fe771e87f24c79166832a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35ed859b0d525581e9fe771e87f24c79166832a0", "patch": "@@ -1,3 +1,16 @@\n+2006-01-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (struct fieldoff): Decompose field to\n+\ttype, size and decl.\n+\t* tree-ssa-alias.c (create_sft): Take type as parameter.\n+\t(create_overlap_variables_for): Store type, size and decl\n+\tin the fieldoff structure.\n+\t* tree-ssa-structalias.c (fieldoff_compare): Adjust users\n+\tof struct fieldoff.\n+\t(push_fields_onto_fieldstack): Likewise.\n+\t(create_variable_info_for): Likewise.  Use offset for the\n+\tSFT name if the decl is not available.\n+\n 2006-01-04  Paul Brook  <paul@codesourcery.com>\n \n \t* config/m68k/m68k.c (m68k_output_mi_thunk): Use jmp, not jsr."}, {"sha": "d35b7ddf5f471805b79fbe0b8dcf104d5a72721e", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ed859b0d525581e9fe771e87f24c79166832a0/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ed859b0d525581e9fe771e87f24c79166832a0/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=35ed859b0d525581e9fe771e87f24c79166832a0", "patch": "@@ -863,7 +863,9 @@ tree maybe_fold_tmr (tree);\n \n struct fieldoff\n {\n-  tree field;\n+  tree type;\n+  tree size;\n+  tree decl;\n   HOST_WIDE_INT offset;  \n };\n typedef struct fieldoff fieldoff_s;"}, {"sha": "5813a653b15870f0859d0eb5da4d2dc028aba0f9", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ed859b0d525581e9fe771e87f24c79166832a0/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ed859b0d525581e9fe771e87f24c79166832a0/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=35ed859b0d525581e9fe771e87f24c79166832a0", "patch": "@@ -2515,14 +2515,14 @@ get_or_create_used_part_for (size_t uid)\n }\n \n \n-/* Create and return a structure sub-variable for field FIELD of\n+/* Create and return a structure sub-variable for field type FIELD of\n    variable VAR.  */\n \n static tree\n create_sft (tree var, tree field)\n {\n   var_ann_t ann;\n-  tree subvar = create_tag_raw (STRUCT_FIELD_TAG, TREE_TYPE (field), \"SFT\");\n+  tree subvar = create_tag_raw (STRUCT_FIELD_TAG, field, \"SFT\");\n \n   /* We need to copy the various flags from VAR to SUBVAR, so that\n      they are is_global_var iff the original variable was.  */\n@@ -2578,9 +2578,9 @@ create_overlap_variables_for (tree var)\n \n       for (i = 0; VEC_iterate (fieldoff_s, fieldstack, i, fo); i++)\n \t{\n-\t  if (!DECL_SIZE (fo->field) \n-\t      || TREE_CODE (DECL_SIZE (fo->field)) != INTEGER_CST\n-\t      || TREE_CODE (TREE_TYPE (fo->field)) == ARRAY_TYPE\n+\t  if (!fo->size\n+\t      || TREE_CODE (fo->size) != INTEGER_CST\n+\t      || TREE_CODE (fo->type) == ARRAY_TYPE\n \t      || fo->offset < 0)\n \t    {\n \t      notokay = true;\n@@ -2632,8 +2632,8 @@ create_overlap_variables_for (tree var)\n \t  HOST_WIDE_INT fosize;\n \t  tree currfotype;\n \n-\t  fosize = TREE_INT_CST_LOW (DECL_SIZE (fo->field));\n-\t  currfotype = TREE_TYPE (fo->field);\n+\t  fosize = TREE_INT_CST_LOW (fo->size);\n+\t  currfotype = fo->type;\n \n \t  /* If this field isn't in the used portion,\n \t     or it has the exact same offset and size as the last\n@@ -2650,7 +2650,7 @@ create_overlap_variables_for (tree var)\n \t  sv->offset = fo->offset;\n \t  sv->size = fosize;\n \t  sv->next = *subvars;\n-\t  sv->var = create_sft (var, fo->field);\n+\t  sv->var = create_sft (var, fo->type);\n \n \t  if (dump_file)\n \t    {"}, {"sha": "bae21a02518a7f220564fc8989a28c575582ee55", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ed859b0d525581e9fe771e87f24c79166832a0/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ed859b0d525581e9fe771e87f24c79166832a0/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=35ed859b0d525581e9fe771e87f24c79166832a0", "patch": "@@ -3540,8 +3540,8 @@ fieldoff_compare (const void *pa, const void *pb)\n   if (foa->offset != fob->offset)\n     return foa->offset - fob->offset;\n \n-  foasize = TREE_INT_CST_LOW (DECL_SIZE (foa->field));\n-  fobsize = TREE_INT_CST_LOW (DECL_SIZE (fob->field));\n+  foasize = TREE_INT_CST_LOW (foa->size);\n+  fobsize = TREE_INT_CST_LOW (fob->size);\n   return foasize - fobsize;\n }\n \n@@ -3597,7 +3597,9 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n \t    fieldoff_s *pair;\n \n \t    pair = VEC_safe_push (fieldoff_s, heap, *fieldstack, NULL);\n-\t    pair->field = field;\n+\t    pair->type = TREE_TYPE (field);\n+\t    pair->size = DECL_SIZE (field);\n+\t    pair->decl = field;\n \t    pair->offset = offset + bitpos_of_field (field);\n \t    count++;\n \t  }\n@@ -3842,12 +3844,11 @@ create_variable_info_for (tree decl, const char *name)\n       unsigned int newindex = VEC_length (varinfo_t, varmap);\n       fieldoff_s *fo = NULL;\n       unsigned int i;\n-      tree field;\n \n       for (i = 0; !notokay && VEC_iterate (fieldoff_s, fieldstack, i, fo); i++)\n \t{\n-\t  if (!DECL_SIZE (fo->field) \n-\t      || TREE_CODE (DECL_SIZE (fo->field)) != INTEGER_CST\n+\t  if (! fo->size\n+\t      || TREE_CODE (fo->size) != INTEGER_CST\n \t      || fo->offset < 0)\n \t    {\n \t      notokay = true;\n@@ -3882,23 +3883,24 @@ create_variable_info_for (tree decl, const char *name)\n \t  return index;\n \t}\n       \n-      field = fo->field;\n-      vi->size = TREE_INT_CST_LOW (DECL_SIZE (field));\n+      vi->size = TREE_INT_CST_LOW (fo->size);\n       vi->offset = fo->offset;\n       for (i = 1; VEC_iterate (fieldoff_s, fieldstack, i, fo); i++)\n \t{\n \t  varinfo_t newvi;\n \t  const char *newname;\n \t  char *tempname;\n \n-\t  field = fo->field;\n \t  newindex = VEC_length (varinfo_t, varmap);\n-\t  asprintf (&tempname, \"%s.%s\", vi->name, alias_get_name (field));\n+\t  if (fo->decl)\n+\t    asprintf (&tempname, \"%s.%s\", vi->name, alias_get_name (fo->decl));\n+\t  else\n+\t    asprintf (&tempname, \"%s.\" HOST_WIDE_INT_PRINT_DEC, vi->name, fo->offset);\n \t  newname = ggc_strdup (tempname);\n \t  free (tempname);\n \t  newvi = new_var_info (decl, newindex, newname, newindex);\n \t  newvi->offset = fo->offset;\n-\t  newvi->size = TREE_INT_CST_LOW (DECL_SIZE (field));\n+\t  newvi->size = TREE_INT_CST_LOW (fo->size);\n \t  newvi->fullsize = vi->fullsize;\n \t  insert_into_field_list (vi, newvi);\n \t  VEC_safe_push (varinfo_t, heap, varmap, newvi);"}]}