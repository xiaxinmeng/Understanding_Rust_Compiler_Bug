{"sha": "0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJmYmNhNTg2OGZhZTE5MTJkYjMzYWU0YWIzNDFkNmUwOGJkNjhiNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-01-28T14:43:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-01-28T14:43:03Z"}, "message": "re PR tree-optimization/56125 (-O2 -ffast-math generates bad code when dividing a double by the square of another double.)\n\n\tPR tree-optimization/56125\n\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): Don't optimize\n\tpow(x,c) into sqrt(x) * powi(x, n/2) or\n\t1.0 / (sqrt(x) * powi(x, abs(n/2))) if c is an integer or when\n\toptimizing for size.\n\tDon't optimize pow(x,c) into powi(x, n/3) * powi(cbrt(x), n%3) or\n\t1.0 / (powi(x, abs(n)/3) * powi(cbrt(x), abs(n)%3)) if 2c is an\n\tinteger.\n\n\t* gcc.dg/pr56125.c: New test.\n\nFrom-SVN: r195507", "tree": {"sha": "2a2bfc3d290925073d4af913ae01b69cfbf1aa53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a2bfc3d290925073d4af913ae01b69cfbf1aa53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/comments", "author": null, "committer": null, "parents": [{"sha": "dd8b9ddea2288c96124367bf66ce060eb1049872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd8b9ddea2288c96124367bf66ce060eb1049872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd8b9ddea2288c96124367bf66ce060eb1049872"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "3b3eed82bd8aa937b446bcfa3fd94ee08c28508b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "patch": "@@ -1,5 +1,14 @@\n 2013-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/56125\n+\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): Don't optimize\n+\tpow(x,c) into sqrt(x) * powi(x, n/2) or\n+\t1.0 / (sqrt(x) * powi(x, abs(n/2))) if c is an integer or when\n+\toptimizing for size.\n+\tDon't optimize pow(x,c) into powi(x, n/3) * powi(cbrt(x), n%3) or\n+\t1.0 / (powi(x, abs(n)/3) * powi(cbrt(x), abs(n)%3)) if 2c is an\n+\tinteger.\n+\n \tPR tree-optimization/56094\n \t* gimplify.c (force_gimple_operand_1): Temporarily set input_location\n \tto UNKNOWN_LOCATION while gimplifying expr.\n@@ -11,19 +20,18 @@\n \toperand 0 in movabs insn template for -masm=intel asm alternative.\n \t(*movabs<mode>_2): Ditto for operand 1.\n \n-2013-01-26  David Holsgrove <david.holsgrove@xilinx.com>\n+2013-01-26  David Holsgrove  <david.holsgrove@xilinx.com>\n \n \tPR target/54663\n \t* config.gcc (microblaze*-linux*): Add tmake_file to allow building\n \tof microblaze-c.o\n \n-2013-01-26  Edgar E. Iglesias <edgar.iglesias@gmail.com>\n+2013-01-26  Edgar E. Iglesias  <edgar.iglesias@gmail.com>\n \n \t* config.gcc (microblaze*-*-*): Rename microblaze*-*-elf, update\n \ttm_file.\n \n-\n-2013-01-25 Naveen H.S <Naveen.Hurugalawadi@caviumnetworks.com>\n+2013-01-25  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64.c (TARGET_FIXED_CONDITION_CODE_REGS):\n \tUndef to avoid warning.\n@@ -369,7 +377,7 @@\n \n \t* config/aarch64/arm_neon.h: Map scalar types to standard types.\n \n-2013-01-18  Alexandre Oliva <aoliva@redhat.com>\n+2013-01-18  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/54114\n \tPR debug/54402\n@@ -392,13 +400,13 @@\n \tcache, respectively.\n \t* alias.c (rtx_equal_for_memref_p): Compare operands of ENTRY_VALUEs.\n \n-2013-01-18  Alexandre Oliva <aoliva@redhat.com>\n+2013-01-18  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR libmudflap/53359\n \t* tree-mudflap.c (mudflap_finish_file): Skip deferred decls\n \tnot found in the symtab.\n \n-2013-01-18  Alexandre Oliva <aoliva@redhat.com>\n+2013-01-18  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/56006\n \tPR rtl-optimization/55547\n@@ -542,7 +550,7 @@\n \t(expand_atomic_load): Ditto.\n \t(expand_atomic_store): Ditto.\n \n-2013-01-16  Alexandre Oliva <aoliva@redhat.com>\n+2013-01-16  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR rtl-optimization/55547\n \tPR rtl-optimization/53827\n@@ -1101,7 +1109,7 @@\n \t(asan_finish_file): Test it here instead.\n \n 2013-01-07   Nick Clifton  <nickc@redhat.com>\n-\t     Matthias Klose <doko@debian.org>\n+\t     Matthias Klose  <doko@debian.org>\n \t     Doug Kwan  <dougkwan@google.com>\n \t     H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "dc09eef5ce36833b2c042fd1cd03ec93ece3af2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "patch": "@@ -1,3 +1,8 @@\n+2013-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56125\n+\t* gcc.dg/pr56125.c: New test.\n+\n 2013-01-28  Tobias Burnus  <burnus@net-b.de>\n \t    Mikael Morin  <mikael@gcc.gnu.org>\n \n@@ -157,7 +162,7 @@\n \n \t* lib/target-supports.exp (check_effective_target_alias): New.\n \n-2013-01-20  Jack Howarth <howarth@bromo.med.uc.edu>\n+2013-01-20  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \tPR debug/53235\n \t* g++.dg/debug/dwarf2/nested-4.C: XFAIL on darwin.\n@@ -217,7 +222,7 @@\n \tPR rtl-optimization/52573\n \t* gcc.dg/pr52573.c: New test.\n \n-2013-01-17  Jack Howarth <howarth@bromo.med.uc.edu>\n+2013-01-17  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \tPR sanitizer/55679\n \t* g++.dg/asan/interception-test-1.C: Skip on darwin."}, {"sha": "d1840a9a059922b5863cb711f49c57d4742ee421", "filename": "gcc/testsuite/gcc.dg/pr56125.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56125.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56125.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56125.c?ref=0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/56125 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void abort (void);\n+extern double fabs (double);\n+\n+__attribute__((cold)) double\n+foo (double x, double n)\n+{\n+  double u = x / (n * n);\n+  return u;\n+}\n+\n+int\n+main ()\n+{\n+  if (fabs (foo (29, 2) - 7.25) > 0.001)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "2140ced495b8cf4f5b2971b31b083c62430070b2", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfbca5868fae1912db33ae4ab341d6e08bd68b4/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "patch": "@@ -1110,7 +1110,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n   HOST_WIDE_INT n;\n   tree type, sqrtfn, cbrtfn, sqrt_arg0, sqrt_sqrt, result, cbrt_x, powi_cbrt_x;\n   enum machine_mode mode;\n-  bool hw_sqrt_exists;\n+  bool hw_sqrt_exists, c_is_int, c2_is_int;\n \n   /* If the exponent isn't a constant, there's nothing of interest\n      to be done.  */\n@@ -1122,8 +1122,9 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n   c = TREE_REAL_CST (arg1);\n   n = real_to_integer (&c);\n   real_from_integer (&cint, VOIDmode, n, n < 0 ? -1 : 0, 0);\n+  c_is_int = real_identical (&c, &cint);\n \n-  if (real_identical (&c, &cint)\n+  if (c_is_int\n       && ((n >= -1 && n <= 2)\n \t  || (flag_unsafe_math_optimizations\n \t      && optimize_insn_for_speed_p ()\n@@ -1221,7 +1222,8 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n       return build_and_insert_call (gsi, loc, cbrtfn, sqrt_arg0);\n     }\n \n-  /* Optimize pow(x,c), where n = 2c for some nonzero integer n, into\n+  /* Optimize pow(x,c), where n = 2c for some nonzero integer n\n+     and c not an integer, into\n \n        sqrt(x) * powi(x, n/2),                n > 0;\n        1.0 / (sqrt(x) * powi(x, abs(n/2))),   n < 0.\n@@ -1230,10 +1232,13 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n   real_arithmetic (&c2, MULT_EXPR, &c, &dconst2);\n   n = real_to_integer (&c2);\n   real_from_integer (&cint, VOIDmode, n, n < 0 ? -1 : 0, 0);\n+  c2_is_int = real_identical (&c2, &cint);\n \n   if (flag_unsafe_math_optimizations\n       && sqrtfn\n-      && real_identical (&c2, &cint))\n+      && c2_is_int\n+      && !c_is_int\n+      && optimize_function_for_speed_p (cfun))\n     {\n       tree powi_x_ndiv2 = NULL_TREE;\n \n@@ -1286,6 +1291,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n       && cbrtfn\n       && (gimple_val_nonnegative_real_p (arg0) || !HONOR_NANS (mode))\n       && real_identical (&c2, &c)\n+      && !c2_is_int\n       && optimize_function_for_speed_p (cfun)\n       && powi_cost (n / 3) <= POWI_MAX_MULTS)\n     {"}]}