{"sha": "81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFmYTM1YmQ1OTkxZDM5YWJiMzQyYmQ2NTVmYmU4ZmM3YjliNDAyNg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-09-02T13:26:30Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-09-02T13:26:30Z"}, "message": "cgraph.h (cgraph_indirect_call_info): Removed field thunk_delta.\n\n2011-09-02  Martin Jambor  <mjambor@suse.cz>\n\n\t* cgraph.h (cgraph_indirect_call_info): Removed field thunk_delta.\n\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Rewritten to use\n\tBINFO_VTABLE.  Parameter delta removed, all callers updated.\n\t* tree.c (free_lang_data_in_binfo): Clear BINFO_VIRTUALs instead\n\tBINFO_VTABLE.\n\t* cgraph.c (cgraph_make_edge_direct): Removed parameter delta, updated\n\tall calls.\n\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Removed\n\thandling of thunk_delta.\n\t* ipa-cp.c (get_indirect_edge_target): Removed parameter delta.\n\t(devirtualization_time_bonus): Do not handle thunk deltas.\n\t(ipcp_discover_new_direct_edges): Likewise.\n\t* ipa-prop.c (ipa_make_edge_direct_to_target): Likewise.\n\t(try_make_edge_direct_simple_call): Likewise.\n\t(try_make_edge_direct_virtual_call): Likewise.\n\t* lto-cgraph.c (output_cgraph_opt_summary_p): Likewise.  Mark\n\tparameter set as unused.\n\t(output_edge_opt_summary): Likewise.  Mark both parameters as unused.\n\t* lto-cgraph.c (output_cgraph_opt_summary_p): Likewise.  Mark\n\tparameter set as unused.\n\t(output_edge_opt_summary): Likewise.  Mark both parameters as unused.\n\t(input_edge_opt_summary): Likewise.\n\t* lto-streamer-out.c (lto_output_ts_binfo_tree_pointers): Do not stream\n\tBINFO_VIRTUALS at all.\n\t* lto-streamer-in.c (lto_input_ts_binfo_tree_pointers): Likewise.\n\n\t* testsuite/g++.dg/ipa/devirt-3.C: Added a distraction method.\n\t* testsuite/g++.dg/ipa/ivinline-7.C: Added a test for direct call\n\tdiscovery, xfailed test for inlining.\n\t* testsuite/g++.dg/ipa/ivinline-9.C: Likewise.\n\nFrom-SVN: r178472", "tree": {"sha": "40b78961e6d8224638e16b90b5477c67f9a4ee1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40b78961e6d8224638e16b90b5477c67f9a4ee1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d882cc1dafe2546b34f1845f943b91f024dbac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d882cc1dafe2546b34f1845f943b91f024dbac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d882cc1dafe2546b34f1845f943b91f024dbac4"}], "stats": {"total": 286, "additions": 135, "deletions": 151}, "files": [{"sha": "dbf798f09fb7c07e7b5f92b65e654206b03d02b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -1,3 +1,31 @@\n+2011-09-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraph.h (cgraph_indirect_call_info): Removed field thunk_delta.\n+\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Rewritten to use\n+\tBINFO_VTABLE.  Parameter delta removed, all callers updated.\n+\t* tree.c (free_lang_data_in_binfo): Clear BINFO_VIRTUALs instead\n+\tBINFO_VTABLE.\n+\t* cgraph.c (cgraph_make_edge_direct): Removed parameter delta, updated\n+\tall calls.\n+\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Removed\n+\thandling of thunk_delta.\n+\t* ipa-cp.c (get_indirect_edge_target): Removed parameter delta.\n+\t(devirtualization_time_bonus): Do not handle thunk deltas.\n+\t(ipcp_discover_new_direct_edges): Likewise.\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Likewise.\n+\t(try_make_edge_direct_simple_call): Likewise.\n+\t(try_make_edge_direct_virtual_call): Likewise.\n+\t* lto-cgraph.c (output_cgraph_opt_summary_p): Likewise.  Mark\n+\tparameter set as unused.\n+\t(output_edge_opt_summary): Likewise.  Mark both parameters as unused.\n+\t* lto-cgraph.c (output_cgraph_opt_summary_p): Likewise.  Mark\n+\tparameter set as unused.\n+\t(output_edge_opt_summary): Likewise.  Mark both parameters as unused.\n+\t(input_edge_opt_summary): Likewise.\n+\t* lto-streamer-out.c (lto_output_ts_binfo_tree_pointers): Do not stream\n+\tBINFO_VIRTUALS at all.\n+\t* lto-streamer-in.c (lto_input_ts_binfo_tree_pointers): Likewise.\n+\n 2011-09-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-ccp.c (fold_builtin_alloca_for_var): Do not"}, {"sha": "14e7a3b0f0818e0729b475a9e99a322dc188c411", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -835,7 +835,7 @@ cgraph_set_call_stmt (struct cgraph_edge *e, gimple new_stmt)\n       struct cgraph_node *new_callee = cgraph_get_node (decl);\n \n       gcc_checking_assert (new_callee);\n-      cgraph_make_edge_direct (e, new_callee, 0);\n+      cgraph_make_edge_direct (e, new_callee);\n     }\n \n   push_cfun (DECL_STRUCT_FUNCTION (e->caller->decl));\n@@ -1161,11 +1161,9 @@ cgraph_redirect_edge_callee (struct cgraph_edge *e, struct cgraph_node *n)\n    pointer (first parameter) to compensate for skipping a thunk adjustment.  */\n \n void\n-cgraph_make_edge_direct (struct cgraph_edge *edge, struct cgraph_node *callee,\n-\t\t\t HOST_WIDE_INT delta)\n+cgraph_make_edge_direct (struct cgraph_edge *edge, struct cgraph_node *callee)\n {\n   edge->indirect_unknown_callee = 0;\n-  edge->indirect_info->thunk_delta = delta;\n \n   /* Get the edge out of the indirect edge list. */\n   if (edge->prev_callee)"}, {"sha": "4116d71d0f63d31b48ee9f0878a04920b1cf39cf", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -314,9 +314,6 @@ struct GTY(()) cgraph_indirect_call_info\n   HOST_WIDE_INT anc_offset;\n   /* OBJ_TYPE_REF_TOKEN of a polymorphic call (if polymorphic is set).  */\n   HOST_WIDE_INT otr_token;\n-  /* Delta by which must be added to this parameter to compensate for a skipped\n-     this adjusting thunk.  */\n-  HOST_WIDE_INT thunk_delta;\n   /* Type of the object from OBJ_TYPE_REF_OBJECT. */\n   tree otr_type;\n   /* Index of the parameter that is called.  */\n@@ -507,8 +504,7 @@ struct cgraph_node * cgraph_clone_node (struct cgraph_node *, tree, gcov_type,\n struct cgraph_node *cgraph_create_function_alias (tree, tree);\n \n void cgraph_redirect_edge_callee (struct cgraph_edge *, struct cgraph_node *);\n-void cgraph_make_edge_direct (struct cgraph_edge *, struct cgraph_node *,\n-\t\t\t      HOST_WIDE_INT);\n+void cgraph_make_edge_direct (struct cgraph_edge *, struct cgraph_node *);\n bool cgraph_only_called_directly_p (struct cgraph_node *);\n \n struct cgraph_asm_node *cgraph_add_asm_node (tree);"}, {"sha": "829bcc72bc05b58100d4f5620e5e78fab634a3e8", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -2367,7 +2367,6 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n   tree decl = gimple_call_fndecl (e->call_stmt);\n   gimple new_stmt;\n   gimple_stmt_iterator gsi;\n-  bool gsi_computed = false;\n #ifdef ENABLE_CHECKING\n   struct cgraph_node *node;\n #endif\n@@ -2398,21 +2397,6 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n \t}\n     }\n \n-  if (e->indirect_info &&\n-      e->indirect_info->thunk_delta != 0\n-      && (!e->callee->clone.combined_args_to_skip\n-\t  || !bitmap_bit_p (e->callee->clone.combined_args_to_skip, 0)))\n-    {\n-      if (cgraph_dump_file)\n-\tfprintf (cgraph_dump_file, \"          Thunk delta is \"\n-\t\t HOST_WIDE_INT_PRINT_DEC \"\\n\", e->indirect_info->thunk_delta);\n-      gsi = gsi_for_stmt (e->call_stmt);\n-      gsi_computed = true;\n-      gimple_adjust_this_by_delta (&gsi,\n-\t\t\t\t   size_int (e->indirect_info->thunk_delta));\n-      e->indirect_info->thunk_delta = 0;\n-    }\n-\n   if (e->callee->clone.combined_args_to_skip)\n     {\n       int lp_nr;\n@@ -2426,8 +2410,7 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n \t  && TREE_CODE (gimple_vdef (new_stmt)) == SSA_NAME)\n \tSSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n \n-      if (!gsi_computed)\n-\tgsi = gsi_for_stmt (e->call_stmt);\n+      gsi = gsi_for_stmt (e->call_stmt);\n       gsi_replace (&gsi, new_stmt, false);\n       /* We need to defer cleaning EH info on the new statement to\n          fixup-cfg.  We may not have dominator information at this point"}, {"sha": "9500a6ab26a76996e1bbe6f5311528390e8cc85d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 56, "deletions": 48, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -982,51 +982,6 @@ gimple_fold_builtin (gimple stmt)\n   return result;\n }\n \n-/* Return a declaration of a function which an OBJ_TYPE_REF references. TOKEN\n-   is integer form of OBJ_TYPE_REF_TOKEN of the reference expression.\n-   KNOWN_BINFO carries the binfo describing the true type of\n-   OBJ_TYPE_REF_OBJECT(REF).  If a call to the function must be accompanied\n-   with a this adjustment, the constant which should be added to this pointer\n-   is stored to *DELTA.  If REFUSE_THUNKS is true, return NULL if the function\n-   is a thunk (other than a this adjustment which is dealt with by DELTA). */\n-\n-tree\n-gimple_get_virt_method_for_binfo (HOST_WIDE_INT token, tree known_binfo,\n-\t\t\t\t  tree *delta)\n-{\n-  HOST_WIDE_INT i;\n-  tree v, fndecl;\n-\n-  v = BINFO_VIRTUALS (known_binfo);\n-  /* If there is no virtual methods leave the OBJ_TYPE_REF alone.  */\n-  if (!v)\n-    return NULL_TREE;\n-  i = 0;\n-  while (i != token)\n-    {\n-      i += (TARGET_VTABLE_USES_DESCRIPTORS\n-\t    ? TARGET_VTABLE_USES_DESCRIPTORS : 1);\n-      v = TREE_CHAIN (v);\n-    }\n-\n-  /* If BV_VCALL_INDEX is non-NULL, give up.  */\n-  if (TREE_TYPE (v))\n-    return NULL_TREE;\n-\n-  fndecl = TREE_VALUE (v);\n-\n-  /* When cgraph node is missing and function is not public, we cannot\n-     devirtualize.  This can happen in WHOPR when the actual method\n-     ends up in other partition, because we found devirtualization\n-     possibility too late.  */\n-  if (!can_refer_decl_in_current_unit_p (TREE_VALUE (v)))\n-    return NULL_TREE;\n-\n-  *delta = TREE_PURPOSE (v);\n-  gcc_checking_assert (host_integerp (*delta, 0));\n-  return fndecl;\n-}\n-\n /* Generate code adjusting the first parameter of a call statement determined\n    by GSI by DELTA.  */\n \n@@ -1149,7 +1104,7 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n   callee = gimple_call_fn (stmt);\n   if (callee && TREE_CODE (callee) == OBJ_TYPE_REF)\n     {\n-      tree binfo, fndecl, delta, obj;\n+      tree binfo, fndecl, obj;\n       HOST_WIDE_INT token;\n \n       if (gimple_call_addr_fndecl (OBJ_TYPE_REF_EXPR (callee)) != NULL_TREE)\n@@ -1163,10 +1118,9 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n       if (!binfo)\n \treturn false;\n       token = TREE_INT_CST_LOW (OBJ_TYPE_REF_TOKEN (callee));\n-      fndecl = gimple_get_virt_method_for_binfo (token, binfo, &delta);\n+      fndecl = gimple_get_virt_method_for_binfo (token, binfo);\n       if (!fndecl)\n \treturn false;\n-      gcc_assert (integer_zerop (delta));\n       gimple_call_set_fndecl (stmt, fndecl);\n       return true;\n     }\n@@ -3064,6 +3018,60 @@ fold_const_aggregate_ref (tree t)\n   return fold_const_aggregate_ref_1 (t, NULL);\n }\n \n+/* Return a declaration of a function which an OBJ_TYPE_REF references. TOKEN\n+   is integer form of OBJ_TYPE_REF_TOKEN of the reference expression.\n+   KNOWN_BINFO carries the binfo describing the true type of\n+   OBJ_TYPE_REF_OBJECT(REF).  */\n+\n+tree\n+gimple_get_virt_method_for_binfo (HOST_WIDE_INT token, tree known_binfo)\n+{\n+  unsigned HOST_WIDE_INT offset, size;\n+  tree v, fn;\n+\n+  v = BINFO_VTABLE (known_binfo);\n+  /* If there is no virtual methods table, leave the OBJ_TYPE_REF alone.  */\n+  if (!v)\n+    return NULL_TREE;\n+\n+  if (TREE_CODE (v) == POINTER_PLUS_EXPR)\n+    {\n+      offset = tree_low_cst (TREE_OPERAND (v, 1), 1) * BITS_PER_UNIT;\n+      v = TREE_OPERAND (v, 0);\n+    }\n+  else\n+    offset = 0;\n+\n+  if (TREE_CODE (v) != ADDR_EXPR)\n+    return NULL_TREE;\n+  v = TREE_OPERAND (v, 0);\n+\n+  if (TREE_CODE (v) != VAR_DECL\n+      || !DECL_VIRTUAL_P (v)\n+      || !DECL_INITIAL (v))\n+    return NULL_TREE;\n+  gcc_checking_assert (TREE_CODE (TREE_TYPE (v)) == ARRAY_TYPE);\n+  size = tree_low_cst (TYPE_SIZE (TREE_TYPE (TREE_TYPE (v))), 1);\n+  offset += token * size;\n+  fn = fold_ctor_reference (TREE_TYPE (TREE_TYPE (v)), DECL_INITIAL (v),\n+\t\t\t    offset, size);\n+  if (!fn)\n+    return NULL_TREE;\n+  gcc_assert (TREE_CODE (fn) == ADDR_EXPR\n+\t      || TREE_CODE (fn) == FDESC_EXPR);\n+  fn = TREE_OPERAND (fn, 0);\n+  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL);\n+\n+  /* When cgraph node is missing and function is not public, we cannot\n+     devirtualize.  This can happen in WHOPR when the actual method\n+     ends up in other partition, because we found devirtualization\n+     possibility too late.  */\n+  if (!can_refer_decl_in_current_unit_p (fn))\n+    return NULL_TREE;\n+\n+  return fn;\n+}\n+\n /* Return true iff VAL is a gimple expression that is known to be\n    non-negative.  Restricted to floating-point inputs.  */\n "}, {"sha": "80b6cbde1807d6360bf408668ab92c02b263b091", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -909,7 +909,7 @@ unsigned get_gimple_rhs_num_ops (enum tree_code);\n gimple gimple_alloc_stat (enum gimple_code, unsigned MEM_STAT_DECL);\n const char *gimple_decl_printable_name (tree, int);\n bool gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace);\n-tree gimple_get_virt_method_for_binfo (HOST_WIDE_INT, tree, tree *);\n+tree gimple_get_virt_method_for_binfo (HOST_WIDE_INT, tree);\n void gimple_adjust_this_by_delta (gimple_stmt_iterator *, tree);\n tree gimple_extract_devirt_binfo_from_cst (tree);\n /* Returns true iff T is a valid GIMPLE statement.  */"}, {"sha": "23eb1e27cf3fa0e95d89136d283245be5d80c7c8", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -1110,11 +1110,10 @@ propagate_constants_accross_call (struct cgraph_edge *cs)\n \n /* If an indirect edge IE can be turned into a direct one based on KNOWN_VALS\n    (which can contain both constants and binfos) or KNOWN_BINFOS (which can be\n-   NULL) return the destination.  If simple thunk delta must be applied too,\n-   store it to DELTA.  */\n+   NULL) return the destination.  */\n \n static tree\n-get_indirect_edge_target (struct cgraph_edge *ie, tree *delta,\n+get_indirect_edge_target (struct cgraph_edge *ie,\n \t\t\t  VEC (tree, heap) *known_vals,\n \t\t\t  VEC (tree, heap) *known_binfos)\n {\n@@ -1132,10 +1131,7 @@ get_indirect_edge_target (struct cgraph_edge *ie, tree *delta,\n       if (t &&\n \t  TREE_CODE (t) == ADDR_EXPR\n \t  && TREE_CODE (TREE_OPERAND (t, 0)) == FUNCTION_DECL)\n-\t{\n-\t  *delta = NULL_TREE;\n-\t  return TREE_OPERAND (t, 0);\n-\t}\n+\treturn TREE_OPERAND (t, 0);\n       else\n \treturn NULL_TREE;\n     }\n@@ -1159,7 +1155,7 @@ get_indirect_edge_target (struct cgraph_edge *ie, tree *delta,\n       binfo = get_binfo_at_offset (binfo, anc_offset, otr_type);\n       if (!binfo)\n \treturn NULL_TREE;\n-      return gimple_get_virt_method_for_binfo (token, binfo, delta);\n+      return gimple_get_virt_method_for_binfo (token, binfo);\n     }\n   else\n     {\n@@ -1168,7 +1164,7 @@ get_indirect_edge_target (struct cgraph_edge *ie, tree *delta,\n       binfo = get_binfo_at_offset (t, anc_offset, otr_type);\n       if (!binfo)\n \treturn NULL_TREE;\n-      return gimple_get_virt_method_for_binfo (token, binfo, delta);\n+      return gimple_get_virt_method_for_binfo (token, binfo);\n     }\n }\n \n@@ -1187,9 +1183,9 @@ devirtualization_time_bonus (struct cgraph_node *node,\n     {\n       struct cgraph_node *callee;\n       struct inline_summary *isummary;\n-      tree delta, target;\n+      tree target;\n \n-      target = get_indirect_edge_target (ie, &delta, known_csts, known_binfos);\n+      target = get_indirect_edge_target (ie, known_csts, known_binfos);\n       if (!target)\n \tcontinue;\n \n@@ -1674,12 +1670,12 @@ ipcp_discover_new_direct_edges (struct cgraph_node *node,\n \n   for (ie = node->indirect_calls; ie; ie = next_ie)\n     {\n-      tree delta, target;\n+      tree target;\n \n       next_ie = ie->next_callee;\n-      target = get_indirect_edge_target (ie, &delta, known_vals, NULL);\n+      target = get_indirect_edge_target (ie, known_vals, NULL);\n       if (target)\n-\tipa_make_edge_direct_to_target (ie, target, delta);\n+\tipa_make_edge_direct_to_target (ie, target);\n     }\n }\n "}, {"sha": "f21ab8939953246aa25f114953b4a2f6c47472dd", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -1614,12 +1614,10 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n }\n \n /* If TARGET is an addr_expr of a function declaration, make it the destination\n-   of an indirect edge IE and return the edge.  Otherwise, return NULL.  Delta,\n-   if non-NULL, is an integer constant that must be added to this pointer\n-   (first parameter).  */\n+   of an indirect edge IE and return the edge.  Otherwise, return NULL.  */\n \n struct cgraph_edge *\n-ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target, tree delta)\n+ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n {\n   struct cgraph_node *callee;\n \n@@ -1632,11 +1630,11 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target, tree delta)\n     return NULL;\n   ipa_check_create_node_params ();\n \n-  /* We can not make edges to inline clones.  It is bug that someone removed the cgraph\n-     node too early.  */\n+  /* We can not make edges to inline clones.  It is bug that someone removed\n+     the cgraph node too early.  */\n   gcc_assert (!callee->global.inlined_to);\n \n-  cgraph_make_edge_direct (ie, callee, delta ? tree_low_cst (delta, 0) : 0);\n+  cgraph_make_edge_direct (ie, callee);\n   if (dump_file)\n     {\n       fprintf (dump_file, \"ipa-prop: Discovered %s call to a known target \"\n@@ -1648,13 +1646,6 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target, tree delta)\n \tprint_gimple_stmt (dump_file, ie->call_stmt, 2, TDF_SLIM);\n       else\n \tfprintf (dump_file, \"with uid %i\\n\", ie->lto_stmt_uid);\n-\n-      if (delta)\n-\t{\n-\t  fprintf (dump_file, \"          Thunk delta is \");\n-\t  print_generic_expr (dump_file, delta, 0);\n-\t  fprintf (dump_file, \"\\n\");\n-\t}\n     }\n   callee = cgraph_function_or_thunk_node (callee, NULL);\n \n@@ -1683,7 +1674,7 @@ try_make_edge_direct_simple_call (struct cgraph_edge *ie,\n   else\n     return NULL;\n \n-  return ipa_make_edge_direct_to_target (ie, target, NULL_TREE);\n+  return ipa_make_edge_direct_to_target (ie, target);\n }\n \n /* Try to find a destination for indirect edge IE that corresponds to a\n@@ -1695,7 +1686,7 @@ static struct cgraph_edge *\n try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n \t\t\t\t   struct ipa_jump_func *jfunc)\n {\n-  tree binfo, type, target, delta;\n+  tree binfo, type, target;\n   HOST_WIDE_INT token;\n \n   if (jfunc->type == IPA_JF_KNOWN_TYPE)\n@@ -1710,12 +1701,12 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n   type = ie->indirect_info->otr_type;\n   binfo = get_binfo_at_offset (binfo, ie->indirect_info->anc_offset, type);\n   if (binfo)\n-    target = gimple_get_virt_method_for_binfo (token, binfo, &delta);\n+    target = gimple_get_virt_method_for_binfo (token, binfo);\n   else\n     return NULL;\n \n   if (target)\n-    return ipa_make_edge_direct_to_target (ie, target, delta);\n+    return ipa_make_edge_direct_to_target (ie, target);\n   else\n     return NULL;\n }"}, {"sha": "126df48811fc1deadd6f012dcebd5a51deea0220", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -367,8 +367,7 @@ bool ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n \t\t\t\t\tVEC (cgraph_edge_p, heap) **new_edges);\n \n /* Indirect edge and binfo processing.  */\n-struct cgraph_edge *ipa_make_edge_direct_to_target (struct cgraph_edge *, tree,\n-\t\t\t\t\t\t    tree);\n+struct cgraph_edge *ipa_make_edge_direct_to_target (struct cgraph_edge *, tree);\n \n /* Functions related to both.  */\n void ipa_analyze_node (struct cgraph_node *);"}, {"sha": "72d084b50e050be16f0f7d428acf9d968368b535", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -1501,22 +1501,9 @@ input_cgraph (void)\n /* True when we need optimization summary for NODE.  */\n \n static int\n-output_cgraph_opt_summary_p (struct cgraph_node *node, cgraph_node_set set)\n+output_cgraph_opt_summary_p (struct cgraph_node *node,\n+\t\t\t     cgraph_node_set set ATTRIBUTE_UNUSED)\n {\n-  struct cgraph_edge *e;\n-\n-  if (cgraph_node_in_set_p (node, set))\n-    {\n-      for (e = node->callees; e; e = e->next_callee)\n-\tif (e->indirect_info\n-\t    && e->indirect_info->thunk_delta != 0)\n-\t  return true;\n-\n-      for (e = node->indirect_calls; e; e = e->next_callee)\n-\tif (e->indirect_info->thunk_delta != 0)\n-\t  return true;\n-    }\n-\n   return (node->clone_of\n \t  && (node->clone.tree_map\n \t      || node->clone.args_to_skip\n@@ -1525,13 +1512,9 @@ output_cgraph_opt_summary_p (struct cgraph_node *node, cgraph_node_set set)\n \n /* Output optimization summary for EDGE to OB.  */\n static void\n-output_edge_opt_summary (struct output_block *ob,\n-\t\t\t struct cgraph_edge *edge)\n+output_edge_opt_summary (struct output_block *ob ATTRIBUTE_UNUSED,\n+\t\t\t struct cgraph_edge *edge ATTRIBUTE_UNUSED)\n {\n-  if (edge->indirect_info)\n-    streamer_write_hwi (ob, edge->indirect_info->thunk_delta);\n-  else\n-    streamer_write_hwi (ob, 0);\n }\n \n /* Output optimization summary for NODE to OB.  */\n@@ -1631,17 +1614,9 @@ output_cgraph_opt_summary (cgraph_node_set set)\n /* Input optimisation summary of EDGE.  */\n \n static void\n-input_edge_opt_summary (struct cgraph_edge *edge,\n-\t\t\tstruct lto_input_block *ib_main)\n+input_edge_opt_summary (struct cgraph_edge *edge ATTRIBUTE_UNUSED,\n+\t\t\tstruct lto_input_block *ib_main ATTRIBUTE_UNUSED)\n {\n-  HOST_WIDE_INT thunk_delta;\n-  thunk_delta = streamer_read_hwi (ib_main);\n-  if (thunk_delta != 0)\n-    {\n-      gcc_assert (!edge->indirect_info);\n-      edge->indirect_info = cgraph_allocate_init_indirect_info ();\n-      edge->indirect_info->thunk_delta = thunk_delta;\n-    }\n }\n \n /* Input optimisation summary of NODE.  */"}, {"sha": "629176d5206ad19bf9a866dceb839bbb2adf9c64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -1,3 +1,10 @@\n+2011-09-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* g++.dg/ipa/devirt-3.C: Added a distraction method.\n+\t* g++.dg/ipa/ivinline-7.C: Added a test for direct call discovery,\n+\txfailed test for inlining.\n+\t* g++.dg/ipa/ivinline-9.C: Likewise.\n+\n 2011-09-01  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/50178"}, {"sha": "a68eb024fb49e6a7427d1cc116adbf709728ecdd", "filename": "gcc/testsuite/g++.dg/ipa/devirt-3.C", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-3.C?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -9,6 +9,7 @@ class A\n {\n public:\n   int data;\n+  virtual float distraction (float f);\n   virtual int foo (int i);\n };\n \n@@ -24,6 +25,12 @@ public:\n   virtual int foo (int i);\n };\n \n+float A::distraction (float f)\n+{\n+  f += 6.2;\n+  return f/2;\n+}\n+\n int A::foo (int i)\n {\n   return i + 1;"}, {"sha": "2630dffa9da9da678dc96f27548211c0f75baf67", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-7.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -75,5 +75,6 @@ int main (int argc, char *argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"Discovered a virtual call to a known target.*B::.*foo\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  { xfail *-*-* } } } */\n /* { dg-final { cleanup-ipa-dump \"inline\" } } */"}, {"sha": "4ff07a9bbd8aac3bc4426c58d1d90c3017829d6e", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-9.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -89,5 +89,6 @@ int main (int argc, char *argv[])\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"Discovered a virtual call to a known target.*B::.*foo\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  { xfail *-*-* } } } */\n /* { dg-final { cleanup-ipa-dump \"inline\" } } */"}, {"sha": "0a79a249151f7846c67f5b88201fac472f80200c", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -841,7 +841,6 @@ lto_input_ts_binfo_tree_pointers (struct lto_input_block *ib,\n \n   BINFO_OFFSET (expr) = stream_read_tree (ib, data_in);\n   BINFO_VTABLE (expr) = stream_read_tree (ib, data_in);\n-  BINFO_VIRTUALS (expr) = stream_read_tree (ib, data_in);\n   BINFO_VPTR_FIELD (expr) = stream_read_tree (ib, data_in);\n \n   len = streamer_read_uhwi (ib);"}, {"sha": "093b4b3e6f3c451e72e3f70d3572bd87f9f6784e", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -701,11 +701,6 @@ write_ts_binfo_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n \n   stream_write_tree (ob, BINFO_OFFSET (expr), ref_p);\n   stream_write_tree (ob, BINFO_VTABLE (expr), ref_p);\n-  /* BINFO_VIRTUALS is used to drive type based devirtualizatoin.  It often links\n-     together large portions of programs making it harder to partition.  Becuase\n-     devirtualization is interesting before inlining, only, there is no real\n-     need to ship it into ltrans partition.  */\n-  stream_write_tree (ob, flag_wpa ? NULL : BINFO_VIRTUALS (expr), ref_p);\n   stream_write_tree (ob, BINFO_VPTR_FIELD (expr), ref_p);\n \n   streamer_write_uhwi (ob, VEC_length (tree, BINFO_BASE_ACCESSES (expr)));"}, {"sha": "a53c9f432eef43805a00e41da99f18cf169e518c", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fa35bd5991d39abb342bd655fbe8fc7b9b4026/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=81fa35bd5991d39abb342bd655fbe8fc7b9b4026", "patch": "@@ -4397,7 +4397,7 @@ free_lang_data_in_one_sizepos (tree *expr_p)\n \n \n /* Reset all the fields in a binfo node BINFO.  We only keep\n-   BINFO_VIRTUALS, which is used by gimple_fold_obj_type_ref.  */\n+   BINFO_VTABLE, which is used by gimple_fold_obj_type_ref.  */\n \n static void\n free_lang_data_in_binfo (tree binfo)\n@@ -4407,7 +4407,7 @@ free_lang_data_in_binfo (tree binfo)\n \n   gcc_assert (TREE_CODE (binfo) == TREE_BINFO);\n \n-  BINFO_VTABLE (binfo) = NULL_TREE;\n+  BINFO_VIRTUALS (binfo) = NULL_TREE;\n   BINFO_BASE_ACCESSES (binfo) = NULL;\n   BINFO_INHERITANCE_CHAIN (binfo) = NULL_TREE;\n   BINFO_SUBVTT_INDEX (binfo) = NULL_TREE;"}]}