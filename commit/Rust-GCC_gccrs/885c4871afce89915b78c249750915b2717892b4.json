{"sha": "885c4871afce89915b78c249750915b2717892b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1YzQ4NzFhZmNlODk5MTViNzhjMjQ5NzUwOTE1YjI3MTc4OTJiNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-06T19:37:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-06T19:37:25Z"}, "message": "[multiple changes]\n\n2011-10-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* einfo.ads, exp_attr.adb, exp_ch3.adb, exp_ch4.adb, exp_ch7.adb,\n\texp_ch9.adb, exp_ch9.ads, exp_strm.adb, exp_util.adb, freeze.adb,\n\tg-debpoo.ads, opt.ads, par-ch12.adb, par-ch2.adb, par-ch3.adb,\n\tpar-ch5.adb, par-ch6.adb, sem_aggr.adb, sem_attr.adb, sem_cat.adb,\n\tsem_ch10.adb, sem_ch12.adb, sem_ch3.adb, sem_ch4.adb, sem_ch5.adb,\n\tsem_ch6.adb, sem_intr.adb, sem_res.ads, sem_type.adb, sem_util.adb,\n\ts-regpat.adb, s-tpopde-vms.ads: Minor reformatting.\n\t* s-osinte-freebsd.ads: Fix for tasking failures on FreeBSD.\n\n2011-10-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cihase.adb, a-ciorma.adb: Avoid accessibility checks in container\n\treferences.\n\n2011-10-06  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cuprqu.ads, a-cuprqu.adb, a-cbprqu.ads, a-cbprqu.adb\n\t(Dequeue_Only_High_Priority): Protected procedure now implemented.\n\n2011-10-06  Vincent Celier  <celier@adacore.com>\n\n\t* g-trasym.adb: Replace old implementation with the default\n\timplementation that returns list of addresses as \"0x...\".\n\t* g-trasym.ads: Update the list of platforms with the full\n\tcapability.  Indicate that there is a default implementation\n\tfor other platforms.\n\t* g-trasym-unimplemented.ads, g-trasym-unimplemented.adb: Remove.\n\t* gcc-interface/Makefile.in: Remove g-trasym-unimplemented, as there\n\tis now a default implementation for all platforms without the full\n\tcapability.\n\nFrom-SVN: r179631", "tree": {"sha": "59b104cfe45132ceca15a6cc553a14330fa48522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b104cfe45132ceca15a6cc553a14330fa48522"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/885c4871afce89915b78c249750915b2717892b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885c4871afce89915b78c249750915b2717892b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/885c4871afce89915b78c249750915b2717892b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885c4871afce89915b78c249750915b2717892b4/comments", "author": null, "committer": null, "parents": [{"sha": "e12671331b81c8deffc0491e344eb503c0c517c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12671331b81c8deffc0491e344eb503c0c517c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e12671331b81c8deffc0491e344eb503c0c517c8"}], "stats": {"total": 688, "additions": 284, "deletions": 404}, "files": [{"sha": "8c85e00a510f6f8d9b866bd57e4ec3759e2c1213", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -1,3 +1,36 @@\n+2011-10-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* einfo.ads, exp_attr.adb, exp_ch3.adb, exp_ch4.adb, exp_ch7.adb,\n+\texp_ch9.adb, exp_ch9.ads, exp_strm.adb, exp_util.adb, freeze.adb,\n+\tg-debpoo.ads, opt.ads, par-ch12.adb, par-ch2.adb, par-ch3.adb,\n+\tpar-ch5.adb, par-ch6.adb, sem_aggr.adb, sem_attr.adb, sem_cat.adb,\n+\tsem_ch10.adb, sem_ch12.adb, sem_ch3.adb, sem_ch4.adb, sem_ch5.adb,\n+\tsem_ch6.adb, sem_intr.adb, sem_res.ads, sem_type.adb, sem_util.adb,\n+\ts-regpat.adb, s-tpopde-vms.ads: Minor reformatting.\n+\t* s-osinte-freebsd.ads: Fix for tasking failures on FreeBSD.\n+\n+2011-10-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cihase.adb, a-ciorma.adb: Avoid accessibility checks in container\n+\treferences.\n+\n+2011-10-06  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cuprqu.ads, a-cuprqu.adb, a-cbprqu.ads, a-cbprqu.adb\n+\t(Dequeue_Only_High_Priority): Protected procedure now implemented.\n+\n+2011-10-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* g-trasym.adb: Replace old implementation with the default\n+\timplementation that returns list of addresses as \"0x...\".\n+\t* g-trasym.ads: Update the list of platforms with the full\n+\tcapability.  Indicate that there is a default implementation\n+\tfor other platforms.\n+\t* g-trasym-unimplemented.ads, g-trasym-unimplemented.adb: Remove.\n+\t* gcc-interface/Makefile.in: Remove g-trasym-unimplemented, as there\n+\tis now a default implementation for all platforms without the full\n+\tcapability.\n+\n 2011-10-06  Robert Dewar  <dewar@adacore.com>\n \n \t* a-ciorse.adb, a-cihase.adb, a-cihase.ads, a-coorse.adb,"}, {"sha": "e5aff11b36ebb32859a10a64176391ac743f5373", "filename": "gcc/ada/a-cbprqu.adb", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cbprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cbprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbprqu.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -44,6 +44,24 @@ package body Ada.Containers.Bounded_Priority_Queues is\n          List.Container.Delete_First;\n       end Dequeue;\n \n+      procedure Dequeue\n+        (List     : in out List_Type;\n+         At_Least : Queue_Priority;\n+         Element  : in out Queue_Interfaces.Element_Type;\n+         Success  : out Boolean)\n+      is\n+      begin\n+         if List.Length = 0\n+           or else not Before (At_Least, Get_Priority (List.First_Element))\n+         then\n+            Success := False;\n+            return;\n+         end if;\n+\n+         List.Dequeue (Element);\n+         Success := True;\n+      end Dequeue;\n+\n       -------------\n       -- Enqueue --\n       -------------\n@@ -83,6 +101,18 @@ package body Ada.Containers.Bounded_Priority_Queues is\n          end if;\n       end Enqueue;\n \n+      -------------------\n+      -- First_Element --\n+      -------------------\n+\n+      function First_Element\n+        (List : List_Type) return Queue_Interfaces.Element_Type\n+      is\n+      begin\n+         --  Use Constant_Reference for this.  ???\n+         return List.Container.First_Element;\n+      end First_Element;\n+\n       ------------\n       -- Length --\n       ------------\n@@ -125,14 +155,18 @@ package body Ada.Containers.Bounded_Priority_Queues is\n          List.Dequeue (Element);\n       end Dequeue;\n \n-      --  ???\n-      --  entry Dequeue_Only_High_Priority\n-      --    (Low_Priority : Queue_Priority;\n-      --     Element      : out Queue_Interfaces.Element_Type) when True\n-      --  is\n-      --  begin\n-      --     null;\n-      --  end Dequeue_Only_High_Priority;\n+      --------------------------------\n+      -- Dequeue_Only_High_Priority --\n+      --------------------------------\n+\n+      procedure Dequeue_Only_High_Priority\n+        (At_Least : Queue_Priority;\n+         Element  : in out Queue_Interfaces.Element_Type;\n+         Success  : out Boolean)\n+      is\n+      begin\n+         List.Dequeue (At_Least, Element, Success);\n+      end Dequeue_Only_High_Priority;\n \n       --------------\n       --  Enqueue --"}, {"sha": "0d0f16891911eb4d60b5e0ba06fcd800335aba9a", "filename": "gcc/ada/a-cbprqu.ads", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cbprqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cbprqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbprqu.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -70,6 +70,15 @@ package Ada.Containers.Bounded_Priority_Queues is\n         (List    : in out List_Type;\n          Element : out Queue_Interfaces.Element_Type);\n \n+      procedure Dequeue\n+        (List     : in out List_Type;\n+         At_Least : Queue_Priority;\n+         Element  : in out Queue_Interfaces.Element_Type;\n+         Success  : out Boolean);\n+\n+      function First_Element\n+        (List : List_Type) return Queue_Interfaces.Element_Type;\n+\n       function Length (List : List_Type) return Count_Type;\n \n       function Max_Length (List : List_Type) return Count_Type;\n@@ -102,11 +111,18 @@ package Ada.Containers.Bounded_Priority_Queues is\n       overriding\n       entry Dequeue (Element : out Queue_Interfaces.Element_Type);\n \n-      --  ???\n-      --  not overriding\n-      --  entry Dequeue_Only_High_Priority\n-      --    (Low_Priority : Queue_Priority;\n-      --     Element      : out Queue_Interfaces.Element_Type);\n+      --  The priority queue operation Dequeue_Only_High_Priority had been a\n+      --  protected entry in early drafts of AI05-0159, but it was discovered\n+      --  that that operation as specified was not in fact implementable. The\n+      --  operation was changed from an entry to a protected procedure per the\n+      --  ARG meeting in Edinburgh (June 2011), with a different signature and\n+      --  semantics.\n+\n+      not overriding\n+      procedure Dequeue_Only_High_Priority\n+        (At_Least : Queue_Priority;\n+         Element  : in out Queue_Interfaces.Element_Type;\n+         Success  : out Boolean);\n \n       overriding\n       function Current_Use return Count_Type;\n@@ -115,6 +131,7 @@ package Ada.Containers.Bounded_Priority_Queues is\n       function Peak_Use return Count_Type;\n \n    private\n+\n       List : Implementation.List_Type (Capacity);\n \n    end Queue;"}, {"sha": "e52f38bba9f89542d7e607e147a7a4b221f39cb5", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -1169,7 +1169,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n    is\n       pragma Unreferenced (Container);\n    begin\n-      return (Element => Position.Node.Element);\n+      return (Element => Position.Node.Element.all'Access);\n    end Constant_Reference;\n \n    -------------\n@@ -2072,7 +2072,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       is\n          pragma Unreferenced (Container);\n       begin\n-         return (Element => Position.Node.Element);\n+         return (Element => Position.Node.Element.all'Access);\n       end Reference_Preserving_Key;\n \n       function Reference_Preserving_Key\n@@ -2081,7 +2081,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       is\n          Position : constant Cursor := Find (Container, Key);\n       begin\n-         return (Element => Position.Node.Element);\n+         return (Element => Position.Node.Element.all'Access);\n       end Reference_Preserving_Key;\n \n    end Generic_Keys;"}, {"sha": "0947654a64cf672d142e579283918baba9479981", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -36,6 +36,7 @@ with Ada.Containers.Red_Black_Trees.Generic_Keys;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n \n package body Ada.Containers.Indefinite_Ordered_Maps is\n+   pragma Suppress (All_Checks);\n \n    type Iterator is new\n      Map_Iterator_Interfaces.Reversible_Iterator with record\n@@ -325,8 +326,9 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n      (Container : Map;\n       Key       : Key_Type) return Constant_Reference_Type\n    is\n+      Node : aliased Element_Type := Element (Container, Key);\n    begin\n-      return (Element => Container.Element (Key)'Unrestricted_Access);\n+      return (Element => Node'Access);\n    end Constant_Reference;\n \n    --------------\n@@ -1149,8 +1151,10 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       Key       : Key_Type)\n       return Reference_Type\n    is\n+      Node : aliased Element_Type := Element (Container, Key);\n+\n    begin\n-      return (Element => Container.Element (Key)'Unrestricted_Access);\n+      return (Element => Node'Access);\n    end Reference;\n \n    -------------"}, {"sha": "385aa5ce7d2d37ce418175e552e205db0328c14c", "filename": "gcc/ada/a-cuprqu.adb", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cuprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cuprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -65,6 +65,24 @@ package body Ada.Containers.Unbounded_Priority_Queues is\n          Free (X);\n       end Dequeue;\n \n+      procedure Dequeue\n+        (List     : in out List_Type;\n+         At_Least : Queue_Priority;\n+         Element  : in out Queue_Interfaces.Element_Type;\n+         Success  : out Boolean)\n+      is\n+      begin\n+         if List.Length = 0\n+           or else not Before (At_Least, Get_Priority (List.First.Element))\n+         then\n+            Success := False;\n+            return;\n+         end if;\n+\n+         List.Dequeue (Element);\n+         Success := True;\n+      end Dequeue;\n+\n       -------------\n       -- Enqueue --\n       -------------\n@@ -132,22 +150,6 @@ package body Ada.Containers.Unbounded_Priority_Queues is\n          end loop;\n       end Finalize;\n \n-      ------------------------\n-      -- Have_High_Priority --\n-      ------------------------\n-\n-      --  ???\n-      --  function Have_High_Priority\n-      --    (List         : List_Type;\n-      --     Low_Priority : Queue_Priority) return Boolean\n-      --  is\n-      --  begin\n-      --     if List.Length = 0 then\n-      --        return False;\n-      --     end if;\n-      --     return Before (Get_Priority (List.First.Element), Low_Priority);\n-      --  end Have_High_Priority;\n-\n       ------------\n       -- Length --\n       ------------\n@@ -190,14 +192,18 @@ package body Ada.Containers.Unbounded_Priority_Queues is\n          List.Dequeue (Element);\n       end Dequeue;\n \n-      --  ???\n-      --  entry Dequeue_Only_High_Priority\n-      --    (Low_Priority : Queue_Priority;\n-      --     Element      : out Queue_Interfaces.Element_Type) when True\n-      --  is\n-      --  begin\n-      --     null;\n-      --  end Dequeue_Only_High_Priority;\n+      --------------------------------\n+      -- Dequeue_Only_High_Priority --\n+      --------------------------------\n+\n+      procedure Dequeue_Only_High_Priority\n+        (At_Least : Queue_Priority;\n+         Element  : in out Queue_Interfaces.Element_Type;\n+         Success  : out Boolean)\n+      is\n+      begin\n+         List.Dequeue (At_Least, Element, Success);\n+      end Dequeue_Only_High_Priority;\n \n       -------------\n       -- Enqueue --"}, {"sha": "33db4a281f37a4c1911eb3b37a2c400b813e9f71", "filename": "gcc/ada/a-cuprqu.ads", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cuprqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fa-cuprqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -68,6 +68,12 @@ package Ada.Containers.Unbounded_Priority_Queues is\n         (List    : in out List_Type;\n          Element : out Queue_Interfaces.Element_Type);\n \n+      procedure Dequeue\n+        (List     : in out List_Type;\n+         At_Least : Queue_Priority;\n+         Element  : in out Queue_Interfaces.Element_Type;\n+         Success  : out Boolean);\n+\n       function Length (List : List_Type) return Count_Type;\n \n       function Max_Length (List : List_Type) return Count_Type;\n@@ -91,36 +97,37 @@ package Ada.Containers.Unbounded_Priority_Queues is\n       overriding\n       procedure Finalize (List : in out List_Type);\n \n-      --  ???\n-      --  not overriding\n-      --  function Have_High_Priority\n-      --    (List         : List_Type;\n-      --     Low_Priority : Queue_Priority) return Boolean;\n-\n    end Implementation;\n \n    protected type Queue (Ceiling : System.Any_Priority := Default_Ceiling)\n-     --  ???\n-     --  with Priority => Ceiling is new Queue_Interfaces.Queue with\n-     is new Queue_Interfaces.Queue with\n+      --  ???\n+      --  with Priority => Ceiling is new Queue_Interfaces.Queue with\n+      is new Queue_Interfaces.Queue with\n \n-     overriding\n-     entry Enqueue (New_Item : Queue_Interfaces.Element_Type);\n+      overriding\n+      entry Enqueue (New_Item : Queue_Interfaces.Element_Type);\n \n-     overriding\n-     entry Dequeue (Element : out Queue_Interfaces.Element_Type);\n+      overriding\n+      entry Dequeue (Element : out Queue_Interfaces.Element_Type);\n \n-     --  ???\n-     --  not overriding\n-     --  entry Dequeue_Only_High_Priority\n-     --    (Low_Priority : Queue_Priority;\n-     --     Element      : out Queue_Interfaces.Element_Type);\n+      --  The priority queue operation Dequeue_Only_High_Priority had been a\n+      --  protected entry in early drafts of AI05-0159, but it was discovered\n+      --  that that operation as specified was not in fact implementable. The\n+      --  operation was changed from an entry to a protected procedure per the\n+      --  ARG meeting in Edinburgh (June 2011), with a different signature and\n+      --  semantics.\n \n-     overriding\n-     function Current_Use return Count_Type;\n+      not overriding\n+      procedure Dequeue_Only_High_Priority\n+        (At_Least : Queue_Priority;\n+         Element  : in out Queue_Interfaces.Element_Type;\n+         Success  : out Boolean);\n \n-     overriding\n-     function Peak_Use return Count_Type;\n+      overriding\n+      function Current_Use return Count_Type;\n+\n+      overriding\n+      function Peak_Use return Count_Type;\n \n    private\n "}, {"sha": "019f2f37133e906e7bd52699dbd60322cf80b1e8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -2475,11 +2475,11 @@ package Einfo is\n --    Is_Local_Anonymous_Access (Flag194)\n --       Present in access types. Set for an anonymous access type to indicate\n --       that the type is created for a record component with an access\n---       definition, an array component, or (pre-Ada2012) a stand-alone object.\n+--       definition, an array component, or (pre-Ada 2012) a standalone object.\n --       Such anonymous types have an accessibility level equal to that of the\n --       declaration in which they appear, unlike the anonymous access types\n --       that are created for access parameters, access discriminants, and\n---       (as of Ada2012) stand-alone objects.\n+--       (as of Ada 2012) stand-alone objects.\n \n --    Is_Machine_Code_Subprogram (Flag137)\n --       Present in subprogram entities. Set to indicate that the subprogram"}, {"sha": "db8f6a30d5d88e515e6957163a9a5f13e5f37b32", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -678,7 +678,7 @@ package body Exp_Attr is\n \n       case Id is\n \n-         --  Attributes related to Ada2012 iterators (placeholder ???)\n+         --  Attributes related to Ada 2012 iterators (placeholder ???)\n \n          when Attribute_Constant_Indexing    => null;\n          when Attribute_Default_Iterator     => null;"}, {"sha": "ef769758e57e8a0a74b6d873e4f19a769a263ed1", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -6289,7 +6289,7 @@ package body Exp_Ch3 is\n             end if;\n          end if;\n \n-      --  In the non-tagged case, ever since Ada83 an equality function must\n+      --  In the non-tagged case, ever since Ada 83 an equality function must\n       --  be  provided for variant records that are not unchecked unions.\n       --  In Ada 2012 the equality function composes, and thus must be built\n       --  explicitly just as for tagged records."}, {"sha": "677eec74dd5c45c6db820e53a723637843b505f3", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -765,7 +765,7 @@ package body Exp_Ch4 is\n    --  Start of processing for Expand_Allocator_Expression\n \n    begin\n-      --  In the case of an Ada2012 allocator whose initial value comes from a\n+      --  In the case of an Ada 2012 allocator whose initial value comes from a\n       --  function call, pass \"the accessibility level determined by the point\n       --  of call\" (AI05-0234) to the function. Conceptually, this belongs in\n       --  Expand_Call but it couldn't be done there (because the Etype of the"}, {"sha": "27b1cd764e0da08c7ec9c34c8333ad632dcb5989", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -3842,7 +3842,7 @@ package body Exp_Ch7 is\n    ----------------------------------\n \n    --  Add call to Activate_Tasks if there are tasks declared and the package\n-   --  has no body. Note that in Ada83, this may result in premature activation\n+   --  has no body. Note that in Ada 83 this may result in premature activation\n    --  of some tasks, given that we cannot tell whether a body will eventually\n    --  appear.\n "}, {"sha": "433ee6b3a74a09f256df4a8cfbf54f3b509f0eac", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -178,7 +178,7 @@ package body Exp_Ch9 is\n    --  body or an accept body. The renamed object is a component of the\n    --  parameter block that is a parameter in the entry call.\n \n-   --  In Ada2012,  If the formal is an incomplete tagged type, the renaming\n+   --  In Ada 2012, if the formal is an incomplete tagged type, the renaming\n    --  does not dereference the corresponding component to prevent an illegal\n    --  use of the incomplete type (AI05-0151).\n \n@@ -11857,7 +11857,7 @@ package body Exp_Ch9 is\n       S : Entity_Id;\n \n    begin\n-      --  In Ada2005, the master is the innermost enclosing scope that is not\n+      --  In Ada 2005, the master is the innermost enclosing scope that is not\n       --  transient. If the enclosing block is the rewriting of a call or the\n       --  scope is an extended return statement this is valid master. The\n       --  master in an extended return is only used within the return, and is"}, {"sha": "ea2fb8e79162094d632551cd5c9e44164ae223c2", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -266,7 +266,7 @@ package Exp_Ch9 is\n    function Find_Master_Scope (E : Entity_Id) return Entity_Id;\n    --  When a type includes tasks, a master entity is created in the scope, to\n    --  be used by the runtime during activation. In general the master is the\n-   --  immediate scope in which the type is declared, but in Ada2005, in the\n+   --  immediate scope in which the type is declared, but in Ada 2005, in the\n    --  presence of synchronized classwide interfaces, the immediate scope of\n    --  an anonymous access type may be a transient scope, which has no run-time\n    --  presence. In this case, the scope of the master is the innermost scope"}, {"sha": "987556a84adbc4607960dc88e5e99255acc7e1ee", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -1592,7 +1592,7 @@ package body Exp_Strm is\n \n    begin\n       --  (Ada 2005: AI-441): Set the null-excluding attribute because it has\n-      --  no semantic meaning in Ada 95 but it is a requirement in Ada2005.\n+      --  no semantic meaning in Ada 95 but it is a requirement in Ada 2005.\n \n       Profile := New_List (\n         Make_Parameter_Specification (Loc,\n@@ -1632,7 +1632,7 @@ package body Exp_Strm is\n       --  Construct function specification\n \n       --  (Ada 2005: AI-441): Set the null-excluding attribute because it has\n-      --  no semantic meaning in Ada 95 but it is a requirement in Ada2005.\n+      --  no semantic meaning in Ada 95 but it is a requirement in Ada 2005.\n \n       Spec :=\n         Make_Function_Specification (Loc,\n@@ -1676,7 +1676,7 @@ package body Exp_Strm is\n       --  Construct procedure specification\n \n       --  (Ada 2005: AI-441): Set the null-excluding attribute because it has\n-      --  no semantic meaning in Ada 95 but it is a requirement in Ada2005.\n+      --  no semantic meaning in Ada 95 but it is a requirement in Ada 2005.\n \n       Spec :=\n         Make_Procedure_Specification (Loc,"}, {"sha": "dd58b017d240424687805edff8ff8dc5c76108ea", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -1921,11 +1921,11 @@ package body Exp_Util is\n       then\n          null;\n \n-      --  In Ada95 nothing to be done if the type of the expression is limited,\n+      --  In Ada 95 nothing to be done if the type of the expression is limited\n       --  because in this case the expression cannot be copied, and its use can\n       --  only be by reference.\n \n-      --  In Ada2005, the context can be an object declaration whose expression\n+      --  In Ada 2005 the context can be an object declaration whose expression\n       --  is a function that returns in place. If the nominal subtype has\n       --  unknown discriminants, the call still provides constraints on the\n       --  object, and we have to create an actual subtype from it."}, {"sha": "7d1dc1fc212c569f0b7ca455f1bc68aa86af9466", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -1616,9 +1616,9 @@ package body Freeze is\n       --  Start of processing for Check_Current_Instance\n \n       begin\n-         --  In Ada95, the (imprecise) rule is that the current instance of a\n-         --  limited type is aliased. In Ada2005, limitedness must be explicit:\n-         --  either a tagged type, or a limited record.\n+         --  In Ada 95, the (imprecise) rule is that the current instance of a\n+         --  limited type is aliased. In Ada 2005, limitedness must be\n+         --  explicit: either a tagged type, or a limited record.\n \n          if Is_Limited_Type (Rec_Type)\n            and then (Ada_Version < Ada_2005 or else Is_Tagged_Type (Rec_Type))"}, {"sha": "e87c0e4b18d9cda89d20b7fdc22b42ad01f9e419", "filename": "gcc/ada/g-debpoo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fg-debpoo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fg-debpoo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This packages provides a special implementation of the Ada95 storage pools\n+--  This packages provides a special implementation of the Ada 95 storage pools\n \n --  The goal of this debug pool is to detect incorrect uses of memory\n --  (multiple deallocations, access to invalid memory,...). Errors are reported"}, {"sha": "f020fff497ac736869972b89c60aaf1b653c7471", "filename": "gcc/ada/g-trasym-unimplemented.adb", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fada%2Fg-trasym-unimplemented.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fada%2Fg-trasym-unimplemented.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym-unimplemented.adb?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -1,70 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---             G N A T . T R A C E B A C K . S Y M B O L I C                --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Version used on unimplemented targets\n-\n---  Run-time symbolic traceback is currently supported on the following\n---  targets:\n-\n---     HP-UX\n---     IRIX\n---     GNU/Linux x86\n---     AIX\n---     Solaris sparc\n---     Tru64\n---     OpenVMS/Alpha\n---     Windows NT/XP/Vista\n-\n---  This version is used on all other targets, it generates a warning at\n---  compile time if it is with'ed, and the bodies generate messages saying\n---  that the functions are not implemented.\n-\n-package body GNAT.Traceback.Symbolic is\n-\n-   ------------------------\n-   -- Symbolic_Traceback --\n-   ------------------------\n-\n-   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String\n-   is\n-      pragma Unreferenced (Traceback);\n-   begin\n-      return \"Symbolic_Traceback not implemented on this target\";\n-   end Symbolic_Traceback;\n-\n-   function Symbolic_Traceback (E : Exception_Occurrence) return String\n-   is\n-      pragma Unreferenced (E);\n-   begin\n-      return \"Symbolic_Traceback not implemented on this target\";\n-   end Symbolic_Traceback;\n-\n-end GNAT.Traceback.Symbolic;"}, {"sha": "8d1f2eeb72524cc74666be6afb77437ed9101bba", "filename": "gcc/ada/g-trasym-unimplemented.ads", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fada%2Fg-trasym-unimplemented.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fada%2Fg-trasym-unimplemented.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym-unimplemented.ads?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -1,64 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---             G N A T . T R A C E B A C K . S Y M B O L I C                --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Version used on unimplemented targets\n-\n---  Run-time symbolic traceback is currently supported on the following\n---  targets:\n-\n---     HP-UX hppa and ia64\n---     IRIX\n---     GNU/Linux x86, x86_64, ia64\n---     AIX\n---     Solaris sparc and x86\n---     Tru64\n---     OpenVMS/Alpha\n---     Windows NT/XP/Vista\n-\n---  This version is used on all other targets, it generates a warning at\n---  compile time if it is with'ed, and the bodies generate messages saying\n---  that the functions are not implemented.\n-\n-with Ada.Exceptions; use Ada.Exceptions;\n-\n-package GNAT.Traceback.Symbolic is\n-   pragma Elaborate_Body;\n-\n---     pragma Compile_Time_Warning\n---       (True, \"symbolic traceback not implemented on this target\");\n-\n-   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String;\n-   --  Build a string containing a symbolic traceback of the given call chain\n-\n-   function Symbolic_Traceback (E : Exception_Occurrence) return String;\n-   --  Build string containing symbolic traceback of given exception occurrence\n-\n-end GNAT.Traceback.Symbolic;"}, {"sha": "12793c870c444b0b7d89868aaabdd7fe2020e7d7", "filename": "gcc/ada/g-trasym.adb", "status": "modified", "additions": 25, "deletions": 100, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fg-trasym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fg-trasym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n+--                     Copyright (C) 1999-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,122 +29,47 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Run-time symbolic traceback support\n+--  This is the default implementation for platforms where the full capability\n+--  is not supported. It returns tracebacks as lists of \"0x...\" strings\n+--  corresponding to the addresses.\n \n-with System.Soft_Links;\n with Ada.Exceptions.Traceback; use Ada.Exceptions.Traceback;\n+with System.Address_Image;\n \n package body GNAT.Traceback.Symbolic is\n \n-   pragma Linker_Options (\"-laddr2line\");\n-   pragma Linker_Options (\"-lbfd\");\n-   pragma Linker_Options (\"-liberty\");\n-\n-   package TSL renames System.Soft_Links;\n-\n-   --  To perform the raw addresses to symbolic form translation we rely on a\n-   --  libaddr2line symbolizer which examines debug info from a provided\n-   --  executable file name, and an absolute path is needed to ensure the file\n-   --  is always found. This is \"__gnat_locate_exec_on_path (gnat_argv [0])\"\n-   --  for our executable file, a fairly heavy operation so we cache the\n-   --  result.\n-\n-   Exename : System.Address;\n-   --  Pointer to the name of the executable file to be used on all\n-   --  invocations of the libaddr2line symbolization service.\n-\n-   Exename_Resolved : Boolean := False;\n-   --  Flag to indicate whether we have performed the executable file name\n-   --  resolution already. Relying on a not null Exename for this purpose\n-   --  would be potentially inefficient as this is what we will get if the\n-   --  resolution attempt fails.\n-\n    ------------------------\n    -- Symbolic_Traceback --\n    ------------------------\n \n-   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String is\n-\n-      procedure convert_addresses\n-        (filename : System.Address;\n-         addrs    : System.Address;\n-         n_addrs  : Integer;\n-         buf      : System.Address;\n-         len      : System.Address);\n-      pragma Import (C, convert_addresses, \"convert_addresses\");\n-      --  This is the procedure version of the Ada-aware addr2line. It places\n-      --  in BUF a string representing the symbolic translation of the N_ADDRS\n-      --  raw addresses provided in ADDRS, looked up in debug information from\n-      --  FILENAME. LEN points to an integer which contains the size of the\n-      --  BUF buffer at input and the result length at output.\n-      --\n-      --  This procedure is provided by libaddr2line on targets that support\n-      --  it. A dummy version is in adaint.c for other targets so that build\n-      --  of shared libraries doesn't generate unresolved symbols.\n-      --\n-      --  Note that this procedure is *not* thread-safe.\n-\n-      type Argv_Array is array (0 .. 0) of System.Address;\n-      gnat_argv : access Argv_Array;\n-      pragma Import (C, gnat_argv, \"gnat_argv\");\n-\n-      function locate_exec_on_path\n-        (c_exename : System.Address) return System.Address;\n-      pragma Import (C, locate_exec_on_path, \"__gnat_locate_exec_on_path\");\n-\n-      Res : String (1 .. 256 * Traceback'Length);\n-      Len : Integer;\n-\n-      use type System.Address;\n-\n+   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String\n+   is\n    begin\n-      --  The symbolic translation of an empty set of addresses is an empty\n-      --  string.\n-\n       if Traceback'Length = 0 then\n          return \"\";\n-      end if;\n \n-      --  If our input set of raw addresses is not empty, resort to the\n-      --  libaddr2line service to symbolize it all.\n-\n-      --  Compute, cache and provide the absolute path to our executable file\n-      --  name as the binary file where the relevant debug information is to be\n-      --  found. If the executable file name resolution fails, we have no\n-      --  sensible basis to invoke the symbolizer at all.\n-\n-      --  Protect all this against concurrent accesses explicitly, as the\n-      --  underlying services are potentially thread unsafe.\n-\n-      TSL.Lock_Task.all;\n-\n-      if not Exename_Resolved then\n-         Exename := locate_exec_on_path (gnat_argv (0));\n-         Exename_Resolved := True;\n-      end if;\n-\n-      if Exename /= System.Null_Address then\n-         Len := Res'Length;\n-         convert_addresses\n-           (Exename, Traceback'Address, Traceback'Length,\n-            Res (1)'Address, Len'Address);\n-      end if;\n-\n-      TSL.Unlock_Task.all;\n-\n-      --  Return what the addr2line symbolizer has produced if we have called\n-      --  it (the executable name resolution succeeded), or an empty string\n-      --  otherwise.\n-\n-      if Exename /= System.Null_Address then\n-         return Res (1 .. Len);\n       else\n-         return \"\";\n+         declare\n+            Img : String := System.Address_Image (Traceback (Traceback'First));\n+            Result : String (1 .. (Img'Length + 3) * Traceback'Length);\n+            Last   : Natural := 0;\n+         begin\n+            for J in Traceback'Range loop\n+               Img := System.Address_Image (Traceback (J));\n+               Result (Last + 1 .. Last + 2) := \"0x\";\n+               Last := Last + 2;\n+               Result (Last + 1 .. Last + Img'Length) := Img;\n+               Last := Last + Img'Length + 1;\n+               Result (Last) := ASCII.LF;\n+            end loop;\n+\n+            return Result (1 .. Last);\n+         end;\n       end if;\n-\n    end Symbolic_Traceback;\n \n-   function Symbolic_Traceback (E : Exception_Occurrence) return String is\n+   function Symbolic_Traceback (E : Exception_Occurrence) return String\n+   is\n    begin\n       return Symbolic_Traceback (Tracebacks (E));\n    end Symbolic_Traceback;"}, {"sha": "679d236e5f82fb534327e8504cec683187aafe1a", "filename": "gcc/ada/g-trasym.ads", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fg-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fg-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n+--                     Copyright (C) 1999-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,16 +31,16 @@\n \n --  Run-time symbolic traceback support\n \n---  This capability is currently supported on the following targets:\n+--  The full capability is currently supported on the following targets:\n \n---     HP-UX hppa and ia64\n+--     HP-UX ia64\n --     IRIX\n --     GNU/Linux x86, x86_64, ia64\n---     AIX\n+--     FreeBSD x86, x86_64\n --     Solaris sparc and x86\n --     Tru64\n---     OpenVMS/Alpha\n---     Windows NT/XP/Vista\n+--     OpenVMS Alpha and ia64\n+--     Windows\n \n --  The routines provided in this package assume that your application has\n --  been compiled with debugging information turned on, since this information\n@@ -77,6 +77,10 @@\n --  libraries. However, the OS should be at least v7.3-1 and OS patch\n --  VMS731_TRACE-V0100 must be applied in order to use this package.\n \n+--  On platforms where the full capability is not supported, function\n+--  Symbolic_Traceback return a list of addresses expressed as \"0x...\"\n+--  separated by line feed.\n+\n with Ada.Exceptions; use Ada.Exceptions;\n \n package GNAT.Traceback.Symbolic is"}, {"sha": "71bd5ea7993fc5607850d26f60c5b9ffb0261a81", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -469,8 +469,6 @@ ifeq ($(strip $(filter-out m68k% wrs vx%,$(targ))),)\n   g-socthi.ads<g-socthi-vxworks.ads \\\n   g-socthi.adb<g-socthi-vxworks.adb \\\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-m68k.ads\n \n   TOOLS_TARGET_PAIRS=mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb\n@@ -512,8 +510,6 @@ ifeq ($(strip $(filter-out e500% powerpc% wrs vxworks,$(targ))),)\n   g-socthi.ads<g-socthi-vxworks.ads \\\n   g-socthi.adb<g-socthi-vxworks.adb \\\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n@@ -613,8 +609,6 @@ ifeq ($(strip $(filter-out powerpc% e500v2 wrs vxworksae,$(targ))),)\n   s-vxwext.adb<s-vxwext-noints.adb \\\n   s-vxwext.ads<s-vxwext-vthreads.ads \\\n   s-vxwork.ads<s-vxwork-ppc.ads \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-ppc-vthread.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(ATOMICS_BUILTINS_TARGET_PAIRS)\n@@ -676,8 +670,6 @@ ifeq ($(strip $(filter-out e500% powerpc% wrs vxworksmils,$(targ))),)\n   s-thread.adb<s-thread-ae653.adb \\\n   s-tpopsp.adb<s-tpopsp-vxworks.adb \\\n   s-vxwork.ads<s-vxwork-ppc.ads \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-ppc.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n@@ -728,8 +720,6 @@ ifeq ($(strip $(filter-out %86 wrs vxworksae vxworksmils,$(targ))),)\n   s-vxwext.adb<s-vxwext-noints.adb \\\n   s-vxwext.ads<s-vxwext-vthreads.ads \\\n   s-vxwork.ads<s-vxwork-x86.ads \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(X86_TARGET_PAIRS) \\\n   system.ads<system-vxworks-x86.ads\n@@ -789,8 +779,6 @@ ifeq ($(strip $(filter-out sparc% wrs vx%,$(targ))),)\n   g-socthi.ads<g-socthi-vxworks.ads \\\n   g-socthi.adb<g-socthi-vxworks.adb \\\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-sparcv9.ads   \\\n \n   TOOLS_TARGET_PAIRS=\\\n@@ -825,8 +813,6 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(targ))),)\n   g-socthi.ads<g-socthi-vxworks.ads \\\n   g-socthi.adb<g-socthi-vxworks.adb \\\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(X86_TARGET_PAIRS)\n \n@@ -922,8 +908,6 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(targ))),)\n   g-socthi.ads<g-socthi-vxworks.ads \\\n   g-socthi.adb<g-socthi-vxworks.adb \\\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-arm.ads\n \n   TOOLS_TARGET_PAIRS=\\\n@@ -960,8 +944,6 @@ ifeq ($(strip $(filter-out mips% wrs vx%,$(targ))),)\n   g-socthi.ads<g-socthi-vxworks.ads \\\n   g-socthi.adb<g-socthi-vxworks.adb \\\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-vxworks-mips.ads\n \n   TOOLS_TARGET_PAIRS=\\\n@@ -1271,9 +1253,7 @@ ifeq ($(strip $(filter-out s390% linux%,$(arch) $(osys))),)\n   s-tasinf.ads<s-tasinf-linux.ads \\\n   s-tasinf.adb<s-tasinf-linux.adb \\\n   s-taspri.ads<s-taspri-posix-noaltstack.ads \\\n-  s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb\n+  s-tpopsp.adb<s-tpopsp-posix-foreign.adb\n \n   LIBGNAT_TARGET_PAIRS_32 = \\\n   system.ads<system-linux-s390.ads\n@@ -1447,9 +1427,7 @@ ifeq ($(strip $(filter-out rtems%,$(osys))),)\n   s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-rtems.adb \\\n   s-stchop.adb<s-stchop-rtems.adb \\\n-  s-interr.adb<s-interr-hwint.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb\n+  s-interr.adb<s-interr-hwint.adb\n endif\n \n ifeq ($(strip $(filter-out alpha% dec osf%,$(targ))),)\n@@ -1914,8 +1892,6 @@ ifeq ($(strip $(filter-out sparc% linux%,$(arch) $(osys))),)\n   s-tpopsp.adb<s-tpopsp-tls.adb\n \n   LIBGNAT_TARGET_PAIRS_32 = \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-linux-sparc.ads\n \n   LIBGNAT_TARGET_PAIRS_64 = \\\n@@ -1955,8 +1931,6 @@ ifeq ($(strip $(filter-out hppa% linux%,$(arch) $(osys))),)\n   s-tasinf.adb<s-tasinf-linux.adb \\\n   s-taspri.ads<s-taspri-posix-noaltstack.ads \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-linux-hppa.ads\n \n   TOOLS_TARGET_PAIRS =  \\\n@@ -2079,8 +2053,6 @@ ifeq ($(strip $(filter-out alpha% linux%,$(arch) $(osys))),)\n   s-tasinf.adb<s-tasinf-linux.adb \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   s-taspri.ads<s-taspri-posix-noaltstack.ads \\\n-  g-trasym.ads<g-trasym-unimplemented.ads \\\n-  g-trasym.adb<g-trasym-unimplemented.adb \\\n   system.ads<system-linux-alpha.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(ATOMICS_BUILTINS_TARGET_PAIRS)\n@@ -2144,9 +2116,7 @@ ifeq ($(strip $(filter-out darwin%,$(osys))),)\n     s-osinte.ads<s-osinte-darwin.ads \\\n     s-taprop.adb<s-taprop-posix.adb \\\n     s-taspri.ads<s-taspri-posix.ads \\\n-    s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n-    g-trasym.ads<g-trasym-unimplemented.ads \\\n-    g-trasym.adb<g-trasym-unimplemented.adb\n+    s-tpopsp.adb<s-tpopsp-posix-foreign.adb\n   \n   ifeq ($(strip $(filter-out %86,$(arch))),)\n     LIBGNAT_TARGET_PAIRS += \\"}, {"sha": "ed940d43c195014ab3432d4f421aec6314e4dc6c", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -1638,11 +1638,11 @@ package Opt is\n    --  GNAT\n    --  This is the value of the configuration switch for the Ada 83 mode, as\n    --  set by the command line switches -gnat83/95/05, and possibly modified by\n-   --  the use of configuration pragmas Ada_83/Ada95/Ada05. This switch is used\n-   --  to set the initial value for Ada_Version mode at the start of analysis\n-   --  of a unit. Note however, that the setting of this flag is ignored for\n-   --  internal and predefined units (which are always compiled in the most up\n-   --  to date version of Ada).\n+   --  the use of configuration pragmas Ada_*. This switch is used to set the\n+   --  initial value for Ada_Version mode at the start of analysis of a unit.\n+   --  Note however that the setting of this flag is ignored for internal and\n+   --  predefined units (which are always compiled in the most up to date\n+   --  version of Ada).\n \n    Ada_Version_Explicit_Config : Ada_Version_Type;\n    --  GNAT"}, {"sha": "06261bc60b31eabd0bf4006b70de0e0fdee622cd", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -336,7 +336,7 @@ package body Ch12 is\n    begin\n       Generic_Assoc_Node := New_Node (N_Generic_Association, Token_Ptr);\n \n-      --  Ada2005: an association can be given by: others => <>\n+      --  Ada 2005: an association can be given by: others => <>\n \n       if Token = Tok_Others then\n          if Ada_Version < Ada_2005 then"}, {"sha": "02914422c2cf7a77ef0f95b07d1ac766609caad2", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -59,10 +59,14 @@ package body Ch2 is\n    begin\n       --  All set if we do indeed have an identifier\n \n+      --  Code duplication, see Par_Ch3.P_Defining_Identifier???\n+\n       if Token = Tok_Identifier then\n \n-         --  Ada 2005 (AI-284): Compiling in Ada95 mode we warn that INTERFACE,\n-         --  OVERRIDING, and SYNCHRONIZED are new reserved words.\n+         --  Shouldn't the warnings below be emitted when in Ada 83 mode???\n+\n+         --  Ada 2005 (AI-284): If compiling in Ada 95 mode, we warn that\n+         --  INTERFACE, OVERRIDING, and SYNCHRONIZED are new reserved words.\n \n          if Ada_Version = Ada_95\n            and then Warn_On_Ada_2005_Compatibility"}, {"sha": "c05a5b65b49cbfa7c070a8b7fafbc4222069c286", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -210,12 +210,19 @@ package body Ch3 is\n       --  we set Force_Msg to True, since we want at least one message for each\n       --  separate declaration (but not use) of a reserved identifier.\n \n+      --  Duplication should be removed, common code should be factored???\n+\n       if Token = Tok_Identifier then\n \n-         --  Ada 2005 (AI-284): Compiling in Ada95 mode we warn that INTERFACE,\n-         --  OVERRIDING, and SYNCHRONIZED are new reserved words. Note that\n-         --  in the case where these keywords are misused in Ada 95 mode,\n-         --  this routine will generally not be called at all.\n+         --  Shouldn't the warnings below be emitted when in Ada 83 mode???\n+\n+         --  Ada 2005 (AI-284): If compiling in Ada 95 mode, we warn that\n+         --  INTERFACE, OVERRIDING, and SYNCHRONIZED are new reserved words.\n+         --  Note that in the case where these keywords are misused in Ada 95\n+         --  mode, this routine will generally not be called at all.\n+\n+         --  What sort of misuse is this comment talking about??? These are\n+         --  perfectly legitimate defining identifiers in Ada 95???\n \n          if Ada_Version = Ada_95\n            and then Warn_On_Ada_2005_Compatibility\n@@ -657,7 +664,7 @@ package body Ch3 is\n                      Error_Msg_SP\n                        (\"(Ada 83) limited record declaration not allowed!\");\n \n-                  --  In Ada2005, \"abstract limited\" can appear before \"new\",\n+                  --  In Ada 2005, \"abstract limited\" can appear before \"new\",\n                   --  but it cannot be part of an untagged record declaration.\n \n                   elsif Abstract_Present\n@@ -4236,7 +4243,7 @@ package body Ch3 is\n                P_Identifier_Declarations (Decls, Done, In_Spec);\n             end if;\n \n-         --  Ada2005: A subprogram declaration can start with \"not\" or\n+         --  Ada 2005: A subprogram declaration can start with \"not\" or\n          --  \"overriding\". In older versions, \"overriding\" is handled\n          --  like an identifier, with the appropriate messages.\n "}, {"sha": "e86f01c91555b3d049ef319d9b14926dc199e01b", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -1649,7 +1649,7 @@ package body Ch5 is\n \n       if Token = Tok_Of or else Token = Tok_Colon then\n          if Ada_Version < Ada_2012 then\n-            Error_Msg_SC (\"iterator is an Ada2012 feature\");\n+            Error_Msg_SC (\"iterator is an Ada 2012 feature\");\n          end if;\n \n          return P_Iterator_Specification (ID_Node);"}, {"sha": "7a9df3ac804e1e57f22202ff9c9b6b6fc4d93704", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -184,7 +184,7 @@ package body Ch6 is\n       Scope.Table (Scope.Last).Ecol := Start_Column;\n       Scope.Table (Scope.Last).Lreq := False;\n \n-      --  Ada2005: scan leading NOT OVERRIDING indicator\n+      --  Ada 2005: scan leading NOT OVERRIDING indicator\n \n       if Token = Tok_Not then\n          Scan;  -- past NOT\n@@ -1341,7 +1341,7 @@ package body Ch6 is\n \n                if Token = Tok_Aliased then\n                   if Ada_Version < Ada_2012 then\n-                     Error_Msg_SC (\"ALIASED parameter is an Ada2012 feature\");\n+                     Error_Msg_SC (\"ALIASED parameter is an Ada 2012 feature\");\n                   else\n                      Set_Aliased_Present (Specification_Node);\n                   end if;"}, {"sha": "cbd2a2df428fe90aca59015f90f2a38560b64eda", "filename": "gcc/ada/s-osinte-freebsd.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fs-osinte-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fs-osinte-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -645,7 +645,10 @@ private\n \n    type clockid_t is new int;\n    CLOCK_REALTIME  : constant clockid_t := 0;\n-   CLOCK_MONOTONIC : constant clockid_t := 4;\n+   CLOCK_MONOTONIC : constant clockid_t := 0;\n+   --  On FreeBSD, pthread_cond_timedwait assumes a CLOCK_REALTIME time by\n+   --  default (unless pthread_condattr_setclock is used to set an alternate\n+   --  clock).\n \n    type pthread_t           is new System.Address;\n    type pthread_attr_t      is new System.Address;"}, {"sha": "ac938be9114cd93c3690ba7b8c603f93b9e953e5", "filename": "gcc/ada/s-regpat.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regpat.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                                                                          --\n --               Copyright (C) 1986 by University of Toronto.               --\n---                      Copyright (C) 1999-2010, AdaCore                    --\n+--                      Copyright (C) 1999-2011, AdaCore                    --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2017,7 +2017,7 @@ package body System.Regpat is\n               (Dummy.Program'First .. Dummy.Program'First + Size - 1));\n       else\n          --  We have to recompile now that we know the size\n-         --  ??? Can we use Ada05's return construct ?\n+         --  ??? Can we use Ada 05's return construct ?\n          declare\n             Result : Pattern_Matcher (Size);\n          begin"}, {"sha": "e690f306e7a67161aa0bf0ada22c90ebf8311cbb", "filename": "gcc/ada/s-tpopde-vms.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fs-tpopde-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fs-tpopde-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopde-vms.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 2000-2009, Free Software Foundation, Inc.          --\n+--          Copyright (C) 2000-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +36,7 @@ package System.Task_Primitives.Operations.DEC is\n \n    procedure Interrupt_AST_Handler (ID : Address);\n    pragma Convention (C, Interrupt_AST_Handler);\n-   --  Handles the AST for Ada95 Interrupts\n+   --  Handles the AST for Ada 95 Interrupts\n \n    procedure RMS_AST_Handler (ID : Address);\n    --  Handles the AST for RMS_Asynch_Operations"}, {"sha": "f4d2ad8a0a5e33bc180fbefaec1d3a2f6b22bfc4", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -3414,7 +3414,7 @@ package body Sem_Aggr is\n                         Selector_Name);\n                      return;\n \n-                  --  (Ada2005): If this is an association with a box,\n+                  --  (Ada 2005): If this is an association with a box,\n                   --  indicate that the association need not represent\n                   --  any component.\n "}, {"sha": "caacc45c4d2b5bdaf052ce0a9abe17fc95f8acb1", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -2125,7 +2125,7 @@ package body Sem_Attr is\n \n       case Attr_Id is\n \n-         --  Attributes related to Ada2012 iterators. Attribute specifications\n+         --  Attributes related to Ada 2012 iterators. Attribute specifications\n          --  exist for these, but they cannot be queried.\n \n          when Attribute_Constant_Indexing    |\n@@ -6120,7 +6120,7 @@ package body Sem_Attr is\n \n       case Id is\n \n-         --  Attributes related to Ada2012 iterators (placeholder ???)\n+         --  Attributes related to Ada 2012 iterators (placeholder ???)\n \n          when Attribute_Constant_Indexing    => null;\n          when Attribute_Default_Iterator     => null;"}, {"sha": "04cf958ca926a3cd13bec3331555ab6d7b0fd46d", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -900,7 +900,7 @@ package body Sem_Cat is\n          --  If the type is private, it must have the Ada 2005 pragma\n          --  Has_Preelaborable_Initialization.\n          --  The check is omitted within predefined units. This is probably\n-         --  obsolete code to fix the Ada95 weakness in this area ???\n+         --  obsolete code to fix the Ada 95 weakness in this area ???\n \n          if Is_Private_Type (T)\n            and then not Has_Pragma_Preelab_Init (T)"}, {"sha": "17fe12137e3f9253e1e48944404189a742a55f7e", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -208,7 +208,7 @@ package body Sem_Ch10 is\n    -- Limited_With_Clauses --\n    --------------------------\n \n-   --  Limited_With clauses are the mechanism chosen for Ada05 to support\n+   --  Limited_With clauses are the mechanism chosen for Ada 05 to support\n    --  mutually recursive types declared in different units. A limited_with\n    --  clause that names package P in the context of unit U makes the types\n    --  declared in the visible part of P available within U, but with the"}, {"sha": "6dd6e7b5589d6a0606b003051bbd04d3f3afd802", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -258,7 +258,7 @@ package body Sem_Ch12 is\n    --  are not accessible outside of the instance.\n \n    --  In a generic, a formal package is treated like a special instantiation.\n-   --  Our Ada95 compiler handled formals with and without box in different\n+   --  Our Ada 95 compiler handled formals with and without box in different\n    --  ways. With partial parametrization, we use a single model for both.\n    --  We create a package declaration that consists of the specification of\n    --  the generic package, and a set of declarations that map the actuals"}, {"sha": "fe4488b483e71ac8eeea0e156108499dfec3bbda", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -9026,7 +9026,7 @@ package body Sem_Ch3 is\n          --  The partial view of T may have been a private extension, for\n          --  which inherited functions dispatching on result are abstract.\n          --  If the full view is a null extension, there is no need for\n-         --  overriding in Ada2005, but wrappers need to be built for them\n+         --  overriding in Ada 2005, but wrappers need to be built for them\n          --  (see exp_ch3, Build_Controlling_Function_Wrappers).\n \n          if Is_Null_Extension (T)\n@@ -18287,7 +18287,7 @@ package body Sem_Ch3 is\n \n                --  Look up tree to find an appropriate insertion point. We\n                --  can't just use insert_actions because later processing\n-               --  depends on the insertion node. Prior to Ada2012 the\n+               --  depends on the insertion node. Prior to Ada 2012 the\n                --  insertion point could only be a declaration or a loop, but\n                --  quantified expressions can appear within any context in an\n                --  expression, and the insertion point can be any statement,"}, {"sha": "7f54ba517d6833cdeddd8603c2c70ee17b41bb1e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -3434,7 +3434,7 @@ package body Sem_Ch4 is\n       --  of the high bound.\n \n       procedure Check_Universal_Expression (N : Node_Id);\n-      --  In Ada83, reject bounds of a universal range that are not\n+      --  In Ada 83, reject bounds of a universal range that are not\n       --  literals or entity names.\n \n       -----------------------"}, {"sha": "1b0f919d3ffa5a75fb49497793404adacdfa169e", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -2068,7 +2068,7 @@ package body Sem_Ch5 is\n                   Set_Parent (D_Copy, Parent (DS));\n                   Pre_Analyze_Range (D_Copy);\n \n-                  --  Ada2012: If the domain of iteration is a function call,\n+                  --  Ada 2012: If the domain of iteration is a function call,\n                   --  it is the new iterator form.\n \n                   --  We have also implemented the shorter form : for X in S"}, {"sha": "2fc3b96670d78c343ca78215f9f3b3d08ff7dd49", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -387,7 +387,7 @@ package body Sem_Ch6 is\n    begin\n       Analyze (P);\n \n-      --  A call of the form A.B (X) may be an Ada05 call, which is rewritten\n+      --  A call of the form A.B (X) may be an Ada 05 call, which is rewritten\n       --  as B (A, X). If the rewriting is successful, the call has been\n       --  analyzed and we just return.\n \n@@ -495,7 +495,7 @@ package body Sem_Ch6 is\n             elsif Warn_On_Ada_2005_Compatibility or GNAT_Mode then\n                if Inside_A_Generic then\n                   Error_Msg_N\n-                    (\"return of limited object not permitted in Ada2005 \"\n+                    (\"return of limited object not permitted in Ada 2005 \"\n                      & \"(RM-2005 6.5(5.5/2))?\", Expr);\n \n                elsif Is_Immutably_Limited_Type (R_Type) then\n@@ -2381,7 +2381,7 @@ package body Sem_Ch6 is\n             --  expansion has generated an equivalent type that is used when\n             --  elaborating the body.\n \n-            --  An exception in the case of Ada2012, AI05-177: The bodies\n+            --  An exception in the case of Ada 2012, AI05-177: The bodies\n             --  created for expression functions do not freeze.\n \n             if No (Spec_Id)\n@@ -6134,7 +6134,7 @@ package body Sem_Ch6 is\n             Desig_2 : Entity_Id;\n \n          begin\n-            --  In Ada2005, access constant indicators must match for\n+            --  In Ada 2005, access constant indicators must match for\n             --  subtype conformance.\n \n             if Ada_Version >= Ada_2005\n@@ -8725,7 +8725,7 @@ package body Sem_Ch6 is\n                --  inherited in a derivation, or when an inherited operation\n                --  of a tagged full type overrides the inherited operation of\n                --  a private extension. Ada 83 had a special rule for the\n-               --  literal case. In Ada95, the later implicit operation hides\n+               --  literal case. In Ada 95, the later implicit operation hides\n                --  the former, and the literal is always the former. In the\n                --  odd case where both are derived operations declared at the\n                --  same point, both operations should be declared, and in that\n@@ -10262,7 +10262,7 @@ package body Sem_Ch6 is\n \n       if Nkind (Parameter_Type (Spec)) = N_Access_Definition then\n \n-         --  Ada 2005 (AI-231): In Ada95, access parameters are always non-\n+         --  Ada 2005 (AI-231): In Ada 95, access parameters are always non-\n          --  null; In Ada 2005, only if then null_exclusion is explicit.\n \n          if Ada_Version < Ada_2005"}, {"sha": "19016822a3ad83644357fa02dcd484cd2cc890b3", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -124,7 +124,7 @@ package body Sem_Intr is\n       end if;\n \n       --  For Import_xxx calls, argument must be static string. A string\n-      --  literal is legal even in Ada83 mode, where such literals are\n+      --  literal is legal even in Ada 83 mode, where such literals are\n       --  not static.\n \n       if Cnam = Name_Import_Address"}, {"sha": "42b819186dc82ada51075d8bd3553c44b347eddf", "filename": "gcc/ada/sem_res.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_res.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_res.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.ads?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -95,8 +95,8 @@ package Sem_Res is\n    procedure Ambiguous_Character (C : Node_Id);\n    --  Give list of candidate interpretations when a character literal cannot\n    --  be resolved, for example in a (useless) comparison such as 'A' = 'B'.\n-   --  In Ada95 the literals in question can be of type Character or Wide_\n-   --  Character. In Ada2005 Wide_Wide_Character is also a candidate. The\n+   --  In Ada 95 the literals in question can be of type Character or Wide_\n+   --  Character. In Ada 2005 Wide_Wide_Character is also a candidate. The\n    --  node may also be overloaded with user-defined character types.\n \n    procedure Check_Parameterless_Call (N : Node_Id);"}, {"sha": "067a2d4f853b2cea6f0711a4ba868b80ce88d513", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -1988,11 +1988,11 @@ package body Sem_Type is\n       --  Otherwise, the predefined operator has precedence, or if the user-\n       --  defined operation is directly visible we have a true ambiguity.\n \n-      --  If this is a fixed-point multiplication and division in Ada83 mode,\n+      --  If this is a fixed-point multiplication and division in Ada 83 mode,\n       --  exclude the universal_fixed operator, which often causes ambiguities\n       --  in legacy code.\n \n-      --  Ditto in Ada2012, where an ambiguity may arise for an operation on\n+      --  Ditto in Ada 2012, where an ambiguity may arise for an operation on\n       --  a partial view that is completed with a fixed point type. See\n       --  AI05-0020 and AI05-0209. The ambiguity is resolved in favor of the\n       --  user-defined subprogram so that a client of the package has the"}, {"sha": "1881563aa88c99d75976ba6e4e5d594dcb000680", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885c4871afce89915b78c249750915b2717892b4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=885c4871afce89915b78c249750915b2717892b4", "patch": "@@ -2993,7 +2993,7 @@ package body Sem_Util is\n             if not Is_Local_Anonymous_Access (Etype (Expr)) then\n \n                --  Handle type conversions introduced for a rename of an\n-               --  Ada2012 stand-alone object of an anonymous access type.\n+               --  Ada 2012 stand-alone object of an anonymous access type.\n \n                return Dynamic_Accessibility_Level (Expression (Expr));\n             end if;\n@@ -7501,7 +7501,7 @@ package body Sem_Util is\n                  Is_Object_Reference (Prefix (N))\n                    or else Is_Access_Type (Etype (Prefix (N)));\n \n-            --  In Ada95, a function call is a constant object; a procedure\n+            --  In Ada 95, a function call is a constant object; a procedure\n             --  call is not.\n \n             when N_Function_Call =>\n@@ -7617,7 +7617,7 @@ package body Sem_Util is\n \n       elsif Original_Node (AV) /= AV then\n \n-         --  In Ada2012, the explicit dereference may be a rewritten call to a\n+         --  In Ada 2012, the explicit dereference may be a rewritten call to a\n          --  Reference function.\n \n          if Ada_Version >= Ada_2012"}]}