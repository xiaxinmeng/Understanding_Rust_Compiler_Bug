{"sha": "bad196d78e98ea145d8a3283eef081d56117a585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkMTk2ZDc4ZTk4ZWExNDVkOGEzMjgzZWVmMDgxZDU2MTE3YTU4NQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-08T21:30:45Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-08T21:30:45Z"}, "message": "Properties.java (setProperty): New method.\n\n\t* java/util/Properties.java (setProperty): New method.\n\t(store): New method.\n\nFrom-SVN: r31855", "tree": {"sha": "678d069022e89817b178ca440ffb6b5278e55250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678d069022e89817b178ca440ffb6b5278e55250"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad196d78e98ea145d8a3283eef081d56117a585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad196d78e98ea145d8a3283eef081d56117a585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad196d78e98ea145d8a3283eef081d56117a585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad196d78e98ea145d8a3283eef081d56117a585/comments", "author": null, "committer": null, "parents": [{"sha": "5fa7f88c064df849718157fb4e90fa865e35fb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa7f88c064df849718157fb4e90fa865e35fb5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa7f88c064df849718157fb4e90fa865e35fb5b"}], "stats": {"total": 174, "additions": 95, "deletions": 79}, "files": [{"sha": "e19e4ef3883ac6a36f37a094ff6ba12ea5bffd18", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad196d78e98ea145d8a3283eef081d56117a585/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad196d78e98ea145d8a3283eef081d56117a585/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bad196d78e98ea145d8a3283eef081d56117a585", "patch": "@@ -1,3 +1,8 @@\n+2000-02-08  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/util/Properties.java (setProperty): New method.\n+\t(store): New method.\n+\n 2000-02-07  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/Runtime.java (_load): Declare."}, {"sha": "aa638b3875e3ecf113f562d1e83520093217bdc4", "filename": "libjava/java/util/Properties.java", "status": "modified", "additions": 90, "deletions": 79, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad196d78e98ea145d8a3283eef081d56117a585/libjava%2Fjava%2Futil%2FProperties.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad196d78e98ea145d8a3283eef081d56117a585/libjava%2Fjava%2Futil%2FProperties.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FProperties.java?ref=bad196d78e98ea145d8a3283eef081d56117a585", "patch": "@@ -1,6 +1,6 @@\n // Properties - Property list representation.\n \n-/* Copyright (C) 1998, 1999  Red Hat, Inc.\n+/* Copyright (C) 1998, 1999, 2000  Red Hat, Inc.\n \n    This file is part of libgcj.\n \n@@ -26,7 +26,7 @@\n  */\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * Status: Complete to JDK 1.1.\n+ * Status: Complete to JDK 1.2.\n  */\n \n public class Properties extends Hashtable\n@@ -51,6 +51,11 @@ public String getProperty (String propName, String defVal)\n       return r;\n     }\n \n+  public Object setProperty (String key, String value)\n+  {\n+    return put (key, value);\n+  }\n+\n   public void list (PrintStream out)\n     {\n       Enumeration e = propertyNames ();\n@@ -282,99 +287,105 @@ public Enumeration propertyNames ()\n     }\n \n   public synchronized void save (OutputStream out, String comment)\n-    {\n+  {\n+    try\n+      {\n+\tstore (out, comment);\n+      }\n+    catch (IOException _)\n+      {\n+      }\n+  }\n+\n+  public synchronized void store (OutputStream out, String comment)\n+    throws IOException\n+  {\n       // Use a buffer because writing a single string through\n       // OutputStreamWriter is fairly expensive.\n       BufferedWriter output\n \t= new BufferedWriter (new OutputStreamWriter (out));\n       String newline = System.getProperty(\"line.separator\");\n \n-      try\n+      if (comment != null)\n \t{\n-\t  if (comment != null)\n-\t    {\n-\t      // We just lose if COMMENT contains a newline.  This is\n-\t      // what JDK 1.1 does.\n-\t      output.write(\"#\");\n-\t      output.write(comment);\n-\t      output.write(newline);\n-\t    }\n-\t  output.write(\"# \");\n-\t  output.write(new Date().toString());\n+\t  // We just lose if COMMENT contains a newline.  This is\n+\t  // what JDK 1.1 does.\n+\t  output.write(\"#\");\n+\t  output.write(comment);\n \t  output.write(newline);\n+\t}\n+      output.write(\"# \");\n+      output.write(new Date().toString());\n+      output.write(newline);\n \n-\t  Enumeration keys = keys ();\n-\t  while (keys.hasMoreElements())\n+      Enumeration keys = keys ();\n+      while (keys.hasMoreElements())\n+\t{\n+\t  String key = (String) keys.nextElement();\n+\t  String value = (String) get (key);\n+\n+\t  // FIXME: JCL says that the key can contain many Unicode\n+\t  // characters.  But it also doesn't say we should encode\n+\t  // it in any way.\n+\t  // FIXME: if key contains ':', '=', or whitespace, must\n+\t  // quote it here.  Note that JDK 1.1 does not do this.\n+\t  output.write(key);\n+\t  output.write(\"=\");\n+\n+\t  boolean leading = true;\n+\t  for (int i = 0; i < value.length(); ++i)\n \t    {\n-\t      String key = (String) keys.nextElement();\n-\t      String value = (String) get (key);\n-\n-\t      // FIXME: JCL says that the key can contain many Unicode\n-\t      // characters.  But it also doesn't say we should encode\n-\t      // it in any way.\n-\t      // FIXME: if key contains ':', '=', or whitespace, must\n-\t      // quote it here.  Note that JDK 1.1 does not do this.\n-\t      output.write(key);\n-\t      output.write(\"=\");\n-\n-\t      boolean leading = true;\n-\t      for (int i = 0; i < value.length(); ++i)\n+\t      boolean new_lead = false;\n+\t      char c = value.charAt(i);\n+\t      switch (c)\n \t\t{\n-\t\t  boolean new_lead = false;\n-\t\t  char c = value.charAt(i);\n-\t\t  switch (c)\n-\t\t    {\n-\t\t    case '\\n':\n-\t\t      output.write(\"\\\\n\");\n-\t\t      break;\n-\t\t    case '\\r':\n-\t\t      output.write(\"\\\\r\");\n-\t\t      break;\n-\t\t    case '\\t':\n-\t\t      output.write(\"\\\\t\");\n-\t\t      break;\n-\t\t    case '\\\\':\n-\t\t      output.write(\"\\\\\\\\\");\n-\t\t      break;\n+\t\tcase '\\n':\n+\t\t  output.write(\"\\\\n\");\n+\t\t  break;\n+\t\tcase '\\r':\n+\t\t  output.write(\"\\\\r\");\n+\t\t  break;\n+\t\tcase '\\t':\n+\t\t  output.write(\"\\\\t\");\n+\t\t  break;\n+\t\tcase '\\\\':\n+\t\t  output.write(\"\\\\\\\\\");\n+\t\t  break;\n \n-\t\t    case '#':\n-\t\t    case '!':\n-\t\t    case '=':\n-\t\t    case ':':\n-\t\t      output.write(\"\\\\\");\n-\t\t      output.write(c);\n-\t\t      break;\n+\t\tcase '#':\n+\t\tcase '!':\n+\t\tcase '=':\n+\t\tcase ':':\n+\t\t  output.write(\"\\\\\");\n+\t\t  output.write(c);\n+\t\t  break;\n \n-\t\t    case ' ':\n-\t\t      new_lead = leading;\n-\t\t      if (leading)\n-\t\t\toutput.write(\"\\\\\");\n-\t\t      output.write(c);\n-\t\t      break;\n+\t\tcase ' ':\n+\t\t  new_lead = leading;\n+\t\t  if (leading)\n+\t\t    output.write(\"\\\\\");\n+\t\t  output.write(c);\n+\t\t  break;\n \n-\t\t    default:\n-\t\t      if (c < '\\u0020' || c > '\\u007e')\n-\t\t\t{\n-\t\t\t  output.write(\"\\\\u\");\n-\t\t\t  output.write(Character.forDigit(c >>> 12, 16));\n-\t\t\t  output.write(Character.forDigit((c >>> 8) & 0xff,\n-\t\t\t\t\t\t\t  16));\n-\t\t\t  output.write(Character.forDigit((c >>> 4) & 0xff,\n-\t\t\t\t\t\t\t  16));\n-\t\t\t  output.write(Character.forDigit(c & 0xff, 16));\n-\t\t\t}\n-\t\t      else\n-\t\t\toutput.write(c);\n+\t\tdefault:\n+\t\t  if (c < '\\u0020' || c > '\\u007e')\n+\t\t    {\n+\t\t      output.write(\"\\\\u\");\n+\t\t      output.write(Character.forDigit(c >>> 12, 16));\n+\t\t      output.write(Character.forDigit((c >>> 8) & 0xff,\n+\t\t\t\t\t\t      16));\n+\t\t      output.write(Character.forDigit((c >>> 4) & 0xff,\n+\t\t\t\t\t\t      16));\n+\t\t      output.write(Character.forDigit(c & 0xff, 16));\n \t\t    }\n-\t\t  leading = new_lead;\n+\t\t  else\n+\t\t    output.write(c);\n \t\t}\n-\t      output.write(newline);\n+\t      leading = new_lead;\n \t    }\n-\n-\t  output.flush();\n-\t}\n-      catch (IOException ignore)\n-\t{\n+\t  output.write(newline);\n \t}\n-    }\n+\n+      output.flush();\n+  }\n }"}]}