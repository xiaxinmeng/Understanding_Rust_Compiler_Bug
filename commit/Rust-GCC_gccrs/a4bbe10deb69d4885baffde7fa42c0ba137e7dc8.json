{"sha": "a4bbe10deb69d4885baffde7fa42c0ba137e7dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRiYmUxMGRlYjY5ZDQ4ODViYWZmZGU3ZmE0MmMwYmExMzdlN2RjOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-19T08:35:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-19T08:35:31Z"}, "message": "[Ada] Further cleanup in inlining machinery\n\nThis gets rid of a small issue in the inlining machinery: under very\npeculiar circumstances, it would add a pending instantiation for the\nbody of a generic package at the point of call to an inlined subprogram\nof the instance.  That's theoritically problematic because the saved\ncontext is that of the call and not that of the instance in this case,\nalthough the strict conditions ensure that this doesn't make a real\ndifference in practice.\n\nNow that the machinery can perform the pending instantiations on demand,\nwe can optimistically add more of them when the instantiations are\nanalyzed and thus remove the problematic handling at the point of call.\n\nNo functional changes.\n\n2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* inline.adb (Add_Inlined_Body): Do not add pending\n\tinstantiations.\n\t* sem_ch12.adb (Needs_Body_Instantiated): New predicate.\n\t(Analyze_Package_Instantiation): Use it to decide whether to add\n\ta pending instantiation for the body of the package.\n\nFrom-SVN: r274639", "tree": {"sha": "9676dddec5b7540cc78fa28fecea9e361005fde2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9676dddec5b7540cc78fa28fecea9e361005fde2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8/comments", "author": null, "committer": null, "parents": [{"sha": "04d933fd48d7e7cbedb761d660229cac9f36fab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d933fd48d7e7cbedb761d660229cac9f36fab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d933fd48d7e7cbedb761d660229cac9f36fab2"}], "stats": {"total": 137, "additions": 82, "deletions": 55}, "files": [{"sha": "9fc8c9e1139c622cc3e76c35a8ab80ae9da0ec12", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a4bbe10deb69d4885baffde7fa42c0ba137e7dc8", "patch": "@@ -1,3 +1,11 @@\n+2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Add_Inlined_Body): Do not add pending\n+\tinstantiations.\n+\t* sem_ch12.adb (Needs_Body_Instantiated): New predicate.\n+\t(Analyze_Package_Instantiation): Use it to decide whether to add\n+\ta pending instantiation for the body of the package.\n+\n 2019-08-19  Olivier Hainque  <hainque@adacore.com>\n \n \t* gcc-interface/trans.c (Acc_Loop_to_gnu): Return the openacc"}, {"sha": "f7bb1a94734ebd80944c25ef0c2daa87b2b0da46", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=a4bbe10deb69d4885baffde7fa42c0ba137e7dc8", "patch": "@@ -510,7 +510,6 @@ package body Inline is\n \n       Inst      : Entity_Id;\n       Inst_Decl : Node_Id;\n-      Inst_Node : Node_Id;\n       Level     : Inline_Level_Type;\n \n    --  Start of processing for Add_Inlined_Body\n@@ -609,48 +608,24 @@ package body Inline is\n                  and then Is_Generic_Instance (Inst)\n                  and then not Is_Called (Inst)\n                then\n-                  --  Do not add a pending instantiation if the body exits\n-                  --  already, or if the instance is a compilation unit, or\n-                  --  the instance node is missing.\n-\n                   Inst_Decl := Unit_Declaration_Node (Inst);\n+\n+                  --  Do not inline the instance if the body already exists,\n+                  --  or if the instance is a compilation unit, or else if\n+                  --  the instance node is simply missing.\n+\n                   if Present (Corresponding_Body (Inst_Decl))\n                     or else Nkind (Parent (Inst_Decl)) = N_Compilation_Unit\n                     or else No (Next (Inst_Decl))\n                   then\n                      Set_Is_Called (Inst);\n-\n                   else\n-                     --  If the inlined call itself appears within an instance,\n-                     --  ensure that the enclosing instance body is available.\n-                     --  This is necessary because Sem_Ch12.Might_Inline_Subp\n-                     --  does not recurse into nested instantiations.\n-\n-                     if not Is_Inlined (Inst) and then In_Instance then\n-                        Set_Is_Inlined (Inst);\n-\n-                        --  The instantiation node usually follows the package\n-                        --  declaration for the instance. If the generic unit\n-                        --  has aspect specifications, they are transformed\n-                        --  into pragmas in the instance, and the instance node\n-                        --  appears after them.\n-\n-                        Inst_Node := Next (Inst_Decl);\n-\n-                        while Nkind (Inst_Node) /= N_Package_Instantiation loop\n-                           Inst_Node := Next (Inst_Node);\n-                        end loop;\n-\n-                        Add_Pending_Instantiation (Inst_Node, Inst_Decl);\n-                     end if;\n-\n                      Add_Inlined_Instance (Inst);\n                   end if;\n                end if;\n             end if;\n \n-            --  If the unit containing E is an instance, then the instance body\n-            --  will be analyzed in any case, see Sem_Ch12.Might_Inline_Subp.\n+            --  If the unit containing E is an instance, nothing more to do\n \n             if Is_Generic_Instance (Pack) then\n                null;"}, {"sha": "5d1c824bb7b4b8cfae1d503f7d664263a1266ca5", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 68, "deletions": 24, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4bbe10deb69d4885baffde7fa42c0ba137e7dc8/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a4bbe10deb69d4885baffde7fa42c0ba137e7dc8", "patch": "@@ -240,6 +240,10 @@ package body Sem_Ch12 is\n    --  circularity is detected, and used to abandon compilation after the\n    --  messages have been posted.\n \n+   Circularity_Detected : Boolean := False;\n+   --  It should really be reset upon encountering a new main unit, but in\n+   --  practice we do not use multiple main units so this is not critical.\n+\n    -----------------------------------------\n    -- Implementation of Generic Contracts --\n    -----------------------------------------\n@@ -352,10 +356,6 @@ package body Sem_Ch12 is\n \n    --    Instantiate_Subprogram_Contract\n \n-   Circularity_Detected : Boolean := False;\n-   --  This should really be reset on encountering a new main unit, but in\n-   --  practice we are not using multiple main units so it is not critical.\n-\n    --------------------------------------------------\n    -- Formal packages and partial parameterization --\n    --------------------------------------------------\n@@ -380,23 +380,23 @@ package body Sem_Ch12 is\n    --  the generic package, and a set of declarations that map the actuals\n    --  into local renamings, just as we do for bona fide instantiations. For\n    --  defaulted parameters and formals with a box, we copy directly the\n-   --  declarations of the formal into this local package. The result is a\n-   --  a package whose visible declarations may include generic formals. This\n+   --  declarations of the formals into this local package. The result is a\n+   --  package whose visible declarations may include generic formals. This\n    --  package is only used for type checking and visibility analysis, and\n-   --  never reaches the back-end, so it can freely violate the placement\n+   --  never reaches the back end, so it can freely violate the placement\n    --  rules for generic formal declarations.\n \n    --  The list of declarations (renamings and copies of formals) is built\n    --  by Analyze_Associations, just as for regular instantiations.\n \n    --  At the point of instantiation, conformance checking must be applied only\n-   --  to those parameters that were specified in the formal. We perform this\n+   --  to those parameters that were specified in the formals. We perform this\n    --  checking by creating another internal instantiation, this one including\n    --  only the renamings and the formals (the rest of the package spec is not\n    --  relevant to conformance checking). We can then traverse two lists: the\n    --  list of actuals in the instance that corresponds to the formal package,\n    --  and the list of actuals produced for this bogus instantiation. We apply\n-   --  the conformance rules to those actuals that are not defaulted (i.e.\n+   --  the conformance rules to those actuals that are not defaulted, i.e.\n    --  which still appear as generic formals.\n \n    --  When we compile an instance body we must make the right parameters\n@@ -3849,12 +3849,17 @@ package body Sem_Ch12 is\n       --  Only relevant when back-end inlining is not enabled.\n \n       function Might_Inline_Subp (Gen_Unit : Entity_Id) return Boolean;\n-      --  If inlining is active and the generic contains inlined subprograms,\n-      --  we either instantiate the body when front-end inlining is enabled,\n-      --  or we add a pending instantiation when back-end inlining is enabled.\n-      --  In the former case, this may cause superfluous instantiations, but\n-      --  in either case we need to perform the instantiation of the body in\n-      --  the context of the instance and not in that of the point of inlining.\n+      --  Return True if inlining is active and Gen_Unit contains inlined\n+      --  subprograms. In this case, we may either instantiate the body when\n+      --  front-end inlining is enabled, or add a pending instantiation when\n+      --  back-end inlining is enabled. In the former case, this may cause\n+      --  superfluous instantiations, but in either case we need to perform\n+      --  the instantiation of the body in the context of the instance and\n+      --  not in that of the point of inlining.\n+\n+      function Needs_Body_Instantiated (Gen_Unit : Entity_Id) return Boolean;\n+      --  Return True if Gen_Unit needs to have its body instantiated in the\n+      --  context of N. This in particular excludes generic contexts.\n \n       -----------------------\n       -- Might_Inline_Subp --\n@@ -3892,6 +3897,52 @@ package body Sem_Ch12 is\n          return False;\n       end Might_Inline_Subp;\n \n+      -------------------------------\n+      --  Needs_Body_Instantiated  --\n+      -------------------------------\n+\n+      function Needs_Body_Instantiated (Gen_Unit : Entity_Id) return Boolean is\n+      begin\n+         --  No need to instantiate bodies in generic units\n+\n+         if Is_Generic_Unit (Cunit_Entity (Main_Unit)) then\n+            return False;\n+         end if;\n+\n+         --  If the instantiation is in the main unit, then the body is needed\n+\n+         if Is_In_Main_Unit (N) then\n+            return True;\n+         end if;\n+\n+         --  If not, then again no need to instantiate bodies in generic units\n+\n+         if Is_Generic_Unit (Cunit_Entity (Get_Code_Unit (N))) then\n+            return False;\n+         end if;\n+\n+         --  Here we have a special handling for back-end inlining: if the\n+         --  instantiation is not a compilation unit, then we want to have\n+         --  its body instantiated. The reason is that Might_Inline_Subp\n+         --  does not catch all the cases (since it does not recurse into\n+         --  nested packages) so this avoids the need to patch things up\n+         --  at a later stage. Moreover the instantiations that are not\n+         --  compilation units are only performed on demand when back-end\n+         --  inlining is enabled, so this causes very little extra work.\n+\n+         if Nkind (Parent (N)) /= N_Compilation_Unit\n+           and then Inline_Processing_Required\n+           and then Back_End_Inlining\n+         then\n+            return True;\n+         end if;\n+\n+         --  We want to have the bodies instantiated in non-main units if\n+         --  they might contribute inlined subprograms.\n+\n+         return Might_Inline_Subp (Gen_Unit);\n+      end Needs_Body_Instantiated;\n+\n       --  Local declarations\n \n       Gen_Id         : constant Node_Id    := Name (N);\n@@ -4256,9 +4307,7 @@ package body Sem_Ch12 is\n          end if;\n \n          --  Save the instantiation node for a subsequent instantiation of the\n-         --  body if there is one and the main unit is not generic, and either\n-         --  we are generating code for this main unit, or the instantiation\n-         --  contains inlined subprograms and is not done in a generic unit.\n+         --  body if there is one and it needs to be instantiated here.\n \n          --  We instantiate the body only if we are generating code, or if we\n          --  are generating cross-reference information, or if we are building\n@@ -4354,12 +4403,7 @@ package body Sem_Ch12 is\n               (Unit_Requires_Body (Gen_Unit)\n                 or else Enclosing_Body_Present\n                 or else Present (Corresponding_Body (Gen_Decl)))\n-               and then not Is_Generic_Unit (Cunit_Entity (Main_Unit))\n-               and then (Is_In_Main_Unit (N)\n-                          or else (Might_Inline_Subp (Gen_Unit)\n-                                    and then\n-                                   not Is_Generic_Unit\n-                                         (Cunit_Entity (Get_Code_Unit (N)))))\n+               and then Needs_Body_Instantiated (Gen_Unit)\n                and then not Is_Actual_Pack\n                and then not Inline_Now\n                and then (Operating_Mode = Generate_Code"}]}