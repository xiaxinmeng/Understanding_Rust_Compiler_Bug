{"sha": "a81545590994ae0598be441d7b4e884a6220954d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxNTQ1NTkwOTk0YWUwNTk4YmU0NDFkN2I0ZTg4NGE2MjIwOTU0ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-03T00:53:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-03T00:53:36Z"}, "message": "except.c: Fix comment typos.\n\n\t* except.c: Fix comment typos.\n\t* loop.c: Likewise.\n\t* varasm.c: Likewise.\n\t* doc/tm.texi: Fix a typo.\n\nFrom-SVN: r48488", "tree": {"sha": "018b7bf80b54b94985584599e6cfc2fd9c6fc1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/018b7bf80b54b94985584599e6cfc2fd9c6fc1c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81545590994ae0598be441d7b4e884a6220954d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81545590994ae0598be441d7b4e884a6220954d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81545590994ae0598be441d7b4e884a6220954d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81545590994ae0598be441d7b4e884a6220954d/comments", "author": null, "committer": null, "parents": [{"sha": "e6ecc89b1ffe1e13ba75daab525fbd29dabc6238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ecc89b1ffe1e13ba75daab525fbd29dabc6238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ecc89b1ffe1e13ba75daab525fbd29dabc6238"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "3c1c763fbe313dcfc575209cc16b0a352c37949e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81545590994ae0598be441d7b4e884a6220954d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81545590994ae0598be441d7b4e884a6220954d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a81545590994ae0598be441d7b4e884a6220954d", "patch": "@@ -1,3 +1,10 @@\n+2002-01-02  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* except.c: Fix comment typos.\n+\t* loop.c: Likewise.\n+\t* varasm.c: Likewise.\n+\t* doc/tm.texi: Fix a typo.\n+\n 2002-01-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-typeck.c (output_init_element): Allow initializing static storage"}, {"sha": "41a13551eaa9baa6273b18bb3c9faf8c74256359", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81545590994ae0598be441d7b4e884a6220954d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81545590994ae0598be441d7b4e884a6220954d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a81545590994ae0598be441d7b4e884a6220954d", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988,1989,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001\n+@c Copyright (C) 1988,1989,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -2364,7 +2364,7 @@ These macros should not be used in the case where a particular class of\n registers can only be copied to memory and not to another class of\n registers.  In that case, secondary reload registers are not needed and\n would not be helpful.  Instead, a stack location must be used to perform\n-the copy and the @code{mov@var{m}} pattern should use memory as a\n+the copy and the @code{mov@var{m}} pattern should use memory as an\n intermediate storage.  This case often occurs between floating-point and\n general registers.\n "}, {"sha": "6da82f77534012ebd895bff88dc75b082f38dfb7", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81545590994ae0598be441d7b4e884a6220954d/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81545590994ae0598be441d7b4e884a6220954d/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=a81545590994ae0598be441d7b4e884a6220954d", "patch": "@@ -1,6 +1,6 @@\n /* Implements exception handling.\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Mike Stump <mrs@cygnus.com>.\n \n This file is part of GCC.\n@@ -2650,7 +2650,7 @@ reachable_next_level (region, type_thrown, info)\n \n \t    if (type_thrown)\n \t      {\n-\t\t/* If we have a at least one type match, end the search.  */\n+\t\t/* If we have at least one type match, end the search.  */\n \t\ttree tp_node = c->u.catch.type_list;\n \n \t\tfor (; tp_node; tp_node = TREE_CHAIN (tp_node))"}, {"sha": "6ebd7d5574fa40512a21f12f0e97d16401ba5f89", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81545590994ae0598be441d7b4e884a6220954d/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81545590994ae0598be441d7b4e884a6220954d/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=a81545590994ae0598be441d7b4e884a6220954d", "patch": "@@ -1,6 +1,6 @@\n /* Perform various loop optimizations, including strength reduction.\n    Copyright (C) 1987, 1988, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3832,7 +3832,7 @@ emit_prefetch_instructions (loop)\n \t\t ineffective.  Later we may be able to reverse such BIVs.  */\n \t      || (PREFETCH_NO_REVERSE_ORDER \n \t\t  && (stride = INTVAL (iv->mult_val) * basestride) < 0)\n-\t      /* Prefetching of accesses with such a extreme stride is probably\n+\t      /* Prefetching of accesses with such an extreme stride is probably\n \t\t not worthwhile, either.  */\n \t      || (PREFETCH_NO_EXTREME_STRIDE\n \t\t  && stride > PREFETCH_EXTREME_STRIDE)"}, {"sha": "c7534109f81cbf0b9dd96968902f7c328f783890", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81545590994ae0598be441d7b4e884a6220954d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81545590994ae0598be441d7b4e884a6220954d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a81545590994ae0598be441d7b4e884a6220954d", "patch": "@@ -1,6 +1,6 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -133,7 +133,7 @@ tree last_assemble_variable_decl;\n    So giving constant the alias set for the type will allow such\n    initializations to appear to conflict with the load of the constant.  We\n    avoid this by giving all constants an alias set for just constants.\n-   Since there will be no stores to that a alias set, nothing will ever\n+   Since there will be no stores to that alias set, nothing will ever\n    conflict with them.  */\n \n static HOST_WIDE_INT const_alias_set;"}]}