{"sha": "88872b00daeaf461796962afeb8901c172aacc50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg4NzJiMDBkYWVhZjQ2MTc5Njk2MmFmZWI4OTAxYzE3MmFhY2M1MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-04-08T20:21:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-08T20:21:36Z"}, "message": "trans.c (Identifier_to_gnu): Do not return initializers of aggregate types that contain a placeholder.\n\n\t* gcc-interface/trans.c (Identifier_to_gnu): Do not return initializers\n\tof aggregate types that contain a placeholder.\n\nFrom-SVN: r172209", "tree": {"sha": "da8a27e7232b2b2616631cf990d2551a1f14c9d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da8a27e7232b2b2616631cf990d2551a1f14c9d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88872b00daeaf461796962afeb8901c172aacc50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88872b00daeaf461796962afeb8901c172aacc50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88872b00daeaf461796962afeb8901c172aacc50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88872b00daeaf461796962afeb8901c172aacc50/comments", "author": null, "committer": null, "parents": [{"sha": "42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42821aff0aa8c8118a0e19c2dc640b24ad26e1dc"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "2046aa715d98ecd6b38eef51fbb9a951eba5eccb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=88872b00daeaf461796962afeb8901c172aacc50", "patch": "@@ -1,3 +1,8 @@\n+2011-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Identifier_to_gnu): Do not return initializers\n+\tof aggregate types that contain a placeholder.\n+\n 2011-04-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc-interface/utils.c (handle_sentinel_attribute): Don't use"}, {"sha": "378f88c604d35c611a1c5d44ac8399cd3f1bd207", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=88872b00daeaf461796962afeb8901c172aacc50", "patch": "@@ -1058,10 +1058,14 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \n   /* If we have a constant declaration and its initializer, try to return the\n      latter to avoid the need to call fold in lots of places and the need for\n-     elaboration code if this identifier is used as an initializer itself.  */\n+     elaboration code if this identifier is used as an initializer itself.\n+     Don't do it for aggregate types that contain a placeholder since their\n+     initializers cannot be manipulated easily.  */\n   if (TREE_CONSTANT (gnu_result)\n       && DECL_P (gnu_result)\n-      && DECL_INITIAL (gnu_result))\n+      && DECL_INITIAL (gnu_result)\n+      && !(AGGREGATE_TYPE_P (TREE_TYPE (gnu_result))\n+\t   && type_contains_placeholder_p (TREE_TYPE (gnu_result))))\n     {\n       bool constant_only = (TREE_CODE (gnu_result) == CONST_DECL\n \t\t\t    && !DECL_CONST_CORRESPONDING_VAR (gnu_result));"}, {"sha": "23f95b16e40a907410fbaa978a716c491983f829", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88872b00daeaf461796962afeb8901c172aacc50", "patch": "@@ -1,3 +1,8 @@\n+2011-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/aggr17.adb: New test.\n+\t* gnat.dg/aggr18.adb: Likewise.\n+\n 2011-04-08  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/48389"}, {"sha": "3ba41985f727d7205f9bf2543e8d12258ac3ef0d", "filename": "gcc/testsuite/gnat.dg/aggr17.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Ftestsuite%2Fgnat.dg%2Faggr17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Ftestsuite%2Fgnat.dg%2Faggr17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr17.adb?ref=88872b00daeaf461796962afeb8901c172aacc50", "patch": "@@ -0,0 +1,28 @@\n+-- { dg-do compile }\r\n+-- { dg-options \"-gnatws\" }\r\n+\r\n+procedure Aggr17 is\r\n+\r\n+   type Enum is (A, B);\r\n+\r\n+   type Rec (D : Enum := Enum'First) is record\r\n+      case D is\r\n+         when A => X : Integer;\r\n+         when B => null;\r\n+      end case;\r\n+   end record;\r\n+   for Rec'Size use 128;\r\n+   pragma Volatile (Rec);\r\n+\r\n+   type Config_T (D : Enum := Enum'First) is record\r\n+      N : Natural;\r\n+      R : Rec (D);\r\n+   end record;\r\n+\r\n+   C : constant Config_T := (D => A, N => 1, R => (D => A, X => 0));\r\n+\r\n+   type Arr is array (Natural range 1 .. C.N) of Boolean;\r\n+\r\n+begin\r\n+   null;\r\n+end;\r"}, {"sha": "511add8a17d62febba3061f80d4d6ea11f09a326", "filename": "gcc/testsuite/gnat.dg/aggr18.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Ftestsuite%2Fgnat.dg%2Faggr18.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88872b00daeaf461796962afeb8901c172aacc50/gcc%2Ftestsuite%2Fgnat.dg%2Faggr18.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr18.adb?ref=88872b00daeaf461796962afeb8901c172aacc50", "patch": "@@ -0,0 +1,28 @@\n+-- { dg-do compile }\r\n+-- { dg-options \"-gnatws\" }\r\n+\r\n+procedure Aggr18 is\r\n+\r\n+   type Enum is (A, B);\r\n+\r\n+   type Rec (D : Enum := Enum'First) is record\r\n+      case D is\r\n+         when A => X : Integer;\r\n+         when B => null;\r\n+      end case;\r\n+   end record;\r\n+   for Rec'Size use 128;\r\n+   pragma Volatile (Rec);\r\n+\r\n+   type Config_T (D : Enum := Enum'First) is record\r\n+      N : Natural;\r\n+      R : Rec (D);\r\n+   end record;\r\n+\r\n+   C : Config_T := (D => A, N => 1, R => (D => A, X => 0));\r\n+\r\n+   type Arr is array (Natural range 1 .. C.N) of Boolean;\r\n+\r\n+begin\r\n+   null;\r\n+end;\r"}]}