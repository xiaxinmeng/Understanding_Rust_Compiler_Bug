{"sha": "a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ4ZmI2MWI1YmJiOGFlMmY4MjE4NzVhMDdkMGFjOGNlYjMzNGUwMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-30T14:33:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-30T14:33:41Z"}, "message": "(expand_float): Avoid double-rounding when float is is narrower than\nint.\n\nFrom-SVN: r7386", "tree": {"sha": "b790afda3ca6646caed60b65fd68a88b86616a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b790afda3ca6646caed60b65fd68a88b86616a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02/comments", "author": null, "committer": null, "parents": [{"sha": "344a822046c08d2cb6a80eada0dbcbcf77cb6a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344a822046c08d2cb6a80eada0dbcbcf77cb6a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344a822046c08d2cb6a80eada0dbcbcf77cb6a44"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "b3b6ea96928ce176d682c1c352160b1c9859d4e7", "filename": "gcc/optabs.c", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02", "patch": "@@ -3070,11 +3070,51 @@ expand_float (to, from, unsignedp)\n \tif (GET_MODE_BITSIZE (GET_MODE (from)) < GET_MODE_BITSIZE (fmode)\n \t    && can_float_p (fmode, GET_MODE (from), 0) != CODE_FOR_nothing)\n \t  break;\n+\n       if (fmode == VOIDmode)\n \t{\n-\t  /* There is no such mode.  Pretend the target is wide enough.\n-\t     This may cause rounding problems, unfortunately.  */\n+\t  /* There is no such mode.  Pretend the target is wide enough.  */\n \t  fmode = GET_MODE (to);\n+\n+\t  /* Avoid double-rounding when TO is narrower than FROM. */\n+\t  if ((significand_size (fmode) + 1)\n+\t      < GET_MODE_BITSIZE (GET_MODE (from)))\n+\t    {\n+\t      rtx temp1;\n+\t      rtx neglabel = gen_label_rtx ();\n+\n+\t      imode = GET_MODE (from);\n+\t      do_pending_stack_adjust ();\n+\n+\t      /* Test whether the sign bit is set.  */\n+\t      emit_cmp_insn (from, const0_rtx, GE, NULL_RTX, imode, 0, 0);\n+\t      emit_jump_insn (gen_blt (neglabel));\n+\n+\t      /* The sign bit is not set.  Convert as signed.  */\n+\t      expand_float (target, from, 0);\n+\t      emit_jump_insn (gen_jump (label));\n+\n+\t      /* The sign bit is set.\n+\t\t Convert to a usable (positive signed) value by shifting right\n+\t\t one bit, while remembering if a nonzero bit was shifted\n+\t\t out; i.e., compute  (from & 1) | (from >> 1).  */\n+\n+\t      emit_label (neglabel);\n+\t      temp = expand_binop (imode, and_optab, from, const1_rtx,\n+\t\t\t\t    0, 1, 0);\n+\t      temp1 = expand_binop (imode, lshr_optab, from, const1_rtx,\n+\t\t\t\t   from, 1, 0);\n+\t      temp = expand_binop (imode, ior_optab, temp, temp1,\n+\t\t\t\t   temp, 1, 0);\n+\t      expand_float (target, temp, 0);\n+\n+\t      /* Multiply by 2 to undo the shift above.  */\n+\t      target = expand_binop (fmode, add_optab, target, target,\n+\t\t\t\t   target, 0, 0);\n+\t      do_pending_stack_adjust ();\n+\t      emit_label (label);\n+\t      goto done;\n+\t    }\n \t}\n \n       /* If we are about to do some arithmetic to correct for an\n@@ -3102,6 +3142,7 @@ expand_float (to, from, unsignedp)\n \t\t\t   target, 0, OPTAB_LIB_WIDEN);\n       if (temp != target)\n \temit_move_insn (target, temp);\n+\n       do_pending_stack_adjust ();\n       emit_label (label);\n     }\n@@ -3183,6 +3224,8 @@ expand_float (to, from, unsignedp)\n \t\t\t  gen_rtx (FLOAT, GET_MODE (to), from));\n     }\n \n+ done:\n+\n   /* Copy result to requested destination\n      if we have been computing in a temp location.  */\n "}]}