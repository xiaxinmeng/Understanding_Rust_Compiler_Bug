{"sha": "0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxMGNjZmZjM2RkZjhlNDg3N2ZkYWI2Y2Y3MTJjZDY1ZjQ1ZDFjYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-12-08T08:47:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-12-08T08:47:59Z"}, "message": "re PR c++/18672 (Segfault with simple template code)\n\n.:\tPR c++/18672\n\t* gimplify.c (canonicalize_addr_expr): Cope with array of\n\tincomplete type.\n\t(gimplify_conversion): Remove redundant checks.\ntestsuite:\n\tPR c++/18672\n\t* g++.dg/opt/array1.C: New.\n\nFrom-SVN: r91865", "tree": {"sha": "7de9c095103fb4a7809b6f28a30887d83788c35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7de9c095103fb4a7809b6f28a30887d83788c35b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/comments", "author": null, "committer": null, "parents": [{"sha": "e6aef9696474198372ccd66e8a5588b30ffbf93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6aef9696474198372ccd66e8a5588b30ffbf93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6aef9696474198372ccd66e8a5588b30ffbf93f"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "c6b3059d0c37c38131d558b5ec042ea8d5930134", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb", "patch": "@@ -1,5 +1,10 @@\n 2004-12-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/18672\n+\t* gimplify.c (canonicalize_addr_expr): Cope with array of\n+\tincomplete type.\n+\t(gimplify_conversion): Remove redundant checks.\n+\n \t* doc/trouble.texi (Non-bugs): Clarify empty loop removal.\n \n 2004-12-08  Uros Bizjak  <uros@kss-loka.si>"}, {"sha": "0b83d78fd43ef56bdfc87d09c79ffdf8721d09c0", "filename": "gcc/gimplify.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb", "patch": "@@ -1336,7 +1336,8 @@ canonicalize_addr_expr (tree *expr_p)\n     return;\n \n   /* The lower bound and element sizes must be constant.  */\n-  if (TREE_CODE (TYPE_SIZE_UNIT (dctype)) != INTEGER_CST\n+  if (!TYPE_SIZE_UNIT (dctype)\n+      || TREE_CODE (TYPE_SIZE_UNIT (dctype)) != INTEGER_CST\n       || !TYPE_DOMAIN (datype) || !TYPE_MIN_VALUE (TYPE_DOMAIN (datype))\n       || TREE_CODE (TYPE_MIN_VALUE (TYPE_DOMAIN (datype))) != INTEGER_CST)\n     return;\n@@ -1356,16 +1357,15 @@ canonicalize_addr_expr (tree *expr_p)\n static enum gimplify_status\n gimplify_conversion (tree *expr_p)\n {\n-  /* If we still have a conversion at the toplevel, then strip\n-     away all but the outermost conversion.  */\n-  if (TREE_CODE (*expr_p) == NOP_EXPR || TREE_CODE (*expr_p) == CONVERT_EXPR)\n-    {\n-      STRIP_SIGN_NOPS (TREE_OPERAND (*expr_p, 0));\n-\n-      /* And remove the outermost conversion if it's useless.  */\n-      if (tree_ssa_useless_type_conversion (*expr_p))\n-\t*expr_p = TREE_OPERAND (*expr_p, 0);\n-    }\n+  gcc_assert (TREE_CODE (*expr_p) == NOP_EXPR\n+\t      || TREE_CODE (*expr_p) == CONVERT_EXPR);\n+  \n+  /* Then strip away all but the outermost conversion.  */\n+  STRIP_SIGN_NOPS (TREE_OPERAND (*expr_p, 0));\n+\n+  /* And remove the outermost conversion if it's useless.  */\n+  if (tree_ssa_useless_type_conversion (*expr_p))\n+    *expr_p = TREE_OPERAND (*expr_p, 0);\n \n   /* If we still have a conversion at the toplevel,\n      then canonicalize some constructs.  */"}, {"sha": "05276095c7ef10200ee0b0041dce37e2967ced10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb", "patch": "@@ -1,5 +1,8 @@\n 2004-12-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/18672\n+\t* g++.dg/opt/array1.C: New.\n+\t\n \tPR c++/18803\n \t* g++.dg/template/operator5.C: New.\n "}, {"sha": "c63ed22c88b8afc26aa05dd1ffaaf988063b1ffe", "filename": "gcc/testsuite/g++.dg/opt/array1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Farray1.C?ref=0710ccffc3ddf8e4877fdab6cf712cd65f45d1cb", "patch": "@@ -0,0 +1,20 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 29 Nov 2004 <nathan@codesourcery.com>\n+\n+// PR 18672:ICE gimplifying incomplete array type.\n+// Origin: Magnus Fromreide <gcc@magfr.user.lysator.liu.se>\n+\n+struct A;\n+\n+struct D {\n+  static A ary[];\n+};\n+extern A ary[];\n+\n+void Foo (A const *);\n+\n+void Bar ()\n+{\n+  Foo (D::ary);\n+  Foo (::ary);\n+}"}]}