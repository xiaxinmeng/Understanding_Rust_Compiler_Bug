{"sha": "12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiZDVhMWU5ZjQyMDI2ZjdlYWQxYmFkNzg4ZjljYWRlNjdmODhiNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-04-07T12:31:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-07T12:31:32Z"}, "message": "re PR tree-optimization/43270 (array-bounds false negative)\n\n2010-04-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43270\n\t* tree-vrp.c (check_array_ref): Fix flexible array member\n\tdetection.\n\t* tree-ssa-sccvn.h (fully_constant_vn_reference_p): Declare.\n\t* tree-ssa-pre.c (phi_translate_1): Adjust.\n\t(fully_constant_expression): Split out vn_reference handling to ...\n\t* tree-ssa-sccvn.c (fully_constant_vn_reference_p): ... here.\n\tFold reads from constant strings.\n\t(vn_reference_lookup): Handle fully constant references.\n\t(vn_reference_lookup_pieces): Likewise.\n\t* Makefile.in (expmed.o-warn): Add -Wno-error.\n\n\t* g++.dg/warn/Warray-bounds-4.C: New testcase.\n\t* gcc.dg/Warray-bounds-7.c: Likewise.\n\nFrom-SVN: r158058", "tree": {"sha": "92208bc8d4ba4a670add9a969acc3e87e362914a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92208bc8d4ba4a670add9a969acc3e87e362914a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a775239672d98c299f0bdde4e7465529388af8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a775239672d98c299f0bdde4e7465529388af8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a775239672d98c299f0bdde4e7465529388af8eb"}], "stats": {"total": 258, "additions": 194, "deletions": 64}, "files": [{"sha": "ca2b7f6a4b6850593f82a80fa20eea30058b3f61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -1,3 +1,17 @@\n+2010-04-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43270\n+\t* tree-vrp.c (check_array_ref): Fix flexible array member\n+\tdetection.\n+\t* tree-ssa-sccvn.h (fully_constant_vn_reference_p): Declare.\n+\t* tree-ssa-pre.c (phi_translate_1): Adjust.\n+\t(fully_constant_expression): Split out vn_reference handling to ...\n+\t* tree-ssa-sccvn.c (fully_constant_vn_reference_p): ... here.\n+\tFold reads from constant strings.\n+\t(vn_reference_lookup): Handle fully constant references.\n+\t(vn_reference_lookup_pieces): Likewise.\n+\t* Makefile.in (expmed.o-warn): Add -Wno-error.\n+\n 2010-04-07  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-sra.c (find_param_candidates): Allow scalar va_list types."}, {"sha": "20529d0b2a0b95d237d0712ef8d377bafa7c70ca", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -183,6 +183,7 @@ GCC_WARN_CXXFLAGS = $(LOOSE_WARN) $($(@D)-warn) $(NOCOMMON_FLAG) $($@-warn)\n build/gengtype-lex.o-warn = -Wno-error\n # mips-tfile.c contains -Wcast-qual warnings.\n mips-tfile.o-warn = -Wno-error\n+expmed.o-warn = -Wno-error\n \n # All warnings have to be shut off in stage1 if the compiler used then\n # isn't gcc; configure determines that.  WARN_CFLAGS will be either"}, {"sha": "a2faaf5a8183b0366d21ad4683f0fae9a9214ede", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -1,3 +1,9 @@\n+2010-04-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43270\n+\t* g++.dg/warn/Warray-bounds-4.C: New testcase.\n+\t* gcc.dg/Warray-bounds-7.c: Likewise.\n+\n 2010-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/bit_packed_array.ad[sb]: Rename into..."}, {"sha": "319038a73bf8ec06c3f86841d8fea70e5fa309c5", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-4.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-4.C?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -Warray-bounds\" }\n+\n+class String\n+{\n+public:\n+  virtual unsigned long length() const = 0;\n+  virtual char get(unsigned long index) const = 0;\n+  virtual void set(unsigned long index, char value) = 0;\n+  virtual char& operator[] (unsigned long value) = 0;\n+  virtual ~String() {};\n+};\n+\n+template<unsigned long size> class FixedString : public String\n+{\n+private:\n+  char contents[size];\n+\n+public:\n+  virtual unsigned long length() const { return size; }\n+  virtual char get(unsigned long index) const { return contents[index]; }\n+  virtual void set(unsigned long index, char value) { contents[index] = value; }\n+  virtual char& operator[] (unsigned long index) { return contents[index]; }\n+\n+  FixedString() { contents[0] = '\\0'; } // { dg-warning \"above array bounds\" }\n+};\n+\n+void print_length (const String& string);\n+\n+int main()\n+{\n+  const FixedString<0> empty;\n+\n+  print_length(empty);\n+\n+  return 0;\n+}"}, {"sha": "fdd95789abaa576bb5ea5c2496c168dc4c312cfc", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-7.c?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+char *p;\n+\n+int main()\n+{\n+  p = \"\";\n+  if (p[0] == 0\n+      || (p[0] == '_' && p[1] == 0))  /* { dg-bogus \"array bounds\" \"\" } */\n+    return 0;\n+  return 1;\n+}"}, {"sha": "2331e7b2249d95992039bd8f1c720a16ff5d5ea2", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 6, "deletions": 44, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -1231,49 +1231,11 @@ fully_constant_expression (pre_expr e)\n     case REFERENCE:\n       {\n \tvn_reference_t ref = PRE_EXPR_REFERENCE (e);\n-\tVEC (vn_reference_op_s, heap) *operands = ref->operands;\n-\tvn_reference_op_t op;\n-\n-\t/* Try to simplify the translated expression if it is\n-\t   a call to a builtin function with at most two arguments.  */\n-\top = VEC_index (vn_reference_op_s, operands, 0);\n-\tif (op->opcode == CALL_EXPR\n-\t    && TREE_CODE (op->op0) == ADDR_EXPR\n-\t    && TREE_CODE (TREE_OPERAND (op->op0, 0)) == FUNCTION_DECL\n-\t    && DECL_BUILT_IN (TREE_OPERAND (op->op0, 0))\n-\t    && VEC_length (vn_reference_op_s, operands) >= 2\n-\t    && VEC_length (vn_reference_op_s, operands) <= 3)\n-\t  {\n-\t    vn_reference_op_t arg0, arg1 = NULL;\n-\t    bool anyconst = false;\n-\t    arg0 = VEC_index (vn_reference_op_s, operands, 1);\n-\t    if (VEC_length (vn_reference_op_s, operands) > 2)\n-\t      arg1 = VEC_index (vn_reference_op_s, operands, 2);\n-\t    if (TREE_CODE_CLASS (arg0->opcode) == tcc_constant\n-\t\t|| (arg0->opcode == ADDR_EXPR\n-\t\t    && is_gimple_min_invariant (arg0->op0)))\n-\t      anyconst = true;\n-\t    if (arg1\n-\t\t&& (TREE_CODE_CLASS (arg1->opcode) == tcc_constant\n-\t\t    || (arg1->opcode == ADDR_EXPR\n-\t\t\t&& is_gimple_min_invariant (arg1->op0))))\n-\t      anyconst = true;\n-\t    if (anyconst)\n-\t      {\n-\t\ttree folded = build_call_expr (TREE_OPERAND (op->op0, 0),\n-\t\t\t\t\t       arg1 ? 2 : 1,\n-\t\t\t\t\t       arg0->op0,\n-\t\t\t\t\t       arg1 ? arg1->op0 : NULL);\n-\t\tif (folded\n-\t\t    && TREE_CODE (folded) == NOP_EXPR)\n-\t\t  folded = TREE_OPERAND (folded, 0);\n-\t\tif (folded\n-\t\t    && is_gimple_min_invariant (folded))\n-\t\t  return get_or_alloc_expr_for_constant (folded);\n-\t      }\n-\t  }\n-\t  return e;\n-\t}\n+\ttree folded;\n+\tif ((folded = fully_constant_vn_reference_p (ref)))\n+\t  return get_or_alloc_expr_for_constant (folded);\n+\treturn e;\n+      }\n     default:\n       return e;\n     }\n@@ -1702,7 +1664,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\t\t\t\t\t      ref->type,\n \t\t\t\t\t\t      newoperands,\n \t\t\t\t\t\t      &newref, true);\n-\t    if (newref)\n+\t    if (result)\n \t      VEC_free (vn_reference_op_s, heap, newoperands);\n \n \t    if (result && is_gimple_min_invariant (result))"}, {"sha": "f965c5134e5c6dd618c2e06cf247182550ee8992", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -889,6 +889,76 @@ vn_reference_fold_indirect (VEC (vn_reference_op_s, heap) **ops,\n   *i_p = i;\n }\n \n+/* Optimize the reference REF to a constant if possible or return\n+   NULL_TREE if not.  */\n+\n+tree\n+fully_constant_vn_reference_p (vn_reference_t ref)\n+{\n+  VEC (vn_reference_op_s, heap) *operands = ref->operands;\n+  vn_reference_op_t op;\n+\n+  /* Try to simplify the translated expression if it is\n+     a call to a builtin function with at most two arguments.  */\n+  op = VEC_index (vn_reference_op_s, operands, 0);\n+  if (op->opcode == CALL_EXPR\n+      && TREE_CODE (op->op0) == ADDR_EXPR\n+      && TREE_CODE (TREE_OPERAND (op->op0, 0)) == FUNCTION_DECL\n+      && DECL_BUILT_IN (TREE_OPERAND (op->op0, 0))\n+      && VEC_length (vn_reference_op_s, operands) >= 2\n+      && VEC_length (vn_reference_op_s, operands) <= 3)\n+    {\n+      vn_reference_op_t arg0, arg1 = NULL;\n+      bool anyconst = false;\n+      arg0 = VEC_index (vn_reference_op_s, operands, 1);\n+      if (VEC_length (vn_reference_op_s, operands) > 2)\n+\targ1 = VEC_index (vn_reference_op_s, operands, 2);\n+      if (TREE_CODE_CLASS (arg0->opcode) == tcc_constant\n+\t  || (arg0->opcode == ADDR_EXPR\n+\t      && is_gimple_min_invariant (arg0->op0)))\n+\tanyconst = true;\n+      if (arg1\n+\t  && (TREE_CODE_CLASS (arg1->opcode) == tcc_constant\n+\t      || (arg1->opcode == ADDR_EXPR\n+\t\t  && is_gimple_min_invariant (arg1->op0))))\n+\tanyconst = true;\n+      if (anyconst)\n+\t{\n+\t  tree folded = build_call_expr (TREE_OPERAND (op->op0, 0),\n+\t\t\t\t\t arg1 ? 2 : 1,\n+\t\t\t\t\t arg0->op0,\n+\t\t\t\t\t arg1 ? arg1->op0 : NULL);\n+\t  if (folded\n+\t      && TREE_CODE (folded) == NOP_EXPR)\n+\t    folded = TREE_OPERAND (folded, 0);\n+\t  if (folded\n+\t      && is_gimple_min_invariant (folded))\n+\t    return folded;\n+\t}\n+    }\n+\n+  /* Simplify reads from constant strings.  */\n+  else if (op->opcode == ARRAY_REF\n+\t   && TREE_CODE (op->op0) == INTEGER_CST\n+\t   && integer_zerop (op->op1)\n+\t   && VEC_length (vn_reference_op_s, operands) == 2)\n+    {\n+      vn_reference_op_t arg0;\n+      arg0 = VEC_index (vn_reference_op_s, operands, 1);\n+      if (arg0->opcode == STRING_CST\n+\t  && (TYPE_MODE (op->type)\n+\t      == TYPE_MODE (TREE_TYPE (TREE_TYPE (arg0->op0))))\n+\t  && GET_MODE_CLASS (TYPE_MODE (op->type)) == MODE_INT\n+\t  && GET_MODE_SIZE (TYPE_MODE (op->type)) == 1\n+\t  && compare_tree_int (op->op0, TREE_STRING_LENGTH (arg0->op0)) < 0)\n+\treturn build_int_cst_type (op->type,\n+\t\t\t\t   (TREE_STRING_POINTER (arg0->op0)\n+\t\t\t\t    [TREE_INT_CST_LOW (op->op0)]));\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Transform any SSA_NAME's in a vector of vn_reference_op_s\n    structures into their value numbers.  This is done in-place, and\n    the vector passed in is returned.  */\n@@ -1194,6 +1264,7 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n {\n   struct vn_reference_s vr1;\n   vn_reference_t tmp;\n+  tree cst;\n \n   if (!vnresult)\n     vnresult = &tmp;\n@@ -1212,8 +1283,10 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n   vr1.type = type;\n   vr1.set = set;\n   vr1.hashcode = vn_reference_compute_hash (&vr1);\n-  vn_reference_lookup_1 (&vr1, vnresult);\n+  if ((cst = fully_constant_vn_reference_p (&vr1)))\n+    return cst;\n \n+  vn_reference_lookup_1 (&vr1, vnresult);\n   if (!*vnresult\n       && maywalk\n       && vr1.vuse)\n@@ -1246,6 +1319,7 @@ vn_reference_lookup (tree op, tree vuse, bool maywalk,\n {\n   VEC (vn_reference_op_s, heap) *operands;\n   struct vn_reference_s vr1;\n+  tree cst;\n \n   if (vnresult)\n     *vnresult = NULL;\n@@ -1255,6 +1329,8 @@ vn_reference_lookup (tree op, tree vuse, bool maywalk,\n   vr1.type = TREE_TYPE (op);\n   vr1.set = get_alias_set (op);\n   vr1.hashcode = vn_reference_compute_hash (&vr1);\n+  if ((cst = fully_constant_vn_reference_p (&vr1)))\n+    return cst;\n \n   if (maywalk\n       && vr1.vuse)"}, {"sha": "8f93b0b25183d18a4645281d5e8cdbd3012171f2", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -204,4 +204,5 @@ unsigned int get_next_value_id (void);\n unsigned int get_constant_value_id (tree);\n unsigned int get_or_alloc_constant_value_id (tree);\n bool value_id_constant_p (unsigned int);\n+tree fully_constant_vn_reference_p (vn_reference_t);\n #endif /* TREE_SSA_SCCVN_H  */"}, {"sha": "3b22948e39f00c266d85afee31150b64bdaab381", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bd5a1e9f42026f7ead1bad788f9cade67f88b7/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=12bd5a1e9f42026f7ead1bad788f9cade67f88b7", "patch": "@@ -4998,23 +4998,46 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n {\n   value_range_t* vr = NULL;\n   tree low_sub, up_sub;\n-  tree low_bound, up_bound = array_ref_up_bound (ref);\n+  tree low_bound, up_bound, up_bound_p1;\n+  tree base;\n+\n+  if (TREE_NO_WARNING (ref))\n+    return;\n \n   low_sub = up_sub = TREE_OPERAND (ref, 1);\n+  up_bound = array_ref_up_bound (ref);\n \n-  if (!up_bound || TREE_NO_WARNING (ref)\n-      || TREE_CODE (up_bound) != INTEGER_CST\n-      /* Can not check flexible arrays.  */\n-      || (TYPE_SIZE (TREE_TYPE (ref)) == NULL_TREE\n-          && TYPE_DOMAIN (TREE_TYPE (ref)) != NULL_TREE\n-          && TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (ref))) == NULL_TREE)\n-      /* Accesses after the end of arrays of size 0 (gcc\n-         extension) and 1 are likely intentional (\"struct\n-         hack\").  */\n-      || compare_tree_int (up_bound, 1) <= 0)\n+  /* Can not check flexible arrays.  */\n+  if (!up_bound\n+      || TREE_CODE (up_bound) != INTEGER_CST)\n     return;\n \n+  /* Accesses to trailing arrays via pointers may access storage\n+     beyond the types array bounds.  */\n+  base = get_base_address (ref);\n+  if (base\n+      && INDIRECT_REF_P (base))\n+    {\n+      tree cref, next = NULL_TREE;\n+\n+      if (TREE_CODE (TREE_OPERAND (ref, 0)) != COMPONENT_REF)\n+\treturn;\n+\n+      cref = TREE_OPERAND (ref, 0);\n+      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (cref, 0))) == RECORD_TYPE)\n+\tfor (next = TREE_CHAIN (TREE_OPERAND (cref, 1));\n+\t     next && TREE_CODE (next) != FIELD_DECL;\n+\t     next = TREE_CHAIN (next))\n+\t  ;\n+\n+      /* If this is the last field in a struct type or a field in a\n+\t union type do not warn.  */\n+      if (!next)\n+\treturn;\n+    }\n+\n   low_bound = array_ref_low_bound (ref);\n+  up_bound_p1 = int_const_binop (PLUS_EXPR, up_bound, integer_one_node, 0);\n \n   if (TREE_CODE (low_sub) == SSA_NAME)\n     {\n@@ -5039,14 +5062,11 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n         }\n     }\n   else if (TREE_CODE (up_sub) == INTEGER_CST\n-           && tree_int_cst_lt (up_bound, up_sub)\n-           && !tree_int_cst_equal (up_bound, up_sub)\n-           && (!ignore_off_by_one\n-               || !tree_int_cst_equal (int_const_binop (PLUS_EXPR,\n-                                                        up_bound,\n-                                                        integer_one_node,\n-                                                        0),\n-                                       up_sub)))\n+\t   && (ignore_off_by_one\n+\t       ? (tree_int_cst_lt (up_bound, up_sub)\n+\t\t  && !tree_int_cst_equal (up_bound_p1, up_sub))\n+\t       : (tree_int_cst_lt (up_bound, up_sub)\n+\t\t  || tree_int_cst_equal (up_bound_p1, up_sub))))\n     {\n       warning_at (location, OPT_Warray_bounds,\n \t\t  \"array subscript is above array bounds\");"}]}