{"sha": "41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFiNGQ0NGJhY2NjNDBiZmJlZDAzNTJhYTEyMzllZTcxYmI0YmM5NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-03-08T06:05:21Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-03-08T06:05:21Z"}, "message": "stl_alloc.h: Add extern implicit allocator instantiations.\n\n\n2002-03-07  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/stl_alloc.h: Add extern implicit allocator\n\tinstantiations.\n\t* include/bits/basic_string.tcc: Tweak.\n\t* include/bits/locale_facets.tcc: Remove default args. Add\n\thas_facet, use_facet extern instantiations.\n\t* src/stl-inst.cc: Add explicit instantiation.\n\t* src/locale-inst.cc: Clean. Remove locale member template\n\tinstantiations.\n\n\t* testsuite/22_locale/operators.cc (test02): Enable.\n\nFrom-SVN: r50426", "tree": {"sha": "6b0d13fe85d6be6692c2000017d7c45ff306a270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b0d13fe85d6be6692c2000017d7c45ff306a270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/comments", "author": null, "committer": null, "parents": [{"sha": "5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5faae4f77908932c7a11ecfc0e59bc6321f68cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5faae4f77908932c7a11ecfc0e59bc6321f68cd5"}], "stats": {"total": 589, "additions": 451, "deletions": 138}, "files": [{"sha": "4d0d91730ed22458c714cc6815ed9a00e0d2d94e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -1,3 +1,16 @@\n+2002-03-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/stl_alloc.h: Add extern implicit allocator\n+\tinstantiations.\n+\t* include/bits/basic_string.tcc: Tweak.\n+\t* include/bits/locale_facets.tcc: Remove default args. Add\n+\thas_facet, use_facet extern instantiations.\n+\t* src/stl-inst.cc: Add explicit instantiation.\n+\t* src/locale-inst.cc: Clean. Remove locale member template\n+\tinstantiations.\n+\n+\t* testsuite/22_locale/operators.cc (test02): Enable.\n+\n 2002-03-06  Benjamin Kosnik  <bkoz@redhat.com>\n \t    Stephen M. Webb  <stephen.webb@bregmasoft.com>\n "}, {"sha": "71395527c42a0c6d2dccdeb5d701d2191b1a2406", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -37,6 +37,7 @@ GLIBCPP_3.1 {\n     };\n \n     # Names not in an 'extern' block are mangled names.\n+    _ZSt9has_facet*;\n \n     # operator new(unsigned)\n     _Znwj;\n@@ -101,4 +102,3 @@ CXXABI_1 {\n   local:\n     *;\n };\n-"}, {"sha": "01a3fe6ea8c6ec0901c389daa60b2f74a0422d8c", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -945,7 +945,7 @@ namespace std\n   // which are defined via explicit instantiations elsewhere.  \n   // NB: This syntax is a GNU extension.\n   extern template class basic_string<char>;\n-   extern template \n+  extern template \n     basic_istream<char>& \n     operator>>(basic_istream<char>&, string&);\n   extern template "}, {"sha": "e08dc363a9d3ce529e50606942a8563051a794fa", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 224, "deletions": 18, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -2061,36 +2061,38 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB: This syntax is a GNU extension.\n+  extern template class vector<locale::facet*>;\n+\n   extern template class moneypunct<char, false>;\n   extern template class moneypunct<char, true>;\n   extern template class moneypunct_byname<char, false>;\n   extern template class moneypunct_byname<char, true>;\n-  extern template class money_get<char, istreambuf_iterator<char> >;\n-  extern template class money_put<char, ostreambuf_iterator<char> >;\n+  extern template class money_get<char>;\n+  extern template class money_put<char>;\n   extern template class moneypunct<wchar_t, false>;\n   extern template class moneypunct<wchar_t, true>;\n   extern template class moneypunct_byname<wchar_t, false>;\n   extern template class moneypunct_byname<wchar_t, true>;\n-  extern template class money_get<wchar_t, istreambuf_iterator<wchar_t> >;\n-  extern template class money_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  extern template class money_get<wchar_t>;\n+  extern template class money_put<wchar_t>;\n   extern template class numpunct<char>;\n   extern template class numpunct_byname<char>;\n-  extern template class num_get<char, istreambuf_iterator<char> >;\n-  extern template class num_put<char, ostreambuf_iterator<char> >; \n+  extern template class num_get<char>;\n+  extern template class num_put<char>; \n   extern template class numpunct<wchar_t>;\n   extern template class numpunct_byname<wchar_t>;\n-  extern template class num_get<wchar_t, istreambuf_iterator<wchar_t> >;\n-  extern template class num_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  extern template class num_get<wchar_t>;\n+  extern template class num_put<wchar_t>;\n   extern template class __timepunct<char>;\n-  extern template class time_put<char, ostreambuf_iterator<char> >;\n-  extern template class time_put_byname<char, ostreambuf_iterator<char> >;\n-  extern template class time_get<char, istreambuf_iterator<char> >;\n-  extern template class time_get_byname<char, istreambuf_iterator<char> >;\n+  extern template class time_put<char>;\n+  extern template class time_put_byname<char>;\n+  extern template class time_get<char>;\n+  extern template class time_get_byname<char>;\n   extern template class __timepunct<wchar_t>;\n-  extern template class time_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n-  extern template class time_put_byname<wchar_t, ostreambuf_iterator<wchar_t> >;\n-  extern template class time_get<wchar_t, istreambuf_iterator<wchar_t> >;\n-  extern template class time_get_byname<wchar_t, istreambuf_iterator<wchar_t> >;\n+  extern template class time_put<wchar_t>;\n+  extern template class time_put_byname<wchar_t>;\n+  extern template class time_get<wchar_t>;\n+  extern template class time_get_byname<wchar_t>;\n   extern template class messages<char>;\n   extern template class messages_byname<char>;\n   extern template class messages<wchar_t>;\n@@ -2103,13 +2105,217 @@ namespace std\n   extern template class collate_byname<char>;\n   extern template class collate<wchar_t>;\n   extern template class collate_byname<wchar_t>;\n-} // namespace std\n \n-#endif\n+  extern template\n+    const codecvt<char, char, mbstate_t>& \n+    use_facet<codecvt<char, char, mbstate_t> >(const locale&);\n+\n+  extern template\n+    const collate<char>& \n+    use_facet<collate<char> >(const locale&);\n+\n+  extern template\n+    const numpunct<char>& \n+    use_facet<numpunct<char> >(const locale&);\n+\n+  extern template \n+    const num_put<char>& \n+    use_facet<num_put<char> >(const locale&);\n+\n+  extern template \n+    const num_get<char>& \n+    use_facet<num_get<char> >(const locale&);\n+\n+  extern template\n+    const moneypunct<char, true>& \n+    use_facet<moneypunct<char, true> >(const locale&);\n+\n+  extern template\n+    const moneypunct<char, false>& \n+    use_facet<moneypunct<char, false> >(const locale&);\n+\n+  extern template \n+    const money_put<char>& \n+    use_facet<money_put<char> >(const locale&);\n+\n+  extern template \n+    const money_get<char>& \n+    use_facet<money_get<char> >(const locale&);\n+\n+  extern template\n+    const __timepunct<char>& \n+    use_facet<__timepunct<char> >(const locale&);\n+\n+  extern template \n+    const time_put<char>& \n+    use_facet<time_put<char> >(const locale&);\n+\n+  extern template \n+    const time_get<char>& \n+    use_facet<time_get<char> >(const locale&);\n+\n+  extern template \n+    const messages<char>& \n+    use_facet<messages<char> >(const locale&);\n+\n+  extern template\n+    const codecvt<wchar_t, char, mbstate_t>& \n+    use_facet<codecvt<wchar_t, char, mbstate_t> >(locale const&);\n+\n+  extern template\n+    const collate<wchar_t>& \n+    use_facet<collate<wchar_t> >(const locale&);\n+\n+  extern template\n+    const numpunct<wchar_t>& \n+    use_facet<numpunct<wchar_t> >(const locale&);\n+\n+  extern template \n+    const num_put<wchar_t>& \n+    use_facet<num_put<wchar_t> >(const locale&);\n+\n+  extern template \n+    const num_get<wchar_t>& \n+    use_facet<num_get<wchar_t> >(const locale&);\n \n+  extern template\n+    const moneypunct<wchar_t, true>& \n+    use_facet<moneypunct<wchar_t, true> >(const locale&);\n \n+  extern template\n+    const moneypunct<wchar_t, false>& \n+    use_facet<moneypunct<wchar_t, false> >(const locale&);\n+ \n+  extern template \n+    const money_put<wchar_t>& \n+    use_facet<money_put<wchar_t> >(const locale&);\n+\n+  extern template \n+    const money_get<wchar_t>& \n+    use_facet<money_get<wchar_t> >(const locale&);\n+\n+  extern template\n+    const __timepunct<wchar_t>& \n+    use_facet<__timepunct<wchar_t> >(const locale&);\n+\n+  extern template \n+    const time_put<wchar_t>& \n+    use_facet<time_put<wchar_t> >(const locale&);\n+\n+  extern template \n+    const time_get<wchar_t>& \n+    use_facet<time_get<wchar_t> >(const locale&);\n+\n+  extern template \n+    const messages<wchar_t>& \n+    use_facet<messages<wchar_t> >(const locale&);\n+\n+\n+  extern template \n+    bool\n+    has_facet<ctype<char> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<codecvt<char, char, mbstate_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<collate<char> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<numpunct<char> >(const locale&);\n \n+  extern template \n+    bool\n+    has_facet<num_put<char> >(const locale&);\n \n+  extern template \n+    bool\n+    has_facet<num_get<char> >(const locale&);\n \n+  extern template \n+    bool\n+    has_facet<moneypunct<char> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<money_put<char> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<money_get<char> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<__timepunct<char> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<time_put<char> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<time_get<char> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<messages<char> >(const locale&);\n+\n+ extern template \n+    bool\n+    has_facet<ctype<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<collate<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<numpunct<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<num_put<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<num_get<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<moneypunct<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<money_put<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<money_get<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<__timepunct<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<time_put<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<time_get<wchar_t> >(const locale&);\n+\n+  extern template \n+    bool\n+    has_facet<messages<wchar_t> >(const locale&);\n+} // namespace std\n+\n+#endif\n \n "}, {"sha": "4ff816be5e33c8f8d4a89852fe30c5bdeeae649c", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -922,6 +922,11 @@ struct _Alloc_traits<_Tp, __allocator<_Tp1, __debug_alloc<_Alloc> > >\n };\n //@}\n \n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB: This syntax is a GNU extension.\n+  extern template class allocator<char>;\n+  extern template class allocator<wchar_t>;\n } // namespace std\n \n #endif /* __GLIBCPP_INTERNAL_ALLOC_H */"}, {"sha": "9e449e66bda8b3c55ef69095c133c86438c3b566", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 199, "deletions": 111, "changes": 310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -43,126 +43,124 @@\n \n namespace std\n {\n-  typedef ostreambuf_iterator<char> obuf_iterator;\n-  typedef istreambuf_iterator<char> ibuf_iterator;\n-  typedef ostreambuf_iterator<wchar_t> wobuf_iterator;\n-  typedef istreambuf_iterator<wchar_t> wibuf_iterator;\n-\n   // moneypunct, money_get, and money_put\n   template class moneypunct<char, false>;\n   template class moneypunct<char, true>;\n   template class moneypunct_byname<char, false>;\n   template class moneypunct_byname<char, true>;\n-  template class money_get<char, ibuf_iterator>;\n-  template class money_put<char, obuf_iterator>;\n+  template class money_get<char, istreambuf_iterator<char> >;\n+  template class money_put<char, ostreambuf_iterator<char> >;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class moneypunct<wchar_t, false>;\n   template class moneypunct<wchar_t, true>;\n   template class moneypunct_byname<wchar_t, false>;\n   template class moneypunct_byname<wchar_t, true>;\n-  template class money_get<wchar_t, wibuf_iterator>;\n-  template class money_put<wchar_t, wobuf_iterator>;\n+  template class money_get<wchar_t, istreambuf_iterator<wchar_t> >;\n+  template class money_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n #endif\n \n   // numpunct, numpunct_byname, num_get, and num_put\n   template class numpunct<char>;\n   template class numpunct_byname<char>;\n-  template class num_get<char, ibuf_iterator>;\n-  template class num_put<char, obuf_iterator>; \n+  template class num_get<char, istreambuf_iterator<char> >;\n+  template class num_put<char, ostreambuf_iterator<char> >; \n   template\n-    obuf_iterator\n-    num_put<char, obuf_iterator>::\n-    _M_convert_int(obuf_iterator, ios_base&, char, char, char, long) const;\n+    ostreambuf_iterator<char>\n+    num_put<char, ostreambuf_iterator<char> >::\n+    _M_convert_int(ostreambuf_iterator<char>, ios_base&, char, char, char, \n+\t\t   long) const;\n \n   template\n-    obuf_iterator\n-    num_put<char, obuf_iterator>::\n-    _M_convert_int(obuf_iterator, ios_base&, char, char, char, \n+    ostreambuf_iterator<char>\n+    num_put<char, ostreambuf_iterator<char> >::\n+    _M_convert_int(ostreambuf_iterator<char>, ios_base&, char, char, char, \n \t\t   unsigned long) const;\n \n #ifdef _GLIBCPP_USE_LONG_LONG\n   template\n-    obuf_iterator\n-    num_put<char, obuf_iterator>::\n-    _M_convert_int(obuf_iterator, ios_base&, char, char, char, \n+    ostreambuf_iterator<char>\n+    num_put<char, ostreambuf_iterator<char> >::\n+    _M_convert_int(ostreambuf_iterator<char>, ios_base&, char, char, char, \n \t\t   long long) const;\n \n   template\n-    obuf_iterator\n-    num_put<char, obuf_iterator>::\n-    _M_convert_int(obuf_iterator, ios_base&, char, char, char,\n+    ostreambuf_iterator<char>\n+    num_put<char, ostreambuf_iterator<char> >::\n+    _M_convert_int(ostreambuf_iterator<char>, ios_base&, char, char, char,\n \t\t   unsigned long long) const;\n #endif\n \n   template\n-    obuf_iterator\n-    num_put<char, obuf_iterator>::\n-    _M_convert_float(obuf_iterator, ios_base&, char, char, double) const;\n+    ostreambuf_iterator<char>\n+    num_put<char, ostreambuf_iterator<char> >::\n+    _M_convert_float(ostreambuf_iterator<char>, ios_base&, char, char, \n+\t\t     double) const;\n \n   template\n-    obuf_iterator\n-    num_put<char, obuf_iterator>::\n-    _M_convert_float(obuf_iterator, ios_base&, char, char, \n+    ostreambuf_iterator<char>\n+    num_put<char, ostreambuf_iterator<char> >::\n+    _M_convert_float(ostreambuf_iterator<char>, ios_base&, char, char, \n \t\t    long double) const;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class numpunct<wchar_t>;\n   template class numpunct_byname<wchar_t>;\n-  template class num_get<wchar_t, wibuf_iterator>;\n-  template class num_put<wchar_t, wobuf_iterator>;\n+  template class num_get<wchar_t, istreambuf_iterator<wchar_t> >;\n+  template class num_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n \n   template\n-    wobuf_iterator\n-    num_put<wchar_t, wobuf_iterator>::\n-    _M_convert_int(wobuf_iterator, ios_base&, wchar_t, char, char, long) const;\n+    ostreambuf_iterator<wchar_t>\n+    num_put<wchar_t, ostreambuf_iterator<wchar_t> >::\n+    _M_convert_int(ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, char, \n+\t\t   char, long) const;\n \n   template\n-    wobuf_iterator\n-    num_put<wchar_t, wobuf_iterator>::\n-    _M_convert_int(wobuf_iterator, ios_base&, wchar_t, char, char,\n-\t\t   unsigned long) const;\n+    ostreambuf_iterator<wchar_t>\n+    num_put<wchar_t, ostreambuf_iterator<wchar_t> >::\n+    _M_convert_int(ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, char, \n+\t\t   char, unsigned long) const;\n \n #ifdef _GLIBCPP_USE_LONG_LONG\n   template\n-    wobuf_iterator\n-    num_put<wchar_t, wobuf_iterator>::\n-    _M_convert_int(wobuf_iterator, ios_base&, wchar_t, char, char,\n-\t\t   long long) const;\n+    ostreambuf_iterator<wchar_t>\n+    num_put<wchar_t, ostreambuf_iterator<wchar_t> >::\n+    _M_convert_int(ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, char, \n+\t\t   char, long long) const;\n \n   template\n-    wobuf_iterator\n-    num_put<wchar_t, wobuf_iterator>::\n-    _M_convert_int(wobuf_iterator, ios_base&, wchar_t, char, char,\n-\t\t   unsigned long long) const;\n+    ostreambuf_iterator<wchar_t>\n+    num_put<wchar_t, ostreambuf_iterator<wchar_t> >::\n+    _M_convert_int(ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, char, \n+\t\t   char, unsigned long long) const;\n #endif\n \n   template\n-    wobuf_iterator\n-    num_put<wchar_t, wobuf_iterator>::\n-    _M_convert_float(wobuf_iterator, ios_base&, wchar_t, char, \n+    ostreambuf_iterator<wchar_t>\n+    num_put<wchar_t, ostreambuf_iterator<wchar_t> >::\n+    _M_convert_float(ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, char, \n \t\t     double) const;\n \n   template\n-    wobuf_iterator\n-    num_put<wchar_t, wobuf_iterator>::\n-    _M_convert_float(wobuf_iterator, ios_base&, wchar_t, char, \n+    ostreambuf_iterator<wchar_t>\n+    num_put<wchar_t, ostreambuf_iterator<wchar_t> >::\n+    _M_convert_float(ostreambuf_iterator<wchar_t>, ios_base&, wchar_t, char, \n \t\t     long double) const;\n #endif\n \n   // time_get and time_put\n   template class __timepunct<char>;\n-  template class time_put<char, obuf_iterator>;\n-  template class time_put_byname<char, obuf_iterator>;\n-  template class time_get<char, ibuf_iterator>;\n-  template class time_get_byname<char, ibuf_iterator>;\n+  template class time_put<char, ostreambuf_iterator<char> >;\n+  template class time_put_byname<char, ostreambuf_iterator<char> >;\n+  template class time_get<char, istreambuf_iterator<char> >;\n+  template class time_get_byname<char, istreambuf_iterator<char> >;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class __timepunct<wchar_t>;\n-  template class time_put<wchar_t, wobuf_iterator>;\n-  template class time_put_byname<wchar_t, wobuf_iterator>;\n-  template class time_get<wchar_t, wibuf_iterator>;\n-  template class time_get_byname<wchar_t, wibuf_iterator>;\n+  template class time_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  template class time_put_byname<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  template class time_get<wchar_t, istreambuf_iterator<wchar_t> >;\n+  template class time_get_byname<wchar_t, istreambuf_iterator<wchar_t> >;\n #endif\n \n   // messages\n@@ -198,18 +196,7 @@ namespace std\n #endif\n     \n   // use_facet\n-  template\n-    const numpunct<char>& \n-    use_facet<numpunct<char> >(const locale&);\n-\n-  template \n-    const num_put<char, obuf_iterator >& \n-    use_facet<num_put<char, obuf_iterator> >(const locale&);\n-\n-  template \n-    const num_get<char, ibuf_iterator >& \n-    use_facet<num_get<char, ibuf_iterator> >(const locale&);\n-\n+  // NB: use_facet<ctype> is specialized\n   template\n     const codecvt<char, char, mbstate_t>& \n     use_facet<codecvt<char, char, mbstate_t> >(const locale&);\n@@ -218,6 +205,18 @@ namespace std\n     const collate<char>& \n     use_facet<collate<char> >(const locale&);\n \n+  template\n+    const numpunct<char>& \n+    use_facet<numpunct<char> >(const locale&);\n+\n+  template \n+    const num_put<char>& \n+    use_facet<num_put<char> >(const locale&);\n+\n+  template \n+    const num_get<char>& \n+    use_facet<num_get<char> >(const locale&);\n+\n   template\n     const moneypunct<char, true>& \n     use_facet<moneypunct<char, true> >(const locale&);\n@@ -226,23 +225,31 @@ namespace std\n     const moneypunct<char, false>& \n     use_facet<moneypunct<char, false> >(const locale&);\n \n+  template \n+    const money_put<char>& \n+    use_facet<money_put<char> >(const locale&);\n+\n+  template \n+    const money_get<char>& \n+    use_facet<money_get<char> >(const locale&);\n+\n   template\n     const __timepunct<char>& \n     use_facet<__timepunct<char> >(const locale&);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template\n-    const numpunct<wchar_t>& \n-    use_facet<numpunct<wchar_t> >(const locale&);\n+  template \n+    const time_put<char>& \n+    use_facet<time_put<char> >(const locale&);\n \n   template \n-    const num_put<wchar_t, wobuf_iterator>& \n-    use_facet<num_put<wchar_t, wobuf_iterator> >(const locale&);\n+    const time_get<char>& \n+    use_facet<time_get<char> >(const locale&);\n \n   template \n-    const num_get<wchar_t, wibuf_iterator>& \n-    use_facet<num_get<wchar_t, wibuf_iterator> >(const locale&);\n+    const messages<char>& \n+    use_facet<messages<char> >(const locale&);\n \n+#ifdef _GLIBCPP_USE_WCHAR_T\n   template\n     const codecvt<wchar_t, char, mbstate_t>& \n     use_facet<codecvt<wchar_t, char, mbstate_t> >(locale const&);\n@@ -251,79 +258,166 @@ namespace std\n     const collate<wchar_t>& \n     use_facet<collate<wchar_t> >(const locale&);\n \n+  template\n+    const numpunct<wchar_t>& \n+    use_facet<numpunct<wchar_t> >(const locale&);\n+\n+  template \n+    const num_put<wchar_t>& \n+    use_facet<num_put<wchar_t> >(const locale&);\n+\n+  template \n+    const num_get<wchar_t>& \n+    use_facet<num_get<wchar_t> >(const locale&);\n+\n   template\n     const moneypunct<wchar_t, true>& \n     use_facet<moneypunct<wchar_t, true> >(const locale&);\n \n   template\n     const moneypunct<wchar_t, false>& \n     use_facet<moneypunct<wchar_t, false> >(const locale&);\n+ \n+  template \n+    const money_put<wchar_t>& \n+    use_facet<money_put<wchar_t> >(const locale&);\n+\n+  template \n+    const money_get<wchar_t>& \n+    use_facet<money_get<wchar_t> >(const locale&);\n \n   template\n     const __timepunct<wchar_t>& \n     use_facet<__timepunct<wchar_t> >(const locale&);\n+\n+  template \n+    const time_put<wchar_t>& \n+    use_facet<time_put<wchar_t> >(const locale&);\n+\n+  template \n+    const time_get<wchar_t>& \n+    use_facet<time_get<wchar_t> >(const locale&);\n+\n+  template \n+    const messages<wchar_t>& \n+    use_facet<messages<wchar_t> >(const locale&);\n #endif\n \n   // has_facet\n+  template \n+    bool\n+    has_facet<ctype<char> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<codecvt<char, char, mbstate_t> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<collate<char> >(const locale&);\n+\n   template \n     bool\n     has_facet<numpunct<char> >(const locale&);\n+\n   template \n     bool\n     has_facet<num_put<char> >(const locale&);\n+\n   template \n     bool\n     has_facet<num_get<char> >(const locale&);\n+\n   template \n     bool\n-    has_facet<ctype<char> >(const locale&);\n+    has_facet<moneypunct<char> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<money_put<char> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<money_get<char> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<__timepunct<char> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<time_put<char> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<time_get<char> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<messages<char> >(const locale&);\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+ template \n+    bool\n+    has_facet<ctype<wchar_t> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);\n+\n+  template \n+    bool\n+    has_facet<collate<wchar_t> >(const locale&);\n+\n   template \n     bool\n     has_facet<numpunct<wchar_t> >(const locale&);\n+\n   template \n     bool\n     has_facet<num_put<wchar_t> >(const locale&);\n+\n   template \n     bool\n     has_facet<num_get<wchar_t> >(const locale&);\n+\n   template \n     bool\n-    has_facet<ctype<wchar_t> >(const locale&);\n-#endif\n+    has_facet<moneypunct<wchar_t> >(const locale&);\n \n-  //\n-  // iterator\n-  //\n-  typedef vector<locale::facet*> vec_pfacet;\n   template \n-    void \n-    vec_pfacet::\n-    insert(vec_pfacet::iterator, vec_pfacet::size_type, \n-\t   const vec_pfacet::value_type&);\n+    bool\n+    has_facet<money_put<wchar_t> >(const locale&);\n+\n   template \n-    void \n-    vec_pfacet::\n-    _M_fill_insert(vec_pfacet::iterator, vec_pfacet::size_type, \n-\t\t   const vec_pfacet::value_type&);\n+    bool\n+    has_facet<money_get<wchar_t> >(const locale&);\n \n+  template \n+    bool\n+    has_facet<__timepunct<wchar_t> >(const locale&);\n \n-  //\n-  // locale\n-  //\n-  typedef istreambuf_iterator<char, char_traits<char> > istreambuf_iter;\n-  typedef ostreambuf_iterator<char, char_traits<char> > ostreambuf_iter;\n+  template \n+    bool\n+    has_facet<time_put<wchar_t> >(const locale&);\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  typedef istreambuf_iterator<wchar_t, char_traits<wchar_t> > wistreambuf_iter;\n-  typedef ostreambuf_iterator<wchar_t, char_traits<wchar_t> > wostreambuf_iter;\n-#endif\n+  template \n+    bool\n+    has_facet<time_get<wchar_t> >(const locale&);\n \n   template \n     bool\n-    locale::operator()(const string&, const string&) const;\n+    has_facet<messages<wchar_t> >(const locale&);\n+#endif\n+\n+  // iterator\n+  typedef vector<locale::facet*> vec_pfacet;\n+  template class vector<locale::facet*>;\n+  template class __normal_iterator<locale::facet**, vector<locale::facet*> >;\n+  template class __normal_iterator<locale::facet* const*,\n+                                   vector<locale::facet*> >;\n \n+  // locale\n   template\n     char*\n     __add_grouping<char>(char*, char, char const*, char const*, \n@@ -344,12 +438,6 @@ namespace std\n \t\t\t\t    streamsize, streamsize, const bool);\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n-  template \n-    bool\n-    locale::operator()(const wstring&, const wstring&) const;\n-\n-  typedef ostreambuf_iterator<wchar_t> wostreambuf_iter;\n-\n   template\n     wchar_t*\n     __add_grouping<wchar_t>(wchar_t*, wchar_t, char const*, char const*, "}, {"sha": "d2fd763160316331d3646491120e144b082018d4", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -63,7 +63,7 @@ namespace std\n   const size_t \t\t\tlocale::_S_num_categories;\n   const size_t \t\t\tlocale::_S_num_facets;\n \n-  // Definitions for locale::id of standard facets. \n+  // Definitions for locale::id of standard facets that are specialized.\n   locale::id ctype<char>::id;\n   locale::id codecvt<char, char, mbstate_t>::id;\n "}, {"sha": "94d26b33d2375456c0755fbf1c32cdafa6821ac5", "filename": "libstdc++-v3/src/stl-inst.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -34,11 +34,12 @@\n #include <bits/c++config.h>\n #include <memory>\n #include <vector>\n-#include <ostream>\n-#include <map>\n \n namespace std\n {\n+  template class allocator<char>;\n+  template class allocator<wchar_t>;\n+\n   template class __malloc_alloc_template<0>;\n \n #ifndef __USE_MALLOC"}, {"sha": "f0e40d4a1165372bdd2e0826ccf7a0d82d289ab0", "filename": "libstdc++-v3/testsuite/22_locale/operators.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b4d44baccc40bfbed0352aa1239ee71bb4bc95/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc?ref=41b4d44baccc40bfbed0352aa1239ee71bb4bc95", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-11 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000, 2001 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -47,9 +47,9 @@ void test01()\n }\n \n // bool operator()(const string_type&, const string_type&) const\n-typedef std::collate<char> ccollate;\n long gnu_count;\n-class gnu_collate: public ccollate \n+\n+class gnu_collate: public std::collate<char>\n { \n protected:\n   virtual int\n@@ -79,7 +79,7 @@ void test02()\n int main ()\n {\n   test01();\n-\n+  test02();\n   return 0;\n }\n "}]}