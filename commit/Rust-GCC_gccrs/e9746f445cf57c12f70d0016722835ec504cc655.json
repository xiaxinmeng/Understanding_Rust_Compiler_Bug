{"sha": "e9746f445cf57c12f70d0016722835ec504cc655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3NDZmNDQ1Y2Y1N2MxMmY3MGQwMDE2NzIyODM1ZWM1MDRjYzY1NQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-21T20:47:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-21T20:47:52Z"}, "message": "Merge #638\n\n638: hir: Merge both module classes in one r=philberty a=CohenArthur\n\nAt this point in the pipeline, all modules are either internal and\r\ncontain items, or external and have been previously expanded in the\r\nmacro-expand phase. Thus, all HIR modules will contain their final set\r\nof items\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>", "tree": {"sha": "8d5ef1eec38edc2ea93d29d8199758ce97be2d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d5ef1eec38edc2ea93d29d8199758ce97be2d7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9746f445cf57c12f70d0016722835ec504cc655", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhIWZ4CRBK7hj4Ov3rIwAA0y0IAKORvbVoicc9KJSQmKyNFICA\n/d1w9w47ZIKQP9jmPqsFNgvdRgoyO0WbaFaiodCeX1hfqLDn2o91jxN58F6NdWlJ\nwrXbibiEFy6+cgeiXj28qaVKyRM5mguvpeo5Hz89dgVkd0i9nfbBQ4GCKVvmIYIF\n9TVTRgXlp7LXWMjjAApRwx76Q+qV1NVpcVTF4TBmohjE9z1l+53RaeU8tlz7OQdm\nMVGUniH0taLa7/Wlm77vVvs3TnvRiBtfuG3T3qNK5wKF4X8hpQAcH/qEvMwx39gL\n2Ag1ffemElBVE+1kyySgB8Zb98ZOjkfB8hvrf2J1RWinaQvaXeGMgosoWeoL9fw=\n=RKJ8\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d5ef1eec38edc2ea93d29d8199758ce97be2d7c\nparent 79754bd20bdfa64a4ce91e5b4a65154c313b2d83\nparent abaec437780d818d6ecfb265f215a2b9b4a3035b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629578872 +0000\ncommitter GitHub <noreply@github.com> 1629578872 +0000\n\nMerge #638\n\n638: hir: Merge both module classes in one r=philberty a=CohenArthur\n\nAt this point in the pipeline, all modules are either internal and\r\ncontain items, or external and have been previously expanded in the\r\nmacro-expand phase. Thus, all HIR modules will contain their final set\r\nof items\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9746f445cf57c12f70d0016722835ec504cc655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9746f445cf57c12f70d0016722835ec504cc655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9746f445cf57c12f70d0016722835ec504cc655/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79754bd20bdfa64a4ce91e5b4a65154c313b2d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79754bd20bdfa64a4ce91e5b4a65154c313b2d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79754bd20bdfa64a4ce91e5b4a65154c313b2d83"}, {"sha": "abaec437780d818d6ecfb265f215a2b9b4a3035b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abaec437780d818d6ecfb265f215a2b9b4a3035b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abaec437780d818d6ecfb265f215a2b9b4a3035b"}], "stats": {"total": 150, "additions": 33, "deletions": 117}, "files": [{"sha": "3daad5ffaaf15b81a51f7e1382bd704c976ac740", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -121,8 +121,7 @@ class HIRCompileBase : public HIR::HIRVisitor\n   // virtual void visit(WhereClauseItem& item) {}\n   virtual void visit (HIR::LifetimeWhereClauseItem &item) {}\n   virtual void visit (HIR::TypeBoundWhereClauseItem &item) {}\n-  virtual void visit (HIR::ModuleBodied &module) {}\n-  virtual void visit (HIR::ModuleNoBody &module) {}\n+  virtual void visit (HIR::Module &module) {}\n   virtual void visit (HIR::ExternCrate &crate) {}\n   // virtual void visit(UseTree& use_tree) {}\n   virtual void visit (HIR::UseTreeGlob &use_tree) {}"}, {"sha": "af0bc4332f9c3dddbb67d6e62a669ef7215be108", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -313,7 +313,7 @@ class CompileItem : public HIRCompileBase\n       }\n   }\n \n-  void visit (HIR::ModuleBodied &module) override\n+  void visit (HIR::Module &module) override\n   {\n     for (auto &item : module.get_items ())\n       CompileItem::compile (item.get (), ctx, compile_fns);"}, {"sha": "7b7ff6f58c1894174c5f1e1b6f0b92997a577ebf", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -78,10 +78,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     AST::AttrVec outer_attrs;\n \n     translated\n-      = new HIR::ModuleBodied (mapping, module.get_name (), module.get_locus (),\n-\t\t\t       std::move (items), std::move (vis),\n-\t\t\t       std::move (inner_attrs),\n-\t\t\t       std::move (outer_attrs));\n+      = new HIR::Module (mapping, module.get_name (), module.get_locus (),\n+\t\t\t std::move (items), std::move (vis),\n+\t\t\t std::move (inner_attrs), std::move (outer_attrs));\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),"}, {"sha": "41ae398bcb855dddd80e7ab627484160090deffb", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -162,8 +162,6 @@ struct FunctionParam;\n struct Visibility;\n class VisItem;\n class Module;\n-class ModuleBodied;\n-class ModuleNoBody;\n class ExternCrate;\n class UseTree;\n class UseTreeGlob;"}, {"sha": "ecc282a57b2d9e0fa11b4200464585eb5fbe8255", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -169,17 +169,9 @@ Item::as_string () const\n \n std::string\n Module::as_string () const\n-{\n-  std::string vis_item = VisItem::as_string ();\n-\n-  return vis_item + \"mod \" + module_name;\n-}\n-\n-std::string\n-ModuleBodied::as_string () const\n {\n   // get module string for \"[vis] mod [name]\"\n-  std::string str = Module::as_string ();\n+  std::string str = VisItem::as_string () + \"mod \" + module_name;\n \n   // inner attributes\n   str += \"\\n inner attributes: \";\n@@ -222,16 +214,6 @@ ModuleBodied::as_string () const\n   return str + \"\\n\";\n }\n \n-std::string\n-ModuleNoBody::as_string () const\n-{\n-  std::string str = Module::as_string ();\n-\n-  str += \"\\n no body (reference to external file)\";\n-\n-  return str + \"\\n\";\n-}\n-\n std::string\n StaticItem::as_string () const\n {\n@@ -3794,7 +3776,7 @@ MaybeNamedParam::as_string () const\n /* Override that calls the function recursively on all items contained within\n  * the module. */\n void\n-ModuleBodied::add_crate_name (std::vector<std::string> &names) const\n+Module::add_crate_name (std::vector<std::string> &names) const\n {\n   /* TODO: test whether module has been 'cfg'-ed out to determine whether to\n    * exclude it from search */\n@@ -4266,13 +4248,7 @@ TypeBoundWhereClauseItem::accept_vis (HIRVisitor &vis)\n }\n \n void\n-ModuleBodied::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-ModuleNoBody::accept_vis (HIRVisitor &vis)\n+Module::accept_vis (HIRVisitor &vis)\n {\n   vis.visit (*this);\n }"}, {"sha": "7a05f02067b3fc933d4b397f59700ecb72dafd9b", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 18, "deletions": 69, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -644,26 +644,6 @@ class Module : public VisItem\n {\n   Identifier module_name;\n   Location locus;\n-\n-protected:\n-  // Protected constructor\n-  Module (Analysis::NodeMapping mappings, Identifier module_name,\n-\t  Visibility visibility, Location locus,\n-\t  AST::AttrVec outer_attrs = AST::AttrVec ())\n-    : VisItem (std::move (mappings), std::move (visibility),\n-\t       std::move (outer_attrs)),\n-      module_name (module_name), locus (locus)\n-  {}\n-\n-public:\n-  std::string as_string () const override;\n-\n-  Location get_locus () const { return locus; }\n-};\n-\n-// Module with a body, defined in file\n-class ModuleBodied : public Module\n-{\n   // bool has_inner_attrs;\n   AST::AttrVec inner_attrs;\n   // bool has_items;\n@@ -679,30 +659,30 @@ class ModuleBodied : public Module\n   bool has_inner_attrs () const { return !inner_attrs.empty (); }\n \n   // Full constructor\n-  ModuleBodied (Analysis::NodeMapping mappings, Identifier name, Location locus,\n-\t\tstd::vector<std::unique_ptr<Item> > items\n-\t\t= std::vector<std::unique_ptr<Item> > (),\n-\t\tVisibility visibility = Visibility::create_error (),\n-\t\tAST::AttrVec inner_attrs = AST::AttrVec (),\n-\t\tAST::AttrVec outer_attrs = AST::AttrVec ())\n-    : Module (std::move (mappings), std::move (name), std::move (visibility),\n-\t      locus, std::move (outer_attrs)),\n+  Module (Analysis::NodeMapping mappings, Identifier module_name,\n+\t  Location locus, std::vector<std::unique_ptr<Item> > items,\n+\t  Visibility visibility = Visibility::create_error (),\n+\t  AST::AttrVec inner_attrs = AST::AttrVec (),\n+\t  AST::AttrVec outer_attrs = AST::AttrVec ())\n+    : VisItem (std::move (mappings), std::move (visibility),\n+\t       std::move (outer_attrs)),\n+      module_name (module_name), locus (locus),\n       inner_attrs (std::move (inner_attrs)), items (std::move (items))\n   {}\n \n   // Copy constructor with vector clone\n-  ModuleBodied (ModuleBodied const &other)\n-    : Module (other), inner_attrs (other.inner_attrs)\n+  Module (Module const &other)\n+    : VisItem (other), inner_attrs (other.inner_attrs)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n       items.push_back (e->clone_item ());\n   }\n \n   // Overloaded assignment operator with vector clone\n-  ModuleBodied &operator= (ModuleBodied const &other)\n+  Module &operator= (Module const &other)\n   {\n-    Module::operator= (other);\n+    VisItem::operator= (other);\n     inner_attrs = other.inner_attrs;\n \n     items.reserve (other.items.size ());\n@@ -713,8 +693,8 @@ class ModuleBodied : public Module\n   }\n \n   // move constructors\n-  ModuleBodied (ModuleBodied &&other) = default;\n-  ModuleBodied &operator= (ModuleBodied &&other) = default;\n+  Module (Module &&other) = default;\n+  Module &operator= (Module &&other) = default;\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -724,48 +704,17 @@ class ModuleBodied : public Module\n    * the module. */\n   void add_crate_name (std::vector<std::string> &names) const override;\n \n-protected:\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  ModuleBodied *clone_item_impl () const override\n-  {\n-    return new ModuleBodied (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  /*virtual ModuleBodied* clone_statement_impl() const override {\n-      return new ModuleBodied(*this);\n-  }*/\n-};\n-\n-// Module without a body, loaded from external file\n-class ModuleNoBody : public Module\n-{\n-public:\n-  std::string as_string () const override;\n-\n-  // Full constructor\n-  ModuleNoBody (Analysis::NodeMapping mappings, Identifier name,\n-\t\tVisibility visibility, AST::AttrVec outer_attrs, Location locus)\n-    : Module (std::move (mappings), std::move (name), std::move (visibility),\n-\t      locus, std::move (outer_attrs))\n-  {}\n-\n-  void accept_vis (HIRVisitor &vis) override;\n+  Location get_locus () const { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n-  ModuleNoBody *clone_item_impl () const override\n-  {\n-    return new ModuleNoBody (*this);\n-  }\n+  Module *clone_item_impl () const override { return new Module (*this); }\n \n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n-  /*virtual ModuleNoBody* clone_statement_impl() const override {\n-      return new ModuleNoBody(*this);\n+  /*virtual Module* clone_statement_impl() const override {\n+      return new Module(*this);\n   }*/\n };\n "}, {"sha": "637254349f38998c717d6853c8bf60c9758b5aba", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -102,8 +102,7 @@ class HIRVisitor\n   virtual void visit (TypeParam &param) = 0;\n   virtual void visit (LifetimeWhereClauseItem &item) = 0;\n   virtual void visit (TypeBoundWhereClauseItem &item) = 0;\n-  virtual void visit (ModuleBodied &module) = 0;\n-  virtual void visit (ModuleNoBody &module) = 0;\n+  virtual void visit (Module &module) = 0;\n   virtual void visit (ExternCrate &crate) = 0;\n   virtual void visit (UseTreeGlob &use_tree) = 0;\n   virtual void visit (UseTreeList &use_tree) = 0;"}, {"sha": "229643fbd04419c8109c49b68908fe21738eb905", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -117,8 +117,7 @@ class MarkLiveBase : public HIR::HIRVisitor\n \n   virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n   virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n-  virtual void visit (HIR::ModuleBodied &) override {}\n-  virtual void visit (HIR::ModuleNoBody &) override {}\n+  virtual void visit (HIR::Module &) override {}\n   virtual void visit (HIR::ExternCrate &) override {}\n \n   virtual void visit (HIR::UseTreeGlob &) override {}"}, {"sha": "1829b85f125969d3c1321a4cf96eeaa6fb5a1136", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -120,8 +120,7 @@ class ConstFoldBase : public HIR::HIRVisitor\n \n   virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n   virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n-  virtual void visit (HIR::ModuleBodied &) override {}\n-  virtual void visit (HIR::ModuleNoBody &) override {}\n+  virtual void visit (HIR::Module &) override {}\n   virtual void visit (HIR::ExternCrate &) override {}\n \n   virtual void visit (HIR::UseTreeGlob &) override {}"}, {"sha": "305081498520052997d25a3a44c29849d90712e8", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -121,8 +121,7 @@ class TypeCheckBase : public HIR::HIRVisitor\n \n   virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n   virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n-  virtual void visit (HIR::ModuleBodied &) override {}\n-  virtual void visit (HIR::ModuleNoBody &) override {}\n+  virtual void visit (HIR::Module &) override {}\n   virtual void visit (HIR::ExternCrate &) override {}\n \n   virtual void visit (HIR::UseTreeGlob &) override {}"}, {"sha": "ab32f57a36132c229bce3f9e70c5c80cc9fe8fd7", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -169,7 +169,7 @@ class TypeCheckItem : public TypeCheckBase\n       expected_ret_tyty->unify (block_expr_ty);\n   }\n \n-  void visit (HIR::ModuleBodied &module) override\n+  void visit (HIR::Module &module) override\n   {\n     for (auto &item : module.get_items ())\n       TypeCheckItem::Resolve (item.get ());"}, {"sha": "5bffe137f9d18051885cebc46edc9455d2c52b3b", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -101,7 +101,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     context->insert_type (struct_decl.get_mappings (), type);\n   }\n \n-  void visit (HIR::ModuleBodied &module) override\n+  void visit (HIR::Module &module) override\n   {\n     for (auto &item : module.get_items ())\n       TypeCheckTopLevel::Resolve (item.get ());"}, {"sha": "8146c6eaa70e1465c5ccfb971ae62e752047eda7", "filename": "gcc/rust/typecheck/rust-hir-type-check-util.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9746f445cf57c12f70d0016722835ec504cc655/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h?ref=e9746f445cf57c12f70d0016722835ec504cc655", "patch": "@@ -115,8 +115,7 @@ class SimpleHirVisitor : public HIR::HIRVisitor\n \n   virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n   virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n-  virtual void visit (HIR::ModuleBodied &) override {}\n-  virtual void visit (HIR::ModuleNoBody &) override {}\n+  virtual void visit (HIR::Module &) override {}\n   virtual void visit (HIR::ExternCrate &) override {}\n \n   virtual void visit (HIR::UseTreeGlob &) override {}"}]}