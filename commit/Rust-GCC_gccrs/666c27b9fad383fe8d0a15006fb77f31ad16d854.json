{"sha": "666c27b9fad383fe8d0a15006fb77f31ad16d854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2YzI3YjlmYWQzODNmZThkMGExNTAwNmZiNzdmMzFhZDE2ZDg1NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-25T17:04:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-25T17:04:45Z"}, "message": "cfgrtl.c, [...]: Fix comment typos.\n\ngcc/\n\t* cfgrtl.c, dbxout.c, tree.def, config/darwin.h,\n\tconfig/arm/arm.c, objc/objc-act.c: Fix comment typos.\n\t* doc/invoke.texi: Fix a typo.\n\ncp/\n\t* cxx-pretty-print.c: Fix comment typos.\n\nFrom-SVN: r79956", "tree": {"sha": "a07fa2ef52cb57e6407820f14274be6122b01dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a07fa2ef52cb57e6407820f14274be6122b01dbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/666c27b9fad383fe8d0a15006fb77f31ad16d854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666c27b9fad383fe8d0a15006fb77f31ad16d854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666c27b9fad383fe8d0a15006fb77f31ad16d854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666c27b9fad383fe8d0a15006fb77f31ad16d854/comments", "author": null, "committer": null, "parents": [{"sha": "43a21dfc46151a5f50f7372fda42b6eba36950c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a21dfc46151a5f50f7372fda42b6eba36950c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a21dfc46151a5f50f7372fda42b6eba36950c9"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "f3be4d5c3fbc6ae84f30e12fa45e470bee74fbeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -1,3 +1,9 @@\n+2004-03-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cfgrtl.c, dbxout.c, tree.def, config/darwin.h,\n+\tconfig/arm/arm.c, objc/objc-act.c: Fix comment typos.\n+\t* doc/invoke.texi: Fix a typo.\n+\n 2004-03-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR optimization/9707."}, {"sha": "c292c7ad9741ba86b2994940bb6f5c2c1641e30f", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -2105,7 +2105,7 @@ rtl_verify_flow_info (void)\n \t      break;\n \n \t    case CODE_LABEL:\n-\t      /* An addr_vec is placed outside any block block.  */\n+\t      /* An addr_vec is placed outside any basic block.  */\n \t      if (NEXT_INSN (x)\n \t\t  && GET_CODE (NEXT_INSN (x)) == JUMP_INSN\n \t\t  && (GET_CODE (PATTERN (NEXT_INSN (x))) == ADDR_DIFF_VEC"}, {"sha": "1c42ad0046cf635de9d29789dcc9d6729c7d0871", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -2288,7 +2288,7 @@ arm_function_arg (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n     /* Compute operand 2 of the call insn.  */\n     return GEN_INT (pcum->call_cookie);\n \n-  /* Only allow splitting an arg between regs and memory if all preceeding\n+  /* Only allow splitting an arg between regs and memory if all preceding\n      args were allocated to regs.  For args passed by reference we only count\n      the reference pointer.  */\n   if (pcum->can_split)\n@@ -9909,8 +9909,8 @@ arm_get_frame_offsets (void)\n   if (reload_completed)\n     return offsets;\n \n-  /* Initialy this is the size of the local variables.  It will translated\n-     into an offset once we have determined the size of preceeding data.  */\n+  /* Initially this is the size of the local variables.  It will translated\n+     into an offset once we have determined the size of preceding data.  */\n   frame_size = ROUND_UP_WORD (get_frame_size ());\n \n   leaf = leaf_function_p ();\n@@ -10013,7 +10013,7 @@ arm_get_frame_offsets (void)\n }\n \n \n-/* Calculate the realative offsets for the different stack pointers.  Positive\n+/* Calculate the relative offsets for the different stack pointers.  Positive\n    offsets are in the direction of stack growth.  */\n \n unsigned int"}, {"sha": "2e7ee24396309b4e76a597a26e12f80299a15a75", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -341,7 +341,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n #undef USE_COMMON_FOR_ONE_ONLY\n #define USE_COMMON_FOR_ONE_ONLY 0\n \n-/* The Darwin linker doesn't like explicit template instantions to be\n+/* The Darwin linker doesn't like explicit template instantiations to be\n    coalesced, because it doesn't want coalesced symbols to appear in\n    a static archive's table of contents. */\n #undef TARGET_EXPLICIT_INSTANTIATIONS_ONE_ONLY"}, {"sha": "e59e9c1a9eca7c0892345986a4719003e17b3577", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -1,3 +1,7 @@\n+2004-03-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cxx-pretty-print.c: Fix comment typos.\n+\n 2004-03-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cxx-pretty-print.c, cxx-pretty-print.h, decl.h, friend.c:"}, {"sha": "a07f0090871b43b0b42943fab2ea81fa9bdd9141", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -198,7 +198,7 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n \n /* Pretty-print out the token sequence \":: template\" in template codes\n    where it is needed to \"inline declare\" the (following) member as\n-   a template.  This situtation arises when SCOPE of T is dependent\n+   a template.  This situation arises when SCOPE of T is dependent\n    on template parameters.  */\n \n static inline void\n@@ -242,7 +242,7 @@ pp_cxx_qualified_id (cxx_pretty_printer *pp, tree t)\n \n       /* In Standard C++, functions cannot possibly be used as\n          nested-name-specifiers.  However, there are situations where\n-         is \"makes sense\" to output the surrouding function name for the\n+         is \"makes sense\" to output the surrounding function name for the\n          purpose of emphasizing on the scope kind.  Just printing the\n          function name might not be sufficient as it may be overloaded; so,\n          we decorate the function with its signature too."}, {"sha": "99d2767d962270c5d6dcee536ecbdc94c4c73bed", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -884,8 +884,8 @@ dbxout_type_fields (tree type)\n      field that we can support.  */\n   for (tem = TYPE_FIELDS (type); tem; tem = TREE_CHAIN (tem))\n     {\n-\n-      /* If on of the nodes is an error_mark or its type is then return early.  */\n+      /* If one of the nodes is an error_mark or its type is then\n+\t return early.  */\n       if (tem == error_mark_node || TREE_TYPE (tem) == error_mark_node)\n \treturn;\n "}, {"sha": "d9ef797bc5ed773e10b64757b1c039a905acbf06", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -6653,7 +6653,7 @@ if the underlying ABI supports it.\n Specifying the larger number can produce faster, more efficient code, but\n can also increase the size of the program.  Different values are potentially\n incompatible.  Code compiled with one value cannot necessarily expect to\n-work with code or libraries compiled with annother value, if they exchange\n+work with code or libraries compiled with another value, if they exchange\n information using structures or unions.\n \n @item -mabort-on-noreturn"}, {"sha": "ae0a98e537128341a57572992f4b08e94292bf7e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -3304,7 +3304,7 @@ build_objc_exception_stuff (void)\n   finish_struct (objc_exception_data_template, field_decl_chain, NULL_TREE);\n \n   /* int _setjmp(...); */\n-  /* If the user includes <setjmp.h>, this shall be superceded by\n+  /* If the user includes <setjmp.h>, this shall be superseded by\n      'int _setjmp(jmp_buf);' */\n   temp_type = build_function_type (integer_type_node, NULL_TREE);\n   objc_setjmp_decl\n@@ -5536,7 +5536,7 @@ receiver_is_class_object (tree receiver, int self, int super)\n       && (exp = TREE_OPERAND (exp, 0))\n       && TREE_CODE (exp) == FUNCTION_DECL\n       /* For some reason, we sometimes wind up with multiple FUNCTION_DECL\n-\t prototypes for objc_get_class().  Thankfuly, they seem to share the\n+\t prototypes for objc_get_class().  Thankfully, they seem to share the\n \t same function type.  */\n       && TREE_TYPE (exp) == TREE_TYPE (objc_get_class_decl)\n       && !strcmp (IDENTIFIER_POINTER (DECL_NAME (exp)), TAG_GETCLASS)\n@@ -9015,7 +9015,7 @@ handle_impent (struct imp_entry *impent)\n     }\n }\n \f\n-/* The Fix-and-Countinue functionality available in Mac OS X 10.3 and\n+/* The Fix-and-Continue functionality available in Mac OS X 10.3 and\n    later requires that ObjC translation units participating in F&C be\n    specially marked.  The following routine accomplishes this.  */\n "}, {"sha": "afdeadcd1546da76f796de1f74ad7aaa6d3e1959", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666c27b9fad383fe8d0a15006fb77f31ad16d854/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=666c27b9fad383fe8d0a15006fb77f31ad16d854", "patch": "@@ -553,7 +553,7 @@ DEFTREECODE (CLEANUP_POINT_EXPR, \"cleanup_point_expr\", 'e', 1)\n    fact that the expression for the array contains the dereference of\n    the fat pointer that obtained the array pointer.  */\n \n-/* Denotes a record to later be substitued before evaluating this expression.\n+/* Denotes a record to later be substituted before evaluating this expression.\n    The type of this expression is used to find the record to replace it.  */\n DEFTREECODE (PLACEHOLDER_EXPR, \"placeholder_expr\", 'x', 0)\n "}]}