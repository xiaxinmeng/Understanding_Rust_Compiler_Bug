{"sha": "af766f2db73ec901611dc9233b8e9150ce182e77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3NjZmMmRiNzNlYzkwMTYxMWRjOTIzM2I4ZTkxNTBjZTE4MmU3Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-14T18:33:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-14T18:33:12Z"}, "message": "sse.md (copysign<mode>3): New expander.\n\n\t* config/i386/sse.md (copysign<mode>3): New expander.\n\t* config/i386/i386-protos.h (ix86_build_signbit_mask): New prototype.\n\t* config/i386/i386.c (ix86_build_signbit_mask): Make public.\n\tUse ix86_build_const_vector.\n\t(enum ix86_builtins): Add IX86_BUILTIN_CPYSGNPS and\n\tIX86_BUILTIN_CPYSGNPD.\n\t(builtin_description): Add __builtin_ia32_copysignps and\n\t__builtin_ia32_copysignpd.\n\t(ix86_builtin_vectorized_function): Handle BUILT_IN_COPYSIGN\n\tand BUILT_IN_COPYSIGNF.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse-copysignf-vec.c: New test.\n\t* gcc.target/i386/sse2-copysign-vec.c: Ditto.\n\nFrom-SVN: r149639", "tree": {"sha": "b5c9821f82edefee5e71062dba829bf08dc7f770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5c9821f82edefee5e71062dba829bf08dc7f770"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af766f2db73ec901611dc9233b8e9150ce182e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af766f2db73ec901611dc9233b8e9150ce182e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af766f2db73ec901611dc9233b8e9150ce182e77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af766f2db73ec901611dc9233b8e9150ce182e77/comments", "author": null, "committer": null, "parents": [{"sha": "8353dd9a26485ad8cdc603d98efd8e711f7d2154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8353dd9a26485ad8cdc603d98efd8e711f7d2154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8353dd9a26485ad8cdc603d98efd8e711f7d2154"}], "stats": {"total": 139, "additions": 123, "deletions": 16}, "files": [{"sha": "dc77e9dfe5a87663cb48265eb9e4c1cbfe14703c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af766f2db73ec901611dc9233b8e9150ce182e77", "patch": "@@ -1,3 +1,16 @@\n+2009-07-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (copysign<mode>3): New expander.\n+\t* config/i386/i386-protos.h (ix86_build_signbit_mask): New prototype.\n+\t* config/i386/i386.c (ix86_build_signbit_mask): Make public.\n+\tUse ix86_build_const_vector.\n+\t(enum ix86_builtins): Add IX86_BUILTIN_CPYSGNPS and\n+\tIX86_BUILTIN_CPYSGNPD.\n+\t(builtin_description): Add __builtin_ia32_copysignps and\n+\t__builtin_ia32_copysignpd.\n+\t(ix86_builtin_vectorized_function): Handle BUILT_IN_COPYSIGN\n+\tand BUILT_IN_COPYSIGNF.\n+\n 2009-07-13  Jason Merrill  <jason@redhat.com>\n \n \t* builtins.c (can_trust_pointer_alignment): New fn.\n@@ -16,6 +29,7 @@\n \t* dwarf2.out.c (gen_type_die_with_usage): Added comment.\n \n 2009-07-14  Richard Guenther  <rguenther@suse.de>\n+\t    Andrey Belevantsev <abel@ispras.ru>\n \n \tPR middle-end/40745\n \t* cfgexpand.c (partition_stack_vars): Do not bother to update\n@@ -66,13 +80,12 @@\n \n 2009-07-13  Ghassan Shobaki  <ghassan.shobaki@amd.com>\n \t\n-\t* haifa-sched.c \n-\t(rank_for_schedule): Introduced flags to enable/disable \n-\tindividual scheduling heuristics.\n-\t* common.opt: Introduced flags to enable/disable\n-        individual heuristics in the scheduler.\t\n-\t* doc/invoke.texi: Introduced flags to enable/disable\n-        individual heuristics in the scheduler.\n+\t* haifa-sched.c (rank_for_schedule): Introduced flags to\n+\tenable/disable individual scheduling heuristics.\n+\t* common.opt: Introduced flags to enable/disable individual\n+\theuristics in the scheduler.\t\n+\t* doc/invoke.texi: Introduced flags to enable/disable individual\n+\theuristics in the scheduler.\n \t\n 2009-07-13  Kai Tietz  <kai.tietz@onevision.com>\n "}, {"sha": "324062ec7dfe7cdbe13489eddb8d0d1ea5325768", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=af766f2db73ec901611dc9233b8e9150ce182e77", "patch": "@@ -89,6 +89,7 @@ extern bool ix86_agi_dependent (rtx set_insn, rtx use_insn);\n extern void ix86_expand_unary_operator (enum rtx_code, enum machine_mode,\n \t\t\t\t\trtx[]);\n extern rtx ix86_build_const_vector (enum machine_mode, bool, rtx);\n+extern rtx ix86_build_signbit_mask (enum machine_mode, bool, bool);\n extern void ix86_split_convert_uns_si_sse (rtx[]);\n extern void ix86_expand_convert_uns_didf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sixf_sse (rtx, rtx);"}, {"sha": "99963be27ca93edad4d1d770cd7f69b65af22407", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=af766f2db73ec901611dc9233b8e9150ce182e77", "patch": "@@ -14017,7 +14017,7 @@ ix86_build_const_vector (enum machine_mode mode, bool vect, rtx value)\n    all elements of the vector register.  If INVERT is true, then create\n    a mask excluding the sign bit.  */\n \n-static rtx\n+rtx\n ix86_build_signbit_mask (enum machine_mode mode, bool vect, bool invert)\n {\n   enum machine_mode vec_mode, imode;\n@@ -14181,15 +14181,9 @@ ix86_expand_copysign (rtx operands[])\n \t    op0 = CONST0_RTX (vmode);\n \t  else\n \t    {\n-\t      rtvec v;\n-\n-\t      if (mode == SFmode)\n-\t\tv = gen_rtvec (4, op0, CONST0_RTX (SFmode),\n-\t\t\t       CONST0_RTX (SFmode), CONST0_RTX (SFmode));\n-\t      else\n-\t\tv = gen_rtvec (2, op0, CONST0_RTX (DFmode));\n+\t      rtx v = ix86_build_const_vector (mode, false, op0);\n \n-\t      op0 = force_reg (vmode, gen_rtx_CONST_VECTOR (vmode, v));\n+\t      op0 = force_reg (vmode, v);\n \t    }\n \t}\n       else if (op0 != CONST0_RTX (mode))\n@@ -20910,6 +20904,10 @@ enum ix86_builtins\n   IX86_BUILTIN_FABSQ,\n   IX86_BUILTIN_COPYSIGNQ,\n \n+  /* Vectorizer support builtins.  */\n+  IX86_BUILTIN_CPYSGNPS,\n+  IX86_BUILTIN_CPYSGNPD,\n+\n   /* SSE5 instructions */\n   IX86_BUILTIN_FMADDSS,\n   IX86_BUILTIN_FMADDSD,\n@@ -21746,6 +21744,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_iorv4sf3, \"__builtin_ia32_orps\", IX86_BUILTIN_ORPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_xorv4sf3,  \"__builtin_ia32_xorps\", IX86_BUILTIN_XORPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n \n+  { OPTION_MASK_ISA_SSE, CODE_FOR_copysignv4sf3,  \"__builtin_ia32_copysignps\", IX86_BUILTIN_CPYSGNPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n+\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movss,  \"__builtin_ia32_movss\", IX86_BUILTIN_MOVSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movhlps_exp,  \"__builtin_ia32_movhlps\", IX86_BUILTIN_MOVHLPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movlhps_exp,  \"__builtin_ia32_movlhps\", IX86_BUILTIN_MOVLHPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n@@ -21843,6 +21843,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_iorv2df3, \"__builtin_ia32_orpd\", IX86_BUILTIN_ORPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_xorv2df3,  \"__builtin_ia32_xorpd\", IX86_BUILTIN_XORPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n \n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_copysignv2df3,  \"__builtin_ia32_copysignpd\", IX86_BUILTIN_CPYSGNPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n+\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movsd,  \"__builtin_ia32_movsd\", IX86_BUILTIN_MOVSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_unpckhpd_exp, \"__builtin_ia32_unpckhpd\", IX86_BUILTIN_UNPCKHPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_unpcklpd_exp, \"__builtin_ia32_unpcklpd\", IX86_BUILTIN_UNPCKLPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n@@ -25729,6 +25731,18 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \treturn ix86_builtins[IX86_BUILTIN_CVTPS2DQ];\n       break;\n \n+    case BUILT_IN_COPYSIGN:\n+      if (out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn ix86_builtins[IX86_BUILTIN_CPYSGNPD];\n+      break;\n+\n+    case BUILT_IN_COPYSIGNF:\n+      if (out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn ix86_builtins[IX86_BUILTIN_CPYSGNPS];\n+      break;\n+\n     default:\n       ;\n     }"}, {"sha": "8980bf21ac221a759c012d6e7b8078bda5c3b1fd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=af766f2db73ec901611dc9233b8e9150ce182e77", "patch": "@@ -1594,6 +1594,26 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"copysign<mode>3\"\n+  [(set (match_dup 5)\n+\t(and:SSEMODEF2P (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")\n+\t\t\t(match_dup 3)))\n+   (set (match_dup 6)\n+\t(and:SSEMODEF2P (match_operand:SSEMODEF2P 2 \"register_operand\" \"\")\n+\t\t\t(match_dup 4)))\n+   (set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n+\t(ior:SSEMODEF2P (match_dup 5) (match_dup 6)))]\n+  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n+{\n+  int i;\n+\n+  for (i = 3; i < 7; i++)\n+    operands[i] = gen_reg_rtx (<MODE>mode);\n+\n+  operands[3] = ix86_build_signbit_mask (<ssescalarmode>mode, 1, 1);\n+  operands[4] = ix86_build_signbit_mask (<ssescalarmode>mode, 1, 0);\n+})\n+\n ;; Also define scalar versions.  These are used for abs, neg, and\n ;; conditional move.  Using subregs into vector modes causes register\n ;; allocation lossage.  These patterns do not allow memory operands"}, {"sha": "c0d270c8bdd38155b79995487fc080403cfae678", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af766f2db73ec901611dc9233b8e9150ce182e77", "patch": "@@ -1,3 +1,8 @@\n+2009-07-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse-copysignf-vec.c: New test.\n+\t* gcc.target/i386/sse2-copysign-vec.c: Ditto.\n+\n 2009-07-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/37276"}, {"sha": "9342e2c7187eeaa23ab4ac5c59a52fd82299c0bc", "filename": "gcc/testsuite/gcc.target/i386/sse-copysignf-vec.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-copysignf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-copysignf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-copysignf-vec.c?ref=af766f2db73ec901611dc9233b8e9150ce182e77", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse\" } */\n+\n+#include \"sse-check.h\"\n+\n+extern float copysignf (float, float);\n+\n+#define N 16\n+\n+float a[N] = {-0.1f,-3.2f,-6.3f,-9.4f,-12.5f,-15.6f,-18.7f,-21.8f,24.9f,27.1f,30.2f,33.3f,36.4f,39.5f,42.6f,45.7f};\n+float b[N] = {-1.2f,3.4f,-5.6f,7.8f,-9.0f,1.0f,-2.0f,3.0f,-4.0f,-5.0f,6.0f,7.0f,-8.0f,-9.0f,10.0f,11.0f};\n+float r[N];\n+\n+static void\n+sse_test (void)\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    r[i] = copysignf (a[i], b[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (r[i] != copysignf (a[i], b[i]))\n+      abort ();\n+}\n+"}, {"sha": "710aa640fd04c78ea315f63f6562ea1f30d086e4", "filename": "gcc/testsuite/gcc.target/i386/sse2-copysign-vec.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-copysign-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af766f2db73ec901611dc9233b8e9150ce182e77/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-copysign-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-copysign-vec.c?ref=af766f2db73ec901611dc9233b8e9150ce182e77", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+extern double copysign (double, double);\n+\n+#define N 16\n+\n+double a[N] = {-0.1,-3.2,-6.3,-9.4,-12.5,-15.6,-18.7,-21.8,24.9,27.1,30.2,33.3,36.4,39.5,42.6,45.7};\n+double b[N] = {-1.2,3.4,-5.6,7.8,-9.0,1.0,-2.0,3.0,-4.0,-5.0,6.0,7.0,-8.0,-9.0,10.0,11.0};\n+double r[N];\n+\n+static void\n+sse2_test (void)\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    r[i] = copysign (a[i], b[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (r[i] != copysign (a[i], b[i]))\n+      abort ();\n+}\n+"}]}