{"sha": "b7d3d70f77cc0e428dca48fa373d242b8c4c50be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkM2Q3MGY3N2NjMGU0MjhkY2E0OGZhMzczZDI0MmI4YzRjNTBiZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-20T21:03:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-20T21:03:10Z"}, "message": "random.tcc (uniform_int_distribution<>::operator()): Fix to work well for arbitrary urng.max() and urng.min().\n\n2010-06-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Kai-Uwe Bux  <bux@kubux.net>\n\n\t* include/bits/random.tcc (uniform_int_distribution<>::operator()):\n\tFix to work well for arbitrary urng.max() and urng.min().\n\nCo-Authored-By: Kai-Uwe Bux <bux@kubux.net>\n\nFrom-SVN: r161054", "tree": {"sha": "fc707960d512be50eae1db030f62475a428b64cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc707960d512be50eae1db030f62475a428b64cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7d3d70f77cc0e428dca48fa373d242b8c4c50be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d3d70f77cc0e428dca48fa373d242b8c4c50be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d3d70f77cc0e428dca48fa373d242b8c4c50be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d3d70f77cc0e428dca48fa373d242b8c4c50be/comments", "author": null, "committer": null, "parents": [{"sha": "6e2f19568ad7378a11073048ffb2372045dc665a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2f19568ad7378a11073048ffb2372045dc665a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2f19568ad7378a11073048ffb2372045dc665a"}], "stats": {"total": 74, "additions": 57, "deletions": 17}, "files": [{"sha": "2d9791587110d79b336ba477cc748a8c0c34e81a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3d70f77cc0e428dca48fa373d242b8c4c50be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3d70f77cc0e428dca48fa373d242b8c4c50be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b7d3d70f77cc0e428dca48fa373d242b8c4c50be", "patch": "@@ -1,3 +1,9 @@\n+2010-06-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Kai-Uwe Bux  <bux@kubux.net>\n+\n+\t* include/bits/random.tcc (uniform_int_distribution<>::operator()):\n+\tFix to work well for arbitrary urng.max() and urng.min().\n+\n 2010-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/32618"}, {"sha": "690af186f96ba6293a4a968076637c079c01baea", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d3d70f77cc0e428dca48fa373d242b8c4c50be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d3d70f77cc0e428dca48fa373d242b8c4c50be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=b7d3d70f77cc0e428dca48fa373d242b8c4c50be", "patch": "@@ -828,27 +828,61 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __param)\n       {\n-\t// XXX Must be fixed to work well for *arbitrary* __urng.max(),\n-\t// __urng.min(), __param.b(), __param.a().  Currently works fine only\n-\t// in the most common case __urng.max() - __urng.min() >=\n-\t// __param.b() - __param.a(), with __urng.max() > __urng.min() >= 0.\n \ttypedef typename std::make_unsigned<typename\n-\t  _UniformRandomNumberGenerator::result_type>::type __urntype;\n+\t  _UniformRandomNumberGenerator::result_type>::type __urngtype;\n \ttypedef typename std::make_unsigned<result_type>::type __utype;\n-\ttypedef typename std::conditional<(sizeof(__urntype) > sizeof(__utype)),\n-\t  __urntype, __utype>::type __uctype;\n+\ttypedef typename std::conditional<(sizeof(__urngtype)\n+\t\t\t\t\t   > sizeof(__utype)),\n+\t  __urngtype, __utype>::type __uctype;\n \n-\tresult_type __ret;\n+\tconst __uctype __urngmin = __urng.min();\n+\tconst __uctype __urngmax = __urng.max();\n+\tconst __uctype __urngrange = __urngmax - __urngmin;\n+\tconst __uctype __urange\n+\t  = __uctype(__param.b()) - __uctype(__param.a());\n \n-\tconst __urntype __urnmin = __urng.min();\n-\tconst __urntype __urnmax = __urng.max();\n-\tconst __urntype __urnrange = __urnmax - __urnmin;\n-\tconst __uctype __urange = __param.b() - __param.a();\n-\tconst __uctype __udenom = (__urnrange <= __urange\n-\t\t\t\t   ? 1 : __urnrange / (__urange + 1));\n-\tdo\n-\t  __ret = (__urntype(__urng()) -  __urnmin) / __udenom;\n-\twhile (__ret > __param.b() - __param.a());\n+\t__uctype __ret;\n+\n+\tif (__urngrange > __urange)\n+\t  {\n+\t    // downscaling\n+\t    const __uctype __uerange = __urange + 1; // __urange can be zero\n+\t    const __uctype __scaling = __urngrange / __uerange;\n+\t    const __uctype __past = __uerange * __scaling;\n+\t    do\n+\t      __ret = __uctype(__urng()) - __urngmin;\n+\t    while (__ret >= __past);\n+\t    __ret /= __scaling;\n+\t  }\n+\telse if (__urngrange < __urange)\n+\t  {\n+\t    // upscaling\n+\t    /*\n+\t      Note that every value in [0, urange]\n+\t      can be written uniquely as\n+\n+\t      (urngrange + 1) * high + low\n+\n+\t      where\n+\n+\t      high in [0, urange / (urngrange + 1)]\n+\n+\t      and\n+\t\n+\t      low in [0, urngrange].\n+\t    */\n+\t    __uctype __tmp; // wraparound control\n+\t    do\n+\t      {\n+\t\tconst __uctype __uerngrange = __urngrange + 1;\n+\t\t__tmp = (__uerngrange * operator()\n+\t\t\t (__urng, param_type(0, __urange / __uerngrange)));\n+\t\t__ret = __tmp + (__uctype(__urng()) - __urngmin);\n+\t      }\n+\t    while (__ret > __urange || __ret < __tmp);\n+\t  }\n+\telse\n+\t  __ret = __uctype(__urng()) - __urngmin;\n \n \treturn __ret + __param.a();\n       }"}]}