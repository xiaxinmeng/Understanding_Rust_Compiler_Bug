{"sha": "e33aef11e145996fc550eca07e899f0c756d3802", "node_id": "C_kwDOANBUbNoAKGUzM2FlZjExZTE0NTk5NmZjNTUwZWNhMDdlODk5ZjBjNzU2ZDM4MDI", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-10-20T16:06:31Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-10-20T16:06:31Z"}, "message": "aarch64: Add combine patterns for right shift and narrow\n\nThis adds a simple pattern for combining right shifts and narrows into\nshifted narrows.\n\ni.e.\n\ntypedef short int16_t;\ntypedef unsigned short uint16_t;\n\nvoid foo (uint16_t * restrict a, int16_t * restrict d, int n)\n{\n    for( int i = 0; i < n; i++ )\n      d[i] = (a[i] * a[i]) >> 10;\n}\n\nnow generates:\n\n.L4:\n        ldr     q0, [x0, x3]\n        umull   v1.4s, v0.4h, v0.4h\n        umull2  v0.4s, v0.8h, v0.8h\n        shrn    v1.4h, v1.4s, 10\n        shrn2   v1.8h, v0.4s, 10\n        str     q1, [x1, x3]\n        add     x3, x3, 16\n        cmp     x4, x3\n        bne     .L4\n\ninstead of:\n\n.L4:\n        ldr     q0, [x0, x3]\n        umull   v1.4s, v0.4h, v0.4h\n        umull2  v0.4s, v0.8h, v0.8h\n        sshr    v1.4s, v1.4s, 10\n        sshr    v0.4s, v0.4s, 10\n        xtn     v1.4h, v1.4s\n        xtn2    v1.8h, v0.4s\n        str     q1, [x1, x3]\n        add     x3, x3, 16\n        cmp     x4, x3\n        bne     .L4\n\nThanks,\nTamar\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md (*aarch64_<srn_op>shrn<mode>_vect,\n\t*aarch64_<srn_op>shrn<mode>2_vect_le,\n\t*aarch64_<srn_op>shrn<mode>2_vect_be): New.\n\t* config/aarch64/iterators.md (srn_op): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/shrn-combine-1.c: New test.\n\t* gcc.target/aarch64/shrn-combine-2.c: New test.\n\t* gcc.target/aarch64/shrn-combine-3.c: New test.\n\t* gcc.target/aarch64/shrn-combine-4.c: New test.", "tree": {"sha": "2148528ad5d2d40d3b653ccbaf1e4f34b129dbc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2148528ad5d2d40d3b653ccbaf1e4f34b129dbc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e33aef11e145996fc550eca07e899f0c756d3802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33aef11e145996fc550eca07e899f0c756d3802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33aef11e145996fc550eca07e899f0c756d3802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33aef11e145996fc550eca07e899f0c756d3802/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98626bf451dea6a28a42d953f7d0bd7659ad4d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98626bf451dea6a28a42d953f7d0bd7659ad4d5"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "5715db4e1e1386e724e4d4defd5e5ed9efd8a874", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=e33aef11e145996fc550eca07e899f0c756d3802", "patch": "@@ -1818,6 +1818,40 @@\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n )\n \n+(define_insn \"*aarch64_<srn_op>shrn<mode>_vect\"\n+  [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n+        (truncate:<VNARROWQ>\n+          (SHIFTRT:VQN (match_operand:VQN 1 \"register_operand\" \"w\")\n+            (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_<vn_mode>\"))))]\n+  \"TARGET_SIMD\"\n+  \"shrn\\\\t%0.<Vntype>, %1.<Vtype>, %2\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"*aarch64_<srn_op>shrn<mode>2_vect_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t  (truncate:<VNARROWQ>\n+\t    (SHIFTRT:VQN (match_operand:VQN 2 \"register_operand\" \"w\")\n+\t      (match_operand:VQN 3 \"aarch64_simd_shift_imm_vec_<vn_mode>\")))))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"shrn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"*aarch64_<srn_op>shrn<mode>2_vect_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (truncate:<VNARROWQ>\n+\t    (SHIFTRT:VQN (match_operand:VQN 2 \"register_operand\" \"w\")\n+\t      (match_operand:VQN 3 \"aarch64_simd_shift_imm_vec_<vn_mode>\")))\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"shrn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n (define_expand \"aarch64_shrn<mode>\"\n   [(set (match_operand:<VNARROWQ> 0 \"register_operand\")\n \t(truncate:<VNARROWQ>"}, {"sha": "aee32dc4e30e8c42e022af9dd8d6691bbf99e91e", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=e33aef11e145996fc550eca07e899f0c756d3802", "patch": "@@ -2003,6 +2003,9 @@\n ;; Op prefix for shift right and accumulate.\n (define_code_attr sra_op [(ashiftrt \"s\") (lshiftrt \"u\")])\n \n+;; op prefix for shift right and narrow.\n+(define_code_attr srn_op [(ashiftrt \"r\") (lshiftrt \"\")])\n+\n ;; Map shift operators onto underlying bit-field instructions\n (define_code_attr bfshift [(ashift \"ubfiz\") (ashiftrt \"sbfx\")\n \t\t\t   (lshiftrt \"ubfx\") (rotatert \"extr\")])"}, {"sha": "a28524662edca8eb149e34c2242091b51a167b71", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-1.c?ref=e33aef11e145996fc550eca07e899f0c756d3802", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+#define TYPE char\n+\n+void foo (unsigned TYPE * restrict a, TYPE * restrict d, int n)\n+{\n+    for( int i = 0; i < n; i++ )\n+      d[i] = (a[i] * a[i]) >> 2;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tshrn\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tshrn2\\t} 1 } } */"}, {"sha": "012135b424f98abadc480e7ef13fcab080d99c28", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-2.c?ref=e33aef11e145996fc550eca07e899f0c756d3802", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+#define TYPE short\n+\n+void foo (unsigned TYPE * restrict a, TYPE * restrict d, int n)\n+{\n+    for( int i = 0; i < n; i++ )\n+      d[i] = (a[i] * a[i]) >> 2;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tshrn\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tshrn2\\t} 1 } } */"}, {"sha": "8b5b360de623b0ada0da1531795ba6b428c7f9e1", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-3.c?ref=e33aef11e145996fc550eca07e899f0c756d3802", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+#define TYPE int\n+\n+void foo (unsigned long long * restrict a, TYPE * restrict d, int n)\n+{\n+    for( int i = 0; i < n; i++ )\n+      d[i] = a[i] >> 3;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tshrn\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tshrn2\\t} 1 } } */"}, {"sha": "fedca7621e2a82df0df9d12b91c5c0c9fd3dfc60", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33aef11e145996fc550eca07e899f0c756d3802/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-4.c?ref=e33aef11e145996fc550eca07e899f0c756d3802", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+#define TYPE long long\n+\n+void foo (unsigned TYPE * restrict a, TYPE * restrict d, int n)\n+{\n+    for( int i = 0; i < n; i++ )\n+      d[i] = (a[i] * a[i]) >> 2;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tshrn\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tshrn2\\t} } } */"}]}