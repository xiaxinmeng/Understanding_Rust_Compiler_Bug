{"sha": "7aad1ae2b29e612611c62b9d30113f82213f1e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FhZDFhZTJiMjllNjEyNjExYzYyYjlkMzAxMTNmODIyMTNmMWUzOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-10-18T21:06:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-10-18T21:06:21Z"}, "message": "forward_list.h: Add C++11 allocator support.\n\n\t* include/bits/forward_list.h: Add C++11 allocator support.\n\t* include/bits/forward_list.tcc: Likewise.\n\t* doc/xml/manual/status_cxx2011.xml: Update.\n\t* testsuite/23_containers/forward_list/allocator/copy.cc: New.\n\t* testsuite/23_containers/forward_list/allocator/copy_assign.cc: New.\n\t* testsuite/23_containers/forward_list/allocator/minimal.cc: New.\n\t* testsuite/23_containers/forward_list/allocator/move_assign.cc: New.\n\t* testsuite/23_containers/forward_list/allocator/noexcept.cc: New.\n\t* testsuite/23_containers/forward_list/allocator/swap.cc: New.\n\nFrom-SVN: r192588", "tree": {"sha": "8001f14558bbc341121d87cefb3693c809dc2cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8001f14558bbc341121d87cefb3693c809dc2cef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aad1ae2b29e612611c62b9d30113f82213f1e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aad1ae2b29e612611c62b9d30113f82213f1e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aad1ae2b29e612611c62b9d30113f82213f1e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aad1ae2b29e612611c62b9d30113f82213f1e38/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14cbb5d84ccf53215f55066a6f07c629986ae9e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14cbb5d84ccf53215f55066a6f07c629986ae9e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14cbb5d84ccf53215f55066a6f07c629986ae9e2"}], "stats": {"total": 495, "additions": 463, "deletions": 32}, "files": [{"sha": "1c92511644e73b68b90e87864f9f24866faefeb8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -1,3 +1,15 @@\n+2012-10-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/forward_list.h: Add C++11 allocator support.\n+\t* include/bits/forward_list.tcc: Likewise.\n+\t* doc/xml/manual/status_cxx2011.xml: Update.\n+\t* testsuite/23_containers/forward_list/allocator/copy.cc: New.\n+\t* testsuite/23_containers/forward_list/allocator/copy_assign.cc: New.\n+\t* testsuite/23_containers/forward_list/allocator/minimal.cc: New.\n+\t* testsuite/23_containers/forward_list/allocator/move_assign.cc: New.\n+\t* testsuite/23_containers/forward_list/allocator/noexcept.cc: New.\n+\t* testsuite/23_containers/forward_list/allocator/swap.cc: New.\n+\n 2012-10-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/formatter.h (_Debug_msg_id): Add"}, {"sha": "ba37e0eccb6d09964233f19361661a37c5d4a27f", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -1378,7 +1378,8 @@ particular release.\n       <entry>23.2.1</entry>\n       <entry>General container requirements</entry>\n       <entry>Partial</entry>\n-      <entry>Only <code>vector</code> meets the requirements\n+      <entry>Only <code>vector</code> and <code>forward_list</code>\n+             meet the requirements\n              relating to allocator use and propagation.</entry>\n     </row>\n     <row>"}, {"sha": "a5c9f434b3509b149b5c4c9043483f103a2f202c", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 62, "deletions": 29, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -266,11 +266,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     struct _Fwd_list_base\n     {\n     protected:\n-      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc> _Alloc_traits;\n+      typedef typename _Alloc_traits::template rebind<_Tp>::other\n+        _Tp_alloc_type;\n \n-      typedef typename _Alloc::template \n+      typedef typename _Alloc_traits::template\n         rebind<_Fwd_list_node<_Tp>>::other _Node_alloc_type;\n \n+      typedef __gnu_cxx::__alloc_traits<_Node_alloc_type> _Node_alloc_traits;\n+\n       struct _Fwd_list_impl \n       : public _Node_alloc_type\n       {\n@@ -312,12 +316,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _Fwd_list_base(const _Fwd_list_base& __lst, const _Node_alloc_type& __a);\n \n-      _Fwd_list_base(_Fwd_list_base&& __lst, const _Node_alloc_type& __a)\n-      : _M_impl(__a)\n-      {\n-\tthis->_M_impl._M_head._M_next = __lst._M_impl._M_head._M_next;\n-\t__lst._M_impl._M_head._M_next = 0;\n-      }\n+      _Fwd_list_base(_Fwd_list_base&& __lst, const _Node_alloc_type& __a);\n \n       _Fwd_list_base(_Fwd_list_base&& __lst)\n       : _M_impl(std::move(__lst._M_get_Node_allocator()))\n@@ -333,7 +332,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _Node*\n       _M_get_node()\n-      { return _M_get_Node_allocator().allocate(1); }\n+      { return _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1); }\n \n       template<typename... _Args>\n         _Node*\n@@ -342,8 +341,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n           _Node* __node = this->_M_get_node();\n           __try\n             {\n-              _M_get_Node_allocator().construct(__node,\n-                                              std::forward<_Args>(__args)...);\n+              _Node_alloc_traits::construct(_M_get_Node_allocator(), __node,\n+                                            std::forward<_Args>(__args)...);\n               __node->_M_next = 0;\n             }\n           __catch(...)\n@@ -360,7 +359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       void\n       _M_put_node(_Node* __p)\n-      { _M_get_Node_allocator().deallocate(__p, 1); }\n+      { _Node_alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }\n \n       _Fwd_list_node_base*\n       _M_erase_after(_Fwd_list_node_base* __pos);\n@@ -413,14 +412,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Fwd_list_node_base                          _Node_base;\n       typedef typename _Base::_Tp_alloc_type               _Tp_alloc_type;\n       typedef typename _Base::_Node_alloc_type             _Node_alloc_type;\n+      typedef typename _Base::_Node_alloc_traits           _Node_alloc_traits;\n+      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>    _Alloc_traits;\n \n     public:\n       // types:\n       typedef _Tp                                          value_type;\n-      typedef typename _Tp_alloc_type::pointer             pointer;\n-      typedef typename _Tp_alloc_type::const_pointer       const_pointer;\n-      typedef typename _Tp_alloc_type::reference           reference;\n-      typedef typename _Tp_alloc_type::const_reference     const_reference;\n+      typedef typename _Alloc_traits::pointer              pointer;\n+      typedef typename _Alloc_traits::const_pointer        const_pointer;\n+      typedef typename _Alloc_traits::reference            reference;\n+      typedef typename _Alloc_traits::const_reference      const_reference;\n  \n       typedef _Fwd_list_iterator<_Tp>                      iterator;\n       typedef _Fwd_list_const_iterator<_Tp>                const_iterator;\n@@ -504,12 +505,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  The %forward_list copy constructor.\n        *  @param  __list  A %forward_list of identical element and allocator\n        *                types.\n-       *\n-       *  The newly-created %forward_list uses a copy of the allocation\n-       *  object used by @a __list.\n        */\n       forward_list(const forward_list& __list)\n-      : _Base(__list._M_get_Node_allocator())\n+      : _Base(_Node_alloc_traits::_S_select_on_copy(\n+                __list._M_get_Node_allocator()))\n       { _M_range_initialize(__list.begin(), __list.end()); }\n \n       /**\n@@ -560,16 +559,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *                types.\n        *\n        *  The contents of @a __list are moved into this %forward_list\n-       *  (without copying). @a __list is a valid, but unspecified\n-       *  %forward_list\n+       *  (without copying, if the allocators permit it).\n+       *  @a __list is a valid, but unspecified %forward_list\n        */\n       forward_list&\n       operator=(forward_list&& __list)\n+      noexcept(_Node_alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\tthis->clear();\n-\tthis->swap(__list);\n+        constexpr bool __move_storage =\n+          _Node_alloc_traits::_S_propagate_on_move_assign()\n+          || _Node_alloc_traits::_S_always_equal();\n+        _M_move_assign(std::move(__list),\n+                       integral_constant<bool, __move_storage>());\n \treturn *this;\n       }\n \n@@ -740,7 +741,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       size_type\n       max_size() const noexcept\n-      { return this->_M_get_Node_allocator().max_size(); }\n+      { return _Node_alloc_traits::max_size(this->_M_get_Node_allocator()); }\n \n       // 23.2.3.3 element access:\n \n@@ -981,8 +982,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       swap(forward_list& __list)\n-      { std::swap(this->_M_impl._M_head._M_next,\n-\t\t  __list._M_impl._M_head._M_next); }\n+      noexcept(_Node_alloc_traits::_S_nothrow_swap())\n+      {\n+        std::swap(this->_M_impl._M_head._M_next,\n+\t\t  __list._M_impl._M_head._M_next);\n+\t_Node_alloc_traits::_S_on_swap(this->_M_get_Node_allocator(),\n+                                       __list._M_get_Node_allocator());\n+      }\n \n       /**\n        *  @brief Resizes the %forward_list to the specified number of\n@@ -1239,6 +1245,33 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // Called by resize(sz).\n       void\n       _M_default_insert_after(const_iterator __pos, size_type __n);\n+\n+      // Called by operator=(forward_list&&)\n+      void\n+      _M_move_assign(forward_list&& __list, std::true_type) noexcept\n+      {\n+        clear();\n+        std::swap(this->_M_impl._M_head._M_next,\n+                  __list._M_impl._M_head._M_next);\n+        std::__alloc_on_move(this->_M_get_Node_allocator(),\n+                             __list._M_get_Node_allocator());\n+      }\n+\n+      // Called by operator=(forward_list&&)\n+      void\n+      _M_move_assign(forward_list&& __list, std::false_type)\n+      {\n+        if (__list._M_get_Node_allocator() == this->_M_get_Node_allocator())\n+          _M_move_assign(std::move(__list), std::true_type());\n+        else\n+          {\n+            // The rvalue's allocator cannot be moved, or is not equal,\n+            // so we need to individually move each element.\n+            this->assign(std::__make_move_if_noexcept_iterator(__list.begin()),\n+                         std::__make_move_if_noexcept_iterator(__list.end()));\n+            __list.clear();\n+          }\n+      }\n     };\n \n   /**"}, {"sha": "5d18a6ebf44e37d8f3b21eb0f7c371819f87c8c7", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -51,6 +51,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         }\n     }\n \n+  template<typename _Tp, typename _Alloc>\n+    _Fwd_list_base<_Tp, _Alloc>::\n+    _Fwd_list_base(_Fwd_list_base&& __lst, const _Node_alloc_type& __a)\n+    : _M_impl(__a)\n+    {\n+      if (__lst._M_get_Node_allocator() == __a)\n+        this->_M_impl._M_head._M_next = __lst._M_impl._M_head._M_next;\n+      else\n+        {\n+          this->_M_impl._M_head._M_next = 0;\n+          _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n+          _Node* __curr = static_cast<_Node*>(__lst._M_impl._M_head._M_next);\n+\n+          while (__curr)\n+            {\n+              __to->_M_next =\n+                _M_create_node(std::move_if_noexcept(__curr->_M_value));\n+              __to = __to->_M_next;\n+              __curr = static_cast<_Node*>(__curr->_M_next);\n+            }\n+        }\n+      __lst._M_impl._M_head._M_next = 0;\n+    }\n+\n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n       _Fwd_list_node_base*\n@@ -72,7 +96,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       _Node* __curr = static_cast<_Node*>(__pos->_M_next);\n       __pos->_M_next = __curr->_M_next;\n-      _M_get_Node_allocator().destroy(__curr);\n+      _Node_alloc_traits::destroy(_M_get_Node_allocator(), __curr);\n       _M_put_node(__curr);\n       return __pos->_M_next;\n     }\n@@ -88,7 +112,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         {\n           _Node* __temp = __curr;\n           __curr = static_cast<_Node*>(__curr->_M_next);\n-          _M_get_Node_allocator().destroy(__temp);\n+          _Node_alloc_traits::destroy(_M_get_Node_allocator(), __temp);\n           _M_put_node(__temp);\n         }\n       __pos->_M_next = __last;\n@@ -144,6 +168,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       if (&__list != this)\n         {\n+\t  if (_Node_alloc_traits::_S_propagate_on_copy_assign())\n+\t    {\n+              auto& __this_alloc = this->_M_get_Node_allocator();\n+              auto& __that_alloc = __list._M_get_Node_allocator();\n+              if (!_Node_alloc_traits::_S_always_equal()\n+\t          && __this_alloc != __that_alloc)\n+\t        {\n+\t\t  // replacement allocator cannot free existing storage\n+\t\t  clear();\n+\t\t}\n+\t      std::__alloc_on_copy(__this_alloc, __that_alloc);\n+            }\n           iterator __prev1 = before_begin();\n           iterator __curr1 = begin();\n           iterator __last1 = end();"}, {"sha": "c388ef3d45326fb36c5cf110386610e26c1ae5b9", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/copy.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy.cc?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, false> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(0 == v2.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, true> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "e78856ae8a86210c58c53b37e3436623fba83bb4", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/copy_assign.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fcopy_assign.cc?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, false> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  v2 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, true> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  v2 = v1;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "51033f125b296051752d9a29979df897729a07c9", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/minimal.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <forward_list>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+bool operator==(const T& l, const T& r) { return l.i == r.i; }\n+bool operator<(const T& l, const T& r) { return l.i < r.i; }\n+\n+using __gnu_test::SimpleAllocator;\n+\n+template class std::forward_list<T, SimpleAllocator<T>>;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef SimpleAllocator<T> alloc_type;\n+  typedef std::allocator_traits<alloc_type> traits_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v(alloc_type{});\n+  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "18539ffa386f7fe5b04ce67d923df9a26a8137c5", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/move_assign.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fmove_assign.cc?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, false> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  v2 = std::move(v1);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, true> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  v2 = std::move(v1);\n+  VERIFY(0 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "77d2c21ccc0511103d42e286e21cb15fecb3ca88", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/noexcept.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fnoexcept.cc?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+\n+namespace __gnu_test\n+{\n+  inline void\n+  swap(propagating_allocator<T, true>& l, propagating_allocator<T, true>& r)\n+  noexcept(false)\n+  {\n+    typedef uneq_allocator<T> base_alloc;\n+    swap(static_cast<base_alloc&>(l), static_cast<base_alloc&>(r));\n+  }\n+}\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  typedef std::allocator<T> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1;\n+  test_type v2;\n+  // this is a GNU extension for std::allocator\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+}\n+\n+void test02()\n+{\n+  typedef propagating_allocator<T, false> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  static_assert( !noexcept( v1 = std::move(v2) ), \"Move assign can throw\" );\n+  static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n+}\n+\n+void test03()\n+{\n+  typedef propagating_allocator<T, true> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n+  // static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "60d83d4507beeb6f17be2441341639e065a52254", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/swap.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aad1ae2b29e612611c62b9d30113f82213f1e38/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc?ref=7aad1ae2b29e612611c62b9d30113f82213f1e38", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+\n+using __gnu_test::propagating_allocator;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, false> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  std::swap(v1, v2);\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v2.get_allocator().get_personality());\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef propagating_allocator<T, true> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v1(alloc_type(1));\n+  test_type v2(alloc_type(2));\n+  std::swap(v1, v2);\n+  VERIFY(2 == v1.get_allocator().get_personality());\n+  VERIFY(1 == v2.get_allocator().get_personality());\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}