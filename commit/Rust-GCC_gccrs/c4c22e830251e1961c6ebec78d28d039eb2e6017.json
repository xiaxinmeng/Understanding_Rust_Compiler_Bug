{"sha": "c4c22e830251e1961c6ebec78d28d039eb2e6017", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjMjJlODMwMjUxZTE5NjFjNmViZWM3OGQyOGQwMzllYjJlNjAxNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-07-16T14:03:27Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-07-27T11:40:13Z"}, "message": "LTO: Add -fcf-protection=check\n\nMixing -fcf-protection and -fcf-protection=none objects are allowed.\nLinker just merges -fcf-protection values from all input objects.\n\nAdd -fcf-protection=check for the final link with LTO.  An error is\nissued if LTO object files are compiled with different -fcf-protection\nvalues.  Otherwise, -fcf-protection=check is ignored at the compile\ntime.  Without explicit -fcf-protection at link time, -fcf-protection\nvalues from LTO object files are merged at the final link.\n\ngcc/\n\n\tPR bootstrap/96203\n\t* common.opt: Add -fcf-protection=check.\n\t* flag-types.h (cf_protection_level): Add CF_CHECK.\n\t* lto-wrapper.c (merge_and_complain): Issue an error for\n\tmismatching -fcf-protection values with -fcf-protection=check.\n\tOtherwise, merge -fcf-protection values.\n\t* doc/invoke.texi: Document -fcf-protection=check.\n\ngcc/testsuite/\n\n\tPR bootstrap/96203\n\t* gcc.target/i386/pr96203-1.c: New test.\n\t* gcc.target/i386/pr96203-2.c: Likewise.", "tree": {"sha": "c8ca64121d22d1d3222b58e85fc477bd68166c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8ca64121d22d1d3222b58e85fc477bd68166c6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4c22e830251e1961c6ebec78d28d039eb2e6017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c22e830251e1961c6ebec78d28d039eb2e6017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c22e830251e1961c6ebec78d28d039eb2e6017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c22e830251e1961c6ebec78d28d039eb2e6017/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd5966e8e044785f51cd7373b59ad9575a5ac96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5966e8e044785f51cd7373b59ad9575a5ac96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5966e8e044785f51cd7373b59ad9575a5ac96c"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "47f42615bfa7303e0a70ad3eb0069d3652cb5f83", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c4c22e830251e1961c6ebec78d28d039eb2e6017", "patch": "@@ -1776,7 +1776,7 @@ Common RejectNegative Alias(fcf-protection=,full)\n \n fcf-protection=\n Common Report Joined RejectNegative Enum(cf_protection_level) Var(flag_cf_protection) Init(CF_NONE)\n--fcf-protection=[full|branch|return|none]\tInstrument functions with checks to verify jump/call/return control-flow transfer\n+-fcf-protection=[full|branch|return|none|check]\tInstrument functions with checks to verify jump/call/return control-flow transfer\n instructions have valid targets.\n \n Enum\n@@ -1791,6 +1791,9 @@ Enum(cf_protection_level) String(branch) Value(CF_BRANCH)\n EnumValue\n Enum(cf_protection_level) String(return) Value(CF_RETURN)\n \n+EnumValue\n+Enum(cf_protection_level) String(check) Value(CF_CHECK)\n+\n EnumValue\n Enum(cf_protection_level) String(none) Value(CF_NONE)\n "}, {"sha": "7c3cc141c01822020294dec6e063482163331c3f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c4c22e830251e1961c6ebec78d28d039eb2e6017", "patch": "@@ -559,7 +559,7 @@ Objective-C and Objective-C++ Dialects}.\n -fsanitize=@var{style}  -fsanitize-recover  -fsanitize-recover=@var{style} @gol\n -fasan-shadow-offset=@var{number}  -fsanitize-sections=@var{s1},@var{s2},... @gol\n -fsanitize-undefined-trap-on-error  -fbounds-check @gol\n--fcf-protection=@r{[}full@r{|}branch@r{|}return@r{|}none@r{]} @gol\n+-fcf-protection=@r{[}full@r{|}branch@r{|}return@r{|}none@r{|}check@r{]} @gol\n -fstack-protector  -fstack-protector-all  -fstack-protector-strong @gol\n -fstack-protector-explicit  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n@@ -14211,7 +14211,7 @@ operand constant, @code{__sanitizer_cov_trace_cmpf} or\n @code{__sanitizer_cov_trace_cmpd} for float or double comparisons and\n @code{__sanitizer_cov_trace_switch} for switch statements.\n \n-@item -fcf-protection=@r{[}full@r{|}branch@r{|}return@r{|}none@r{]}\n+@item -fcf-protection=@r{[}full@r{|}branch@r{|}return@r{|}none@r{|}check@r{]}\n @opindex fcf-protection\n Enable code instrumentation of control-flow transfers to increase\n program security by checking that target addresses of control-flow\n@@ -14229,6 +14229,11 @@ function.  The value @code{full} is an alias for specifying both\n @code{branch} and @code{return}. The value @code{none} turns off\n instrumentation.\n \n+The value @code{check} is used for the final link with link-time\n+optimization (LTO).  An error is issued if LTO object files are\n+compiled with different @option{-fcf-protection} values.  The\n+value @code{check} is ignored at the compile time.\n+\n The macro @code{__CET__} is defined when @option{-fcf-protection} is\n used.  The first bit of @code{__CET__} is set to 1 for the value\n @code{branch} and the second bit of @code{__CET__} is set to 1 for"}, {"sha": "852ea76eaa241955409e68f2492f24ee7e176d96", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=c4c22e830251e1961c6ebec78d28d039eb2e6017", "patch": "@@ -368,7 +368,8 @@ enum cf_protection_level\n   CF_BRANCH = 1 << 0,\n   CF_RETURN = 1 << 1,\n   CF_FULL = CF_BRANCH | CF_RETURN,\n-  CF_SET = 1 << 2\n+  CF_SET = 1 << 2,\n+  CF_CHECK = 1 << 3\n };\n \n /* Parloops schedule type.  */"}, {"sha": "e3b5cb2407a992b2a89bdd5a435bc4a939f7ae95", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=c4c22e830251e1961c6ebec78d28d039eb2e6017", "patch": "@@ -310,20 +310,45 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \n \tcase OPT_fcf_protection_:\n \t  /* Default to link-time option, else append or check identical.  */\n-\t  if (!cf_protection_option)\n+\t  if (!cf_protection_option\n+\t      || cf_protection_option->value == CF_CHECK)\n \t    {\n \t      for (j = 0; j < *decoded_options_count; ++j)\n \t\tif ((*decoded_options)[j].opt_index == foption->opt_index)\n \t\t  break;\n \t      if (j == *decoded_options_count)\n \t\tappend_option (decoded_options, decoded_options_count, foption);\n-\t      else if (strcmp ((*decoded_options)[j].arg, foption->arg))\n-\t\tfatal_error (input_location,\n-\t\t\t     \"option -fcf-protection with mismatching values\"\n-\t\t\t     \" (%s, %s)\",\n-\t\t\t     (*decoded_options)[j].arg, foption->arg);\n+\t      else if ((*decoded_options)[j].value != foption->value)\n+\t\t{\n+\t\t  if (cf_protection_option\n+\t\t      && cf_protection_option->value == CF_CHECK)\n+\t\t    fatal_error (input_location,\n+\t\t\t\t \"option -fcf-protection with mismatching values\"\n+\t\t\t\t \" (%s, %s)\",\n+\t\t\t\t (*decoded_options)[j].arg, foption->arg);\n+\t\t  else\n+\t\t    {\n+\t\t      /* Merge and update the -fcf-protection option.  */\n+\t\t      (*decoded_options)[j].value &= (foption->value\n+\t\t\t\t\t\t      & CF_FULL);\n+\t\t      switch ((*decoded_options)[j].value)\n+\t\t\t{\n+\t\t\tcase CF_NONE:\n+\t\t\t  (*decoded_options)[j].arg = \"none\";\n+\t\t\t  break;\n+\t\t\tcase CF_BRANCH:\n+\t\t\t  (*decoded_options)[j].arg = \"branch\";\n+\t\t\t  break;\n+\t\t\tcase CF_RETURN:\n+\t\t\t  (*decoded_options)[j].arg = \"return\";\n+\t\t\t  break;\n+\t\t\tdefault:\n+\t\t\t  gcc_unreachable ();\n+\t\t\t}\n+\t\t    }\n+\t\t}\n \t    }\n-\t    break;\n+\t  break;\n \n \tcase OPT_O:\n \tcase OPT_Ofast:"}, {"sha": "332911fc931aac55f6b545b4bdae87ce337a75f3", "filename": "gcc/testsuite/gcc.target/i386/pr96203-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96203-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96203-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96203-1.c?ref=c4c22e830251e1961c6ebec78d28d039eb2e6017", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection=check\" } */\n+/* { dg-final { scan-assembler-not \"endbr\" } } */\n+\n+extern int x;\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+test (int i)\n+{\n+  x = i;\n+}\n+\n+void\n+bar (int i)\n+{\n+  test (i);\n+}"}, {"sha": "1141cf2b51f0e301b117d4ca3265dd082affc30f", "filename": "gcc/testsuite/gcc.target/i386/pr96203-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96203-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c22e830251e1961c6ebec78d28d039eb2e6017/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96203-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96203-2.c?ref=c4c22e830251e1961c6ebec78d28d039eb2e6017", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection=check -mmanual-endbr\" } */\n+/* { dg-final { scan-assembler-not \"endbr\" } } */\n+\n+extern void bar (void) __attribute__((__cf_check__));\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}"}]}