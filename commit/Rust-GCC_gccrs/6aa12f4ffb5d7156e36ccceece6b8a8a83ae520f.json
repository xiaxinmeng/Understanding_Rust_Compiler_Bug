{"sha": "6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhMTJmNGZmYjVkNzE1NmUzNmNjY2VlY2U2YjhhOGE4M2FlNTIwZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-05T16:33:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-05T16:33:25Z"}, "message": "re PR middle-end/33666 (Type verification failure with pointer to long long conversion)\n\n2007-10-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/33666\n\t* fold-const.c (fold_unary): Do not fold (long long)(int)ptr\n\tto (long long)ptr.\n\n\t* gcc.dg/pr33666.c: New testcase.\n\nFrom-SVN: r129036", "tree": {"sha": "7e671b5aaa5937f432deacc82380c31465101592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e671b5aaa5937f432deacc82380c31465101592"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1596d61e6efe75dd6fdf2b23d6028f1431143ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1596d61e6efe75dd6fdf2b23d6028f1431143ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1596d61e6efe75dd6fdf2b23d6028f1431143ccb"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "800e19636df226b8fab21df21be08ed348cbe366", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f", "patch": "@@ -1,3 +1,9 @@\n+2007-10-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/33666\n+\t* fold-const.c (fold_unary): Do not fold (long long)(int)ptr\n+\tto (long long)ptr.\n+\n 2007-10-05  Michael Matz  <matz@suse.de>\n \n \tPR inline-asm/33600"}, {"sha": "46e0e3348a564a84ba31dfc2a8b011bc6ab60f6c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f", "patch": "@@ -8128,7 +8128,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t     (for integers).  Avoid this if the final type is a pointer\n \t     since then we sometimes need the inner conversion.  Likewise if\n \t     the outer has a precision not equal to the size of its mode.  */\n-\t  if ((((inter_int || inter_ptr) && (inside_int || inside_ptr))\n+\t  if (((inter_int && inside_int)\n \t       || (inter_float && inside_float)\n \t       || (inter_vec && inside_vec))\n \t      && inter_prec >= inside_prec\n@@ -8158,7 +8158,6 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t       intermediate and final types differ, or\n \t     - the final type is a pointer type and the precisions of the\n \t       initial and intermediate types differ.\n-\t     - the final type is a pointer type and the initial type not\n \t     - the initial type is a pointer to an array and the final type\n \t       not.  */\n \t  if (! inside_float && ! inter_float && ! final_float\n@@ -8173,8 +8172,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t      && ! (final_ptr && inside_prec != inter_prec)\n \t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (type))\n \t\t    && TYPE_MODE (type) == TYPE_MODE (inter_type))\n-\t      && final_ptr == inside_ptr\n-\t      && ! (inside_ptr\n+\t      && ! (inside_ptr && final_ptr\n \t\t    && TREE_CODE (TREE_TYPE (inside_type)) == ARRAY_TYPE\n \t\t    && TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE))\n \t    return fold_build1 (code, type, TREE_OPERAND (op0, 0));"}, {"sha": "d73bde39a46a380762c2d8c6cee75a1cb5775e91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f", "patch": "@@ -1,3 +1,8 @@\n+2007-10-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/33666\n+\t* gcc.dg/pr33666.c: New testcase.\n+\n 2007-10-05  Michael Matz  <matz@suse.de>\n \n \tPR inline-asm/33600"}, {"sha": "1f27b136d36a5c58bd1aa8ce0b72d07e78654c1d", "filename": "gcc/testsuite/gcc.dg/pr33666.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33666.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33666.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33666.c?ref=6aa12f4ffb5d7156e36ccceece6b8a8a83ae520f", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options { -std=c99 } } */\n+\n+/* This used to fail with type-checking enabled because we stripped\n+   the inner conversion to unsigned int.  */\n+\n+void __lock_get_list(void *dp)\n+{\n+  if (((__SIZE_TYPE__)dp + 1) & ~1ULL)\n+    ;\n+}"}]}