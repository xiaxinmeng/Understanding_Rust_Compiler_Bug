{"sha": "99bc27d278359be9aec5597504807a6456a88a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliYzI3ZDI3ODM1OWJlOWFlYzU1OTc1MDQ4MDdhNjQ1NmE4OGE2Yw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-25T12:53:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-25T12:53:24Z"}, "message": "Merge #526\n\n526: Add unit-type support for Identifier expressions r=philberty a=philberty\n\nUnit type can be reference via an identifier expression. Other type references via an identifier expression are not supported yet.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "d8f8f094efbc8806111f4ee9b450792853852a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8f8f094efbc8806111f4ee9b450792853852a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99bc27d278359be9aec5597504807a6456a88a6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg1dHECRBK7hj4Ov3rIwAAZdUIAHw0BxVdBg8TvLzXdvmfpUEe\ny69KMnTT2atmG5UpVHC5fiNpu4Lp99TPqi65kcAyJJ8oyl262gLvjSBAkbmBJM4Q\nutLllOVvWtpfUAh3WaV5+s2IbiyXBVdcqjkC7pgkHUF4lEigKYwMIPo1/r4z/+dq\nwsqjK5C7UK3S4B1AzTiTJBV3GvJ14GuEASex6yUJW5z6H1XuYqbVw2Zojfb4m3es\nDl9hezgfdpw1r63/zdZer69KQBTC7pJpwrWRZEyfeG8ZTdWwFLR/aq94ZTFOjDNl\n7AGVV9WAexizbYxZZ83X2RSYS2vuCpTToRnx3d8ZzIr8f17zo87jEJQ6EbXjr5g=\n=sLNo\n-----END PGP SIGNATURE-----\n", "payload": "tree d8f8f094efbc8806111f4ee9b450792853852a48\nparent 08e3ae7fce360db23bceb45c1b16718ee21deb91\nparent f089723609077cd38821c15ad042a45936f949e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624625604 +0000\ncommitter GitHub <noreply@github.com> 1624625604 +0000\n\nMerge #526\n\n526: Add unit-type support for Identifier expressions r=philberty a=philberty\n\nUnit type can be reference via an identifier expression. Other type references via an identifier expression are not supported yet.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bc27d278359be9aec5597504807a6456a88a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99bc27d278359be9aec5597504807a6456a88a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bc27d278359be9aec5597504807a6456a88a6c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e3ae7fce360db23bceb45c1b16718ee21deb91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e3ae7fce360db23bceb45c1b16718ee21deb91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e3ae7fce360db23bceb45c1b16718ee21deb91"}, {"sha": "f089723609077cd38821c15ad042a45936f949e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f089723609077cd38821c15ad042a45936f949e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f089723609077cd38821c15ad042a45936f949e6"}], "stats": {"total": 281, "additions": 203, "deletions": 78}, "files": [{"sha": "fc8ad814c5dcb5d06a5a76893d687c14a6540f83", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 75, "deletions": 12, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=99bc27d278359be9aec5597504807a6456a88a6c", "patch": "@@ -109,32 +109,81 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::IdentifierExpr &expr) override\n   {\n-    // need to look up the reference for this identifier\n-    NodeId ref_node_id;\n-    if (!ctx->get_resolver ()->lookup_resolved_name (\n-\t  expr.get_mappings ().get_nodeid (), &ref_node_id))\n+    NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n+\n+    bool is_value = false;\n+    NodeId ref_node_id = UNKNOWN_NODEID;\n+    if (ctx->get_resolver ()->lookup_resolved_name (ast_node_id, &ref_node_id))\n+      {\n+\t// these ref_node_ids will resolve to a pattern declaration but we are\n+\t// interested in the definition that this refers to get the parent id\n+\tResolver::Definition def;\n+\tif (!ctx->get_resolver ()->lookup_definition (ref_node_id, &def))\n+\t  {\n+\t    rust_error_at (expr.get_locus (),\n+\t\t\t   \"unknown reference for resolved name\");\n+\t    return;\n+\t  }\n+\tref_node_id = def.parent;\n+\tis_value = true;\n+      }\n+    else if (!ctx->get_resolver ()->lookup_resolved_type (ast_node_id,\n+\t\t\t\t\t\t\t  &ref_node_id))\n       {\n-\trust_fatal_error (expr.get_locus (), \"failed to look up resolved name\");\n+\trust_error_at (expr.get_locus (),\n+\t\t       \"Failed to lookup type reference for node: %s\",\n+\t\t       expr.as_string ().c_str ());\n \treturn;\n       }\n \n-    // these ref_node_ids will resolve to a pattern declaration but we are\n-    // interested in the definition that this refers to get the parent id\n-    Resolver::Definition def;\n-    if (!ctx->get_resolver ()->lookup_definition (ref_node_id, &def))\n+    if (ref_node_id == UNKNOWN_NODEID)\n       {\n-\trust_error_at (expr.get_locus (), \"unknown reference\");\n+\trust_fatal_error (expr.get_locus (), \"unresolved IdentifierExpr: %s\",\n+\t\t\t  expr.as_string ().c_str ());\n \treturn;\n       }\n \n+    // node back to HIR\n     HirId ref;\n     if (!ctx->get_mappings ()->lookup_node_to_hir (\n-\t  expr.get_mappings ().get_crate_num (), def.parent, &ref))\n+\t  expr.get_mappings ().get_crate_num (), ref_node_id, &ref))\n+      {\n+\trust_error_at (expr.get_locus (), \"reverse lookup failure\");\n+\treturn;\n+      }\n+\n+    TyTy::BaseType *lookup = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (ref, &lookup))\n       {\n-\trust_fatal_error (expr.get_locus (), \"reverse lookup failure\");\n+\trust_fatal_error (expr.get_locus (),\n+\t\t\t  \"failed to find type relevant to this context: %s\",\n+\t\t\t  expr.get_mappings ().as_string ().c_str ());\n \treturn;\n       }\n \n+    bool is_type_ref = !is_value;\n+    if (is_type_ref)\n+      {\n+\t// this might be a case for\n+\t//\n+\t// struct S;\n+\t//\n+\t// fn main() {\n+\t//    let s = S;\n+\t// }\n+\n+\tif (lookup->is_unit ())\n+\t  {\n+\t    translated = ctx->get_backend ()->unit_expression ();\n+\t    return;\n+\t  }\n+\n+\t// rust actually treats like this an fn call or structs with fields but\n+\t// unit structs are just the struct name lets catch it with an is-unit\n+\t// check\n+\tgcc_unreachable ();\n+      }\n+\n     Bfunction *fn = nullptr;\n     Bvariable *var = nullptr;\n     if (ctx->lookup_const_decl (ref, &translated))\n@@ -478,6 +527,20 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n+  void visit (HIR::StructExprStruct &struct_expr) override\n+  {\n+    TyTy::BaseType *tyty = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (\n+\t  struct_expr.get_mappings ().get_hirid (), &tyty))\n+      {\n+\trust_error_at (struct_expr.get_locus (), \"unknown type\");\n+\treturn;\n+      }\n+\n+    rust_assert (tyty->is_unit ());\n+    translated = ctx->get_backend ()->unit_expression ();\n+  }\n+\n   void visit (HIR::StructExprStructFields &struct_expr) override\n   {\n     TyTy::BaseType *tyty = nullptr;"}, {"sha": "19ce8c2cf1f8fdae150e3e08c980aa29410cbbbe", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=99bc27d278359be9aec5597504807a6456a88a6c", "patch": "@@ -467,6 +467,24 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t expr.get_locus ());\n   }\n \n+  void visit (AST::StructExprStruct &struct_expr) override\n+  {\n+    HIR::PathInExpression *path\n+      = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n+    HIR::PathInExpression copied_path (*path);\n+    delete path;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated = new HIR::StructExprStruct (mapping, copied_path,\n+\t\t\t\t\t    struct_expr.get_inner_attrs (),\n+\t\t\t\t\t    struct_expr.get_outer_attrs (),\n+\t\t\t\t\t    struct_expr.get_locus ());\n+  }\n+\n   void visit (AST::StructExprStructFields &struct_expr) override\n   {\n     // bit of a hack for now"}, {"sha": "0d4963c1cb239b190286fd50e35717cf00514285", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=99bc27d278359be9aec5597504807a6456a88a6c", "patch": "@@ -138,6 +138,13 @@ MarkLive::visit (HIR::IdentifierExpr &expr)\n \t}\n       ref_node_id = def.parent;\n     }\n+  else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n+    {\n+      rust_error_at (expr.get_locus (),\n+\t\t     \"Failed to lookup type reference for node: %s\",\n+\t\t     expr.as_string ().c_str ());\n+      return;\n+    }\n \n   if (ref_node_id == UNKNOWN_NODEID)\n     {"}, {"sha": "bbd88188ed617682928969862178d10dbb7f5eaf", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=99bc27d278359be9aec5597504807a6456a88a6c", "patch": "@@ -219,6 +219,14 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (elems.get_elem_to_copy ().get (), elems.get_node_id ());\n   }\n \n+  // this this an empty struct constructor like 'S {}'\n+  void visit (AST::StructExprStruct &struct_expr) override\n+  {\n+    ResolveExpr::go (&struct_expr.get_struct_name (),\n+\t\t     struct_expr.get_node_id ());\n+  }\n+\n+  // this this a struct constructor with fields\n   void visit (AST::StructExprStructFields &struct_expr) override\n   {\n     ResolveExpr::go (&struct_expr.get_struct_name (),"}, {"sha": "bdebfd3d4cf6b1821ef1525e96e6db0ee20607a8", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=99bc27d278359be9aec5597504807a6456a88a6c", "patch": "@@ -827,6 +827,21 @@ class TypeCheckExpr : public TypeCheckBase\n       = TypeCheckExpr::Resolve (elems.get_elem_to_copy (), false);\n   }\n \n+  // empty struct\n+  void visit (HIR::StructExprStruct &struct_expr) override\n+  {\n+    TyTy::BaseType *struct_path_ty\n+      = TypeCheckExpr::Resolve (&struct_expr.get_struct_name (), false);\n+    if (struct_path_ty->get_kind () != TyTy::TypeKind::ADT)\n+      {\n+\trust_error_at (struct_expr.get_struct_name ().get_locus (),\n+\t\t       \"expected an ADT type for constructor\");\n+\treturn;\n+      }\n+\n+    infered = struct_path_ty;\n+  }\n+\n   void visit (HIR::StructExprStructFields &struct_expr) override\n   {\n     infered = TypeCheckStructExpr::Resolve (&struct_expr);"}, {"sha": "51ede175218af3a8a2582d723bad7360eaed4b50", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 69, "deletions": 66, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=99bc27d278359be9aec5597504807a6456a88a6c", "patch": "@@ -52,6 +52,71 @@ enum TypeKind\n   ERROR\n };\n \n+class TypeKindFormat\n+{\n+public:\n+  static std::string to_string (TypeKind kind)\n+  {\n+    switch (kind)\n+      {\n+      case TypeKind::INFER:\n+\treturn \"Infer\";\n+\n+      case TypeKind::ADT:\n+\treturn \"ADT\";\n+\n+      case TypeKind::STR:\n+\treturn \"STR\";\n+\n+      case TypeKind::REF:\n+\treturn \"REF\";\n+\n+      case TypeKind::PARAM:\n+\treturn \"PARAM\";\n+\n+      case TypeKind::ARRAY:\n+\treturn \"ARRAY\";\n+\n+      case TypeKind::FNDEF:\n+\treturn \"FnDef\";\n+\n+      case TypeKind::FNPTR:\n+\treturn \"FnPtr\";\n+\n+      case TypeKind::TUPLE:\n+\treturn \"Tuple\";\n+\n+      case TypeKind::BOOL:\n+\treturn \"Bool\";\n+\n+      case TypeKind::CHAR:\n+\treturn \"Char\";\n+\n+      case TypeKind::INT:\n+\treturn \"Int\";\n+\n+      case TypeKind::UINT:\n+\treturn \"Uint\";\n+\n+      case TypeKind::FLOAT:\n+\treturn \"Float\";\n+\n+      case TypeKind::USIZE:\n+\treturn \"Usize\";\n+\n+      case TypeKind::ISIZE:\n+\treturn \"Isize\";\n+\n+      case TypeKind::NEVER:\n+\treturn \"Never\";\n+\n+      case TypeKind::ERROR:\n+\treturn \"ERROR\";\n+      }\n+    gcc_unreachable ();\n+  }\n+};\n+\n class TyVisitor;\n class BaseType\n {\n@@ -138,7 +203,8 @@ class BaseType\n \n   std::string debug_str () const\n   {\n-    return as_string () + \":\" + mappings_str ();\n+    return TypeKindFormat::to_string (get_kind ()) + \":\" + as_string () + \":\"\n+\t   + mappings_str ();\n   }\n \n   void debug () const\n@@ -777,6 +843,8 @@ class ADTType : public BaseType, public SubstitutionRef\n \n   bool get_is_tuple () { return is_tuple; }\n \n+  bool is_unit () const override { return this->fields.empty (); }\n+\n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n@@ -1407,71 +1475,6 @@ class NeverType : public BaseType\n   bool is_unit () const override { return true; }\n };\n \n-class TypeKindFormat\n-{\n-public:\n-  static std::string to_string (TypeKind kind)\n-  {\n-    switch (kind)\n-      {\n-      case TypeKind::INFER:\n-\treturn \"Infer\";\n-\n-      case TypeKind::ADT:\n-\treturn \"ADT\";\n-\n-      case TypeKind::STR:\n-\treturn \"STR\";\n-\n-      case TypeKind::REF:\n-\treturn \"REF\";\n-\n-      case TypeKind::PARAM:\n-\treturn \"PARAM\";\n-\n-      case TypeKind::ARRAY:\n-\treturn \"ARRAY\";\n-\n-      case TypeKind::FNDEF:\n-\treturn \"FnDef\";\n-\n-      case TypeKind::FNPTR:\n-\treturn \"FnPtr\";\n-\n-      case TypeKind::TUPLE:\n-\treturn \"Tuple\";\n-\n-      case TypeKind::BOOL:\n-\treturn \"Bool\";\n-\n-      case TypeKind::CHAR:\n-\treturn \"Char\";\n-\n-      case TypeKind::INT:\n-\treturn \"Int\";\n-\n-      case TypeKind::UINT:\n-\treturn \"Uint\";\n-\n-      case TypeKind::FLOAT:\n-\treturn \"Float\";\n-\n-      case TypeKind::USIZE:\n-\treturn \"Usize\";\n-\n-      case TypeKind::ISIZE:\n-\treturn \"Isize\";\n-\n-      case TypeKind::NEVER:\n-\treturn \"Never\";\n-\n-      case TypeKind::ERROR:\n-\treturn \"ERROR\";\n-      }\n-    gcc_unreachable ();\n-  }\n-};\n-\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "d48a691046b7ff1c2a7de9f3858c32db17699959", "filename": "gcc/testsuite/rust/compile/torture/unit_type3.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type3.rs?ref=99bc27d278359be9aec5597504807a6456a88a6c", "patch": "@@ -0,0 +1,6 @@\n+struct S;\n+\n+fn main() {\n+    let s = S;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "ccbfa21818af8a7759a7d074830cd84556bfe4e1", "filename": "gcc/testsuite/rust/compile/torture/unit_type4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bc27d278359be9aec5597504807a6456a88a6c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type4.rs?ref=99bc27d278359be9aec5597504807a6456a88a6c", "patch": "@@ -0,0 +1,5 @@\n+struct S;\n+\n+fn main() {\n+    let _s = S {};\n+}"}]}