{"sha": "3febd12318b0cdef645012bbce9cf85e4e4d80ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlYmQxMjMxOGIwY2RlZjY0NTAxMmJiY2U5Y2Y4NWU0ZTRkODBlZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-01-08T14:41:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-08T14:41:03Z"}, "message": "cp-tree.h (lang_decl_flags): Rename defined_in_class to initialized_in_class.\n\ncp:\n\t* cp-tree.h (lang_decl_flags): Rename defined_in_class to\n\tinitialized_in_class.\n\t(DECL_DEFINED_IN_CLASS_P): Rename to ...\n\t(DECL_INITIALIZED_IN_CLASS_P): ... here, to reflect true meaning.\n\t* decl.c (duplicate_decls): Preseve DECL_INITIALIZED_IN_CLASS_P.\n\t(cp_finish_decl): Adjust for DECL_INITIALIZED_IN_CLASS_P.\n\t* pt.c (check_default_tmpl_args): Adjust for\n\tDECL_INITIALIZED_IN_CLASS_P.\n\t(instantiate_class_template): Likewise.\n\t(instantiate_decl): Check DECL_INITIALIZED_IN_CLASS_P.\n\n\t* class.c (finish_struct): Constify saved_filename.\ntestsuite:\n\t* g++.old_deja/g++.pt/instantiate12.C: New test.\n\nFrom-SVN: r38801", "tree": {"sha": "6242c447972eef004491d7ec8e6c5786e021a632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6242c447972eef004491d7ec8e6c5786e021a632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3febd12318b0cdef645012bbce9cf85e4e4d80ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3febd12318b0cdef645012bbce9cf85e4e4d80ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3febd12318b0cdef645012bbce9cf85e4e4d80ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3febd12318b0cdef645012bbce9cf85e4e4d80ed/comments", "author": null, "committer": null, "parents": [{"sha": "c7861455c823513906045e3214f7f8d7f44e2276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7861455c823513906045e3214f7f8d7f44e2276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7861455c823513906045e3214f7f8d7f44e2276"}], "stats": {"total": 102, "additions": 85, "deletions": 17}, "files": [{"sha": "088a2798edb7f9d3b8e0cff4b2d9f87d49f9db10", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3febd12318b0cdef645012bbce9cf85e4e4d80ed", "patch": "@@ -1,3 +1,18 @@\n+2001-01-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (lang_decl_flags): Rename defined_in_class to\n+\tinitialized_in_class.\n+\t(DECL_DEFINED_IN_CLASS_P): Rename to ...\n+\t(DECL_INITIALIZED_IN_CLASS_P): ... here, to reflect true meaning.\n+\t* decl.c (duplicate_decls): Preseve DECL_INITIALIZED_IN_CLASS_P.\n+\t(cp_finish_decl): Adjust for DECL_INITIALIZED_IN_CLASS_P.\n+\t* pt.c (check_default_tmpl_args): Adjust for\n+\tDECL_INITIALIZED_IN_CLASS_P.\n+\t(instantiate_class_template): Likewise.\n+\t(instantiate_decl): Check DECL_INITIALIZED_IN_CLASS_P.\n+\t\n+\t* class.c (finish_struct): Constify saved_filename.\n+\n 2001-01-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (duplicate_tag_error): Adjust diagnostic."}, {"sha": "8b04aa3014ac7de3590ef70bbd2ee57f9ce4d258", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3febd12318b0cdef645012bbce9cf85e4e4d80ed", "patch": "@@ -5328,7 +5328,7 @@ tree\n finish_struct (t, attributes)\n      tree t, attributes;\n {\n-  char *saved_filename = input_filename;\n+  const char *saved_filename = input_filename;\n   int saved_lineno = lineno;\n \n   /* Now that we've got all the field declarations, reverse everything"}, {"sha": "e69a23acb273ede5855a0f5896c6bb9348cb5228", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3febd12318b0cdef645012bbce9cf85e4e4d80ed", "patch": "@@ -1812,7 +1812,7 @@ struct lang_decl_flags\n   unsigned declared_inline : 1;\n   unsigned not_really_extern : 1;\n   unsigned needs_final_overrider : 1;\n-  unsigned defined_in_class : 1;\n+  unsigned initialized_in_class : 1;\n \n   unsigned pending_inline_p : 1;\n   unsigned global_ctor_p : 1;\n@@ -2042,10 +2042,10 @@ struct lang_decl\n    should be allocated.  */\n #define DECL_IN_AGGR_P(NODE) (DECL_LANG_FLAG_3(NODE))\n \n-/* Nonzero if the DECL was defined in the class definition itself,\n+/* Nonzero if the DECL was initialized in the class definition itself,\n    rather than outside the class.  */\n-#define DECL_DEFINED_IN_CLASS_P(DECL) \\\n- (DECL_LANG_SPECIFIC (DECL)->decl_flags.defined_in_class)\n+#define DECL_INITIALIZED_IN_CLASS_P(DECL) \\\n+ (DECL_LANG_SPECIFIC (DECL)->decl_flags.initialized_in_class)\n \n /* Nonzero for FUNCTION_DECL means that this decl is just a\n    friend declaration, and should not be added to the list of"}, {"sha": "33c0f8092ead361bfdc89b3027e1b156f920e1f5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3febd12318b0cdef645012bbce9cf85e4e4d80ed", "patch": "@@ -3573,6 +3573,8 @@ duplicate_decls (newdecl, olddecl)\n       DECL_ACCESS (newdecl) = DECL_ACCESS (olddecl);\n       DECL_NONCONVERTING_P (newdecl) = DECL_NONCONVERTING_P (olddecl);\n       DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);\n+      DECL_INITIALIZED_IN_CLASS_P (newdecl)\n+        |= DECL_INITIALIZED_IN_CLASS_P (olddecl);\n       olddecl_friend = DECL_FRIEND_P (olddecl);\n \n       /* Only functions have DECL_BEFRIENDING_CLASSES.  */\n@@ -7931,7 +7933,7 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n       && CP_DECL_CONTEXT (decl) == current_class_type\n       && TYPE_BEING_DEFINED (current_class_type)\n       && (DECL_INITIAL (decl) || init))\n-    DECL_DEFINED_IN_CLASS_P (decl) = 1;\n+    DECL_INITIALIZED_IN_CLASS_P (decl) = 1;\n \n   if (TREE_CODE (decl) == VAR_DECL\n       && DECL_CONTEXT (decl)"}, {"sha": "5d4a1bfeab68b87edd26bf31f5641969b0ec0e4a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3febd12318b0cdef645012bbce9cf85e4e4d80ed", "patch": "@@ -1,6 +1,6 @@\n /* Handle parameterized types (templates) for GNU C++.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001  Free Software Foundation, Inc.\n    Written by Ken Raeburn (raeburn@cygnus.com) while at Watchmaker Computing.\n    Rewritten by Jason Merrill (jason@cygnus.com).\n \n@@ -2300,7 +2300,7 @@ check_default_tmpl_args (decl, parms, is_primary, is_partial)\n \t\t\t      current_class_type)))\n       /* And, if it was a member function, it really was defined in\n \t the scope of the class.  */\n-      && (!DECL_FUNCTION_MEMBER_P (decl) || DECL_DEFINED_IN_CLASS_P (decl)))\n+      && (!DECL_FUNCTION_MEMBER_P (decl) || DECL_INITIALIZED_IN_CLASS_P (decl)))\n     /* We already checked these parameters when the template was\n        declared, so there's no need to do it again now.  This function\n        was defined in class scope, but we're processing it's body now\n@@ -5059,7 +5059,7 @@ instantiate_class_template (type)\n \t  {\n \t    tree init;\n \n-\t    if (DECL_DEFINED_IN_CLASS_P (r))\n+\t    if (DECL_INITIALIZED_IN_CLASS_P (r))\n \t      init = tsubst_expr (DECL_INITIAL (t), args,\n \t\t\t\t  /*complain=*/1, NULL_TREE);\n \t    else\n@@ -5069,7 +5069,7 @@ instantiate_class_template (type)\n \t\t\t\t\t    /*asmspec_tree=*/NULL_TREE, \n \t\t\t\t\t    /*flags=*/0);\n \n-\t    if (DECL_DEFINED_IN_CLASS_P (r))\n+\t    if (DECL_INITIALIZED_IN_CLASS_P (r))\n \t      check_static_variable_definition (r, TREE_TYPE (r));\n \t  }\n \t\n@@ -9728,12 +9728,9 @@ instantiate_decl (d, defer_ok)\n \timport_export_decl (d);\n     }\n \n-  /* We need to set up DECL_INITIAL regardless of pattern_defined if\n-     the variable is a static const initialized in the class body.  */\n-  if (TREE_CODE (d) == VAR_DECL \n-      && TREE_READONLY (d)\n-      && DECL_INITIAL (d) == NULL_TREE\n-      && DECL_INITIAL (code_pattern) != NULL_TREE)\n+  /* We need to set up DECL_INITIAL regardless, if\n+     the variable is initialized in the class body.  */\n+  if (TREE_CODE (d) == VAR_DECL && DECL_INITIALIZED_IN_CLASS_P (d))\n     ;\n   /* Reject all external templates except inline functions.  */\n   else if (DECL_INTERFACE_KNOWN (d)"}, {"sha": "9940bd76192ac72cf3542f1789f63d6a0384d0bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3febd12318b0cdef645012bbce9cf85e4e4d80ed", "patch": "@@ -1,3 +1,7 @@\n+2001-01-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old_deja/g++.pt/instantiate12.C: New test.\n+\n 2001-01-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.benjamin/15309-1.C: Expect diagnostic at"}, {"sha": "e1cc8534c8d3cc60e64f1bbc177acde755683359", "filename": "gcc/testsuite/g++.old-deja/g++.pt/instantiate12.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finstantiate12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3febd12318b0cdef645012bbce9cf85e4e4d80ed/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finstantiate12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finstantiate12.C?ref=3febd12318b0cdef645012bbce9cf85e4e4d80ed", "patch": "@@ -0,0 +1,50 @@\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 14 Nov 2000 <nathan@codesourcery.com>\n+\n+// Bug 635. We failed to emit initializer code for out-of-class defined\n+// static const members of template instantiations.\n+\n+static int inited = 0;\n+\n+static bool setFlag()\n+{\n+  inited++;\n+  return true;\n+}\n+\n+template<typename T> struct X\n+{\n+  static const bool cflag;\n+  static bool flag;\n+  static const bool iflag = true;\n+  static const bool jflag = true;\n+};\n+\n+template<typename T> const bool X<T>::cflag (setFlag ());\n+template<typename T> bool X<T>::flag (setFlag ());\n+template<typename T> const bool X<T>::iflag;\n+\n+int main ()\n+{\n+  X<int> a;\n+  if (!a.flag)\n+    return 1;\n+  if (!a.cflag)\n+    return 2;\n+  if (!a.iflag)\n+    return 3;\n+  if (!a.jflag)\n+    return 5;\n+  if (!X<float>::flag)\n+    return 5;\n+  if (!X<float>::cflag)\n+    return 6;\n+  if (!X<float>::iflag)\n+    return 7;\n+  if (!X<float>::jflag)\n+    return 8;\n+  if (inited != 4)\n+    return 9;\n+  return 0;\n+}"}]}