{"sha": "0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZiMzBjYjczZDk2ZDllZDUzOGJmM2RlZDE1ZTk0OWU1OWVhZjkwZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-17T18:11:45Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-17T18:11:45Z"}, "message": "frv-protos.h (frv_print_operand): Delete.\n\n\t* config/frv/frv-protos.h (frv_print_operand): Delete.\n\t(frv_print_operand_address): Delete.\n\t* config/frv/frv.h (PRINT_OPERAND): Delete.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n\t(PRINT_OPERAND_ADDRESS): Delete.\n\t* config/frv/frv.c (frv_print_operand_address): Make static.\n\t(frv_print_operand): Make static.\n\t(frv_print_operand_punct_valid_p): New function.\n\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS):\n\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n\nFrom-SVN: r160937", "tree": {"sha": "29dc2a4a719bd2e757cad427dfe4ce92c8403ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29dc2a4a719bd2e757cad427dfe4ce92c8403ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/comments", "author": null, "committer": null, "parents": [{"sha": "bfdb7b700a3ff86230205f9d5d641fb480387d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfdb7b700a3ff86230205f9d5d641fb480387d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfdb7b700a3ff86230205f9d5d641fb480387d1d"}], "stats": {"total": 108, "additions": 45, "deletions": 63}, "files": [{"sha": "bc42db3638c52325edda3f8515c19ca48a2c543b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "patch": "@@ -1,3 +1,16 @@\n+2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/frv/frv-protos.h (frv_print_operand): Delete.\n+\t(frv_print_operand_address): Delete.\n+\t* config/frv/frv.h (PRINT_OPERAND): Delete.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n+\t(PRINT_OPERAND_ADDRESS): Delete.\n+\t* config/frv/frv.c (frv_print_operand_address): Make static.\n+\t(frv_print_operand): Make static.\n+\t(frv_print_operand_punct_valid_p): New function.\n+\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS):\n+\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n+\n 2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree.h (vec_member): Declare."}, {"sha": "11612e49825f602e69a15373fdcbaaee8d51d5be", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "patch": "@@ -73,8 +73,6 @@ extern rtx frv_index_memory\t\t\t(rtx, enum machine_mode, int);\n extern const char *frv_asm_output_opcode\n \t\t\t\t \t(FILE *, const char *);\n extern void frv_final_prescan_insn\t(rtx, rtx *, int);\n-extern void frv_print_operand\t\t(FILE *, rtx, int);\n-extern void frv_print_operand_address\t(FILE *, rtx);\n extern void frv_emit_move\t\t(enum machine_mode, rtx, rtx);\n extern int frv_emit_movsi\t\t(rtx, rtx);\n extern const char *output_move_single\t(rtx *, rtx);"}, {"sha": "057bbdf14525f621983ed48ca08c4c91c933cf31", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "patch": "@@ -267,6 +267,9 @@ static bool frv_legitimate_address_p\t\t(enum machine_mode, rtx, bool);\n static int frv_default_flags_for_cpu\t\t(void);\n static int frv_string_begins_with\t\t(const_tree, const char *);\n static FRV_INLINE bool frv_small_data_reloc_p\t(rtx, int);\n+static void frv_print_operand\t\t\t(FILE *, rtx, int);\n+static void frv_print_operand_address\t\t(FILE *, rtx);\n+static bool frv_print_operand_punct_valid_p\t(unsigned char code);\n static void frv_print_operand_memory_reference_reg\n \t\t\t\t\t\t(FILE *, rtx);\n static void frv_print_operand_memory_reference\t(FILE *, rtx, int);\n@@ -396,6 +399,12 @@ static void frv_trampoline_init\t\t\t(rtx, tree, rtx);\n #endif\n \f\n /* Initialize the GCC target structure.  */\n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND frv_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS frv_print_operand_address\n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P frv_print_operand_punct_valid_p\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE frv_function_prologue\n #undef  TARGET_ASM_FUNCTION_EPILOGUE\n@@ -2562,7 +2571,7 @@ frv_index_memory (rtx memref, enum machine_mode mode, int index)\n \n \f\n /* Print a memory address as an operand to reference that memory location.  */\n-void\n+static void\n frv_print_operand_address (FILE * stream, rtx x)\n {\n   if (GET_CODE (x) == MEM)\n@@ -2795,9 +2804,9 @@ comparison_string (enum rtx_code code, rtx op0)\n /* Print an operand to an assembler instruction.\n \n    `%' followed by a letter and a digit says to output an operand in an\n-   alternate fashion.  Four letters have standard, built-in meanings described\n-   below.  The machine description macro `PRINT_OPERAND' can define additional\n-   letters with nonstandard meanings.\n+   alternate fashion.  Four letters have standard, built-in meanings\n+   described below.  The hook `TARGET_PRINT_OPERAND' can define\n+   additional letters with nonstandard meanings.\n \n    `%cDIGIT' can be used to substitute an operand that is a constant value\n    without the syntax that normally indicates an immediate operand.\n@@ -2818,13 +2827,14 @@ comparison_string (enum rtx_code code, rtx op0)\n    than once in a single template that generates multiple assembler\n    instructions.\n \n-   `%' followed by a punctuation character specifies a substitution that does\n-   not use an operand.  Only one case is standard: `%%' outputs a `%' into the\n-   assembler code.  Other nonstandard cases can be defined in the\n-   `PRINT_OPERAND' macro.  You must also define which punctuation characters\n-   are valid with the `PRINT_OPERAND_PUNCT_VALID_P' macro.  */\n+   `%' followed by a punctuation character specifies a substitution that\n+   does not use an operand.  Only one case is standard: `%%' outputs a\n+   `%' into the assembler code.  Other nonstandard cases can be defined\n+   in the `TARGET_PRINT_OPERAND' hook.  You must also define which\n+   punctuation characters are valid with the\n+   `TARGET_PRINT_OPERAND_PUNCT_VALID_P' hook.  */\n \n-void\n+static void\n frv_print_operand (FILE * file, rtx x, int code)\n {\n   struct frv_unspec unspec;\n@@ -3115,6 +3125,13 @@ frv_print_operand (FILE * file, rtx x, int code)\n   return;\n }\n \n+static bool\n+frv_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return (code == '.' || code == '#' || code == '@' || code == '~'\n+\t  || code == '*' || code == '&');\n+}\n+\n \f\n /* A C statement (sans semicolon) for initializing the variable CUM for the\n    state at the beginning of the argument list.  The variable has type\n@@ -3374,11 +3391,11 @@ frv_regno_ok_for_base_p (int regno, int strict_p)\n    legitimate addresses.  Normally you would simply recognize any `const' as\n    legitimate.\n \n-   Usually `PRINT_OPERAND_ADDRESS' is not prepared to handle constant sums that\n-   are not marked with `const'.  It assumes that a naked `plus' indicates\n-   indexing.  If so, then you *must* reject such naked constant sums as\n-   illegitimate addresses, so that none of them will be given to\n-   `PRINT_OPERAND_ADDRESS'.  */\n+   Usually `TARGET_PRINT_OPERAND_ADDRESS' is not prepared to handle\n+   constant sums that are not marked with `const'.  It assumes that a\n+   naked `plus' indicates indexing.  If so, then you *must* reject such\n+   naked constant sums as illegitimate addresses, so that none of them\n+   will be given to `TARGET_PRINT_OPERAND_ADDRESS'.  */\n \n int\n frv_legitimate_address_p_1 (enum machine_mode mode,"}, {"sha": "1bf8b6bb080b30aac6a856cb3b7d7839fc5c2209", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "patch": "@@ -2325,52 +2325,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS)\\\n   frv_final_prescan_insn (INSN, OPVEC, NOPERANDS)\n \n-\n-/* A C compound statement to output to stdio stream STREAM the assembler syntax\n-   for an instruction operand X.  X is an RTL expression.\n-\n-   CODE is a value that can be used to specify one of several ways of printing\n-   the operand.  It is used when identical operands must be printed differently\n-   depending on the context.  CODE comes from the `%' specification that was\n-   used to request printing of the operand.  If the specification was just\n-   `%DIGIT' then CODE is 0; if the specification was `%LTR DIGIT' then CODE is\n-   the ASCII code for LTR.\n-\n-   If X is a register, this macro should print the register's name.  The names\n-   can be found in an array `reg_names' whose type is `char *[]'.  `reg_names'\n-   is initialized from `REGISTER_NAMES'.\n-\n-   When the machine description has a specification `%PUNCT' (a `%' followed by\n-   a punctuation character), this macro is called with a null pointer for X and\n-   the punctuation character for CODE.  */\n-#define PRINT_OPERAND(STREAM, X, CODE) frv_print_operand (STREAM, X, CODE)\n-\n-/* A C expression which evaluates to true if CODE is a valid punctuation\n-   character for use in the `PRINT_OPERAND' macro.  If\n-   `PRINT_OPERAND_PUNCT_VALID_P' is not defined, it means that no punctuation\n-   characters (except for the standard one, `%') are used in this way.  */\n-/* . == gr0\n-   # == hint operand -- always zero for now\n-   @ == small data base register (gr16)\n-   ~ == pic register (gr17)\n-   * == temporary integer CCR register (cr3)\n-   & == temporary integer ICC register (icc3)  */\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n-((CODE) == '.' || (CODE) == '#' || (CODE) == '@' || (CODE) == '~'\t\\\n- || (CODE) == '*' || (CODE) == '&')\n-\n-/* A C compound statement to output to stdio stream STREAM the assembler syntax\n-   for an instruction operand that is a memory reference whose address is X.  X\n-   is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on the section\n-   that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.\n-\n-   This declaration must be present.  */\n-#define PRINT_OPERAND_ADDRESS(STREAM, X) frv_print_operand_address (STREAM, X)\n-\n /* If defined, C string expressions to be used for the `%R', `%L', `%U', and\n    `%I' options of `asm_fprintf' (see `final.c').  These are useful when a\n    single `md' file must support multiple assembler formats.  In that case, the"}]}