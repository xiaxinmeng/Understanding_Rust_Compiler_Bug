{"sha": "d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiNTYzNzFhYWI4ZDA1NmZjM2FkN2QxYWE0ZDNmNzZmMGU4MzlkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:38:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:38:22Z"}, "message": "[multiple changes]\n\n2016-07-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch12.ads, freeze.adb: Minor reformatting and typo fixes.\n\n2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (New_Stream_Subprogram): If the attribute\n\tdefinition clause comes from an aspect specification, place the\n\tgenerated subprogram renaming in the freeze actions of the type.\n\n2016-07-04  Philippe Gil  <gil@adacore.com>\n\n\t* g-debpoo.adb (Dump.Do_Report) - add space prefix to backtrace\n\taddress dump - avoid new line sent directly to stdout.\n\n2016-07-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb, sem_ch12.adb, sem_elab.adb, sem_prag.adb, sem_res.adb:\n\tRelax elaboration checks in SPARK_Mode so that we rely on the\n\tstatic elaboration model (if used). We'll have a more precise\n\tcheck performed in flow analysis of gnat2why.\n\nFrom-SVN: r237968", "tree": {"sha": "7acf0390ffa103a9fe53083b2e13c0da7be1a593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7acf0390ffa103a9fe53083b2e13c0da7be1a593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/comments", "author": null, "committer": null, "parents": [{"sha": "7c14db4032fe0e34140dacf08c4ffadde404f414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c14db4032fe0e34140dacf08c4ffadde404f414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c14db4032fe0e34140dacf08c4ffadde404f414"}], "stats": {"total": 102, "additions": 56, "deletions": 46}, "files": [{"sha": "680902f1f8292fe30edc1613e8952d63ff8bda43", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -1,3 +1,25 @@\n+2016-07-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch12.ads, freeze.adb: Minor reformatting and typo fixes.\n+\n+2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (New_Stream_Subprogram): If the attribute\n+\tdefinition clause comes from an aspect specification, place the\n+\tgenerated subprogram renaming in the freeze actions of the type.\n+\n+2016-07-04  Philippe Gil  <gil@adacore.com>\n+\n+\t* g-debpoo.adb (Dump.Do_Report) - add space prefix to backtrace\n+\taddress dump - avoid new line sent directly to stdout.\n+\n+2016-07-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb, sem_ch12.adb, sem_elab.adb, sem_prag.adb, sem_res.adb:\n+\tRelax elaboration checks in SPARK_Mode so that we rely on the\n+\tstatic elaboration model (if used). We'll have a more precise\n+\tcheck performed in flow analysis of gnat2why.\n+\n 2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n \n \t* ghost.adb (Prune_Node): A freeze node for an ignored ghost"}, {"sha": "cfb20f4f4955e032a8d13cfb263cc46995335819", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -4413,9 +4413,9 @@ package body Freeze is\n \n            --  We want to implicitly pack if the specified size of the record\n            --  is less than the sum of the object sizes (no point in packing\n-           --  if this is not the case) if we can compute it, i.e. if we have\n+           --  if this is not the case), if we can compute it, i.e. if we have\n            --  only elementary components. Otherwise, we have at least one\n-           --  composite component and we want to implicit pack only if bit\n+           --  composite component and we want to implicitly pack only if bit\n            --  packing is required for it, as we are sure in this case that\n            --  the back end cannot do the expected layout without packing.\n "}, {"sha": "567bb758a4137b9a3940bd540b61f9eaedf432f0", "filename": "gcc/ada/g-debpoo.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.adb?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1908,7 +1908,7 @@ package body GNAT.Debug_Pools is\n          --  Sorted array for the biggest memory users\n \n       begin\n-         New_Line;\n+         Put_Line (\"\");\n          case Sort is\n             when Memory_Usage | All_Reports  =>\n                Put_Line (Size'Img & \" biggest memory users at this time:\");\n@@ -2010,10 +2010,10 @@ package body GNAT.Debug_Pools is\n             end;\n \n             for J in Max (M).Traceback'Range loop\n-               Put (Image_C (PC_For (Max (M).Traceback (J))));\n+               Put (\" \" & Image_C (PC_For (Max (M).Traceback (J))));\n             end loop;\n \n-            New_Line;\n+            Put_Line (\"\");\n          end loop;\n       end Do_Report;\n "}, {"sha": "2ade204e6ab37f9a5ffb5c85042fe9f7ac302673", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -415,11 +415,6 @@ procedure Gnat1drv is\n \n          Suppress_Options.Suppress := (others => False);\n \n-         --  Turn off dynamic elaboration checks. SPARK mode depends on the\n-         --  use of the static elaboration mode.\n-\n-         Dynamic_Elaboration_Checks := False;\n-\n          --  Detect overflow on unconstrained floating-point types, such as\n          --  the predefined types Float, Long_Float and Long_Long_Float from\n          --  package Standard. Not necessary if float overflows are checked"}, {"sha": "1b4807746e401f73414bf6c24658fafdde7321f3", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -4356,10 +4356,6 @@ package body Sem_Ch12 is\n       SPARK_Mode_Pragma        := Save_SMP;\n       Style_Check              := Save_Style_Check;\n \n-      if SPARK_Mode = On then\n-         Dynamic_Elaboration_Checks := False;\n-      end if;\n-\n       --  Check that if N is an instantiation of System.Dim_Float_IO or\n       --  System.Dim_Integer_IO, the formal type has a dimension system.\n \n@@ -4396,10 +4392,6 @@ package body Sem_Ch12 is\n          SPARK_Mode               := Save_SM;\n          SPARK_Mode_Pragma        := Save_SMP;\n          Style_Check              := Save_Style_Check;\n-\n-         if SPARK_Mode = On then\n-            Dynamic_Elaboration_Checks := False;\n-         end if;\n    end Analyze_Package_Instantiation;\n \n    --------------------------\n@@ -5328,10 +5320,6 @@ package body Sem_Ch12 is\n          Ignore_Pragma_SPARK_Mode := Save_IPSM;\n          SPARK_Mode               := Save_SM;\n          SPARK_Mode_Pragma        := Save_SMP;\n-\n-         if SPARK_Mode = On then\n-            Dynamic_Elaboration_Checks := False;\n-         end if;\n       end if;\n \n    <<Leave>>\n@@ -5352,10 +5340,6 @@ package body Sem_Ch12 is\n          Ignore_Pragma_SPARK_Mode := Save_IPSM;\n          SPARK_Mode               := Save_SM;\n          SPARK_Mode_Pragma        := Save_SMP;\n-\n-         if SPARK_Mode = On then\n-            Dynamic_Elaboration_Checks := False;\n-         end if;\n    end Analyze_Subprogram_Instantiation;\n \n    -------------------------\n@@ -15247,12 +15231,6 @@ package body Sem_Ch12 is\n \n          SPARK_Mode := Save_SPARK_Mode;\n          SPARK_Mode_Pragma := Save_SPARK_Mode_Pragma;\n-\n-         --  Make sure dynamic elaboration checks are off in SPARK Mode\n-\n-         if SPARK_Mode = On then\n-            Dynamic_Elaboration_Checks := False;\n-         end if;\n       end if;\n \n       Current_Instantiated_Parent :="}, {"sha": "82a093afae32dadb6a726203aa7cd7953ab3766b", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -181,9 +181,9 @@ package Sem_Ch12 is\n    --  establishes a new source file entry representing the inherited pragma\n    --  as an instantiation, marked as an inherited pragma (so that errout can\n    --  distinguish cases for generating error messages, otherwise the treatment\n-   --  is identical). In this call N is the subprogram declaration from\n+   --  is identical). In this call, N is the subprogram declaration from\n    --  which the pragma is inherited and E is the defining identifier of\n-   --  the overridding subprogram (when the subprogram is redefined) or the\n+   --  the overriding subprogram (when the subprogram is redefined) or the\n    --  defining identifier of the extension type (when the subprogram is\n    --  inherited). The resulting Sloc adjustment factor is saved as part of the\n    --  internal state of the Sem_Ch12 package for use in subsequent calls to"}, {"sha": "aaa8576ee26fd6f3703a13a992d550ca37b9ff42", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -11941,7 +11941,9 @@ package body Sem_Ch13 is\n       --  at the freeze point, and we must generate only a completion of this\n       --  declaration. We do the same for private types, because the full view\n       --  might be tagged. Otherwise we generate a declaration at the point of\n-      --  the attribute definition clause.\n+      --  the attribute definition clause. If the attribute definition comes\n+      --  from an aspect specification the declaration is part of the freeze\n+      --  actions of the type.\n \n       function Build_Spec return Node_Id;\n       --  Used for declaration and renaming declaration, so that this is\n@@ -12033,8 +12035,16 @@ package body Sem_Ch13 is\n              Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc));\n       end if;\n \n-      Insert_Action (N, Subp_Decl);\n-      Set_Entity (N, Subp_Id);\n+      if not Defer_Declaration\n+        and then From_Aspect_Specification (N)\n+        and then Has_Delayed_Freeze (Ent)\n+      then\n+         Append_Freeze_Action (Ent, Subp_Decl);\n+\n+      else\n+         Insert_Action (N, Subp_Decl);\n+         Set_Entity (N, Subp_Id);\n+      end if;\n \n       Subp_Decl :=\n         Make_Subprogram_Renaming_Declaration (Loc,\n@@ -12043,8 +12053,15 @@ package body Sem_Ch13 is\n \n       if Defer_Declaration then\n          Set_TSS (Base_Type (Ent), Subp_Id);\n+\n       else\n-         Insert_Action (N, Subp_Decl);\n+         if From_Aspect_Specification (N) then\n+            Append_Freeze_Action (Ent, Subp_Decl);\n+\n+         else\n+            Insert_Action (N, Subp_Decl);\n+         end if;\n+\n          Copy_TSS (Subp_Id, Base_Type (Ent));\n       end if;\n    end New_Stream_Subprogram;"}, {"sha": "8e82d281795f632d28e4115da368835ae40d404a", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -1018,7 +1018,9 @@ package body Sem_Elab is\n       --  expression, which in turn may have side effects.\n \n       Issue_In_SPARK :=\n-        SPARK_Mode = On and (Comes_From_Source (Ent) or Is_DIC_Proc);\n+        SPARK_Mode = On\n+          and then Dynamic_Elaboration_Checks\n+          and then (Comes_From_Source (Ent) or Is_DIC_Proc);\n \n       --  Now check if an Elaborate_All (or dynamic check) is needed\n "}, {"sha": "f603e317af479a20c59b10405a1365ec2ffcd479", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -14489,8 +14489,7 @@ package body Sem_Prag is\n             --  checks in SPARK mode).\n \n             Dynamic_Elaboration_Checks :=\n-              (Chars (Get_Pragma_Arg (Arg1)) = Name_Dynamic)\n-                and then SPARK_Mode /= On;\n+              Chars (Get_Pragma_Arg (Arg1)) = Name_Dynamic;\n \n          ---------------\n          -- Eliminate --\n@@ -21200,10 +21199,6 @@ package body Sem_Prag is\n             begin\n                SPARK_Mode := Mode_Id;\n                SPARK_Mode_Pragma := N;\n-\n-               if SPARK_Mode = On then\n-                  Dynamic_Elaboration_Checks := False;\n-               end if;\n             end Set_SPARK_Context;\n \n             --  Local variables"}, {"sha": "06e9f06303d53dac3ae00af1f231e1fb9ac9667c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d4b56371aab8d056fc3ad7d1aa4d3f76f0e839d1", "patch": "@@ -7119,6 +7119,7 @@ package body Sem_Res is\n             --  read as it simply establishes an alias.\n \n             if Ekind (E) = E_Variable\n+              and then Dynamic_Elaboration_Checks\n               and then Nkind (Par) /= N_Object_Renaming_Declaration\n             then\n                Check_Elab_Call (N);"}]}