{"sha": "4786fabecc8559f04eed93d3d49738680b52536b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4NmZhYmVjYzg1NTlmMDRlZWQ5M2QzZDQ5NzM4NjgwYjUyNTM2Yg==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2016-11-16T09:28:40Z"}, "committer": {"name": "Senthil Kumar Selvaraj", "email": "saaadhu@gcc.gnu.org", "date": "2016-11-16T09:28:40Z"}, "message": "Fix bogus failure of Wlogical-op-1.c for avr\n\nThe test assumes short is always smaller than int, and therefore does not \nexpect a warning when the logical operands are of type short and int.\n\nThis isn't true for the avr - shorts and ints are of the same size, and\ntherefore the warning triggers for the above case also.\n\nFix by explicitly typedef'ing __INT32_TYPE for int and __INT16_TYPE__ for short\nif the target's int size is less than 4 bytes.\n\ngcc/testsuite/\n2016-11-16  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n\n\t* c-c++-common/Wlogical-op-1.c: Use __INT{16,32}_TYPE__ instead\n\tof {short,int} if __SIZEOF_INT__ is less than 4 bytes.\n\nFrom-SVN: r242472", "tree": {"sha": "21c370d260e45cb1cbf0398b895943c99a39effe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21c370d260e45cb1cbf0398b895943c99a39effe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4786fabecc8559f04eed93d3d49738680b52536b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4786fabecc8559f04eed93d3d49738680b52536b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4786fabecc8559f04eed93d3d49738680b52536b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4786fabecc8559f04eed93d3d49738680b52536b/comments", "author": null, "committer": {"login": "saaadhu", "id": 532256, "node_id": "MDQ6VXNlcjUzMjI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/532256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaadhu", "html_url": "https://github.com/saaadhu", "followers_url": "https://api.github.com/users/saaadhu/followers", "following_url": "https://api.github.com/users/saaadhu/following{/other_user}", "gists_url": "https://api.github.com/users/saaadhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaadhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaadhu/subscriptions", "organizations_url": "https://api.github.com/users/saaadhu/orgs", "repos_url": "https://api.github.com/users/saaadhu/repos", "events_url": "https://api.github.com/users/saaadhu/events{/privacy}", "received_events_url": "https://api.github.com/users/saaadhu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6adf1c5fb249497a0f35a2ffb9897b35764d3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6adf1c5fb249497a0f35a2ffb9897b35764d3c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6adf1c5fb249497a0f35a2ffb9897b35764d3c9"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "00f1166b50e6d1d8989ce1bb3dbe12104611d518", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4786fabecc8559f04eed93d3d49738680b52536b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4786fabecc8559f04eed93d3d49738680b52536b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4786fabecc8559f04eed93d3d49738680b52536b", "patch": "@@ -1,3 +1,8 @@\n+2016-11-16  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* c-c++-common/Wlogical-op-1.c: Use __INT{16,32}_TYPE__ instead\n+\tof {short,int} if __SIZEOF_INT__ is less than 4 bytes.\n+\n 2016-11-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78348"}, {"sha": "c5f992a400706a105b9fabf681ab475672ce6f25", "filename": "gcc/testsuite/c-c++-common/Wlogical-op-1.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4786fabecc8559f04eed93d3d49738680b52536b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4786fabecc8559f04eed93d3d49738680b52536b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c?ref=4786fabecc8559f04eed93d3d49738680b52536b", "patch": "@@ -8,12 +8,22 @@\n # define false 0\n #endif\n \n-extern int bar (void);\n-extern int *p;\n-struct R { int a, b; } S;\n+#if __SIZEOF_INT__ < 4\n+  __extension__ typedef __INT32_TYPE__ int32_t;\n+  __extension__ typedef __UINT32_TYPE__ uint32_t;\n+  __extension__ typedef __INT16_TYPE__ int16_t;\n+#else\n+  typedef int int32_t;\n+  typedef unsigned int uint32_t;\n+  typedef short int16_t;\n+#endif\n+\n+extern int32_t bar (void);\n+extern int32_t *p;\n+struct R { int32_t a, b; } S;\n \n void\n-andfn (int a, int b)\n+andfn (int32_t a, int32_t b)\n {\n   if (a && a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n   if (!a && !a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n@@ -34,7 +44,7 @@ andfn (int a, int b)\n   if (p[0] && p[0]) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n   if (S.a && S.a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n   if ((bool) a && (bool) a) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n-  if ((unsigned) a && a) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if ((uint32_t) a && a) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n \n   /* Stay quiet here.  */\n   if (a && b) {}\n@@ -48,7 +58,7 @@ andfn (int a, int b)\n \n   if (a > 0 && a > 1) {}\n   if (a > -2 && a > 1) {}\n-  if (a && (short) a) {}\n+  if (a && (int16_t) a) {}\n   if ((char) a && a) {}\n   if (++a && a) {}\n   if (++a && ++a) {}\n@@ -61,7 +71,7 @@ andfn (int a, int b)\n }\n \n void\n-orfn (int a, int b)\n+orfn (int32_t a, int32_t b)\n {\n   if (a || a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n   if (!a || !a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n@@ -82,7 +92,7 @@ orfn (int a, int b)\n   if (p[0] || p[0]) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n   if (S.a || S.a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n   if ((bool) a || (bool) a) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n-  if ((unsigned) a || a) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if ((uint32_t) a || a) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n \n   /* Stay quiet here.  */\n   if (a || b) {}\n@@ -96,7 +106,7 @@ orfn (int a, int b)\n \n   if (a > 0 || a > 1) {}\n   if (a > -2 || a > 1) {}\n-  if (a || (short) a) {}\n+  if (a || (int16_t) a) {}\n   if ((char) a || a) {}\n   if (++a || a) {}\n   if (++a || ++a) {}"}]}