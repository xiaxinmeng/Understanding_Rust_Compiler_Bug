{"sha": "8e7682148505b21e6295a118b1b2cb05107f9b34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3NjgyMTQ4NTA1YjIxZTYyOTVhMTE4YjFiMmNiMDUxMDdmOWIzNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-01-12T11:09:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-01-12T11:09:26Z"}, "message": "re PR libstdc++/30416 (SIGSEGV in valarray::cshift(n) on empty array)\n\n2007-01-12  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/30416\n\t* include/std/valarray (valarray<>::shift, valarray<>::cshift):\n\tDo not segfault when |n| > size.\n\t* testsuite/26_numerics/valarray/30416.cc: New.\n\nFrom-SVN: r120720", "tree": {"sha": "beea31186204c15f7dec0f8bc5754b9e54d309ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beea31186204c15f7dec0f8bc5754b9e54d309ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e7682148505b21e6295a118b1b2cb05107f9b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7682148505b21e6295a118b1b2cb05107f9b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7682148505b21e6295a118b1b2cb05107f9b34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7682148505b21e6295a118b1b2cb05107f9b34/comments", "author": null, "committer": null, "parents": [{"sha": "192232e253d58547945f9308d973fc3bda0cf215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192232e253d58547945f9308d973fc3bda0cf215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192232e253d58547945f9308d973fc3bda0cf215"}], "stats": {"total": 276, "additions": 239, "deletions": 37}, "files": [{"sha": "6bfbcc1db401b1b939f2456d741f66fc43840d83", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7682148505b21e6295a118b1b2cb05107f9b34/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7682148505b21e6295a118b1b2cb05107f9b34/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8e7682148505b21e6295a118b1b2cb05107f9b34", "patch": "@@ -1,3 +1,10 @@\n+2007-01-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/30416\n+\t* include/std/valarray (valarray<>::shift, valarray<>::cshift):\n+\tDo not segfault when |n| > size.\n+\t* testsuite/26_numerics/valarray/30416.cc: New.\n+\n 2007-01-06  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/30365"}, {"sha": "95f27012eaf7792cf396de014338c31c5f16e773", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7682148505b21e6295a118b1b2cb05107f9b34/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7682148505b21e6295a118b1b2cb05107f9b34/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=8e7682148505b21e6295a118b1b2cb05107f9b34", "patch": "@@ -782,34 +782,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      inline valarray<_Tp>\n      valarray<_Tp>::shift(int __n) const\n      {\n+       if (_M_size == 0 || __n == 0)\n+\t return *this;\n+     \n        valarray<_Tp> __ret;\n        _Tp* __restrict__ __tmp_M_data =\n \t std::__valarray_get_storage<_Tp>(_M_size);\n \n-       if (__n == 0)                          // no shift\n-         std::__valarray_copy_construct(_M_data, _M_data + _M_size,\n-\t\t\t\t\t__tmp_M_data);\n-       else if (__n > 0)         // __n > 0: shift left\n-         {                 \n-           if (size_t(__n) > _M_size)\n-             std::__valarray_default_construct(__tmp_M_data,\n-\t\t\t\t\t       __tmp_M_data + __n);\n-           else\n-             {\n-               std::__valarray_copy_construct(_M_data + __n,\n-\t\t\t\t\t      _M_data + _M_size,\n-\t\t\t\t\t      __tmp_M_data);\n-               std::__valarray_default_construct(__tmp_M_data + _M_size - __n,\n-\t\t\t\t\t\t __tmp_M_data + _M_size);\n-             }\n-         }\n-       else                        // __n < 0: shift right\n-         {                          \n-           std::__valarray_copy_construct(_M_data, _M_data + _M_size + __n,\n+       if (__n > 0)      // shift left\n+\t {\n+\t   if (size_t(__n) > _M_size)\n+\t     __n = _M_size;\n+\n+\t   std::__valarray_copy_construct(_M_data + __n,\n+\t\t\t\t\t  _M_data + _M_size, __tmp_M_data);\n+\t   std::__valarray_default_construct(__tmp_M_data + _M_size - __n,\n+\t\t\t\t\t     __tmp_M_data + _M_size);\n+\t }\n+       else              // shift right\n+\t {\n+\t   if (size_t(-__n) > _M_size)\n+\t     __n = -_M_size;\n+\n+\t   std::__valarray_copy_construct(_M_data, _M_data + _M_size + __n,\n \t\t\t\t\t  __tmp_M_data - __n);\n-           std::__valarray_default_construct(__tmp_M_data,\n+\t   std::__valarray_default_construct(__tmp_M_data,\n \t\t\t\t\t     __tmp_M_data - __n);\n-         }\n+\t }\n \n        __ret._M_size = _M_size;\n        __ret._M_data = __tmp_M_data;\n@@ -820,27 +819,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      inline valarray<_Tp>\n      valarray<_Tp>::cshift(int __n) const\n      {\n+       if (_M_size == 0 || __n == 0)\n+\t return *this;\n+\n        valarray<_Tp> __ret;\n        _Tp* __restrict__ __tmp_M_data =\n \t std::__valarray_get_storage<_Tp>(_M_size);\n+       \n+       if (__n > 0)      // cshift left\n+\t {\n+\t   if (size_t(__n) > _M_size)\n+\t     __n = __n % _M_size;\n \n-       if (__n == 0)               // no cshift\n-         std::__valarray_copy_construct(_M_data, _M_data + _M_size,\n-\t\t\t\t\t__tmp_M_data);\n-       else if (__n > 0)           // cshift left\n-         {               \n-           std::__valarray_copy_construct(_M_data, _M_data + __n,\n+\t   std::__valarray_copy_construct(_M_data, _M_data + __n,\n \t\t\t\t\t  __tmp_M_data + _M_size - __n);\n-           std::__valarray_copy_construct(_M_data + __n, _M_data + _M_size,\n+\t   std::__valarray_copy_construct(_M_data + __n, _M_data + _M_size,\n \t\t\t\t\t  __tmp_M_data);\n-         }\n-       else                        // cshift right\n-         {                       \n-           std::__valarray_copy_construct\n-             (_M_data + _M_size + __n, _M_data + _M_size, __tmp_M_data);\n-           std::__valarray_copy_construct\n-             (_M_data, _M_data + _M_size + __n, __tmp_M_data - __n);\n-         }\n+\t }\n+       else              // cshift right\n+\t {\n+\t   if (size_t(-__n) > _M_size)\n+\t     __n = -(-__n % _M_size);\n+\n+\t   std::__valarray_copy_construct(_M_data + _M_size + __n,\n+\t\t\t\t\t  _M_data + _M_size, __tmp_M_data);\n+\t   std::__valarray_copy_construct(_M_data, _M_data + _M_size + __n,\n+\t\t\t\t\t  __tmp_M_data - __n);\n+\t }\n \n        __ret._M_size = _M_size;\n        __ret._M_data = __tmp_M_data;"}, {"sha": "c51329221d5fa62bc3d916f77002400cf921f78b", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/30416.cc", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7682148505b21e6295a118b1b2cb05107f9b34/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F30416.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7682148505b21e6295a118b1b2cb05107f9b34/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F30416.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F30416.cc?ref=8e7682148505b21e6295a118b1b2cb05107f9b34", "patch": "@@ -0,0 +1,190 @@\n+// 2007-01-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+bool\n+comp_vala(const std::valarray<int>& v1, const std::valarray<int>& v2)\n+{\n+  if (v1.size() == v2.size())\n+    {\n+      for (size_t i = 0; i < v1.size(); ++i)\n+\tif (v1[i] != v2[i])\n+\t  return false;\n+      return true;\n+    }\n+  return false;\n+}\n+\n+void\n+init_vala(std::valarray<int>& v, size_t first, size_t last, int val)\n+{\n+  for (size_t i = first; i <= last; ++i)\n+    v[i] = val++;\n+}\n+\n+// libstdc++/30416\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  // shift\n+  valarray<int> v1;\n+  valarray<int> v1_ris(v1.shift(0));\n+  VERIFY( comp_vala(v1, v1_ris) );\n+  \n+  valarray<int> v2;\n+  valarray<int> v2_ris(v2.shift(10));\n+  VERIFY( comp_vala(v2, v2_ris) );\n+  \n+  valarray<int> v3;\n+  valarray<int> v3_ris(v3.shift(-10));\n+  VERIFY( comp_vala(v3, v3_ris) );\n+  \n+  valarray<int> v4(10);\n+  valarray<int> v4_ris(v4.shift(0));\n+  VERIFY( comp_vala(v4, v4_ris) );\n+  \n+  valarray<int> v5(10);\n+  init_vala(v5, 0, 9, 1);\n+  valarray<int> v5_ref(10);  \n+  \n+  valarray<int> v5_ris(v5.shift(16));\n+  VERIFY( comp_vala(v5_ris, v5_ref) );\n+  \n+  valarray<int> v6(10);\n+  init_vala(v6, 0, 9, 1);\n+  valarray<int> v6_ref(10);\n+  \n+  valarray<int> v6_ris(v6.shift(-16));\n+  VERIFY( comp_vala(v6_ris, v6_ref) );\n+\n+  valarray<int> v7(10);\n+  init_vala(v7, 0, 9, 1);\n+  valarray<int> v7_ref(10);  \n+  \n+  valarray<int> v7_ris(v7.shift(10));\n+  VERIFY( comp_vala(v7_ris, v7_ref) );\n+  \n+  valarray<int> v8(10);\n+  init_vala(v8, 0, 9, 1);\n+  valarray<int> v8_ref(10);\n+  \n+  valarray<int> v8_ris(v8.shift(-10));\n+  VERIFY( comp_vala(v8_ris, v8_ref) );\n+\n+  valarray<int> v9(10);\n+  init_vala(v9, 0, 9, 1);\n+  valarray<int> v9_ref(10);  \n+  init_vala(v9_ref, 0, 3, 7);\n+  \n+  valarray<int> v9_ris(v9.shift(6));\n+  VERIFY( comp_vala(v9_ris, v9_ref) );\n+  \n+  valarray<int> v10(10);\n+  init_vala(v10, 0, 9, 1);\n+  valarray<int> v10_ref(10);\n+  init_vala(v10_ref, 6, 9, 1);\n+\n+  valarray<int> v10_ris(v10.shift(-6));\n+  VERIFY( comp_vala(v10_ris, v10_ref) );\n+\n+  // cshift\n+  valarray<int> v11;\n+  valarray<int> v11_ris(v11.cshift(0));\n+  VERIFY( comp_vala(v11, v11_ris) );\n+  \n+  valarray<int> v12;\n+  valarray<int> v12_ris(v12.cshift(10));\n+  VERIFY( comp_vala(v12, v12_ris) );\n+  \n+  valarray<int> v13;\n+  valarray<int> v13_ris(v13.cshift(-10));\n+  VERIFY( comp_vala(v13, v13_ris) );\n+  \n+  valarray<int> v14(10);\n+  valarray<int> v14_ris(v14.cshift(0));\n+  VERIFY( comp_vala(v14, v14_ris) );\n+  \n+  valarray<int> v15(10);\n+  init_vala(v15, 0, 9, 1);\n+  valarray<int> v15_ref(10);\n+  init_vala(v15_ref, 0, 3, 7);\n+  init_vala(v15_ref, 4, 9, 1);\n+  \n+  valarray<int> v15_ris(v15.cshift(16));\n+  VERIFY( comp_vala(v15_ris, v15_ref) );\n+\n+  valarray<int> v16(10);\n+  init_vala(v16, 0, 9, 1);\n+  valarray<int> v16_ref(10);\n+  init_vala(v16_ref, 0, 5, 5);\n+  init_vala(v16_ref, 6, 9, 1);\n+  \n+  valarray<int> v16_ris(v16.cshift(-16));\n+  VERIFY( comp_vala(v16_ris, v16_ref) );\n+\n+  valarray<int> v17(10);\n+  init_vala(v17, 0, 9, 1);\n+  \n+  valarray<int> v17_ris(v15.cshift(10));\n+  VERIFY( comp_vala(v17, v17_ris) );\n+  \n+  valarray<int> v18(10);\n+  init_vala(v18, 0, 9, 1);\n+  \n+  valarray<int> v18_ris(v18.cshift(-10));\n+  VERIFY( comp_vala(v18, v18_ris) );\n+\n+  valarray<int> v19(10);\n+  init_vala(v19, 0, 9, 1);\n+  valarray<int> v19_ref(10);\n+  init_vala(v19_ref, 0, 3, 7);\n+  init_vala(v19_ref, 4, 9, 1);\n+  \n+  valarray<int> v19_ris(v15.cshift(6));\n+  VERIFY( comp_vala(v19_ris, v19_ref) );\n+  \n+  valarray<int> v20(10);\n+  init_vala(v20, 0, 9, 1);\n+  valarray<int> v20_ref(10);\n+  init_vala(v20_ref, 0, 5, 5);\n+  init_vala(v20_ref, 6, 9, 1);\n+  \n+  valarray<int> v20_ris(v20.cshift(-6));\n+  VERIFY( comp_vala(v20_ris, v20_ref) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+} "}]}