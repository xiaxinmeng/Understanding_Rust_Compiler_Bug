{"sha": "e0942dcd7e556187ad91a0485ae2d82097611bfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA5NDJkY2Q3ZTU1NjE4N2FkOTFhMDQ4NWFlMmQ4MjA5NzYxMWJmZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-15T16:59:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-15T16:59:17Z"}, "message": "pt.c (check_default_tmpl_args): Don't check in local scopes.\n\n\t* pt.c (check_default_tmpl_args): Don't check in local scopes.\n\t(tsubst_decl): Make sure the declaration is on a saveable\n\tobstack.  Clear DECL_DEAD_FOR_LOCAL when making a copy of a local\n\tvariable.\n\t(tsubst_expr): Adjust now that DECL_STMTs really contain DECLs.\n\nFrom-SVN: r28715", "tree": {"sha": "5a7240ff2fa93e3279b5069ef486e71dd65b258b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a7240ff2fa93e3279b5069ef486e71dd65b258b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0942dcd7e556187ad91a0485ae2d82097611bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0942dcd7e556187ad91a0485ae2d82097611bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0942dcd7e556187ad91a0485ae2d82097611bfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0942dcd7e556187ad91a0485ae2d82097611bfe/comments", "author": null, "committer": null, "parents": [{"sha": "66e064294ff397b5d38089610eb94a6fb564eb4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e064294ff397b5d38089610eb94a6fb564eb4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e064294ff397b5d38089610eb94a6fb564eb4c"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "f80f3748415512645bb9692150c6141bb0ff53fa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0942dcd7e556187ad91a0485ae2d82097611bfe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0942dcd7e556187ad91a0485ae2d82097611bfe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0942dcd7e556187ad91a0485ae2d82097611bfe", "patch": "@@ -1,3 +1,11 @@\n+1999-08-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* pt.c (check_default_tmpl_args): Don't check in local scopes.\n+\t(tsubst_decl): Make sure the declaration is on a saveable\n+\tobstack.  Clear DECL_DEAD_FOR_LOCAL when making a copy of a local\n+\tvariable.\n+\t(tsubst_expr): Adjust now that DECL_STMTs really contain DECLs.\n+\t\n 1999-08-14  Jason Merrill  <jason@yorick.cygnus.com>\n \n \tSpeed up Koenig lookup."}, {"sha": "f81975ffdad20fbe6c1f6a35eb20a9c450b6471f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0942dcd7e556187ad91a0485ae2d82097611bfe/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0942dcd7e556187ad91a0485ae2d82097611bfe/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e0942dcd7e556187ad91a0485ae2d82097611bfe", "patch": "@@ -2247,6 +2247,12 @@ check_default_tmpl_args (decl, parms, is_primary, is_partial)\n      in the template-parameter-list of the definition of a member of a\n      class template.  */\n \n+  if (TREE_CODE (DECL_REAL_CONTEXT (decl)) == FUNCTION_DECL)\n+    /* You can't have a function template declaration in a local\n+       scope, nor you can you define a member of a class template in a\n+       local scope.  */\n+    return;\n+\n   if (current_class_type\n       && !TYPE_BEING_DEFINED (current_class_type)\n       && DECL_LANG_SPECIFIC (decl)\n@@ -6035,7 +6041,13 @@ tsubst_decl (t, args, type, in_decl)\n \t    break;\n \t  }\n \n+\t/* This declaration is going to have to be around for a while,\n+\t   so me make sure it is on a saveable obstack.  */\n+\tpush_obstacks_nochange ();\n+\tsaveable_allocation ();\n \tr = copy_node (t);\n+\tpop_obstacks ();\n+\n \tTREE_TYPE (r) = type;\n \tc_apply_type_quals_to_decl (CP_TYPE_QUALS (type), r);\n \tDECL_CONTEXT (r) = ctx;\n@@ -6048,10 +6060,16 @@ tsubst_decl (t, args, type, in_decl)\n \tcopy_lang_decl (r);\n \tDECL_CLASS_CONTEXT (r) = DECL_CONTEXT (r);\n \n+\t/* Even if the original location is out of scope, the newly\n+\t   substituted one is not.  */\n+\tif (TREE_CODE (r) == VAR_DECL)\n+\t  DECL_DEAD_FOR_LOCAL (r) = 0;\n+\n \t/* A static data member declaration is always marked external\n \t   when it is declared in-class, even if an initializer is\n \t   present.  We mimic the non-template processing here.  */\n-\tDECL_EXTERNAL (r) = 1;\n+\tif (ctx)\n+\t  DECL_EXTERNAL (r) = 1;\n \n \tDECL_TEMPLATE_INFO (r) = perm_tree_cons (tmpl, argvec, NULL_TREE);\n \tSET_DECL_IMPLICIT_INSTANTIATION (r);\n@@ -7231,19 +7249,25 @@ tsubst_expr (t, args, complain, in_decl)\n     case DECL_STMT:\n       {\n \tint i = suspend_momentary ();\n-\ttree dcl, init;\n+\ttree decl;\n+\ttree init;\n \n \tlineno = STMT_LINENO (t);\n \temit_line_note (input_filename, lineno);\n-\tdcl = start_decl\n-\t  (tsubst (TREE_OPERAND (t, 0), args, complain, in_decl),\n-\t   tsubst (TREE_OPERAND (t, 1), args, complain, in_decl),\n-\t   TREE_OPERAND (t, 2) != 0, NULL_TREE, NULL_TREE);\n-\tinit = tsubst_expr (TREE_OPERAND (t, 2), args, complain, in_decl);\n+\tdecl = DECL_STMT_DECL (t);\n+\tinit = DECL_INITIAL (decl);\n+\tdecl = tsubst (decl, args, complain, in_decl);\n+\tinit = tsubst_expr (init, args, complain, in_decl);\n+\tDECL_INITIAL (decl) = init;\n+\tmaybe_push_decl (decl);\n+\tif (TREE_CODE (decl) == VAR_DECL)\n+\t  DECL_TEMPLATE_INSTANTIATED (decl) = 1;\n+\tmaybe_push_decl (decl);\n+\tstart_decl_1 (decl);\n \tcp_finish_decl\n-\t  (dcl, init, NULL_TREE, 1, /*init ? LOOKUP_ONLYCONVERTING :*/ 0);\n+\t  (decl, init, NULL_TREE, 0, /*init ? LOOKUP_ONLYCONVERTING :*/ 0);\n \tresume_momentary (i);\n-\treturn dcl;\n+\treturn decl;\n       }\n \n     case FOR_STMT:"}]}