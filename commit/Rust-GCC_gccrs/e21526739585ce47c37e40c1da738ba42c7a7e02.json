{"sha": "e21526739585ce47c37e40c1da738ba42c7a7e02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxNTI2NzM5NTg1Y2U0N2MzN2U0MGMxZGE3MzhiYTQyYzdhN2UwMg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2014-07-03T11:47:46Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2014-07-03T11:47:46Z"}, "message": "ieee_1.F90: Mark variables as volatile to avoid optimization.\n\n\t* gfortran.dg/ieee/ieee_1.F90: Mark variables as volatile to\n\tavoid optimization.\n\nFrom-SVN: r212261", "tree": {"sha": "2466191b0760bc76717cab8f805fa336621e14ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2466191b0760bc76717cab8f805fa336621e14ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e21526739585ce47c37e40c1da738ba42c7a7e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21526739585ce47c37e40c1da738ba42c7a7e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e21526739585ce47c37e40c1da738ba42c7a7e02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21526739585ce47c37e40c1da738ba42c7a7e02/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71d7987b1f87e04bbea01b4a2d9bb900eca8f5d"}], "stats": {"total": 34, "additions": 7, "deletions": 27}, "files": [{"sha": "886a964b52d00ca14d18437545f7c428a3dabfeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21526739585ce47c37e40c1da738ba42c7a7e02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21526739585ce47c37e40c1da738ba42c7a7e02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e21526739585ce47c37e40c1da738ba42c7a7e02", "patch": "@@ -1,3 +1,8 @@\n+2014-07-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/ieee/ieee_1.F90: Mark variables as volatile to\n+\tavoid optimization.\n+\n 2014-07-03  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* gcc.target/arm/identical-invariants.c: New test."}, {"sha": "329aeef0d4461d2b6dbfb0ecf29a8004c3c0883a", "filename": "gcc/testsuite/gfortran.dg/ieee/ieee_1.F90", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21526739585ce47c37e40c1da738ba42c7a7e02/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21526739585ce47c37e40c1da738ba42c7a7e02/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_1.F90?ref=e21526739585ce47c37e40c1da738ba42c7a7e02", "patch": "@@ -11,10 +11,6 @@\n \n   implicit none\n \n-  interface use_real\n-    procedure use_real_4, use_real_8\n-  end interface use_real\n-\n   type(ieee_flag_type), parameter :: x(5) = &\n     [ IEEE_INVALID, IEEE_OVERFLOW, IEEE_DIVIDE_BY_ZERO, &\n       IEEE_UNDERFLOW, IEEE_INEXACT ]\n@@ -33,8 +29,8 @@\n   end if ; \\\n   call check_flag_sub\n \n-  real :: sx\n-  double precision :: dx\n+  real, volatile :: sx\n+  double precision, volatile :: dx\n \n   ! This file tests IEEE_SET_FLAG and IEEE_GET_FLAG\n \n@@ -49,9 +45,7 @@\n \n   ! Raise invalid, then clear\n   sx = -1\n-  call use_real(sx)\n   sx = sqrt(sx)\n-  call use_real(sx)\n   CHECK_FLAGS(\"I    \")\n   call ieee_set_flag(ieee_all, .false.)\n   CHECK_FLAGS(\"     \")\n@@ -61,13 +55,11 @@\n   CHECK_FLAGS(\"     \")\n   sx = sx*sx\n   CHECK_FLAGS(\" O  P\")\n-  call use_real(sx)\n \n   ! Also raise divide-by-zero\n   sx = 0\n   sx = 1 / sx\n   CHECK_FLAGS(\" OZ P\")\n-  call use_real(sx)\n \n   ! Clear them\n   call ieee_set_flag([ieee_overflow,ieee_inexact,&\n@@ -80,7 +72,6 @@\n   sx = tiny(sx)\n   CHECK_FLAGS(\"     \")\n   sx = sx / 10\n-  call use_real(sx)\n   CHECK_FLAGS(\"   UP\")\n \n   ! Raise everything\n@@ -102,9 +93,7 @@\n \n   ! Raise invalid, then clear\n   dx = -1\n-  call use_real(dx)\n   dx = sqrt(dx)\n-  call use_real(dx)\n   CHECK_FLAGS(\"I    \")\n   call ieee_set_flag(ieee_all, .false.)\n   CHECK_FLAGS(\"     \")\n@@ -114,13 +103,11 @@\n   CHECK_FLAGS(\"     \")\n   dx = dx*dx\n   CHECK_FLAGS(\" O  P\")\n-  call use_real(dx)\n \n   ! Also raise divide-by-zero\n   dx = 0\n   dx = 1 / dx\n   CHECK_FLAGS(\" OZ P\")\n-  call use_real(dx)\n \n   ! Clear them\n   call ieee_set_flag([ieee_overflow,ieee_inexact,&\n@@ -134,7 +121,6 @@\n   CHECK_FLAGS(\"     \")\n   dx = dx / 10\n   CHECK_FLAGS(\"   UP\")\n-  call use_real(dx)\n \n   ! Raise everything\n   call ieee_set_flag(ieee_all, .true.)\n@@ -160,15 +146,4 @@ subroutine check_flag_sub\n     end if\n   end subroutine\n \n-  ! Interface to a routine that avoids calculations to be optimized out,\n-  ! making it appear that we use the result\n-  subroutine use_real_4(x)\n-    real :: x\n-    if (x == 123456.789) print *, \"toto\"\n-  end subroutine\n-  subroutine use_real_8(x)\n-    double precision :: x\n-    if (x == 123456.789) print *, \"toto\"\n-  end subroutine\n-\n end"}]}