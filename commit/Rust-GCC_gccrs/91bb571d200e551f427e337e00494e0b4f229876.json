{"sha": "91bb571d200e551f427e337e00494e0b4f229876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFiYjU3MWQyMDBlNTUxZjQyN2UzMzdlMDA0OTRlMGI0ZjIyOTg3Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-13T18:42:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-14T19:01:27Z"}, "message": "vec: use auto_vec in a few more places\n\nThe uses of vec<T> in get_all_loop_exits and process_conditional were memory\nleaks, as .release() was never called for them.  The other changes are some\ncases that did have proper release handling, but it's simpler to leave\nreleasing to the auto_vec destructor.\n\ngcc/ChangeLog:\n\n\t* sel-sched-ir.h (get_all_loop_exits): Use auto_vec.\n\ngcc/cp/ChangeLog:\n\n\t* class.c (struct find_final_overrider_data): Use auto_vec.\n\t(find_final_overrider): Remove explicit release.\n\t* coroutines.cc (process_conditional): Use auto_vec.\n\t* cp-gimplify.c (struct cp_genericize_data): Use auto_vec.\n\t(cp_genericize_tree): Remove explicit release.\n\t* parser.c (cp_parser_objc_at_property_declaration): Use\n\tauto_delete_vec.\n\t* semantics.c (omp_reduction_lookup): Use auto_vec.", "tree": {"sha": "b72e29de68aa237224fbafabf8b0271734aa3fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b72e29de68aa237224fbafabf8b0271734aa3fc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91bb571d200e551f427e337e00494e0b4f229876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91bb571d200e551f427e337e00494e0b4f229876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91bb571d200e551f427e337e00494e0b4f229876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91bb571d200e551f427e337e00494e0b4f229876/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b15e301748f0e042379909e32b3ade439dd8f8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15e301748f0e042379909e32b3ade439dd8f8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15e301748f0e042379909e32b3ade439dd8f8f9"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "14db06692dc90c68b06a5870b4afdc5e2420e596", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=91bb571d200e551f427e337e00494e0b4f229876", "patch": "@@ -2391,7 +2391,7 @@ struct find_final_overrider_data {\n   /* The candidate overriders.  */\n   tree candidates;\n   /* Path to most derived.  */\n-  vec<tree> path;\n+  auto_vec<tree> path;\n };\n \n /* Add the overrider along the current path to FFOD->CANDIDATES.\n@@ -2504,8 +2504,6 @@ find_final_overrider (tree derived, tree binfo, tree fn)\n   dfs_walk_all (derived, dfs_find_final_overrider_pre,\n \t\tdfs_find_final_overrider_post, &ffod);\n \n-  ffod.path.release ();\n-\n   /* If there was no winner, issue an error message.  */\n   if (!ffod.candidates || TREE_CHAIN (ffod.candidates))\n     return error_mark_node;"}, {"sha": "712a5c0ab37ed6024638686af903944140fda5d6", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=91bb571d200e551f427e337e00494e0b4f229876", "patch": "@@ -3081,7 +3081,7 @@ process_conditional (var_nest_node *n, tree& vlist)\n {\n   tree init = n->init;\n   hash_map<tree, tree> var_flags;\n-  vec<tree> var_list = vNULL;\n+  auto_vec<tree> var_list;\n   tree new_then = push_stmt_list ();\n   handle_nested_conditionals (n->then_cl, var_list, var_flags);\n   new_then = pop_stmt_list (new_then);"}, {"sha": "de37f2cdfdca79414a1816153de3cdde79286b28", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=91bb571d200e551f427e337e00494e0b4f229876", "patch": "@@ -807,7 +807,7 @@ omp_cxx_notice_variable (struct cp_genericize_omp_taskreg *omp_ctx, tree decl)\n struct cp_genericize_data\n {\n   hash_set<tree> *p_set;\n-  vec<tree> bind_expr_stack;\n+  auto_vec<tree> bind_expr_stack;\n   struct cp_genericize_omp_taskreg *omp_ctx;\n   tree try_block;\n   bool no_sanitize_p;\n@@ -1582,7 +1582,6 @@ cp_genericize_tree (tree* t_p, bool handle_invisiref_parm_p)\n   wtd.handle_invisiref_parm_p = handle_invisiref_parm_p;\n   cp_walk_tree (t_p, cp_genericize_r, &wtd, NULL);\n   delete wtd.p_set;\n-  wtd.bind_expr_stack.release ();\n   if (sanitize_flags_p (SANITIZE_VPTR))\n     cp_ubsan_instrument_member_accesses (t_p);\n }"}, {"sha": "821ce1771a400e46985eaa770bc264041c4cfce9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=91bb571d200e551f427e337e00494e0b4f229876", "patch": "@@ -35247,7 +35247,7 @@ cp_parser_objc_at_property_declaration (cp_parser *parser)\n   /* Parse the optional attribute list.\n \n      A list of parsed, but not verified, attributes.  */\n-  vec<property_attribute_info *> prop_attr_list = vNULL;\n+  auto_delete_vec<property_attribute_info> prop_attr_list;\n   location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \n   cp_lexer_consume_token (parser->lexer);  /* Eat '@property'.  */\n@@ -35423,10 +35423,6 @@ cp_parser_objc_at_property_declaration (cp_parser *parser)\n     }\n \n   cp_parser_consume_semicolon_at_end_of_statement (parser);\n-\n-  while (!prop_attr_list.is_empty())\n-    delete prop_attr_list.pop ();\n-  prop_attr_list.release ();\n }\n \n /* Parse an Objective-C++ @synthesize declaration.  The syntax is:"}, {"sha": "b97dc1f6624f143c85c9090d692552e213419f91", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=91bb571d200e551f427e337e00494e0b4f229876", "patch": "@@ -5774,7 +5774,7 @@ omp_reduction_lookup (location_t loc, tree id, tree type, tree *baselinkp,\n \n   if (!id && CLASS_TYPE_P (type) && TYPE_BINFO (type))\n     {\n-      vec<tree> ambiguous = vNULL;\n+      auto_vec<tree> ambiguous;\n       tree binfo = TYPE_BINFO (type), base_binfo, ret = NULL_TREE;\n       unsigned int ix;\n       if (ambiguousp == NULL)\n@@ -5811,7 +5811,6 @@ omp_reduction_lookup (location_t loc, tree id, tree type, tree *baselinkp,\n \t      if (idx == 0)\n \t\tstr = get_spaces (str);\n \t    }\n-\t  ambiguous.release ();\n \t  ret = error_mark_node;\n \t  baselink = NULL_TREE;\n \t}"}, {"sha": "8ee0529d5a86ea5bb28ace56479006b392554cec", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91bb571d200e551f427e337e00494e0b4f229876/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=91bb571d200e551f427e337e00494e0b4f229876", "patch": "@@ -1166,7 +1166,7 @@ get_all_loop_exits (basic_block bb)\n \t     || (inner_loop_header_p (e->dest)))\n \t    && loop_depth (e->dest->loop_father) >= this_depth)\n \t  {\n-\t    vec<edge> next_exits = get_all_loop_exits (e->dest);\n+\t    auto_vec<edge> next_exits = get_all_loop_exits (e->dest);\n \n \t    if (next_exits.exists ())\n \t      {"}]}