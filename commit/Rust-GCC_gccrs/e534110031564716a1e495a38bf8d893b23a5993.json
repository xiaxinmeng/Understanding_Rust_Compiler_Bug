{"sha": "e534110031564716a1e495a38bf8d893b23a5993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzNDExMDAzMTU2NDcxNmExZTQ5NWEzOGJmOGQ4OTNiMjNhNTk5Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-05T21:46:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-05T21:46:31Z"}, "message": "re PR sanitizer/64344 ([UBSAN] ICE with -fsanitize=float-cast-overflow [ICE in -fsanitize=float-cast-overflow])\n\n\tPR sanitizer/64344\n\t* ubsan.h (ubsan_instrument_float_cast): Add ARG argument.\n\t* ubsan.c (ubsan_instrument_float_cast): Add ARG argument, pass\n\tit to libubsan handler instead of EXPR.  Fold comparisons earlier,\n\tif the result is integer_zerop, return NULL_TREE.\n\t* convert.c (convert_to_integer): Pass expr as ARG.\nc/\n\t* c-typeck.c (convert_for_assignment, c_finish_return): For\n\t-fsanitize=float-cast-overflow casts from REAL_TYPE to integer/enum\n\ttypes also set in_late_binary_op around convert call.\n\t* c-convert.c (convert): For -fsanitize=float-cast-overflow REAL_TYPE\n\tto integral type casts, if not in_late_binary_op, pass c_fully_fold\n\tresult on expr as last argument to ubsan_instrument_float_cast,\n\tif in_late_binary_op, don't use c_save_expr but save_expr.\ntestsuite/\n\t* c-c++-common/ubsan/pr64344-1.c: New test.\n\t* c-c++-common/ubsan/pr64344-2.c: New test.\n\nFrom-SVN: r219201", "tree": {"sha": "0fb2cd367e6916c7cd83f6635fec9facebcc58a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fb2cd367e6916c7cd83f6635fec9facebcc58a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e534110031564716a1e495a38bf8d893b23a5993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e534110031564716a1e495a38bf8d893b23a5993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e534110031564716a1e495a38bf8d893b23a5993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e534110031564716a1e495a38bf8d893b23a5993/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15aed8c4609257ea0280553ad2a5946bdaf06ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15aed8c4609257ea0280553ad2a5946bdaf06ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15aed8c4609257ea0280553ad2a5946bdaf06ec9"}], "stats": {"total": 91, "additions": 75, "deletions": 16}, "files": [{"sha": "f62aed21f046c5b200c41ecc0d50bf7dc0269290", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -1,5 +1,12 @@\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/64344\n+\t* ubsan.h (ubsan_instrument_float_cast): Add ARG argument.\n+\t* ubsan.c (ubsan_instrument_float_cast): Add ARG argument, pass\n+\tit to libubsan handler instead of EXPR.  Fold comparisons earlier,\n+\tif the result is integer_zerop, return NULL_TREE.\n+\t* convert.c (convert_to_integer): Pass expr as ARG.\n+\n \tPR tree-optimization/64465\n \t* tree-inline.c (redirect_all_calls): During inlining\n \tclean up EH stmts and EH edges if redirect_call_stmt_to_callee"}, {"sha": "d6b228902f95bf5a21d841d2fce8e50ef0218a0f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -1,5 +1,14 @@\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/64344\n+\t* c-typeck.c (convert_for_assignment, c_finish_return): For\n+\t-fsanitize=float-cast-overflow casts from REAL_TYPE to integer/enum\n+\ttypes also set in_late_binary_op around convert call.\n+\t* c-convert.c (convert): For -fsanitize=float-cast-overflow REAL_TYPE\n+\tto integral type casts, if not in_late_binary_op, pass c_fully_fold\n+\tresult on expr as last argument to ubsan_instrument_float_cast,\n+\tif in_late_binary_op, don't use c_save_expr but save_expr.\n+\n \tUpdate copyright years.\n \n 2015-01-05  Marek Polacek  <polacek@redhat.com>"}, {"sha": "c0da134ee80377c56220ab3a856ba5008fb5da98", "filename": "gcc/c/c-convert.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-convert.c?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -117,8 +117,18 @@ convert (tree type, tree expr)\n \t  && !lookup_attribute (\"no_sanitize_undefined\",\n \t\t\t\tDECL_ATTRIBUTES (current_function_decl)))\n \t{\n-\t  expr = c_save_expr (expr);\n-\t  tree check = ubsan_instrument_float_cast (loc, type, expr);\n+\t  tree arg;\n+\t  if (in_late_binary_op)\n+\t    {\n+\t      expr = save_expr (expr);\n+\t      arg = expr;\n+\t    }\n+\t  else\n+\t    {\n+\t      expr = c_save_expr (expr);\n+\t      arg = c_fully_fold (expr, false, NULL);\n+\t    }\n+\t  tree check = ubsan_instrument_float_cast (loc, type, expr, arg);\n \t  expr = fold_build1 (FIX_TRUNC_EXPR, type, expr);\n \t  if (check == NULL)\n \t    return expr;"}, {"sha": "0db43cc1b63226d1e90e5f7e100d5e314e63d658", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -5885,12 +5885,14 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n     {\n       tree ret;\n       bool save = in_late_binary_op;\n-      if (codel == BOOLEAN_TYPE || codel == COMPLEX_TYPE)\n+      if (codel == BOOLEAN_TYPE || codel == COMPLEX_TYPE\n+\t  || (coder == REAL_TYPE\n+\t      && (codel == INTEGER_TYPE || codel == ENUMERAL_TYPE)\n+\t      && (flag_sanitize & SANITIZE_FLOAT_CAST)))\n \tin_late_binary_op = true;\n       ret = convert_and_check (expr_loc != UNKNOWN_LOCATION\n \t\t\t       ? expr_loc : location, type, orig_rhs);\n-      if (codel == BOOLEAN_TYPE || codel == COMPLEX_TYPE)\n-\tin_late_binary_op = save;\n+      in_late_binary_op = save;\n       return ret;\n     }\n \n@@ -9369,7 +9371,11 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n \n       save = in_late_binary_op;\n       if (TREE_CODE (TREE_TYPE (res)) == BOOLEAN_TYPE\n-          || TREE_CODE (TREE_TYPE (res)) == COMPLEX_TYPE)\n+\t  || TREE_CODE (TREE_TYPE (res)) == COMPLEX_TYPE\n+\t  || (TREE_CODE (TREE_TYPE (t)) == REAL_TYPE\n+\t      && (TREE_CODE (TREE_TYPE (res)) == INTEGER_TYPE\n+\t\t  || TREE_CODE (TREE_TYPE (res)) == ENUMERAL_TYPE)\n+\t      && (flag_sanitize & SANITIZE_FLOAT_CAST)))\n         in_late_binary_op = true;\n       inner = t = convert (TREE_TYPE (res), t);\n       in_late_binary_op = save;"}, {"sha": "0491986bd1e375969d48a70a7b71edec01af288d", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -890,7 +890,7 @@ convert_to_integer (tree type, tree expr)\n \t\t\t\tDECL_ATTRIBUTES (current_function_decl)))\n \t{\n \t  expr = save_expr (expr);\n-\t  tree check = ubsan_instrument_float_cast (loc, type, expr);\n+\t  tree check = ubsan_instrument_float_cast (loc, type, expr, expr);\n \t  expr = build1 (FIX_TRUNC_EXPR, type, expr);\n \t  if (check == NULL)\n \t    return expr;"}, {"sha": "8633d7e7699e0b6a3a5177d7ed29edc066fc056a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -1,5 +1,9 @@\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/64344\n+\t* c-c++-common/ubsan/pr64344-1.c: New test.\n+\t* c-c++-common/ubsan/pr64344-2.c: New test.\n+\n \tPR tree-optimization/64465\n \t* gcc.dg/pr64465.c: New test.\n "}, {"sha": "4891beb1dac738adc2ff6e1f462a837c40d38cc9", "filename": "gcc/testsuite/c-c++-common/ubsan/pr64344-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64344-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64344-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64344-1.c?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -0,0 +1,9 @@\n+/* PR sanitizer/64344 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+\n+int\n+foo (float x)\n+{\n+  return __builtin_log ((double ) x);\n+}"}, {"sha": "9d1eafd7abeac5032ba6778da547a477e573ce22", "filename": "gcc/testsuite/c-c++-common/ubsan/pr64344-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64344-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64344-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr64344-2.c?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -0,0 +1,11 @@\n+/* PR sanitizer/64344 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+\n+int\n+foo (void)\n+{\n+  static const int a = 0.5;\n+  static const int b = (int) 13.5 + 1;\n+  return a + b;\n+}"}, {"sha": "5c9355aacb821fcfa33e4ba84474f7891686c783", "filename": "gcc/ubsan.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -1252,10 +1252,11 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n }\n \n /* Instrument float point-to-integer conversion.  TYPE is an integer type of\n-   destination, EXPR is floating-point expression.  */\n+   destination, EXPR is floating-point expression.  ARG is what to pass\n+   the libubsan call as value, often EXPR itself.  */\n \n tree\n-ubsan_instrument_float_cast (location_t loc, tree type, tree expr)\n+ubsan_instrument_float_cast (location_t loc, tree type, tree expr, tree arg)\n {\n   tree expr_type = TREE_TYPE (expr);\n   tree t, tt, fn, min, max;\n@@ -1348,6 +1349,12 @@ ubsan_instrument_float_cast (location_t loc, tree type, tree expr)\n   else\n     return NULL_TREE;\n \n+  t = fold_build2 (UNLE_EXPR, boolean_type_node, expr, min);\n+  tt = fold_build2 (UNGE_EXPR, boolean_type_node, expr, max);\n+  t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t, tt);\n+  if (integer_zerop (t))\n+    return NULL_TREE;\n+\n   if (flag_sanitize_undefined_trap_on_error)\n     fn = build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n   else\n@@ -1364,14 +1371,10 @@ ubsan_instrument_float_cast (location_t loc, tree type, tree expr)\n       fn = builtin_decl_explicit (bcode);\n       fn = build_call_expr_loc (loc, fn, 2,\n \t\t\t\tbuild_fold_addr_expr_loc (loc, data),\n-\t\t\t\tubsan_encode_value (expr, false));\n+\t\t\t\tubsan_encode_value (arg, false));\n     }\n \n-  t = fold_build2 (UNLE_EXPR, boolean_type_node, expr, min);\n-  tt = fold_build2 (UNGE_EXPR, boolean_type_node, expr, max);\n-  return fold_build3 (COND_EXPR, void_type_node,\n-\t\t      fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t, tt),\n-\t\t      fn, integer_zero_node);\n+  return fold_build3 (COND_EXPR, void_type_node, t, fn, integer_zero_node);\n }\n \n /* Instrument values passed to function arguments with nonnull attribute.  */"}, {"sha": "5d9d90933a262e7131daedb6610f46827e961a31", "filename": "gcc/ubsan.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e534110031564716a1e495a38bf8d893b23a5993/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=e534110031564716a1e495a38bf8d893b23a5993", "patch": "@@ -47,7 +47,7 @@ extern tree ubsan_type_descriptor (tree, enum ubsan_print_style = UBSAN_PRINT_NO\n extern tree ubsan_encode_value (tree, bool = false);\n extern bool is_ubsan_builtin_p (tree);\n extern tree ubsan_build_overflow_builtin (tree_code, location_t, tree, tree, tree);\n-extern tree ubsan_instrument_float_cast (location_t, tree, tree);\n+extern tree ubsan_instrument_float_cast (location_t, tree, tree, tree);\n extern tree ubsan_get_source_location_type (void);\n \n #endif  /* GCC_UBSAN_H  */"}]}