{"sha": "be68937be28ad63bd6f7a75d0fa5c851ba4afc2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2ODkzN2JlMjhhZDYzYmQ2ZjdhNzVkMGZhNWM4NTFiYTRhZmMyYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-12-11T20:50:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-12-11T20:50:59Z"}, "message": "runtime: use _URC_FAILURE on ARM32\n    \n    ARM32 EABI unwinder does not define _URC_NORMAL_STOP. Instead,\n    it has _URC_FAILURE. Use _URC_FAILURE there.\n    \n    Should fix ARM32 build.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/153417\n\nFrom-SVN: r267033", "tree": {"sha": "98f59c62064bac4ce953a9287e059cbd3454ac3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f59c62064bac4ce953a9287e059cbd3454ac3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be68937be28ad63bd6f7a75d0fa5c851ba4afc2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be68937be28ad63bd6f7a75d0fa5c851ba4afc2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be68937be28ad63bd6f7a75d0fa5c851ba4afc2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be68937be28ad63bd6f7a75d0fa5c851ba4afc2b/comments", "author": null, "committer": null, "parents": [{"sha": "582d2481f7380441c345bf1dfe698f90f34dd6cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582d2481f7380441c345bf1dfe698f90f34dd6cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582d2481f7380441c345bf1dfe698f90f34dd6cf"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "ccdfb1c61ffb9e814a6f19935cc4dfa8de6a8a47", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68937be28ad63bd6f7a75d0fa5c851ba4afc2b/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68937be28ad63bd6f7a75d0fa5c851ba4afc2b/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=be68937be28ad63bd6f7a75d0fa5c851ba4afc2b", "patch": "@@ -1,4 +1,4 @@\n-f0266d382f8965b7bcaa380aa963498c1884505e\n+4db15776701a7cfc1abcef08f7a98c63343d17e6\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c44755f971c54213f133a82f8b8e0dc79aa439c1", "filename": "libgo/runtime/go-unwind.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be68937be28ad63bd6f7a75d0fa5c851ba4afc2b/libgo%2Fruntime%2Fgo-unwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be68937be28ad63bd6f7a75d0fa5c851ba4afc2b/libgo%2Fruntime%2Fgo-unwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unwind.c?ref=be68937be28ad63bd6f7a75d0fa5c851ba4afc2b", "patch": "@@ -392,6 +392,12 @@ parse_lsda_header (struct _Unwind_Context *context, const unsigned char *p,\n #define CONTINUE_UNWINDING return _URC_CONTINUE_UNWIND\n #endif\n \n+#ifdef __ARM_EABI_UNWINDER__\n+#define STOP_UNWINDING _URC_FAILURE\n+#else\n+#define STOP_UNWINDING _URC_NORMAL_STOP\n+#endif\n+\n #ifdef __USING_SJLJ_EXCEPTIONS__\n #define PERSONALITY_FUNCTION    __gccgo_personality_sj0\n #define __builtin_eh_return_data_regno(x) x\n@@ -751,7 +757,7 @@ scanstackwithmap_callback (struct _Unwind_Context *context, void *arg)\n               // TODO: print gp, pc, sp\n               runtime_throw (\"no stack map\");\n             }\n-          return _URC_NORMAL_STOP;\n+          return STOP_UNWINDING;\n         }\n       case FOUND:\n         break;\n@@ -799,7 +805,7 @@ probestackmaps_callback (struct _Unwind_Context *context,\n \n   // Found a stack map. No need to keep unwinding.\n   runtime_usestackmaps = true;\n-  return _URC_NORMAL_STOP;\n+  return STOP_UNWINDING;\n }\n \n // Try to find a stack map, store the result in global variable runtime_usestackmaps."}]}