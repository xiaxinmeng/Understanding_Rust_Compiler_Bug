{"sha": "266f3aacd548ed854b16123f2d9a1e59c5915397", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY2ZjNhYWNkNTQ4ZWQ4NTRiMTYxMjNmMmQ5YTFlNTljNTkxNTM5Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1994-02-13T22:08:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1994-02-13T22:08:06Z"}, "message": "Clean up some X11 header files for C++; problems found on RS/6000.\n\nFrom-SVN: r6547", "tree": {"sha": "3203fbe01eb5b2e8871a5b255fb16b4050332c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3203fbe01eb5b2e8871a5b255fb16b4050332c73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/266f3aacd548ed854b16123f2d9a1e59c5915397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266f3aacd548ed854b16123f2d9a1e59c5915397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/266f3aacd548ed854b16123f2d9a1e59c5915397", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266f3aacd548ed854b16123f2d9a1e59c5915397/comments", "author": null, "committer": null, "parents": [{"sha": "f09dcaa805ef96150be52bb0ace52e22f20a724c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09dcaa805ef96150be52bb0ace52e22f20a724c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f09dcaa805ef96150be52bb0ace52e22f20a724c"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "0b5c140b5a9d16957e49764f7615751df1c0f17d", "filename": "gcc/fixincludes", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f3aacd548ed854b16123f2d9a1e59c5915397/gcc%2Ffixincludes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f3aacd548ed854b16123f2d9a1e59c5915397/gcc%2Ffixincludes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixincludes?ref=266f3aacd548ed854b16123f2d9a1e59c5915397", "patch": "@@ -1051,6 +1051,86 @@ if [ -r ${LIB}/$file ]; then\n   fi\n fi\n \n+# There are several name conflicts with C++ reserved words in X11\n+# header files.  These are fixed in some versions, so don't do the\n+# fixes if we find __cplusplus in the file.  These were found on the\n+# RS/6000.\n+\n+# class in X11/ShellP.h\n+file=X11/ShellP.h\n+if [ -r $file ] && [ ! -r ${LIB}/$file ]; then\n+  mkdir ${LIB}/sys 2>/dev/null\n+  cp $file ${LIB}/$file >/dev/null 2>&1 || echo \"Can't copy $file\"\n+  chmod +w ${LIB}/$file 2>/dev/null\n+  chmod a+r ${LIB}/$file 2>/dev/null\n+fi\n+\n+if [ -r ${LIB}/$file ]; then\n+  if grep __cplusplus ${LIB}/$file >/dev/null 2>/dev/null; then\n+    true;\n+  else\n+    echo Fixing $file, field class\n+    sed -e '/char [*]class;/i\\\n+#ifdef __cplusplus\\\n+\tchar *c_class;\\\n+#else' \\\n+        -e '/char [*]class;/a\\\n+#endif' ${LIB}/$file > ${LIB}/${file}.sed\n+    rm -f ${LIB}/$file; mv ${LIB}/${file}.sed ${LIB}/$file\n+  fi\n+  if cmp $file ${LIB}/$file >/dev/null 2>&1; then\n+    rm -f ${LIB}/$file\n+  fi\n+fi\n+# new in Xm/Traversal.h\n+file=Xm/Traversal.h\n+if [ -r $file ] && [ ! -r ${LIB}/$file ]; then\n+  mkdir ${LIB}/sys 2>/dev/null\n+  cp $file ${LIB}/$file >/dev/null 2>&1 || echo \"Can't copy $file\"\n+  chmod +w ${LIB}/$file 2>/dev/null\n+  chmod a+r ${LIB}/$file 2>/dev/null\n+fi\n+\n+if [ -r ${LIB}/$file ]; then\n+  if grep __cplusplus ${LIB}/$file >/dev/null 2>/dev/null; then\n+    true;\n+  else\n+    echo Fixing $file, field new\n+    sed -e '/Widget\told, new;/i\\\n+#ifdef __cplusplus\\\n+\tWidget\told, c_new;\\\n+#else' \\\n+        -e '/Widget\told, new;/a\\\n+#endif' ${LIB}/$file > ${LIB}/${file}.sed\n+    rm -f ${LIB}/$file; mv ${LIB}/${file}.sed ${LIB}/$file\n+  fi\n+  if cmp $file ${LIB}/$file >/dev/null 2>&1; then\n+    rm -f ${LIB}/$file\n+  fi\n+fi\n+# class in Xm/BaseClassI.h\n+file=Xm/BaseClassI.h\n+if [ -r $file ] && [ ! -r ${LIB}/$file ]; then\n+  mkdir ${LIB}/sys 2>/dev/null\n+  cp $file ${LIB}/$file >/dev/null 2>&1 || echo \"Can't copy $file\"\n+  chmod +w ${LIB}/$file 2>/dev/null\n+  chmod a+r ${LIB}/$file 2>/dev/null\n+fi\n+\n+if [ -r ${LIB}/$file ]; then\n+  if grep __cplusplus ${LIB}/$file >/dev/null 2>/dev/null; then\n+    true;\n+  else\n+    echo Fixing $file, prototype parameter name\n+    sed -e 's/ class[)]/ c_class)/g' ${LIB}/$file > ${LIB}/${file}.sed\n+    rm -f ${LIB}/$file; mv ${LIB}/${file}.sed ${LIB}/$file\n+  fi\n+  if cmp $file ${LIB}/$file >/dev/null 2>&1; then\n+    rm -f ${LIB}/$file\n+  fi\n+fi\n+\n+\n # NeXT 2.0 defines 'int wait(union wait*)', which conflicts with Posix.1.\n # Note that version 3 of the NeXT system has wait.h in a different directory,\n # so that this code won't do anything.  But wait.h in version 3 has a"}]}