{"sha": "9fa5223135cf837e920329b2aee6f87f9515d231", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhNTIyMzEzNWNmODM3ZTkyMDMyOWIyYWVlNmY4N2Y5NTE1ZDIzMQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-03-18T09:50:23Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-03-18T09:50:23Z"}, "message": "gfortran.h (gfc_option_t): Remove flag_whole_file.\n\n2013-03-18  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.h (gfc_option_t): Remove flag_whole_file.\n        * invoke.texi (-fno-whole-file): Remove.\n        * lang.opt (fwhole-file): Change to Ignore.\n        * options.c (gfc_init_options, gfc_post_options,\n        gfc_handle_option): Remove !flag_whole_file handling\n        * parse.c (resolve_all_program_units,\n        * translate_all_program_units,\n        gfc_parse_file): Ditto.\n        * resolve.c (resolve_global_procedure): Ditto.\n        * trans-decl.c (gfc_get_symbol_decl,\n        * gfc_get_extern_function_decl,\n        gfc_create_module_variable): Ditto.\n        * trans-types.c (gfc_get_derived_type): Ditto.\n\nFrom-SVN: r196773", "tree": {"sha": "25e8e8b691c5f6e57051576d9f133388c1a8479e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25e8e8b691c5f6e57051576d9f133388c1a8479e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa5223135cf837e920329b2aee6f87f9515d231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa5223135cf837e920329b2aee6f87f9515d231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa5223135cf837e920329b2aee6f87f9515d231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa5223135cf837e920329b2aee6f87f9515d231/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a1b56948ace8d94b7ab74c303cdc842413c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5a1b56948ace8d94b7ab74c303cdc842413c3c"}], "stats": {"total": 165, "additions": 58, "deletions": 107}, "files": [{"sha": "817b184c370571fe94ce6fbe27c72bf090c06216", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -1,3 +1,17 @@\n+2013-03-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_option_t): Remove flag_whole_file.\n+\t* invoke.texi (-fno-whole-file): Remove.\n+\t* lang.opt (fwhole-file): Change to Ignore.\n+\t* options.c (gfc_init_options, gfc_post_options,\n+\tgfc_handle_option): Remove !flag_whole_file handling\n+\t* parse.c (resolve_all_program_units, translate_all_program_units,\n+\tgfc_parse_file): Ditto.\n+\t* resolve.c (resolve_global_procedure): Ditto.\n+\t* trans-decl.c (gfc_get_symbol_decl, gfc_get_extern_function_decl,\n+\tgfc_create_module_variable): Ditto.\n+\t* trans-types.c (gfc_get_derived_type): Ditto.\n+\n 2013-03-15  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56615"}, {"sha": "76d27971f0507d966c88d74a79beb762a2760838", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -2297,7 +2297,6 @@ typedef struct\n   int flag_init_character;\n   char flag_init_character_value;\n   int flag_align_commons;\n-  int flag_whole_file;\n   int flag_protect_parens;\n   int flag_realloc_lhs;\n   int flag_aggressive_function_elimination;"}, {"sha": "12c200e818ab571639507d594a7be79b3c34ae49", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -180,7 +180,7 @@ and warnings}.\n -finit-real=@var{<zero|inf|-inf|nan|snan>} @gol\n -fmax-array-constructor=@var{n} -fmax-stack-var-size=@var{n}\n -fno-align-commons @gol\n--fno-automatic -fno-protect-parens -fno-underscoring -fno-whole-file @gol\n+-fno-automatic -fno-protect-parens -fno-underscoring @gol\n -fsecond-underscore -fpack-derived -frealloc-lhs -frecursive @gol\n -frepack-arrays -fshort-enums -fstack-arrays\n }\n@@ -1291,22 +1291,6 @@ in the source, even if the names as seen by the linker are mangled to\n prevent accidental linking between procedures with incompatible\n interfaces.\n \n-@item -fno-whole-file\n-@opindex @code{fno-whole-file}\n-This flag causes the compiler to resolve and translate each procedure in\n-a file separately. \n-\n-By default, the whole file is parsed and placed in a single front-end tree.\n-During resolution, in addition to all the usual checks and fixups, references\n-to external procedures that are in the same file effect resolution of\n-that procedure, if not already done, and a check of the interfaces.  The\n-dependences are resolved by changing the order in which the file is\n-translated into the backend tree.  Thus, a procedure that is referenced\n-is translated before the reference and the duplication of backend tree\n-declarations eliminated.\n-\n-The @option{-fno-whole-file} option is deprecated and may lead to wrong code.\n-\n @item -fsecond-underscore\n @opindex @code{fsecond-underscore}\n @cindex underscore"}, {"sha": "dbc3f6bafda6e617fd376cff2bbfc4fa8b6d8e12", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -594,8 +594,8 @@ Fortran\n Append underscores to externally visible names\n \n fwhole-file\n-Fortran\n-Compile all program units at once and check all interfaces\n+Fortran Ignore\n+Does nothing.  Preserved for backward compatibility.\n \n fworking-directory\n Fortran"}, {"sha": "3f5de036908cfdf9bf6dbbd862afe8b3b01cfaa9", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -124,7 +124,6 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.flag_real8_kind = 0;\n   gfc_option.flag_dollar_ok = 0;\n   gfc_option.flag_underscoring = 1;\n-  gfc_option.flag_whole_file = 1;\n   gfc_option.flag_f2c = 0;\n   gfc_option.flag_second_underscore = -1;\n   gfc_option.flag_implicit_none = 0;\n@@ -264,14 +263,6 @@ gfc_post_options (const char **pfilename)\n     sorry (\"-fexcess-precision=standard for Fortran\");\n   flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n \n-  /* Whole program needs whole file mode.  */\n-  if (flag_whole_program)\n-    gfc_option.flag_whole_file = 1;\n-\n-  /* Enable whole-file mode if LTO is in effect.  */\n-  if (flag_lto)\n-    gfc_option.flag_whole_file = 1;\n-\n   /* Fortran allows associative math - but we cannot reassociate if\n      we want traps or signed zeros. Cf. also flag_protect_parens.  */\n   if (flag_associative_math == -1)\n@@ -430,9 +421,6 @@ gfc_post_options (const char **pfilename)\n       gfc_option.warn_tabs = 0;\n     }\n \n-  if (pedantic && gfc_option.flag_whole_file)\n-    gfc_option.flag_whole_file = 2;\n-\n   /* Optimization implies front end optimization, unless the user\n      specified it directly.  */\n \n@@ -823,10 +811,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.flag_underscoring = value;\n       break;\n \n-    case OPT_fwhole_file:\n-      gfc_option.flag_whole_file = value;\n-      break;\n-\n     case OPT_fsecond_underscore:\n       gfc_option.flag_second_underscore = value;\n       break;"}, {"sha": "a7fa7dc597ee4536644e776d68f022b8472af644", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -4382,8 +4382,7 @@ add_global_program (void)\n }\n \n \n-/* Resolve all the program units when whole file scope option\n-   is active. */\n+/* Resolve all the program units. */\n static void\n resolve_all_program_units (gfc_namespace *gfc_global_ns_list)\n {\n@@ -4424,9 +4423,8 @@ clean_up_modules (gfc_gsymbol *gsym)\n }\n \n \n-/* Translate all the program units when whole file scope option\n-   is active. This could be in a different order to resolution if\n-   there are forward references in the file.  */\n+/* Translate all the program units. This could be in a different order\n+   to resolution if there are forward references in the file.  */\n static void\n translate_all_program_units (gfc_namespace *gfc_global_ns_list,\n \t\t\t     bool main_in_tu)\n@@ -4551,26 +4549,23 @@ gfc_parse_file (void)\n       accept_statement (st);\n       add_global_program ();\n       parse_progunit (ST_NONE);\n-      if (gfc_option.flag_whole_file)\n-\tgoto prog_units;\n+      goto prog_units;\n       break;\n \n     case ST_SUBROUTINE:\n       add_global_procedure (1);\n       push_state (&s, COMP_SUBROUTINE, gfc_new_block);\n       accept_statement (st);\n       parse_progunit (ST_NONE);\n-      if (gfc_option.flag_whole_file)\n-\tgoto prog_units;\n+      goto prog_units;\n       break;\n \n     case ST_FUNCTION:\n       add_global_procedure (0);\n       push_state (&s, COMP_FUNCTION, gfc_new_block);\n       accept_statement (st);\n       parse_progunit (ST_NONE);\n-      if (gfc_option.flag_whole_file)\n-\tgoto prog_units;\n+      goto prog_units;\n       break;\n \n     case ST_BLOCK_DATA:\n@@ -4597,8 +4592,7 @@ gfc_parse_file (void)\n       push_state (&s, COMP_PROGRAM, gfc_new_block);\n       main_program_symbol (gfc_current_ns, \"MAIN__\");\n       parse_progunit (st);\n-      if (gfc_option.flag_whole_file)\n-\tgoto prog_units;\n+      goto prog_units;\n       break;\n     }\n \n@@ -4615,19 +4609,9 @@ gfc_parse_file (void)\n   if (s.state == COMP_MODULE)\n     {\n       gfc_dump_module (s.sym->name, errors_before == errors);\n-      if (!gfc_option.flag_whole_file)\n-\t{\n-\t  if (errors == 0)\n-\t    gfc_generate_module_code (gfc_current_ns);\n-\t  pop_state ();\n-\t  gfc_done_2 ();\n-\t}\n-      else\n-\t{\n-\t  gfc_current_ns->derived_types = gfc_derived_types;\n-\t  gfc_derived_types = NULL;\n-\t  goto prog_units;\n-\t}\n+      gfc_current_ns->derived_types = gfc_derived_types;\n+      gfc_derived_types = NULL;\n+      goto prog_units;\n     }\n   else\n     {\n@@ -4660,9 +4644,6 @@ gfc_parse_file (void)\n \n   done:\n \n-  if (!gfc_option.flag_whole_file)\n-    goto termination;\n-\n   /* Do the resolution.  */\n   resolve_all_program_units (gfc_global_ns_list);\n \n@@ -4681,8 +4662,6 @@ gfc_parse_file (void)\n   /* Do the translation.  */\n   translate_all_program_units (gfc_global_ns_list, seen_program);\n \n-termination:\n-\n   gfc_end_source_files ();\n   return SUCCESS;\n "}, {"sha": "e9b6fb9be439bbe3ad575d889e17848197ec394f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -2145,15 +2145,14 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n   if ((gsym->type != GSYM_UNKNOWN && gsym->type != type))\n     gfc_global_used (gsym, where);\n \n-  if (gfc_option.flag_whole_file\n-\t&& (sym->attr.if_source == IFSRC_UNKNOWN\n-\t    || sym->attr.if_source == IFSRC_IFBODY)\n-\t&& gsym->type != GSYM_UNKNOWN\n-\t&& gsym->ns\n-\t&& gsym->ns->resolved != -1\n-\t&& gsym->ns->proc_name\n-\t&& not_in_recursive (sym, gsym->ns)\n-\t&& not_entry_self_reference (sym, gsym->ns))\n+  if ((sym->attr.if_source == IFSRC_UNKNOWN\n+       || sym->attr.if_source == IFSRC_IFBODY)\n+      && gsym->type != GSYM_UNKNOWN\n+      && gsym->ns\n+      && gsym->ns->resolved != -1\n+      && gsym->ns->proc_name\n+      && not_in_recursive (sym, gsym->ns)\n+      && not_entry_self_reference (sym, gsym->ns))\n     {\n       gfc_symbol *def_sym;\n \n@@ -2364,7 +2363,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t\t     \"an explicit interface\", sym->name, &sym->declared_at);\n \t}\n \n-      if (gfc_option.flag_whole_file == 1\n+      if (!pedantic\n \t  || ((gfc_option.warn_std & GFC_STD_LEGACY)\n \t      && !(gfc_option.warn_std & GFC_STD_GNU)))\n \tgfc_errors_to_warnings (1);"}, {"sha": "0e853bac6a12f066fb3789962dc394f52b189ba3", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -1341,15 +1341,14 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       && sym->attr.flavor == FL_PARAMETER)\n     intrinsic_array_parameter = true;\n \n-  /* If use associated and whole file compilation, use the module\n+  /* If use associated compilation, use the module\n      declaration.  */\n-  if (gfc_option.flag_whole_file\n-\t&& (sym->attr.flavor == FL_VARIABLE\n-\t    || sym->attr.flavor == FL_PARAMETER)\n-\t&& sym->attr.use_assoc\n-\t&& !intrinsic_array_parameter\n-\t&& sym->module\n-\t&& gfc_get_module_backend_decl (sym))\n+  if ((sym->attr.flavor == FL_VARIABLE\n+       || sym->attr.flavor == FL_PARAMETER)\n+      && sym->attr.use_assoc\n+      && !intrinsic_array_parameter\n+      && sym->module\n+      && gfc_get_module_backend_decl (sym))\n     {\n       if (sym->ts.type == BT_CLASS && sym->backend_decl)\n \tGFC_DECL_CLASS(sym->backend_decl) = 1;\n@@ -1646,12 +1645,11 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n      return the backend_decl.  */\n   gsym =  gfc_find_gsymbol (gfc_gsym_root, sym->name);\n \n-  if (gfc_option.flag_whole_file\n-\t&& (!sym->attr.use_assoc || sym->attr.if_source != IFSRC_DECL)\n-\t&& !sym->backend_decl\n-\t&& gsym && gsym->ns\n-\t&& ((gsym->type == GSYM_SUBROUTINE) || (gsym->type == GSYM_FUNCTION))\n-\t&& (gsym->ns->proc_name->backend_decl || !sym->attr.intrinsic))\n+  if ((!sym->attr.use_assoc || sym->attr.if_source != IFSRC_DECL)\n+      && !sym->backend_decl\n+      && gsym && gsym->ns\n+      && ((gsym->type == GSYM_SUBROUTINE) || (gsym->type == GSYM_FUNCTION))\n+      && (gsym->ns->proc_name->backend_decl || !sym->attr.intrinsic))\n     {\n       if (!gsym->ns->proc_name->backend_decl)\n \t{\n@@ -1703,9 +1701,7 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n   if (sym->module)\n     gsym =  gfc_find_gsymbol (gfc_gsym_root, sym->module);\n \n-  if (gfc_option.flag_whole_file\n-\t&& gsym && gsym->ns\n-\t&& gsym->type == GSYM_MODULE)\n+  if (gsym && gsym->ns && gsym->type == GSYM_MODULE)\n     {\n       gfc_symbol *s;\n \n@@ -4047,8 +4043,7 @@ gfc_create_module_variable (gfc_symbol * sym)\n       decl = sym->backend_decl;\n       gcc_assert (sym->ns->proc_name->attr.flavor == FL_MODULE);\n \n-      /* -fwhole-file mixes up the contexts so these asserts are unnecessary.  */\n-      if (!(gfc_option.flag_whole_file && sym->attr.use_assoc))\n+      if (!sym->attr.use_assoc)\n \t{\n \t  gcc_assert (TYPE_CONTEXT (decl) == NULL_TREE\n \t\t      || TYPE_CONTEXT (decl) == sym->ns->proc_name->backend_decl);"}, {"sha": "cdac0dacc1241ec669f4eaae94471fe53e681d26", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa5223135cf837e920329b2aee6f87f9515d231/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=9fa5223135cf837e920329b2aee6f87f9515d231", "patch": "@@ -2370,19 +2370,16 @@ gfc_get_derived_type (gfc_symbol * derived)\n     }\n \n   /* If use associated, use the module type for this one.  */\n-  if (gfc_option.flag_whole_file\n-\t&& derived->backend_decl == NULL\n-\t&& derived->attr.use_assoc\n-\t&& derived->module\n-\t&& gfc_get_module_backend_decl (derived))\n+  if (derived->backend_decl == NULL\n+      && derived->attr.use_assoc\n+      && derived->module\n+      && gfc_get_module_backend_decl (derived))\n     goto copy_derived_types;\n \n-  /* If a whole file compilation, the derived types from an earlier\n-     namespace can be used as the canonical type.  */\n-  if (gfc_option.flag_whole_file\n-\t&& derived->backend_decl == NULL\n-\t&& !derived->attr.use_assoc\n-\t&& gfc_global_ns_list)\n+  /* The derived types from an earlier namespace can be used as the\n+     canonical type.  */\n+  if (derived->backend_decl == NULL && !derived->attr.use_assoc\n+      && gfc_global_ns_list)\n     {\n       for (ns = gfc_global_ns_list;\n \t   ns->translated && !got_canonical;"}]}