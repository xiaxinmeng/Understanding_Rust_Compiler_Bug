{"sha": "909881cb25b328a750ed3bf9926b924f21c1cb3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA5ODgxY2IyNWIzMjhhNzUwZWQzYmY5OTI2YjkyNGYyMWMxY2IzYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-16T07:13:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-16T07:13:37Z"}, "message": "c-ada-spec.c (ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX): Define.\n\n\t* c-ada-spec.c (ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX): Define.\n\t(dump_generic_ada_node) <INTEGER_CST>: Deal with sizetype specially.\n\tRemove POINTER_TYPE handling, add large unsigned handling and use\n\tADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX for big numbers.\n\nFrom-SVN: r192489", "tree": {"sha": "578e98defeaa0461d795b876c8fc7b5dfd981cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/578e98defeaa0461d795b876c8fc7b5dfd981cbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/909881cb25b328a750ed3bf9926b924f21c1cb3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909881cb25b328a750ed3bf9926b924f21c1cb3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909881cb25b328a750ed3bf9926b924f21c1cb3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909881cb25b328a750ed3bf9926b924f21c1cb3b/comments", "author": null, "committer": null, "parents": [{"sha": "a4da41e1279cf8bf84fc0a0d4e3af5c5e297c011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4da41e1279cf8bf84fc0a0d4e3af5c5e297c011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4da41e1279cf8bf84fc0a0d4e3af5c5e297c011"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "8cc5c56a9190e6dbb4ab5fee9c86a6d2bd06741f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909881cb25b328a750ed3bf9926b924f21c1cb3b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909881cb25b328a750ed3bf9926b924f21c1cb3b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=909881cb25b328a750ed3bf9926b924f21c1cb3b", "patch": "@@ -1,3 +1,10 @@\n+2012-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX): Define.\n+\t(dump_generic_ada_node) <INTEGER_CST>: Deal with sizetype specially.\n+\tRemove POINTER_TYPE handling, add large unsigned handling and use\n+\tADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX for big numbers.\n+\n 2012-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/54381"}, {"sha": "792fee26e19b53c94e4e0bb3b7628a3c867e801e", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909881cb25b328a750ed3bf9926b924f21c1cb3b/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909881cb25b328a750ed3bf9926b924f21c1cb3b/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=909881cb25b328a750ed3bf9926b924f21c1cb3b", "patch": "@@ -30,6 +30,21 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-pragma.h\"\n #include \"cpp-id-data.h\"\n \n+/* Adapted from hwint.h to use the Ada prefix.  */\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n+# if HOST_BITS_PER_WIDE_INT == 64\n+#  define ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n+     \"16#%\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x#\"\n+# else\n+#  define ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n+     \"16#%\" HOST_LONG_FORMAT \"x%08\" HOST_LONG_FORMAT \"x#\"\n+# endif\n+#else\n+  /* We can assume that 'long long' is at least 64 bits.  */\n+# define ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n+    \"16#%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x#\"\n+#endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n+\n /* Local functions, macros and variables.  */\n static int dump_generic_ada_node (pretty_printer *, tree, tree,\n \t\t\t\t  int (*)(tree, cpp_operation), int, int, bool);\n@@ -2175,12 +2190,16 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type,\n       break;\n \n     case INTEGER_CST:\n-      if (TREE_CODE (TREE_TYPE (node)) == POINTER_TYPE)\n-\t{\n-\t  pp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n-\t  pp_string (buffer, \"B\"); /* pseudo-unit */\n-\t}\n-      else if (!host_integerp (node, 0))\n+      /* We treat the upper half of the sizetype range as negative.  This\n+\t is consistent with the internal treatment and makes it possible\n+\t to generate the (0 .. -1) range for flexible array members.  */\n+      if (TREE_TYPE (node) == sizetype)\n+\tnode = fold_convert (ssizetype, node);\n+      if (host_integerp (node, 0))\n+\tpp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n+      else if (host_integerp (node, 1))\n+\tpp_unsigned_wide_integer (buffer, TREE_INT_CST_LOW (node));\n+      else\n \t{\n \t  tree val = node;\n \t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (val);\n@@ -2193,12 +2212,10 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type,\n \t      low = -low;\n \t    }\n \t  sprintf (pp_buffer (buffer)->digit_buffer,\n-\t  HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t    (unsigned HOST_WIDE_INT) high, low);\n+\t\t   ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n+\t\t   (unsigned HOST_WIDE_INT) high, low);\n \t  pp_string (buffer, pp_buffer (buffer)->digit_buffer);\n \t}\n-      else\n-\tpp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n       break;\n \n     case REAL_CST:"}, {"sha": "adeeb3e5e9111660127485e15295374d7328b943", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909881cb25b328a750ed3bf9926b924f21c1cb3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909881cb25b328a750ed3bf9926b924f21c1cb3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=909881cb25b328a750ed3bf9926b924f21c1cb3b", "patch": "@@ -1,4 +1,9 @@\n-2012-10-15   Easwaran Raman  <eraman@google.com>\n+2012-10-16  Eric Botcazou <ebotcazou@adacore.com>\n+\n+\t* g++.dg/other/dump-ada-spec-2.C: New test.\n+\n+2012-10-16  Easwaran Raman  <eraman@google.com>\n+\n \t* gcc.dg/tree-prof/switch-case-1.c: New test case.\n \t* gcc.dg/tree-prof/switch-case-2.c: New test case.\n "}, {"sha": "87c183aab66e5e45df0139be1df129336ed9878d", "filename": "gcc/testsuite/g++.dg/other/dump-ada-spec-2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909881cb25b328a750ed3bf9926b924f21c1cb3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdump-ada-spec-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909881cb25b328a750ed3bf9926b924f21c1cb3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdump-ada-spec-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdump-ada-spec-2.C?ref=909881cb25b328a750ed3bf9926b924f21c1cb3b", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-ada-spec\" } */\n+\n+struct S\n+{\n+  int it;\n+  __extension__ unsigned char data[];\n+};\n+\n+/* { dg-final { scan-ada-spec \"array \\\\(0 .. -1\\\\)\" } } */\n+/* { dg-final { cleanup-ada-spec } } */"}]}