{"sha": "a30b6839178e57250791bd821f332151afaffba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwYjY4MzkxNzhlNTcyNTA3OTFiZDgyMWYzMzIxNTFhZmFmZmJhNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-08-25T03:17:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-08-25T03:17:02Z"}, "message": "i386.i386.c (ix86_return_in_memory): Reformat.\n\n        * config/i386.i386.c (ix86_return_in_memory): Reformat.  Return true\n        for 16-byte vector modes if sse not enabled; warn for abi change.\n        (ix86_value_regno): Only return xmm0 for 16-byte vector types.\n        * g++.dg/eh/simd-2.C: Add -w for x86.\n\nFrom-SVN: r70771", "tree": {"sha": "2d4b98c73960bd2b9f17fa51bbfb7c365f35942a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d4b98c73960bd2b9f17fa51bbfb7c365f35942a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30b6839178e57250791bd821f332151afaffba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30b6839178e57250791bd821f332151afaffba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30b6839178e57250791bd821f332151afaffba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30b6839178e57250791bd821f332151afaffba5/comments", "author": null, "committer": null, "parents": [{"sha": "c681386d04ae1728186dd348f8abe2f60d7a5fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c681386d04ae1728186dd348f8abe2f60d7a5fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c681386d04ae1728186dd348f8abe2f60d7a5fa9"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "440fcdc1c40e0b8d779ff4c7bf5b90ad7e54934f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30b6839178e57250791bd821f332151afaffba5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30b6839178e57250791bd821f332151afaffba5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a30b6839178e57250791bd821f332151afaffba5", "patch": "@@ -1,3 +1,9 @@\n+2003-08-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386.i386.c (ix86_return_in_memory): Reformat.  Return true\n+\tfor 16-byte vector modes if sse not enabled; warn for abi change.\n+\t(ix86_value_regno): Only return xmm0 for 16-byte vector types.\n+\n 2003-08-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* rtlanal.c (may_trap_p): Simplify an integer comparison."}, {"sha": "4984fc4f9cf15339b019414e03b1c0cce6dce837", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 53, "deletions": 19, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30b6839178e57250791bd821f332151afaffba5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30b6839178e57250791bd821f332151afaffba5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a30b6839178e57250791bd821f332151afaffba5", "patch": "@@ -2691,29 +2691,59 @@ ix86_function_value (tree valtype)\n int\n ix86_return_in_memory (tree type)\n {\n-  int needed_intregs, needed_sseregs;\n+  int needed_intregs, needed_sseregs, size;\n+  enum machine_mode mode = TYPE_MODE (type);\n+\n   if (TARGET_64BIT)\n+    return !examine_argument (mode, type, 1, &needed_intregs, &needed_sseregs);\n+\n+  if (mode == BLKmode)\n+    return 1;\n+\n+  size = int_size_in_bytes (type);\n+\n+  if (MS_AGGREGATE_RETURN && AGGREGATE_TYPE_P (type) && size <= 8)\n+    return 0;\n+\n+  if (VECTOR_MODE_P (mode) || mode == TImode)\n     {\n-      return !examine_argument (TYPE_MODE (type), type, 1,\n-\t\t\t\t&needed_intregs, &needed_sseregs);\n-    }\n-  else\n-    {\n-      if (TYPE_MODE (type) == BLKmode)\n-\treturn 1;\n-      else if (MS_AGGREGATE_RETURN\n-\t       && AGGREGATE_TYPE_P (type)\n-\t       && int_size_in_bytes(type) <= 8)\n+      /* User-created vectors small enough to fit in EAX.  */\n+      if (size < 8)\n \treturn 0;\n-      else if ((VECTOR_MODE_P (TYPE_MODE (type))\n-\t        && int_size_in_bytes (type) == 8)\n-\t       || (int_size_in_bytes (type) > 12\n-\t\t   && TYPE_MODE (type) != TImode\n-\t\t   && TYPE_MODE (type) != TFmode\n-\t\t   && !VECTOR_MODE_P (TYPE_MODE (type))))\n+\n+      /* MMX/3dNow values are returned on the stack, since we've\n+\t got to EMMS/FEMMS before returning.  */\n+      if (size == 8)\n \treturn 1;\n-      return 0;\n+\n+      /* SSE values are returned in XMM0.  */\n+      /* ??? Except when it doesn't exist?  We have a choice of\n+\t either (1) being abi incompatible with a -march switch,\n+\t or (2) generating an error here.  Given no good solution,\n+\t I think the safest thing is one warning.  The user won't\n+\t be able to use -Werror, but...  */\n+      if (size == 16)\n+\t{\n+\t  static bool warned;\n+\n+\t  if (TARGET_SSE)\n+\t    return 0;\n+\n+\t  if (!warned)\n+\t    {\n+\t      warned = true;\n+\t      warning (\"SSE vector return without SSE enabled \"\n+\t\t       \"changes the ABI\");\n+\t    }\n+\t  return 1;\n+\t}\n     }\n+\n+  if (mode == TFmode)\n+    return 0;\n+  if (size > 12)\n+    return 1;\n+  return 0;\n }\n \n /* Define how to find the value returned by a library function\n@@ -2746,10 +2776,14 @@ ix86_libcall_value (enum machine_mode mode)\n static int\n ix86_value_regno (enum machine_mode mode)\n {\n+  /* Floating point return values in %st(0).  */\n   if (GET_MODE_CLASS (mode) == MODE_FLOAT && TARGET_FLOAT_RETURNS_IN_80387)\n     return FIRST_FLOAT_REG;\n-  if (mode == TImode || VECTOR_MODE_P (mode))\n+  /* 16-byte vector modes in %xmm0.  See ix86_return_in_memory for where\n+     we prevent this case when sse is not available.  */\n+  if (mode == TImode || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n     return FIRST_SSE_REG;\n+  /* Everything else in %eax.  */\n   return 0;\n }\n \f"}, {"sha": "5ed335469194ae1c9a597e54b790086ed1c5910a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30b6839178e57250791bd821f332151afaffba5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30b6839178e57250791bd821f332151afaffba5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a30b6839178e57250791bd821f332151afaffba5", "patch": "@@ -1,3 +1,7 @@\n+2003-08-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* g++.dg/eh/simd-2.C: Add -w for x86.\n+\n 2003-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20030815-1.c: New test."}, {"sha": "39f8dc80f2307e4990416af158b0d53be0f9ad7b", "filename": "gcc/testsuite/g++.dg/eh/simd-2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30b6839178e57250791bd821f332151afaffba5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30b6839178e57250791bd821f332151afaffba5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C?ref=a30b6839178e57250791bd821f332151afaffba5", "patch": "@@ -1,6 +1,7 @@\n // Test EH when V4SI SIMD registers are involved.\n // Contributed by Aldy Hernandez (aldy@quesejoda.com).\n // { dg-options \"-O\" }\n+// { dg-options \"-O -w\" { target i?86-*-* } }\n // { dg-do run }\n \n typedef int __attribute__((mode(V4SI))) vecint;"}]}