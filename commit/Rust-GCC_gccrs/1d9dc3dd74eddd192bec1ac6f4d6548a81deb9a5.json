{"sha": "1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "node_id": "C_kwDOANBUbNoAKDFkOWRjM2RkNzRlZGRkMTkyYmVjMWFjNmY0ZDY1NDhhODFkZWI5YTU", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-08T10:51:55Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-10T10:24:07Z"}, "message": "Enhance further testcases to verify handling of OpenACC privatization level [PR90115]\n\nAs originally introduced in commit 11b8286a83289f5b54e813f14ff56d730c3f3185\n\"[OpenACC privatization] Largely extend diagnostics and corresponding testsuite\ncoverage [PR90115]\".\n\n\tPR middle-end/90115\n\tgcc/testsuite/\n\t* c-c++-common/goacc/nesting-1.c: Enhance.\n\t* gcc.dg/goacc/nested-function-1.c: Likewise.\n\t* gcc.dg/goacc/nested-function-2.c: Likewise.\n\t* gfortran.dg/goacc/nested-function-1.f90: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/routine-1.f90: Enhance.\n\t* testsuite/libgomp.oacc-fortran/routine-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/routine-3.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/routine-9.f90: Likewise.", "tree": {"sha": "10e1e7bfb85a44b2c73e129ac4ff1b962895a883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10e1e7bfb85a44b2c73e129ac4ff1b962895a883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6"}], "stats": {"total": 277, "additions": 227, "deletions": 50}, "files": [{"sha": "83cbff767a42b26a20805860c126f072ee55f4fd", "filename": "gcc/testsuite/c-c++-common/goacc/nesting-1.c", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c?ref=1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "patch": "@@ -1,11 +1,27 @@\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_compute 0 c_loop_i 0] }\n+   { dg-message dummy {} { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n extern int i;\n \n void\n f_acc_parallel (void)\n {\n #pragma acc parallel\n   {\n-#pragma acc loop\n+#pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i }\n+       { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -15,9 +31,12 @@ f_acc_parallel (void)\n void\n f_acc_kernels (void)\n {\n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n   {\n-#pragma acc loop\n+#pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -34,17 +53,25 @@ f_acc_data (void)\n \n #pragma acc parallel\n     {\n-#pragma acc loop\n+#pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+      /* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+      /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i }\n+\t { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop_i$c_loop_i } */\n+      /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n       for (i = 0; i < 2; ++i)\n \t;\n     }\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n     ;\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n     {\n-#pragma acc loop\n+#pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+      /* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+      /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i } */\n       for (i = 0; i < 2; ++i)\n \t;\n     }\n@@ -65,17 +92,25 @@ f_acc_data (void)\n \n #pragma acc parallel\n       {\n-#pragma acc loop\n+#pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+\t/* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+\t/* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i }\n+\t   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop_i$c_loop_i } */\n+\t/* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n \tfor (i = 0; i < 2; ++i)\n \t  ;\n       }\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n       ;\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n       {\n-#pragma acc loop\n+#pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+\t/* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+\t/* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i } */\n \tfor (i = 0; i < 2; ++i)\n \t  ;\n       }"}, {"sha": "c34bcb0d601385f14859e5c84efe50cb91520142", "filename": "gcc/testsuite/gcc.dg/goacc/nested-function-1.c", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c?ref=1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "patch": "@@ -2,6 +2,20 @@\n /* See gcc/testsuite/gfortran.dg/goacc/nested-function-1.f90 for the Fortran\n    version.  */\n \n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_compute_loop 0 c_loop 0] }\n+   { dg-message dummy {} { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n int main ()\n {\n #define N 100\n@@ -25,32 +39,40 @@ int main ()\n       local_a[i] = 5;\n     local_arg = 5;\n \n-#pragma acc kernels loop \\\n+#pragma acc kernels loop /* { dg-line l_compute_loop[incr c_compute_loop] } */ \\\n   gang(num:local_arg) worker(local_arg) vector(local_arg) \\\n   wait async(local_arg)\n+    /* { dg-note {variable 'local_i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     for (local_i = 0; local_i < N; ++local_i)\n       {\n #pragma acc cache (local_a[local_i:5])\n \tlocal_a[local_i] = 100;\n-#pragma acc loop seq tile(*)\n+#pragma acc loop seq tile(*) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'local_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n \tfor (local_j = 0; local_j < N; ++local_j)\n \t  ;\n-#pragma acc loop auto independent tile(1)\n+#pragma acc loop auto independent tile(1) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'local_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n \tfor (local_j = 0; local_j < N; ++local_j)\n \t  ;\n       }\n \n-#pragma acc kernels loop \\\n+#pragma acc kernels loop /* { dg-line l_compute_loop[incr c_compute_loop] } */ \\\n   gang(static:local_arg) worker(local_arg) vector(local_arg) \\\n   wait(local_arg, local_arg + 1, local_arg + 2) async\n+    /* { dg-note {variable 'local_i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     for (local_i = 0; local_i < N; ++local_i)\n       {\n #pragma acc cache (local_a[local_i:4])\n \tlocal_a[local_i] = 100;\n-#pragma acc loop seq tile(1)\n+#pragma acc loop seq tile(1) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'local_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n \tfor (local_j = 0; local_j < N; ++local_j)\n \t  ;\n-#pragma acc loop auto independent tile(*)\n+#pragma acc loop auto independent tile(*) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'local_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n \tfor (local_j = 0; local_j < N; ++local_j)\n \t  ;\n       }\n@@ -62,32 +84,40 @@ int main ()\n       nonlocal_a[i] = 5;\n     nonlocal_arg = 5;\n \n-#pragma acc kernels loop \\\n+#pragma acc kernels loop /* { dg-line l_compute_loop[incr c_compute_loop] } */ \\\n   gang(num:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) \\\n   wait async(nonlocal_arg)\n+    /* { dg-note {variable 'nonlocal_i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     for (nonlocal_i = 0; nonlocal_i < N; ++nonlocal_i)\n       {\n #pragma acc cache (nonlocal_a[nonlocal_i:3])\n \tnonlocal_a[nonlocal_i] = 100;\n-#pragma acc loop seq tile(2)\n+#pragma acc loop seq tile(2) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'nonlocal_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n \tfor (nonlocal_j = 0; nonlocal_j < N; ++nonlocal_j)\n \t  ;\n-#pragma acc loop auto independent tile(3)\n+#pragma acc loop auto independent tile(3) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'nonlocal_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n \tfor (nonlocal_j = 0; nonlocal_j < N; ++nonlocal_j)\n \t  ;\n       }\n \n-#pragma acc kernels loop \\\n+#pragma acc kernels loop /* { dg-line l_compute_loop[incr c_compute_loop] } */ \\\n   gang(static:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) \\\n   wait(nonlocal_arg, nonlocal_arg + 1, nonlocal_arg + 2) async\n+    /* { dg-note {variable 'nonlocal_i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     for (nonlocal_i = 0; nonlocal_i < N; ++nonlocal_i)\n       {\n #pragma acc cache (nonlocal_a[nonlocal_i:2])\n \tnonlocal_a[nonlocal_i] = 100;\n-#pragma acc loop seq tile(*)\n+#pragma acc loop seq tile(*) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'nonlocal_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n \tfor (nonlocal_j = 0; nonlocal_j < N; ++nonlocal_j)\n \t  ;\n-#pragma acc loop auto independent tile(*)\n+#pragma acc loop auto independent tile(*) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'nonlocal_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n \tfor (nonlocal_j = 0; nonlocal_j < N; ++nonlocal_j)\n \t  ;\n       }"}, {"sha": "407006948da38fb6914db473fd2c60c5f0cb4f8f", "filename": "gcc/testsuite/gcc.dg/goacc/nested-function-2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-2.c?ref=1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "patch": "@@ -1,5 +1,17 @@\n /* Exercise nested function decomposition, gcc/tree-nested.c.  */\n \n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_loop 0] }\n+   { dg-message dummy {} { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n int\n main (void)\n {\n@@ -9,7 +21,9 @@ main (void)\n     int i;\n #pragma acc parallel\n     {\n-#pragma acc loop\n+#pragma acc loop /* { dg-line l_loop[incr c_loop] } */\n+      /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+      /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop$c_loop } */\n       for (i = 0; i < m; i+= k)\n \tj = (m + i - j) * l;\n     }\n@@ -19,7 +33,11 @@ main (void)\n     int x, y, z;\n #pragma acc parallel\n     {\n-#pragma acc loop collapse (3)\n+#pragma acc loop collapse (3) /* { dg-line l_loop[incr c_loop] } */\n+      /* { dg-note {variable 'z' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+      /* { dg-note {variable 'y' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+      /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+      /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop$c_loop } */\n       for (x = 0; x < k; x++)\n \tfor (y = -5; y < l; y++)\n \t  for (z = 0; z < m; z++)\n@@ -31,7 +49,11 @@ main (void)\n     int x, y, z;\n #pragma acc parallel reduction (+:j)\n     {\n-#pragma acc loop reduction (+:j) collapse (3)\n+#pragma acc loop reduction (+:j) collapse (3) /* { dg-line l_loop[incr c_loop] } */\n+      /* { dg-note {variable 'z' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+      /* { dg-note {variable 'y' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+      /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop } */\n+      /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop$c_loop } */\n       for (x = 0; x < k; x++)\n \tfor (y = -5; y < l; y++)\n \t  for (z = 0; z < m; z++)"}, {"sha": "50fd0c82e1451114f94ad69f12ac7b48a97b961e", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-function-1.f90", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90?ref=1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "patch": "@@ -1,6 +1,20 @@\n ! Exercise nested function decomposition, gcc/tree-nested.c.\n ! See gcc/testsuite/gcc.dg/goacc/nested-function-1.c for the C version.\n \n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n+\n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c_compute_loop 0 c_loop 0] }\n+! { dg-message dummy {} { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".\n+\n program main\n   integer, parameter :: N = 100\n   integer :: nonlocal_arg\n@@ -29,29 +43,41 @@ subroutine local ()\n \n     !$acc kernels loop &\n     !$acc gang(num:local_arg) worker(local_arg) vector(local_arg) &\n-    !$acc wait async(local_arg)\n+    !$acc wait async(local_arg) ! { dg-line l_compute_loop[incr c_compute_loop] }\n+    ! { dg-note {variable 'local_i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'local_i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     do local_i = 1, N\n        !$acc cache (local_a(local_i:local_i + 5))\n        local_a(local_i) = 100\n-       !$acc loop seq tile(*)\n+       !$acc loop seq tile(*) ! { dg-line l_loop[incr c_loop] }\n+       ! { dg-note {variable 'local_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop }\n        do local_j = 1, N\n        enddo\n-       !$acc loop auto independent tile(1)\n+       !$acc loop auto independent tile(1) ! { dg-line l_loop[incr c_loop] }\n+       ! { dg-note {variable 'local_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop }\n        do local_j = 1, N\n        enddo\n     enddo\n     !$acc end kernels loop\n \n     !$acc kernels loop &\n     !$acc gang(static:local_arg) worker(local_arg) vector(local_arg) &\n-    !$acc wait(local_arg, local_arg + 1, local_arg + 2) async\n+    !$acc wait(local_arg, local_arg + 1, local_arg + 2) async ! { dg-line l_compute_loop[incr c_compute_loop] }\n+    ! { dg-note {variable 'local_i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'local_i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     do local_i = 1, N\n        !$acc cache (local_a(local_i:local_i + 4))\n        local_a(local_i) = 100\n-       !$acc loop seq tile(1)\n+       !$acc loop seq tile(1) ! { dg-line l_loop[incr c_loop] }\n+       ! { dg-note {variable 'local_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop }\n        do local_j = 1, N\n        enddo\n-       !$acc loop auto independent tile(*)\n+       !$acc loop auto independent tile(*) ! { dg-line l_loop[incr c_loop] }\n+       ! { dg-note {variable 'local_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop }\n        do local_j = 1, N\n        enddo\n     enddo\n@@ -68,29 +94,41 @@ subroutine nonlocal ()\n \n     !$acc kernels loop &\n     !$acc gang(num:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) &\n-    !$acc wait async(nonlocal_arg)\n+    !$acc wait async(nonlocal_arg) ! { dg-line l_compute_loop[incr c_compute_loop] }\n+    ! { dg-note {variable 'nonlocal_i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'nonlocal_i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     do nonlocal_i = 1, N\n        !$acc cache (nonlocal_a(nonlocal_i:nonlocal_i + 3))\n        nonlocal_a(nonlocal_i) = 100\n-       !$acc loop seq tile(2)\n+       !$acc loop seq tile(2) ! { dg-line l_loop[incr c_loop] }\n+       ! { dg-note {variable 'nonlocal_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop }\n        do nonlocal_j = 1, N\n        enddo\n-       !$acc loop auto independent tile(3)\n+       !$acc loop auto independent tile(3) ! { dg-line l_loop[incr c_loop] }\n+       ! { dg-note {variable 'nonlocal_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop }\n        do nonlocal_j = 1, N\n        enddo\n     enddo\n     !$acc end kernels loop\n \n     !$acc kernels loop &\n     !$acc gang(static:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) &\n-    !$acc wait(nonlocal_arg, nonlocal_arg + 1, nonlocal_arg + 2) async\n+    !$acc wait(nonlocal_arg, nonlocal_arg + 1, nonlocal_arg + 2) async ! { dg-line l_compute_loop[incr c_compute_loop] }\n+    ! { dg-note {variable 'nonlocal_i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'nonlocal_i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     do nonlocal_i = 1, N\n        !$acc cache (nonlocal_a(nonlocal_i:nonlocal_i + 2))\n        nonlocal_a(nonlocal_i) = 100\n-       !$acc loop seq tile(*)\n+       !$acc loop seq tile(*) ! { dg-line l_loop[incr c_loop] }\n+       ! { dg-note {variable 'nonlocal_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop }\n        do nonlocal_j = 1, N\n        enddo\n-       !$acc loop auto independent tile(*)\n+       !$acc loop auto independent tile(*) ! { dg-line l_loop[incr c_loop] }\n+       ! { dg-note {variable 'nonlocal_j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop$c_loop }\n        do nonlocal_j = 1, N\n        enddo\n     enddo"}, {"sha": "95d8752f8a03a9a6ee30d48ce970348999a58245", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-1.f90", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-1.f90?ref=1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "patch": "@@ -1,6 +1,14 @@\n ! { dg-do run }\n ! { dg-options \"-fno-inline\" }\n \n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n+\n   interface\n     recursive function fact (x)\n       !$acc routine\n@@ -11,9 +19,14 @@ end function fact\n   integer, parameter :: n = 10\n   integer :: a(n), i\n   !$acc parallel\n-  !$acc loop\n+  !$acc loop ! { dg-line l_loop1 }\n+  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop1 }\n+  !   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop1 }\n+  !   { dg-note {variable 'i' adjusted for OpenACC privatization level: 'vector'} {} { target { ! openacc_host_selected } } l_loop1 }\n+  ! { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop1 }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop1 }\n   do i = 1, n\n-     a(i) = fact (i)\n+     a(i) = fact (i) ! { dg-optimized {assigned OpenACC seq loop parallelism} }\n   end do\n   !$acc end parallel\n   do i = 1, n\n@@ -27,6 +40,6 @@ recursive function fact (x) result (res)\n   if (x < 1) then\n      res = 1\n   else\n-     res = x * fact (x - 1)\n+     res = x * fact (x - 1) ! { dg-optimized {assigned OpenACC seq loop parallelism} }\n   end if\n end function fact"}, {"sha": "9e8eb96dbf223d47934b8f3b643d487f343741af", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-2.f90", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-2.f90?ref=1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "patch": "@@ -1,6 +1,14 @@\n ! { dg-do run }\n ! { dg-options \"-fno-inline\" }\n \n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n+\n   module m1\n     contains\n     recursive function fact (x) result (res)\n@@ -10,17 +18,22 @@ recursive function fact (x) result (res)\n       if (x < 1) then\n          res = 1\n       else\n-         res = x * fact (x - 1)\n+         res = x * fact (x - 1) ! { dg-optimized {assigned OpenACC seq loop parallelism} }\n       end if\n     end function fact\n   end module m1\n   use m1\n   integer, parameter :: n = 10\n   integer :: a(n), i\n   !$acc parallel\n-  !$acc loop\n+  !$acc loop ! { dg-line l_loop1 }\n+  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop1 }\n+  !   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop1 }\n+  !   { dg-note {variable 'i' adjusted for OpenACC privatization level: 'vector'} {} { target { ! openacc_host_selected } } l_loop1 }\n+  ! { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop1 }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop1 }\n   do i = 1, n\n-     a(i) = fact (i)\n+     a(i) = fact (i) ! { dg-optimized {assigned OpenACC seq loop parallelism} }\n   end do\n   !$acc end parallel\n   do i = 1, n"}, {"sha": "38218263851d091a1cb706acc199575c688dbb79", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-3.f90", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-3.f90?ref=1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "patch": "@@ -1,14 +1,27 @@\n ! { dg-do run }\n ! { dg-options \"-fno-inline\" }\n \n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n+\n   integer, parameter :: n = 10\n   integer :: a(n), i\n   integer, external :: fact\n   !$acc routine (fact)\n   !$acc parallel\n-  !$acc loop\n+  !$acc loop ! { dg-line l_loop1 }\n+  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop1 }\n+  !   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop1 }\n+  !   { dg-note {variable 'i' adjusted for OpenACC privatization level: 'vector'} {} { target { ! openacc_host_selected } } l_loop1 }\n+  ! { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop1 }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop1 }\n   do i = 1, n\n-     a(i) = fact (i)\n+     a(i) = fact (i) ! { dg-optimized {assigned OpenACC seq loop parallelism} }\n   end do\n   !$acc end parallel\n   do i = 1, n\n@@ -22,6 +35,6 @@ recursive function fact (x) result (res)\n   if (x < 1) then\n      res = 1\n   else\n-     res = x * fact (x - 1)\n+     res = x * fact (x - 1) ! { dg-optimized {assigned OpenACC seq loop parallelism} }\n   end if\n end function fact"}, {"sha": "dbd2e4de743045182049838a45cbedcb3ba4c6a2", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-9.f90", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-9.f90?ref=1d9dc3dd74eddd192bec1ac6f4d6548a81deb9a5", "patch": "@@ -1,16 +1,29 @@\n ! { dg-do run }\n ! { dg-options \"-fno-inline\" }\n \n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n+\n program main\n   implicit none\n   integer, parameter :: n = 10\n   integer :: a(n), i\n   integer, external :: fact\n   !$acc routine (fact)\n   !$acc parallel\n-  !$acc loop\n+  !$acc loop ! { dg-line l_loop1 }\n+  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop1 }\n+  !   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop1 }\n+  !   { dg-note {variable 'i' adjusted for OpenACC privatization level: 'vector'} {} { target { ! openacc_host_selected } } l_loop1 }\n+  ! { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop1 }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop1 }\n   do i = 1, n\n-     a(i) = fact (i)\n+     a(i) = fact (i) ! { dg-optimized {assigned OpenACC seq loop parallelism} }\n   end do\n   !$acc end parallel\n   do i = 1, n\n@@ -26,6 +39,6 @@ recursive function fact (x) result (res)\n   if (x < 1) then\n      res = 1\n   else\n-     res = x * fact(x - 1)\n+     res = x * fact(x - 1) ! { dg-optimized {assigned OpenACC seq loop parallelism} }\n   end if\n end function fact"}]}