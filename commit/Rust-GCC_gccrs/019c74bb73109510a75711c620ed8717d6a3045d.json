{"sha": "019c74bb73109510a75711c620ed8717d6a3045d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5Yzc0YmI3MzEwOTUxMGE3NTcxMWM2MjBlZDg3MTdkNmEzMDQ1ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2019-12-16T10:34:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-16T10:34:51Z"}, "message": "[Ada] AI12-0234/321 atomic operations\n\n2019-12-16  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-aotase.adb, libgnat/s-aotase.ads,\n\tlibgnat/s-atoope.ads, libgnat/s-atopar.adb,\n\tlibgnat/s-atopar.ads, libgnat/s-atopex.adb,\n\tlibgnat/s-atopex.ads: New files.\n\t* libgnat/s-atopri.ads: Add new intrinsics.\n\t* Makefile.rtl: Add new runtime files.\n\t* impunit.adb: Add new units to Ada 2020 list.\n\nFrom-SVN: r279434", "tree": {"sha": "eb691d39c1948d8f21a3d59859db4392bbf2cef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb691d39c1948d8f21a3d59859db4392bbf2cef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019c74bb73109510a75711c620ed8717d6a3045d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019c74bb73109510a75711c620ed8717d6a3045d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019c74bb73109510a75711c620ed8717d6a3045d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019c74bb73109510a75711c620ed8717d6a3045d/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1dcdd961c5cdce6e850ff20b1954919972553920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcdd961c5cdce6e850ff20b1954919972553920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcdd961c5cdce6e850ff20b1954919972553920"}], "stats": {"total": 622, "additions": 620, "deletions": 2}, "files": [{"sha": "73a3ec7945401be18a54863f3a4816a5244c77a4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -1,3 +1,13 @@\n+2019-12-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-aotase.adb, libgnat/s-aotase.ads,\n+\tlibgnat/s-atoope.ads, libgnat/s-atopar.adb,\n+\tlibgnat/s-atopar.ads, libgnat/s-atopex.adb,\n+\tlibgnat/s-atopex.ads: New files.\n+\t* libgnat/s-atopri.ads: Add new intrinsics.\n+\t* Makefile.rtl: Add new runtime files.\n+\t* impunit.adb: Add new units to Ada 2020 list.\n+\n 2019-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* freeze.adb (Check_Strict_Alignment): Remove new check on"}, {"sha": "55ff9b0f3d563616401c4e34607c33159088f71e", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -498,10 +498,14 @@ GNATRTL_NONTASKING_OBJS= \\\n   machcode$(objext) \\\n   s-addima$(objext) \\\n   s-addope$(objext) \\\n+  s-aotase$(objext) \\\n   s-arit64$(objext) \\\n   s-assert$(objext) \\\n   s-atacco$(objext) \\\n   s-atocou$(objext) \\\n+  s-atoope$(objext) \\\n+  s-atopar$(objext) \\\n+  s-atopex$(objext) \\\n   s-atopri$(objext) \\\n   s-auxdec$(objext) \\\n   s-bignum$(objext) \\"}, {"sha": "c53cdf986a85ded26022cbf1af7e5f6873a58a2c", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -623,7 +623,11 @@ package body Impunit is\n     (\"a-stteou\", T),  -- Ada.Strings.Text_Output\n     (\"a-nubinu\", T),  -- Ada.Numerics.Big_Numbers\n     (\"a-nbnbin\", T),  -- Ada.Numerics.Big_Numbers.Big_Integers\n-    (\"a-nbnbre\", T)); -- Ada.Numerics.Big_Numbers.Big_Reals\n+    (\"a-nbnbre\", T),  -- Ada.Numerics.Big_Numbers.Big_Reals\n+    (\"s-aotase\", T),  -- System.Atomic_Operations.Test_And_Set\n+    (\"s-atoope\", T),  -- System.Atomic_Operations\n+    (\"s-atopar\", T),  -- System.Atomic_Operations.Arithmetic\n+    (\"s-atopex\", T)); -- System.Atomic_Operations.Exchange\n \n    -----------------------\n    -- Alternative Units --"}, {"sha": "7ed6ab89c9fc507dcd815be1f0b06ce8c0912b6d", "filename": "gcc/ada/libgnat/s-aotase.adb", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-aotase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-aotase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aotase.adb?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -0,0 +1,66 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  System.Atomic_Operations.Test_And_Set                   --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Atomic_Primitives; use System.Atomic_Primitives;\n+\n+package body System.Atomic_Operations.Test_And_Set is\n+\n+   -------------------------\n+   -- Atomic_Test_And_Set --\n+   -------------------------\n+\n+   function Atomic_Test_And_Set\n+     (Item : aliased in out Test_And_Set_Flag) return Boolean is\n+   begin\n+      return Boolean (Atomic_Test_And_Set (Item'Address));\n+   end Atomic_Test_And_Set;\n+\n+   ------------------\n+   -- Atomic_Clear --\n+   ------------------\n+\n+   procedure Atomic_Clear\n+     (Item : aliased in out Test_And_Set_Flag) is\n+   begin\n+      Atomic_Clear (Item'Address);\n+   end Atomic_Clear;\n+\n+   ------------------\n+   -- Is_Lock_Free --\n+   ------------------\n+\n+   function Is_Lock_Free (Item : aliased Test_And_Set_Flag) return Boolean is\n+      pragma Unreferenced (Item);\n+   begin\n+      return True;\n+   end Is_Lock_Free;\n+\n+end System.Atomic_Operations.Test_And_Set;"}, {"sha": "0406630f7ad7efacd8691177e0ff09b09a18d447", "filename": "gcc/ada/libgnat/s-aotase.ads", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-aotase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-aotase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aotase.ads?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -0,0 +1,55 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  System.Atomic_Operations.Test_And_Set                   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System.Atomic_Operations.Test_And_Set\n+  with Pure\n+--  Nonblocking\n+is\n+   type Test_And_Set_Flag is mod 2 ** 8\n+     with Atomic, Default_Value => 0, Size => 8;\n+\n+   function Atomic_Test_And_Set\n+     (Item : aliased in out Test_And_Set_Flag) return Boolean\n+     with Convention => Intrinsic;\n+\n+   procedure Atomic_Clear\n+     (Item : aliased in out Test_And_Set_Flag)\n+     with Convention => Intrinsic;\n+\n+   function Is_Lock_Free\n+     (Item : aliased Test_And_Set_Flag) return Boolean\n+     with Convention => Intrinsic;\n+\n+private\n+   pragma Inline_Always (Atomic_Test_And_Set);\n+   pragma Inline_Always (Atomic_Clear);\n+   pragma Inline_Always (Is_Lock_Free);\n+end System.Atomic_Operations.Test_And_Set;"}, {"sha": "cbe089b2c79d17a3a525c6cbe45920b0c7561e69", "filename": "gcc/ada/libgnat/s-atoope.ads", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atoope.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atoope.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atoope.ads?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -0,0 +1,35 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--              S Y S T E M . A T O M I C _ O P E R A T I O N S             --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System.Atomic_Operations\n+  with Pure\n+is\n+end System.Atomic_Operations;"}, {"sha": "82cfbd3b49b77ed9151db6217bf3e0a14a721582", "filename": "gcc/ada/libgnat/s-atopar.adb", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopar.adb?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -0,0 +1,147 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                   System.Atomic_Operations.Arithmetic                    --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Atomic_Primitives; use System.Atomic_Primitives;\n+with Interfaces.C;\n+\n+package body System.Atomic_Operations.Arithmetic is\n+\n+   ----------------\n+   -- Atomic_Add --\n+   ----------------\n+\n+   procedure Atomic_Add\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type)\n+   is\n+      Ignore : constant Atomic_Type := Atomic_Fetch_And_Add (Item, Value);\n+   begin\n+      null;\n+   end Atomic_Add;\n+\n+   ---------------------\n+   -- Atomic_Subtract --\n+   ---------------------\n+\n+   procedure Atomic_Subtract\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type)\n+   is\n+      Ignore : constant Atomic_Type := Atomic_Fetch_And_Subtract (Item, Value);\n+   begin\n+      null;\n+   end Atomic_Subtract;\n+\n+   --------------------------\n+   -- Atomic_Fetch_And_Add --\n+   --------------------------\n+\n+   function Atomic_Fetch_And_Add\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type\n+   is\n+      pragma Warnings (Off);\n+      function Atomic_Fetch_Add_1\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Add_1, \"__atomic_fetch_add_1\");\n+      function Atomic_Fetch_Add_2\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Add_2, \"__atomic_fetch_add_2\");\n+      function Atomic_Fetch_Add_4\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Add_4, \"__atomic_fetch_add_4\");\n+      function Atomic_Fetch_Add_8\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Add_8, \"__atomic_fetch_add_8\");\n+      pragma Warnings (On);\n+\n+   begin\n+      case Item'Size is\n+         when 8      => return Atomic_Fetch_Add_1 (Item'Address, Value);\n+         when 16     => return Atomic_Fetch_Add_2 (Item'Address, Value);\n+         when 32     => return Atomic_Fetch_Add_4 (Item'Address, Value);\n+         when 64     => return Atomic_Fetch_Add_8 (Item'Address, Value);\n+         when others => raise Program_Error;\n+      end case;\n+   end Atomic_Fetch_And_Add;\n+\n+   -------------------------------\n+   -- Atomic_Fetch_And_Subtract --\n+   -------------------------------\n+\n+   function Atomic_Fetch_And_Subtract\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type\n+   is\n+      pragma Warnings (Off);\n+      function Atomic_Fetch_Sub_1\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub_1, \"__atomic_fetch_sub_1\");\n+      function Atomic_Fetch_Sub_2\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub_2, \"__atomic_fetch_sub_2\");\n+      function Atomic_Fetch_Sub_4\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub_4, \"__atomic_fetch_sub_4\");\n+      function Atomic_Fetch_Sub_8\n+        (Ptr : System.Address; Val : Atomic_Type; Model : Mem_Model := Seq_Cst)\n+        return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Fetch_Sub_8, \"__atomic_fetch_sub_8\");\n+      pragma Warnings (On);\n+\n+   begin\n+      case Item'Size is\n+         when 8      => return Atomic_Fetch_Sub_1 (Item'Address, Value);\n+         when 16     => return Atomic_Fetch_Sub_2 (Item'Address, Value);\n+         when 32     => return Atomic_Fetch_Sub_4 (Item'Address, Value);\n+         when 64     => return Atomic_Fetch_Sub_8 (Item'Address, Value);\n+         when others => raise Program_Error;\n+      end case;\n+   end Atomic_Fetch_And_Subtract;\n+\n+   ------------------\n+   -- Is_Lock_Free --\n+   ------------------\n+\n+   function Is_Lock_Free (Item : aliased Atomic_Type) return Boolean is\n+      use type Interfaces.C.size_t;\n+   begin\n+      return Boolean (Atomic_Always_Lock_Free (Item'Size / 8));\n+   end Is_Lock_Free;\n+\n+end System.Atomic_Operations.Arithmetic;"}, {"sha": "a555dbc5b44df3da453fada77c54552f62612f85", "filename": "gcc/ada/libgnat/s-atopar.ads", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopar.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopar.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopar.ads?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -0,0 +1,63 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                   System.Atomic_Operations.Arithmetic                    --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+generic\n+   type Atomic_Type is range <>; -- ??? with Atomic;\n+package System.Atomic_Operations.Arithmetic\n+  with Pure\n+--  Nonblocking\n+is\n+   procedure Atomic_Add\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) with Convention => Intrinsic;\n+\n+   procedure Atomic_Subtract\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) with Convention => Intrinsic;\n+\n+   function Atomic_Fetch_And_Add\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type with Convention => Intrinsic;\n+\n+   function Atomic_Fetch_And_Subtract\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type with Convention => Intrinsic;\n+\n+   function Is_Lock_Free\n+     (Item : aliased Atomic_Type) return Boolean with Convention => Intrinsic;\n+\n+private\n+   pragma Inline_Always (Atomic_Add);\n+   pragma Inline_Always (Atomic_Subtract);\n+   pragma Inline_Always (Atomic_Fetch_And_Add);\n+   pragma Inline_Always (Atomic_Fetch_And_Subtract);\n+   pragma Inline_Always (Is_Lock_Free);\n+end System.Atomic_Operations.Arithmetic;"}, {"sha": "624d3d5083b903961280d0d545d75152a6d7d952", "filename": "gcc/ada/libgnat/s-atopex.adb", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopex.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopex.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopex.adb?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -0,0 +1,159 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                    System.Atomic_Operations.Exchange                     --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Atomic_Primitives; use System.Atomic_Primitives;\n+with Interfaces.C;\n+\n+package body System.Atomic_Operations.Exchange is\n+\n+   ---------------------\n+   -- Atomic_Exchange --\n+   ---------------------\n+\n+   function Atomic_Exchange\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type\n+   is\n+      pragma Warnings (Off);\n+      function Atomic_Exchange_1\n+        (Ptr   : System.Address;\n+         Val   : Atomic_Type;\n+         Model : Mem_Model := Seq_Cst) return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Exchange_1, \"__atomic_exchange_1\");\n+      function Atomic_Exchange_2\n+        (Ptr   : System.Address;\n+         Val   : Atomic_Type;\n+         Model : Mem_Model := Seq_Cst) return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Exchange_2, \"__atomic_exchange_2\");\n+      function Atomic_Exchange_4\n+        (Ptr   : System.Address;\n+         Val   : Atomic_Type;\n+         Model : Mem_Model := Seq_Cst) return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Exchange_4, \"__atomic_exchange_4\");\n+      function Atomic_Exchange_8\n+        (Ptr   : System.Address;\n+         Val   : Atomic_Type;\n+         Model : Mem_Model := Seq_Cst) return Atomic_Type;\n+      pragma Import (Intrinsic, Atomic_Exchange_8, \"__atomic_exchange_8\");\n+      pragma Warnings (On);\n+\n+   begin\n+      case Item'Size is\n+         when 8      => return Atomic_Exchange_1 (Item'Address, Value);\n+         when 16     => return Atomic_Exchange_2 (Item'Address, Value);\n+         when 32     => return Atomic_Exchange_4 (Item'Address, Value);\n+         when 64     => return Atomic_Exchange_8 (Item'Address, Value);\n+         when others => raise Program_Error;\n+      end case;\n+   end Atomic_Exchange;\n+\n+   ---------------------------------\n+   -- Atomic_Compare_And_Exchange --\n+   ---------------------------------\n+\n+   function Atomic_Compare_And_Exchange\n+     (Item    : aliased in out Atomic_Type;\n+      Prior   : aliased in out Atomic_Type;\n+      Desired : Atomic_Type) return Boolean\n+   is\n+      pragma Warnings (Off);\n+      function Atomic_Compare_Exchange_1\n+        (Ptr           : System.Address;\n+         Expected      : System.Address;\n+         Desired       : Atomic_Type;\n+         Weak          : bool := False;\n+         Success_Model : Mem_Model := Seq_Cst;\n+         Failure_Model : Mem_Model := Seq_Cst) return bool;\n+      pragma Import\n+        (Intrinsic, Atomic_Compare_Exchange_1, \"__atomic_compare_exchange_1\");\n+      function Atomic_Compare_Exchange_2\n+        (Ptr           : System.Address;\n+         Expected      : System.Address;\n+         Desired       : Atomic_Type;\n+         Weak          : bool := False;\n+         Success_Model : Mem_Model := Seq_Cst;\n+         Failure_Model : Mem_Model := Seq_Cst) return bool;\n+      pragma Import\n+        (Intrinsic, Atomic_Compare_Exchange_2, \"__atomic_compare_exchange_2\");\n+      function Atomic_Compare_Exchange_4\n+        (Ptr           : System.Address;\n+         Expected      : System.Address;\n+         Desired       : Atomic_Type;\n+         Weak          : bool := False;\n+         Success_Model : Mem_Model := Seq_Cst;\n+         Failure_Model : Mem_Model := Seq_Cst) return bool;\n+      pragma Import\n+        (Intrinsic, Atomic_Compare_Exchange_4, \"__atomic_compare_exchange_4\");\n+      function Atomic_Compare_Exchange_8\n+        (Ptr           : System.Address;\n+         Expected      : System.Address;\n+         Desired       : Atomic_Type;\n+         Weak          : bool := False;\n+         Success_Model : Mem_Model := Seq_Cst;\n+         Failure_Model : Mem_Model := Seq_Cst) return bool;\n+      pragma Import\n+        (Intrinsic, Atomic_Compare_Exchange_8, \"__atomic_compare_exchange_8\");\n+      pragma Warnings (On);\n+\n+   begin\n+      case Item'Size is\n+         when 8 =>\n+            return Boolean\n+              (Atomic_Compare_Exchange_1\n+                (Item'Address, Prior'Address, Desired));\n+         when 16 =>\n+            return Boolean\n+              (Atomic_Compare_Exchange_2\n+                (Item'Address, Prior'Address, Desired));\n+         when 32 =>\n+            return Boolean\n+              (Atomic_Compare_Exchange_4\n+                (Item'Address, Prior'Address, Desired));\n+         when 64 =>\n+            return Boolean\n+              (Atomic_Compare_Exchange_8\n+                (Item'Address, Prior'Address, Desired));\n+         when others =>\n+            raise Program_Error;\n+      end case;\n+   end Atomic_Compare_And_Exchange;\n+\n+   ------------------\n+   -- Is_Lock_Free --\n+   ------------------\n+\n+   function Is_Lock_Free (Item : aliased Atomic_Type) return Boolean is\n+      use type Interfaces.C.size_t;\n+   begin\n+      return Boolean (Atomic_Always_Lock_Free (Item'Size / 8));\n+   end Is_Lock_Free;\n+\n+end System.Atomic_Operations.Exchange;"}, {"sha": "40f87a218c4c3e595408064344b28f03ecae5c01", "filename": "gcc/ada/libgnat/s-atopex.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopex.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopex.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopex.ads?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                    System.Atomic_Operations.Exchange                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                 Copyright (C) 2019, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+generic\n+   type Atomic_Type is private;  --  with Atomic;\n+package System.Atomic_Operations.Exchange\n+  with Pure\n+--  Blocking\n+is\n+   function Atomic_Exchange\n+     (Item  : aliased in out Atomic_Type;\n+      Value : Atomic_Type) return Atomic_Type with Convention => Intrinsic;\n+\n+   function Atomic_Compare_And_Exchange\n+     (Item    : aliased in out Atomic_Type;\n+      Prior   : aliased in out Atomic_Type;\n+      Desired : Atomic_Type) return Boolean with Convention => Intrinsic;\n+\n+   function Is_Lock_Free\n+     (Item : aliased Atomic_Type) return Boolean with Convention => Intrinsic;\n+\n+private\n+   pragma Inline_Always (Atomic_Exchange);\n+   pragma Inline_Always (Atomic_Compare_And_Exchange);\n+   pragma Inline_Always (Is_Lock_Free);\n+end System.Atomic_Operations.Exchange;"}, {"sha": "b65156a9d4f9d928fdaf1d34ac89446003aab89d", "filename": "gcc/ada/libgnat/s-atopri.ads", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019c74bb73109510a75711c620ed8717d6a3045d/gcc%2Fada%2Flibgnat%2Fs-atopri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopri.ads?ref=019c74bb73109510a75711c620ed8717d6a3045d", "patch": "@@ -33,8 +33,10 @@\n --  functions and operations used by the compiler to generate the lock-free\n --  implementation of protected objects.\n \n+with Interfaces.C;\n+\n package System.Atomic_Primitives is\n-   pragma Preelaborate;\n+   pragma Pure;\n \n    type uint is mod 2 ** Long_Integer'Size;\n \n@@ -60,6 +62,9 @@ package System.Atomic_Primitives is\n \n    subtype Mem_Model is Integer range Relaxed .. Last;\n \n+   type bool is new Boolean;\n+   pragma Convention (C, bool);\n+\n    ------------------------------------\n    -- GCC built-in atomic primitives --\n    ------------------------------------\n@@ -130,6 +135,22 @@ package System.Atomic_Primitives is\n    --                 Atomic_Compare_Exchange_8,\n    --                 \"__atomic_compare_exchange_1\");\n \n+   function Atomic_Test_And_Set\n+     (Ptr   : System.Address;\n+      Model : Mem_Model := Seq_Cst) return bool;\n+   pragma Import (Intrinsic, Atomic_Test_And_Set, \"__atomic_test_and_set\");\n+\n+   procedure Atomic_Clear\n+     (Ptr   : System.Address;\n+      Model : Mem_Model := Seq_Cst);\n+   pragma Import (Intrinsic, Atomic_Clear, \"__atomic_clear\");\n+\n+   function Atomic_Always_Lock_Free\n+     (Size : Interfaces.C.size_t;\n+      Ptr  : System.Address := System.Null_Address) return bool;\n+   pragma Import\n+     (Intrinsic, Atomic_Always_Lock_Free, \"__atomic_always_lock_free\");\n+\n    --------------------------\n    -- Lock-free operations --\n    --------------------------"}]}