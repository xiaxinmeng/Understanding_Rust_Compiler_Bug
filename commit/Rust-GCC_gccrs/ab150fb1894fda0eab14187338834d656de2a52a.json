{"sha": "ab150fb1894fda0eab14187338834d656de2a52a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIxNTBmYjE4OTRmZGEwZWFiMTQxODczMzg4MzRkNjU2ZGUyYTUyYQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "1999-10-07T13:26:01Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "1999-10-07T13:26:01Z"}, "message": "During class file generation...\n\nDuring class file generation, generate_classfile occasionally writes\nout a bunch of data and then skips backwards to fill in blanks.  When\nconfigured with --enable-checking, this patching up will often trip\nthe checking code.  This change introduces UNSAFE_PUTx macros which\nnever use CHECK_PUT.  These should only be used in cases we know\nCHECK_PUT will fail.\n\nFrom-SVN: r29854", "tree": {"sha": "eb83f5d7b9f27044c9864936e569e3d22225c475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb83f5d7b9f27044c9864936e569e3d22225c475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab150fb1894fda0eab14187338834d656de2a52a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab150fb1894fda0eab14187338834d656de2a52a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab150fb1894fda0eab14187338834d656de2a52a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab150fb1894fda0eab14187338834d656de2a52a/comments", "author": null, "committer": null, "parents": [{"sha": "81bf3d9ed3ef013962d6913294fa6fdf6c140fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bf3d9ed3ef013962d6913294fa6fdf6c140fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bf3d9ed3ef013962d6913294fa6fdf6c140fee"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "00ea759c82a9f67265a06866b3ded71d17cbc627", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab150fb1894fda0eab14187338834d656de2a52a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab150fb1894fda0eab14187338834d656de2a52a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ab150fb1894fda0eab14187338834d656de2a52a", "patch": "@@ -1,3 +1,11 @@\n+1999-10-07  Anthony Green  <green@cygnus.com>\n+\n+\t* jcf-write.c (generate_classfile): Use UNSAFE_PUTx in cases\n+\twhere CHECK_PUT may fail for valid reasons.\n+\n+\t* jcf-write.c (UNSAFE_PUT1, UNSAFE_PUT2, UNSAFE_PUT3,\n+ \tUNSAFE_PUTN): New macros.\n+\n 1999-10-04  Tom Tromey  <tromey@cygnus.com>\n \n \t* lex.h (BUILD_OPERATOR2): Return ASSIGN_ANY_TK in `lite' case as"}, {"sha": "5918757fbb4372d774bba027e67ad15eb3b35877", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab150fb1894fda0eab14187338834d656de2a52a/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab150fb1894fda0eab14187338834d656de2a52a/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=ab150fb1894fda0eab14187338834d656de2a52a", "patch": "@@ -358,6 +358,13 @@ CHECK_PUT(ptr, state, i)\n #define PUT4(X)  (PUT2((X) >> 16), PUT2((X) & 0xFFFF))\n #define PUTN(P, N)  (CHECK_PUT(ptr, state, N), memcpy(ptr, P, N), ptr += (N))\n \n+/* There are some cases below where CHECK_PUT is guaranteed to fail.\n+   Use the following macros in those specific cases.  */\n+#define UNSAFE_PUT1(X)  (*ptr++ = (X))\n+#define UNSAFE_PUT2(X)  (UNSAFE_PUT1((X) >> 8), UNSAFE_PUT1((X) & 0xFF))\n+#define UNSAFE_PUT4(X)  (UNSAFE_PUT2((X) >> 16), UNSAFE_PUT2((X) & 0xFFFF))\n+#define UNSAFE_PUTN(P, N)  (memcpy(ptr, P, N), ptr += (N))\n+\n \f\n /* Allocate a new chunk on obstack WORK, and link it in after LAST.\n    Set the data and size fields to DATA and SIZE, respectively.\n@@ -2807,7 +2814,7 @@ generate_classfile (clas, state)\n \t}\n       fields_count++;\n     }\n-  ptr = fields_count_ptr;  PUT2 (fields_count);\n+  ptr = fields_count_ptr;  UNSAFE_PUT2 (fields_count);\n \n   ptr = methods_count_ptr = append_chunk (NULL, 2, state);\n   PUT2 (0);\n@@ -2873,10 +2880,10 @@ generate_classfile (clas, state)\n \t      code_attributes_count++;\n \t      i += 8 + 10 * state->lvar_count;\n \t    }\n-\t  PUT4 (i); /* attribute_length */\n-\t  PUT2 (state->code_SP_max);  /* max_stack */\n-\t  PUT2 (localvar_max);  /* max_locals */\n-\t  PUT4 (state->code_length);\n+\t  UNSAFE_PUT4 (i); /* attribute_length */\n+\t  UNSAFE_PUT2 (state->code_SP_max);  /* max_stack */\n+\t  UNSAFE_PUT2 (localvar_max);  /* max_locals */\n+\t  UNSAFE_PUT4 (state->code_length);\n \n \t  /* Emit the exception table. */\n \t  ptr = append_chunk (NULL, 2 + 8 * state->num_handlers, state);\n@@ -2966,7 +2973,7 @@ generate_classfile (clas, state)\n       methods_count++;\n       current_function_decl = save_function;\n     }\n-  ptr = methods_count_ptr;  PUT2 (methods_count);\n+  ptr = methods_count_ptr;  UNSAFE_PUT2 (methods_count);\n \n   source_file = DECL_SOURCE_FILE (TYPE_NAME (clas));\n   for (ptr = source_file;  ;  ptr++)"}]}