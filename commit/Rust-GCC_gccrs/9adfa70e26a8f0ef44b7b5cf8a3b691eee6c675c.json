{"sha": "9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkZmE3MGUyNmE4ZjBlZjQ0YjdiNWNmOGEzYjY5MWVlZTZjNjc1Yw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-11-04T14:43:45Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-11-04T14:43:45Z"}, "message": "re PR fortran/10220 (attribute DW_AT_calling_convention not correct for fortran)\n\n\tPR fortran/10220\n\t* dwarf2out.c (add_calling_convention_attribute): Change\n\tsecond argument. Set calling convention to DW_CC_program for\n\tFortran main program.\n\t(gen_subprogram_die): Adjust to new prototype for\n\tadd_calling_convention_attribute.\n\nFrom-SVN: r129882", "tree": {"sha": "021bbd906c3efb7ecedf4eb57113f8bbb34284f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021bbd906c3efb7ecedf4eb57113f8bbb34284f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e67e4462707e21015bc8b874f418d8343a5dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e67e4462707e21015bc8b874f418d8343a5dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e67e4462707e21015bc8b874f418d8343a5dc5"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "300e929baa7806ccc535b48ab36bffb5d85491be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c", "patch": "@@ -1,3 +1,12 @@\n+2007-11-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/10220\n+\t* dwarf2out.c (add_calling_convention_attribute): Change\n+\tsecond argument. Set calling convention to DW_CC_program for\n+\tFortran main program.\n+\t(gen_subprogram_die): Adjust to new prototype for\n+\tadd_calling_convention_attribute.\n+\n 2007-11-03  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/33987"}, {"sha": "f725a877377a960eac5d485595d05b2538db2499", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9adfa70e26a8f0ef44b7b5cf8a3b691eee6c675c", "patch": "@@ -11356,7 +11356,8 @@ add_name_and_src_coords_attributes (dw_die_ref die, tree decl)\n \t  && TREE_PUBLIC (decl)\n \t  && DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl)\n \t  && !DECL_ABSTRACT (decl)\n-\t  && !(TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl)))\n+\t  && !(TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n+\t  && !is_fortran ())\n \tadd_AT_string (die, DW_AT_MIPS_linkage_name,\n \t\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n     }\n@@ -11513,11 +11514,20 @@ add_type_attribute (dw_die_ref object_die, tree type, int decl_const,\n /* Given an object die, add the calling convention attribute for the\n    function call type.  */\n static void\n-add_calling_convention_attribute (dw_die_ref subr_die, tree type)\n+add_calling_convention_attribute (dw_die_ref subr_die, tree decl)\n {\n   enum dwarf_calling_convention value = DW_CC_normal;\n \n-  value = targetm.dwarf_calling_convention (type);\n+  value = targetm.dwarf_calling_convention (TREE_TYPE (decl));\n+\n+  /* DWARF doesn't provide a way to identify a program's source-level\n+     entry point.  DW_AT_calling_convention attributes are only meant\n+     to describe functions' calling conventions.  However, lacking a\n+     better way to signal the Fortran main program, we use this for the\n+     time being, following existing custom.  */\n+  if (is_fortran ()\n+      && !strcmp (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), \"MAIN__\"))\n+    value = DW_CC_program;\n \n   /* Only add the attribute if the backend requests it, and\n      is not DW_CC_normal.  */\n@@ -12370,7 +12380,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n #endif\n     }\n   /* Add the calling convention attribute if requested.  */\n-  add_calling_convention_attribute (subr_die, TREE_TYPE (decl));\n+  add_calling_convention_attribute (subr_die, decl);\n \n }\n "}]}