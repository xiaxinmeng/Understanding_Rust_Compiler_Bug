{"sha": "8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFkM2ZjNmNhNDZjNjAzZDljM2VmZThlNmQ0YThmMmZmMWE4OTNhNA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-09-03T20:43:49Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-09-03T20:43:49Z"}, "message": "sra: Avoid SRAing if there is an aout-of-bounds access (PR 96820)\n\nThe testcase causes and ICE in the SRA verifier on x86_64 when\ncompiling with -m32 because build_user_friendly_ref_for_offset looks\nat an out-of-bounds array_ref within an array_ref which accesses an\noffset which does not fit into a signed 32bit integer and turns it\ninto an array-ref with a negative index.\n\nThe best thing is probably to bail out early when encountering an out\nof bounds access to a local stack-allocated aggregate (and let the DSE\njust delete such statements) which is what the patch does.\n\nI also glanced over to the initial candidate vetting routine to make\nsure the size would fit into HWI and noticed that it uses unsigned\nvariants whereas the rest of SRA operates on signed offsets and\nsizes (because get_ref_and_extent does) and so changed that for the\nsake of consistency.  These ancient checks operate on sizes of types\nas opposed to DECLs but I hope that any issues potentially arising\nfrom that are basically hypothetical.\n\ngcc/ChangeLog:\n\n2020-08-28  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/96820\n\t* tree-sra.c (create_access): Disqualify candidates with accesses\n\tbeyond the end of the original aggregate.\n\t(maybe_add_sra_candidate): Check that candidate type size fits\n\tsigned uhwi for the sake of consistency.\n\ngcc/testsuite/ChangeLog:\n\n2020-08-28  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/96820\n\t* gcc.dg/tree-ssa/pr96820.c: New test.", "tree": {"sha": "e98cc27d06a6779873ad9b689b774f28378975d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e98cc27d06a6779873ad9b689b774f28378975d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8f3474ff81b07fd2e758337957711db17eb801e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f3474ff81b07fd2e758337957711db17eb801e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8f3474ff81b07fd2e758337957711db17eb801e"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "f5c2195f310910f2d669366d7e1ec64df97cd098", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96820.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96820.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96820.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96820.c?ref=8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+struct a {\n+  int b;\n+};\n+int main() {\n+  struct a d[][6] = {4};\n+  struct a e;\n+  d[1955249013][1955249013] = e;\n+  return e.b;\n+}"}, {"sha": "98a6cacbe2ab7575603e221aa09c0854834c8a47", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=8ad3fc6ca46c603d9c3efe8e6d4a8f2ff1a893a4", "patch": "@@ -941,6 +941,11 @@ create_access (tree expr, gimple *stmt, bool write)\n       disqualify_candidate (base, \"Encountered an unconstrained access.\");\n       return NULL;\n     }\n+  if (offset + size > tree_to_shwi (DECL_SIZE (base)))\n+    {\n+      disqualify_candidate (base, \"Encountered an access beyond the base.\");\n+      return NULL;\n+    }\n \n   access = create_access_1 (base, offset, size);\n   access->expr = expr;\n@@ -1880,12 +1885,12 @@ maybe_add_sra_candidate (tree var)\n       reject (var, \"has incomplete type\");\n       return false;\n     }\n-  if (!tree_fits_uhwi_p (TYPE_SIZE (type)))\n+  if (!tree_fits_shwi_p (TYPE_SIZE (type)))\n     {\n       reject (var, \"type size not fixed\");\n       return false;\n     }\n-  if (tree_to_uhwi (TYPE_SIZE (type)) == 0)\n+  if (tree_to_shwi (TYPE_SIZE (type)) == 0)\n     {\n       reject (var, \"type size is zero\");\n       return false;"}]}