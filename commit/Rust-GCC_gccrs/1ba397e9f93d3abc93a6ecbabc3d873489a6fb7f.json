{"sha": "1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f", "node_id": "C_kwDOANBUbNoAKDFiYTM5N2U5ZjkzZDNhYmM5M2E2ZWNiYWJjM2Q4NzM0ODlhNmZiN2Y", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-22T23:40:27Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-25T15:15:51Z"}, "message": "c++: __builtin_shufflevector with value-dep expr [PR105353]\n\nHere we issue an error from c_build_shufflevector while parsing a template\nbecause it got a TEMPLATE_PARM_INDEX, but this function expects INTEGER_CSTs\n(except the first two arguments).  It checks if any of the arguments are\ntype-dependent, if so, we leave the processing for later, but it should\nalso check value-dependency for the 3rd+ arguments, so as to avoid the\nproblem above.\n\nThis is not a regression -- __builtin_shufflevector was introduced in\nGCC 12, but it looks safe enough.\n\n\tPR c++/105353\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (build_x_shufflevector): Use\n\tinstantiation_dependent_expression_p except for the first two\n\targuments.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/builtin-shufflevector-3.C: New test.", "tree": {"sha": "e5bad1b6098fc5195d4ec9e3938a1d3c70f7a45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5bad1b6098fc5195d4ec9e3938a1d3c70f7a45c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235f88dbc3494c49e0f361a5a3f78491f72ff47c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235f88dbc3494c49e0f361a5a3f78491f72ff47c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235f88dbc3494c49e0f361a5a3f78491f72ff47c"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "0da6f2485d02d19c77ab2f75404a0a7d54d3d136", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f", "patch": "@@ -6315,7 +6315,9 @@ build_x_shufflevector (location_t loc, vec<tree, va_gc> *args,\n   if (processing_template_decl)\n     {\n       for (unsigned i = 0; i < args->length (); ++i)\n-\tif (type_dependent_expression_p ((*args)[i]))\n+\tif (i <= 1\n+\t    ? type_dependent_expression_p ((*args)[i])\n+\t    : instantiation_dependent_expression_p ((*args)[i]))\n \t  {\n \t    tree exp = build_min_nt_call_vec (NULL, args);\n \t    CALL_EXPR_IFN (exp) = IFN_SHUFFLEVECTOR;"}, {"sha": "0f3cbbee563a4e471f83b285183aa3e0e8ff65ec", "filename": "gcc/testsuite/g++.dg/ext/builtin-shufflevector-3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-3.C?ref=1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/105353\n+// { dg-do compile { target c++17 } }\n+// { dg-additional-options \"-Wno-psabi\" }\n+\n+typedef unsigned char Simd128U8VectT __attribute__((__vector_size__(16)));\n+\n+template<int ShuffleIndex>\n+static inline Simd128U8VectT ShufFunc(Simd128U8VectT vect) noexcept {\n+    if constexpr(unsigned(ShuffleIndex) >= 16)\n+        return Simd128U8VectT { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+    else if constexpr(ShuffleIndex == 0)\n+        return vect;\n+    else\n+        return __builtin_shufflevector(vect, vect, ShuffleIndex, ShuffleIndex + 1,\n+            ShuffleIndex + 2, ShuffleIndex + 3, ShuffleIndex + 4, ShuffleIndex + 5,\n+            ShuffleIndex + 6, ShuffleIndex + 7, ShuffleIndex + 8, ShuffleIndex + 9,\n+            ShuffleIndex + 10, ShuffleIndex + 11, ShuffleIndex + 12, ShuffleIndex + 13,\n+            ShuffleIndex + 14, ShuffleIndex + 15);\n+}\n+\n+auto func1(Simd128U8VectT vect) noexcept {\n+    return ShufFunc<5>(vect);\n+}"}]}