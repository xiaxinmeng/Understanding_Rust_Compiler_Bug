{"sha": "7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlZTk2MzcwY2Y2MjRkYmRhODFmY2QzY2QzMmRkYjQ4YTJmYzNkMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-10T15:05:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-10T15:05:40Z"}, "message": "[AArch64] Tighten mode checks in aarch64_builtin_vectorized_function\n\naarch64_builtin_vectorized_function checked vectors based on the\nnumber of elements and the element mode.  This doesn't interact\nwell with fixed-length 128-bit SVE, where SVE modes can have those\nsame properties.  (And we can't just use the built-ins for SVE because\nthe types use a different ABI.  SVE handles this kind of thing using\noptabs instead.)\n\n2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_builtin_vectorized_function): Check for specific vector modes,\n\trather than checking the number of elements and the element mode.\n\nFrom-SVN: r280114", "tree": {"sha": "8b555486f4a8f943cacfa283a8a8a88dada8d7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b555486f4a8f943cacfa283a8a8a88dada8d7b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d29c7f605fc6b531eaf351bf5909e7c551fc6b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29c7f605fc6b531eaf351bf5909e7c551fc6b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29c7f605fc6b531eaf351bf5909e7c551fc6b9e"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "126c6eba8c23d3bb9516dd3164e551e732e0c84b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3", "patch": "@@ -1,3 +1,9 @@\n+2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_builtin_vectorized_function): Check for specific vector modes,\n+\trather than checking the number of elements and the element mode.\n+\n 2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use"}, {"sha": "33d4c31ac6a02e0dc6a9460ff08eff8cfbcd1576", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=7cee96370cf624dbda81fcd3cd32ddb48a2fc3d3", "patch": "@@ -1942,17 +1942,13 @@ aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t\t\t\t     tree type_in)\n {\n   machine_mode in_mode, out_mode;\n-  unsigned HOST_WIDE_INT in_n, out_n;\n \n   if (TREE_CODE (type_out) != VECTOR_TYPE\n       || TREE_CODE (type_in) != VECTOR_TYPE)\n     return NULL_TREE;\n \n-  out_mode = TYPE_MODE (TREE_TYPE (type_out));\n-  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n-  if (!TYPE_VECTOR_SUBPARTS (type_out).is_constant (&out_n)\n-      || !TYPE_VECTOR_SUBPARTS (type_in).is_constant (&in_n))\n-    return NULL_TREE;\n+  out_mode = TYPE_MODE (type_out);\n+  in_mode = TYPE_MODE (type_in);\n \n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) 1\n@@ -1968,8 +1964,7 @@ aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n     {\n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n-  (out_mode == N##Fmode && out_n == C \\\n-   && in_mode == N##Fmode && in_n == C)\n+  (out_mode == V##C##N##Fmode && in_mode == V##C##N##Fmode)\n     CASE_CFN_FLOOR:\n       return AARCH64_FIND_FRINT_VARIANT (floor);\n     CASE_CFN_CEIL:\n@@ -1984,8 +1979,7 @@ aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n       return AARCH64_FIND_FRINT_VARIANT (sqrt);\n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n-  (out_mode == SImode && out_n == C \\\n-   && in_mode == N##Imode && in_n == C)\n+  (out_mode == V##C##SImode && in_mode == V##C##N##Imode)\n     CASE_CFN_CLZ:\n       {\n \tif (AARCH64_CHECK_BUILTIN_MODE (4, S))\n@@ -2002,8 +1996,7 @@ aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n       }\n #undef AARCH64_CHECK_BUILTIN_MODE\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n-  (out_mode == N##Imode && out_n == C \\\n-   && in_mode == N##Fmode && in_n == C)\n+  (out_mode == V##C##N##Imode && in_mode == V##C##N##Fmode)\n     CASE_CFN_IFLOOR:\n     CASE_CFN_LFLOOR:\n     CASE_CFN_LLFLOOR:"}]}