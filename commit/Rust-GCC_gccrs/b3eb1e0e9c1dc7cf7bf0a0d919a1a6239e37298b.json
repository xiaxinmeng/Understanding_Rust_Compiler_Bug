{"sha": "b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNlYjFlMGU5YzFkYzdjZjdiZjBhMGQ5MTlhMWE2MjM5ZTM3Mjk4Yg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-07-12T15:11:11Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-07-12T15:11:11Z"}, "message": "re PR fortran/28163 (Calling libgfortran's copy_string is inefficient)\n\n\tPR fortran/28163\n\n\t* trans-expr.c (gfc_trans_string_copy): Generate inline code\n\tto perform string copying instead of calling a library function.\n\t* trans-decl.c (gfc_build_intrinsic_function_decls): Don't build\n\tdecl for copy_string.\n\t* trans.h (gfor_fndecl_copy_string): Remove prototype.\n\n\t* intrinsics/string_intrinsics.c (copy_string): Remove function.\n\nFrom-SVN: r115372", "tree": {"sha": "72011c46efd76d2283de727ac46c303a3a63e36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72011c46efd76d2283de727ac46c303a3a63e36b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e49d96406fc14662840eaf7d82b2bcbbbccab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e49d96406fc14662840eaf7d82b2bcbbbccab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e49d96406fc14662840eaf7d82b2bcbbbccab2"}], "stats": {"total": 112, "additions": 74, "deletions": 38}, "files": [{"sha": "89497e4c00abeeb056f1c35c846c90b3718ca561", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "patch": "@@ -1,3 +1,12 @@\n+2006-07-12  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/28163\n+\t* trans-expr.c (gfc_trans_string_copy): Generate inline code\n+\tto perform string copying instead of calling a library function.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls): Don't build\n+\tdecl for copy_string.\n+\t* trans.h (gfor_fndecl_copy_string): Remove prototype.\n+\n 2006-07-11  Feng Wang  <fengwang@nudt.edu.cn>\n \n \tPR fortran/28213"}, {"sha": "7398e16423763ac945ea31ec6b79eec522b95a48", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "patch": "@@ -121,7 +121,6 @@ tree gfor_fndecl_math_exponent16;\n \n /* String functions.  */\n \n-tree gfor_fndecl_copy_string;\n tree gfor_fndecl_compare_string;\n tree gfor_fndecl_concat_string;\n tree gfor_fndecl_string_len_trim;\n@@ -1938,13 +1937,6 @@ gfc_build_intrinsic_function_decls (void)\n   tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n \n   /* String functions.  */\n-  gfor_fndecl_copy_string =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"copy_string\")),\n-\t\t\t\t     void_type_node,\n-\t\t\t\t     4,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node,\n-\t\t\t\t     gfc_charlen_type_node, pchar_type_node);\n-\n   gfor_fndecl_compare_string =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"compare_string\")),\n \t\t\t\t     gfc_int4_type_node,"}, {"sha": "5c396ef7d64889936a053f01a7a29e07684a0fd3", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"toplev.h\"\n #include \"real.h\"\n #include \"tree-gimple.h\"\n+#include \"langhooks.h\"\n #include \"flags.h\"\n #include \"gfortran.h\"\n #include \"trans.h\"\n@@ -2233,6 +2234,11 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlen, tree dest,\n   tree dsc;\n   tree ssc;\n   tree cond;\n+  tree cond2;\n+  tree tmp2;\n+  tree tmp3;\n+  tree tmp4;\n+  stmtblock_t tempblock;\n \n   /* Deal with single character specially.  */\n   dsc = gfc_to_single_character (dlen, dest);\n@@ -2243,15 +2249,63 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlen, tree dest,\n       return;\n     }\n \n+  /* Do nothing if the destination length is zero.  */\n   cond = fold_build2 (GT_EXPR, boolean_type_node, dlen,\n \t\t      build_int_cst (gfc_charlen_type_node, 0));\n \n-  tmp = NULL_TREE;\n-  tmp = gfc_chainon_list (tmp, dlen);\n-  tmp = gfc_chainon_list (tmp, dest);\n-  tmp = gfc_chainon_list (tmp, slen);\n-  tmp = gfc_chainon_list (tmp, src);\n-  tmp = build_function_call_expr (gfor_fndecl_copy_string, tmp);\n+  /* The following code was previously in _gfortran_copy_string:\n+\n+       // The two strings may overlap so we use memmove.\n+       void\n+       copy_string (GFC_INTEGER_4 destlen, char * dest,\n+                    GFC_INTEGER_4 srclen, const char * src)\n+       {\n+         if (srclen >= destlen)\n+           {\n+             // This will truncate if too long.\n+             memmove (dest, src, destlen);\n+           }\n+         else\n+           {\n+             memmove (dest, src, srclen);\n+             // Pad with spaces.\n+             memset (&dest[srclen], ' ', destlen - srclen);\n+           }\n+       }\n+\n+     We're now doing it here for better optimization, but the logic\n+     is the same.  */\n+  \n+  /* Truncate string if source is too long.  */\n+  cond2 = fold_build2 (GE_EXPR, boolean_type_node, slen, dlen);\n+  tmp2 = gfc_chainon_list (NULL_TREE, dest);\n+  tmp2 = gfc_chainon_list (tmp2, src);\n+  tmp2 = gfc_chainon_list (tmp2, dlen);\n+  tmp2 = build_function_call_expr (built_in_decls[BUILT_IN_MEMMOVE], tmp2);\n+\n+  /* Else copy and pad with spaces.  */\n+  tmp3 = gfc_chainon_list (NULL_TREE, dest);\n+  tmp3 = gfc_chainon_list (tmp3, src);\n+  tmp3 = gfc_chainon_list (tmp3, slen);\n+  tmp3 = build_function_call_expr (built_in_decls[BUILT_IN_MEMMOVE], tmp3);\n+\n+  tmp4 = fold_build2 (PLUS_EXPR, pchar_type_node, dest,\n+\t\t      fold_convert (pchar_type_node, slen));\n+  tmp4 = gfc_chainon_list (NULL_TREE, tmp4);\n+  tmp4 = gfc_chainon_list (tmp4, build_int_cst\n+\t\t\t\t   (gfc_get_int_type (gfc_c_int_kind),\n+\t\t\t\t    lang_hooks.to_target_charset (' ')));\n+  tmp4 = gfc_chainon_list (tmp4, fold_build2 (MINUS_EXPR, TREE_TYPE(dlen),\n+\t\t\t\t\t      dlen, slen));\n+  tmp4 = build_function_call_expr (built_in_decls[BUILT_IN_MEMSET], tmp4);\n+\n+  gfc_init_block (&tempblock);\n+  gfc_add_expr_to_block (&tempblock, tmp3);\n+  gfc_add_expr_to_block (&tempblock, tmp4);\n+  tmp3 = gfc_finish_block (&tempblock);\n+\n+  /* The whole copy_string function is there.  */\n+  tmp = fold_build3 (COND_EXPR, void_type_node, cond2, tmp2, tmp3);\n   tmp = fold_build3 (COND_EXPR, void_type_node, cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (block, tmp);\n }"}, {"sha": "31d525d714d5c2ff29f2f663cd0b0bd1f32b2f5e", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "patch": "@@ -508,7 +508,6 @@ extern GTY(()) tree gfor_fndecl_math_exponent10;\n extern GTY(()) tree gfor_fndecl_math_exponent16;\n \n /* String functions.  */\n-extern GTY(()) tree gfor_fndecl_copy_string;\n extern GTY(()) tree gfor_fndecl_compare_string;\n extern GTY(()) tree gfor_fndecl_concat_string;\n extern GTY(()) tree gfor_fndecl_string_len_trim;"}, {"sha": "b4478b43e9fc6e5a27e40179ea0bc59aaddf78ae", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "patch": "@@ -1,3 +1,8 @@\n+2006-07-12  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/28163\n+\t* intrinsics/string_intrinsics.c (copy_string): Remove function.\n+\n 2006-07-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* intrinsics/date_and_time.c (itime0,idate0,itime_i4,itime_i8,"}, {"sha": "fdaddef33271418488730d1eb54b1dff80e0c5d4", "filename": "libgfortran/intrinsics/string_intrinsics.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics.c?ref=b3eb1e0e9c1dc7cf7bf0a0d919a1a6239e37298b", "patch": "@@ -44,9 +44,6 @@ Boston, MA 02110-1301, USA.  */\n \n /* String functions.  */\n \n-extern void copy_string (GFC_INTEGER_4, char *, GFC_INTEGER_4, const char *);\n-export_proto(copy_string);\n-\n extern void concat_string (GFC_INTEGER_4, char *,\n \t\t\t   GFC_INTEGER_4, const char *,\n \t\t\t   GFC_INTEGER_4, const char *);\n@@ -79,26 +76,6 @@ export_proto(string_trim);\n extern void string_repeat (char *, GFC_INTEGER_4, const char *, GFC_INTEGER_4);\n export_proto(string_repeat);\n \n-/* The two areas may overlap so we use memmove.  */\n-\n-void\n-copy_string (GFC_INTEGER_4 destlen, char * dest,\n-\t     GFC_INTEGER_4 srclen, const char * src)\n-{\n-  if (srclen >= destlen)\n-    {\n-      /* This will truncate if too long.  */\n-      memmove (dest, src, destlen);\n-    }\n-  else\n-    {\n-      memmove (dest, src, srclen);\n-      /* Pad with spaces.  */\n-      memset (&dest[srclen], ' ', destlen - srclen);\n-    }\n-}\n-\n-\n /* Strings of unequal length are extended with pad characters.  */\n \n GFC_INTEGER_4"}]}