{"sha": "7e83607907151d5fbb3d2a7bceb7dcc6125c6c15", "node_id": "C_kwDOANBUbNoAKDdlODM2MDc5MDcxNTFkNWZiYjNkMmE3YmNlYjdkY2M2MTI1YzZjMTU", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-01-31T18:28:12Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-01T14:55:48Z"}, "message": "rs6000: Don't #ifdef \"short\" built-in names\n\nIt was recently pointed out that we get anomalous behavior when using\n__attribute__((target)) to select a CPU.  As an example, when building for\n-mcpu=power8 but using __attribute__((target(\"mcpu=power10\")), it is legal\nto call __builtin_vec_mod, but not vec_mod, even though these are\nequivalent.  This is because the equivalence is established with a #define\nthat is guarded by #ifdef _ARCH_PWR10.\n\nThis goofy behavior occurs with both the old builtins support and the\nnew.  One of the goals of the new builtins support was to make sure all\nappropriate interfaces are available using __attribute__((target)), so I\nfailed in this respect.  This patch corrects the problem by removing the\nifdef.  Note that in a few cases we use an ifdef in a way that can't be\noverridden by __attribute__((target)), and we need to keep those.  For\nexample, #ifdef __PPU__ is still appropriate.\n\n2022-01-06  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-overload.def (VEC_ABSD): Remove #ifdef token.\n\t(VEC_BLENDV): Likewise.\n\t(VEC_BPERM): Likewise.\n\t(VEC_CFUGE): Likewise.\n\t(VEC_CIPHER_BE): Likewise.\n\t(VEC_CIPHERLAST_BE): Likewise.\n\t(VEC_CLRL): Likewise.\n\t(VEC_CLRR): Likewise.\n\t(VEC_CMPNEZ): Likewise.\n\t(VEC_CNTLZ): Likewise.\n\t(VEC_CNTLZM): Likewise.\n\t(VEC_CNTTZM): Likewise.\n\t(VEC_CNTLZ_LSBB): Likewise.\n\t(VEC_CNTM): Likewise.\n\t(VEC_CNTTZ): Likewise.\n\t(VEC_CNTTZ_LSBB): Likewise.\n\t(VEC_CONVERT_4F32_8F16): Likewise.\n\t(VEC_DIV): Likewise.\n\t(VEC_DIVE): Likewise.\n\t(VEC_EQV): Likewise.\n\t(VEC_EXPANDM): Likewise.\n\t(VEC_EXTRACT_FP_FROM_SHORTH): Likewise.\n\t(VEC_EXTRACT_FP_FROM_SHORTL): Likewise.\n\t(VEC_EXTRACTH): Likewise.\n\t(VEC_EXTRACTL): Likewise.\n\t(VEC_EXTRACTM): Likewise.\n\t(VEC_EXTRACT4B): Likewise.\n\t(VEC_EXTULX): Likewise.\n\t(VEC_EXTURX): Likewise.\n\t(VEC_FIRSTMATCHINDEX): Likewise.\n\t(VEC_FIRSTMACHOREOSINDEX): Likewise.\n\t(VEC_FIRSTMISMATCHINDEX): Likewise.\n\t(VEC_FIRSTMISMATCHOREOSINDEX): Likewise.\n\t(VEC_GB): Likewise.\n\t(VEC_GENBM): Likewise.\n\t(VEC_GENHM): Likewise.\n\t(VEC_GENWM): Likewise.\n\t(VEC_GENDM): Likewise.\n\t(VEC_GENQM): Likewise.\n\t(VEC_GENPCVM): Likewise.\n\t(VEC_GNB): Likewise.\n\t(VEC_INSERTH): Likewise.\n\t(VEC_INSERTL): Likewise.\n\t(VEC_INSERT4B): Likewise.\n\t(VEC_LXVL): Likewise.\n\t(VEC_MERGEE): Likewise.\n\t(VEC_MERGEO): Likewise.\n\t(VEC_MOD): Likewise.\n\t(VEC_MSUB): Likewise.\n\t(VEC_MULH): Likewise.\n\t(VEC_NAND): Likewise.\n\t(VEC_NCIPHER_BE): Likewise.\n\t(VEC_NCIPHERLAST_BE): Likewise.\n\t(VEC_NEARBYINT): Likewise.\n\t(VEC_NMADD): Likewise.\n\t(VEC_ORC): Likewise.\n\t(VEC_PDEP): Likewise.\n\t(VEC_PERMX): Likewise.\n\t(VEC_PEXT): Likewise.\n\t(VEC_POPCNT): Likewise.\n\t(VEC_PARITY_LSBB): Likewise.\n\t(VEC_REPLACE_ELT): Likewise.\n\t(VEC_REPLACE_UN): Likewise.\n\t(VEC_REVB): Likewise.\n\t(VEC_RINT): Likewise.\n\t(VEC_RLMI): Likewise.\n\t(VEC_RLNM): Likewise.\n\t(VEC_SBOX_BE): Likewise.\n\t(VEC_SIGNEXTI): Likewise.\n\t(VEC_SIGNEXTLL): Likewise.\n\t(VEC_SIGNEXTQ): Likewise.\n\t(VEC_SLDB): Likewise.\n\t(VEC_SLV): Likewise.\n\t(VEC_SPLATI): Likewise.\n\t(VEC_SPLATID): Likewise.\n\t(VEC_SPLATI_INS): Likewise.\n\t(VEC_SQRT): Likewise.\n\t(VEC_SRDB): Likewise.\n\t(VEC_SRV): Likewise.\n\t(VEC_STRIL): Likewise.\n\t(VEC_STRIL_P): Likewise.\n\t(VEC_STRIR): Likewise.\n\t(VEC_STRIR_P): Likewise.\n\t(VEC_STXVL): Likewise.\n\t(VEC_TERNARYLOGIC): Likewise.\n\t(VEC_TEST_LSBB_ALL_ONES): Likewise.\n\t(VEC_TEST_LSBB_ALL_ZEROS): Likewise.\n\t(VEC_VEE): Likewise.\n\t(VEC_VES): Likewise.\n\t(VEC_VIE): Likewise.\n\t(VEC_VPRTYB): Likewise.\n\t(VEC_VSCEEQ): Likewise.\n\t(VEC_VSCEGT): Likewise.\n\t(VEC_VSCELT): Likewise.\n\t(VEC_VSCEUO): Likewise.\n\t(VEC_VSEE): Likewise.\n\t(VEC_VSES): Likewise.\n\t(VEC_VSIE): Likewise.\n\t(VEC_VSTDC): Likewise.\n\t(VEC_VSTDCN): Likewise.\n\t(VEC_VTDC): Likewise.\n\t(VEC_XL): Likewise.\n\t(VEC_XL_BE): Likewise.\n\t(VEC_XL_LEN_R): Likewise.\n\t(VEC_XL_SEXT): Likewise.\n\t(VEC_XL_ZEXT): Likewise.\n\t(VEC_XST): Likewise.\n\t(VEC_XST_BE): Likewise.\n\t(VEC_XST_LEN_R): Likewise.\n\t(VEC_XST_TRUNC): Likewise.\n\t(VEC_XXPERMDI): Likewise.\n\t(VEC_XXSLDWI): Likewise.\n\t(VEC_TSTSFI_EQ_DD): Likewise.\n\t(VEC_TSTSFI_EQ_TD): Likewise.\n\t(VEC_TSTSFI_GT_DD): Likewise.\n\t(VEC_TSTSFI_GT_TD): Likewise.\n\t(VEC_TSTSFI_LT_DD): Likewise.\n\t(VEC_TSTSFI_LT_TD): Likewise.\n\t(VEC_TSTSFI_OV_DD): Likewise.\n\t(VEC_TSTSFI_OV_TD): Likewise.\n\t(VEC_VADDCUQ): Likewise.\n\t(VEC_VADDECUQ): Likewise.\n\t(VEC_VADDEUQM): Likewise.\n\t(VEC_VADDUDM): Likewise.\n\t(VEC_VADDUQM): Likewise.\n\t(VEC_VBPERMQ): Likewise.\n\t(VEC_VCLZB): Likewise.\n\t(VEC_VCLZD): Likewise.\n\t(VEC_VCLZH): Likewise.\n\t(VEC_VCLZW): Likewise.\n\t(VEC_VCTZB): Likewise.\n\t(VEC_VCTZD): Likewise.\n\t(VEC_VCTZH): Likewise.\n\t(VEC_VCTZW): Likewise.\n\t(VEC_VEEDP): Likewise.\n\t(VEC_VEESP): Likewise.\n\t(VEC_VESDP): Likewise.\n\t(VEC_VESSP): Likewise.\n\t(VEC_VIEDP): Likewise.\n\t(VEC_VIESP): Likewise.\n\t(VEC_VPKSDSS): Likewise.\n\t(VEC_VPKSDUS): Likewise.\n\t(VEC_VPKUDUM): Likewise.\n\t(VEC_VPKUDUS): Likewise.\n\t(VEC_VPOPCNT): Likewise.\n\t(VEC_VPOPCNTB): Likewise.\n\t(VEC_VPOPCNTD): Likewise.\n\t(VEC_VPOPCNTH): Likewise.\n\t(VEC_VPOPCNTW): Likewise.\n\t(VEC_VPRTYBD): Likewise.\n\t(VEC_VPRTYBQ): Likewise.\n\t(VEC_VPRTYBW): Likewise.\n\t(VEC_VRLD): Likewise.\n\t(VEC_VSLD): Likewise.\n\t(VEC_VSRAD): Likewise.\n\t(VEC_VSRD): Likewise.\n\t(VEC_VSTDCDP): Likewise.\n\t(VEC_VSTDCNDP): Likewise.\n\t(VEC_VSTDCNQP): Likewise.\n\t(VEC_VSTDCNSP): Likewise.\n\t(VEC_VSTDCQP): Likewise.\n\t(VEC_VSTDCSP): Likewise.\n\t(VEC_VSUBECUQ): Likewise.\n\t(VEC_VSUBEUQM): Likewise.\n\t(VEC_VSUBUDM): Likewise.\n\t(VEC_VSUBUQM): Likewise.\n\t(VEC_VTDCDP): Likewise.\n\t(VEC_VTDCSP): Likewise.\n\t(VEC_VUPKHSW): Likewise.\n\t(VEC_VUPKLSW): Likewise.", "tree": {"sha": "6815555932bd3f1b784de2176459b720541cf418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6815555932bd3f1b784de2176459b720541cf418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e83607907151d5fbb3d2a7bceb7dcc6125c6c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e83607907151d5fbb3d2a7bceb7dcc6125c6c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e83607907151d5fbb3d2a7bceb7dcc6125c6c15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e83607907151d5fbb3d2a7bceb7dcc6125c6c15/comments", "author": null, "committer": null, "parents": [{"sha": "b9ebf6c330e24e886e7ce148e8c680c3e06c24dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc"}], "stats": {"total": 344, "additions": 174, "deletions": 170}, "files": [{"sha": "cdc703e97642316d5ee77a067d6de5ea347e1efa", "filename": "gcc/config/rs6000/rs6000-overload.def", "status": "modified", "additions": 174, "deletions": 170, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e83607907151d5fbb3d2a7bceb7dcc6125c6c15/gcc%2Fconfig%2Frs6000%2Frs6000-overload.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e83607907151d5fbb3d2a7bceb7dcc6125c6c15/gcc%2Fconfig%2Frs6000%2Frs6000-overload.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-overload.def?ref=7e83607907151d5fbb3d2a7bceb7dcc6125c6c15", "patch": "@@ -34,6 +34,10 @@\n ; in rs6000-vecdefines.h.  If no #define is desired, the <abi-name> should\n ; be replaced with the token SKIP.\n ;\n+; The <ifdef> token should be used sparingly, because a #define can't be\n+; overridden by __attribute__((target)).  It is appropriate for cases\n+; where a target override isn't a possibility, like __PPU__.\n+;\n ; Each function entry has two lines.  The first line is a prototype line.\n ; See rs6000-builtin-new.def for a description of the prototype line.\n ; A prototype line in this file differs in that it doesn't have an\n@@ -205,7 +209,7 @@\n   vd __builtin_vec_abs (vd);\n     XVABSDP\n \n-[VEC_ABSD, vec_absd, __builtin_vec_vadu, _ARCH_PWR9]\n+[VEC_ABSD, vec_absd, __builtin_vec_vadu]\n   vuc __builtin_vec_vadu (vuc, vuc);\n     VADUB\n   vus __builtin_vec_vadu (vus, vus);\n@@ -503,7 +507,7 @@\n   vui __builtin_vec_avg (vui, vui);\n     VAVGUW\n \n-[VEC_BLENDV, vec_blendv, __builtin_vec_xxblend, _ARCH_PWR10]\n+[VEC_BLENDV, vec_blendv, __builtin_vec_xxblend]\n   vsc __builtin_vec_xxblend (vsc, vsc, vuc);\n     VXXBLEND_V16QI  VXXBLEND_VSC\n   vuc __builtin_vec_xxblend (vuc, vuc, vuc);\n@@ -525,7 +529,7 @@\n   vd __builtin_vec_xxblend (vd, vd, vull);\n     VXXBLEND_V2DF\n \n-[VEC_BPERM, vec_bperm, __builtin_vec_vbperm_api, _ARCH_PWR8]\n+[VEC_BPERM, vec_bperm, __builtin_vec_vbperm_api]\n   vull __builtin_vec_vbperm_api (vull, vuc);\n     VBPERMD  VBPERMD_VULL\n   vull __builtin_vec_vbperm_api (vuq, vuc);\n@@ -541,25 +545,25 @@\n   vd __builtin_vec_ceil (vd);\n     XVRDPIP\n \n-[VEC_CFUGE, vec_cfuge, __builtin_vec_cfuge, _ARCH_PWR10]\n+[VEC_CFUGE, vec_cfuge, __builtin_vec_cfuge]\n   vull __builtin_vec_cfuge (vull, vull);\n     VCFUGED\n \n-[VEC_CIPHER_BE, vec_cipher_be, __builtin_vec_vcipher_be, _ARCH_PWR8]\n+[VEC_CIPHER_BE, vec_cipher_be, __builtin_vec_vcipher_be]\n   vuc __builtin_vec_vcipher_be (vuc, vuc);\n     VCIPHER_BE\n \n-[VEC_CIPHERLAST_BE, vec_cipherlast_be, __builtin_vec_vcipherlast_be, _ARCH_PWR8]\n+[VEC_CIPHERLAST_BE, vec_cipherlast_be, __builtin_vec_vcipherlast_be]\n   vuc __builtin_vec_vcipherlast_be (vuc, vuc);\n     VCIPHERLAST_BE\n \n-[VEC_CLRL, vec_clrl, __builtin_vec_clrl, _ARCH_PWR10]\n+[VEC_CLRL, vec_clrl, __builtin_vec_clrl]\n   vsc __builtin_vec_clrl (vsc, unsigned int);\n     VCLRLB  VCLRLB_S\n   vuc __builtin_vec_clrl (vuc, unsigned int);\n     VCLRLB  VCLRLB_U\n \n-[VEC_CLRR, vec_clrr, __builtin_vec_clrr, _ARCH_PWR10]\n+[VEC_CLRR, vec_clrr, __builtin_vec_clrr]\n   vsc __builtin_vec_clrr (vsc, unsigned int);\n     VCLRRB  VCLRRB_S\n   vuc __builtin_vec_clrr (vuc, unsigned int);\n@@ -1026,7 +1030,7 @@\n   signed int __builtin_vec_vcmpne_p (signed int, vbll, vsll);\n     VCMPNED_P  VCMPNED_P_SB\n \n-[VEC_CMPNEZ, vec_cmpnez, __builtin_vec_vcmpnez, _ARCH_PWR9]\n+[VEC_CMPNEZ, vec_cmpnez, __builtin_vec_vcmpnez]\n   vbc __builtin_vec_cmpnez (vsc, vsc);\n     CMPNEZB  CMPNEZB_S\n   vbc __builtin_vec_cmpnez (vuc, vuc);\n@@ -1064,7 +1068,7 @@\n   signed int __builtin_byte_in_range (unsigned int, unsigned int);\n     CMPRB2\n \n-[VEC_CNTLZ, vec_cntlz, __builtin_vec_vclz, _ARCH_PWR8]\n+[VEC_CNTLZ, vec_cntlz, __builtin_vec_vclz]\n   vsc __builtin_vec_vclz (vsc);\n     VCLZB  VCLZB_S\n   vuc __builtin_vec_vclz (vuc);\n@@ -1082,15 +1086,15 @@\n   vull __builtin_vec_vclz (vull);\n     VCLZD  VCLZD_U\n \n-[VEC_CNTLZM, vec_cntlzm, __builtin_vec_vclzdm, _ARCH_PWR10]\n+[VEC_CNTLZM, vec_cntlzm, __builtin_vec_vclzdm]\n   vull __builtin_vec_vclzdm (vull, vull);\n     VCLZDM\n \n-[VEC_CNTTZM, vec_cnttzm, __builtin_vec_vctzdm, _ARCH_PWR10]\n+[VEC_CNTTZM, vec_cnttzm, __builtin_vec_vctzdm]\n   vull __builtin_vec_vctzdm (vull, vull);\n     VCTZDM\n \n-[VEC_CNTLZ_LSBB, vec_cntlz_lsbb, __builtin_vec_vclzlsbb, _ARCH_PWR9]\n+[VEC_CNTLZ_LSBB, vec_cntlz_lsbb, __builtin_vec_vclzlsbb]\n   signed int __builtin_vec_vclzlsbb (vsc);\n     VCLZLSBB_V16QI  VCLZLSBB_VSC\n   signed int __builtin_vec_vclzlsbb (vuc);\n@@ -1104,7 +1108,7 @@\n   signed int __builtin_vec_vclzlsbb (vui);\n     VCLZLSBB_V4SI  VCLZLSBB_VUI\n \n-[VEC_CNTM, vec_cntm, __builtin_vec_cntm, _ARCH_PWR10]\n+[VEC_CNTM, vec_cntm, __builtin_vec_cntm]\n   unsigned long long __builtin_vec_cntm (vuc, const int);\n     VCNTMBB\n   unsigned long long __builtin_vec_cntm (vus, const int);\n@@ -1114,7 +1118,7 @@\n   unsigned long long __builtin_vec_cntm (vull, const int);\n     VCNTMBD\n \n-[VEC_CNTTZ, vec_cnttz, __builtin_vec_vctz, _ARCH_PWR9]\n+[VEC_CNTTZ, vec_cnttz, __builtin_vec_vctz]\n   vsc __builtin_vec_vctz (vsc);\n     VCTZB  VCTZB_S\n   vuc __builtin_vec_vctz (vuc);\n@@ -1132,7 +1136,7 @@\n   vull __builtin_vec_vctz (vull);\n     VCTZD  VCTZD_U\n \n-[VEC_CNTTZ_LSBB, vec_cnttz_lsbb, __builtin_vec_vctzlsbb, _ARCH_PWR9]\n+[VEC_CNTTZ_LSBB, vec_cnttz_lsbb, __builtin_vec_vctzlsbb]\n   signed int __builtin_vec_vctzlsbb (vsc);\n     VCTZLSBB_V16QI  VCTZLSBB_VSC\n   signed int __builtin_vec_vctzlsbb (vuc);\n@@ -1150,7 +1154,7 @@\n   vus __builtin_vec_convert_4f32_8i16 (vf, vf);\n     CONVERT_4F32_8I16\n \n-[VEC_CONVERT_4F32_8F16, vec_pack_to_short_fp32, __builtin_vec_convert_4f32_8f16, _ARCH_PWR9]\n+[VEC_CONVERT_4F32_8F16, vec_pack_to_short_fp32, __builtin_vec_convert_4f32_8f16]\n   vus __builtin_vec_convert_4f32_8f16 (vf, vf);\n     CONVERT_4F32_8F16\n \n@@ -1182,7 +1186,7 @@\n   vull __builtin_vec_ctu (vd, const int);\n     XVCVDPUXDS_SCALE\n \n-[VEC_DIV, vec_div, __builtin_vec_div, __VSX__]\n+[VEC_DIV, vec_div, __builtin_vec_div]\n   vsi __builtin_vec_div (vsi, vsi);\n     VDIVSW\n   vui __builtin_vec_div (vui, vui);\n@@ -1200,7 +1204,7 @@\n   vd __builtin_vec_div (vd, vd);\n     XVDIVDP\n \n-[VEC_DIVE, vec_dive, __builtin_vec_dive, _ARCH_PWR10]\n+[VEC_DIVE, vec_dive, __builtin_vec_dive]\n   vsi __builtin_vec_dive (vsi, vsi);\n     VDIVESW\n   vui __builtin_vec_dive (vui, vui);\n@@ -1436,7 +1440,7 @@\n   void __builtin_vec_dstt (vf *, const int, const int);\n     DSTT  DSTT_VF\n \n-[VEC_EQV, vec_eqv, __builtin_vec_eqv, _ARCH_PWR8]\n+[VEC_EQV, vec_eqv, __builtin_vec_eqv]\n   vsc __builtin_vec_eqv (vsc, vsc);\n     EQV_V16QI\n   vuc __builtin_vec_eqv (vuc, vuc);\n@@ -1499,7 +1503,7 @@\n   vull __builtin_vec_eqv (vull, vbll);\n     EQV_V2DI_UNS  EQV_VULL_VBLL\n \n-[VEC_EXPANDM, vec_expandm, __builtin_vec_vexpandm, _ARCH_PWR10]\n+[VEC_EXPANDM, vec_expandm, __builtin_vec_vexpandm]\n   vuc __builtin_vec_vexpandm (vuc);\n     VEXPANDMB\n   vus __builtin_vec_vexpandm (vus);\n@@ -1524,15 +1528,15 @@\n   vsi __builtin_vec_extract (vsi, signed int);\n     VSPLTW  EXTRACT_FAKERY\n \n-[VEC_EXTRACT_FP_FROM_SHORTH, vec_extract_fp32_from_shorth, __builtin_vec_vextract_fp_from_shorth, _ARCH_PWR9]\n+[VEC_EXTRACT_FP_FROM_SHORTH, vec_extract_fp32_from_shorth, __builtin_vec_vextract_fp_from_shorth]\n   vf __builtin_vec_vextract_fp_from_shorth (vus);\n     VEXTRACT_FP_FROM_SHORTH\n \n-[VEC_EXTRACT_FP_FROM_SHORTL, vec_extract_fp32_from_shortl, __builtin_vec_vextract_fp_from_shortl, _ARCH_PWR9]\n+[VEC_EXTRACT_FP_FROM_SHORTL, vec_extract_fp32_from_shortl, __builtin_vec_vextract_fp_from_shortl]\n   vf __builtin_vec_vextract_fp_from_shortl (vus);\n     VEXTRACT_FP_FROM_SHORTL\n \n-[VEC_EXTRACTH, vec_extracth, __builtin_vec_extracth, _ARCH_PWR10]\n+[VEC_EXTRACTH, vec_extracth, __builtin_vec_extracth]\n   vull __builtin_vec_extracth (vuc, vuc, unsigned char);\n     VEXTRACTBR\n   vull __builtin_vec_extracth (vus, vus, unsigned char);\n@@ -1542,7 +1546,7 @@\n   vull __builtin_vec_extracth (vull, vull, unsigned char);\n     VEXTRACTDR\n \n-[VEC_EXTRACTL, vec_extractl, __builtin_vec_extractl, _ARCH_PWR10]\n+[VEC_EXTRACTL, vec_extractl, __builtin_vec_extractl]\n   vull __builtin_vec_extractl (vuc, vuc, unsigned char);\n     VEXTRACTBL\n   vull __builtin_vec_extractl (vus, vus, unsigned char);\n@@ -1552,7 +1556,7 @@\n   vull __builtin_vec_extractl (vull, vull, unsigned char);\n     VEXTRACTDL\n \n-[VEC_EXTRACTM, vec_extractm, __builtin_vec_vextractm, _ARCH_PWR10]\n+[VEC_EXTRACTM, vec_extractm, __builtin_vec_vextractm]\n   signed int __builtin_vec_vextractm (vuc);\n     VEXTRACTMB\n   signed int __builtin_vec_vextractm (vus);\n@@ -1564,11 +1568,11 @@\n   signed int __builtin_vec_vextractm (vuq);\n     VEXTRACTMQ\n \n-[VEC_EXTRACT4B, vec_extract4b, __builtin_vec_extract4b, _ARCH_PWR9]\n+[VEC_EXTRACT4B, vec_extract4b, __builtin_vec_extract4b]\n   vull __builtin_vec_extract4b (vuc, const int);\n     EXTRACT4B\n \n-[VEC_EXTULX, vec_xlx, __builtin_vec_vextulx, _ARCH_PWR9]\n+[VEC_EXTULX, vec_xlx, __builtin_vec_vextulx]\n   signed char __builtin_vec_vextulx (unsigned int, vsc);\n     VEXTUBLX  VEXTUBLX_S\n   unsigned char __builtin_vec_vextulx (unsigned int, vuc);\n@@ -1584,7 +1588,7 @@\n   float __builtin_vec_vextulx (unsigned int, vf);\n     VEXTUWLX  VEXTUWLX_F\n \n-[VEC_EXTURX, vec_xrx, __builtin_vec_vexturx, _ARCH_PWR9]\n+[VEC_EXTURX, vec_xrx, __builtin_vec_vexturx]\n   signed char __builtin_vec_vexturx (unsigned int, vsc);\n     VEXTUBRX  VEXTUBRX_S\n   unsigned char __builtin_vec_vexturx (unsigned int, vuc);\n@@ -1600,7 +1604,7 @@\n   float __builtin_vec_vexturx (unsigned int, vf);\n     VEXTUWRX  VEXTUWRX_F\n \n-[VEC_FIRSTMATCHINDEX, vec_first_match_index, __builtin_vec_first_match_index, _ARCH_PWR9]\n+[VEC_FIRSTMATCHINDEX, vec_first_match_index, __builtin_vec_first_match_index]\n   unsigned int __builtin_vec_first_match_index (vsc, vsc);\n     VFIRSTMATCHINDEX_V16QI FIRSTMATCHINDEX_VSC\n   unsigned int __builtin_vec_first_match_index (vuc, vuc);\n@@ -1614,7 +1618,7 @@\n   unsigned int __builtin_vec_first_match_index (vui, vui);\n     VFIRSTMATCHINDEX_V4SI FIRSTMATCHINDEX_VUI\n \n-[VEC_FIRSTMATCHOREOSINDEX, vec_first_match_or_eos_index, __builtin_vec_first_match_or_eos_index, _ARCH_PWR9]\n+[VEC_FIRSTMATCHOREOSINDEX, vec_first_match_or_eos_index, __builtin_vec_first_match_or_eos_index]\n   unsigned int __builtin_vec_first_match_or_eos_index (vsc, vsc);\n     VFIRSTMATCHOREOSINDEX_V16QI FIRSTMATCHOREOSINDEX_VSC\n   unsigned int __builtin_vec_first_match_or_eos_index (vuc, vuc);\n@@ -1628,7 +1632,7 @@\n   unsigned int __builtin_vec_first_match_or_eos_index (vui, vui);\n     VFIRSTMATCHOREOSINDEX_V4SI FIRSTMATCHOREOSINDEX_VUI\n \n-[VEC_FIRSTMISMATCHINDEX, vec_first_mismatch_index, __builtin_vec_first_mismatch_index, _ARCH_PWR9]\n+[VEC_FIRSTMISMATCHINDEX, vec_first_mismatch_index, __builtin_vec_first_mismatch_index]\n   unsigned int __builtin_vec_first_mismatch_index (vsc, vsc);\n     VFIRSTMISMATCHINDEX_V16QI FIRSTMISMATCHINDEX_VSC\n   unsigned int __builtin_vec_first_mismatch_index (vuc, vuc);\n@@ -1642,7 +1646,7 @@\n   unsigned int __builtin_vec_first_mismatch_index (vui, vui);\n     VFIRSTMISMATCHINDEX_V4SI FIRSTMISMATCHINDEX_VUI\n \n-[VEC_FIRSTMISMATCHOREOSINDEX, vec_first_mismatch_or_eos_index, __builtin_vec_first_mismatch_or_eos_index, _ARCH_PWR9]\n+[VEC_FIRSTMISMATCHOREOSINDEX, vec_first_mismatch_or_eos_index, __builtin_vec_first_mismatch_or_eos_index]\n   unsigned int __builtin_vec_first_mismatch_or_eos_index (vsc, vsc);\n     VFIRSTMISMATCHOREOSINDEX_V16QI FIRSTMISMATCHOREOSINDEX_VSC\n   unsigned int __builtin_vec_first_mismatch_or_eos_index (vuc, vuc);\n@@ -1692,33 +1696,33 @@\n   vd __builtin_vec_floor (vd);\n     XVRDPIM\n \n-[VEC_GB, vec_gb, __builtin_vec_vgbbd, _ARCH_PWR8]\n+[VEC_GB, vec_gb, __builtin_vec_vgbbd]\n   vsc __builtin_vec_vgbbd (vsc);\n     VGBBD  VGBBD_S\n   vuc __builtin_vec_vgbbd (vuc);\n     VGBBD  VGBBD_U\n \n-[VEC_GENBM, vec_genbm, __builtin_vec_mtvsrbm, _ARCH_PWR10]\n+[VEC_GENBM, vec_genbm, __builtin_vec_mtvsrbm]\n   vuc __builtin_vec_mtvsrbm (unsigned long long);\n     MTVSRBM\n \n-[VEC_GENHM, vec_genhm, __builtin_vec_mtvsrhm, _ARCH_PWR10]\n+[VEC_GENHM, vec_genhm, __builtin_vec_mtvsrhm]\n   vus __builtin_vec_mtvsrhm (unsigned long long);\n     MTVSRHM\n \n-[VEC_GENWM, vec_genwm, __builtin_vec_mtvsrwm, _ARCH_PWR10]\n+[VEC_GENWM, vec_genwm, __builtin_vec_mtvsrwm]\n   vui __builtin_vec_mtvsrwm (unsigned long long);\n     MTVSRWM\n \n-[VEC_GENDM, vec_gendm, __builtin_vec_mtvsrdm, _ARCH_PWR10]\n+[VEC_GENDM, vec_gendm, __builtin_vec_mtvsrdm]\n   vull __builtin_vec_mtvsrdm (unsigned long long);\n     MTVSRDM\n \n-[VEC_GENQM, vec_genqm, __builtin_vec_mtvsrqm, _ARCH_PWR10]\n+[VEC_GENQM, vec_genqm, __builtin_vec_mtvsrqm]\n   vuq __builtin_vec_mtvsrqm (unsigned long long);\n     MTVSRQM\n \n-[VEC_GENPCVM, vec_genpcvm, __builtin_vec_xxgenpcvm, _ARCH_PWR10]\n+[VEC_GENPCVM, vec_genpcvm, __builtin_vec_xxgenpcvm]\n   vuc __builtin_vec_xxgenpcvm (vuc, const int);\n     XXGENPCVM_V16QI\n   vus __builtin_vec_xxgenpcvm (vus, const int);\n@@ -1728,7 +1732,7 @@\n   vull __builtin_vec_xxgenpcvm (vull, const int);\n     XXGENPCVM_V2DI\n \n-[VEC_GNB, vec_gnb, __builtin_vec_gnb, _ARCH_PWR10]\n+[VEC_GNB, vec_gnb, __builtin_vec_gnb]\n   unsigned long long __builtin_vec_gnb (vuq, const int);\n     VGNB\n \n@@ -1740,7 +1744,7 @@\n   vsi __builtin_vec_insert (vsi, vsi, signed int);\n     XXPERMDI_4SI  INSERT_FAKERY\n \n-[VEC_INSERTH, vec_inserth, __builtin_vec_inserth, _ARCH_PWR10]\n+[VEC_INSERTH, vec_inserth, __builtin_vec_inserth]\n   vuc __builtin_vec_inserth (unsigned char, vuc, unsigned int);\n     VINSERTGPRBR\n   vuc __builtin_vec_inserth (vuc, vuc, unsigned int);\n@@ -1756,7 +1760,7 @@\n   vull __builtin_vec_inserth (unsigned long long, vull, unsigned int);\n     VINSERTGPRDR\n \n-[VEC_INSERTL, vec_insertl, __builtin_vec_insertl, _ARCH_PWR10]\n+[VEC_INSERTL, vec_insertl, __builtin_vec_insertl]\n   vuc __builtin_vec_insertl (unsigned char, vuc, unsigned int);\n     VINSERTGPRBL\n   vuc __builtin_vec_insertl (vuc, vuc, unsigned int);\n@@ -1772,7 +1776,7 @@\n   vull __builtin_vec_insertl (unsigned long long, vull, unsigned int);\n     VINSERTGPRDL\n \n-[VEC_INSERT4B, vec_insert4b, __builtin_vec_insert4b, _ARCH_PWR9]\n+[VEC_INSERT4B, vec_insert4b, __builtin_vec_insert4b]\n   vuc __builtin_vec_insert4b (vsi, vuc, const int);\n     INSERT4B  INSERT4B_S\n   vuc __builtin_vec_insert4b (vui, vuc, const int);\n@@ -2128,7 +2132,7 @@\n   vuc __builtin_vec_lvsr (signed long, const double *);\n     LVSR  LVSR_D\n \n-[VEC_LXVL, vec_xl_len, __builtin_vec_lxvl, _ARCH_PPC64_PWR9]\n+[VEC_LXVL, vec_xl_len, __builtin_vec_lxvl]\n   vsc __builtin_vec_lxvl (const signed char *, unsigned int);\n     LXVL  LXVL_VSC\n   vuc __builtin_vec_lxvl (const unsigned char *, unsigned int);\n@@ -2227,7 +2231,7 @@\n   vull __builtin_vec_max (vbll, vull);\n     VMAXUD  VMAXUD_BU\n \n-[VEC_MERGEE, vec_mergee, __builtin_vec_vmrgew, _ARCH_PWR8]\n+[VEC_MERGEE, vec_mergee, __builtin_vec_vmrgew]\n   vsi __builtin_vec_vmrgew (vsi, vsi);\n     VMRGEW_V4SI  VMRGEW_VSI\n   vui __builtin_vec_vmrgew (vui, vui);\n@@ -2327,7 +2331,7 @@\n   vull __builtin_vec_mergel (vbll, vull);\n     VEC_MERGEL_V2DI  VEC_MERGEL_VBLL_VULL\n \n-[VEC_MERGEO, vec_mergeo, __builtin_vec_vmrgow, _ARCH_PWR8]\n+[VEC_MERGEO, vec_mergeo, __builtin_vec_vmrgow]\n   vsi __builtin_vec_vmrgow (vsi, vsi);\n     VMRGOW_V4SI  VMRGOW_VSI\n   vui __builtin_vec_vmrgow (vui, vui);\n@@ -2414,7 +2418,7 @@\n   vus __builtin_vec_mladd (vus, vus, vus);\n     VMLADDUHM  VMLADDUHM_VUS2\n \n-[VEC_MOD, vec_mod, __builtin_vec_mod, _ARCH_PWR10]\n+[VEC_MOD, vec_mod, __builtin_vec_mod]\n   vsi __builtin_vec_mod (vsi, vsi);\n     VMODSW\n   vui __builtin_vec_mod (vui, vui);\n@@ -2432,7 +2436,7 @@\n   vss __builtin_vec_mradds (vss, vss, vss);\n     VMHRADDSHS\n \n-[VEC_MSUB, vec_msub, __builtin_vec_msub, __VSX__]\n+[VEC_MSUB, vec_msub, __builtin_vec_msub]\n   vf __builtin_vec_msub (vf, vf, vf);\n     XVMSUBSP\n   vd __builtin_vec_msub (vd, vd, vd);\n@@ -2511,7 +2515,7 @@\n   vuq __builtin_vec_mule (vull, vull);\n     VMULEUD\n \n-[VEC_MULH, vec_mulh, __builtin_vec_mulh, _ARCH_PWR10]\n+[VEC_MULH, vec_mulh, __builtin_vec_mulh]\n   vsi __builtin_vec_mulh (vsi, vsi);\n     VMULHSW\n   vui __builtin_vec_mulh (vui, vui);\n@@ -2553,7 +2557,7 @@\n   vd __builtin_vec_nabs (vd);\n     NABS_V2DF\n \n-[VEC_NAND, vec_nand, __builtin_vec_nand, _ARCH_PWR8]\n+[VEC_NAND, vec_nand, __builtin_vec_nand]\n   vsc __builtin_vec_nand (vsc, vsc);\n     NAND_V16QI\n   vuc __builtin_vec_nand (vuc, vuc);\n@@ -2616,15 +2620,15 @@\n   vull __builtin_vec_nand (vull, vbll);\n     NAND_V2DI_UNS  NAND_VULL_VBLL\n \n-[VEC_NCIPHER_BE, vec_ncipher_be, __builtin_vec_vncipher_be, _ARCH_PWR8]\n+[VEC_NCIPHER_BE, vec_ncipher_be, __builtin_vec_vncipher_be]\n   vuc __builtin_vec_vncipher_be (vuc, vuc);\n     VNCIPHER_BE\n \n-[VEC_NCIPHERLAST_BE, vec_ncipherlast_be, __builtin_vec_vncipherlast_be, _ARCH_PWR8]\n+[VEC_NCIPHERLAST_BE, vec_ncipherlast_be, __builtin_vec_vncipherlast_be]\n   vuc __builtin_vec_vncipherlast_be (vuc, vuc);\n     VNCIPHERLAST_BE\n \n-[VEC_NEARBYINT, vec_nearbyint, __builtin_vec_nearbyint, __VSX__]\n+[VEC_NEARBYINT, vec_nearbyint, __builtin_vec_nearbyint]\n   vf __builtin_vec_nearbyint (vf);\n     XVRSPI  XVRSPI_NBI\n   vd __builtin_vec_nearbyint (vd);\n@@ -2644,7 +2648,7 @@\n   vd __builtin_vec_neg (vd);\n     NEG_V2DF\n \n-[VEC_NMADD, vec_nmadd, __builtin_vec_nmadd, __VSX__]\n+[VEC_NMADD, vec_nmadd, __builtin_vec_nmadd]\n   vf __builtin_vec_nmadd (vf, vf, vf);\n     XVNMADDSP\n   vd __builtin_vec_nmadd (vd, vd, vd);\n@@ -2778,7 +2782,7 @@\n   vd __builtin_vec_or (vbll, vd);\n     VOR_V2DF  VOR_VBLL_VD\n \n-[VEC_ORC, vec_orc, __builtin_vec_orc, _ARCH_PWR8]\n+[VEC_ORC, vec_orc, __builtin_vec_orc]\n   vsc __builtin_vec_orc (vsc, vsc);\n     ORC_V16QI\n   vuc __builtin_vec_orc (vuc, vuc);\n@@ -2895,7 +2899,7 @@\n   vui __builtin_vec_packsu (vsll, vsll);\n     VPKSDUS\n \n-[VEC_PDEP, vec_pdep, __builtin_vec_vpdepd, _ARCH_PWR10]\n+[VEC_PDEP, vec_pdep, __builtin_vec_vpdepd]\n   vull __builtin_vec_vpdepd (vull, vull);\n     VPDEPD\n \n@@ -2940,7 +2944,7 @@\n   vbc __builtin_vec_perm (vbc, vbc, vbc);\n     VPERM_16QI  VPERM_VBC_VBC_VBC\n \n-[VEC_PERMX, vec_permx, __builtin_vec_xxpermx, _ARCH_PWR10]\n+[VEC_PERMX, vec_permx, __builtin_vec_xxpermx]\n   vsc __builtin_vec_xxpermx (vsc, vsc, vuc, const int);\n     XXPERMX_UV2DI  XXPERMX_VSC\n   vuc __builtin_vec_xxpermx (vuc, vuc, vuc, const int);\n@@ -2970,7 +2974,7 @@\n   vbc __builtin_vec_vpermxor (vbc, vbc, vbc);\n     VPERMXOR  VPERMXOR_VBC\n \n-[VEC_PEXT, vec_pext, __builtin_vec_vpextd, _ARCH_PWR10]\n+[VEC_PEXT, vec_pext, __builtin_vec_vpextd]\n   vull __builtin_vec_vpextd (vull, vull);\n     VPEXTD\n \n@@ -2984,7 +2988,7 @@\n   vuq __builtin_vec_vpmsum (vull, vull);\n     VPMSUMD  VPMSUMD_V\n \n-[VEC_POPCNT, vec_popcnt, __builtin_vec_vpopcntu, _ARCH_PWR8]\n+[VEC_POPCNT, vec_popcnt, __builtin_vec_vpopcntu]\n   vuc __builtin_vec_vpopcntu (vsc);\n     VPOPCNTB\n   vuc __builtin_vec_vpopcntu (vuc);\n@@ -3002,7 +3006,7 @@\n   vull __builtin_vec_vpopcntu (vull);\n     VPOPCNTUD\n \n-[VEC_PARITY_LSBB, vec_parity_lsbb, __builtin_vec_vparity_lsbb, _ARCH_PWR9]\n+[VEC_PARITY_LSBB, vec_parity_lsbb, __builtin_vec_vparity_lsbb]\n   vui __builtin_vec_vparity_lsbb (vsi);\n     VPRTYBW  VPRTYBW_S\n   vui __builtin_vec_vparity_lsbb (vui);\n@@ -3036,7 +3040,7 @@\n   vd __builtin_vec_recipdiv (vd, vd);\n     RECIP_V2DF\n \n-[VEC_REPLACE_ELT, vec_replace_elt, __builtin_vec_replace_elt, _ARCH_PWR10]\n+[VEC_REPLACE_ELT, vec_replace_elt, __builtin_vec_replace_elt]\n   vui __builtin_vec_replace_elt (vui, unsigned int, const int);\n     VREPLACE_ELT_UV4SI\n   vsi __builtin_vec_replace_elt (vsi, signed int, const int);\n@@ -3050,7 +3054,7 @@\n   vd __builtin_vec_replace_elt (vd, double, const int);\n     VREPLACE_ELT_V2DF\n \n-[VEC_REPLACE_UN, vec_replace_unaligned, __builtin_vec_replace_un, _ARCH_PWR10]\n+[VEC_REPLACE_UN, vec_replace_unaligned, __builtin_vec_replace_un]\n   vui __builtin_vec_replace_un (vui, unsigned int, const int);\n     VREPLACE_UN_UV4SI\n   vsi __builtin_vec_replace_un (vsi, signed int, const int);\n@@ -3064,7 +3068,7 @@\n   vd __builtin_vec_replace_un (vd, double, const int);\n     VREPLACE_UN_V2DF\n \n-[VEC_REVB, vec_revb, __builtin_vec_revb, _ARCH_PWR8]\n+[VEC_REVB, vec_revb, __builtin_vec_revb]\n   vss __builtin_vec_revb (vss);\n     REVB_V8HI  REVB_VSS\n   vus __builtin_vec_revb (vus);\n@@ -3129,7 +3133,7 @@\n   vd __builtin_vec_vreve (vd);\n     VREVE_V2DF\n \n-[VEC_RINT, vec_rint, __builtin_vec_rint, __VSX__]\n+[VEC_RINT, vec_rint, __builtin_vec_rint]\n   vf __builtin_vec_rint (vf);\n     XVRSPIC\n   vd __builtin_vec_rint (vd);\n@@ -3157,7 +3161,7 @@\n   vuq __builtin_vec_rl (vuq, vuq);\n     VRLQ  VRLQ_VUQ\n \n-[VEC_RLMI, vec_rlmi, __builtin_vec_rlmi, _ARCH_PWR9]\n+[VEC_RLMI, vec_rlmi, __builtin_vec_rlmi]\n   vui __builtin_vec_rlmi (vui, vui, vui);\n     VRLWMI\n   vull __builtin_vec_rlmi (vull, vull, vull);\n@@ -3167,7 +3171,7 @@\n   vuq __builtin_vec_rlmi (vuq, vuq, vuq);\n     VRLQMI  VRLQMI_VUQ\n \n-[VEC_RLNM, vec_vrlnm, __builtin_vec_rlnm, _ARCH_PWR9]\n+[VEC_RLNM, vec_vrlnm, __builtin_vec_rlnm]\n   vui __builtin_vec_rlnm (vui, vui);\n     VRLWNM\n   vull __builtin_vec_rlnm (vull, vull);\n@@ -3195,7 +3199,7 @@\n   vd __builtin_vec_rsqrte (vd);\n     XVRSQRTEDP\n \n-[VEC_SBOX_BE, vec_sbox_be, __builtin_vec_sbox_be, _ARCH_PWR8]\n+[VEC_SBOX_BE, vec_sbox_be, __builtin_vec_sbox_be]\n   vuc __builtin_vec_sbox_be (vuc);\n     VSBOX_BE\n \n@@ -3294,21 +3298,21 @@\n   vsi __builtin_vec_vsignedo (vd);\n     VEC_VSIGNEDO_V2DF\n \n-[VEC_SIGNEXTI, vec_signexti, __builtin_vec_signexti, _ARCH_PWR9]\n+[VEC_SIGNEXTI, vec_signexti, __builtin_vec_signexti]\n   vsi __builtin_vec_signexti (vsc);\n     VSIGNEXTSB2W\n   vsi __builtin_vec_signexti (vss);\n     VSIGNEXTSH2W\n \n-[VEC_SIGNEXTLL, vec_signextll, __builtin_vec_signextll, _ARCH_PWR9]\n+[VEC_SIGNEXTLL, vec_signextll, __builtin_vec_signextll]\n   vsll __builtin_vec_signextll (vsc);\n     VSIGNEXTSB2D\n   vsll __builtin_vec_signextll (vss);\n     VSIGNEXTSH2D\n   vsll __builtin_vec_signextll (vsi);\n     VSIGNEXTSW2D\n \n-[VEC_SIGNEXTQ, vec_signextq, __builtin_vec_signextq, _ARCH_PWR10]\n+[VEC_SIGNEXTQ, vec_signextq, __builtin_vec_signextq]\n   vsq __builtin_vec_signextq (vsll);\n     VSIGNEXTSD2Q\n \n@@ -3366,7 +3370,7 @@\n   vd __builtin_vec_sld (vd, vd, const int);\n     VSLDOI_2DF\n \n-[VEC_SLDB, vec_sldb, __builtin_vec_sldb, _ARCH_PWR10]\n+[VEC_SLDB, vec_sldb, __builtin_vec_sldb]\n   vsc __builtin_vec_sldb (vsc, vsc, const int);\n     VSLDB_V16QI  VSLDB_VSC\n   vuc __builtin_vec_sldb (vuc, vuc, const int);\n@@ -3521,7 +3525,7 @@\n   vf __builtin_vec_slo (vf, vuc);\n     VSLO  VSLO_VFU\n \n-[VEC_SLV, vec_slv, __builtin_vec_vslv, _ARCH_PWR9]\n+[VEC_SLV, vec_slv, __builtin_vec_vslv]\n   vuc __builtin_vec_vslv (vuc, vuc);\n     VSLV\n \n@@ -3572,17 +3576,17 @@\n ; There are no entries for vec_splat_u{8,16,32}.  These are handled\n ; in altivec.h with a #define and a cast.\n \n-[VEC_SPLATI, vec_splati, __builtin_vec_xxspltiw, _ARCH_PWR10]\n+[VEC_SPLATI, vec_splati, __builtin_vec_xxspltiw]\n   vsi __builtin_vec_xxspltiw (signed int);\n     VXXSPLTIW_V4SI\n   vf __builtin_vec_xxspltiw (float);\n     VXXSPLTIW_V4SF\n \n-[VEC_SPLATID, vec_splatid, __builtin_vec_xxspltid, _ARCH_PWR10]\n+[VEC_SPLATID, vec_splatid, __builtin_vec_xxspltid]\n   vd __builtin_vec_xxspltid (float);\n     VXXSPLTIDP\n \n-[VEC_SPLATI_INS, vec_splati_ins, __builtin_vec_xxsplti32dx, _ARCH_PWR10]\n+[VEC_SPLATI_INS, vec_splati_ins, __builtin_vec_xxsplti32dx]\n   vsi __builtin_vec_xxsplti32dx (vsi, const int, signed int);\n     VXXSPLTI32DX_V4SI  VXXSPLTI32DX_VSI\n   vui __builtin_vec_xxsplti32dx (vui, const int, unsigned int);\n@@ -3598,7 +3602,7 @@\n   vsi __builtin_vec_splats (vsi);\n     ABS_V4SI SPLATS_FAKERY\n \n-[VEC_SQRT, vec_sqrt, __builtin_vec_sqrt, __VSX__]\n+[VEC_SQRT, vec_sqrt, __builtin_vec_sqrt]\n   vf __builtin_vec_sqrt (vf);\n     XVSQRTSP\n   vd __builtin_vec_sqrt (vd);\n@@ -3648,7 +3652,7 @@\n   vuq __builtin_vec_sra (vuq, vuq);\n     VSRAQ  VSRAQ_VUQ\n \n-[VEC_SRDB, vec_srdb, __builtin_vec_srdb, _ARCH_PWR10]\n+[VEC_SRDB, vec_srdb, __builtin_vec_srdb]\n   vsc __builtin_vec_srdb (vsc, vsc, const int);\n     VSRDB_V16QI  VSRDB_VSC\n   vuc __builtin_vec_srdb (vuc, vuc, const int);\n@@ -3775,7 +3779,7 @@\n   vf __builtin_vec_sro (vf, vuc);\n     VSRO  VSRO_VFU\n \n-[VEC_SRV, vec_srv, __builtin_vec_vsrv, _ARCH_PWR9]\n+[VEC_SRV, vec_srv, __builtin_vec_vsrv]\n   vuc __builtin_vec_vsrv (vuc, vuc);\n     VSRV\n \n@@ -3956,7 +3960,7 @@\n   void __builtin_vec_stl (vd, signed long long, double *);\n     STVXL_V2DF  STVXL_D\n \n-[VEC_STRIL, vec_stril, __builtin_vec_stril, _ARCH_PWR10]\n+[VEC_STRIL, vec_stril, __builtin_vec_stril]\n   vuc __builtin_vec_stril (vuc);\n     VSTRIBL  VSTRIBL_U\n   vsc __builtin_vec_stril (vsc);\n@@ -3966,7 +3970,7 @@\n   vss __builtin_vec_stril (vss);\n     VSTRIHL  VSTRIHL_S\n \n-[VEC_STRIL_P, vec_stril_p, __builtin_vec_stril_p, _ARCH_PWR10]\n+[VEC_STRIL_P, vec_stril_p, __builtin_vec_stril_p]\n   signed int __builtin_vec_stril_p (vuc);\n     VSTRIBL_P  VSTRIBL_PU\n   signed int __builtin_vec_stril_p (vsc);\n@@ -3976,7 +3980,7 @@\n   signed int __builtin_vec_stril_p (vss);\n     VSTRIHL_P  VSTRIHL_PS\n \n-[VEC_STRIR, vec_strir, __builtin_vec_strir, _ARCH_PWR10]\n+[VEC_STRIR, vec_strir, __builtin_vec_strir]\n   vuc __builtin_vec_strir (vuc);\n     VSTRIBR  VSTRIBR_U\n   vsc __builtin_vec_strir (vsc);\n@@ -3986,7 +3990,7 @@\n   vss __builtin_vec_strir (vss);\n     VSTRIHR  VSTRIHR_S\n \n-[VEC_STRIR_P, vec_strir_p, __builtin_vec_strir_p, _ARCH_PWR10]\n+[VEC_STRIR_P, vec_strir_p, __builtin_vec_strir_p]\n   signed int __builtin_vec_strir_p (vuc);\n     VSTRIBR_P  VSTRIBR_PU\n   signed int __builtin_vec_strir_p (vsc);\n@@ -4148,7 +4152,7 @@\n   void __builtin_vec_stvrxl (vf, signed long long, float *);\n     STVRXL  STVRXL_F\n \n-[VEC_STXVL, vec_xst_len, __builtin_vec_stxvl, _ARCH_PPC64_PWR9]\n+[VEC_STXVL, vec_xst_len, __builtin_vec_stxvl]\n   void __builtin_vec_stxvl (vsc, signed char *, unsigned int);\n     STXVL  STXVL_VSC\n   void __builtin_vec_stxvl (vuc, unsigned char *, unsigned int);\n@@ -4316,7 +4320,7 @@\n   vsi __builtin_vec_sums (vsi, vsi);\n     VSUMSWS\n \n-[VEC_TERNARYLOGIC, vec_ternarylogic, __builtin_vec_xxeval, _ARCH_PWR10]\n+[VEC_TERNARYLOGIC, vec_ternarylogic, __builtin_vec_xxeval]\n   vuc __builtin_vec_xxeval (vuc, vuc, vuc, const int);\n     XXEVAL  XXEVAL_VUC\n   vus __builtin_vec_xxeval (vus, vus, vus, const int);\n@@ -4328,11 +4332,11 @@\n   vuq __builtin_vec_xxeval (vuq, vuq, vuq, const int);\n     XXEVAL  XXEVAL_VUQ\n \n-[VEC_TEST_LSBB_ALL_ONES, vec_test_lsbb_all_ones, __builtin_vec_xvtlsbb_all_ones, _ARCH_PWR9]\n+[VEC_TEST_LSBB_ALL_ONES, vec_test_lsbb_all_ones, __builtin_vec_xvtlsbb_all_ones]\n   signed int __builtin_vec_xvtlsbb_all_ones (vuc);\n     XVTLSBB_ONES\n \n-[VEC_TEST_LSBB_ALL_ZEROS, vec_test_lsbb_all_zeros, __builtin_vec_xvtlsbb_all_zeros, _ARCH_PWR9]\n+[VEC_TEST_LSBB_ALL_ZEROS, vec_test_lsbb_all_zeros, __builtin_vec_xvtlsbb_all_zeros]\n   signed int __builtin_vec_xvtlsbb_all_zeros (vuc);\n     XVTLSBB_ZEROS\n \n@@ -4420,19 +4424,19 @@\n   vui __builtin_vec_vunsignedo (vd);\n     VEC_VUNSIGNEDO_V2DF\n \n-[VEC_VEE, vec_extract_exp, __builtin_vec_extract_exp, _ARCH_PWR9]\n+[VEC_VEE, vec_extract_exp, __builtin_vec_extract_exp]\n   vui __builtin_vec_extract_exp (vf);\n     VEESP\n   vull __builtin_vec_extract_exp (vd);\n     VEEDP\n \n-[VEC_VES, vec_extract_sig, __builtin_vec_extract_sig, _ARCH_PWR9]\n+[VEC_VES, vec_extract_sig, __builtin_vec_extract_sig]\n   vui __builtin_vec_extract_sig (vf);\n     VESSP\n   vull __builtin_vec_extract_sig (vd);\n     VESDP\n \n-[VEC_VIE, vec_insert_exp, __builtin_vec_insert_exp, _ARCH_PWR9]\n+[VEC_VIE, vec_insert_exp, __builtin_vec_insert_exp]\n   vf __builtin_vec_insert_exp (vf, vui);\n     VIESP  VIESP_VF\n   vf __builtin_vec_insert_exp (vui, vui);\n@@ -4444,7 +4448,7 @@\n \n ; It is truly unfortunate that vec_vprtyb has an incompatible set of\n ; interfaces with vec_parity_lsbb.  So we can't even deprecate this.\n-[VEC_VPRTYB, vec_vprtyb, __builtin_vec_vprtyb, _ARCH_PWR9]\n+[VEC_VPRTYB, vec_vprtyb, __builtin_vec_vprtyb]\n   vsi __builtin_vec_vprtyb (vsi);\n     VPRTYBW  VPRTYB_VSI\n   vui __builtin_vec_vprtyb (vui);\n@@ -4462,43 +4466,43 @@\n   unsigned __int128 __builtin_vec_vprtyb (unsigned __int128);\n     VPRTYBQ  VPRTYB_UQ\n \n-[VEC_VSCEEQ, scalar_cmp_exp_eq, __builtin_vec_scalar_cmp_exp_eq, _ARCH_PWR9]\n+[VEC_VSCEEQ, scalar_cmp_exp_eq, __builtin_vec_scalar_cmp_exp_eq]\n   signed int __builtin_vec_scalar_cmp_exp_eq (double, double);\n     VSCEDPEQ\n   signed int __builtin_vec_scalar_cmp_exp_eq (_Float128, _Float128);\n     VSCEQPEQ\n \n-[VEC_VSCEGT, scalar_cmp_exp_gt, __builtin_vec_scalar_cmp_exp_gt, _ARCH_PWR9]\n+[VEC_VSCEGT, scalar_cmp_exp_gt, __builtin_vec_scalar_cmp_exp_gt]\n   signed int __builtin_vec_scalar_cmp_exp_gt (double, double);\n     VSCEDPGT\n   signed int __builtin_vec_scalar_cmp_exp_gt (_Float128, _Float128);\n     VSCEQPGT\n \n-[VEC_VSCELT, scalar_cmp_exp_lt, __builtin_vec_scalar_cmp_exp_lt, _ARCH_PWR9]\n+[VEC_VSCELT, scalar_cmp_exp_lt, __builtin_vec_scalar_cmp_exp_lt]\n   signed int __builtin_vec_scalar_cmp_exp_lt (double, double);\n     VSCEDPLT\n   signed int __builtin_vec_scalar_cmp_exp_lt (_Float128, _Float128);\n     VSCEQPLT\n \n-[VEC_VSCEUO, scalar_cmp_exp_unordered, __builtin_vec_scalar_cmp_exp_unordered, _ARCH_PWR9]\n+[VEC_VSCEUO, scalar_cmp_exp_unordered, __builtin_vec_scalar_cmp_exp_unordered]\n   signed int __builtin_vec_scalar_cmp_exp_unordered (double, double);\n     VSCEDPUO\n   signed int __builtin_vec_scalar_cmp_exp_unordered (_Float128, _Float128);\n     VSCEQPUO\n \n-[VEC_VSEE, scalar_extract_exp, __builtin_vec_scalar_extract_exp, _ARCH_PWR9]\n+[VEC_VSEE, scalar_extract_exp, __builtin_vec_scalar_extract_exp]\n   unsigned int __builtin_vec_scalar_extract_exp (double);\n     VSEEDP\n   unsigned int __builtin_vec_scalar_extract_exp (_Float128);\n     VSEEQP\n \n-[VEC_VSES, scalar_extract_sig, __builtin_vec_scalar_extract_sig, _ARCH_PWR9]\n+[VEC_VSES, scalar_extract_sig, __builtin_vec_scalar_extract_sig]\n   unsigned long long __builtin_vec_scalar_extract_sig (double);\n     VSESDP\n   unsigned __int128 __builtin_vec_scalar_extract_sig (_Float128);\n     VSESQP\n \n-[VEC_VSIE, scalar_insert_exp, __builtin_vec_scalar_insert_exp, _ARCH_PWR9]\n+[VEC_VSIE, scalar_insert_exp, __builtin_vec_scalar_insert_exp]\n   double __builtin_vec_scalar_insert_exp (unsigned long long, unsigned long long);\n     VSIEDP\n   double __builtin_vec_scalar_insert_exp (double, unsigned long long);\n@@ -4508,29 +4512,29 @@\n   _Float128 __builtin_vec_scalar_insert_exp (_Float128, unsigned long long);\n     VSIEQPF\n \n-[VEC_VSTDC, scalar_test_data_class, __builtin_vec_scalar_test_data_class, _ARCH_PWR9]\n+[VEC_VSTDC, scalar_test_data_class, __builtin_vec_scalar_test_data_class]\n   unsigned int __builtin_vec_scalar_test_data_class (float, const int);\n     VSTDCSP\n   unsigned int __builtin_vec_scalar_test_data_class (double, const int);\n     VSTDCDP\n   unsigned int __builtin_vec_scalar_test_data_class (_Float128, const int);\n     VSTDCQP\n \n-[VEC_VSTDCN, scalar_test_neg, __builtin_vec_scalar_test_neg, _ARCH_PWR9]\n+[VEC_VSTDCN, scalar_test_neg, __builtin_vec_scalar_test_neg]\n   unsigned int __builtin_vec_scalar_test_neg (float);\n     VSTDCNSP\n   unsigned int __builtin_vec_scalar_test_neg (double);\n     VSTDCNDP\n   unsigned int __builtin_vec_scalar_test_neg (_Float128);\n     VSTDCNQP\n \n-[VEC_VTDC, vec_test_data_class, __builtin_vec_test_data_class, _ARCH_PWR9]\n+[VEC_VTDC, vec_test_data_class, __builtin_vec_test_data_class]\n   vbi __builtin_vec_test_data_class (vf, const int);\n     VTDCSP\n   vbll __builtin_vec_test_data_class (vd, const int);\n     VTDCDP\n \n-[VEC_XL, vec_xl, __builtin_vec_vsx_ld, __VSX__]\n+[VEC_XL, vec_xl, __builtin_vec_vsx_ld]\n   vsc __builtin_vec_vsx_ld (signed long long, const vsc *);\n     LXVW4X_V16QI  LXVW4X_VSC\n   vsc __builtin_vec_vsx_ld (signed long long, const signed char *);\n@@ -4588,7 +4592,7 @@\n   vd __builtin_vec_vsx_ld (signed long long, const double *);\n     LXVD2X_V2DF  LXVD2X_D\n \n-[VEC_XL_BE, vec_xl_be, __builtin_vec_xl_be, __VSX__]\n+[VEC_XL_BE, vec_xl_be, __builtin_vec_xl_be]\n   vsc __builtin_vec_xl_be (signed long long, const vsc *);\n     LD_ELEMREV_V16QI  LD_ELEMREV_VSC\n   vsc __builtin_vec_xl_be (signed long long, const signed char *);\n@@ -4634,11 +4638,11 @@\n   vd __builtin_vec_xl_be (signed long long, const double *);\n     LD_ELEMREV_V2DF  LD_ELEMREV_DD\n \n-[VEC_XL_LEN_R, vec_xl_len_r, __builtin_vec_xl_len_r, _ARCH_PPC64_PWR9]\n+[VEC_XL_LEN_R, vec_xl_len_r, __builtin_vec_xl_len_r]\n   vuc __builtin_vsx_xl_len_r (const unsigned char *, unsigned int);\n     XL_LEN_R\n \n-[VEC_XL_SEXT, vec_xl_sext, __builtin_vec_xl_sext, _ARCH_PWR10]\n+[VEC_XL_SEXT, vec_xl_sext, __builtin_vec_xl_sext]\n   vsq __builtin_vec_xl_sext (signed long long, const signed char *);\n     SE_LXVRBX\n   vsq __builtin_vec_xl_sext (signed long long, const signed short *);\n@@ -4648,7 +4652,7 @@\n   vsq __builtin_vec_xl_sext (signed long long, const signed long long *);\n     SE_LXVRDX\n \n-[VEC_XL_ZEXT, vec_xl_zext, __builtin_vec_xl_zext, _ARCH_PWR10]\n+[VEC_XL_ZEXT, vec_xl_zext, __builtin_vec_xl_zext]\n   vuq __builtin_vec_xl_zext (signed long long, const unsigned char *);\n     ZE_LXVRBX\n   vuq __builtin_vec_xl_zext (signed long long, const unsigned short *);\n@@ -4733,7 +4737,7 @@\n   vd __builtin_vec_xor (vbll, vd);\n     VXOR_V2DF  VXOR_VBLL_VD\n \n-[VEC_XST, vec_xst, __builtin_vec_vsx_st, __VSX__]\n+[VEC_XST, vec_xst, __builtin_vec_vsx_st]\n   void __builtin_vec_vsx_st (vsc, signed long long, vsc *);\n     STXVW4X_V16QI  STXVW4X_VSC\n   void __builtin_vec_vsx_st (vsc, signed long long, signed char *);\n@@ -4801,7 +4805,7 @@\n   void __builtin_vec_vsx_st (vd, signed long long, double *);\n     STXVD2X_V2DF  STXVD2X_D\n \n-[VEC_XST_BE, vec_xst_be, __builtin_vec_xst_be, __VSX__]\n+[VEC_XST_BE, vec_xst_be, __builtin_vec_xst_be]\n   void __builtin_vec_xst_be (vsc, signed long long, vsc *);\n     ST_ELEMREV_V16QI  ST_ELEMREV_VSC\n   void __builtin_vec_xst_be (vsc, signed long long, signed char *);\n@@ -4847,11 +4851,11 @@\n   void __builtin_vec_xst_be (vd, signed long long, double *);\n     ST_ELEMREV_V2DF  ST_ELEMREV_D\n \n-[VEC_XST_LEN_R, vec_xst_len_r, __builtin_vec_xst_len_r, _ARCH_PPC64_PWR9]\n+[VEC_XST_LEN_R, vec_xst_len_r, __builtin_vec_xst_len_r]\n   void __builtin_vsx_xst_len_r (vuc, unsigned char *, unsigned int);\n     XST_LEN_R\n \n-[VEC_XST_TRUNC, vec_xst_trunc, __builtin_vec_xst_trunc, _ARCH_PWR10]\n+[VEC_XST_TRUNC, vec_xst_trunc, __builtin_vec_xst_trunc]\n   void __builtin_vec_xst_trunc (vsq, signed long long, signed char *);\n     TR_STXVRBX  TR_STXVRBX_S\n   void __builtin_vec_xst_trunc (vuq, signed long long, unsigned char *);\n@@ -4869,7 +4873,7 @@\n   void __builtin_vec_xst_trunc (vuq, signed long long, unsigned long long *);\n     TR_STXVRDX  TR_STXVRDX_U\n \n-[VEC_XXPERMDI, vec_xxpermdi, __builtin_vsx_xxpermdi, __VSX__]\n+[VEC_XXPERMDI, vec_xxpermdi, __builtin_vsx_xxpermdi]\n   vsc __builtin_vsx_xxpermdi (vsc, vsc, const int);\n     XXPERMDI_16QI  XXPERMDI_VSC\n   vuc __builtin_vsx_xxpermdi (vuc, vuc, const int);\n@@ -4891,7 +4895,7 @@\n   vd __builtin_vsx_xxpermdi (vd, vd, const int);\n     XXPERMDI_2DF  XXPERMDI_VD\n \n-[VEC_XXSLDWI, vec_xxsldwi, __builtin_vsx_xxsldwi, __VSX__]\n+[VEC_XXSLDWI, vec_xxsldwi, __builtin_vsx_xxsldwi]\n   vsc __builtin_vsx_xxsldwi (vsc, vsc, const int);\n     XXSLDWI_16QI  XXSLDWI_VSC2\n   vuc __builtin_vsx_xxsldwi (vuc, vuc, const int);\n@@ -4990,51 +4994,51 @@\n   void __builtin_vec_stvewx (vui, signed long, void *);\n     STVEWX  STVEWX_DEPR8\n \n-[VEC_TSTSFI_EQ_DD, SKIP, __builtin_dfp_dtstsfi_eq_dd, _ARCH_PWR9]\n+[VEC_TSTSFI_EQ_DD, SKIP, __builtin_dfp_dtstsfi_eq_dd]\n   signed int __builtin_dfp_dtstsfi_eq_dd (const int, _Decimal64);\n     TSTSFI_EQ_DD  TSTSFI_EQ_DD_DEPR1\n \n-[VEC_TSTSFI_EQ_TD, SKIP, __builtin_dfp_dtstsfi_eq_td, _ARCH_PWR9]\n+[VEC_TSTSFI_EQ_TD, SKIP, __builtin_dfp_dtstsfi_eq_td]\n   signed int __builtin_dfp_dtstsfi_eq_td (const int, _Decimal128);\n     TSTSFI_EQ_TD  TSTSFI_EQ_TD_DEPR1\n \n-[VEC_TSTSFI_GT_DD, SKIP, __builtin_dfp_dtstsfi_gt_dd, _ARCH_PWR9]\n+[VEC_TSTSFI_GT_DD, SKIP, __builtin_dfp_dtstsfi_gt_dd]\n   signed int __builtin_dfp_dtstsfi_gt_dd (const int, _Decimal64);\n     TSTSFI_GT_DD  TSTSFI_GT_DD_DEPR1\n \n-[VEC_TSTSFI_GT_TD, SKIP, __builtin_dfp_dtstsfi_gt_td, _ARCH_PWR9]\n+[VEC_TSTSFI_GT_TD, SKIP, __builtin_dfp_dtstsfi_gt_td]\n   signed int __builtin_dfp_dtstsfi_gt_td (const int, _Decimal128);\n     TSTSFI_GT_TD  TSTSFI_GT_TD_DEPR1\n \n-[VEC_TSTSFI_LT_DD, SKIP, __builtin_dfp_dtstsfi_lt_dd, _ARCH_PWR9]\n+[VEC_TSTSFI_LT_DD, SKIP, __builtin_dfp_dtstsfi_lt_dd]\n   signed int __builtin_dfp_dtstsfi_lt_dd (const int, _Decimal64);\n     TSTSFI_LT_DD  TSTSFI_LT_DD_DEPR1\n \n-[VEC_TSTSFI_LT_TD, SKIP, __builtin_dfp_dtstsfi_lt_td, _ARCH_PWR9]\n+[VEC_TSTSFI_LT_TD, SKIP, __builtin_dfp_dtstsfi_lt_td]\n   signed int __builtin_dfp_dtstsfi_lt_td (const int, _Decimal128);\n     TSTSFI_LT_TD  TSTSFI_LT_TD_DEPR1\n \n-[VEC_TSTSFI_OV_DD, SKIP, __builtin_dfp_dtstsfi_ov_dd, _ARCH_PWR9]\n+[VEC_TSTSFI_OV_DD, SKIP, __builtin_dfp_dtstsfi_ov_dd]\n   signed int __builtin_dfp_dtstsfi_ov_dd (const int, _Decimal64);\n     TSTSFI_OV_DD  TSTSFI_OV_DD_DEPR1\n \n-[VEC_TSTSFI_OV_TD, SKIP, __builtin_dfp_dtstsfi_ov_td, _ARCH_PWR9]\n+[VEC_TSTSFI_OV_TD, SKIP, __builtin_dfp_dtstsfi_ov_td]\n   signed int __builtin_dfp_dtstsfi_ov_td (const int, _Decimal128);\n     TSTSFI_OV_TD  TSTSFI_OV_TD_DEPR1\n \n-[VEC_VADDCUQ, vec_vaddcuq, __builtin_vec_vaddcuq, _ARCH_PWR8]\n+[VEC_VADDCUQ, vec_vaddcuq, __builtin_vec_vaddcuq]\n   vsq __builtin_vec_vaddcuq (vsq, vsq);\n     VADDCUQ  VADDCUQ_DEPR1\n   vuq __builtin_vec_vaddcuq (vuq, vuq);\n     VADDCUQ  VADDCUQ_DEPR2\n \n-[VEC_VADDECUQ, vec_vaddecuq, __builtin_vec_vaddecuq, _ARCH_PWR8]\n+[VEC_VADDECUQ, vec_vaddecuq, __builtin_vec_vaddecuq]\n   vsq __builtin_vec_vaddecuq (vsq, vsq, vsq);\n     VADDECUQ  VADDECUQ_DEPR1\n   vuq __builtin_vec_vaddecuq (vuq, vuq, vuq);\n     VADDECUQ  VADDECUQ_DEPR2\n \n-[VEC_VADDEUQM, vec_vaddeuqm, __builtin_vec_vaddeuqm, _ARCH_PWR8]\n+[VEC_VADDEUQM, vec_vaddeuqm, __builtin_vec_vaddeuqm]\n   vsq __builtin_vec_vaddeuqm (vsq, vsq, vsq);\n     VADDEUQM  VADDEUQM_DEPR1\n   vuq __builtin_vec_vaddeuqm (vuq, vuq, vuq);\n@@ -5098,7 +5102,7 @@\n   vuc __builtin_vec_vaddubs (vuc, vbc);\n     VADDUBS  VADDUBS_DEPR5\n \n-[VEC_VADDUDM, vec_vaddudm, __builtin_vec_vaddudm, _ARCH_PWR8]\n+[VEC_VADDUDM, vec_vaddudm, __builtin_vec_vaddudm]\n   vsll __builtin_vec_vaddudm (vbll, vsll);\n     VADDUDM  VADDUDM_DEPR1\n   vsll __builtin_vec_vaddudm (vsll, vbll);\n@@ -5142,7 +5146,7 @@\n   vus __builtin_vec_vadduhs (vus, vbs);\n     VADDUHS  VADDUHS_DEPR5\n \n-[VEC_VADDUQM, vec_vadduqm, __builtin_vec_vadduqm, _ARCH_PWR8]\n+[VEC_VADDUQM, vec_vadduqm, __builtin_vec_vadduqm]\n   vsq __builtin_vec_vadduqm (vsq, vsq);\n     VADDUQM  VADDUQM_DEPR1\n   vuq __builtin_vec_vadduqm (vuq, vuq);\n@@ -5214,7 +5218,7 @@\n   vui __builtin_vec_vavguw (vui, vui);\n     VAVGUW  VAVGUW_DEPR1\n \n-[VEC_VBPERMQ, vec_vbpermq, __builtin_vec_vbpermq, _ARCH_PWR8]\n+[VEC_VBPERMQ, vec_vbpermq, __builtin_vec_vbpermq]\n   vull __builtin_vec_vbpermq (vull, vuc);\n     VBPERMQ  VBPERMQ_DEPR1\n   vsll __builtin_vec_vbpermq (vsc, vsc);\n@@ -5232,25 +5236,25 @@\n   vf __builtin_vec_vcfux (vui, const int);\n     VCFUX  VCFUX_DEPR1\n \n-[VEC_VCLZB, vec_vclzb, __builtin_vec_vclzb, _ARCH_PWR8]\n+[VEC_VCLZB, vec_vclzb, __builtin_vec_vclzb]\n   vsc __builtin_vec_vclzb (vsc);\n     VCLZB  VCLZB_DEPR1\n   vuc __builtin_vec_vclzb (vuc);\n     VCLZB  VCLZB_DEPR2\n \n-[VEC_VCLZD, vec_vclzd, __builtin_vec_vclzd, _ARCH_PWR8]\n+[VEC_VCLZD, vec_vclzd, __builtin_vec_vclzd]\n   vsll __builtin_vec_vclzd (vsll);\n     VCLZD  VCLZD_DEPR1\n   vull __builtin_vec_vclzd (vull);\n     VCLZD  VCLZD_DEPR2\n \n-[VEC_VCLZH, vec_vclzh, __builtin_vec_vclzh, _ARCH_PWR8]\n+[VEC_VCLZH, vec_vclzh, __builtin_vec_vclzh]\n   vss __builtin_vec_vclzh (vss);\n     VCLZH  VCLZH_DEPR1\n   vus __builtin_vec_vclzh (vus);\n     VCLZH  VCLZH_DEPR2\n \n-[VEC_VCLZW, vec_vclzw, __builtin_vec_vclzw, _ARCH_PWR8]\n+[VEC_VCLZW, vec_vclzw, __builtin_vec_vclzw]\n   vsi __builtin_vec_vclzw (vsi);\n     VCLZW  VCLZW_DEPR1\n   vui __builtin_vec_vclzw (vui);\n@@ -5306,53 +5310,53 @@\n   vbi __builtin_vec_vcmpgtuw (vui, vui);\n     VCMPGTUW  VCMPGTUW_DEPR1\n \n-[VEC_VCTZB, vec_vctzb, __builtin_vec_vctzb, _ARCH_PWR9]\n+[VEC_VCTZB, vec_vctzb, __builtin_vec_vctzb]\n   vsc __builtin_vec_vctzb (vsc);\n     VCTZB  VCTZB_DEPR1\n   vuc __builtin_vec_vctzb (vuc);\n     VCTZB  VCTZB_DEPR2\n \n-[VEC_VCTZD, vec_vctzd, __builtin_vec_vctzd, _ARCH_PWR9]\n+[VEC_VCTZD, vec_vctzd, __builtin_vec_vctzd]\n   vsll __builtin_vec_vctzd (vsll);\n     VCTZD  VCTZD_DEPR1\n   vull __builtin_vec_vctzd (vull);\n     VCTZD  VCTZD_DEPR2\n \n-[VEC_VCTZH, vec_vctzh, __builtin_vec_vctzh, _ARCH_PWR9]\n+[VEC_VCTZH, vec_vctzh, __builtin_vec_vctzh]\n   vss __builtin_vec_vctzh (vss);\n     VCTZH  VCTZH_DEPR1\n   vus __builtin_vec_vctzh (vus);\n     VCTZH  VCTZH_DEPR2\n \n-[VEC_VCTZW, vec_vctzw, __builtin_vec_vctzw, _ARCH_PWR9]\n+[VEC_VCTZW, vec_vctzw, __builtin_vec_vctzw]\n   vsi __builtin_vec_vctzw (vsi);\n     VCTZW  VCTZW_DEPR1\n   vui __builtin_vec_vctzw (vui);\n     VCTZW  VCTZW_DEPR2\n \n-[VEC_VEEDP, vec_extract_exp_dp, __builtin_vec_extract_exp_dp, _ARCH_PWR9]\n+[VEC_VEEDP, vec_extract_exp_dp, __builtin_vec_extract_exp_dp]\n   vull __builtin_vec_extract_exp_dp (vd);\n     VEEDP  VEEDP_DEPR1\n \n-[VEC_VEESP, vec_extract_exp_sp, __builtin_vec_extract_exp_sp, _ARCH_PWR9]\n+[VEC_VEESP, vec_extract_exp_sp, __builtin_vec_extract_exp_sp]\n   vui __builtin_vec_extract_exp_sp (vf);\n     VEESP  VEESP_DEPR1\n \n-[VEC_VESDP, vec_extract_sig_dp, __builtin_vec_extract_sig_dp, _ARCH_PWR9]\n+[VEC_VESDP, vec_extract_sig_dp, __builtin_vec_extract_sig_dp]\n   vull __builtin_vec_extract_sig_dp (vd);\n     VESDP  VESDP_DEPR1\n \n-[VEC_VESSP, vec_extract_sig_sp, __builtin_vec_extract_sig_sp, _ARCH_PWR9]\n+[VEC_VESSP, vec_extract_sig_sp, __builtin_vec_extract_sig_sp]\n   vui __builtin_vec_extract_sig_sp (vf);\n     VESSP  VESSP_DEPR1\n \n-[VEC_VIEDP, vec_insert_exp_dp, __builtin_vec_insert_exp_dp, _ARCH_PWR9]\n+[VEC_VIEDP, vec_insert_exp_dp, __builtin_vec_insert_exp_dp]\n   vd __builtin_vec_insert_exp_dp (vd, vull);\n     VIEDP  VIEDP_DEPR1\n   vd __builtin_vec_insert_exp_dp (vull, vull);\n     VIEDP  VIEDP_DEPR2\n \n-[VEC_VIESP, vec_insert_exp_sp, __builtin_vec_insert_exp_sp, _ARCH_PWR9]\n+[VEC_VIESP, vec_insert_exp_sp, __builtin_vec_insert_exp_sp]\n   vf __builtin_vec_insert_exp_sp (vf, vui);\n     VIESP  VIESP_DEPR1\n   vf __builtin_vec_insert_exp_sp (vui, vui);\n@@ -5650,11 +5654,11 @@\n   vull __builtin_vec_vmulouw (vui, vui);\n     VMULOUW  VMULOUW_DEPR1\n \n-[VEC_VPKSDSS, vec_vpksdss, __builtin_vec_vpksdss, _ARCH_PWR8]\n+[VEC_VPKSDSS, vec_vpksdss, __builtin_vec_vpksdss]\n   vsi __builtin_vec_vpksdss (vsll, vsll);\n     VPKSDSS  VPKSDSS_DEPR1\n \n-[VEC_VPKSDUS, vec_vpksdus, __builtin_vec_vpksdus, _ARCH_PWR8]\n+[VEC_VPKSDUS, vec_vpksdus, __builtin_vec_vpksdus]\n   vui __builtin_vec_vpksdus (vsll, vsll);\n     VPKSDUS  VPKSDUS_DEPR1\n \n@@ -5674,15 +5678,15 @@\n   vus __builtin_vec_vpkswus (vsi, vsi);\n     VPKSWUS  VPKSWUS_DEPR1\n \n-[VEC_VPKUDUM, vec_vpkudum, __builtin_vec_vpkudum, _ARCH_PWR8]\n+[VEC_VPKUDUM, vec_vpkudum, __builtin_vec_vpkudum]\n   vsi __builtin_vec_vpkudum (vsll, vsll);\n     VPKUDUM  VPKUDUM_DEPR1\n   vui __builtin_vec_vpkudum (vull, vull);\n     VPKUDUM  VPKUDUM_DEPR2\n   vbi __builtin_vec_vpkudum (vbll, vbll);\n     VPKUDUM  VPKUDUM_DEPR3\n \n-[VEC_VPKUDUS, vec_vpkudus, __builtin_vec_vpkudus, _ARCH_PWR8]\n+[VEC_VPKUDUS, vec_vpkudus, __builtin_vec_vpkudus]\n   vui __builtin_vec_vpkudus (vull, vull);\n     VPKUDUS  VPKUDUS_DEPR1\n \n@@ -5710,7 +5714,7 @@\n   vus __builtin_vec_vpkuwus (vui, vui);\n     VPKUWUS  VPKUWUS_DEPR1\n \n-[VEC_VPOPCNT, vec_vpopcnt, __builtin_vec_vpopcnt, _ARCH_PWR8]\n+[VEC_VPOPCNT, vec_vpopcnt, __builtin_vec_vpopcnt]\n   vsc __builtin_vec_vpopcnt (vsc);\n     VPOPCNTB  VPOPCNT_DEPR1\n   vuc __builtin_vec_vpopcnt (vuc);\n@@ -5728,37 +5732,37 @@\n   vull __builtin_vec_vpopcnt (vull);\n     VPOPCNTD  VPOPCNT_DEPR8\n \n-[VEC_VPOPCNTB, vec_vpopcntb, __builtin_vec_vpopcntb, _ARCH_PWR8]\n+[VEC_VPOPCNTB, vec_vpopcntb, __builtin_vec_vpopcntb]\n   vsc __builtin_vec_vpopcntb (vsc);\n     VPOPCNTB  VPOPCNTB_DEPR1\n   vuc __builtin_vec_vpopcntb (vuc);\n     VPOPCNTB  VPOPCNTB_DEPR2\n \n-[VEC_VPOPCNTD, vec_vpopcntd, __builtin_vec_vpopcntd, _ARCH_PWR8]\n+[VEC_VPOPCNTD, vec_vpopcntd, __builtin_vec_vpopcntd]\n   vsll __builtin_vec_vpopcntd (vsll);\n     VPOPCNTD  VPOPCNTD_DEPR1\n   vull __builtin_vec_vpopcntd (vull);\n     VPOPCNTD  VPOPCNTD_DEPR2\n \n-[VEC_VPOPCNTH, vec_vpopcnth, __builtin_vec_vpopcnth, _ARCH_PWR8]\n+[VEC_VPOPCNTH, vec_vpopcnth, __builtin_vec_vpopcnth]\n   vss __builtin_vec_vpopcnth (vss);\n     VPOPCNTH  VPOPCNTH_DEPR1\n   vus __builtin_vec_vpopcnth (vus);\n     VPOPCNTH  VPOPCNTH_DEPR2\n \n-[VEC_VPOPCNTW, vec_vpopcntw, __builtin_vec_vpopcntw, _ARCH_PWR8]\n+[VEC_VPOPCNTW, vec_vpopcntw, __builtin_vec_vpopcntw]\n   vsi __builtin_vec_vpopcntw (vsi);\n     VPOPCNTW  VPOPCNTW_DEPR1\n   vui __builtin_vec_vpopcntw (vui);\n     VPOPCNTW  VPOPCNTW_DEPR2\n \n-[VEC_VPRTYBD, vec_vprtybd, __builtin_vec_vprtybd, _ARCH_PWR9]\n+[VEC_VPRTYBD, vec_vprtybd, __builtin_vec_vprtybd]\n   vsll __builtin_vec_vprtybd (vsll);\n     VPRTYBD  VPRTYBD_DEPR1\n   vull __builtin_vec_vprtybd (vull);\n     VPRTYBD  VPRTYBD_DEPR2\n \n-[VEC_VPRTYBQ, vec_vprtybq, __builtin_vec_vprtybq, _ARCH_PPC64_PWR9]\n+[VEC_VPRTYBQ, vec_vprtybq, __builtin_vec_vprtybq]\n   vsq __builtin_vec_vprtybq (vsq);\n     VPRTYBQ  VPRTYBQ_DEPR1\n   vuq __builtin_vec_vprtybq (vuq);\n@@ -5768,7 +5772,7 @@\n   unsigned __int128 __builtin_vec_vprtybq (unsigned __int128);\n     VPRTYBQ  VPRTYBQ_DEPR4\n \n-[VEC_VPRTYBW, vec_vprtybw, __builtin_vec_vprtybw, _ARCH_PWR9]\n+[VEC_VPRTYBW, vec_vprtybw, __builtin_vec_vprtybw]\n   vsi __builtin_vec_vprtybw (vsi);\n     VPRTYBW  VPRTYBW_DEPR1\n   vui __builtin_vec_vprtybw (vui);\n@@ -5780,7 +5784,7 @@\n   vuc __builtin_vec_vrlb (vuc, vuc);\n     VRLB  VRLB_DEPR2\n \n-[VEC_VRLD, SKIP, __builtin_vec_vrld, _ARCH_PWR8]\n+[VEC_VRLD, SKIP, __builtin_vec_vrld]\n   vsll __builtin_vec_vrld (vsll, vull);\n     VRLD  VRLD_DEPR1\n   vull __builtin_vec_vrld (vull, vull);\n@@ -5804,7 +5808,7 @@\n   vuc __builtin_vec_vslb (vuc, vuc);\n     VSLB  VSLB_DEPR2\n \n-[VEC_VSLD, SKIP, __builtin_vec_vsld, _ARCH_PWR8]\n+[VEC_VSLD, SKIP, __builtin_vec_vsld]\n   vsll __builtin_vec_vsld (vsll, vull);\n     VSLD  VSLD_DEPR1\n   vull __builtin_vec_vsld (vull, vull);\n@@ -5856,7 +5860,7 @@\n   vuc __builtin_vec_vsrab (vuc, vuc);\n     VSRAB  VSRAB_DEPR2\n \n-[VEC_VSRAD, SKIP, __builtin_vec_vsrad, _ARCH_PWR8]\n+[VEC_VSRAD, SKIP, __builtin_vec_vsrad]\n   vsll __builtin_vec_vsrad (vsll, vull);\n     VSRAD  VSRAD_DEPR1\n   vull __builtin_vec_vsrad (vull, vull);\n@@ -5880,7 +5884,7 @@\n   vuc __builtin_vec_vsrb (vuc, vuc);\n     VSRB  VSRB_DEPR2\n \n-[VEC_VSRD, SKIP, __builtin_vec_vsrd, _ARCH_PWR8]\n+[VEC_VSRD, SKIP, __builtin_vec_vsrd]\n   vsll __builtin_vec_vsrd (vsll, vull);\n     VSRD  VSRD_DEPR1\n   vull __builtin_vec_vsrd (vull, vull);\n@@ -5898,27 +5902,27 @@\n   vui __builtin_vec_vsrw (vui, vui);\n     VSRW  VSRW_DEPR2\n \n-[VEC_VSTDCDP, scalar_test_data_class_dp, __builtin_vec_scalar_test_data_class_dp, _ARCH_PWR9]\n+[VEC_VSTDCDP, scalar_test_data_class_dp, __builtin_vec_scalar_test_data_class_dp]\n   unsigned int __builtin_vec_scalar_test_data_class_dp (double, const int);\n     VSTDCDP  VSTDCDP_DEPR1\n \n-[VEC_VSTDCNDP, scalar_test_neg_dp, __builtin_vec_scalar_test_neg_dp, _ARCH_PWR9]\n+[VEC_VSTDCNDP, scalar_test_neg_dp, __builtin_vec_scalar_test_neg_dp]\n   unsigned int __builtin_vec_scalar_test_neg_dp (double);\n     VSTDCNDP  VSTDCNDP_DEPR1\n \n-[VEC_VSTDCNQP, scalar_test_neg_qp, __builtin_vec_scalar_test_neg_qp, _ARCH_PWR9]\n+[VEC_VSTDCNQP, scalar_test_neg_qp, __builtin_vec_scalar_test_neg_qp]\n   unsigned int __builtin_vec_scalar_test_neg_qp (_Float128);\n     VSTDCNQP  VSTDCNQP_DEPR1\n \n-[VEC_VSTDCNSP, scalar_test_neg_sp, __builtin_vec_scalar_test_neg_sp, _ARCH_PWR9]\n+[VEC_VSTDCNSP, scalar_test_neg_sp, __builtin_vec_scalar_test_neg_sp]\n   unsigned int __builtin_vec_scalar_test_neg_sp (float);\n     VSTDCNSP  VSTDCNSP_DEPR1\n \n-[VEC_VSTDCQP, scalar_test_data_class_qp, __builtin_vec_scalar_test_data_class_qp, _ARCH_PWR9]\n+[VEC_VSTDCQP, scalar_test_data_class_qp, __builtin_vec_scalar_test_data_class_qp]\n   unsigned int __builtin_vec_scalar_test_data_class_qp (_Float128, const int);\n     VSTDCQP  VSTDCQP_DEPR1\n \n-[VEC_VSTDCSP, scalar_test_data_class_sp, __builtin_vec_scalar_test_data_class_sp, _ARCH_PWR9]\n+[VEC_VSTDCSP, scalar_test_data_class_sp, __builtin_vec_scalar_test_data_class_sp]\n   unsigned int __builtin_vec_scalar_test_data_class_sp (float, const int);\n     VSTDCSP  VSTDCSP_DEPR1\n \n@@ -5928,13 +5932,13 @@\n   vuq __builtin_vec_vsubcuq (vuq, vuq);\n     VSUBCUQ  VSUBCUQ_DEPR2\n \n-[VEC_VSUBECUQ, vec_vsubecuq, __builtin_vec_vsubecuq, ARCH_PWR8]\n+[VEC_VSUBECUQ, vec_vsubecuq, __builtin_vec_vsubecuq]\n   vsq __builtin_vec_vsubecuq (vsq, vsq, vsq);\n     VSUBECUQ  VSUBECUQ_DEPR1\n   vuq __builtin_vec_vsubecuq (vuq, vuq, vuq);\n     VSUBECUQ  VSUBECUQ_DEPR2\n \n-[VEC_VSUBEUQM, vec_vsubeuqm, __builtin_vec_vsubeuqm, _ARCH_PWR8]\n+[VEC_VSUBEUQM, vec_vsubeuqm, __builtin_vec_vsubeuqm]\n   vsq __builtin_vec_vsubeuqm (vsq, vsq, vsq);\n     VSUBEUQM  VSUBEUQM_DEPR1\n   vuq __builtin_vec_vsubeuqm (vuq, vuq, vuq);\n@@ -6004,7 +6008,7 @@\n   vuc __builtin_vec_vsububs (vuc, vbc);\n     VSUBUBS  VSUBUBS_DEPR8\n \n-[VEC_VSUBUDM, vec_vsubudm, __builtin_vec_vsubudm, _ARCH_PWR8]\n+[VEC_VSUBUDM, vec_vsubudm, __builtin_vec_vsubudm]\n   vsll __builtin_vec_vsubudm (vbll, vsll);\n     VSUBUDM  VSUBUDM_DEPR1\n   vsll __builtin_vec_vsubudm (vsll, vbll);\n@@ -6048,7 +6052,7 @@\n   vus __builtin_vec_vsubuhs (vus, vbs);\n     VSUBUHS  VSUBUHS_DEPR5\n \n-[VEC_VSUBUQM, vec_vsubuqm, __builtin_vec_vsubuqm, _ARCH_PWR8]\n+[VEC_VSUBUQM, vec_vsubuqm, __builtin_vec_vsubuqm]\n   vsq __builtin_vec_vsubuqm (vsq, vsq);\n     VSUBUQM  VSUBUQM_DEPR1\n   vuq __builtin_vec_vsubuqm (vuq, vuq);\n@@ -6096,11 +6100,11 @@\n   vui __builtin_vec_vsum4ubs (vuc, vui);\n     VSUM4UBS  VSUM4UBS_DEPR1\n \n-[VEC_VTDCDP, vec_test_data_class_dp, __builtin_vec_test_data_class_dp, _ARCH_PWR9]\n+[VEC_VTDCDP, vec_test_data_class_dp, __builtin_vec_test_data_class_dp]\n   vbll __builtin_vec_test_data_class_dp (vd, const int);\n     VTDCDP  VTDCDP_DEPR1\n \n-[VEC_VTDCSP, vec_test_data_class_sp, __builtin_vec_test_data_class_sp, _ARCH_PWR9]\n+[VEC_VTDCSP, vec_test_data_class_sp, __builtin_vec_test_data_class_sp]\n   vbi __builtin_vec_test_data_class_sp (vf, const int);\n     VTDCSP  VTDCSP_DEPR1\n \n@@ -6138,7 +6142,7 @@\n   vbi __builtin_vec_vupkhsh (vbs);\n     VUPKHSH  VUPKHSH_DEPR2\n \n-[VEC_VUPKHSW, vec_vupkhsw, __builtin_vec_vupkhsw, _ARCH_PWR8]\n+[VEC_VUPKHSW, vec_vupkhsw, __builtin_vec_vupkhsw]\n   vsll __builtin_vec_vupkhsw (vsi);\n     VUPKHSW  VUPKHSW_DEPR1\n   vbll __builtin_vec_vupkhsw (vbi);\n@@ -6162,7 +6166,7 @@\n   vbi __builtin_vec_vupklsh (vbs);\n     VUPKLSH  VUPKLSH_DEPR2\n \n-[VEC_VUPKLSW, vec_vupklsw, __builtin_vec_vupklsw, _ARCH_PWR8]\n+[VEC_VUPKLSW, vec_vupklsw, __builtin_vec_vupklsw]\n   vsll __builtin_vec_vupklsw (vsi);\n     VUPKLSW  VUPKLSW_DEPR1\n   vbll __builtin_vec_vupklsw (vbi);"}]}