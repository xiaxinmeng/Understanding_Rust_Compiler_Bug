{"sha": "040cc0718f8b93a667211eac1c95e86fc591c16f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQwY2MwNzE4ZjhiOTNhNjY3MjExZWFjMWM5NWU4NmZjNTkxYzE2Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-09-22T19:06:29Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-09-22T19:06:29Z"}, "message": "c-format.c (init_function_format_info): Check __builtin_printf and __builtin_fprintf even if -ffreestanding.\n\n\t* c-format.c (init_function_format_info): Check __builtin_printf\n\tand __builtin_fprintf even if -ffreestanding.  Check C99 functions\n\tin gnu89 mode.\n\ntestsuite:\n\t* gcc.dg/format/builtin-1.c, gcc.dg/format/ext-6.c: New tests.\n\nFrom-SVN: r45757", "tree": {"sha": "2b2e6635a5d2abc634d9e996e64c0528d5207f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b2e6635a5d2abc634d9e996e64c0528d5207f80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/040cc0718f8b93a667211eac1c95e86fc591c16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040cc0718f8b93a667211eac1c95e86fc591c16f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040cc0718f8b93a667211eac1c95e86fc591c16f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040cc0718f8b93a667211eac1c95e86fc591c16f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a67a813e4cea8aee736da0cf9d8dca10e8d880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a67a813e4cea8aee736da0cf9d8dca10e8d880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a67a813e4cea8aee736da0cf9d8dca10e8d880"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "5d4a9f7a4617be915fe6f5117ea94f4f76296301", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=040cc0718f8b93a667211eac1c95e86fc591c16f", "patch": "@@ -1,3 +1,9 @@\n+2001-09-22  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-format.c (init_function_format_info): Check __builtin_printf\n+\tand __builtin_fprintf even if -ffreestanding.  Check C99 functions\n+\tin gnu89 mode.\n+\n Sat Sep 22 09:09:32 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* c-common.c (format_attribute_table): Remove decl."}, {"sha": "e25c29e2a06709debb8e21f0393f16e3058fc2bb", "filename": "gcc/c-format.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=040cc0718f8b93a667211eac1c95e86fc591c16f", "patch": "@@ -325,17 +325,20 @@ static international_format_info *international_format_list = NULL;\n void\n init_function_format_info ()\n {\n+  /* __builtin functions should be checked unconditionally, even with\n+     -ffreestanding.  */\n+  record_function_format (get_identifier (\"__builtin_printf\"), NULL_TREE,\n+\t\t\t  printf_format_type, 1, 2);\n+  record_function_format (get_identifier (\"__builtin_fprintf\"), NULL_TREE,\n+\t\t\t  printf_format_type, 2, 3);\n+\n   if (flag_hosted)\n     {\n       /* Functions from ISO/IEC 9899:1990.  */\n       record_function_format (get_identifier (\"printf\"), NULL_TREE,\n \t\t\t      printf_format_type, 1, 2);\n-      record_function_format (get_identifier (\"__builtin_printf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 1, 2);\n       record_function_format (get_identifier (\"fprintf\"), NULL_TREE,\n \t\t\t      printf_format_type, 2, 3);\n-      record_function_format (get_identifier (\"__builtin_fprintf\"), NULL_TREE,\n-\t\t\t      printf_format_type, 2, 3);\n       record_function_format (get_identifier (\"sprintf\"), NULL_TREE,\n \t\t\t      printf_format_type, 2, 3);\n       record_function_format (get_identifier (\"scanf\"), NULL_TREE,\n@@ -354,7 +357,7 @@ init_function_format_info ()\n \t\t\t      strftime_format_type, 3, 0);\n     }\n \n-  if (flag_hosted && flag_isoc99)\n+  if (flag_hosted && (flag_isoc99 || flag_noniso_default_format_attributes))\n     {\n       /* ISO C99 adds the snprintf and vscanf family functions.  */\n       record_function_format (get_identifier (\"snprintf\"), NULL_TREE,"}, {"sha": "2d73c67a6d854e06750420b9a45829c883deda60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=040cc0718f8b93a667211eac1c95e86fc591c16f", "patch": "@@ -1,3 +1,7 @@\n+2001-09-22  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format/builtin-1.c, gcc.dg/format/ext-6.c: New tests.\n+\n 2001-09-22  George Helffrich  <george@geo.titech.ac.jp>\n \n \t* g77.dg/strlen0.f: New test."}, {"sha": "e128635b99acd951b81c73b3461677ed9f40e512", "filename": "gcc/testsuite/gcc.dg/format/builtin-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbuiltin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbuiltin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbuiltin-1.c?ref=040cc0718f8b93a667211eac1c95e86fc591c16f", "patch": "@@ -0,0 +1,17 @@\n+/* Test for format extensions.  Test that the __builtin functions get their\n+   default attributes even with -ffreestanding.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat -ffreestanding\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (int i)\n+{\n+  __builtin_fprintf (stdout, \"%d\", i);\n+  __builtin_fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"__builtin_fprintf\" } */\n+  __builtin_printf (\"%d\", i);\n+  __builtin_printf (\"%ld\", i); /* { dg-warning \"format\" \"__builtin_printf\" } */\n+}"}, {"sha": "a9653a1ea75580d9f2ad729290fde9297b3e9fd9", "filename": "gcc/testsuite/gcc.dg/format/ext-6.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040cc0718f8b93a667211eac1c95e86fc591c16f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-6.c?ref=040cc0718f8b93a667211eac1c95e86fc591c16f", "patch": "@@ -0,0 +1,43 @@\n+/* Test for format extensions.  Test that the C99 functions get their\n+   default attributes in gnu89 mode.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (int i, char *s, size_t n, int *ip, va_list v0, va_list v1, va_list v2,\n+     va_list v3, va_list v4, va_list v5, va_list v6, va_list v7, va_list v8,\n+     va_list v9, va_list v10, va_list v11, va_list v12, va_list v13)\n+{\n+  fprintf (stdout, \"%d\", i);\n+  fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf\" } */\n+  printf (\"%d\", i);\n+  printf (\"%ld\", i); /* { dg-warning \"format\" \"printf\" } */\n+  sprintf (s, \"%d\", i);\n+  sprintf (s, \"%ld\", i); /* { dg-warning \"format\" \"sprintf\" } */\n+  snprintf (s, n, \"%d\", i);\n+  snprintf (s, n, \"%ld\", i); /* { dg-warning \"format\" \"snprintf\" } */\n+  vfprintf (stdout, \"%d\", v0);\n+  vfprintf (stdout, \"%Y\", v1); /* { dg-warning \"format\" \"vfprintf\" } */\n+  vprintf (\"%d\", v2);\n+  vprintf (\"%Y\", v3); /* { dg-warning \"format\" \"vprintf\" } */\n+  vsprintf (s, \"%d\", v4);\n+  vsprintf (s, \"%Y\", v5); /* { dg-warning \"format\" \"vsprintf\" } */\n+  vsnprintf (s, n, \"%d\", v6);\n+  vsnprintf (s, n, \"%Y\", v7); /* { dg-warning \"format\" \"vsnprintf\" } */\n+  fscanf (stdin, \"%d\", ip);\n+  fscanf (stdin, \"%ld\", ip); /* { dg-warning \"format\" \"fscanf\" } */\n+  scanf (\"%d\", ip);\n+  scanf (\"%ld\", ip); /* { dg-warning \"format\" \"scanf\" } */\n+  sscanf (s, \"%d\", ip);\n+  sscanf (s, \"%ld\", ip); /* { dg-warning \"format\" \"sscanf\" } */\n+  vfscanf (stdin, \"%d\", v8);\n+  vfscanf (stdin, \"%Y\", v9); /* { dg-warning \"format\" \"vfscanf\" } */\n+  vscanf (\"%d\", v10);\n+  vscanf (\"%Y\", v11); /* { dg-warning \"format\" \"vscanf\" } */\n+  vsscanf (s, \"%d\", v12);\n+  vsscanf (s, \"%Y\", v13); /* { dg-warning \"format\" \"vsscanf\" } */\n+}"}]}