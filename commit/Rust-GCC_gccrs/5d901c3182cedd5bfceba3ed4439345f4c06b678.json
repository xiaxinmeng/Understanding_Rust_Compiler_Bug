{"sha": "5d901c3182cedd5bfceba3ed4439345f4c06b678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5MDFjMzE4MmNlZGQ1YmZjZWJhM2VkNDQzOTM0NWY0YzA2YjY3OA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-17T04:24:58Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-17T04:24:58Z"}, "message": "(convert_move): Don't call protect_from_queue.\n\n(emit_block_move): Protect SIZE.\n\nFrom-SVN: r1607", "tree": {"sha": "3fc95f8b7916836cd7d160c9bad191481e1a94d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc95f8b7916836cd7d160c9bad191481e1a94d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d901c3182cedd5bfceba3ed4439345f4c06b678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d901c3182cedd5bfceba3ed4439345f4c06b678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d901c3182cedd5bfceba3ed4439345f4c06b678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d901c3182cedd5bfceba3ed4439345f4c06b678/comments", "author": null, "committer": null, "parents": [{"sha": "b3d4e1b2a12a6a808ba480b063d5036b3ffe7379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d4e1b2a12a6a808ba480b063d5036b3ffe7379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d4e1b2a12a6a808ba480b063d5036b3ffe7379"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "e2c8197dc0a9bccc19332cdf429314df91b9bef0", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d901c3182cedd5bfceba3ed4439345f4c06b678/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d901c3182cedd5bfceba3ed4439345f4c06b678/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5d901c3182cedd5bfceba3ed4439345f4c06b678", "patch": "@@ -829,7 +829,10 @@ convert_move (to, from, unsignedp)\n    Both X and MODE may be floating, or both integer.\n    UNSIGNEDP is nonzero if X is an unsigned value.\n    This can be done by referring to a part of X in place\n-   or by copying to a new temporary with conversion.  */\n+   or by copying to a new temporary with conversion.\n+\n+   This function *must not* call protect_from_queue\n+   except when putting X into an insn (in which case convert_move does it).  */\n \n rtx\n convert_to_mode (mode, x, unsignedp)\n@@ -839,8 +842,6 @@ convert_to_mode (mode, x, unsignedp)\n {\n   register rtx temp;\n \n-  x = protect_from_queue (x, 0);\n-\n   if (mode == GET_MODE (x))\n     return x;\n \n@@ -1118,6 +1119,7 @@ emit_block_move (x, y, size, align)\n \n   x = protect_from_queue (x, 1);\n   y = protect_from_queue (y, 0);\n+  size = protect_from_queue (size, 0);\n \n   if (GET_CODE (x) != MEM)\n     abort ();\n@@ -1847,6 +1849,9 @@ emit_library_call (va_alist)\n \tval = convert_to_mode (DFmode, val), mode = DFmode;\n #endif\n \n+      /* There's no need to call protect_from_queue, because\n+\t either emit_move_insn or emit_push_insn will do that.  */\n+\n       /* Make sure it is a reasonable operand for a move or push insn.  */\n       if (GET_CODE (val) != REG && GET_CODE (val) != MEM\n \t  && ! (CONSTANT_P (val) && LEGITIMATE_CONSTANT_P (val)))"}]}