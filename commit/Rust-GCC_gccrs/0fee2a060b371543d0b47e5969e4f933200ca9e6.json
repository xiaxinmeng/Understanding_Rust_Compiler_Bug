{"sha": "0fee2a060b371543d0b47e5969e4f933200ca9e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlZTJhMDYwYjM3MTU0M2QwYjQ3ZTU5NjllNGY5MzMyMDBjYTllNg==", "commit": {"author": {"name": "Nala Ginrut", "email": "mulei@gnu.org", "date": "2020-05-18T12:44:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:13Z"}, "message": "Change rust-session-manager for resolution refactoring", "tree": {"sha": "9445e664334793642f614200078eac52a75290b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9445e664334793642f614200078eac52a75290b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fee2a060b371543d0b47e5969e4f933200ca9e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fee2a060b371543d0b47e5969e4f933200ca9e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fee2a060b371543d0b47e5969e4f933200ca9e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fee2a060b371543d0b47e5969e4f933200ca9e6/comments", "author": {"login": "NalaGinrut", "id": 19734, "node_id": "MDQ6VXNlcjE5NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/19734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NalaGinrut", "html_url": "https://github.com/NalaGinrut", "followers_url": "https://api.github.com/users/NalaGinrut/followers", "following_url": "https://api.github.com/users/NalaGinrut/following{/other_user}", "gists_url": "https://api.github.com/users/NalaGinrut/gists{/gist_id}", "starred_url": "https://api.github.com/users/NalaGinrut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NalaGinrut/subscriptions", "organizations_url": "https://api.github.com/users/NalaGinrut/orgs", "repos_url": "https://api.github.com/users/NalaGinrut/repos", "events_url": "https://api.github.com/users/NalaGinrut/events{/privacy}", "received_events_url": "https://api.github.com/users/NalaGinrut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0833b2d55e3fea376b47f4f260cf87b050d6a5e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0833b2d55e3fea376b47f4f260cf87b050d6a5e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0833b2d55e3fea376b47f4f260cf87b050d6a5e7"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "f840eb84ff76f143f03a934814a7c9950aad86d6", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2a060b371543d0b47e5969e4f933200ca9e6/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2a060b371543d0b47e5969e4f933200ca9e6/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=0fee2a060b371543d0b47e5969e4f933200ca9e6", "patch": "@@ -362,9 +362,9 @@ Session::enable_dump (::std::string arg)\n     {\n       options.dump_option = CompileOptions::EXPANSION_DUMP;\n     }\n-  else if (arg == \"name_resolution\")\n+  else if (arg == \"resolution\")\n     {\n-      options.dump_option = CompileOptions::NAME_RESOLUTION_DUMP;\n+      options.dump_option = CompileOptions::RESOLUTION_DUMP;\n     }\n   else if (arg == \"target_options\")\n     {\n@@ -449,8 +449,8 @@ Session::parse_file (const char *filename)\n    * injection)\n    *  - expansion (expands all macros, maybe build test harness, AST validation,\n    * maybe macro crate)\n-   *  - name resolution (name resolution, maybe feature checking, maybe buffered\n-   * lints)\n+   *  - resolution (name resolution, type resolution, maybe feature checking,\n+   * maybe buffered lints)\n    *  TODO not done */\n \n   fprintf (stderr, \"\\033[0;31mSUCCESSFULLY PARSED CRATE \\n\\033[0m\");\n@@ -485,11 +485,11 @@ Session::parse_file (const char *filename)\n       return;\n     }\n \n-  // name resolution pipeline stage\n-  name_resolution (parsed_crate);\n-  fprintf (stderr, \"\\033[0;31mSUCCESSFULLY FINISHED NAME RESOLUTION \\n\\033[0m\");\n+  // resolution pipeline stage\n+  resolution (parsed_crate);\n+  fprintf (stderr, \"\\033[0;31mSUCCESSFULLY FINISHED RESOLUTION \\n\\033[0m\");\n \n-  if (options.dump_option == CompileOptions::NAME_RESOLUTION_DUMP)\n+  if (options.dump_option == CompileOptions::RESOLUTION_DUMP)\n     {\n       // TODO: what do I dump here? resolved names? AST with resolved names?\n       return;\n@@ -750,10 +750,11 @@ Session::expansion (AST::Crate &crate ATTRIBUTE_UNUSED)\n }\n \n void\n-Session::name_resolution (AST::Crate &crate)\n+Session::resolution (AST::Crate &crate)\n {\n   fprintf (stderr, \"started name resolution\\n\");\n   Analysis::TopLevelScan toplevel (crate);\n+  // Name resolution must be in front of type resolution\n   Analysis::TypeResolution::ResolveNamesAndTypes (crate, toplevel);\n   fprintf (stderr, \"finished name resolution\\n\");\n }"}, {"sha": "11bece8a9dd837d56572efb39d275542b6ea4d63", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2a060b371543d0b47e5969e4f933200ca9e6/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2a060b371543d0b47e5969e4f933200ca9e6/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=0fee2a060b371543d0b47e5969e4f933200ca9e6", "patch": "@@ -162,6 +162,7 @@ struct CompileOptions\n     EXPANSION_DUMP,\n     NAME_RESOLUTION_DUMP,\n     TARGET_OPTION_DUMP,\n+    RESOLUTION_DUMP,\n     // TODO: add more?\n   } dump_option;\n \n@@ -225,11 +226,12 @@ struct Session\n    * macros, maybe build test harness in future, AST validation, maybe create\n    * macro crate (if not rustdoc).*/\n   void expansion (AST::Crate &crate);\n-  /* Name resolution pipeline stage. TODO maybe move to another object. Performs\n-   * name resolution, maybe complete gated feature checking, maybe create\n-   * buffered lints in future.\n+\n+  /* Resolution pipeline stage. TODO maybe move to another object.\n+   * Performs name resolution and type resolution, maybe complete gated\n+   * feature checking, maybe create buffered lints in future.\n    */\n-  void name_resolution (AST::Crate &crate);\n+  void resolution (AST::Crate &crate);\n };\n } // namespace Rust\n "}]}