{"sha": "ff27a429389d84c9f608070a2635898fb3077970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyN2E0MjkzODlkODRjOWY2MDgwNzBhMjYzNTg5OGZiMzA3Nzk3MA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-10T15:08:04Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-10T15:08:04Z"}, "message": "cse.c (cse_insn): Supply proper SUBREG_BYTE to simplify_gen_subreg.\n\n\t* cse.c (cse_insn): Supply proper SUBREG_BYTE to simplify_gen_subreg.\n\tGet mode from dest.\n\tIf simplify_gen_subreg fails, try next equivalent.\n\nFrom-SVN: r55368", "tree": {"sha": "5b69c0a87297e70404fde5602eb72fcc57841005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b69c0a87297e70404fde5602eb72fcc57841005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff27a429389d84c9f608070a2635898fb3077970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff27a429389d84c9f608070a2635898fb3077970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff27a429389d84c9f608070a2635898fb3077970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff27a429389d84c9f608070a2635898fb3077970/comments", "author": null, "committer": null, "parents": [{"sha": "e8fb2836999e79c87e36b0afea80d47b1ba3f306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fb2836999e79c87e36b0afea80d47b1ba3f306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fb2836999e79c87e36b0afea80d47b1ba3f306"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "58c05a1c0ef5a22840dd4356f9afd35fdcd157df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff27a429389d84c9f608070a2635898fb3077970/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff27a429389d84c9f608070a2635898fb3077970/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff27a429389d84c9f608070a2635898fb3077970", "patch": "@@ -1,3 +1,9 @@\n+Wed Jul 10 16:06:00 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* cse.c (cse_insn): Supply proper SUBREG_BYTE to simplify_gen_subreg.\n+\tGet mode from dest.\n+\tIf simplify_gen_subreg fails, try next equivalent.\n+\n 2002-07-09  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* diagnostic.h: #include location.h"}, {"sha": "afdc8daa8b03c38a349d2f3b779f001764d76d02", "filename": "gcc/cse.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff27a429389d84c9f608070a2635898fb3077970/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff27a429389d84c9f608070a2635898fb3077970/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=ff27a429389d84c9f608070a2635898fb3077970", "patch": "@@ -6196,14 +6196,29 @@ cse_insn (insn, libcall_insn)\n \t\trtx new_src = 0;\n \t\tunsigned src_hash;\n \t\tstruct table_elt *src_elt;\n+\t\tint byte = 0;\n \n \t\t/* Ignore invalid entries.  */\n \t\tif (GET_CODE (elt->exp) != REG\n \t\t    && ! exp_equiv_p (elt->exp, elt->exp, 1, 0))\n \t\t  continue;\n \n-\t\tnew_src\n-\t\t  = simplify_gen_subreg (new_mode, elt->exp, elt->mode, 0);\n+\t\t/* Calculate big endian correction for the SUBREG_BYTE\n+\t\t   (or equivalent).  We have already checked that M1\n+\t\t   ( GET_MODE (dest) ) is not narrower than M2 (new_mode).  */\n+\t\tif (BYTES_BIG_ENDIAN)\n+\t\t  byte = (GET_MODE_SIZE (GET_MODE (dest))\n+\t\t\t  - GET_MODE_SIZE (new_mode));\n+\t\tnew_src = simplify_gen_subreg (new_mode, elt->exp,\n+\t\t\t\t\t       GET_MODE (dest), byte);\n+\t\t/* The call to simplify_gen_subreg fails if the value\n+\t\t   is VOIDmode, yet we can't do any simplification, e.g.\n+\t\t   for EXPR_LISTs denoting function call results.\n+\t\t   It is invalid to construct a SUBREG with a VOIDmode\n+\t\t   SUBREG_REG, hence a zero new_src means we can't do\n+\t\t   this substitution.  */\n+\t\tif (! new_src)\n+\t\t  continue;\n \n \t\tsrc_hash = HASH (new_src, new_mode);\n \t\tsrc_elt = lookup (new_src, src_hash, new_mode);"}]}