{"sha": "37b8a73b503a6d664904f511618b71ca37b3f6c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiOGE3M2I1MDNhNmQ2NjQ5MDRmNTExNjE4YjcxY2EzN2IzZjZjMA==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2005-08-23T08:24:20Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2005-08-23T08:24:20Z"}, "message": "lambda-code.c (lambda_vector_lexico_pos): Moved...\n\n\t* lambda-code.c (lambda_vector_lexico_pos): Moved...\n\t* lambda.h (lambda_vector_lexico_pos): ... here.\n\t* tree-data-ref.c (build_classic_dist_vector): Return false when\n\tthe distance vector is lexicographically negative.\n\nFrom-SVN: r103392", "tree": {"sha": "519608c83e01fb34fcdea8849d3554eaca59bf38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519608c83e01fb34fcdea8849d3554eaca59bf38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b8a73b503a6d664904f511618b71ca37b3f6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b8a73b503a6d664904f511618b71ca37b3f6c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b8a73b503a6d664904f511618b71ca37b3f6c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b8a73b503a6d664904f511618b71ca37b3f6c0/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8f9416becbb4a98583e9cbd16a281b70a68938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce8f9416becbb4a98583e9cbd16a281b70a68938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce8f9416becbb4a98583e9cbd16a281b70a68938"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "a9275fac580a4f51038d50e52ed14e61fee34a01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8a73b503a6d664904f511618b71ca37b3f6c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8a73b503a6d664904f511618b71ca37b3f6c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b8a73b503a6d664904f511618b71ca37b3f6c0", "patch": "@@ -1,3 +1,10 @@\n+2005-08-23  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\t* lambda-code.c (lambda_vector_lexico_pos): Moved...\n+\t* lambda.h (lambda_vector_lexico_pos): ... here.\n+\t* tree-data-ref.c (build_classic_dist_vector): Return false when\n+\tthe distance vector is lexicographically negative.\n+\n 2005-08-23  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \tPR tree-optimization/23511"}, {"sha": "cf995a3f9f41df4131b00acb2837c07e2b4576d2", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8a73b503a6d664904f511618b71ca37b3f6c0/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8a73b503a6d664904f511618b71ca37b3f6c0/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=37b8a73b503a6d664904f511618b71ca37b3f6c0", "patch": "@@ -2010,27 +2010,6 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n   VEC_free (tree, heap, new_ivs);\n }\n \n-/* Returns true when the vector V is lexicographically positive, in\n-   other words, when the first nonzero element is positive.  */\n-\n-static bool\n-lambda_vector_lexico_pos (lambda_vector v, \n-\t\t\t  unsigned n)\n-{\n-  unsigned i;\n-  for (i = 0; i < n; i++)\n-    {\n-      if (v[i] == 0)\n-\tcontinue;\n-      if (v[i] < 0)\n-\treturn false;\n-      if (v[i] > 0)\n-\treturn true;\n-    }\n-  return true;\n-}\n-\n-\n /* Return TRUE if this is not interesting statement from the perspective of\n    determining if we have a perfect loop nest.  */\n "}, {"sha": "9855b6f73edd461827311cbe2401c9561e62d451", "filename": "gcc/lambda.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8a73b503a6d664904f511618b71ca37b3f6c0/gcc%2Flambda.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8a73b503a6d664904f511618b71ca37b3f6c0/gcc%2Flambda.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda.h?ref=37b8a73b503a6d664904f511618b71ca37b3f6c0", "patch": "@@ -376,5 +376,26 @@ print_lambda_vector (FILE * outfile, lambda_vector vector, int n)\n     fprintf (outfile, \"%3d \", vector[i]);\n   fprintf (outfile, \"\\n\");\n }\n+\n+/* Returns true when the vector V is lexicographically positive, in\n+   other words, when the first nonzero element is positive.  */\n+\n+static inline bool\n+lambda_vector_lexico_pos (lambda_vector v, \n+\t\t\t  unsigned n)\n+{\n+  unsigned i;\n+  for (i = 0; i < n; i++)\n+    {\n+      if (v[i] == 0)\n+\tcontinue;\n+      if (v[i] < 0)\n+\treturn false;\n+      if (v[i] > 0)\n+\treturn true;\n+    }\n+  return true;\n+}\n+\n #endif /* LAMBDA_H  */\n "}, {"sha": "d7a4253320c9343fadf61cf66264f1b8f49c9b91", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8a73b503a6d664904f511618b71ca37b3f6c0/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8a73b503a6d664904f511618b71ca37b3f6c0/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=37b8a73b503a6d664904f511618b71ca37b3f6c0", "patch": "@@ -3030,8 +3030,8 @@ subscript_dependence_tester (struct data_dependence_relation *ddr)\n    NB_LOOPS is the total number of loops we are considering.\n    FIRST_LOOP_DEPTH is the loop->depth of the first loop in the analyzed\n    loop nest.  \n-   Return FALSE if the dependence relation is outside of the loop nest\n-   starting at FIRST_LOOP_DEPTH. \n+   Return FALSE when fail to represent the data dependence as a distance\n+   vector.\n    Return TRUE otherwise.  */\n \n static bool\n@@ -3196,6 +3196,23 @@ build_classic_dist_vector (struct data_dependence_relation *ddr,\n   \n   DDR_DIST_VECT (ddr) = dist_v;\n   DDR_SIZE_VECT (ddr) = nb_loops;\n+\n+  /* Verify a basic constraint: classic distance vectors should always\n+     be lexicographically positive.  */\n+  if (!lambda_vector_lexico_pos (DDR_DIST_VECT (ddr),\n+\t\t\t\t DDR_SIZE_VECT (ddr)))\n+    {\n+      if (DDR_SIZE_VECT (ddr) == 1)\n+\t/* This one is simple to fix, and can be fixed.\n+\t   Multidimensional arrays cannot be fixed that simply.  */\n+\tlambda_vector_negate (DDR_DIST_VECT (ddr), DDR_DIST_VECT (ddr),\n+\t\t\t      DDR_SIZE_VECT (ddr));\n+      else\n+\t/* This is not valid: we need the delta test for properly\n+\t   fixing all this.  */\n+\treturn false;\n+    }\n+\n   return true;\n }\n "}]}