{"sha": "00ba7be81367fd082166105ab3e8b8f43d04051c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiYTdiZTgxMzY3ZmQwODIxNjYxMDVhYjNlOGI4ZjQzZDA0MDUxYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-27T16:43:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-27T16:43:29Z"}, "message": "[multiple changes]\n\n2014-01-27  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_smem.adb: Minor reformatting.\n\n2014-01-27  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-calfor.ads: Fix incorrect reference to operator \"-\" in comment.\n\n2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Make_Call_Into_Operator): In ASIS mode, relocate\n\tnodes for operands to the original node for the call, to preserve\n\tOriginal_Node pointers within the resolved operands, given that\n\tthey may have been rewritten as well. Previous approach copied\n\tthe operands into a new tree and lost those pointers.\n\n2014-01-27  Claire Dross  <dross@adacore.com>\n\n\n\t* a-cofove.adb, a-cofove.ads: Add Strict_Equal function to the API.\n\n2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Check_Internal_Protected_Use): A call through\n\tan anonymous access parameter of the current protected function\n\tis not a potential modification of the current object.\n\n2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cobove.adb (Reserve_Capacity): Procedure raises\n\tCapacity_Error, not Constraint_Error, when request cannot be\n\tsatisfied.\n\n2014-01-27  Vincent Celier  <celier@adacore.com>\n\n\t* a-coorma.adb, a-cohama.adb (Assign): Copy the Source to the Target,\n\tnot the Target to itself.\n\n2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_Concatenate): If the target of the\n\tconcatenation is a library-level entity, always use the off-line\n\tversion of concatenation, regardless of optimization level. This\n\tis space-efficient, and prevents linking problems when some\n\tunits are compiled with different optimization levels.\n\n2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb: Code clean up.\n\n2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch5.adb (P_Iterator_Specification): Improve error recovery\n\twhen an array or container iterator includes a subtype indication,\n\twhich is only legal in an element iterator.\n\nFrom-SVN: r207141", "tree": {"sha": "4afa06847d2f11a96343bc725c5145358cacf44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4afa06847d2f11a96343bc725c5145358cacf44c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00ba7be81367fd082166105ab3e8b8f43d04051c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ba7be81367fd082166105ab3e8b8f43d04051c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00ba7be81367fd082166105ab3e8b8f43d04051c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ba7be81367fd082166105ab3e8b8f43d04051c/comments", "author": null, "committer": null, "parents": [{"sha": "8fdafe44be001fa59172d7a28626d4babdc24b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fdafe44be001fa59172d7a28626d4babdc24b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fdafe44be001fa59172d7a28626d4babdc24b7b"}], "stats": {"total": 145, "additions": 130, "deletions": 15}, "files": [{"sha": "fc60f65b09d7ad0d9aa22e2f11643e94e4958734", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -1,3 +1,59 @@\n+2014-01-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_smem.adb: Minor reformatting.\n+\n+2014-01-27  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-calfor.ads: Fix incorrect reference to operator \"-\" in comment.\n+\n+2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Make_Call_Into_Operator): In ASIS mode, relocate\n+\tnodes for operands to the original node for the call, to preserve\n+\tOriginal_Node pointers within the resolved operands, given that\n+\tthey may have been rewritten as well. Previous approach copied\n+\tthe operands into a new tree and lost those pointers.\n+\n+2014-01-27  Claire Dross  <dross@adacore.com>\n+\n+\n+\t* a-cofove.adb, a-cofove.ads: Add Strict_Equal function to the API.\n+\n+2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Check_Internal_Protected_Use): A call through\n+\tan anonymous access parameter of the current protected function\n+\tis not a potential modification of the current object.\n+\n+2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cobove.adb (Reserve_Capacity): Procedure raises\n+\tCapacity_Error, not Constraint_Error, when request cannot be\n+\tsatisfied.\n+\n+2014-01-27  Vincent Celier  <celier@adacore.com>\n+\n+\t* a-coorma.adb, a-cohama.adb (Assign): Copy the Source to the Target,\n+\tnot the Target to itself.\n+\n+2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Concatenate): If the target of the\n+\tconcatenation is a library-level entity, always use the off-line\n+\tversion of concatenation, regardless of optimization level. This\n+\tis space-efficient, and prevents linking problems when some\n+\tunits are compiled with different optimization levels.\n+\n+2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb: Code clean up.\n+\n+2014-01-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch5.adb (P_Iterator_Specification): Improve error recovery\n+\twhen an array or container iterator includes a subtype indication,\n+\twhich is only legal in an element iterator.\n+\n 2014-01-27  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_ch7.adb: Minor reformatting."}, {"sha": "8cfd6a403dce580701884c2090d41888c3946fa3", "filename": "gcc/ada/a-calfor.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-calfor.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-calfor.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calfor.ads?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---         Copyright (C) 2005-2008, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2005-2013, Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT.  In accordance with the copyright of that document, you can freely --\n@@ -70,7 +70,7 @@ package Ada.Calendar.Formatting is\n       Sub_Second : Second_Duration := 0.0) return Day_Duration;\n    --  Returns a Day_Duration value for the combination of the given Hour,\n    --  Minute, Second, and Sub_Second. This value can be used in Ada.Calendar.\n-   --  Time_Of as well as the argument to Calendar.\"+\" and Calendar.\"\u2013\". If\n+   --  Time_Of as well as the argument to Calendar.\"+\" and Calendar.\"-\". If\n    --  Seconds_Of is called with a Sub_Second value of 1.0, the value returned\n    --  is equal to the value of Seconds_Of for the next second with a Sub_\n    --  Second value of 0.0."}, {"sha": "b2e75b58118e8e2dd22945065f48fe2d33a0ad64", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -2390,7 +2390,7 @@ package body Ada.Containers.Bounded_Vectors is\n    is\n    begin\n       if Capacity > Container.Capacity then\n-         raise Constraint_Error with \"Capacity is out of range\";\n+         raise Capacity_Error with \"Capacity is out of range\";\n       end if;\n    end Reserve_Capacity;\n "}, {"sha": "6789f712af8505da6143daa493537eb5aa47dde2", "filename": "gcc/ada/a-cofove.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-cofove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-cofove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -1506,6 +1506,19 @@ package body Ada.Containers.Formal_Vectors is\n       end;\n    end Set_Length;\n \n+   ------------------\n+   -- Strict_Equal --\n+   ------------------\n+\n+   function Strict_Equal (Left, Right : Vector) return Boolean is\n+   begin\n+      --  On bounded vectors, cursors are indexes. As a consequence, two\n+      --  vectors always have the same cursor at the same position and\n+      --  Strict_Equal is simply =\n+\n+      return Left = Right;\n+   end Strict_Equal;\n+\n    ----------\n    -- Swap --\n    ----------"}, {"sha": "2c451fb8ebcdb79be708a2962f820590e9498576", "filename": "gcc/ada/a-cofove.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.ads?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -45,8 +45,9 @@\n --    which is not possible if cursors encapsulate an access to the underlying\n --    container.\n \n---    There are two new functions:\n+--    There are three new functions:\n \n+--      function Strict_Equal (Left, Right : Vector) return Boolean;\n --      function Left  (Container : Vector; Position : Cursor) return Vector;\n --      function Right (Container : Vector; Position : Cursor) return Vector;\n \n@@ -349,6 +350,11 @@ package Ada.Containers.Formal_Vectors is\n \n    end Generic_Sorting;\n \n+   function Strict_Equal (Left, Right : Vector) return Boolean;\n+   --  Strict_Equal returns True if the containers are physically equal, i.e.\n+   --  they are structurally equal (function \"=\" returns True) and that they\n+   --  have the same set of cursors.\n+\n    function Left (Container : Vector; Position : Cursor) return Vector with\n      Pre => Has_Element (Container, Position) or else Position = No_Element;\n    function Right (Container : Vector; Position : Cursor) return Vector with"}, {"sha": "0616f4373ba3df5bc67b5b84117626d094a7f71f", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -167,7 +167,7 @@ package body Ada.Containers.Hashed_Maps is\n          Target.Reserve_Capacity (Source.Length);\n       end if;\n \n-      Insert_Items (Target.HT);\n+      Insert_Items (Source.HT);\n    end Assign;\n \n    --------------"}, {"sha": "e451ec628ffac7e670d692093f6350fe3cedab74", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -274,7 +274,7 @@ package body Ada.Containers.Ordered_Maps is\n       end if;\n \n       Target.Clear;\n-      Insert_Items (Target.Tree);\n+      Insert_Items (Source.Tree);\n    end Assign;\n \n    -------------"}, {"sha": "d0288b2dd2042289c8c3c54069b8072aa4d6efc6", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -3043,6 +3043,16 @@ package body Exp_Ch4 is\n \n       --  Local Declarations\n \n+      Lib_Level_Target : constant Boolean :=\n+        Nkind (Parent (Cnode)) = N_Object_Declaration\n+          and then\n+            Is_Library_Level_Entity (Defining_Identifier (Parent (Cnode)));\n+\n+      --  If the concatenation declares a library level entity, we call the\n+      --  built-in concatenation routines to prevent code bloat, regardless\n+      --  of optimization level. This is space-efficient, and prevent linking\n+      --  problems when units are compiled with different optimizations.\n+\n       Opnd_Typ : Entity_Id;\n       Ent      : Entity_Id;\n       Len      : Uint;\n@@ -3571,8 +3581,10 @@ package body Exp_Ch4 is\n \n       if Atyp = Standard_String\n         and then NN in 2 .. 9\n-        and then (Opt.Optimization_Level = 0 or else Debug_Flag_Dot_CC)\n-        and then not Debug_Flag_Dot_C\n+        and then (Lib_Level_Target\n+          or else\n+            ((Opt.Optimization_Level = 0 or else Debug_Flag_Dot_CC)\n+               and then not Debug_Flag_Dot_C))\n       then\n          declare\n             RR : constant array (Nat range 2 .. 9) of RE_Id :="}, {"sha": "8ee67027421d84622b0e01c6905ef6e97f521d55", "filename": "gcc/ada/exp_smem.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fexp_smem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fexp_smem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_smem.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -195,7 +195,7 @@ package body Exp_Smem is\n    procedure Add_Write_After (N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n       Ent : constant Entity_Id  := Entity (N);\n-      Par : constant Node_Id := Insert_Node;\n+      Par : constant Node_Id    := Insert_Node;\n    begin\n       if Present (Shared_Var_Procs_Instance (Ent)) then\n          if Nkind (Insert_Node) = N_Function_Call then"}, {"sha": "bf28e23bb9d81d76129de10a3dc68c93bfba74bc", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -1736,6 +1736,19 @@ package body Ch5 is\n       elsif Token = Tok_In then\n          Scan;  --  past IN\n \n+      elsif Prev_Token = Tok_In\n+        and then Present (Subtype_Indication (Node1))\n+      then\n+\n+         --  Simplest recovery is to transform it into an element iterator.\n+         --  Error message on 'in\" has already been emitted when parsing the\n+         --  optional constraint.\n+\n+         Set_Of_Present (Node1);\n+         Error_Msg_N\n+           (\"subtype indication is only legal on on element iterator\",\n+              Subtype_Indication (Node1));\n+\n       else\n          return Error;\n       end if;"}, {"sha": "590d8ab178803f8a6a6b01da624e0404b20c6ea9", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -1814,7 +1814,7 @@ package body Sem_Ch5 is\n             Set_Etype (Def_Id, Component_Type (Typ));\n \n             if Present (Subt)\n-              and then Bas /= Base_Type (Component_Type (Typ))\n+              and then Base_Type (Bas) /= Base_Type (Component_Type (Typ))\n             then\n                Error_Msg_N\n                  (\"subtype indication does not match component type\", Subt);"}, {"sha": "7e2e55cff7414e7489820b5e1344e3092ba2221a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -1585,17 +1585,20 @@ package body Sem_Res is\n \n       --  If in ASIS_Mode, propagate operand types to original actuals of\n       --  function call, which would otherwise not be fully resolved. If\n-      --  the call has already been constant-folded, nothing to do.\n+      --  the call has already been constant-folded, nothing to do. We\n+      --  relocate the operand nodes rather than copy them, to preserve\n+      --  original_node pointers, given that the operands themselves may\n+      --  have been rewritten.\n \n       if ASIS_Mode and then Nkind (N) in N_Op then\n          if Is_Binary then\n             Rewrite (First (Parameter_Associations (Original_Node (N))),\n-               New_Copy_Tree (Left_Opnd (N)));\n+               Relocate_Node (Left_Opnd (N)));\n             Rewrite (Next (First (Parameter_Associations (Original_Node (N)))),\n-               New_Copy_Tree (Right_Opnd (N)));\n+               Relocate_Node (Right_Opnd (N)));\n          else\n             Rewrite (First (Parameter_Associations (Original_Node (N))),\n-               New_Copy_Tree (Right_Opnd (N)));\n+               Relocate_Node (Right_Opnd (N)));\n          end if;\n \n          Set_Parent (Original_Node (N), Parent (N));"}, {"sha": "284872bfc538d3094187650b9e9b175c418fbbf1", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ba7be81367fd082166105ab3e8b8f43d04051c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=00ba7be81367fd082166105ab3e8b8f43d04051c", "patch": "@@ -2240,7 +2240,19 @@ package body Sem_Util is\n       end loop;\n \n       if Scope (Nam) = Prot and then Ekind (Nam) /= E_Function then\n-         if Nkind (N) = N_Subprogram_Renaming_Declaration then\n+\n+         --  An indirect function call (e.g. a callback within a protected\n+         --  function body) is not statically illegal. If the access type is\n+         --  anonymous and is the type of an access parameter, the scope of Nam\n+         --  will be the protected type, but it is not a protected operation.\n+\n+         if Ekind (Nam) = E_Subprogram_Type\n+           and then\n+             Nkind (Associated_Node_For_Itype (Nam)) = N_Function_Specification\n+         then\n+            null;\n+\n+         elsif Nkind (N) = N_Subprogram_Renaming_Declaration then\n             Error_Msg_N\n               (\"within protected function cannot use protected \"\n                & \"procedure in renaming or as generic actual\", N);"}]}