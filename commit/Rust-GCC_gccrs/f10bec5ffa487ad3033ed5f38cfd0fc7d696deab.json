{"sha": "f10bec5ffa487ad3033ed5f38cfd0fc7d696deab", "node_id": "C_kwDOANBUbNoAKGYxMGJlYzVmZmE0ODdhZDMwMzNlZDVmMzhjZmQwZmM3ZDY5NmRlYWI", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2022-01-31T14:28:42Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2022-01-31T14:33:34Z"}, "message": "libiberty: Fix infinite recursion in rust demangler.\n\nlibiberty/\n\tPR demangler/98886\n\tPR demangler/99935\n\t* rust-demangle.c (struct rust_demangler): Add a recursion\n\tcounter.\n\t(demangle_path): Increment/decrement the recursion counter upon\n\tentry and exit.  Fail if the counter exceeds a fixed limit.\n\t(demangle_type): Likewise.\n\t(rust_demangle_callback): Initialise the recursion counter,\n\tdisabling if requested by the option flags.", "tree": {"sha": "4362eedc5d16bfbfc4d9d6c54976cdef1a47b196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4362eedc5d16bfbfc4d9d6c54976cdef1a47b196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10bec5ffa487ad3033ed5f38cfd0fc7d696deab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10bec5ffa487ad3033ed5f38cfd0fc7d696deab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10bec5ffa487ad3033ed5f38cfd0fc7d696deab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10bec5ffa487ad3033ed5f38cfd0fc7d696deab/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c155c893954040236832e80756ba79cca61185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c155c893954040236832e80756ba79cca61185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c155c893954040236832e80756ba79cca61185"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "3b24d63892a9732f335860140e481c7bd696fe2f", "filename": "libiberty/rust-demangle.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10bec5ffa487ad3033ed5f38cfd0fc7d696deab/libiberty%2Frust-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10bec5ffa487ad3033ed5f38cfd0fc7d696deab/libiberty%2Frust-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frust-demangle.c?ref=f10bec5ffa487ad3033ed5f38cfd0fc7d696deab", "patch": "@@ -74,6 +74,12 @@ struct rust_demangler\n   /* Rust mangling version, with legacy mangling being -1. */\n   int version;\n \n+  /* Recursion depth.  */\n+  unsigned int recursion;\n+  /* Maximum number of times demangle_path may be called recursively.  */\n+#define RUST_MAX_RECURSION_COUNT  1024\n+#define RUST_NO_RECURSION_LIMIT   ((unsigned int) -1)\n+\n   uint64_t bound_lifetime_depth;\n };\n \n@@ -671,6 +677,15 @@ demangle_path (struct rust_demangler *rdm, int in_value)\n   if (rdm->errored)\n     return;\n \n+  if (rdm->recursion != RUST_NO_RECURSION_LIMIT)\n+    {\n+      ++ rdm->recursion;\n+      if (rdm->recursion > RUST_MAX_RECURSION_COUNT)\n+\t/* FIXME: There ought to be a way to report\n+\t   that the recursion limit has been reached.  */\n+\tgoto fail_return;\n+    }\n+\n   switch (tag = next (rdm))\n     {\n     case 'C':\n@@ -688,10 +703,7 @@ demangle_path (struct rust_demangler *rdm, int in_value)\n     case 'N':\n       ns = next (rdm);\n       if (!ISLOWER (ns) && !ISUPPER (ns))\n-        {\n-          rdm->errored = 1;\n-          return;\n-        }\n+\tgoto fail_return;\n \n       demangle_path (rdm, in_value);\n \n@@ -776,9 +788,15 @@ demangle_path (struct rust_demangler *rdm, int in_value)\n         }\n       break;\n     default:\n-      rdm->errored = 1;\n-      return;\n+      goto fail_return;\n     }\n+  goto pass_return;\n+\n+ fail_return:\n+  rdm->errored = 1;\n+ pass_return:\n+  if (rdm->recursion != RUST_NO_RECURSION_LIMIT)\n+    -- rdm->recursion;\n }\n \n static void\n@@ -870,6 +888,19 @@ demangle_type (struct rust_demangler *rdm)\n       return;\n     }\n \n+   if (rdm->recursion != RUST_NO_RECURSION_LIMIT)\n+    {\n+      ++ rdm->recursion;\n+      if (rdm->recursion > RUST_MAX_RECURSION_COUNT)\n+\t/* FIXME: There ought to be a way to report\n+\t   that the recursion limit has been reached.  */\n+\t{\n+\t  rdm->errored = 1;\n+\t  -- rdm->recursion;\n+\t  return;\n+\t}\n+    }\n+\n   switch (tag)\n     {\n     case 'R':\n@@ -1030,6 +1061,9 @@ demangle_type (struct rust_demangler *rdm)\n       rdm->next--;\n       demangle_path (rdm, 0);\n     }\n+\n+  if (rdm->recursion != RUST_NO_RECURSION_LIMIT)\n+    -- rdm->recursion;\n }\n \n /* A trait in a trait object may have some \"existential projections\"\n@@ -1320,6 +1354,7 @@ rust_demangle_callback (const char *mangled, int options,\n   rdm.skipping_printing = 0;\n   rdm.verbose = (options & DMGL_VERBOSE) != 0;\n   rdm.version = 0;\n+  rdm.recursion = (options & DMGL_NO_RECURSE_LIMIT) ? RUST_NO_RECURSION_LIMIT : 0;\n   rdm.bound_lifetime_depth = 0;\n \n   /* Rust symbols always start with _R (v0) or _ZN (legacy). */"}]}