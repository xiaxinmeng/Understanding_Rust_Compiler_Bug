{"sha": "d1af2f668fb0fca982183265e1a56e23d4f25fa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhZjJmNjY4ZmIwZmNhOTgyMTgzMjY1ZTFhNTZlMjNkNGYyNWZhOA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-08-28T00:25:50Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-08-28T00:25:50Z"}, "message": "PR tree-optimization/86914 - wrong code with strlen() of poor-man's flexible array member plus offset\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/86914\n\t* tree-ssa-strlen.c (maybe_set_strlen_range): Avoid MEM_REF.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/86914\n\t* gcc.dg/strlenopt-57.c: New test.\n\nFrom-SVN: r263905", "tree": {"sha": "dda636af1797625923bd2ed2310ed569091e2033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dda636af1797625923bd2ed2310ed569091e2033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1af2f668fb0fca982183265e1a56e23d4f25fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1af2f668fb0fca982183265e1a56e23d4f25fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1af2f668fb0fca982183265e1a56e23d4f25fa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1af2f668fb0fca982183265e1a56e23d4f25fa8/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37223543da6e58eb12b19611b5f20dd5a1fec39e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37223543da6e58eb12b19611b5f20dd5a1fec39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37223543da6e58eb12b19611b5f20dd5a1fec39e"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "4cbea7a195dd7219a1487099da9751a06b5e52c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1af2f668fb0fca982183265e1a56e23d4f25fa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1af2f668fb0fca982183265e1a56e23d4f25fa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1af2f668fb0fca982183265e1a56e23d4f25fa8", "patch": "@@ -1,3 +1,8 @@\n+2018-08-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86914\n+\t* tree-ssa-strlen.c (maybe_set_strlen_range): Avoid MEM_REF.\n+\n 2018-08-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/87112"}, {"sha": "4b5c1533c33453fdbe1bc3a74d1c02fa07f8866b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1af2f668fb0fca982183265e1a56e23d4f25fa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1af2f668fb0fca982183265e1a56e23d4f25fa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1af2f668fb0fca982183265e1a56e23d4f25fa8", "patch": "@@ -1,3 +1,8 @@\n+2018-08-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86914\n+\t* gcc.dg/strlenopt-57.c: New test.\n+\n 2018-08-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/87112"}, {"sha": "49dc8cd6fbbfecf50a7d289714bd56f91672f6b8", "filename": "gcc/testsuite/gcc.dg/strlenopt-57.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1af2f668fb0fca982183265e1a56e23d4f25fa8/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1af2f668fb0fca982183265e1a56e23d4f25fa8/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-57.c?ref=d1af2f668fb0fca982183265e1a56e23d4f25fa8", "patch": "@@ -0,0 +1,49 @@\n+/* PR tree-optimization/86914 - wrong code with strlen() of poor-man's\n+   flexible array member plus offset\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+#include \"strlenopt.h\"\n+\n+struct A0 { char i, a[0]; };\n+struct A1 { char i, a[1]; };\n+struct A9 { char i, a[9]; };\n+struct Ax { char i, a[]; };\n+\n+extern int a[];\n+\n+extern struct A0 a0;\n+extern struct A1 a1;\n+extern struct A9 a9;\n+extern struct Ax ax;\n+\n+void test_var_flexarray_cst_off (void)\n+{\n+  /* Use arbitrary constants greater than 16 in case GCC ever starts\n+     unrolling strlen() calls with small array arguments.  */\n+  a[0] = 17 < strlen (a0.a + 1);\n+  a[1] = 19 < strlen (a1.a + 1);\n+  a[2] = 23 < strlen (a9.a + 9);\n+  a[3] = 29 < strlen (ax.a + 3);\n+}\n+\n+void test_ptr_flexarray_cst_off (struct A0 *p0, struct A1 *p1,\n+\t\t\t\t struct A9 *p9, struct Ax *px)\n+{\n+  a[0] = 17 < strlen (p0->a + 1);\n+  a[1] = 19 < strlen (p1->a + 1);\n+  a[2] = 23 < strlen (p9->a + 9);\n+  a[3] = 29 < strlen (px->a + 3);\n+}\n+\n+void test_ptr_flexarray_var_off (struct A0 *p0, struct A1 *p1,\n+\t\t\t\t struct A9 *p9, struct Ax *px,\n+\t\t\t\t int i)\n+{\n+  a[0] = 17 < strlen (p0->a + i);\n+  a[1] = 19 < strlen (p1->a + i);\n+  a[2] = 23 < strlen (p9->a + i);\n+  a[3] = 29 < strlen (px->a + i);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen\" 12 \"optimized\" } } */"}, {"sha": "84e61526f94f45c445dcd96335dc724b3dbf040a", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1af2f668fb0fca982183265e1a56e23d4f25fa8/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1af2f668fb0fca982183265e1a56e23d4f25fa8/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=d1af2f668fb0fca982183265e1a56e23d4f25fa8", "patch": "@@ -1160,7 +1160,9 @@ maybe_set_strlen_range (tree lhs, tree src, tree bound)\n \t suggests if it's treated as a poor-man's flexible array member.  */\n       src = TREE_OPERAND (src, 0);\n       bool src_is_array = TREE_CODE (TREE_TYPE (src)) == ARRAY_TYPE;\n-      if (src_is_array && !array_at_struct_end_p (src))\n+      if (src_is_array\n+\t  && TREE_CODE (src) != MEM_REF\n+\t  && !array_at_struct_end_p (src))\n \t{\n \t  tree type = TREE_TYPE (src);\n \t  if (tree size = TYPE_SIZE_UNIT (type))"}]}