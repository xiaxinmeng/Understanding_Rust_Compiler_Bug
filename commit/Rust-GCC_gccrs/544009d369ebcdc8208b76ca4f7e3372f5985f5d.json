{"sha": "544009d369ebcdc8208b76ca4f7e3372f5985f5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ0MDA5ZDM2OWViY2RjODIwOGI3NmNhNGY3ZTMzNzJmNTk4NWY1ZA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-17T18:07:45Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-17T18:07:45Z"}, "message": "aarch64-builtins.c (TYPES_CREATE): Remove.\n\ngcc/:\n\n\t* config/aarch64/aarch64-builtins.c (TYPES_CREATE): Remove.\n\t* config/aarch64/aarch64-simd-builtins.def (create): Remove.\n\t* config/aarch64/aarch64-simd.md (aarch64_create<mode>): Remove.\n\t* config/aarch64/arm_neon.h (vcreate_f64, vreinterpret_f64_s64,\n\tvreinterpret_f64_u64): Replace __builtin_aarch64_createv1df with C casts.\n\t* config/aarch64/iterators.md (VD1): Remove.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/simd/vfma_f64.c: Add asm volatile memory.\n\t* gcc.target/aarch64/simd/vfms_f64.c: Likewise.\n\nFrom-SVN: r217662", "tree": {"sha": "1b7f53cb9ef318054c6512eddd8fb1f9d133b8ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b7f53cb9ef318054c6512eddd8fb1f9d133b8ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/544009d369ebcdc8208b76ca4f7e3372f5985f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544009d369ebcdc8208b76ca4f7e3372f5985f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544009d369ebcdc8208b76ca4f7e3372f5985f5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544009d369ebcdc8208b76ca4f7e3372f5985f5d/comments", "author": null, "committer": null, "parents": [{"sha": "fac06b36ac184615c8d00305f59b3ce9892edfed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac06b36ac184615c8d00305f59b3ce9892edfed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac06b36ac184615c8d00305f59b3ce9892edfed"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "d661ec12cf67a50d36227fbb7ee4fa0c1b1756ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -1,3 +1,12 @@\n+2014-11-17  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (TYPES_CREATE): Remove.\n+\t* config/aarch64/aarch64-simd-builtins.def (create): Remove.\n+\t* config/aarch64/aarch64-simd.md (aarch64_create<mode>): Remove.\n+\t* config/aarch64/arm_neon.h (vcreate_f64, vreinterpret_f64_s64,\n+\tvreinterpret_f64_u64): Replace __builtin_aarch64_createv1df with C casts.\n+\t* config/aarch64/iterators.md (VD1): Remove.\n+\n 2014-11-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-cores.def (cortex-a53): Remove"}, {"sha": "2637c71c3f47f4c8210923925ba7d975ffd3f012", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -138,7 +138,6 @@ static enum aarch64_type_qualifiers\n aarch64_types_unopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned };\n #define TYPES_UNOPU (aarch64_types_unopu_qualifiers)\n-#define TYPES_CREATE (aarch64_types_unop_qualifiers)\n static enum aarch64_type_qualifiers\n aarch64_types_binop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_maybe_immediate };"}, {"sha": "545c7da935e1338951c006c71e29a921c5613f33", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -39,7 +39,6 @@\n    1-9 - CODE_FOR_<name><mode><1-9>\n    10 - CODE_FOR_<name><mode>.  */\n \n-  BUILTIN_VD1 (CREATE, create, 0)\n   BUILTIN_VDC (COMBINE, combine, 0)\n   BUILTIN_VB (BINOP, pmul, 0)\n   BUILTIN_VDQF (UNOP, sqrt, 2)"}, {"sha": "148567b3b4407cfa4016ca910912a1a0546fa962", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -2327,16 +2327,6 @@\n \n ;; Patterns for AArch64 SIMD Intrinsics.\n \n-(define_expand \"aarch64_create<mode>\"\n-  [(match_operand:VD1 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"general_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  rtx src = gen_lowpart (<MODE>mode, operands[1]);\n-  emit_move_insn (operands[0], src);\n-  DONE;\n-})\n-\n ;; Lane extraction with sign extension to general purpose register.\n (define_insn \"*aarch64_get_lane_extend<GPI:mode><VDQQH:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")"}, {"sha": "6200f62569417530e909f8da635ed8e6eee90698", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -2638,7 +2638,7 @@ vcreate_u64 (uint64_t __a)\n __extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n vcreate_f64 (uint64_t __a)\n {\n-  return __builtin_aarch64_createv1df (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n@@ -3238,7 +3238,7 @@ vreinterpret_f64_s32 (int32x2_t __a)\n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_s64 (int64x1_t __a)\n {\n-  return __builtin_aarch64_createv1df ((uint64_t) vget_lane_s64 (__a, 0));\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n@@ -3262,7 +3262,7 @@ vreinterpret_f64_u32 (uint32x2_t __a)\n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_u64 (uint64x1_t __a)\n {\n-  return __builtin_aarch64_createv1df (vget_lane_u64 (__a, 0));\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x2_t __attribute__((__always_inline__))"}, {"sha": "7dd39179be76f38738b4b57051777cd8e440cee4", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -147,9 +147,6 @@\n ;; Double vector modes for combines.\n (define_mode_iterator VDIC [V8QI V4HI V2SI])\n \n-;; Double vector modes inc V1DF\n-(define_mode_iterator VD1 [V8QI V4HI V2SI V2SF V1DF])\n-\n ;; Vector modes except double int.\n (define_mode_iterator VDQIF [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF V2DF])\n "}, {"sha": "6c25013c34a06047cc9a93bd38321a40b987584a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -1,3 +1,8 @@\n+2014-11-17  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vfma_f64.c: Add asm volatile memory.\n+\t* gcc.target/aarch64/simd/vfms_f64.c: Likewise.\n+\n 2014-11-17  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* gcc.target/i386/chkp-strlen-1.c: New."}, {"sha": "8083d2c0d68cd9da07ff8235f6cd5c7549d0571a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vfma_f64.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -7,6 +7,10 @@\n \n #define EPS 1.0e-15\n \n+#define INHIB_OPT(x) asm volatile (\"mov %d0, %1.d[0]\"\t\\\n+\t\t\t\t   : \"=w\"(x)\t\t\\\n+\t\t\t\t   : \"w\"(x)\t\t\\\n+\t\t\t\t   : /* No clobbers. */);\n \n extern void abort (void);\n \n@@ -24,6 +28,10 @@ main (void)\n   arg2 = vcreate_f64 (0x3fa88480812d6670ULL);\n   arg3 = vcreate_f64 (0x3fd5791ae2a92572ULL);\n \n+  INHIB_OPT (arg1);\n+  INHIB_OPT (arg2);\n+  INHIB_OPT (arg3);\n+\n   expected = 0.6280448184360076;\n   actual = vget_lane_f64 (vfma_f64 (arg1, arg2, arg3), 0);\n "}, {"sha": "ede140d75386faf91a038f3b59b7686d0a568ab2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vfms_f64.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544009d369ebcdc8208b76ca4f7e3372f5985f5d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c?ref=544009d369ebcdc8208b76ca4f7e3372f5985f5d", "patch": "@@ -7,6 +7,10 @@\n \n #define EPS 1.0e-15\n \n+#define INHIB_OPT(x) asm volatile (\"mov %d0, %1.d[0]\"   \\\n+                                   : \"=w\"(x)           \\\n+                                   : \"w\"(x)            \\\n+                                   : /* No clobbers. */);\n \n extern void abort (void);\n \n@@ -24,6 +28,10 @@ main (void)\n   arg2 = vcreate_f64 (0x3fe6b78680fa29ceULL);\n   arg3 = vcreate_f64 (0x3feea3cbf921fbe0ULL);\n \n+  INHIB_OPT (arg1);\n+  INHIB_OPT (arg2);\n+  INHIB_OPT (arg3);\n+\n   expected = 4.4964705746355915e-2;\n   actual = vget_lane_f64 (vfms_f64 (arg1, arg2, arg3), 0);\n "}]}