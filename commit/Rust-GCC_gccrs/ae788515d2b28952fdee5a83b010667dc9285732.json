{"sha": "ae788515d2b28952fdee5a83b010667dc9285732", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU3ODg1MTVkMmIyODk1MmZkZWU1YTgzYjAxMDY2N2RjOTI4NTczMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-11-14T11:24:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-11-14T11:24:47Z"}, "message": "re PR tree-optimization/45722 (FAIL: gcc.c-torture/execute/20040709-2.c execution at -O1 and -Os)\n\n\tPR tree-optimization/45722\n\t* tree-sra.c (build_ref_for_model): Always build a COMPONENT_REF if\n\tthis is a reference to a component.\n\t* ipa-prop.c (ipa_get_member_ptr_load_param): Accept COMPONENT_REF.\n\t(ipa_note_param_call): Adjust comment.\n\nFrom-SVN: r166731", "tree": {"sha": "97e1975467157f9597f21ef3b60596ea692c84ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97e1975467157f9597f21ef3b60596ea692c84ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae788515d2b28952fdee5a83b010667dc9285732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae788515d2b28952fdee5a83b010667dc9285732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae788515d2b28952fdee5a83b010667dc9285732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae788515d2b28952fdee5a83b010667dc9285732/comments", "author": null, "committer": null, "parents": [{"sha": "8926bd5d5c308154694122957e2a54c965ebee08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8926bd5d5c308154694122957e2a54c965ebee08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8926bd5d5c308154694122957e2a54c965ebee08"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "d4793931a3721c8214a458720ffd4d071d6726e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae788515d2b28952fdee5a83b010667dc9285732/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae788515d2b28952fdee5a83b010667dc9285732/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae788515d2b28952fdee5a83b010667dc9285732", "patch": "@@ -1,3 +1,11 @@\n+2010-11-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/45722\n+\t* tree-sra.c (build_ref_for_model): Always build a COMPONENT_REF if\n+\tthis is a reference to a component.\n+\t* ipa-prop.c (ipa_get_member_ptr_load_param): Accept COMPONENT_REF.\n+\t(ipa_note_param_call): Adjust comment.\n+\n 2010-11-14  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (machine_function): Remove"}, {"sha": "7c7df56e6f497ae973250d3dc1d91e06ada68292", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae788515d2b28952fdee5a83b010667dc9285732/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae788515d2b28952fdee5a83b010667dc9285732/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=ae788515d2b28952fdee5a83b010667dc9285732", "patch": "@@ -918,10 +918,15 @@ ipa_compute_jump_functions (struct cgraph_node *node,\n static tree\n ipa_get_member_ptr_load_param (tree rhs, bool use_delta)\n {\n-  tree rec, ref_offset, fld_offset;\n-  tree ptr_field;\n-  tree delta_field;\n+  tree rec, ref_field, ref_offset, fld, fld_offset, ptr_field, delta_field;\n \n+  if (TREE_CODE (rhs) == COMPONENT_REF)\n+    {\n+      ref_field = TREE_OPERAND (rhs, 1);\n+      rhs = TREE_OPERAND (rhs, 0);\n+    }\n+  else\n+    ref_field = NULL_TREE;\n   if (TREE_CODE (rhs) != MEM_REF)\n     return NULL_TREE;\n   rec = TREE_OPERAND (rhs, 0);\n@@ -933,6 +938,20 @@ ipa_get_member_ptr_load_param (tree rhs, bool use_delta)\n     return NULL_TREE;\n \n   ref_offset = TREE_OPERAND (rhs, 1);\n+\n+  if (ref_field)\n+    {\n+      if (integer_nonzerop (ref_offset))\n+\treturn NULL_TREE;\n+\n+      if (use_delta)\n+\tfld = delta_field;\n+      else\n+\tfld = ptr_field;\n+\n+      return ref_field == fld ? rec : NULL_TREE;\n+    }\n+\n   if (use_delta)\n     fld_offset = byte_position (delta_field);\n   else\n@@ -1004,11 +1023,16 @@ ipa_note_param_call (struct cgraph_node *node, int param_index, gimple stmt,\n    pattern of such a call.  An example of such a pattern is the gimple dump\n    below, the call is on the last line:\n \n+     <bb 2>:\n+       f$__delta_5 = f.__delta;\n+       f$__pfn_24 = f.__pfn;\n+\n+   or\n      <bb 2>:\n        f$__delta_5 = MEM[(struct  *)&f];\n        f$__pfn_24 = MEM[(struct  *)&f + 4B];\n \n-     ...\n+   and a few lines below:\n \n      <bb 5>\n        D.2496_3 = (int) f$__pfn_24;"}, {"sha": "88199f131aee08df1b8c71d41c6f10eca8249ace", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae788515d2b28952fdee5a83b010667dc9285732/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae788515d2b28952fdee5a83b010667dc9285732/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=ae788515d2b28952fdee5a83b010667dc9285732", "patch": "@@ -1391,7 +1391,7 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n \n /* Construct a memory reference to a part of an aggregate BASE at the given\n    OFFSET and of the same type as MODEL.  In case this is a reference to a\n-   bit-field, the function will replicate the last component_ref of model's\n+   component, the function will replicate the last COMPONENT_REF of model's\n    expr to access it.  GSI and INSERT_AFTER have the same meaning as in\n    build_ref_for_offset.  */\n \n@@ -1400,12 +1400,9 @@ build_ref_for_model (location_t loc, tree base, HOST_WIDE_INT offset,\n \t\t     struct access *model, gimple_stmt_iterator *gsi,\n \t\t     bool insert_after)\n {\n-  if (TREE_CODE (model->expr) == COMPONENT_REF\n-      && DECL_BIT_FIELD (TREE_OPERAND (model->expr, 1)))\n+  if (TREE_CODE (model->expr) == COMPONENT_REF)\n     {\n-      /* This access represents a bit-field.  */\n       tree t, exp_type;\n-\n       offset -= int_bit_position (TREE_OPERAND (model->expr, 1));\n       exp_type = TREE_TYPE (TREE_OPERAND (model->expr, 0));\n       t = build_ref_for_offset (loc, base, offset, exp_type, gsi, insert_after);"}]}