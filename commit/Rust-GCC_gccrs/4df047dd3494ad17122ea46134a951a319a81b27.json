{"sha": "4df047dd3494ad17122ea46134a951a319a81b27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRmMDQ3ZGQzNDk0YWQxNzEyMmVhNDYxMzRhOTUxYTMxOWE4MWIyNw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-02-04T21:14:07Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-02-04T21:14:07Z"}, "message": "functional_hash.h (std::__is_fast_hash<>): New.\n\n2013-02-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/functional_hash.h (std::__is_fast_hash<>): New.\n\t* include/bits/basic_string.h: Specialize previous to mark\n\tstd::hash for string types as slow.\n\t* include/bits/hashtable.h (__cache_default): Replace is_integral\n\twith __is_fast_hash.\n\t* src/c++11/hash_c++0x.cc: Add type_traits include.\n\t* testsuite/23_containers/unordered_set/instantiation_neg.cc:\n\tAdapt dg-error line number.\n\t* testsuite/23_containers/unordered_set/\n\tnot_default_constructible_hash_neg.cc: Likewise.\n\nFrom-SVN: r195738", "tree": {"sha": "ff7ddf9a008fd3fd07840be0618a5767dbf5ca34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7ddf9a008fd3fd07840be0618a5767dbf5ca34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4df047dd3494ad17122ea46134a951a319a81b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df047dd3494ad17122ea46134a951a319a81b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4df047dd3494ad17122ea46134a951a319a81b27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df047dd3494ad17122ea46134a951a319a81b27/comments", "author": null, "committer": null, "parents": [{"sha": "f3bd007a3a3309e03ffb3ecabbe6a96eaad06ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bd007a3a3309e03ffb3ecabbe6a96eaad06ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bd007a3a3309e03ffb3ecabbe6a96eaad06ccf"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "dc96107a1f9bd5896305a7bfaae2dfa7895e5201", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4df047dd3494ad17122ea46134a951a319a81b27", "patch": "@@ -1,3 +1,16 @@\n+2013-02-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/functional_hash.h (std::__is_fast_hash<>): New.\n+\t* include/bits/basic_string.h: Specialize previous to mark\n+\tstd::hash for string types as slow.\n+\t* include/bits/hashtable.h (__cache_default): Replace is_integral\n+\twith __is_fast_hash.\n+\t* src/c++11/hash_c++0x.cc: Add type_traits include.\n+\t* testsuite/23_containers/unordered_set/instantiation_neg.cc:\n+\tAdapt dg-error line number.\n+\t* testsuite/23_containers/unordered_set/\n+\tnot_default_constructible_hash_neg.cc: Likewise.\n+\n 2013-02-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "aa188f53a6891a522fc5597c3319cf37af4a3b25", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=4df047dd3494ad17122ea46134a951a319a81b27", "patch": "@@ -3051,6 +3051,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return std::_Hash_impl::hash(__s.data(), __s.length()); }\n     };\n \n+  template<>\n+    struct __is_fast_hash<hash<string>> : std::false_type\n+    { };\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   /// std::hash specialization for wstring.\n   template<>\n@@ -3062,6 +3066,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(wchar_t)); }\n     };\n+\n+  template<>\n+    struct __is_fast_hash<hash<wstring>> : std::false_type\n+    { };\n #endif\n #endif /* _GLIBCXX_COMPATIBILITY_CXX0X */\n \n@@ -3077,6 +3085,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                                      __s.length() * sizeof(char16_t)); }\n     };\n \n+  template<>\n+    struct __is_fast_hash<hash<u16string>> : std::false_type\n+    { };\n+\n   /// std::hash specialization for u32string.\n   template<>\n     struct hash<u32string>\n@@ -3087,6 +3099,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(char32_t)); }\n     };\n+\n+  template<>\n+    struct __is_fast_hash<hash<u32string>> : std::false_type\n+    { };\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "bc29235cf1411bd89fcf77a65ceb92c197e14197", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=4df047dd3494ad17122ea46134a951a319a81b27", "patch": "@@ -194,6 +194,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // @} group hashes\n \n+  // Hint about performance of hash functor. If not fast the hash based\n+  // containers will cache the hash code.\n+  // Default behavior is to consider that hasher are fast unless specified\n+  // otherwise.\n+  template<typename _Hash>\n+    struct __is_fast_hash : public std::true_type\n+    { };\n+\n+  template<>\n+    struct __is_fast_hash<hash<long double>> : public std::false_type\n+    { };\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "6515b71eef9f397a48735b7578b0d19c794bbecb", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=4df047dd3494ad17122ea46134a951a319a81b27", "patch": "@@ -40,9 +40,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Hash>\n     using __cache_default\n-      =  __not_<__and_<// Do not cache for builtin integral types having trivial\n-\t\t       // hasher.\n-\t\t       is_integral<_Tp>,\n+      =  __not_<__and_<// Do not cache for fast hasher.\n+\t\t       __is_fast_hash<_Hash>,\n \t\t       // Mandatory to make local_iterator default\n \t\t       // constructible.\n \t\t       is_default_constructible<_Hash>,"}, {"sha": "fc5295ad2083633091577532949f4cc044035124", "filename": "libstdc++-v3/src/c++11/hash_c++0x.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhash_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhash_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhash_c%2B%2B0x.cc?ref=4df047dd3494ad17122ea46134a951a319a81b27", "patch": "@@ -26,6 +26,7 @@\n # error \"hash_c++0x.cc must be compiled with -std=gnu++0x\"\n #endif\n \n+#include <type_traits>\n #include <bits/functional_hash.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)"}, {"sha": "827691f2ce042704d35c8c211a254dcafbeaeddb", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/instantiation_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc?ref=4df047dd3494ad17122ea46134a951a319a81b27", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"with noexcept\" \"\" { target *-*-* } 252 }\n+// { dg-error \"with noexcept\" \"\" { target *-*-* } 251 }\n \n #include <unordered_set>\n "}, {"sha": "bd62a0808c70dee11c2c02ac5c7b24e39ffd0f22", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/not_default_constructible_hash_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df047dd3494ad17122ea46134a951a319a81b27/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc?ref=4df047dd3494ad17122ea46134a951a319a81b27", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"default constructible\" \"\" { target *-*-* } 268 }\n+// { dg-error \"default constructible\" \"\" { target *-*-* } 267 }\n \n #include <unordered_set>\n "}]}