{"sha": "a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJiNWZkY2JkYjBjODAwMWM0Y2QyMjc0ZGRmZjFhNmM0ZmE3ZTRiMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-06-26T20:10:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-06-26T20:10:24Z"}, "message": "Implement N4258 (Cleaning-up noexcept in the Library rev 3)\n\n\t* doc/xml/manual/intro.xml: Document LWG 2108 status.\n\t* include/bits/alloc_traits.h (allocator_traits::is_always_equal):\n\tDefine.\n\t* include/bits/allocator.h (allocator::is_always_equal): Likewise.\n\t* include/bits/forward_list.h\n\t(forward_list::operator=(forward_list&&)): Use __bool_constant.\n\t(forward_list::swap(forward_list&)): Add noexcept.\n\t* include/bits/hashtable.h (_Hashtable::operator=(_Hashtable&&)):\n\tLikewise.\n\t(_Hashtable::swap(_Hashtable&)): Likewise.\n\t* include/bits/stl_deque.h (_Deque_base::_Deque_base(_Deque_base&&)):\n\tUse _Alloc_traits::is_always_equal.\n\t(deque::operator=(deque&&)): Likewise.\n\t(deque::_M_move_assign1(deque&&, false_type)): Add comment and use\n\t__bool_constant.\n\t(swap(deque&, deque&)): Add noexcept.\n\t* include/bits/stl_list.h (list::operator=(list&&)): Use\n\t__bool_constant.\n\t(swap(list&, list&)): Add noexcept.\n\t* include/bits/stl_map.h (map::swap(map&)): Include _Compare in\n\tnoexcept.\n\t(swap(map&, map&)): Add noexcept.\n\t* include/bits/stl_multimap.h (multimap::swap(multimap&)): Include\n\t_Compare in noexcept.\n\t(swap(multimap&, multimap&)): Add noexcept.\n\t* include/bits/stl_multiset.h (multiset::swap(multiset&)): Include\n\t_Compare in noexcept.\n\t(swap(multiset&, multiset&)): Add noexcept.\n\t* include/bits/stl_set.h (set::swap(set&)): Include _Compare in\n\tnoexcept.\n\t(swap(set&, set&)): Add noexcept.\n\t* include/bits/stl_tree.h (_Rb_tree::operator=(_Rb_tree&&)): Include\n\t_Compare in noexcept.\n\t(_Rb_tree::_Rb_tree(_Rb_tree&&, _Node_alloc_type&&)): Use\n\tis_always_equal.\n\t* include/bits/stl_vector.h (vector::operator=(vector&&)): Use\n\t__bool_constant.\n\t(swap(vector&, vector&)): Add noexcept.\n\t* include/bits/unordered_map.h (swap(unordered_map&, unordered_map&),\n\tswap(unordered_multimap& unordered_multimap&)): Add noexcept.\n\t* include/bits/unordered_set.h (swap(unordered_set&, unordered_set&),\n\tswap(unordered_multiset& unordered_multiset&)): Add noexcept.\n\t* include/ext/alloc_traits.h (__allocator_always_compares_equal):\n\tRemove.\n\t(__alloc_traits::_S_always_equal()): Use is_always_equal instead of\n\t__allocator_always_compares_equal.\n\t* include/ext/array_allocator.h (array_allocator::is_always_equal):\n\tDefine.\n\t* include/std/scoped_allocator (__any_of, __propagate_on_copy,\n\t__propagate_on_move, __propagate_on_swap): Remove.\n\t(scoped_allocator_adaptor::propagate_on_container_copy_assignment,\n\tscoped_allocator_adaptor::propagate_on_container_move_assignment,\n\tscoped_allocator_adaptor::propagate_on_container_swap): Define with\n\t__and_ instead of __any_of.\n\t(scoped_allocator_adaptor::is_always_equal): Define.\n\t* testsuite/20_util/allocator_traits/members/is_always_equal.cc: New.\n\t* testsuite/20_util/scoped_allocator/propagation.cc: Make traits\n\tderive from true_type or false_type.\n\t* testsuite/23_containers/deque/allocator/move_assign-2.cc: Add\n\tis_always_equal member and remove the trait specialization.\n\t* testsuite/23_containers/vector/52591.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r225081", "tree": {"sha": "d9fb25d310c35beaf8812ad74071315b7ff8a16c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9fb25d310c35beaf8812ad74071315b7ff8a16c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe"}], "stats": {"total": 418, "additions": 277, "deletions": 141}, "files": [{"sha": "9e76cc4d27e7705fd0b7bb87fea2a6881dea4516", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -1,5 +1,89 @@\n 2015-06-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/intro.xml: Document LWG 2108 status.\n+\t* include/bits/alloc_traits.h (allocator_traits::is_always_equal):\n+\tDefine.\n+\t* include/bits/allocator.h (allocator::is_always_equal): Likewise.\n+\t* include/bits/forward_list.h\n+\t(forward_list::operator=(forward_list&&)): Use __bool_constant.\n+\t(forward_list::swap(forward_list&)): Add noexcept.\n+\t* include/bits/hashtable.h (_Hashtable::operator=(_Hashtable&&)):\n+\tLikewise.\n+\t(_Hashtable::swap(_Hashtable&)): Likewise.\n+\t* include/bits/stl_deque.h (_Deque_base::_Deque_base(_Deque_base&&)):\n+\tUse _Alloc_traits::is_always_equal.\n+\t(deque::operator=(deque&&)): Likewise.\n+\t(deque::_M_move_assign1(deque&&, false_type)): Add comment and use\n+\t__bool_constant.\n+\t(swap(deque&, deque&)): Add noexcept.\n+\t* include/bits/stl_list.h (list::operator=(list&&)): Use\n+\t__bool_constant.\n+\t(swap(list&, list&)): Add noexcept.\n+\t* include/bits/stl_map.h (map::swap(map&)): Include _Compare in\n+\tnoexcept.\n+\t(swap(map&, map&)): Add noexcept.\n+\t* include/bits/stl_multimap.h (multimap::swap(multimap&)): Include\n+\t_Compare in noexcept.\n+\t(swap(multimap&, multimap&)): Add noexcept.\n+\t* include/bits/stl_multiset.h (multiset::swap(multiset&)): Include\n+\t_Compare in noexcept.\n+\t(swap(multiset&, multiset&)): Add noexcept.\n+\t* include/bits/stl_set.h (set::swap(set&)): Include _Compare in\n+\tnoexcept.\n+\t(swap(set&, set&)): Add noexcept.\n+\t* include/bits/stl_tree.h (_Rb_tree::operator=(_Rb_tree&&)): Include\n+\t_Compare in noexcept.\n+\t(_Rb_tree::_Rb_tree(_Rb_tree&&, _Node_alloc_type&&)): Use\n+\tis_always_equal.\n+\t* include/bits/stl_vector.h (vector::operator=(vector&&)): Use\n+\t__bool_constant.\n+\t(swap(vector&, vector&)): Add noexcept.\n+\t* include/bits/unordered_map.h (swap(unordered_map&, unordered_map&),\n+\tswap(unordered_multimap& unordered_multimap&)): Add noexcept.\n+\t* include/bits/unordered_set.h (swap(unordered_set&, unordered_set&),\n+\tswap(unordered_multiset& unordered_multiset&)): Add noexcept.\n+\t* include/ext/alloc_traits.h (__allocator_always_compares_equal):\n+\tRemove.\n+\t(__alloc_traits::_S_always_equal()): Use is_always_equal instead of\n+\t__allocator_always_compares_equal.\n+\t* include/ext/array_allocator.h (array_allocator::is_always_equal):\n+\tDefine.\n+\t* include/std/scoped_allocator (__any_of, __propagate_on_copy,\n+\t__propagate_on_move, __propagate_on_swap): Remove.\n+\t(scoped_allocator_adaptor::propagate_on_container_copy_assignment,\n+\tscoped_allocator_adaptor::propagate_on_container_move_assignment,\n+\tscoped_allocator_adaptor::propagate_on_container_swap): Define with\n+\t__and_ instead of __any_of.\n+\t(scoped_allocator_adaptor::is_always_equal): Define.\n+\t* testsuite/20_util/allocator_traits/members/is_always_equal.cc: New.\n+\t* testsuite/20_util/scoped_allocator/propagation.cc: Make traits\n+\tderive from true_type or false_type.\n+\t* testsuite/23_containers/deque/allocator/move_assign-2.cc: Add\n+\tis_always_equal member and remove the trait specialization.\n+\t* testsuite/23_containers/vector/52591.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n \t* include/bits/stl_bvector.h (vector<bool>::vector()): Add noexcept.\n \t* include/bits/stl_map.h (map::map()): Likewise.\n \t* include/bits/stl_multimap.h (multimap::multimap()): Likewise."}, {"sha": "1cc183e2dc3af12b54b23a206d151d88952b659c", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -868,6 +868,12 @@ requirements of the license of GCC.\n     <listitem><para>Change the <code>reference</code> type.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2108\">2108</link>:\n+\t<emphasis>No way to identify allocator types that always compare equal</emphasis>\n+    </term>\n+    <listitem><para>Define and use <code>is_always_equal</code> even for C++11.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2118\">2118</link>:\n \t<emphasis><code>unique_ptr</code> for array does not support cv qualification conversion of actual argument</emphasis>\n     </term>"}, {"sha": "bb98c1d4ce8dc741311cafcc8eea560bd386233e", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -89,9 +89,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define _GLIBCXX_ALLOC_TR_NESTED_TYPE(_NTYPE, _ALT) \\\n   private: \\\n-  template<typename _Tp> \\\n-    static typename _Tp::_NTYPE _S_##_NTYPE##_helper(_Tp*); \\\n-  static _ALT _S_##_NTYPE##_helper(...); \\\n+    template<typename _Tp> \\\n+      static typename _Tp::_NTYPE _S_##_NTYPE##_helper(_Tp*); \\\n+    static _ALT _S_##_NTYPE##_helper(...); \\\n     typedef decltype(_S_##_NTYPE##_helper((_Alloc*)0)) __##_NTYPE; \\\n   public:\n \n@@ -194,6 +194,17 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n       */\n       typedef __propagate_on_container_swap propagate_on_container_swap;\n \n+_GLIBCXX_ALLOC_TR_NESTED_TYPE(is_always_equal,\n+\t\t\t      typename is_empty<_Alloc>::type)\n+\n+      /**\n+       * @brief   Whether all instances of the allocator type compare equal.\n+       *\n+       * @c Alloc::is_always_equal if that type exists,\n+       * otherwise @c is_empty<Alloc>::type\n+      */\n+      typedef __is_always_equal is_always_equal;\n+\n #undef _GLIBCXX_ALLOC_TR_NESTED_TYPE\n \n       template<typename _Tp>"}, {"sha": "c7a250384676d449c81ade32c088ae0b9aaf34f3", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -77,6 +77,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2103. std::allocator propagate_on_container_move_assignment\n       typedef true_type propagate_on_container_move_assignment;\n+\n+      typedef true_type is_always_equal;\n #endif\n     };\n "}, {"sha": "db02661d3a0ea8cc103a30407a1fb67b748b4a0a", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -587,8 +587,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         constexpr bool __move_storage =\n           _Node_alloc_traits::_S_propagate_on_move_assign()\n           || _Node_alloc_traits::_S_always_equal();\n-        _M_move_assign(std::move(__list),\n-                       integral_constant<bool, __move_storage>());\n+        _M_move_assign(std::move(__list), __bool_constant<__move_storage>());\n \treturn *this;\n       }\n \n@@ -1410,6 +1409,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(forward_list<_Tp, _Alloc>& __lx,\n \t forward_list<_Tp, _Alloc>& __ly)\n+    noexcept(noexcept(__lx.swap(__ly)))\n     { __lx.swap(__ly); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "31d237e7783e3502667a131aaebc22b9144ed043", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -451,13 +451,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Hashtable&\n       operator=(_Hashtable&& __ht)\n-      noexcept(__node_alloc_traits::_S_nothrow_move())\n+      noexcept(__node_alloc_traits::_S_nothrow_move()\n+\t       && is_nothrow_move_assignable<_H1>::value\n+\t       && is_nothrow_move_assignable<_Equal>::value)\n       {\n         constexpr bool __move_storage =\n-          __node_alloc_traits::_S_propagate_on_move_assign()\n-          || __node_alloc_traits::_S_always_equal();\n-        _M_move_assign(std::move(__ht),\n-                       integral_constant<bool, __move_storage>());\n+\t  __node_alloc_traits::_S_propagate_on_move_assign()\n+\t  || __node_alloc_traits::_S_always_equal();\n+\t_M_move_assign(std::move(__ht), __bool_constant<__move_storage>());\n \treturn *this;\n       }\n \n@@ -475,7 +476,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(_Hashtable&)\n-      noexcept(__node_alloc_traits::_S_nothrow_swap());\n+      noexcept(__node_alloc_traits::_S_nothrow_swap()\n+\t       && __is_nothrow_swappable<_H1>::value\n+\t       && __is_nothrow_swappable<_Equal>::value);\n \n       // Basic container operations\n       iterator\n@@ -1234,7 +1237,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     swap(_Hashtable& __x)\n-    noexcept(__node_alloc_traits::_S_nothrow_swap())\n+    noexcept(__node_alloc_traits::_S_nothrow_swap()\n+\t     && __is_nothrow_swappable<_H1>::value\n+\t     && __is_nothrow_swappable<_Equal>::value)\n     {\n       // The only base class with member variables is hash_code_base.\n       // We define _Hash_code_base::_M_swap because different"}, {"sha": "9b996684ef999c3f63db8aa0ca0a8d106f29972a", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -515,8 +515,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       _Deque_base(_Deque_base&& __x)\n-      : _Deque_base(std::move(__x),\n-\t\t    __gnu_cxx::__allocator_always_compares_equal<_Alloc>{})\n+      : _Deque_base(std::move(__x), typename _Alloc_traits::is_always_equal{})\n       { }\n \n       _Deque_base(_Deque_base&& __x, const allocator_type& __a, size_type __n)\n@@ -1059,9 +1058,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       deque&\n       operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())\n       {\n-\tconstexpr bool __always_equal = _Alloc_traits::_S_always_equal();\n-\t_M_move_assign1(std::move(__x),\n-\t\t        integral_constant<bool, __always_equal>());\n+\tusing __always_equal = typename _Alloc_traits::is_always_equal;\n+\t_M_move_assign1(std::move(__x), __always_equal{});\n \treturn *this;\n       }\n \n@@ -2140,13 +2138,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tstd::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());\n       }\n \n+      // When the allocators are not equal the operation could throw, because\n+      // we might need to allocate a new map for __x after moving from it\n+      // or we might need to allocate new elements for *this.\n       void\n       _M_move_assign1(deque&& __x, /* always equal: */ false_type)\n       {\n \tconstexpr bool __move_storage =\n \t  _Alloc_traits::_S_propagate_on_move_assign();\n-\t_M_move_assign2(std::move(__x),\n-\t\t\tintegral_constant<bool, __move_storage>());\n+\t_M_move_assign2(std::move(__x), __bool_constant<__move_storage>());\n       }\n \n       // Destroy all elements and deallocate all memory, then replace\n@@ -2271,6 +2271,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)\n+#if __cplusplus >= 201103L\n+    noexcept(noexcept(__x.swap(__y)))\n+#endif\n     { __x.swap(__y); }\n \n #undef _GLIBCXX_DEQUE_BUF_SIZE"}, {"sha": "409f1fc0262b22c0e9ec02e0027bb460cfc3712a", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -751,8 +751,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tconstexpr bool __move_storage =\n           _Node_alloc_traits::_S_propagate_on_move_assign()\n           || _Node_alloc_traits::_S_always_equal();\n-        _M_move_assign(std::move(__x),\n-                       integral_constant<bool, __move_storage>());\n+        _M_move_assign(std::move(__x), __bool_constant<__move_storage>());\n \treturn *this;\n       }\n \n@@ -1920,6 +1919,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)\n+#if __cplusplus >= 201103L\n+    noexcept(noexcept(__x.swap(__y)))\n+#endif\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "d6ad16a195016fd5dff8dcc71689d6cad4c73b25", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -795,7 +795,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       swap(map& __x)\n #if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap())\n+      noexcept(_Alloc_traits::_S_nothrow_swap()\n+\t       && __is_nothrow_swappable<_Compare>::value)\n #endif\n       { _M_t.swap(__x._M_t); }\n \n@@ -1124,6 +1125,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(map<_Key, _Tp, _Compare, _Alloc>& __x,\n \t map<_Key, _Tp, _Compare, _Alloc>& __y)\n+#if __cplusplus >= 201103L\n+    noexcept(noexcept(__x.swap(__y)))\n+#endif\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "725dea38aaf8997aa81dfff052794d7e5d8b0b28", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -705,7 +705,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       swap(multimap& __x)\n #if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap())\n+      noexcept(_Alloc_traits::_S_nothrow_swap()\n+\t       && __is_nothrow_swappable<_Compare>::value)\n #endif\n       { _M_t.swap(__x._M_t); }\n \n@@ -1025,6 +1026,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n          multimap<_Key, _Tp, _Compare, _Alloc>& __y)\n+#if __cplusplus >= 201103L\n+    noexcept(noexcept(__x.swap(__y)))\n+#endif\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "578b6793878839430fcc1ef08ae4a4f71c4864c6", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -407,7 +407,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       swap(multiset& __x)\n #if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap())\n+      noexcept(_Alloc_traits::_S_nothrow_swap()\n+\t       && __is_nothrow_swappable<_Compare>::value)\n #endif\n       { _M_t.swap(__x._M_t); }\n \n@@ -874,6 +875,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(multiset<_Key, _Compare, _Alloc>& __x,\n \t multiset<_Key, _Compare, _Alloc>& __y)\n+#if __cplusplus >= 201103L\n+    noexcept(noexcept(__x.swap(__y)))\n+#endif\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "21c7db971cdb2614630e8bd7d1142ff135700879", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -411,7 +411,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       swap(set& __x)\n #if __cplusplus >= 201103L\n-      noexcept(_Alloc_traits::_S_nothrow_swap())\n+      noexcept(_Alloc_traits::_S_nothrow_swap()\n+\t       && __is_nothrow_swappable<_Compare>::value)\n #endif\n       { _M_t.swap(__x._M_t); }\n \n@@ -890,6 +891,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Key, typename _Compare, typename _Alloc>\n     inline void\n     swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)\n+#if __cplusplus >= 201103L\n+    noexcept(noexcept(__x.swap(__y)))\n+#endif\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "58c6b43fac0a37979e5cb4d1e2e6fa06342d1039", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -1241,7 +1241,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n       _Rb_tree&\n-      operator=(_Rb_tree&&) noexcept(_Alloc_traits::_S_nothrow_move());\n+      operator=(_Rb_tree&&)\n+      noexcept(_Alloc_traits::_S_nothrow_move()\n+\t       && is_nothrow_move_assignable<_Compare>::value);\n \n       template<typename _Iterator>\n \tvoid\n@@ -1325,7 +1327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)\n     : _M_impl(__x._M_impl._M_key_compare, std::move(__a))\n     {\n-      using __eq = integral_constant<bool, _Alloc_traits::_S_always_equal()>;\n+      using __eq = typename _Alloc_traits::is_always_equal;\n       if (__x._M_root() != nullptr)\n \t_M_move_data(__x, __eq());\n     }\n@@ -1378,7 +1380,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     operator=(_Rb_tree&& __x)\n-    noexcept(_Alloc_traits::_S_nothrow_move())\n+    noexcept(_Alloc_traits::_S_nothrow_move()\n+\t     && is_nothrow_move_assignable<_Compare>::value)\n     {\n       _M_impl._M_key_compare = __x._M_impl._M_key_compare;\n       if (_Alloc_traits::_S_propagate_on_move_assign()"}, {"sha": "1f3269b1c0a59b7e0ff44ddb3fa4b06c13f6676a", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -450,8 +450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         constexpr bool __move_storage =\n           _Alloc_traits::_S_propagate_on_move_assign()\n           || _Alloc_traits::_S_always_equal();\n-        _M_move_assign(std::move(__x),\n-                       integral_constant<bool, __move_storage>());\n+        _M_move_assign(std::move(__x), __bool_constant<__move_storage>());\n \treturn *this;\n       }\n \n@@ -1557,6 +1556,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)\n+#if __cplusplus >= 201103L\n+    noexcept(noexcept(__x.swap(__y)))\n+#endif\n     { __x.swap(__y); }\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "d44efb5f1c3bfc41a0c882c249e9eeb50d627e28", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -1517,12 +1517,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n \t unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>\n     inline void\n     swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n \t unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>"}, {"sha": "b9b94ca68034d603d4632c2b13753ea4ed989704", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -1396,12 +1396,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline void\n     swap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n \t unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<class _Value, class _Hash, class _Pred, class _Alloc>\n     inline void\n     swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n \t unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<class _Value, class _Hash, class _Pred, class _Alloc>"}, {"sha": "5da32c5b0ecbbe046401f86df1c3f531322bbc0d", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -42,53 +42,8 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#if __cplusplus >= 201103L\n-  template<typename _Alloc>\n-    struct __allocator_always_compares_equal : std::false_type { };\n-\n-  template<typename _Tp>\n-    struct __allocator_always_compares_equal<std::allocator<_Tp>>\n-    : std::true_type { };\n-\n-  template<typename, typename> struct array_allocator;\n-\n-  template<typename _Tp, typename _Array>\n-    struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>\n-    : std::true_type { };\n-\n-  template<typename> struct bitmap_allocator;\n-\n-  template<typename _Tp>\n-    struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>\n-    : std::true_type { };\n-\n-  template<typename> struct malloc_allocator;\n-\n-  template<typename _Tp>\n-    struct __allocator_always_compares_equal<malloc_allocator<_Tp>>\n-    : std::true_type { };\n-\n-  template<typename> struct mt_allocator;\n-\n-  template<typename _Tp>\n-    struct __allocator_always_compares_equal<mt_allocator<_Tp>>\n-    : std::true_type { };\n-\n-  template<typename> struct new_allocator;\n-\n-  template<typename _Tp>\n-    struct __allocator_always_compares_equal<new_allocator<_Tp>>\n-    : std::true_type { };\n-\n-  template<typename> struct pool_allocator;\n-\n-  template<typename _Tp>\n-    struct __allocator_always_compares_equal<pool_allocator<_Tp>>\n-    : std::true_type { };\n-#endif\n-\n /**\n- * @brief  Uniform interface to C++98 and C++0x allocators.\n+ * @brief  Uniform interface to C++98 and C++11 allocators.\n  * @ingroup allocators\n */\n template<typename _Alloc>\n@@ -152,7 +107,7 @@ template<typename _Alloc>\n     { return _Base_type::propagate_on_container_swap::value; }\n \n     static constexpr bool _S_always_equal()\n-    { return __allocator_always_compares_equal<_Alloc>::value; }\n+    { return _Base_type::is_always_equal::value; }\n \n     static constexpr bool _S_nothrow_move()\n     { return _S_propagate_on_move_assign() || _S_always_equal(); }"}, {"sha": "779d155d8927906fc1cab6cabc3be03960baee36", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -123,6 +123,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2103. std::allocator propagate_on_container_move_assignment\n       typedef std::true_type propagate_on_container_move_assignment;\n+\n+      typedef std::true_type is_always_equal;\n #endif\n \n     private:"}, {"sha": "b3b9493cd8850c47c415da1db6eeddb2f87c9e63", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -43,38 +43,11 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<template<typename> class _Pred, typename... _Allocs>\n-    struct __any_of;\n-\n-  template<template<typename> class _Pred, typename _Alloc, typename... _Allocs>\n-    struct __any_of<_Pred, _Alloc, _Allocs...>\n-    : __or_<_Pred<_Alloc>, __any_of<_Pred, _Allocs...>>\n-    { };\n-\n-  template<template<typename> class _Pred, typename _Alloc>\n-    struct __any_of<_Pred, _Alloc>\n-    : _Pred<_Alloc>\n-    { };\n-\n   /**\n    * @addtogroup allocators\n    * @{\n    */\n \n-  template<typename _Alloc>\n-    struct __propagate_on_copy\n-    : allocator_traits<_Alloc>::propagate_on_container_copy_assignment\n-    { };\n-  template<typename _Alloc>\n-    struct __propagate_on_move\n-    : allocator_traits<_Alloc>::propagate_on_container_move_assignment\n-    { };\n-  template<typename _Alloc>\n-    struct __propagate_on_swap\n-    : allocator_traits<_Alloc>::propagate_on_container_swap\n-    { };\n-\n-\n   template<typename _Alloc>\n     inline auto\n     __do_outermost(_Alloc& __a, _Alloc*) -> decltype(__a.outer_allocator())\n@@ -263,15 +236,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __traits::void_pointer           void_pointer;\n       typedef typename __traits::const_void_pointer     const_void_pointer;\n \n-      typedef typename conditional<\n-        __any_of<__propagate_on_copy, _OuterAlloc, _InnerAllocs...>::value,\n-        true_type, false_type>::type propagate_on_container_copy_assignment;\n-      typedef typename conditional<\n-        __any_of<__propagate_on_move, _OuterAlloc, _InnerAllocs...>::value,\n-        true_type, false_type>::type propagate_on_container_move_assignment;\n-      typedef typename conditional<\n-        __any_of<__propagate_on_swap, _OuterAlloc, _InnerAllocs...>::value,\n-        true_type, false_type>::type propagate_on_container_swap;\n+      typedef typename __or_<\n+\ttypename __traits::propagate_on_container_copy_assignment,\n+\ttypename allocator_traits<_InnerAllocs>::\n+\t  propagate_on_container_copy_assignment...>::type\n+\t  propagate_on_container_copy_assignment;\n+\n+      typedef typename __or_<\n+\ttypename __traits::propagate_on_container_move_assignment,\n+\ttypename allocator_traits<_InnerAllocs>::\n+\t  propagate_on_container_move_assignment...>::type\n+\t  propagate_on_container_move_assignment;\n+\n+      typedef typename __or_<\n+\ttypename __traits::propagate_on_container_swap,\n+\ttypename allocator_traits<_InnerAllocs>::\n+\t  propagate_on_container_swap...>::type\n+\t  propagate_on_container_swap;\n+\n+      typedef typename __and_<\n+\ttypename __traits::is_always_equal,\n+\ttypename allocator_traits<_InnerAllocs>::is_always_equal...>::type\n+\t  is_always_equal;\n \n       template <class _Tp>\n         struct rebind"}, {"sha": "16974d18e0df6fa2909786aaddf0d28dfc47f923", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/members/is_always_equal.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fis_always_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fis_always_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fis_always_equal.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <type_traits>\n+#include <memory>\n+\n+template<typename T, typename Base>\n+  struct Alloc : Base\n+  {\n+    typedef T value_type;\n+    Alloc();\n+    template <typename U>\n+      Alloc(const Alloc<U, Base>&);\n+    T* allocate(std::size_t);\n+    void deallocate(T*, std::size_t);\n+  };\n+\n+template<bool> struct Empty { };\n+template<> struct Empty<false> { int x; };\n+\n+template<bool B>\n+  struct WithType\n+  { using is_always_equal = std::integral_constant<bool, B>; };\n+\n+struct EmptyAndTrue : Empty<true>, WithType<true> { };\n+struct EmptyButFalse : Empty<true>, WithType<false> { };\n+\n+struct NotEmptyButTrue : Empty<false>, WithType<true> { };\n+struct NotEmptyAndFalse : Empty<false>, WithType<false> { };\n+\n+template<typename Base>\n+  constexpr bool test()\n+  {\n+    using traits = std::allocator_traits<Alloc<int, Base>>;\n+    using test_type = typename traits::is_always_equal;\n+    static_assert(std::is_base_of<std::true_type, test_type>::value\n+                  || std::is_base_of<std::false_type, test_type>::value,\n+                  \"has correct base characteristic\");\n+    return test_type::value;\n+  }\n+\n+static_assert( test<Empty<true>>(), \"empty type is always equal\" );\n+static_assert( !test<Empty<false>>(), \"non-empty type is not always equal\" );\n+\n+static_assert( test<EmptyAndTrue>(), \"nested type is used\" );\n+static_assert( !test<EmptyButFalse>(), \"nested type is used\" );\n+\n+static_assert( test<NotEmptyButTrue>(), \"nested type is used\" );\n+static_assert( !test<NotEmptyAndFalse>(), \"nested type is used\" );"}, {"sha": "e1e594602889ee9db28e7b08161a4d160c9ae9cc", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/propagation.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fpropagation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fpropagation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fpropagation.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -42,13 +42,13 @@ template<typename T, bool copy, bool move, bool swap>\n   struct test_allocator : minimal_allocator<T>\n   {\n     struct propagate_on_container_copy_assignment\n-    { static const bool value = copy; };\n+    : std::integral_constant<bool, copy> { };\n \n     struct propagate_on_container_move_assignment\n-    { static const bool value = move; };\n+    : std::integral_constant<bool, move> { };\n \n     struct propagate_on_container_swap\n-    { static const bool value = swap; };\n+    : std::integral_constant<bool, swap> { };\n   };\n \n template<typename A>"}, {"sha": "e0a09d231c3a562d2f9235d23da0e58b09422e89", "filename": "libstdc++-v3/testsuite/23_containers/deque/allocator/move_assign-2.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fmove_assign-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fmove_assign-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fmove_assign-2.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -61,14 +61,9 @@ struct A2 : std::allocator<T>\n   template<typename U> A2(const A2<U>&) { }\n \n   using propagate_on_container_move_assignment = std::false_type;\n-};\n \n-namespace __gnu_cxx\n-{\n-  template<typename T>\n-    struct __allocator_always_compares_equal<A2<T>> : std::true_type\n-    { };\n-}\n+  using is_always_equal = std::true_type;\n+};\n \n void test02()\n {"}, {"sha": "09e2fc2041699f9c7947b33a6a1085d7587b5c9e", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1881 }\n+// { dg-prune-output 1879 }\n \n #include <deque>\n "}, {"sha": "deb75489019f4225b3597c1433fa9ce9827f1607", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1814 }\n+// { dg-prune-output 1812 }\n \n #include <deque>\n "}, {"sha": "f02cd27ad1f8e11dd6aef63234b8565b6f53267a", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1814 }\n+// { dg-prune-output 1812 }\n \n #include <deque>\n #include <utility>"}, {"sha": "5fffef7aff87662606f153187f2b4f71f683df72", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1965 }\n+// { dg-prune-output 1963 }\n \n #include <deque>\n "}, {"sha": "c6eab0beb25f646dc3eb85a4fbfae509500eb657", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1741 }\n+// { dg-prune-output 1740 }\n \n #include <list>\n "}, {"sha": "833f731b146ad49ae160f7f38fcb9ec260b4cef9", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1693 }\n+// { dg-prune-output 1692 }\n \n #include <list>\n "}, {"sha": "09d1d470ed3540772d3846316c250f4d4f834382", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1693 }\n+// { dg-prune-output 1692 }\n \n #include <list>\n "}, {"sha": "291fb29798bcbf46a84528991a2cdb64bd5d365a", "filename": "libstdc++-v3/testsuite/23_containers/vector/52591.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -60,15 +60,9 @@ struct A2 : std::allocator<T>\n   template<typename U> A2(const A2<U>&) { }\n \n   using propagate_on_container_move_assignment = std::false_type;\n+  using is_always_equal = std::true_type;\n };\n \n-namespace __gnu_cxx\n-{\n-  template<typename T>\n-    struct __allocator_always_compares_equal<A2<T>> : std::true_type\n-    { };\n-}\n-\n void test02()\n {\n   using test_type = std::vector<C, A2<C>>;"}, {"sha": "8d87c34f919685df76c147c32f7c848c6d3a2d6a", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1326 }\n+// { dg-prune-output 1325 }\n \n #include <vector>\n "}, {"sha": "2c453d1e626d4784a2a3352e9f67ba5f7f859124", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1252 }\n+// { dg-prune-output 1251 }\n \n #include <vector>\n "}, {"sha": "d0c8d447ee3230086b9806408be193b9b38e9ca8", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1252 }\n+// { dg-prune-output 1251 }\n \n #include <vector>\n #include <utility>"}, {"sha": "f176a6f0152a2a9af1cbdf5bb590ce57422a3828", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=a2b5fdcbdb0c8001c4cd2274ddff1a6c4fa7e4b3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-prune-output 1367 }\n+// { dg-prune-output 1366 }\n \n #include <vector>\n "}]}