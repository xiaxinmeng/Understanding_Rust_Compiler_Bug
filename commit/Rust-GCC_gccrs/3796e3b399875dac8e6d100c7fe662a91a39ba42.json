{"sha": "3796e3b399875dac8e6d100c7fe662a91a39ba42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5NmUzYjM5OTg3NWRhYzhlNmQxMDBjN2ZlNjYyYTkxYTM5YmE0Mg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2019-07-18T08:38:09Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2019-07-18T08:38:09Z"}, "message": "re PR tree-optimization/91137 (Wrong code with -O3)\n\n        PR tree-optimization/91137\n        * tree-ssa-loop-ivopts.c (struct ivopts_data): New field.\n        (tree_ssa_iv_optimize_init, alloc_iv, tree_ssa_iv_optimize_finalize):\n        Init, use and fini the above new field.\n        (determine_base_object_1): New function.\n        (determine_base_object): Reimplement using walk_tree.\n\ngcc/testsuite\n        PR tree-optimization/91137\n        * gcc.c-torture/execute/pr91137.c: New test.\n\nFrom-SVN: r273570", "tree": {"sha": "6ffa33a39f5685eb630c63384dac2174fc124629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ffa33a39f5685eb630c63384dac2174fc124629"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3796e3b399875dac8e6d100c7fe662a91a39ba42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3796e3b399875dac8e6d100c7fe662a91a39ba42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3796e3b399875dac8e6d100c7fe662a91a39ba42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3796e3b399875dac8e6d100c7fe662a91a39ba42/comments", "author": null, "committer": null, "parents": [{"sha": "f1f10541903b082d27114db38947fb31f5364bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f10541903b082d27114db38947fb31f5364bcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f10541903b082d27114db38947fb31f5364bcc"}], "stats": {"total": 140, "additions": 100, "deletions": 40}, "files": [{"sha": "e7ba87ac2e3e4366d45bb42c53513c41aaf2546a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3796e3b399875dac8e6d100c7fe662a91a39ba42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3796e3b399875dac8e6d100c7fe662a91a39ba42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3796e3b399875dac8e6d100c7fe662a91a39ba42", "patch": "@@ -1,3 +1,12 @@\n+2019-07-18  Bin Cheng  <bin.linux@linux.alibaba.com>\n+\n+\tPR tree-optimization/91137\n+\t* tree-ssa-loop-ivopts.c (struct ivopts_data): New field.\n+\t(tree_ssa_iv_optimize_init, alloc_iv, tree_ssa_iv_optimize_finalize):\n+\tInit, use and fini the above new field.\n+\t(determine_base_object_1): New function.\n+\t(determine_base_object): Reimplement using walk_tree.\n+\n 2019-07-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* basic-block.h (CLEANUP_FORCE_FAST_DCE): New macro."}, {"sha": "0bbbd8ad1b7e2b81815d78fec2f6a0d108dbc5fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3796e3b399875dac8e6d100c7fe662a91a39ba42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3796e3b399875dac8e6d100c7fe662a91a39ba42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3796e3b399875dac8e6d100c7fe662a91a39ba42", "patch": "@@ -1,3 +1,8 @@\n+2019-07-18  Bin Cheng  <bin.linux@linux.alibaba.com>\n+\n+\tPR tree-optimization/91137\n+\t* gcc.c-torture/execute/pr91137.c: New test.\n+\n 2019-07-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-c++-common/pr53633-2.c: New test."}, {"sha": "aa6bb6ca02165c39e6b820ebe505a36049bdc433", "filename": "gcc/testsuite/gcc.c-torture/execute/pr91137.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3796e3b399875dac8e6d100c7fe662a91a39ba42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91137.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3796e3b399875dac8e6d100c7fe662a91a39ba42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91137.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91137.c?ref=3796e3b399875dac8e6d100c7fe662a91a39ba42", "patch": "@@ -0,0 +1,34 @@\n+long long a;\n+unsigned b;\n+int c[70];\n+int d[70][70];\n+int e;\n+\n+__attribute__ ((noinline)) void f(long long *g, int p2) {\n+  *g = p2;\n+}\n+\n+__attribute__ ((noinline)) void fn2() {\n+  for (int j = 0; j < 70; j++) {\n+    for (int i = 0; i < 70; i++) {\n+      if (b)\n+        c[i] = 0;\n+      for (int l = 0; l < 70; l++)\n+        d[i][1] = d[l][i];\n+    }\n+    for (int k = 0; k < 70; k++)\n+      e = c[0];\n+  }\n+}\n+\n+int main() {\n+  b = 5;\n+  for (int j = 0; j < 70; ++j)\n+    c[j] = 2075593088;\n+  fn2();\n+  f(&a, e);\n+  if (a)\n+    __builtin_abort();\n+  return 0;\n+}\n+"}, {"sha": "43ba4295d5721ef81fb9b117e4e4bec79837b5b9", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 52, "deletions": 40, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3796e3b399875dac8e6d100c7fe662a91a39ba42/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3796e3b399875dac8e6d100c7fe662a91a39ba42/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=3796e3b399875dac8e6d100c7fe662a91a39ba42", "patch": "@@ -591,6 +591,9 @@ struct ivopts_data\n   /* The common candidates.  */\n   vec<iv_common_cand *> iv_common_cands;\n \n+  /* Hash map recording base object information of tree exp.  */\n+  hash_map<tree, tree> *base_object_map;\n+\n   /* The maximum invariant variable id.  */\n   unsigned max_inv_var_id;\n \n@@ -1043,61 +1046,68 @@ tree_ssa_iv_optimize_init (struct ivopts_data *data)\n   data->vcands.create (20);\n   data->inv_expr_tab = new hash_table<iv_inv_expr_hasher> (10);\n   data->name_expansion_cache = NULL;\n+  data->base_object_map = NULL;\n   data->iv_common_cand_tab = new hash_table<iv_common_cand_hasher> (10);\n   data->iv_common_cands.create (20);\n   decl_rtl_to_reset.create (20);\n   gcc_obstack_init (&data->iv_obstack);\n }\n \n-/* Returns a memory object to that EXPR points.  In case we are able to\n-   determine that it does not point to any such object, NULL is returned.  */\n+/* walk_tree callback for determine_base_object.  */\n \n static tree\n-determine_base_object (tree expr)\n+determine_base_object_1 (tree *tp, int *walk_subtrees, void *wdata)\n {\n-  enum tree_code code = TREE_CODE (expr);\n-  tree base, obj;\n-\n-  /* If this is a pointer casted to any type, we need to determine\n-     the base object for the pointer; so handle conversions before\n-     throwing away non-pointer expressions.  */\n-  if (CONVERT_EXPR_P (expr))\n-    return determine_base_object (TREE_OPERAND (expr, 0));\n-\n-  if (!POINTER_TYPE_P (TREE_TYPE (expr)))\n-    return NULL_TREE;\n-\n-  switch (code)\n+  tree_code code = TREE_CODE (*tp);\n+  tree obj = NULL_TREE;\n+  if (code == ADDR_EXPR)\n     {\n-    case INTEGER_CST:\n-      return NULL_TREE;\n-\n-    case ADDR_EXPR:\n-      obj = TREE_OPERAND (expr, 0);\n-      base = get_base_address (obj);\n-\n+      tree base = get_base_address (TREE_OPERAND (*tp, 0));\n       if (!base)\n-\treturn expr;\n-\n-      if (TREE_CODE (base) == MEM_REF)\n-\treturn determine_base_object (TREE_OPERAND (base, 0));\n+\tobj = *tp;\n+      else if (TREE_CODE (base) != MEM_REF)\n+\tobj = fold_convert (ptr_type_node, build_fold_addr_expr (base));\n+    }\n+  else if (code == SSA_NAME && POINTER_TYPE_P (TREE_TYPE (*tp)))\n+\tobj = fold_convert (ptr_type_node, *tp);\n \n-      return fold_convert (ptr_type_node,\n-\t\t\t   build_fold_addr_expr (base));\n+  if (!obj)\n+    {\n+      if (!EXPR_P (*tp))\n+\t*walk_subtrees = 0;\n \n-    case POINTER_PLUS_EXPR:\n-      return determine_base_object (TREE_OPERAND (expr, 0));\n+      return NULL_TREE;\n+    }\n+  /* Record special node for multiple base objects and stop.  */\n+  if (*static_cast<tree *> (wdata))\n+    {\n+      *static_cast<tree *> (wdata) = integer_zero_node;\n+      return integer_zero_node;\n+    }\n+  /* Record the base object and continue looking.  */\n+  *static_cast<tree *> (wdata) = obj;\n+  return NULL_TREE;\n+}\n \n-    case PLUS_EXPR:\n-    case MINUS_EXPR:\n-      /* Pointer addition is done solely using POINTER_PLUS_EXPR.  */\n-      gcc_unreachable ();\n+/* Returns a memory object to that EXPR points with caching.  Return NULL if we\n+   are able to determine that it does not point to any such object; specially\n+   return integer_zero_node if EXPR contains multiple base objects.  */\n \n-    default:\n-      if (POLY_INT_CST_P (expr))\n-\treturn NULL_TREE;\n-      return fold_convert (ptr_type_node, expr);\n+static tree\n+determine_base_object (struct ivopts_data *data, tree expr)\n+{\n+  tree *slot, obj = NULL_TREE;\n+  if (data->base_object_map)\n+    {\n+      if ((slot = data->base_object_map->get(expr)) != NULL)\n+\treturn *slot;\n     }\n+  else\n+    data->base_object_map = new hash_map<tree, tree>;\n+\n+  (void) walk_tree_without_duplicates (&expr, determine_base_object_1, &obj);\n+  data->base_object_map->put (expr, obj);\n+  return obj;\n }\n \n /* Return true if address expression with non-DECL_P operand appears\n@@ -1155,7 +1165,7 @@ alloc_iv (struct ivopts_data *data, tree base, tree step,\n     }\n \n   iv->base = base;\n-  iv->base_object = determine_base_object (base);\n+  iv->base_object = determine_base_object (data, base);\n   iv->step = step;\n   iv->biv_p = false;\n   iv->nonlin_use = NULL;\n@@ -7527,6 +7537,8 @@ tree_ssa_iv_optimize_finalize (struct ivopts_data *data)\n   delete data->inv_expr_tab;\n   data->inv_expr_tab = NULL;\n   free_affine_expand_cache (&data->name_expansion_cache);\n+  if (data->base_object_map)\n+    delete data->base_object_map;\n   delete data->iv_common_cand_tab;\n   data->iv_common_cand_tab = NULL;\n   data->iv_common_cands.release ();"}]}