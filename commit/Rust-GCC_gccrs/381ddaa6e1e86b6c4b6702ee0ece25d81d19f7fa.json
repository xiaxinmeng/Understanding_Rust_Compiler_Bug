{"sha": "381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxZGRhYTZlMWU4NmI2YzRiNjcwMmVlMGVjZTI1ZDgxZDE5ZjdmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-01-02T19:37:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-01-02T19:37:39Z"}, "message": "tweak formatting\n\nFrom-SVN: r38635", "tree": {"sha": "520182cbfb3ff28716e038ae450ea465878e67d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/520182cbfb3ff28716e038ae450ea465878e67d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa/comments", "author": null, "committer": null, "parents": [{"sha": "e2134eead7517617e1824633b26560e9b5d09672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2134eead7517617e1824633b26560e9b5d09672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2134eead7517617e1824633b26560e9b5d09672"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "6373268765380ea21a98d093ea73881ba4a59403", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa", "patch": "@@ -5876,8 +5876,7 @@ resolve_address_of_overloaded_function (target_type,\n \n   /* Check that the TARGET_TYPE is reasonable.  */\n   if (TYPE_PTRFN_P (target_type))\n-    /* This is OK.  */\n-    ;\n+    /* This is OK.  */;\n   else if (TYPE_PTRMEMFUNC_P (target_type))\n     /* This is OK, too.  */\n     is_ptrmem = 1;\n@@ -5891,8 +5890,9 @@ resolve_address_of_overloaded_function (target_type,\n   else \n     {\n       if (complain)\n-\tcp_error(\"cannot resolve overloaded function `%D' based on conversion to type `%T'\", \n-\t\t DECL_NAME (OVL_FUNCTION (overload)), target_type);\n+\tcp_error (\"\\\n+cannot resolve overloaded function `%D' based on conversion to type `%T'\", \n+\t\t  DECL_NAME (OVL_FUNCTION (overload)), target_type);\n       return error_mark_node;\n     }\n   "}]}