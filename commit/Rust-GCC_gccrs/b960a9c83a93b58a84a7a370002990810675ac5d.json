{"sha": "b960a9c83a93b58a84a7a370002990810675ac5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk2MGE5YzgzYTkzYjU4YTg0YTdhMzcwMDAyOTkwODEwNjc1YWM1ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-22T07:29:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-22T10:59:33Z"}, "message": "middle-end/97521 - fix VECTOR_CST expansion\n\nThis fixes expansion of VECTOR_BOOLEAN_TYPE_P VECTOR_CSTs which\nwhen using an integer mode are not always \"mask-mode\" but may\nbe using an integer mode when there's no supported vector mode.\n\nThe patch makes sure to only go the mask-mode expansion if\nthe elements do not line up to cover the full integer mode\n(when they do and the mode was an actual mask-mode there's\nno actual difference in both expansions).\n\n2020-10-22  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/97521\n\t* expr.c (expand_expr_real_1): Be more careful when\n\texpanding a VECTOR_BOOLEAN_TYPE_P VECTOR_CSTs.\n\n\t* gcc.target/i386/pr97521.c: New testcase.", "tree": {"sha": "a1bc199ac4abd02fdc1b27a6556e58529b932bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1bc199ac4abd02fdc1b27a6556e58529b932bd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b960a9c83a93b58a84a7a370002990810675ac5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b960a9c83a93b58a84a7a370002990810675ac5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b960a9c83a93b58a84a7a370002990810675ac5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b960a9c83a93b58a84a7a370002990810675ac5d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e14c2bdce0c058587bff56883cd22603eceeb0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14c2bdce0c058587bff56883cd22603eceeb0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14c2bdce0c058587bff56883cd22603eceeb0b0"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "d87bda777d01e007fcddde50217e7f091dd6d60e", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b960a9c83a93b58a84a7a370002990810675ac5d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b960a9c83a93b58a84a7a370002990810675ac5d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b960a9c83a93b58a84a7a370002990810675ac5d", "patch": "@@ -10356,7 +10356,10 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tscalar_int_mode int_mode;\n \tif (is_int_mode (mode, &int_mode))\n \t  {\n-\t    if (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (exp)))\n+\t    if (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (exp))\n+\t\t&& maybe_ne (TYPE_PRECISION (TREE_TYPE (TREE_TYPE (exp)))\n+\t\t\t     * TYPE_VECTOR_SUBPARTS (TREE_TYPE (exp)),\n+\t\t\t     GET_MODE_PRECISION (int_mode)))\n \t      return const_scalar_mask_from_tree (int_mode, exp);\n \t    else\n \t      {"}, {"sha": "804ffd61e131a420e9eb8e1a3f2b42fb73b549be", "filename": "gcc/testsuite/gcc.target/i386/pr97521.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b960a9c83a93b58a84a7a370002990810675ac5d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97521.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b960a9c83a93b58a84a7a370002990810675ac5d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97521.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97521.c?ref=b960a9c83a93b58a84a7a370002990810675ac5d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -mno-sse2\" } */\n+\n+typedef unsigned char __attribute__ ((__vector_size__ (8))) V;\n+typedef unsigned long long __attribute__ ((__vector_size__ (16))) W;\n+\n+V c;\n+W d, e;\n+\n+V\n+foo (W f)\n+{\n+  W g = (W) { 0, 209 } <7 <= (0 < f);\n+  W h = e + g + d;\n+  V j = (V) (h[0]) + (V) c;\n+  return j;\n+}\n+\n+int\n+main (void)\n+{\n+  V x = foo ((W) { 3 });\n+  for (unsigned i = 0; i < sizeof (x); i++)\n+    if (x[i] != 0xff)\n+      __builtin_abort ();\n+  return 0;\n+}"}]}