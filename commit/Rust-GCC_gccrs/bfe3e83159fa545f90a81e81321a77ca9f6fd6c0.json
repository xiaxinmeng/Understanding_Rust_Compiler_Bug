{"sha": "bfe3e83159fa545f90a81e81321a77ca9f6fd6c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlM2U4MzE1OWZhNTQ1ZjkwYTgxZTgxMzIxYTc3Y2E5ZjZmZDZjMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-26T03:08:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-26T03:08:48Z"}, "message": "random (operator<<(std::basic_ostream<>&, const linear_congruential<>&), [...]): Redo per TR1 specs; move out of line...\n\n2006-06-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (operator<<(std::basic_ostream<>&,\n\tconst linear_congruential<>&), operator>>(std::basic_istream<>&,\n\tlinear_congruential<>&), operator<<(std::basic_ostream<>&,\n\tconst mersenne_twister<>&), operator>>(std::basic_istream<>&,\n\tmersenne_twister<>&), operator<<(std::basic_ostream<>&,\n\tconst subtract_with_carry<>&), operator>>(std::basic_istream<>&,\n\tsubtract_with_carry<>&), operator<<(std::basic_ostream<>&,\n\tconst discard_block<>&), operator>>(std::basic_istream<>&,\n\tdiscard_block<>&), operator<<(std::basic_ostream<>&,\n\tconst xor_combine<>&), operator>>(std::basic_istream<>&,\n\txor_combine<>&), operator<<(std::basic_ostream<>&,\n\tconst uniform_int<>&), operator>>(std::basic_istream<>&,\n\tuniform_int<>&), operator<<(std::basic_ostream<>&,\n\tconst bernoulli_distribution&), operator<<(std::basic_ostream<>&,\n\tconst geometric_distribution<>&), operator<<(std::basic_ostream<>&,\n\tconst uniform_real<>&), operator>>(std::basic_istream<>&,\n\tuniform_real<>&), operator<<(std::basic_ostream<>&,\n\tconst exponential_distribution<>&), operator<<(std::basic_ostream<>&,\n\tconst normal_distribution<>&), operator>>(std::basic_istream<>&,\n\tnormal_distribution<>&)): Redo per TR1 specs; move out of line...\n\t* include/tr1/random.tcc: ... here.\n\nFrom-SVN: r115003", "tree": {"sha": "dd1d2fb3c65ccf3babefdab3480276749bf426ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd1d2fb3c65ccf3babefdab3480276749bf426ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0/comments", "author": null, "committer": null, "parents": [{"sha": "51343d6aa18227862200268d6da40305e13107ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51343d6aa18227862200268d6da40305e13107ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51343d6aa18227862200268d6da40305e13107ea"}], "stats": {"total": 747, "additions": 641, "deletions": 106}, "files": [{"sha": "359e79d2d0237bbe2536de04196c4d9ee4056bf0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bfe3e83159fa545f90a81e81321a77ca9f6fd6c0", "patch": "@@ -1,3 +1,27 @@\n+2006-06-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (operator<<(std::basic_ostream<>&,\n+\tconst linear_congruential<>&), operator>>(std::basic_istream<>&,\n+\tlinear_congruential<>&), operator<<(std::basic_ostream<>&,\n+\tconst mersenne_twister<>&), operator>>(std::basic_istream<>&,\n+\tmersenne_twister<>&), operator<<(std::basic_ostream<>&,\n+\tconst subtract_with_carry<>&), operator>>(std::basic_istream<>&,\n+\tsubtract_with_carry<>&), operator<<(std::basic_ostream<>&,\n+\tconst discard_block<>&), operator>>(std::basic_istream<>&,\n+\tdiscard_block<>&), operator<<(std::basic_ostream<>&,\n+\tconst xor_combine<>&), operator>>(std::basic_istream<>&,\n+\txor_combine<>&), operator<<(std::basic_ostream<>&,\n+\tconst uniform_int<>&), operator>>(std::basic_istream<>&,\n+\tuniform_int<>&), operator<<(std::basic_ostream<>&,\n+\tconst bernoulli_distribution&), operator<<(std::basic_ostream<>&,\n+\tconst geometric_distribution<>&), operator<<(std::basic_ostream<>&,\n+\tconst uniform_real<>&), operator>>(std::basic_istream<>&,\n+\tuniform_real<>&), operator<<(std::basic_ostream<>&,\n+\tconst exponential_distribution<>&), operator<<(std::basic_ostream<>&,\n+\tconst normal_distribution<>&), operator>>(std::basic_istream<>&,\n+\tnormal_distribution<>&)): Redo per TR1 specs; move out of line...\n+\t* include/tr1/random.tcc: ... here.\n+\n 2006-06-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random (class normal_distribution<>): Add."}, {"sha": "f1a3ab204ae1ad380f6e4acec315705d5639197f", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 244, "deletions": 106, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=bfe3e83159fa545f90a81e81321a77ca9f6fd6c0", "patch": "@@ -287,6 +287,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    *\n    * The size of the state is @f$ 1 @f$.\n    */\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    class linear_congruential;\n+\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const linear_congruential<_UIntType, __a, __c, __m>& __lcr);\n+\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       linear_congruential<_UIntType, __a, __c, __m>& __lcr);\n+\n   template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     class linear_congruential\n     {\n@@ -394,14 +409,16 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * Writes the textual representation of the state x(i) of x to @p __os.\n        *\n        * @param __os  The output stream.\n-       * @param __lcr A linear_congruential random number generator.\n+       * @param __lcr A % linear_congruential random number generator.\n        * @returns __os.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<class _UIntType1, _UIntType1 __a1, _UIntType1 __c1,\n+\t       _UIntType1 __m1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const linear_congruential& __lcr)\n-        { return __os << __lcr._M_x; }\n+\t\t   const linear_congruential<_UIntType1, __a1, __c1,\n+\t\t   __m1>& __lcr);\n \n       /**\n        * Sets the state of the engine by reading its textual\n@@ -413,14 +430,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @p __is.\n        *\n        * @param __is  The input stream.\n-       * @param __lcr A linear_congruential random number generator.\n+       * @param __lcr A % linear_congruential random number generator.\n        * @returns __is.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<class _UIntType1, _UIntType1 __a1, _UIntType1 __c1,\n+\t       _UIntType1 __m1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   linear_congruential& __lcr)\n-        { return __is >> __lcr._M_x; }\n+\t\t   linear_congruential<_UIntType1, __a1, __c1, __m1>& __lcr);\n \n     private:\n       template<class _Gen>\n@@ -472,6 +490,29 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * @var output_c    The second left-shift tempering matrix mask.\n    * @var output_l    The second right-shift tempering matrix parameter.\n    */\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n+\t   _UIntType __c, int __l>\n+    class mersenne_twister;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n+\t   _UIntType __c, int __l,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const mersenne_twister<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x);\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n+\t   _UIntType __c, int __l,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       mersenne_twister<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x);\n+\n   template<class _UIntType, int __w, int __n, int __m, int __r,\n \t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n \t   _UIntType __c, int __l>\n@@ -571,15 +612,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<class _UIntType1, int __w1, int __n1, int __m1, int __r1,\n+\t       _UIntType1 __a1, int __u1, int __s1, _UIntType1 __b1, int __t1,\n+\t       _UIntType1 __c1, int __l1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const mersenne_twister& __x)\n-        {\n-\t  std::copy(__x._M_x, __x._M_x + state_size,\n-\t\t    std::ostream_iterator<_UIntType>(__os, \" \"));\n-\t  return __os;\n-\t}\n+\t\t   const mersenne_twister<_UIntType1, __w1, __n1, __m1, __r1,\n+\t\t   __a1, __u1, __s1, __b1, __t1, __c1, __l1>& __x);\n \n       /**\n        * Extracts the current state of a % mersenne_twister random number\n@@ -591,15 +631,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The input stream with the state of @p __x extracted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<class _UIntType1, int __w1, int __n1, int __m1, int __r1,\n+\t       _UIntType1 __a1, int __u1, int __s1, _UIntType1 __b1, int __t1,\n+\t       _UIntType1 __c1, int __l1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   mersenne_twister& __x)\n-        {\n-\t  for (int __i = 0; __i < state_size; ++__i)\n-\t    __is >> __x._M_x[__i];\n-\t  return __is;\n-\t}\n+\t\t   mersenne_twister<_UIntType1, __w1, __n1, __m1, __r1,\n+\t\t   __a1, __u1, __s1, __b1, __t1, __c1, __l1>& __x);\n \n     private:\n       template<class _Gen>\n@@ -653,6 +692,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * @var _M_p     Current index of x(i - r).\n    * @endif\n    */\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    class subtract_with_carry;\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const subtract_with_carry<_IntType, __m, __s, __r>& __x);\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       subtract_with_carry<_IntType, __m, __s, __r>& __x);\n+\n   template<typename _IntType, _IntType __m, int __s, int __r>\n     class subtract_with_carry\n     {\n@@ -780,15 +834,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _IntType1, _IntType1 __m1, int __s1, int __r1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const subtract_with_carry& __x)\n-        {\n-\t  std::copy(__x._M_x, __x._M_x + long_lag,\n-\t\t    std::ostream_iterator<_IntType>(__os, \" \"));\n-\t  return __os << __x._M_carry;\n-\t}\n+\t\t   const subtract_with_carry<_IntType1, __m1, __s1,\n+\t\t   __r1>& __x);\n \n       /**\n        * Extracts the current state of a % subtract_with_carry random number\n@@ -800,16 +851,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The input stream with the state of @p __x extracted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _IntType1, _IntType1 __m1, int __s1, int __r1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   subtract_with_carry& __x)\n-        {\n-\t  for (int __i = 0; __i < long_lag; ++__i)\n-\t    __is >> __x._M_x[__i];\n-\t  __is >> __x._M_carry;\n-\t  return __is;\n-\t}\n+\t\t   subtract_with_carry<_IntType1, __m1, __s1, __r1>& __x);\n \n     private:\n       template<class _Gen>\n@@ -834,6 +880,22 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    *\n    * 0 <= @p __r <= @p __p\n    */\n+  template<class _UniformRandomNumberGenerator, int __p, int __r>\n+    class discard_block;\n+\n+  template<class _UniformRandomNumberGenerator, int __p, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const discard_block<_UniformRandomNumberGenerator,\n+\t       __p, __r>& __x);\n+\n+  template<class _UniformRandomNumberGenerator, int __p, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       discard_block<_UniformRandomNumberGenerator, __p, __r>& __x);\n+\n   template<class _UniformRandomNumberGenerator, int __p, int __r>\n     class discard_block\n     {\n@@ -974,11 +1036,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<class _UniformRandomNumberGenerator1, int __p1, int __r1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const discard_block& __x)\n-        { return __os << __x._M_b << \" \" << __x._M_n; }\n+\t\t   const discard_block<_UniformRandomNumberGenerator1,\n+\t\t   __p1, __r1>& __x);\n \n       /**\n        * Extracts the current state of a % subtract_with_carry random number\n@@ -990,11 +1053,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The input stream with the state of @p __x extracted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<class _UniformRandomNumberGenerator1, int __p1, int __r1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   discard_block& __x)\n-        { return __is >> __x._M_b >> __x._M_n; }\n+\t\t   discard_block<_UniformRandomNumberGenerator1,\n+\t\t   __p1, __r1>& __x);\n \n     private:\n       base_type _M_b;\n@@ -1025,6 +1089,26 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * A random number generator adaptor class that combines two random number\n    * generator engines into a single output sequence.\n    */\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2>\n+    class xor_combine;\n+\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t       _UniformRandomNumberGenerator2, __s2>& __x);\n+\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t       _UniformRandomNumberGenerator2, __s2>& __x);\n+\n   template<class _UniformRandomNumberGenerator1, int __s1,\n \t   class _UniformRandomNumberGenerator2, int __s2>\n     class xor_combine\n@@ -1146,11 +1230,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<class _UniformRandomNumberGenerator11, int __s11,\n+\t       class _UniformRandomNumberGenerator21, int __s21,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const xor_combine& __x)\n-        { return __os << __x.base1() << \" \" << __x.base2(); }\n+\t\t   const xor_combine<_UniformRandomNumberGenerator11, __s11,\n+\t\t   _UniformRandomNumberGenerator21, __s21>& __x);\n \n       /**\n        * Extracts the current state of a %xor_combine random number\n@@ -1162,11 +1248,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The input stream with the state of @p __x extracted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<class _UniformRandomNumberGenerator11, int __s11,\n+\t       class _UniformRandomNumberGenerator21, int __s21,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   xor_combine& __x)\n-        { return __is >> __x._M_b1 >> __x._M_b2; }\n+\t\t   xor_combine<_UniformRandomNumberGenerator11, __s11,\n+\t\t   _UniformRandomNumberGenerator21, __s21>& __x);\n \n     private:\n       base1_type _M_b1;\n@@ -1283,6 +1371,19 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * probability throughout the range.\n    */\n   template<typename _IntType = int>\n+    class uniform_int;\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const uniform_int<_IntType>& __x);\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       uniform_int<_IntType>& __x);\n+\n+  template<typename _IntType>\n     class uniform_int\n     {\n       __glibcxx_class_requires(_IntType, _IntegerConcept)\n@@ -1355,25 +1456,24 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _IntType1, typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const uniform_int& __x)\n-        { return __os << __x.min() << \" \" << __x.max(); }\n+\t\t   const uniform_int<_IntType1>& __x);\n \n       /**\n        * Extracts a %unform_int random number distribution\n-       * @p __u from the input stream @p __is.\n+       * @p __x from the input stream @p __is.\n        *\n        * @param __is An input stream.\n-       * @param __u  A %uniform_int random number generator engine.\n+       * @param __x  A %uniform_int random number generator engine.\n        *\n-       * @returns The input stream with @p __u extracted or in an error state.\n+       * @returns The input stream with @p __x extracted or in an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _IntType1, typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is, uniform_int& __u)\n-        { return __is >> __u._M_min >> __u._M_max; }\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   uniform_int<_IntType1>& __x);\n \n     private:\n       _IntType _M_min;\n@@ -1387,6 +1487,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * Generates a sequence of true and false values with likelihood @f$ p @f$\n    * that true will come up and @f$ (1 - p) @f$ that false will appear.\n    */\n+  class bernoulli_distribution;\n+\n+  template<typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const bernoulli_distribution& __x);\n+\n   class bernoulli_distribution\n   {\n   public:\n@@ -1447,23 +1554,22 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     template<typename _CharT, typename _Traits>\n       friend std::basic_ostream<_CharT, _Traits>&\n       operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t const bernoulli_distribution& __x)\n-      { return __os << __x.p(); }\n+\t\t const bernoulli_distribution& __x);\n \n     /**\n      * Extracts a %bernoulli_distribution random number distribution\n-     * @p __u from the input stream @p __is.\n+     * @p __x from the input stream @p __is.\n      *\n      * @param __is An input stream.\n-     * @param __u  A %bernoulli_distribution random number generator engine.\n+     * @param __x  A %bernoulli_distribution random number generator engine.\n      *\n-     * @returns The input stream with @p __u extracted or in an error state.\n+     * @returns The input stream with @p __x extracted or in an error state.\n      */\n     template<typename _CharT, typename _Traits>\n       friend std::basic_istream<_CharT, _Traits>&\n       operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t bernoulli_distribution& __u)\n-      { return __is >> __u._M_p; }\n+\t\t bernoulli_distribution& __x)\n+      { return __is >> __x._M_p; }\n \n   protected:\n     double _M_p;\n@@ -1478,6 +1584,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * distribution.\n    */\n   template<typename _IntType = int, typename _RealType = double>\n+    class geometric_distribution;\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const geometric_distribution<_IntType, _RealType>& __x);\n+\n+  template<typename _IntType, typename _RealType>\n     class geometric_distribution\n     {\n     public:\n@@ -1519,28 +1634,28 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const geometric_distribution& __x)\n-        { return __os << __x.p(); }\n+\t\t   const geometric_distribution<_IntType1, _RealType1>& __x);\n \n       /**\n        * Extracts a %geometric_distribution random number distribution\n-       * @p __u from the input stream @p __is.\n+       * @p __x from the input stream @p __is.\n        *\n        * @param __is An input stream.\n-       * @param __u  A %geometric_distribution random number generator engine.\n+       * @param __x  A %geometric_distribution random number generator engine.\n        *\n-       * @returns The input stream with @p __u extracted or in an error state.\n+       * @returns The input stream with @p __x extracted or in an error state.\n        */\n       template<typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   geometric_distribution& __u)\n+\t\t   geometric_distribution& __x)\n         {\n-\t  __is >> __u._M_p;\n-\t  __u._M_log_p = std::log(__u._M_p);\n+\t  __is >> __x._M_p;\n+\t  __x._M_log_p = std::log(__x._M_p);\n \t  return __is;\n \t}\n \n@@ -1565,6 +1680,19 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * deliver number in the range [0, 1).\n    */\n   template<typename _RealType = double>\n+    class uniform_real;\n+  \n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const uniform_real<_RealType>& __x);\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       uniform_real<_RealType>& __x);\n+\n+  template<typename _RealType>\n     class uniform_real\n     {\n     public:\n@@ -1613,26 +1741,24 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const uniform_real& __x)\n-        { return __os << __x.min() << \" \" << __x.max(); }\n+\t\t   const uniform_real<_RealType1>& __x);\n \n       /**\n        * Extracts a %unform_real random number distribution\n-       * @p __u from the input stream @p __is.\n+       * @p __x from the input stream @p __is.\n        *\n        * @param __is An input stream.\n-       * @param __u  A %uniform_real random number generator engine.\n+       * @param __x  A %uniform_real random number generator engine.\n        *\n-       * @returns The input stream with @p __u extracted or in an error state.\n+       * @returns The input stream with @p __x extracted or in an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   uniform_real& __u)\n-        { return __is >> __u._M_min >> __u._M_max; }\n+\t\t   uniform_real<_RealType1>& __x);\n \n     protected:\n       _RealType _M_min;\n@@ -1656,6 +1782,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * </table>\n    */\n   template<typename _RealType = double>\n+    class exponential_distribution;\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const exponential_distribution<_RealType>& __x);\n+\n+  template<typename _RealType>\n     class exponential_distribution\n     {\n     public:\n@@ -1705,26 +1839,25 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const exponential_distribution& __x)\n-        { return __os << __x.lambda(); }\n+\t\t   const exponential_distribution<_RealType1>& __x);\n \n       /**\n        * Extracts a %exponential_distribution random number distribution\n-       * @p __u from the input stream @p __is.\n+       * @p __x from the input stream @p __is.\n        *\n        * @param __is An input stream.\n-       * @param __u  A %exponential_distribution random number generator engine.\n+       * @param __x  A %exponential_distribution random number generator engine.\n        *\n-       * @returns The input stream with @p __u extracted or in an error state.\n+       * @returns The input stream with @p __x extracted or in an error state.\n        */\n       template<typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   exponential_distribution& __u)\n-        { return __is >> __u._M_lambda; }\n+\t\t   exponential_distribution& __x)\n+        { return __is >> __x._M_lambda; }\n \n     private:\n       result_type _M_lambda;\n@@ -1739,6 +1872,19 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    *            e^{- \\frac{{x - mean}^ {2}}{2 \\sigma ^ {2}} } @f$.\n    */\n   template<typename _RealType = double>\n+    class normal_distribution;\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const normal_distribution<_RealType>& __x);\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       normal_distribution<_RealType>& __x);\n+\n+  template<typename _RealType>\n     class normal_distribution\n     {\n     public:\n@@ -1794,32 +1940,24 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @returns The output stream with the state of @p __x inserted or in\n        * an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n         friend std::basic_ostream<_CharT, _Traits>&\n         operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const normal_distribution& __x)\n-        { \n-\t  return __os << __x.mean() << \" \" << __x.sigma()\n-\t\t      << \" \" << __x._M_saved << \" \" << __x._M_saved_available;\n-\t}\n+\t\t   const normal_distribution<_RealType1>& __x);\n \n       /**\n        * Extracts a %normal_distribution random number distribution\n-       * @p __u from the input stream @p __is.\n+       * @p __x from the input stream @p __is.\n        *\n        * @param __is An input stream.\n-       * @param __u  A %normal_distribution random number generator engine.\n+       * @param __x  A %normal_distribution random number generator engine.\n        *\n-       * @returns The input stream with @p __u extracted or in an error state.\n+       * @returns The input stream with @p __x extracted or in an error state.\n        */\n-      template<typename _CharT, typename _Traits>\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   normal_distribution& __u)\n-        {\n-\t  return __is >> __u._M_mean >> __u._M_sigma\n-\t\t      >> __u._M_saved >> __u._M_saved_available;\n-\t}\n+\t\t   normal_distribution<_RealType1>& __x);\n \n     private:\n       result_type _M_mean;"}, {"sha": "562ea9ed1e3c729ab4b2625a70bfaa9169aa4de9", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 373, "deletions": 0, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe3e83159fa545f90a81e81321a77ca9f6fd6c0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=bfe3e83159fa545f90a81e81321a77ca9f6fd6c0", "patch": "@@ -94,6 +94,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       __mod(_Tp __x)\n       { return _Mod<_Tp, __a, __c, __m, __m == 0>::__calc(__x); }\n \n+    // See N1822.\n+    template<typename _RealType>\n+      struct _Max_digits10\n+      { \n+\tstatic const std::streamsize __value =\n+\t  2 + std::numeric_limits<_RealType>::digits * 3010/10000;\n+      };\n+\n   } // namespace _Private\n \n \n@@ -167,6 +175,40 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return _M_x;\n     }\n \n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const linear_congruential<_UIntType, __a, __c, __m>& __lcr)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      __os.flags(std::ios_base::dec | std::ios_base::fixed\n+\t\t | std::ios_base::left);\n+      __os.fill(__os.widen(' '));\n+\n+      __os << __lcr._M_x;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       linear_congruential<_UIntType, __a, __c, __m>& __lcr)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::dec);\n+\n+      __is >> __lcr._M_x;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    } \n+\n \n   template<class _UIntType, int __w, int __n, int __m, int __r,\n \t   _UIntType __a, int __u, int __s,\n@@ -255,6 +297,50 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return __z;\n     }\n \n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n+\t   _UIntType __c, int __l,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const mersenne_twister<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::dec | std::ios_base::fixed\n+\t\t | std::ios_base::left);\n+      __os.fill(__space);\n+\n+      for (int __i = 0; __i < __n - 1; ++__i)\n+\t__os << __x._M_x[__i] << __space;\n+      __os << __x._M_x[__n - 1];\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n+\t   _UIntType __c, int __l,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       mersenne_twister<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+\n+      for (int __i = 0; __i < __n; ++__i)\n+\t__is >> __x._M_x[__i];\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n \n   template<typename _IntType, _IntType __m, int __s, int __r>\n     void\n@@ -332,6 +418,45 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return __xi;\n     }\n \n+  template<typename _IntType, _IntType __m, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const subtract_with_carry<_IntType, __m, __s, __r>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::dec | std::ios_base::fixed\n+\t\t | std::ios_base::left);\n+      __os.fill(__space);\n+\n+      for (int __i = 0; __i < __r; ++__i)\n+\t__os << __x._M_x[__i] << __space;\n+      __os << __x._M_carry;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       subtract_with_carry<_IntType, __m, __s, __r>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+\n+      for (int __i = 0; __i < __r; ++__i)\n+\t__is >> __x._M_x[__i];\n+      __is >> __x._M_carry;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n \n   template<class _UniformRandomNumberGenerator, int __p, int __r>\n     typename discard_block<_UniformRandomNumberGenerator,\n@@ -352,6 +477,215 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return _M_b();\n     }\n \n+  template<class _UniformRandomNumberGenerator, int __p, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const discard_block<_UniformRandomNumberGenerator,\n+\t       __p, __r>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::dec | std::ios_base::fixed\n+\t\t | std::ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x._M_b << __space << __x._M_n;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<class _UniformRandomNumberGenerator, int __p, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       discard_block<_UniformRandomNumberGenerator, __p, __r>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+\n+      __is >> __x._M_b >> __x._M_n;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t       _UniformRandomNumberGenerator2, __s2>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::dec | std::ios_base::fixed \n+\t\t | std::ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x.base1() << __space << __x.base2();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os; \n+    }\n+\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t       _UniformRandomNumberGenerator2, __s2>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::skipws);\n+\n+      __is >> __x._M_b1 >> __x._M_b2;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const uniform_int<_IntType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x.min() << __space << __x.max();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       uniform_int<_IntType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+\n+      __is >> __x._M_min >> __x._M_max;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+  \n+  template<typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const bernoulli_distribution& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(_Private::_Max_digits10<double>::__value);\n+\n+      __os << __x.p();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const geometric_distribution<_IntType, _RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(_Private::_Max_digits10<_RealType>::__value);\n+\n+      __os << __x.p();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const uniform_real<_RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(_Private::_Max_digits10<_RealType>::__value);\n+\n+      __os << __x.min() << __space << __x.max();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       uniform_real<_RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::skipws);\n+\n+      __is >> __x._M_min >> __x._M_max;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const exponential_distribution<_RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(_Private::_Max_digits10<_RealType>::__value);\n+\n+      __os << __x.lambda();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n \n   /**\n    * Classic Box-Muller method.\n@@ -394,5 +728,44 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \treturn __ret * _M_sigma + _M_mean;\n       }\n \n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const normal_distribution<_RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(_Private::_Max_digits10<_RealType>::__value);\n+\n+      __os << __x.mean() << __space\n+\t   << __x.sigma() << __space\n+\t   << __x._M_saved << __space\n+\t   << __x._M_saved_available;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       normal_distribution<_RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+\n+      __is >> __x._M_mean >> __x._M_sigma\n+\t   >> __x._M_saved >> __x._M_saved_available;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE\n }"}]}