{"sha": "6669dbdf742219dc81ae087c51c6ddf771b13d3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2OWRiZGY3NDIyMTlkYzgxYWUwODdjNTFjNmRkZjc3MWIxM2QzZg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-12-31T18:10:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-12-31T18:10:55Z"}, "message": "re PR fortran/34558 (ICE with same TYPE in both program and interface)\n\n2007-12-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34558\n\t* interface.c (gfc_compare_types): Prevent linked lists from\n\tputting this function into an endless recursive loop.\n\n2007-12-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34558\n\t* gfortran.dg/linked_list_1.f90: New test.\n\nFrom-SVN: r131239", "tree": {"sha": "f059e5148388d6888288e17ece622dde134f4e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f059e5148388d6888288e17ece622dde134f4e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6669dbdf742219dc81ae087c51c6ddf771b13d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6669dbdf742219dc81ae087c51c6ddf771b13d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6669dbdf742219dc81ae087c51c6ddf771b13d3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6669dbdf742219dc81ae087c51c6ddf771b13d3f/comments", "author": null, "committer": null, "parents": [{"sha": "63287e10a8527f9ed9d7c3939943ab1bc66aa46b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63287e10a8527f9ed9d7c3939943ab1bc66aa46b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63287e10a8527f9ed9d7c3939943ab1bc66aa46b"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "519251efb2e4f3923b3ff32290e9612280085a6e", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6669dbdf742219dc81ae087c51c6ddf771b13d3f/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6669dbdf742219dc81ae087c51c6ddf771b13d3f/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=6669dbdf742219dc81ae087c51c6ddf771b13d3f", "patch": "@@ -407,17 +407,19 @@ gfc_compare_derived_types (gfc_symbol *derived1, gfc_symbol *derived2)\n       if (dt1->dimension && gfc_compare_array_spec (dt1->as, dt2->as) == 0)\n \treturn 0;\n \n-      /* Make sure that link lists do not put this function in an\n-\t endless loop!  */\n+      /* Make sure that link lists do not put this function into an \n+\t endless recursive loop!  */\n       if (!(dt1->ts.type == BT_DERIVED && derived1 == dt1->ts.derived)\n \t    && !(dt1->ts.type == BT_DERIVED && derived1 == dt1->ts.derived)\n \t    && gfc_compare_types (&dt1->ts, &dt2->ts) == 0)\n \treturn 0;\n \n-      else if (dt1->ts.type != BT_DERIVED\n-\t\t || derived1 != dt1->ts.derived\n-\t\t || dt2->ts.type != BT_DERIVED\n-\t\t || derived2 != dt2->ts.derived)\n+      else if ((dt1->ts.type == BT_DERIVED && derived1 == dt1->ts.derived)\n+\t\t&& !(dt1->ts.type == BT_DERIVED && derived1 == dt1->ts.derived))\n+\treturn 0;\n+\n+      else if (!(dt1->ts.type == BT_DERIVED && derived1 == dt1->ts.derived)\n+\t\t&& (dt1->ts.type == BT_DERIVED && derived1 == dt1->ts.derived))\n \treturn 0;\n \n       dt1 = dt1->next;"}]}